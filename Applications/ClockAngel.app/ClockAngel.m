id sub_100002608(unsigned char *a1, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, long double a9)
{
  return sub_100002644(a1, a5, a2, a3, a4, a6, a7, 0, a9, a8);
}

id sub_100002644(unsigned char *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long double a9, uint64_t a10)
{
  v19 = +[_SUITimeFormatData instanceForLocale:a10];
  v20 = v19;
  if (a9 > 600.0 && a7 != 0)
  {
    if (a9 <= 36000.0) {
      [v19 abbreviatedHourMinuteDateFormatter];
    }
    else {
    v32 = [v19 abbreviatedHourDateFormatter];
    }
    v33 = [(__CFString *)v32 stringFromTimeInterval:(double)a9];
    goto LABEL_48;
  }
  int v66 = a3;
  v63 = a1;
  v64 = v19;
  id v22 = v19;
  double v23 = fmod(a9, 1.0);
  unint64_t v24 = (unint64_t)a9;
  unint64_t v25 = (unint64_t)a9 / 0x3C;
  int v67 = a4;
  int v65 = a8;
  if (a5)
  {
    unint64_t v26 = v25 - 60 * ((unint64_t)((v25 * (unsigned __int128)0x888888888888889uLL) >> 64) >> 1);
    unint64_t v27 = v24 / 0xE10;
  }
  else
  {
    unint64_t v27 = 0;
    unint64_t v26 = (unint64_t)a9 / 0x3C;
  }
  if (v27) {
    int v28 = 1;
  }
  else {
    int v28 = a2;
  }
  v29 = [v22 singleWidthNumberFormatter];
  if (v28 == 1)
  {
    v30 = +[NSNumber numberWithUnsignedInteger:v27];
    v31 = [v29 stringFromNumber:v30];
  }
  else
  {
    v31 = &stru_1000B5F18;
    if (!a6) {
      goto LABEL_20;
    }
  }
  uint64_t v34 = [v22 doubleWidthNumberFormatter];

  v29 = (void *)v34;
LABEL_20:
  v35 = +[NSNumber numberWithUnsignedInteger:v26];
  v36 = [v29 stringFromNumber:v35];

  if (v67)
  {
    unint64_t v37 = v24 - 60 * v25;
    v38 = [v22 doubleWidthNumberFormatter];
    v39 = +[NSNumber numberWithUnsignedInteger:v37];
    v40 = [v38 stringFromNumber:v39];
  }
  else
  {
    v40 = &stru_1000B5F18;
  }
  if (v66)
  {
    v41 = [v22 doubleWidthNumberFormatter];
    v42 = +[NSNumber numberWithUnsignedInteger:(unint64_t)(v23 * 100.0)];
    v43 = [v41 stringFromNumber:v42];
  }
  else
  {
    v43 = &stru_1000B5F18;
  }
  v44 = v31;
  id v45 = v36;
  v46 = v40;
  v47 = v43;

  v32 = v44;
  id v48 = v45;
  v49 = v46;
  v50 = v47;
  if (v28)
  {
    if (v67 && !a7)
    {
      v51 = v63;
      if (v66) {
        [v22 formatHourMinSecSubsec];
      }
      else {
        [v22 formatHourMinSec];
      }
      goto LABEL_31;
    }
    uint64_t v53 = [v22 formatHourMin];
  }
  else if (v67)
  {
    if (!a7)
    {
      v51 = v63;
      if (v66) {
        [v22 formatMinSecSubsec];
      }
      else {
        [v22 formatMinSec];
      }
      uint64_t v52 = LABEL_31:;
      v54 = (void *)v52;
      v20 = v64;
      if (!v51) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    uint64_t v53 = [v22 formatMinSec];
  }
  else
  {
    uint64_t v53 = [v22 formatMin];
  }
  v54 = (void *)v53;
  v51 = v63;
  v20 = v64;
  if (v63) {
LABEL_38:
  }
    unsigned char *v51 = v28;
LABEL_39:
  if ((v28 & 1) == 0)
  {
    uint64_t v55 = +[NSString stringWithFormat:@"HH%@", v54];

    v54 = (void *)v55;
  }
  v56 = [v54 stringByReplacingOccurrencesOfString:@"HH" withString:@"%1$@"];

  v57 = [v56 stringByReplacingOccurrencesOfString:@"H" withString:@"%1$@"];

  v58 = [v57 stringByReplacingOccurrencesOfString:@"mm" withString:@"%2$@"];

  v59 = [v58 stringByReplacingOccurrencesOfString:@"m" withString:@"%2$@"];

  v60 = [v59 stringByReplacingOccurrencesOfString:@"ss" withString:@"%3$@"];

  v61 = [v60 stringByReplacingOccurrencesOfString:@"SS" withString:@"%4$@"];

  if (v65)
  {
    if ([(__CFString *)v50 length])
    {

      v50 = @"−−";
    }
    if (a9 >= 60.0 && [(__CFString *)v49 length])
    {

      v49 = @"−−";
    }
  }
  v33 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v61, v32, v48, v49, v50);

LABEL_48:

  return v33;
}

id sub_100002BCC(unsigned char *a1, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, long double a9)
{
  return sub_100002644(a1, a5, a2, a3, a4, a6, a7, 1, a9, a8);
}

void sub_100002D28(id a1)
{
  qword_1000C7158 = (uint64_t)objc_alloc_init((Class)NSLock);

  _objc_release_x1();
}

double sub_1000031D0(double a1)
{
  double v1 = a1;
  double v2 = a1 * 1000.0;
  if (v2 <= 1.84467441e19)
  {
    int v3 = dword_100094758[(121 * ((unint64_t)v2 % 0x64)) >> 12];
    return (double)(unint64_t)((double)(int)(10 * (arc4random_uniform(3u) + v3)) + floor(v1 * 10.0) * 100.0)
         / 1000.0;
  }
  return v1;
}

id sub_1000033F0(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000034B4;
  v6[3] = &unk_1000B2868;
  id v7 = *(id *)(a1 + 32);
  int v3 = [a2 na_firstObjectPassingTest:v6];
  v4 = +[NAFuture futureWithResult:v3];

  return v4;
}

id sub_1000034B4(uint64_t a1, void *a2)
{
  int v3 = [a2 timerIDString];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000034F8(uint64_t a1, void *a2)
{
  id v4 = [a2 timerByUpdatingWithState:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 32) updateTimer:v4];
}

int main(int argc, const char **argv, const char **envp)
{
  int v3 = static CommandLine.argc.getter();
  id v4 = (char **)static CommandLine.unsafeArgv.getter();
  type metadata accessor for Application();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v6 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AppDelegate();
  id v7 = (objc_class *)swift_getObjCClassFromMetadata();
  v8 = NSStringFromClass(v7);
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  UIApplicationMain(v3, v4, v6, v8);

  return 0;
}

uint64_t variable initialization expression of Atomic.lock()
{
  type metadata accessor for CPUnfairLock();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void type metadata accessor for MTStopwatchState(uint64_t a1)
{
}

void type metadata accessor for SBUISystemApertureElementIdentifier(uint64_t a1)
{
}

void type metadata accessor for SBUISystemApertureContentRole(uint64_t a1)
{
}

void type metadata accessor for SBUISystemApertureLayoutMode(uint64_t a1)
{
}

void type metadata accessor for SBUISystemAperturePresentationBehaviors(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

BOOL sub_1000036CC(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000036E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_10000370C(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_100003714@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100003728@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_10000373C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100003768@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10000378C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1000037A0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000037B4(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000037C8(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000037DC(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000037F0()
{
  return *v0 == 0;
}

uint64_t sub_100003800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100003818(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_10000382C(uint64_t a1, uint64_t a2)
{
  return sub_100003EFC(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void *sub_100003850@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100003860(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100003874(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000038EC(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10000396C@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000039B0(uint64_t a1, uint64_t a2)
{
  return sub_100003EFC(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void *sub_1000039C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000039DC(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100003A0C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100003A20(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_100003A34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1000040DC(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_100003A78@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100003A84()
{
  return sub_100003B14(&qword_1000C2E58, type metadata accessor for SBUISystemAperturePresentationBehaviors);
}

uint64_t sub_100003ACC()
{
  return sub_100003B14(&qword_1000C2E60, type metadata accessor for SBUISystemAperturePresentationBehaviors);
}

uint64_t sub_100003B14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100003B5C()
{
  return sub_100003B14(&qword_1000C2E68, type metadata accessor for SBUISystemAperturePresentationBehaviors);
}

uint64_t sub_100003BA4()
{
  return sub_100003B14(&qword_1000C2E70, type metadata accessor for SBUISystemAperturePresentationBehaviors);
}

uint64_t sub_100003BF0(uint64_t a1)
{
  uint64_t v2 = sub_100003B14(&qword_1000C2EF0, type metadata accessor for SBUISystemApertureElementIdentifier);
  uint64_t v3 = sub_100003B14(&qword_1000C2EF8, type metadata accessor for SBUISystemApertureElementIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003CAC()
{
  return sub_100003B14(&qword_1000C2E78, type metadata accessor for SBUISystemApertureElementIdentifier);
}

uint64_t sub_100003CF4()
{
  return sub_100003B14(&qword_1000C2E80, type metadata accessor for SBUISystemApertureElementIdentifier);
}

uint64_t sub_100003D3C(uint64_t a1)
{
  uint64_t v2 = sub_100003B14((unint64_t *)&qword_1000C2F90, type metadata accessor for LaunchOptionsKey);
  uint64_t v3 = sub_100003B14(&qword_1000C2F98, type metadata accessor for LaunchOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003DF8@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100003E40(uint64_t a1)
{
  uint64_t v2 = sub_100003B14(&qword_1000C2FC0, type metadata accessor for Key);
  uint64_t v3 = sub_100003B14(&qword_1000C2FC8, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003EFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100003F40()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100003F94()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100004008()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100004094()
{
  return sub_100003B14(&qword_1000C2E88, type metadata accessor for SBUISystemApertureElementIdentifier);
}

uint64_t sub_1000040DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AlarmAlertTrailingView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_10000414C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100004160(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100004180(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for ActivationState(uint64_t a1)
{
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
}

uint64_t sub_1000041F4()
{
  return sub_100003B14(&qword_1000C2F78, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_10000423C()
{
  return sub_100003B14(&qword_1000C2F80, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_100004284()
{
  return sub_100003B14(&qword_1000C2F88, type metadata accessor for LaunchOptionsKey);
}

void type metadata accessor for Key(uint64_t a1)
{
}

void sub_1000042E0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100004328()
{
  return sub_100003B14(&qword_1000C2FA8, type metadata accessor for Key);
}

uint64_t sub_100004370()
{
  return sub_100003B14(&qword_1000C2FB0, type metadata accessor for Key);
}

uint64_t sub_1000043B8()
{
  return sub_100003B14(&qword_1000C2FB8, type metadata accessor for Key);
}

uint64_t sub_10000442C()
{
  return swift_retain();
}

uint64_t destroy for AlarmSnoozeCountdownLabelView(id *a1)
{
  return sub_100004474();
}

uint64_t sub_100004474()
{
  return swift_release();
}

uint64_t initializeWithCopy for AlarmSnoozeCountdownLabelView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  id v8 = v4;
  sub_10000442C();
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for AlarmSnoozeCountdownLabelView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  sub_10000442C();
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  sub_100004474();
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for AlarmSnoozeCountdownLabelView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AlarmSnoozeCountdownLabelView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  char v5 = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v5;
  sub_100004474();
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlarmSnoozeCountdownLabelView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlarmSnoozeCountdownLabelView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmSnoozeCountdownLabelView()
{
  return &type metadata for AlarmSnoozeCountdownLabelView;
}

uint64_t sub_100004678(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *sub_1000046D0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    char v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *char v3 = v12;
      }
      else
      {
        v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *char v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AlarmSnoozeCountdownControlView(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

ValueMetadata *type metadata accessor for AlarmSnoozeCountdownControlView()
{
  return &type metadata for AlarmSnoozeCountdownControlView;
}

ValueMetadata *type metadata accessor for AlarmAlertTrailingView()
{
  return &type metadata for AlarmAlertTrailingView;
}

ValueMetadata *type metadata accessor for AlarmAlertLeadingView()
{
  return &type metadata for AlarmAlertLeadingView;
}

ValueMetadata *type metadata accessor for AlarmSnoozeCompressedLeadingView()
{
  return &type metadata for AlarmSnoozeCompressedLeadingView;
}

uint64_t *sub_100004970(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    int v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *((void *)v10 + 1);
    char v13 = v10[16];
    sub_10000442C();
    *(void *)int v9 = v11;
    *((void *)v9 + 1) = v12;
    v9[16] = v13;
  }
  return a1;
}

uint64_t sub_100004A64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return sub_100004474();
}

uint64_t sub_100004AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  int v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  char v12 = *((unsigned char *)v9 + 16);
  sub_10000442C();
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 16) = v12;
  return a1;
}

uint64_t sub_100004B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  int v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  char v12 = *((unsigned char *)v9 + 16);
  sub_10000442C();
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 16) = v12;
  sub_100004474();
  return a1;
}

uint64_t sub_100004C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  return a1;
}

uint64_t sub_100004CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = v10;
  sub_100004474();
  return a1;
}

uint64_t sub_100004D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100004D6C);
}

uint64_t sub_100004D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 16);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100004E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100004E40);
}

uint64_t sub_100004E40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 16) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for AlarmSnoozeCompressedTrailingView(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C30E8);
}

uint64_t sub_100004F20()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100004FB4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_100004FD8(void *a1@<X8>)
{
  *a1 = 0x69662E6D72616C61;
  a1[1] = 0xEA00000000006C6CLL;
}

uint64_t sub_100004FFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  long long v4 = (int *)type metadata accessor for RunningCountdownView(0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007830(&qword_1000C3200);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v6, v2, v9);
  if (qword_1000C2CB8 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1000CAF48;
  id v11 = [self mtOrange];
  uint64_t v12 = Color.init(uiColor:)();
  v6[v4[5]] = 0;
  *(void *)&v6[v4[6]] = 0x402F000000000000;
  *(void *)&v6[v4[7]] = v10;
  *(void *)&v6[v4[8]] = v12;
  v6[v4[9]] = 0;
  sub_10000F8A0(&qword_1000C3208, (void (*)(uint64_t))type metadata accessor for RunningCountdownView);
  View.accessibilityHidden(_:)();
  sub_10000C5BC((uint64_t)v6, type metadata accessor for RunningCountdownView);
  type metadata accessor for AlarmSnoozeCompressedTrailingView(0);
  type metadata accessor for EnvironmentDelegate(0);
  sub_10000F8A0(&qword_1000C3138, (void (*)(uint64_t))type metadata accessor for EnvironmentDelegate);
  uint64_t v13 = StateObject.wrappedValue.getter();
  uint64_t v14 = static ObservableObject.environmentStore.getter();
  sub_10000FA94((uint64_t)v8, a1, &qword_1000C3200);
  v15 = (uint64_t *)(a1 + *(int *)(sub_100007830(&qword_1000C3210) + 36));
  uint64_t *v15 = v14;
  v15[1] = v13;
  return sub_10000FAF8((uint64_t)v8, &qword_1000C3200);
}

uint64_t sub_1000052D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000052EC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100005308@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = *a1;
  sub_10000F9F0((uint64_t)(a1 + 1), (uint64_t)v23 + 8);
  sub_10000F9F0((uint64_t)(a1 + 6), (uint64_t)v24);
  *(void *)&v23[0] = v4;
  id v5 = v4;
  LOBYTE(v4) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  sub_10000C4E8((uint64_t)v23, (uint64_t)v18);
  BYTE8(v19) = (_BYTE)v4;
  *(void *)&long long v20 = v7;
  *((void *)&v20 + 1) = v9;
  *(void *)&long long v21 = v11;
  *((void *)&v21 + 1) = v13;
  char v22 = 0;
  sub_10000FA54((id *)v23);
  v24[3] = v20;
  v24[4] = v21;
  char v25 = v22;
  v23[2] = v18[2];
  v24[0] = v18[3];
  v24[1] = v18[4];
  v24[2] = v19;
  v23[0] = v18[0];
  v23[1] = v18[1];
  uint64_t v14 = *a1;
  sub_10000FA94((uint64_t)v23, (uint64_t)v18, &qword_1000C35F0);
  sub_10000FA94((uint64_t)v18, a2, &qword_1000C35F0);
  *(void *)(a2 + 136) = 0;
  *(unsigned char *)(a2 + 144) = 1;
  *(void *)(a2 + 152) = v14;
  *(void *)(a2 + 160) = sub_100004FF8;
  *(void *)(a2 + 168) = 0;
  *(_WORD *)(a2 + 176) = 256;
  id v15 = v14;
  sub_10000442C();
  id v16 = v15;
  sub_10000FAF8((uint64_t)v23, &qword_1000C35F0);

  sub_100004474();
  return sub_10000FAF8((uint64_t)v18, &qword_1000C35F0);
}

uint64_t sub_10000549C@<X0>(uint64_t a1@<X8>)
{
  v5[0] = static VerticalAlignment.center.getter();
  v5[1] = 0;
  char v6 = 1;
  sub_100005308(v1, (uint64_t)&v7);
  char v3 = static Edge.Set.horizontal.getter();
  sub_10000FA94((uint64_t)v5, (uint64_t)v8, &qword_1000C35E0);
  v8[208] = v3;
  long long v9 = 0u;
  long long v10 = 0u;
  char v11 = 1;
  sub_10000FAF8((uint64_t)v5, &qword_1000C35E0);
  sub_10000FA94((uint64_t)v8, a1, &qword_1000C35E8);
  *(unsigned char *)(a1 + 249) = 1;
  return sub_10000FAF8((uint64_t)v8, &qword_1000C35E8);
}

uint64_t sub_100005560()
{
  type metadata accessor for EnvironmentDelegate(0);
  uint64_t v0 = swift_allocObject();
  sub_100007830(&qword_1000C3218);
  Published.init(initialValue:)();
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue);
  *uint64_t v1 = 0;
  v1[1] = 0xE000000000000000;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 0;
  return v0;
}

uint64_t sub_1000055F4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v61 = a4;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  sub_100007830(&qword_1000C3128);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v8 = &v51[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v13 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  int v65 = &v51[-v14];
  id v15 = (int *)type metadata accessor for RunningCountdownView(0);
  __chkstk_darwin(v15);
  uint64_t v17 = &v51[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v56 = sub_100007830(&qword_1000C3130);
  uint64_t v18 = __chkstk_darwin(v56);
  v64 = &v51[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = __chkstk_darwin(v18);
  v54 = &v51[-v21];
  __chkstk_darwin(v20);
  v60 = &v51[-v22];
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v23 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v57 = v24;
  uint64_t v58 = v23;
  int v52 = v25;
  uint64_t v59 = v26;
  if (qword_1000C2CB0 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_1000CAF40;
  int v28 = self;
  uint64_t v55 = v27;
  swift_retain();
  id v29 = [v28 mtOrange];
  uint64_t v53 = Color.init(uiColor:)();
  id v30 = [a1 snoozeFireDate];
  if (!v30)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_10:
    Date.init()();
    sub_10000FAF8((uint64_t)v8, &qword_1000C3128);
    __int16 v33 = v61;
    if ((v61 & 0x100) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  v31 = v30;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v32 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32);
  v32(v8, v13, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    goto LABEL_10;
  }
  v32(v65, v8, v9);
  __int16 v33 = v61;
  if ((v61 & 0x100) != 0)
  {
LABEL_6:
    if (qword_1000C2CA8 != -1) {
      swift_once();
    }
    uint64_t v34 = &qword_1000CAF38;
    uint64_t v35 = 0x4048000000000000;
    goto LABEL_16;
  }
LABEL_11:
  if (qword_1000C2CD0 != -1) {
    swift_once();
  }
  uint64_t v35 = qword_1000CAF60;
  if (qword_1000C2CD8 != -1) {
    swift_once();
  }
  uint64_t v34 = &qword_1000CAF68;
LABEL_16:
  char v36 = v52 & 1;
  uint64_t v37 = *v34;
  id v38 = [v28 mtOrange];
  uint64_t v39 = Color.init(uiColor:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v17, v65, v9);
  v17[v15[5]] = 0;
  *(void *)&v17[v15[6]] = v35;
  *(void *)&v17[v15[7]] = v37;
  *(void *)&v17[v15[8]] = v39;
  v17[v15[9]] = (v33 & 0x100) == 0;
  type metadata accessor for EnvironmentDelegate(0);
  sub_10000F8A0(&qword_1000C3138, (void (*)(uint64_t))type metadata accessor for EnvironmentDelegate);
  uint64_t v40 = StateObject.wrappedValue.getter();
  uint64_t v41 = static ObservableObject.environmentStore.getter();
  v42 = v54;
  sub_10000C554((uint64_t)v17, (uint64_t)v54, type metadata accessor for RunningCountdownView);
  v43 = (uint64_t *)&v42[*(int *)(v56 + 36)];
  uint64_t *v43 = v41;
  v43[1] = v40;
  sub_10000C5BC((uint64_t)v17, type metadata accessor for RunningCountdownView);
  v44 = v60;
  sub_10000F834((uint64_t)v42, (uint64_t)v60, &qword_1000C3130);
  id v45 = v64;
  sub_10000FA94((uint64_t)v44, (uint64_t)v64, &qword_1000C3130);
  uint64_t v47 = v57;
  uint64_t v46 = v58;
  *(void *)a5 = v58;
  *(void *)(a5 + 8) = v47;
  *(unsigned char *)(a5 + 16) = v36;
  uint64_t v48 = v55;
  *(void *)(a5 + 24) = v59;
  *(void *)(a5 + 32) = v48;
  *(void *)(a5 + 40) = v53;
  *(void *)(a5 + 48) = 0;
  *(unsigned char *)(a5 + 56) = 1;
  uint64_t v49 = sub_100007830(&qword_1000C3140);
  sub_10000FA94((uint64_t)v45, a5 + *(int *)(v49 + 48), &qword_1000C3130);
  sub_10000C484(v46, v47, v36);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10000FAF8((uint64_t)v44, &qword_1000C3130);
  sub_10000FAF8((uint64_t)v45, &qword_1000C3130);
  sub_10000C494(v46, v47, v36);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100005C9C@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  unsigned int v6 = *(unsigned __int8 *)(v1 + 24);
  int v7 = *(unsigned __int8 *)(v1 + 25);
  *(void *)a1 = static VerticalAlignment.firstTextBaseline.getter();
  *(void *)(a1 + 8) = 0x4014000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v8 = a1 + *(int *)(sub_100007830(&qword_1000C3120) + 44);
  if (v7) {
    int v9 = 256;
  }
  else {
    int v9 = 0;
  }
  return sub_1000055F4(v3, v4, v5, v9 | v6, v8);
}

uint64_t sub_100005D28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v35 = a1;
  uint64_t v3 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v3 - 8);
  uint64_t v34 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BlendMode();
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  __chkstk_darwin(v5);
  int v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007830(&qword_1000C3150);
  __chkstk_darwin(v11);
  uint64_t v13 = (void *)((char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1000CAF50;
  static Font.Weight.medium.getter();
  uint64_t v15 = enum case for Font.Design.rounded(_:);
  uint64_t v16 = type metadata accessor for Font.Design();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v10, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
  v31[0] = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v10, &qword_1000C3148);
  uint64_t v19 = v2[9];
  uint64_t v18 = v2[10];
  sub_10000C4A4(v2 + 6, v19);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 56))(v19, v18);
  uint64_t v21 = v2[9];
  uint64_t v22 = v2[10];
  sub_10000C4A4(v2 + 6, v21);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 80))(v21, v22);
  sub_10000C4E8((uint64_t)v2, (uint64_t)v36);
  uint64_t v24 = swift_allocObject();
  long long v25 = v36[3];
  *(_OWORD *)(v24 + 48) = v36[2];
  *(_OWORD *)(v24 + 64) = v25;
  *(_OWORD *)(v24 + 80) = v36[4];
  *(void *)(v24 + 96) = v37;
  long long v26 = v36[1];
  *(_OWORD *)(v24 + 16) = v36[0];
  *(_OWORD *)(v24 + 32) = v26;
  uint64_t v28 = v32;
  uint64_t v27 = v33;
  (*(void (**)(char *, void, uint64_t))(v32 + 104))(v7, enum case for BlendMode.plusLighter(_:), v33);
  uint64_t v29 = (uint64_t)v34;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v34, v7, v27);
  v31[1] = v11;
  sub_10000C554(v29, (uint64_t)v13 + *(int *)(v11 + 36), (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  *uint64_t v13 = v14;
  v13[1] = v31[0];
  v13[2] = 0x6B72616D78;
  v13[3] = 0xE500000000000000;
  v13[4] = v20;
  v13[5] = v23;
  v13[6] = (uint64_t)sub_10000C524;
  v13[7] = v24;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000C5BC(v29, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v27);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  LocalizedStringKey.init(stringLiteral:)();
  sub_10000F52C((unint64_t *)&qword_1000C3158, &qword_1000C3150, (void (*)(void))sub_10000C664);
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10000FAF8((uint64_t)v13, &qword_1000C3150);
}

uint64_t sub_100006240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v4 - 8);
  int v65 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for BlendMode();
  uint64_t v64 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v62 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_100007830(&qword_1000C3150);
  __chkstk_darwin(v72);
  uint64_t v63 = (uint64_t *)((char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100007830(&qword_1000C3170);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v68 = (uint64_t)&v61 - v12;
  uint64_t v13 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007830(&qword_1000C3178);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v67 = (uint64_t)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v61 - v19;
  unsigned int v21 = [*(id *)a1 allowsSnooze];
  uint64_t v22 = &off_1000C2000;
  uint64_t v70 = a2;
  v71 = v20;
  v69 = v11;
  if (v21)
  {
    if (qword_1000C2CC0 != -1) {
      swift_once();
    }
    uint64_t v23 = qword_1000CAF50;
    static Font.Weight.semibold.getter();
    uint64_t v24 = type metadata accessor for Font.Design();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v15, 1, 1, v24);
    uint64_t v25 = static Font.system(size:weight:design:)();
    uint64_t v61 = v25;
    sub_10000FAF8((uint64_t)v15, &qword_1000C3148);
    uint64_t v27 = *(void *)(a1 + 72);
    uint64_t v26 = *(void *)(a1 + 80);
    sub_10000C4A4((void *)(a1 + 48), v27);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v27, v26);
    uint64_t v29 = *(void *)(a1 + 72);
    uint64_t v30 = *(void *)(a1 + 80);
    sub_10000C4A4((void *)(a1 + 48), v29);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30);
    sub_10000C6B8(a1, (uint64_t)&v73);
    uint64_t v32 = swift_allocObject();
    long long v33 = v76;
    *(_OWORD *)(v32 + 48) = v75;
    *(_OWORD *)(v32 + 64) = v33;
    *(_OWORD *)(v32 + 80) = v77;
    *(void *)(v32 + 96) = v78;
    long long v34 = v74;
    *(_OWORD *)(v32 + 16) = v73;
    *(_OWORD *)(v32 + 32) = v34;
    *(void *)&long long v73 = v23;
    *((void *)&v73 + 1) = v25;
    *(void *)&long long v74 = 8026746;
    *((void *)&v74 + 1) = 0xE300000000000000;
    *(void *)&long long v75 = v28;
    *((void *)&v75 + 1) = v31;
    *(void *)&long long v76 = sub_10000C770;
    *((void *)&v76 + 1) = v32;
    LocalizedStringKey.init(stringLiteral:)();
    sub_10000C664();
    uint64_t v35 = (uint64_t)v71;
    View.accessibilityLabel(_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = sub_100007830(&qword_1000C3180);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
    uint64_t v22 = &off_1000C2000;
  }
  else
  {
    uint64_t v37 = sub_100007830(&qword_1000C3180);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v20, 1, 1, v37);
  }
  if (v22[408] != (_UNKNOWN *)-1) {
    swift_once();
  }
  uint64_t v38 = qword_1000CAF50;
  static Font.Weight.semibold.getter();
  uint64_t v39 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v15, 1, 1, v39);
  uint64_t v61 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v15, &qword_1000C3148);
  uint64_t v40 = *(void *)(a1 + 72);
  uint64_t v41 = *(void *)(a1 + 80);
  sub_10000C4A4((void *)(a1 + 48), v40);
  uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 56))(v40, v41);
  uint64_t v43 = *(void *)(a1 + 72);
  uint64_t v44 = *(void *)(a1 + 80);
  sub_10000C4A4((void *)(a1 + 48), v43);
  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 80))(v43, v44);
  sub_10000C6B8(a1, (uint64_t)&v73);
  uint64_t v46 = swift_allocObject();
  long long v47 = v76;
  *(_OWORD *)(v46 + 48) = v75;
  *(_OWORD *)(v46 + 64) = v47;
  *(_OWORD *)(v46 + 80) = v77;
  *(void *)(v46 + 96) = v78;
  long long v48 = v74;
  *(_OWORD *)(v46 + 16) = v73;
  *(_OWORD *)(v46 + 32) = v48;
  uint64_t v49 = v64;
  v50 = v62;
  uint64_t v51 = v66;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v62, enum case for BlendMode.plusLighter(_:), v66);
  uint64_t v52 = (uint64_t)v65;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v65, v50, v51);
  uint64_t v53 = v63;
  sub_10000C554(v52, (uint64_t)v63 + *(int *)(v72 + 36), (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  *uint64_t v53 = v38;
  v53[1] = v61;
  v53[2] = 0x6B72616D78;
  v53[3] = 0xE500000000000000;
  v53[4] = v42;
  v53[5] = v45;
  v53[6] = (uint64_t)sub_10000C6F4;
  v53[7] = v46;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000C5BC(v52, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  LocalizedStringKey.init(stringLiteral:)();
  sub_10000F52C((unint64_t *)&qword_1000C3158, &qword_1000C3150, (void (*)(void))sub_10000C664);
  uint64_t v54 = (uint64_t)v69;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FAF8((uint64_t)v53, &qword_1000C3150);
  uint64_t v55 = v68;
  sub_10000F834(v54, v68, &qword_1000C3170);
  uint64_t v56 = (uint64_t)v71;
  uint64_t v57 = v67;
  sub_10000FA94((uint64_t)v71, v67, &qword_1000C3178);
  sub_10000FA94(v55, v54, &qword_1000C3170);
  uint64_t v58 = v70;
  sub_10000FA94(v57, v70, &qword_1000C3178);
  uint64_t v59 = sub_100007830(&qword_1000C3188);
  sub_10000FA94(v54, v58 + *(int *)(v59 + 48), &qword_1000C3170);
  sub_10000FAF8(v55, &qword_1000C3170);
  sub_10000FAF8(v56, &qword_1000C3178);
  sub_10000FAF8(v54, &qword_1000C3170);
  return sub_10000FAF8(v57, &qword_1000C3178);
}

uint64_t sub_100006B94(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  sub_10000C4A4((void *)(a1 + 8), *(void *)(a1 + 32));
  id v4 = [*(id *)a1 alarmIDString];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  a2(v5, v7);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100006C2C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v3 = sub_100007830(&qword_1000C3168);
  return sub_100006240(v1, a1 + *(int *)(v3 + 44));
}

uint64_t sub_100006C78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v23[1] = a2;
  uint64_t v3 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C3190);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007830(&qword_1000C3198);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100007830(&qword_1000C31A0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v9 = static VerticalAlignment.lastTextBaseline.getter();
  *((void *)v9 + 1) = 0x4010000000000000;
  v9[16] = 0;
  uint64_t v17 = sub_100007830(&qword_1000C31A8);
  sub_100006F68(a1, (uint64_t)&v9[*(int *)(v17 + 44)]);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FA94((uint64_t)v9, (uint64_t)v13, &qword_1000C3190);
  uint64_t v19 = &v13[*(int *)(v11 + 44)];
  *(void *)uint64_t v19 = KeyPath;
  *((void *)v19 + 1) = 1;
  v19[16] = 0;
  sub_10000FAF8((uint64_t)v9, &qword_1000C3190);
  static Alignment.bottomLeading.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FA94((uint64_t)v13, (uint64_t)v16, &qword_1000C3198);
  uint64_t v20 = &v16[*(int *)(v14 + 36)];
  long long v21 = v25;
  *(_OWORD *)uint64_t v20 = v24;
  *((_OWORD *)v20 + 1) = v21;
  *((_OWORD *)v20 + 2) = v26;
  sub_10000FAF8((uint64_t)v13, &qword_1000C3198);
  static AccessibilityChildBehavior.combine.getter();
  sub_10000F52C(&qword_1000C31B0, &qword_1000C31A0, (void (*)(void))sub_10000C868);
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_10000FAF8((uint64_t)v16, &qword_1000C31A0);
}

uint64_t sub_100006F68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v3 = type metadata accessor for Text.DateStyle();
  __chkstk_darwin(v3 - 8);
  v93 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007830(&qword_1000C3128);
  __chkstk_darwin(v5 - 8);
  uint64_t v90 = (uint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v88 = *(void *)(v7 - 8);
  uint64_t v89 = v7;
  __chkstk_darwin(v7);
  v91 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100007830(&qword_1000C31D8);
  __chkstk_darwin(v80);
  v86 = (uint64_t *)((char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v85 = type metadata accessor for Text.TruncationMode();
  uint64_t v83 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  v82 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100007830(&qword_1000C31E0);
  __chkstk_darwin(v79);
  uint64_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_100007830(&qword_1000C31E8);
  uint64_t v13 = __chkstk_darwin(v81);
  uint64_t v87 = (uint64_t)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v95 = (uint64_t)&v77 - v15;
  id v92 = a1;
  id v16 = [a1 displayTitle];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  uint64_t v96 = v17;
  uint64_t v97 = v19;
  sub_10000C92C();
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  char v24 = v23;
  if (qword_1000C2CE0 != -1) {
    swift_once();
  }
  char v25 = v24 & 1;
  uint64_t v26 = Text.font(_:)();
  uint64_t v28 = v27;
  char v30 = v29 & 1;
  sub_10000C494(v20, v22, v25);
  swift_bridgeObjectRelease();
  id v84 = self;
  id v31 = [v84 mtOrange];
  Color.init(uiColor:)();
  uint64_t v32 = Text.foregroundColor(_:)();
  uint64_t v34 = v33;
  char v36 = v35;
  uint64_t v78 = v37;
  swift_release();
  char v38 = v36 & 1;
  sub_10000C494(v26, v28, v30);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = v82;
  uint64_t v41 = v83;
  uint64_t v42 = v85;
  (*(void (**)(char *, void, uint64_t))(v83 + 104))(v82, enum case for Text.TruncationMode.tail(_:), v85);
  uint64_t v43 = swift_getKeyPath();
  uint64_t v44 = v86;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)v86 + *(int *)(v80 + 28), v40, v42);
  uint64_t *v44 = v43;
  sub_10000FA94((uint64_t)v44, (uint64_t)&v12[*(int *)(v79 + 36)], &qword_1000C31D8);
  *(void *)uint64_t v12 = v32;
  *((void *)v12 + 1) = v34;
  v12[16] = v38;
  *((void *)v12 + 3) = v78;
  *((void *)v12 + 4) = KeyPath;
  *((void *)v12 + 5) = 0x3FE6666666666666;
  sub_10000C484(v32, v34, v38);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FAF8((uint64_t)v44, &qword_1000C31D8);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
  sub_10000C494(v32, v34, v38);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v45 = v87;
  sub_10000FA94((uint64_t)v12, v87, &qword_1000C31E0);
  *(_WORD *)(v45 + *(int *)(v81 + 36)) = 256;
  sub_10000FAF8((uint64_t)v12, &qword_1000C31E0);
  sub_10000F834(v45, v95, &qword_1000C31E8);
  type metadata accessor for Utilities();
  id v46 = v92;
  id v47 = [v92 hour];
  id v48 = [v46 minute];
  uint64_t v49 = v90;
  sub_10005CEEC((uint64_t)v47, (uint64_t)v48, v90);
  uint64_t v51 = v88;
  uint64_t v50 = v89;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v49, 1, v89) == 1)
  {
    Date.init()();
    sub_10000FAF8(v49, &qword_1000C3128);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v91, v49, v50);
  }
  static Text.DateStyle.time.getter();
  uint64_t v52 = Text.init(_:style:)();
  uint64_t v54 = v53;
  char v56 = v55;
  if (qword_1000C2CE8 != -1) {
    swift_once();
  }
  uint64_t v57 = Text.font(_:)();
  uint64_t v59 = v58;
  char v61 = v60 & 1;
  sub_10000C494(v52, v54, v56 & 1);
  swift_bridgeObjectRelease();
  id v62 = [v84 mtOrange];
  Color.init(uiColor:)();
  Color.opacity(_:)();
  swift_release();
  uint64_t v63 = Text.foregroundColor(_:)();
  uint64_t v65 = v64;
  char v67 = v66;
  uint64_t v69 = v68;
  swift_release();
  v67 &= 1u;
  sub_10000C494(v57, v59, v61);
  swift_bridgeObjectRelease();
  uint64_t v70 = swift_getKeyPath();
  uint64_t v71 = v95;
  sub_10000FA94(v95, v45, &qword_1000C31E8);
  uint64_t v72 = v94;
  sub_10000FA94(v45, v94, &qword_1000C31E8);
  uint64_t v73 = sub_100007830(&qword_1000C31F8);
  uint64_t v74 = v72 + *(int *)(v73 + 48);
  *(void *)uint64_t v74 = v63;
  *(void *)(v74 + 8) = v65;
  *(unsigned char *)(v74 + 16) = v67;
  *(void *)(v74 + 24) = v69;
  *(void *)(v74 + 32) = v70;
  *(_OWORD *)(v74 + 40) = xmmword_100094F70;
  uint64_t v75 = v72 + *(int *)(v73 + 64);
  *(void *)uint64_t v75 = 0x4014000000000000;
  *(unsigned char *)(v75 + 8) = 0;
  sub_10000C484(v63, v65, v67);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FAF8(v71, &qword_1000C31E8);
  sub_10000C494(v63, v65, v67);
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000FAF8(v45, &qword_1000C31E8);
}

uint64_t sub_1000077D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100006C78(*v1, a1);
}

uint64_t sub_1000077DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000077F8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100007814()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100007830(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100007874@<X0>(id *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100007830(&qword_1000C3350);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C3358);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007830(&qword_1000C3360);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_100007830(&qword_1000C3368);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  GeometryProxy.size.getter();
  double v17 = v16;
  *uint64_t v12 = static Alignment.center.getter();
  v12[1] = v18;
  uint64_t v19 = *(int *)(sub_100007830(&qword_1000C3370) + 44);
  if (qword_1000C2D00 != -1) {
    swift_once();
  }
  double v20 = *(double *)&qword_1000CAF90;
  if (qword_1000C2D08 != -1) {
    swift_once();
  }
  uint64_t v21 = (uint64_t)v12 + v19;
  *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v22 = sub_100007830(&qword_1000C3378);
  sub_100007C28(a1, (uint64_t)&v6[*(int *)(v22 + 44)], v17, v20);
  char v23 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_10000FA94((uint64_t)v6, (uint64_t)v9, &qword_1000C3350);
  uint64_t v32 = &v9[*(int *)(v7 + 36)];
  char *v32 = v23;
  *((void *)v32 + 1) = v25;
  *((void *)v32 + 2) = v27;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  v32[40] = 0;
  sub_10000FAF8((uint64_t)v6, &qword_1000C3350);
  char v33 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  sub_10000FA94((uint64_t)v9, v21, &qword_1000C3358);
  uint64_t v42 = v21 + *(int *)(sub_100007830(&qword_1000C3380) + 36);
  *(unsigned char *)uint64_t v42 = v33;
  *(void *)(v42 + 8) = v35;
  *(void *)(v42 + 16) = v37;
  *(void *)(v42 + 24) = v39;
  *(void *)(v42 + 32) = v41;
  *(unsigned char *)(v42 + 40) = 0;
  sub_10000FAF8((uint64_t)v9, &qword_1000C3358);
  uint64_t v43 = static Color.black.getter();
  char v44 = static Edge.Set.all.getter();
  sub_10000FA94((uint64_t)v12, (uint64_t)v15, &qword_1000C3360);
  uint64_t v45 = &v15[*(int *)(v13 + 36)];
  *(void *)uint64_t v45 = v43;
  v45[8] = v44;
  sub_10000FAF8((uint64_t)v12, &qword_1000C3360);
  LOBYTE(v43) = static Edge.Set.vertical.getter();
  sub_10000FA94((uint64_t)v15, a2, &qword_1000C3368);
  *(unsigned char *)(a2 + *(int *)(sub_100007830(&qword_1000C3388) + 36)) = v43;
  return sub_10000FAF8((uint64_t)v15, &qword_1000C3368);
}

uint64_t sub_100007C28@<X0>(id *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v8 = sub_100007830(&qword_1000C3390);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v20[-v12];
  *(void *)uint64_t v13 = static VerticalAlignment.top.getter();
  *((void *)v13 + 1) = 0;
  v13[16] = 0;
  uint64_t v14 = sub_100007830(&qword_1000C3398);
  sub_100007E24(a1, (uint64_t)&v13[*(int *)(v14 + 44)], a3, a4);
  uint64_t v15 = static VerticalAlignment.center.getter();
  sub_10000B10C(a1, v20);
  v21[376] = 1;
  memcpy(&v21[7], v20, 0x170uLL);
  sub_10000FA94((uint64_t)v13, (uint64_t)v11, &qword_1000C3390);
  sub_10000FA94((uint64_t)v11, a2, &qword_1000C3390);
  uint64_t v16 = sub_100007830(&qword_1000C33A0);
  uint64_t v17 = a2 + *(int *)(v16 + 48);
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = (void *)(a2 + *(int *)(v16 + 64));
  v22[0] = v15;
  v22[1] = 0;
  LOBYTE(v22[2]) = 1;
  memcpy((char *)&v22[2] + 1, v21, 0x177uLL);
  memcpy(v18, v22, 0x188uLL);
  sub_10000E564((uint64_t)v22);
  sub_10000FAF8((uint64_t)v13, &qword_1000C3390);
  v23[0] = v15;
  v23[1] = 0;
  char v24 = 1;
  memcpy(v25, v21, sizeof(v25));
  sub_10000E788((uint64_t)v23);
  return sub_10000FAF8((uint64_t)v11, &qword_1000C3390);
}

uint64_t sub_100007E24@<X0>(id *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v253 = a2;
  uint64_t v250 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v249 = *(void *)(v250 - 8);
  __chkstk_darwin(v250);
  v248 = (char *)&v193 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v223 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v222 = *(void *)(v223 - 8);
  __chkstk_darwin(v223);
  v221 = (char *)&v193 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007830(&qword_1000C33C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v193 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = sub_100007830(&qword_1000C33C8);
  uint64_t v229 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  v226 = (char *)&v193 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007830(&qword_1000C33D0);
  __chkstk_darwin(v13 - 8);
  uint64_t v228 = (uint64_t)&v193 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = sub_100007830(&qword_1000C33D8);
  __chkstk_darwin(v224);
  uint64_t v230 = (uint64_t)&v193 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v225 = sub_100007830(&qword_1000C33E0);
  __chkstk_darwin(v225);
  uint64_t v232 = (uint64_t)&v193 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = sub_100007830(&qword_1000C33E8);
  __chkstk_darwin(v227);
  uint64_t v235 = (uint64_t)&v193 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = sub_100007830(&qword_1000C33F0);
  __chkstk_darwin(v233);
  uint64_t v236 = (uint64_t)&v193 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v234 = sub_100007830(&qword_1000C33F8);
  __chkstk_darwin(v234);
  uint64_t v239 = (uint64_t)&v193 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v237 = sub_100007830(&qword_1000C3400);
  __chkstk_darwin(v237);
  uint64_t v242 = (uint64_t)&v193 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v240 = sub_100007830(&qword_1000C3408);
  __chkstk_darwin(v240);
  uint64_t v241 = (uint64_t)&v193 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = sub_100007830(&qword_1000C3410);
  __chkstk_darwin(v238);
  uint64_t v243 = (uint64_t)&v193 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = sub_100007830(&qword_1000C3418);
  __chkstk_darwin(v245);
  uint64_t v246 = (uint64_t)&v193 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100007830(&qword_1000C3420);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v251 = (uint64_t)&v193 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  v244 = (char *)&v193 - v28;
  __chkstk_darwin(v27);
  uint64_t v247 = (uint64_t)&v193 - v29;
  uint64_t v196 = type metadata accessor for Font.Context();
  uint64_t v195 = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  uint64_t v194 = (uint64_t)&v193 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v256 = type metadata accessor for DynamicTypeSize();
  uint64_t v259 = *(void *)(v256 - 8);
  __chkstk_darwin(v256);
  v255 = (char *)&v193 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100007830(&qword_1000C3428);
  __chkstk_darwin(v32 - 8);
  uint64_t v34 = (char *)&v193 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = sub_100007830(&qword_1000C3430);
  __chkstk_darwin(v203);
  uint64_t v36 = (char *)&v193 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = sub_100007830(&qword_1000C3438);
  __chkstk_darwin(v200);
  uint64_t v38 = (char *)&v193 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v199 = sub_100007830(&qword_1000C3440);
  uint64_t v198 = *(void *)(v199 - 8);
  __chkstk_darwin(v199);
  v197 = (char *)&v193 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100007830(&qword_1000C3448);
  __chkstk_darwin(v40 - 8);
  uint64_t v205 = (uint64_t)&v193 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v204 = sub_100007830(&qword_1000C3450);
  __chkstk_darwin(v204);
  uint64_t v43 = (char *)&v193 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = sub_100007830(&qword_1000C3458);
  __chkstk_darwin(v210);
  uint64_t v209 = (uint64_t)&v193 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v213 = sub_100007830(&qword_1000C3460);
  uint64_t v212 = *(void *)(v213 - 8);
  __chkstk_darwin(v213);
  v211 = (char *)&v193 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v208 = sub_100007830(&qword_1000C3468);
  __chkstk_darwin(v208);
  v215 = (char *)&v193 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = sub_100007830(&qword_1000C3470);
  __chkstk_darwin(v214);
  v216 = (id *)((char *)&v193 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v218 = sub_100007830(&qword_1000C3478);
  __chkstk_darwin(v218);
  uint64_t v219 = (uint64_t)&v193 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100007830(&qword_1000C3480);
  uint64_t v50 = __chkstk_darwin(v49 - 8);
  uint64_t v220 = (uint64_t)&v193 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __chkstk_darwin(v50);
  v217 = (char *)&v193 - v53;
  __chkstk_darwin(v52);
  uint64_t v258 = (uint64_t)&v193 - v54;
  uint64_t v55 = type metadata accessor for AlarmAlertFullScreen(0);
  uint64_t v206 = *(void *)(v55 - 8);
  uint64_t v56 = __chkstk_darwin(v55);
  uint64_t v257 = (uint64_t)&v193 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v207 = v57;
  __chkstk_darwin(v56);
  uint64_t v59 = (char *)&v193 - v58;
  unsigned int v60 = [*a1 isSleepAlarm];
  sub_10000C554((uint64_t)a1, (uint64_t)v59, type metadata accessor for AlarmAlertFullScreen);
  uint64_t v254 = v55;
  if (v60)
  {
    char v61 = a1;
    id v62 = &v59[*(int *)(v55 + 76)];
    uint64_t v64 = *(void *)v62;
    uint64_t v63 = *((void *)v62 + 1);
    *(void *)&long long v265 = v64;
    *((void *)&v265 + 1) = v63;
    sub_100007830(&qword_1000C3580);
    State.wrappedValue.getter();
    uint64_t v65 = v260;
    if (qword_1000C2C80 != -1) {
      swift_once();
    }
    id v66 = sub_100029520();
    if (v66)
    {
      char v67 = v66;
      unsigned int v68 = [v66 isAuthorizedForWidgetUpdates];

      if (v68)
      {
        swift_getKeyPath();
        *(void *)&long long v265 = v65;
        sub_10000F8A0(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        LOBYTE(v68) = *(unsigned char *)(v65 + 48);
      }
    }
    else
    {
      LOBYTE(v68) = 0;
    }
    swift_release();
    a1 = v61;
  }
  else
  {
    LOBYTE(v68) = 0;
  }
  v252 = v11;
  sub_10000C5BC((uint64_t)v59, type metadata accessor for AlarmAlertFullScreen);
  id v69 = *a1;
  if ([*a1 isSleepAlarm])
  {
    uint64_t v70 = sub_100009C3C();
    uint64_t v72 = v71;
    uint64_t v73 = a1;
  }
  else
  {
    uint64_t v73 = a1;
    id v74 = [v69 displayTitle];
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v72 = v75;
  }
  *(void *)uint64_t v34 = static HorizontalAlignment.leading.getter();
  *((void *)v34 + 1) = 0;
  v34[16] = 1;
  uint64_t v76 = sub_100007830(&qword_1000C3488);
  uint64_t v77 = v73;
  sub_100009FC4(v68, v70, v72, (uint64_t)&v34[*(int *)(v76 + 44)]);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FA94((uint64_t)v34, (uint64_t)v36, &qword_1000C3428);
  uint64_t v79 = &v36[*(int *)(v203 + 36)];
  *(void *)uint64_t v79 = KeyPath;
  *((void *)v79 + 1) = 2;
  v79[16] = 0;
  sub_10000FAF8((uint64_t)v34, &qword_1000C3428);
  if (qword_1000C2D10 != -1) {
    swift_once();
  }
  uint64_t v80 = qword_1000CAFA0;
  uint64_t v81 = swift_getKeyPath();
  sub_10000FA94((uint64_t)v36, (uint64_t)v38, &qword_1000C3430);
  v82 = (uint64_t *)&v38[*(int *)(v200 + 36)];
  uint64_t *v82 = v81;
  v82[1] = v80;
  swift_retain();
  sub_10000FAF8((uint64_t)v36, &qword_1000C3430);
  uint64_t v83 = v259;
  id v84 = *(void (**)(void))(v259 + 104);
  uint64_t v85 = v255;
  unsigned int v202 = enum case for DynamicTypeSize.large(_:);
  uint64_t v86 = v256;
  uint64_t v203 = v259 + 104;
  v201 = (void (*)(char *, void, uint64_t))v84;
  v84(v255);
  sub_10000EF54();
  uint64_t v87 = v197;
  View.dynamicTypeSize(_:)();
  uint64_t v88 = *(void (**)(char *, uint64_t))(v83 + 8);
  uint64_t v259 = v83 + 8;
  uint64_t v200 = (uint64_t)v88;
  v88(v85, v86);
  sub_10000FAF8((uint64_t)v38, &qword_1000C3438);
  uint64_t v89 = static Alignment.leading.getter();
  uint64_t v90 = v205;
  double v92 = sub_100071548(0.0, 1, 0.0, 1, a3 * 0.5 - a4, 0, 0.0, 1, v205, 0.0, 1, 0.0, 1, v89, v91);
  (*(void (**)(char *, uint64_t, double))(v198 + 8))(v87, v199, v92);
  if (qword_1000C2D28 != -1) {
    swift_once();
  }
  static Alignment.top.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FA94(v90, (uint64_t)v43, &qword_1000C3448);
  v93 = &v43[*(int *)(v204 + 36)];
  long long v94 = v266;
  *(_OWORD *)v93 = v265;
  *((_OWORD *)v93 + 1) = v94;
  *((_OWORD *)v93 + 2) = v267;
  sub_10000FAF8(v90, &qword_1000C3448);
  uint64_t v95 = v254;
  uint64_t v96 = (uint64_t)v77 + *(int *)(v254 + 40);
  char v97 = *(unsigned char *)v96;
  uint64_t v205 = v96;
  uint64_t v98 = *(void *)(v96 + 8);
  LOBYTE(v260) = v97;
  uint64_t v261 = v98;
  uint64_t v99 = sub_100007830(&qword_1000C33A8);
  State.wrappedValue.getter();
  uint64_t v100 = v257;
  uint64_t v101 = v258;
  if (v264 == 1)
  {
    uint64_t v102 = v194;
    sub_100038DB0(v194);
    v103 = (const __CTFont *)Font.platformFont(in:)();
    (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v102, v196);
    CGFloat CapHeight = CTFontGetCapHeight(v103);
  }
  else
  {
    CGFloat CapHeight = 50.0;
  }
  uint64_t v105 = v209;
  sub_10000FA94((uint64_t)v43, v209, &qword_1000C3450);
  v106 = (CGFloat *)(v105 + *(int *)(v210 + 36));
  CGFloat *v106 = 0.0;
  v106[1] = CapHeight;
  sub_10000FAF8((uint64_t)v43, &qword_1000C3450);
  [*v77 isSleepAlarm];
  sub_10000F52C(&qword_1000C34B8, &qword_1000C3458, (void (*)(void))sub_10000F0B8);
  v107 = v211;
  View.hyphenationFactor(_:)();
  sub_10000FAF8(v105, &qword_1000C3458);
  v108 = (char *)v77 + *(int *)(v95 + 60);
  char v109 = *v108;
  uint64_t v110 = *((void *)v108 + 1);
  LOBYTE(v260) = v109;
  uint64_t v261 = v110;
  State.wrappedValue.getter();
  if (v264) {
    double v111 = 1.0;
  }
  else {
    double v111 = 0.0;
  }
  uint64_t v112 = v212;
  uint64_t v113 = (uint64_t)v215;
  uint64_t v114 = v213;
  (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v215, v107, v213);
  *(double *)(v113 + *(int *)(v208 + 36)) = v111;
  (*(void (**)(char *, uint64_t))(v112 + 8))(v107, v114);
  if (qword_1000C2E08 != -1) {
    swift_once();
  }
  uint64_t v213 = v99;
  uint64_t v115 = qword_1000CB098;
  uint64_t v116 = (uint64_t)v216;
  sub_10000FA94(v113, (uint64_t)v216, &qword_1000C3468);
  *(void *)(v116 + *(int *)(v214 + 36)) = v115;
  swift_retain();
  sub_10000FAF8(v113, &qword_1000C3468);
  sub_10000C554((uint64_t)v77, v100, type metadata accessor for AlarmAlertFullScreen);
  uint64_t v117 = *(unsigned __int8 *)(v206 + 80);
  uint64_t v118 = (v117 + 16) & ~v117;
  uint64_t v214 = v118 + v207;
  uint64_t v212 = v117 | 7;
  uint64_t v119 = swift_allocObject();
  v215 = (char *)v118;
  sub_10000E480(v100, v119 + v118);
  uint64_t v120 = v219;
  sub_10000FA94(v116, v219, &qword_1000C3470);
  v121 = (uint64_t (**)())(v120 + *(int *)(v218 + 36));
  *v121 = sub_10000F19C;
  v121[1] = (uint64_t (*)())v119;
  v121[2] = 0;
  v121[3] = 0;
  sub_10000FAF8(v116, &qword_1000C3470);
  LocalizedStringKey.init(stringLiteral:)();
  sub_10000F52C(&qword_1000C34D0, &qword_1000C3478, (void (*)(void))sub_10000F1B4);
  uint64_t v122 = (uint64_t)v217;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FAF8(v120, &qword_1000C3478);
  sub_10000F834(v122, v101, &qword_1000C3480);
  v123 = v252;
  static TimeZone.current.getter();
  uint64_t v124 = type metadata accessor for TimeZone();
  uint64_t v125 = *(void *)(v124 - 8);
  v126 = *(void (**)(char *, void, uint64_t))(v125 + 56);
  uint64_t v219 = v124;
  uint64_t v218 = (uint64_t)v126;
  v217 = (char *)(v125 + 56);
  v126(v123, 0, 1);
  uint64_t v127 = Text.init(dateFormat:timeZone:)();
  uint64_t v129 = v128;
  char v131 = v130;
  v216 = v77;
  if (qword_1000C2D18 != -1) {
    swift_once();
  }
  Font.monospacedDigit()();
  uint64_t v132 = v222;
  v133 = v221;
  uint64_t v134 = v223;
  (*(void (**)(char *, void, uint64_t))(v222 + 104))(v221, enum case for Font._StylisticAlternative.three(_:), v223);
  Font._stylisticAlternative(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v134);
  uint64_t v135 = Text.font(_:)();
  uint64_t v137 = v136;
  LOBYTE(v132) = v138;
  uint64_t v140 = v139;
  swift_release();
  sub_10000C494(v127, v129, v131 & 1);
  swift_bridgeObjectRelease();
  uint64_t v260 = v135;
  uint64_t v261 = v137;
  char v262 = v132 & 1;
  uint64_t v263 = v140;
  v142 = v255;
  uint64_t v141 = v256;
  v201(v255, v202, v256);
  v143 = v226;
  View.dynamicTypeSize(_:)();
  ((void (*)(char *, uint64_t))v200)(v142, v141);
  sub_10000C494(v260, v261, v262);
  swift_bridgeObjectRelease();
  uint64_t v144 = static Alignment.bottomTrailing.getter();
  uint64_t v145 = v228;
  double v147 = sub_1000715A4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v228, 0.0, 1, 0.0, 1, v144, v146);
  (*(void (**)(char *, uint64_t, double))(v229 + 8))(v143, v231, v147);
  uint64_t v148 = static Color.white.getter();
  uint64_t v149 = swift_getKeyPath();
  uint64_t v150 = v230;
  sub_10000FA94(v145, v230, &qword_1000C33D0);
  v151 = (uint64_t *)(v150 + *(int *)(v224 + 36));
  uint64_t *v151 = v149;
  v151[1] = v148;
  sub_10000FAF8(v145, &qword_1000C33D0);
  uint64_t v152 = swift_getKeyPath();
  uint64_t v153 = v232;
  sub_10000FA94(v150, v232, &qword_1000C33D8);
  uint64_t v154 = v153 + *(int *)(v225 + 36);
  *(void *)uint64_t v154 = v152;
  *(void *)(v154 + 8) = 1;
  *(unsigned char *)(v154 + 16) = 0;
  sub_10000FAF8(v150, &qword_1000C33D8);
  uint64_t v155 = swift_getKeyPath();
  uint64_t v156 = v235;
  sub_10000FA94(v153, v235, &qword_1000C33E0);
  uint64_t v157 = v156 + *(int *)(v227 + 36);
  *(void *)uint64_t v157 = v155;
  *(unsigned char *)(v157 + 8) = 1;
  sub_10000FAF8(v153, &qword_1000C33E0);
  (*(void (**)(char *, void, uint64_t))(v249 + 104))(v248, enum case for Color.RGBColorSpace.sRGBLinear(_:), v250);
  double v158 = 0.0;
  uint64_t v159 = Color.init(_:white:opacity:)();
  uint64_t v160 = v236;
  sub_10000FA94(v156, v236, &qword_1000C33E8);
  v161 = (uint64_t *)(v160 + *(int *)(v233 + 36));
  uint64_t *v161 = v159;
  v161[1] = 0x3FF0000000000000;
  v161[2] = 0;
  v161[3] = 0;
  sub_10000FAF8(v156, &qword_1000C33E8);
  uint64_t v162 = swift_getKeyPath();
  uint64_t v163 = v239;
  sub_10000FA94(v160, v239, &qword_1000C33F0);
  v164 = (uint64_t *)(v163 + *(int *)(v234 + 36));
  uint64_t *v164 = v162;
  v164[1] = 0x3FE6666666666666;
  sub_10000FAF8(v160, &qword_1000C33F0);
  uint64_t v165 = *(void *)(v205 + 8);
  LOBYTE(v260) = *(unsigned char *)v205;
  uint64_t v261 = v165;
  State.wrappedValue.getter();
  if (v264) {
    double v166 = 0.0;
  }
  else {
    double v166 = 50.0;
  }
  uint64_t v167 = v242;
  sub_10000FA94(v163, v242, &qword_1000C33F8);
  uint64_t v168 = v167 + *(int *)(v237 + 36);
  *(void *)uint64_t v168 = 0;
  *(double *)(v168 + 8) = v166;
  sub_10000FAF8(v163, &qword_1000C33F8);
  uint64_t v169 = (uint64_t)v216;
  v170 = (char *)v216 + *(int *)(v254 + 56);
  char v171 = *v170;
  uint64_t v172 = *((void *)v170 + 1);
  LOBYTE(v260) = v171;
  uint64_t v261 = v172;
  State.wrappedValue.getter();
  if (v264) {
    double v158 = 1.0;
  }
  uint64_t v173 = v241;
  sub_10000FA94(v167, v241, &qword_1000C3400);
  *(double *)(v173 + *(int *)(v240 + 36)) = v158;
  sub_10000FAF8(v167, &qword_1000C3400);
  uint64_t v174 = qword_1000CB098;
  uint64_t v175 = v243;
  sub_10000FA94(v173, v243, &qword_1000C3408);
  *(void *)(v175 + *(int *)(v238 + 36)) = v174;
  swift_retain();
  sub_10000FAF8(v173, &qword_1000C3408);
  uint64_t v176 = v257;
  sub_10000C554(v169, v257, type metadata accessor for AlarmAlertFullScreen);
  uint64_t v177 = swift_allocObject();
  sub_10000E480(v176, (uint64_t)&v215[v177]);
  uint64_t v178 = v246;
  sub_10000FA94(v175, v246, &qword_1000C3410);
  v179 = (uint64_t (**)())(v178 + *(int *)(v245 + 36));
  *v179 = sub_10000F34C;
  v179[1] = (uint64_t (*)())v177;
  v179[2] = 0;
  v179[3] = 0;
  sub_10000FAF8(v175, &qword_1000C3410);
  static TimeZone.current.getter();
  ((void (*)(char *, void, uint64_t, uint64_t))v218)(v123, 0, 1, v219);
  uint64_t v180 = Text.init(dateFormat:timeZone:)();
  uint64_t v182 = v181;
  LOBYTE(v173) = v183 & 1;
  sub_10000F52C(&qword_1000C34F8, &qword_1000C3418, (void (*)(void))sub_10000F364);
  uint64_t v184 = (uint64_t)v244;
  View.accessibilityLabel(_:)();
  sub_10000C494(v180, v182, v173);
  swift_bridgeObjectRelease();
  sub_10000FAF8(v178, &qword_1000C3418);
  uint64_t v185 = v247;
  sub_10000F834(v184, v247, &qword_1000C3420);
  uint64_t v186 = v258;
  uint64_t v187 = v220;
  sub_10000FA94(v258, v220, &qword_1000C3480);
  uint64_t v188 = v251;
  sub_10000FA94(v185, v251, &qword_1000C3420);
  uint64_t v189 = v253;
  sub_10000FA94(v187, v253, &qword_1000C3480);
  uint64_t v190 = sub_100007830(&qword_1000C3578);
  uint64_t v191 = v189 + *(int *)(v190 + 48);
  *(void *)uint64_t v191 = 0;
  *(unsigned char *)(v191 + 8) = 1;
  sub_10000FA94(v188, v189 + *(int *)(v190 + 64), &qword_1000C3420);
  sub_10000FAF8(v185, &qword_1000C3420);
  sub_10000FAF8(v186, &qword_1000C3480);
  sub_10000FAF8(v188, &qword_1000C3420);
  return sub_10000FAF8(v187, &qword_1000C3480);
}

uint64_t sub_100009C3C()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  Class isa = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  static Date.now.getter();
  Class v13 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static Locale.current.getter();
  Class v14 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v15 = [(objc_class *)isa hksp_dayPeriodForDate:v13 locale:v14];

  uint64_t v16 = 0x65764520646F6F47;
  unint64_t v17 = 0xEA00000000007468;
  uint64_t v18 = 0x67694E20646F6F47;
  if (v15 == (id)2)
  {
    uint64_t v18 = 0x74664120646F6F47;
    unint64_t v17 = 0xEE006E6F6F6E7265;
  }
  if (v15 == (id)3) {
    unint64_t v17 = 0xEC000000676E696ELL;
  }
  else {
    uint64_t v16 = v18;
  }
  BOOL v19 = (unint64_t)v15 >= 2;
  if ((unint64_t)v15 >= 2) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = 0x726F4D20646F6F47;
  }
  if (v19) {
    uint64_t v21 = (void *)v17;
  }
  else {
    uint64_t v21 = (void *)0xEC000000676E696ELL;
  }
  id v22 = [self mainBundle];
  v29._object = (void *)0x8000000100098CB0;
  v23._countAndFlagsBits = v20;
  v23._object = v21;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v29._countAndFlagsBits = 0xD000000000000014;
  Swift::String v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v29);
  swift_bridgeObjectRelease();

  Swift::String v28 = v25;
  sub_10000C92C();
  uint64_t v26 = StringProtocol.localizedUppercase.getter();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_100009FC4@<X0>(char a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100007830(&qword_1000C3590);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007830(&qword_1000C3598);
  __chkstk_darwin(v11);
  Class v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100007830(&qword_1000C35A0);
  uint64_t v70 = *(void *)(v14 - 8);
  uint64_t v71 = v14;
  __chkstk_darwin(v14);
  id v69 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007830(&qword_1000C35A8);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v78 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t v77 = static VerticalAlignment.center.getter();
  if (a1)
  {
    sub_10000A718((uint64_t)&v79);
    uint64_t v67 = v79;
    uint64_t v75 = v80;
    uint64_t v76 = *((void *)&v79 + 1);
    uint64_t v74 = v81;
    uint64_t v62 = v82;
    uint64_t v61 = v83;
    int v60 = v84;
    uint64_t v68 = v85;
    uint64_t v59 = static Color.secondary.getter();
    uint64_t KeyPath = swift_getKeyPath();
    *(void *)uint64_t v20 = static VerticalAlignment.center.getter();
    *((void *)v20 + 1) = 0;
    v20[16] = 1;
    uint64_t v58 = &v20[*(int *)(sub_100007830(&qword_1000C35C8) + 44)];
    *(void *)&long long v79 = a2;
    *((void *)&v79 + 1) = a3;
    sub_10000C92C();
    swift_bridgeObjectRetain();
    uint64_t v21 = Text.init<A>(_:)();
    uint64_t v23 = v22;
    char v25 = v24 & 1;
    id v26 = [self mtOrange];
    Color.init(uiColor:)();
    uint64_t v66 = a4;
    uint64_t v27 = Text.foregroundColor(_:)();
    uint64_t v64 = v8;
    uint64_t v28 = v27;
    uint64_t v65 = v11;
    uint64_t v30 = v29;
    uint64_t v63 = v10;
    char v32 = v31;
    uint64_t v72 = v20;
    uint64_t v34 = v33;
    swift_release();
    char v35 = v32 & 1;
    sub_10000C494(v21, v23, v25);
    swift_bridgeObjectRelease();
    *(void *)&long long v79 = v28;
    *((void *)&v79 + 1) = v30;
    LOBYTE(v80) = v32 & 1;
    uint64_t v81 = v34;
    uint64_t v36 = v69;
    View.lineLimit(_:reservesSpace:)();
    sub_10000C494(v28, v30, v35);
    swift_bridgeObjectRelease();
    uint64_t v38 = v70;
    uint64_t v37 = v71;
    uint64_t v39 = v58;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v58, v36, v71);
    *(_WORD *)&v39[*(int *)(sub_100007830(&qword_1000C35D0) + 36)] = 256;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v37);
    sub_10000FA94((uint64_t)v72, v78, &qword_1000C35A8);
    uint64_t v40 = v76;
    *(void *)Class v13 = v77;
    *((void *)v13 + 1) = 0;
    v13[16] = 1;
    uint64_t v41 = v67;
    *((void *)v13 + 3) = v67;
    *((void *)v13 + 4) = v40;
    uint64_t v43 = v74;
    char v42 = v75;
    *((void *)v13 + 5) = v75;
    *((void *)v13 + 6) = v43;
    uint64_t v44 = v62;
    uint64_t v45 = v61;
    *((void *)v13 + 7) = v62;
    *((void *)v13 + 8) = v45;
    char v46 = v60;
    v13[72] = v60;
    uint64_t v47 = KeyPath;
    *((void *)v13 + 10) = v68;
    *((void *)v13 + 11) = v47;
    *((void *)v13 + 12) = v59;
    uint64_t v57 = v13;
    uint64_t v48 = sub_100007830(&qword_1000C35D8);
    sub_10000FA94(v78, (uint64_t)&v13[*(int *)(v48 + 48)], &qword_1000C35A8);
    sub_10000F958(v41, v40, v42, v43);
    sub_10000C484(v44, v45, v46);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    LOBYTE(v43) = v75;
    uint64_t v49 = v76;
    uint64_t v50 = v74;
    sub_10000F958(v41, v76, v75, v74);
    sub_10000C484(v44, v45, v46);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10000FAF8(v78, &qword_1000C35A8);
    sub_10000F99C(v41, v49, v43, v50);
    sub_10000C494(v44, v45, v46);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v51 = (uint64_t)v57;
    sub_10000FA94((uint64_t)v57, (uint64_t)v63, &qword_1000C3598);
    swift_storeEnumTagMultiPayload();
    sub_100007830(&qword_1000C35B0);
    sub_10000FD6C(&qword_1000C35B8, &qword_1000C3598);
    sub_10000FD6C(&qword_1000C35C0, &qword_1000C35B0);
    _ConditionalContent<>.init(storage:)();
    sub_10000FAF8(v51, &qword_1000C3598);
    sub_10000FAF8((uint64_t)v72, &qword_1000C35A8);
    sub_10000F99C(v67, v76, v75, v74);
    sub_10000C494(v44, v45, v46);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000AA10((uint64_t)&v79);
    char v53 = v80;
    uint64_t v54 = v81;
    long long v55 = v79;
    *(void *)uint64_t v10 = v77;
    *((void *)v10 + 1) = 0;
    v10[16] = 1;
    *(_OWORD *)(v10 + 24) = v55;
    v10[40] = v53;
    *((void *)v10 + 6) = v54;
    swift_storeEnumTagMultiPayload();
    sub_100007830(&qword_1000C35B0);
    sub_10000FD6C(&qword_1000C35B8, &qword_1000C3598);
    sub_10000FD6C(&qword_1000C35C0, &qword_1000C35B0);
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t sub_10000A718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  type metadata accessor for AlarmAlertFullScreen(0);
  sub_100007830(&qword_1000C3580);
  State.wrappedValue.getter();
  swift_getKeyPath();
  sub_10000F8A0(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = *(void *)(v19 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName + 8);
  swift_bridgeObjectRetain();
  swift_release();
  if (v3)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v4._countAndFlagsBits = 0;
    v4._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v4);
    Image.init(systemName:)();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v5);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v8 = v7;
    uint64_t v3 = v9;
    uint64_t v11 = v10 & 1;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
    uint64_t v11 = 0;
  }
  State.wrappedValue.getter();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_bridgeObjectRetain();
  swift_release();
  sub_10000C92C();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  char v16 = v15 & 1;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  *(unsigned char *)(a1 + 48) = v15 & 1;
  *(void *)(a1 + 56) = v17;
  sub_10000F958(v6, v8, v11, v3);
  sub_10000C484(v12, v14, v16);
  swift_bridgeObjectRetain();
  sub_10000C494(v12, v14, v16);
  swift_bridgeObjectRelease();
  return sub_10000F99C(v6, v8, v11, v3);
}

uint64_t sub_10000AA10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v1 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v2);
  if (qword_1000C2DC0 != -1) {
    swift_once();
  }
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  v3._countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v3);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  static Color.secondary.getter();
  uint64_t v9 = Text.foregroundColor(_:)();
  uint64_t v31 = v10;
  uint64_t v32 = v9;
  char v12 = v11;
  swift_release();
  char v30 = v12 & 1;
  sub_10000C494(v4, v6, v8);
  swift_bridgeObjectRelease();
  sub_10000C92C();
  swift_bridgeObjectRetain();
  uint64_t v13 = Text.init<A>(_:)();
  uint64_t v15 = v14;
  LOBYTE(v6) = v16 & 1;
  id v17 = [self mtOrange];
  Color.init(uiColor:)();
  uint64_t v18 = Text.foregroundColor(_:)();
  uint64_t v20 = v19;
  char v22 = v21;
  swift_release();
  sub_10000C494(v13, v15, v6);
  swift_bridgeObjectRelease();
  uint64_t v28 = static Text.+ infix(_:_:)();
  uint64_t v29 = v23;
  uint64_t v25 = v24;
  LOBYTE(v4) = v26;
  sub_10000C494(v18, v20, v22 & 1);
  swift_bridgeObjectRelease();
  sub_10000C494(v32, v31, v30);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v29;
  return result;
}

uint64_t sub_10000ACCC()
{
  if (qword_1000C2DD8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB068);
  withAnimation<A>(_:_:)();
  if (qword_1000C2DE0 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB070);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_10000AE04()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10000AE78()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10000AEEC()
{
  if (qword_1000C2DC8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB058);
  withAnimation<A>(_:_:)();
  if (qword_1000C2DD0 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB060);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_10000B024()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10000B098()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10000B10C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  long long v79 = a2;
  uint64_t v74 = type metadata accessor for SlideTransition();
  uint64_t v71 = *(void *)(v74 - 8);
  uint64_t v3 = __chkstk_darwin(v74);
  uint64_t v75 = (char *)v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v70 = (char *)v64 - v5;
  *(void *)&long long v81 = type metadata accessor for AlarmAlertFullScreen(0);
  uint64_t v6 = *(void *)(v81 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v81);
  char v8 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([*a1 allowsSnooze]) {
    [objc_allocWithZone((Class)UIColor) initWithRed:0.17254902 green:0.17254902 blue:0.17254902 alpha:1.0];
  }
  else {
    id v9 = [self mtOrange];
  }
  *((void *)&v82 + 1) = Color.init(uiColor:)();
  *(void *)&long long v82 = static Color.white.getter();
  id v69 = type metadata accessor for AlarmAlertFullScreen;
  sub_10000C554((uint64_t)a1, (uint64_t)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AlarmAlertFullScreen);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  char v11 = a1;
  uint64_t v12 = ((v10 + 16) & ~v10) + v7;
  uint64_t v13 = (v10 + 16) & ~v10;
  uint64_t v80 = v13;
  uint64_t v14 = v10 | 7;
  uint64_t v78 = swift_allocObject();
  sub_10000E480((uint64_t)v8, v78 + v13);
  v146[0] = 0;
  State.init(wrappedValue:)();
  int v76 = LOBYTE(v124[0]);
  uint64_t v77 = *((void *)&v124[0] + 1);
  uint64_t v15 = v81;
  char v16 = (char *)v11 + *(int *)(v81 + 48);
  uint64_t v18 = *((void *)v16 + 1);
  LOBYTE(v124[0]) = *v16;
  char v17 = v124[0];
  *((void *)&v124[0] + 1) = v18;
  uint64_t v19 = sub_100007830(&qword_1000C33A8);
  State.wrappedValue.getter();
  int v73 = v146[0];
  uint64_t v20 = *(int *)(v15 + 68);
  uint64_t v21 = v12;
  char v22 = v11;
  uint64_t v23 = (char *)v11 + v20;
  char v24 = *v23;
  uint64_t v25 = *((void *)v23 + 1);
  LOBYTE(v124[0]) = v24;
  *((void *)&v124[0] + 1) = v25;
  State.wrappedValue.getter();
  int v72 = v146[0];
  LOBYTE(v124[0]) = v17;
  *((void *)&v124[0] + 1) = v18;
  uint64_t v26 = (uint64_t)v8;
  uint64_t v68 = v19;
  State.wrappedValue.getter();
  int v27 = v146[0];
  static UnitPoint.center.getter();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = v70;
  SlideTransition.init()();
  uint64_t v33 = v71;
  uint64_t v34 = v74;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v75, v32, v74);
  sub_10000F8A0(&qword_1000C33B0, (void (*)(uint64_t))&type metadata accessor for SlideTransition);
  uint64_t v75 = (char *)AnyTransition.init<A>(_:)();
  v149[0] = *(_DWORD *)v147;
  *(_DWORD *)((char *)v149 + 3) = *(_DWORD *)&v147[3];
  (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v34);
  v148[0] = v149[0];
  *(_DWORD *)((char *)v148 + 3) = *(_DWORD *)((char *)v149 + 3);
  uint64_t v35 = v80;
  sub_10000C554((uint64_t)v22, v26, v69);
  uint64_t v74 = swift_allocObject();
  sub_10000E480(v26, v74 + v35);
  if ([*v22 allowsSnooze])
  {
    LODWORD(v71) = v27;
    if (qword_1000C2D40 != -1) {
      swift_once();
    }
    uint64_t v70 = (char *)qword_1000CAFD0;
    id v36 = [self mtOrange];
    id v69 = (uint64_t (*)(void))Color.init(uiColor:)();
    uint64_t v67 = static Color.white.getter();
    sub_10000C554((uint64_t)v22, v26, type metadata accessor for AlarmAlertFullScreen);
    uint64_t v37 = swift_allocObject();
    sub_10000E480(v26, v37 + v35);
    v146[0] = 0;
    State.init(wrappedValue:)();
    int v66 = LOBYTE(v124[0]);
    v64[2] = v14;
    uint64_t v65 = *((void *)&v124[0] + 1);
    uint64_t v38 = v81;
    uint64_t v39 = (char *)v22 + *(int *)(v81 + 52);
    v64[1] = v21;
    char v40 = *v39;
    uint64_t v41 = v26;
    uint64_t v42 = *((void *)v39 + 1);
    LOBYTE(v124[0]) = *v39;
    *((void *)&v124[0] + 1) = v42;
    State.wrappedValue.getter();
    if (v146[0]) {
      double v43 = 0.0;
    }
    else {
      double v43 = 150.0;
    }
    uint64_t v44 = (char *)v22 + *(int *)(v38 + 72);
    char v45 = *v44;
    uint64_t v46 = *((void *)v44 + 1);
    LOBYTE(v124[0]) = v45;
    *((void *)&v124[0] + 1) = v46;
    State.wrappedValue.getter();
    if (v146[0]) {
      double v47 = 1.0;
    }
    else {
      double v47 = 0.0;
    }
    LOBYTE(v124[0]) = v40;
    *((void *)&v124[0] + 1) = v42;
    State.wrappedValue.getter();
    if (v146[0]) {
      double v48 = 1.0;
    }
    else {
      double v48 = 0.8;
    }
    static UnitPoint.center.getter();
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    if (qword_1000C2E08 != -1) {
      swift_once();
    }
    uint64_t v53 = qword_1000CB098;
    sub_10000C554((uint64_t)v22, v41, type metadata accessor for AlarmAlertFullScreen);
    uint64_t v54 = swift_allocObject();
    sub_10000E480(v41, v54 + v80);
    *(void *)&long long v83 = 0x657A6F6F6E73;
    *((void *)&v83 + 1) = 0xE600000000000000;
    *(void *)&long long v84 = v67;
    *((void *)&v84 + 1) = v69;
    long long v85 = xmmword_100094F80;
    *(void *)&long long v86 = sub_10000EE40;
    *((void *)&v86 + 1) = v37;
    LOBYTE(v87) = v66;
    *((void *)&v87 + 1) = v65;
    *(void *)&long long v88 = 0;
    *((double *)&v88 + 1) = v43;
    *(double *)&long long v89 = v47;
    *((double *)&v89 + 1) = v48;
    *(double *)&long long v90 = v48;
    *((void *)&v90 + 1) = v50;
    *(void *)&long long v91 = v52;
    *((void *)&v91 + 1) = v53;
    *(void *)&long long v92 = sub_10000EEC0;
    *((void *)&v92 + 1) = v54;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    LOBYTE(v126[0]) = 0;
    *(_OWORD *)&v125[103] = v89;
    *(_OWORD *)&v125[87] = v88;
    *(_OWORD *)&v125[71] = v87;
    *(_OWORD *)&v125[55] = v86;
    *(_OWORD *)&v125[167] = 0u;
    *(_OWORD *)&v125[151] = v92;
    *(_OWORD *)&v125[135] = v91;
    *(_OWORD *)&v125[119] = v90;
    *(_OWORD *)&v125[39] = xmmword_100094F80;
    *(_OWORD *)&v125[23] = v84;
    *(_OWORD *)&v125[7] = v83;
    v106[0] = 0x657A6F6F6E73;
    v106[1] = 0xE600000000000000;
    v106[2] = v67;
    v106[3] = v69;
    long long v107 = xmmword_100094F80;
    v108 = sub_10000EE40;
    uint64_t v109 = v37;
    char v110 = v66;
    uint64_t v111 = v65;
    uint64_t v112 = 0;
    double v113 = v43;
    double v114 = v47;
    double v115 = v48;
    double v116 = v48;
    uint64_t v117 = v50;
    uint64_t v118 = v52;
    uint64_t v119 = v53;
    uint64_t v120 = sub_10000EEC0;
    uint64_t v123 = 0;
    uint64_t v121 = v54;
    uint64_t v122 = 0;
    sub_10000EC80((uint64_t)&v83);
    swift_retain();
    sub_10000ED98((uint64_t)v106);
    *(_OWORD *)((char *)&v124[8] + 9) = *(_OWORD *)&v125[128];
    *(_OWORD *)((char *)&v124[9] + 9) = *(_OWORD *)&v125[144];
    *(_OWORD *)((char *)&v124[10] + 9) = *(_OWORD *)&v125[160];
    *(_OWORD *)((char *)&v124[4] + 9) = *(_OWORD *)&v125[64];
    *(_OWORD *)((char *)&v124[5] + 9) = *(_OWORD *)&v125[80];
    *(_OWORD *)((char *)&v124[6] + 9) = *(_OWORD *)&v125[96];
    *(_OWORD *)((char *)&v124[7] + 9) = *(_OWORD *)&v125[112];
    *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)v125;
    *(_OWORD *)((char *)&v124[1] + 9) = *(_OWORD *)&v125[16];
    *(_OWORD *)((char *)&v124[2] + 9) = *(_OWORD *)&v125[32];
    *(void *)&v124[0] = v70;
    BYTE8(v124[0]) = 0;
    *((void *)&v124[11] + 1) = *(void *)&v125[175];
    *(_OWORD *)((char *)&v124[3] + 9) = *(_OWORD *)&v125[48];
    Frame.timestamp.getter(v124);
    sub_10000F834((uint64_t)v124, (uint64_t)v146, &qword_1000C33B8);
    int v27 = v71;
  }
  else
  {
    sub_10000EC60(v124);
    sub_10000F834((uint64_t)v124, (uint64_t)v146, &qword_1000C33B8);
  }
  if (v27) {
    double v55 = 1.0;
  }
  else {
    double v55 = 0.8;
  }
  if (v72) {
    double v56 = 1.0;
  }
  else {
    double v56 = 0.0;
  }
  if (v73) {
    double v57 = 0.0;
  }
  else {
    double v57 = 150.0;
  }
  sub_10000F834((uint64_t)v146, (uint64_t)&v83, &qword_1000C33B8);
  *(void *)&long long v95 = 1886352499;
  *((void *)&v95 + 1) = 0xE400000000000000;
  long long v96 = v82;
  long long v81 = xmmword_100094F90;
  long long v97 = xmmword_100094F90;
  uint64_t v59 = v77;
  uint64_t v58 = v78;
  *(void *)&long long v98 = sub_10000EBB8;
  *((void *)&v98 + 1) = v78;
  char v60 = v76;
  LOBYTE(v99) = v76;
  *(_DWORD *)((char *)&v99 + 1) = v148[0];
  DWORD1(v99) = *(_DWORD *)((char *)v148 + 3);
  *((void *)&v99 + 1) = v77;
  *(void *)&long long v100 = 0;
  *((double *)&v100 + 1) = v57;
  *(double *)&long long v101 = v56;
  *((double *)&v101 + 1) = v55;
  *(double *)&long long v102 = v55;
  *((void *)&v102 + 1) = v29;
  *(void *)&long long v103 = v31;
  uint64_t v62 = v74;
  uint64_t v61 = v75;
  *((void *)&v103 + 1) = v75;
  *(void *)&long long v104 = sub_10000EBD4;
  *((void *)&v104 + 1) = v74;
  long long v105 = 0uLL;
  sub_10000F834((uint64_t)&v83, (uint64_t)v106, &qword_1000C33B8);
  v124[8] = v103;
  v124[9] = v104;
  v124[10] = v105;
  v124[4] = v99;
  v124[5] = v100;
  v124[6] = v101;
  v124[7] = v102;
  v124[0] = v95;
  v124[1] = v96;
  v124[2] = v97;
  v124[3] = v98;
  sub_10000F834((uint64_t)v106, (uint64_t)&v124[11], &qword_1000C33B8);
  memcpy(v79, v124, 0x170uLL);
  sub_10000F834((uint64_t)&v83, (uint64_t)v125, &qword_1000C33B8);
  sub_10000EC80((uint64_t)&v95);
  sub_10000ED24(v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10000E6D4);
  sub_10000ED24(v125, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10000E8FC);
  v126[0] = 1886352499;
  v126[1] = 0xE400000000000000;
  long long v127 = v82;
  long long v128 = v81;
  uint64_t v129 = sub_10000EBB8;
  uint64_t v130 = v58;
  char v131 = v60;
  *(_DWORD *)uint64_t v132 = v148[0];
  *(_DWORD *)&v132[3] = *(_DWORD *)((char *)v148 + 3);
  uint64_t v133 = v59;
  uint64_t v134 = 0;
  double v135 = v57;
  double v136 = v56;
  double v137 = v55;
  double v138 = v55;
  uint64_t v139 = v29;
  uint64_t v140 = v31;
  uint64_t v141 = v61;
  v142 = sub_10000EBD4;
  uint64_t v145 = 0;
  uint64_t v143 = v62;
  uint64_t v144 = 0;
  return sub_10000ED98((uint64_t)v126);
}

uint64_t sub_10000BB70()
{
  if (qword_1000C2DE8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB078);
  withAnimation<A>(_:_:)();
  if (qword_1000C2DF0 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB080);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_10000BCA8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10000BD1C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10000BD90()
{
  if (qword_1000C2DF8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB088);
  withAnimation<A>(_:_:)();
  if (qword_1000C2E00 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB090);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_10000BEC8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10000BF3C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10000BFB0(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  sub_10000C4A4((void *)(a1 + 8), *(void *)(a1 + 32));
  id v4 = [*(id *)a1 alarmIDString];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  a2(v5, v7);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10000C048@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  sub_10000CB18(a2, (uint64_t)(a5 + 1));
  sub_10000CB18(a3, (uint64_t)(a5 + 6));
  char v8 = (int *)type metadata accessor for AlarmAlertFullScreen(0);
  sub_10000F834(a4, (uint64_t)a5 + v8[7], (uint64_t *)&unk_1000C3B70);
  uint64_t v9 = v8[8];
  static AnyTransition.move(edge:)();
  static AnyTransition.scale.getter();
  uint64_t v10 = AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  *(void *)((char *)a5 + v9) = v10;
  char v11 = (char *)a5 + v8[9];
  State.init(wrappedValue:)();
  *char v11 = v23;
  *((void *)v11 + 1) = v24;
  uint64_t v12 = (char *)a5 + v8[10];
  State.init(wrappedValue:)();
  *uint64_t v12 = v23;
  *((void *)v12 + 1) = v24;
  uint64_t v13 = (char *)a5 + v8[11];
  State.init(wrappedValue:)();
  *uint64_t v13 = v23;
  *((void *)v13 + 1) = v24;
  uint64_t v14 = (char *)a5 + v8[12];
  State.init(wrappedValue:)();
  *uint64_t v14 = v23;
  *((void *)v14 + 1) = v24;
  uint64_t v15 = (char *)a5 + v8[13];
  State.init(wrappedValue:)();
  char *v15 = v23;
  *((void *)v15 + 1) = v24;
  char v16 = (char *)a5 + v8[14];
  State.init(wrappedValue:)();
  *char v16 = v23;
  *((void *)v16 + 1) = v24;
  char v17 = (char *)a5 + v8[15];
  State.init(wrappedValue:)();
  *char v17 = v23;
  *((void *)v17 + 1) = v24;
  uint64_t v18 = (char *)a5 + v8[16];
  State.init(wrappedValue:)();
  *uint64_t v18 = v23;
  *((void *)v18 + 1) = v24;
  uint64_t v19 = (char *)a5 + v8[17];
  State.init(wrappedValue:)();
  char *v19 = v23;
  *((void *)v19 + 1) = v24;
  uint64_t v20 = (char *)a5 + v8[18];
  State.init(wrappedValue:)();
  char *v20 = v23;
  *((void *)v20 + 1) = v24;
  uint64_t v21 = (void *)((char *)a5 + v8[19]);
  type metadata accessor for WeatherDataProvider();
  uint64_t result = State.init(wrappedValue:)();
  *uint64_t v21 = v23;
  v21[1] = v24;
  return result;
}

uint64_t sub_10000C360()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10000C37C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  sub_10000C554(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AlarmAlertFullScreen);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_10000E480((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  *(void *)a2 = sub_10000E4E4;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

uint64_t sub_10000C484(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10000C494(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

void *sub_10000C4A4(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000C4E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000C524()
{
  return sub_100006B94(v0 + 16, (void (*)(uint64_t, uint64_t))sub_1000546F8);
}

uint64_t sub_10000C554(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000C5BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000C61C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_10000C664()
{
  unint64_t result = qword_1000C3160;
  if (!qword_1000C3160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3160);
  }
  return result;
}

uint64_t sub_10000C6B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000C6F4()
{
  return sub_100006B94(v0 + 16, (void (*)(uint64_t, uint64_t))sub_100054414);
}

uint64_t sub_10000C728()
{
  sub_100004678(v0 + 24);
  sub_100004678(v0 + 64);

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10000C770()
{
  return sub_100006B94(v0 + 16, (void (*)(uint64_t, uint64_t))sub_100050968);
}

uint64_t sub_10000C7A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10000C7D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10000C808()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_10000C838()
{
  return EnvironmentValues.lineLimit.setter();
}

unint64_t sub_10000C868()
{
  unint64_t result = qword_1000C31B8;
  if (!qword_1000C31B8)
  {
    sub_10000C61C(&qword_1000C3198);
    sub_10000FD6C(&qword_1000C31C0, &qword_1000C3190);
    sub_10000FD6C(&qword_1000C31C8, &qword_1000C31D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C31B8);
  }
  return result;
}

unint64_t sub_10000C92C()
{
  unint64_t result = qword_1000C31F0;
  if (!qword_1000C31F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C31F0);
  }
  return result;
}

uint64_t sub_10000C980@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10000C9AC@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10000C9D8()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_10000CA00()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_10000CA28()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_10000CA4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Text.TruncationMode();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.truncationMode.setter();
}

uint64_t sub_10000CB18(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t type metadata accessor for AlarmAlertFullScreen(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C3280);
}

uint64_t sub_10000CB50(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *sub_10000CB88(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    uint64_t v7 = a1;
    char v8 = a1 + 8;
    uint64_t v9 = a2 + 1;
    long long v10 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 2) = v10;
    uint64_t v11 = v10;
    uint64_t v12 = **(void (***)(char *, char **, uint64_t))(v10 - 8);
    uint64_t v13 = v4;
    v12(v8, v9, v11);
    long long v14 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(v7 + 72) = v14;
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))((uint64_t)(v7 + 48), (uint64_t)(a2 + 6));
    uint64_t v15 = a3[7];
    char v16 = &v7[v15];
    char v17 = (char **)((char *)a2 + v15);
    sub_100007830(&qword_1000C3220);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for Font.Context();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *(void *)char v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = a3[9];
    *(void *)&v7[a3[8]] = *(char **)((char *)a2 + a3[8]);
    uint64_t v20 = &v7[v19];
    uint64_t v21 = (uint64_t)a2 + v19;
    char *v20 = *(unsigned char *)v21;
    *((void *)v20 + 1) = *(void *)(v21 + 8);
    uint64_t v22 = a3[10];
    uint64_t v23 = a3[11];
    uint64_t v24 = &v7[v22];
    uint64_t v25 = (uint64_t)a2 + v22;
    *uint64_t v24 = *(unsigned char *)v25;
    *((void *)v24 + 1) = *(void *)(v25 + 8);
    uint64_t v26 = &v7[v23];
    uint64_t v27 = (uint64_t)a2 + v23;
    *uint64_t v26 = *(unsigned char *)v27;
    *((void *)v26 + 1) = *(void *)(v27 + 8);
    uint64_t v28 = a3[12];
    uint64_t v29 = a3[13];
    uint64_t v30 = &v7[v28];
    uint64_t v31 = (uint64_t)a2 + v28;
    char *v30 = *(unsigned char *)v31;
    *((void *)v30 + 1) = *(void *)(v31 + 8);
    uint64_t v32 = &v7[v29];
    uint64_t v33 = (uint64_t)a2 + v29;
    char *v32 = *(unsigned char *)v33;
    *((void *)v32 + 1) = *(void *)(v33 + 8);
    uint64_t v34 = a3[14];
    uint64_t v35 = a3[15];
    id v36 = &v7[v34];
    uint64_t v37 = (uint64_t)a2 + v34;
    char *v36 = *(unsigned char *)v37;
    *((void *)v36 + 1) = *(void *)(v37 + 8);
    uint64_t v38 = &v7[v35];
    uint64_t v39 = (uint64_t)a2 + v35;
    char *v38 = *(unsigned char *)v39;
    *((void *)v38 + 1) = *(void *)(v39 + 8);
    uint64_t v40 = a3[16];
    uint64_t v41 = a3[17];
    uint64_t v42 = &v7[v40];
    uint64_t v43 = (uint64_t)a2 + v40;
    char *v42 = *(unsigned char *)v43;
    *((void *)v42 + 1) = *(void *)(v43 + 8);
    uint64_t v44 = &v7[v41];
    uint64_t v45 = (uint64_t)a2 + v41;
    char *v44 = *(unsigned char *)v45;
    *((void *)v44 + 1) = *(void *)(v45 + 8);
    uint64_t v46 = a3[18];
    uint64_t v47 = a3[19];
    double v48 = &v7[v46];
    uint64_t v49 = (uint64_t)a2 + v46;
    *double v48 = *(unsigned char *)v49;
    *((void *)v48 + 1) = *(void *)(v49 + 8);
    uint64_t v50 = &v7[v47];
    uint64_t v51 = (char **)((char *)a2 + v47);
    uint64_t v52 = v51[1];
    *(void *)uint64_t v50 = *v51;
    *((void *)v50 + 1) = v52;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t sub_10000CEE4(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 6);

  sub_100004678((uint64_t)(a1 + 1));
  sub_100004678(v4);
  uint64_t v5 = (char *)a1 + *(int *)(a2 + 28);
  sub_100007830(&qword_1000C3220);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Font.Context();
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_10000D068(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v7 = a1 + 8;
  uint64_t v8 = a2 + 8;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  id v12 = v6;
  v11(v7, v8, v10);
  long long v13 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v14);
  char v16 = (void *)(a2 + v14);
  sub_100007830(&qword_1000C3220);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for Font.Context();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  else
  {
    void *v15 = *v16;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(unsigned char *)uint64_t v19 = *(unsigned char *)v20;
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  uint64_t v21 = a3[10];
  uint64_t v22 = a3[11];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  uint64_t v25 = a1 + v22;
  uint64_t v26 = a2 + v22;
  *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  uint64_t v27 = a3[12];
  uint64_t v28 = a3[13];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(unsigned char *)uint64_t v29 = *(unsigned char *)v30;
  *(void *)(v29 + 8) = *(void *)(v30 + 8);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  uint64_t v33 = a3[14];
  uint64_t v34 = a3[15];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(unsigned char *)uint64_t v35 = *(unsigned char *)v36;
  *(void *)(v35 + 8) = *(void *)(v36 + 8);
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(unsigned char *)uint64_t v37 = *(unsigned char *)v38;
  *(void *)(v37 + 8) = *(void *)(v38 + 8);
  uint64_t v39 = a3[16];
  uint64_t v40 = a3[17];
  uint64_t v41 = a1 + v39;
  uint64_t v42 = a2 + v39;
  *(unsigned char *)uint64_t v41 = *(unsigned char *)v42;
  *(void *)(v41 + 8) = *(void *)(v42 + 8);
  uint64_t v43 = a1 + v40;
  uint64_t v44 = a2 + v40;
  *(unsigned char *)uint64_t v43 = *(unsigned char *)v44;
  *(void *)(v43 + 8) = *(void *)(v44 + 8);
  uint64_t v45 = a3[18];
  uint64_t v46 = a3[19];
  uint64_t v47 = a1 + v45;
  uint64_t v48 = a2 + v45;
  *(unsigned char *)uint64_t v47 = *(unsigned char *)v48;
  *(void *)(v47 + 8) = *(void *)(v48 + 8);
  uint64_t v49 = (void *)(a1 + v46);
  uint64_t v50 = (void *)(a2 + v46);
  uint64_t v51 = v50[1];
  void *v49 = *v50;
  v49[1] = v51;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void **sub_10000D380(void **a1, uint64_t a2, int *a3)
{
  uint64_t v7 = (uint64_t *)(a2 + 48);
  uint64_t v6 = *(void **)a2;
  uint64_t v8 = (uint64_t *)(a1 + 1);
  long long v9 = *a1;
  *a1 = *(void **)a2;
  uint64_t v10 = (uint64_t *)(a1 + 6);
  id v11 = v6;

  sub_1000046D0(v8, (uint64_t *)(a2 + 8));
  sub_1000046D0(v10, v7);
  if (a1 != (void **)a2)
  {
    uint64_t v12 = a3[7];
    long long v13 = (void **)((char *)a1 + v12);
    uint64_t v14 = (void *)(a2 + v12);
    sub_10000FAF8((uint64_t)a1 + v12, &qword_1000C3220);
    sub_100007830(&qword_1000C3220);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for Font.Context();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      *long long v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void **)((char *)a1 + a3[8]) = *(void **)(a2 + a3[8]);
  swift_retain();
  swift_release();
  uint64_t v16 = a3[9];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)(a2 + v16);
  *uint64_t v17 = *v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_retain();
  swift_release();
  uint64_t v19 = a3[10];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)(a2 + v19);
  char *v20 = *v21;
  *((void *)v20 + 1) = *((void *)v21 + 1);
  swift_retain();
  swift_release();
  uint64_t v22 = a3[11];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)(a2 + v22);
  *uint64_t v23 = *v24;
  *((void *)v23 + 1) = *((void *)v24 + 1);
  swift_retain();
  swift_release();
  uint64_t v25 = a3[12];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)(a2 + v25);
  *uint64_t v26 = *v27;
  *((void *)v26 + 1) = *((void *)v27 + 1);
  swift_retain();
  swift_release();
  uint64_t v28 = a3[13];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)(a2 + v28);
  char *v29 = *v30;
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_retain();
  swift_release();
  uint64_t v31 = a3[14];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)(a2 + v31);
  char *v32 = *v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  swift_retain();
  swift_release();
  uint64_t v34 = a3[15];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)(a2 + v34);
  char *v35 = *v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  swift_retain();
  swift_release();
  uint64_t v37 = a3[16];
  uint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)(a2 + v37);
  char *v38 = *v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_retain();
  swift_release();
  uint64_t v40 = a3[17];
  uint64_t v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)(a2 + v40);
  char *v41 = *v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_retain();
  swift_release();
  uint64_t v43 = a3[18];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)(a2 + v43);
  char *v44 = *v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  swift_retain();
  swift_release();
  uint64_t v46 = a3[19];
  uint64_t v47 = (char *)a1 + v46;
  uint64_t v48 = a2 + v46;
  *(void **)((char *)a1 + v46) = *(void **)(a2 + v46);
  swift_retain();
  swift_release();
  *((void *)v47 + 1) = *(void *)(v48 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10000D6B4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v8 = a3[7];
  long long v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v11 = sub_100007830(&qword_1000C3220);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for Font.Context();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[19];
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  return a1;
}

uint64_t sub_10000D838(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  sub_100004678(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_100004678(a1 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  if (a1 != a2)
  {
    uint64_t v8 = a3[7];
    long long v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_10000FAF8(a1 + v8, &qword_1000C3220);
    uint64_t v11 = sub_100007830(&qword_1000C3220);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Font.Context();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  uint64_t v13 = a3[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_release();
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_release();
  uint64_t v19 = a3[11];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(unsigned char *)uint64_t v20 = *(unsigned char *)v21;
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_release();
  uint64_t v22 = a3[12];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_release();
  uint64_t v25 = a3[13];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(unsigned char *)uint64_t v26 = *(unsigned char *)v27;
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  swift_release();
  uint64_t v28 = a3[14];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  *(unsigned char *)uint64_t v29 = *(unsigned char *)v30;
  *(void *)(v29 + 8) = *(void *)(v30 + 8);
  swift_release();
  uint64_t v31 = a3[15];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  *(unsigned char *)uint64_t v32 = *(unsigned char *)v33;
  *(void *)(v32 + 8) = *(void *)(v33 + 8);
  swift_release();
  uint64_t v34 = a3[16];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(unsigned char *)uint64_t v35 = *(unsigned char *)v36;
  *(void *)(v35 + 8) = *(void *)(v36 + 8);
  swift_release();
  uint64_t v37 = a3[17];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  *(unsigned char *)uint64_t v38 = *(unsigned char *)v39;
  *(void *)(v38 + 8) = *(void *)(v39 + 8);
  swift_release();
  uint64_t v40 = a3[18];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  *(unsigned char *)uint64_t v41 = *(unsigned char *)v42;
  *(void *)(v41 + 8) = *(void *)(v42 + 8);
  swift_release();
  uint64_t v43 = a3[19];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = (void *)(a2 + v43);
  *(void *)(a1 + v43) = *v45;
  swift_release();
  *(void *)(v44 + 8) = v45[1];
  swift_release();
  return a1;
}

uint64_t sub_10000DB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000DB30);
}

uint64_t sub_10000DB30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100007830((uint64_t *)&unk_1000C3B70);
    long long v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10000DBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000DBF8);
}

void *sub_10000DBF8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100007830((uint64_t *)&unk_1000C3B70);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10000DCA4()
{
  sub_10000DD80();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10000DD80()
{
  if (!qword_1000C3290)
  {
    type metadata accessor for Font.Context();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000C3290);
    }
  }
}

uint64_t _s10ClockAngel31AlarmSnoozeCountdownControlViewVwxx_0(id *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 6);

  sub_100004678((uint64_t)(a1 + 1));

  return sub_100004678(v2);
}

uint64_t _s10ClockAngel31AlarmSnoozeCountdownControlViewVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  id v10 = v4;
  v9(v5, v6, v8);
  long long v11 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 48, a2 + 48);
  return a1;
}

void **_s10ClockAngel31AlarmSnoozeCountdownControlViewVwca_0(void **a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a2 + 48);
  uint64_t v4 = *(void **)a2;
  uint64_t v6 = (uint64_t *)(a1 + 1);
  long long v7 = *a1;
  *a1 = *(void **)a2;
  uint64_t v8 = (uint64_t *)(a1 + 6);
  id v9 = v4;

  sub_1000046D0(v6, (uint64_t *)(a2 + 8));
  sub_1000046D0(v8, v5);
  return a1;
}

uint64_t _s10ClockAngel31AlarmSnoozeCountdownControlViewVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  sub_100004678(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_100004678(a1 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for StopwatchCustomLeadingView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StopwatchCustomLeadingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmSnoozeCountdownView()
{
  return &type metadata for AlarmSnoozeCountdownView;
}

uint64_t sub_10000E090()
{
  return sub_10000FD6C(&qword_1000C32F8, &qword_1000C3300);
}

unint64_t sub_10000E0D0()
{
  unint64_t result = qword_1000C3308;
  if (!qword_1000C3308)
  {
    sub_10000C61C(&qword_1000C3170);
    sub_10000F52C((unint64_t *)&qword_1000C3158, &qword_1000C3150, (void (*)(void))sub_10000C664);
    sub_10000F8A0(&qword_1000C3310, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3308);
  }
  return result;
}

uint64_t sub_10000E1A8()
{
  return sub_10000FD6C(&qword_1000C3318, &qword_1000C3320);
}

uint64_t sub_10000E1E4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10000E270()
{
  unint64_t result = qword_1000C3328;
  if (!qword_1000C3328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3328);
  }
  return result;
}

unint64_t sub_10000E2C8()
{
  unint64_t result = qword_1000C3330;
  if (!qword_1000C3330)
  {
    sub_10000C61C(&qword_1000C3210);
    sub_10000E368();
    sub_10000FD6C(&qword_1000C3340, &qword_1000C3348);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3330);
  }
  return result;
}

unint64_t sub_10000E368()
{
  unint64_t result = qword_1000C3338;
  if (!qword_1000C3338)
  {
    sub_10000C61C(&qword_1000C3200);
    sub_10000F8A0(&qword_1000C3208, (void (*)(uint64_t))type metadata accessor for RunningCountdownView);
    sub_10000F8A0(&qword_1000C3310, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3338);
  }
  return result;
}

uint64_t sub_10000E444()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000E460()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000E480(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmAlertFullScreen(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E4E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for AlarmAlertFullScreen(0) - 8);
  uint64_t v4 = (id *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));

  return sub_100007874(v4, a1);
}

uint64_t sub_10000E564(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v10 = *(void *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 208);
  uint64_t v20 = *(void *)(a1 + 200);
  uint64_t v17 = *(void *)(a1 + 224);
  uint64_t v18 = *(void *)(a1 + 216);
  uint64_t v15 = *(void *)(a1 + 240);
  uint64_t v16 = *(void *)(a1 + 232);
  uint64_t v13 = *(void *)(a1 + 256);
  uint64_t v14 = *(void *)(a1 + 248);
  long long v11 = *(_OWORD *)(a1 + 280);
  long long v12 = *(_OWORD *)(a1 + 264);
  long long v8 = *(_OWORD *)(a1 + 312);
  long long v9 = *(_OWORD *)(a1 + 296);
  long long v6 = *(_OWORD *)(a1 + 344);
  long long v7 = *(_OWORD *)(a1 + 328);
  long long v5 = *(_OWORD *)(a1 + 360);
  uint64_t v3 = *(void *)(a1 + 376);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000E6C4(v2);
  sub_10000E6C4(v10);
  sub_10000E6D4(v20, v19, v18, v17, v16, v15, v14, v13, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v9, *((uint64_t *)&v9 + 1), v8, *((uint64_t *)&v8 + 1), v7, *((uint64_t *)&v7 + 1), v6,
    *((uint64_t *)&v6 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v3);
  return a1;
}

uint64_t sub_10000E6C4(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

void sub_10000E6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a4)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000E6C4(a21);
    sub_10000E6C4(a23);
  }
}

uint64_t sub_10000E788(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v10 = *(void *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 208);
  uint64_t v20 = *(void *)(a1 + 200);
  uint64_t v17 = *(void *)(a1 + 224);
  uint64_t v18 = *(void *)(a1 + 216);
  uint64_t v15 = *(void *)(a1 + 240);
  uint64_t v16 = *(void *)(a1 + 232);
  uint64_t v13 = *(void *)(a1 + 256);
  uint64_t v14 = *(void *)(a1 + 248);
  long long v11 = *(_OWORD *)(a1 + 280);
  long long v12 = *(_OWORD *)(a1 + 264);
  long long v8 = *(_OWORD *)(a1 + 312);
  long long v9 = *(_OWORD *)(a1 + 296);
  long long v6 = *(_OWORD *)(a1 + 344);
  long long v7 = *(_OWORD *)(a1 + 328);
  long long v5 = *(_OWORD *)(a1 + 360);
  uint64_t v3 = *(void *)(a1 + 376);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000E8EC(v2);
  sub_10000E8EC(v10);
  sub_10000E8FC(v20, v19, v18, v17, v16, v15, v14, v13, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v9, *((uint64_t *)&v9 + 1), v8, *((uint64_t *)&v8 + 1), v7, *((uint64_t *)&v7 + 1), v6,
    *((uint64_t *)&v6 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v3);
  return a1;
}

uint64_t sub_10000E8EC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_10000E8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10000E8EC(a21);
    sub_10000E8EC(a23);
  }
}

uint64_t sub_10000E9B4()
{
  uint64_t v1 = type metadata accessor for AlarmAlertFullScreen(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);

  sub_100004678(v0 + v3 + 8);
  sub_100004678(v0 + v3 + 48);
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 28);
  sub_100007830(&qword_1000C3220);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Font.Context();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10000EBB8()
{
  return sub_10000EE58((void (*)(uint64_t, uint64_t))sub_100054414);
}

uint64_t sub_10000EBD4()
{
  return sub_10000EBEC((uint64_t (*)(uint64_t))sub_10000BB70);
}

uint64_t sub_10000EBEC(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for AlarmAlertFullScreen(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

double sub_10000EC60(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_10000EC80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v3 = *(void *)(a1 + 160);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000E6C4(v2);
  sub_10000E6C4(v3);
  return a1;
}

void *sub_10000ED24(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23]);
  return a1;
}

uint64_t sub_10000ED98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v3 = *(void *)(a1 + 160);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000E8EC(v2);
  sub_10000E8EC(v3);
  return a1;
}

uint64_t sub_10000EE40()
{
  return sub_10000EE58((void (*)(uint64_t, uint64_t))sub_100050968);
}

uint64_t sub_10000EE58(void (*a1)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(type metadata accessor for AlarmAlertFullScreen(0) - 8);
  return sub_10000BFB0(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_10000EEC0()
{
  return sub_10000EBEC((uint64_t (*)(uint64_t))sub_10000BD90);
}

uint64_t sub_10000EEDC()
{
  return sub_10000BEC8();
}

uint64_t sub_10000EEF8()
{
  return sub_10000BF3C();
}

uint64_t sub_10000EF14()
{
  return sub_10000BCA8();
}

uint64_t sub_10000EF30()
{
  return sub_10000BD1C();
}

unint64_t sub_10000EF54()
{
  unint64_t result = qword_1000C3490;
  if (!qword_1000C3490)
  {
    sub_10000C61C(&qword_1000C3438);
    sub_10000EFF4();
    sub_10000FD6C(&qword_1000C34A8, &qword_1000C34B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3490);
  }
  return result;
}

unint64_t sub_10000EFF4()
{
  unint64_t result = qword_1000C3498;
  if (!qword_1000C3498)
  {
    sub_10000C61C(&qword_1000C3430);
    sub_10000FD6C(&qword_1000C34A0, &qword_1000C3428);
    sub_10000FD6C(&qword_1000C31C8, &qword_1000C31D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3498);
  }
  return result;
}

uint64_t sub_10000F0B8()
{
  return sub_10000F52C(&qword_1000C34C0, &qword_1000C3450, (void (*)(void))sub_10000F0E8);
}

unint64_t sub_10000F0E8()
{
  unint64_t result = qword_1000C34C8;
  if (!qword_1000C34C8)
  {
    sub_10000C61C(&qword_1000C3448);
    sub_10000C61C(&qword_1000C3438);
    sub_10000EF54();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C34C8);
  }
  return result;
}

uint64_t sub_10000F19C()
{
  return sub_10000EBEC((uint64_t (*)(uint64_t))sub_10000ACCC);
}

unint64_t sub_10000F1B4()
{
  unint64_t result = qword_1000C34D8;
  if (!qword_1000C34D8)
  {
    sub_10000C61C(&qword_1000C3470);
    sub_10000F254();
    sub_10000FD6C(&qword_1000C34E8, &qword_1000C34F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C34D8);
  }
  return result;
}

unint64_t sub_10000F254()
{
  unint64_t result = qword_1000C34E0;
  if (!qword_1000C34E0)
  {
    sub_10000C61C(&qword_1000C3468);
    sub_10000C61C(&qword_1000C3458);
    sub_10000F52C(&qword_1000C34B8, &qword_1000C3458, (void (*)(void))sub_10000F0B8);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C34E0);
  }
  return result;
}

uint64_t sub_10000F34C()
{
  return sub_10000EBEC((uint64_t (*)(uint64_t))sub_10000AEEC);
}

unint64_t sub_10000F364()
{
  unint64_t result = qword_1000C3500;
  if (!qword_1000C3500)
  {
    sub_10000C61C(&qword_1000C3410);
    sub_10000F52C(&qword_1000C3508, &qword_1000C3408, (void (*)(void))sub_10000F430);
    sub_10000FD6C(&qword_1000C34E8, &qword_1000C34F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3500);
  }
  return result;
}

uint64_t sub_10000F430()
{
  return sub_10000F52C(&qword_1000C3510, &qword_1000C3400, (void (*)(void))sub_10000F460);
}

unint64_t sub_10000F460()
{
  unint64_t result = qword_1000C3518;
  if (!qword_1000C3518)
  {
    sub_10000C61C(&qword_1000C33F8);
    sub_10000F52C(&qword_1000C3520, &qword_1000C33F0, (void (*)(void))sub_10000F5A8);
    sub_10000FD6C(&qword_1000C3568, &qword_1000C3570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3518);
  }
  return result;
}

uint64_t sub_10000F52C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000C61C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000F5A8()
{
  unint64_t result = qword_1000C3528;
  if (!qword_1000C3528)
  {
    sub_10000C61C(&qword_1000C33E8);
    sub_10000F648();
    sub_10000FD6C(&qword_1000C3558, &qword_1000C3560);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3528);
  }
  return result;
}

unint64_t sub_10000F648()
{
  unint64_t result = qword_1000C3530;
  if (!qword_1000C3530)
  {
    sub_10000C61C(&qword_1000C33E0);
    sub_10000F6E8();
    sub_10000FD6C(&qword_1000C31C8, &qword_1000C31D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3530);
  }
  return result;
}

unint64_t sub_10000F6E8()
{
  unint64_t result = qword_1000C3538;
  if (!qword_1000C3538)
  {
    sub_10000C61C(&qword_1000C33D8);
    sub_10000F788();
    sub_10000FD6C(&qword_1000C3548, &qword_1000C3550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3538);
  }
  return result;
}

unint64_t sub_10000F788()
{
  unint64_t result = qword_1000C3540;
  if (!qword_1000C3540)
  {
    sub_10000C61C(&qword_1000C33D0);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3540);
  }
  return result;
}

uint64_t sub_10000F834(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007830(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000F8A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000F8E8()
{
  return sub_10000B024();
}

uint64_t sub_10000F904()
{
  return sub_10000B098();
}

uint64_t sub_10000F920()
{
  return sub_10000AE04();
}

uint64_t sub_10000F93C()
{
  return sub_10000AE78();
}

uint64_t sub_10000F958(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000C484(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10000F99C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000C494(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10000F9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id *sub_10000FA54(id *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 6);

  sub_100004678((uint64_t)(a1 + 1));
  sub_100004678(v2);
  return a1;
}

uint64_t sub_10000FA94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007830(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000FAF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100007830(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10000FB58()
{
  unint64_t result = qword_1000C35F8;
  if (!qword_1000C35F8)
  {
    sub_10000C61C(&qword_1000C3600);
    sub_10000FD6C(&qword_1000C3608, &qword_1000C3610);
    sub_10000FBF8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C35F8);
  }
  return result;
}

unint64_t sub_10000FBF8()
{
  unint64_t result = qword_1000C3618;
  if (!qword_1000C3618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3618);
  }
  return result;
}

unint64_t sub_10000FC50()
{
  unint64_t result = qword_1000C3620;
  if (!qword_1000C3620)
  {
    sub_10000C61C(&qword_1000C3628);
    sub_10000FCCC();
    sub_10000FBF8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3620);
  }
  return result;
}

unint64_t sub_10000FCCC()
{
  unint64_t result = qword_1000C3630;
  if (!qword_1000C3630)
  {
    sub_10000C61C(&qword_1000C35E8);
    sub_10000FD6C(&qword_1000C3638, &qword_1000C35E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3630);
  }
  return result;
}

uint64_t sub_10000FD6C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000C61C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10000FE00()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Application();
  return [super dealloc];
}

uint64_t type metadata accessor for Application()
{
  return self;
}

double sub_10000FE58()
{
  return 10.0;
}

double sub_10000FE60()
{
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  return *(double *)&qword_1000CAF50;
}

char *sub_10000FEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Date();
  __chkstk_darwin(v5 - 8);
  long long v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = &v2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  *(void *)long long v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v9 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager;
  uint64_t v10 = qword_1000C2CA0;
  long long v11 = v2;
  if (v10 != -1) {
    swift_once();
  }
  long long v12 = (void *)qword_1000CAE30;
  *(void *)&v11[v9] = qword_1000CAE30;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch] = 0;
  uint64_t v13 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  id v14 = v12;
  Date.init()();
  type metadata accessor for ObservableStopwatchModel();
  swift_allocObject();
  *(void *)&v11[v13] = sub_100033498(206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 1, 3, v7);
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_leadingPadding] = 0x4031000000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_verticalPadding] = 0x4031000000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_expectedApertureHeight] = 0x4055000000000000;

  uint64_t v15 = (objc_class *)type metadata accessor for SecureStopwatchController();
  v29.receiver = v11;
  v29.super_class = v15;
  uint64_t v16 = (char *)[super init];
  uint64_t v17 = &v16[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  *(void *)uint64_t v17 = a1;
  *((void *)v17 + 1) = a2;
  uint64_t v18 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = self;
  v28[2] = 0;
  v28[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  id v20 = [v18 description];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._object = (void *)0x8000000100098E30;
  v25._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v25);
  v28[0] = a1;
  v28[1] = a2;
  sub_100007830(&qword_1000C3750);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRelease();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 logInfo:v26];

  (*(void (**)(void))((swift_isaMask & *(void *)v18) + 0x188))();
  return v18;
}

uint64_t sub_10001020C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10001022C, 0, 0);
}

uint64_t sub_10001022C()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 24) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000102C0, v2, v1);
}

uint64_t sub_1000102C0()
{
  swift_release();
  sub_1000112CC();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100010324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C3778);
  __chkstk_darwin(v6 - 8);
  long long v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001452C(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000FAF8((uint64_t)v8, &qword_1000C3778);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

id sub_100010628(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = &v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager;
  uint64_t v8 = qword_1000C2CA0;
  uint64_t v9 = v1;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_1000CAE30;
  *(void *)&v9[v7] = qword_1000CAE30;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel] = 0;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch] = 0;
  uint64_t v11 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  id v12 = v10;
  Date.init()();
  type metadata accessor for ObservableStopwatchModel();
  swift_allocObject();
  *(void *)&v9[v11] = sub_100033498(206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 1, 3, v5);
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = 0;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView] = 0;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage] = 0;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton] = 0;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_leadingPadding] = 0x4031000000000000;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_verticalPadding] = 0x4031000000000000;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_expectedApertureHeight] = 0x4055000000000000;

  uint64_t v13 = (objc_class *)type metadata accessor for SecureStopwatchController();
  v16.receiver = v9;
  v16.super_class = v13;
  [super initWithCoder:a1];

  return v14;
}

id sub_100010844(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &v3[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v10 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager;
  uint64_t v11 = qword_1000C2CA0;
  id v12 = v3;
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_1000CAE30;
  *(void *)&v3[v10] = qword_1000CAE30;
  *(void *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel] = 0;
  *(void *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch] = 0;
  uint64_t v14 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  id v15 = v13;
  Date.init()();
  type metadata accessor for ObservableStopwatchModel();
  swift_allocObject();
  *(void *)&v12[v14] = sub_100033498(206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 1, 3, v8);
  *(void *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = 0;
  *(void *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView] = 0;
  *(void *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage] = 0;
  *(void *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton] = 0;
  *(void *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_leadingPadding] = 0x4031000000000000;
  *(void *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_verticalPadding] = 0x4031000000000000;
  *(void *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_expectedApertureHeight] = 0x4055000000000000;

  if (a2)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v16 = 0;
  }
  uint64_t v17 = (objc_class *)type metadata accessor for SecureStopwatchController();
  v20.receiver = v12;
  v20.super_class = v17;
  id v18 = [super initWithNibName:v16 bundle:a3];

  return v18;
}

uint64_t sub_100010AD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  _StringGuts.grow(_:)(27);
  id v3 = [v0 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();

  v7._countAndFlagsBits = 0xD000000000000019;
  v7._object = (void *)0x8000000100098FB0;
  String.append(_:)(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 logInfo:v8, v4, v6];

  uint64_t v9 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  uint64_t v10 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v10
    && (id v11 = v10,
        id v12 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()(),
        v11,
        id v13 = [v12 state],
        v12,
        v13 == (id)1))
  {
    _StringGuts.grow(_:)(21);
    id v14 = [v1 description];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();

    v18._countAndFlagsBits = 0xD000000000000013;
    v18._object = (void *)0x8000000100098FF0;
    String.append(_:)(v18);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 logInfo:v19, v15, v17];

    objc_super v20 = *(void **)((char *)v1 + v9);
    if (!v20) {
      goto LABEL_8;
    }
    id v21 = v20;
    dispatch thunk of StopwatchViewModel.resumeLapTimer()();
  }
  else
  {
    _StringGuts.grow(_:)(20);
    id v22 = [v1 description:0:0xE000000000000000];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();

    v26._object = (void *)0x8000000100098FD0;
    v26._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v26);
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 logInfo:v27, v23, v25];

    uint64_t v28 = *(void **)((char *)v1 + v9);
    if (!v28) {
      goto LABEL_8;
    }
    id v21 = v28;
    dispatch thunk of StopwatchViewModel.pauseLapTimer()();
  }

LABEL_8:
  objc_super v29 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x1A8);

  return v29();
}

void sub_100010E04()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  id v3 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel];
  if (v3
    && (id v4 = v3,
        uint64_t v5 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()(),
        v4,
        id v6 = [v5 state],
        v5,
        v6 == (id)2))
  {
    Swift::String v7 = self;
    _StringGuts.grow(_:)(20);
    id v8 = [v1 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v9._object = (void *)0x8000000100098F90;
    v9._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v9);
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 logInfo:v10];

    id v11 = *(void **)&v1[v2];
    if (!v11) {
      return;
    }
    id v17 = v11;
    dispatch thunk of StopwatchViewModel.lapLapTimer()();
  }
  else
  {
    id v12 = self;
    _StringGuts.grow(_:)(23);
    id v13 = [v1 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v14._countAndFlagsBits = 0xD000000000000015;
    v14._object = (void *)0x8000000100098F70;
    String.append(_:)(v14);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 logInfo:v15];

    uint64_t v16 = *(void **)&v1[v2];
    if (!v16) {
      return;
    }
    id v17 = v16;
    dispatch thunk of StopwatchViewModel.resetLapTimer()();
  }
}

void sub_100011098()
{
  (*(void (**)(void))((swift_isaMask & *v0) + 0x1A8))();

  sub_100011204();
}

void sub_1000110F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v2
    && (id v3 = v2,
        id v4 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()(),
        v3,
        id v5 = [v4 state],
        v4,
        v5 == (id)1))
  {
    id v6 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage);
    if (!v6) {
      return;
    }
  }
  else
  {
    id v6 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage);
    if (!v6) {
      return;
    }
  }
  id v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 setState:];
}

void sub_100011204()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView);
  if (!v1)
  {
    __break(1u);
    return;
  }
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  NSString v10 = *(unsigned char **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView);
  if (!v2)
  {
    id v8 = v1;
    goto LABEL_6;
  }
  id v3 = v1;
  id v4 = v2;
  id v5 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

  id v6 = [v5 state];
  if (v6 != (id)2)
  {
LABEL_6:
    char v7 = 1;
    goto LABEL_7;
  }
  char v7 = 0;
LABEL_7:
  char v9 = v10[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode];
  v10[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode] = v7;
  sub_100031B04(v9);
}

void sub_1000112CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId + 8];
  if (v3)
  {
    uint64_t v4 = *(void *)v2;
    id v5 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager];
    swift_bridgeObjectRetain();
    id v6 = [v5 getStopwatches];
    if (v6)
    {
      char v7 = v6;
      id v8 = [v6 reschedule:[self mainThreadScheduler]];
      swift_unknownObjectRelease();

      char v9 = (void *)swift_allocObject();
      v9[2] = v1;
      v9[3] = v4;
      v9[4] = v3;
      uint64_t v24 = sub_100014308;
      uint64_t v25 = v9;
      aBlock = _NSConcreteStackBlock;
      uint64_t v21 = 1107296256;
      id v22 = sub_100011884;
      uint64_t v23 = &unk_1000B3190;
      NSString v10 = _Block_copy(&aBlock);
      id v11 = v1;
      swift_release();
      id v12 = [v8 addCompletionBlock:v10];
      _Block_release(v10);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    id v13 = self;
    _StringGuts.grow(_:)(27);
    id v14 = [v1 description];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    swift_bridgeObjectRelease();
    aBlock = (void **)v15;
    uint64_t v21 = v17;
    v18._object = (void *)0x8000000100098EC0;
    v18._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v18);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 logInfo:v19];
  }
}

void sub_10001153C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v4 = self;
    swift_errorRetain();
    _StringGuts.grow(_:)(32);
    id v5 = [a3 description];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v8 = v7;

    v9._countAndFlagsBits = v6;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._object = (void *)0x8000000100098F50;
    v10._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v10);
    sub_100007830(&qword_1000C42B0);
    _print_unlocked<A, B>(_:_:)();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 logInfo:v11];

    swift_errorRelease();
  }
  else
  {
    if (a1)
    {
      sub_100014314(0, &qword_1000C3770);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    id v12 = self;
    _StringGuts.grow(_:)(32);
    id v13 = [a3 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v14._countAndFlagsBits = 0xD00000000000001ELL;
    v14._object = (void *)0x8000000100098F00;
    String.append(_:)(v14);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 logInfo:v15];
  }
}

void sub_100011884(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_100011910(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007830(&qword_1000C3128);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v57 - 8);
  uint64_t v8 = __chkstk_darwin(v57);
  uint64_t v54 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)v53 - v11;
  __chkstk_darwin(v10);
  double v55 = (char *)v53 - v13;
  [a1 mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100014314(0, &qword_1000C3768);
  int v14 = swift_dynamicCast();
  uint64_t v15 = v59;
  if (!v14) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch;
  uint64_t v17 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch];
  *(void *)&v2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch] = v15;

  Swift::String v18 = *(void **)&v2[v16];
  NSString v19 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager];
  id v20 = objc_allocWithZone((Class)DefaultDateProvider);
  id v21 = v18;
  id v22 = v19;
  [v20 init];
  id v23 = objc_allocWithZone((Class)type metadata accessor for StopwatchViewModel());
  uint64_t v24 = v2;
  uint64_t v25 = StopwatchViewModel.init(stopwatch:manager:delegate:dateProvider:registerForNotifications:broadcastUpdates:)();
  Swift::String v26 = *(void **)&v24[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel];
  uint64_t v56 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  *(void *)&v24[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel] = v25;

  NSString v27 = *(void **)&v2[v16];
  if (!v27)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v58 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  swift_retain();
  id v28 = [v27 state];
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v60 = (uint64_t)v28;
  static Published.subscript.setter();
  objc_super v29 = *(void **)&v2[v16];
  if (!v29)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  swift_retain();
  [v29 offset];
  uint64_t v31 = v30;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v60 = v31;
  static Published.subscript.setter();
  uint64_t v32 = *(void **)&v2[v16];
  if (!v32)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v33 = v12;
  id v34 = [v32 startDate];
  uint64_t v35 = v57;
  if (!v34)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v6, 1, 1, v57);
LABEL_11:
    sub_10000FAF8((uint64_t)v6, &qword_1000C3128);
    uint64_t v41 = *(void **)&v2[v16];
    if (!v41) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  uint64_t v36 = v34;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v37(v6, v33, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v35) == 1) {
    goto LABEL_11;
  }
  uint64_t v38 = v55;
  v37(v55, v6, v35);
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v39(v33, v38, v35);
  v53[1] = swift_getKeyPath();
  v53[0] = swift_getKeyPath();
  v39(v54, v33, v35);
  swift_retain_n();
  static Published.subscript.setter();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v7 + 8);
  v40(v33, v35);
  swift_release();
  v40(v55, v35);
  uint64_t v41 = *(void **)&v2[v16];
  if (!v41) {
    goto LABEL_15;
  }
LABEL_12:
  if ([v41 state] == (id)2)
  {
    uint64_t v42 = *(void **)&v24[v56];
    if (!v42) {
      goto LABEL_18;
    }
    id v43 = v42;
    dispatch thunk of StopwatchViewModel.updateWithDisplayLink()();
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v44 = *(void **)&v24[v56];
  if (!v44) {
    goto LABEL_18;
  }
  id v43 = v44;
  dispatch thunk of StopwatchViewModel.updateTime()();
LABEL_17:

LABEL_18:
  (*(void (**)(void))((swift_isaMask & *(void *)v24) + 0x1A0))();
  uint64_t v45 = *(void **)&v2[v16];
  if (!v45)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_retain();
  id v46 = [v45 laps];
  if (v46)
  {
    uint64_t v47 = v46;
    sub_100014314(0, &qword_1000C3758);
    unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    BOOL v50 = __OFADD__(v49, 1);
    uint64_t v51 = v49 + 1;
    if (!v50)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v60 = v51;
      uint64_t v52 = static Published.subscript.setter();
      (*(void (**)(uint64_t))((swift_isaMask & *(void *)v24) + 0x1C8))(v52);
      return;
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_30:
  __break(1u);
}

void sub_100011FC8()
{
  uint64_t v1 = v0;
  id v2 = [self buttonWithType:0];
  uint64_t v3 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton];
  *(void *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = v2;

  uint64_t v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_18;
  }
  id v6 = [v5 layer];
  [v6 setCornerRadius:(*(double (**)(void))((swift_isaMask & *(void *)v0) + 0x178))() * 0.5];

  uint64_t v7 = *(void **)&v0[v3];
  if (!v7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v8 = [v7 layer];
  [v8 setMasksToBounds:1];

  uint64_t v9 = *(void **)&v1[v3];
  if (!v9)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v10 = *(void **)&v1[v3];
  if (!v10)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v11 = self;
  id v12 = v10;
  id v13 = [v11 mtOrange];
  id v14 = [v13 colorWithAlphaComponent:0.35];

  [v12 setBackgroundColor:v14];
  uint64_t v15 = *(void **)&v1[v3];
  if (!v15)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  [v15 addTarget:v1 action:"playPausedAction" forControlEvents:64];
  id v16 = [v1 view];
  if (!v16)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!*(void *)&v1[v3])
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v17 = v16;
  [v16 addSubview:];

  swift_getObjectType();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v19 = [self bundleForClass:ObjCClassFromMetadata];
  id v20 = objc_allocWithZone((Class)BSUICAPackageView);
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 initWithPackageName:v21 inBundle:v19];

  id v23 = self;
  if (!v22)
  {
    _StringGuts.grow(_:)(50);
    id v45 = [v1 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v46._countAndFlagsBits = 0xD000000000000030;
    v46._object = (void *)0x8000000100098E50;
    String.append(_:)(v46);
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v23 logInfo:v47];
    uint64_t v44 = v47;
    goto LABEL_14;
  }
  _StringGuts.grow(_:)(34);
  id v24 = [v1 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v25._object = (void *)0x8000000100098E90;
  v25._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v25);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 logInfo:v26];

  NSString v27 = *(void **)&v1[v3];
  if (!v27) {
    goto LABEL_24;
  }
  [v27 addSubview:v22];
  [v22 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v22 setUserInteractionEnabled:0];
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_100095580;
  id v29 = [v22 widthAnchor];
  id v30 = [v29 constraintEqualToConstant:23.0];

  *(void *)(v28 + 32) = v30;
  id v31 = [v22 heightAnchor];
  id v32 = [v31 constraintEqualToConstant:23.0];

  *(void *)(v28 + 40) = v32;
  id v33 = [v22 centerXAnchor];
  id v34 = *(void **)&v1[v3];
  if (!v34)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v35 = [v34 centerXAnchor];
  id v36 = [v33 constraintEqualToAnchor:v35];

  *(void *)(v28 + 48) = v36;
  id v37 = [v22 centerYAnchor];
  uint64_t v38 = *(void **)&v1[v3];
  if (!v38)
  {
LABEL_26:
    __break(1u);
    return;
  }
  uint64_t v39 = v37;
  uint64_t v40 = self;
  id v41 = [v38 centerYAnchor];
  id v42 = [v39 constraintEqualToAnchor:v41];

  *(void *)(v28 + 56) = v42;
  specialized Array._endMutation()();
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v40 activateConstraints:isa];

  uint64_t v44 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage];
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage] = v22;
LABEL_14:
}

void sub_100012634()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIButton.Configuration();
  __chkstk_darwin(v2 - 8);
  sub_100014314(0, &qword_1000C6E20);
  id v3 = [self sbui_systemApertureSymbolButtonConfiguration];
  static UIButton.Configuration._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = UIButton.init(configuration:primaryAction:)();
  uint64_t v5 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
  id v6 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
  *(void *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton] = v4;

  uint64_t v7 = *(void **)&v0[v5];
  if (!v7)
  {
    __break(1u);
    goto LABEL_10;
  }
  [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v8 = *(void **)&v0[v5];
  if (!v8)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v9 = [v8 layer];
  [v9 setCornerRadius:(*(double (**)(void))((swift_isaMask & *(void *)v0) + 0x178))() * 0.5];

  id v10 = [v0 view];
  if (!v10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!*(void *)&v0[v5])
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = v10;
  [v10 addSubview:];

  id v12 = objc_allocWithZone((Class)type metadata accessor for SpinnyResetView());
  id v13 = sub_100031148(0.0, 0.0, 50.0, 50.0, 23.0, 25.0);
  uint64_t v14 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView;
  uint64_t v15 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView];
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView] = v13;

  id v16 = *(void **)&v1[v5];
  if (!v16)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_100014314(0, &qword_1000C3760);
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v17 = v1;
  id v18 = v16;
  id v19 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  [v18 addAction:v19 forControlEvents:64];

  id v20 = *(void **)&v1[v5];
  if (!v20)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(void *)&v1[v14])
  {
    [v20 addSubview:];
    return;
  }
LABEL_15:
  __break(1u);
}

void sub_100012928(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView);
  if (v2)
  {
    if ((*((unsigned char *)v2 + OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode) & 1) == 0)
    {
      uint64_t v3 = swift_allocObject();
      *(void *)(v3 + 16) = v2;
      id v4 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v8[4] = sub_1000142A8;
      v8[5] = v3;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 1107296256;
      v8[2] = sub_10001C5B8;
      v8[3] = &unk_1000B3140;
      uint64_t v5 = _Block_copy(v8);
      id v6 = v2;
      swift_release();
      id v7 = [v4 initWithDuration:v5 dampingRatio:0.5 animations:1.0];
      _Block_release(v5);
      [v7 startAnimation];
    }
    sub_100010E04();
  }
  else
  {
    __break(1u);
  }
}

id sub_100012AA4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureStopwatchController();
  [super dealloc];
}

uint64_t type metadata accessor for SecureStopwatchController()
{
  return self;
}

uint64_t sub_100012CC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  uint64_t v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v3)
  {
    id v4 = v3;
    dispatch thunk of StopwatchViewModel.invalidateDisplayLink()();

    uint64_t v5 = *(void **)((char *)v1 + v2);
    if (v5)
    {
      id v6 = v5;
      dispatch thunk of StopwatchViewModel.updateWithDisplayLink()();
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v7 = static Published.subscript.setter();
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x1A0))(v7);
}

void sub_100012E0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  uint64_t v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v3)
  {
    id v4 = v3;
    dispatch thunk of StopwatchViewModel.invalidateDisplayLink()();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v5 = static Published.subscript.setter();
  id v6 = *(void **)((char *)v1 + v2);
  if (v6)
  {
    id v7 = v6;
    id v8 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

    [v8 offset];
    id v9 = *(void **)((char *)v1 + v2);
    swift_retain();
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

      [v11 previousLapsTotalInterval];
    }
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v5 = static Published.subscript.setter();
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x1A0))(v5);
  id v12 = *(void **)((char *)v1 + v2);
  if (v12)
  {
    id v13 = v12;
    dispatch thunk of StopwatchViewModel.updateTime()();
  }
}

void sub_100013018()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (!v2) {
    goto LABEL_7;
  }
  id v3 = v2;
  id v4 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

  id v5 = [v4 laps];
  if (v5)
  {
    sub_100014314(0, &qword_1000C3758);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!__OFADD__(v7, 1))
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.setter();
LABEL_7:
      (*(void (**)(void))((swift_isaMask & *v1) + 0x1E8))();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100013264()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C3128);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v27 - v5;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v29 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v12 = (char *)&v27 - v11;
  uint64_t v13 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  uint64_t v14 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v14)
  {
    id v15 = v14;
    dispatch thunk of StopwatchViewModel.invalidateDisplayLink()();

    id v16 = *(void **)((char *)v1 + v13);
    if (v16)
    {
      id v17 = v16;
      dispatch thunk of StopwatchViewModel.updateWithDisplayLink()();
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v30 = 2;
  swift_retain();
  static Published.subscript.setter();
  id v18 = *(void **)((char *)v1 + v13);
  if (v18)
  {
    swift_retain();
    id v19 = v18;
    id v20 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

    id v21 = [v20 startDate];
    if (v21)
    {
      uint64_t v22 = (uint64_t)v28;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = 1;
      uint64_t v22 = (uint64_t)v28;
    }
    id v24 = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v22, v23, 1, v7);
    sub_100013CA8(v22, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v6, v7);
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    swift_retain();
    id v24 = v29;
  }
  Date.init()();
  sub_10000FAF8((uint64_t)v6, &qword_1000C3128);
LABEL_12:
  swift_getKeyPath();
  swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v24, v12, v7);
  swift_retain();
  static Published.subscript.setter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  uint64_t v25 = swift_release();
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x1A0))(v25);
}

void sub_100013684(uint64_t a1, uint64_t a2)
{
}

void sub_10001369C(uint64_t a1, uint64_t a2)
{
}

void sub_1000136B4(uint64_t a1, uint64_t a2)
{
}

void sub_1000136CC(uint64_t a1, uint64_t a2)
{
}

void sub_1000136E4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = *(void **)(*v3 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v4)
  {
    id v6 = v4;
    a3();
  }
}

void sub_100013758()
{
  uint64_t v1 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
  if (!*(void *)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton))
  {
    uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1D0))();
    (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x1D8))(v2);
  }
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100095590;
  uint64_t v4 = *(void **)((char *)v0 + v1);
  if (!v4)
  {
    __break(1u);
    goto LABEL_19;
  }
  id v5 = [v4 leadingAnchor];
  id v6 = [v0 view];
  if (!v6)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v7 = v6;
  id v8 = [v6 leadingAnchor];

  id v9 = [v5 constraintEqualToAnchor:v8 constant:17.0];
  *(void *)(v3 + 32) = v9;
  uint64_t v10 = *(void **)((char *)v0 + v1);
  if (!v10)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v11 = [v10 trailingAnchor];
  uint64_t v12 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
  uint64_t v13 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton);
  if (!v13)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v14 = [v13 leadingAnchor];
  id v15 = [v11 constraintEqualToAnchor:v14 constant:-(*(double (**)(void))((swift_isaMask & *v0) + 0x170))()];

  *(void *)(v3 + 40) = v15;
  id v16 = *(void **)((char *)v0 + v1);
  if (!v16)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v17 = [v16 widthAnchor];
  id v18 = *(void (**)(void))((swift_isaMask & *v0) + 0x178);
  v18();
  id v19 = [v17 constraintEqualToConstant:];

  *(void *)(v3 + 48) = v19;
  id v20 = *(void **)((char *)v0 + v1);
  if (!v20)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  id v21 = [v20 heightAnchor];
  v18();
  id v22 = [v21 constraintEqualToConstant:];

  *(void *)(v3 + 56) = v22;
  uint64_t v23 = *(void **)((char *)v0 + v1);
  if (!v23)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  id v24 = [v23 centerYAnchor];
  id v25 = [v0 view];
  if (!v25)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  NSString v26 = v25;
  id v27 = [v25 centerYAnchor];

  id v28 = [v24 constraintEqualToAnchor:v27];
  *(void *)(v3 + 64) = v28;
  id v29 = *(void **)((char *)v0 + v12);
  if (!v29)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v30 = [v29 widthAnchor];
  v18();
  id v31 = [v30 constraintEqualToConstant:];

  *(void *)(v3 + 72) = v31;
  id v32 = *(void **)((char *)v0 + v12);
  if (!v32)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  id v33 = [v32 heightAnchor];
  v18();
  [v33 constraintEqualToConstant:];

  *(void *)(v3 + 80) = v34;
  id v35 = *(void **)((char *)v0 + v12);
  if (!v35)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  id v36 = [v35 centerYAnchor];
  id v37 = [v0 view];
  if (!v37)
  {
LABEL_29:
    __break(1u);
    return;
  }
  uint64_t v38 = v37;
  uint64_t v39 = self;
  id v40 = [v38 centerYAnchor];

  id v41 = [v36 constraintEqualToAnchor:v40];
  *(void *)(v3 + 88) = v41;
  specialized Array._endMutation()();
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v39 activateConstraints:isa];
}

uint64_t sub_100013CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C3128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100013D28(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      id v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 identifier];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v8;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_18;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100013EBC(char a1)
{
  id v2 = (id)FormatTime();
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = (id)FormatTime();
  if (v6)
  {
    id v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  id v10 = (id)FormatTime();
  if (v10)
  {
    id v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v13 = 0;
  }
  id v14 = (id)FormatTime();
  if (!v14)
  {
    uint64_t v17 = 0;
    if (a1) {
      goto LABEL_12;
    }
LABEL_16:
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t result = static Published.subscript.setter();
    if (v13)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      uint64_t result = static Published.subscript.setter();
      if (v17)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        swift_retain();
        uint64_t result = static Published.subscript.setter();
        if (v5)
        {
          swift_getKeyPath();
          swift_getKeyPath();
          swift_retain();
          uint64_t result = static Published.subscript.setter();
          if (v9)
          {
            swift_getKeyPath();
            swift_getKeyPath();
            swift_retain();
            return static Published.subscript.setter();
          }
          goto LABEL_24;
        }
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  id v15 = v14;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if ((a1 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100014268()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000142A0(uint64_t a1)
{
  sub_100012928(a1, *(void *)(v1 + 16));
}

id sub_1000142A8()
{
  return sub_100032AAC(*(void *)(v0 + 16));
}

uint64_t sub_1000142B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000142C0()
{
  return swift_release();
}

uint64_t sub_1000142C8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100014308(uint64_t a1, uint64_t a2)
{
  sub_10001153C(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_100014314(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100014350()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100014390()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100014438;
  v3[2] = v2;
  return _swift_task_switch(sub_10001022C, 0, 0);
}

uint64_t sub_100014438()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10001452C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C3778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014594()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000145CC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100014438;
  id v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000C4EC8 + dword_1000C4EC8);
  return v6(a1, v4);
}

uint64_t sub_100014690()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100014750()
{
  return sub_100014C78((void (*)(void))sub_100014690);
}

uint64_t sub_100014768()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100014790()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t Atomic.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  Atomic.init(wrappedValue:)(a1);
  return v2;
}

char *Atomic.init(wrappedValue:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  type metadata accessor for CPUnfairLock();
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 0;
  *((void *)v1 + 2) = v4;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))(&v1[*(void *)(v3 + 96)], a1);
  return v1;
}

uint64_t type metadata accessor for CPUnfairLock()
{
  return self;
}

uint64_t Atomic.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)(v1[2] + 16);
  swift_beginAccess();
  os_unfair_lock_lock(v4);
  uint64_t v5 = (char *)v1 + *(void *)(*v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v5);
  os_unfair_lock_unlock(v4);
  return swift_endAccess();
}

uint64_t Atomic.wrappedValue.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_100014CE4(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

void (*Atomic.wrappedValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  id v7 = malloc(v6);
  v3[4] = v7;
  Atomic.wrappedValue.getter((uint64_t)v7);
  return sub_100014B04;
}

void sub_100014B04(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    sub_100014CE4((uint64_t)v3);
    id v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    sub_100014CE4(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t *Atomic.deinit()
{
  uint64_t v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 96));
  return v0;
}

uint64_t Atomic.__deallocating_deinit()
{
  return sub_100014C78((void (*)(void))Atomic.deinit);
}

uint64_t sub_100014C78(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t sub_100014CD4()
{
  return swift_deallocClassInstance();
}

uint64_t sub_100014CE4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)(v1[2] + 16);
  swift_beginAccess();
  os_unfair_lock_lock(v4);
  swift_endAccess();
  uint64_t v5 = (char *)v1 + *(void *)(*v1 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 24))(v5, a1);
  swift_endAccess();
  swift_beginAccess();
  os_unfair_lock_unlock(v4);
  return swift_endAccess();
}

uint64_t sub_100014DEC()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ObservationStream()
{
  return sub_100014FE4();
}

uint64_t sub_100014EBC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ObservationStreamCollection()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100014F28()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Atomic()
{
  return sub_100014FE4();
}

uint64_t sub_100014FE4()
{
  return swift_getGenericMetadata();
}

void sub_1000150A8(void *a1, void (*a2)(char *, uint64_t))
{
  uint64_t v3 = v2;
  v361 = a2;
  id v371 = a1;
  uint64_t v347 = type metadata accessor for StopwatchContext();
  uint64_t v346 = *(void *)(v347 - 8);
  __chkstk_darwin(v347);
  v345 = (char *)&v343 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007830(&qword_1000C3B68);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  v351 = (char *)&v343 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v350 = (uint64_t)&v343 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v353 = (char *)&v343 - v11;
  __chkstk_darwin(v10);
  v356 = (char *)&v343 - v12;
  uint64_t v357 = type metadata accessor for AlarmActivityAttributes();
  uint64_t v359 = *(void *)(v357 - 8);
  __chkstk_darwin(v357);
  v352 = (char *)&v343 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100007830(&qword_1000C3B60);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  v349 = (char *)&v343 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v348 = (char *)&v343 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v354 = (char *)&v343 - v20;
  __chkstk_darwin(v19);
  v358 = (char *)&v343 - v21;
  uint64_t v365 = type metadata accessor for TimerActivityAttributes();
  uint64_t v360 = *(void *)(v365 - 8);
  __chkstk_darwin(v365);
  v355 = (char *)&v343 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v364 = type metadata accessor for ActivityAttributesType();
  uint64_t v369 = *(void *)(v364 - 8);
  uint64_t v23 = __chkstk_darwin(v364);
  v362 = (char *)&v343 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v363 = (char *)&v343 - v25;
  uint64_t v26 = sub_100007830(&qword_1000C3BA0);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  id v29 = (char *)&v343 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  id v31 = (char *)&v343 - v30;
  uint64_t v370 = type metadata accessor for ActivityDescriptor();
  uint64_t v32 = *(void *)(v370 - 8);
  __chkstk_darwin(v370);
  v366 = (char *)&v343 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v34 = self;
  v374 = 0;
  unint64_t v375 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  id v35 = [v2 description];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v38 = v37;
  swift_bridgeObjectRelease();

  v374 = (void *)v36;
  unint64_t v375 = v38;
  id v39 = v371;
  v40._countAndFlagsBits = 0xD00000000000001ELL;
  v40._object = (void *)0x8000000100099870;
  String.append(_:)(v40);
  NSString v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v34 logInfo:v41];

  type metadata accessor for ActivityScene();
  uint64_t v42 = swift_dynamicCastClass();
  if (v42)
  {
    id v43 = (void *)v42;
    v367 = v3;
    id v368 = v34;
    uint64_t v44 = *(void **)&v3[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_currentSessionScene];
    *(void *)&v3[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_currentSessionScene] = v42;
    id v45 = v39;

    swift_getKeyPath();
    id v371 = v43;
    dispatch thunk of ActivityScene.subscript.getter();
    swift_release();
    Swift::String v46 = v374;
    if (v374)
    {
      id v343 = v45;
      NSString v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
      uint64_t v48 = 1;
      uint64_t v49 = v370;
      v47(v29, 1, 1, v370);
      sub_10001EFAC(&qword_1000C3BA8, (void (*)(uint64_t))&type metadata accessor for ActivityDescriptor);
      dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

      uint64_t v344 = v32;
      BOOL v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      if (v50(v29, 1, v49) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v344 + 32))(v31, v29, v49);
        uint64_t v48 = 0;
      }
      v47(v31, v48, 1, v49);
      unsigned int v51 = v50(v31, 1, v49);
      id v45 = v343;
      if (v51 != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v344 + 32))(v366, v31, v49);
        uint64_t v52 = v361;
        id v53 = [v361 role];
        uint64_t v54 = (void *)static UISceneSessionRole.activityAmbient.getter();
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v57 = v56;
        if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v58)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v82 & 1) == 0)
          {
            id v93 = [v52 role];
            uint64_t v94 = (void *)static UISceneSessionRole.activityAmbientCompact.getter();
            uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v97 = v96;
            if (v95 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v97 == v98)
            {

              swift_bridgeObjectRelease_n();
              long long v91 = v366;
              id v83 = v367;
              id v92 = v368;
              long long v99 = &stru_1000BF000;
            }
            else
            {
              char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              long long v91 = v366;
              id v83 = v367;
              id v92 = v368;
              long long v99 = &stru_1000BF000;
              if ((v100 & 1) == 0) {
                goto LABEL_22;
              }
            }
            v374 = 0;
            unint64_t v375 = 0xE000000000000000;
            _StringGuts.grow(_:)(36);
            id v101 = [v83 *(SEL *)&v99[115].align];
            uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v104 = v103;
            swift_bridgeObjectRelease();

            v374 = (void *)v102;
            unint64_t v375 = v104;
            v105._countAndFlagsBits = 0xD000000000000022;
            v105._object = (void *)0x8000000100099AD0;
            String.append(_:)(v105);
            NSString v89 = String._bridgeToObjectiveC()();
            char v90 = 1;
LABEL_21:
            swift_bridgeObjectRelease();
            [v92 logInfo:v89];

            *((unsigned char *)v83 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination) = v90;
LABEL_22:
            v106 = v363;
            ActivityDescriptor.attributesType.getter();
            sub_10001EFAC(&qword_1000C3BB0, (void (*)(uint64_t))&type metadata accessor for TimerActivityAttributes);
            long long v107 = v362;
            uint64_t v108 = v365;
            ActivityAttributesType.init<A>(from:)();
            char v109 = static ActivityAttributesType.== infix(_:_:)();
            uint64_t v110 = v369 + 8;
            uint64_t v111 = *(void (**)(char *, uint64_t))(v369 + 8);
            uint64_t v112 = v364;
            v111(v107, v364);
            v111(v106, v112);
            uint64_t v369 = v110;
            v361 = v111;
            if (v109)
            {
              type metadata accessor for JSONDecoder();
              swift_allocObject();
              JSONDecoder.init()();
              uint64_t v113 = ActivityDescriptor.attributesData.getter();
              unint64_t v115 = v114;
              sub_10001EFAC(&qword_1000C3BE8, (void (*)(uint64_t))&type metadata accessor for TimerActivityAttributes);
              double v116 = v358;
              dispatch thunk of JSONDecoder.decode<A>(_:from:)();
              sub_10001EF10(v113, v115);
              swift_release();
              uint64_t v127 = v360;
              v362 = *(char **)(v360 + 56);
              ((void (*)(char *, void, uint64_t, uint64_t))v362)(v116, 0, 1, v108);
              long long v128 = v355;
              (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v355, v116, v108);
              v374 = 0;
              unint64_t v375 = 0xE000000000000000;
              _StringGuts.grow(_:)(57);
              uint64_t v129 = v367;
              id v130 = [v367 description];
              uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v133 = v132;

              v134._countAndFlagsBits = v131;
              v134._object = v133;
              String.append(_:)(v134);
              swift_bridgeObjectRelease();
              v135._countAndFlagsBits = 0xD000000000000018;
              v135._object = (void *)0x8000000100099A80;
              String.append(_:)(v135);
              _print_unlocked<A, B>(_:_:)();
              v136._countAndFlagsBits = 0x632068746977205DLL;
              v136._object = (void *)0xEF20747865746E6FLL;
              String.append(_:)(v136);
              double v137 = (void *)TimerActivityAttributes.context.getter();
              id v138 = [v137 description];
              uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v141 = v140;

              v142._countAndFlagsBits = v139;
              v142._object = v141;
              String.append(_:)(v142);

              uint64_t v143 = v365;
              swift_bridgeObjectRelease();
              v144._countAndFlagsBits = 0x676E69726966202CLL;
              v144._object = (void *)0xEA0000000000203ALL;
              String.append(_:)(v144);
              uint64_t v145 = (void *)TimerActivityAttributes.context.getter();
              char v146 = dispatch thunk of TimerContext.firing.getter();

              if (v146) {
                uint64_t v147 = 1702195828;
              }
              else {
                uint64_t v147 = 0x65736C6166;
              }
              if (v146) {
                unint64_t v148 = 0xE400000000000000;
              }
              else {
                unint64_t v148 = 0xE500000000000000;
              }
              unint64_t v149 = v148;
              String.append(_:)(*(Swift::String *)&v147);
              swift_bridgeObjectRelease();
              NSString v150 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v368 logInfo:v150];

              uint64_t v151 = (uint64_t)v354;
              (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v354, v128, v143);
              ((void (*)(uint64_t, void, uint64_t, uint64_t))v362)(v151, 0, 1, v143);
              uint64_t v154 = v129;
              uint64_t v152 = (uint64_t)&v129[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes];
              swift_beginAccess();
              sub_10001EFF4(v151, v152, &qword_1000C3B60);
              swift_endAccess();
              uint64_t v153 = (void *)TimerActivityAttributes.context.getter();
              LOBYTE(v152) = dispatch thunk of TimerContext.firing.getter();

              v129[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType] = v152 & 1;
              if ((v152 & 1) == 0) {
                goto LABEL_44;
              }
              if (v129[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination]
                && v129[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] != 1)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v202 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v202 & 1) == 0)
                {
LABEL_44:
                  v374 = 0;
                  unint64_t v375 = 0xE000000000000000;
                  _StringGuts.grow(_:)(56);
                  id v203 = [v129 description];
                  uint64_t v204 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v206 = v205;

                  v207._countAndFlagsBits = v204;
                  v207._object = v206;
                  String.append(_:)(v207);
                  swift_bridgeObjectRelease();
                  v208._countAndFlagsBits = 0xD000000000000028;
                  v208._object = (void *)0x8000000100099AA0;
                  String.append(_:)(v208);
                  id v209 = [v129 description];
                  uint64_t v210 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v212 = v211;

                  v213._countAndFlagsBits = v210;
                  v213._object = v212;
                  String.append(_:)(v213);
                  swift_bridgeObjectRelease();
                  v214._countAndFlagsBits = 0x20646920726F6620;
                  v214._object = (void *)0xE90000000000005BLL;
                  String.append(_:)(v214);
                  v215 = (void *)TimerActivityAttributes.context.getter();
                  uint64_t v216 = dispatch thunk of TimerContext.timerId.getter();
                  uint64_t v218 = v217;

                  v219._countAndFlagsBits = v216;
                  v219._object = v218;
                  String.append(_:)(v219);
                  swift_bridgeObjectRelease();
                  v220._countAndFlagsBits = 93;
                  v220._object = (void *)0xE100000000000000;
                  String.append(_:)(v220);
                  NSString v221 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease();
                  [v368 logInfo:v221];

                  if (qword_1000C2C70 != -1) {
                    swift_once();
                  }
                  sub_10001EFAC(&qword_1000C3BD8, (void (*)(uint64_t))type metadata accessor for SessionSceneDelegate);
                  uint64_t v222 = (void *)TimerActivityAttributes.context.getter();
                  uint64_t v223 = dispatch thunk of TimerContext.timerId.getter();
                  uint64_t v225 = v224;

                  id v372 = (id)v223;
                  uint64_t v373 = v225;
                  AnyHashable.init<A>(_:)();
                  dispatch thunk of DataStore.registerObserver(_:for:)();
                  sub_10001EC9C((uint64_t)&v374);
                  (*(void (**)(char *, uint64_t))(v360 + 8))(v128, v365);
                  goto LABEL_49;
                }
              }
              (*(void (**)(char *, uint64_t))(v360 + 8))(v128, v143);
            }
            else
            {
              ActivityDescriptor.attributesType.getter();
              type metadata accessor for StopwatchActivityAttributes();
              sub_10001EFAC(&qword_1000C3BB8, (void (*)(uint64_t))&type metadata accessor for StopwatchActivityAttributes);
              ActivityAttributesType.init<A>(from:)();
              char v117 = static ActivityAttributesType.== infix(_:_:)();
              v111(v107, v112);
              v111(v106, v112);
              if (v117)
              {
                type metadata accessor for JSONDecoder();
                swift_allocObject();
                JSONDecoder.init()();
                uint64_t v118 = v91;
                uint64_t v119 = ActivityDescriptor.attributesData.getter();
                unint64_t v121 = v120;
                sub_10001EFAC(&qword_1000C3BE0, (void (*)(uint64_t))&type metadata accessor for StopwatchActivityAttributes);
                dispatch thunk of JSONDecoder.decode<A>(_:from:)();
                sub_10001EF10(v119, v121);
                swift_release();
                uint64_t v154 = v367;
                *(void *)&v367[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes] = v374;
                swift_release();
                v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType] = 4;
LABEL_50:
                id v226 = v368;
                v374 = 0;
                unint64_t v375 = 0xE000000000000000;
                _StringGuts.grow(_:)(33);
                id v227 = [v154 description];
                uint64_t v228 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v230 = v229;
                swift_bridgeObjectRelease();

                v374 = (void *)v228;
                unint64_t v375 = v230;
                v231._countAndFlagsBits = 0xD00000000000001CLL;
                v231._object = (void *)0x80000001000998F0;
                String.append(_:)(v231);
                uint64_t v232 = v363;
                uint64_t v233 = v118;
                ActivityDescriptor.attributesType.getter();
                sub_10001EFAC(&qword_1000C3BC8, (void (*)(uint64_t))&type metadata accessor for ActivityAttributesType);
                uint64_t v234 = v364;
                v235._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v235);
                swift_bridgeObjectRelease();
                v361(v232, v234);
                v236._countAndFlagsBits = 93;
                v236._object = (void *)0xE100000000000000;
                String.append(_:)(v236);
                NSString v237 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                [v226 logInfo:v237];

                uint64_t v238 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType;
                unsigned int v239 = v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType];
                uint64_t v240 = v226;
                if (v239 > 4 || (char v241 = 1, ((1 << v239) & 0x19) == 0))
                {
                  if (v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination]
                    && v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] != 1)
                  {
                    char v242 = 1;
                  }
                  else
                  {
                    char v242 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  }
                  swift_bridgeObjectRelease();
                  char v241 = v242 ^ 1;
                }
                id v243 = v371;
                if (objc_msgSend(v371, "SBUI_isHostedBySystemAperture"))
                {
                  v374 = 0;
                  unint64_t v375 = 0xE000000000000000;
                  _StringGuts.grow(_:)(39);
                  id v244 = [v154 description];
                  uint64_t v245 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v247 = v246;

                  v248._countAndFlagsBits = v245;
                  v248._object = v247;
                  String.append(_:)(v248);
                  swift_bridgeObjectRelease();
                  v249._object = (void *)0x8000000100099950;
                  v249._countAndFlagsBits = 0xD000000000000023;
                  String.append(_:)(v249);
                  id v372 = [v243 activationState];
                  type metadata accessor for ActivationState(0);
                  _print_unlocked<A, B>(_:_:)();
                  NSString v250 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease();
                  [v240 logInfo:v250];

                  uint64_t v251 = v359;
                  uint64_t v252 = v365;
                  switch(v154[v238])
                  {
                    case 1:
                      uint64_t v279 = (uint64_t)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes];
                      swift_beginAccess();
                      id v280 = v348;
                      sub_10000FA94(v279, (uint64_t)v348, &qword_1000C3B60);
                      if (!(*(unsigned int (**)(id, uint64_t, uint64_t))(v360 + 48))(v280, 1, v252)) {
                        goto LABEL_98;
                      }
                      sub_10000FAF8((uint64_t)v280, &qword_1000C3B60);
                      uint64_t v281 = 0;
                      uint64_t v282 = 0;
                      goto LABEL_99;
                    case 2:
                      uint64_t v267 = (uint64_t)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmAttributes];
                      swift_beginAccess();
                      uint64_t v268 = v350;
                      sub_10000FA94(v267, v350, &qword_1000C3B68);
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v251 + 48))(v268, 1, v357))
                      {
                        sub_10000FAF8(v268, &qword_1000C3B68);
                        uint64_t v269 = 0;
                        uint64_t v270 = 0;
                      }
                      else
                      {
                        v309 = (void *)AlarmActivityAttributes.context.getter();
                        sub_10000FAF8(v268, &qword_1000C3B68);
                        uint64_t v269 = dispatch thunk of AlarmContext.alarmId.getter();
                        uint64_t v270 = v310;
                      }
                      uint64_t v292 = v370;
                      id v311 = objc_allocWithZone((Class)type metadata accessor for AlarmApertureElementController());
                      uint64_t v312 = v270;
                      id v272 = v311;
                      v313 = sub_100021138(v269, v312, 1);
                      uint64_t v314 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmApertureElementProvider;
                      v315 = *(void **)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmApertureElementProvider];
                      *(void *)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmApertureElementProvider] = v313;

                      v316 = *(void **)&v154[v314];
                      if (v316) {
                        goto LABEL_100;
                      }
                      __break(1u);
LABEL_89:
                      v317 = (void *)AlarmActivityAttributes.context.getter();
                      sub_10000FAF8((uint64_t)v272, &qword_1000C3B68);
                      uint64_t v273 = dispatch thunk of AlarmContext.alarmId.getter();
                      uint64_t v274 = v318;

                      goto LABEL_90;
                    case 3:
                      uint64_t v271 = (uint64_t)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmAttributes];
                      swift_beginAccess();
                      id v272 = v351;
                      sub_10000FA94(v271, (uint64_t)v351, &qword_1000C3B68);
                      if (!(*(unsigned int (**)(id, uint64_t, uint64_t))(v251 + 48))(v272, 1, v357)) {
                        goto LABEL_89;
                      }
                      sub_10000FAF8((uint64_t)v272, &qword_1000C3B68);
                      uint64_t v273 = 0;
                      uint64_t v274 = 0;
LABEL_90:
                      uint64_t v292 = v370;
                      id v319 = objc_allocWithZone((Class)type metadata accessor for AlarmApertureElementController());
                      uint64_t v320 = v274;
                      uint64_t v275 = (uint64_t)v319;
                      v321 = sub_100021138(v273, v320, 0);
                      uint64_t v322 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmApertureElementProvider;
                      v323 = *(void **)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmApertureElementProvider];
                      *(void *)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmApertureElementProvider] = v321;

                      v316 = *(void **)&v154[v322];
                      if (v316) {
                        goto LABEL_100;
                      }
                      __break(1u);
LABEL_92:
                      uint64_t v277 = 0;
LABEL_93:
                      uint64_t v292 = v370;
                      id v324 = objc_allocWithZone((Class)type metadata accessor for StopwatchApertureController(0));
                      uint64_t v325 = v275;
                      id v254 = v324;
                      v326 = sub_10008B368(v277, v325);
                      uint64_t v327 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchApertureElementProvider;
                      v328 = *(void **)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchApertureElementProvider];
                      *(void *)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchApertureElementProvider] = v326;

                      v316 = *(void **)&v154[v327];
                      if (!v316)
                      {
                        __break(1u);
LABEL_95:
                        v329 = (void *)TimerActivityAttributes.context.getter();
                        sub_10000FAF8((uint64_t)v254, &qword_1000C3B60);
                        uint64_t v255 = dispatch thunk of TimerContext.timerId.getter();
                        uint64_t v256 = v330;

LABEL_96:
                        uint64_t v292 = v370;
                        id v331 = objc_allocWithZone((Class)type metadata accessor for TimerApertureElementController(0));
                        uint64_t v332 = v256;
                        id v280 = v331;
                        v333 = sub_10007B4C0(v255, v332, 0);
                        uint64_t v334 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerApertureElementProvider;
                        v335 = *(void **)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerApertureElementProvider];
                        *(void *)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerApertureElementProvider] = v333;

                        v316 = *(void **)&v154[v334];
                        if (!v316)
                        {
                          __break(1u);
LABEL_98:
                          v336 = (void *)TimerActivityAttributes.context.getter();
                          sub_10000FAF8((uint64_t)v280, &qword_1000C3B60);
                          uint64_t v281 = dispatch thunk of TimerContext.timerId.getter();
                          uint64_t v282 = v337;

LABEL_99:
                          uint64_t v292 = v370;
                          id v338 = objc_allocWithZone((Class)type metadata accessor for TimerApertureElementController(0));
                          v339 = sub_10007B4C0(v281, v282, 1);
                          uint64_t v340 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerApertureElementProvider;
                          v341 = *(void **)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerApertureElementProvider];
                          *(void *)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerApertureElementProvider] = v339;

                          v316 = *(void **)&v154[v340];
                          if (!v316)
                          {
                            __break(1u);
                            JUMPOUT(0x100017900);
                          }
                        }
                      }
LABEL_100:
                      id v342 = v316;
                      [v342 loadViewIfNeeded];
                      [v371 setSystemApertureElementViewControllerProvider:v342];

                      id v45 = v342;
                      break;
                    case 4:
                      uint64_t v275 = *(void *)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes];
                      if (!v275) {
                        goto LABEL_92;
                      }
                      swift_retain();
                      v276 = v345;
                      dispatch thunk of StopwatchActivityAttributes.context.getter();
                      swift_release();
                      uint64_t v277 = StopwatchContext.id.getter();
                      uint64_t v275 = v278;
                      (*(void (**)(char *, uint64_t))(v346 + 8))(v276, v347);
                      goto LABEL_93;
                    case 5:
                      v374 = 0;
                      unint64_t v375 = 0xE000000000000000;
                      _StringGuts.grow(_:)(65);
                      id v283 = [v154 description];
                      uint64_t v284 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v286 = v285;

                      v287._countAndFlagsBits = v284;
                      v287._object = v286;
                      String.append(_:)(v287);
                      swift_bridgeObjectRelease();
                      v288._countAndFlagsBits = 0xD00000000000001ALL;
                      v288._object = (void *)0x8000000100099980;
                      String.append(_:)(v288);
                      LOBYTE(v372) = v154[v238];
                      _print_unlocked<A, B>(_:_:)();
                      v289._object = (void *)0x80000001000999A0;
                      v289._countAndFlagsBits = 0xD000000000000023;
                      String.append(_:)(v289);
                      NSString v290 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                      [v240 logError:v290];

                      id v291 = objc_allocWithZone((Class)type metadata accessor for TimerApertureElementController(0));
                      goto LABEL_75;
                    default:
                      uint64_t v253 = (uint64_t)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes];
                      swift_beginAccess();
                      id v254 = v349;
                      sub_10000FA94(v253, (uint64_t)v349, &qword_1000C3B60);
                      if (!(*(unsigned int (**)(id, uint64_t, uint64_t))(v360 + 48))(v254, 1, v252)) {
                        goto LABEL_95;
                      }
                      sub_10000FAF8((uint64_t)v254, &qword_1000C3B60);
                      uint64_t v255 = 0;
                      uint64_t v256 = 0;
                      goto LABEL_96;
                  }
                  goto LABEL_101;
                }
                if ((v241 & 1) == 0)
                {
LABEL_75:
                  uint64_t v292 = v370;
LABEL_101:
                  uint64_t v293 = v344;
LABEL_102:

                  (*(void (**)(char *, uint64_t))(v293 + 8))(v233, v292);
                  return;
                }
                v374 = 0;
                unint64_t v375 = 0xE000000000000000;
                _StringGuts.grow(_:)(57);
                id v257 = [v154 description];
                uint64_t v258 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v260 = v259;

                v261._countAndFlagsBits = v258;
                v261._object = v260;
                String.append(_:)(v261);
                char v262 = v367;
                swift_bridgeObjectRelease();
                v263._countAndFlagsBits = 0xD000000000000035;
                v263._object = (void *)0x8000000100099910;
                String.append(_:)(v263);
                uint64_t v264 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination;
                if (v262[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination])
                {
                  if (v262[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] == 1)
                  {
                    uint64_t v265 = 0x41746361706D6F43;
                    unint64_t v266 = 0xEE00746E6569626DLL;
                  }
                  else
                  {
                    unint64_t v266 = 0xE400000000000000;
                    uint64_t v265 = 1701736270;
                  }
                }
                else
                {
                  uint64_t v265 = 0x69626D416C6C7546;
                  unint64_t v266 = 0xEB00000000746E65;
                }
                uint64_t v293 = v344;
                unint64_t v294 = v266;
                String.append(_:)(*(Swift::String *)&v265);
                swift_bridgeObjectRelease();
                NSString v295 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                [v240 logInfo:v295];

                id v296 = objc_allocWithZone((Class)SecureWindow);
                id v297 = [v296 initWithWindowScene:v371];
                v298 = *(void **)&v262[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
                *(void *)&v262[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window] = v297;

                sub_10001B184(v262[v238]);
                sub_100014314(0, &qword_1000C3BD0);
                sub_1000874F8();
                dispatch thunk of ActivityScene.textColor.setter();
                id v299 = [self blackColor];
                id v300 = [v299 colorWithAlphaComponent:0.9];

                dispatch thunk of ActivityScene.backgroundTintColor.setter();
                if (v262[v264] && v262[v264] != 1)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  char v301 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v301 & 1) == 0) {
                    goto LABEL_83;
                  }
                }
                id v302 = objc_allocWithZone((Class)type metadata accessor for ActivitySceneMetrics());
                ActivitySceneMetrics.init(size:cornerRadius:)();
                dispatch thunk of ActivityScene.resolvedMetrics.setter();
LABEL_83:
                char v303 = v262[v238];
                uint64_t v292 = v370;
                if (qword_1000C2C98 != -1) {
                  swift_once();
                }
                uint64_t v304 = qword_1000CAE28;
                uint64_t v305 = swift_allocObject();
                *(void *)(v305 + 16) = v262;
                *(unsigned char *)(v305 + 24) = v303;
                v306 = (void (**)())(v304 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
                uint64_t v307 = *(void *)(v304 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
                *v306 = sub_10001EFA0;
                v306[1] = (void (*)())v305;
                v308 = v262;
                sub_10000E8EC(v307);
                id v45 = v343;
                goto LABEL_102;
              }
              type metadata accessor for JSONDecoder();
              swift_allocObject();
              JSONDecoder.init()();
              uint64_t v122 = ActivityDescriptor.attributesData.getter();
              unint64_t v124 = v123;
              sub_10001EFAC(&qword_1000C3BC0, (void (*)(uint64_t))&type metadata accessor for AlarmActivityAttributes);
              uint64_t v125 = v356;
              uint64_t v126 = v357;
              dispatch thunk of JSONDecoder.decode<A>(_:from:)();
              sub_10001EF10(v122, v124);
              swift_release();
              uint64_t v155 = v359;
              v362 = *(char **)(v359 + 56);
              v358 = (char *)(v359 + 56);
              ((void (*)(char *, void, uint64_t, uint64_t))v362)(v125, 0, 1, v126);
              uint64_t v156 = v352;
              (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v352, v125, v126);
              v374 = 0;
              unint64_t v375 = 0xE000000000000000;
              _StringGuts.grow(_:)(45);
              uint64_t v154 = v367;
              id v157 = [v367 description];
              uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v160 = v159;

              v161._countAndFlagsBits = v158;
              v161._object = v160;
              String.append(_:)(v161);
              swift_bridgeObjectRelease();
              v162._countAndFlagsBits = 0xD000000000000018;
              v162._object = (void *)0x80000001000999D0;
              String.append(_:)(v162);
              _print_unlocked<A, B>(_:_:)();
              v163._countAndFlagsBits = 0x632068746977205DLL;
              v163._object = (void *)0xEF20747865746E6FLL;
              String.append(_:)(v163);
              v164 = (void *)AlarmActivityAttributes.context.getter();
              id v165 = [v164 description];
              uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v168 = v167;

              v169._countAndFlagsBits = v166;
              v169._object = v168;
              String.append(_:)(v169);

              swift_bridgeObjectRelease();
              NSString v170 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              uint64_t v171 = v126;
              id v172 = v368;
              [v368 logInfo:v170];

              v374 = 0;
              unint64_t v375 = 0xE000000000000000;
              _StringGuts.grow(_:)(56);
              id v173 = [v154 description];
              uint64_t v174 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v176 = v175;

              v177._countAndFlagsBits = v174;
              v177._object = v176;
              String.append(_:)(v177);
              swift_bridgeObjectRelease();
              v178._countAndFlagsBits = 0xD000000000000028;
              v178._object = (void *)0x80000001000999F0;
              String.append(_:)(v178);
              id v179 = [v154 description];
              uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v182 = v181;

              v183._countAndFlagsBits = v180;
              v183._object = v182;
              String.append(_:)(v183);
              swift_bridgeObjectRelease();
              v184._countAndFlagsBits = 0x20646920726F6620;
              v184._object = (void *)0xE90000000000005BLL;
              String.append(_:)(v184);
              uint64_t v185 = (void *)AlarmActivityAttributes.context.getter();
              uint64_t v186 = dispatch thunk of AlarmContext.alarmId.getter();
              uint64_t v188 = v187;

              v189._countAndFlagsBits = v186;
              v189._object = v188;
              String.append(_:)(v189);
              swift_bridgeObjectRelease();
              v190._countAndFlagsBits = 93;
              v190._object = (void *)0xE100000000000000;
              String.append(_:)(v190);
              NSString v191 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v172 logInfo:v191];

              v192 = (void *)AlarmActivityAttributes.context.getter();
              char v193 = dispatch thunk of AlarmContext.isSnoozed.getter();

              if (v193) {
                char v194 = 3;
              }
              else {
                char v194 = 2;
              }
              v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType] = v194;
              if (qword_1000C2C78 != -1) {
                swift_once();
              }
              sub_10001EFAC(&qword_1000C3BD8, (void (*)(uint64_t))type metadata accessor for SessionSceneDelegate);
              uint64_t v195 = (void *)AlarmActivityAttributes.context.getter();
              uint64_t v196 = dispatch thunk of AlarmContext.alarmId.getter();
              uint64_t v198 = v197;

              id v372 = (id)v196;
              uint64_t v373 = v198;
              AnyHashable.init<A>(_:)();
              dispatch thunk of DataStore.registerObserver(_:for:)();
              sub_10001EC9C((uint64_t)&v374);
              uint64_t v199 = v359;
              uint64_t v200 = (uint64_t)v353;
              (*(void (**)(char *, char *, uint64_t))(v359 + 16))(v353, v156, v171);
              ((void (*)(uint64_t, void, uint64_t, uint64_t))v362)(v200, 0, 1, v171);
              uint64_t v201 = (uint64_t)&v154[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmAttributes];
              swift_beginAccess();
              sub_10001EFF4(v200, v201, &qword_1000C3B68);
              swift_endAccess();
              (*(void (**)(char *, uint64_t))(v199 + 8))(v156, v171);
            }
LABEL_49:
            uint64_t v118 = v366;
            goto LABEL_50;
          }
        }
        v374 = 0;
        unint64_t v375 = 0xE000000000000000;
        _StringGuts.grow(_:)(28);
        id v83 = v367;
        id v84 = [v367 description];
        uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v87 = v86;
        swift_bridgeObjectRelease();

        v374 = (void *)v85;
        unint64_t v375 = v87;
        v88._countAndFlagsBits = 0xD00000000000001ALL;
        v88._object = (void *)0x8000000100099B00;
        String.append(_:)(v88);
        NSString v89 = String._bridgeToObjectiveC()();
        char v90 = 0;
        long long v91 = v366;
        id v92 = v368;
        goto LABEL_21;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v31, 1, 1, v370);
    }
    sub_10000FAF8((uint64_t)v31, &qword_1000C3BA0);
    v374 = 0;
    unint64_t v375 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    id v70 = [v367 description];
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v73 = v72;
    swift_bridgeObjectRelease();

    v374 = (void *)v71;
    unint64_t v375 = v73;
    v74._object = (void *)0x8000000100099890;
    v74._countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v74);
    id v75 = [v371 description];
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v78 = v77;

    v79._countAndFlagsBits = v76;
    v79._object = v78;
    String.append(_:)(v79);
    swift_bridgeObjectRelease();
    v80._countAndFlagsBits = 93;
    v80._object = (void *)0xE100000000000000;
    String.append(_:)(v80);
    NSString v81 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v368 logError:v81];

    return;
  }
  v374 = 0;
  unint64_t v375 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  id v59 = [v3 description];
  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v62 = v61;
  swift_bridgeObjectRelease();

  v374 = (void *)v60;
  unint64_t v375 = v62;
  v63._countAndFlagsBits = 0xD000000000000017;
  v63._object = (void *)0x80000001000993F0;
  String.append(_:)(v63);
  id v64 = [v39 description];
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;

  v68._countAndFlagsBits = v65;
  v68._object = v67;
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  id v371 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v34 logError:v371];
  id v69 = v371;
}

uint64_t sub_100017918(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEB00000000746E65;
  uint64_t v3 = 0x69626D416C6C7546;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x41746361706D6F43;
    }
    else {
      uint64_t v5 = 1701736270;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEE00746E6569626DLL;
    }
    else {
      unint64_t v6 = 0xE400000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x69626D416C6C7546;
  unint64_t v6 = 0xEB00000000746E65;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x41746361706D6F43;
    }
    else {
      uint64_t v3 = 1701736270;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEE00746E6569626DLL;
    }
    else {
      unint64_t v2 = 0xE400000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100017A44(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEE006E776F64746ELL;
  uint64_t v3 = 0x756F4372656D6954;
  uint64_t v4 = a1;
  uint64_t v5 = 0x756F4372656D6954;
  unint64_t v6 = 0xEE006E776F64746ELL;
  switch(v4)
  {
    case 1:
      uint64_t v7 = 0x4172656D6954;
      goto LABEL_4;
    case 2:
      uint64_t v7 = 0x416D72616C41;
LABEL_4:
      uint64_t v5 = v7 & 0xFFFFFFFFFFFFLL | 0x656C000000000000;
      unint64_t v6 = 0xEA00000000007472;
      break;
    case 3:
      uint64_t v5 = 0x6F6E536D72616C41;
      unint64_t v6 = 0xEB00000000657A6FLL;
      break;
    case 4:
      uint64_t v5 = 0x63746177706F7453;
      unint64_t v6 = 0xE900000000000068;
      break;
    case 5:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x6E776F6E6B6E55;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v8 = 0x4172656D6954;
      goto LABEL_11;
    case 2:
      uint64_t v8 = 0x416D72616C41;
LABEL_11:
      unint64_t v2 = 0xEA00000000007472;
      if (v5 != (v8 & 0xFFFFFFFFFFFFLL | 0x656C000000000000)) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 3:
      unint64_t v2 = 0xEB00000000657A6FLL;
      if (v5 != 0x6F6E536D72616C41) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 4:
      uint64_t v3 = 0x63746177706F7453;
      unint64_t v2 = 0xE900000000000068;
      goto LABEL_16;
    case 5:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x6E776F6E6B6E55) {
        goto LABEL_20;
      }
      goto LABEL_17;
    default:
LABEL_16:
      if (v5 != v3) {
        goto LABEL_20;
      }
LABEL_17:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_20:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

void sub_100017C70(char a1)
{
  unint64_t v2 = v1;
  _StringGuts.grow(_:)(87);
  id v4 = [v1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD00000000000003ALL;
  v9._object = (void *)0x8000000100099810;
  String.append(_:)(v9);
  unint64_t v10 = 0xEE006E776F64746ELL;
  uint64_t v11 = 0x756F4372656D6954;
  switch(a1)
  {
    case 1:
      uint64_t v12 = 0x4172656D6954;
      goto LABEL_4;
    case 2:
      uint64_t v12 = 0x416D72616C41;
LABEL_4:
      uint64_t v11 = v12 & 0xFFFFFFFFFFFFLL | 0x656C000000000000;
      unint64_t v10 = 0xEA00000000007472;
      break;
    case 3:
      unint64_t v10 = 0xEB00000000657A6FLL;
      uint64_t v11 = 0x6F6E536D72616C41;
      break;
    case 4:
      unint64_t v10 = 0xE900000000000068;
      uint64_t v11 = 0x63746177706F7453;
      break;
    case 5:
      unint64_t v10 = 0xE700000000000000;
      uint64_t v11 = 0x6E776F6E6B6E55;
      break;
    default:
      break;
  }
  unint64_t v13 = v10;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x8000000100099850;
  v14._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v14);
  uint64_t v15 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination;
  uint64_t v16 = 0x41746361706D6F43;
  unint64_t v17 = 0xEE00746E6569626DLL;
  if (v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] != 1)
  {
    uint64_t v16 = 1701736270;
    unint64_t v17 = 0xE400000000000000;
  }
  if (v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination]) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0x69626D416C6C7546;
  }
  if (v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination]) {
    uint64_t v19 = (void *)v17;
  }
  else {
    uint64_t v19 = (void *)0xEB00000000746E65;
  }
  uint64_t v20 = self;
  v21._countAndFlagsBits = v18;
  v21._object = v19;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v20 logInfo:v22];

  switch(a1)
  {
    case 1:
      if (v2[v15] && v2[v15] != 1) {
        goto LABEL_45;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        sub_1000192C8();
      }
      return;
    case 2:
      if (v2[v15] && v2[v15] != 1)
      {
LABEL_45:
        swift_bridgeObjectRelease();
      }
      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
        {
          char v27 = v2[v15];
          sub_10001A388(v27);
        }
      }
      return;
    case 3:
      if (v2[v15] && v2[v15] != 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0) {
          return;
        }
      }
      sub_100019EB0();
      return;
    case 4:
      if (v2[v15] && v2[v15] != 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
        {
          char v30 = v2[v15];
          sub_10001859C(v30);
          return;
        }
      }
      sub_1000182A0();
      return;
    case 5:
      return;
    default:
      if (v2[v15] && v2[v15] != 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
        {
          char v24 = v2[v15];
          sub_10001917C(v24);
          return;
        }
      }
      sub_100018A34();
      return;
  }
}

char *sub_1000182A0()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StopwatchContext();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[2] = 0;
  v25[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  id v6 = [v0 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x80000001000997D0;
  v11._countAndFlagsBits = 0xD00000000000003ELL;
  String.append(_:)(v11);
  uint64_t v12 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes;
  uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes];
  if (v13)
  {
    swift_retain();
    dispatch thunk of StopwatchActivityAttributes.context.getter();
    swift_release();
    uint64_t v14 = StopwatchContext.id.getter();
    uint64_t v13 = v15;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v16 = self;
  v25[0] = v14;
  v25[1] = v13;
  sub_100007830(&qword_1000C3750);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRelease();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 logInfo:v17];

  uint64_t v18 = *(void *)&v1[v12];
  if (v18)
  {
    swift_retain();
    dispatch thunk of StopwatchActivityAttributes.context.getter();
    swift_release();
    uint64_t v18 = StopwatchContext.id.getter();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    uint64_t v20 = 0;
  }
  Swift::String v21 = (char *)objc_allocWithZone((Class)type metadata accessor for StopwatchLockscreenController());
  *(void *)&v21[OBJC_IVAR____TtC10ClockAngel29StopwatchLockscreenController_customTrailingView] = 0;
  uint64_t result = sub_10000FEAC(v18, v20);
  char v23 = result;
  char v24 = *(void **)&result[OBJC_IVAR____TtC10ClockAngel29StopwatchLockscreenController_customTrailingView];
  if (v24)
  {
    *(void *)((char *)v24 + *(void *)(qword_1000CACE0 + (swift_isaMask & *v24) + 16) + 8) = &off_1000B35B8;
    swift_unknownObjectWeakAssign();
    return v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_10001859C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for StopwatchContext();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(78);
  id v8 = [v1 description];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000035;
  v13._object = (void *)0x8000000100099730;
  String.append(_:)(v13);
  uint64_t v14 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes;
  uint64_t v15 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes];
  if (v15)
  {
    swift_retain();
    dispatch thunk of StopwatchActivityAttributes.context.getter();
    swift_release();
    uint64_t v16 = StopwatchContext.id.getter();
    uint64_t v15 = v17;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v18 = self;
  v37[0] = v16;
  v37[1] = v15;
  sub_100007830(&qword_1000C3750);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRelease();
  v19._object = (void *)0x8000000100099770;
  v19._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v19);
  LOBYTE(v37[0]) = a1;
  _print_unlocked<A, B>(_:_:)();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 logInfo:v20];

  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v21 = *(void *)&v2[v14];
      if (v21)
      {
        swift_retain();
        dispatch thunk of StopwatchActivityAttributes.context.getter();
        swift_release();
        uint64_t v21 = StopwatchContext.id.getter();
        uint64_t v23 = v22;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
      else
      {
        uint64_t v23 = 0;
      }
      id v35 = objc_allocWithZone((Class)type metadata accessor for StopwatchStandbyCompressedController());
      return sub_10004E9C4(v21, v23);
    }
    else
    {
      uint64_t v38 = 0;
      unint64_t v39 = 0xE000000000000000;
      _StringGuts.grow(_:)(63);
      id v27 = [v2 description];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v30 = v29;

      v31._countAndFlagsBits = v28;
      v31._object = v30;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits = 0xD00000000000003DLL;
      v32._object = (void *)0x8000000100099790;
      String.append(_:)(v32);
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v18 logInfo:v33];

      return 0;
    }
  }
  else
  {
    uint64_t v24 = *(void *)&v2[v14];
    if (v24)
    {
      swift_retain();
      dispatch thunk of StopwatchActivityAttributes.context.getter();
      swift_release();
      uint64_t v24 = StopwatchContext.id.getter();
      uint64_t v26 = v25;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v36 = (char *)objc_allocWithZone((Class)type metadata accessor for StopwatchStandbyController());
    *(void *)&v36[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView] = 0;
    *(void *)&v36[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView] = 0;
    *(void *)&v36[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_glyphSize] = 0x404B000000000000;
    *(void *)&v36[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadButtonPadding] = 0x404A000000000000;
    *(void *)&v36[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadCountdownPadding] = 0x4038000000000000;
    *(void *)&v36[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_lapLabelOffset] = 0x4024000000000000;
    *(void *)&v36[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_buttonBottomPadding] = 0x404A000000000000;
    *(void *)&v36[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_rightEdgePadding] = 0x4048000000000000;
    return sub_10000FEAC(v24, v26);
  }
}

void sub_100018A34()
{
  unint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for SessionsTimerPlatter(0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v50 - v6;
  uint64_t v8 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v8 - 8);
  Swift::String v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v50 - v16;
  sub_10001AC98((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10000FAF8((uint64_t)v10, &qword_1000C5390);
  }
  else
  {
    sub_10001EC10((uint64_t)v10, (uint64_t)v17);
    id v18 = [self currentTraitCollection];
    id v19 = [v18 _backlightLuminance];

    *(void *)&long long v54 = 0;
    *((void *)&v54 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v50[1] = v1;
    id v20 = [v1 description];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x80000001000996F0;
    v25._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v25);
    if (v19 == (id)1) {
      uint64_t v26 = 1702195828;
    }
    else {
      uint64_t v26 = 0x65736C6166;
    }
    if (v19 == (id)1) {
      id v27 = (void *)0xE400000000000000;
    }
    else {
      id v27 = (void *)0xE500000000000000;
    }
    uint64_t v28 = self;
    v29._countAndFlagsBits = v26;
    v29._object = v27;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v28 logInfo:v30];

    sub_10001EE24((uint64_t)v17, (uint64_t)v15, type metadata accessor for TimerSessionEntry);
    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    Swift::String v31 = (void *)qword_1000CAE28;
    uint64_t v55 = type metadata accessor for ClockAngelConnectionManager();
    uint64_t v56 = &off_1000B4D40;
    *(void *)&long long v54 = v31;
    Swift::String v32 = self;
    id v33 = v31;
    id v34 = [v32 mtOrange];
    uint64_t v35 = Color.init(uiColor:)();
    if (v19 == (id)1)
    {
      uint64_t v36 = Color.opacity(_:)();
      swift_release();
      id v37 = [v32 mtOrange];
      Color.init(uiColor:)();
      uint64_t v38 = Color.opacity(_:)();
      swift_release();
      static Color.white.getter();
      uint64_t v39 = Color.opacity(_:)();
      swift_release();
      static Color.white.getter();
      uint64_t v40 = Color.opacity(_:)();
      swift_release();
      uint64_t v52 = &type metadata for LowLuminanceSessionUiConfig;
      id v53 = &off_1000B5508;
      NSString v41 = (void *)swift_allocObject();
      v41[2] = v36;
      v41[3] = v38;
      v41[4] = v39;
    }
    else
    {
      id v42 = [v32 mtOrange];
      Color.init(uiColor:)();
      uint64_t v43 = Color.opacity(_:)();
      swift_release();
      uint64_t v44 = static Color.white.getter();
      static Color.white.getter();
      uint64_t v40 = Color.opacity(_:)();
      swift_release();
      uint64_t v52 = &type metadata for StandardSessionUiConfig;
      id v53 = &off_1000B5578;
      NSString v41 = (void *)swift_allocObject();
      v41[2] = v35;
      v41[3] = v43;
      v41[4] = v44;
    }
    v41[5] = v40;
    *(void *)&long long v51 = v41;
    *(void *)&v7[v2[7]] = 0x4028000000000000;
    sub_10001EC10((uint64_t)v15, (uint64_t)v7);
    sub_10000CB18(&v54, (uint64_t)&v7[v2[5]]);
    sub_10000CB18(&v51, (uint64_t)&v7[v2[6]]);
    id v45 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3B58));
    *(void *)&v45[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v45) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_10001EE24((uint64_t)v7, (uint64_t)v5, type metadata accessor for SessionsTimerPlatter);
    Swift::String v46 = (void *)UIHostingController.init(rootView:)();
    sub_10001EE8C((uint64_t)v7, type metadata accessor for SessionsTimerPlatter);
    *(void *)((char *)v46 + *(void *)(qword_1000CACE0 + (swift_isaMask & *v46) + 16) + 8) = &off_1000B35B8;
    swift_unknownObjectWeakAssign();
    id v47 = [v46 view];
    if (v47)
    {
      uint64_t v48 = v47;
      id v49 = [self clearColor];
      [v48 setBackgroundColor:v49];

      sub_10001EE8C((uint64_t)v17, type metadata accessor for TimerSessionEntry);
    }
    else
    {

      __break(1u);
    }
  }
}

uint64_t sub_1000190FC(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  uint64_t v5 = sub_10001E124(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)((char *)v2 + qword_1000CACE0) - 8) + 8))(a1);
  return v5;
}

char *sub_10001917C(char a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      return sub_100019A0C();
    }
    else
    {
      uint64_t v3 = self;
      _StringGuts.grow(_:)(53);
      id v4 = [v1 description:0:0xE000000000000000];
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      v8._countAndFlagsBits = v5;
      v8._object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x80000001000996B0;
      v9._countAndFlagsBits = 0xD000000000000033;
      String.append(_:)(v9);
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v3 logInfo:v10];

      return 0;
    }
  }
  else
  {
    return (char *)sub_1000192C8();
  }
}

uint64_t sub_1000192C8()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_100007830((uint64_t *)&unk_1000C3B70);
  __chkstk_darwin(v2 - 8);
  uint64_t v52 = (uint64_t *)((char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for LinearTimerTimelineCountdown();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v54 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v53 = (uint64_t)&v52 - v7;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v52 - v20;
  sub_10001AC98((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10000FAF8((uint64_t)v14, &qword_1000C5390);
    uint64_t v22 = self;
    *(void *)&long long v55 = 0;
    *((void *)&v55 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    id v23 = [v0 description];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    v27._countAndFlagsBits = v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._object = (void *)0x8000000100099620;
    v28._countAndFlagsBits = 0xD00000000000003ELL;
    String.append(_:)(v28);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 logInfo:v29];

    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    uint64_t v30 = qword_1000CAE28;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v1;
    Swift::String v32 = (char *(**)())(v30 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
    uint64_t v33 = *(void *)(v30 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
    void *v32 = sub_10001EDF4;
    v32[1] = (char *(*)())v31;
    id v34 = v1;
    sub_10000E8EC(v33);
    return 0;
  }
  else
  {
    sub_10001EC10((uint64_t)v14, (uint64_t)v21);
    uint64_t v36 = self;
    *(void *)&long long v55 = 0;
    *((void *)&v55 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    id v37 = [v0 description];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;

    v41._countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 0xD000000000000049;
    v42._object = (void *)0x8000000100099660;
    String.append(_:)(v42);
    sub_10001EFAC(&qword_1000C3B88, (void (*)(uint64_t))&type metadata accessor for Date);
    v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v36 logInfo:v44];

    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_10001EE24((uint64_t)v21, (uint64_t)v19, type metadata accessor for TimerSessionEntry);
    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    id v45 = (void *)qword_1000CAE28;
    uint64_t v56 = type metadata accessor for ClockAngelConnectionManager();
    uint64_t v57 = &off_1000B4D40;
    *(void *)&long long v55 = v45;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v47 = (uint64_t)v52;
    *uint64_t v52 = KeyPath;
    sub_100007830(&qword_1000C3220);
    swift_storeEnumTagMultiPayload();
    id v48 = v45;
    uint64_t v49 = v53;
    sub_100071BE4((uint64_t)v19, &v55, v47, v53);
    BOOL v50 = (char *)objc_allocWithZone((Class)sub_100007830((uint64_t *)&unk_1000C3B90));
    *(void *)&v50[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v50) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_10001EE24(v49, v54, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
    uint64_t v35 = UIHostingController.init(rootView:)();
    sub_10001EE8C(v49, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
    sub_10001EE8C((uint64_t)v21, type metadata accessor for TimerSessionEntry);
  }
  return v35;
}

char *sub_100019A0C()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001AC98((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FAF8((uint64_t)v4, &qword_1000C5390);
    uint64_t v9 = self;
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    id v10 = [v0 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._object = (void *)0x8000000100099590;
    v15._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v15);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 logInfo:v16];

    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_1000CAE28;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v1;
    id v19 = (char *(**)())(v17 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
    uint64_t v20 = *(void *)(v17 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
    char *v19 = sub_10001EDC4;
    v19[1] = (char *(*)())v18;
    id v21 = v1;
    sub_10000E8EC(v20);
    return 0;
  }
  else
  {
    sub_10001EC10((uint64_t)v4, (uint64_t)v8);
    id v23 = self;
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(78);
    id v24 = [v0 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v27 = v26;

    v28._countAndFlagsBits = v25;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0xD00000000000004ALL;
    v29._object = (void *)0x80000001000995D0;
    String.append(_:)(v29);
    type metadata accessor for Date();
    sub_10001EFAC(&qword_1000C3B88, (void (*)(uint64_t))&type metadata accessor for Date);
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v23 logInfo:v31];

    uint64_t v32 = *v8;
    uint64_t v33 = v8[1];
    objc_allocWithZone((Class)type metadata accessor for TimerCompressedController());
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_10002EED0(v32, v33);
    sub_10001EE8C((uint64_t)v8, type metadata accessor for TimerSessionEntry);
  }
  return v22;
}

char *sub_100019E14(char *result, uint64_t (*a2)(void))
{
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window;
  uint64_t v3 = *(void **)&result[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
  if (v3)
  {
    uint64_t v5 = result;
    id v6 = v3;
    uint64_t v7 = (void *)a2();
    [v6 setRootViewController:v7];

    uint64_t result = *(char **)&v5[v2];
    if (result)
    {
      return (char *)[result makeKeyAndVisible];
    }
  }
  return result;
}

void sub_100019EB0()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_10001A9CC();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = [self currentTraitCollection];
    id v5 = [v4 _backlightLuminance];

    Swift::String v43 = 0;
    v44[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    id v6 = [v1 description];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._object = (void *)0x8000000100099550;
    v11._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v11);
    if (v5 == (id)1) {
      uint64_t v12 = 1702195828;
    }
    else {
      uint64_t v12 = 0x65736C6166;
    }
    if (v5 == (id)1) {
      uint64_t v13 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v13 = (void *)0xE500000000000000;
    }
    Swift::String v14 = self;
    v15._countAndFlagsBits = v12;
    v15._object = v13;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 logInfo:v16];

    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    uint64_t v17 = (void *)qword_1000CAE28;
    uint64_t v38 = type metadata accessor for ClockAngelConnectionManager();
    uint64_t v39 = &off_1000B4D20;
    *(void *)&long long v37 = v17;
    uint64_t v18 = self;
    id v19 = v17;
    id v20 = [v18 mtOrange];
    uint64_t v21 = Color.init(uiColor:)();
    if (v5 == (id)1)
    {
      uint64_t v22 = Color.opacity(_:)();
      swift_release();
      id v23 = [v18 mtOrange];
      Color.init(uiColor:)();
      uint64_t v24 = Color.opacity(_:)();
      swift_release();
      static Color.white.getter();
      uint64_t v25 = Color.opacity(_:)();
      swift_release();
      static Color.white.getter();
      uint64_t v26 = Color.opacity(_:)();
      swift_release();
      Swift::String v41 = &type metadata for LowLuminanceSessionUiConfig;
      Swift::String v42 = &off_1000B5508;
      Swift::String v27 = (void *)swift_allocObject();
      v27[2] = v22;
      v27[3] = v24;
      v27[4] = v25;
    }
    else
    {
      id v28 = [v18 mtOrange];
      Color.init(uiColor:)();
      uint64_t v29 = Color.opacity(_:)();
      swift_release();
      uint64_t v30 = static Color.white.getter();
      static Color.white.getter();
      uint64_t v26 = Color.opacity(_:)();
      swift_release();
      Swift::String v41 = &type metadata for StandardSessionUiConfig;
      Swift::String v42 = &off_1000B5578;
      Swift::String v27 = (void *)swift_allocObject();
      v27[2] = v21;
      v27[3] = v29;
      v27[4] = v30;
    }
    v27[5] = v26;
    *(void *)&long long v40 = v27;
    Swift::String v43 = v3;
    sub_10000CB18(&v37, (uint64_t)v44);
    sub_10000CB18(&v40, (uint64_t)&v45);
    NSString v31 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3B50));
    *(void *)&v31[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v31) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_10001ED14((uint64_t)&v43, (uint64_t)&v37);
    id v32 = v3;
    uint64_t v33 = (void *)UIHostingController.init(rootView:)();
    sub_10001ED70((uint64_t)&v43);
    *(void *)((char *)v33 + *(void *)(qword_1000CACE0 + (swift_isaMask & *v33) + 16) + 8) = &off_1000B35B8;
    swift_unknownObjectWeakAssign();
    id v34 = [v33 view];
    if (v34)
    {
      uint64_t v35 = v34;
      id v36 = [self clearColor];
      [v35 setBackgroundColor:v36];
    }
    else
    {

      __break(1u);
    }
  }
}

uint64_t sub_10001A388(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007830((uint64_t *)&unk_1000C3B70);
  __chkstk_darwin(v4 - 8);
  id v6 = (uint64_t *)((char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for AlarmAlertFullScreen(0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  Swift::String v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (void *)((char *)&v53 - v11);
  if (a1)
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = sub_10001A9CC();
  if (!v14)
  {
LABEL_15:
    uint64_t v45 = self;
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    id v46 = [v2 description];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v48;
    swift_bridgeObjectRelease();

    *(void *)&long long v56 = v47;
    *((void *)&v56 + 1) = v49;
    v50._countAndFlagsBits = 0xD00000000000001ALL;
    v50._object = (void *)0x80000001000994D0;
    String.append(_:)(v50);
    NSString v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v45 logInfo:v51];

    return 0;
  }
  Swift::String v15 = (void *)v14;
  NSString v16 = self;
  *(void *)&long long v56 = 0;
  *((void *)&v56 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  id v17 = [v2 description];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();

  *(void *)&long long v56 = v18;
  *((void *)&v56 + 1) = v20;
  v21._countAndFlagsBits = 0xD00000000000001CLL;
  v21._object = (void *)0x80000001000994F0;
  String.append(_:)(v21);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 logInfo:v22];

  if ([v15 isSleepAlarm])
  {
    if (qword_1000C2C80 != -1) {
      swift_once();
    }
    id v23 = sub_100029520();
    if (v23)
    {
      uint64_t v24 = v23;
      unsigned int v25 = [v23 isAuthorizedForWidgetUpdates];

      if (v25)
      {
        uint64_t v26 = self;
        NSString v27 = String._bridgeToObjectiveC()();
        NSString v28 = String._bridgeToObjectiveC()();
        id v29 = [v26 newAssertionForBundleIdentifier:v27 withReason:v28];

        uint64_t v30 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_inUseAssertion];
        *(void *)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_inUseAssertion] = v29;
      }
    }
  }
  uint64_t v31 = qword_1000C2C98;
  id v32 = v15;
  if (v31 != -1) {
    swift_once();
  }
  uint64_t v33 = (void *)qword_1000CAE28;
  uint64_t v57 = type metadata accessor for ClockAngelConnectionManager();
  uint64_t v58 = &off_1000B4D20;
  *(void *)&long long v56 = v33;
  id v34 = self;
  id v35 = v33;
  id v36 = [v34 mtOrange];
  uint64_t v37 = Color.init(uiColor:)();
  id v38 = [v34 mtOrange];
  Color.init(uiColor:)();
  uint64_t v39 = Color.opacity(_:)();
  swift_release();
  uint64_t v40 = static Color.white.getter();
  static Color.white.getter();
  uint64_t v41 = Color.opacity(_:)();
  swift_release();
  uint64_t v54 = &type metadata for StandardSessionUiConfig;
  long long v55 = &off_1000B5578;
  Swift::String v42 = (void *)swift_allocObject();
  *(void *)&long long v53 = v42;
  v42[2] = v37;
  v42[3] = v39;
  v42[4] = v40;
  v42[5] = v41;
  uint64_t *v6 = swift_getKeyPath();
  sub_100007830(&qword_1000C3220);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for WeatherDataProvider();
  swift_allocObject();
  sub_100043570();
  sub_10000C048((uint64_t)v32, &v56, &v53, (uint64_t)v6, v12);
  Swift::String v43 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3B80));
  *(void *)&v43[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v43) + 16) + 8] = 0;
  swift_unknownObjectWeakInit();
  sub_10001EE24((uint64_t)v12, (uint64_t)v10, type metadata accessor for AlarmAlertFullScreen);
  uint64_t v44 = UIHostingController.init(rootView:)();
  sub_10001EE8C((uint64_t)v12, type metadata accessor for AlarmAlertFullScreen);

  return v44;
}

uint64_t sub_10001A9CC()
{
  uint64_t v1 = sub_100007830(&qword_1000C3B68);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AlarmActivityAttributes();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmAttributes;
  swift_beginAccess();
  sub_10000FA94(v8, (uint64_t)v3, &qword_1000C3B68);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10000FAF8((uint64_t)v3, &qword_1000C3B68);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (qword_1000C2C78 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)AlarmActivityAttributes.context.getter();
  uint64_t v10 = dispatch thunk of AlarmContext.alarmId.getter();
  uint64_t v12 = v11;

  v19[1] = v10;
  v19[2] = v12;
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.getEntry(for:)();
  sub_10001EC9C((uint64_t)v20);
  uint64_t v13 = v21;
  if (!v21)
  {
    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    uint64_t v14 = (void *)AlarmActivityAttributes.context.getter();
    uint64_t v15 = dispatch thunk of AlarmContext.alarmId.getter();
    id v17 = v16;

    sub_10004FB50(v15, v17, 1);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

uint64_t sub_10001AC98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007830(&qword_1000C3B60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimerActivityAttributes();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v1 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes;
  swift_beginAccess();
  sub_10000FA94(v13, (uint64_t)v8, &qword_1000C3B60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000FAF8((uint64_t)v8, &qword_1000C3B60);
LABEL_9:
    uint64_t v24 = type metadata accessor for TimerSessionEntry(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a1, 1, 1, v24);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  if (qword_1000C2C70 != -1) {
    swift_once();
  }
  uint64_t v14 = (void *)TimerActivityAttributes.context.getter();
  uint64_t v15 = dispatch thunk of TimerContext.timerId.getter();
  uint64_t v17 = v16;

  v26[0] = v15;
  v26[1] = v17;
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.getEntry(for:)();
  sub_10001EC9C((uint64_t)v27);
  uint64_t v18 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v5, 1, v18) == 1)
  {
    sub_10000FAF8((uint64_t)v5, &qword_1000C5390);
    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    uint64_t v20 = (void *)TimerActivityAttributes.context.getter();
    uint64_t v21 = dispatch thunk of TimerContext.timerId.getter();
    uint64_t v23 = v22;

    sub_100050074(v21, v23, 1);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_10001EC10((uint64_t)v5, a1);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
}

void sub_10001B084(void *a1, char a2)
{
  uint64_t v4 = self;
  _StringGuts.grow(_:)(41);
  id v5 = [a1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();

  v9._object = (void *)0x8000000100099B20;
  v9._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 logInfo:v10, v6, v8];

  sub_10001B184(a2);
}

void sub_10001B184(char a1)
{
  uint64_t v2 = v1;
  sub_100017C70(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = self;
    _StringGuts.grow(_:)(52);
    id v6 = [v1 description];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v9 = v8;

    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._object = (void *)0x8000000100099450;
    v11._countAndFlagsBits = 0xD000000000000032;
    String.append(_:)(v11);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 logInfo:v12];

    uint64_t v13 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window;
    uint64_t v14 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
    if (v14) {
      goto LABEL_3;
    }
    unsigned int v25 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_currentSessionScene];
    if (v25)
    {
      id v26 = objc_allocWithZone((Class)SecureWindow);
      id v27 = v25;
      id v28 = [v26 initWithWindowScene:v27];
      id v29 = *(void **)&v2[v13];
      *(void *)&v2[v13] = v28;

      uint64_t v14 = *(void **)&v2[v13];
      if (!v14)
      {
LABEL_5:
        uint64_t v17 = v4;
        goto LABEL_8;
      }
LABEL_3:
      [v14 setRootViewController:v4];
      uint64_t v15 = *(void **)&v2[v13];
      if (v15)
      {
        id v16 = v15;
        [v16 makeKeyAndVisible];
      }
      goto LABEL_5;
    }
    _StringGuts.grow(_:)(54);
    id v30 = [v2 description];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    v34._countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0xD000000000000034;
    v35._object = (void *)0x8000000100099490;
    String.append(_:)(v35);
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 logError:v36];
  }
  else
  {
    uint64_t v18 = self;
    _StringGuts.grow(_:)(55);
    id v19 = [v1 description];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 0xD000000000000035;
    v24._object = (void *)0x8000000100099410;
    String.append(_:)(v24);
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 logInfo:v36];
  }
  uint64_t v17 = v36;
LABEL_8:
}

void sub_10001B518(void *a1)
{
  uint64_t v3 = self;
  _StringGuts.grow(_:)(24);
  id v4 = [v1 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v5._object = (void *)0x80000001000993D0;
  v5._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v5);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 logInfo:v6];

  type metadata accessor for ActivityScene();
  uint64_t v7 = swift_dynamicCastClass();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    id v9 = a1;
    objc_msgSend(objc_msgSend(v8, "systemApertureElementContext"), "setElementNeedsUpdate");

    swift_unknownObjectRelease();
  }
  else
  {
    _StringGuts.grow(_:)(27);
    id v10 = [v1 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v11._countAndFlagsBits = 0xD000000000000017;
    v11._object = (void *)0x80000001000993F0;
    String.append(_:)(v11);
    id v12 = [a1 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 logError:v17];
  }
}

id sub_10001B960()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  id v3 = [v0 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  uint64_t v11 = v4;
  uint64_t v12 = v6;
  v7._countAndFlagsBits = 0x74696E696564203ALL;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 logInfo:v8];

  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for SessionSceneDelegate();
  return [super dealloc];
}

uint64_t sub_10001BC18()
{
  return type metadata accessor for SessionSceneDelegate();
}

uint64_t type metadata accessor for SessionSceneDelegate()
{
  uint64_t result = qword_1000C3A70;
  if (!qword_1000C3A70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_10001BC6C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t *)&v0[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_observerId];
  uint64_t v6 = v0;
  UUID.init()();
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  *uint64_t v5 = v7;
  v5[1] = v9;
  objc_super v10 = &v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes];
  uint64_t v11 = type metadata accessor for TimerActivityAttributes();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = &v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmAttributes];
  uint64_t v13 = type metadata accessor for AlarmActivityAttributes();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes] = 0;
  v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] = 2;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_currentSessionScene] = 0;
  v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType] = 5;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerApertureElementProvider] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmApertureElementProvider] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchApertureElementProvider] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_inUseAssertion] = 0;
  uint64_t v14 = &v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_dataStoerObserverId];
  *(void *)uint64_t v14 = 0xD000000000000014;
  *((void *)v14 + 1) = 0x80000001000959E0;

  uint64_t v15 = (objc_class *)type metadata accessor for SessionSceneDelegate();
  v17.receiver = v6;
  v17.super_class = v15;
  return [super init];
}

void sub_10001BEE0()
{
  sub_10001C018(319, &qword_1000C3A80, (void (*)(uint64_t))&type metadata accessor for TimerActivityAttributes);
  if (v0 <= 0x3F)
  {
    sub_10001C018(319, qword_1000C3A88, (void (*)(uint64_t))&type metadata accessor for AlarmActivityAttributes);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10001C018(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10001C06C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10001C0BC()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = self;
  aBlock = 0;
  unint64_t v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  id v10 = [v0 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x8000000100099280;
  v15._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v15);
  uint64_t v29 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
  sub_100007830((uint64_t *)&unk_1000C3B20);
  _print_unlocked<A, B>(_:_:)();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 logInfo:v16];

  sub_100014314(0, (unint64_t *)&qword_1000C3F90);
  objc_super v17 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v1;
  id v27 = sub_10001DF54;
  uint64_t v28 = v18;
  aBlock = _NSConcreteStackBlock;
  unint64_t v24 = 1107296256;
  unsigned int v25 = sub_10001C5B8;
  id v26 = &unk_1000B35F0;
  id v19 = _Block_copy(&aBlock);
  uint64_t v20 = v1;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock = (void **)&_swiftEmptyArrayStorage;
  sub_10001EFAC((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007830((uint64_t *)&unk_1000C3FA0);
  sub_10001DF74();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v22);
}

void sub_10001C470(char *a1)
{
  if (*(void *)&a1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window])
  {
    uint64_t v2 = self;
    _StringGuts.grow(_:)(51);
    id v3 = [a1 description];
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    v7._countAndFlagsBits = v4;
    v7._object = v6;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x80000001000992B0;
    v8._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v8);
    uint64_t v9 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType;
    _print_unlocked<A, B>(_:_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 logInfo:v10];

    sub_10001B184(a1[v9]);
  }
}

uint64_t sub_10001C5B8(uint64_t a1)
{
  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10001C600()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_observerId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10001C640()
{
  return 1;
}

uint64_t sub_10001C648()
{
  return swift_unknownObjectWeakLoadStrong();
}

void sub_10001C6B8(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [v2 traitCollection];
  id v5 = [v4 _backlightLuminance];

  if (v5 == (id)1 && (!a1 || [a1 _backlightLuminance] != (id)1))
  {
    uint64_t v13 = self;
    _StringGuts.grow(_:)(42);
    type metadata accessor for SecureHostingController();
    swift_getWitnessTable();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v14._object = (void *)0x8000000100099310;
    v14._countAndFlagsBits = 0xD000000000000028;
    String.append(_:)(v14);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 logInfo:v15];

    if (!swift_unknownObjectWeakLoadStrong()) {
      return;
    }
    char v12 = 1;
    goto LABEL_13;
  }
  id v6 = [v2 traitCollection];
  id v7 = [v6 _backlightLuminance];

  if (v7 != (id)1 && a1 != 0 && [a1 _backlightLuminance] == (id)1)
  {
    uint64_t v9 = self;
    _StringGuts.grow(_:)(44);
    type metadata accessor for SecureHostingController();
    swift_getWitnessTable();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v10._countAndFlagsBits = 0xD00000000000002ALL;
    v10._object = (void *)0x80000001000992E0;
    String.append(_:)(v10);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 logInfo:v11];

    if (swift_unknownObjectWeakLoadStrong())
    {
      char v12 = 0;
LABEL_13:
      sub_10001CFD8(v12);
      swift_unknownObjectRelease();
    }
  }
}

void sub_10001CA10(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  sub_10001C6B8(a3);
}

void *sub_10001CA7C(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10001CAC0(a1, a2);
}

void *sub_10001CAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + qword_1000CACE0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  id v7 = (char *)&v13 - v6;
  *(void *)((char *)v2 + *(void *)(v8 + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v9 = (void *)UIHostingController.init(coder:rootView:)();
  Swift::String v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  id v11 = v9;
  v10(a2, v4);
  if (v9) {

  }
  return v9;
}

id sub_10001CC14(void *a1)
{
  *(void *)((char *)v1 + *(void *)(qword_1000CACE0 + (swift_isaMask & *v1) + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SecureHostingController();
  [super initWithCoder:a1];

  return v3;
}

id sub_10001CCD4(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10001CC14(a3);
}

uint64_t sub_10001CCFC()
{
  return sub_10001EC74((uint64_t)v0 + *(void *)(qword_1000CACE0 + (swift_isaMask & *v0) + 16));
}

id sub_10001CD48()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureHostingController();
  [super dealloc];
}

uint64_t sub_10001CDC4(void *a1)
{
  return sub_10001EC74((uint64_t)a1 + *(void *)(qword_1000CACE0 + (swift_isaMask & *a1) + 16));
}

uint64_t type metadata accessor for SecureHostingController()
{
  return sub_100014FE4();
}

unsigned char *initializeBufferWithCopyOfBuffer for SpinnyResetView.Mode(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SessionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SessionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001CF90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_10001CFB8(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10001CFC0(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SessionType()
{
  return &type metadata for SessionType;
}

void sub_10001CFD8(char a1)
{
  uint64_t v3 = type metadata accessor for SessionsTimerPlatter(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window;
  Swift::String v14 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
  if (!v14) {
    goto LABEL_32;
  }
  id v15 = [v14 rootViewController];
  if (v15)
  {
    uint64_t v97 = v5;
    NSString v16 = v15;
    sub_100007830(&qword_1000C3B58);
    uint64_t v17 = swift_dynamicCastClass();
    if (v17)
    {
      uint64_t v95 = v3;
      id v96 = v16;
      v94[1] = v17;
      uint64_t v98 = 0;
      unint64_t v99 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      id v18 = [v1 description];
      char v19 = a1;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;

      v23._countAndFlagsBits = v20;
      v23._object = v22;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._object = (void *)0x80000001000993A0;
      v24._countAndFlagsBits = 0xD00000000000002FLL;
      String.append(_:)(v24);
      char v25 = v19;
      if (v19) {
        uint64_t v26 = 1702195828;
      }
      else {
        uint64_t v26 = 0x65736C6166;
      }
      if (v19) {
        id v27 = (void *)0xE400000000000000;
      }
      else {
        id v27 = (void *)0xE500000000000000;
      }
      uint64_t v28 = self;
      v29._countAndFlagsBits = v26;
      v29._object = v27;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v28 logInfo:v30];

      sub_10001AC98((uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {

        sub_10000FAF8((uint64_t)v8, &qword_1000C5390);
        return;
      }
      sub_10001EC10((uint64_t)v8, (uint64_t)v12);
      long long v55 = self;
      id v56 = [v55 mtOrange];
      uint64_t v57 = Color.init(uiColor:)();
      if (v25)
      {
        uint64_t v58 = Color.opacity(_:)();
        swift_release();
        id v59 = [v55 mtOrange];
        Color.init(uiColor:)();
        uint64_t v60 = Color.opacity(_:)();
        swift_release();
        static Color.white.getter();
        uint64_t v61 = Color.opacity(_:)();
        swift_release();
        static Color.white.getter();
        uint64_t v62 = Color.opacity(_:)();
        swift_release();
        char v100 = &type metadata for LowLuminanceSessionUiConfig;
        id v101 = &off_1000B5508;
        Swift::String v63 = (void *)swift_allocObject();
        v63[2] = v58;
        v63[3] = v60;
        v63[4] = v61;
      }
      else
      {
        id v64 = [v55 mtOrange];
        Color.init(uiColor:)();
        uint64_t v65 = Color.opacity(_:)();
        swift_release();
        uint64_t v66 = static Color.white.getter();
        static Color.white.getter();
        uint64_t v62 = Color.opacity(_:)();
        swift_release();
        char v100 = &type metadata for StandardSessionUiConfig;
        id v101 = &off_1000B5578;
        Swift::String v63 = (void *)swift_allocObject();
        v63[2] = v57;
        v63[3] = v65;
        v63[4] = v66;
      }
      v63[5] = v62;
      uint64_t v98 = v63;
      uint64_t v67 = v97;
      sub_10001EE24((uint64_t)v12, (uint64_t)v97, type metadata accessor for TimerSessionEntry);
      uint64_t v68 = qword_1000C2C98;
      id v69 = v96;
      uint64_t v70 = v95;
      if (v68 != -1) {
        swift_once();
      }
      uint64_t v71 = (void *)qword_1000CAE28;
      uint64_t v72 = v70;
      unint64_t v73 = &v67[*(int *)(v70 + 20)];
      *((void *)v73 + 3) = type metadata accessor for ClockAngelConnectionManager();
      *((void *)v73 + 4) = &off_1000B4D40;
      *(void *)unint64_t v73 = v71;
      sub_10000F9F0((uint64_t)&v98, (uint64_t)&v67[*(int *)(v72 + 24)]);
      *(void *)&v67[*(int *)(v72 + 28)] = 0x4028000000000000;
      id v74 = v71;
      dispatch thunk of UIHostingController.rootView.setter();

      sub_10001EE8C((uint64_t)v12, type metadata accessor for TimerSessionEntry);
      id v75 = &v98;
      goto LABEL_46;
    }
  }
  uint64_t v31 = *(void **)&v1[v13];
  if (!v31) {
    goto LABEL_32;
  }
  id v32 = (char *)[v31 rootViewController];
  if (!v32) {
    goto LABEL_32;
  }
  uint64_t v97 = v32;
  sub_100007830(&qword_1000C3B50);
  if (!swift_dynamicCastClass())
  {

LABEL_32:
    uint64_t v98 = 0;
    unint64_t v99 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    id v76 = [v1 description];
    uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v79 = v78;
    swift_bridgeObjectRelease();

    uint64_t v98 = (void *)v77;
    unint64_t v99 = v79;
    v80._countAndFlagsBits = 0xD00000000000002DLL;
    v80._object = (void *)0x8000000100099340;
    String.append(_:)(v80);
    if (a1) {
      uint64_t v81 = 1702195828;
    }
    else {
      uint64_t v81 = 0x65736C6166;
    }
    if (a1) {
      char v82 = (void *)0xE400000000000000;
    }
    else {
      char v82 = (void *)0xE500000000000000;
    }
    id v83 = self;
    v84._countAndFlagsBits = v81;
    v84._object = v82;
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    uint64_t v97 = (char *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v83 logInfo:v97];
    goto LABEL_39;
  }
  uint64_t v98 = 0;
  unint64_t v99 = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  id v33 = [v1 description];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v36 = v35;

  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._object = (void *)0x8000000100099370;
  v38._countAndFlagsBits = 0xD00000000000002FLL;
  String.append(_:)(v38);
  if (a1) {
    uint64_t v39 = 1702195828;
  }
  else {
    uint64_t v39 = 0x65736C6166;
  }
  if (a1) {
    uint64_t v40 = (void *)0xE400000000000000;
  }
  else {
    uint64_t v40 = (void *)0xE500000000000000;
  }
  uint64_t v41 = self;
  v42._countAndFlagsBits = v39;
  v42._object = v40;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v41 logInfo:v43];

  uint64_t v44 = sub_10001A9CC();
  if (v44)
  {
    uint64_t v45 = (void *)v44;
    id v46 = self;
    id v47 = [v46 mtOrange];
    uint64_t v48 = Color.init(uiColor:)();
    if (a1)
    {
      uint64_t v49 = Color.opacity(_:)();
      swift_release();
      id v50 = [v46 mtOrange];
      Color.init(uiColor:)();
      uint64_t v51 = Color.opacity(_:)();
      swift_release();
      static Color.white.getter();
      uint64_t v52 = Color.opacity(_:)();
      swift_release();
      static Color.white.getter();
      uint64_t v53 = Color.opacity(_:)();
      swift_release();
      Swift::String v105 = &type metadata for LowLuminanceSessionUiConfig;
      v106 = &off_1000B5508;
      uint64_t v54 = (void *)swift_allocObject();
      v54[2] = v49;
      v54[3] = v51;
      v54[4] = v52;
    }
    else
    {
      id v86 = [v46 mtOrange];
      Color.init(uiColor:)();
      uint64_t v87 = Color.opacity(_:)();
      swift_release();
      uint64_t v88 = static Color.white.getter();
      static Color.white.getter();
      uint64_t v53 = Color.opacity(_:)();
      swift_release();
      Swift::String v105 = &type metadata for StandardSessionUiConfig;
      v106 = &off_1000B5578;
      uint64_t v54 = (void *)swift_allocObject();
      v54[2] = v48;
      v54[3] = v87;
      v54[4] = v88;
    }
    v54[5] = v53;
    v104[0] = v54;
    uint64_t v89 = qword_1000C2C98;
    char v90 = v97;
    long long v91 = v45;
    if (v89 != -1) {
      swift_once();
    }
    id v92 = (void *)qword_1000CAE28;
    id v101 = (_UNKNOWN **)type metadata accessor for ClockAngelConnectionManager();
    uint64_t v102 = &off_1000B4D20;
    unint64_t v99 = (unint64_t)v92;
    sub_10000F9F0((uint64_t)v104, (uint64_t)&v103);
    uint64_t v98 = v91;
    id v93 = v92;
    dispatch thunk of UIHostingController.rootView.setter();

    id v75 = v104;
LABEL_46:
    sub_100004678((uint64_t)v75);
    return;
  }
LABEL_39:
  uint64_t v85 = v97;
}

uint64_t sub_10001D9D8(unsigned __int8 *a1, char *a2)
{
  return sub_100017A44(*a1, *a2);
}

Swift::Int sub_10001D9E4()
{
  return sub_10001D9EC();
}

Swift::Int sub_10001D9EC()
{
  return Hasher._finalize()();
}

uint64_t sub_10001DB14()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001DC24()
{
  return sub_10001DC2C();
}

Swift::Int sub_10001DC2C()
{
  return Hasher._finalize()();
}

unint64_t sub_10001DD50@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10001EB6C(*a1);
  *a2 = result;
  return result;
}

void sub_10001DD80(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEE006E776F64746ELL;
  uint64_t v3 = 0x756F4372656D6954;
  switch(*v1)
  {
    case 1:
      uint64_t v3 = 0x656C4172656D6954;
      unint64_t v2 = 0xEA00000000007472;
      goto LABEL_3;
    case 2:
      *a1 = 0x656C416D72616C41;
      a1[1] = 0xEA00000000007472;
      break;
    case 3:
      *a1 = 0x6F6E536D72616C41;
      a1[1] = 0xEB00000000657A6FLL;
      break;
    case 4:
      *a1 = 0x63746177706F7453;
      a1[1] = 0xE900000000000068;
      break;
    case 5:
      *a1 = 0x6E776F6E6B6E55;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t sub_10001DE80()
{
  unint64_t result = qword_1000C3B10;
  if (!qword_1000C3B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3B10);
  }
  return result;
}

uint64_t sub_10001DED4()
{
  return sub_10001EFAC(&qword_1000C3B18, (void (*)(uint64_t))type metadata accessor for SessionSceneDelegate);
}

uint64_t sub_10001DF1C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10001DF54()
{
  sub_10001C470(*(char **)(v0 + 16));
}

uint64_t sub_10001DF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001DF6C()
{
  return swift_release();
}

unint64_t sub_10001DF74()
{
  unint64_t result = qword_1000C3B40;
  if (!qword_1000C3B40)
  {
    sub_10000C61C((uint64_t *)&unk_1000C3FA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3B40);
  }
  return result;
}

void sub_10001DFD0(void *a1, void *a2)
{
  uint64_t v5 = self;
  _StringGuts.grow(_:)(43);
  id v6 = [v2 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();

  v10._object = (void *)0x8000000100099C20;
  v10._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v10);
  id v11 = [a2 role:v7, v9];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 logInfo:v16];

  sub_1000150A8(a1, (void (*)(char *, uint64_t))a2);
}

uint64_t sub_10001E124(uint64_t a1)
{
  uint64_t v3 = *(void *)((swift_isaMask & *v1) + qword_1000CACE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  id v6 = (char *)&v9 - v5;
  *(void *)((char *)v1 + *(void *)(v7 + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  return UIHostingController.init(rootView:)();
}

void sub_10001E23C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C3B60);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v53 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = 0;
  unint64_t v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  id v11 = [v0 description];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();

  uint64_t v54 = v12;
  unint64_t v55 = v14;
  v15._countAndFlagsBits = 0xD000000000000029;
  v15._object = (void *)0x8000000100099BB0;
  String.append(_:)(v15);
  uint64_t v16 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination;
  if (v0[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination]
    && v0[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v17 = (void *)0xE400000000000000;
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v18)
  {
LABEL_6:
    uint64_t v17 = (void *)0xE500000000000000;
    uint64_t v19 = 0x65736C6166;
    goto LABEL_7;
  }
  uint64_t v19 = 1702195828;
LABEL_7:
  uint64_t v20 = self;
  v21._countAndFlagsBits = v19;
  v21._object = v17;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v20 logInfo:v22];

  if (!v0[v16] || v0[v16] == 1)
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v23) {
      return;
    }
    Swift::String v24 = (char *)sub_10001A9CC();
    if (v24)
    {
      uint64_t v53 = v24;
      if ([v24 isSleepAlarm])
      {
        char v25 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_inUseAssertion];
        if (v25) {
          [v25 invalidate];
        }
      }
      if ([v53 isFiring])
      {
        if (v0[v16] && v0[v16] == 1)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v29 & 1) == 0)
          {
            if (qword_1000C2C98 != -1) {
              swift_once();
            }
            id v44 = [v53 alarmIDString];
            uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v47 = v46;

            sub_100050578(v45, v47, 0, 0);
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }
        }
      }
      uint64_t v54 = 0;
      unint64_t v55 = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      id v30 = [v1 description];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v33 = v32;

      v34._countAndFlagsBits = v31;
      v34._object = v33;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._object = (void *)0x8000000100099BE0;
      v35._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v35);
      id v36 = [v53 alarmIDString];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;

      v40._countAndFlagsBits = v37;
      v40._object = v39;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 0xD00000000000001BLL;
      v41._object = (void *)0x8000000100099C00;
      String.append(_:)(v41);
      NSString v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v20 logInfo:v42];

LABEL_29:
      id v43 = v53;

      return;
    }
    sub_10001AC98((uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_10000FAF8((uint64_t)v7, &qword_1000C5390);
      return;
    }
    uint64_t v26 = (uint64_t *)v53;
    sub_10001EC10((uint64_t)v7, (uint64_t)v53);
    if (*((unsigned char *)v26 + *(int *)(v8 + 28)) == 2)
    {
      uint64_t v27 = (uint64_t)&v0[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes];
      swift_beginAccess();
      sub_10000FA94(v27, (uint64_t)v4, &qword_1000C3B60);
      uint64_t v28 = type metadata accessor for TimerActivityAttributes();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v4, 1, v28))
      {
        sub_10000FAF8((uint64_t)v4, &qword_1000C3B60);
      }
      else
      {
        uint64_t v48 = (void *)TimerActivityAttributes.context.getter();
        sub_10000FAF8((uint64_t)v4, &qword_1000C3B60);
        char v49 = dispatch thunk of TimerContext.firing.getter();

        if (v49)
        {
          if (!*((unsigned char *)v1 + v16) || *((unsigned char *)v1 + v16) != 1)
          {
            char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v50) {
              goto LABEL_43;
            }
            if (qword_1000C2C98 != -1) {
              swift_once();
            }
            uint64_t v51 = *v26;
            uint64_t v52 = (void *)v26[1];
            swift_bridgeObjectRetain();
            sub_100050578(v51, v52, 0, 0);
          }
          swift_bridgeObjectRelease();
        }
      }
    }
LABEL_43:
    sub_10001EE8C((uint64_t)v26, type metadata accessor for TimerSessionEntry);
    return;
  }

  swift_bridgeObjectRelease();
}

void sub_10001EA70(Swift::Int a1, uint64_t a2, void *a3)
{
  uint64_t v7 = self;
  _StringGuts.grow(_:)(a1);
  id v8 = [v3 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v9._countAndFlagsBits = a2;
  v9._object = a3;
  String.append(_:)(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 logInfo:v10];
}

unint64_t sub_10001EB6C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000B29E0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t sub_10001EBC0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001EC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001EC74(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001EC9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001ECF0()
{
  return EnvironmentValues.fontResolutionContext.getter();
}

uint64_t sub_10001ED14(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10001ED70(uint64_t a1)
{
  return a1;
}

char *sub_10001EDC4()
{
  return sub_100019E14(*(char **)(v0 + 16), sub_100019A0C);
}

char *sub_10001EDF4()
{
  return sub_100019E14(*(char **)(v0 + 16), sub_1000192C8);
}

uint64_t sub_10001EE24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001EE8C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001EEEC()
{
  return SceneSettingScopes.ActivitySettings.activityDescriptor.getter();
}

uint64_t sub_10001EF10(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10001EF68()
{
  return _swift_deallocObject(v0, 25, 7);
}

void sub_10001EFA0()
{
  sub_10001B084(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10001EFAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001EFF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007830(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

BOOL sub_10001F060(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10001F074()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001F0BC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10001F0E8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10001F12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, double a10@<D0>, uint64_t a11, char a12, uint64_t a13, char a14)
{
  unint64_t object = a4;
  *a9 = a1;
  a9[1] = a2;
  uint64_t v18 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v18 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    uint64_t countAndFlagsBits = a3;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v20 = [self mainBundle];
    v34._unint64_t object = (void *)0x8000000100099CB0;
    v21._uint64_t countAndFlagsBits = 0x72656D6954;
    v21._unint64_t object = (void *)0xE500000000000000;
    v22._uint64_t countAndFlagsBits = 0;
    v22._unint64_t object = (void *)0xE000000000000000;
    v34._uint64_t countAndFlagsBits = 0xD000000000000013;
    Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v34);
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    unint64_t object = (unint64_t)v23._object;
  }
  Swift::String v24 = (int *)type metadata accessor for TimerSessionEntry(0);
  char v25 = (char *)a9 + v24[9];
  uint64_t v26 = (char *)a9 + v24[10];
  a9[2] = countAndFlagsBits;
  a9[3] = object;
  uint64_t v27 = (char *)a9 + v24[6];
  uint64_t v28 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(v27, a5, v28);
  *((unsigned char *)a9 + v24[7]) = a6;
  id v30 = (void *)((char *)a9 + v24[8]);
  void *v30 = a7;
  v30[1] = a8;
  *(void *)char v25 = a11;
  v25[8] = a12 & 1;
  *(void *)uint64_t v26 = a13;
  v26[8] = a14 & 1;
  *(double *)((char *)a9 + v24[11]) = a10;
  return result;
}

uint64_t sub_10001F2E4()
{
  type metadata accessor for TimerDataStore(0);
  swift_allocObject();
  uint64_t result = DataStore.init(identifier:)();
  qword_1000CACF0 = result;
  return result;
}

void sub_10001F348(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  NSString v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = a1;
  v16[2] = a2;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.getEntry(for:)();
  sub_10001EC9C((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100020180((uint64_t)v6);
    id v11 = self;
    v17[0] = 0;
    v17[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v12._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v12._unint64_t object = (void *)0x8000000100099CD0;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = a1;
    v13._unint64_t object = a2;
    String.append(_:)(v13);
    v14._unint64_t object = (void *)0x8000000100099CF0;
    v14._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v14);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 logInfo:v15];
  }
  else
  {
    sub_10001EC10((uint64_t)v6, (uint64_t)v10);
    v10[*(int *)(v7 + 28)] = 2;
    dispatch thunk of DataStore.updateEntry(_:)();
    sub_1000201E0((uint64_t)v10);
  }
}

uint64_t sub_10001F584@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001F590()
{
  type metadata accessor for AlarmDataStore(0);
  swift_allocObject();
  uint64_t result = DataStore.init(identifier:)();
  qword_1000CACF8 = result;
  return result;
}

uint64_t sub_10001F5F0()
{
  return DataStore.init(identifier:)();
}

uint64_t sub_10001F63C()
{
  DataStore.deinit();

  return swift_deallocClassInstance();
}

uint64_t MTAlarm.id.getter()
{
  id v1 = [v0 alarmIDString];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_10001F6C4()
{
  return sub_100020138(&qword_1000C3C50, (void (*)(uint64_t))sub_10001F70C);
}

unint64_t sub_10001F70C()
{
  unint64_t result = qword_1000C3C58;
  if (!qword_1000C3C58)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000C3C58);
  }
  return result;
}

void *sub_10001F74C()
{
  return &protocol witness table for String;
}

void sub_10001F758(uint64_t *a1@<X8>)
{
  id v3 = [*v1 alarmIDString];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t type metadata accessor for TimerDataStore(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C3C60);
}

uint64_t sub_10001F7D0()
{
  return sub_10001F810();
}

uint64_t sub_10001F7DC()
{
  return type metadata accessor for TimerDataStore(0);
}

uint64_t type metadata accessor for AlarmDataStore(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C3CB0);
}

uint64_t sub_10001F804()
{
  return sub_10001F810();
}

uint64_t sub_10001F810()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10001F84C()
{
  return type metadata accessor for AlarmDataStore(0);
}

void *sub_10001F854(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    NSString v10 = (char *)a1 + v9;
    id v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    Swift::String v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    NSString v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[9];
    uint64_t v19 = a3[10];
    id v20 = (char *)v4 + v18;
    Swift::String v21 = (char *)a2 + v18;
    *(void *)id v20 = *(void *)v21;
    v20[8] = v21[8];
    Swift::String v22 = (char *)v4 + v19;
    Swift::String v23 = (char *)a2 + v19;
    *(void *)Swift::String v22 = *(void *)v23;
    v22[8] = v23[8];
    *(void *)((char *)v4 + a3[11]) = *(void *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10001F9BC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void *sub_10001FA54(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  NSString v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v14 = (void *)((char *)a1 + v13);
  NSString v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = (char *)a1 + v17;
  id v20 = (char *)a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  Swift::String v21 = (char *)a1 + v18;
  Swift::String v22 = (char *)a2 + v18;
  *(void *)Swift::String v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10001FB6C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[9];
  uint64_t v14 = (char *)a1 + v13;
  NSString v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)uint64_t v14 = v16;
  uint64_t v17 = a3[10];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = v20;
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  return a1;
}

_OWORD *sub_10001FCAC(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[9];
  uint64_t v13 = a3[10];
  uint64_t v14 = (char *)a1 + v12;
  NSString v15 = (char *)a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = (char *)a1 + v13;
  uint64_t v17 = (char *)a2 + v13;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  return a1;
}

void *sub_10001FD8C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  Swift::String v21 = (char *)a1 + v18;
  Swift::String v22 = (char *)a2 + v18;
  *(void *)Swift::String v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_10001FE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001FEA8);
}

uint64_t sub_10001FEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10001FF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001FF6C);
}

uint64_t sub_10001FF6C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for TimerSessionEntry(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C3D58);
}

uint64_t sub_100020034()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000200F0()
{
  return sub_100020138(&qword_1000C3DA8, (void (*)(uint64_t))type metadata accessor for TimerSessionEntry);
}

uint64_t sub_100020138(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100020180(uint64_t a1)
{
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000201E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10002023C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100020324(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_10002039C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_100020434(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_1000204D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_10002054C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000205D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000205EC);
}

uint64_t sub_1000205EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10002069C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000206B0);
}

uint64_t sub_1000206B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AlarmSessionEntry(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C3E08);
}

uint64_t sub_100020778()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AmbientDestination(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TimerSessionEntry.TimerState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002096CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimerSessionEntry.TimerState()
{
  return &type metadata for TimerSessionEntry.TimerState;
}

unint64_t sub_1000209A8()
{
  unint64_t result = qword_1000C3E40;
  if (!qword_1000C3E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3E40);
  }
  return result;
}

uint64_t sub_1000209FC()
{
  return sub_100020138(&qword_1000C3E48, (void (*)(uint64_t))type metadata accessor for AlarmSessionEntry);
}

void sub_100020FC8()
{
  unint64_t v1 = v0;
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for AlarmApertureElementController();
  [super viewDidLoad];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8];
  if (v2)
  {
    uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
    swift_bridgeObjectRetain();
    sub_100022468(v3, v2);
    swift_bridgeObjectRelease();
  }
  unsigned int v4 = self;
  id v5 = [v1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  uint64_t v11 = v6;
  v9._uint64_t countAndFlagsBits = 0x6469447765697620;
  v9._unint64_t object = (void *)0xEC00000064616F4CLL;
  String.append(_:)(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 logInfo:v10, v11, v8];

  sub_1000227DC();
}

char *sub_100021138(uint64_t a1, uint64_t a2, int a3)
{
  int v39 = a3;
  uint64_t v6 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v38[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  objc_super v12 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_observerId];
  uint64_t v14 = v3;
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  *uint64_t v13 = v15;
  v13[1] = v17;
  uint64_t v18 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_presentationBehaviors] = 9;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints] = &_swiftEmptyArrayStorage;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeLayoutMode] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_contentRole] = 2;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode] = 3;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_maximumLayoutMode] = 4;
  id v19 = [self mtURLForSection:1];
  if (v19)
  {
    uint64_t v20 = v19;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = type metadata accessor for URL();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 0, 1, v21);
  }
  else
  {
    uint64_t v22 = type metadata accessor for URL();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
  }
  sub_100027EE8((uint64_t)v8, (uint64_t)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_launchURL]);
  Swift::String v23 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_associatedAppBundleIdentifier];
  *(void *)Swift::String v23 = 0xD000000000000015;
  *((void *)v23 + 1) = 0x800000010009A860;
  uint64_t v24 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_timerObserverIdentifier];
  *(void *)uint64_t v24 = 0xD00000000000001ELL;
  *((void *)v24 + 1) = 0x8000000100095F00;
  char v25 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal] = 0;
  uint64_t v26 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView;
  type metadata accessor for TimerApertureAccessoryView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v28 = objc_allocWithZone(ObjCClassFromMetadata);
  id v29 = v25;
  *(void *)&v14[v26] = [v28 init];
  uint64_t v30 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView;
  *(void *)&v14[v30] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v31 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView;
  *(void *)&v14[v31] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v32 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_keyColor;
  *(void *)&v14[v32] = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.622 blue:0.044 alpha:1.0];
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_horizontalPadding] = 0x4030000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelLeadingPadding] = 0x3FF8000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_verticalPadding] = 0x4031000000000000;
  uint64_t v33 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_buttonSize;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  *(void *)&v14[v33] = qword_1000CAF50;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_labelBottomPadding] = 0x402A000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expandedControlsHeight] = 0x4048000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmSize] = 0x4047800000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmLeadingPadding] = 0x4031800000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmBottomPadding] = 0x4033800000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelBottomPadding] = 0x4033000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView] = 0;

  Swift::String v34 = (objc_class *)type metadata accessor for AlarmApertureElementController();
  v40.receiver = v14;
  v40.super_class = v34;
  Swift::String v35 = [v40 init];
  id v36 = &v35[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  *(void *)id v36 = a1;
  *((void *)v36 + 1) = a2;
  swift_bridgeObjectRelease();
  if (v39) {
    *(void *)&v35[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_presentationBehaviors] = 2;
  }
  return v35;
}

id sub_100021674(void *a1)
{
  uint64_t v3 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_observerId];
  uint64_t v11 = v1;
  UUID.init()();
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *uint64_t v10 = v12;
  v10[1] = v14;
  uint64_t v15 = &v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_presentationBehaviors] = 9;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints] = &_swiftEmptyArrayStorage;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeLayoutMode] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_contentRole] = 2;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode] = 3;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_maximumLayoutMode] = 4;
  id v16 = [self mtURLForSection:1];
  if (v16)
  {
    uint64_t v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v5, 0, 1, v18);
  }
  else
  {
    uint64_t v19 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 1, 1, v19);
  }
  sub_100027EE8((uint64_t)v5, (uint64_t)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_launchURL]);
  uint64_t v20 = &v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_associatedAppBundleIdentifier];
  *(void *)uint64_t v20 = 0xD000000000000015;
  *((void *)v20 + 1) = 0x800000010009A860;
  uint64_t v21 = &v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_timerObserverIdentifier];
  *(void *)uint64_t v21 = 0xD00000000000001ELL;
  *((void *)v21 + 1) = 0x8000000100095F00;
  uint64_t v22 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal] = 0;
  uint64_t v23 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView;
  type metadata accessor for TimerApertureAccessoryView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v25 = objc_allocWithZone(ObjCClassFromMetadata);
  id v26 = v22;
  *(void *)&v11[v23] = [v25 init];
  uint64_t v27 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView;
  *(void *)&v11[v27] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v28 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView;
  *(void *)&v11[v28] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v29 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_keyColor;
  *(void *)&v11[v29] = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.622 blue:0.044 alpha:1.0];
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_horizontalPadding] = 0x4030000000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelLeadingPadding] = 0x3FF8000000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_verticalPadding] = 0x4031000000000000;
  uint64_t v30 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_buttonSize;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  *(void *)&v11[v30] = qword_1000CAF50;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_labelBottomPadding] = 0x402A000000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expandedControlsHeight] = 0x4048000000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmSize] = 0x4047800000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmLeadingPadding] = 0x4031800000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmBottomPadding] = 0x4033800000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelBottomPadding] = 0x4033000000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView] = 0;

  uint64_t v31 = (objc_class *)type metadata accessor for AlarmApertureElementController();
  v34.receiver = v11;
  v34.super_class = v31;
  [super initWithCoder:a1];

  return v32;
}

id sub_100021BB4(uint64_t a1, uint64_t a2, void *a3)
{
  v38[1] = a1;
  uint64_t v6 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_observerId];
  uint64_t v14 = v3;
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *uint64_t v13 = v15;
  v13[1] = v17;
  uint64_t v18 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_presentationBehaviors] = 9;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints] = &_swiftEmptyArrayStorage;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeLayoutMode] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_contentRole] = 2;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode] = 3;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_maximumLayoutMode] = 4;
  id v19 = [self mtURLForSection:1];
  if (v19)
  {
    uint64_t v20 = v19;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 0, 1, v21);
  }
  else
  {
    uint64_t v22 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
  }
  sub_100027EE8((uint64_t)v8, (uint64_t)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_launchURL]);
  uint64_t v23 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_associatedAppBundleIdentifier];
  *(void *)uint64_t v23 = 0xD000000000000015;
  *((void *)v23 + 1) = 0x800000010009A860;
  uint64_t v24 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_timerObserverIdentifier];
  *(void *)uint64_t v24 = 0xD00000000000001ELL;
  *((void *)v24 + 1) = 0x8000000100095F00;
  id v25 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal] = 0;
  uint64_t v26 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView;
  type metadata accessor for TimerApertureAccessoryView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v28 = objc_allocWithZone(ObjCClassFromMetadata);
  id v29 = v25;
  *(void *)&v14[v26] = [v28 init];
  uint64_t v30 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView;
  *(void *)&v14[v30] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v31 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView;
  *(void *)&v14[v31] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v32 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_keyColor;
  *(void *)&v14[v32] = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.622 blue:0.044 alpha:1.0];
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_horizontalPadding] = 0x4030000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelLeadingPadding] = 0x3FF8000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_verticalPadding] = 0x4031000000000000;
  uint64_t v33 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_buttonSize;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  *(void *)&v14[v33] = qword_1000CAF50;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_labelBottomPadding] = 0x402A000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expandedControlsHeight] = 0x4048000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmSize] = 0x4047800000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmLeadingPadding] = 0x4031800000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmBottomPadding] = 0x4033800000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelBottomPadding] = 0x4033000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView] = 0;

  if (a2)
  {
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v34 = 0;
  }
  Swift::String v35 = (objc_class *)type metadata accessor for AlarmApertureElementController();
  v39.receiver = v14;
  v39.super_class = v35;
  id v36 = [super initWithNibName:v34 bundle:a3];

  return v36;
}

id sub_100022160()
{
  unint64_t v1 = v0;
  uint64_t v2 = self;
  id v3 = [v0 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  uint64_t v13 = v4;
  uint64_t v14 = v6;
  v7._uint64_t countAndFlagsBits = 0x74696E69656420;
  v7._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 logInfo:v8];

  uint64_t v9 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8];
  if (v9)
  {
    uint64_t v10 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
    swift_bridgeObjectRetain();
    sub_100022480(v10, v9);
    swift_bridgeObjectRelease();
  }
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for AlarmApertureElementController();
  return [super dealloc];
}

uint64_t sub_100022414()
{
  return type metadata accessor for AlarmApertureElementController();
}

uint64_t type metadata accessor for AlarmApertureElementController()
{
  uint64_t result = qword_1000C3EC8;
  if (!qword_1000C3EC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100022468(uint64_t a1, uint64_t a2)
{
  return sub_100022498(a1, a2, (void (*)(uint64_t, uint64_t, unsigned char *))&dispatch thunk of DataStore.registerObserver(_:for:));
}

uint64_t sub_100022480(uint64_t a1, uint64_t a2)
{
  return sub_100022498(a1, a2, (void (*)(uint64_t, uint64_t, unsigned char *))&dispatch thunk of DataStore.deregisterObserver(_:for:));
}

uint64_t sub_100022498(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, unsigned char *))
{
  if (qword_1000C2C78 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100027E60(&qword_1000C3FE8, (void (*)(uint64_t))type metadata accessor for AlarmApertureElementController);
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  a3(v3, v5, v7);
  sub_10001EC9C((uint64_t)v7);
  if (qword_1000C2C90 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  a3(v3, v5, v7);
  swift_release();
  return sub_10001EC9C((uint64_t)v7);
}

void sub_100022620(char a1)
{
  uint64_t v2 = v1;
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for AlarmApertureElementController();
  [super viewWillAppear:a1 & 1];
  uint64_t v4 = self;
  _StringGuts.grow(_:)(17);
  id v5 = [v2 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();

  v9._uint64_t countAndFlagsBits = 0x6C69577765697620;
  v9._unint64_t object = (void *)0xEF7261657070416CLL;
  String.append(_:)(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 logInfo:v10, v6, v8];

  uint64_t v11 = sub_100025D9C();
  if (v11)
  {
    objc_super v12 = v11;
    if ([v11 isFiring])
    {
      sub_100022FC8(v12);
    }
    else if ([v12 isSnoozed])
    {
      sub_100026A7C(v12);
    }
  }
}

void sub_1000227DC()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C3128);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  Swift::String v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
  if (v11)
  {
    uint64_t v61 = (char *)&v60 - v10;
    type metadata accessor for AlarmApertureElementController();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v13 = [self bundleForClass:ObjCClassFromMetadata];
    NSString v14 = String._bridgeToObjectiveC()();
    NSString v15 = String._bridgeToObjectiveC()();
    NSString v16 = [v13 localizedStringForKey:v14 value:0 table:v15];

    if (!v16)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v11 setAccessibilityLabel:v16];

    id v17 = v11;
    id v18 = [v1 view];
    if (v18)
    {
      id v19 = v18;
      [v18 addSubview:v17];

      uint64_t v20 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3F68));
      *(void *)&v20[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v20) + 16) + 8] = 0;
      swift_unknownObjectWeakInit();
      uint64_t v21 = (void *)UIHostingController.init(rootView:)();
      id v22 = [v21 view];
      if (v22)
      {
        uint64_t v23 = v22;
        [v22 setTranslatesAutoresizingMaskIntoConstraints:0];

        [v1 addChildViewController:v21];
        [v21 didMoveToParentViewController:v1];
        id v24 = [v21 view];
        if (v24)
        {
          id v25 = v24;
          [v17 addSubview:v24];

          uint64_t v26 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8];
          if (v26)
          {
            uint64_t v27 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
            uint64_t v28 = qword_1000C2C78;
            swift_bridgeObjectRetain();
            if (v28 != -1) {
              swift_once();
            }
            uint64_t v62 = v27;
            uint64_t v63 = v26;
            AnyHashable.init<A>(_:)();
            dispatch thunk of DataStore.getEntry(for:)();
            sub_10001EC9C((uint64_t)v64);
            id v29 = v65;
            if (v65)
            {
              id v30 = [v65 snoozeFireDate];
              if (v30)
              {
                uint64_t v31 = v30;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v32 = *(void (**)(void))(v6 + 32);
                ((void (*)(char *, char *, uint64_t))v32)(v4, v9, v5);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
                {
                  uint64_t v33 = v5;
                  NSString v34 = v61;
                  uint64_t v35 = v33;
                  v32();
                  Date.init()();
                  Date.timeIntervalSince(_:)();
                  id v36 = *(void (**)(char *, uint64_t))(v6 + 8);
                  uint64_t v37 = v9;
                  uint64_t v38 = v35;
                  v36(v37, v35);
                  sub_10005DB1C();
                  NSString v39 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease();
                  [v17 setAccessibilityLabel:v39];

                  v36(v34, v38);
                  goto LABEL_16;
                }
              }
              else
              {
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
              }

              sub_10000FAF8((uint64_t)v4, &qword_1000C3128);
            }
          }
LABEL_16:
          id v40 = v17;
          id v41 = [v1 view];
          if (v41)
          {
            NSString v42 = v41;
            [v41 addSubview:v40];

            id v43 = [v21 view];
            if (v43)
            {
              id v44 = v43;
              uint64_t v45 = self;
              sub_100007830((uint64_t *)&unk_1000C66F0);
              uint64_t v46 = swift_allocObject();
              *(_OWORD *)(v46 + 16) = xmmword_100095580;
              id v47 = [v44 leadingAnchor];
              id v48 = [v40 leadingAnchor];
              id v49 = [v47 constraintEqualToAnchor:v48];

              *(void *)(v46 + 32) = v49;
              id v50 = [v44 trailingAnchor];
              id v51 = [v40 trailingAnchor];
              id v52 = [v50 constraintEqualToAnchor:v51];

              *(void *)(v46 + 40) = v52;
              id v53 = [v44 topAnchor];
              id v54 = [v40 topAnchor];
              id v55 = [v53 constraintEqualToAnchor:v54];

              *(void *)(v46 + 48) = v55;
              id v56 = [v44 bottomAnchor];
              id v57 = [v40 bottomAnchor];
              id v58 = [v56 constraintEqualToAnchor:v57];

              *(void *)(v46 + 56) = v58;
              v64[0] = v46;
              specialized Array._endMutation()();
              sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v45 activateConstraints:isa];

              return;
            }
LABEL_24:
            __break(1u);
            return;
          }
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
}

void sub_100022FC8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = self;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  unint64_t v58 = 0xD00000000000002BLL;
  unint64_t v59 = 0x800000010009A580;
  id v5 = [a1 alarmIDString];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._unint64_t object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 logInfo:v10];

  sub_100024670();
  if (*(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView]) {
    return;
  }
  sub_100023854();
  uint64_t v11 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost;
  if (!*(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost])
  {
    objc_super v12 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3FE0));
    *(void *)&v12[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v12) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    unint64_t v58 = (unint64_t)a1;
    id v13 = a1;
    NSString v14 = (void *)UIHostingController.init(rootView:)();
    id v15 = [v14 view];
    if (v15)
    {
      NSString v16 = v15;
      [v15 setTranslatesAutoresizingMaskIntoConstraints:0];

      id v17 = [v14 view];
      if (v17)
      {
        id v18 = v17;
        id v19 = [v17 layer];

        [v19 setAllowsHitTesting:0];
        [v2 addChildViewController:v14];
        id v20 = [v2 view];
        if (v20)
        {
          uint64_t v21 = v20;
          id v22 = [v14 view];
          if (v22)
          {
            uint64_t v23 = v22;
            [v21 addSubview:v22];

            [v14 didMoveToParentViewController:v2];
            id v24 = *(void **)&v2[v11];
            *(void *)&v2[v11] = v14;

            goto LABEL_8;
          }
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_8:
  uint64_t v25 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost;
  if (!*(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost])
  {
    uint64_t v26 = qword_1000C2C98;
    id v27 = a1;
    if (v26 != -1) {
      swift_once();
    }
    uint64_t v28 = (void *)qword_1000CAE28;
    uint64_t v60 = type metadata accessor for ClockAngelConnectionManager();
    uint64_t v61 = &off_1000B4D20;
    unint64_t v59 = (unint64_t)v28;
    id v29 = self;
    id v30 = v28;
    id v31 = [v29 mtOrange];
    uint64_t v32 = Color.init(uiColor:)();
    id v33 = [v29 mtOrange];
    Color.init(uiColor:)();
    uint64_t v34 = Color.opacity(_:)();
    swift_release();
    uint64_t v35 = static Color.white.getter();
    static Color.white.getter();
    uint64_t v36 = Color.opacity(_:)();
    swift_release();
    uint64_t v63 = &type metadata for StandardSessionUiConfig;
    id v64 = &off_1000B5578;
    uint64_t v37 = (void *)swift_allocObject();
    void v37[2] = v32;
    v37[3] = v34;
    v37[4] = v35;
    v37[5] = v36;
    uint64_t v62 = v37;
    unint64_t v58 = (unint64_t)v27;
    uint64_t v38 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3FD8));
    *(void *)&v38[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v38) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_10000C6B8((uint64_t)&v58, (uint64_t)&v57);
    NSString v39 = (void *)UIHostingController.init(rootView:)();
    sub_100027E0C((uint64_t)&v58);
    id v40 = [v39 view];
    if (v40)
    {
      id v41 = v40;
      [v40 setTranslatesAutoresizingMaskIntoConstraints:0];

      id v42 = [v39 view];
      if (v42)
      {
        id v43 = v42;
        id v44 = [v42 layer];

        [v44 setAllowsHitTesting:1];
        [v2 addChildViewController:v39];
        id v45 = [v2 view];
        if (v45)
        {
          uint64_t v46 = v45;
          id v47 = [v39 view];
          if (v47)
          {
            id v48 = v47;
            [v46 addSubview:v47];

            [v39 didMoveToParentViewController:v2];
            id v49 = *(void **)&v2[v25];
            *(void *)&v2[v25] = v39;

            goto LABEL_16;
          }
LABEL_30:
          __break(1u);
          return;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_16:
  uint64_t v50 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints;
  unint64_t v51 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints];
  if (v51 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v52)
  {
    id v53 = self;
    sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v53 deactivateConstraints:isa];

    *(void *)&v2[v50] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  *(void *)&v2[v50] = sub_100023DA0();
  swift_bridgeObjectRelease();
  *(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode] = 4;
  v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal] = 1;
  id v55 = self;
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  swift_bridgeObjectRetain();
  Class v56 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v55 activateConstraints:v56];
}

void sub_1000236C8()
{
  uint64_t v1 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView];
  if (v2)
  {
    id v3 = v2;
    [v3 removeFromSuperview];
    uint64_t v4 = *(void **)&v0[v1];
    *(void *)&v0[v1] = 0;
  }
  uint64_t v5 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost;
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost];
  if (v6)
  {
    id v7 = v6;
    id v8 = [v7 view];
    if (!v8)
    {
      __break(1u);
      goto LABEL_13;
    }
    Swift::String v9 = v8;
    [v8 removeFromSuperview];

    [v7 didMoveToParentViewController:0];
    [v0 removeChildViewController:v7];
    NSString v10 = *(void **)&v0[v5];
    *(void *)&v0[v5] = 0;
  }
  uint64_t v11 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost;
  objc_super v12 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost];
  if (!v12) {
    return;
  }
  id v13 = v12;
  id v14 = [v13 view];
  if (!v14)
  {
LABEL_13:
    __break(1u);
    return;
  }
  id v15 = v14;
  [v14 removeFromSuperview];

  [v13 didMoveToParentViewController:0];
  [v0 removeChildViewController:v13];
  id v16 = *(id *)&v0[v11];
  *(void *)&v0[v11] = 0;
}

void sub_100023854()
{
  uint64_t v1 = v0;
  id v2 = [self buttonWithType:0];
  uint64_t v3 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView;
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView];
  *(void *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView] = v2;

  uint64_t v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  id v6 = [v5 layer];
  [v6 setMasksToBounds:1];

  id v7 = *(void **)&v1[v3];
  if (!v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v8 = [v1 view];
  if (!v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!*(void *)&v1[v3])
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  Swift::String v9 = v8;
  [v8 addSubview:];

  swift_getObjectType();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v11 = [self bundleForClass:ObjCClassFromMetadata];
  id v12 = objc_allocWithZone((Class)BSUICAPackageView);
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 initWithPackageName:v13 inBundle:v11];

  id v15 = self;
  if (!v14)
  {
    _StringGuts.grow(_:)(54);
    id v35 = [v1 description];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    v39._uint64_t countAndFlagsBits = v36;
    v39._unint64_t object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._uint64_t countAndFlagsBits = 0xD000000000000034;
    v40._unint64_t object = (void *)0x800000010009A6B0;
    String.append(_:)(v40);
    id isa = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 logInfo:isa];
    goto LABEL_11;
  }
  _StringGuts.grow(_:)(30);
  id v16 = [v1 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v17._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v17._unint64_t object = (void *)0x800000010009A6F0;
  String.append(_:)(v17);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 logInfo:v18];

  id v19 = *(void **)&v1[v3];
  if (!v19) {
    goto LABEL_18;
  }
  [v19 addSubview:v14];
  [v14 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v14 setUserInteractionEnabled:0];
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100095580;
  id v21 = [v14 widthAnchor];
  id v22 = [v21 constraintEqualToConstant:47.0];

  *(void *)(v20 + 32) = v22;
  id v23 = [v14 heightAnchor];
  id v24 = [v23 constraintEqualToConstant:47.0];

  *(void *)(v20 + 40) = v24;
  id v25 = [v14 centerXAnchor];
  uint64_t v26 = *(void **)&v1[v3];
  if (!v26)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v27 = [v26 centerXAnchor];
  id v28 = [v25 constraintEqualToAnchor:v27];

  *(void *)(v20 + 48) = v28;
  id v29 = [v14 centerYAnchor];
  id v30 = *(void **)&v1[v3];
  if (!v30)
  {
LABEL_20:
    __break(1u);
    return;
  }
  id v31 = v29;
  uint64_t v32 = self;
  id v33 = [v30 centerYAnchor];
  id v34 = [v31 constraintEqualToAnchor:v33];

  *(void *)(v20 + 56) = v34;
  specialized Array._endMutation()();
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  id isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v32 activateConstraints:isa];

LABEL_11:
}

id sub_100023DA0()
{
  id result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost];
  if (!result)
  {
    __break(1u);
    goto LABEL_20;
  }
  id result = [result view];
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v2 = result;
  id result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost];
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id result = [result view];
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = result;
  LODWORD(v3) = 1132068864;
  [v2 setContentCompressionResistancePriority:0 forAxis:v3];
  LODWORD(v5) = 1144750080;
  [v4 setContentHuggingPriority:0 forAxis:v5];
  id v6 = [v4 trailingAnchor];
  id result = [v0 view];
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  id v7 = result;
  id v8 = [result trailingAnchor];

  id v9 = [v6 constraintEqualToAnchor:v8 constant:-16.0];
  LODWORD(v10) = 1148846080;
  [v9 setPriority:v10];
  id v11 = [v2 trailingAnchor];
  id v12 = [v4 leadingAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  LODWORD(v14) = 1148846080;
  [v13 setPriority:v14];
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100095F00;
  uint64_t v16 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView;
  id result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView];
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  id v47 = v9;
  id v17 = [result leadingAnchor];
  id result = [v0 view];
  if (!result)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  NSString v18 = result;
  id v19 = [result leadingAnchor];

  id v20 = [v17 constraintEqualToAnchor:v19 constant:17.5];
  *(void *)(v15 + 32) = v20;
  id result = *(id *)&v0[v16];
  if (!result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v21 = [result trailingAnchor];
  id v22 = [v2 leadingAnchor];
  id v23 = [v21 constraintEqualToAnchor:v22];

  *(void *)(v15 + 40) = v23;
  id result = *(id *)&v0[v16];
  if (!result)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  id v24 = [result topAnchor];
  id result = [v0 view];
  if (!result)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  id v25 = result;
  id v26 = [result topAnchor];

  id v27 = [v24 constraintEqualToAnchor:v26 constant:17.0];
  *(void *)(v15 + 48) = v27;
  id result = *(id *)&v0[v16];
  if (!result)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  id v28 = [result bottomAnchor];
  id result = [v0 view];
  if (!result)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  id v29 = result;
  id v30 = [result bottomAnchor];

  id v31 = [v28 constraintEqualToAnchor:v30 constant:-19.5];
  *(void *)(v15 + 56) = v31;
  id result = *(id *)&v0[v16];
  if (!result)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  id v32 = [result widthAnchor];
  id result = *(id *)&v0[v16];
  if (!result)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  id v33 = [result heightAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33];

  *(void *)(v15 + 64) = v34;
  *(void *)(v15 + 72) = v13;
  id v46 = v13;
  id v35 = [v4 bottomAnchor];
  id result = [v0 view];
  if (!result)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v36 = result;
  id v37 = [result bottomAnchor];

  id v38 = [v35 constraintEqualToAnchor:v37 constant:-17.0];
  *(void *)(v15 + 80) = v38;
  id v39 = [v2 leadingAnchor];
  id result = *(id *)&v0[v16];
  if (!result)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  id v40 = [result trailingAnchor];
  id v41 = [v39 constraintEqualToAnchor:v40 constant:1.5];

  *(void *)(v15 + 88) = v41;
  id v42 = [v2 bottomAnchor];
  id result = [v0 view];
  if (result)
  {
    id v43 = result;
    id v44 = [result bottomAnchor];

    id v45 = [v42 constraintEqualToAnchor:v44 constant:-*(double *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelBottomPadding]];
    *(void *)(v15 + 96) = v45;
    *(void *)(v15 + 104) = v47;
    specialized Array._endMutation()();

    return (id)v15;
  }
LABEL_35:
  __break(1u);
  return result;
}

void sub_10002440C()
{
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 logInfo:v2];

  *(void *)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode) = 3;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal) = 0;
  uint64_t v3 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost;
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost);
  if (!v4) {
    goto LABEL_18;
  }
  id v5 = [v4 view];
  if (!v5)
  {
    __break(1u);
    goto LABEL_22;
  }
  id v6 = v5;
  id v7 = [v5 superview];

  if (v7)
  {

    id v8 = *(void **)(v0 + v3);
    if (!v8)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    id v9 = [v8 view];
    if (!v9)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    double v10 = v9;
    [v9 removeFromSuperview];
  }
  id v11 = *(void **)(v0 + v3);
  if (!v11)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  [v11 removeFromParentViewController];
  uint64_t v12 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost;
  id v13 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost);
  if (v13)
  {
    id v14 = [v13 view];
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = [v14 superview];

      if (v16)
      {

        id v17 = *(void **)(v0 + v12);
        if (!v17)
        {
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        id v18 = [v17 view];
        if (!v18)
        {
LABEL_28:
          __break(1u);
          return;
        }
        id v19 = v18;
        [v18 removeFromSuperview];
      }
      id v20 = *(void **)(v0 + v12);
      if (v20)
      {
        [v20 removeFromParentViewController];
        return;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_18:
  NSString v21 = String._bridgeToObjectiveC()();
  [v1 logInfo:v21];
}

void sub_100024670()
{
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 logInfo:v2];

  uint64_t v3 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading;
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading);
  if (!v4) {
    goto LABEL_18;
  }
  id v5 = [v4 view];
  if (!v5)
  {
    __break(1u);
    goto LABEL_22;
  }
  id v6 = v5;
  id v7 = [v5 superview];

  if (v7)
  {

    id v8 = *(void **)(v0 + v3);
    if (!v8)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    id v9 = [v8 view];
    if (!v9)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    double v10 = v9;
    [v9 removeFromSuperview];
  }
  id v11 = *(void **)(v0 + v3);
  if (!v11)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  [v11 removeFromParentViewController];
  uint64_t v12 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing;
  id v13 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing);
  if (v13)
  {
    id v14 = [v13 view];
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = [v14 superview];

      if (v16)
      {

        id v17 = *(void **)(v0 + v12);
        if (!v17)
        {
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        id v18 = [v17 view];
        if (!v18)
        {
LABEL_28:
          __break(1u);
          return;
        }
        id v19 = v18;
        [v18 removeFromSuperview];
      }
      id v20 = *(void **)(v0 + v12);
      if (v20)
      {
        [v20 removeFromParentViewController];
        return;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_18:
  NSString v21 = String._bridgeToObjectiveC()();
  [v1 logInfo:v21];
}

void sub_1000248B8(void *a1)
{
  NSString v2 = v1;
  uint64_t v4 = self;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  unint64_t v58 = 0xD00000000000002BLL;
  unint64_t v59 = (uint64_t (*)())0x800000010009A580;
  id v5 = [a1 alarmIDString];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._unint64_t object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 logInfo:v10];

  sub_10002440C();
  uint64_t v11 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading;
  if (!*(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading])
  {
    uint64_t v12 = qword_1000C2C98;
    id v13 = a1;
    if (v12 != -1) {
      swift_once();
    }
    id v14 = (uint64_t (*)())qword_1000CAE28;
    uint64_t v62 = type metadata accessor for ClockAngelConnectionManager();
    uint64_t v63 = &off_1000B4D20;
    unint64_t v59 = v14;
    uint64_t v15 = self;
    id v16 = v14;
    id v17 = [v15 mtOrange];
    uint64_t v18 = Color.init(uiColor:)();
    id v19 = [v15 mtOrange];
    Color.init(uiColor:)();
    uint64_t v20 = Color.opacity(_:)();
    swift_release();
    uint64_t v21 = static Color.white.getter();
    static Color.white.getter();
    uint64_t v22 = Color.opacity(_:)();
    swift_release();
    id v65 = &type metadata for StandardSessionUiConfig;
    uint64_t v66 = &off_1000B5578;
    id v23 = (void *)swift_allocObject();
    void v23[2] = v18;
    _OWORD v23[3] = v20;
    v23[4] = v21;
    v23[5] = v22;
    id v64 = v23;
    unint64_t v58 = (unint64_t)v13;
    id v24 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3FD0));
    *(void *)&v24[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v24) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_10000C4E8((uint64_t)&v58, (uint64_t)&v57);
    id v25 = (void *)UIHostingController.init(rootView:)();
    sub_10000FA54((id *)&v58);
    id v26 = [v25 view];
    if (v26)
    {
      id v27 = v26;
      [v26 setTranslatesAutoresizingMaskIntoConstraints:0];

      id v28 = [v25 view];
      if (v28)
      {
        id v29 = v28;
        id v30 = [v28 layer];

        [v30 setAllowsHitTesting:1];
        [v2 addChildViewController:v25];
        id v31 = [v2 view];
        if (v31)
        {
          id v32 = v31;
          id v33 = [v25 view];
          if (v33)
          {
            id v34 = v33;
            [v32 addSubview:v33];

            [v25 didMoveToParentViewController:v2];
            id v35 = *(void **)&v2[v11];
            *(void *)&v2[v11] = v25;

            goto LABEL_9;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_9:
  uint64_t v36 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing;
  if (!*(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing])
  {
    id v37 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3FC8));
    *(void *)&v37[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v37) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    unint64_t v58 = (unint64_t)a1;
    unint64_t v59 = sub_100004FF8;
    uint64_t v60 = 0;
    __int16 v61 = 0;
    id v38 = a1;
    id v39 = (void *)UIHostingController.init(rootView:)();
    id v40 = [v39 view];
    if (v40)
    {
      id v41 = v40;
      [v40 setTranslatesAutoresizingMaskIntoConstraints:0];

      id v42 = [v39 view];
      if (v42)
      {
        id v43 = v42;
        id v44 = [v42 layer];

        [v44 setAllowsHitTesting:0];
        [v2 addChildViewController:v39];
        id v45 = [v2 view];
        if (v45)
        {
          id v46 = v45;
          id v47 = [v39 view];
          if (v47)
          {
            id v48 = v47;
            [v46 addSubview:v47];

            [v39 didMoveToParentViewController:v2];
            id v49 = *(void **)&v2[v36];
            *(void *)&v2[v36] = v39;

            goto LABEL_15;
          }
LABEL_28:
          __break(1u);
          return;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_15:
  uint64_t v50 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints;
  unint64_t v51 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints];
  if (v51 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v52)
  {
    id v53 = self;
    sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v53 deactivateConstraints:isa];

    *(void *)&v2[v50] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  *(void *)&v2[v50] = sub_100024F98();
  swift_bridgeObjectRelease();
  id v55 = self;
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  swift_bridgeObjectRetain();
  Class v56 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v55 activateConstraints:v56];
}

id sub_100024F98()
{
  id result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading];
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  id result = [result view];
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  NSString v2 = result;
  id result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing];
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id result = [result view];
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v3 = result;
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100095580;
  id v5 = [v2 leadingAnchor];
  id result = [v0 view];
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v6 = result;
  id v7 = [result leadingAnchor];

  id v8 = [v5 constraintEqualToAnchor:v7 constant:16.0];
  *(void *)(v4 + 32) = v8;
  id v9 = [v2 bottomAnchor];
  id result = [v0 view];
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  NSString v10 = result;
  id v11 = [result bottomAnchor];

  id v12 = [v9 constraintEqualToAnchor:v11 constant:-17.0];
  *(void *)(v4 + 40) = v12;
  id v13 = [v3 trailingAnchor];
  id result = [v0 view];
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v14 = result;
  id v15 = [result SBUISA_systemApertureLegibleContentLayoutMarginsGuide];

  id v16 = [v15 trailingAnchor];
  id v17 = [v13 constraintEqualToAnchor:v16];

  *(void *)(v4 + 48) = v17;
  id v18 = [v3 bottomAnchor];
  id result = [v0 view];
  if (result)
  {
    id v19 = result;
    id v20 = [result bottomAnchor];

    id v21 = [v18 constraintEqualToAnchor:v20 constant:-13.0];
    *(void *)(v4 + 56) = v21;
    specialized Array._endMutation()();

    return (id)v4;
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_1000252A8(uint64_t a1, char *a2)
{
  switch(*(void *)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeLayoutMode])
  {
    case 0:
      uint64_t v3 = self;
      _StringGuts.grow(_:)(31);
      id v4 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      v5._unint64_t object = (void *)0x800000010009A840;
      v5._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v5);
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v3 logInfo:v6];

      goto LABEL_5;
    case 1:
      NSString v10 = self;
      _StringGuts.grow(_:)(32);
      id v11 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      v12._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v12._unint64_t object = (void *)0x800000010009A7C0;
      String.append(_:)(v12);
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v10 logInfo:v13];

      sub_1000236C8();
LABEL_5:
      id v14 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
      if (v14) {
        [v14 setHidden:1];
      }
      id v15 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
      if (v15) {
        [v15 setHidden:1];
      }
      id v16 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
      if (!v16) {
        return;
      }
      goto LABEL_16;
    case 2:
      id v17 = self;
      _StringGuts.grow(_:)(31);
      id v18 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      v19._unint64_t object = (void *)0x800000010009A820;
      v19._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v19);
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v17 logInfo:v20];

      sub_1000236C8();
      id v21 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
      if (v21) {
        [v21 setHidden:0];
      }
      uint64_t v22 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
      if (v22) {
        [v22 setHidden:1];
      }
      id v16 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
      if (v16)
      {
LABEL_16:
        [v16 setHidden:1];
      }
      return;
    case 3:
      id v23 = self;
      _StringGuts.grow(_:)(31);
      id v24 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      v25._unint64_t object = (void *)0x800000010009A800;
      v25._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v25);
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v23 logInfo:v26];

      sub_1000236C8();
      id v27 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
      if (v27) {
        [v27 setHidden:0];
      }
      id v28 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
      if (v28) {
        [v28 setHidden:0];
      }
      id v29 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
      if (v29) {
        [v29 setHidden:1];
      }
      NSString v38 = objc_msgSend(objc_msgSend(a2, "systemApertureElementContext"), "transitionContext");
      swift_unknownObjectRelease();
      if (!v38) {
        return;
      }
      if ([v38 isUserInitiated]) {
        sub_100025B08();
      }
      break;
    case 4:
      id v30 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
      if (v30) {
        [v30 setHidden:1];
      }
      id v31 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
      if (v31) {
        [v31 setHidden:1];
      }
      id v32 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
      if (v32) {
        [v32 setHidden:1];
      }
      id v33 = self;
      _StringGuts.grow(_:)(30);
      id v34 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      v35._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v35._unint64_t object = (void *)0x800000010009A7E0;
      String.append(_:)(v35);
      NSString v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v33 logInfo:v36];

      id v37 = sub_100025D9C();
      if (!v37) {
        return;
      }
      NSString v38 = v37;
      if ([v37 isFiring]) {
        sub_100022FC8(v38);
      }
      else {
        sub_1000248B8(v38);
      }
      break;
    default:
      id v7 = self;
      _StringGuts.grow(_:)(35);
      id v8 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      v9._uint64_t countAndFlagsBits = 0xD000000000000021;
      v9._unint64_t object = (void *)0x800000010009A790;
      String.append(_:)(v9);
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 logInfo:v38];
      break;
  }
}

void sub_100025B08()
{
  uint64_t v1 = self;
  _StringGuts.grow(_:)(25);
  id v2 = [v0 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v3._unint64_t object = (void *)0x800000010009A540;
  v3._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v3);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 logInfo:v4];

  Swift::String v5 = sub_100025D9C();
  if (v5)
  {
    id v18 = v5;
    if ([v5 isFiring])
    {
      _StringGuts.grow(_:)(34);
      id v6 = [v0 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      v7._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v7._unint64_t object = (void *)0x800000010009A560;
      String.append(_:)(v7);
      id v8 = [v18 alarmIDString];
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v11 = v10;

      v12._uint64_t countAndFlagsBits = v9;
      v12._unint64_t object = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v1 logInfo:v13];

      if (qword_1000C2C98 != -1) {
        swift_once();
      }
      id v14 = [v18 alarmIDString];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v17 = v16;

      sub_100050968(v15, v17);
      swift_bridgeObjectRelease();
    }
  }
}

void *sub_100025D9C()
{
  uint64_t v1 = v0;
  id v2 = self;
  _StringGuts.grow(_:)(33);
  id v3 = [v0 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();

  uint64_t v28 = v4;
  unint64_t v29 = v6;
  v7._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v7._unint64_t object = (void *)0x800000010009A4E0;
  String.append(_:)(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 logInfo:v8];

  uint64_t v9 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8];
  if (!v9)
  {
    _StringGuts.grow(_:)(22);
    id v21 = [v0 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();

    uint64_t v28 = v22;
    unint64_t v29 = v24;
    v25._unint64_t object = (void *)0x800000010009A500;
    v25._uint64_t countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v25);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 logInfo:v26];

    return 0;
  }
  NSString v10 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  uint64_t v11 = qword_1000C2C78;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.getEntry(for:)();
  sub_10001EC9C((uint64_t)&v28);
  Swift::String v12 = v10;
  uint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  id v13 = [v1 description];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();

  uint64_t v28 = v14;
  unint64_t v29 = v16;
  v17._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v17._unint64_t object = (void *)0x800000010009A520;
  String.append(_:)(v17);
  id v18 = v10;
  sub_100007830((uint64_t *)&unk_1000C3FB0);
  v19._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 logInfo:v20];

  if (!v10)
  {
    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    sub_10004FB50(0, v9, 1);
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  return v12;
}

void sub_10002615C(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9F0(a1, (uint64_t)&aBlock);
  sub_100007830(&qword_1000C3F78);
  sub_100014314(0, (unint64_t *)&qword_1000C3C58);
  if (swift_dynamicCast())
  {
    uint64_t v36 = v5;

    Swift::String v12 = self;
    aBlock = 0;
    unint64_t v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v13._uint64_t countAndFlagsBits = 0xD000000000000032;
    v13._unint64_t object = (void *)0x800000010009A480;
    String.append(_:)(v13);
    id v14 = [v2 description];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v17 = v16;

    v18._uint64_t countAndFlagsBits = v15;
    v18._unint64_t object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 logInfo:v19];

    NSString v20 = sub_100025D9C();
    if (v20)
    {
      id v21 = v20;
      NSString v22 = String._bridgeToObjectiveC()();
      [v12 logInfo:v22];

      sub_100014314(0, (unint64_t *)&qword_1000C3F90);
      unint64_t v23 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v2;
      *(void *)(v24 + 24) = v21;
      id v41 = sub_100027DB4;
      uint64_t v42 = v24;
      aBlock = _NSConcreteStackBlock;
      unint64_t v38 = 1107296256;
      id v39 = sub_10001C5B8;
      id v40 = &unk_1000B37E8;
      Swift::String v25 = _Block_copy(&aBlock);
      id v26 = v2;
      id v27 = v21;
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock = (void **)&_swiftEmptyArrayStorage;
      sub_100027E60((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100007830((uint64_t *)&unk_1000C3FA0);
      sub_10001DF74();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v25);

      (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      NSString v35 = String._bridgeToObjectiveC()();
      [v12 logInfo:v35];
    }
  }
  else
  {
    uint64_t v28 = self;
    aBlock = 0;
    unint64_t v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD000000000000014;
    unint64_t v38 = 0x800000010009A460;
    id v29 = [v2 description];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v32 = v31;

    v33._uint64_t countAndFlagsBits = v30;
    v33._unint64_t object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v28 logInfo:v34];
  }
}

void sub_100026688(int a1, id a2)
{
  if ([a2 isFiring])
  {
    sub_100022FC8(a2);
  }
  else if ([a2 isSnoozed])
  {
    sub_100026A7C(a2);
  }
}

uint64_t sub_1000266E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007830(&qword_1000C3F70);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AlarmSessionEntry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (void *)((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8);
  if (v12)
  {
    uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId);
    sub_10000F9F0((uint64_t)a1, (uint64_t)&v22);
    swift_bridgeObjectRetain();
    sub_100007830(&qword_1000C3F78);
    char v14 = swift_dynamicCast();
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    if (v14)
    {
      v15(v6, 0, 1, v7);
      sub_100027C4C((uint64_t)v6, (uint64_t)v11);
      BOOL v16 = v13 == *v11 && v12 == v11[1];
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        Swift::String v17 = self;
        uint64_t v22 = 0;
        unint64_t v23 = 0xE000000000000000;
        _StringGuts.grow(_:)(53);
        v21[1] = v22;
        v21[2] = v23;
        v18._unint64_t object = (void *)0x800000010009A430;
        v18._uint64_t countAndFlagsBits = 0xD000000000000026;
        String.append(_:)(v18);
        sub_10000C4A4(a1, a1[3]);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        sub_100027D10(&v22);
        dispatch thunk of Identifiable.id.getter();
        sub_100007830((uint64_t *)&unk_1000C3F80);
        _print_unlocked<A, B>(_:_:)();
        sub_100004678((uint64_t)&v22);
        v19._uint64_t countAndFlagsBits = 0x696E61656C63202CLL;
        v19._unint64_t object = (void *)0xED0000707520676ELL;
        String.append(_:)(v19);
        NSString v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v17 logInfo:v20];

        sub_100022480(v13, v12);
        swift_bridgeObjectRelease();
        return sub_100027CB0((uint64_t)v11, type metadata accessor for AlarmSessionEntry);
      }
      else
      {
        sub_100027CB0((uint64_t)v11, type metadata accessor for AlarmSessionEntry);
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      v15(v6, 1, 1, v7);
      swift_bridgeObjectRelease();
      return sub_10000FAF8((uint64_t)v6, &qword_1000C3F70);
    }
  }
  return result;
}

void sub_100026A7C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AlarmSnoozeCompressedTrailingView(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v106 - v8;
  uint64_t v10 = sub_100007830(&qword_1000C3128);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v115 = (char *)v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  double v116 = (char *)v106 - v17;
  uint64_t v18 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost;
  Swift::String v19 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost];
  if (v19)
  {
    id v20 = [v19 parentViewController];
    if (v20)
    {

      return;
    }
  }
  id v21 = [a1 snoozeFireDate];
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    goto LABEL_18;
  }
  uint64_t v22 = v21;
  uint64_t v112 = v15;
  uint64_t v114 = v13;
  unint64_t v23 = v115;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  Swift::String v25 = v23;
  uint64_t v26 = v114;
  v24(v12, v25, v114);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v26) == 1)
  {
LABEL_18:
    sub_10000FAF8((uint64_t)v12, &qword_1000C3128);
    uint64_t v57 = self;
    aBlock = 0;
    unint64_t v118 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    id v58 = [v2 description];
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v61 = v60;
    swift_bridgeObjectRelease();

    aBlock = (void **)v59;
    unint64_t v118 = v61;
    v62._unint64_t object = (void *)0x800000010009A380;
    v62._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v62);
    NSString v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v57 logInfo:v63];

    return;
  }
  uint64_t v108 = v14 + 32;
  uint64_t v110 = (void (*)(unint64_t, char *, uint64_t))v24;
  v24(v116, v12, v26);
  id v27 = self;
  aBlock = 0;
  unint64_t v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  id v28 = [v2 description];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v113 = v14;
  id v31 = v30;

  v32._uint64_t countAndFlagsBits = v29;
  v32._unint64_t object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v33._unint64_t object = (void *)0x800000010009A3A0;
  String.append(_:)(v33);
  id v34 = [v2 view];
  id v123 = v34;
  sub_100007830(&qword_1000C3F50);
  _print_unlocked<A, B>(_:_:)();

  v35._uint64_t countAndFlagsBits = 0x696C69617274202CLL;
  v35._unint64_t object = (void *)0xEC000000203A676ELL;
  String.append(_:)(v35);
  id v111 = *(id *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
  id v123 = v111;
  sub_100007830(&qword_1000C3F58);
  _print_unlocked<A, B>(_:_:)();
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v109 = v27;
  [v27 logInfo:v36];

  uint64_t v37 = v113;
  uint64_t v38 = v113 + 16;
  long long v107 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
  v107(v9, v116, v26);
  id v39 = &v9[*(int *)(v4 + 20)];
  *(void *)id v39 = sub_100004FF8;
  *((void *)v39 + 1) = 0;
  v39[16] = 0;
  id v40 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3F60));
  *(void *)&v40[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v40) + 16) + 8] = 0;
  swift_unknownObjectWeakInit();
  sub_100027A90((uint64_t)v9, (uint64_t)v7);
  uint64_t v41 = UIHostingController.init(rootView:)();
  sub_100027CB0((uint64_t)v9, type metadata accessor for AlarmSnoozeCompressedTrailingView);
  uint64_t v42 = *(void **)&v2[v18];
  *(void *)&v2[v18] = v41;

  id v43 = *(void **)&v2[v18];
  if (!v43)
  {
    __break(1u);
    goto LABEL_37;
  }
  id v44 = [v43 view];
  if (!v44)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  id v45 = v44;
  [v44 setTranslatesAutoresizingMaskIntoConstraints:0];

  if (!*(void *)&v2[v18])
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  [v2 addChildViewController:];
  id v46 = *(void **)&v2[v18];
  if (!v46)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  [v46 didMoveToParentViewController:v2];
  v106[1] = v38;
  if (v111)
  {
    id v47 = *(void **)&v2[v18];
    if (!v47)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    id v48 = [v47 view];
    if (!v48)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    id v49 = v48;
    id v50 = v111;
    [v111 addSubview:v48];

    unint64_t v51 = v115;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v52 = v51;
    uint64_t v26 = v114;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v52, v114);
    sub_10005DB1C();
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v50 setAccessibilityLabel:v53];

    id v54 = v50;
    id v55 = [v2 view];
    if (!v55)
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    NSString v56 = v55;
    [v55 addSubview:v54];
  }
  else
  {
    aBlock = 0;
    unint64_t v118 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    id v64 = [v2 description];
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v67 = v66;
    swift_bridgeObjectRelease();

    aBlock = (void **)v65;
    unint64_t v118 = v67;
    v68._uint64_t countAndFlagsBits = 0xD000000000000017;
    v68._unint64_t object = (void *)0x800000010009A3D0;
    String.append(_:)(v68);
    NSString v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v109 logInfo:v56];
  }

  id v69 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C3F68));
  *(void *)&v69[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v69) + 16) + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v70 = UIHostingController.init(rootView:)();
  uint64_t v71 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost;
  uint64_t v72 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost];
  *(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost] = v70;

  unint64_t v73 = *(void **)&v2[v71];
  if (!v73) {
    goto LABEL_40;
  }
  id v74 = [v73 view];
  if (!v74)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  id v75 = v74;
  [v74 setTranslatesAutoresizingMaskIntoConstraints:0];

  if (!*(void *)&v2[v71])
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  [v2 addChildViewController:];
  id v76 = *(void **)&v2[v71];
  if (!v76)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  [v76 didMoveToParentViewController:v2];
  uint64_t v77 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
  if (!v77)
  {
    aBlock = 0;
    unint64_t v118 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    id v90 = [v2 description];
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v93 = v92;
    swift_bridgeObjectRelease();

    aBlock = (void **)v91;
    unint64_t v118 = v93;
    v94._uint64_t countAndFlagsBits = 0xD000000000000016;
    v94._unint64_t object = (void *)0x800000010009A3F0;
    String.append(_:)(v94);
    NSString v88 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v109 logInfo:v88];
    uint64_t v89 = v113;
    uint64_t v81 = v110;
    goto LABEL_30;
  }
  unint64_t v78 = *(void **)&v2[v71];
  if (!v78) {
    goto LABEL_47;
  }
  id v79 = [v78 view];
  uint64_t v80 = v113;
  uint64_t v81 = v110;
  if (!v79)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  char v82 = v79;
  [v77 addSubview:v79];

  id v83 = v115;
  Date.init()();
  Date.timeIntervalSince(_:)();
  Swift::String v84 = v83;
  uint64_t v26 = v114;
  (*(void (**)(char *, uint64_t))(v80 + 8))(v84, v114);
  sub_10005DB1C();
  NSString v85 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v77 setAccessibilityLabel:v85];

  id v86 = v77;
  id v87 = [v2 view];
  if (!v87)
  {
LABEL_49:
    __break(1u);
    return;
  }
  NSString v88 = v87;
  [v87 addSubview:v86];

  uint64_t v89 = v113;
LABEL_30:

  if (UIAccessibilityIsVoiceOverRunning()
    || UIAccessibilityIsSwitchControlRunning()
    || _AXSCommandAndControlEnabled())
  {
    objc_msgSend(objc_msgSend(v2, "systemApertureElementContext"), "setElementNeedsUpdate");
    swift_unknownObjectRelease();
    uint64_t v95 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer;
    if (!*(void *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer])
    {
      id v96 = self;
      uint64_t v97 = v115;
      v107(v115, v116, v114);
      unint64_t v98 = (*(unsigned __int8 *)(v89 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
      uint64_t v99 = swift_allocObject();
      *(void *)(v99 + 16) = v2;
      char v100 = v97;
      uint64_t v26 = v114;
      v81(v99 + v98, v100, v114);
      unint64_t v121 = sub_100027BC0;
      uint64_t v122 = v99;
      aBlock = _NSConcreteStackBlock;
      unint64_t v118 = 1107296256;
      uint64_t v119 = sub_100054254;
      unint64_t v120 = &unk_1000B3798;
      id v101 = _Block_copy(&aBlock);
      uint64_t v102 = v2;
      swift_release();
      id v103 = [v96 scheduledTimerWithTimeInterval:1 repeats:v101 block:1.0];
      unint64_t v104 = v101;
      uint64_t v89 = v113;
      _Block_release(v104);
      Swift::String v105 = *(void **)&v2[v95];
      *(void *)&v2[v95] = v103;
    }
  }
  (*(void (**)(char *, uint64_t))(v89 + 8))(v116, v26);
}

uint64_t sub_100027708(uint64_t a1, char *a2)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
  if (v7)
  {
    Date.init()();
    Date.timeIntervalSince(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_10005DB1C();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 setAccessibilityLabel:v8];
  }
  objc_msgSend(objc_msgSend(a2, "systemApertureElementContext"), "setElementNeedsUpdate");
  return swift_unknownObjectRelease();
}

void sub_100027890()
{
  sub_1000279A8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000279A8()
{
  if (!qword_1000C6BF0)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000C6BF0);
    }
  }
}

uint64_t sub_100027A08()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_observerId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100027A48()
{
  return sub_100027E60((unint64_t *)&unk_1000C3F40, (void (*)(uint64_t))type metadata accessor for AlarmApertureElementController);
}

uint64_t sub_100027A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmSnoozeCompressedTrailingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027AF4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100027BC0(uint64_t a1)
{
  type metadata accessor for Date();
  uint64_t v3 = *(char **)(v1 + 16);

  return sub_100027708(a1, v3);
}

uint64_t sub_100027C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100027C44()
{
  return swift_release();
}

uint64_t sub_100027C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlarmSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027CB0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_100027D10(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100027D74()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100027DB4()
{
  sub_100026688(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_100027DBC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100027E0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100027E60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100027EA8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100027EE0(uint64_t a1)
{
  sub_1000252A8(a1, *(char **)(v1 + 16));
}

uint64_t sub_100027EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028030(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CurrentLocationResult(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v30 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007830(&qword_1000C42C0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007830(&qword_1000C42C8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v33 = (uint64_t)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v32 = (uint64_t)&v30 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - v16;
  __chkstk_darwin(v15);
  Swift::String v19 = (char *)&v30 - v18;
  uint64_t v20 = v1 + *(void *)(*(void *)v1 + 96);
  swift_beginAccess();
  uint64_t v34 = a1;
  sub_10002EB6C(a1, (uint64_t)v19, type metadata accessor for CurrentLocationResult);
  id v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56);
  v31(v19, 0, 1, v3);
  uint64_t v21 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_10000FA94(v20, (uint64_t)v9, &qword_1000C42C8);
  sub_10000FA94((uint64_t)v19, v21, &qword_1000C42C8);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v22((uint64_t)v9, 1, v3) == 1)
  {
    sub_10000FAF8((uint64_t)v19, &qword_1000C42C8);
    if (v22(v21, 1, v3) == 1) {
      return sub_10000FAF8((uint64_t)v9, &qword_1000C42C8);
    }
  }
  else
  {
    sub_10000FA94((uint64_t)v9, (uint64_t)v17, &qword_1000C42C8);
    if (v22(v21, 1, v3) != 1)
    {
      uint64_t v24 = v30;
      sub_10002EBD4(v21, v30, type metadata accessor for CurrentLocationResult);
      BOOL v25 = sub_10002D970((uint64_t)v17, v24);
      sub_10002DD9C(v24, type metadata accessor for CurrentLocationResult);
      sub_10000FAF8((uint64_t)v19, &qword_1000C42C8);
      sub_10002DD9C((uint64_t)v17, type metadata accessor for CurrentLocationResult);
      uint64_t result = sub_10000FAF8((uint64_t)v9, &qword_1000C42C8);
      if (v25) {
        return result;
      }
      goto LABEL_8;
    }
    sub_10000FAF8((uint64_t)v19, &qword_1000C42C8);
    sub_10002DD9C((uint64_t)v17, type metadata accessor for CurrentLocationResult);
  }
  sub_10000FAF8((uint64_t)v9, &qword_1000C42C0);
LABEL_8:
  uint64_t v26 = v32;
  sub_10002EB6C(v34, v32, type metadata accessor for CurrentLocationResult);
  v31((char *)v26, 0, 1, v3);
  uint64_t v27 = v26;
  uint64_t v28 = v33;
  sub_10000F834(v27, v33, &qword_1000C42C8);
  swift_beginAccess();
  sub_10001EFF4(v28, v20, &qword_1000C42C8);
  swift_endAccess();
  swift_beginAccess();
  swift_retain();
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_10002DE1C(v29, v1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000284DC(uint64_t a1)
{
  uint64_t v3 = sub_100007830(&qword_1000C4320);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v56 = v3;
  uint64_t v57 = v4;
  __chkstk_darwin(v3);
  NSString v53 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v55 = (char *)sub_100007830(&qword_1000C4328);
  __chkstk_darwin(v55);
  uint64_t v58 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C4330);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v54 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v59 = (uint64_t)&v52 - v11;
  uint64_t v12 = sub_100007830(&qword_1000C4338);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007830(&qword_1000C4340);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v64 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v63 = (uint64_t)&v52 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v52 - v22;
  __chkstk_darwin(v21);
  BOOL v25 = (char *)&v52 - v24;
  uint64_t v26 = *(void *)(*(void *)v1 + 96);
  uint64_t v61 = v1;
  uint64_t v27 = v1 + v26;
  swift_beginAccess();
  uint64_t v65 = a1;
  sub_10000FA94(a1, (uint64_t)v25, &qword_1000C4330);
  uint64_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
  uint64_t v60 = v8 + 56;
  v28(v25, 0, 1, v7);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 56)];
  uint64_t v62 = v27;
  uint64_t v30 = v27;
  uint64_t v31 = v7;
  sub_10000FA94(v30, (uint64_t)v15, &qword_1000C4340);
  sub_10000FA94((uint64_t)v25, v29, &qword_1000C4340);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v32((uint64_t)v15, 1, v7) == 1)
  {
    sub_10000FAF8((uint64_t)v25, &qword_1000C4340);
    if (v32(v29, 1, v7) == 1)
    {
      uint64_t v33 = (uint64_t)v15;
      return sub_10000FAF8(v33, &qword_1000C4340);
    }
    uint64_t v34 = &qword_1000C4338;
    goto LABEL_15;
  }
  sub_10000FA94((uint64_t)v15, (uint64_t)v23, &qword_1000C4340);
  if (v32(v29, 1, v7) == 1)
  {
    uint64_t v34 = &qword_1000C4338;
LABEL_14:
    sub_10000FAF8((uint64_t)v25, &qword_1000C4340);
    sub_10000FAF8((uint64_t)v23, &qword_1000C4330);
LABEL_15:
    sub_10000FAF8((uint64_t)v15, v34);
LABEL_16:
    uint64_t v42 = v63;
    sub_10000FA94(v65, v63, &qword_1000C4330);
    v28((char *)v42, 0, 1, v31);
    uint64_t v43 = v42;
    uint64_t v44 = v64;
    sub_10000F834(v43, v64, &qword_1000C4340);
    uint64_t v45 = v62;
    swift_beginAccess();
    sub_10001EFF4(v44, v45, &qword_1000C4340);
    swift_endAccess();
    uint64_t v46 = v61;
    swift_beginAccess();
    swift_retain();
    uint64_t v47 = swift_bridgeObjectRetain();
    sub_10002E394(v47, v46);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v52 = v28;
  uint64_t v35 = v59;
  sub_10000F834(v29, v59, &qword_1000C4330);
  uint64_t v36 = v58;
  uint64_t v37 = v58 + *((int *)v55 + 12);
  id v55 = v23;
  sub_10000FA94((uint64_t)v23, v58, &qword_1000C4330);
  sub_10000FA94(v35, v37, &qword_1000C4330);
  uint64_t v38 = v56;
  id v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  if (v39(v36, 1, v56) == 1)
  {
    if (v39(v37, 1, v38) == 1)
    {
      sub_10000FAF8(v58, &qword_1000C4330);
      sub_10000FAF8(v59, &qword_1000C4330);
      sub_10000FAF8((uint64_t)v25, &qword_1000C4340);
      sub_10000FAF8((uint64_t)v55, &qword_1000C4330);
      uint64_t v33 = (uint64_t)v15;
      return sub_10000FAF8(v33, &qword_1000C4340);
    }
    goto LABEL_13;
  }
  uint64_t v41 = v54;
  sub_10000FA94(v36, v54, &qword_1000C4330);
  if (v39(v37, 1, v38) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v41, v38);
LABEL_13:
    sub_10000FAF8(v58, &qword_1000C4328);
    sub_10000FAF8(v59, &qword_1000C4330);
    uint64_t v34 = &qword_1000C4340;
    uint64_t v28 = v52;
    unint64_t v23 = v55;
    goto LABEL_14;
  }
  uint64_t v48 = v57;
  id v49 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v53, v37, v38);
  sub_10000FD6C(&qword_1000C4348, &qword_1000C4320);
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  v51(v49, v38);
  v51((char *)v41, v38);
  sub_10000FAF8(v36, &qword_1000C4330);
  sub_10000FAF8(v59, &qword_1000C4330);
  sub_10000FAF8((uint64_t)v25, &qword_1000C4340);
  sub_10000FAF8((uint64_t)v55, &qword_1000C4330);
  uint64_t result = sub_10000FAF8((uint64_t)v15, &qword_1000C4340);
  uint64_t v28 = v52;
  if ((v50 & 1) == 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_100028C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100014314(0, &qword_1000C4298);
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);

  return sub_10002D668(a1 + v6, a2 + v6);
}

id sub_100028CEC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for LocationDataProvider(0)) init];
  qword_1000CADF0 = (uint64_t)result;
  return result;
}

void sub_100028D20(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v2 = sub_100007830(&qword_1000C4360);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  __chkstk_darwin(v2);
  uint64_t v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007830(&qword_1000C4368);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v41 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v36 = (char *)&v31 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = sub_100007830(&qword_1000C42C8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_stream];
  uint64_t v18 = (os_unfair_lock_s *)(*(void *)(v17 + *(void *)(*(void *)v17 + 104)) + 16);
  swift_beginAccess();
  swift_retain();
  uint64_t v19 = v1;
  os_unfair_lock_lock(v18);
  uint64_t v20 = *(void *)(*(void *)v17 + 120);
  char v21 = *(unsigned char *)(v17 + v20);
  if ((v21 & 1) == 0) {
    *(unsigned char *)(v17 + v20) = 1;
  }
  os_unfair_lock_unlock(v18);
  swift_endAccess();
  uint64_t v22 = type metadata accessor for CurrentLocationResult(0);
  unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  v23(v16, 1, 1, v22);
  if ((v21 & 1) == 0)
  {
    sub_100029204((uint64_t)v14);
    v23(v14, 0, 1, v22);
    sub_10001EFF4((uint64_t)v14, (uint64_t)v16, &qword_1000C42C8);
  }
  uint64_t v37 = v19;
  uint64_t v24 = sub_100007830((uint64_t *)&unk_1000C4370);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v25;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v35 = v25 + 56;
  v34(v10, 1, 1, v24);
  swift_beginAccess();
  os_unfair_lock_lock(v18);
  uint64_t v27 = swift_endAccess();
  __chkstk_darwin(v27);
  *(&v31 - 2) = v17;
  *(&v31 - 1) = v28;
  uint64_t v32 = v28;
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v38, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v40);
  uint64_t v29 = (uint64_t)v36;
  AsyncStream.init(_:bufferingPolicy:_:)();
  v34((char *)v29, 0, 1, v24);
  sub_10001EFF4(v29, (uint64_t)v10, &qword_1000C4368);
  swift_beginAccess();
  os_unfair_lock_unlock(v18);
  swift_endAccess();
  uint64_t v30 = v41;
  sub_10000FA94((uint64_t)v10, v41, &qword_1000C4368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v30, 1, v24) == 1)
  {

    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v33, v30, v24);
    sub_10000FAF8((uint64_t)v10, &qword_1000C4368);
    sub_10000FAF8(v32, &qword_1000C42C8);
    swift_release();
  }
}

uint64_t sub_100029204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v17 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v1;
  aBlock[4] = sub_10002EC7C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001C5B8;
  aBlock[3] = &unk_1000B38D0;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v1;
  static DispatchQoS.unspecified.getter();
  uint64_t v18 = &_swiftEmptyArrayStorage;
  sub_10002EC9C((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007830((uint64_t *)&unk_1000C3FA0);
  sub_10000FD6C((unint64_t *)&qword_1000C3B40, (uint64_t *)&unk_1000C3FA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  uint64_t v13 = type metadata accessor for CurrentLocation(0);
  uint64_t v14 = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v17, 1, 1, v13);
  uint64_t result = type metadata accessor for CurrentLocationResult(0);
  *(unsigned char *)(v14 + *(int *)(result + 20)) = 1;
  return result;
}

id sub_100029520()
{
  uint64_t v1 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider____lazy_storage___locationManager;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider____lazy_storage___locationManager];
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v3 = sub_100029590(v0);
    uint64_t v4 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v3;
    id v5 = v3;
    sub_10002DDFC(v4);
  }
  sub_10002DE0C(v2);
  return v3;
}

id sub_100029590(char *a1)
{
  uint64_t v2 = *(void **)&a1[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue];
  id v3 = objc_allocWithZone((Class)CLLocationManager);
  id v4 = v2;
  id v5 = a1;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 initWithEffectiveBundleIdentifier:v6 delegate:v5 onQueue:v4];

  if (v7)
  {
    swift_beginAccess();
    sub_100007830(&qword_1000C40D8);
    Measurement.value.getter();
    double v9 = v8;
    swift_endAccess();
    [v7 setDistanceFilter:v9];
    [v7 setDesiredAccuracy:kCLLocationAccuracyKilometer];
  }
  else
  {
    uint64_t v10 = self;
    _StringGuts.grow(_:)(66);
    v11._uint64_t countAndFlagsBits = 0xD000000000000040;
    v11._unint64_t object = (void *)0x800000010009AA70;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0xD000000000000011;
    v12._unint64_t object = (void *)0x8000000100099510;
    String.append(_:)(v12);
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 logInfo:v13];
  }
  return v7;
}

id sub_100029760()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v29 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v28 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_100007830(&qword_1000C40E0);
  __chkstk_darwin(v7 - 8);
  double v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__isLocationUpdating;
  sub_100007830(&qword_1000C42E8);
  uint64_t v11 = swift_allocObject();
  v27[1] = type metadata accessor for CPUnfairLock();
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = 0;
  *(void *)(v11 + 16) = v12;
  *(unsigned char *)(v11 + 24) = 0;
  *(void *)&v0[v10] = v11;
  uint64_t v13 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__location;
  uint64_t v14 = type metadata accessor for CurrentLocation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  sub_100007830((uint64_t *)&unk_1000C42F0);
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = 0;
  v15[2] = v16;
  sub_10000F834((uint64_t)v9, (uint64_t)v15 + *(void *)(*v15 + 96), &qword_1000C40E0);
  *(void *)&v0[v13] = v15;
  uint64_t v17 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue;
  sub_100014314(0, (unint64_t *)&qword_1000C3F90);
  uint64_t v18 = v0;
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v28, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  uint64_t v32 = &_swiftEmptyArrayStorage;
  sub_10002EC9C((unint64_t *)&qword_1000C4300, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007830(&qword_1000C4308);
  sub_10000FD6C((unint64_t *)&qword_1000C4310, &qword_1000C4308);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v0[v17] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v19 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_stream;
  sub_100007830(&qword_1000C4318);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v20 + *(void *)(*(void *)v20 + 96);
  uint64_t v22 = type metadata accessor for CurrentLocationResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = *(void *)(*(void *)v20 + 104);
  uint64_t v24 = swift_allocObject();
  *(_DWORD *)(v24 + 16) = 0;
  *(void *)(v20 + v23) = v24;
  *(void *)(v20 + *(void *)(*(void *)v20 + 112)) = &_swiftEmptyDictionarySingleton;
  *(unsigned char *)(v20 + *(void *)(*(void *)v20 + 120)) = 0;
  *(void *)&v18[v19] = v20;
  id v25 = [self meters];
  sub_100014314(0, &qword_1000C4070);
  Measurement.init(value:unit:)();
  *(void *)&v18[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider____lazy_storage___locationManager] = 1;

  v31.receiver = v18;
  v31.super_class = ObjectType;
  return [super init];
}

id sub_100029CC8()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_100029DC4()
{
  return type metadata accessor for LocationDataProvider(0);
}

uint64_t type metadata accessor for LocationDataProvider(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C4058);
}

void sub_100029DEC()
{
  sub_100029EA4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100029EA4()
{
  if (!qword_1000C4068)
  {
    sub_100014314(255, &qword_1000C4070);
    unint64_t v0 = type metadata accessor for Measurement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000C4068);
    }
  }
}

void sub_100029F0C()
{
  if (sub_100029FC8())
  {
    unint64_t v0 = self;
    NSString v1 = String._bridgeToObjectiveC()();
    [v0 logInfo:v1];

    id v2 = sub_100029520();
    [v2 startUpdatingLocation];
  }
}

uint64_t sub_100029FC8()
{
  id v0 = sub_100029520();
  if (!v0) {
    return 0;
  }
  NSString v1 = v0;
  switch([v0 _authorizationStatus])
  {
    case 0u:
      id v2 = self;
      NSString v3 = String._bridgeToObjectiveC()();
      [v2 logInfo:v3];

      id v4 = sub_100029520();
      if (!v4) {
        goto LABEL_14;
      }
      uint64_t v5 = v4;
      NSString v6 = String._bridgeToObjectiveC()();
      [v2 logInfo:v6];

      goto LABEL_8;
    case 1u:
    case 2u:
      uint64_t v12 = self;
      NSString v11 = String._bridgeToObjectiveC()();
      [v12 logInfo:v11];
      uint64_t v7 = 0;
      goto LABEL_11;
    case 3u:
    case 4u:
      uint64_t v13 = self;
      NSString v11 = String._bridgeToObjectiveC()();
      [v13 logInfo:v11];
      uint64_t v7 = 1;
      goto LABEL_11;
    default:
      id v8 = sub_100029520();
      if (v8)
      {
        uint64_t v5 = v8;
        double v9 = self;
        NSString v10 = String._bridgeToObjectiveC()();
        [v9 logInfo:v10];

LABEL_8:
        [v5 requestWhenInUseAuthorizationWithPrompt];
        uint64_t v7 = 0;
        NSString v11 = v1;
        NSString v1 = v5;
LABEL_11:
      }
      else
      {
LABEL_14:
        uint64_t v7 = 0;
      }

      break;
  }
  return v7;
}

uint64_t sub_10002A25C(uint64_t a1)
{
  char v50 = (char *)a1;
  uint64_t v53 = type metadata accessor for CurrentLocationResult(0);
  __chkstk_darwin(v53);
  NSString v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for CurrentLocation(0);
  uint64_t v52 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007830(&qword_1000C42A8);
  __chkstk_darwin(v6 - 8);
  id v8 = (void **)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_100007830(&qword_1000C42B8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v48 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v47 = (char **)((char *)&v46 - v14);
  __chkstk_darwin(v13);
  unint64_t v51 = (void **)((char *)&v46 - v15);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char **)((char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v55 = v1;
  uint64_t v20 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue);
  void *v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if (v20)
  {
    id v49 = v5;
    uint64_t v23 = *(void *)(v55 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__isLocationUpdating);
    uint64_t v24 = (os_unfair_lock_s *)(*(void *)(v23 + 16) + 16);
    swift_beginAccess();
    swift_retain();
    os_unfair_lock_lock(v24);
    swift_beginAccess();
    *(unsigned char *)(v23 + 24) = 0;
    os_unfair_lock_unlock(v24);
    swift_endAccess();
    swift_release();
    id v25 = sub_100029520();
    [v25 stopUpdatingLocation];

    sub_10000FA94((uint64_t)v50, (uint64_t)v8, &qword_1000C42A8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_10000FAF8((uint64_t)v8, &qword_1000C42A8);
      uint64_t v26 = self;
      NSString v27 = String._bridgeToObjectiveC()();
      [v26 logInfo:v27];

      uint64_t v28 = *(void *)(v55 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_stream);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v3, 1, 1, v54);
      v3[*(int *)(v53 + 20)] = 0;
      uint64_t v29 = (os_unfair_lock_s *)(*(void *)(v28 + *(void *)(*(void *)v28 + 104)) + 16);
      swift_beginAccess();
      swift_retain();
      os_unfair_lock_lock(v29);
      swift_endAccess();
      sub_100028030((uint64_t)v3);
      swift_beginAccess();
      os_unfair_lock_unlock(v29);
      swift_endAccess();
      swift_release();
      return sub_10002DD9C((uint64_t)v3, type metadata accessor for CurrentLocationResult);
    }
    else
    {
      uint64_t v30 = *(int *)(v9 + 48);
      objc_super v31 = (char *)v51 + v30;
      uint64_t v32 = (char *)v8 + v30;
      uint64_t v33 = *v8;
      char *v51 = *v8;
      uint64_t v34 = sub_100007830(&qword_1000C40D8);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v36(v31, v32, v34);
      uint64_t v46 = (char *)v47 + *(int *)(v9 + 48);
      void *v47 = v33;
      char v50 = v3;
      uint64_t v37 = *(void (**)(void))(v35 + 16);
      v37();
      uint64_t v38 = (char *)v49 + *(int *)(v54 + 20);
      uint64_t v39 = &v48[*(int *)(v9 + 48)];
      ((void (*)(char *, char *, uint64_t))v37)(v39, v31, v34);
      v36(v38, v39, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v38, 0, 1, v34);
      uint64_t v40 = (uint64_t)v49;
      void *v49 = v33;
      uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
      id v42 = v33;
      v41(v46, v34);
      uint64_t v43 = *(void *)(v55 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_stream);
      uint64_t v44 = (uint64_t)v50;
      sub_10002EB6C(v40, (uint64_t)v50, type metadata accessor for CurrentLocation);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v44, 0, 1, v54);
      *(unsigned char *)(v44 + *(int *)(v53 + 20)) = 2;
      uint64_t v45 = (os_unfair_lock_s *)(*(void *)(v43 + *(void *)(*(void *)v43 + 104)) + 16);
      swift_beginAccess();
      swift_retain();
      os_unfair_lock_lock(v45);
      swift_endAccess();
      sub_100028030(v44);
      swift_beginAccess();
      os_unfair_lock_unlock(v45);
      swift_endAccess();
      swift_release();
      sub_10002DD9C(v44, type metadata accessor for CurrentLocationResult);
      sub_10002DD9C(v40, type metadata accessor for CurrentLocation);
      return sub_10000FAF8((uint64_t)v51, &qword_1000C42B8);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10002A9B4(void *a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100007830(&qword_1000C42A8);
  __chkstk_darwin(v6 - 8);
  id v8 = (void *)((char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v3 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__isLocationUpdating);
    uint64_t v16 = (os_unfair_lock_s *)(*(void *)(v15 + 16) + 16);
    swift_beginAccess();
    swift_retain();
    os_unfair_lock_lock(v16);
    swift_beginAccess();
    *(unsigned char *)(v15 + 24) = 1;
    os_unfair_lock_unlock(v16);
    swift_endAccess();
    swift_release();
    if (!(a2 >> 62))
    {
      uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v17) {
        goto LABEL_4;
      }
LABEL_15:
      swift_bridgeObjectRelease();
      uint64_t v29 = self;
      NSString v30 = String._bridgeToObjectiveC()();
      [v29 logInfo:v30];

      uint64_t v31 = sub_100007830(&qword_1000C42B8);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v8, 1, 1, v31);
      sub_10002A25C((uint64_t)v8);
LABEL_16:
      sub_10000FAF8((uint64_t)v8, &qword_1000C42A8);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  if (!v17) {
    goto LABEL_15;
  }
LABEL_4:
  unint64_t v18 = v17 - 1;
  if (__OFSUB__(v17, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_18:
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (([a1 _limitsPrecision] & 1) == 0)
    {
      [v20 horizontalAccuracy];
      if (v21 > 1500.0)
      {

        return;
      }
    }
    uint64_t v22 = self;
    unint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v33 = 0xD000000000000025;
    unint64_t v34 = 0x800000010009AB20;
    v32[1] = v20;
    sub_100014314(0, &qword_1000C42E0);
    id v23 = v20;
    v24._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 logInfo:v25];

    uint64_t v26 = sub_100007830(&qword_1000C42B8);
    void *v8 = v23;
    id v27 = v23;
    [v27 horizontalAccuracy];
    id v28 = [self meters];
    sub_100014314(0, &qword_1000C4070);
    Measurement.init(value:unit:)();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v8, 0, 1, v26);
    sub_10002A25C((uint64_t)v8);

    goto LABEL_16;
  }
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v18 < *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v19 = *(id *)(a2 + 8 * v18 + 32);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t sub_10002AFAC(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue);
  void *v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    uint64_t v10 = self;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 logInfo:v11];

    uint64_t result = sub_100029FC8();
    if (result)
    {
      uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__isLocationUpdating);
      uint64_t v13 = (os_unfair_lock_s *)(*(void *)(v12 + 16) + 16);
      swift_beginAccess();
      swift_retain();
      os_unfair_lock_lock(v13);
      swift_beginAccess();
      char v14 = *(unsigned char *)(v12 + 24);
      os_unfair_lock_unlock(v13);
      swift_endAccess();
      uint64_t result = swift_release();
      if ((v14 & 1) == 0) {
        return (uint64_t)[a1 startUpdatingLocation];
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_10002B1F8(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CurrentLocation(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100007830(&qword_1000C40E0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      NSString v11 = *a2;
      *(void *)a1 = *a2;
      uint64_t v12 = *(int *)(v7 + 20);
      uint64_t v13 = &a1[v12];
      char v14 = (char *)a2 + v12;
      uint64_t v15 = v11;
      uint64_t v16 = sub_100007830(&qword_1000C40D8);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      {
        uint64_t v18 = type metadata accessor for LocationAccuracy(0);
        memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v14, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    a1[*(int *)(a3 + 20)] = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t type metadata accessor for CurrentLocation(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C4258);
}

uint64_t type metadata accessor for LocationAccuracy(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C41F0);
}

uint64_t sub_10002B484(id *a1)
{
  uint64_t v2 = type metadata accessor for CurrentLocation(0);
  uint64_t result = (*(uint64_t (**)(id *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {

    uint64_t v4 = (char *)a1 + *(int *)(v2 + 20);
    uint64_t v5 = sub_100007830(&qword_1000C40D8);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v5);
    if (!result)
    {
      uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
      return v6(v4, v5);
    }
  }
  return result;
}

void **sub_10002B598(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CurrentLocation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007830(&qword_1000C40E0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v10 = *(int *)(v6 + 20);
    NSString v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    id v13 = v9;
    uint64_t v14 = sub_100007830(&qword_1000C40D8);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
    {
      uint64_t v16 = type metadata accessor for LocationAccuracy(0);
      memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v11, v12, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
    }
    (*(void (**)(void **, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void **sub_10002B794(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CurrentLocation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v22 = *a2;
      id v23 = *a1;
      *a1 = *a2;
      id v24 = v22;

      uint64_t v25 = *(int *)(v6 + 20);
      uint64_t v26 = (char *)a1 + v25;
      id v27 = (char *)a2 + v25;
      uint64_t v28 = sub_100007830(&qword_1000C40D8);
      uint64_t v29 = *(void *)(v28 - 8);
      NSString v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
      int v31 = v30(v26, 1, v28);
      int v32 = v30(v27, 1, v28);
      if (v31)
      {
        if (!v32)
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v32)
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
          goto LABEL_14;
        }
        (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
      }
      size_t v19 = *(void *)(*(void *)(type metadata accessor for LocationAccuracy(0) - 8) + 64);
      uint64_t v20 = (void **)v26;
      double v21 = (void **)v27;
      goto LABEL_8;
    }
    sub_10002DD9C((uint64_t)a1, type metadata accessor for CurrentLocation);
LABEL_7:
    size_t v19 = *(void *)(*(void *)(sub_100007830(&qword_1000C40E0) - 8) + 64);
    uint64_t v20 = a1;
    double v21 = a2;
LABEL_8:
    memcpy(v20, v21, v19);
    goto LABEL_14;
  }
  if (v10) {
    goto LABEL_7;
  }
  NSString v11 = *a2;
  *a1 = *a2;
  uint64_t v12 = *(int *)(v6 + 20);
  id v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  id v15 = v11;
  uint64_t v16 = sub_100007830(&qword_1000C40D8);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
  {
    uint64_t v18 = type metadata accessor for LocationAccuracy(0);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v14, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  (*(void (**)(void **, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_14:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_10002BB0C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CurrentLocation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007830(&qword_1000C40E0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v9 = *(int *)(v6 + 20);
    int v10 = (char *)a1 + v9;
    NSString v11 = (char *)a2 + v9;
    uint64_t v12 = sub_100007830(&qword_1000C40D8);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = type metadata accessor for LocationAccuracy(0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void **sub_10002BD04(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CurrentLocation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v20 = *a1;
      *a1 = *a2;

      uint64_t v21 = *(int *)(v6 + 20);
      uint64_t v22 = (char *)a1 + v21;
      id v23 = (char *)a2 + v21;
      uint64_t v24 = sub_100007830(&qword_1000C40D8);
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
      int v27 = v26(v22, 1, v24);
      int v28 = v26(v23, 1, v24);
      if (v27)
      {
        if (!v28)
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v28)
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
          goto LABEL_14;
        }
        (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
      }
      size_t v17 = *(void *)(*(void *)(type metadata accessor for LocationAccuracy(0) - 8) + 64);
      uint64_t v18 = (void **)v22;
      size_t v19 = v23;
      goto LABEL_8;
    }
    sub_10002DD9C((uint64_t)a1, type metadata accessor for CurrentLocation);
LABEL_7:
    size_t v17 = *(void *)(*(void *)(sub_100007830(&qword_1000C40E0) - 8) + 64);
    uint64_t v18 = a1;
    size_t v19 = a2;
LABEL_8:
    memcpy(v18, v19, v17);
    goto LABEL_14;
  }
  if (v10) {
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v11 = *(int *)(v6 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_100007830(&qword_1000C40D8);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = type metadata accessor for LocationAccuracy(0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  (*(void (**)(void **, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_14:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10002C074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002C088);
}

uint64_t sub_10002C088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C40E0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 5) {
      return v10 - 4;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10002C148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002C15C);
}

uint64_t sub_10002C15C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100007830(&qword_1000C40E0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  }
  return result;
}

uint64_t type metadata accessor for CurrentLocationResult(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C4140);
}

void sub_10002C23C()
{
  sub_10002C2D0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10002C2D0()
{
  if (!qword_1000C4150)
  {
    type metadata accessor for CurrentLocation(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000C4150);
    }
  }
}

uint64_t *sub_10002C328(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_100007830(&qword_1000C40D8);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10002C478(uint64_t a1)
{
  uint64_t v2 = sub_100007830(&qword_1000C40D8);
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_10002C54C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C40D8);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10002C660(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C40D8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_10002C7D8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C40D8);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10002C8EC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C40D8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10002CA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002CA78);
}

uint64_t sub_10002CA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C40D8);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10002CAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002CAFC);
}

uint64_t sub_10002CAFC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_100007830(&qword_1000C40D8);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_10002CB80(uint64_t a1)
{
  uint64_t v2 = sub_100007830(&qword_1000C40D8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_10002CBEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C40D8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

void sub_10002CC60()
{
  sub_100029EA4();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataSinglePayload();
  }
}

void **sub_10002CCD8(void **a1, void **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = (char *)*a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (void **)&v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    int v9 = v5;
    uint64_t v10 = sub_100007830(&qword_1000C40D8);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      uint64_t v12 = type metadata accessor for LocationAccuracy(0);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v7, v8, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
  }
  return a1;
}

uint64_t sub_10002CE38(id *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_100007830(&qword_1000C40D8);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void **sub_10002CF0C(void **a1, void **a2, uint64_t a3)
{
  int v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  id v8 = v4;
  uint64_t v9 = sub_100007830(&qword_1000C40D8);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
  {
    uint64_t v11 = type metadata accessor for LocationAccuracy(0);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v6, v7, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

void **sub_10002D024(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_100007830(&qword_1000C40D8);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = type metadata accessor for LocationAccuracy(0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

void *sub_10002D1B0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_100007830(&qword_1000C40D8);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = type metadata accessor for LocationAccuracy(0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void **sub_10002D2C4(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100007830(&qword_1000C40D8);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for LocationAccuracy(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_10002D44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002D460);
}

uint64_t sub_10002D460(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for LocationAccuracy(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10002D510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002D524);
}

void *sub_10002D524(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for LocationAccuracy(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10002D5CC()
{
  uint64_t result = type metadata accessor for LocationAccuracy(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10002D668(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C40D8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LocationAccuracy(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007830(&qword_1000C42A0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  int v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_10002EB6C(a1, (uint64_t)v14, type metadata accessor for LocationAccuracy);
  sub_10002EB6C(a2, v15, type metadata accessor for LocationAccuracy);
  int v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v14, 1, v4) != 1)
  {
    sub_10002EB6C((uint64_t)v14, (uint64_t)v10, type metadata accessor for LocationAccuracy);
    if (v16(v15, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      sub_100014314(0, &qword_1000C4070);
      char v17 = static Measurement.== infix<A, B>(_:_:)();
      uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v7, v4);
      v18(v10, v4);
      sub_10002DD9C((uint64_t)v14, type metadata accessor for LocationAccuracy);
      return v17 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v16(v15, 1, v4) != 1)
  {
LABEL_6:
    sub_10000FAF8((uint64_t)v14, &qword_1000C42A0);
    char v17 = 0;
    return v17 & 1;
  }
  sub_10002DD9C((uint64_t)v14, type metadata accessor for LocationAccuracy);
  char v17 = 1;
  return v17 & 1;
}

BOOL sub_10002D970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CurrentLocation(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007830(&qword_1000C4290);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007830(&qword_1000C40E0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v31 = (uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v28 - v16;
  __chkstk_darwin(v15);
  size_t v19 = (char *)&v28 - v18;
  uint64_t v29 = a1;
  sub_10000FA94(a1, (uint64_t)&v28 - v18, &qword_1000C40E0);
  uint64_t v30 = a2;
  sub_10000FA94(a2, (uint64_t)v17, &qword_1000C40E0);
  uint64_t v20 = (uint64_t)&v11[*(int *)(v9 + 56)];
  sub_10000FA94((uint64_t)v19, (uint64_t)v11, &qword_1000C40E0);
  sub_10000FA94((uint64_t)v17, v20, &qword_1000C40E0);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v11, 1, v4) == 1)
  {
    sub_10000FAF8((uint64_t)v17, &qword_1000C40E0);
    sub_10000FAF8((uint64_t)v19, &qword_1000C40E0);
    if (v21(v20, 1, v4) == 1)
    {
      sub_10000FAF8((uint64_t)v11, &qword_1000C40E0);
LABEL_4:
      uint64_t v22 = type metadata accessor for CurrentLocationResult(0);
      return *(unsigned __int8 *)(v29 + *(int *)(v22 + 20)) == *(unsigned __int8 *)(v30 + *(int *)(v22 + 20));
    }
    goto LABEL_7;
  }
  uint64_t v24 = v31;
  sub_10000FA94((uint64_t)v11, v31, &qword_1000C40E0);
  if (v21(v20, 1, v4) == 1)
  {
    sub_10000FAF8((uint64_t)v17, &qword_1000C40E0);
    sub_10000FAF8((uint64_t)v19, &qword_1000C40E0);
    sub_10002DD9C(v24, type metadata accessor for CurrentLocation);
LABEL_7:
    uint64_t v25 = &qword_1000C4290;
    uint64_t v26 = (uint64_t)v11;
LABEL_8:
    sub_10000FAF8(v26, v25);
    return 0;
  }
  sub_10002EBD4(v20, (uint64_t)v7, type metadata accessor for CurrentLocation);
  sub_100014314(0, &qword_1000C4298);
  if ((static NSObject.== infix(_:_:)() & 1) == 0)
  {
    sub_10002DD9C((uint64_t)v7, type metadata accessor for CurrentLocation);
    sub_10000FAF8((uint64_t)v17, &qword_1000C40E0);
    sub_10000FAF8((uint64_t)v19, &qword_1000C40E0);
    sub_10002DD9C(v24, type metadata accessor for CurrentLocation);
    uint64_t v26 = (uint64_t)v11;
    uint64_t v25 = &qword_1000C40E0;
    goto LABEL_8;
  }
  char v27 = sub_10002D668(v24 + *(int *)(v4 + 20), (uint64_t)&v7[*(int *)(v4 + 20)]);
  sub_10002DD9C((uint64_t)v7, type metadata accessor for CurrentLocation);
  sub_10000FAF8((uint64_t)v17, &qword_1000C40E0);
  sub_10000FAF8((uint64_t)v19, &qword_1000C40E0);
  sub_10002DD9C(v24, type metadata accessor for CurrentLocation);
  sub_10000FAF8((uint64_t)v11, &qword_1000C40E0);
  if (v27) {
    goto LABEL_4;
  }
  return 0;
}

uint64_t sub_10002DD9C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10002DDFC(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_10002DE0C(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_10002DE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = sub_100007830(&qword_1000C42D0);
  uint64_t v57 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = &qword_1000C42C8;
  uint64_t v6 = sub_100007830(&qword_1000C42C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for CurrentLocationResult(0);
  uint64_t v52 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v55 - 8);
  uint64_t v9 = __chkstk_darwin(v55);
  uint64_t v46 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v45 = (uint64_t)&v41 - v11;
  uint64_t v12 = sub_100007830(&qword_1000C42D8);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v54 = (char *)&v41 - v17;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v49 = a1 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v22 = a2 + *(void *)(*(void *)a2 + 96);
  uint64_t v56 = a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_beginAccess();
  uint64_t v24 = 0;
  unint64_t v25 = v19 + 63;
  uint64_t v26 = v12;
  v52 += 6;
  uint64_t v53 = v13 + 32;
  id v42 = (void (**)(char *, uint64_t))(v57 + 8);
  uint64_t v43 = v8;
  int64_t v50 = v25 >> 6;
  unint64_t v51 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  uint64_t v44 = v13;
  while (1)
  {
    if (v21)
    {
      unint64_t v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      uint64_t v57 = v24;
      unint64_t v28 = v27 | (v24 << 6);
      goto LABEL_24;
    }
    int64_t v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v50) {
      return swift_release();
    }
    unint64_t v30 = *(void *)(v49 + 8 * v29);
    int64_t v31 = v24 + 1;
    if (!v30)
    {
      int64_t v31 = v24 + 2;
      if (v24 + 2 >= v50) {
        return swift_release();
      }
      unint64_t v30 = *(void *)(v49 + 8 * v31);
      if (!v30)
      {
        int64_t v31 = v24 + 3;
        if (v24 + 3 >= v50) {
          return swift_release();
        }
        unint64_t v30 = *(void *)(v49 + 8 * v31);
        if (!v30)
        {
          int64_t v31 = v24 + 4;
          if (v24 + 4 >= v50) {
            return swift_release();
          }
          unint64_t v30 = *(void *)(v49 + 8 * v31);
          if (!v30) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v21 = (v30 - 1) & v30;
    uint64_t v57 = v31;
    unint64_t v28 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_24:
    unint64_t v33 = v54;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v54, *(void *)(v56 + 56) + *(void *)(v13 + 72) * v28, v26);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v33, v26);
    sub_10000FA94(v22, (uint64_t)v8, v5);
    if ((*v52)(v8, 1, v55) == 1)
    {
      sub_10000FAF8((uint64_t)v8, v5);
    }
    else
    {
      uint64_t v34 = (uint64_t)v8;
      uint64_t v35 = v45;
      sub_10002EBD4(v34, v45, type metadata accessor for CurrentLocationResult);
      sub_10002EB6C(v35, v46, type metadata accessor for CurrentLocationResult);
      uint64_t v36 = v22;
      uint64_t v37 = v5;
      uint64_t v38 = v47;
      AsyncStream.Continuation.yield(_:)();
      uint64_t v39 = v38;
      uint64_t v5 = v37;
      uint64_t v22 = v36;
      (*v42)(v39, v48);
      uint64_t v40 = v35;
      uint64_t v8 = v43;
      uint64_t v13 = v44;
      sub_10002DD9C(v40, type metadata accessor for CurrentLocationResult);
    }
    uint64_t result = (*v51)(v16, v26);
    uint64_t v24 = v57;
  }
  uint64_t v32 = v24 + 5;
  if (v24 + 5 >= v50) {
    return swift_release();
  }
  unint64_t v30 = *(void *)(v49 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v24 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v31 >= v50) {
      return swift_release();
    }
    unint64_t v30 = *(void *)(v49 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10002E394(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = sub_100007830(&qword_1000C4350);
  uint64_t v56 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = &qword_1000C4340;
  uint64_t v6 = sub_100007830(&qword_1000C4340);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100007830(&qword_1000C4330);
  uint64_t v55 = *(void *)(v53 - 8);
  uint64_t v9 = __chkstk_darwin(v53);
  uint64_t v45 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v44 = (uint64_t)&v40 - v11;
  uint64_t v12 = sub_100007830(&qword_1000C4358);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v52 = (char *)&v40 - v17;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v48 = a1 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v22 = a2 + *(void *)(*(void *)a2 + 96);
  uint64_t v54 = a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_beginAccess();
  uint64_t v24 = 0;
  unint64_t v25 = v19 + 63;
  unint64_t v26 = v21;
  unint64_t v51 = (unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
  uint64_t v41 = (void (**)(char *, uint64_t))(v56 + 8);
  uint64_t v42 = v13 + 32;
  int64_t v49 = v25 >> 6;
  int64_t v50 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  uint64_t v43 = v13;
  while (1)
  {
    if (v26)
    {
      uint64_t v55 = (v26 - 1) & v26;
      uint64_t v56 = v24;
      unint64_t v29 = __clz(__rbit64(v26)) | (v24 << 6);
      goto LABEL_24;
    }
    int64_t v30 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v49) {
      return swift_release();
    }
    unint64_t v31 = *(void *)(v48 + 8 * v30);
    int64_t v32 = v24 + 1;
    if (!v31)
    {
      int64_t v32 = v24 + 2;
      if (v24 + 2 >= v49) {
        return swift_release();
      }
      unint64_t v31 = *(void *)(v48 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = v24 + 3;
        if (v24 + 3 >= v49) {
          return swift_release();
        }
        unint64_t v31 = *(void *)(v48 + 8 * v32);
        if (!v31)
        {
          int64_t v32 = v24 + 4;
          if (v24 + 4 >= v49) {
            return swift_release();
          }
          unint64_t v31 = *(void *)(v48 + 8 * v32);
          if (!v31) {
            break;
          }
        }
      }
    }
LABEL_23:
    uint64_t v55 = (v31 - 1) & v31;
    uint64_t v56 = v32;
    unint64_t v29 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_24:
    uint64_t v34 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v52, *(void *)(v54 + 56) + *(void *)(v13 + 72) * v29, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v34, v12);
    sub_10000FA94(v22, (uint64_t)v8, v5);
    if ((*v51)(v8, 1, v53) == 1)
    {
      uint64_t v27 = (uint64_t)v8;
      unint64_t v28 = v5;
    }
    else
    {
      uint64_t v35 = v44;
      sub_10000F834((uint64_t)v8, v44, &qword_1000C4330);
      sub_10000FA94(v35, v45, &qword_1000C4330);
      uint64_t v36 = v22;
      uint64_t v37 = v5;
      uint64_t v38 = v46;
      AsyncStream.Continuation.yield(_:)();
      uint64_t v39 = v38;
      uint64_t v5 = v37;
      uint64_t v22 = v36;
      (*v41)(v39, v47);
      uint64_t v27 = v35;
      uint64_t v13 = v43;
      unint64_t v28 = &qword_1000C4330;
    }
    sub_10000FAF8(v27, v28);
    unint64_t v26 = v55;
    uint64_t result = (*v50)(v16, v12);
    uint64_t v24 = v56;
  }
  uint64_t v33 = v24 + 5;
  if (v24 + 5 >= v49) {
    return swift_release();
  }
  unint64_t v31 = *(void *)(v48 + 8 * v33);
  if (v31)
  {
    int64_t v32 = v24 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v49) {
      return swift_release();
    }
    unint64_t v31 = *(void *)(v48 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10002E8F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007830(&qword_1000C42A8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (void *)((char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    uint64_t v14 = self;
    unint64_t v19 = 0;
    unint64_t v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0xD000000000000021;
    unint64_t v20 = 0x800000010009AAC0;
    v18[1] = a1;
    swift_errorRetain();
    sub_100007830(&qword_1000C42B0);
    v15._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 logInfo:v16];

    uint64_t v17 = sub_100007830(&qword_1000C42B8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 1, 1, v17);
    sub_10002A25C((uint64_t)v6);
    return sub_10000FAF8((uint64_t)v6, &qword_1000C42A8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002EB6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002EBD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002EC3C(uint64_t a1)
{
  return sub_1000403A4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10002EC44()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10002EC7C()
{
}

uint64_t sub_10002EC84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002EC94()
{
  return swift_release();
}

uint64_t sub_10002EC9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocationStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002EE40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationStatus()
{
  return &type metadata for LocationStatus;
}

unint64_t sub_10002EE7C()
{
  unint64_t result = qword_1000C4380;
  if (!qword_1000C4380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4380);
  }
  return result;
}

char *sub_10002EED0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_observerId];
  uint64_t v10 = v2;
  UUID.init()();
  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *uint64_t v9 = v11;
  v9[1] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation;
  type metadata accessor for TimerAnimationCountdown(0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  uint64_t v16 = v15 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  uint64_t v17 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = (void *)(v15 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *uint64_t v18 = 0;
  v18[1] = 0xE000000000000000;
  *(void *)&v10[v14] = v15;
  unint64_t v19 = &v10[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
  *(void *)unint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_elementSize] = 0x4040000000000000;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_topMargin] = 0x4010000000000000;

  unint64_t v20 = (objc_class *)type metadata accessor for TimerCompressedController();
  v44.receiver = v10;
  v44.super_class = v20;
  unint64_t v21 = [(char *)[super init]];
  uint64_t v22 = &v21[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
  *(void *)uint64_t v22 = a1;
  *((void *)v22 + 1) = a2;
  id v23 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = *((void *)v22 + 1);
  if (v24)
  {
    uint64_t v25 = *(void *)v22;
    uint64_t v26 = qword_1000C2C70;
    swift_bridgeObjectRetain();
    if (v26 != -1) {
      swift_once();
    }
    sub_1000310E8(&qword_1000C43E8, v27, (void (*)(uint64_t))type metadata accessor for TimerCompressedController);
    uint64_t v42 = v25;
    uint64_t v43 = v24;
    unint64_t v28 = v23;
    AnyHashable.init<A>(_:)();
    dispatch thunk of DataStore.registerObserver(_:for:)();

    sub_10001EC9C((uint64_t)&v40);
  }
  unint64_t v29 = self;
  uint64_t v40 = 0;
  unint64_t v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  id v30 = [v23 description];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v33 = v32;
  swift_bridgeObjectRelease();

  uint64_t v40 = v31;
  unint64_t v41 = v33;
  v34._unint64_t object = (void *)0x800000010009AE10;
  v34._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v34);
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  sub_100007830(&qword_1000C3750);
  v35._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 32;
  v36._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 logInfo:v37];

  sub_10002F744();
  return v23;
}

id sub_10002F2A0(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)&v1[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_observerId];
  int v8 = v1;
  UUID.init()();
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *uint64_t v7 = v9;
  v7[1] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation;
  type metadata accessor for TimerAnimationCountdown(0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  uint64_t v14 = v13 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  uint64_t v15 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = (void *)(v13 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *uint64_t v16 = 0;
  v16[1] = 0xE000000000000000;
  *(void *)&v8[v12] = v13;
  uint64_t v17 = &v8[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  *(void *)&v8[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_elementSize] = 0x4040000000000000;
  *(void *)&v8[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_topMargin] = 0x4010000000000000;

  uint64_t v18 = (objc_class *)type metadata accessor for TimerCompressedController();
  v21.receiver = v8;
  v21.super_class = v18;
  [super initWithCoder:a1];

  return v19;
}

id sub_10002F4B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_observerId];
  uint64_t v11 = v3;
  UUID.init()();
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *uint64_t v10 = v12;
  v10[1] = v14;
  uint64_t v15 = OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation;
  type metadata accessor for TimerAnimationCountdown(0);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  uint64_t v17 = v16 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  uint64_t v18 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  id v19 = (void *)(v16 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  void *v19 = 0;
  v19[1] = 0xE000000000000000;
  *(void *)&v11[v15] = v16;
  unint64_t v20 = &v11[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
  *(void *)unint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_elementSize] = 0x4040000000000000;
  *(void *)&v11[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_topMargin] = 0x4010000000000000;

  if (a2)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v21 = 0;
  }
  uint64_t v22 = (objc_class *)type metadata accessor for TimerCompressedController();
  v25.receiver = v11;
  v25.super_class = v22;
  id v23 = [super initWithNibName:v21 bundle:a3];

  return v23;
}

void sub_10002F744()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v62 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation];
  id v16 = sub_100085090(1u);
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v65 = v14;
    uint64_t v66 = v15;
    uint64_t v67 = v12;
    NSString v68 = (NSString)v11;
    [v16 setAccessibilityIgnoresInvertColors:1];
    uint64_t v18 = self;
    uint64_t v71 = 0;
    unint64_t v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    id v19 = [v1 description];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();

    uint64_t v71 = v20;
    unint64_t v72 = v22;
    v23._unint64_t object = (void *)0x800000010009ADC0;
    v23._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v23);
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 logInfo:v24];

    id v25 = [v1 view];
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v63 = v8;
      uint64_t v64 = v5;
      [v25 addSubview:v17];

      [v17 setTranslatesAutoresizingMaskIntoConstraints:0];
      sub_100007830((uint64_t *)&unk_1000C66F0);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_100095580;
      id v28 = [v17 topAnchor];
      id v29 = [v1 view];
      if (v29)
      {
        id v30 = v29;
        id v31 = [v29 topAnchor];

        id v32 = [v28 constraintEqualToAnchor:v31 constant:4.0];
        *(void *)(v27 + 32) = v32;
        id v33 = [v17 widthAnchor];
        id v34 = [v33 constraintEqualToConstant:32.0];

        *(void *)(v27 + 40) = v34;
        id v35 = [v17 heightAnchor];
        id v36 = [v17 widthAnchor];
        id v37 = [v35 constraintEqualToAnchor:v36];

        *(void *)(v27 + 48) = v37;
        id v38 = [v17 centerXAnchor];
        id v39 = [v1 view];
        if (v39)
        {
          uint64_t v40 = v39;
          unint64_t v41 = self;
          id v42 = [v40 centerXAnchor];

          id v43 = [v38 constraintEqualToAnchor:v42];
          *(void *)(v27 + 56) = v43;
          uint64_t v71 = v27;
          specialized Array._endMutation()();
          sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v41 activateConstraints:isa];

          uint64_t v45 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8];
          if (v45)
          {
            uint64_t v46 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
            uint64_t v47 = qword_1000C2C70;
            swift_bridgeObjectRetain();
            uint64_t v48 = (uint64_t)v64;
            uint64_t v49 = (uint64_t)v65;
            uint64_t v51 = v67;
            NSString v50 = v68;
            uint64_t v52 = v66;
            if (v47 != -1) {
              swift_once();
            }
            uint64_t v69 = v46;
            uint64_t v70 = v45;
            AnyHashable.init<A>(_:)();
            dispatch thunk of DataStore.getEntry(for:)();
            sub_10001EC9C((uint64_t)&v71);
          }
          else
          {
            uint64_t v51 = v67;
            NSString v50 = v68;
            (*(void (**)(char *, uint64_t, uint64_t, NSString))(v67 + 56))(v10, 1, 1, v68);

            uint64_t v48 = (uint64_t)v64;
            uint64_t v49 = (uint64_t)v65;
            uint64_t v52 = v66;
          }
          if ((*(unsigned int (**)(char *, uint64_t, NSString))(v51 + 48))(v10, 1, v50) == 1)
          {
            sub_100020180((uint64_t)v10);
          }
          else
          {
            sub_10001EC10((uint64_t)v10, v49);
            uint64_t v60 = (uint64_t)v63;
            sub_10001EC10(v49, (uint64_t)v63);
            (*(void (**)(uint64_t, void, uint64_t, NSString))(v51 + 56))(v60, 0, 1, v50);
            sub_100030E88(v60, v48);
            uint64_t v61 = v52 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
            swift_beginAccess();
            sub_100030EF0(v48, v61);
            swift_endAccess();
          }
          return;
        }
LABEL_18:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v53 = self;
  uint64_t v71 = 0;
  unint64_t v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  id v54 = [v1 description];
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v57 = v56;
  swift_bridgeObjectRelease();

  uint64_t v71 = v55;
  unint64_t v72 = v57;
  v58._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v58._unint64_t object = (void *)0x800000010009AD90;
  String.append(_:)(v58);
  NSString v68 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v53 logInfo:v68];
  uint64_t v59 = v68;
}

uint64_t sub_10002FE64(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (objc_class *)type metadata accessor for TimerCompressedController();
  v18.receiver = v2;
  v18.super_class = v11;
  [super viewWillAppear:a1 & 1];
  uint64_t v12 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8];
  if (v12)
  {
    uint64_t v13 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
    uint64_t v14 = qword_1000C2C70;
    swift_bridgeObjectRetain();
    if (v14 != -1) {
      swift_once();
    }
    v16[1] = v13;
    void v16[2] = v12;
    AnyHashable.init<A>(_:)();
    dispatch thunk of DataStore.getEntry(for:)();
    sub_10001EC9C((uint64_t)v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      sub_10001EC10((uint64_t)v6, (uint64_t)v10);
      sub_100030950((uint64_t)v10);
      return sub_1000201E0((uint64_t)v10);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  return sub_100020180((uint64_t)v6);
}

void sub_1000300D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v78 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v76 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for DispatchQoS();
  uint64_t v75 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  id v74 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = __chkstk_darwin(v13);
  id v16 = (char *)&v69 - v15;
  __chkstk_darwin(v14);
  objc_super v18 = (char *)&v69 - v17;
  sub_10000F9F0(a1, (uint64_t)&aBlock);
  sub_100007830(&qword_1000C3F78);
  if (swift_dynamicCast())
  {
    uint64_t v71 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v72 = v16;
    uint64_t v70 = v4;
    sub_1000201E0((uint64_t)v18);
    id v19 = self;
    aBlock = 0;
    unint64_t v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    id v20 = [v2 description];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v23 = v22;

    v24._uint64_t countAndFlagsBits = v21;
    v24._unint64_t object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 0xD000000000000033;
    v25._unint64_t object = (void *)0x800000010009AD10;
    String.append(_:)(v25);
    id v26 = [v2 description];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v29 = v28;

    v30._uint64_t countAndFlagsBits = v27;
    v30._unint64_t object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v73 = v19;
    [v19 logInfo:v31];

    uint64_t v32 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8];
    if (v32)
    {
      uint64_t v33 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
      uint64_t v34 = qword_1000C2C70;
      swift_bridgeObjectRetain();
      if (v34 != -1) {
        swift_once();
      }
      uint64_t v85 = v33;
      uint64_t v86 = v32;
      AnyHashable.init<A>(_:)();
      dispatch thunk of DataStore.getEntry(for:)();
      sub_10001EC9C((uint64_t)&aBlock);
      int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
      uint64_t v36 = (uint64_t)v71;
      uint64_t v37 = (uint64_t)v72;
      if (v35 != 1)
      {
        sub_10001EC10((uint64_t)v9, (uint64_t)v72);
        aBlock = 0;
        unint64_t v80 = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        id v38 = [v2 description];
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;
        swift_bridgeObjectRelease();

        aBlock = (void **)v39;
        unint64_t v80 = v41;
        v42._unint64_t object = (void *)0x800000010009AD70;
        v42._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v42);
        NSString v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v73 logInfo:v43];

        sub_100014314(0, (unint64_t *)&qword_1000C3F90);
        objc_super v44 = (void *)static OS_dispatch_queue.main.getter();
        sub_100030E24(v37, v36);
        unint64_t v45 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        uint64_t v46 = swift_allocObject();
        *(void *)(v46 + 16) = v2;
        sub_10001EC10(v36, v46 + v45);
        id v83 = sub_10003106C;
        uint64_t v84 = v46;
        aBlock = _NSConcreteStackBlock;
        unint64_t v80 = 1107296256;
        uint64_t v81 = sub_10001C5B8;
        char v82 = &unk_1000B39B0;
        uint64_t v47 = _Block_copy(&aBlock);
        uint64_t v48 = v2;
        swift_release();
        uint64_t v49 = v74;
        static DispatchQoS.unspecified.getter();
        aBlock = (void **)&_swiftEmptyArrayStorage;
        sub_1000310E8((unint64_t *)&qword_1000C3B30, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100007830((uint64_t *)&unk_1000C3FA0);
        sub_10001DF74();
        NSString v50 = v76;
        uint64_t v51 = v70;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v47);

        (*(void (**)(char *, uint64_t))(v78 + 8))(v50, v51);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v49, v77);
        sub_1000201E0(v37);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    }
    sub_100020180((uint64_t)v9);
    aBlock = 0;
    unint64_t v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    id v64 = [v2 description];
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v67 = v66;
    swift_bridgeObjectRelease();

    aBlock = (void **)v65;
    unint64_t v80 = v67;
    v68._uint64_t countAndFlagsBits = 0xD000000000000011;
    v68._unint64_t object = (void *)0x800000010009AD50;
    String.append(_:)(v68);
    NSString v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v73 logInfo:v63];
  }
  else
  {
    uint64_t v52 = self;
    aBlock = 0;
    unint64_t v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    id v53 = [v2 description];
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v56 = v55;
    swift_bridgeObjectRelease();

    aBlock = (void **)v54;
    unint64_t v80 = v56;
    v57._uint64_t countAndFlagsBits = 0xD000000000000027;
    v57._unint64_t object = (void *)0x800000010009ACE0;
    String.append(_:)(v57);
    id v58 = [v2 description];
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v61 = v60;

    v62._uint64_t countAndFlagsBits = v59;
    v62._unint64_t object = v61;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    NSString v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v52 logInfo:v63];
  }
}

void sub_100030950(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007830(&qword_1000C5390);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v10 = self;
  id v11 = [v1 description];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  uint64_t v35 = v12;
  unint64_t v36 = v14;
  v15._uint64_t countAndFlagsBits = 0x4C65746164707520;
  v15._unint64_t object = (void *)0xED000074756F7961;
  String.append(_:)(v15);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 logInfo:v16];

  uint64_t v17 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation];
  sub_100030E24(a1, (uint64_t)v9);
  uint64_t v18 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v9, 0, 1, v18);
  sub_100030E88((uint64_t)v9, (uint64_t)v7);
  uint64_t v19 = v17 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess();
  sub_100030EF0((uint64_t)v7, v19);
  swift_endAccess();
  if (*(unsigned char *)(a1 + *(int *)(v18 + 28)) == 1)
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    id v20 = [v2 description];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v23 = v22;

    v24._uint64_t countAndFlagsBits = v21;
    v24._unint64_t object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._unint64_t object = (void *)0x800000010009ACA0;
    v25._uint64_t countAndFlagsBits = 0xD000000000000033;
    String.append(_:)(v25);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 logInfo:v26];

    sub_100085CD4();
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    id v27 = [v2 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v30 = v29;

    v31._uint64_t countAndFlagsBits = v28;
    v31._unint64_t object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 0xD000000000000034;
    v32._unint64_t object = (void *)0x800000010009AC60;
    String.append(_:)(v32);
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 logInfo:v33];

    sub_1000855F0();
  }
}

id sub_100030CDC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimerCompressedController();
  return [super dealloc];
}

uint64_t type metadata accessor for TimerCompressedController()
{
  return self;
}

uint64_t sub_100030D9C()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_observerId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100030DDC(uint64_t a1, uint64_t a2)
{
  return sub_1000310E8(&qword_1000C43E0, a2, (void (*)(uint64_t))type metadata accessor for TimerCompressedController);
}

uint64_t sub_100030E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C5390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C5390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030F58()
{
  uint64_t v1 = (int *)(type metadata accessor for TimerSessionEntry(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_10003106C()
{
  uint64_t v1 = *(void *)(type metadata accessor for TimerSessionEntry(0) - 8);
  sub_100030950(v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_1000310D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000310E0()
{
  return swift_release();
}

uint64_t sub_1000310E8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_100031130(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

id sub_100031148(double a1, double a2, double a3, double a4, double a5, double a6)
{
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_pendingWorkItem] = 0;
  v6[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode] = 0;
  *(double *)&v6[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_xmarkSize] = a5;
  *(double *)&v6[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_arrowSize] = a6;
  unint64_t v13 = self;
  unint64_t v14 = v6;
  id v15 = [v13 configurationWithPointSize:5 weight:a5];
  NSString v16 = String._bridgeToObjectiveC()();
  uint64_t v17 = self;
  id v18 = [v17 systemImageNamed:v16 withConfiguration:v15];

  id v19 = [objc_allocWithZone((Class)UIImageView) initWithImage:v18];
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView] = v19;
  id v20 = [v13 configurationWithPointSize:5 weight:a6];
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v17 systemImageNamed:v21 withConfiguration:v20];

  id v23 = [objc_allocWithZone((Class)UIImageView) initWithImage:v22];
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView] = v23;
  id v24 = [objc_allocWithZone((Class)UIView) init];
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer] = v24;
  id v25 = [objc_allocWithZone((Class)UIView) init];
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer] = v25;
  id v26 = [objc_allocWithZone((Class)UIView) init];
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer] = v26;

  v42.receiver = v14;
  v42.super_class = (Class)type metadata accessor for SpinnyResetView();
  id v27 = [super initWithFrame:a1, a2, a3, a4];
  [v27 setUserInteractionEnabled:0];
  sub_100031628();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v28 = objc_allocWithZone((Class)CAFilter);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = [v28 initWithType:v29];

  NSString v31 = String._bridgeToObjectiveC()();
  [v30 setName:v31];

  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  [v30 setValue:isa forKey:kCAFilterInputRadius];

  Class v33 = Bool._bridgeToObjectiveC()().super.super.isa;
  [v30 setValue:v33 forKey:kCAFilterInputNormalizeEdges];

  Class v34 = Bool._bridgeToObjectiveC()().super.super.isa;
  [v30 setValue:v34 forKey:kCAFilterInputHardEdges];

  NSString v35 = String._bridgeToObjectiveC()();
  [v30 setValue:v35 forKey:kCAFilterInputQuality];

  NSString v36 = String._bridgeToObjectiveC()();
  [v30 setValue:v36 forKey:kCAFilterInputIntermediateBitDepth];

  id v37 = [v27 layer];
  sub_100007830(&qword_1000C4468);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_100096230;
  *(void *)(v38 + 56) = sub_100014314(0, &qword_1000C4470);
  *(void *)(v38 + 32) = v30;
  id v39 = v30;
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v37 setFilters:v40];

  return v27;
}

id sub_100031628()
{
  uint64_t v1 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView;
  [*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView] setContentMode:4];
  uint64_t v2 = *(void **)&v0[v1];
  uint64_t v3 = self;
  id v4 = v2;
  id v5 = [v3 whiteColor];
  [v4 setTintColor:v5];

  uint64_t v6 = *(void **)&v0[v1];
  long long v7 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)&v16.a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&v16.c = v7;
  *(_OWORD *)&v16.tx = *(_OWORD *)&CGAffineTransformIdentity.tx;
  CGAffineTransformRotate(&v15, &v16, -1.57079633);
  CGAffineTransform v16 = v15;
  CGAffineTransformScale(&v15, &v16, -1.0, 1.0);
  CGAffineTransform v16 = v15;
  [v6 setTransform:&v16];
  uint64_t v8 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer;
  [*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer] addSubview:*(void *)&v0[v1]];
  uint64_t v9 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer;
  [*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer] addSubview:*(void *)&v0[v8]];
  uint64_t v10 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer;
  [*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer] addSubview:*(void *)&v0[v9]];
  [v0 addSubview:*(void *)&v0[v10]];
  uint64_t v11 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView;
  [*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView] setAlpha:0.0];
  [*(id *)&v0[v11] setContentMode:4];
  id v12 = *(id *)&v0[v11];
  id v13 = [v3 whiteColor];
  [v12 setTintColor:v13];

  return [v0 addSubview:*(void *)&v0[v11]];
}

void sub_100031820()
{
  v22.receiver = v0;
  v22.super_class = (Class)type metadata accessor for SpinnyResetView();
  [super layoutSubviews];
  uint64_t v1 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView;
  [*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView] sizeToFit];
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer;
  uint64_t v3 = *(void **)&v0[v1];
  id v4 = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer];
  [v3 bounds];
  [v4 setBounds:];

  id v5 = *(void **)&v0[v1];
  id v6 = *(id *)&v0[v2];
  [v5 bounds];
  CGRectGetWidth(v23);
  [*(id *)&v0[v1] bounds];
  CGRectGetHeight(v24);
  Frame.timestamp.getter(v7);
  [v6 setCenter:];

  uint64_t v8 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer;
  uint64_t v9 = *(void **)&v0[v1];
  id v10 = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer];
  [v9 bounds];
  [v10 setBounds:];

  uint64_t v11 = *(void **)&v0[v1];
  id v12 = *(id *)&v0[v8];
  [v11 bounds];
  CGRectGetWidth(v25);
  [*(id *)&v0[v1] bounds];
  CGRectGetHeight(v26);
  Frame.timestamp.getter(v13);
  [v12 setCenter:];

  uint64_t v14 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer;
  CGAffineTransform v15 = *(void **)&v0[v1];
  id v16 = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer];
  [v15 bounds];
  [v16 setBounds:];

  id v17 = *(id *)&v0[v14];
  [v0 bounds];
  CGRectGetWidth(v27);
  [v0 bounds];
  CGRectGetHeight(v28);
  [*(id *)&v0[v1] bounds];
  CGRectGetHeight(v29);
  Frame.timestamp.getter(v18);
  [v17 setCenter:];

  uint64_t v19 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView;
  [*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView] sizeToFit];
  id v20 = *(id *)&v0[v19];
  [v0 bounds];
  CGRectGetWidth(v30);
  [v0 bounds];
  CGRectGetHeight(v31);
  Frame.timestamp.getter(v21);
  [v20 setCenter:];
}

uint64_t sub_100031B04(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v27 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v12);
  id v17 = (char *)&v23 - v16;
  int v18 = v2[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode];
  if (((((a1 & 1) == 0) ^ v18) & 1) == 0)
  {
    sub_100014314(0, (unint64_t *)&qword_1000C3F90);
    uint64_t v24 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    CGRect v25 = *(void (**)(char *, uint64_t))(v11 + 8);
    v25(v14, v10);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v2;
    *(unsigned char *)(v19 + 24) = v18;
    aBlock[4] = sub_100032FAC;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001C5B8;
    aBlock[3] = &unk_1000B3A90;
    id v20 = _Block_copy(aBlock);
    uint64_t v21 = v2;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = &_swiftEmptyArrayStorage;
    sub_100032FD0();
    sub_100007830((uint64_t *)&unk_1000C3FA0);
    sub_10001DF74();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    objc_super v22 = (void *)v24;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
    return ((uint64_t (*)(char *, uint64_t))v25)(v17, v10);
  }
  return result;
}

uint64_t sub_100031E9C(unsigned char *a1, char a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v48 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v13 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode;
  if (((a2 & 1) == 0) != a1[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode])
  {
    uint64_t v56 = v5;
    uint64_t v57 = v4;
    uint64_t v14 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_pendingWorkItem;
    uint64_t v15 = *(void *)&a1[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_pendingWorkItem];
    uint64_t v54 = v8;
    unint64_t v55 = v10;
    if (v15)
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(void *)&a1[v14] = 0;
    swift_release();
    uint64_t v16 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView;
    if (a1[v13]) {
      uint64_t v17 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView;
    }
    else {
      uint64_t v17 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer;
    }
    int v18 = *(void **)&a1[v17];
    if (a1[v13]) {
      uint64_t v16 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer;
    }
    uint64_t v53 = v14;
    uint64_t v19 = *(void **)&a1[v16];
    id v20 = v18;
    id v51 = v20;
    id v21 = v19;
    CGAffineTransformMakeScale(&aBlock, 0.75, 0.75);
    long long v49 = *(_OWORD *)&aBlock.a;
    long long v48 = *(_OWORD *)&aBlock.c;
    CGFloat tx = aBlock.tx;
    CGFloat ty = aBlock.ty;
    CGAffineTransformMakeScale(&aBlock, 0.65, 0.65);
    long long v52 = *(_OWORD *)&aBlock.a;
    long long v50 = *(_OWORD *)&aBlock.c;
    CGFloat v24 = aBlock.tx;
    CGFloat v25 = aBlock.ty;
    *(_OWORD *)&aBlock.a = v49;
    *(_OWORD *)&aBlock.c = v48;
    aBlock.CGFloat tx = tx;
    aBlock.CGFloat ty = ty;
    [v20 setTransform:&aBlock];
    uint64_t v26 = self;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = a1;
    *(void *)(v27 + 24) = v21;
    long long v28 = v50;
    *(_OWORD *)(v27 + 32) = v52;
    *(_OWORD *)(v27 + 48) = v28;
    *(CGFloat *)(v27 + 64) = v24;
    *(CGFloat *)(v27 + 72) = v25;
    *(void *)&aBlock.CGFloat tx = sub_100033068;
    *(void *)&aBlock.CGFloat ty = v27;
    *(void *)&aBlock.a = _NSConcreteStackBlock;
    *(void *)&aBlock.b = 1107296256;
    *(void *)&aBlock.c = sub_10001C5B8;
    *(void *)&aBlock.d = &unk_1000B3AE0;
    CGRect v29 = _Block_copy(&aBlock);
    CGRect v30 = a1;
    id v31 = v21;
    swift_release();
    *(void *)&aBlock.CGFloat tx = Frame.timestamp.getter;
    aBlock.CGFloat ty = 0.0;
    *(void *)&aBlock.a = _NSConcreteStackBlock;
    *(void *)&aBlock.b = 1107296256;
    *(void *)&aBlock.c = sub_10004C62C;
    *(void *)&aBlock.d = &unk_1000B3B08;
    Swift::String v32 = _Block_copy(&aBlock);
    [v26 _animateUsingSpringWithDampingRatio:0 response:v29 tracking:v32 dampingRatioSmoothing:1.0 responseSmoothing:0.36 targetSmoothing:0.0 projectionDeceleration:0.0 animations:0.0 completion:0.0];
    _Block_release(v32);
    _Block_release(v29);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v31;
    *(void *)&aBlock.CGFloat tx = sub_1000330AC;
    *(void *)&aBlock.CGFloat ty = v33;
    *(void *)&aBlock.a = _NSConcreteStackBlock;
    *(void *)&aBlock.b = 1107296256;
    *(void *)&aBlock.c = sub_10001C5B8;
    *(void *)&aBlock.d = &unk_1000B3B58;
    Class v34 = _Block_copy(&aBlock);
    *(void *)&long long v52 = v31;
    swift_release();
    *(void *)&aBlock.CGFloat tx = j___s10ClockAngel5FrameV9timestampSdvg;
    aBlock.CGFloat ty = 0.0;
    *(void *)&aBlock.a = _NSConcreteStackBlock;
    *(void *)&aBlock.b = 1107296256;
    *(void *)&aBlock.c = sub_10004C62C;
    *(void *)&aBlock.d = &unk_1000B3B80;
    NSString v35 = _Block_copy(&aBlock);
    [v26 _animateUsingSpringWithDampingRatio:0 response:v34 tracking:v35 dampingRatioSmoothing:1.0 responseSmoothing:0.26 targetSmoothing:0.0 projectionDeceleration:0.0 animations:0.0 completion:0.0];
    _Block_release(v35);
    _Block_release(v34);
    uint64_t v36 = swift_allocObject();
    id v37 = v51;
    *(void *)(v36 + 16) = v30;
    *(void *)(v36 + 24) = v37;
    *(void *)&aBlock.CGFloat tx = sub_100033100;
    *(void *)&aBlock.CGFloat ty = v36;
    *(void *)&aBlock.a = _NSConcreteStackBlock;
    *(void *)&aBlock.b = 1107296256;
    *(void *)&aBlock.c = sub_10001C5B8;
    *(void *)&aBlock.d = &unk_1000B3BD0;
    _Block_copy(&aBlock);
    id v58 = &_swiftEmptyArrayStorage;
    sub_100032FD0();
    uint64_t v38 = v30;
    id v39 = v37;
    sub_100007830((uint64_t *)&unk_1000C3FA0);
    sub_10001DF74();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    uint64_t v40 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    *(void *)&a1[v53] = v40;
    swift_retain();
    swift_release();
    sub_100014314(0, &qword_1000C4298);
    id v41 = *(id *)&v38[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView];
    static NSObject.== infix(_:_:)();

    sub_100014314(0, (unint64_t *)&qword_1000C3F90);
    objc_super v42 = (void *)static OS_dispatch_queue.main.getter();
    NSString v43 = v54;
    static DispatchTime.now()();
    objc_super v44 = v55;
    + infix(_:_:)();
    unint64_t v45 = *(void (**)(char *, uint64_t))(v56 + 8);
    uint64_t v46 = v43;
    uint64_t v47 = v57;
    v45(v46, v57);
    OS_dispatch_queue.asyncAfter(deadline:execute:)();

    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v45)(v44, v47);
  }
  return result;
}

id sub_100032580(void *a1, void *a2, long long *a3)
{
  long long v10 = a3[1];
  long long v11 = *a3;
  uint64_t v4 = *((void *)a3 + 4);
  uint64_t v5 = *((void *)a3 + 5);
  id v6 = [a1 layer];
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  NSString v8 = String._bridgeToObjectiveC()();
  [v6 setValue:isa forKeyPath:v8];

  v12[0] = v11;
  v12[1] = v10;
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  return [a2 setTransform:v12];
}

void sub_100032654(void *a1, void *a2)
{
  uint64_t v4 = self;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  id v21 = (uint64_t (*)(void))sub_100033108;
  uint64_t v22 = v5;
  uint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_10001C5B8;
  id v20 = &unk_1000B3C20;
  id v6 = _Block_copy(&v17);
  id v7 = a1;
  swift_release();
  id v21 = j___s10ClockAngel5FrameV9timestampSdvg;
  uint64_t v22 = 0;
  uint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_10004C62C;
  id v20 = &unk_1000B3C48;
  NSString v8 = _Block_copy(&v17);
  [v4 _animateUsingSpringWithDampingRatio:0 response:v6 tracking:v8 dampingRatioSmoothing:1.0 responseSmoothing:0.36 targetSmoothing:0.0 projectionDeceleration:0.0 animations:0.0 completion:0.0];
  _Block_release(v8);
  _Block_release(v6);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  id v21 = (uint64_t (*)(void))sub_100033110;
  uint64_t v22 = v9;
  uint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_10001C5B8;
  id v20 = &unk_1000B3C98;
  long long v10 = _Block_copy(&v17);
  id v11 = a2;
  swift_release();
  id v21 = j___s10ClockAngel5FrameV9timestampSdvg;
  uint64_t v22 = 0;
  uint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_10004C62C;
  id v20 = &unk_1000B3CC0;
  uint64_t v12 = _Block_copy(&v17);
  [v4 _animateUsingSpringWithDampingRatio:0 response:v10 tracking:v12 dampingRatioSmoothing:1.0 responseSmoothing:0.3 targetSmoothing:0.0 projectionDeceleration:0.0 animations:0.0 completion:0.0];
  _Block_release(v12);
  _Block_release(v10);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  id v21 = (uint64_t (*)(void))sub_100033124;
  uint64_t v22 = v13;
  uint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_10001C5B8;
  id v20 = &unk_1000B3D10;
  uint64_t v14 = _Block_copy(&v17);
  id v15 = v11;
  swift_release();
  id v21 = j___s10ClockAngel5FrameV9timestampSdvg;
  uint64_t v22 = 0;
  uint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_10004C62C;
  id v20 = &unk_1000B3D38;
  uint64_t v16 = _Block_copy(&v17);
  [v4 _animateUsingSpringWithDampingRatio:0 response:v14 tracking:v16 dampingRatioSmoothing:0.6 responseSmoothing:0.42 targetSmoothing:0.0 projectionDeceleration:0.0 animations:0.0 completion:0.0];
  _Block_release(v16);
  _Block_release(v14);
}

void sub_100032A10(void *a1)
{
  id v1 = [a1 layer];
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setValue:isa forKeyPath:v3];
}

id sub_100032AAC(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer;
  id v3 = *(id *)(a1 + OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer);
  [v3 transform];
  CGAffineTransformRotate(&v8, &v9, 2.0943951);
  CGAffineTransform v9 = v8;
  [v3 setTransform:&v9];

  id v4 = *(id *)(a1 + v2);
  [v4 transform];
  CGAffineTransformRotate(&v8, &v9, 2.0943951);
  CGAffineTransform v9 = v8;
  [v4 setTransform:&v9];

  uint64_t v5 = *(void **)(a1 + v2);
  long long v6 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)&v9.a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&v9.c = v6;
  *(_OWORD *)&v9.CGFloat tx = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return [v5 setTransform:&v9];
}

id sub_100032C98()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpinnyResetView();
  [super dealloc];
}

uint64_t type metadata accessor for SpinnyResetView()
{
  return self;
}

uint64_t getEnumTagSinglePayload for SpinnyResetView.Mode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SpinnyResetView.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100032ED8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100032F00(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SpinnyResetView.Mode()
{
  return &type metadata for SpinnyResetView.Mode;
}

unint64_t sub_100032F20()
{
  unint64_t result = qword_1000C4460;
  if (!qword_1000C4460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4460);
  }
  return result;
}

uint64_t sub_100032F74()
{
  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100032FAC()
{
  return sub_100031E9C(*(unsigned char **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100032FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100032FC8()
{
  return swift_release();
}

unint64_t sub_100032FD0()
{
  unint64_t result = qword_1000C3B30;
  if (!qword_1000C3B30)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3B30);
  }
  return result;
}

uint64_t sub_100033028()
{
  return _swift_deallocObject(v0, 80, 7);
}

id sub_100033068()
{
  return sub_100032580(*(void **)(v0 + 16), *(void **)(v0 + 24), (long long *)(v0 + 32));
}

uint64_t sub_100033074()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000330AC()
{
  return [*(id *)(v0 + 16) setAlpha:0.0];
}

uint64_t sub_1000330C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100033100()
{
  sub_100032654(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_100033108()
{
  sub_100032A10(*(void **)(v0 + 16));
}

id sub_100033110()
{
  return [*(id *)(v0 + 16) setAlpha:1.0];
}

id sub_100033124()
{
  id v1 = *(void **)(v0 + 16);
  long long v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return [v1 setTransform:v4];
}

uint64_t sub_1000331D4()
{
  return sub_100033224();
}

uint64_t sub_1000331E8()
{
  return sub_100033224();
}

uint64_t sub_1000331FC()
{
  return sub_100033224();
}

uint64_t sub_100033210()
{
  return sub_100033224();
}

uint64_t sub_100033224()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100033290()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100033304()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100033378()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

double sub_1000333F0()
{
  return sub_10003342C();
}

double sub_100033404()
{
  return sub_10003342C();
}

double sub_100033418()
{
  return sub_10003342C();
}

double sub_10003342C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100033498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  id v37 = a11;
  uint64_t v34 = a9;
  uint64_t v35 = a10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v36 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v18 = sub_100007830(&qword_1000C4918);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__offset;
  uint64_t v44 = 0;
  Published.init(initialValue:)();
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v23(v22, v21, v18);
  uint64_t v24 = v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTimeInterval;
  uint64_t v44 = 0;
  Published.init(initialValue:)();
  v23(v24, v21, v18);
  uint64_t v25 = v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTimeInterval;
  uint64_t v44 = 0;
  Published.init(initialValue:)();
  v23(v25, v21, v18);
  StopwatchAutoFormatter.init()();
  *(void *)(v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel_msThreshold) = 0x40AC200000000000;
  swift_beginAccess();
  uint64_t v42 = v30;
  uint64_t v43 = v31;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v42 = v32;
  uint64_t v43 = v33;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v42 = v34;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v42 = v35;
  type metadata accessor for MTStopwatchState(0);
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v27 = v37;
  v26(v17, v37, v12);
  swift_beginAccess();
  v26(v36, v17, v12);
  Published.init(initialValue:)();
  long long v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v17, v12);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v42 = v38;
  uint64_t v43 = v39;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v42 = v40;
  uint64_t v43 = v41;
  Published.init(initialValue:)();
  swift_endAccess();
  v28(v27, v12);
  return v11;
}

uint64_t sub_10003393C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTime;
  uint64_t v2 = sub_100007830(&qword_1000C48F8);
  int v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTimeWithoutMs, v2);
  v3(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTime, v2);
  v3(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTimeWithoutMs, v2);
  uint64_t v4 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__lap;
  uint64_t v5 = sub_100007830(&qword_1000C4900);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__state;
  uint64_t v7 = sub_100007830(&qword_1000C4908);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__startingDate;
  uint64_t v9 = sub_100007830(&qword_1000C4910);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__offset;
  uint64_t v11 = sub_100007830(&qword_1000C4918);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTimeInterval, v11);
  v12(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTimeInterval, v11);
  uint64_t v13 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel_autoFormatter;
  uint64_t v14 = type metadata accessor for StopwatchAutoFormatter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  return v0;
}

uint64_t sub_100033BAC()
{
  sub_10003393C();

  return swift_deallocClassInstance();
}

uint64_t sub_100033C04()
{
  return type metadata accessor for ObservableStopwatchModel();
}

uint64_t type metadata accessor for ObservableStopwatchModel()
{
  uint64_t result = qword_1000C44F0;
  if (!qword_1000C44F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100033C58()
{
  sub_100033EE0(319, &qword_1000C4500);
  if (v0 <= 0x3F)
  {
    sub_100033EE0(319, &qword_1000C4508);
    if (v1 <= 0x3F)
    {
      sub_100033E8C(319, &qword_1000C4510, type metadata accessor for MTStopwatchState);
      if (v2 <= 0x3F)
      {
        sub_100033E8C(319, &qword_1000C4518, (void (*)(uint64_t))&type metadata accessor for Date);
        if (v3 <= 0x3F)
        {
          sub_100033EE0(319, (unint64_t *)&unk_1000C4520);
          if (v4 <= 0x3F)
          {
            type metadata accessor for StopwatchAutoFormatter();
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

void sub_100033E8C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100033EE0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t destroy for StopwatchCustomLeadingView(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100004678(a1 + 32);

  return swift_release();
}

uint64_t initializeWithCopy for StopwatchCustomLeadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2 + 32;
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v9(a1 + 32, v6, v8);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_retain();
  return a1;
}

void *assignWithCopy for StopwatchCustomLeadingView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  sub_1000046D0(a1 + 4, a2 + 4);
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for StopwatchCustomLeadingView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  sub_100004678(a1 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for StopwatchCustomLeadingView()
{
  return &type metadata for StopwatchCustomLeadingView;
}

uint64_t initializeWithCopy for StopwatchCompressedTrailingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

void *assignWithCopy for StopwatchCompressedTrailingView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 initializeWithTake for StopwatchCompressedTrailingView(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for StopwatchCompressedTrailingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StopwatchCompressedTrailingView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StopwatchCompressedTrailingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCompressedTrailingView()
{
  return &type metadata for StopwatchCompressedTrailingView;
}

void *initializeBufferWithCopyOfBuffer for StopwatchCompressedLeadingView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for StopwatchCompressedLeadingView()
{
  return swift_release();
}

void *assignWithCopy for StopwatchCompressedLeadingView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for StopwatchCompressedLeadingView(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for StopwatchCompressedLeadingView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StopwatchCompressedLeadingView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StopwatchCompressedLeadingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCompressedLeadingView()
{
  return &type metadata for StopwatchCompressedLeadingView;
}

uint64_t sub_100034474(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for StopwatchCustomLockScreenTrailingView(uint64_t a1)
{
  swift_release();

  sub_100004678(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 72);

  return sub_1000344D0(v2, v3);
}

uint64_t sub_1000344D0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for StopwatchCustomLockScreenTrailingView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2 + 24;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  id v10 = v5;
  v9(a1 + 24, v6, v8);
  uint64_t v11 = *(void *)(v2 + 64);
  LOBYTE(v2) = *(unsigned char *)(v2 + 72);
  sub_100034474(v11, v2);
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v2;
  return a1;
}

uint64_t assignWithCopy for StopwatchCustomLockScreenTrailingView(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = (void *)v2[2];
  *(void *)(a1 + 16) = v5;
  id v6 = v5;

  sub_1000046D0((uint64_t *)(a1 + 24), v2 + 3);
  uint64_t v7 = v2[8];
  LOBYTE(v2) = *((unsigned char *)v2 + 72);
  sub_100034474(v7, (char)v2);
  uint64_t v8 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 72) = (_BYTE)v2;
  sub_1000344D0(v8, v9);
  return a1;
}

__n128 initializeWithTake for StopwatchCustomLockScreenTrailingView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for StopwatchCustomLockScreenTrailingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  sub_100004678(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 72);
  uint64_t v8 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = v7;
  sub_1000344D0(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for StopwatchCustomLockScreenTrailingView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StopwatchCustomLockScreenTrailingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCustomLockScreenTrailingView()
{
  return &type metadata for StopwatchCustomLockScreenTrailingView;
}

__n128 initializeWithTake for StopwatchCustomTrailingViewLapSpaced(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewTotalTimeSpaced()
{
  return &type metadata for StopwatchCustomTrailingViewTotalTimeSpaced;
}

uint64_t _s10ClockAngel36StopwatchCustomTrailingViewLapSpacedVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  sub_100004678(a1 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewLapSpaced()
{
  return &type metadata for StopwatchCustomTrailingViewLapSpaced;
}

uint64_t sub_10003481C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100034838@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ObservableStopwatchModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100034878@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return sub_1000355D8(v1, a1 + 24);
}

uint64_t sub_1000348B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100007830(&qword_1000C48A8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C48B0);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v19 - v12;
  *(void *)uint64_t v6 = static HorizontalAlignment.trailing.getter();
  *((void *)v6 + 1) = 0xC014000000000000;
  v6[16] = 0;
  uint64_t v14 = sub_100007830(&qword_1000C48B8);
  sub_100034A88(a1, (uint64_t)&v6[*(int *)(v14 + 44)]);
  uint64_t v15 = static Animation.default.getter();
  LOBYTE(a1) = sub_100034EB4();
  sub_10000FA94((uint64_t)v6, (uint64_t)v11, &qword_1000C48A8);
  uint64_t v16 = &v11[*(int *)(v8 + 44)];
  *(void *)uint64_t v16 = v15;
  v16[8] = a1 & 1;
  sub_10000FAF8((uint64_t)v6, &qword_1000C48A8);
  sub_10000F834((uint64_t)v11, (uint64_t)v13, &qword_1000C48B0);
  sub_10000FA94((uint64_t)v13, (uint64_t)v11, &qword_1000C48B0);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  uint64_t v17 = sub_100007830(&qword_1000C48C0);
  sub_10000FA94((uint64_t)v11, a2 + *(int *)(v17 + 48), &qword_1000C48B0);
  sub_10000FAF8((uint64_t)v13, &qword_1000C48B0);
  return sub_10000FAF8((uint64_t)v11, &qword_1000C48B0);
}

uint64_t sub_100034A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  long long v3 = (int *)type metadata accessor for RunningCountupView(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100007830(&qword_1000C48D0);
  __chkstk_darwin(v32);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100007830(&qword_1000C48D8);
  uint64_t v8 = __chkstk_darwin(v33);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v32 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - v14;
  if (sub_100034EB4())
  {
    sub_10000F9F0(a1 + 24, (uint64_t)v37);
    type metadata accessor for ObservableStopwatchModel();
    sub_10003A524();
    swift_retain();
    *(void *)&long long v36 = ObservedObject.init(wrappedValue:)();
    *((void *)&v36 + 1) = v16;
  }
  else
  {
    uint64_t v38 = 0;
    memset(v37, 0, sizeof(v37));
    long long v36 = 0u;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (qword_1000C2CA8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1000CAF38;
  id v18 = [self mtOrange];
  uint64_t v19 = Color.init(uiColor:)();
  v5[v3[5]] = 0;
  *(void *)&v5[v3[6]] = 0x4044000000000000;
  *(void *)&v5[v3[7]] = v17;
  *(void *)&v5[v3[8]] = v19;
  if (sub_100034EB4()) {
    double v20 = 1.0;
  }
  else {
    double v20 = 1.2;
  }
  static UnitPoint.trailing.getter();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  sub_10003A45C((uint64_t)v5, (uint64_t)v7, type metadata accessor for RunningCountupView);
  uint64_t v25 = &v7[*(int *)(v32 + 36)];
  *(double *)uint64_t v25 = v20;
  *((double *)v25 + 1) = v20;
  *((void *)v25 + 2) = v22;
  *((void *)v25 + 3) = v24;
  sub_10003A4C4((uint64_t)v5, type metadata accessor for RunningCountupView);
  uint64_t v26 = *(void *)(a1 + 8);
  type metadata accessor for ObservableStopwatchModel();
  sub_10003A524();
  swift_retain();
  uint64_t v27 = static ObservableObject.environmentStore.getter();
  sub_10000FA94((uint64_t)v7, (uint64_t)v13, &qword_1000C48D0);
  long long v28 = (uint64_t *)&v13[*(int *)(v33 + 36)];
  *long long v28 = v27;
  v28[1] = v26;
  sub_10000FAF8((uint64_t)v7, &qword_1000C48D0);
  sub_10000F834((uint64_t)v13, (uint64_t)v15, &qword_1000C48D8);
  sub_10000FA94((uint64_t)&v36, (uint64_t)v35, &qword_1000C48E0);
  sub_10000FA94((uint64_t)v15, (uint64_t)v10, &qword_1000C48D8);
  uint64_t v29 = v34;
  sub_10000FA94((uint64_t)v35, v34, &qword_1000C48E0);
  uint64_t v30 = sub_100007830(&qword_1000C48E8);
  sub_10000FA94((uint64_t)v10, v29 + *(int *)(v30 + 48), &qword_1000C48D8);
  sub_10000FAF8((uint64_t)v15, &qword_1000C48D8);
  sub_10000FAF8((uint64_t)&v36, &qword_1000C48E0);
  sub_10000FAF8((uint64_t)v10, &qword_1000C48D8);
  return sub_10000FAF8((uint64_t)v35, &qword_1000C48E0);
}

uint64_t sub_100034EB4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v7[0];
  sub_10003A38C(v0, (uint64_t)v7);
  if (v1 < 2)
  {
    char v5 = 0;
  }
  else
  {
    uint64_t v2 = v8;
    char v3 = v9;
    sub_100034474(v8, v9);
    char v4 = sub_100038DE4(v2, v3);
    sub_1000344D0(v2, v3);
    char v5 = v4 ^ 1;
  }
  sub_10003A3C4((uint64_t)v7);
  return v5 & 1;
}

uint64_t sub_100034F94()
{
  uint64_t v0 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = [self mtURLForSection:3];
  if (v3)
  {
    char v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 0, 1, v5);
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v2, 1, 1, v6);
  }
  type metadata accessor for MTSUtilities();
  dispatch thunk of static MTSUtilities.launchClockAppIfPossible(_:)();
  return sub_10000FAF8((uint64_t)v2, (uint64_t *)&unk_1000C3FF0);
}

uint64_t sub_1000350C8()
{
  uint64_t v1 = sub_100007830(&qword_1000C4880);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007830(&qword_1000C4888);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v3 = static VerticalAlignment.center.getter();
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  uint64_t v7 = sub_100007830(&qword_1000C4890);
  sub_1000348B4(v0, (uint64_t)&v3[*(int *)(v7 + 44)]);
  char v8 = static Edge.Set.horizontal.getter();
  sub_10000FA94((uint64_t)v3, (uint64_t)v6, &qword_1000C4880);
  char v9 = &v6[*(int *)(v4 + 36)];
  *char v9 = v8;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  v9[40] = 1;
  sub_10000FAF8((uint64_t)v3, &qword_1000C4880);
  sub_10003A2EC();
  View.onTapGesture(count:perform:)();
  return sub_10000FAF8((uint64_t)v6, &qword_1000C4888);
}

uint64_t sub_100035254@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v4._uint64_t countAndFlagsBits = 542130508;
  v4._unint64_t object = (void *)0xE400000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v4);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
  v5._uint64_t countAndFlagsBits = 0;
  v5._unint64_t object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v5);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  uint64_t v11 = Text.monospacedDigit()();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  sub_10000C494(v6, v8, v10);
  swift_bridgeObjectRelease();
  uint64_t v16 = v2;
  v2 += 2;
  uint64_t v17 = v16[5];
  uint64_t v18 = v16[6];
  sub_10000C4A4(v2, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
  uint64_t v19 = Text.font(_:)();
  uint64_t v21 = v20;
  char v23 = v22;
  swift_release();
  sub_10000C494(v11, v13, v15);
  swift_bridgeObjectRelease();
  uint64_t v24 = v16[5];
  uint64_t v25 = v16[6];
  sub_10000C4A4(v2, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 40))(v24, v25);
  Color.opacity(_:)();
  swift_release();
  uint64_t v26 = Text.foregroundColor(_:)();
  uint64_t v28 = v27;
  LOBYTE(v25) = v29;
  uint64_t v31 = v30;
  swift_release();
  sub_10000C494(v19, v21, v23 & 1);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v26;
  *(void *)(a1 + 8) = v28;
  *(unsigned char *)(a1 + 16) = v25 & 1;
  *(void *)(a1 + 24) = v31;
  return result;
}

uint64_t sub_10003553C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v6[0] = static VerticalAlignment.center.getter();
  v6[1] = 0;
  char v7 = 1;
  sub_1000355D8(a1, (uint64_t)&v8);
  sub_10000FA94((uint64_t)v6, (uint64_t)v5, &qword_1000C48F0);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  sub_10000FA94((uint64_t)v5, a2 + 16, &qword_1000C48F0);
  sub_10000FAF8((uint64_t)v6, &qword_1000C48F0);
  return sub_10000FAF8((uint64_t)v5, &qword_1000C48F0);
}

uint64_t sub_1000355D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  sub_10000F9F0(a1 + 16, (uint64_t)&v12);
  type metadata accessor for ObservableStopwatchModel();
  sub_10003A524();
  swift_retain();
  v11[0] = ObservedObject.init(wrappedValue:)();
  v11[1] = v4;
  sub_10000F9F0(v3, (uint64_t)&v10);
  swift_retain();
  v9[0] = ObservedObject.init(wrappedValue:)();
  v9[1] = v5;
  sub_10003A5B4((uint64_t)v11, (uint64_t)v8);
  sub_10003A5EC((uint64_t)v9, (uint64_t)v7);
  sub_10003A5B4((uint64_t)v8, a2);
  sub_10003A5EC((uint64_t)v7, a2 + 56);
  sub_10003A624((uint64_t)v9);
  sub_10003A624((uint64_t)v11);
  sub_10003A624((uint64_t)v7);
  return sub_10003A624((uint64_t)v8);
}

uint64_t sub_1000356CC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return sub_10003553C(v1, a1 + 24);
}

uint64_t sub_100035708()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100035724@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v35 = a1;
  uint64_t v34 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v3 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  Swift::String_optional v6 = StopwatchAutoFormatter.formatInterval(_:)(v36);
  swift_release();
  uint64_t countAndFlagsBits = 12336;
  if (v6.value._object) {
    uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;
  }
  unint64_t object = (void *)0xE200000000000000;
  if (v6.value._object) {
    unint64_t object = v6.value._object;
  }
  Swift::Double v36 = *(double *)&countAndFlagsBits;
  id v37 = object;
  sub_10000C92C();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  uint64_t v33 = v1 + 2;
  uint64_t v14 = v1[5];
  uint64_t v15 = v1[6];
  sub_10000C4A4(v1 + 2, v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
  Font.monospacedDigit()();
  swift_release();
  uint64_t v16 = v34;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Font._StylisticAlternative.three(_:), v34);
  Font._stylisticAlternative(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v16);
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  swift_release();
  sub_10000C494(v9, v11, v13);
  swift_bridgeObjectRelease();
  uint64_t v23 = v2[5];
  uint64_t v22 = v2[6];
  sub_10000C4A4(v33, v23);
  (*(void (**)(uint64_t, uint64_t))(v22 + 40))(v23, v22);
  uint64_t v24 = Text.foregroundColor(_:)();
  uint64_t v26 = v25;
  LOBYTE(v9) = v27;
  uint64_t v29 = v28;
  swift_release();
  sub_10000C494(v17, v19, v21 & 1);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v31 = v35;
  uint64_t *v35 = v24;
  v31[1] = v26;
  *((unsigned char *)v31 + 16) = v9 & 1;
  v31[3] = v29;
  return result;
}

uint64_t sub_100035A1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v3 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  sub_10000C92C();
  uint64_t v6 = Text.init<A>(_:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  uint64_t v27 = v11;
  uint64_t v28 = v1 + 2;
  uint64_t v13 = v1[5];
  uint64_t v12 = v1[6];
  sub_10000C4A4(v1 + 2, v13);
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v13, v12);
  Font.monospacedDigit()();
  swift_release();
  uint64_t v14 = v29;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Font._StylisticAlternative.three(_:), v29);
  Font._stylisticAlternative(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v14);
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  LOBYTE(v12) = v18;
  uint64_t v29 = v19;
  swift_release();
  sub_10000C494(v6, v8, v10);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = swift_getKeyPath();
  uint64_t v23 = v1[5];
  uint64_t v22 = v1[6];
  sub_10000C4A4(v28, v23);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(v23, v22);
  uint64_t v25 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v17;
  *(unsigned char *)(a1 + 16) = v12 & 1;
  *(void *)(a1 + 24) = v29;
  *(void *)(a1 + 32) = KeyPath;
  *(void *)(a1 + 40) = 1;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v21;
  *(void *)(a1 + 64) = 0x3FE3333333333333;
  *(void *)(a1 + 72) = v25;
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = result;
  *(void *)(a1 + 96) = 0x3FE3333333333333;
  return result;
}

uint64_t sub_100035CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10000F9F0(a1 + 16, (uint64_t)&v7);
  type metadata accessor for ObservableStopwatchModel();
  sub_10003A524();
  swift_retain();
  v6[0] = ObservedObject.init(wrappedValue:)();
  v6[1] = v3;
  sub_10003A57C((uint64_t)v6, (uint64_t)v5);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  sub_10003A57C((uint64_t)v5, a2 + 16);
  sub_10003A624((uint64_t)v6);
  return sub_10003A624((uint64_t)v5);
}

uint64_t sub_100035D9C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return sub_100035CF8(v1, a1 + 24);
}

uint64_t sub_100035DD8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100035DF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100035E10(uint64_t a1, uint64_t a2)
{
  return sub_100035E4C(a1, a2, (void (*)(uint64_t))&static Font.Weight.regular.getter);
}

uint64_t sub_100035E30(uint64_t a1, uint64_t a2)
{
  return sub_100035E4C(a1, a2, (void (*)(uint64_t))&static Font.Weight.medium.getter);
}

uint64_t sub_100035E4C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = sub_100007830(&qword_1000C3148);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(v5);
  uint64_t v8 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v7, &qword_1000C3148);
  return v9;
}

uint64_t sub_100035F48(uint64_t a1, uint64_t a2)
{
  return sub_100035E4C(a1, a2, (void (*)(uint64_t))&static Font.Weight.light.getter);
}

uint64_t sub_100035F68(uint64_t a1, uint64_t a2)
{
  return sub_100035E4C(a1, a2, (void (*)(uint64_t))&static Font.Weight.semibold.getter);
}

uint64_t sub_100035F84()
{
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  CTFontCreateWithNameAndOptions(v0, 107.0, 0, 0x20000uLL);

  return Font.init(_:)();
}

uint64_t sub_100035FF4()
{
  uint64_t v0 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Font.Weight.semibold.getter();
  uint64_t v3 = enum case for Font.Design.rounded(_:);
  uint64_t v4 = type metadata accessor for Font.Design();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 104))(v2, v3, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  uint64_t v6 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v2, &qword_1000C3148);
  return v6;
}

uint64_t sub_100036134(double a1, double a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C4850);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C4858);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (*(double *)&v14 >= 3600.0)
  {
    sub_1000366AC((uint64_t *)&v14);
    char v12 = v15;
    uint64_t v13 = v16;
    *(_OWORD *)uint64_t v6 = v14;
    v6[16] = v12;
    *((void *)v6 + 3) = v13;
    swift_storeEnumTagMultiPayload();
    sub_10000FD6C(&qword_1000C4860, &qword_1000C4858);
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
    *((void *)v9 + 1) = 0;
    v9[16] = 0;
    uint64_t v10 = sub_100007830(&qword_1000C4868);
    sub_1000363D4((uint64_t *)&v9[*(int *)(v10 + 44)], a1, a2);
    sub_10000FA94((uint64_t)v9, (uint64_t)v6, &qword_1000C4858);
    swift_storeEnumTagMultiPayload();
    sub_10000FD6C(&qword_1000C4860, &qword_1000C4858);
    _ConditionalContent<>.init(storage:)();
    return sub_10000FAF8((uint64_t)v9, &qword_1000C4858);
  }
}

uint64_t sub_1000363D4@<X0>(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v27 = a1;
  uint64_t v25 = sub_100007830(&qword_1000C4870);
  uint64_t v5 = *(void *)(v25 - 8);
  uint64_t v6 = __chkstk_darwin(v25);
  uint64_t v32 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - v8;
  sub_1000366AC(&v37);
  uint64_t v29 = v38;
  uint64_t v30 = v37;
  int v28 = v39;
  uint64_t v31 = v40;
  sub_1000369F8(&v37);
  uint64_t v10 = v37;
  uint64_t v11 = v38;
  char v12 = v39;
  uint64_t v33 = v37;
  uint64_t v34 = v38;
  unsigned __int8 v35 = v39;
  uint64_t v36 = v40;
  uint64_t v13 = self;
  id v14 = [v13 systemFontOfSize:a2 weight:UIFontWeightMedium];
  [v14 capHeight];

  id v15 = [v13 systemFontOfSize:a3 weight:UIFontWeightBold];
  [v15 capHeight];

  uint64_t v26 = v9;
  View.baselineOffset(_:)();
  sub_10000C494(v10, v11, v12);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v17 = v32;
  uint64_t v18 = v25;
  v16(v32, v9, v25);
  uint64_t v20 = v29;
  uint64_t v19 = v30;
  uint64_t v21 = v27;
  *uint64_t v27 = v30;
  v21[1] = v20;
  LOBYTE(v9) = v28;
  *((unsigned char *)v21 + 16) = v28;
  void v21[3] = v31;
  uint64_t v22 = sub_100007830(&qword_1000C4878);
  v16((char *)v21 + *(int *)(v22 + 48), v17, v18);
  sub_10000C484(v19, v20, (char)v9);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v23(v26, v18);
  v23(v17, v18);
  sub_10000C494(v19, v20, (char)v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000366AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v1 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  Swift::String_optional v8 = StopwatchAutoFormatter.formatInterval(_:)(v32);
  swift_release();
  uint64_t countAndFlagsBits = 12336;
  if (v8.value._object) {
    uint64_t countAndFlagsBits = v8.value._countAndFlagsBits;
  }
  unint64_t object = (void *)0xE200000000000000;
  if (v8.value._object) {
    unint64_t object = v8.value._object;
  }
  Swift::Double v32 = *(double *)&countAndFlagsBits;
  uint64_t v33 = object;
  sub_10000C92C();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.Weight.medium.getter();
  uint64_t v16 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
  static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v7, &qword_1000C3148);
  Font.monospacedDigit()();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Font._StylisticAlternative.three(_:), v1);
  Font._stylisticAlternative(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  swift_release();
  sub_10000C494(v11, v13, v15);
  swift_bridgeObjectRelease();
  static Color.orange.getter();
  uint64_t v22 = Text.foregroundColor(_:)();
  uint64_t v24 = v23;
  LOBYTE(v13) = v25;
  uint64_t v27 = v26;
  swift_release();
  sub_10000C494(v17, v19, v21 & 1);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v29 = v31;
  uint64_t *v31 = v22;
  v29[1] = v24;
  *((unsigned char *)v29 + 16) = v13 & 1;
  v29[3] = v27;
  return result;
}

uint64_t sub_1000369F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v1 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_10003A178(2, v31, v32);
  swift_bridgeObjectRelease();
  uint64_t v8 = static String._fromSubstring(_:)();
  unint64_t v10 = v9;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v31 = v8;
  unint64_t v32 = v10;
  sub_10000C92C();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.Weight.bold.getter();
  uint64_t v16 = type metadata accessor for Font.Design();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
  static Font.system(size:weight:design:)();
  sub_10000FAF8(v7, &qword_1000C3148);
  Font.monospacedDigit()();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Font._StylisticAlternative.three(_:), v1);
  Font._stylisticAlternative(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  LOBYTE(v7) = v20;
  swift_release();
  sub_10000C494(v11, v13, v15);
  swift_bridgeObjectRelease();
  static Color.orange.getter();
  uint64_t v21 = Text.foregroundColor(_:)();
  uint64_t v23 = v22;
  LOBYTE(v13) = v24;
  uint64_t v26 = v25;
  swift_release();
  sub_10000C494(v17, v19, v7 & 1);
  uint64_t result = swift_bridgeObjectRelease();
  int v28 = v30;
  uint64_t *v30 = v21;
  v28[1] = v23;
  *((unsigned char *)v28 + 16) = v13 & 1;
  v28[3] = v26;
  return result;
}

uint64_t sub_100036D60()
{
  return sub_100036134(*(double *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100036D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v36 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = Image.init(systemName:)();
  static Font.Weight.regular.getter();
  uint64_t v8 = type metadata accessor for Font.Design();
  unsigned __int8 v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v35(v7, 1, 1, v8);
  uint64_t v40 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v7, &qword_1000C3148);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v38 = static Color.orange.getter();
  uint64_t v37 = swift_getKeyPath();
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0;
  v9._unint64_t object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v9);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
  v10._uint64_t countAndFlagsBits = 0;
  v10._unint64_t object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v10);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.Weight.regular.getter();
  v35(v7, 1, 1, v8);
  static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v7, &qword_1000C3148);
  Font.monospacedDigit()();
  swift_release();
  uint64_t v16 = v36;
  uint64_t v17 = v41;
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v3, enum case for Font._StylisticAlternative.three(_:), v41);
  Font._stylisticAlternative(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v17);
  uint64_t v18 = Text.font(_:)();
  uint64_t v20 = v19;
  LOBYTE(v17) = v21;
  swift_release();
  sub_10000C494(v11, v13, v15);
  swift_bridgeObjectRelease();
  static Color.gray.getter();
  uint64_t v22 = Text.foregroundColor(_:)();
  uint64_t v24 = v23;
  char v26 = v25;
  uint64_t v28 = v27;
  swift_release();
  LOBYTE(v13) = v26 & 1;
  sub_10000C494(v18, v20, v17 & 1);
  swift_bridgeObjectRelease();
  uint64_t v30 = KeyPath;
  uint64_t v29 = v40;
  *(void *)a1 = v42;
  *(void *)(a1 + 8) = v30;
  uint64_t v32 = v37;
  uint64_t v31 = v38;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v32;
  *(void *)(a1 + 32) = v31;
  *(void *)(a1 + 40) = v22;
  *(void *)(a1 + 48) = v24;
  *(unsigned char *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v28;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000C484(v22, v24, v13);
  swift_bridgeObjectRetain();
  sub_10000C494(v22, v24, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

__n128 sub_10003726C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  sub_100036D6C((uint64_t)&v10);
  uint64_t v3 = v11;
  uint64_t v4 = v12;
  uint64_t v5 = v14;
  char v6 = v15;
  uint64_t v7 = v16;
  __n128 result = v13;
  long long v9 = v10;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 56) = result;
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  return result;
}

uint64_t sub_1000372F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100037310()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003732C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v28 = sub_100007830(&qword_1000C4800);
  __chkstk_darwin(v28);
  uint64_t v24 = (uint64_t)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100007830(&qword_1000C4808);
  __chkstk_darwin(v25);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100007830(&qword_1000C4810);
  __chkstk_darwin(v26);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007830(&qword_1000C4818);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  long long v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = sub_100007830(&qword_1000C4820);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  char v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v24 - v16;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v29 == 2)
  {
    sub_1000377FC((uint64_t)v17);
    sub_100037DF0((uint64_t)v11);
    uint64_t v18 = &qword_1000C4820;
    sub_10000FA94((uint64_t)v17, (uint64_t)v15, &qword_1000C4820);
    sub_10000FA94((uint64_t)v11, (uint64_t)v9, &qword_1000C4818);
    sub_10000FA94((uint64_t)v15, (uint64_t)v5, &qword_1000C4820);
    uint64_t v19 = sub_100007830(&qword_1000C4840);
    sub_10000FA94((uint64_t)v9, (uint64_t)&v5[*(int *)(v19 + 48)], &qword_1000C4818);
    sub_10000FAF8((uint64_t)v9, &qword_1000C4818);
    sub_10000FAF8((uint64_t)v15, &qword_1000C4820);
    sub_10000FA94((uint64_t)v5, (uint64_t)v3, &qword_1000C4810);
    swift_storeEnumTagMultiPayload();
    sub_10000FD6C(&qword_1000C4830, &qword_1000C4810);
    sub_10000FD6C(&qword_1000C4838, &qword_1000C4800);
    _ConditionalContent<>.init(storage:)();
    sub_10000FAF8((uint64_t)v5, &qword_1000C4810);
    sub_10000FAF8((uint64_t)v11, &qword_1000C4818);
    uint64_t v20 = (uint64_t)v17;
  }
  else
  {
    sub_1000381FC((uint64_t)v11);
    sub_100038618((uint64_t)v17);
    uint64_t v18 = &qword_1000C4818;
    sub_10000FA94((uint64_t)v11, (uint64_t)v9, &qword_1000C4818);
    sub_10000FA94((uint64_t)v17, (uint64_t)v15, &qword_1000C4820);
    uint64_t v21 = v24;
    sub_10000FA94((uint64_t)v9, v24, &qword_1000C4818);
    uint64_t v22 = sub_100007830(&qword_1000C4828);
    sub_10000FA94((uint64_t)v15, v21 + *(int *)(v22 + 48), &qword_1000C4820);
    sub_10000FAF8((uint64_t)v15, &qword_1000C4820);
    sub_10000FAF8((uint64_t)v9, &qword_1000C4818);
    sub_10000FA94(v21, (uint64_t)v3, &qword_1000C4800);
    swift_storeEnumTagMultiPayload();
    sub_10000FD6C(&qword_1000C4830, &qword_1000C4810);
    sub_10000FD6C(&qword_1000C4838, &qword_1000C4800);
    _ConditionalContent<>.init(storage:)();
    sub_10000FAF8(v21, &qword_1000C4800);
    sub_10000FAF8((uint64_t)v17, &qword_1000C4820);
    uint64_t v20 = (uint64_t)v11;
  }
  return sub_10000FAF8(v20, v18);
}

uint64_t sub_1000377FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v45 = a1;
  uint64_t v46 = type metadata accessor for ContentShapeKinds();
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v43 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BlendMode();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100007830(&qword_1000C3150);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = sub_100007830(&qword_1000C3170);
  uint64_t v17 = __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v42 = (char *)&v39 - v19;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1000CAF50;
  static Font.Weight.semibold.getter();
  uint64_t v21 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v13, 1, 1, v21);
  uint64_t v22 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v13, &qword_1000C3148);
  uint64_t v23 = *(void *)(v2 + 16);
  uint64_t v24 = *(void *)(v2 + 24);
  sub_100039958(v2, (uint64_t)v47);
  uint64_t v25 = swift_allocObject();
  long long v26 = v47[3];
  *(_OWORD *)(v25 + 48) = v47[2];
  *(_OWORD *)(v25 + 64) = v26;
  *(_OWORD *)(v25 + 80) = v47[4];
  *(void *)(v25 + 96) = v48;
  long long v27 = v47[1];
  *(_OWORD *)(v25 + 16) = v47[0];
  *(_OWORD *)(v25 + 32) = v27;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for BlendMode.plusLighter(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  uint64_t v28 = (uint64_t)v16 + *(int *)(v14 + 36);
  uint64_t v39 = v14;
  sub_10003A45C((uint64_t)v6, v28, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  *uint64_t v16 = v20;
  v16[1] = v22;
  void v16[2] = 0x69662E6573756170;
  void v16[3] = 0xEA00000000006C6CLL;
  void v16[4] = v23;
  v16[5] = v24;
  v16[6] = (uint64_t)sub_100039A4C;
  v16[7] = v25;
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10003A4C4((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  LocalizedStringKey.init(stringLiteral:)();
  sub_100039AA0();
  uint64_t v29 = (uint64_t)v40;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FAF8((uint64_t)v16, &qword_1000C3150);
  uint64_t v30 = (uint64_t)v42;
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_10000FAF8(v29, &qword_1000C3170);
  uint64_t v31 = v43;
  static ContentShapeKinds.accessibility.getter();
  uint64_t v32 = sub_100007830(&qword_1000C4820);
  uint64_t v33 = v45;
  uint64_t v34 = (unsigned char *)(v45 + *(int *)(v32 + 36));
  uint64_t v35 = sub_100007830(&qword_1000C4848);
  uint64_t v36 = v44;
  uint64_t v37 = v46;
  (*(void (**)(unsigned char *, char *, uint64_t))(v44 + 16))(&v34[*(int *)(v35 + 40)], v31, v46);
  *uint64_t v34 = 0;
  sub_10000FA94(v30, v33, &qword_1000C3170);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v37);
  return sub_10000FAF8(v30, &qword_1000C3170);
}

uint64_t sub_100037DF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v32 = type metadata accessor for ContentShapeKinds();
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v29 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100007830(&qword_1000C3180);
  uint64_t v6 = __chkstk_darwin(v27);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v27 - v9;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1000CAF50;
  static Font.Weight.thin.getter();
  uint64_t v11 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
  uint64_t v12 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v5, &qword_1000C3148);
  uint64_t v13 = *v1;
  uint64_t v14 = v1[1];
  sub_100039958((uint64_t)v1, (uint64_t)&v33);
  uint64_t v15 = swift_allocObject();
  long long v16 = v36;
  *(_OWORD *)(v15 + 48) = v35;
  *(_OWORD *)(v15 + 64) = v16;
  *(_OWORD *)(v15 + 80) = v37;
  *(void *)(v15 + 96) = v38;
  long long v17 = v34;
  *(_OWORD *)(v15 + 16) = v33;
  *(_OWORD *)(v15 + 32) = v17;
  *(void *)&long long v33 = v10;
  *((void *)&v33 + 1) = v12;
  *(void *)&long long v34 = 0xD000000000000016;
  *((void *)&v34 + 1) = 0x800000010009B120;
  *(void *)&long long v35 = v13;
  *((void *)&v35 + 1) = v14;
  *(void *)&long long v36 = sub_100039994;
  *((void *)&v36 + 1) = v15;
  swift_retain();
  swift_retain();
  LocalizedStringKey.init(stringLiteral:)();
  sub_10000C664();
  View.accessibilityLabel(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = (uint64_t)v28;
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_10000FAF8((uint64_t)v8, &qword_1000C3180);
  uint64_t v19 = v29;
  static ContentShapeKinds.accessibility.getter();
  uint64_t v20 = sub_100007830(&qword_1000C4818);
  uint64_t v21 = v31;
  uint64_t v22 = (unsigned char *)(v31 + *(int *)(v20 + 36));
  uint64_t v23 = sub_100007830(&qword_1000C4848);
  uint64_t v24 = v30;
  uint64_t v25 = v32;
  (*(void (**)(unsigned char *, char *, uint64_t))(v30 + 16))(&v22[*(int *)(v23 + 40)], v19, v32);
  *uint64_t v22 = 0;
  sub_10000FA94(v18, v21, &qword_1000C3180);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v25);
  return sub_10000FAF8(v18, &qword_1000C3180);
}

uint64_t sub_1000381FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v31 = type metadata accessor for ContentShapeKinds();
  uint64_t v29 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v28 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100007830(&qword_1000C3180);
  uint64_t v6 = __chkstk_darwin(v27);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1000CAF50;
  static Font.Weight.thin.getter();
  uint64_t v12 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 1, 1, v12);
  uint64_t v13 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v5, &qword_1000C3148);
  uint64_t v14 = *v1;
  uint64_t v15 = v1[1];
  sub_100039958((uint64_t)v1, (uint64_t)&v32);
  uint64_t v16 = swift_allocObject();
  long long v17 = v35;
  *(_OWORD *)(v16 + 48) = v34;
  *(_OWORD *)(v16 + 64) = v17;
  *(_OWORD *)(v16 + 80) = v36;
  *(void *)(v16 + 96) = v37;
  long long v18 = v33;
  *(_OWORD *)(v16 + 16) = v32;
  *(_OWORD *)(v16 + 32) = v18;
  *(void *)&long long v32 = v11;
  *((void *)&v32 + 1) = v13;
  *(void *)&long long v33 = 0x6C69662E79616C70;
  *((void *)&v33 + 1) = 0xE90000000000006CLL;
  *(void *)&long long v34 = v14;
  *((void *)&v34 + 1) = v15;
  *(void *)&long long v35 = sub_100039B78;
  *((void *)&v35 + 1) = v16;
  swift_retain();
  swift_retain();
  LocalizedStringKey.init(stringLiteral:)();
  sub_10000C664();
  View.accessibilityLabel(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_10000FAF8((uint64_t)v8, &qword_1000C3180);
  uint64_t v19 = v28;
  static ContentShapeKinds.accessibility.getter();
  uint64_t v20 = sub_100007830(&qword_1000C4818);
  uint64_t v21 = v30;
  uint64_t v22 = (unsigned char *)(v30 + *(int *)(v20 + 36));
  uint64_t v23 = sub_100007830(&qword_1000C4848);
  uint64_t v24 = v29;
  uint64_t v25 = v31;
  (*(void (**)(unsigned char *, char *, uint64_t))(v29 + 16))(&v22[*(int *)(v23 + 40)], v19, v31);
  *uint64_t v22 = 0;
  sub_10000FA94((uint64_t)v10, v21, &qword_1000C3180);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v25);
  return sub_10000FAF8((uint64_t)v10, &qword_1000C3180);
}

uint64_t sub_100038618@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v45 = a1;
  uint64_t v46 = type metadata accessor for ContentShapeKinds();
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v43 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BlendMode();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100007830(&qword_1000C3150);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = sub_100007830(&qword_1000C3170);
  uint64_t v17 = __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v42 = (char *)&v39 - v19;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1000CAF50;
  static Font.Weight.semibold.getter();
  uint64_t v21 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v13, 1, 1, v21);
  uint64_t v22 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v13, &qword_1000C3148);
  uint64_t v23 = *(void *)(v2 + 16);
  uint64_t v24 = *(void *)(v2 + 24);
  sub_100039958(v2, (uint64_t)v47);
  uint64_t v25 = swift_allocObject();
  long long v26 = v47[3];
  *(_OWORD *)(v25 + 48) = v47[2];
  *(_OWORD *)(v25 + 64) = v26;
  *(_OWORD *)(v25 + 80) = v47[4];
  *(void *)(v25 + 96) = v48;
  long long v27 = v47[1];
  *(_OWORD *)(v25 + 16) = v47[0];
  *(_OWORD *)(v25 + 32) = v27;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for BlendMode.plusLighter(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  uint64_t v28 = (uint64_t)v16 + *(int *)(v14 + 36);
  uint64_t v39 = v14;
  sub_10003A45C((uint64_t)v6, v28, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  *uint64_t v16 = v20;
  v16[1] = v22;
  void v16[2] = 0x6B72616D78;
  void v16[3] = 0xE500000000000000;
  void v16[4] = v23;
  v16[5] = v24;
  v16[6] = (uint64_t)sub_100039B20;
  v16[7] = v25;
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10003A4C4((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  LocalizedStringKey.init(stringLiteral:)();
  sub_100039AA0();
  uint64_t v29 = (uint64_t)v40;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FAF8((uint64_t)v16, &qword_1000C3150);
  uint64_t v30 = (uint64_t)v42;
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_10000FAF8(v29, &qword_1000C3170);
  uint64_t v31 = v43;
  static ContentShapeKinds.accessibility.getter();
  uint64_t v32 = sub_100007830(&qword_1000C4820);
  uint64_t v33 = v45;
  long long v34 = (unsigned char *)(v45 + *(int *)(v32 + 36));
  uint64_t v35 = sub_100007830(&qword_1000C4848);
  uint64_t v36 = v44;
  uint64_t v37 = v46;
  (*(void (**)(unsigned char *, char *, uint64_t))(v44 + 16))(&v34[*(int *)(v35 + 40)], v31, v46);
  *long long v34 = 0;
  sub_10000FA94(v30, v33, &qword_1000C3170);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v37);
  return sub_10000FAF8(v30, &qword_1000C3170);
}

uint64_t sub_100038BFC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v2 = sub_100007830(&qword_1000C47F8);
  return sub_10003732C(a1 + *(int *)(v2 + 44));
}

void *sub_100038C48()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_100038C5C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100038C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100007830(&qword_1000C49D8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = sub_100007830(&qword_1000C49E0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, a1, v9);
  uint64_t v10 = &v7[*(int *)(v5 + 44)];
  *(void *)uint64_t v10 = KeyPath;
  *((void *)v10 + 1) = 1;
  v10[16] = 0;
  uint64_t v11 = swift_getKeyPath();
  sub_10000FA94((uint64_t)v7, a2, &qword_1000C49D8);
  uint64_t v12 = (uint64_t *)(a2 + *(int *)(sub_100007830(&qword_1000C49E8) + 36));
  *uint64_t v12 = v11;
  v12[1] = 0x3FE3333333333333;
  return sub_10000FAF8((uint64_t)v7, &qword_1000C49D8);
}

uint64_t sub_100038DB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100038FEC(&qword_1000C3220, (uint64_t (*)(void))&type metadata accessor for Font.Context, 0x747865746E6F43, 0xE700000000000000, a1);
}

uint64_t sub_100038DE4(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  uint64_t v9 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = sub_100039C6C(1819242306, 0xE400000000000000, &v12);
    _os_log_impl((void *)&_mh_execute_header, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_1000344D0(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

uint64_t sub_100038FBC@<X0>(uint64_t a1@<X8>)
{
  return sub_100038FEC(&qword_1000C49D0, (uint64_t (*)(void))&type metadata accessor for Locale, 0x656C61636F4CLL, 0xE600000000000000, a1);
}

uint64_t sub_100038FEC@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v23 = a4;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007830(a1);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FA94(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    uint64_t v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v22 + 4) = sub_100039C6C(a3, v23, &v24);
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100039274@<X0>(void *a1@<X8>)
{
  return sub_1000396DC(a1);
}

uint64_t sub_100039288()
{
  return sub_10003976C();
}

uint64_t sub_10003929C@<X0>(void *a1@<X8>)
{
  return sub_1000396DC(a1);
}

uint64_t sub_1000392B0()
{
  return sub_10003976C();
}

uint64_t sub_1000392C4@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100039344()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000393B8@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10003943C()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000394B4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100039530(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  os_log_type_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  swift_getKeyPath();
  swift_getKeyPath();
  v9(v6, (uint64_t)v8, v2);
  swift_retain();
  static Published.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_1000396A0@<X0>(void *a1@<X8>)
{
  return sub_1000396DC(a1);
}

uint64_t sub_1000396B4()
{
  return sub_10003976C();
}

uint64_t sub_1000396C8@<X0>(void *a1@<X8>)
{
  return sub_1000396DC(a1);
}

uint64_t sub_1000396DC@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_100039758()
{
  return sub_10003976C();
}

uint64_t sub_10003976C()
{
  return static Published.subscript.setter();
}

double sub_1000397EC@<D0>(double *a1@<X8>)
{
  return sub_100039850(a1);
}

uint64_t sub_100039800()
{
  return sub_1000398E0();
}

double sub_100039814@<D0>(double *a1@<X8>)
{
  return sub_100039850(a1);
}

uint64_t sub_100039828()
{
  return sub_1000398E0();
}

double sub_10003983C@<D0>(double *a1@<X8>)
{
  return sub_100039850(a1);
}

double sub_100039850@<D0>(double *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1000398CC()
{
  return sub_1000398E0();
}

uint64_t sub_1000398E0()
{
  return static Published.subscript.setter();
}

uint64_t sub_100039958(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100039994()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  sub_10000C4A4(v0 + 6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_1000399EC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100004678(v0 + 48);
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100039A4C()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  sub_10000C4A4(v0 + 6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

unint64_t sub_100039AA0()
{
  unint64_t result = qword_1000C3158;
  if (!qword_1000C3158)
  {
    sub_10000C61C(&qword_1000C3150);
    sub_10000C664();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C3158);
  }
  return result;
}

uint64_t sub_100039B20()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  sub_10000C4A4(v0 + 6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t sub_100039B78()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  sub_10000C4A4(v0 + 6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

double sub_100039BCC@<D0>(double *a1@<X8>)
{
  return sub_100039850(a1);
}

uint64_t sub_100039BF4()
{
  return sub_1000398E0();
}

uint64_t sub_100039C1C@<X0>(void *a1@<X8>)
{
  return sub_1000396DC(a1);
}

uint64_t sub_100039C44()
{
  return sub_10003976C();
}

unint64_t sub_100039C6C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = sub_100039D40(v12, 0, 0, 1, a1, a2);
  unint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10003A3F4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10003A3F4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100004678((uint64_t)v12);
  return v7;
}

unint64_t sub_100039D40(unint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          unint64_t result = 0;
          *((unsigned char *)__dst + v10) = 0;
          *a1 = (unint64_t)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    unint64_t result = (unint64_t)sub_100039E40(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    unint64_t result = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    unint64_t result = _StringObject.sharedUTF8.getter();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

char *sub_100039E40(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (char *)sub_100039ED8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100039FDC(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100039FDC((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

void *sub_100039ED8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100039F74(v2, 0);
      unint64_t result = (void *)_StringGuts.copyUTF8(into:)();
      if (v5) {
        break;
      }
      if (result == (void *)v2) {
        return v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100039F74(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100007830(&qword_1000C48C8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  _OWORD v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_100039FDC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007830(&qword_1000C48C8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10003A0C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003A0F4()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_10003A120@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003A14C()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_10003A178(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return String.subscript.getter();
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v4 = String.index(_:offsetBy:limitedBy:)();
  if (v5) {
    unint64_t v4 = 15;
  }
  if (4 * v3 < v4 >> 14) {
    goto LABEL_12;
  }

  return String.subscript.getter();
}

uint64_t sub_10003A234@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003A260()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_10003A28C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003A2B8()
{
  return EnvironmentValues.foregroundColor.setter();
}

unint64_t sub_10003A2EC()
{
  unint64_t result = qword_1000C4898;
  if (!qword_1000C4898)
  {
    sub_10000C61C(&qword_1000C4888);
    sub_10000FD6C(&qword_1000C48A0, &qword_1000C4880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4898);
  }
  return result;
}

uint64_t sub_10003A38C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003A3C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003A3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10003A45C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003A4C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10003A524()
{
  unint64_t result = qword_1000C6700;
  if (!qword_1000C6700)
  {
    type metadata accessor for ObservableStopwatchModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6700);
  }
  return result;
}

uint64_t sub_10003A57C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003A5B4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003A5EC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003A624(uint64_t a1)
{
  return a1;
}

double sub_10003A658@<D0>(double *a1@<X8>)
{
  return sub_100039850(a1);
}

uint64_t sub_10003A680()
{
  return sub_1000398E0();
}

double sub_10003A6A8@<D0>(double *a1@<X8>)
{
  return sub_100039850(a1);
}

uint64_t sub_10003A6D0()
{
  return sub_1000398E0();
}

uint64_t sub_10003A6F8@<X0>(void *a1@<X8>)
{
  return sub_1000396DC(a1);
}

uint64_t sub_10003A720()
{
  return sub_10003976C();
}

uint64_t sub_10003A748@<X0>(void *a1@<X8>)
{
  return sub_1000396DC(a1);
}

uint64_t sub_10003A770()
{
  return sub_10003976C();
}

uint64_t sub_10003A798@<X0>(void *a1@<X8>)
{
  return sub_1000396DC(a1);
}

uint64_t sub_10003A7C0()
{
  return sub_10003976C();
}

ValueMetadata *type metadata accessor for StandbyConfig()
{
  return &type metadata for StandbyConfig;
}

ValueMetadata *type metadata accessor for LockscreenConfig()
{
  return &type metadata for LockscreenConfig;
}

ValueMetadata *type metadata accessor for ApertureConfig()
{
  return &type metadata for ApertureConfig;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingLapAndTimeView()
{
  return &type metadata for StopwatchCustomTrailingLapAndTimeView;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewTotalTime()
{
  return &type metadata for StopwatchCustomTrailingViewTotalTime;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewCurrentTime()
{
  return &type metadata for StopwatchCustomTrailingViewCurrentTime;
}

uint64_t destroy for StopwatchCustomTrailingViewLap(uint64_t a1)
{
  return sub_100004678(a1 + 16);
}

uint64_t _s10ClockAngel36StopwatchCustomTrailingViewLapSpacedVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2 + 16;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  uint64_t v6 = v5;
  int64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 16, v4, v6);
  return a1;
}

void *_s10ClockAngel36StopwatchCustomTrailingViewLapSpacedVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  sub_1000046D0(a1 + 2, a2 + 2);
  return a1;
}

uint64_t _s10ClockAngel36StopwatchCustomTrailingViewLapSpacedVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10003A9A4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewLap()
{
  return &type metadata for StopwatchCustomTrailingViewLap;
}

uint64_t sub_10003AA00()
{
  return sub_10000FD6C(&qword_1000C4920, &qword_1000C4928);
}

unint64_t sub_10003AA40()
{
  unint64_t result = qword_1000C4930;
  if (!qword_1000C4930)
  {
    sub_10000C61C(&qword_1000C4938);
    sub_10000FD6C(&qword_1000C4860, &qword_1000C4858);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4930);
  }
  return result;
}

uint64_t sub_10003AAE0()
{
  return sub_10000FD6C(&qword_1000C4940, &qword_1000C4948);
}

uint64_t sub_10003AB1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003AB78()
{
  return sub_10000FD6C(&qword_1000C4950, &qword_1000C4958);
}

uint64_t sub_10003ABB4()
{
  return sub_10000FD6C(&qword_1000C4960, &qword_1000C4968);
}

uint64_t sub_10003ABF0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003AC0C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003AC28()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003AC44()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SingleLineScaled()
{
  return &type metadata for SingleLineScaled;
}

uint64_t sub_10003AC80()
{
  return sub_10000FD6C(&qword_1000C4970, &qword_1000C48F0);
}

uint64_t sub_10003ACBC()
{
  return sub_10003ADBC(&qword_1000C4978, &qword_1000C4980, (void (*)(void))sub_10003ACF8);
}

unint64_t sub_10003ACF8()
{
  unint64_t result = qword_1000C4988;
  if (!qword_1000C4988)
  {
    sub_10000C61C(&qword_1000C4990);
    sub_10003ADBC((unint64_t *)&qword_1000C4998, &qword_1000C49A0, (void (*)(void))sub_10003AE60);
    sub_10000FD6C(&qword_1000C3548, &qword_1000C3550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4988);
  }
  return result;
}

uint64_t sub_10003ADBC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000C61C(a2);
    a3();
    sub_10000FD6C(&qword_1000C3568, &qword_1000C3570);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003AE60()
{
  unint64_t result = qword_1000C49A8;
  if (!qword_1000C49A8)
  {
    sub_10000C61C(&qword_1000C49B0);
    sub_10000FD6C(&qword_1000C31C8, &qword_1000C31D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49A8);
  }
  return result;
}

unint64_t sub_10003AF04()
{
  unint64_t result = qword_1000C49B8;
  if (!qword_1000C49B8)
  {
    sub_10000C61C(&qword_1000C49C0);
    sub_10003AF80();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49B8);
  }
  return result;
}

unint64_t sub_10003AF80()
{
  unint64_t result = qword_1000C49C8;
  if (!qword_1000C49C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49C8);
  }
  return result;
}

uint64_t sub_10003AFD4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003AFF0()
{
  return sub_10003ADBC(&qword_1000C49F0, &qword_1000C49E8, (void (*)(void))sub_10003B02C);
}

unint64_t sub_10003B02C()
{
  unint64_t result = qword_1000C49F8;
  if (!qword_1000C49F8)
  {
    sub_10000C61C(&qword_1000C49D8);
    sub_10000FD6C(&qword_1000C4A00, &qword_1000C49E0);
    sub_10000FD6C(&qword_1000C31C8, &qword_1000C31D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C49F8);
  }
  return result;
}

uint64_t sub_10003B0FC(uint64_t a1, uint64_t a2)
{
  return sub_10003B344(a1, a2, &qword_1000C4D60, &qword_1000C42D8, &qword_1000C4D50);
}

uint64_t sub_10003B118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100007830(&qword_1000C4CE0);
  __chkstk_darwin(v6 - 8);
  int64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007830(&qword_1000C4CE8);
  __chkstk_darwin(v9);
  size_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10000FAF8(a1, &qword_1000C4CE0);
    sub_10003D3D8(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for CombineIdentifier();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10000FAF8((uint64_t)v8, &qword_1000C4CE0);
  }
  else
  {
    sub_10003FE44(a1, (uint64_t)v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10003EA50((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for CombineIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10003B328(uint64_t a1, uint64_t a2)
{
  return sub_10003B344(a1, a2, &qword_1000C4D70, &qword_1000C4358, &qword_1000C4D68);
}

uint64_t sub_10003B344(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = v5;
  uint64_t v12 = sub_100007830(a3);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007830(a4);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a1, 1, v15) == 1)
  {
    sub_10000FAF8(a1, a3);
    sub_10003D5AC(a2, a4, a5, (uint64_t)v14);
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a2, v19);
    return sub_10000FAF8((uint64_t)v14, a3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v18, a1, v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *v9;
    *uint64_t v9 = 0x8000000000000000;
    sub_10003EC3C((uint64_t)v18, a2, isUniquelyReferenced_nonNull_native, a4, a5);
    *uint64_t v9 = v24;
    swift_bridgeObjectRelease();
    uint64_t v22 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a2, v22);
  }
}

unint64_t sub_10003B588(uint64_t a1)
{
  uint64_t v2 = sub_100007830(&qword_1000C4D78);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C4D18);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000FA94(v12, (uint64_t)v5, &qword_1000C4D78);
    unint64_t result = sub_10003D86C((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for CombineIdentifier();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = sub_100007830(&qword_1000C4CE8);
    unint64_t result = sub_10003FE44(v9, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003B7A8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C4D80);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    long long v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_10003D940((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003B8B4(double a1, double a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10003B924(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10003B924(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100007830(&qword_1000C4CE8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6 - 8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  BOOL v12 = (char *)v31 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (void *)((char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10003D384();
  *unint64_t v16 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  char v17 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    swift_beginAccess();
    uint64_t v19 = *(void *)(v3 + 24);
    uint64_t v20 = v19 + 64;
    uint64_t v21 = 1 << *(unsigned char *)(v19 + 32);
    uint64_t v22 = -1;
    if (v21 < 64) {
      uint64_t v22 = ~(-1 << v21);
    }
    unint64_t v23 = v22 & *(void *)(v19 + 64);
    int64_t v24 = (unint64_t)(v21 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain_n();
    int64_t v25 = 0;
    while (1)
    {
      if (v23)
      {
        unint64_t v26 = __clz(__rbit64(v23));
        v23 &= v23 - 1;
        unint64_t v27 = v26 | (v25 << 6);
      }
      else
      {
        int64_t v28 = v25 + 1;
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          break;
        }
        if (v28 >= v24) {
          goto LABEL_26;
        }
        unint64_t v29 = *(void *)(v20 + 8 * v28);
        ++v25;
        if (!v29)
        {
          int64_t v25 = v28 + 1;
          if (v28 + 1 >= v24) {
            goto LABEL_26;
          }
          unint64_t v29 = *(void *)(v20 + 8 * v25);
          if (!v29)
          {
            int64_t v25 = v28 + 2;
            if (v28 + 2 >= v24) {
              goto LABEL_26;
            }
            unint64_t v29 = *(void *)(v20 + 8 * v25);
            if (!v29)
            {
              int64_t v25 = v28 + 3;
              if (v28 + 3 >= v24) {
                goto LABEL_26;
              }
              unint64_t v29 = *(void *)(v20 + 8 * v25);
              if (!v29)
              {
                int64_t v25 = v28 + 4;
                if (v28 + 4 >= v24) {
                  goto LABEL_26;
                }
                unint64_t v29 = *(void *)(v20 + 8 * v25);
                if (!v29)
                {
                  int64_t v30 = v28 + 5;
                  if (v30 >= v24)
                  {
LABEL_26:
                    swift_release();
                    return swift_bridgeObjectRelease();
                  }
                  unint64_t v29 = *(void *)(v20 + 8 * v30);
                  if (!v29)
                  {
                    while (1)
                    {
                      int64_t v25 = v30 + 1;
                      if (__OFADD__(v30, 1)) {
                        goto LABEL_29;
                      }
                      if (v25 >= v24) {
                        goto LABEL_26;
                      }
                      unint64_t v29 = *(void *)(v20 + 8 * v25);
                      ++v30;
                      if (v29) {
                        goto LABEL_25;
                      }
                    }
                  }
                  int64_t v25 = v30;
                }
              }
            }
          }
        }
LABEL_25:
        unint64_t v23 = (v29 - 1) & v29;
        unint64_t v27 = __clz(__rbit64(v29)) + (v25 << 6);
      }
      sub_10000FA94(*(void *)(v19 + 56) + *(void *)(v7 + 72) * v27, (uint64_t)v12, &qword_1000C4CE8);
      sub_10003FE44((uint64_t)v12, (uint64_t)v10);
      *(double *)&v31[1] = a1;
      *(double *)&void v31[2] = a2;
      dispatch thunk of AnySubscriberBase.receive(_:)();
      uint64_t result = sub_10000FAF8((uint64_t)v10, &qword_1000C4CE8);
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10003BC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v120 = a3;
  uint64_t v123 = a1;
  uint64_t v102 = type metadata accessor for CombineIdentifier();
  uint64_t v122 = *(void *)(v102 - 8);
  uint64_t v4 = __chkstk_darwin(v102);
  double v116 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v114 = (char *)&v95 - v7;
  uint64_t v113 = v8;
  __chkstk_darwin(v6);
  unint64_t v121 = (char *)&v95 - v9;
  uint64_t v10 = sub_100007830(&qword_1000C4CE0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v115 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  id v103 = (char *)&v95 - v14;
  uint64_t v124 = *(void *)(a2 - 8);
  uint64_t v15 = *(void *)(v124 + 64);
  uint64_t v16 = __chkstk_darwin(v13);
  id v96 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v99 = (char *)&v95 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v98 = (char *)&v95 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v104 = (char *)&v95 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  int64_t v25 = (char *)&v95 - v24;
  __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v95 - v26;
  uint64_t v28 = sub_100007830(&qword_1000C4CE8);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v97 = (uint64_t)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v119 = (uint64_t *)((char *)&v95 - v33);
  __chkstk_darwin(v32);
  uint64_t v126 = (uint64_t)&v95 - v34;
  uint64_t v35 = type metadata accessor for DispatchPredicate();
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v38 = (uint64_t *)((char *)&v95 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v109 = sub_10003D384();
  uint64_t *v38 = static OS_dispatch_queue.main.getter();
  uint64_t v39 = *(void (**)(void))(v36 + 104);
  unsigned int v107 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v108 = v36 + 104;
  v106 = (void (*)(uint64_t *, void, uint64_t))v39;
  v39(v38);
  char v40 = _dispatchPreconditionTest(_:)();
  uint64_t v41 = *(uint64_t (**)(uint64_t *, uint64_t))(v36 + 8);
  uint64_t v110 = v38;
  uint64_t v112 = v35;
  uint64_t v111 = v36 + 8;
  Swift::String v105 = v41;
  uint64_t result = v41(v38, v35);
  if ((v40 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v43 = v124;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v124 + 16);
  v44(v27, v123, a2);
  v44(v25, (uint64_t)v27, a2);
  uint64_t v45 = (uint64_t)v103;
  int v46 = swift_dynamicCast();
  uint64_t v47 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56);
  uint64_t v125 = a2;
  uint64_t v101 = v29 + 56;
  char v100 = v47;
  uint64_t v118 = v28;
  if (v46)
  {
    uint64_t v48 = v43;
    v47(v45, 0, 1, v28);
    uint64_t v49 = v45;
    uint64_t v50 = v97;
    sub_10003FE44(v49, v97);
    id v51 = v119;
    sub_10003FE44(v50, (uint64_t)v119);
    uint64_t v52 = v102;
    uint64_t v53 = a2;
  }
  else
  {
    v47(v45, 1, 1, v28);
    sub_10000FAF8(v45, &qword_1000C4CE0);
    unint64_t v55 = v119;
    uint64_t v54 = v120;
    dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter();
    type metadata accessor for AnySubscriberBox();
    v44(v104, (uint64_t)v27, a2);
    *unint64_t v55 = AnySubscriberBox.__allocating_init(_:)();
    v44(v98, (uint64_t)v27, a2);
    unint64_t v98 = (char *)sub_100007830(&qword_1000C4CF0);
    char v56 = swift_dynamicCast();
    id v103 = v27;
    uint64_t v57 = a2;
    if (v56)
    {
      sub_10000CB18(&v127, (uint64_t)&v130);
      sub_10000CB18(&v130, (uint64_t)&v127);
      uint64_t v58 = v54;
      uint64_t v59 = swift_allocObject();
      sub_10000CB18(&v127, v59 + 16);
      uint64_t v60 = sub_1000400F0;
    }
    else
    {
      uint64_t v129 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      sub_10000FAF8((uint64_t)&v127, &qword_1000C4CF8);
      swift_getDynamicType();
      uint64_t v61 = _typeName(_:qualified:)();
      uint64_t v63 = v62;
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = v61;
      *(void *)(v59 + 24) = v63;
      uint64_t v57 = v125;
      unint64_t v27 = v103;
      uint64_t v58 = v120;
      uint64_t v60 = sub_10003FA50;
    }
    id v51 = v119;
    v119[1] = v60;
    v51[2] = v59;
    id v64 = v104;
    v44(v104, (uint64_t)v27, v57);
    uint64_t v65 = v124;
    unint64_t v66 = (*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
    uint64_t v67 = swift_allocObject();
    *(void *)(v67 + 16) = v125;
    *(void *)(v67 + 24) = v58;
    uint64_t v53 = v125;
    unint64_t v27 = v103;
    (*(void (**)(unint64_t, char *, uint64_t))(v65 + 32))(v67 + v66, v64, v125);
    v51[3] = sub_10003FDDC;
    v51[4] = v67;
    v44(v99, (uint64_t)v27, v53);
    sub_100007830(&qword_1000C4D00);
    if (swift_dynamicCast())
    {
      sub_10000CB18(&v127, (uint64_t)&v130);
      sub_10000CB18(&v130, (uint64_t)&v127);
      uint64_t v68 = swift_allocObject();
      sub_10000CB18(&v127, v68 + 16);
      v51[5] = sub_1000400A4;
      v51[6] = v68;
      uint64_t v52 = v102;
      uint64_t v48 = v124;
      uint64_t v28 = v118;
    }
    else
    {
      uint64_t v129 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      sub_10000FAF8((uint64_t)&v127, &qword_1000C4D08);
      v44(v96, (uint64_t)v27, v53);
      int v69 = swift_dynamicCast();
      uint64_t v28 = v118;
      if (v69)
      {
        sub_10000CB18(&v127, (uint64_t)&v130);
        sub_10000CB18(&v130, (uint64_t)&v127);
        uint64_t v70 = swift_allocObject();
        sub_10000CB18(&v127, v70 + 16);
        v51[5] = sub_10004004C;
        v51[6] = v70;
      }
      else
      {
        uint64_t v129 = 0;
        long long v127 = 0u;
        long long v128 = 0u;
        sub_10000FAF8((uint64_t)&v127, &qword_1000C4CF8);
        swift_getDynamicType();
        uint64_t v71 = _typeName(_:qualified:)();
        uint64_t v73 = v72;
        uint64_t v74 = swift_allocObject();
        *(void *)(v74 + 16) = v71;
        *(void *)(v74 + 24) = v73;
        v51[5] = sub_10003FE2C;
        v51[6] = v74;
      }
      uint64_t v52 = v102;
      uint64_t v48 = v124;
    }
  }
  uint64_t v75 = (uint64_t)v51;
  uint64_t v76 = v126;
  sub_10003FE44(v75, v126);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v53);
  uint64_t v77 = v76 + *(int *)(v28 + 56);
  uint64_t v78 = v121;
  uint64_t v79 = v122;
  unint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  v80(v121, v77, v52);
  uint64_t v81 = swift_allocObject();
  uint64_t v82 = v117;
  swift_weakInit();
  id v83 = v114;
  v80(v114, (uint64_t)v78, v52);
  unint64_t v84 = (*(unsigned __int8 *)(v79 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
  uint64_t v85 = swift_allocObject();
  *(void *)(v85 + 16) = v81;
  (*(void (**)(unint64_t, char *, uint64_t))(v79 + 32))(v85 + v84, v83, v52);
  uint64_t v86 = type metadata accessor for DisplayLink.Subscription();
  uint64_t v87 = swift_allocObject();
  *(void *)(v87 + 16) = sub_10003FFB0;
  *(void *)(v87 + 24) = v85;
  uint64_t v88 = (uint64_t)v116;
  v80(v116, (uint64_t)v78, v52);
  uint64_t v89 = v115;
  sub_10000FA94(v126, v115, &qword_1000C4CE8);
  v100(v89, 0, 1, v118);
  swift_beginAccess();
  sub_10003B118(v89, v88);
  swift_endAccess();
  uint64_t v90 = static OS_dispatch_queue.main.getter();
  uint64_t v91 = v110;
  *uint64_t v110 = v90;
  uint64_t v92 = v112;
  v106(v91, v107, v112);
  LOBYTE(v85) = _dispatchPreconditionTest(_:)();
  uint64_t result = v105(v91, v92);
  if ((v85 & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v93 = *(void *)(*(void *)(v82 + 24) + 16);
  Swift::String v94 = *(void **)(*(void *)(v82 + 16) + 32);
  if (((v93 == 0) ^ [v94 isPaused])) {
    [v94 setPaused:v93 == 0];
  }
  uint64_t v131 = v86;
  uint64_t v132 = sub_10004019C(&qword_1000C4D10, (void (*)(uint64_t))type metadata accessor for DisplayLink.Subscription);
  *(void *)&long long v130 = v87;
  dispatch thunk of Subscriber.receive(subscription:)();
  (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v52);
  sub_10000FAF8(v126, &qword_1000C4CE8);
  return sub_100004678((uint64_t)&v130);
}

uint64_t sub_10003C918(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10003C978(a2);
    return swift_release();
  }
  return result;
}

id sub_10003C978(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v1 = sub_100007830(&qword_1000C4CE0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10003D384();
  *uint64_t v7 = static OS_dispatch_queue.main.getter();
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v9 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  char v10 = _dispatchPreconditionTest(_:)();
  uint64_t v11 = *(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8);
  id result = (id)v11(v7, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_beginAccess();
  sub_10003D3D8(v17, (uint64_t)v3);
  sub_10000FAF8((uint64_t)v3, &qword_1000C4CE0);
  swift_endAccess();
  *uint64_t v7 = static OS_dispatch_queue.main.getter();
  v9(v7, v8, v4);
  char v13 = _dispatchPreconditionTest(_:)();
  id result = (id)v11(v7, v4);
  if ((v13 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v14 = *(void *)(*(void *)(v18 + 24) + 16);
  uint64_t v15 = *(void **)(*(void *)(v18 + 16) + 32);
  id result = [v15 isPaused];
  if ((v14 == 0) != result) {
    return [v15 setPaused:v14 == 0];
  }
  return result;
}

uint64_t sub_10003CBC4()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10003CC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003BC80(a1, a2, a3);
}

uint64_t sub_10003CC28()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for PlatformDisplayLink();
  swift_allocObject();
  uint64_t v4 = sub_10003CE6C();
  type metadata accessor for DisplayLink();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 24) = sub_10003B588((uint64_t)_swiftEmptyArrayStorage);
  sub_10003D384();
  *uint64_t v3 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  char v6 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  if (v6)
  {
    *(void *)(v5 + 16) = v4;
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    uint64_t v9 = v4[2];
    v4[2] = sub_1000401E4;
    _OWORD v4[3] = v8;
    uint64_t result = sub_10000E8EC(v9);
    qword_1000CAE08 = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003CDC8()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10003CE00()
{
  uint64_t v1 = *(void (**)(uint64_t))(*(void *)v0 + 16);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10003CE48()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

void *sub_10003CE6C()
{
  type metadata accessor for PlatformDisplayLink.DisplayLinkTarget();
  v0[2] = 0;
  v0[3] = 0;
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  v0[5] = v1;
  id v2 = [self displayLinkWithTarget:v1 selector:"frame:"];
  v0[4] = v2;
  [v2 setPaused:1];
  uint64_t v3 = self;
  id v4 = v2;
  id v5 = [v3 mainRunLoop];
  [v4 addToRunLoop:v5 forMode:NSRunLoopCommonModes];

  uint64_t v6 = v0[5];
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_unownedRetain();
  swift_retain();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRetain();
  swift_release();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v0;
  uint64_t v8 = *(void *)(v6 + 16);
  *(void *)(v6 + 16) = sub_100040224;
  *(void *)(v6 + 24) = v7;
  sub_10000E8EC(v8);
  swift_release();
  return v0;
}

uint64_t sub_10003CFD4(double a1, double a2)
{
  id v4 = *(void (**)(uint64_t, double, double))(swift_unownedRetainStrong() + 16);
  sub_10000E6C4((uint64_t)v4);
  uint64_t result = swift_release();
  if (v4)
  {
    v4(result, a1, a2);
    return sub_10000E8EC((uint64_t)v4);
  }
  return result;
}

uint64_t sub_10003D068()
{
  [*(id *)(v0 + 32) invalidate];
  sub_10000E8EC(*(void *)(v0 + 16));

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10003D170()
{
  sub_10000E8EC(*(void *)(v0 + 16));

  return swift_deallocClassInstance();
}

void Frame.timestamp.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Frame.timestamp.modify())()
{
  return Frame.timestamp.getter;
}

double Frame.duration.getter(double a1, double a2)
{
  return a2;
}

void Frame.duration.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*Frame.duration.modify())()
{
  return Frame.timestamp.getter;
}

uint64_t type metadata accessor for DisplayLink()
{
  return self;
}

uint64_t type metadata accessor for DisplayLink.Subscription()
{
  return self;
}

uint64_t type metadata accessor for PlatformDisplayLink()
{
  return self;
}

uint64_t type metadata accessor for PlatformDisplayLink.DisplayLinkTarget()
{
  return self;
}

uint64_t getEnumTagSinglePayload for Frame(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Frame(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Frame()
{
  return &type metadata for Frame;
}

uint64_t sub_10003D2E8()
{
  return sub_10004019C(&qword_1000C4CD0, (void (*)(uint64_t))type metadata accessor for DisplayLink.Subscription);
}

uint64_t sub_10003D330()
{
  return sub_10004019C(&qword_1000C4CD8, (void (*)(uint64_t))type metadata accessor for DisplayLink.Subscription);
}

void *sub_10003D378()
{
  return &protocol witness table for Never;
}

unint64_t sub_10003D384()
{
  unint64_t result = qword_1000C3F90;
  if (!qword_1000C3F90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000C3F90);
  }
  return result;
}

uint64_t sub_10003D3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003D5AC(a1, &qword_1000C42D8, &qword_1000C4D50, a2);
}

uint64_t sub_10003D3D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10003D86C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *char v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10003F34C();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CombineIdentifier();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = sub_100007830(&qword_1000C4CE8);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_10003FE44(v12 + *(void *)(v20 + 72) * v6, a2);
    sub_10003E3B8(v6, v9);
    *char v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_100007830(&qword_1000C4CE8);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10003D598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003D5AC(a1, &qword_1000C4358, &qword_1000C4D68, a2);
}

uint64_t sub_10003D5AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_10003D798(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v7;
    uint64_t v25 = *v7;
    *char v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10003F674(a2, a3);
      uint64_t v13 = v25;
    }
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14 + *(void *)(*(void *)(v15 - 8) + 72) * v10, v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = sub_100007830(a2);
    uint64_t v24 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 32))(a4, v16 + *(void *)(v24 + 72) * v10, v17);
    sub_10003E704(v10, v13, a2);
    *char v7 = v13;
    swift_bridgeObjectRelease();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    uint64_t v19 = a4;
    uint64_t v20 = 0;
    uint64_t v21 = v17;
  }
  else
  {
    uint64_t v22 = sub_100007830(a2);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    uint64_t v21 = v22;
    uint64_t v19 = a4;
    uint64_t v20 = 1;
  }

  return v18(v19, v20, 1, v21);
}

unint64_t sub_10003D798(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_10004019C(&qword_1000C4D48, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10003F034(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_1000C4D58, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10003D86C(uint64_t a1)
{
  type metadata accessor for CombineIdentifier();
  sub_10004019C(&qword_1000C4D20, (void (*)(uint64_t))&type metadata accessor for CombineIdentifier);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10003F034(a1, v2, (uint64_t (*)(void))&type metadata accessor for CombineIdentifier, &qword_1000C4D28, (void (*)(uint64_t))&type metadata accessor for CombineIdentifier, (uint64_t)&protocol conformance descriptor for CombineIdentifier);
}

unint64_t sub_10003D940(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_10003F1D4(a1, v2);
}

uint64_t sub_10003D9D4(uint64_t a1, int a2)
{
  char v3 = v2;
  uint64_t v5 = sub_100007830(&qword_1000C4CE8);
  uint64_t v49 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CombineIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100007830(&qword_1000C4D18);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  int v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  uint64_t v21 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    uint64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          char v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    uint64_t v21 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_10003FE44(v32 + v33 * v24, v54);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_10000FA94(v34 + v33 * v24, v54, &qword_1000C4CE8);
    }
    sub_10004019C(&qword_1000C4D20, (void (*)(uint64_t))&type metadata accessor for CombineIdentifier);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v21 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      uint64_t v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    uint64_t result = sub_10003FE44(v54, *(void *)(v13 + 56) + v33 * v22);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  char v3 = v44;
  uint64_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *char v3 = v13;
  return result;
}

uint64_t sub_10003DEBC(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v56 = sub_100007830(a3);
  uint64_t v8 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  unint64_t v55 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v4;
  sub_100007830(a4);
  int v53 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v47 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  int64_t v45 = v4;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = v8 + 16;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v51 = v8;
  uint64_t v52 = v11;
  uint64_t v21 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  uint64_t v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v22 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v46) {
      break;
    }
    uint64_t v29 = v47;
    unint64_t v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v30 = v47[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v46) {
              goto LABEL_34;
            }
            unint64_t v30 = v47[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v52 + 72);
    unint64_t v33 = *(void *)(v14 + 48) + v32 * v27;
    if (v53)
    {
      (*v21)(v13, v33, v10);
      uint64_t v34 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 32))(v55, v34 + v35 * v27, v56);
    }
    else
    {
      (*v49)(v13, v33, v10);
      uint64_t v36 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v55, v36 + v35 * v27, v56);
    }
    sub_10004019C(&qword_1000C4D48, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v21)((char *)(*(void *)(v16 + 48) + v32 * v25), (unint64_t)v13, v10);
    uint64_t result = (*v54)(*(void *)(v16 + 56) + v35 * v25, v55, v56);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v6 = v45;
  uint64_t v29 = v47;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v14 + 32);
  if (v44 >= 64) {
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v29 = -1 << v44;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v6 = v16;
  return result;
}

unint64_t sub_10003E3B8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CombineIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      unint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_10004019C(&qword_1000C4D20, (void (*)(uint64_t))&type metadata accessor for CombineIdentifier);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(sub_100007830(&qword_1000C4CE8) - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10003E704(int64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v40 = (result + 1) & v13;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      uint64_t v14 = v6 + 16;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v41 = v14;
      unint64_t v38 = (uint64_t (**)(char *, uint64_t))(v14 - 8);
      unint64_t v39 = v15;
      uint64_t v36 = v13;
      do
      {
        uint64_t v17 = v10;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v12;
        v39(v9, *(void *)(a2 + 48) + v16 * v12, v5);
        sub_10004019C(&qword_1000C4D48, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v38)(v9, v5);
        unint64_t v21 = v20 & v13;
        if (a1 >= (uint64_t)v40)
        {
          if (v21 >= v40 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            uint64_t v25 = *(void *)(*(void *)(sub_100007830(v37) - 8) + 72);
            int64_t v26 = v25 * a1;
            unint64_t result = v24 + v25 * a1;
            int64_t v27 = v25 * v12;
            unint64_t v28 = v24 + v25 * v12 + v25;
            BOOL v29 = v26 < v27 || result >= v28;
            uint64_t v10 = v17;
            if (v29)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v12;
              uint64_t v13 = v36;
            }
            else
            {
              a1 = v12;
              uint64_t v13 = v36;
              if (v26 != v27)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v12;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v40 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v10 = v17;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v13;
        uint64_t v16 = v18;
      }
      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  uint64_t *v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10003EA50(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CombineIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10003D86C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10003F34C();
      goto LABEL_7;
    }
    sub_10003D9D4(v17, a3 & 1);
    unint64_t v24 = sub_10003D86C(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10003EE5C(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = v21 + *(void *)(*(void *)(sub_100007830(&qword_1000C4CE8) - 8) + 72) * v14;

  return sub_100040134(a1, v22);
}

uint64_t sub_10003EC3C(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v33 = a5;
  uint64_t v34 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)*v5;
  unint64_t v16 = sub_10003D798(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 < v19 || (a3 & 1) == 0)
  {
    if (v21 >= v19 && (a3 & 1) == 0)
    {
      sub_10003F674(a4, v33);
      goto LABEL_7;
    }
    sub_10003DEBC(v19, a3 & 1, a4, v33);
    unint64_t v31 = sub_10003D798(a2);
    if ((v20 & 1) == (v32 & 1))
    {
      unint64_t v16 = v31;
      uint64_t v22 = *v7;
      if (v20) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
      return sub_10003EF3C(v16, (uint64_t)v13, v34, v22, a4);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v22 = *v7;
  if ((v20 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v23 = v22[7];
  uint64_t v24 = sub_100007830(a4);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
  uint64_t v27 = v24;
  uint64_t v28 = v23 + *(void *)(v25 + 72) * v16;
  uint64_t v29 = v34;

  return v26(v28, v29, v27);
}

uint64_t sub_10003EE5C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CombineIdentifier();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_100007830(&qword_1000C4CE8);
  uint64_t result = sub_10003FE44(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_10003EF3C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = sub_100007830(a5);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a3, v13);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

unint64_t sub_10003F034(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_10004019C(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_10003F1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void *sub_10003F34C()
{
  uint64_t v1 = sub_100007830(&qword_1000C4CE8);
  uint64_t v29 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CombineIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007830(&qword_1000C4D18);
  uint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *uint64_t v24 = v10;
    return result;
  }
  uint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v25 = v8 + 64;
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v28 = v5 + 16;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v5 + 32;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    unint64_t v20 = *(void *)(v29 + 72) * v18;
    sub_10000FA94(*(void *)(v8 + 56) + v20, (uint64_t)v3, &qword_1000C4CE8);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    uint64_t result = (void *)sub_10003FE44((uint64_t)v3, *(void *)(v10 + 56) + v20);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10003F674(uint64_t *a1, uint64_t *a2)
{
  uint64_t v45 = sub_100007830(a1);
  uint64_t v48 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  BOOL v42 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007830(a2);
  uint64_t v35 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v49 = v7;
  if (!v8)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v34 = v49;
    uint64_t v33 = v35;
LABEL_25:
    uint64_t *v33 = v34;
    return result;
  }
  uint64_t v9 = v7;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
  {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v11);
    uint64_t v9 = v49;
  }
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  uint64_t v46 = v6;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  uint64_t v36 = v6 + 64;
  int64_t v37 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = v48;
  uint64_t v17 = v47;
  uint64_t v40 = v48 + 16;
  uint64_t v41 = v47 + 16;
  uint64_t v38 = v48 + 32;
  uint64_t v39 = v47 + 32;
  unint64_t v18 = v42;
  uint64_t v19 = v43;
  uint64_t v20 = v45;
  uint64_t v21 = v49;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v50 = v12;
      unint64_t v23 = v22 | (v12 << 6);
      uint64_t v24 = v46;
      goto LABEL_9;
    }
    int64_t v29 = v12 + 1;
    uint64_t v24 = v46;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v29);
    int64_t v31 = v12 + 1;
    if (!v30)
    {
      int64_t v31 = v29 + 1;
      if (v29 + 1 >= v37) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (!v30) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v30 - 1) & v30;
    int64_t v50 = v31;
    unint64_t v23 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_9:
    unint64_t v25 = *(void *)(v17 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v18, *(void *)(v24 + 48) + v25, v19);
    unint64_t v26 = *(void *)(v16 + 72) * v23;
    unint64_t v27 = *(void *)(v24 + 56) + v26;
    uint64_t v28 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v44, v27, v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v21 + 48) + v25, v18, v19);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v21 + 56) + v26, v28, v20);
    int64_t v12 = v50;
  }
  int64_t v32 = v29 + 2;
  if (v32 >= v37)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v33 = v35;
    uint64_t v34 = v49;
    goto LABEL_25;
  }
  unint64_t v30 = *(void *)(v36 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v31 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10003FA18()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003FA50()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10003FA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v21[1] = a3;
  uint64_t v5 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007830(&qword_1000C4D30);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  int64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 - 8);
  uint64_t v14 = __chkstk_darwin(v10);
  uint64_t v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v17((char *)v21 - v18, a1, a2);
  sub_100007830(&qword_1000C4D38);
  if (swift_dynamicCast())
  {
    sub_10000CB18(v22, (uint64_t)v24);
    sub_10000C4A4(v24, v24[3]);
    dispatch thunk of CustomReflectable.customMirror.getter();
    return sub_100004678((uint64_t)v24);
  }
  else
  {
    uint64_t v23 = 0;
    memset(v22, 0, sizeof(v22));
    sub_10000FAF8((uint64_t)v22, &qword_1000C4D40);
    v17(v16, a1, a2);
    uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 1, v20);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Mirror.AncestorRepresentation.generated(_:), v5);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
}

uint64_t sub_10003FD54()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10003FDDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003FA80(v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16), a1);
}

uint64_t sub_10003FE2C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  a1[3] = &type metadata for String;
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10003FE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C4CE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003FEAC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003FEE4()
{
  uint64_t v1 = type metadata accessor for CombineIdentifier();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003FFB0()
{
  uint64_t v1 = *(void *)(type metadata accessor for CombineIdentifier() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10003C918(v2, v3);
}

uint64_t sub_100040014()
{
  sub_100004678(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004004C@<X0>(uint64_t *a1@<X8>)
{
  sub_10000C4A4((void *)(v1 + 16), *(void *)(v1 + 40));
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  a1[3] = (uint64_t)&type metadata for String;
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000400A4()
{
  sub_10000C4A4((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t sub_1000400F0()
{
  sub_10000C4A4((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_100040134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C4CE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004019C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000401E4(double a1, double a2)
{
  return sub_10003B8B4(a1, a2);
}

uint64_t sub_1000401EC()
{
  swift_unownedRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100040224(double a1, double a2)
{
  return sub_10003CFD4(a1, a2);
}

uint64_t sub_100040238()
{
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000402F4()
{
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000403A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a3;
  uint64_t v34 = a1;
  uint64_t v4 = sub_100007830(&qword_1000C42D0);
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C42C8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for CurrentLocationResult(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v30 - v19;
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v30 - v21;
  uint64_t v23 = *(void *)(*(void *)a2 + 96);
  uint64_t v33 = a2;
  uint64_t v24 = a2 + v23;
  swift_beginAccess();
  sub_10000FA94(v24, (uint64_t)v12, &qword_1000C42C8);
  unint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v25(v12, 1, v13) == 1)
  {
    sub_10000FAF8((uint64_t)v12, &qword_1000C42C8);
    sub_10000FA94(v30, (uint64_t)v10, &qword_1000C42C8);
    int v26 = v25(v10, 1, v13);
    uint64_t v27 = v34;
    if (v26 == 1)
    {
      sub_10000FAF8((uint64_t)v10, &qword_1000C42C8);
    }
    else
    {
      sub_1000495B8((uint64_t)v10, (uint64_t)v17);
      sub_100049ACC((uint64_t)v17, (uint64_t)v20);
      sub_100007830(&qword_1000C42D8);
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v32);
      sub_100028030((uint64_t)v17);
      sub_10004961C((uint64_t)v17, type metadata accessor for CurrentLocationResult);
    }
  }
  else
  {
    sub_1000495B8((uint64_t)v12, (uint64_t)v22);
    sub_100049ACC((uint64_t)v22, (uint64_t)v20);
    sub_100007830(&qword_1000C42D8);
    uint64_t v28 = v34;
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v32);
    sub_10004961C((uint64_t)v22, type metadata accessor for CurrentLocationResult);
    uint64_t v27 = v28;
  }
  return sub_100040AE8(v27);
}

uint64_t sub_100040744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v37 = a1;
  uint64_t v4 = sub_100007830(&qword_1000C4350);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  uint64_t v36 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007830(&qword_1000C4340);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = sub_100007830(&qword_1000C4330);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v34 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v24 = *(void *)(*(void *)a2 + 96);
  uint64_t v38 = a2;
  uint64_t v25 = a2 + v24;
  swift_beginAccess();
  sub_10000FA94(v25, (uint64_t)v13, &qword_1000C4340);
  int v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v26(v13, 1, v14) == 1)
  {
    uint64_t v27 = v36;
    sub_10000FAF8((uint64_t)v13, &qword_1000C4340);
    sub_10000FA94(v34, (uint64_t)v11, &qword_1000C4340);
    int v28 = v26(v11, 1, v14);
    uint64_t v29 = v37;
    if (v28 == 1)
    {
      uint64_t v30 = &qword_1000C4340;
      uint64_t v31 = (uint64_t)v11;
    }
    else
    {
      sub_10000F834((uint64_t)v11, (uint64_t)v18, &qword_1000C4330);
      sub_10000FA94((uint64_t)v18, (uint64_t)v21, &qword_1000C4330);
      sub_100007830(&qword_1000C4358);
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v35);
      sub_1000284DC((uint64_t)v18);
      uint64_t v31 = (uint64_t)v18;
      uint64_t v30 = &qword_1000C4330;
    }
    sub_10000FAF8(v31, v30);
  }
  else
  {
    sub_10000F834((uint64_t)v13, (uint64_t)v23, &qword_1000C4330);
    sub_10000FA94((uint64_t)v23, (uint64_t)v21, &qword_1000C4330);
    sub_100007830(&qword_1000C4358);
    uint64_t v32 = v37;
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v35);
    sub_10000FAF8((uint64_t)v23, &qword_1000C4330);
    uint64_t v29 = v32;
  }
  return sub_100040DD4(v29);
}

uint64_t sub_100040AE8(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v1 = sub_100007830(&qword_1000C4D60);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - v9;
  UUID.init()();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v18(v8, v10, v4);
  uint64_t v11 = sub_100007830(&qword_1000C42D8);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v3, v19, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v3, 0, 1, v11);
  swift_beginAccess();
  sub_10003B0FC((uint64_t)v3, (uint64_t)v8);
  swift_endAccess();
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  v18(v8, v10, v4);
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v15 + v14, v8, v4);
  swift_retain();
  AsyncStream.Continuation.onTermination.setter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return swift_release();
}

uint64_t sub_100040DD4(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v1 = sub_100007830(&qword_1000C4D70);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - v9;
  UUID.init()();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v18(v8, v10, v4);
  uint64_t v11 = sub_100007830(&qword_1000C4358);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v3, v19, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v3, 0, 1, v11);
  swift_beginAccess();
  sub_10003B328((uint64_t)v3, (uint64_t)v8);
  swift_endAccess();
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  v18(v8, v10, v4);
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v15 + v14, v8, v4);
  swift_retain();
  AsyncStream.Continuation.onTermination.setter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return swift_release();
}

uint64_t sub_1000410C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100041154(a3, a4, a5, a6, a7);
    return swift_release();
  }
  return result;
}

uint64_t sub_100041154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v24 = a2;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014314(0, (unint64_t *)&qword_1000C3F90);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.background(_:), v13);
  uint64_t v25 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v10);
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v19 + v18, (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = v28;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001C5B8;
  aBlock[3] = v29;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = &_swiftEmptyArrayStorage;
  sub_100049DEC((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007830((uint64_t *)&unk_1000C3FA0);
  sub_10000FD6C((unint64_t *)&qword_1000C3B40, (uint64_t *)&unk_1000C3FA0);
  uint64_t v21 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v22 = (void *)v25;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  swift_release();
  return swift_release();
}

uint64_t sub_1000415DC(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v7 = sub_100007830(a3);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(result + *(void *)(*(void *)result + 104)) + 16);
    swift_beginAccess();
    os_unfair_lock_lock(v11);
    swift_endAccess();
    swift_beginAccess();
    a4(a2);
    sub_10000FAF8((uint64_t)v9, a3);
    swift_endAccess();
    swift_beginAccess();
    os_unfair_lock_unlock(v11);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_100041754()
{
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t sub_1000417F4()
{
  return swift_retain();
}

uint64_t sub_100041898@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 32);
  return swift_retain();
}

uint64_t sub_100041944()
{
  return swift_release();
}

uint64_t sub_100041A24()
{
  return swift_retain();
}

uint64_t sub_100041AC8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 40);
  return swift_retain();
}

uint64_t sub_100041B74()
{
  return swift_release();
}

uint64_t sub_100041C54@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 48);
  return result;
}

uint64_t sub_100041CFC()
{
  return swift_release();
}

id sub_100041DCC()
{
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 56);

  return v1;
}

id sub_100041E7C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 56);
  *a2 = v4;

  return v4;
}

void sub_100041F34(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_100042010()
{
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (v2 == v0[8] && v1 == v0[9]) {
    return swift_bridgeObjectRelease();
  }
  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    swift_bridgeObjectRetain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000421FC()
{
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000422AC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 72);
  *a2 = *(void *)(v3 + 64);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100042358()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004243C()
{
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName + 8);
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  uint64_t v4 = *(void *)(v0 + 88);
  if (!v1)
  {
    if (!v4) {
      return result;
    }
    goto LABEL_12;
  }
  if (!v4)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (v2 == *(void *)(v0 + 80) && v1 == v4) {
    return swift_bridgeObjectRelease();
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
LABEL_12:
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    swift_bridgeObjectRetain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100042650()
{
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100042700@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 88);
  *a2 = *(void *)(v3 + 80);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000427AC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100042890@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 104);
  *a2 = *(void *)(v3 + 96);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10004293C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100042A20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v39 = a1;
  uint64_t v3 = sub_100007830(&qword_1000C4320);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v35 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v8 = &v33[-v7];
  uint64_t v9 = sub_100007830(&qword_1000C4330);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v36 = &v33[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v13 = &v33[-v12];
  uint64_t v14 = sub_100007830(&qword_1000C4328);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = &v33[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getKeyPath();
  uint64_t v18 = v1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider___observationRegistrar;
  uint64_t v41 = v2;
  uint64_t v37 = sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  uint64_t v38 = v18;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v19 = v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  swift_beginAccess();
  uint64_t v20 = (uint64_t)&v17[*(int *)(v15 + 56)];
  sub_10000FA94(v19, (uint64_t)v17, &qword_1000C4330);
  sub_10000FA94(v39, v20, &qword_1000C4330);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v21((uint64_t)v17, 1, v3) == 1)
  {
    if (v21(v20, 1, v3) == 1) {
      return sub_10000FAF8((uint64_t)v17, &qword_1000C4330);
    }
  }
  else
  {
    sub_10000FA94((uint64_t)v17, (uint64_t)v13, &qword_1000C4330);
    if (v21(v20, 1, v3) != 1)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 32))(v8, v20, v3);
      sub_10000FD6C(&qword_1000C4348, &qword_1000C4320);
      int v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v39 = v4;
      uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
      v23(v8, v3);
      v23(v13, v3);
      uint64_t result = sub_10000FAF8((uint64_t)v17, &qword_1000C4330);
      if (v34) {
        return result;
      }
      goto LABEL_8;
    }
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v13, v3);
  }
  uint64_t v39 = v4;
  sub_10000FAF8((uint64_t)v17, &qword_1000C4328);
LABEL_8:
  swift_getKeyPath();
  uint64_t v40 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v24 = v36;
  sub_10000FA94(v19, (uint64_t)v36, &qword_1000C4330);
  if (v21((uint64_t)v24, 1, v3) == 1) {
    return sub_10000FAF8((uint64_t)v24, &qword_1000C4330);
  }
  uint64_t v25 = v39;
  uint64_t v26 = v35;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v39 + 32))(v35, v24, v3);
  swift_getKeyPath();
  uint64_t v40 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v27 = *(void **)(v2 + 56);
  sub_100014314(0, &qword_1000C4EF8);
  id v28 = v27;
  uint64_t v29 = NSMeasurementFormatter.string<A>(from:)();
  uint64_t v31 = v30;

  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(void *)&v33[-32] = v2;
  *(void *)&v33[-24] = v29;
  *(void *)&v33[-16] = v31;
  uint64_t v40 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v25 + 8))(v26, v3);
}

uint64_t sub_100042FB4@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  swift_beginAccess();
  return sub_10000FA94(v3, a1, &qword_1000C4330);
}

uint64_t sub_100043088@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  swift_beginAccess();
  return sub_10000FA94(v4, a2, &qword_1000C4330);
}

uint64_t sub_10004315C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C4330);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000FA94(a1, (uint64_t)v6, &qword_1000C4330);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000FAF8((uint64_t)v6, &qword_1000C4330);
}

uint64_t sub_10004329C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C4330);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v12[-v8];
  sub_10000FA94(a2, (uint64_t)&v12[-v8], &qword_1000C4330);
  uint64_t v10 = a1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  swift_beginAccess();
  sub_10000FA94(v10, (uint64_t)v7, &qword_1000C4330);
  swift_beginAccess();
  sub_100049358((uint64_t)v9, v10);
  swift_endAccess();
  sub_100042A20((uint64_t)v7);
  sub_10000FAF8((uint64_t)v9, &qword_1000C4330);
  return sub_10000FAF8((uint64_t)v7, &qword_1000C4330);
}

uint64_t sub_1000433D4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName + 8);
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10004348C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100043570()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C3778);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WeatherService();
  *(void *)(v0 + 16) = WeatherService.__allocating_init()();
  sub_100007830(&qword_1000C4EB0);
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v5 + *(void *)(*(void *)v5 + 96);
  uint64_t v7 = sub_100007830(&qword_1000C4330);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = *(void *)(*(void *)v5 + 104);
  type metadata accessor for CPUnfairLock();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = 0;
  *(void *)(v5 + v8) = v9;
  *(void *)(v5 + *(void *)(*(void *)v5 + 112)) = &_swiftEmptyDictionarySingleton;
  *(unsigned char *)(v5 + *(void *)(*(void *)v5 + 120)) = 0;
  *(void *)(v1 + 24) = v5;
  *(void *)(v1 + 32) = 0;
  type metadata accessor for NWPathMonitor();
  swift_allocObject();
  *(void *)(v1 + 40) = NWPathMonitor.init()();
  *(unsigned char *)(v1 + 48) = 1;
  id v10 = [objc_allocWithZone((Class)NSMeasurementFormatter) init];
  [v10 setUnitOptions:1];
  [v10 setUnitStyle:2];
  id v11 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v11 setNumberStyle:1];
  [v11 setMaximumFractionDigits:0];
  [v10 setNumberFormatter:v11];

  *(void *)(v1 + 56) = v10;
  *(void *)(v1 + 64) = 11565;
  *(void *)(v1 + 72) = 0xE200000000000000;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 11565;
  *(void *)(v1 + 104) = 0xE200000000000000;
  uint64_t v12 = v1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  uint64_t v13 = sub_100007830(&qword_1000C4320);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = (void *)(v1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  *uint64_t v14 = 0;
  v14[1] = 0;
  ObservationRegistrar.init()();
  sub_100043994();
  if (qword_1000C2C80 != -1) {
    swift_once();
  }
  id v15 = sub_100029520();
  if (v15)
  {
    uint64_t v16 = v15;
    unsigned int v17 = [v15 isAuthorizedForWidgetUpdates];

    if (v17)
    {
      swift_getKeyPath();
      v21[1] = v1;
      sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v1 + 48) == 1)
      {
        uint64_t v18 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 1, 1, v18);
        uint64_t v19 = (void *)swift_allocObject();
        v19[2] = 0;
        void v19[3] = 0;
        v19[4] = v1;
        swift_retain();
        sub_100044CB4((uint64_t)v4, (uint64_t)&unk_1000C4EC0, (uint64_t)v19);
        swift_release();
      }
    }
  }
  return v1;
}

void sub_100043994()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v1 - 8);
  uint64_t v9 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  swift_getKeyPath();
  id v10 = v0;
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_retain();
  sub_10000E6C4((uint64_t)sub_100049DE4);
  NWPathMonitor.pathUpdateHandler.setter();
  swift_release();
  swift_release_n();
  swift_getKeyPath();
  id v10 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  sub_100014314(0, (unint64_t *)&qword_1000C3F90);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v10 = &_swiftEmptyArrayStorage;
  sub_100049DEC((unint64_t *)&qword_1000C4300, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007830(&qword_1000C4308);
  sub_10000FD6C((unint64_t *)&qword_1000C4310, &qword_1000C4308);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  uint64_t v6 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  NWPathMonitor.start(queue:)();
  swift_release();
}

uint64_t sub_100043D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = sub_100007830(&qword_1000C4330);
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[8] = v6;
  v4[9] = *(void *)(v6 + 64);
  v4[10] = swift_task_alloc();
  sub_100007830(&qword_1000C3778);
  v4[11] = swift_task_alloc();
  sub_100007830(&qword_1000C4340);
  v4[12] = swift_task_alloc();
  uint64_t v7 = sub_100007830(&qword_1000C4ED0);
  v4[13] = v7;
  v4[14] = *(void *)(v7 - 8);
  v4[15] = swift_task_alloc();
  uint64_t v8 = sub_100007830(&qword_1000C4ED8);
  v4[16] = v8;
  v4[17] = *(void *)(v8 - 8);
  v4[18] = swift_task_alloc();
  return _swift_task_switch(sub_100043F20, 0, 0);
}

uint64_t sub_100043F20()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  sub_1000444A0(v1);
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  void *v4 = v0;
  v4[1] = sub_100044018;
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[12];
  return AsyncStream.Iterator.next(isolation:)(v6, 0, 0, v5);
}

uint64_t sub_100044018()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100044114, 0, 0);
}

uint64_t sub_100044114()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v2 + 48))(v1, 1, v0[7]) == 1)
  {
    (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v7 = v0[6];
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
  sub_10000F834(v1, v6, &qword_1000C4330);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = v10;
  unint64_t v12[3] = &protocol witness table for MainActor;
  v12[4] = v7;
  sub_10000F834(v6, (uint64_t)v12 + v11, &qword_1000C4330);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8);
  uint64_t v14 = v0[11];
  if (v13 != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, v8);
    if (v12[2]) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    goto LABEL_10;
  }
  sub_10000FAF8(v0[11], &qword_1000C3778);
  if (!v12[2]) {
    goto LABEL_9;
  }
LABEL_7:
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v17 = v16;
  swift_unknownObjectRelease();
LABEL_10:
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = &unk_1000C4EE8;
  *(void *)(v18 + 24) = v12;
  if (v17 | v15)
  {
    v0[2] = 0;
    v0[3] = 0;
    v0[4] = v15;
    v0[5] = v17;
  }
  swift_task_create();
  swift_release();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[19] = v19;
  void *v19 = v0;
  v19[1] = sub_100044018;
  uint64_t v20 = v0[16];
  uint64_t v21 = v0[12];
  return AsyncStream.Iterator.next(isolation:)(v21, 0, 0, v20);
}

uint64_t sub_1000444A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = sub_100007830(&qword_1000C4F00);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  uint64_t v41 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007830(&qword_1000C4F08);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v45 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  __chkstk_darwin(v8);
  uint64_t v44 = (char *)&v39 - v11;
  uint64_t v12 = sub_100007830(&qword_1000C3778);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007830(&qword_1000C4340);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v21 = *(void *)(v1 + 24);
  uint64_t v22 = (os_unfair_lock_s *)(*(void *)(v21 + *(void *)(*(void *)v21 + 104)) + 16);
  swift_beginAccess();
  swift_retain();
  os_unfair_lock_lock(v22);
  uint64_t v23 = *(void *)(*(void *)v21 + 120);
  char v24 = *(unsigned char *)(v21 + v23);
  if ((v24 & 1) == 0) {
    *(unsigned char *)(v21 + v23) = 1;
  }
  os_unfair_lock_unlock(v22);
  swift_endAccess();
  uint64_t v25 = sub_100007830(&qword_1000C4330);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
  uint64_t v47 = v25;
  v26(v20, 1, 1);
  if ((v24 & 1) == 0)
  {
    uint64_t v27 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v14, 1, 1, v27);
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = 0;
    v29[3] = 0;
    v29[4] = v28;
    sub_1000463FC((uint64_t)v14, (uint64_t)&unk_1000C4F18, (uint64_t)v29);
    swift_release();
    uint64_t v30 = sub_100007830(&qword_1000C4320);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v18, 1, 1, v30);
    ((void (*)(char *, void, uint64_t, uint64_t))v26)(v18, 0, 1, v47);
    sub_10001EFF4((uint64_t)v18, (uint64_t)v20, &qword_1000C4340);
  }
  uint64_t v46 = v2;
  uint64_t v31 = sub_100007830(&qword_1000C4ED0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  uint64_t v34 = (uint64_t)v44;
  v33(v44, 1, 1, v31);
  swift_beginAccess();
  os_unfair_lock_lock(v22);
  uint64_t v35 = swift_endAccess();
  __chkstk_darwin(v35);
  *(&v39 - 2) = v21;
  *(&v39 - 1) = v36;
  uint64_t v39 = v36;
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v41, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v43);
  AsyncStream.init(_:bufferingPolicy:_:)();
  v33(v10, 0, 1, v31);
  sub_10001EFF4((uint64_t)v10, v34, &qword_1000C4F08);
  swift_beginAccess();
  os_unfair_lock_unlock(v22);
  swift_endAccess();
  uint64_t v37 = v45;
  sub_10000FA94(v34, v45, &qword_1000C4F08);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v37, 1, v31) == 1)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v40, v37, v31);
    sub_10000FAF8(v34, &qword_1000C4F08);
    sub_10000FAF8(v39, &qword_1000C4340);
    return swift_release();
  }
  return result;
}

uint64_t sub_100044A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  sub_100007830(&qword_1000C4330);
  v5[5] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[6] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100044B5C, v7, v6);
}

uint64_t sub_100044B5C()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  swift_release();
  sub_10000FA94(v2, v1, &qword_1000C4330);
  swift_getKeyPath();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  v0[2] = v3;
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000FAF8(v1, &qword_1000C4330);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100044CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000FAF8(a1, &qword_1000C3778);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100044E60()
{
  swift_getKeyPath();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider___observationRegistrar;
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v0 + 32))
  {
    swift_retain();
    sub_100007830(&qword_1000C42B0);
    Task.cancel()();
    swift_release();
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  NWPathMonitor.cancel()();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FAF8(v0 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature, &qword_1000C4330);
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100045040()
{
  sub_100044E60();

  return swift_deallocClassInstance();
}

uint64_t sub_100045098()
{
  return type metadata accessor for WeatherDataProvider();
}

uint64_t type metadata accessor for WeatherDataProvider()
{
  uint64_t result = qword_1000C4DC8;
  if (!qword_1000C4DC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000450EC()
{
  sub_100045200();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100045200()
{
  if (!qword_1000C4DD8)
  {
    sub_10000C61C(&qword_1000C4320);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000C4DD8);
    }
  }
}

uint64_t sub_10004526C()
{
  *(void *)(*(void *)(v0 + 16) + 40) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_1000452A8()
{
  return sub_100049794();
}

uint64_t sub_1000452CC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100049E34;
  return sub_100043D34(a1, v4, v5, v6);
}

uint64_t sub_100045380()
{
  uint64_t v0 = type metadata accessor for NWPath.Status();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  uint64_t v6 = &v14[-v5];
  NWPath.status.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v1 + 104))(v4, enum case for NWPath.Status.satisfied(_:), v0);
  char v7 = static NWPath.Status.== infix(_:_:)();
  uint64_t v8 = *(void (**)(unsigned char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  if (v7)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    uint64_t v10 = result;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(void *)&v14[-16] = v10;
    v14[-8] = 1;
    uint64_t v15 = v10;
    sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    uint64_t v12 = result;
    uint64_t v13 = swift_getKeyPath();
    __chkstk_darwin(v13);
    *(void *)&v14[-16] = v12;
    v14[-8] = 0;
    uint64_t v15 = v12;
    sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  }
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10004567C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a4;
  sub_100007830(&qword_1000C3778);
  v4[18] = swift_task_alloc();
  sub_100007830(&qword_1000C4330);
  v4[19] = swift_task_alloc();
  sub_100007830(&qword_1000C4F20);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  sub_100007830(&qword_1000C40E0);
  v4[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CurrentLocationResult(0);
  v4[23] = v5;
  v4[24] = *(void *)(v5 - 8);
  v4[25] = swift_task_alloc();
  sub_100007830(&qword_1000C42C8);
  v4[26] = swift_task_alloc();
  uint64_t v6 = sub_100007830((uint64_t *)&unk_1000C4370);
  v4[27] = v6;
  v4[28] = *(void *)(v6 - 8);
  v4[29] = swift_task_alloc();
  uint64_t v7 = sub_100007830(&qword_1000C4F28);
  v4[30] = v7;
  v4[31] = *(void *)(v7 - 8);
  v4[32] = swift_task_alloc();
  return _swift_task_switch(sub_1000458FC, 0, 0);
}

uint64_t sub_1000458FC()
{
  if (qword_1000C2C80 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  sub_100028D20(v1);
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  v0[33] = 0;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[34] = v4;
  void *v4 = v0;
  v4[1] = sub_100045A54;
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[26];
  return AsyncStream.Iterator.next(isolation:)(v6, 0, 0, v5);
}

uint64_t sub_100045A54()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100045B50, 0, 0);
}

uint64_t sub_100045B50()
{
  uint64_t v1 = v0[26];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[24] + 48))(v1, 1, v0[23]) == 1) {
    goto LABEL_8;
  }
  sub_1000495B8(v1, v0[25]);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    sub_10004961C(v0[25], type metadata accessor for CurrentLocationResult);
LABEL_8:
    (*(void (**)(void, void))(v0[31] + 8))(v0[32], v0[30]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    goto LABEL_9;
  }
  uint64_t v3 = Strong;
  swift_getKeyPath();
  v0[15] = v3;
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v3 + 32))
  {
    swift_retain();
    sub_100007830(&qword_1000C42B0);
    Task.cancel()();
    swift_release();
  }
  uint64_t v4 = v0[33];
  static Task<>.checkCancellation()();
  if (v4)
  {
    uint64_t v5 = v0[31];
    uint64_t v6 = v0[32];
    uint64_t v7 = v0[30];
    uint64_t v8 = v0[25];
    swift_release();
    sub_10004961C(v8, type metadata accessor for CurrentLocationResult);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
LABEL_9:
    return v9();
  }
  uint64_t v11 = v0[22];
  sub_10000FA94(v0[25], v11, &qword_1000C40E0);
  uint64_t v12 = type metadata accessor for CurrentLocation(0);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  uint64_t v14 = (id *)v0[22];
  uint64_t v44 = v3;
  if (v13 == 1)
  {
    uint64_t v16 = v0[20];
    uint64_t v15 = v0[21];
    sub_10000FAF8((uint64_t)v14, &qword_1000C40E0);
    uint64_t v17 = type metadata accessor for CurrentWeather();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v15, 1, 1, v17);
    uint64_t v19 = *(void *)(v3 + 24);
    sub_10000FA94(v15, v16, &qword_1000C4F20);
    int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
    uint64_t v22 = v0[19];
    uint64_t v21 = v0[20];
    if (v20 == 1)
    {
      sub_10000FAF8(v0[20], &qword_1000C4F20);
      uint64_t v23 = sub_100007830(&qword_1000C4320);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
    }
    else
    {
      CurrentWeather.temperature.getter();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
      uint64_t v32 = sub_100007830(&qword_1000C4320);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v22, 0, 1, v32);
    }
    uint64_t v33 = v0[25];
    uint64_t v34 = v0[21];
    uint64_t v35 = v0[19];
    uint64_t v36 = (os_unfair_lock_s *)(*(void *)(v19 + *(void *)(*(void *)v19 + 104)) + 16);
    swift_beginAccess();
    os_unfair_lock_lock(v36);
    swift_endAccess();
    sub_1000284DC(v35);
    swift_beginAccess();
    os_unfair_lock_unlock(v36);
    swift_endAccess();
    sub_10000FAF8(v35, &qword_1000C4330);
    sub_10000FAF8(v34, &qword_1000C4F20);
    sub_10004961C(v33, type metadata accessor for CurrentLocationResult);
    swift_release();
  }
  else
  {
    uint64_t v24 = v0[18];
    id v45 = *v14;
    sub_10004961C((uint64_t)v14, type metadata accessor for CurrentLocation);
    uint64_t v25 = type metadata accessor for TaskPriority();
    uint64_t v26 = *(void *)(v25 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, 1, 1, v25);
    uint64_t v27 = swift_allocObject();
    swift_weakInit();
    uint64_t v28 = (void *)swift_allocObject();
    v28[2] = 0;
    v28[3] = 0;
    void v28[4] = v27;
    v28[5] = v45;
    v28[6] = v3;
    LODWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25);
    id v46 = v45;
    swift_retain();
    uint64_t v29 = v0[18];
    if (v27 == 1)
    {
      sub_10000FAF8(v0[18], &qword_1000C3778);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
      if (v28[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v30 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v31 = v37;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
    if (v31 | v30)
    {
      v0[2] = 0;
      v0[3] = 0;
      v0[4] = v30;
      v0[5] = v31;
    }
    uint64_t v38 = v0[25];
    uint64_t v39 = swift_task_create();
    swift_getKeyPath();
    uint64_t v40 = swift_task_alloc();
    *(void *)(v40 + 16) = v44;
    *(void *)(v40 + 24) = v39;
    v0[16] = v44;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();

    swift_release();
    swift_task_dealloc();
    sub_10004961C(v38, type metadata accessor for CurrentLocationResult);
  }
  v0[33] = 0;
  uint64_t v41 = (void *)swift_task_alloc();
  v0[34] = v41;
  void *v41 = v0;
  v41[1] = sub_100045A54;
  uint64_t v42 = v0[30];
  uint64_t v43 = v0[26];
  return AsyncStream.Iterator.next(isolation:)(v43, 0, 0, v42);
}

uint64_t sub_1000463FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10000FAF8(a1, &qword_1000C3778);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_100046584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[26] = a5;
  v6[27] = a6;
  v6[25] = a4;
  uint64_t v7 = type metadata accessor for ContinuousClock.Instant();
  v6[28] = v7;
  v6[29] = *(void *)(v7 - 8);
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v6[32] = v8;
  v6[33] = *(void *)(v8 - 8);
  v6[34] = swift_task_alloc();
  sub_100007830(&qword_1000C3778);
  v6[35] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CurrentWeather();
  v6[36] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[37] = v10;
  v6[38] = *(void *)(v10 + 64);
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  uint64_t v11 = sub_100007830(&qword_1000C4F40);
  v6[41] = v11;
  v6[42] = *(void *)(v11 - 8);
  v6[43] = swift_task_alloc();
  sub_100007830(&qword_1000C4F20);
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  v6[46] = swift_task_alloc();
  return _swift_task_switch(sub_100046804, 0, 0);
}

uint64_t sub_100046804()
{
  uint64_t v1 = *(void *)(v0 + 296);
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  uint64_t v3 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 288);
  unint64_t v5 = (*(void *)(v0 + 296) + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  *(void *)(v0 + 376) = v2;
  *(void *)(v0 + 384) = v5;
  v2(v3, 1, 1, v4);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(void *)(v0 + 392) = *(void *)(Strong + 16);
    swift_retain();
    swift_release();
    static WeatherQuery.current.getter();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100046F24;
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v9 = *(void *)(v0 + 344);
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v11 = *(void *)(v0 + 208);
    return WeatherService.weather<A>(for:including:)(v8, v11, v9, v10);
  }
  else
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 376);
    uint64_t v13 = *(void *)(v0 + 360);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 288);
    sub_10000FAF8(v14, &qword_1000C4F20);
    v12(v13, 1, 1, v15);
    sub_10000F834(v13, v14, &qword_1000C4F20);
    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v17 = *(void *)(v0 + 288);
    uint64_t v18 = *(void *)(v0 + 296);
    sub_10000FA94(*(void *)(v0 + 368), v16, &qword_1000C4F20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      sub_10000FAF8(*(void *)(v0 + 352), &qword_1000C4F20);
    }
    else
    {
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v0 + 296) + 32);
      v19(*(char **)(v0 + 320), *(void *)(v0 + 352), *(void *)(v0 + 288));
      uint64_t v20 = swift_weakLoadStrong();
      uint64_t v21 = *(void *)(v0 + 320);
      if (v20)
      {
        uint64_t v22 = *(void *)(v0 + 312);
        uint64_t v24 = *(void *)(v0 + 288);
        uint64_t v23 = *(void *)(v0 + 296);
        uint64_t v25 = *(void *)(v0 + 280);
        uint64_t v53 = v25;
        uint64_t v52 = *(void *)(v0 + 216);
        uint64_t v26 = type metadata accessor for TaskPriority();
        uint64_t v27 = *(void *)(v26 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v25, 1, 1, v26);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v21, v24);
        type metadata accessor for MainActor();
        swift_retain();
        uint64_t v28 = static MainActor.shared.getter();
        unint64_t v29 = (*(unsigned __int8 *)(v23 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
        uint64_t v30 = (char *)swift_allocObject();
        *((void *)v30 + 2) = v28;
        *((void *)v30 + 3) = &protocol witness table for MainActor;
        *((void *)v30 + 4) = v52;
        v19(&v30[v29], v22, v24);
        int v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v53, 1, v26);
        uint64_t v32 = *(void *)(v0 + 280);
        if (v31 == 1)
        {
          sub_10000FAF8(*(void *)(v0 + 280), &qword_1000C3778);
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v32, v26);
        }
        if (*((void *)v30 + 2))
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v33 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v35 = v34;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v33 = 0;
          uint64_t v35 = 0;
        }
        uint64_t v36 = swift_allocObject();
        *(void *)(v36 + 16) = &unk_1000C4F60;
        *(void *)(v36 + 24) = v30;
        if (v35 | v33)
        {
          *(void *)(v0 + 16) = 0;
          *(void *)(v0 + 24) = 0;
          *(void *)(v0 + 32) = v33;
          *(void *)(v0 + 40) = v35;
        }
        uint64_t v37 = *(void *)(v0 + 320);
        uint64_t v39 = *(void *)(v0 + 288);
        uint64_t v38 = *(void *)(v0 + 296);
        swift_task_create();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 288));
      }
    }
    static Task<>.checkCancellation()();
    uint64_t v41 = *(void *)(v0 + 232);
    uint64_t v40 = *(void *)(v0 + 240);
    uint64_t v42 = *(void *)(v0 + 224);
    uint64_t v43 = static Duration.seconds(_:)();
    uint64_t v45 = v44;
    ContinuousClock.init()();
    *(void *)(v0 + 160) = v43;
    *(void *)(v0 + 168) = v45;
    *(void *)(v0 + 128) = 0;
    *(void *)(v0 + 120) = 0;
    *(unsigned char *)(v0 + 136) = 1;
    uint64_t v46 = sub_100049DEC(&qword_1000C4F48, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    dispatch thunk of Clock.now.getter();
    sub_100049DEC(&qword_1000C4F50, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)();
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    *(void *)(v0 + 416) = v47;
    *(void *)(v0 + 424) = (v41 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v47(v40, v42);
    uint64_t v48 = (void *)swift_task_alloc();
    *(void *)(v0 + 432) = v48;
    *uint64_t v48 = v0;
    v48[1] = sub_10004769C;
    uint64_t v50 = *(void *)(v0 + 248);
    uint64_t v49 = *(void *)(v0 + 256);
    return dispatch thunk of Clock.sleep(until:tolerance:)(v50, v0 + 120, v49, v46);
  }
}

uint64_t sub_100046F24()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[42] + 8))(v2[43], v2[41]);
  swift_release();
  if (v0) {
    uint64_t v3 = sub_100048074;
  }
  else {
    uint64_t v3 = sub_1000470A8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000470A8()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 288);
  sub_10000FAF8(v4, &qword_1000C4F20);
  v2(v3, 0, 1, v5);
  sub_10000F834(v3, v4, &qword_1000C4F20);
  uint64_t v6 = *(void *)(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 296);
  sub_10000FA94(*(void *)(v0 + 368), v6, &qword_1000C4F20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000FAF8(*(void *)(v0 + 352), &qword_1000C4F20);
    static Task<>.checkCancellation()();
    if (!v1) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v0 + 296) + 32);
    v9(*(char **)(v0 + 320), *(void *)(v0 + 352), *(void *)(v0 + 288));
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v11 = *(void *)(v0 + 320);
    if (Strong)
    {
      uint64_t v43 = v1;
      uint64_t v12 = *(void *)(v0 + 312);
      uint64_t v14 = *(void *)(v0 + 288);
      uint64_t v13 = *(void *)(v0 + 296);
      uint64_t v15 = *(void *)(v0 + 280);
      uint64_t v45 = v15;
      uint64_t v44 = *(void *)(v0 + 216);
      uint64_t v16 = type metadata accessor for TaskPriority();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v18 = static MainActor.shared.getter();
      unint64_t v19 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v20 = (char *)swift_allocObject();
      *((void *)v20 + 2) = v18;
      *((void *)v20 + 3) = &protocol witness table for MainActor;
      *((void *)v20 + 4) = v44;
      v9(&v20[v19], v12, v14);
      int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v45, 1, v16);
      uint64_t v22 = *(void *)(v0 + 280);
      if (v21 == 1)
      {
        sub_10000FAF8(*(void *)(v0 + 280), &qword_1000C3778);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v22, v16);
      }
      if (*((void *)v20 + 2))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v34 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v36 = v35;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v36 = 0;
      }
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = &unk_1000C4F60;
      *(void *)(v37 + 24) = v20;
      if (v36 | v34)
      {
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v34;
        *(void *)(v0 + 40) = v36;
      }
      uint64_t v38 = *(void *)(v0 + 320);
      uint64_t v40 = *(void *)(v0 + 288);
      uint64_t v39 = *(void *)(v0 + 296);
      swift_task_create();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
      static Task<>.checkCancellation()();
      if (!v43) {
        goto LABEL_8;
      }
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 288));
      static Task<>.checkCancellation()();
      if (!v1)
      {
LABEL_8:
        uint64_t v24 = *(void *)(v0 + 232);
        uint64_t v23 = *(void *)(v0 + 240);
        uint64_t v25 = *(void *)(v0 + 224);
        uint64_t v26 = static Duration.seconds(_:)();
        uint64_t v28 = v27;
        ContinuousClock.init()();
        *(void *)(v0 + 160) = v26;
        *(void *)(v0 + 168) = v28;
        *(void *)(v0 + 128) = 0;
        *(void *)(v0 + 120) = 0;
        *(unsigned char *)(v0 + 136) = 1;
        uint64_t v29 = sub_100049DEC(&qword_1000C4F48, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
        dispatch thunk of Clock.now.getter();
        sub_100049DEC(&qword_1000C4F50, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
        dispatch thunk of InstantProtocol.advanced(by:)();
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
        *(void *)(v0 + 416) = v30;
        *(void *)(v0 + 424) = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v30(v23, v25);
        int v31 = (void *)swift_task_alloc();
        *(void *)(v0 + 432) = v31;
        void *v31 = v0;
        v31[1] = sub_10004769C;
        uint64_t v33 = *(void *)(v0 + 248);
        uint64_t v32 = *(void *)(v0 + 256);
        return dispatch thunk of Clock.sleep(until:tolerance:)(v33, v0 + 120, v32, v29);
      }
    }
  }
  sub_10000FAF8(*(void *)(v0 + 368), &qword_1000C4F20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

uint64_t sub_10004769C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 416))(*(void *)(v2 + 248), *(void *)(v2 + 224));
    uint64_t v3 = sub_100047F64;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 264);
    uint64_t v4 = *(void *)(v2 + 272);
    uint64_t v6 = *(void *)(v2 + 256);
    (*(void (**)(void, void))(v2 + 416))(*(void *)(v2 + 248), *(void *)(v2 + 224));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v3 = sub_1000477F4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000477F4()
{
  sub_10000FAF8(*(void *)(v0 + 368), &qword_1000C4F20);
  if (static Task<>.isCancelled.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
LABEL_3:
    return v1();
  }
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 376);
  uint64_t v6 = *(void *)(v0 + 288);
  *(void *)(v0 + 384) = (*(void *)(v0 + 296) + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v4, 1, 1, v6);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(void *)(v0 + 392) = *(void *)(Strong + 16);
    swift_retain();
    swift_release();
    static WeatherQuery.current.getter();
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v8;
    void *v8 = v0;
    v8[1] = sub_100046F24;
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v11 = *(void *)(v0 + 288);
    uint64_t v12 = *(void *)(v0 + 208);
    return WeatherService.weather<A>(for:including:)(v9, v12, v10, v11);
  }
  else
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 376);
    uint64_t v14 = *(void *)(v0 + 360);
    uint64_t v15 = *(void *)(v0 + 368);
    uint64_t v16 = *(void *)(v0 + 288);
    sub_10000FAF8(v15, &qword_1000C4F20);
    v13(v14, 1, 1, v16);
    sub_10000F834(v14, v15, &qword_1000C4F20);
    uint64_t v17 = *(void *)(v0 + 352);
    uint64_t v18 = *(void *)(v0 + 288);
    uint64_t v19 = *(void *)(v0 + 296);
    sub_10000FA94(*(void *)(v0 + 368), v17, &qword_1000C4F20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    {
      sub_10000FAF8(*(void *)(v0 + 352), &qword_1000C4F20);
    }
    else
    {
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v0 + 296) + 32);
      v20(*(char **)(v0 + 320), *(void *)(v0 + 352), *(void *)(v0 + 288));
      uint64_t v21 = swift_weakLoadStrong();
      uint64_t v22 = *(void *)(v0 + 320);
      if (v21)
      {
        uint64_t v52 = v3;
        uint64_t v23 = *(void *)(v0 + 312);
        uint64_t v25 = *(void *)(v0 + 288);
        uint64_t v24 = *(void *)(v0 + 296);
        uint64_t v26 = *(void *)(v0 + 280);
        uint64_t v54 = v26;
        uint64_t v53 = *(void *)(v0 + 216);
        uint64_t v27 = type metadata accessor for TaskPriority();
        uint64_t v28 = *(void *)(v27 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v26, 1, 1, v27);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v22, v25);
        type metadata accessor for MainActor();
        swift_retain();
        uint64_t v29 = static MainActor.shared.getter();
        unint64_t v30 = (*(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
        int v31 = (char *)swift_allocObject();
        *((void *)v31 + 2) = v29;
        *((void *)v31 + 3) = &protocol witness table for MainActor;
        *((void *)v31 + 4) = v53;
        v20(&v31[v30], v23, v25);
        int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v54, 1, v27);
        uint64_t v33 = *(void *)(v0 + 280);
        if (v32 == 1)
        {
          sub_10000FAF8(*(void *)(v0 + 280), &qword_1000C3778);
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v33, v27);
        }
        uint64_t v3 = v52;
        if (*((void *)v31 + 2))
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v34 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v36 = v35;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v34 = 0;
          uint64_t v36 = 0;
        }
        uint64_t v37 = swift_allocObject();
        *(void *)(v37 + 16) = &unk_1000C4F60;
        *(void *)(v37 + 24) = v31;
        if (v36 | v34)
        {
          *(void *)(v0 + 16) = 0;
          *(void *)(v0 + 24) = 0;
          *(void *)(v0 + 32) = v34;
          *(void *)(v0 + 40) = v36;
        }
        uint64_t v38 = *(void *)(v0 + 320);
        uint64_t v40 = *(void *)(v0 + 288);
        uint64_t v39 = *(void *)(v0 + 296);
        swift_task_create();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 288));
      }
    }
    static Task<>.checkCancellation()();
    if (v3)
    {
      sub_10000FAF8(*(void *)(v0 + 368), &qword_1000C4F20);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_3;
    }
    uint64_t v42 = *(void *)(v0 + 232);
    uint64_t v41 = *(void *)(v0 + 240);
    uint64_t v43 = *(void *)(v0 + 224);
    uint64_t v44 = static Duration.seconds(_:)();
    uint64_t v46 = v45;
    ContinuousClock.init()();
    *(void *)(v0 + 160) = v44;
    *(void *)(v0 + 168) = v46;
    *(void *)(v0 + 128) = 0;
    *(void *)(v0 + 120) = 0;
    *(unsigned char *)(v0 + 136) = 1;
    uint64_t v47 = sub_100049DEC(&qword_1000C4F48, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    dispatch thunk of Clock.now.getter();
    sub_100049DEC(&qword_1000C4F50, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)();
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    *(void *)(v0 + 416) = v48;
    *(void *)(v0 + 424) = (v42 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v48(v41, v43);
    uint64_t v49 = (void *)swift_task_alloc();
    *(void *)(v0 + 432) = v49;
    void *v49 = v0;
    v49[1] = sub_10004769C;
    uint64_t v51 = *(void *)(v0 + 248);
    uint64_t v50 = *(void *)(v0 + 256);
    return dispatch thunk of Clock.sleep(until:tolerance:)(v51, v0 + 120, v50, v47);
  }
}

uint64_t sub_100047F64()
{
  (*(void (**)(void, void))(v0[33] + 8))(v0[34], v0[32]);
  sub_10000FAF8(v0[46], &qword_1000C4F20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100048074()
{
  uint64_t v1 = self;
  *(void *)(v0 + 176) = 0;
  *(void *)(v0 + 184) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 144) = 0xD00000000000001CLL;
  *(void *)(v0 + 152) = 0x800000010009B490;
  swift_getErrorValue();
  v2._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 logInfo:v3];

  swift_errorRelease();
  uint64_t v4 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 296);
  sub_10000FA94(*(void *)(v0 + 368), v4, &qword_1000C4F20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FAF8(*(void *)(v0 + 352), &qword_1000C4F20);
  }
  else
  {
    uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v0 + 296) + 32);
    v7(*(char **)(v0 + 320), *(void *)(v0 + 352), *(void *)(v0 + 288));
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v9 = *(void *)(v0 + 320);
    if (Strong)
    {
      uint64_t v10 = *(void *)(v0 + 312);
      uint64_t v42 = v7;
      uint64_t v12 = *(void *)(v0 + 288);
      uint64_t v11 = *(void *)(v0 + 296);
      uint64_t v13 = *(void *)(v0 + 280);
      uint64_t v41 = v13;
      uint64_t v40 = *(void *)(v0 + 216);
      uint64_t v14 = type metadata accessor for TaskPriority();
      uint64_t v15 = *(void *)(v14 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v16 = static MainActor.shared.getter();
      unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v18 = (char *)swift_allocObject();
      *((void *)v18 + 2) = v16;
      *((void *)v18 + 3) = &protocol witness table for MainActor;
      *((void *)v18 + 4) = v40;
      v42(&v18[v17], v10, v12);
      int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v41, 1, v14);
      uint64_t v20 = *(void *)(v0 + 280);
      if (v19 == 1)
      {
        sub_10000FAF8(*(void *)(v0 + 280), &qword_1000C3778);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v20, v14);
      }
      if (*((void *)v18 + 2))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v23 = v22;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v23 = 0;
      }
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = &unk_1000C4F60;
      *(void *)(v24 + 24) = v18;
      if (v23 | v21)
      {
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v21;
        *(void *)(v0 + 40) = v23;
      }
      uint64_t v25 = *(void *)(v0 + 320);
      uint64_t v26 = *(void *)(v0 + 288);
      uint64_t v27 = *(void *)(v0 + 296);
      swift_task_create();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 288));
    }
  }
  static Task<>.checkCancellation()();
  uint64_t v29 = *(void *)(v0 + 232);
  uint64_t v28 = *(void *)(v0 + 240);
  uint64_t v30 = *(void *)(v0 + 224);
  uint64_t v31 = static Duration.seconds(_:)();
  uint64_t v33 = v32;
  ContinuousClock.init()();
  *(void *)(v0 + 160) = v31;
  *(void *)(v0 + 168) = v33;
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 120) = 0;
  *(unsigned char *)(v0 + 136) = 1;
  uint64_t v34 = sub_100049DEC(&qword_1000C4F48, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_100049DEC(&qword_1000C4F50, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  *(void *)(v0 + 416) = v35;
  *(void *)(v0 + 424) = (v29 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v35(v28, v30);
  uint64_t v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v36;
  void *v36 = v0;
  v36[1] = sub_10004769C;
  uint64_t v38 = *(void *)(v0 + 248);
  uint64_t v37 = *(void *)(v0 + 256);
  return dispatch thunk of Clock.sleep(until:tolerance:)(v38, v0 + 120, v37, v34);
}

uint64_t sub_1000486E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v6 = sub_100007830(&qword_1000C4320);
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000487E8, v8, v7);
}

uint64_t sub_1000487E8()
{
  uint64_t v1 = v0[5];
  swift_release();
  swift_getKeyPath();
  v0[2] = v1;
  sub_100049DEC(&qword_1000C3588, (void (*)(uint64_t))type metadata accessor for WeatherDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v2 = *(id *)(v1 + 56);
  CurrentWeather.temperature.getter();
  NSString v3 = (void *)Measurement.unit.getter();
  id v4 = sub_100048AFC();
  sub_100014314(0, &qword_1000C4EF8);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[10], v0[7]);
  }
  else
  {
    id v6 = sub_100048AFC();
    Measurement<>.converted(to:)();
  }
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[5];
  uint64_t v10 = *(void (**)(void))(v0[8] + 8);
  v10();
  uint64_t v11 = NSMeasurementFormatter.string<A>(from:)();
  uint64_t v13 = v12;

  ((void (*)(uint64_t, uint64_t))v10)(v7, v8);
  swift_getKeyPath();
  uint64_t v14 = (void *)swift_task_alloc();
  v14[2] = v9;
  v14[3] = v11;
  v14[4] = v13;
  v0[3] = v9;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v15 = CurrentWeather.symbolName.getter();
  uint64_t v17 = v16;
  swift_getKeyPath();
  uint64_t v18 = (void *)swift_task_alloc();
  void v18[2] = v9;
  v18[3] = v15;
  v18[4] = v17;
  v0[4] = v9;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

id sub_100048AFC()
{
  uint64_t v0 = type metadata accessor for Locale.MeasurementSystem();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  id v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  id v6 = (char *)&v27 - v5;
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self _preferredTemperatureUnit];
  if (!v11) {
    goto LABEL_14;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v28 = v1;
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v18)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    id v21 = [self celsius];
    goto LABEL_17;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v1 = v28;
  if (v13 == v19 && v15 == v20)
  {
    swift_bridgeObjectRelease_n();
LABEL_13:
    id v21 = [self fahrenheit];
    goto LABEL_17;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22) {
    goto LABEL_13;
  }
LABEL_14:
  static Locale.current.getter();
  Locale.measurementSystem.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static Locale.MeasurementSystem.us.getter();
  char v23 = static Locale.MeasurementSystem.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v1 + 8);
  v24(v4, v0);
  v24(v6, v0);
  uint64_t v25 = self;
  if (v23) {
    id v21 = [v25 fahrenheit];
  }
  else {
    id v21 = [v25 celsius];
  }
LABEL_17:

  return v21;
}

uint64_t sub_100048E3C(uint64_t a1, int *a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100048F18;
  return v6(a1);
}

uint64_t sub_100048F18()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100049010()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100049048(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100049E34;
  id v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000C4EC8 + dword_1000C4EC8);
  return v6(a1, v4);
}

uint64_t sub_100049100()
{
  uint64_t v1 = *(void *)(sub_100007830(&qword_1000C4330) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = sub_100007830(&qword_1000C4320);
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100049234(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100007830(&qword_1000C4330) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100049E34;
  return sub_100044A94(a1, v5, v6, v7, v8);
}

uint64_t sub_10004933C()
{
  return sub_10004329C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100049358(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C4330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000493D0()
{
  return sub_1000499A0();
}

uint64_t sub_1000493F0()
{
  return sub_100049408();
}

uint64_t sub_100049408()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 96) = v0[3];
  *(void *)(v1 + 104) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_100049448()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + 56);
  *(void *)(v1 + 56) = v2;
  id v4 = v2;
}

uint64_t sub_100049480(uint64_t a1)
{
  return sub_100040744(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100049488()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000494C4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100049504(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100014438;
  return sub_10004567C(a1, v4, v5, v6);
}

uint64_t sub_1000495B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CurrentLocationResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004961C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10004967C()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000496CC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100049E34;
  return sub_100046584(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100049794()
{
  *(void *)(*(void *)(v0 + 16) + 32) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_1000497D0()
{
  uint64_t v1 = type metadata accessor for CurrentWeather();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000498A4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CurrentWeather() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100014438;
  return sub_1000486E0(a1, v5, v6, v7, v8);
}

uint64_t sub_1000499A0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 64) = v0[3];
  *(void *)(v1 + 72) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return sub_100042010();
}

uint64_t sub_1000499F8()
{
  return sub_100049A7C();
}

uint64_t sub_100049A18()
{
  return sub_100049A30();
}

uint64_t sub_100049A30()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)(v0[2] + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  *uint64_t v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100049A7C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 80) = v0[3];
  *(void *)(v1 + 88) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return sub_10004243C();
}

uint64_t sub_100049ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CurrentLocationResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100049B34(uint64_t a1)
{
  return sub_100049BD4(a1, (uint64_t)&unk_1000B4788, (uint64_t)&unk_1000B47D8, (uint64_t)sub_100049B68, (uint64_t)&unk_1000B47F0);
}

uint64_t sub_100049B68()
{
  return sub_100049D5C(&qword_1000C4D60, (void (*)(uint64_t))sub_10003D3C4);
}

uint64_t sub_100049B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100049B98()
{
  return swift_release();
}

uint64_t sub_100049BA4(uint64_t a1)
{
  return sub_100049BD4(a1, (uint64_t)&unk_1000B4828, (uint64_t)&unk_1000B4878, (uint64_t)sub_100049D3C, (uint64_t)&unk_1000B4890);
}

uint64_t sub_100049BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_1000410C0(a1, *(void *)(v5 + 16), v5 + ((*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), a2, a3, a4, a5);
}

uint64_t sub_100049C70()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100049D3C()
{
  return sub_100049D5C(&qword_1000C4D70, (void (*)(uint64_t))sub_10003D598);
}

uint64_t sub_100049D5C(uint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_1000415DC(*(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1, a2);
}

void sub_100049DD4()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 48) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100049DE4()
{
  return sub_100045380();
}

uint64_t sub_100049DEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100049E50()
{
}

uint64_t sub_100049E68()
{
  return sub_10004933C();
}

id sub_100049FA8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ViewController();
  [super dealloc];
}

uint64_t type metadata accessor for ViewController()
{
  return self;
}

void *sub_10004A000()
{
  type metadata accessor for AlertCoordinator();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_10004BAD0();
  qword_1000CAE10 = v0;
  return result;
}

uint64_t sub_10004A03C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v26 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = self;
  CGAffineTransform aBlock = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  CGAffineTransform aBlock = (void **)0xD000000000000020;
  unint64_t v30 = 0x800000010009B770;
  v15._uint64_t countAndFlagsBits = a1;
  v15._unint64_t object = a2;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0x644972656D697420;
  v16._unint64_t object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = a3;
  v17._unint64_t object = a4;
  String.append(_:)(v17);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 logInfo:v18];

  sub_10004A8A4(a1, (uint64_t)a2, a3, (uint64_t)a4);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v4;
  void v19[3] = a3;
  v19[4] = a4;
  uint64_t v33 = sub_10004C5F8;
  uint64_t v34 = v19;
  CGAffineTransform aBlock = _NSConcreteStackBlock;
  unint64_t v30 = 1107296256;
  uint64_t v31 = sub_10001C5B8;
  uint64_t v32 = &unk_1000B4AF0;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v28 = &_swiftEmptyArrayStorage;
  sub_10004C3C4((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007830((uint64_t *)&unk_1000C3FA0);
  sub_10004C40C((unint64_t *)&qword_1000C3B40, (uint64_t *)&unk_1000C3FA0);
  uint64_t v21 = v24;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
  return swift_release();
}

void sub_10004A3C8(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    if (qword_1000C2C70 != -1) {
      swift_once();
    }
    sub_10001F348(a2, a3);
  }
}

uint64_t sub_10004A440(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v31 = a2;
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = self;
  CGAffineTransform aBlock = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  CGAffineTransform aBlock = (void **)0xD000000000000020;
  unint64_t v38 = 0x800000010009B740;
  v14._uint64_t countAndFlagsBits = a2;
  v14._unint64_t object = a3;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0x206D72616C61202CLL;
  v15._unint64_t object = (void *)0xEC000000203A6469;
  String.append(_:)(v15);
  id v16 = [a1 alarmIDString];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  v20._uint64_t countAndFlagsBits = v17;
  v20._unint64_t object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 logInfo:v21];

  id v22 = [a1 alarmIDString];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  sub_10004A8A4(v31, (uint64_t)a3, v23, v25);
  swift_bridgeObjectRelease();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v4;
  *(void *)(v26 + 24) = a1;
  uint64_t v41 = sub_10004C5B0;
  uint64_t v42 = v26;
  CGAffineTransform aBlock = _NSConcreteStackBlock;
  unint64_t v38 = 1107296256;
  uint64_t v39 = sub_10001C5B8;
  uint64_t v40 = &unk_1000B4AA0;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_retain();
  id v28 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = &_swiftEmptyArrayStorage;
  sub_10004C3C4((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007830((uint64_t *)&unk_1000C3FA0);
  sub_10004C40C((unint64_t *)&qword_1000C3B40, (uint64_t *)&unk_1000C3FA0);
  uint64_t v29 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v29);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
  return swift_release();
}

uint64_t sub_10004A830(uint64_t result)
{
  if (*(void *)(result + 16))
  {
    if (qword_1000C2C78 != -1) {
      swift_once();
    }
    return dispatch thunk of DataStore.updateEntry(_:)();
  }
  return result;
}

uint64_t sub_10004A8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  Swift::String v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004B198();
  v19[1] = *(void *)(v4 + 32);
  id v16 = (void *)swift_allocObject();
  void v16[2] = v4;
  void v16[3] = a1;
  void v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = sub_10004C4B0;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001C5B8;
  aBlock[3] = &unk_1000B49D8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  NSString v21 = &_swiftEmptyArrayStorage;
  sub_10004C3C4((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007830((uint64_t *)&unk_1000C3FA0);
  sub_10004C40C((unint64_t *)&qword_1000C3B40, (uint64_t *)&unk_1000C3FA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v20);
  return swift_release();
}

uint64_t sub_10004AB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a4;
  v9[3] = a5;
  v9[4] = v8;
  objc_allocWithZone((Class)type metadata accessor for ProminentPresentationAssertion());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = ProminentPresentationAssertion.init(explanation:activityIdentifier:duration:invalidationHandler:)();
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;

  uint64_t v12 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 24) = v12;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100054A48(0, *(void *)(v12 + 16) + 1, 1, (char *)v12);
    uint64_t v12 = result;
    *(void *)(a1 + 24) = result;
  }
  unint64_t v15 = *(void *)(v12 + 16);
  unint64_t v14 = *(void *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    uint64_t result = (uint64_t)sub_100054A48((char *)(v14 > 1), v15 + 1, 1, (char *)v12);
    uint64_t v12 = result;
    *(void *)(a1 + 24) = result;
  }
  *(void *)(v12 + 16) = v15 + 1;
  unint64_t v16 = v12 + 16 * v15;
  *(void *)(v16 + 32) = a4;
  *(void *)(v16 + 40) = a5;
  return result;
}

void sub_10004ACF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v33 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = self;
  CGAffineTransform aBlock = 0;
  unint64_t v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  CGAffineTransform aBlock = (void **)0xD00000000000002DLL;
  unint64_t v35 = 0x800000010009B6B0;
  uint64_t v32 = a3;
  v13._uint64_t countAndFlagsBits = a3;
  unint64_t v14 = a4;
  v13._unint64_t object = a4;
  String.append(_:)(v13);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 logInfo:v15];

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v17 = (void *)Strong;
    CGAffineTransform aBlock = 0;
    unint64_t v35 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    uint64_t v40 = v17;
    type metadata accessor for AlertCoordinator();
    _print_unlocked<A, B>(_:_:)();
    v18._uint64_t countAndFlagsBits = 0xD000000000000039;
    v18._unint64_t object = (void *)0x800000010009B700;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = dispatch thunk of ProminentPresentationAssertion.activityIdentifier.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0x207472656C61202CLL;
    v20._unint64_t object = (void *)0xEC000000203A6469;
    String.append(_:)(v20);
    uint64_t v21 = v32;
    v22._uint64_t countAndFlagsBits = v32;
    id v28 = v14;
    v22._unint64_t object = v14;
    String.append(_:)(v22);
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 logInfo:v23];

    unint64_t v38 = sub_10004C564;
    uint64_t v39 = v17;
    CGAffineTransform aBlock = _NSConcreteStackBlock;
    unint64_t v35 = 1107296256;
    uint64_t v36 = sub_10001C5B8;
    uint64_t v37 = &unk_1000B4A50;
    uint64_t v24 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v40 = &_swiftEmptyArrayStorage;
    sub_10004C3C4((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100007830((uint64_t *)&unk_1000C3FA0);
    sub_10004C40C((unint64_t *)&qword_1000C3B40, (uint64_t *)&unk_1000C3FA0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    swift_release();
    uint64_t v25 = (void *)dispatch thunk of ProminentPresentationAssertion.activityIdentifier.getter();
    sub_10004BF50(v21, v28, v25, v26, 0);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v27 = String._bridgeToObjectiveC()();
    [v12 logInfo:v27];
  }
}

uint64_t sub_10004B198()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = *(void *)(v0 + 32);
  aBlock[4] = sub_10004C45C;
  uint64_t v13 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001C5B8;
  aBlock[3] = &unk_1000B4988;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v11[1] = &_swiftEmptyArrayStorage;
  sub_10004C3C4((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007830((uint64_t *)&unk_1000C3FA0);
  sub_10004C40C((unint64_t *)&qword_1000C3B40, (uint64_t *)&unk_1000C3FA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void sub_10004B428(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v3 = self;
    id v4 = v1;
    _StringGuts.grow(_:)(28);
    type metadata accessor for AlertCoordinator();
    _print_unlocked<A, B>(_:_:)();
    v5._unint64_t object = (void *)0x800000010009B670;
    v5._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v5);
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 logInfo:v6];

    dispatch thunk of ProminentPresentationAssertion.invalidate()();
    uint64_t v7 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_10004B52C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void **)(a1 + 24);
  uint64_t v8 = v7[2];
  if (v8)
  {
    uint64_t v11 = v7 + 5;
    while (1)
    {
      BOOL v12 = *(v11 - 1) == a2 && *v11 == (void)a3;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      v11 += 2;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v17 = sub_10004B85C(a2, (uint64_t)a3, v7);
    if ((v18 & 1) == 0)
    {
      unint64_t v26 = v17;
      Swift::String v19 = self;
      _StringGuts.grow(_:)(33);
      type metadata accessor for AlertCoordinator();
      _print_unlocked<A, B>(_:_:)();
      v20._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v20._unint64_t object = (void *)0x800000010009B600;
      String.append(_:)(v20);
      v21._uint64_t countAndFlagsBits = a2;
      v21._unint64_t object = a3;
      String.append(_:)(v21);
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 logInfo:v22];

      if (qword_1000C2C98 != -1) {
        swift_once();
      }
      sub_100050578(a2, a3, a4, a5);
      _StringGuts.grow(_:)(24);
      _print_unlocked<A, B>(_:_:)();
      v23._unint64_t object = (void *)0x800000010009B620;
      v23._uint64_t countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v23);
      v24._uint64_t countAndFlagsBits = a2;
      v24._unint64_t object = a3;
      String.append(_:)(v24);
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 logInfo:v25];

      sub_10004B944(v26);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
LABEL_9:
    uint64_t v13 = self;
    _StringGuts.grow(_:)(54);
    type metadata accessor for AlertCoordinator();
    _print_unlocked<A, B>(_:_:)();
    v14._uint64_t countAndFlagsBits = 0xD000000000000032;
    v14._unint64_t object = (void *)0x800000010009B5C0;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = a2;
    v15._unint64_t object = a3;
    String.append(_:)(v15);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 logInfo:v16];
  }
}

uint64_t sub_10004B85C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

uint64_t sub_10004B944(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10004BF3C(v3);
    uint64_t v3 = result;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v3 + 16 * a1;
    uint64_t v8 = *(void *)(v7 + 32);
    memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * (v5 - 1 - a1));
    *(void *)(v3 + 16) = v6;
    *uint64_t v1 = v3;
    return v8;
  }
  return result;
}

uint64_t sub_10004B9D0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AlertCoordinator()
{
  return self;
}

uint64_t type metadata accessor for AlertStore()
{
  uint64_t result = qword_1000C50B0;
  if (!qword_1000C50B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004BA90()
{
  return swift_initClassMetadata2();
}

void *sub_10004BAD0()
{
  v7[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v7[0] - 8);
  __chkstk_darwin(v7[0]);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  v0[2] = 0;
  v0[3] = &_swiftEmptyArrayStorage;
  sub_10003D384();
  static DispatchQoS.unspecified.getter();
  v7[1] = &_swiftEmptyArrayStorage;
  sub_10004C3C4((unint64_t *)&qword_1000C4300, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007830(&qword_1000C4308);
  sub_10004C40C((unint64_t *)&qword_1000C4310, &qword_1000C4308);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v7[0]);
  v0[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for AlertStore();
  swift_allocObject();
  v0[5] = DataStore.init(identifier:)();
  return v0;
}

uint64_t sub_10004BD54()
{
  return type metadata accessor for AlertStore();
}

uint64_t destroy for AlertEntry()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s10ClockAngel10AlertEntryVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AlertEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for AlertEntry(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AlertEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlertEntry()
{
  return &type metadata for AlertEntry;
}

unint64_t sub_10004BEE8()
{
  unint64_t result = qword_1000C5100;
  if (!qword_1000C5100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5100);
  }
  return result;
}

char *sub_10004BF3C(uint64_t a1)
{
  return sub_100054A48(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10004BF50(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5)
{
  int v32 = a5;
  uint64_t v30 = a2;
  uint64_t v31 = a4;
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  __chkstk_darwin(v11);
  char v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGAffineTransform aBlock = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  uint64_t v43 = v5;
  type metadata accessor for AlertCoordinator();
  _print_unlocked<A, B>(_:_:)();
  v14._unint64_t object = (void *)0x800000010009B580;
  v14._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = a1;
  v15._unint64_t object = a2;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0x697669746361202CLL;
  v16._unint64_t object = (void *)0xEE00203A64497974;
  String.append(_:)(v16);
  uint64_t v17 = a3;
  uint64_t v18 = v31;
  uint64_t v43 = a3;
  uint64_t v44 = v31;
  sub_100007830(&qword_1000C3750);
  _print_unlocked<A, B>(_:_:)();
  v19._unint64_t object = (void *)0x800000010009B5A0;
  v19._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v19);
  if (v32) {
    uint64_t v20 = 1702195828;
  }
  else {
    uint64_t v20 = 0x65736C6166;
  }
  if (v32) {
    Swift::String v21 = (void *)0xE400000000000000;
  }
  else {
    Swift::String v21 = (void *)0xE500000000000000;
  }
  NSString v22 = self;
  v23._uint64_t countAndFlagsBits = v20;
  v23._unint64_t object = v21;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 logInfo:v24];

  NSString v25 = (void *)swift_allocObject();
  v25[2] = v5;
  v25[3] = a1;
  void v25[4] = v30;
  v25[5] = v17;
  v25[6] = v18;
  uint64_t v41 = sub_10004C394;
  uint64_t v42 = v25;
  CGAffineTransform aBlock = _NSConcreteStackBlock;
  unint64_t v38 = 1107296256;
  uint64_t v39 = sub_10001C5B8;
  uint64_t v40 = &unk_1000B4960;
  unint64_t v26 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v43 = &_swiftEmptyArrayStorage;
  sub_10004C3C4((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007830((uint64_t *)&unk_1000C3FA0);
  sub_10004C40C((unint64_t *)&qword_1000C3B40, (uint64_t *)&unk_1000C3FA0);
  uint64_t v27 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v27);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
  return swift_release();
}

uint64_t sub_10004C394()
{
  return sub_10004C4C8((uint64_t (*)(void, void, void, void, void))sub_10004B52C);
}

uint64_t sub_10004C3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004C3BC()
{
  return swift_release();
}

uint64_t sub_10004C3C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004C40C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000C61C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10004C45C()
{
  sub_10004B428(v0);
}

uint64_t sub_10004C468()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004C4B0()
{
  return sub_10004C4C8(sub_10004AB78);
}

uint64_t sub_10004C4C8(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10004C4E0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004C518()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10004C558(uint64_t a1, uint64_t a2)
{
  sub_10004ACF4(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_10004C564()
{
  uint64_t v1 = *(void **)(v0 + 16);
  *(void *)(v0 + 16) = 0;
}

uint64_t sub_10004C570()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004C5B0()
{
  return sub_10004A830(*(void *)(v0 + 16));
}

uint64_t sub_10004C5B8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10004C5F8()
{
  sub_10004A3C8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10004C62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

double sub_10004C68C()
{
  if (qword_1000C2DA8 != -1) {
    swift_once();
  }
  return *(double *)&qword_1000CB038;
}

double sub_10004C6D8()
{
  return 28.0;
}

void sub_10004C6E0()
{
  uint64_t v1 = v0;
  id v2 = [v0 view];
  if (!v2)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v3 = v2;
  uint64_t v4 = self;
  id v5 = [v4 blackColor];
  [v3 setBackgroundColor:v5];

  uint64_t v6 = OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView;
  if (!*(void *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView])
  {
    uint64_t v112 = &type metadata for StandbyConfig;
    uint64_t v113 = &off_1000B4378;
    type metadata accessor for ObservableStopwatchModel();
    sub_10003A524();
    swift_retain();
    uint64_t v110 = ObservedObject.init(wrappedValue:)();
    uint64_t v111 = v7;
    uint64_t v8 = (char *)objc_allocWithZone((Class)sub_100007830((uint64_t *)&unk_1000C51B0));
    *(void *)&v8[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v8) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_10004F734((uint64_t)&v110, (uint64_t)v109);
    uint64_t v9 = (void *)UIHostingController.init(rootView:)();
    sub_10004F790((uint64_t)&v110);
    id v10 = [v9 view];
    if (!v10)
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    uint64_t v11 = v10;
    [v10 setTranslatesAutoresizingMaskIntoConstraints:0];

    id v12 = [v9 view];
    if (!v12)
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    char v13 = v12;
    id v14 = [v12 layer];

    [v14 setAllowsHitTesting:0];
    id v15 = [v9 view];
    if (!v15)
    {
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    Swift::String v16 = v15;
    id v17 = [v4 clearColor];
    [v16 setBackgroundColor:v17];

    [v1 addChildViewController:v9];
    id v18 = [v1 view];
    if (!v18)
    {
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    Swift::String v19 = v18;
    id v20 = [v9 view];
    if (!v20)
    {
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    Swift::String v21 = v20;
    [v19 addSubview:v20];

    [v9 didMoveToParentViewController:v1];
    NSString v22 = *(void **)&v1[v6];
    *(void *)&v1[v6] = v9;
  }
  uint64_t v23 = OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView;
  NSString v24 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView];
  if (v24) {
    goto LABEL_16;
  }
  uint64_t v112 = &type metadata for StandbyConfig;
  uint64_t v113 = &off_1000B4378;
  type metadata accessor for ObservableStopwatchModel();
  sub_10003A524();
  swift_retain();
  uint64_t v110 = ObservedObject.init(wrappedValue:)();
  uint64_t v111 = v25;
  unint64_t v26 = (char *)objc_allocWithZone((Class)sub_100007830((uint64_t *)&unk_1000C7090));
  *(void *)&v26[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v26) + 16) + 8] = 0;
  swift_unknownObjectWeakInit();
  sub_10004F684((uint64_t)&v110, (uint64_t)v109);
  uint64_t v27 = (void *)UIHostingController.init(rootView:)();
  sub_10004F6E0((uint64_t)&v110);
  id v28 = [v27 view];
  if (!v28)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  uint64_t v29 = v28;
  [v28 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v30 = [v27 view];
  if (!v30)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  uint64_t v31 = v30;
  id v32 = [v30 layer];

  [v32 setAllowsHitTesting:0];
  id v33 = [v27 view];
  if (!v33)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  uint64_t v34 = v33;
  id v35 = [v4 clearColor];
  [v34 setBackgroundColor:v35];

  [v1 addChildViewController:v27];
  id v36 = [v1 view];
  if (!v36)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v37 = v36;
  id v38 = [v27 view];
  if (!v38)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v39 = v38;
  [v37 addSubview:v38];

  [v27 didMoveToParentViewController:v1];
  uint64_t v40 = *(void **)&v1[v23];
  *(void *)&v1[v23] = v27;

  NSString v24 = *(void **)&v1[v23];
  if (v24)
  {
LABEL_16:
    id v41 = [v24 view];
    if (v41)
    {
      uint64_t v42 = v41;
      id v43 = [v41 leadingAnchor];

      sub_10004F2B0();
      sub_100007830((uint64_t *)&unk_1000C66F0);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_100095590;
      uint64_t v45 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
      uint64_t v46 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
      if (v46)
      {
        id v47 = [v46 bottomAnchor];
        id v48 = [v1 view];
        if (v48)
        {
          uint64_t v49 = v48;
          id v50 = [v48 bottomAnchor];

          id v51 = [v47 constraintEqualToAnchor:v50 constant:-52.0];
          *(void *)(v44 + 32) = v51;
          uint64_t v52 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
          uint64_t v53 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton];
          if (v53)
          {
            id v54 = [v53 centerYAnchor];
            uint64_t v55 = *(void **)&v1[v45];
            if (v55)
            {
              id v56 = [v55 centerYAnchor];
              id v57 = [v54 constraintEqualToAnchor:v56];

              *(void *)(v44 + 40) = v57;
              uint64_t v58 = *(void **)&v1[v23];
              if (v58)
              {
                id v59 = [v58 view];
                if (v59)
                {
                  uint64_t v60 = v59;
                  id v61 = [v59 leadingAnchor];

                  uint64_t v62 = *(void **)&v1[v45];
                  if (v62)
                  {
                    id v63 = [v62 trailingAnchor];
                    id v64 = [v61 constraintEqualToAnchor:v63 constant:17.0];

                    *(void *)(v44 + 48) = v64;
                    uint64_t v65 = *(void **)&v1[v23];
                    if (v65)
                    {
                      id v66 = [v65 view];
                      if (v66)
                      {
                        uint64_t v67 = v66;
                        id v68 = [v66 trailingAnchor];

                        id v69 = [v1 view];
                        if (v69)
                        {
                          uint64_t v70 = v69;
                          id v71 = [v69 trailingAnchor];

                          id v72 = [v68 constraintEqualToAnchor:v71 constant:-48.0];
                          *(void *)(v44 + 56) = v72;
                          uint64_t v73 = *(void **)&v1[v23];
                          if (v73)
                          {
                            id v74 = [v73 view];
                            if (v74)
                            {
                              uint64_t v75 = v74;
                              id v76 = [v74 centerYAnchor];

                              uint64_t v77 = *(void **)&v1[v52];
                              if (v77)
                              {
                                id v78 = [v77 centerYAnchor];
                                id v79 = [v76 constraintEqualToAnchor:v78];

                                *(void *)(v44 + 64) = v79;
                                unint64_t v80 = *(void **)&v1[v6];
                                if (v80)
                                {
                                  id v81 = [v80 view];
                                  if (v81)
                                  {
                                    uint64_t v82 = v81;
                                    id v83 = [v81 trailingAnchor];

                                    unint64_t v84 = *(void **)&v1[v23];
                                    if (v84)
                                    {
                                      id v85 = [v84 view];
                                      if (v85)
                                      {
                                        uint64_t v86 = v85;
                                        id v87 = [v85 trailingAnchor];

                                        id v88 = [v83 constraintEqualToAnchor:v87];
                                        *(void *)(v44 + 72) = v88;
                                        uint64_t v89 = *(void **)&v1[v6];
                                        if (v89)
                                        {
                                          id v90 = [v89 view];
                                          if (v90)
                                          {
                                            uint64_t v91 = v90;
                                            id v92 = [v90 leadingAnchor];

                                            uint64_t v93 = *(void **)&v1[v23];
                                            if (v93)
                                            {
                                              id v94 = [v93 view];
                                              if (v94)
                                              {
                                                uint64_t v95 = v94;
                                                id v96 = [v94 leadingAnchor];

                                                id v97 = [v92 constraintEqualToAnchor:v96];
                                                *(void *)(v44 + 80) = v97;
                                                unint64_t v98 = *(void **)&v1[v6];
                                                if (v98)
                                                {
                                                  id v99 = [v98 view];
                                                  if (v99)
                                                  {
                                                    char v100 = v99;
                                                    id v101 = [v99 bottomAnchor];

                                                    uint64_t v102 = *(void **)&v1[v23];
                                                    if (v102)
                                                    {
                                                      id v103 = [v102 view];
                                                      if (v103)
                                                      {
                                                        unint64_t v104 = v103;
                                                        Swift::String v105 = self;
                                                        id v106 = [v104 topAnchor];

                                                        id v107 = [v101 constraintEqualToAnchor:v106 constant:10.0];
                                                        *(void *)(v44 + 88) = v107;
                                                        uint64_t v110 = v44;
                                                        specialized Array._endMutation()();
                                                        sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
                                                        Class isa = Array._bridgeToObjectiveC()().super.isa;
                                                        swift_bridgeObjectRelease();
                                                        [v105 activateConstraints:isa];

                                                        return;
                                                      }
                                                      goto LABEL_69;
                                                    }
LABEL_68:
                                                    __break(1u);
LABEL_69:
                                                    __break(1u);
                                                    goto LABEL_70;
                                                  }
LABEL_67:
                                                  __break(1u);
                                                  goto LABEL_68;
                                                }
LABEL_66:
                                                __break(1u);
                                                goto LABEL_67;
                                              }
LABEL_65:
                                              __break(1u);
                                              goto LABEL_66;
                                            }
LABEL_64:
                                            __break(1u);
                                            goto LABEL_65;
                                          }
LABEL_63:
                                          __break(1u);
                                          goto LABEL_64;
                                        }
LABEL_62:
                                        __break(1u);
                                        goto LABEL_63;
                                      }
LABEL_61:
                                      __break(1u);
                                      goto LABEL_62;
                                    }
LABEL_60:
                                    __break(1u);
                                    goto LABEL_61;
                                  }
LABEL_59:
                                  __break(1u);
                                  goto LABEL_60;
                                }
LABEL_58:
                                __break(1u);
                                goto LABEL_59;
                              }
LABEL_57:
                              __break(1u);
                              goto LABEL_58;
                            }
LABEL_56:
                            __break(1u);
                            goto LABEL_57;
                          }
LABEL_55:
                          __break(1u);
                          goto LABEL_56;
                        }
LABEL_54:
                        __break(1u);
                        goto LABEL_55;
                      }
LABEL_53:
                      __break(1u);
                      goto LABEL_54;
                    }
LABEL_52:
                    __break(1u);
                    goto LABEL_53;
                  }
LABEL_51:
                  __break(1u);
                  goto LABEL_52;
                }
LABEL_50:
                __break(1u);
                goto LABEL_51;
              }
LABEL_49:
              __break(1u);
              goto LABEL_50;
            }
LABEL_48:
            __break(1u);
            goto LABEL_49;
          }
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_80:
  __break(1u);
}

void sub_10004D220()
{
  uint64_t v1 = v0;
  id v2 = [self buttonWithType:0];
  uint64_t v3 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton];
  *(void *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = v2;

  id v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = self;
  id v7 = v5;
  id v8 = [v6 systemGray4Color];
  [v7 setBackgroundColor:v8];

  uint64_t v9 = *(void **)&v1[v3];
  if (!v9)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v10 = *(void **)&v1[v3];
  if (!v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_100014314(0, &qword_1000C3760);
  *(void *)(swift_allocObject() + 16) = v10;
  id v11 = v10;
  id v12 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  id v14 = v11;
  id v15 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  [v14 addAction:v12 forControlEvents:17];
  [v14 addAction:v15 forControlEvents:352];

  Swift::String v16 = *(void **)&v1[v3];
  if (!v16)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v17 = self;
  id v18 = v16;
  id v19 = [v17 configurationWithPointSize:54.0];
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [self systemImageNamed:v20 withConfiguration:v19];

  [v18 setImage:v21 forState:0];
  NSString v22 = *(void **)&v1[v3];
  if (!v22)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  [v22 setAdjustsImageWhenHighlighted:0];
  uint64_t v23 = *(void **)&v1[v3];
  if (!v23)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  id v24 = [v23 layer];
  if (qword_1000C2DA8 != -1) {
    swift_once();
  }
  [v24 setCornerRadius:*(double *)&qword_1000CB038 * 0.5];

  uint64_t v25 = *(void **)&v1[v3];
  if (!v25) {
    goto LABEL_23;
  }
  unint64_t v26 = self;
  id v27 = v25;
  id v28 = [v26 mtOrange];
  [v27 setTintColor:v28];

  uint64_t v29 = *(void **)&v1[v3];
  if (!v29)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  id v30 = v29;
  id v31 = [v26 mtOrange];
  id v32 = [v31 colorWithAlphaComponent:0.35];

  [v30 setBackgroundColor:v32];
  id v33 = *(void **)&v1[v3];
  if (!v33)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  [v33 addTarget:v1 action:"playPausedAction" forControlEvents:64];
  id v34 = [v1 view];
  if (!v34)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (!*(void *)&v1[v3])
  {
LABEL_27:
    __break(1u);
    return;
  }
  id v35 = v34;
  [v34 addSubview:];
}

void sub_10004D6D8()
{
  uint64_t v1 = v0;
  id v2 = [self buttonWithType:0];
  uint64_t v3 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
  *(void *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton] = v2;

  id v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_16;
  }
  [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v6 = *(void **)&v0[v3];
  if (!v6)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v7 = self;
  id v8 = v6;
  id v9 = [v7 systemGray4Color];
  [v8 setBackgroundColor:v9];

  id v10 = *(void **)&v1[v3];
  if (!v10)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_100014314(0, &qword_1000C3760);
  *(void *)(swift_allocObject() + 16) = v10;
  id v11 = v10;
  id v12 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  id v14 = v11;
  uint64_t v31 = v13;
  id v15 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  [v14 addAction:v12 forControlEvents:17];
  [v14 addAction:v15 forControlEvents:352];

  Swift::String v16 = *(void **)&v1[v3];
  if (!v16)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v17 = [v16 layer];
  if (qword_1000C2DA8 != -1) {
    swift_once();
  }
  [v17 setCornerRadius:*(double *)&qword_1000CB038 * 0.5];

  id v18 = [v1 view];
  if (!v18) {
    goto LABEL_19;
  }
  if (!*(void *)&v1[v3])
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v19 = v18;
  [v18 addSubview:];

  double v20 = *(double *)&qword_1000CB038;
  id v21 = objc_allocWithZone((Class)type metadata accessor for SpinnyResetView());
  id v22 = sub_100031148(0.0, 0.0, v20, v20, 54.0, 54.0);
  uint64_t v23 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView;
  id v24 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView];
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView] = v22;

  uint64_t v25 = *(void **)&v1[v3];
  if (!v25)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v1;
  id v27 = v1;
  id v28 = v25;
  uint64_t v32 = v26;
  uint64_t v29 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  [v28 addAction:v29 forControlEvents:64];

  id v30 = *(void **)&v1[v3];
  if (!v30)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!*(void *)&v1[v23])
  {
LABEL_23:
    __break(1u);
    return;
  }

  [v30 addSubview:];
}

void sub_10004DAD8(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a2 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView);
  if (v2)
  {
    if ((*((unsigned char *)v2 + OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode) & 1) == 0)
    {
      uint64_t v3 = swift_allocObject();
      *(void *)(v3 + 16) = v2;
      id v4 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v8[4] = sub_1000142A8;
      v8[5] = v3;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 1107296256;
      v8[2] = sub_10001C5B8;
      v8[3] = &unk_1000B4BB8;
      id v5 = _Block_copy(v8);
      id v6 = v2;
      swift_release();
      id v7 = [v4 initWithDuration:v5 dampingRatio:0.5 animations:1.0];
      _Block_release(v5);
      [v7 startAnimation];
    }
    sub_100010E04();
  }
  else
  {
    __break(1u);
  }
}

void sub_10004DC28()
{
  uint64_t v1 = v0;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v2)
  {
    id v3 = v2;
    id v4 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

    id v5 = [v4 state];
    if (v5 == (id)1)
    {
      id v6 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton);
      if (v6) {
        goto LABEL_6;
      }
LABEL_10:
      __break(1u);
      return;
    }
  }
  id v6 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton);
  if (!v6)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_6:
  id v7 = self;
  id v8 = v6;
  id v9 = [v7 configurationWithPointSize:54.0];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [self systemImageNamed:v10 withConfiguration:v9];

  [v8 setImage:v11 forState:0];
}

void sub_10004DE14()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView);
  if (v1)
  {
    id v2 = [v1 view];
    if (v2)
    {
      id v3 = v2;
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      [v3 setHidden:v4 < 2];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10004DEF4(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_glyphSize] = 0x404B000000000000;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadButtonPadding] = 0x404A000000000000;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadCountdownPadding] = 0x4038000000000000;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_lapLabelOffset] = 0x4024000000000000;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_buttonBottomPadding] = 0x404A000000000000;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_rightEdgePadding] = 0x4048000000000000;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for StopwatchStandbyController();
  id v3 = [super initWithCoder:a1];

  return v3;
}

id sub_10004DFE0(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_glyphSize] = 0x404B000000000000;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadButtonPadding] = 0x404A000000000000;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadCountdownPadding] = 0x4038000000000000;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_lapLabelOffset] = 0x4024000000000000;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_buttonBottomPadding] = 0x404A000000000000;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_rightEdgePadding] = 0x4048000000000000;
  if (a2)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for StopwatchStandbyController();
  [super initWithNibName:v5 bundle:a3];

  return v6;
}

void sub_10004E0EC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView);
}

id sub_10004E12C()
{
  return sub_10004EDF8(type metadata accessor for StopwatchStandbyController);
}

uint64_t type metadata accessor for StopwatchStandbyController()
{
  return self;
}

void sub_10004E1B8()
{
  uint64_t v1 = v0;
  id v2 = sub_10008C3E4();
  if (!v2)
  {
    id v27 = self;
    _StringGuts.grow(_:)(58);
    id v28 = [v0 description];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    v32._uint64_t countAndFlagsBits = v29;
    v32._unint64_t object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 0xD000000000000038;
    v33._unint64_t object = (void *)0x800000010009B910;
    String.append(_:)(v33);
    id isa = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v27 logInfo:isa];
    goto LABEL_7;
  }
  id v3 = v2;
  [v2 setAccessibilityIgnoresInvertColors:1];
  uint64_t v4 = self;
  _StringGuts.grow(_:)(50);
  id v5 = [v0 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v6._unint64_t object = (void *)0x800000010009B950;
  v6._uint64_t countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 logInfo:v7];

  id v8 = [v0 view];
  if (!v8)
  {
    __break(1u);
    goto LABEL_11;
  }
  id v9 = v8;
  [v8 addSubview:v3];

  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100095580;
  id v11 = [v3 topAnchor];
  id v12 = [v1 view];
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v13 = v12;
  id v14 = [v12 topAnchor];

  id v15 = [v11 constraintEqualToAnchor:v14 constant:4.0];
  *(void *)(v10 + 32) = v15;
  id v16 = [v3 widthAnchor];
  id v17 = [v16 constraintEqualToConstant:32.0];

  *(void *)(v10 + 40) = v17;
  id v18 = [v3 heightAnchor];
  id v19 = [v3 widthAnchor];
  id v20 = [v18 constraintEqualToAnchor:v19];

  *(void *)(v10 + 48) = v20;
  id v21 = [v3 centerXAnchor];
  id v22 = [v1 view];
  if (!v22)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v23 = v22;
  id v24 = self;
  id v25 = [v23 centerXAnchor];

  id v26 = [v21 constraintEqualToAnchor:v25];
  *(void *)(v10 + 56) = v26;
  specialized Array._endMutation()();
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  id isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v24 activateConstraints:isa];

LABEL_7:
}

void sub_10004E634(char a1, char a2, double a3, double a4, long double a5, double a6)
{
  v20.receiver = v6;
  v20.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  [super didUpdateCurrentInterval:a1 & 1 adjustedCurrentInterval:a2 & 1 totalInterval:a3 adjustedTotalInterval:a4 isStopwatchRunning:a5 isStopwatchStopped:a6];
  uint64_t v13 = *(void *)&v6[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation];
  [self setDisableActions:1];
  id v14 = *(void **)(v13 + 32);
  if (v14)
  {
    long double v15 = 360.0 - fmod(a5, 60.0) / 60.0 * 360.0;
    id v16 = self;
    id v17 = v14;
    [v16 radFromDeg:(double)v15];
    CATransform3DMakeRotation(&v19, v18, 0.0, 0.0, 1.0);
    [v17 setTransform:&v19];
  }
}

void sub_10004E818()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  [super didPauseLapTimer];
  uint64_t v1 = *(void **)(*(void *)&v0[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation]
                + 16);
  if (v1)
  {
    id v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 setState:v3];
  }
}

void sub_10004E8EC()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  [super didResumeLapTimer];
  uint64_t v1 = *(void **)(*(void *)&v0[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation]
                + 16);
  if (v1)
  {
    id v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 setState:v3];
  }
}

char *sub_10004E9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation;
  type metadata accessor for StopwatchRunningAnimation(0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  uint64_t v7 = v6 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  uint64_t v8 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)(v6 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(void *)(v2 + v5) = v6;
  *(void *)(v2 + OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_elementSize) = 0x4040000000000000;
  *(void *)(v2 + OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_topMargin) = 0x4010000000000000;

  return sub_10000FEAC(a1, a2);
}

id sub_10004EAC0(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation;
  type metadata accessor for StopwatchRunningAnimation(0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  uint64_t v5 = v4 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  uint64_t v6 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)(v4 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(void *)&v1[v3] = v4;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_elementSize] = 0x4040000000000000;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_topMargin] = 0x4010000000000000;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  id v7 = [super initWithCoder:a1];

  return v7;
}

id sub_10004EBF8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation;
  type metadata accessor for StopwatchRunningAnimation(0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  uint64_t v8 = v7 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  uint64_t v9 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)(v7 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(void *)&v3[v6] = v7;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_elementSize] = 0x4040000000000000;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_topMargin] = 0x4010000000000000;
  if (a2)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  id v11 = [super initWithNibName:v10 bundle:a3];

  return v11;
}

uint64_t sub_10004ED5C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  id v10 = a4;
  return a5(v7, v9, a4);
}

uint64_t sub_10004EDD0()
{
  return swift_release();
}

id sub_10004EDE0()
{
  return sub_10004EDF8(type metadata accessor for StopwatchStandbyCompressedController);
}

id sub_10004EDF8(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for StopwatchStandbyCompressedController()
{
  return self;
}

void sub_10004EE64(uint64_t a1, void *a2)
{
  objc_super v3 = self;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  id v12 = sub_10004F2A8;
  uint64_t v13 = v4;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  id v10 = sub_10001C5B8;
  id v11 = &unk_1000B4C80;
  uint64_t v5 = _Block_copy(&v8);
  id v6 = a2;
  swift_release();
  id v12 = (id (*)())j___s10ClockAngel5FrameV9timestampSdvg;
  uint64_t v13 = 0;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  id v10 = sub_10004C62C;
  id v11 = &unk_1000B4CA8;
  uint64_t v7 = _Block_copy(&v8);
  [v3 _animateUsingSpringWithDampingRatio:1 response:v5 tracking:v7 dampingRatioSmoothing:1.0 responseSmoothing:0.3 targetSmoothing:0.0 projectionDeceleration:0.0 animations:0.0 completion:0.0];
  _Block_release(v7);
  _Block_release(v5);
}

id sub_10004EFE0(void *a1)
{
  CGAffineTransformMakeScale(&v3, 0.9, 0.9);
  [a1 setTransform:&v3];
  return [a1 setAlpha:0.75];
}

void sub_10004F054(uint64_t a1, void *a2)
{
  CGAffineTransform v3 = self;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  id v12 = sub_10004F2A0;
  uint64_t v13 = v4;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  id v10 = sub_10001C5B8;
  id v11 = &unk_1000B4C08;
  uint64_t v5 = _Block_copy(&v8);
  id v6 = a2;
  swift_release();
  id v12 = (id (*)())Frame.timestamp.getter;
  uint64_t v13 = 0;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  id v10 = sub_10004C62C;
  id v11 = &unk_1000B4C30;
  uint64_t v7 = _Block_copy(&v8);
  [v3 _animateUsingSpringWithDampingRatio:1 response:v5 tracking:v7 dampingRatioSmoothing:1.0 responseSmoothing:0.4 targetSmoothing:0.0 projectionDeceleration:0.0 animations:0.0 completion:0.0];
  _Block_release(v7);
  _Block_release(v5);
}

id sub_10004F1CC(void *a1)
{
  long long v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  [a1 setTransform:v4];
  return [a1 setAlpha:1.0];
}

uint64_t sub_10004F238()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10004F270(uint64_t a1)
{
  sub_10004EE64(a1, *(void **)(v1 + 16));
}

void sub_10004F278(uint64_t a1)
{
  sub_10004F054(a1, *(void **)(v1 + 16));
}

void sub_10004F280(uint64_t a1)
{
  sub_10004DAD8(a1, *(void *)(v1 + 16));
}

uint64_t sub_10004F288(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004F298()
{
  return swift_release();
}

id sub_10004F2A0()
{
  return sub_10004F1CC(*(void **)(v0 + 16));
}

id sub_10004F2A8()
{
  return sub_10004EFE0(*(void **)(v0 + 16));
}

void sub_10004F2B0()
{
  uint64_t v1 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
  if (!*(void *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton])
  {
    sub_10004D220();
    sub_10004D6D8();
  }
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1000971A0;
  CGAffineTransform v3 = *(void **)&v0[v1];
  if (!v3)
  {
    __break(1u);
    goto LABEL_20;
  }
  id v4 = [v3 leadingAnchor];
  id v5 = [v0 view];
  if (!v5)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v6 = v5;
  id v7 = [v5 leadingAnchor];

  id v8 = [v4 constraintEqualToAnchor:v7 constant:52.0];
  *(void *)(v2 + 32) = v8;
  uint64_t v9 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
  id v10 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
  if (!v10)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v11 = [v10 leadingAnchor];
  id v12 = *(void **)&v0[v1];
  if (!v12)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v13 = [v12 trailingAnchor];
  id v14 = [v11 constraintEqualToAnchor:v13 constant:28.0];

  *(void *)(v2 + 40) = v14;
  long double v15 = *(void **)&v0[v1];
  if (!v15)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  id v16 = [v15 widthAnchor];
  id v17 = *(void **)&v0[v1];
  if (!v17)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  id v18 = [v17 heightAnchor];
  id v19 = [v16 constraintEqualToAnchor:v18];

  *(void *)(v2 + 48) = v19;
  objc_super v20 = *(void **)&v0[v1];
  if (!v20)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v21 = [v20 widthAnchor];
  id v22 = *(void **)&v0[v9];
  if (!v22)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v23 = [v22 widthAnchor];
  id v24 = [v21 constraintEqualToAnchor:v23];

  *(void *)(v2 + 56) = v24;
  id v25 = *(void **)&v0[v1];
  if (!v25)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  id v26 = [v25 widthAnchor];
  id v27 = *(void **)&v0[v9];
  if (!v27)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  id v28 = [v27 heightAnchor];
  id v29 = [v26 constraintEqualToAnchor:v28];

  *(void *)(v2 + 64) = v29;
  id v30 = *(void **)&v0[v1];
  if (!v30)
  {
LABEL_29:
    __break(1u);
    return;
  }
  uint64_t v31 = self;
  id v32 = [v30 widthAnchor];
  if (qword_1000C2DA8 != -1) {
    swift_once();
  }
  id v33 = [v32 constraintEqualToConstant:*(double *)&qword_1000CB038];

  *(void *)(v2 + 72) = v33;
  specialized Array._endMutation()();
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v31 activateConstraints:isa];
}

uint64_t sub_10004F684(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10004F6E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004F734(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10004F790(uint64_t a1)
{
  return a1;
}

id sub_10004FA90()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for AppDelegate()
{
  return self;
}

unint64_t sub_10004FAF8()
{
  unint64_t result = qword_1000C2F90;
  if (!qword_1000C2F90)
  {
    type metadata accessor for LaunchOptionsKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C2F90);
  }
  return result;
}

void sub_10004FB50(uint64_t a1, void *a2, char a3)
{
  id v4 = v3;
  id v8 = self;
  _StringGuts.grow(_:)(41);
  id v9 = [v3 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();

  *(void *)&long long aBlock = v10;
  *((void *)&aBlock + 1) = v12;
  v13._unint64_t object = (void *)0x800000010009C260;
  v13._uint64_t countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = a1;
  v14._unint64_t object = a2;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 logInfo:v15];

  id v16 = *(void **)&v3[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v16)
  {
    long long aBlock = 0u;
    long long v47 = 0u;
LABEL_9:
    uint64_t v45 = a1;
    char v27 = a3;
    sub_10000FAF8((uint64_t)&aBlock, &qword_1000C5370);
    goto LABEL_11;
  }
  if ([v16 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v50, 0, sizeof(v50));
  }
  sub_1000549E0((uint64_t)v50, (uint64_t)&aBlock);
  if (!*((void *)&v47 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if (swift_dynamicCast())
  {
    id v17 = *(void **)&v50[0];
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    id v18 = [v3 description];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v21 = v20;

    v22._uint64_t countAndFlagsBits = v19;
    v22._unint64_t object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 0xD000000000000035;
    v23._unint64_t object = (void *)0x800000010009C320;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = a1;
    v24._unint64_t object = a2;
    String.append(_:)(v24);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 logInfo:v25];

    NSString v26 = String._bridgeToObjectiveC()();
    [v17 resendAlarmDataEntryWithId:v26];
    swift_unknownObjectRelease();
LABEL_15:

    return;
  }
  uint64_t v45 = a1;
  char v27 = a3;
LABEL_11:
  *(void *)&long long aBlock = 0;
  *((void *)&aBlock + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  id v28 = [v3 description];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  v32._uint64_t countAndFlagsBits = v29;
  v32._unint64_t object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0xD000000000000037;
  v33._unint64_t object = (void *)0x800000010009C290;
  String.append(_:)(v33);
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 logInfo:v34];

  if ((v27 & 1) == 0)
  {
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    id v40 = [v4 description];
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();

    *(void *)&long long aBlock = v41;
    *((void *)&aBlock + 1) = v43;
    v44._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v44._unint64_t object = (void *)0x800000010009C2D0;
    String.append(_:)(v44);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 logInfo:v26];
    goto LABEL_15;
  }
  id v35 = sub_100050DFC();
  NSString v26 = [v35 alarms];

  if (v26)
  {
    uint64_t v36 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v37 = (void *)swift_allocObject();
    _OWORD v37[2] = v36;
    v37[3] = v45;
    v37[4] = a2;
    id v48 = sub_1000553F4;
    uint64_t v49 = v37;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v47 = sub_1000516E8;
    *((void *)&v47 + 1) = &unk_1000B4F78;
    id v38 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_release();
    id v39 = [v26 addSuccessBlock:v38];
    _Block_release(v38);

    goto LABEL_15;
  }
  __break(1u);
}

void sub_100050074(uint64_t a1, uint64_t a2, char a3)
{
  id v4 = v3;
  id v8 = self;
  _StringGuts.grow(_:)(29);
  id v9 = [v3 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();

  *(void *)&long long aBlock = v10;
  *((void *)&aBlock + 1) = v12;
  v13._unint64_t object = (void *)0x800000010009C3C0;
  v13._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 logInfo:v14];

  NSString v15 = *(void **)&v3[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v15)
  {
    long long aBlock = 0u;
    long long v47 = 0u;
LABEL_9:
    uint64_t v24 = a2;
    char v25 = a3;
    uint64_t v45 = v24;
    uint64_t v26 = a1;
    sub_10000FAF8((uint64_t)&aBlock, &qword_1000C5370);
    goto LABEL_11;
  }
  if ([v15 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v50, 0, sizeof(v50));
  }
  sub_1000549E0((uint64_t)v50, (uint64_t)&aBlock);
  if (!*((void *)&v47 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if (swift_dynamicCast())
  {
    id v16 = *(void **)&v50[0];
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    id v17 = [v3 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();

    *(void *)&long long aBlock = v18;
    *((void *)&aBlock + 1) = v20;
    v21._uint64_t countAndFlagsBits = 0xD000000000000026;
    v21._unint64_t object = (void *)0x800000010009C450;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 logInfo:v22];

    NSString v23 = String._bridgeToObjectiveC()();
    [v16 resendTimerDataEntryWithId:v23];
    swift_unknownObjectRelease();
LABEL_15:

    return;
  }
  uint64_t v27 = a2;
  char v25 = a3;
  uint64_t v45 = v27;
  uint64_t v26 = a1;
LABEL_11:
  *(void *)&long long aBlock = 0;
  *((void *)&aBlock + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  id v28 = [v3 description];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  v32._uint64_t countAndFlagsBits = v29;
  v32._unint64_t object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0xD000000000000037;
  v33._unint64_t object = (void *)0x800000010009C3E0;
  String.append(_:)(v33);
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 logInfo:v34];

  if ((v25 & 1) == 0)
  {
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    id v40 = [v4 description];
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();

    *(void *)&long long aBlock = v41;
    *((void *)&aBlock + 1) = v43;
    v44._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v44._unint64_t object = (void *)0x800000010009C420;
    String.append(_:)(v44);
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 logInfo:v23];
    goto LABEL_15;
  }
  id v35 = sub_100050DE8();
  NSString v23 = [v35 timers];

  if (v23)
  {
    uint64_t v36 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v37 = (void *)swift_allocObject();
    _OWORD v37[2] = v36;
    v37[3] = v26;
    v37[4] = v45;
    id v48 = sub_100055444;
    uint64_t v49 = v37;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v47 = sub_1000516E8;
    *((void *)&v47 + 1) = &unk_1000B4FC8;
    id v38 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_release();
    id v39 = [v23 addSuccessBlock:v38];
    _Block_release(v38);

    goto LABEL_15;
  }
  __break(1u);
}

void sub_100050578(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8 = self;
  _StringGuts.grow(_:)(29);
  id v9 = [v4 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();

  *(void *)&long long v37 = v10;
  *((void *)&v37 + 1) = v12;
  v13._unint64_t object = (void *)0x800000010009BF40;
  v13._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = a1;
  v14._unint64_t object = a2;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 logInfo:v15];

  id v16 = *(void **)&v4[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v16)
  {
    long long v37 = 0u;
    long long v38 = 0u;
LABEL_9:
    sub_10000FAF8((uint64_t)&v37, &qword_1000C5370);
    goto LABEL_10;
  }
  if ([v16 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v36, 0, sizeof(v36));
  }
  sub_1000549E0((uint64_t)v36, (uint64_t)&v37);
  if (!*((void *)&v38 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)&long long v37 = 0;
    *((void *)&v37 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    id v29 = [v4 description];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();

    *(void *)&long long v37 = v30;
    *((void *)&v37 + 1) = v32;
    v33._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v33._unint64_t object = (void *)0x800000010009BF60;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = a1;
    v34._unint64_t object = a2;
    String.append(_:)(v34);
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 logInfo:v28];
    goto LABEL_11;
  }
  id v17 = *(void **)&v36[0];
  *(void *)&long long v37 = 0;
  *((void *)&v37 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(68);
  id v18 = [v4 description];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v21 = v20;

  v22._uint64_t countAndFlagsBits = v19;
  v22._unint64_t object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0xD000000000000030;
  v23._unint64_t object = (void *)0x800000010009BF80;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = a1;
  v24._unint64_t object = a2;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0x697669746361202CLL;
  v25._unint64_t object = (void *)0xEE00203A64497974;
  String.append(_:)(v25);
  *(void *)&v36[0] = a3;
  *((void *)&v36[0] + 1) = a4;
  sub_100007830(&qword_1000C3750);
  _print_unlocked<A, B>(_:_:)();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 logInfo:v26];

  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 didEndAlertWithId:v27 activityId:v28];
  swift_unknownObjectRelease();

LABEL_11:
}

void sub_100050968(uint64_t a1, void *a2)
{
  id v5 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v5)
  {
    long long v25 = 0u;
    long long v26 = 0u;
LABEL_9:
    sub_10000FAF8((uint64_t)&v25, &qword_1000C5370);
    goto LABEL_10;
  }
  if ([v5 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  sub_1000549E0((uint64_t)v24, (uint64_t)&v25);
  if (!*((void *)&v26 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    id v16 = self;
    *(void *)&long long v25 = 0;
    *((void *)&v25 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    id v17 = [v2 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();

    *(void *)&long long v25 = v18;
    *((void *)&v25 + 1) = v20;
    v21._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v21._unint64_t object = (void *)0x800000010009BBE0;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 logInfo:v22];

    id v23 = sub_100050DFC();
    NSString v15 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  id v6 = *(void **)&v24[0];
  id v7 = self;
  *(void *)&long long v25 = 0;
  *((void *)&v25 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  id v8 = [v2 description];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();

  *(void *)&long long v25 = v9;
  *((void *)&v25 + 1) = v11;
  v12._unint64_t object = (void *)0x800000010009BC10;
  v12._uint64_t countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = a1;
  v13._unint64_t object = a2;
  String.append(_:)(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 logInfo:v14];

  NSString v15 = String._bridgeToObjectiveC()();
  [v6 snoozeAlarmWithId:v15];
  swift_unknownObjectRelease();
LABEL_11:
}

id sub_100050C4C()
{
  uint64_t v1 = OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___interface;
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___interface);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___interface);
  }
  else
  {
    id v4 = sub_100050CAC();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    objc_super v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_100050CAC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self interfaceWithIdentifier:v0];

  objc_super v2 = self;
  id v3 = [v2 protocolForProtocol:&OBJC_PROTOCOL___ClockAngelServer];
  [v1 setServer:v3];

  id v4 = [v2 protocolForProtocol:&OBJC_PROTOCOL___ClockAngelClient];
  [v1 setClient:v4];

  [v1 setClientMessagingExpectation:0];
  return v1;
}

id sub_100050DB8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ClockAngelConnectionManager()) init];
  qword_1000CAE28 = (uint64_t)result;
  return result;
}

id sub_100050DE8()
{
  return sub_100050E10(&OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___timerManager, (Class *)MTTimerManager_ptr);
}

id sub_100050DFC()
{
  return sub_100050E10(&OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___alarmManager, (Class *)MTAlarmManager_ptr);
}

id sub_100050E10(uint64_t *a1, Class *a2)
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = [objc_allocWithZone(*a2) init];
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

void sub_100050E7C()
{
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  *(void *)&v0[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_publicListener] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection] = 0;
  uint64_t v19 = OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connectionManagerQueue;
  sub_10003D384();
  id v6 = v0;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1000552EC();
  sub_100007830(&qword_1000C4308);
  sub_100055344();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v20);
  *(void *)&v0[v19] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v7 = &v6[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout];
  *(void *)id v7 = 0;
  *((void *)v7 + 1) = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___interface] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___timerManager] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___alarmManager] = 0;

  id v8 = (objc_class *)type metadata accessor for ClockAngelConnectionManager();
  v24.receiver = v6;
  v24.super_class = v8;
  [super init];
  id v22 = v9;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1000553A0;
  *(void *)(v10 + 24) = &v21;
  aBlock[4] = sub_10005548C;
  void aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005131C;
  aBlock[3] = &unk_1000B4F00;
  uint64_t v11 = _Block_copy(aBlock);
  Swift::String v12 = self;
  Swift::String v13 = (char *)v9;
  swift_retain();
  id v14 = [v12 listenerWithConfigurator:v11];
  _Block_release(v11);
  swift_release();
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v11)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_publicListener;
    id v16 = *(void **)&v13[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_publicListener];
    *(void *)&v13[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_publicListener] = v14;

    id v17 = *(void **)&v13[v15];
    if (v17)
    {
      id v18 = v17;
      [v18 activate];

      return;
    }
  }
  __break(1u);
}

id sub_10005125C(void *a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a1 setDomain:v4];

  NSString v5 = String._bridgeToObjectiveC()();
  [a1 setService:v5];

  return [a1 setDelegate:a2];
}

void sub_100051344(void *a1, char *a2)
{
  [a1 setTargetQueue:*(void *)&a2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connectionManagerQueue]];
  id v4 = [self userInitiated];
  [a1 setServiceQuality:v4];

  id v5 = sub_100050C4C();
  [a1 setInterface:v5];

  [a1 setInterfaceTarget:a2];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  uint64_t v19 = sub_1000552D4;
  uint64_t v20 = v6;
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  id v17 = sub_1000516E8;
  id v18 = &unk_1000B4E10;
  id v7 = _Block_copy(&v15);
  id v8 = a2;
  swift_release();
  [a1 setActivationHandler:v7];
  _Block_release(v7);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  uint64_t v19 = sub_1000552DC;
  uint64_t v20 = v9;
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  id v17 = sub_1000516E8;
  id v18 = &unk_1000B4E60;
  uint64_t v10 = _Block_copy(&v15);
  uint64_t v11 = v8;
  swift_release();
  [a1 setInvalidationHandler:v10];
  _Block_release(v10);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  uint64_t v19 = sub_1000552E4;
  uint64_t v20 = v12;
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  id v17 = sub_1000516E8;
  id v18 = &unk_1000B4EB0;
  Swift::String v13 = _Block_copy(&v15);
  id v14 = v11;
  swift_release();
  [a1 setInterruptionHandler:v13];
  _Block_release(v13);
}

void sub_1000515F0(uint64_t a1, void *a2)
{
  uint64_t v3 = self;
  _StringGuts.grow(_:)(28);
  id v4 = [a2 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v5._unint64_t object = (void *)0x800000010009C1B0;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v5);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 logInfo:v6];
}

void sub_1000516EC(uint64_t a1, char *a2)
{
  uint64_t v3 = self;
  _StringGuts.grow(_:)(30);
  id v4 = [a2 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();

  v8._unint64_t object = (void *)0x800000010009C190;
  v8._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v8);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 logInfo:v9, v5, v7];

  uint64_t v10 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  *(void *)&a2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection] = 0;
}

id sub_1000517F4(void *a1, void *a2)
{
  id v4 = self;
  _StringGuts.grow(_:)(30);
  id v5 = [a2 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();

  v9._unint64_t object = (void *)0x800000010009C170;
  v9._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 logInfo:v10, v6, v8];

  return [a1 activate];
}

uint64_t sub_1000518FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);

  return swift_unknownObjectRelease();
}

id sub_1000519E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClockAngelConnectionManager();
  [super dealloc];
}

uint64_t type metadata accessor for ClockAngelConnectionManager()
{
  return self;
}

uint64_t sub_100051ADC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v26 = a5;
  id v27 = a6;
  uint64_t v29 = a3;
  unint64_t v30 = a4;
  uint64_t v28 = a1;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TimerSessionEntry(0);
  __chkstk_darwin(v12 - 8);
  id v14 = (uint64_t *)((char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = self;
  uint64_t v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  id v16 = [v6 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();

  uint64_t v31 = v17;
  unint64_t v32 = v19;
  v20._unint64_t object = (void *)0x800000010009C050;
  v20._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v20);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 logInfo:v21];

  if (qword_1000C2C90 != -1) {
    swift_once();
  }
  sub_10004B198();
  if (qword_1000C2C70 != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
  swift_bridgeObjectRetain();
  unint64_t v22 = v30;
  swift_bridgeObjectRetain();
  [v27 doubleValue];
  sub_10001F12C(v28, a2, v29, v22, (uint64_t)v11, 0, 0, 0xE000000000000000, v14, 0.0, v23, 0, 0, 1);
  dispatch thunk of DataStore.updateEntry(_:)();
  return sub_1000201E0((uint64_t)v14);
}

uint64_t sub_100051EFC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v36 = a3;
  uint64_t v37 = a7;
  id v34 = a6;
  uint64_t v35 = a1;
  id v32 = a5;
  id v33 = a9;
  uint64_t v13 = type metadata accessor for Date();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TimerSessionEntry(0);
  __chkstk_darwin(v16 - 8);
  unint64_t v18 = (id *)((char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v19 = self;
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  id v20 = [v9 description];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();

  uint64_t v38 = v21;
  unint64_t v39 = v23;
  v24._unint64_t object = (void *)0x800000010009C020;
  v24._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v24);
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 logInfo:v25];

  if (qword_1000C2C70 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Date.init()();
  swift_bridgeObjectRetain();
  [v32 doubleValue];
  uint64_t v27 = v26;
  [v33 doubleValue];
  uint64_t v29 = v28;
  [v34 doubleValue];
  sub_10001F12C(v35, a2, v36, a4, (uint64_t)v15, 1, v37, a8, v18, v30, v27, 0, v29, 0);
  dispatch thunk of DataStore.updateEntry(_:)();
  return sub_1000201E0((uint64_t)v18);
}

uint64_t sub_10005230C()
{
  uint64_t v1 = self;
  _StringGuts.grow(_:)(46);
  id v2 = [v0 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();

  v9[0] = v3;
  v9[1] = v5;
  v6._unint64_t object = (void *)0x800000010009BFF0;
  v6._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 logInfo:v7];

  if (qword_1000C2C70 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.clear(for:)();
  sub_10001EC9C((uint64_t)v9);
  if (qword_1000C2C90 != -1) {
    swift_once();
  }
  return sub_10004B198();
}

void sub_1000526C4()
{
}

uint64_t sub_100052960(void *a1)
{
  uint64_t v3 = self;
  _StringGuts.grow(_:)(55);
  id v4 = [v1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._unint64_t object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._unint64_t object = (void *)0x800000010009BF00;
  v9._uint64_t countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v9);
  id v10 = [a1 alarmIDString];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  v14._uint64_t countAndFlagsBits = v11;
  v14._unint64_t object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 logInfo:v15];

  if (qword_1000C2C90 != -1) {
    swift_once();
  }
  id v16 = [a1 alarmIDString];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  sub_10004BF50(v17, v19, 0, 0, 1);
  swift_bridgeObjectRelease();
  if (qword_1000C2C78 != -1) {
    swift_once();
  }
  return dispatch thunk of DataStore.updateEntry(_:)();
}

uint64_t sub_100052C30(uint64_t a1)
{
  uint64_t v3 = self;
  _StringGuts.grow(_:)(33);
  id v4 = [v1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();

  v24[0] = v5;
  v24[1] = v7;
  v8._unint64_t object = (void *)0x800000010009BEB0;
  v8._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v8);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 logInfo:v9];

  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
    uint64_t v18 = _swiftEmptyArrayStorage[2];
    if (!v18) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_15;
  }
  uint64_t v11 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  do
  {
    sub_10003A3F4(v11, (uint64_t)v24);
    sub_10003A3F4((uint64_t)v24, (uint64_t)v25);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    sub_100004678((uint64_t)v24);
    uint64_t v14 = v27;
    if (v27)
    {
      uint64_t v15 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = sub_100054A48(0, *((void *)v12 + 2) + 1, 1, v12);
      }
      unint64_t v17 = *((void *)v12 + 2);
      unint64_t v16 = *((void *)v12 + 3);
      if (v17 >= v16 >> 1) {
        uint64_t v12 = sub_100054A48((char *)(v16 > 1), v17 + 1, 1, v12);
      }
      *((void *)v12 + 2) = v17 + 1;
      uint64_t v13 = &v12[16 * v17];
      *((void *)v13 + 4) = v15;
      *((void *)v13 + 5) = v14;
    }
    v11 += 32;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  uint64_t v18 = *((void *)v12 + 2);
  if (v18)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    unint64_t v19 = (uint64_t *)(v12 + 40);
    do
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      uint64_t v22 = qword_1000C2C78;
      swift_bridgeObjectRetain();
      if (v22 != -1) {
        swift_once();
      }
      v19 += 2;
      v25[0] = v20;
      v25[1] = v21;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      dispatch thunk of DataStore.clear(for:)();
      sub_10001EC9C((uint64_t)v24);
      swift_bridgeObjectRelease();
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void sub_100052FF0()
{
  uint64_t v1 = self;
  _StringGuts.grow(_:)(33);
  id v2 = [v0 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();

  *(void *)&long long v26 = v3;
  *((void *)&v26 + 1) = v5;
  v6._unint64_t object = (void *)0x800000010009BE30;
  v6._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 logInfo:v7];

  Swift::String v8 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v8)
  {
    long long v26 = 0u;
    long long v27 = 0u;
LABEL_9:
    sub_10000FAF8((uint64_t)&v26, &qword_1000C5370);
    goto LABEL_10;
  }
  if ([v8 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v25, 0, sizeof(v25));
  }
  sub_1000549E0((uint64_t)v25, (uint64_t)&v26);
  if (!*((void *)&v27 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)&long long v26 = 0;
    *((void *)&v26 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    id v17 = [v0 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();

    *(void *)&long long v26 = v18;
    *((void *)&v26 + 1) = v20;
    v21._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v21._unint64_t object = (void *)0x800000010009BE50;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v1 logInfo:v22];

    unint64_t v23 = self;
    NSString v24 = String._bridgeToObjectiveC()();
    id v16 = sub_100050DE8();
    [v23 updateTimerWithID:v24 toState:2 withManager:v16];

    goto LABEL_11;
  }
  NSString v9 = *(void **)&v25[0];
  *(void *)&long long v26 = 0;
  *((void *)&v26 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  id v10 = [v0 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  *(void *)&long long v26 = v11;
  *((void *)&v26 + 1) = v13;
  v14._uint64_t countAndFlagsBits = 0xD000000000000028;
  v14._unint64_t object = (void *)0x800000010009BE80;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 logInfo:v15];

  id v16 = String._bridgeToObjectiveC()();
  [v9 pauseTimerWithId:v16];
  swift_unknownObjectRelease();
LABEL_11:
}

void sub_100053354()
{
  uint64_t v1 = self;
  _StringGuts.grow(_:)(34);
  id v2 = [v0 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();

  *(void *)&long long v26 = v3;
  *((void *)&v26 + 1) = v5;
  v6._uint64_t countAndFlagsBits = 0xD000000000000020;
  v6._unint64_t object = (void *)0x800000010009BDB0;
  String.append(_:)(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 logInfo:v7];

  Swift::String v8 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v8)
  {
    long long v26 = 0u;
    long long v27 = 0u;
LABEL_9:
    sub_10000FAF8((uint64_t)&v26, &qword_1000C5370);
    goto LABEL_10;
  }
  if ([v8 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v25, 0, sizeof(v25));
  }
  sub_1000549E0((uint64_t)v25, (uint64_t)&v26);
  if (!*((void *)&v27 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)&long long v26 = 0;
    *((void *)&v26 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    id v17 = [v0 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();

    *(void *)&long long v26 = v18;
    *((void *)&v26 + 1) = v20;
    v21._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v21._unint64_t object = (void *)0x800000010009BDE0;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v1 logInfo:v22];

    unint64_t v23 = self;
    NSString v24 = String._bridgeToObjectiveC()();
    id v16 = sub_100050DE8();
    [v23 updateTimerWithID:v24 toState:3 withManager:v16];

    goto LABEL_11;
  }
  NSString v9 = *(void **)&v25[0];
  *(void *)&long long v26 = 0;
  *((void *)&v26 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  id v10 = [v0 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  *(void *)&long long v26 = v11;
  *((void *)&v26 + 1) = v13;
  v14._unint64_t object = (void *)0x800000010009BE10;
  v14._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 logInfo:v15];

  id v16 = String._bridgeToObjectiveC()();
  [v9 resumeTimerWithId:v16];
  swift_unknownObjectRelease();
LABEL_11:
}

void sub_1000536B0()
{
  uint64_t v1 = self;
  _StringGuts.grow(_:)(32);
  id v2 = [v0 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();

  *(void *)&long long v26 = v3;
  *((void *)&v26 + 1) = v5;
  v6._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v6._unint64_t object = (void *)0x800000010009BD40;
  String.append(_:)(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 logInfo:v7];

  Swift::String v8 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v8)
  {
    long long v26 = 0u;
    long long v27 = 0u;
LABEL_9:
    sub_10000FAF8((uint64_t)&v26, &qword_1000C5370);
    goto LABEL_10;
  }
  if ([v8 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v25, 0, sizeof(v25));
  }
  sub_1000549E0((uint64_t)v25, (uint64_t)&v26);
  if (!*((void *)&v27 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)&long long v26 = 0;
    *((void *)&v26 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    id v17 = [v0 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();

    *(void *)&long long v26 = v18;
    *((void *)&v26 + 1) = v20;
    v21._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v21._unint64_t object = (void *)0x800000010009BD60;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v1 logInfo:v22];

    unint64_t v23 = self;
    NSString v24 = String._bridgeToObjectiveC()();
    id v16 = sub_100050DE8();
    [v23 updateTimerWithID:v24 toState:1 withManager:v16];

    goto LABEL_11;
  }
  NSString v9 = *(void **)&v25[0];
  *(void *)&long long v26 = 0;
  *((void *)&v26 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  id v10 = [v0 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  *(void *)&long long v26 = v11;
  *((void *)&v26 + 1) = v13;
  v14._unint64_t object = (void *)0x800000010009BD90;
  v14._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 logInfo:v15];

  id v16 = String._bridgeToObjectiveC()();
  [v9 stopTimerWithId:v16];
  swift_unknownObjectRelease();
LABEL_11:
}

void sub_100053A0C(uint64_t a1, void *a2)
{
  uint64_t v5 = self;
  _StringGuts.grow(_:)(48);
  id v6 = [v2 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();

  *(void *)&long long v32 = v7;
  *((void *)&v32 + 1) = v9;
  v10._unint64_t object = (void *)0x800000010009BCA0;
  v10._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = a1;
  v11._unint64_t object = a2;
  String.append(_:)(v11);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 logInfo:v12];

  uint64_t v13 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v13)
  {
    long long v32 = 0u;
    long long v33 = 0u;
LABEL_9:
    sub_10000FAF8((uint64_t)&v32, &qword_1000C5370);
    goto LABEL_10;
  }
  if ([v13 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v31, 0, sizeof(v31));
  }
  sub_1000549E0((uint64_t)v31, (uint64_t)&v32);
  if (!*((void *)&v33 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    id v24 = [v2 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();

    *(void *)&long long v32 = v25;
    *((void *)&v32 + 1) = v27;
    v28._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v28._unint64_t object = (void *)0x800000010009BCD0;
    String.append(_:)(v28);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 logInfo:v29];

    id v30 = sub_100050DE8();
    NSString v23 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  Swift::String v14 = *(void **)&v31[0];
  *(void *)&long long v32 = 0;
  *((void *)&v32 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  id v15 = [v2 description];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v19._uint64_t countAndFlagsBits = v16;
  v19._unint64_t object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0xD000000000000034;
  v20._unint64_t object = (void *)0x800000010009BD00;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = a1;
  v21._unint64_t object = a2;
  String.append(_:)(v21);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 logInfo:v22];

  NSString v23 = String._bridgeToObjectiveC()();
  [v14 dismissTimerWithIdentifier:v23];
  swift_unknownObjectRelease();
LABEL_11:
}

void sub_100053D94(uint64_t a1, void *a2)
{
  uint64_t v5 = self;
  _StringGuts.grow(_:)(47);
  id v6 = [v2 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();

  *(void *)&long long v31 = v7;
  *((void *)&v31 + 1) = v9;
  v10._unint64_t object = (void *)0x800000010009C4D0;
  v10._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = a1;
  v11._unint64_t object = a2;
  String.append(_:)(v11);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 logInfo:v12];

  uint64_t v13 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v13)
  {
    long long v31 = 0u;
    long long v32 = 0u;
LABEL_9:
    sub_10000FAF8((uint64_t)&v31, &qword_1000C5370);
    goto LABEL_10;
  }
  if ([v13 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v30, 0, sizeof(v30));
  }
  sub_1000549E0((uint64_t)v30, (uint64_t)&v31);
  if (!*((void *)&v32 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    *(void *)&long long v31 = 0;
    *((void *)&v31 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    id v23 = [v2 description];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();

    *(void *)&long long v31 = v24;
    *((void *)&v31 + 1) = v26;
    v27._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v27._unint64_t object = (void *)0x800000010009C500;
    String.append(_:)(v27);
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 logInfo:v28];

    id v29 = sub_100050DE8();
    NSString v22 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  Swift::String v14 = *(void **)&v30[0];
  *(void *)&long long v31 = 0;
  *((void *)&v31 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  id v15 = [v2 description];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();

  *(void *)&long long v31 = v16;
  *((void *)&v31 + 1) = v18;
  v19._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v19._unint64_t object = (void *)0x800000010009C530;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = a1;
  v20._unint64_t object = a2;
  String.append(_:)(v20);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 logInfo:v21];

  NSString v22 = String._bridgeToObjectiveC()();
  [v14 repeatTimerWithIdentifier:v22];
  swift_unknownObjectRelease();
LABEL_11:
}

void sub_10005410C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = self;
  _StringGuts.grow(_:)(76);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  sub_100007830(&qword_1000C5458);
  _print_unlocked<A, B>(_:_:)();

  v7._unint64_t object = (void *)0x800000010009C480;
  v7._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
  String.append(_:)(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 logInfo:v8];

  swift_beginAccess();
  uint64_t v9 = swift_unknownObjectWeakLoadStrong();
  if (v9)
  {
    Swift::String v10 = (void *)v9;
    sub_100050074(a3, a4, 0);
  }
}

void sub_100054254(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_1000542BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = self;
  _StringGuts.grow(_:)(88);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  sub_100007830(&qword_1000C5458);
  _print_unlocked<A, B>(_:_:)();

  v7._unint64_t object = (void *)0x800000010009C360;
  v7._uint64_t countAndFlagsBits = 0xD000000000000054;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = a3;
  v8._unint64_t object = a4;
  String.append(_:)(v8);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 logInfo:v9];

  swift_beginAccess();
  uint64_t v10 = swift_unknownObjectWeakLoadStrong();
  if (v10)
  {
    Swift::String v11 = (void *)v10;
    sub_10004FB50(a3, a4, 0);
  }
}

void sub_100054414(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v5)
  {
    long long v25 = 0u;
    long long v26 = 0u;
LABEL_9:
    sub_10000FAF8((uint64_t)&v25, &qword_1000C5370);
    goto LABEL_10;
  }
  if ([v5 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  sub_1000549E0((uint64_t)v24, (uint64_t)&v25);
  if (!*((void *)&v26 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    uint64_t v16 = self;
    *(void *)&long long v25 = 0;
    *((void *)&v25 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    id v17 = [v2 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();

    *(void *)&long long v25 = v18;
    *((void *)&v25 + 1) = v20;
    v21._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v21._unint64_t object = (void *)0x800000010009BC40;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 logInfo:v22];

    id v23 = sub_100050DFC();
    NSString v15 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  id v6 = *(void **)&v24[0];
  Swift::String v7 = self;
  *(void *)&long long v25 = 0;
  *((void *)&v25 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  id v8 = [v2 description];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();

  *(void *)&long long v25 = v9;
  *((void *)&v25 + 1) = v11;
  v12._unint64_t object = (void *)0x800000010009BC70;
  v12._uint64_t countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = a1;
  v13._unint64_t object = a2;
  String.append(_:)(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 logInfo:v14];

  NSString v15 = String._bridgeToObjectiveC()();
  [v6 dismissAlarmWithId:v15];
  swift_unknownObjectRelease();
LABEL_11:
}

void sub_1000546F8(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v5)
  {
    long long v25 = 0u;
    long long v26 = 0u;
LABEL_9:
    sub_10000FAF8((uint64_t)&v25, &qword_1000C5370);
    goto LABEL_10;
  }
  if ([v5 remoteTarget])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  sub_1000549E0((uint64_t)v24, (uint64_t)&v25);
  if (!*((void *)&v26 + 1)) {
    goto LABEL_9;
  }
  sub_100007830(&qword_1000C5378);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    uint64_t v16 = self;
    *(void *)&long long v25 = 0;
    *((void *)&v25 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    id v17 = [v2 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();

    *(void *)&long long v25 = v18;
    *((void *)&v25 + 1) = v20;
    v21._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v21._unint64_t object = (void *)0x800000010009BB80;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 logInfo:v22];

    id v23 = sub_100050DFC();
    NSString v15 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  id v6 = *(void **)&v24[0];
  Swift::String v7 = self;
  *(void *)&long long v25 = 0;
  *((void *)&v25 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  id v8 = [v2 description];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();

  *(void *)&long long v25 = v9;
  *((void *)&v25 + 1) = v11;
  v12._unint64_t object = (void *)0x800000010009BBB0;
  v12._uint64_t countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = a1;
  v13._unint64_t object = a2;
  String.append(_:)(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 logInfo:v14];

  NSString v15 = String._bridgeToObjectiveC()();
  [v6 stopSnoozeAlarmWithId:v15];
  swift_unknownObjectRelease();
LABEL_11:
}

uint64_t sub_1000549E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C5370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_100054A48(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007830((uint64_t *)&unk_1000C5380);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  Swift::String v13 = v10 + 32;
  NSString v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void sub_100054B4C(void *a1)
{
  id v3 = [a1 remoteProcess];
  NSString v4 = String._bridgeToObjectiveC()();
  unsigned int v5 = [v3 hasEntitlement:v4];

  if (v5)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v1;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_10005527C;
    *(void *)(v7 + 24) = v6;
    v22[4] = sub_100055294;
    v22[5] = v7;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1107296256;
    long long v22[2] = sub_10005131C;
    v22[3] = &unk_1000B4DC0;
    uint64_t v8 = _Block_copy(v22);
    uint64_t v9 = v1;
    swift_retain();
    swift_release();
    [a1 configureConnection:v8];
    _Block_release(v8);
    LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v8)
    {
      __break(1u);
    }
    else
    {
      [a1 activate];
      uint64_t v10 = *(void **)&v9[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
      *(void *)&v9[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection] = a1;
      id v11 = a1;
      swift_release();
    }
  }
  else
  {
    uint64_t v12 = self;
    _StringGuts.grow(_:)(53);
    v13._uint64_t countAndFlagsBits = 0x202D20726F727265;
    v13._unint64_t object = (void *)0xE900000000000022;
    String.append(_:)(v13);
    id v14 = [a1 remoteProcess:0, 0xE000000000000000];
    id v15 = [v14 description];

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    v19._uint64_t countAndFlagsBits = v16;
    v19._unint64_t object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v20._unint64_t object = (void *)0x800000010009C0D0;
    String.append(_:)(v20);
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 logError:v21];

    [a1 invalidate];
  }
}

uint64_t sub_100054E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C2C70 != -1) {
    swift_once();
  }
  v16[1] = a1;
  void v16[2] = a2;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.getEntry(for:)();
  sub_10001EC9C((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return sub_10000FAF8((uint64_t)v10, &qword_1000C5390);
  }
  sub_10001EC10((uint64_t)v10, (uint64_t)v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  dispatch thunk of DataStore.updateEntry(_:)();
  return sub_1000201E0((uint64_t)v14);
}

uint64_t sub_100055060()
{
  if (qword_1000C2C90 != -1) {
    swift_once();
  }
  uint64_t v0 = *(void *)(qword_1000CAE10 + 24);
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v0 + 16 * v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000550E4(uint64_t a1, void *a2)
{
  unsigned int v5 = self;
  _StringGuts.grow(_:)(55);
  id v6 = [v2 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._unint64_t object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._unint64_t object = (void *)0x800000010009BF00;
  v11._uint64_t countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = a1;
  v12._unint64_t object = a2;
  String.append(_:)(v12);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 logInfo:v13];

  if (qword_1000C2C90 != -1) {
    swift_once();
  }
  return sub_10004BF50(a1, a2, 0, 0, 1);
}

uint64_t sub_100055244()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10005527C(void *a1)
{
  sub_100051344(a1, *(char **)(v1 + 16));
}

uint64_t sub_100055284()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100055294()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000552BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000552CC()
{
  return swift_release();
}

void sub_1000552D4(uint64_t a1)
{
  sub_1000515F0(a1, *(void **)(v1 + 16));
}

void sub_1000552DC(uint64_t a1)
{
  sub_1000516EC(a1, *(char **)(v1 + 16));
}

id sub_1000552E4(void *a1)
{
  return sub_1000517F4(a1, *(void **)(v1 + 16));
}

unint64_t sub_1000552EC()
{
  unint64_t result = qword_1000C4300;
  if (!qword_1000C4300)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4300);
  }
  return result;
}

unint64_t sub_100055344()
{
  unint64_t result = qword_1000C4310;
  if (!qword_1000C4310)
  {
    sub_10000C61C(&qword_1000C4308);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4310);
  }
  return result;
}

id sub_1000553A0(void *a1)
{
  return sub_10005125C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000553A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000553B8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000553F4(uint64_t a1)
{
  sub_1000542BC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100055404()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100055444(uint64_t a1)
{
  sub_10005410C(a1, v1[2], v1[3], v1[4]);
}

void *sub_100055490(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
  }
  swift_retain();
  return a1;
}

uint64_t sub_100055578(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_1000555EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_retain();
  return a1;
}

uint64_t sub_100055688(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100055738(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t sub_1000557D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_release();
  return a1;
}

uint64_t sub_100055870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100055884);
}

uint64_t sub_100055884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100055944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100055958);
}

uint64_t sub_100055958(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for RunningCountupView(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C54B8);
}

uint64_t sub_100055A34()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100055AE8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100055B04@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v69 = a1;
  uint64_t v68 = a2;
  uint64_t v3 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v66 = *(void *)(v3 - 8);
  uint64_t v67 = v3;
  __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v5 - 8);
  id v56 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimelineCountupView(0);
  Swift::String v12 = (int *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100007830(&qword_1000C5500) - 8;
  __chkstk_darwin(v59);
  uint64_t v54 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100007830(&qword_1000C5508) - 8;
  __chkstk_darwin(v60);
  uint64_t v55 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100007830(&qword_1000C5510) - 8;
  __chkstk_darwin(v62);
  uint64_t v57 = (uint64_t)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100007830(&qword_1000C5518) - 8;
  __chkstk_darwin(v63);
  uint64_t v58 = (uint64_t)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100007830(&qword_1000C5520);
  __chkstk_darwin(v64);
  uint64_t v61 = (uint64_t)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v53 = v2;
  v20(v10, v2, v7);
  uint64_t v21 = type metadata accessor for RunningCountupView(0);
  uint64_t v22 = *(void *)(v2 + *(int *)(v21 + 24));
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)&v14[v12[7]] = swift_getKeyPath();
  sub_100007830(&qword_1000C49D0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ObservableStopwatchModel();
  sub_100058B38((unint64_t *)&qword_1000C6700, (void (*)(uint64_t))type metadata accessor for ObservableStopwatchModel);
  uint64_t v24 = EnvironmentObject.init()();
  uint64_t v26 = v25;
  *(void *)id v14 = KeyPath;
  v14[8] = 0;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v14[v12[8]], v10, v7);
  v14[v12[9]] = v69;
  *(void *)&v14[v12[10]] = v22;
  static Calendar.current.getter();
  *(void *)&v14[v12[12]] = 1;
  Swift::String v27 = (uint64_t *)&v14[v12[13]];
  *Swift::String v27 = v24;
  v27[1] = v26;
  uint64_t v28 = v53;
  uint64_t v29 = type metadata accessor for Font.Design();
  uint64_t v30 = (uint64_t)v56;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v56, 1, 1, v29);
  static Font.system(size:weight:design:)();
  sub_10000FAF8(v30, &qword_1000C3148);
  Font.monospacedDigit()();
  swift_release();
  long long v32 = v65;
  uint64_t v31 = v66;
  uint64_t v33 = v67;
  (*(void (**)(char *, void, uint64_t))(v66 + 104))(v65, enum case for Font._StylisticAlternative.three(_:), v67);
  uint64_t v34 = Font._stylisticAlternative(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  uint64_t v35 = swift_getKeyPath();
  uint64_t v36 = v54;
  sub_100059E44((uint64_t)v14, v54, type metadata accessor for TimelineCountupView);
  uint64_t v37 = (uint64_t *)(v36 + *(int *)(v59 + 44));
  *uint64_t v37 = v35;
  v37[1] = v34;
  sub_10005ADF8((uint64_t)v14, type metadata accessor for TimelineCountupView);
  uint64_t v38 = *(void *)(v28 + *(int *)(v21 + 32));
  uint64_t v39 = swift_getKeyPath();
  uint64_t v40 = v55;
  sub_10000FA94(v36, v55, &qword_1000C5500);
  uint64_t v41 = (uint64_t *)(v40 + *(int *)(v60 + 44));
  uint64_t *v41 = v39;
  v41[1] = v38;
  swift_retain();
  sub_10000FAF8(v36, &qword_1000C5500);
  uint64_t v42 = swift_getKeyPath();
  uint64_t v43 = v57;
  sub_10000FA94(v40, v57, &qword_1000C5508);
  uint64_t v44 = v43 + *(int *)(v62 + 44);
  *(void *)uint64_t v44 = v42;
  *(unsigned char *)(v44 + 8) = 1;
  sub_10000FAF8(v40, &qword_1000C5508);
  uint64_t v45 = swift_getKeyPath();
  uint64_t v46 = v58;
  sub_10000FA94(v43, v58, &qword_1000C5510);
  uint64_t v47 = v46 + *(int *)(v63 + 44);
  *(void *)uint64_t v47 = v45;
  *(void *)(v47 + 8) = 1;
  *(unsigned char *)(v47 + 16) = 0;
  sub_10000FAF8(v43, &qword_1000C5510);
  if (v69) {
    double v48 = 1.0;
  }
  else {
    double v48 = 0.4;
  }
  uint64_t v49 = swift_getKeyPath();
  uint64_t v50 = v61;
  sub_10000FA94(v46, v61, &qword_1000C5518);
  uint64_t v51 = v50 + *(int *)(v64 + 36);
  *(void *)uint64_t v51 = v49;
  *(double *)(v51 + 8) = v48;
  sub_10000FAF8(v46, &qword_1000C5518);
  sub_1000587E8();
  View.accessibilityIdentifier(_:)();
  return sub_10000FAF8(v50, &qword_1000C5520);
}

uint64_t sub_100056284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100055B04(*(unsigned __int8 *)(v2 + *(int *)(a1 + 20)), a2);
}

uint64_t type metadata accessor for TimelineCountupView(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C55B8);
}

uint64_t sub_1000562B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v41 = *(void *)(v2 - 8);
  uint64_t v42 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100007830(&qword_1000C5620);
  __chkstk_darwin(v47);
  uint64_t v45 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TimelineCountupView(0);
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v37 + 64);
  __chkstk_darwin(v6);
  uint64_t v43 = type metadata accessor for StopwatchTimelineSchedule(0);
  uint64_t v8 = __chkstk_darwin(v43);
  uint64_t v39 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v37 - v10);
  uint64_t v46 = sub_100007830(&qword_1000C5628);
  uint64_t v44 = *(void *)(v46 - 8);
  uint64_t v12 = __chkstk_darwin(v46);
  uint64_t v38 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v40 = (char *)&v37 - v14;
  if (*(void *)(v1 + *(int *)(v6 + 44)))
  {
    uint64_t v15 = v1;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    if (*(void *)&v49 == 2)
    {
      uint64_t v16 = v1 + *(int *)(v6 + 24);
      uint64_t v17 = (char *)v11 + *(int *)(v43 + 20);
      uint64_t v18 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v17, v16, v18);
      *uint64_t v11 = 0x3F91111111111111;
      sub_100059E44(v15, (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimelineCountupView);
      unint64_t v19 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      uint64_t v20 = swift_allocObject();
      sub_10005B544((uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for TimelineCountupView);
      sub_100059E44((uint64_t)v11, v39, type metadata accessor for StopwatchTimelineSchedule);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = sub_100059DC4;
      *(void *)(v21 + 24) = v20;
      sub_100007830(&qword_1000C5630);
      sub_100058B38(&qword_1000C5648, (void (*)(uint64_t))type metadata accessor for StopwatchTimelineSchedule);
      sub_100059B94();
      uint64_t v22 = v38;
      TimelineView<>.init(_:content:)();
      sub_10005ADF8((uint64_t)v11, type metadata accessor for StopwatchTimelineSchedule);
      uint64_t v23 = v44;
      uint64_t v24 = v40;
      uint64_t v25 = v46;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v40, v22, v46);
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v45, v24, v25);
      swift_storeEnumTagMultiPayload();
      sub_100059B20();
      _ConditionalContent<>.init(storage:)();
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, v25);
    }
    else
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      long double v27 = v49;
      static Locale.current.getter();
      Class isa = Locale._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v4, v42);
      id v29 = sub_100002608(0, 1, 1, 1, 0, 1, 0, (uint64_t)isa, v27);

      if (v29)
      {
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v32 = v31;
      }
      else
      {
        unint64_t v32 = 0xE200000000000000;
        uint64_t v30 = 11565;
      }
      uint64_t v33 = v45;
      double v49 = *(double *)&v30;
      unint64_t v50 = v32;
      sub_10000C92C();
      *(void *)uint64_t v33 = Text.init<A>(_:)();
      *((void *)v33 + 1) = v34;
      v33[16] = v35 & 1;
      *((void *)v33 + 3) = v36;
      *((_WORD *)v33 + 16) = 256;
      swift_storeEnumTagMultiPayload();
      sub_100007830(&qword_1000C5630);
      sub_100059B20();
      sub_100059B94();
      return _ConditionalContent<>.init(storage:)();
    }
  }
  else
  {
    type metadata accessor for ObservableStopwatchModel();
    sub_100058B38((unint64_t *)&qword_1000C6700, (void (*)(uint64_t))type metadata accessor for ObservableStopwatchModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000569C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007830(&qword_1000C5650);
  TimelineView.Context.date.getter();
  uint64_t v6 = sub_100056AF4((uint64_t)v5);
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v13[0] = v6;
  v13[1] = v8;
  sub_10000C92C();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v12;
  *(_WORD *)(a1 + 32) = 256;
  return result;
}

uint64_t sub_100056AF4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for TimelineCountupView(0);
  sub_100038FBC((uint64_t)v7);
  uint64_t v9 = *(void *)v1;
  char v10 = *(unsigned char *)(v1 + 8);
  sub_100034474(*(void *)v2, *(unsigned char *)(v2 + 8));
  char v11 = sub_100038DE4(v9, v10);
  sub_1000344D0(v9, v10);
  if (*(void *)(v2 + v8[11]))
  {
    uint64_t v12 = v8[6];
    char v13 = *(unsigned char *)(v2 + v8[7]);
    uint64_t v14 = v2 + v12;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    sub_10005AE60(v18[1], v14, a1, (uint64_t)v7, v11 & 1, v13);
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
  else
  {
    type metadata accessor for ObservableStopwatchModel();
    sub_100058B38((unint64_t *)&qword_1000C6700, (void (*)(uint64_t))type metadata accessor for ObservableStopwatchModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100056D14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007830(&qword_1000C3128);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = v1 + *(int *)(type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries(0) + 20);
  sub_10000FA94(v9, (uint64_t)v8, &qword_1000C3128);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    sub_10000FAF8((uint64_t)v8, &qword_1000C3128);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v8, v10);
    Date.addingTimeInterval(_:)();
    char v13 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    v13(v6, 0, 1, v10);
    sub_10005B5AC((uint64_t)v6, v9);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v13)(a1, 0, 1, v10);
  }
}

uint64_t sub_100056EE8@<X0>(uint64_t a1@<X8>)
{
  return sub_10005B544(v1, a1, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_100056F1C()
{
  return 0;
}

uint64_t sub_100056F24()
{
  return 2;
}

uint64_t sub_100056F2C()
{
  uint64_t v1 = sub_100059ED8(v0, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
  sub_10005ADF8(v0, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
  return v1;
}

uint64_t sub_100056F98(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_10005A84C(a1, a2, a3, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_100056FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057018(a1, a2, a3, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry, (void (*)(uint64_t))sub_10005EBD0);
}

uint64_t sub_100057018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), void (*a6)(uint64_t))
{
  unint64_t v32 = a6;
  uint64_t v9 = v6;
  uint64_t v30 = a3;
  uint64_t v12 = sub_100007830(&qword_1000C3128);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a4(0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v27 - v20;
  uint64_t result = sub_10005B544(v9, (uint64_t)&v27 - v20, a5);
  if (!a2)
  {
    uint64_t v23 = 0;
    goto LABEL_12;
  }
  uint64_t v23 = v30;
  if (!v30)
  {
LABEL_12:
    sub_10005B544((uint64_t)v21, a1, a5);
    return v23;
  }
  if ((v30 & 0x8000000000000000) == 0)
  {
    uint64_t v28 = a1;
    id v29 = a5;
    v32(result);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      uint64_t v23 = 0;
LABEL_10:
      sub_10000FAF8((uint64_t)v14, &qword_1000C3128);
      a1 = v28;
      a5 = v29;
    }
    else
    {
      uint64_t v24 = v23;
      uint64_t v23 = 0;
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
      uint64_t v31 = v24 - 1;
      while (1)
      {
        v25(v18, v14, v15);
        uint64_t v26 = ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(a2, v18, v15);
        if (v31 == v23) {
          break;
        }
        a2 += *(void *)(v16 + 72);
        v32(v26);
        ++v23;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
          goto LABEL_10;
        }
      }
      a1 = v28;
      a5 = v29;
      uint64_t v23 = v30;
    }
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000572B4()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t sub_1000572DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v44 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v40 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v41 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v38 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007830(&qword_1000C3128);
  __chkstk_darwin(v6 - 8);
  uint64_t v50 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for Calendar();
  uint64_t v8 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DateComponents();
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = a2;
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v37 = v15 + 56;
  v36(a2, 1, 1, v14);
  static Calendar.current.getter();
  sub_100007830(&qword_1000C5720);
  uint64_t v17 = type metadata accessor for Calendar.Component();
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100096230;
  (*(void (**)(unint64_t, void, uint64_t))(v18 + 104))(v20 + v19, enum case for Calendar.Component.second(_:), v17);
  sub_10005D82C(v20);
  swift_setDeallocating();
  uint64_t v21 = v45;
  uint64_t v22 = v16;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v24 = v53;
  v23(v10, v53);
  uint64_t v25 = type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v16 + *(int *)(v25 + 24), v13, v55);
  uint64_t v26 = v16 + *(int *)(v25 + 20);
  uint64_t v46 = v15;
  uint64_t v47 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v26, v21, v14);
  Date.addingTimeInterval(_:)();
  static Calendar.current.getter();
  uint64_t v52 = v13;
  LOBYTE(v25) = Calendar.date(_:matchesComponents:)();
  uint64_t v39 = v8 + 8;
  char v35 = v23;
  v23(v10, v24);
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v55);
    sub_10000FAF8(v16, &qword_1000C3128);
    uint64_t v27 = v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v22, v21, v47);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v36)(v22, 0, 1, v27);
  }
  else
  {
    static Calendar.current.getter();
    uint64_t v29 = v38;
    (*(void (**)(char *, void, uint64_t))(v38 + 104))(v48, enum case for Calendar.MatchingPolicy.nextTime(_:), v49);
    uint64_t v31 = v40;
    uint64_t v30 = v41;
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v41, enum case for Calendar.SearchDirection.forward(_:), v51);
    uint64_t v32 = v42;
    uint64_t v33 = v43;
    uint64_t v34 = v44;
    (*(void (**)(char *, void, uint64_t))(v42 + 104))(v43, enum case for Calendar.RepeatedTimePolicy.first(_:), v44);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v21, v47);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v51);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v48, v49);
    v35(v10, v53);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v55);
    return sub_10005B5AC(v50, v22);
  }
}

uint64_t sub_1000579C8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  unint64_t v84 = a1;
  uint64_t v74 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v81 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  unint64_t v80 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v79 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  id v78 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v76 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v73 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for Calendar();
  uint64_t v75 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007830(&qword_1000C3128);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v62 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v62 - v16;
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v62 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v62 - v25;
  uint64_t v85 = v2;
  sub_10000FA94(v2, (uint64_t)v19, &qword_1000C3128);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  uint64_t v86 = v20;
  uint64_t v28 = v20;
  uint64_t v29 = v27;
  if (v27((uint64_t)v19, 1, v28) == 1)
  {
    sub_10000FAF8((uint64_t)v19, &qword_1000C3128);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v84, 1, 1, v86);
  }
  else
  {
    uint64_t v67 = v24;
    uint64_t v68 = v29;
    int v69 = v11;
    uint64_t v70 = v14;
    id v71 = v17;
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v31(v26, v19, v86);
    uint64_t v32 = type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry(0);
    uint64_t v33 = v85 + *(int *)(v32 + 28);
    sub_100058B38(&qword_1000C5870, (void (*)(uint64_t))&type metadata accessor for Date);
    id v72 = v26;
    if (dispatch thunk of static Comparable.< infix(_:_:)())
    {
      uint64_t v62 = v33;
      uint64_t v63 = v21;
      uint64_t v65 = (void (*)(uint64_t, char *, uint64_t))v31;
      uint64_t v64 = v21 + 32;
      uint64_t v34 = v7;
      static Calendar.current.getter();
      uint64_t v66 = v85 + *(int *)(v32 + 24);
      uint64_t v35 = v76;
      uint64_t v36 = v73;
      (*(void (**)(char *, void, uint64_t))(v76 + 104))(v73, enum case for Calendar.MatchingPolicy.nextTime(_:), v82);
      uint64_t v38 = v78;
      uint64_t v37 = v79;
      (*(void (**)(char *, void, uint64_t))(v79 + 104))(v78, enum case for Calendar.RepeatedTimePolicy.first(_:), v83);
      uint64_t v39 = v80;
      uint64_t v40 = v81;
      uint64_t v41 = v74;
      (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for Calendar.SearchDirection.forward(_:), v74);
      uint64_t v42 = (uint64_t)v70;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v83);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v82);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v34, v77);
      uint64_t v43 = (uint64_t)v69;
      sub_10000FA94(v42, (uint64_t)v69, &qword_1000C3128);
      uint64_t v44 = v86;
      int v45 = v68(v43, 1, v86);
      uint64_t v46 = v85;
      uint64_t v47 = v72;
      if (v45 == 1)
      {
        sub_10000FAF8(v42, &qword_1000C3128);
        sub_10000FAF8(v43, &qword_1000C3128);
        sub_10000FAF8(v46, &qword_1000C3128);
        uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
        v48(v46, 1, 1, v44);
        uint64_t v49 = v84;
        v65((uint64_t)v84, v47, v44);
      }
      else
      {
        uint64_t v55 = v42;
        id v56 = v67;
        uint64_t v57 = v65;
        v65((uint64_t)v67, (char *)v43, v44);
        uint64_t v58 = v62;
        char v59 = static Date.< infix(_:_:)();
        uint64_t v49 = v84;
        uint64_t v60 = v63;
        if (v59)
        {
          (*(void (**)(char *, uint64_t))(v63 + 8))(v56, v44);
          sub_10000FAF8(v55, &qword_1000C3128);
          sub_10000FAF8(v46, &qword_1000C3128);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v46, v58, v44);
          uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56);
          v48(v46, 0, 1, v44);
        }
        else
        {
          uint64_t v61 = (uint64_t)v71;
          Date.addingTimeInterval(_:)();
          (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v44);
          sub_10000FAF8(v55, &qword_1000C3128);
          uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56);
          v48(v61, 0, 1, v44);
          sub_10005B5AC(v61, v46);
        }
        v57((uint64_t)v49, v47, v44);
      }
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v48)(v49, 0, 1, v44);
    }
    else
    {
      uint64_t v51 = (uint64_t)v71;
      uint64_t v50 = v72;
      Date.addingTimeInterval(_:)();
      uint64_t v52 = *(uint64_t (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
      uint64_t v53 = v86;
      v52((char *)v51, 0, 1, v86);
      sub_10005B5AC(v51, v85);
      uint64_t v54 = v84;
      v31(v84, v50, v53);
      return v52(v54, 0, 1, v53);
    }
  }
}

uint64_t sub_100058254@<X0>(uint64_t a1@<X8>)
{
  return sub_10005B544(v1, a1, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry);
}

uint64_t sub_100058288()
{
  uint64_t v1 = sub_10005A448(v0, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry, (void (*)(void))sub_1000579C8);
  sub_10005ADF8(v0, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry);
  return v1;
}

uint64_t sub_100058308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057018(a1, a2, a3, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry, (void (*)(uint64_t))sub_1000579C8);
}

void *sub_100058360(uint64_t a1)
{
  uint64_t v29 = a1;
  uint64_t v1 = type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry(0);
  __chkstk_darwin(v1 - 8);
  uint64_t v28 = (uint64_t)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (void *)((char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - v11;
  uint64_t v13 = type metadata accessor for TimelineScheduleMode();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for TimelineScheduleMode.normal(_:), v13);
  char v17 = static TimelineScheduleMode.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    uint64_t v18 = *(void *)v27[1];
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v29, v3);
    *uint64_t v10 = 0x3F91111111111111;
    uint64_t v19 = (uint64_t)v10 + *(int *)(v7 + 20);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v20(v19, 1, 1, v3);
    sub_10000FAF8(v19, &qword_1000C3128);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v19, v6, v3);
    v20(v19, 0, 1, v3);
    *uint64_t v10 = v18;
    sub_10005B544((uint64_t)v10, (uint64_t)v12, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
    sub_100007830(&qword_1000C5718);
    uint64_t v21 = (void *)swift_allocObject();
    uint64_t v22 = (uint64_t)v21 + *(void *)(class metadata base offset for _SequenceBox + *v21 + 16);
    uint64_t v23 = (uint64_t)v12;
    uint64_t v24 = type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v29, v3);
    uint64_t v25 = v28;
    sub_1000572DC((uint64_t)v6, v28);
    sub_100007830(&qword_1000C5710);
    uint64_t v21 = (void *)swift_allocObject();
    uint64_t v22 = (uint64_t)v21 + *(void *)(class metadata base offset for _SequenceBox + *v21 + 16);
    uint64_t v24 = type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry;
    uint64_t v23 = v25;
  }
  sub_10005B544(v23, v22, v24);
  return v21;
}

void *sub_100058788@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100058360(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000587E8()
{
  unint64_t result = qword_1000C5528;
  if (!qword_1000C5528)
  {
    sub_10000C61C(&qword_1000C5520);
    sub_100058888();
    sub_10000FD6C(&qword_1000C3568, &qword_1000C3570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5528);
  }
  return result;
}

unint64_t sub_100058888()
{
  unint64_t result = qword_1000C5530;
  if (!qword_1000C5530)
  {
    sub_10000C61C(&qword_1000C5518);
    sub_100058928();
    sub_10000FD6C(&qword_1000C31C8, &qword_1000C31D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5530);
  }
  return result;
}

unint64_t sub_100058928()
{
  unint64_t result = qword_1000C5538;
  if (!qword_1000C5538)
  {
    sub_10000C61C(&qword_1000C5510);
    sub_1000589C8();
    sub_10000FD6C(&qword_1000C3558, &qword_1000C3560);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5538);
  }
  return result;
}

unint64_t sub_1000589C8()
{
  unint64_t result = qword_1000C5540;
  if (!qword_1000C5540)
  {
    sub_10000C61C(&qword_1000C5508);
    sub_100058A68();
    sub_10000FD6C(&qword_1000C3548, &qword_1000C3550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5540);
  }
  return result;
}

unint64_t sub_100058A68()
{
  unint64_t result = qword_1000C5548;
  if (!qword_1000C5548)
  {
    sub_10000C61C(&qword_1000C5500);
    sub_100058B38(&qword_1000C5550, (void (*)(uint64_t))type metadata accessor for TimelineCountupView);
    sub_10000FD6C(&qword_1000C34A8, &qword_1000C34B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5548);
  }
  return result;
}

uint64_t sub_100058B38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100058B80(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_100034474(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_100007830(&qword_1000C49D0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    uint64_t v15 = a1 + v14;
    uint64_t v16 = a2 + v14;
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[8];
    *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
    *(void *)(a1 + v18) = *(void *)(a2 + v18);
    uint64_t v19 = a3[9];
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = a3[11];
    *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
    uint64_t v24 = (void *)(a1 + v23);
    uint64_t v25 = (uint64_t *)(a2 + v23);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    *uint64_t v24 = v26;
    v24[1] = v27;
  }
  swift_retain();
  return a1;
}

uint64_t sub_100058D78(uint64_t a1, int *a2)
{
  sub_1000344D0(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  sub_100007830(&qword_1000C49D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[9];
  uint64_t v9 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  return swift_release();
}

uint64_t sub_100058EB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_100034474(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  sub_100007830(&qword_1000C49D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for Locale();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  uint64_t v21 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  *uint64_t v22 = v24;
  v22[1] = v25;
  swift_retain();
  return a1;
}

uint64_t sub_100059060(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_100034474(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_1000344D0(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_10000FAF8(a1 + v10, &qword_1000C49D0);
    sub_100007830(&qword_1000C49D0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v22 = a3[11];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  swift_retain();
  swift_release();
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  return a1;
}

uint64_t sub_10005924C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100007830(&qword_1000C49D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Locale();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  return a1;
}

uint64_t sub_1000593F0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_1000344D0(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    sub_10000FAF8(a1 + v10, &qword_1000C49D0);
    uint64_t v13 = sub_100007830(&qword_1000C49D0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for Locale();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)(a1 + v19) = *(uint64_t *)((char *)a2 + v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (uint64_t)a2 + v20;
  uint64_t v23 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
  uint64_t v24 = a3[11];
  *(void *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (uint64_t *)((char *)a2 + v24);
  *(void *)(a1 + v24) = *v26;
  swift_release();
  *(void *)(v25 + 8) = v26[1];
  return a1;
}

uint64_t sub_1000595D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000595E4);
}

uint64_t sub_1000595E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C5558);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_7:
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v12(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_7;
  }
  uint64_t v11 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v11 - 8);
    uint64_t v9 = a3[9];
    goto LABEL_7;
  }
  unint64_t v14 = *(void *)(a1 + a3[11]);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_100059750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059764);
}

uint64_t sub_100059764(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100007830(&qword_1000C5558);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
    {
      uint64_t v9 = v12;
      uint64_t v10 = *(void *)(v12 - 8);
      uint64_t v11 = a4[6];
    }
    else
    {
      uint64_t result = type metadata accessor for Calendar();
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[11]) = a2;
        return result;
      }
      uint64_t v9 = result;
      uint64_t v10 = *(void *)(result - 8);
      uint64_t v11 = a4[9];
    }
  }
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v14(a1 + v11, a2, a2, v9);
}

void sub_1000598C0()
{
  sub_10005BF44(319, (unint64_t *)&qword_1000C55C8, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Calendar();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unint64_t sub_100059A28()
{
  unint64_t result = qword_1000C5610;
  if (!qword_1000C5610)
  {
    sub_10000C61C(&qword_1000C5618);
    sub_1000587E8();
    sub_100058B38(&qword_1000C3310, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5610);
  }
  return result;
}

uint64_t sub_100059AD4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for StopwatchTimelineSchedule(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C56B8);
}

unint64_t sub_100059B20()
{
  unint64_t result = qword_1000C5638;
  if (!qword_1000C5638)
  {
    sub_10000C61C(&qword_1000C5628);
    sub_100059B94();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5638);
  }
  return result;
}

unint64_t sub_100059B94()
{
  unint64_t result = qword_1000C5640;
  if (!qword_1000C5640)
  {
    sub_10000C61C(&qword_1000C5630);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5640);
  }
  return result;
}

uint64_t sub_100059C08()
{
  unint64_t v1 = (int *)type metadata accessor for TimelineCountupView(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  sub_1000344D0(*(void *)(v0 + v3), *(unsigned char *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[5];
  sub_100007830(&qword_1000C49D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v2 | 7;
  uint64_t v9 = v3 + v4;
  uint64_t v10 = v5 + v1[6];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v5 + v1[9];
  uint64_t v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_release();

  return _swift_deallocObject(v0, v9, v8);
}

uint64_t sub_100059DC4@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineCountupView(0);

  return sub_1000569C8(a1);
}

uint64_t sub_100059E44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100059EAC(uint64_t a1)
{
  return sub_100059ED8(a1, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_100059ED8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v6 = sub_100007830(&qword_1000C3128);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  int v69 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v62 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v62 - v12;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v77 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a2(0);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v62 - v19;
  uint64_t v21 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v63 = a3;
  sub_100059E44(a1, (uint64_t)&v62 - v19, a3);
  uint64_t v22 = *(int *)(v18 + 28);
  id v71 = v20;
  uint64_t v23 = (uint64_t)&v20[v22];
  sub_10000FA94((uint64_t)&v20[v22], (uint64_t)v11, &qword_1000C3128);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v70 = v11;
  uint64_t v74 = (char *)v14;
  uint64_t v66 = v15 + 48;
  unsigned int v25 = v24(v11, 1, v14);
  uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  uint64_t v73 = v15;
  uint64_t v27 = 0;
  if (v25 != 1)
  {
    uint64_t v65 = (v21 + 32) & ~v21;
    uint64_t v31 = (char *)_swiftEmptyArrayStorage + v65;
    uint64_t v33 = v15 + 32;
    uint64_t v32 = *(void (**)(char *, char *, char *))(v15 + 32);
    uint64_t v34 = v23;
    uint64_t v67 = v23;
    uint64_t v68 = (void (**)(uint64_t, void, uint64_t, char *))(v33 + 24);
    uint64_t v64 = v21 | 7;
    uint64_t v75 = v32;
    uint64_t v76 = (char *)_swiftEmptyArrayStorage;
    uint64_t v28 = v74;
    uint64_t v29 = (uint64_t)v70;
    id v72 = (uint64_t (*)(uint64_t, uint64_t, char *))v24;
    while (1)
    {
      uint64_t v74 = v31;
      uint64_t v35 = v27;
      uint64_t v38 = v29;
      uint64_t v39 = (uint64_t (*)(char *, char *, char *))v32;
      v32(v13, (char *)v38, v28);
      uint64_t v40 = (uint64_t)v69;
      Date.addingTimeInterval(_:)();
      uint64_t v41 = (void (*)(char *, void, uint64_t, char *))*v68;
      (*v68)(v40, 0, 1, v28);
      sub_10005B5AC(v40, v34);
      v41(v13, 0, 1, v28);
      uint64_t v42 = v72;
      if (v72((uint64_t)v13, 1, v28) == 1) {
        goto LABEL_31;
      }
      uint64_t result = v39(v77, v13, v28);
      uint64_t v44 = v33;
      if (v27)
      {
        uint64_t v26 = v76;
        uint64_t v35 = v74;
        BOOL v36 = __OFSUB__(v27--, 1);
        if (v36) {
          goto LABEL_30;
        }
      }
      else
      {
        int v45 = v76;
        unint64_t v46 = *((void *)v76 + 3);
        if ((uint64_t)((v46 >> 1) + 0x4000000000000000) < 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        int64_t v47 = v46 & 0xFFFFFFFFFFFFFFFELL;
        if (v47 <= 1) {
          uint64_t v48 = 1;
        }
        else {
          uint64_t v48 = v47;
        }
        sub_100007830(&qword_1000C5868);
        uint64_t v49 = *(void *)(v73 + 72);
        uint64_t v50 = v65;
        uint64_t v26 = (char *)swift_allocObject();
        uint64_t result = j__malloc_size(v26);
        if (!v49) {
          goto LABEL_37;
        }
        uint64_t v51 = result - v50;
        if (result - v50 == 0x8000000000000000 && v49 == -1) {
          goto LABEL_38;
        }
        uint64_t v53 = v51 / v49;
        *((void *)v26 + 2) = v48;
        *((void *)v26 + 3) = 2 * (v51 / v49);
        uint64_t v54 = &v26[v50];
        uint64_t v55 = *((void *)v45 + 3) >> 1;
        uint64_t v56 = v55 * v49;
        if (*((void *)v45 + 2))
        {
          if (v26 < v45 || v54 >= &v45[v50 + v56])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v26 != v45)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *((void *)v45 + 2) = 0;
        }
        uint64_t v35 = &v54[v56];
        uint64_t v58 = (v53 & 0x7FFFFFFFFFFFFFFFLL) - v55;
        swift_release();
        uint64_t v42 = v72;
        BOOL v36 = __OFSUB__(v58, 1);
        uint64_t v27 = (char *)(v58 - 1);
        if (v36)
        {
LABEL_30:
          __break(1u);
LABEL_31:
          uint64_t v30 = v63;
          uint64_t v26 = v76;
          uint64_t v27 = v35;
          goto LABEL_32;
        }
      }
      v75(v35, v77, v28);
      uint64_t v31 = &v35[*(void *)(v73 + 72)];
      uint64_t v33 = v44;
      uint64_t v34 = v67;
      uint64_t v29 = (uint64_t)v70;
      sub_10000FA94(v67, (uint64_t)v70, &qword_1000C3128);
      int v37 = v42(v29, 1, v28);
      uint64_t v32 = v75;
      uint64_t v76 = v26;
      if (v37 == 1) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v28 = v74;
  uint64_t v29 = (uint64_t)v70;
LABEL_3:
  sub_10000FAF8(v29, &qword_1000C3128);
  (*(void (**)(char *, uint64_t, uint64_t, char *))(v73 + 56))(v13, 1, 1, v28);
  uint64_t v30 = v63;
LABEL_32:
  sub_10005ADF8((uint64_t)v71, v30);
  uint64_t result = sub_10000FAF8((uint64_t)v13, &qword_1000C3128);
  unint64_t v59 = *((void *)v26 + 3);
  if (v59 >= 2)
  {
    unint64_t v60 = v59 >> 1;
    BOOL v36 = __OFSUB__(v60, v27);
    unint64_t v61 = v60 - (void)v27;
    if (v36) {
      goto LABEL_39;
    }
    *((void *)v26 + 2) = v61;
  }
  return (uint64_t)v26;
}

uint64_t sub_10005A408(uint64_t a1)
{
  return sub_10005A448(a1, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry, (void (*)(void))sub_10005EBD0);
}

uint64_t sub_10005A448(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), void (*a4)(void))
{
  uint64_t v8 = sub_100007830(&qword_1000C3128);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v55 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a2(0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v54 - v15;
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  v54[0] = a3;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = sub_100059E44(a1, (uint64_t)v54 - v15, v18);
  unint64_t v60 = v16;
  a4(v20);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v59 = v12 + 48;
  uint64_t v21 = _swiftEmptyArrayStorage;
  if (v58(v10, 1, v11) != 1)
  {
    uint64_t v22 = 0;
    uint64_t v56 = (v17 + 32) & ~v17;
    uint64_t v57 = v10;
    uint64_t v28 = (char *)_swiftEmptyArrayStorage + v56;
    uint64_t v30 = v12 + 32;
    uint64_t v29 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 32);
    v54[1] = (uint64_t (*)(void))(v17 | 7);
    uint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v32 = v12;
    uint64_t v33 = v55;
    uint64_t v61 = v11;
    uint64_t v62 = v30;
    while (1)
    {
      int v37 = v10;
      uint64_t v38 = v29;
      uint64_t result = v29(v33, v37, v11);
      if (v22)
      {
        uint64_t v21 = v31;
        BOOL v26 = __OFSUB__(v22--, 1);
        if (v26) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v39 = v31[3];
        if ((uint64_t)((v39 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_33;
        }
        uint64_t v40 = v19;
        int64_t v41 = v39 & 0xFFFFFFFFFFFFFFFELL;
        if (v41 <= 1) {
          uint64_t v42 = 1;
        }
        else {
          uint64_t v42 = v41;
        }
        sub_100007830(&qword_1000C5868);
        uint64_t v43 = *(void *)(v32 + 72);
        uint64_t v44 = v56;
        uint64_t v21 = (void *)swift_allocObject();
        uint64_t result = j__malloc_size(v21);
        if (!v43) {
          goto LABEL_34;
        }
        uint64_t v45 = result - v44;
        if (result - v44 == 0x8000000000000000 && v43 == -1) {
          goto LABEL_35;
        }
        uint64_t v47 = v32;
        uint64_t v48 = v45 / v43;
        void v21[2] = v42;
        void v21[3] = 2 * (v45 / v43);
        uint64_t v49 = (char *)v21 + v44;
        uint64_t v50 = v31[3] >> 1;
        uint64_t v51 = v50 * v43;
        if (v31[2])
        {
          if (v21 < v31 || v49 >= (char *)v31 + v56 + v51)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v21 != v31)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          _OWORD v31[2] = 0;
        }
        uint64_t v28 = &v49[v51];
        uint64_t v53 = (v48 & 0x7FFFFFFFFFFFFFFFLL) - v50;
        uint64_t result = swift_release();
        uint64_t v19 = v40;
        uint64_t v32 = v47;
        uint64_t v33 = v55;
        BOOL v26 = __OFSUB__(v53, 1);
        uint64_t v22 = v53 - 1;
        if (v26)
        {
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
      }
      uint64_t v11 = v61;
      uint64_t v34 = v38(v28, v33, v61);
      v28 += *(void *)(v32 + 72);
      uint64_t v35 = v57;
      v19(v34);
      int v36 = v58(v35, 1, v11);
      uint64_t v29 = v38;
      uint64_t v10 = v35;
      uint64_t v31 = v21;
      if (v36 == 1) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v22 = 0;
LABEL_3:
  sub_10005ADF8((uint64_t)v60, v54[0]);
  uint64_t result = sub_10000FAF8((uint64_t)v10, &qword_1000C3128);
  unint64_t v24 = v21[3];
  if (v24 >= 2)
  {
    unint64_t v25 = v24 >> 1;
    BOOL v26 = __OFSUB__(v25, v22);
    uint64_t v27 = v25 - v22;
    if (v26) {
      goto LABEL_36;
    }
    void v21[2] = v27;
  }
  return (uint64_t)v21;
}

uint64_t sub_10005A820(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_10005A84C(a1, a2, a3, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_10005A84C(uint64_t a1, char *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v8 = v5;
  uint64_t v12 = sub_100007830(&qword_1000C3128);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  unint64_t v46 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v48 = (uint64_t)&v38 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - v17;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v45 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a4(0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v38 - v22;
  uint64_t result = sub_10005B544(v8, (uint64_t)&v38 - v22, a5);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    sub_10005B544((uint64_t)v23, a1, a5);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v39 = a1;
    uint64_t v40 = a5;
    uint64_t v25 = (uint64_t)&v23[*(int *)(v21 + 20)];
    uint64_t v26 = v48;
    sub_10000FA94(v25, v48, &qword_1000C3128);
    uint64_t v27 = v47 + 48;
    uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
    uint64_t v44 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
    if (v28((char *)v26, 1, v19) == 1)
    {
      a3 = 0;
LABEL_11:
      sub_10000FAF8(v26, &qword_1000C3128);
      (*v44)(v18, 1, 1, v19);
      a1 = v39;
      a5 = v40;
LABEL_13:
      sub_10000FAF8((uint64_t)v18, &qword_1000C3128);
    }
    else
    {
      uint64_t v29 = a3;
      a3 = 0;
      uint64_t v49 = v28;
      uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v27 - 16);
      uint64_t v38 = v29;
      uint64_t v41 = v29 - 1;
      uint64_t v42 = v23;
      uint64_t v43 = v27;
      while (1)
      {
        v30(v18, v26, v19);
        uint64_t v31 = (uint64_t)v46;
        Date.addingTimeInterval(_:)();
        uint64_t v32 = *v44;
        (*v44)((char *)v31, 0, 1, v19);
        sub_10005B5AC(v31, v25);
        v32(v18, 0, 1, v19);
        if (v49(v18, 1, v19) == 1)
        {
          a1 = v39;
          a5 = v40;
          uint64_t v23 = v42;
          goto LABEL_13;
        }
        uint64_t v33 = v45;
        v30(v45, (uint64_t)v18, v19);
        v30(a2, (uint64_t)v33, v19);
        if (v41 == a3) {
          break;
        }
        uint64_t v34 = v30;
        uint64_t v35 = v47;
        uint64_t v26 = v48;
        a2 += *(void *)(v47 + 72);
        sub_10000FA94(v25, v48, &qword_1000C3128);
        int v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
        uint64_t v30 = v34;
        uint64_t v49 = v36;
        unsigned int v37 = v36((char *)v26, 1, v19);
        ++a3;
        uint64_t v23 = v42;
        if (v37 == 1) {
          goto LABEL_11;
        }
      }
      a1 = v39;
      a5 = v40;
      a3 = v38;
      uint64_t v23 = v42;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005AC54@<X0>(uint64_t a1@<X0>, void (*a2)(long long *__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100007830(&qword_1000C5650);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = sub_100007830(&qword_1000C5658);
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t result = v9 - 8;
  if (*(void *)(v11 + 64) == v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    a2(&v16, (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    char v12 = v17;
    uint64_t v13 = v18;
    char v14 = v19;
    char v15 = v20;
    *(_OWORD *)a3 = v16;
    *(unsigned char *)(a3 + 16) = v12;
    *(void *)(a3 + 24) = v13;
    *(unsigned char *)(a3 + 32) = v14;
    *(unsigned char *)(a3 + 33) = v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005ADB8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005ADF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005AC54(a1, *(void (**)(long long *__return_ptr, char *))(v2 + 16), a2);
}

uint64_t sub_10005ADF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10005AE60(double a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  LOBYTE(v7) = a6;
  Date.timeIntervalSince(_:)();
  double v10 = -0.0;
  if (a1 > 0.0) {
    double v10 = a1;
  }
  double v11 = v9 + v10;
  if (a5)
  {
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    id v7 = sub_100002BCC(0, 1, 1, 1, 0, 1, v7 & 1, (uint64_t)isa, v11);

    if (v7)
    {
LABEL_7:
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
    __break(1u);
  }
  double v13 = sub_1000031D0(v11);
  Class v14 = Locale._bridgeToObjectiveC()().super.isa;
  id v7 = sub_100002608(0, 1, 1, 1, 0, 1, v7 & 1, (uint64_t)v14, v13);

  if (v7) {
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t *sub_10005AF7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    id v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10005B048(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *sub_10005B0B0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_10005B12C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *sub_10005B1A8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_10005B224(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10005B2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005B2B4);
}

uint64_t sub_10005B2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_10005B324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005B338);
}

uint64_t sub_10005B338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_10005B3AC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10005B44C()
{
  unint64_t result = qword_1000C56F0;
  if (!qword_1000C56F0)
  {
    sub_10000C61C(&qword_1000C56F8);
    sub_100059B20();
    sub_100059B94();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C56F0);
  }
  return result;
}

uint64_t sub_10005B4C8()
{
  return sub_10000FD6C((unint64_t *)&qword_1000C5700, &qword_1000C5708);
}

uint64_t type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C5818);
}

uint64_t type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C5780);
}

uint64_t sub_10005B544(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005B5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C3128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10005B614(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      uint64_t v10 = sub_100007830(&qword_1000C3128);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t sub_10005B778(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(v2, v3);
  }
  return result;
}

void *sub_10005B84C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_100007830(&qword_1000C3128);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *sub_10005B960(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v12 = sub_100007830(&qword_1000C3128);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

void *sub_10005BAD8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_100007830(&qword_1000C3128);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *sub_10005BBEC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v12 = sub_100007830(&qword_1000C3128);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t sub_10005BD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005BD78);
}

uint64_t sub_10005BD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = sub_100007830(&qword_1000C3128);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_10005BDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005BE00);
}

uint64_t sub_10005BE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = sub_100007830(&qword_1000C3128);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

void sub_10005BE78()
{
  sub_10005BF44(319, (unint64_t *)&qword_1000C5790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10005BF44(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t *sub_10005BFA8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100007830(&qword_1000C3128);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      int v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    }
    else
    {
      int v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v10(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v10((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v12 = a3[6];
    double v13 = (char *)a1 + v12;
    Class v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for DateComponents();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    v10((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
  }
  return a1;
}

uint64_t sub_10005C1A0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v4 - 8);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v4);
  int v10 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  if (!v5) {
    v10(a1, v4);
  }
  v10(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[7];

  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
}

char *sub_10005C2EC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007830(&qword_1000C3128);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  }
  else
  {
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  v9(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *sub_10005C494(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100007830(&qword_1000C3128);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
  v12(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v13 = a3[6];
  Class v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  v12(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *sub_10005C6A0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007830(&qword_1000C3128);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    int v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  }
  else
  {
    int v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  v9(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *sub_10005C848(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100007830(&qword_1000C3128);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
  v12(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v13 = a3[6];
  Class v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  v12(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

uint64_t sub_10005CA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005CA68);
}

uint64_t sub_10005CA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C3128);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for DateComponents();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_10005CBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005CBCC);
}

uint64_t sub_10005CBCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100007830(&qword_1000C3128);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for DateComponents();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void sub_10005CD28()
{
  sub_10005BF44(319, (unint64_t *)&qword_1000C5790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      type metadata accessor for DateComponents();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_10005CE5C()
{
  return sub_100058B38(&qword_1000C5858, (void (*)(uint64_t))type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry);
}

uint64_t sub_10005CEA4()
{
  return sub_100058B38(&qword_1000C5860, (void (*)(uint64_t))type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_10005CEEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a2;
  uint64_t v33 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  __chkstk_darwin(v3);
  int v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DateComponents();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Calendar.Identifier();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Calendar();
  uint64_t v25 = *(void *)(v13 - 8);
  uint64_t v26 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for Calendar.Identifier.gregorian(_:), v9);
  Calendar.init(identifier:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_100007830(&qword_1000C5720);
  uint64_t v16 = type metadata accessor for Calendar.Component();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100097850;
  unint64_t v21 = v20 + v19;
  uint64_t v22 = *(void (**)(unint64_t, void, uint64_t))(v17 + 104);
  v22(v21, enum case for Calendar.Component.minute(_:), v16);
  v22(v21 + v18, enum case for Calendar.Component.hour(_:), v16);
  v22(v21 + 2 * v18, enum case for Calendar.Component.weekday(_:), v16);
  v22(v21 + 3 * v18, enum case for Calendar.Component.weekdayOrdinal(_:), v16);
  v22(v21 + 4 * v18, enum case for Calendar.Component.month(_:), v16);
  v22(v21 + 5 * v18, enum case for Calendar.Component.year(_:), v16);
  sub_10005D82C(v20);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Date.init(timeIntervalSinceReferenceDate:)();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v32);
  uint64_t result = v33;
  if (v33 < 0)
  {
    __break(1u);
  }
  else
  {
    DateComponents.hour.setter();
    uint64_t result = v30;
    if ((v30 & 0x8000000000000000) == 0)
    {
      DateComponents.minute.setter();
      Calendar.date(from:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v15, v26);
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Utilities()
{
  return self;
}

uint64_t sub_10005D3C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100017918(*a1, *a2);
}

Swift::Int sub_10005D3D4()
{
  return Hasher._finalize()();
}

uint64_t sub_10005D484()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10005D520()
{
  return Hasher._finalize()();
}

unint64_t sub_10005D5CC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005E004(*a1);
  *a2 = result;
  return result;
}

void sub_10005D5FC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEB00000000746E65;
  unint64_t v4 = 0xEE00746E6569626DLL;
  uint64_t v5 = 0x41746361706D6F43;
  if (v2 != 1)
  {
    uint64_t v5 = 1701736270;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x69626D416C6C7546;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

id sub_10005D668()
{
  id result = [objc_allocWithZone((Class)MTStopwatchManager) init];
  qword_1000CAE30 = (uint64_t)result;
  return result;
}

uint64_t sub_10005D69C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GlobalStopwatchManager()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for AmbientDestination(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *id result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005D79CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AmbientDestination()
{
  return &type metadata for AmbientDestination;
}

unint64_t sub_10005D7D8()
{
  unint64_t result = qword_1000C59C8;
  if (!qword_1000C59C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C59C8);
  }
  return result;
}

void *sub_10005D82C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unsigned int v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100007830(&qword_1000C59D0);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10005E050(&qword_1000C59D8);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10005E050(&qword_1000C59E0);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        unint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10005DB1C()
{
  uint64_t v0 = type metadata accessor for DateComponents();
  uint64_t v53 = *(void *)(v0 - 8);
  uint64_t v54 = v0;
  __chkstk_darwin(v0);
  uint64_t v55 = (char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Calendar();
  uint64_t v51 = *(void *)(v2 - 8);
  uint64_t v52 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v47 - v9;
  Date.init()();
  Date.addingTimeInterval(_:)();
  static Calendar.current.getter();
  sub_100007830(&qword_1000C5720);
  uint64_t v11 = type metadata accessor for Calendar.Component();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100097860;
  unint64_t v16 = v15 + v14;
  uint64_t v17 = *(void (**)(unint64_t, void, uint64_t))(v12 + 104);
  v17(v16, enum case for Calendar.Component.hour(_:), v11);
  v17(v16 + v13, enum case for Calendar.Component.minute(_:), v11);
  v17(v16 + 2 * v13, enum case for Calendar.Component.second(_:), v11);
  sub_10005D82C(v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  unint64_t v18 = v55;
  uint64_t v47 = v10;
  uint64_t v48 = v8;
  Calendar.dateComponents(_:from:to:)();
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = DateComponents.hour.getter();
  if ((v21 & 1) != 0
    || (uint64_t v22 = v20, v23 = DateComponents.minute.getter(), (v24 & 1) != 0)
    || (uint64_t v25 = v23, v26 = DateComponents.second.getter(), (v27 & 1) != 0))
  {
    uint64_t v29 = v19;
    uint64_t v34 = v53;
    uint64_t v33 = v54;
    uint64_t v36 = v51;
    uint64_t v35 = v52;
    uint64_t v38 = v49;
    uint64_t v37 = v50;
    uint64_t v40 = v47;
    uint64_t v39 = v48;
    uint64_t v41 = 0x30303A30303A3030;
  }
  else
  {
    uint64_t v28 = v26;
    uint64_t v29 = v19;
    if (v22)
    {
      uint64_t v56 = v22;
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v58 = v30;
      v31._uint64_t countAndFlagsBits = 58;
      v31._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      uint64_t v56 = v25;
      v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v56 = v25;
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v58 = v44;
    }
    v45._uint64_t countAndFlagsBits = 58;
    v45._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    uint64_t v56 = v28;
    v46._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    uint64_t v34 = v53;
    uint64_t v33 = v54;
    uint64_t v36 = v51;
    uint64_t v35 = v52;
    uint64_t v38 = v49;
    uint64_t v37 = v50;
    uint64_t v41 = v57;
    uint64_t v40 = v47;
    uint64_t v39 = v48;
  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v33);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v35);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v38 + 8);
  v42(v39, v37);
  v42(v40, v37);
  return v41;
}

unint64_t sub_10005E004(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000B2A90, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005E050(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Calendar.Component();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005E098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E0AC);
}

uint64_t sub_10005E0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_10005E11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E130);
}

uint64_t sub_10005E130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata accessor for TimersTimelineSchedule(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C5A40);
}

uint64_t sub_10005E1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005FB68(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
}

unint64_t sub_10005E1E0()
{
  unint64_t result = qword_1000C5700;
  if (!qword_1000C5700)
  {
    sub_10000C61C(&qword_1000C5708);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5700);
  }
  return result;
}

uint64_t sub_10005E23C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007830(&qword_1000C3128);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = v1 + *(int *)(type metadata accessor for TimersTimelineSchedule.TimePeriodEntries(0) + 20);
  sub_100060110(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    sub_10005F974((uint64_t)v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v8, v10);
    Date.addingTimeInterval(_:)();
    uint64_t v13 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    v13(v6, 0, 1, v10);
    sub_10005B5AC((uint64_t)v6, v9);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v13)(a1, 0, 1, v10);
  }
}

uint64_t sub_10005E400@<X0>(uint64_t a1@<X8>)
{
  return sub_10005F9D4(v1, a1, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_10005E434()
{
  uint64_t v1 = sub_100059EAC(v0);
  sub_100060178(v0, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
  return v1;
}

uint64_t sub_10005E484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v57 = a1;
  uint64_t v4 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  __chkstk_darwin(v4);
  uint64_t v54 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v53 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v52 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v51 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v58 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007830(&qword_1000C3128);
  __chkstk_darwin(v8 - 8);
  uint64_t v59 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DateComponents();
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v67 = v14;
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v64 = v17;
  uint64_t v65 = v18;
  unint64_t v19 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56);
  uint64_t v48 = v18 + 56;
  uint64_t v47 = v19;
  v19(a3, 1, 1, v17);
  static Calendar.current.getter();
  sub_100007830(&qword_1000C5720);
  uint64_t v20 = type metadata accessor for Calendar.Component();
  uint64_t v21 = *(void *)(v20 - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100096230;
  (*(void (**)(unint64_t, void, uint64_t))(v21 + 104))(v23 + v22, enum case for Calendar.Component.second(_:), v20);
  sub_10005D82C(v23);
  swift_setDeallocating();
  uint64_t v24 = v57;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v25 = v68;
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  uint64_t v26 = v11 + 8;
  char v27 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v28 = v10;
  v27(v13, v10);
  uint64_t v29 = v26;
  uint64_t v30 = type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v66 + 16))(a3 + *(int *)(v30 + 24), v16, v67);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(a3 + *(int *)(v30 + 20), v25, v64);
  uint64_t v61 = a3;
  Date.addingTimeInterval(_:)();
  static Calendar.current.getter();
  uint64_t v31 = v24;
  uint64_t v63 = v16;
  LOBYTE(v30) = Calendar.date(_:matchesComponents:)();
  uint64_t v49 = v29;
  uint64_t v50 = v28;
  Swift::String v46 = v27;
  v27(v13, v28);
  if (v30)
  {
    uint64_t v32 = v64;
    uint64_t v33 = v65;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v68, v64);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v67);
    uint64_t v34 = v61;
    sub_10005F974(v61);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v34, v24, v32);
    return v47(v34, 0, 1, v32);
  }
  else
  {
    Swift::String v45 = v13;
    static Calendar.current.getter();
    uint64_t v36 = v51;
    (*(void (**)(char *, void, uint64_t))(v51 + 104))(v58, enum case for Calendar.MatchingPolicy.nextTime(_:), v60);
    uint64_t v38 = v52;
    uint64_t v37 = v53;
    (*(void (**)(char *, void, uint64_t))(v53 + 104))(v52, enum case for Calendar.SearchDirection.backward(_:), v62);
    uint64_t v39 = v54;
    uint64_t v40 = v55;
    uint64_t v41 = v56;
    (*(void (**)(char *, void, uint64_t))(v55 + 104))(v54, enum case for Calendar.RepeatedTimePolicy.first(_:), v56);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    uint64_t v42 = v64;
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v43(v68, v64);
    v43(v31, v42);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v62);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v58, v60);
    v46(v45, v50);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v67);
    return sub_10005B5AC(v59, v61);
  }
}

uint64_t sub_10005EBD0@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v91 = a1;
  uint64_t v3 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v87 = *(void *)(v3 - 8);
  uint64_t v88 = v3;
  __chkstk_darwin(v3);
  uint64_t v86 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v85 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v82 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v80 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v81 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Calendar();
  uint64_t v83 = *(void *)(v7 - 8);
  uint64_t v84 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007830(&qword_1000C3128);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)&v69 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = (char *)&v69 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v69 - v20;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v69 - v27;
  uint64_t v92 = v2;
  sub_100060110(v2, (uint64_t)v21);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  uint64_t v93 = v22;
  uint64_t v30 = v22;
  uint64_t v31 = v29;
  if (v29((uint64_t)v21, 1, v30) == 1)
  {
    sub_10005F974((uint64_t)v21);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v91, 1, 1, v93);
  }
  else
  {
    uint64_t v74 = v26;
    uint64_t v75 = v31;
    uint64_t v76 = v13;
    uint64_t v77 = v16;
    id v78 = v19;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v33(v28, v21, v93);
    uint64_t v34 = type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry(0);
    uint64_t v35 = v92 + *(int *)(v34 + 28);
    sub_1000600C8(&qword_1000C5870, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v79 = v28;
    if (dispatch thunk of static Comparable.< infix(_:_:)())
    {
      uint64_t v69 = v35;
      uint64_t v70 = v23;
      id v72 = (void (*)(uint64_t, char *, uint64_t))v33;
      uint64_t v71 = v23 + 32;
      uint64_t v36 = v9;
      static Calendar.current.getter();
      uint64_t v73 = v92 + *(int *)(v34 + 24);
      uint64_t v38 = v80;
      uint64_t v37 = v81;
      (*(void (**)(char *, void, uint64_t))(v80 + 104))(v81, enum case for Calendar.MatchingPolicy.nextTime(_:), v89);
      uint64_t v39 = v85;
      uint64_t v40 = v82;
      (*(void (**)(char *, void, uint64_t))(v85 + 104))(v82, enum case for Calendar.RepeatedTimePolicy.first(_:), v90);
      uint64_t v41 = v86;
      uint64_t v42 = v87;
      uint64_t v43 = v88;
      (*(void (**)(char *, void, uint64_t))(v87 + 104))(v86, enum case for Calendar.SearchDirection.forward(_:), v88);
      uint64_t v44 = (uint64_t)v77;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      Swift::String v45 = v41;
      uint64_t v46 = v44;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v43);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v90);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v89);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v36, v84);
      uint64_t v47 = (uint64_t)v76;
      sub_100060110(v44, (uint64_t)v76);
      int v48 = v75(v47, 1, v93);
      uint64_t v49 = v92;
      uint64_t v50 = v79;
      if (v48 == 1)
      {
        sub_10005F974(v46);
        sub_10005F974(v47);
        sub_10005F974(v49);
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
        v51(v49, 1, 1, v93);
        uint64_t v52 = v91;
        uint64_t v53 = v72;
      }
      else
      {
        uint64_t v59 = v74;
        uint64_t v53 = v72;
        v72((uint64_t)v74, (char *)v47, v93);
        uint64_t v60 = v69;
        char v61 = static Date.> infix(_:_:)();
        uint64_t v52 = v91;
        uint64_t v62 = v70;
        if (v61)
        {
          uint64_t v63 = v59;
          uint64_t v64 = v93;
          (*(void (**)(char *, uint64_t))(v70 + 8))(v63, v93);
          sub_10005F974(v46);
          sub_10005F974(v49);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v49, v60, v64);
          uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);
          v51(v49, 0, 1, v64);
        }
        else
        {
          uint64_t v65 = (uint64_t)v78;
          Date.addingTimeInterval(_:)();
          uint64_t v66 = v59;
          uint64_t v67 = v93;
          (*(void (**)(char *, uint64_t))(v62 + 8))(v66, v93);
          sub_10005F974(v46);
          uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);
          v51(v65, 0, 1, v67);
          sub_10005B5AC(v65, v49);
        }
      }
      uint64_t v68 = v93;
      v53((uint64_t)v52, v50, v93);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v51)(v52, 0, 1, v68);
    }
    else
    {
      uint64_t v55 = (uint64_t)v78;
      uint64_t v54 = v79;
      Date.addingTimeInterval(_:)();
      uint64_t v56 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56);
      uint64_t v57 = v93;
      v56(v55, 0, 1, v93);
      sub_10005B5AC(v55, v92);
      uint64_t v58 = v91;
      v33(v91, v54, v57);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v56)(v58, 0, 1, v57);
    }
  }
}

uint64_t sub_10005F418@<X0>(uint64_t a1@<X8>)
{
  return sub_10005F9D4(v1, a1, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry);
}

uint64_t sub_10005F44C()
{
  uint64_t v1 = sub_10005A408(v0);
  sub_100060178(v0, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry);
  return v1;
}

void *sub_10005F49C(uint64_t a1)
{
  uint64_t v34 = a1;
  uint64_t v1 = type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry(0);
  __chkstk_darwin(v1 - 8);
  uint64_t v33 = (uint64_t)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = type metadata accessor for TimersTimelineSchedule.TimePeriodEntries(0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v32 = (uint64_t)&v32 - v14;
  uint64_t v15 = type metadata accessor for TimelineScheduleMode();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for TimelineScheduleMode.normal(_:), v15);
  char v19 = static TimelineScheduleMode.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v19)
  {
    uint64_t v20 = *v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v34, v3);
    *uint64_t v13 = 0x3FA999999999999ALL;
    uint64_t v21 = (uint64_t)v13 + *(int *)(v10 + 20);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v22(v21, 1, 1, v3);
    sub_10005F974(v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v21, v9, v3);
    v22(v21, 0, 1, v3);
    *uint64_t v13 = v20;
    uint64_t v23 = v32;
    sub_10005F9D4((uint64_t)v13, v32, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
    sub_100007830(&qword_1000C5A80);
    uint64_t v24 = (void *)swift_allocObject();
    uint64_t v25 = (uint64_t)v24 + *(void *)(class metadata base offset for _SequenceBox + *v24 + 16);
    uint64_t v26 = v23;
    uint64_t v27 = type metadata accessor for TimersTimelineSchedule.TimePeriodEntries;
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v28(v9, v34, v3);
    uint64_t v29 = type metadata accessor for TimersTimelineSchedule(0);
    v28(v7, (uint64_t)v35 + *(int *)(v29 + 20), v3);
    uint64_t v30 = v33;
    sub_10005E484((uint64_t)v9, (uint64_t)v7, v33);
    sub_100007830(&qword_1000C5A78);
    uint64_t v24 = (void *)swift_allocObject();
    uint64_t v25 = (uint64_t)v24 + *(void *)(class metadata base offset for _SequenceBox + *v24 + 16);
    uint64_t v27 = type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry;
    uint64_t v26 = v30;
  }
  sub_10005F9D4(v26, v25, v27);
  return v24;
}

void *sub_10005F90C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_10005F49C(a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C5B70);
}

uint64_t type metadata accessor for TimersTimelineSchedule.TimePeriodEntries(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C5AE0);
}

uint64_t sub_10005F974(uint64_t a1)
{
  uint64_t v2 = sub_100007830(&qword_1000C3128);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005F9D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005FA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005FA50);
}

uint64_t sub_10005FA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = sub_100007830(&qword_1000C3128);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_10005FAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005FAD8);
}

uint64_t sub_10005FAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = sub_100007830(&qword_1000C3128);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_10005FB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005FB68(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10005FC08);
}

uint64_t sub_10005FB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_10005FC08()
{
  if (!qword_1000C5790)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000C5790);
    }
  }
}

uint64_t sub_10005FC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005FC74);
}

uint64_t sub_10005FC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C3128);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for DateComponents();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_10005FDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005FDD8);
}

uint64_t sub_10005FDD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100007830(&qword_1000C3128);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for DateComponents();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void sub_10005FF34()
{
  sub_10005FC08();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      type metadata accessor for DateComponents();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_100060038()
{
  return sub_1000600C8(&qword_1000C5BB0, (void (*)(uint64_t))type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry);
}

uint64_t sub_100060080()
{
  return sub_1000600C8(&qword_1000C5BB8, (void (*)(uint64_t))type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_1000600C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100060110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007830(&qword_1000C3128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100060178(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000601D8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100007830(&qword_1000C65B0);
    unint64_t v2 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v30 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v30 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v30 + 1;
    if (!v12)
    {
      int64_t v13 = v30 + 2;
      if (v30 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v30 + 3;
        if (v30 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v30 + 4;
          if (v30 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v30 = v13;
LABEL_28:
    uint64_t v16 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v33[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    uint64_t v15 = *(void **)&v33[0];
    *(void *)&v32[0] = v16;
    sub_100070564();
    id v17 = v15;
    id v18 = v16;
    swift_dynamicCast();
    uint64_t v19 = *(void *)&v33[0];
    sub_1000705A4((_OWORD *)((char *)v33 + 8), v31);
    sub_1000705A4(v31, v33);
    sub_1000705A4(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = -1 << v2[32];
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v6[8 * v23];
      }
      while (v27 == -1);
      unint64_t v8 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(void *)(*((void *)v2 + 6) + 8 * v8) = v19;
    uint64_t result = (uint64_t)sub_1000705A4(v32, (_OWORD *)(*((void *)v2 + 7) + 32 * v8));
    ++*((void *)v2 + 2);
  }
  int64_t v14 = v30 + 5;
  if (v30 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    sub_1000705B4();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v29 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v30 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10006057C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v2 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v21 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007830(&qword_1000C62A8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007830(&qword_1000C62B0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007830(&qword_1000C62B8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = static VerticalAlignment.center.getter();
  *((void *)v7 + 1) = 0;
  v7[16] = 0;
  uint64_t v15 = sub_100007830(&qword_1000C62C0);
  sub_10006086C(v1, (uint64_t)&v7[*(int *)(v15 + 44)]);
  char v16 = static Edge.Set.horizontal.getter();
  sub_10000FA94((uint64_t)v7, (uint64_t)v10, &qword_1000C62A8);
  id v17 = &v10[*(int *)(v8 + 36)];
  *id v17 = v16;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  unsigned char v17[40] = 1;
  sub_10000FAF8((uint64_t)v7, &qword_1000C62A8);
  static AccessibilityChildBehavior.contain.getter();
  unint64_t v18 = sub_10006D760();
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v22);
  sub_10000FAF8((uint64_t)v10, &qword_1000C62B0);
  uint64_t v24 = v8;
  unint64_t v25 = v18;
  swift_getOpaqueTypeConformance2();
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10006086C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v3 = type metadata accessor for TimerCountdownCustomView(0);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v61 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v59 - v7;
  uint64_t v9 = sub_100007830(&qword_1000C62D8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007830(&qword_1000C62E0);
  __chkstk_darwin(v12 - 8);
  uint64_t v63 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100007830(&qword_1000C62E8);
  __chkstk_darwin(v65);
  uint64_t v62 = (uint64_t)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007830(&qword_1000C62F0);
  uint64_t v66 = *(void *)(v15 - 8);
  uint64_t v67 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v60 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v64 = (char *)&v59 - v18;
  uint64_t v19 = type metadata accessor for TimerControlsCustomView(0);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100007830(&qword_1000C5EE0);
  uint64_t v24 = v23 - 8;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v59 = (uint64_t)&v59 - v28;
  sub_100069CD8(a1, (uint64_t)v22, type metadata accessor for TimerSessionEntry);
  uint64_t v29 = (int *)type metadata accessor for SessionsTimerPlatter(0);
  sub_10000F9F0(a1 + v29[5], (uint64_t)&v22[*(int *)(v20 + 28)]);
  sub_10000F9F0(a1 + v29[6], (uint64_t)&v22[*(int *)(v20 + 32)]);
  LOBYTE(v20) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_100069CD8((uint64_t)v22, (uint64_t)v27, type metadata accessor for TimerControlsCustomView);
  uint64_t v38 = &v27[*(int *)(v24 + 44)];
  char *v38 = v20;
  *((void *)v38 + 1) = v31;
  *((void *)v38 + 2) = v33;
  *((void *)v38 + 3) = v35;
  *((void *)v38 + 4) = v37;
  v38[40] = 0;
  sub_100069F74((uint64_t)v22, type metadata accessor for TimerControlsCustomView);
  uint64_t v39 = v59;
  sub_10000F834((uint64_t)v27, v59, &qword_1000C5EE0);
  *(void *)uint64_t v11 = static VerticalAlignment.center.getter();
  *((void *)v11 + 1) = 0;
  v11[16] = 0;
  uint64_t v40 = &v11[*(int *)(sub_100007830(&qword_1000C62F8) + 44)];
  uint64_t v41 = *(void *)(a1 + v29[7]);
  sub_100069CD8(a1, (uint64_t)&v8[*(int *)(v4 + 28)], type metadata accessor for TimerSessionEntry);
  *(void *)uint64_t v8 = sub_10006910C;
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  v8[*(int *)(v4 + 32)] = 1;
  uint64_t v42 = v61;
  sub_100069CD8((uint64_t)v8, v61, type metadata accessor for TimerCountdownCustomView);
  *(void *)uint64_t v40 = v41;
  v40[8] = 0;
  uint64_t v43 = sub_100007830(&qword_1000C6300);
  sub_100069CD8(v42, (uint64_t)&v40[*(int *)(v43 + 48)], type metadata accessor for TimerCountdownCustomView);
  sub_100069F74((uint64_t)v8, type metadata accessor for TimerCountdownCustomView);
  sub_100069F74(v42, type metadata accessor for TimerCountdownCustomView);
  uint64_t v44 = static Alignment.center.getter();
  uint64_t v45 = v63;
  sub_100071600(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v63, 0.0, 1, INFINITY, 0, v44, v46);
  sub_10000FAF8((uint64_t)v11, &qword_1000C62D8);
  uint64_t v47 = v62;
  sub_10000FA94(v45, v62, &qword_1000C62E0);
  *(unsigned char *)(v47 + *(int *)(v65 + 36)) = 0;
  sub_10000FAF8(v45, &qword_1000C62E0);
  sub_10006D800();
  int v48 = v60;
  View.onTapGesture(count:perform:)();
  sub_10000FAF8(v47, &qword_1000C62E8);
  uint64_t v49 = v66;
  uint64_t v50 = v67;
  uint64_t v51 = v64;
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v64, v48, v67);
  sub_10000FA94(v39, (uint64_t)v27, &qword_1000C5EE0);
  uint64_t v52 = v49;
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  uint64_t v54 = v50;
  v53(v48, v51, v50);
  uint64_t v55 = v68;
  sub_10000FA94((uint64_t)v27, v68, &qword_1000C5EE0);
  uint64_t v56 = sub_100007830(&qword_1000C6330);
  v53((char *)(v55 + *(int *)(v56 + 48)), v48, v54);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v52 + 8);
  v57(v51, v54);
  sub_10000FAF8(v39, &qword_1000C5EE0);
  v57(v48, v54);
  return sub_10000FAF8((uint64_t)v27, &qword_1000C5EE0);
}

uint64_t sub_100060EFC()
{
  uint64_t v0 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = [self mtURLForSection:4];
  if (v3)
  {
    uint64_t v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 0, 1, v5);
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v2, 1, 1, v6);
  }
  type metadata accessor for MTSUtilities();
  dispatch thunk of static MTSUtilities.launchClockAppIfPossible(_:)();
  return sub_10000FAF8((uint64_t)v2, (uint64_t *)&unk_1000C3FF0);
}

uint64_t sub_100061034()
{
  return swift_retain();
}

uint64_t sub_10006103C()
{
  return swift_retain();
}

uint64_t sub_100061044()
{
  return swift_retain();
}

uint64_t sub_10006104C()
{
  return swift_retain();
}

uint64_t sub_100061054()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000610C8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate__resizeDelegate;
  uint64_t v2 = sub_100007830(&qword_1000C5F38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100061180()
{
  return type metadata accessor for EnvironmentDelegate(0);
}

uint64_t type metadata accessor for EnvironmentDelegate(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C5BF0);
}

void sub_1000611A8()
{
  sub_10006124C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10006124C()
{
  if (!qword_1000C5C00)
  {
    sub_10000C61C(&qword_1000C3218);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000C5C00);
    }
  }
}

uint64_t sub_1000612C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000612D4);
}

uint64_t sub_1000612D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000612EC);
}

uint64_t type metadata accessor for AlertingTimerView(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C5D70);
}

uint64_t sub_100061314(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *(void *)a1 = *a2;
    a1 = v29 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_10000442C();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v10 + 8);
    *uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
    v11[1] = v13;
    uint64_t v14 = *(uint64_t *)((char *)a2 + v10 + 24);
    void v11[2] = *(uint64_t *)((char *)a2 + v10 + 16);
    v11[3] = v14;
    uint64_t v15 = (int *)type metadata accessor for TimerSessionEntry(0);
    uint64_t v16 = v15[6];
    uint64_t v31 = v12 + v16;
    uint64_t v32 = (char *)v11 + v16;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18(v32, v31, v17);
    *((unsigned char *)v11 + v15[7]) = *(unsigned char *)(v12 + v15[7]);
    uint64_t v19 = v15[8];
    uint64_t v20 = (void *)((char *)v11 + v19);
    uint64_t v21 = (void *)(v12 + v19);
    uint64_t v22 = v21[1];
    void *v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = v15[9];
    uint64_t v24 = (char *)v11 + v23;
    uint64_t v25 = v12 + v23;
    v24[8] = *(unsigned char *)(v25 + 8);
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = v15[10];
    uint64_t v27 = (char *)v11 + v26;
    uint64_t v28 = v12 + v26;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = *(unsigned char *)(v28 + 8);
    *(void *)((char *)v11 + v15[11]) = *(void *)(v12 + v15[11]);
    *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000614D8(uint64_t a1, uint64_t a2)
{
  sub_100004474();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 24);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100061594(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_10000442C();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = *(uint64_t *)((char *)a2 + v9 + 8);
  *uint64_t v10 = *(uint64_t *)((char *)a2 + v9);
  v10[1] = v12;
  uint64_t v13 = *(uint64_t *)((char *)a2 + v9 + 24);
  v10[2] = *(uint64_t *)((char *)a2 + v9 + 16);
  v10[3] = v13;
  uint64_t v14 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v15 = v14[6];
  uint64_t v29 = v11 + v15;
  uint64_t v30 = (char *)v10 + v15;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17(v30, v29, v16);
  *((unsigned char *)v10 + v14[7]) = *(unsigned char *)(v11 + v14[7]);
  uint64_t v18 = v14[8];
  uint64_t v19 = (void *)((char *)v10 + v18);
  uint64_t v20 = (void *)(v11 + v18);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = v14[9];
  uint64_t v23 = (char *)v10 + v22;
  uint64_t v24 = v11 + v22;
  v23[8] = *(unsigned char *)(v24 + 8);
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = v14[10];
  uint64_t v26 = (char *)v10 + v25;
  uint64_t v27 = v11 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = *(unsigned char *)(v27 + 8);
  *(void *)((char *)v10 + v14[11]) = *(void *)(v11 + v14[11]);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100061708(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_10000442C();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_100004474();
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t)a2 + v9;
  *uint64_t v10 = *(uint64_t *)((char *)a2 + v9);
  v10[1] = *(uint64_t *)((char *)a2 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[2] = *(void *)(v11 + 16);
  v10[3] = *(void *)(v11 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v13 = v12[6];
  uint64_t v14 = (char *)v10 + v13;
  uint64_t v15 = v11 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  *((unsigned char *)v10 + v12[7]) = *(unsigned char *)(v11 + v12[7]);
  uint64_t v17 = v12[8];
  uint64_t v18 = (void *)((char *)v10 + v17);
  uint64_t v19 = (void *)(v11 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = v12[9];
  uint64_t v21 = (char *)v10 + v20;
  uint64_t v22 = (uint64_t *)(v11 + v20);
  uint64_t v23 = *v22;
  v21[8] = *((unsigned char *)v22 + 8);
  *(void *)uint64_t v21 = v23;
  uint64_t v24 = v12[10];
  uint64_t v25 = (char *)v10 + v24;
  uint64_t v26 = (uint64_t *)(v11 + v24);
  uint64_t v27 = *v26;
  v25[8] = *((unsigned char *)v26 + 8);
  *(void *)uint64_t v25 = v27;
  *(void *)((char *)v10 + v12[11]) = *(void *)(v11 + v12[11]);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000618A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = a2 + v6;
  long long v9 = *(_OWORD *)(a2 + v6 + 16);
  *uint64_t v7 = *(_OWORD *)(a2 + v6);
  v7[1] = v9;
  uint64_t v10 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v11 = v10[6];
  uint64_t v12 = (char *)v7 + v11;
  uint64_t v13 = v8 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *((unsigned char *)v7 + v10[7]) = *(unsigned char *)(v8 + v10[7]);
  *(_OWORD *)((char *)v7 + v10[8]) = *(_OWORD *)(v8 + v10[8]);
  uint64_t v15 = v10[9];
  uint64_t v16 = (char *)v7 + v15;
  uint64_t v17 = v8 + v15;
  v16[8] = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v18 = v10[10];
  uint64_t v19 = (char *)v7 + v18;
  uint64_t v20 = v8 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = *(unsigned char *)(v20 + 8);
  *(void *)((char *)v7 + v10[11]) = *(void *)(v8 + v10[11]);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000619C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100004474();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  void *v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v9 + 24);
  v8[2] = *(void *)(v9 + 16);
  v8[3] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v13 = v12[6];
  uint64_t v14 = (char *)v8 + v13;
  uint64_t v15 = v9 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  *((unsigned char *)v8 + v12[7]) = *(unsigned char *)(v9 + v12[7]);
  uint64_t v17 = v12[8];
  uint64_t v18 = (void *)((char *)v8 + v17);
  uint64_t v19 = (uint64_t *)(v9 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = v12[9];
  uint64_t v23 = (char *)v8 + v22;
  uint64_t v24 = v9 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = *(unsigned char *)(v24 + 8);
  uint64_t v25 = v12[10];
  uint64_t v26 = (char *)v8 + v25;
  uint64_t v27 = v9 + v25;
  v26[8] = *(unsigned char *)(v27 + 8);
  *(void *)uint64_t v26 = *(void *)v27;
  *(void *)((char *)v8 + v12[11]) = *(void *)(v9 + v12[11]);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100061B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061B34);
}

uint64_t sub_100061B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000624C0(a1, a2, a3, type metadata accessor for TimerSessionEntry);
}

uint64_t sub_100061B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100061B60);
}

uint64_t sub_100061B60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100062598(a1, a2, a3, a4, type metadata accessor for TimerSessionEntry);
}

uint64_t type metadata accessor for TimerCountdownCustomView(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C5E08);
}

uint64_t sub_100061B98()
{
  uint64_t result = type metadata accessor for TimerSessionEntry(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for TimerLabelCustomView(uint64_t a1)
{
  sub_10000C494(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for TimerLabelCustomView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000C484(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TimerLabelCustomView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000C484(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10000C494(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for TimerPausedCompressedTrailingView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TimerLabelCustomView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_10000C494(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerLabelCustomView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimerLabelCustomView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimerLabelCustomView()
{
  return &type metadata for TimerLabelCustomView;
}

void destroy for TimerPausedCompressedTrailingView(uint64_t a1)
{
  swift_bridgeObjectRelease();

  unint64_t v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for TimerPausedCompressedTrailingView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  char v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void *assignWithCopy for TimerPausedCompressedTrailingView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v4 = (void *)a2[3];
  id v5 = (void *)a1[3];
  a1[3] = v4;
  id v6 = v4;

  char v7 = (void *)a2[4];
  uint64_t v8 = (void *)a1[4];
  a1[4] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for TimerPausedCompressedTrailingView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  char v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  id v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for TimerPausedCompressedTrailingView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimerPausedCompressedTrailingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimerPausedCompressedTrailingView()
{
  return &type metadata for TimerPausedCompressedTrailingView;
}

uint64_t sub_1000620AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_10000442C();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_1000621A0(uint64_t a1, uint64_t a2)
{
  sub_100004474();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100062220(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_10000442C();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

uint64_t sub_1000622C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_10000442C();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_100004474();
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t sub_100062374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000623F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100004474();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100062494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000624A8);
}

uint64_t sub_1000624A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000624C0(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_1000624C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a2 == 254)
  {
    unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
    if (v5 > 1) {
      return (v5 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = a4(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_10006256C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062580);
}

uint64_t sub_100062580(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100062598(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_100062598(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 16) = -(char)a2;
  }
  else
  {
    uint64_t v8 = a5(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    uint64_t v10 = v8;
    uint64_t v11 = v6 + *(int *)(a4 + 20);
    return v9(v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for TimerRunningCompressedTrailingView(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C5EA0);
}

uint64_t sub_100062660()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000626F8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100062714@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for EnvironmentDelegate(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100062754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v75 = a3;
  uint64_t v73 = sub_100007830(&qword_1000C65A0);
  __chkstk_darwin(v73);
  uint64_t v74 = (uint64_t *)((char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v60 = type metadata accessor for _ContentTransitionModifier();
  __chkstk_darwin(v60);
  uint64_t v64 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for ContentTransition();
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v62 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_100007830(&qword_1000C6590);
  uint64_t v8 = __chkstk_darwin(v72);
  uint64_t v61 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v56 - v10;
  uint64_t v11 = type metadata accessor for Locale();
  uint64_t v70 = *(void (***)(char *, uint64_t))(v11 - 8);
  uint64_t v71 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (void (**)(char *, uint64_t))((char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v69 = sub_100007830(&qword_1000C5650);
  uint64_t v76 = a1;
  TimelineView.Context.date.getter();
  uint64_t v18 = type metadata accessor for TimelineCountdownView(0);
  sub_100038FBC((uint64_t)v13);
  uint64_t v19 = *(void *)a2;
  char v20 = *(unsigned char *)(a2 + 8);
  sub_100034474(*(void *)a2, v20);
  char v21 = sub_100038DE4(v19, v20);
  sub_1000344D0(v19, v20);
  char v22 = *(unsigned char *)(a2 + *(int *)(v18 + 28));
  Date.timeIntervalSince(_:)();
  sub_10007048C(v23, (uint64_t)v13, v21 & 1, v22);
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  v70[1](v13, v71);
  uint64_t v28 = *(void (**)(void, uint64_t))(v15 + 8);
  uint64_t v70 = v17;
  uint64_t v71 = v14;
  uint64_t v67 = v15 + 8;
  v28(v17, v14);
  uint64_t v29 = *(int *)(v18 + 36);
  uint64_t v68 = a2;
  uint64_t v30 = *(void *)(a2 + v29);
  if (v30)
  {
    if (*(unsigned char *)(v30 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize))
    {
      uint64_t v77 = v25;
      uint64_t v78 = v27;
      sub_10000C92C();
      swift_bridgeObjectRetain();
      uint64_t v31 = Text.init<A>(_:)();
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      char v37 = v36 & 1;
      uint64_t v38 = v62;
      static ContentTransition.numericText(countsDown:)();
      uint64_t v39 = static Animation.easeInOut(duration:)();
      uint64_t v59 = v28;
      uint64_t v40 = v39;
      int v41 = static ContentTransition.Options.animatesDifferentContent.getter();
      uint64_t v58 = v27;
      int v42 = v41;
      uint64_t v57 = v25;
      uint64_t v44 = v63;
      uint64_t v43 = (uint64_t)v64;
      uint64_t v45 = v65;
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v64, v38, v65);
      uint64_t v46 = v60;
      *(void *)(v43 + *(int *)(v60 + 20)) = v40;
      *(_DWORD *)(v43 + *(int *)(v46 + 24)) = v42;
      uint64_t v47 = (uint64_t)v61;
      sub_100069CD8(v43, (uint64_t)&v61[*(int *)(v72 + 36)], (uint64_t (*)(void))&type metadata accessor for _ContentTransitionModifier);
      *(void *)uint64_t v47 = v31;
      *(void *)(v47 + 8) = v33;
      *(unsigned char *)(v47 + 16) = v37;
      *(void *)(v47 + 24) = v35;
      *(_WORD *)(v47 + 32) = 256;
      sub_10000C484(v31, v33, v37);
      swift_bridgeObjectRetain();
      sub_100069F74(v43, (uint64_t (*)(void))&type metadata accessor for _ContentTransitionModifier);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v45);
      uint64_t v25 = v57;
      sub_10000C494(v31, v33, v37);
      swift_bridgeObjectRelease();
      uint64_t v48 = v66;
      sub_10000F834(v47, v66, &qword_1000C6590);
      sub_10000FA94(v48, (uint64_t)v74, &qword_1000C6590);
      swift_storeEnumTagMultiPayload();
      sub_100007830(&qword_1000C5630);
      sub_100070420();
      sub_100059B94();
      uint64_t v27 = v58;
      uint64_t v28 = v59;
      _ConditionalContent<>.init(storage:)();
      sub_10000FAF8(v48, &qword_1000C6590);
    }
    else
    {
      uint64_t v77 = v25;
      uint64_t v78 = v27;
      sub_10000C92C();
      swift_bridgeObjectRetain();
      uint64_t v49 = Text.init<A>(_:)();
      uint64_t v50 = v74;
      *uint64_t v74 = v49;
      v50[1] = v51;
      *((unsigned char *)v50 + 16) = v52 & 1;
      v50[3] = v53;
      *((_WORD *)v50 + 16) = 256;
      swift_storeEnumTagMultiPayload();
      sub_100007830(&qword_1000C5630);
      sub_100070420();
      sub_100059B94();
      _ConditionalContent<>.init(storage:)();
    }
    sub_100062E34(v25, v27);
    swift_bridgeObjectRelease();
    uint64_t v54 = (uint64_t)v70;
    TimelineView.Context.date.getter();
    sub_100063180(v54);
    return ((uint64_t (*)(uint64_t, uint64_t))v28)(v54, v71);
  }
  else
  {
    type metadata accessor for EnvironmentDelegate(0);
    sub_100069F2C(&qword_1000C3138, (void (*)(uint64_t))type metadata accessor for EnvironmentDelegate);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100062E34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for TimelineCountdownView(0);
  uint64_t v6 = (uint64_t *)(v2 + *(int *)(v5 + 36));
  uint64_t v7 = *v6;
  if (!*v6) {
    goto LABEL_10;
  }
  unint64_t v8 = *(void *)(v7 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue + 8);
  if (!((v8 & 0x2000000000000000) != 0
       ? HIBYTE(v8) & 0xF
       : *(void *)(v7 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue) & 0xFFFFFFFFFFFFLL))
    goto LABEL_9;
  if (*(unsigned char *)(v7 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) != 1) {
    goto LABEL_9;
  }
  uint64_t v10 = v5;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v11 = (void *)v23[0];
  if (!v23[0]) {
    goto LABEL_9;
  }
  id v12 = [self systemFontOfSize:*(double *)(v2 + *(int *)(v10 + 32))];
  sub_100007830(&qword_1000C65A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100096230;
  *(void *)(inited + 32) = NSFontAttributeName;
  *(void *)(inited + 40) = v12;
  uint64_t v14 = NSFontAttributeName;
  id v15 = v12;
  unint64_t v16 = sub_10003B7A8(inited);
  NSString v17 = String._bridgeToObjectiveC()();
  sub_1000601D8(v16);
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_100069F2C(&qword_1000C2FC0, type metadata accessor for Key);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v17 sizeWithAttributes:isa];

  id v19 = [v11 systemApertureElementContext];
  v23[4] = Frame.timestamp.getter;
  v23[5] = 0;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  void v23[2] = sub_10001C5B8;
  _OWORD v23[3] = &unk_1000B5798;
  char v20 = _Block_copy(v23);
  [v19 setElementNeedsUpdateWithCoordinatedAnimations:v20];
  _Block_release(v20);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v7 = *v6;
  if (!*v6)
  {
LABEL_10:
    type metadata accessor for EnvironmentDelegate(0);
    sub_100069F2C(&qword_1000C3138, (void (*)(uint64_t))type metadata accessor for EnvironmentDelegate);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  else
  {
LABEL_9:
    char v21 = (void *)(v7 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue);
    *char v21 = a1;
    v21[1] = a2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100063180(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v100 = a1;
  long long v3 = (int *)type metadata accessor for TimelineCountdownView(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for Calendar.Component();
  uint64_t v102 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  id v96 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C3128);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v93 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v95 = (char *)&v78 - v10;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v101 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v78 - v15;
  uint64_t v99 = type metadata accessor for Locale();
  uint64_t v17 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v98 = (uint64_t)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = (uint64_t *)((char *)v1 + v3[9]);
  if (!*v92) {
    goto LABEL_21;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v19 = v103;
  uint64_t result = swift_release();
  if (!v19) {
    return result;
  }
  uint64_t v90 = v14;
  id v94 = v16;
  uint64_t v84 = v5;
  swift_unknownObjectRelease();
  char v21 = (char *)v1 + v3[6];
  uint64_t v22 = v98;
  uint64_t v81 = (char *)v1 + v3[5];
  sub_100038FBC(v98);
  uint64_t v23 = *v1;
  char v24 = *((unsigned char *)v2 + 8);
  sub_100034474(*v2, v24);
  char v25 = sub_100038DE4(v23, v24);
  sub_1000344D0(v23, v24);
  uint64_t v80 = v3[7];
  char v26 = *((unsigned char *)v2 + v80);
  uint64_t v82 = v21;
  Date.timeIntervalSince(_:)();
  sub_10007048C(v27, v22, v25 & 1, v26);
  uint64_t v85 = v28;
  uint64_t v91 = v29;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  uint64_t v83 = v17 + 8;
  uint64_t v79 = v30;
  v30(v22, v99);
  uint64_t v31 = v3;
  uint64_t v32 = v11;
  uint64_t v33 = v102;
  uint64_t v34 = *(void (**)(void))(v102 + 104);
  uint64_t v35 = v96;
  uint64_t v36 = v97;
  unsigned int v88 = enum case for Calendar.Component.second(_:);
  uint64_t v87 = (void (*)(char *, void, uint64_t))v34;
  v34(v96);
  uint64_t v78 = v31;
  uint64_t v37 = v31[11];
  uint64_t v89 = (uint64_t)v2;
  uint64_t v38 = v95;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
  uint64_t v102 = v33 + 8;
  uint64_t v86 = v39;
  v39(v35, v36);
  uint64_t v40 = v101;
  uint64_t v41 = v32;
  uint64_t v42 = v32;
  uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48);
  if (v43(v38, 1, v42) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v44 = (uint64_t)v38;
    return sub_10000FAF8(v44, &qword_1000C3128);
  }
  uint64_t v45 = v38;
  uint64_t v46 = v41;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  v47(v94, v45, v46);
  v87(v35, v88, v36);
  uint64_t v48 = v89;
  if (__OFSUB__(0, *(void *)(v89 + v37)))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v49 = v35;
  uint64_t v50 = v93;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  v86(v49, v36);
  if (v43(v50, 1, v46) == 1)
  {
    (*(void (**)(char *, uint64_t))(v101 + 8))(v94, v46);
    swift_bridgeObjectRelease();
    uint64_t v44 = (uint64_t)v50;
    return sub_10000FAF8(v44, &qword_1000C3128);
  }
  uint64_t v102 = v46;
  v47(v90, v50, v46);
  uint64_t v51 = v98;
  sub_100038FBC(v98);
  uint64_t v52 = *(void *)v48;
  char v53 = *(unsigned char *)(v48 + 8);
  sub_100034474(*(void *)v48, v53);
  char v54 = sub_100038DE4(v52, v53);
  sub_1000344D0(v52, v53);
  uint64_t v55 = v80;
  LOBYTE(v52) = *(unsigned char *)(v48 + v80);
  Date.timeIntervalSince(_:)();
  sub_10007048C(v56, v51, v54 & 1, v52);
  uint64_t v97 = v57;
  uint64_t v100 = v58;
  uint64_t v59 = v99;
  uint64_t v60 = v79;
  v79(v51, v99);
  sub_100038FBC(v51);
  uint64_t v61 = *(void *)v48;
  char v62 = *(unsigned char *)(v48 + 8);
  sub_100034474(*(void *)v48, v62);
  char v63 = sub_100038DE4(v61, v62);
  sub_1000344D0(v61, v62);
  LOBYTE(v61) = *(unsigned char *)(v48 + v55);
  Date.timeIntervalSince(_:)();
  sub_10007048C(v64, v51, v63 & 1, v61);
  v60(v51, v59);
  uint64_t v65 = v101;
  if (!*v92) {
    goto LABEL_21;
  }
  swift_retain();
  uint64_t v66 = String.count.getter();
  uint64_t v67 = String.count.getter();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v68 = (uint64_t)v84;
  sub_100069CD8(v48, (uint64_t)v84, type metadata accessor for TimelineCountdownView);
  if (v66 != v67)
  {
    sub_100069F74(v68, type metadata accessor for TimelineCountdownView);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v71 = v92;
    goto LABEL_16;
  }
  if (!*(void *)(v68 + v78[9])) {
    goto LABEL_21;
  }
  swift_retain();
  uint64_t v69 = String.count.getter();
  uint64_t v70 = String.count.getter();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100069F74(v68, type metadata accessor for TimelineCountdownView);
  uint64_t v71 = v92;
  if (v69 != v70)
  {
LABEL_16:
    uint64_t v75 = *v71;
    if (*v71)
    {
      uint64_t v76 = *(void (**)(char *, uint64_t))(v65 + 8);
      swift_retain();
      uint64_t v77 = v102;
      v76(v90, v102);
      v76(v94, v77);
      *(unsigned char *)(v75 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 1;
      return swift_release();
    }
LABEL_21:
    type metadata accessor for EnvironmentDelegate(0);
    sub_100069F2C(&qword_1000C3138, (void (*)(uint64_t))type metadata accessor for EnvironmentDelegate);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  uint64_t v72 = *v92;
  if (!*v92) {
    goto LABEL_21;
  }
  uint64_t v73 = *(void (**)(char *, uint64_t))(v65 + 8);
  swift_retain();
  uint64_t v74 = v102;
  v73(v90, v102);
  v73(v94, v74);
  *(unsigned char *)(v72 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 0;
  return swift_release();
}

uint64_t sub_100063A8C(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TimersTimelineSchedule(0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (uint64_t *)((char *)&v20 - v11);
  uint64_t v13 = v1 + *(int *)(v2 + 32);
  uint64_t v14 = (char *)&v20 + *(int *)(v10 + 20) - v11;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, v13, v15);
  *uint64_t v12 = 0x3FA999999999999ALL;
  sub_100069CD8(v1, (uint64_t)v5, type metadata accessor for TimelineCountdownView);
  unint64_t v16 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v17 = swift_allocObject();
  sub_10006D944((uint64_t)v5, v17 + v16, type metadata accessor for TimelineCountdownView);
  sub_100069CD8((uint64_t)v12, (uint64_t)v9, type metadata accessor for TimersTimelineSchedule);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_100070360;
  *(void *)(v18 + 24) = v17;
  sub_100007830(&qword_1000C6570);
  sub_100069F2C(&qword_1000C6578, (void (*)(uint64_t))type metadata accessor for TimersTimelineSchedule);
  sub_10006FD84(&qword_1000C6580, &qword_1000C6570, (void (*)(void))sub_100070420, (void (*)(void))sub_100059B94);
  TimelineView<>.init(_:content:)();
  return sub_100069F74((uint64_t)v12, type metadata accessor for TimersTimelineSchedule);
}

uint64_t sub_100063D8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v41 = sub_100007830(&qword_1000C6208);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ContentTransition.Style();
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  uint64_t v36 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ContentTransition();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100007830(&qword_1000C6210);
  uint64_t v9 = __chkstk_darwin(v40);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = sub_100007830(&qword_1000C6218);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100007830(&qword_1000C6220);
  uint64_t v17 = __chkstk_darwin(v39);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  char v21 = (char *)&v36 - v20;
  uint64_t v22 = type metadata accessor for RunningCountdownView(0);
  if (*(unsigned char *)(v1 + *(int *)(v22 + 36)) == 1)
  {
    sub_10006427C(0, (uint64_t)v13);
    static ContentTransition.numericText(countsDown:)();
    uint64_t v23 = static Animation.easeInOut(duration:)();
    int v24 = static ContentTransition.Options.animatesDifferentContent.getter();
    char v25 = &v16[*(int *)(v14 + 36)];
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v25, v8, v5);
    uint64_t v26 = type metadata accessor for _ContentTransitionModifier();
    *(void *)&v25[*(int *)(v26 + 20)] = v23;
    *(_DWORD *)&v25[*(int *)(v26 + 24)] = v24;
    sub_10000FA94((uint64_t)v13, (uint64_t)v16, &qword_1000C6210);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_10000FAF8((uint64_t)v13, &qword_1000C6210);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v28 = v36;
    static ContentTransition.Style.sessionWidget.getter();
    uint64_t v29 = (uint64_t *)&v19[*(int *)(v39 + 36)];
    uint64_t v30 = sub_100007830(&qword_1000C62A0);
    uint64_t v32 = v37;
    uint64_t v31 = v38;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))((char *)v29 + *(int *)(v30 + 28), v28, v38);
    uint64_t *v29 = KeyPath;
    sub_10000FA94((uint64_t)v16, (uint64_t)v19, &qword_1000C6218);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v31);
    sub_10000FAF8((uint64_t)v16, &qword_1000C6218);
    uint64_t v33 = &qword_1000C6220;
    sub_10000F834((uint64_t)v19, (uint64_t)v21, &qword_1000C6220);
    sub_10000FA94((uint64_t)v21, v42, &qword_1000C6220);
    swift_storeEnumTagMultiPayload();
    sub_10006D12C();
    sub_10006D274();
    _ConditionalContent<>.init(storage:)();
    uint64_t v34 = (uint64_t)v21;
  }
  else
  {
    sub_10006427C(*(unsigned __int8 *)(v1 + *(int *)(v22 + 20)), (uint64_t)v11);
    uint64_t v33 = &qword_1000C6210;
    sub_10000FA94((uint64_t)v11, v42, &qword_1000C6210);
    swift_storeEnumTagMultiPayload();
    sub_10006D12C();
    sub_10006D274();
    _ConditionalContent<>.init(storage:)();
    uint64_t v34 = (uint64_t)v11;
  }
  return sub_10000FAF8(v34, v33);
}

uint64_t sub_10006427C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v69 = a1;
  uint64_t v68 = a2;
  uint64_t v3 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v66 = *(void *)(v3 - 8);
  uint64_t v67 = v3;
  __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v5 - 8);
  long double v56 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimelineCountdownView(0);
  uint64_t v12 = (int *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_100007830(&qword_1000C6288) - 8;
  __chkstk_darwin(v58);
  uint64_t v54 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100007830(&qword_1000C6278) - 8;
  __chkstk_darwin(v60);
  uint64_t v55 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100007830(&qword_1000C6268) - 8;
  __chkstk_darwin(v62);
  uint64_t v57 = (uint64_t)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100007830(&qword_1000C6258) - 8;
  __chkstk_darwin(v63);
  uint64_t v59 = (uint64_t)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100007830(&qword_1000C6248);
  __chkstk_darwin(v64);
  uint64_t v61 = (uint64_t)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v53 = v2;
  v20(v10, v2, v7);
  uint64_t v21 = type metadata accessor for RunningCountdownView(0);
  uint64_t v22 = *(void *)(v2 + *(int *)(v21 + 24));
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)&v14[v12[7]] = swift_getKeyPath();
  sub_100007830(&qword_1000C49D0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for EnvironmentDelegate(0);
  sub_100069F2C(&qword_1000C3138, (void (*)(uint64_t))type metadata accessor for EnvironmentDelegate);
  uint64_t v24 = EnvironmentObject.init()();
  uint64_t v26 = v25;
  *(void *)uint64_t v14 = KeyPath;
  v14[8] = 0;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v14[v12[8]], v10, v7);
  v14[v12[9]] = v69;
  *(void *)&v14[v12[10]] = v22;
  long double v27 = (uint64_t *)&v14[v12[11]];
  *long double v27 = v24;
  v27[1] = v26;
  static Calendar.current.getter();
  *(void *)&v14[v12[13]] = 1;
  uint64_t v28 = v53;
  uint64_t v29 = type metadata accessor for Font.Design();
  uint64_t v30 = (uint64_t)v56;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v56, 1, 1, v29);
  static Font.system(size:weight:design:)();
  sub_10000FAF8(v30, &qword_1000C3148);
  Font.monospacedDigit()();
  swift_release();
  uint64_t v31 = v65;
  uint64_t v32 = v66;
  uint64_t v33 = v67;
  (*(void (**)(char *, void, uint64_t))(v66 + 104))(v65, enum case for Font._StylisticAlternative.three(_:), v67);
  uint64_t v34 = Font._stylisticAlternative(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  uint64_t v35 = swift_getKeyPath();
  uint64_t v36 = v54;
  sub_100069CD8((uint64_t)v14, v54, type metadata accessor for TimelineCountdownView);
  uint64_t v37 = (uint64_t *)(v36 + *(int *)(v58 + 44));
  *uint64_t v37 = v35;
  v37[1] = v34;
  sub_100069F74((uint64_t)v14, type metadata accessor for TimelineCountdownView);
  uint64_t v38 = *(void *)(v28 + *(int *)(v21 + 32));
  uint64_t v39 = swift_getKeyPath();
  uint64_t v40 = v55;
  sub_10000FA94(v36, v55, &qword_1000C6288);
  uint64_t v41 = (uint64_t *)(v40 + *(int *)(v60 + 44));
  uint64_t *v41 = v39;
  v41[1] = v38;
  swift_retain();
  sub_10000FAF8(v36, &qword_1000C6288);
  uint64_t v42 = swift_getKeyPath();
  uint64_t v43 = v57;
  sub_10000FA94(v40, v57, &qword_1000C6278);
  uint64_t v44 = v43 + *(int *)(v62 + 44);
  *(void *)uint64_t v44 = v42;
  *(unsigned char *)(v44 + 8) = 1;
  sub_10000FAF8(v40, &qword_1000C6278);
  uint64_t v45 = swift_getKeyPath();
  uint64_t v46 = v59;
  sub_10000FA94(v43, v59, &qword_1000C6268);
  uint64_t v47 = v46 + *(int *)(v63 + 44);
  *(void *)uint64_t v47 = v45;
  *(void *)(v47 + 8) = 1;
  *(unsigned char *)(v47 + 16) = 0;
  sub_10000FAF8(v43, &qword_1000C6268);
  if (v69) {
    double v48 = 1.0;
  }
  else {
    double v48 = 0.4;
  }
  uint64_t v49 = swift_getKeyPath();
  uint64_t v50 = v61;
  sub_10000FA94(v46, v61, &qword_1000C6258);
  uint64_t v51 = v50 + *(int *)(v64 + 36);
  *(void *)uint64_t v51 = v49;
  *(double *)(v51 + 8) = v48;
  sub_10000FAF8(v46, &qword_1000C6258);
  sub_10006D320();
  View.accessibilityIdentifier(_:)();
  return sub_10000FAF8(v50, &qword_1000C6248);
}

uint64_t sub_100064A08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v2 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v1[1];
  uint64_t v28 = *v1;
  uint64_t v29 = v5;
  sub_10000C92C();
  swift_bridgeObjectRetain();
  uint64_t v6 = Text.init<A>(_:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  uint64_t v11 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v4, 1, 1, v11);
  static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v4, &qword_1000C3148);
  Font.monospacedDigit()();
  swift_release();
  uint64_t v12 = Text.font(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  swift_release();
  sub_10000C494(v6, v8, v10);
  swift_bridgeObjectRelease();
  uint64_t v17 = Text.foregroundColor(_:)();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  LOBYTE(v8) = v22 & 1;
  sub_10000C494(v12, v14, v16 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = swift_getKeyPath();
  uint64_t v25 = swift_getKeyPath();
  uint64_t v28 = v17;
  uint64_t v29 = v19;
  char v30 = v8;
  uint64_t v31 = v21;
  uint64_t v32 = KeyPath;
  char v33 = 1;
  uint64_t v34 = v24;
  uint64_t v35 = 1;
  char v36 = 0;
  uint64_t v37 = v25;
  uint64_t v38 = 0x3FD999999999999ALL;
  sub_100007830(&qword_1000C61D8);
  sub_10006CFCC();
  View.accessibilityIdentifier(_:)();
  sub_10000C494(v17, v19, v8);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100064CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TimerControlsCustomView(0);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007830(&qword_1000C5EE0);
  uint64_t v9 = v8 - 8;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v53 - v13;
  sub_100069CD8(a1, (uint64_t)v7, type metadata accessor for TimerSessionEntry);
  uint64_t v15 = type metadata accessor for AlertingTimerView(0);
  sub_10000F9F0(a1 + *(int *)(v15 + 20), (uint64_t)&v7[*(int *)(v5 + 28)]);
  sub_10000F9F0(a1 + *(int *)(v15 + 24), (uint64_t)&v7[*(int *)(v5 + 32)]);
  LOBYTE(v5) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  sub_100069CD8((uint64_t)v7, (uint64_t)v12, type metadata accessor for TimerControlsCustomView);
  uint64_t v24 = &v12[*(int *)(v9 + 44)];
  *uint64_t v24 = v5;
  *((void *)v24 + 1) = v17;
  *((void *)v24 + 2) = v19;
  *((void *)v24 + 3) = v21;
  *((void *)v24 + 4) = v23;
  v24[40] = 0;
  sub_100069F74((uint64_t)v7, type metadata accessor for TimerControlsCustomView);
  sub_10000F834((uint64_t)v12, (uint64_t)v14, &qword_1000C5EE0);
  uint64_t countAndFlagsBits = *(void *)(a1 + 16);
  unint64_t object = *(void **)(a1 + 24);
  if (countAndFlagsBits == 0x5F544E4552525543 && object == (void *)0xED000052454D4954
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    id v27 = [self mainBundle];
    v54._unint64_t object = (void *)0x8000000100099CB0;
    v28._uint64_t countAndFlagsBits = 0x72656D6954;
    v28._unint64_t object = (void *)0xE500000000000000;
    v29._uint64_t countAndFlagsBits = 0;
    v29._unint64_t object = (void *)0xE000000000000000;
    v54._uint64_t countAndFlagsBits = 0xD000000000000013;
    Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v54);
    uint64_t countAndFlagsBits = v30._countAndFlagsBits;
    unint64_t object = v30._object;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v53[0] = countAndFlagsBits;
  v53[1] = object;
  sub_10000C92C();
  uint64_t v31 = Text.init<A>(_:)();
  uint64_t v33 = v32;
  char v35 = v34;
  uint64_t v37 = v36;
  if (qword_1000C2CF8 != -1) {
    swift_once();
  }
  char v38 = v35 & 1;
  uint64_t v39 = qword_1000CAF88;
  swift_retain();
  char v40 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_10000FA94((uint64_t)v14, (uint64_t)v12, &qword_1000C5EE0);
  sub_10000FA94((uint64_t)v12, a2, &qword_1000C5EE0);
  uint64_t v49 = sub_100007830(&qword_1000C5EE8);
  uint64_t v50 = a2 + *(int *)(v49 + 48);
  *(void *)uint64_t v50 = 0;
  *(unsigned char *)(v50 + 8) = 1;
  uint64_t v51 = a2 + *(int *)(v49 + 64);
  *(void *)uint64_t v51 = v31;
  *(void *)(v51 + 8) = v33;
  *(unsigned char *)(v51 + 16) = v38;
  *(void *)(v51 + 24) = v37;
  *(void *)(v51 + 32) = v39;
  *(unsigned char *)(v51 + 40) = v40;
  *(void *)(v51 + 48) = v42;
  *(void *)(v51 + 56) = v44;
  *(void *)(v51 + 64) = v46;
  *(void *)(v51 + 72) = v48;
  *(unsigned char *)(v51 + 80) = 0;
  sub_10000C484(v31, v33, v38);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FAF8((uint64_t)v14, &qword_1000C5EE0);
  sub_10000C494(v31, v33, v38);
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000FAF8((uint64_t)v12, &qword_1000C5EE0);
}

uint64_t sub_1000650F0@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.bottom.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v3 = sub_100007830(&qword_1000C5ED8);
  return sub_100064CC4(v1, a1 + *(int *)(v3 + 44));
}

uint64_t sub_10006513C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = sub_100007830(&qword_1000C61B0);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RoundedRectangle();
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (double *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100007830(&qword_1000C6180);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a1 + 40);
  double v16 = *(double *)a1;
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v17 = v40;
  int v38 = v41;
  uint64_t v37 = v42;
  int v36 = v43;
  uint64_t v34 = v45;
  uint64_t v35 = v44;
  double v18 = v16 * 0.5;
  uint64_t v19 = (char *)v10 + *(int *)(v8 + 28);
  uint64_t v20 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v21 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
  *uint64_t v10 = v18;
  v10[1] = v18;
  sub_100069CD8((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v6[*(int *)(v4 + 44)] = 256;
  sub_10000FA94((uint64_t)v6, (uint64_t)&v14[*(int *)(v12 + 44)], &qword_1000C61B0);
  *(void *)uint64_t v14 = v15;
  *((_WORD *)v14 + 4) = 256;
  *((void *)v14 + 2) = v17;
  v14[24] = v38;
  *((void *)v14 + 4) = v37;
  v14[40] = v36;
  uint64_t v22 = v34;
  *((void *)v14 + 6) = v35;
  *((void *)v14 + 7) = v22;
  swift_retain();
  sub_10000FAF8((uint64_t)v6, &qword_1000C61B0);
  sub_100069F74((uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  swift_release();
  uint64_t v23 = static Alignment.center.getter();
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = Image.init(systemName:)();
  uint64_t v27 = *(void *)(a1 + 8);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = *(void *)(a1 + 32);
  uint64_t v30 = swift_getKeyPath();
  uint64_t v31 = v39;
  sub_10000FA94((uint64_t)v14, v39, &qword_1000C6180);
  uint64_t v32 = (uint64_t *)(v31 + *(int *)(sub_100007830(&qword_1000C6168) + 36));
  uint64_t *v32 = v26;
  v32[1] = KeyPath;
  _OWORD v32[2] = v27;
  v32[3] = v30;
  v32[4] = v29;
  v32[5] = v23;
  v32[6] = v25;
  swift_retain();
  swift_retain();
  return sub_10000FAF8((uint64_t)v14, &qword_1000C6180);
}

uint64_t sub_100065488@<X0>(uint64_t a1@<X8>)
{
  v13[1] = a1;
  uint64_t v2 = type metadata accessor for BorderlessButtonStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007830(&qword_1000C6160);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = v1[1];
  v14[0] = *v1;
  v14[1] = v10;
  long long v11 = v1[3];
  v14[2] = v1[2];
  v14[3] = v11;
  v13[4] = v14;
  swift_retain();
  sub_100007830(&qword_1000C6168);
  sub_10006CBE4();
  Button.init(action:label:)();
  BorderlessButtonStyle.init()();
  sub_10000FD6C(&qword_1000C61C8, &qword_1000C6160);
  sub_100069F2C(&qword_1000C61D0, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000656E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100007830(&qword_1000C65E8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007830(&qword_1000C65D8);
  __chkstk_darwin(v8);
  long long v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1 + *(int *)(type metadata accessor for MediumActionButton(0) + 24);
  uint64_t v12 = type metadata accessor for Material();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v7, v11, v12);
  *(_WORD *)&v7[*(int *)(v5 + 64)] = 256;
  if (qword_1000C2DA8 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FA94((uint64_t)v7, (uint64_t)v10, &qword_1000C65E8);
  uint64_t v13 = &v10[*(int *)(v8 + 36)];
  long long v14 = v21[1];
  *(_OWORD *)uint64_t v13 = v21[0];
  *((_OWORD *)v13 + 1) = v14;
  *((_OWORD *)v13 + 2) = v21[2];
  sub_10000FAF8((uint64_t)v7, &qword_1000C65E8);
  uint64_t v15 = static Alignment.center.getter();
  uint64_t v17 = v16;
  uint64_t v18 = a2 + *(int *)(sub_100007830(&qword_1000C65C0) + 36);
  sub_10006590C(a1, v18);
  uint64_t v19 = (uint64_t *)(v18 + *(int *)(sub_100007830(&qword_1000C65F8) + 36));
  uint64_t *v19 = v15;
  v19[1] = v17;
  return sub_10000F834((uint64_t)v10, a2, &qword_1000C65D8);
}

uint64_t sub_10006590C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = sub_100007830(&qword_1000C6600);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007830(&qword_1000C6608);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  uint64_t v9 = Image.init(systemName:)();
  if (qword_1000C2DA0 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1000CB030;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = swift_getKeyPath();
  uint64_t v14 = type metadata accessor for MediumActionButton(0);
  uint64_t v15 = (long long *)(a1 + *(int *)(v14 + 28));
  long long v16 = v15[3];
  long long v28 = v15[2];
  long long v29 = v16;
  long long v30 = v15[4];
  long long v17 = v15[1];
  long long v26 = *v15;
  long long v27 = v17;
  swift_retain();
  swift_retain();
  View._colorMatrix(_:)();
  sub_10000FA94((uint64_t)v5, (uint64_t)v8 + *(int *)(v6 + 36), &qword_1000C6600);
  uint64_t *v8 = v9;
  v8[1] = KeyPath;
  v8[2] = v10;
  v8[3] = v13;
  v8[4] = v12;
  sub_10000FAF8((uint64_t)v5, &qword_1000C6600);
  uint64_t v18 = a1 + *(int *)(v14 + 32);
  uint64_t v19 = sub_100007830(&qword_1000C6610);
  uint64_t v20 = v25;
  uint64_t v21 = v25 + *(int *)(v19 + 36);
  uint64_t v22 = type metadata accessor for BlendMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, v18, v22);
  return sub_10000F834((uint64_t)v8, v20, &qword_1000C6608);
}

uint64_t sub_100065B64()
{
  return Button.init(action:label:)();
}

uint64_t sub_100065BF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v51 = a1;
  uint64_t v3 = type metadata accessor for BorderlessButtonStyle();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  uint64_t v45 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100007830(&qword_1000C6618);
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_100007830(&qword_1000C6620);
  uint64_t v9 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007830(&qword_1000C6628);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100007830(&qword_1000C6630);
  __chkstk_darwin(v47);
  uint64_t v43 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100007830(&qword_1000C6638);
  uint64_t v49 = *(void *)(v17 - 8);
  uint64_t v50 = v17;
  __chkstk_darwin(v17);
  uint64_t v48 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v2;
  swift_retain();
  sub_100007830(&qword_1000C6640);
  sub_10007070C();
  Button.init(action:label:)();
  BorderlessButtonStyle.init()();
  sub_10000FD6C(&qword_1000C6680, &qword_1000C6618);
  sub_100069F2C(&qword_1000C61D0, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
  uint64_t v19 = v41;
  uint64_t v20 = v44;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v6, v20);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v19);
  long long v53 = v2[4];
  sub_100007830(&qword_1000C33A8);
  State.wrappedValue.getter();
  if (v54) {
    double v21 = 0.9;
  }
  else {
    double v21 = 1.0;
  }
  static UnitPoint.center.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = v46;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, v11, v46);
  long long v27 = &v15[*(int *)(v13 + 44)];
  *(double *)long long v27 = v21;
  *((double *)v27 + 1) = v21;
  *((void *)v27 + 2) = v23;
  *((void *)v27 + 3) = v25;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  uint64_t v28 = static Animation.spring(response:dampingFraction:blendDuration:)();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v28;
  uint64_t v30 = v43;
  sub_10000FA94((uint64_t)v15, v43, &qword_1000C6628);
  uint64_t v31 = (uint64_t (**)())(v30 + *(int *)(v47 + 36));
  char *v31 = sub_100070884;
  v31[1] = (uint64_t (*)())v29;
  sub_10000FAF8((uint64_t)v15, &qword_1000C6628);
  uint64_t v32 = (_OWORD *)swift_allocObject();
  long long v33 = v2[3];
  v32[3] = v2[2];
  v32[4] = v33;
  v32[5] = v2[4];
  long long v34 = v2[1];
  v32[1] = *v2;
  _OWORD v32[2] = v34;
  uint64_t v35 = (_OWORD *)swift_allocObject();
  long long v36 = v2[3];
  v35[3] = v2[2];
  v35[4] = v36;
  v35[5] = v2[4];
  long long v37 = v2[1];
  v35[1] = *v2;
  v35[2] = v37;
  sub_100070988((uint64_t)v2);
  sub_100070988((uint64_t)v2);
  sub_10006D1F8(&qword_1000C6688, &qword_1000C6630, (void (*)(void))sub_1000709F0);
  int v38 = v48;
  View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)();
  swift_release();
  swift_release();
  sub_10000FAF8(v30, &qword_1000C6630);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v51, v38, v50);
}

uint64_t sub_100066228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100007830(&qword_1000C6668);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007830(&qword_1000C6658);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C2D48 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1000CAFD8;
  uint64_t v14 = (char *)v6 + *(int *)(v4 + 20);
  uint64_t v15 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v16 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v14, v15, v16);
  uint64_t *v6 = v13;
  v6[1] = v13;
  uint64_t v17 = *(void *)(a1 + 24);
  sub_100069CD8((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(void *)&v9[*(int *)(v7 + 52)] = v17;
  *(_WORD *)&v9[*(int *)(v7 + 56)] = 256;
  swift_retain();
  sub_100069F74((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  if (qword_1000C2D50 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FA94((uint64_t)v9, (uint64_t)v12, &qword_1000C6668);
  uint64_t v18 = &v12[*(int *)(v10 + 36)];
  long long v19 = v29[1];
  *(_OWORD *)uint64_t v18 = v29[0];
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v29[2];
  sub_10000FAF8((uint64_t)v9, &qword_1000C6668);
  uint64_t v20 = static Alignment.center.getter();
  uint64_t v22 = v21;
  sub_100066564(a1, (uint64_t)v30);
  sub_10000FA94((uint64_t)v12, a2, &qword_1000C6658);
  uint64_t v23 = a2 + *(int *)(sub_100007830(&qword_1000C6640) + 36);
  long long v24 = v30[5];
  *(_OWORD *)(v23 + 64) = v30[4];
  *(_OWORD *)(v23 + 80) = v24;
  long long v25 = v30[7];
  *(_OWORD *)(v23 + 96) = v30[6];
  *(_OWORD *)(v23 + 112) = v25;
  long long v26 = v30[1];
  *(_OWORD *)uint64_t v23 = v30[0];
  *(_OWORD *)(v23 + 16) = v26;
  long long v27 = v30[3];
  *(_OWORD *)(v23 + 32) = v30[2];
  *(_OWORD *)(v23 + 48) = v27;
  *(void *)(v23 + 128) = v20;
  *(void *)(v23 + 136) = v22;
  return sub_10000FAF8((uint64_t)v12, &qword_1000C6658);
}

uint64_t sub_100066564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  LocalizedStringKey.init(_:)();
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v6 = v5;
  char v8 = v7;
  if (qword_1000C2D20 != -1) {
    swift_once();
  }
  uint64_t v9 = Text.font(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  sub_10000C494(v4, v6, v8 & 1);
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void *)(a1 + 16);
  uint64_t v39 = v40;
  swift_retain();
  uint64_t v14 = Text.foregroundStyle<A>(_:)();
  uint64_t v16 = v15;
  char v18 = v17;
  uint64_t v20 = v19;
  sub_10000C494(v9, v11, v13);
  swift_bridgeObjectRelease();
  sub_100070B14((uint64_t)&v40);
  char v21 = static Edge.Set.top.getter();
  if (qword_1000C2D30 != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  char v30 = static Edge.Set.bottom.getter();
  if (qword_1000C2D38 != -1) {
    swift_once();
  }
  uint64_t result = EdgeInsets.init(_all:)();
  char v41 = 0;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(unsigned char *)(a2 + 16) = v18 & 1;
  *(_DWORD *)(a2 + 17) = v39;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v39 + 3);
  *(void *)(a2 + 24) = v20;
  *(unsigned char *)(a2 + 32) = v21;
  int v32 = *(_DWORD *)v44;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v44[3];
  *(_DWORD *)(a2 + 33) = v32;
  *(void *)(a2 + 40) = v23;
  *(void *)(a2 + 48) = v25;
  *(void *)(a2 + 56) = v27;
  *(void *)(a2 + 64) = v29;
  *(unsigned char *)(a2 + 72) = 0;
  int v33 = *(_DWORD *)v43;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)&v43[3];
  *(_DWORD *)(a2 + 73) = v33;
  *(unsigned char *)(a2 + 80) = v30;
  int v34 = *(_DWORD *)v42;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)&v42[3];
  *(_DWORD *)(a2 + 81) = v34;
  *(void *)(a2 + 88) = v35;
  *(void *)(a2 + 96) = v36;
  *(void *)(a2 + 104) = v37;
  *(void *)(a2 + 112) = v38;
  *(unsigned char *)(a2 + 120) = v41;
  return result;
}

uint64_t sub_100066808@<X0>(uint64_t a1@<X8>)
{
  return sub_100065BF0(a1);
}

uint64_t sub_10006684C()
{
  uint64_t v0 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v3 = Image.init(_internalSystemName:)();
  id v4 = [self mtOrange];
  uint64_t v5 = Color.init(uiColor:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  uint64_t v8 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v2, &qword_1000C3148);
  uint64_t v9 = swift_getKeyPath();
  v11[1] = v3;
  void v11[2] = KeyPath;
  v11[3] = v5;
  v11[4] = v9;
  v11[5] = v8;
  sub_100007830(&qword_1000C63B8);
  sub_10006DD1C();
  View.accessibilityHidden(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100066A04@<X0>(uint64_t *a1@<X8>)
{
  *a1 = static Alignment.center.getter();
  a1[1] = v2;
  sub_100007830(&qword_1000C63B0);
  return sub_10006684C();
}

uint64_t sub_100066A58()
{
  type metadata accessor for EnvironmentDelegate(0);
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectRetain();
  sub_100007830(&qword_1000C3218);
  Published.init(initialValue:)();
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue);
  *uint64_t v1 = 0;
  v1[1] = 0xE000000000000000;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  return v0;
}

uint64_t sub_100066B44()
{
  uint64_t v1 = (int *)type metadata accessor for RunningCountdownView(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007830(&qword_1000C3130);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v0 + *(int *)(type metadata accessor for TimerRunningCompressedTrailingView(0) + 20);
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v3, v7, v8);
  if (qword_1000C2CB8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1000CAF48;
  id v10 = [self mtOrange];
  uint64_t v11 = Color.init(uiColor:)();
  v3[v1[5]] = 1;
  *(void *)&v3[v1[6]] = 0x402F000000000000;
  *(void *)&v3[v1[7]] = v9;
  *(void *)&v3[v1[8]] = v11;
  v3[v1[9]] = 0;
  type metadata accessor for EnvironmentDelegate(0);
  sub_100069F2C(&qword_1000C3138, (void (*)(uint64_t))type metadata accessor for EnvironmentDelegate);
  uint64_t v12 = StateObject.wrappedValue.getter();
  uint64_t v13 = static ObservableObject.environmentStore.getter();
  sub_100069CD8((uint64_t)v3, (uint64_t)v6, type metadata accessor for RunningCountdownView);
  uint64_t v14 = (uint64_t *)&v6[*(int *)(v4 + 36)];
  *uint64_t v14 = v13;
  v14[1] = v12;
  sub_100069F74((uint64_t)v3, type metadata accessor for RunningCountdownView);
  sub_100069FD4();
  View.accessibilityHidden(_:)();
  return sub_10000FAF8((uint64_t)v6, &qword_1000C3130);
}

uint64_t sub_100066DF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100066E14(double a1)
{
  if (a1 <= 36000.0)
  {
    if (a1 <= 600.0) {
      goto LABEL_7;
    }
    id v2 = [*(id *)(v1 + 32) stringFromTimeInterval:];
    if (!v2) {
      goto LABEL_7;
    }
  }
  else
  {
    id v2 = [*(id *)(v1 + 24) stringFromTimeInterval:];
    if (!v2)
    {
LABEL_7:
      uint64_t v4 = *(void *)(v1 + 8);
      swift_bridgeObjectRetain();
      return v4;
    }
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_100066EC8()
{
  sub_100066E14(*v0);
  if (qword_1000C2CB8 != -1) {
    swift_once();
  }
  id v1 = [self mtOrange];
  Color.init(uiColor:)();
  sub_100069ED8();
  View.accessibilityHidden(_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100066FC8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100066FE4()
{
  uint64_t v1 = sub_100007830(&qword_1000C6338);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007830(&qword_1000C6340);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C6348);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 28));
  uint64_t v11 = static VerticalAlignment.center.getter();
  if (v10 == 2)
  {
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = 0;
    unsigned char v9[16] = 0;
    uint64_t v12 = sub_100007830(&qword_1000C6368);
    sub_1000680F4((uint64_t)&v9[*(int *)(v12 + 44)]);
    sub_10000FA94((uint64_t)v9, (uint64_t)v6, &qword_1000C6348);
    swift_storeEnumTagMultiPayload();
    sub_10000FD6C(&qword_1000C6358, &qword_1000C6348);
    sub_10000FD6C(&qword_1000C6360, &qword_1000C6338);
    _ConditionalContent<>.init(storage:)();
    uint64_t v13 = (uint64_t)v9;
    uint64_t v14 = &qword_1000C6348;
  }
  else
  {
    *(void *)uint64_t v3 = v11;
    *((void *)v3 + 1) = 0;
    v3[16] = 0;
    uint64_t v15 = sub_100007830(&qword_1000C6350);
    sub_1000672A8(v0, (uint64_t)&v3[*(int *)(v15 + 44)]);
    sub_10000FA94((uint64_t)v3, (uint64_t)v6, &qword_1000C6338);
    swift_storeEnumTagMultiPayload();
    sub_10000FD6C(&qword_1000C6358, &qword_1000C6348);
    sub_10000FD6C(&qword_1000C6360, &qword_1000C6338);
    _ConditionalContent<>.init(storage:)();
    uint64_t v13 = (uint64_t)v3;
    uint64_t v14 = &qword_1000C6338;
  }
  return sub_10000FAF8(v13, v14);
}

uint64_t sub_1000672A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = sub_100007830(&qword_1000C4820);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100007830(&qword_1000C6370);
  uint64_t v6 = __chkstk_darwin(v36);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int v10 = (char *)&v36 - v9;
  uint64_t v11 = sub_100007830(&qword_1000C6380);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100007830(&qword_1000C4818);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100007830(&qword_1000C6388);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v36 - v21;
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 28)) == 1) {
    sub_10006769C((uint64_t)v16);
  }
  else {
    sub_100067BB0((uint64_t)v16);
  }
  sub_10000FA94((uint64_t)v16, (uint64_t)v13, &qword_1000C4818);
  swift_storeEnumTagMultiPayload();
  sub_10006DB18();
  _ConditionalContent<>.init(storage:)();
  sub_10000FAF8((uint64_t)v16, &qword_1000C4818);
  sub_100068944((uint64_t)&unk_1000B5670, (uint64_t)sub_10006DC84, 0x6C65636E6143, 0xE600000000000000, (uint64_t)v5);
  char v23 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_10000FA94((uint64_t)v5, (uint64_t)v8, &qword_1000C4820);
  int v32 = &v8[*(int *)(v36 + 36)];
  char *v32 = v23;
  *((void *)v32 + 1) = v25;
  *((void *)v32 + 2) = v27;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  v32[40] = 0;
  sub_10000FAF8((uint64_t)v5, &qword_1000C4820);
  sub_10000F834((uint64_t)v8, (uint64_t)v10, &qword_1000C6370);
  sub_10000FA94((uint64_t)v22, (uint64_t)v20, &qword_1000C6388);
  sub_10000FA94((uint64_t)v10, (uint64_t)v8, &qword_1000C6370);
  uint64_t v33 = v37;
  sub_10000FA94((uint64_t)v20, v37, &qword_1000C6388);
  uint64_t v34 = sub_100007830(&qword_1000C63A8);
  sub_10000FA94((uint64_t)v8, v33 + *(int *)(v34 + 48), &qword_1000C6370);
  sub_10000FAF8((uint64_t)v10, &qword_1000C6370);
  sub_10000FAF8((uint64_t)v22, &qword_1000C6388);
  sub_10000FAF8((uint64_t)v8, &qword_1000C6370);
  return sub_10000FAF8((uint64_t)v20, &qword_1000C6388);
}

uint64_t sub_10006769C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v41 = type metadata accessor for ContentShapeKinds();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v38 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TimerControlsCustomView(0);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v35 + 64);
  __chkstk_darwin(v4);
  uint64_t v6 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100007830(&qword_1000C3180);
  uint64_t v9 = __chkstk_darwin(v37);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (char *)&v34 - v12;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1000CAF50;
  static Font.Weight.medium.getter();
  uint64_t v14 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  uint64_t v15 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v8, &qword_1000C3148);
  uint64_t v16 = (void *)(v2 + *(int *)(v4 + 24));
  uint64_t v17 = v16[3];
  uint64_t v18 = v16[4];
  sub_10000C4A4(v16, v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  uint64_t v21 = v16[3];
  uint64_t v20 = v16[4];
  sub_10000C4A4(v16, v21);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v21, v20);
  sub_100069CD8(v2, (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimerControlsCustomView);
  unint64_t v23 = (*(unsigned __int8 *)(v35 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v24 = swift_allocObject();
  sub_10006D944((uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23, type metadata accessor for TimerControlsCustomView);
  uint64_t v42 = v13;
  uint64_t v43 = v15;
  uint64_t v44 = 0x6C69662E79616C70;
  unint64_t v45 = 0xE90000000000006CLL;
  uint64_t v46 = v19;
  uint64_t v47 = v22;
  uint64_t v48 = sub_10006DC68;
  uint64_t v49 = v24;
  LocalizedStringKey.init(stringLiteral:)();
  sub_10000C664();
  View.accessibilityLabel(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t)v36;
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_10000FAF8((uint64_t)v11, &qword_1000C3180);
  uint64_t v26 = v38;
  static ContentShapeKinds.accessibility.getter();
  uint64_t v27 = sub_100007830(&qword_1000C4818);
  uint64_t v28 = v40;
  uint64_t v29 = (unsigned char *)(v40 + *(int *)(v27 + 36));
  uint64_t v30 = sub_100007830(&qword_1000C4848);
  uint64_t v31 = v39;
  uint64_t v32 = v41;
  (*(void (**)(unsigned char *, char *, uint64_t))(v39 + 16))(&v29[*(int *)(v30 + 40)], v26, v41);
  unsigned char *v29 = 0;
  sub_10000FA94(v25, v28, &qword_1000C3180);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v32);
  return sub_10000FAF8(v25, &qword_1000C3180);
}

uint64_t sub_100067BB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v41 = type metadata accessor for ContentShapeKinds();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v38 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TimerControlsCustomView(0);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v35 + 64);
  __chkstk_darwin(v4);
  uint64_t v6 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100007830(&qword_1000C3180);
  uint64_t v9 = __chkstk_darwin(v37);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (char *)&v34 - v12;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1000CAF50;
  static Font.Weight.medium.getter();
  uint64_t v14 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  uint64_t v15 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v8, &qword_1000C3148);
  uint64_t v16 = (void *)(v2 + *(int *)(v4 + 24));
  uint64_t v17 = v16[3];
  uint64_t v18 = v16[4];
  sub_10000C4A4(v16, v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  uint64_t v21 = v16[3];
  uint64_t v20 = v16[4];
  sub_10000C4A4(v16, v21);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v21, v20);
  sub_100069CD8(v2, (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimerControlsCustomView);
  unint64_t v23 = (*(unsigned __int8 *)(v35 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v24 = swift_allocObject();
  sub_10006D944((uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23, type metadata accessor for TimerControlsCustomView);
  uint64_t v42 = v13;
  uint64_t v43 = v15;
  uint64_t v44 = 0x69662E6573756170;
  unint64_t v45 = 0xEA00000000006C6CLL;
  uint64_t v46 = v19;
  uint64_t v47 = v22;
  uint64_t v48 = sub_10006DCA0;
  uint64_t v49 = v24;
  LocalizedStringKey.init(stringLiteral:)();
  sub_10000C664();
  View.accessibilityLabel(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t)v36;
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_10000FAF8((uint64_t)v11, &qword_1000C3180);
  uint64_t v26 = v38;
  static ContentShapeKinds.accessibility.getter();
  uint64_t v27 = sub_100007830(&qword_1000C4818);
  uint64_t v28 = v40;
  uint64_t v29 = (unsigned char *)(v40 + *(int *)(v27 + 36));
  uint64_t v30 = sub_100007830(&qword_1000C4848);
  uint64_t v31 = v39;
  uint64_t v32 = v41;
  (*(void (**)(unsigned char *, char *, uint64_t))(v39 + 16))(&v29[*(int *)(v30 + 40)], v26, v41);
  unsigned char *v29 = 0;
  sub_10000FA94(v25, v28, &qword_1000C3180);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v32);
  return sub_10000FAF8(v25, &qword_1000C3180);
}

uint64_t sub_1000680C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100068944((uint64_t)&unk_1000B5670, (uint64_t)sub_10006DC84, 0x6C65636E6143, 0xE600000000000000, a1);
}

uint64_t sub_1000680F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v1 = sub_100007830(&qword_1000C4820);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007830(&qword_1000C6370);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = sub_100007830(&qword_1000C4818);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - v15;
  sub_1000683A0((uint64_t)&v30 - v15);
  sub_100068944((uint64_t)&unk_1000B55F8, (uint64_t)sub_10006D9AC, 0x7373696D736944, 0xE700000000000000, (uint64_t)v3);
  char v17 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_10000FA94((uint64_t)v3, (uint64_t)v8, &qword_1000C4820);
  uint64_t v26 = &v8[*(int *)(v5 + 44)];
  *uint64_t v26 = v17;
  *((void *)v26 + 1) = v19;
  *((void *)v26 + 2) = v21;
  *((void *)v26 + 3) = v23;
  *((void *)v26 + 4) = v25;
  v26[40] = 0;
  sub_10000FAF8((uint64_t)v3, &qword_1000C4820);
  sub_10000F834((uint64_t)v8, (uint64_t)v10, &qword_1000C6370);
  sub_10000FA94((uint64_t)v16, (uint64_t)v14, &qword_1000C4818);
  sub_10000FA94((uint64_t)v10, (uint64_t)v8, &qword_1000C6370);
  uint64_t v27 = v31;
  sub_10000FA94((uint64_t)v14, v31, &qword_1000C4818);
  uint64_t v28 = sub_100007830(&qword_1000C6378);
  sub_10000FA94((uint64_t)v8, v27 + *(int *)(v28 + 48), &qword_1000C6370);
  sub_10000FAF8((uint64_t)v10, &qword_1000C6370);
  sub_10000FAF8((uint64_t)v16, &qword_1000C4818);
  sub_10000FAF8((uint64_t)v8, &qword_1000C6370);
  return sub_10000FAF8((uint64_t)v14, &qword_1000C4818);
}

uint64_t sub_1000683A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v42 = type metadata accessor for ContentShapeKinds();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v39 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for TimerControlsCustomView(0);
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v35 + 64);
  __chkstk_darwin(v2);
  uint64_t v4 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100007830(&qword_1000C3180);
  uint64_t v7 = __chkstk_darwin(v38);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)&v35 - v10;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1000CAF50;
  static Font.Weight.semibold.getter();
  uint64_t v12 = enum case for Font.Design.rounded(_:);
  uint64_t v13 = type metadata accessor for Font.Design();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v6, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v13);
  uint64_t v15 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v6, &qword_1000C3148);
  uint64_t v16 = v37;
  char v17 = (void *)(v37 + *(int *)(v2 + 24));
  uint64_t v18 = v17[3];
  uint64_t v19 = v17[4];
  sub_10000C4A4(v17, v18);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
  uint64_t v22 = v17[3];
  uint64_t v21 = v17[4];
  sub_10000C4A4(v17, v22);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v22, v21);
  sub_100069CD8(v16, (uint64_t)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimerControlsCustomView);
  unint64_t v24 = (*(unsigned __int8 *)(v35 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v25 = swift_allocObject();
  sub_10006D944((uint64_t)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24, type metadata accessor for TimerControlsCustomView);
  uint64_t v43 = v11;
  uint64_t v44 = v15;
  uint64_t v45 = 0x6C632E776F727261;
  unint64_t v46 = 0xEF657369776B636FLL;
  uint64_t v47 = v20;
  uint64_t v48 = v23;
  uint64_t v49 = sub_10006DB00;
  uint64_t v50 = v25;
  LocalizedStringKey.init(stringLiteral:)();
  sub_10000C664();
  View.accessibilityLabel(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = (uint64_t)v36;
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_10000FAF8((uint64_t)v9, &qword_1000C3180);
  uint64_t v27 = v39;
  static ContentShapeKinds.accessibility.getter();
  uint64_t v28 = sub_100007830(&qword_1000C4818);
  uint64_t v29 = v41;
  uint64_t v30 = (unsigned char *)(v41 + *(int *)(v28 + 36));
  uint64_t v31 = sub_100007830(&qword_1000C4848);
  uint64_t v32 = v40;
  uint64_t v33 = v42;
  (*(void (**)(unsigned char *, char *, uint64_t))(v40 + 16))(&v30[*(int *)(v31 + 40)], v27, v42);
  unsigned char *v30 = 0;
  sub_10000FA94(v26, v29, &qword_1000C3180);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v33);
  return sub_10000FAF8(v26, &qword_1000C3180);
}

uint64_t sub_100068910@<X0>(uint64_t a1@<X8>)
{
  return sub_100068944((uint64_t)&unk_1000B55F8, (uint64_t)sub_10006D9AC, 0x7373696D736944, 0xE700000000000000, a1);
}

uint64_t sub_100068944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v63 = a2;
  uint64_t v55 = a1;
  uint64_t v68 = a5;
  uint64_t v69 = type metadata accessor for ContentShapeKinds();
  uint64_t v67 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v66 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v6 - 8);
  uint64_t v61 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for BlendMode();
  uint64_t v8 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v58 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimerControlsCustomView(0);
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v52 + 64);
  __chkstk_darwin(v10);
  uint64_t v53 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100007830(&qword_1000C3150);
  __chkstk_darwin(v57);
  uint64_t v16 = (uint64_t *)((char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = sub_100007830(&qword_1000C3170);
  uint64_t v17 = __chkstk_darwin(v59);
  long double v56 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v62 = (char *)&v51 - v19;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1000CAF50;
  static Font.Weight.medium.getter();
  uint64_t v21 = enum case for Font.Design.rounded(_:);
  uint64_t v22 = type metadata accessor for Font.Design();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v14, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v14, 0, 1, v22);
  uint64_t v24 = static Font.system(size:weight:design:)();
  sub_10000FAF8((uint64_t)v14, &qword_1000C3148);
  uint64_t v25 = v54;
  uint64_t v26 = (void *)(v54 + *(int *)(v10 + 24));
  uint64_t v27 = v26[3];
  uint64_t v28 = v26[4];
  sub_10000C4A4(v26, v27);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 56))(v27, v28);
  uint64_t v31 = v26[3];
  uint64_t v30 = v26[4];
  sub_10000C4A4(v26, v31);
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 80))(v31, v30);
  uint64_t v33 = v25;
  uint64_t v34 = v53;
  sub_100069CD8(v33, v53, type metadata accessor for TimerControlsCustomView);
  unint64_t v35 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v36 = swift_allocObject();
  sub_10006D944(v34, v36 + v35, type metadata accessor for TimerControlsCustomView);
  uint64_t v37 = v58;
  uint64_t v38 = v60;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v58, enum case for BlendMode.plusLighter(_:), v60);
  uint64_t v39 = (uint64_t)v61;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v61, v37, v38);
  sub_100069CD8(v39, (uint64_t)v16 + *(int *)(v57 + 36), (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  *uint64_t v16 = v20;
  v16[1] = v24;
  void v16[2] = 0x6B72616D78;
  void v16[3] = 0xE500000000000000;
  void v16[4] = v29;
  uint64_t v40 = v63;
  v16[5] = v32;
  v16[6] = v40;
  v16[7] = v36;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100069F74(v39, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v37, v38);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  LocalizedStringKey.init(stringLiteral:)();
  sub_10006D1F8((unint64_t *)&qword_1000C3158, &qword_1000C3150, (void (*)(void))sub_10000C664);
  uint64_t v41 = (uint64_t)v56;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FAF8((uint64_t)v16, &qword_1000C3150);
  uint64_t v42 = (uint64_t)v62;
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_10000FAF8(v41, &qword_1000C3170);
  uint64_t v43 = v66;
  static ContentShapeKinds.accessibility.getter();
  uint64_t v44 = sub_100007830(&qword_1000C4820);
  uint64_t v45 = v68;
  unint64_t v46 = (unsigned char *)(v68 + *(int *)(v44 + 36));
  uint64_t v47 = sub_100007830(&qword_1000C4848);
  uint64_t v48 = v67;
  uint64_t v49 = v69;
  (*(void (**)(unsigned char *, char *, uint64_t))(v67 + 16))(&v46[*(int *)(v47 + 40)], v43, v69);
  unsigned char *v46 = 0;
  sub_10000FA94(v42, v45, &qword_1000C3170);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v49);
  return sub_10000FAF8(v42, &qword_1000C3170);
}

uint64_t sub_1000690B8(void *a1, uint64_t (*a2)(void, void))
{
  uint64_t v4 = type metadata accessor for TimerControlsCustomView(0);
  sub_10000C4A4((void *)((char *)a1 + *(int *)(v4 + 20)), *(void *)((char *)a1 + *(int *)(v4 + 20) + 24));
  return a2(*a1, a1[1]);
}

uint64_t sub_10006910C()
{
  type metadata accessor for EnvironmentDelegate(0);
  uint64_t v0 = swift_allocObject();
  sub_100007830(&qword_1000C3218);
  Published.init(initialValue:)();
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue);
  *uint64_t v1 = 0;
  v1[1] = 0xE000000000000000;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 0;
  return v0;
}

uint64_t sub_100069198@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100007830(&qword_1000C5EF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007830(&qword_1000C5EF8);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v5 = static VerticalAlignment.firstTextBaseline.getter();
  *((void *)v5 + 1) = 0x4014000000000000;
  v5[16] = 0;
  uint64_t v10 = sub_100007830(&qword_1000C5F00);
  sub_1000693A8(v1, (uint64_t *)&v5[*(int *)(v10 + 44)]);
  static Alignment.trailing.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FA94((uint64_t)v5, (uint64_t)v9, &qword_1000C5EF0);
  uint64_t v11 = &v9[*(int *)(v7 + 44)];
  long long v12 = v17[1];
  *(_OWORD *)uint64_t v11 = v17[0];
  *((_OWORD *)v11 + 1) = v12;
  *((_OWORD *)v11 + 2) = v17[2];
  sub_10000FAF8((uint64_t)v5, &qword_1000C5EF0);
  type metadata accessor for EnvironmentDelegate(0);
  sub_100069F2C(&qword_1000C3138, (void (*)(uint64_t))type metadata accessor for EnvironmentDelegate);
  uint64_t v13 = StateObject.wrappedValue.getter();
  uint64_t v14 = static ObservableObject.environmentStore.getter();
  sub_10000FA94((uint64_t)v9, a1, &qword_1000C5EF8);
  uint64_t v15 = (uint64_t *)(a1 + *(int *)(sub_100007830(&qword_1000C5F08) + 36));
  uint64_t *v15 = v14;
  v15[1] = v13;
  return sub_10000FAF8((uint64_t)v9, &qword_1000C5EF8);
}

uint64_t sub_1000693A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100007830(&qword_1000C5F10);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v29 - v8;
  uint64_t v10 = type metadata accessor for TimerCountdownCustomView(0);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (*(unsigned char *)(a1 + *(int *)(v10 + 24)) == 1)
  {
    uint64_t v16 = a1 + *(int *)(v10 + 20);
    uint64_t countAndFlagsBits = *(void *)(v16 + 16);
    unint64_t object = *(void **)(v16 + 24);
    BOOL v19 = countAndFlagsBits == 0x5F544E4552525543 && object == (void *)0xED000052454D4954;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      id v20 = [self mainBundle];
      v30._unint64_t object = (void *)0x8000000100099CB0;
      v21._uint64_t countAndFlagsBits = 0x72656D6954;
      v21._unint64_t object = (void *)0xE500000000000000;
      v22._uint64_t countAndFlagsBits = 0;
      v22._unint64_t object = (void *)0xE000000000000000;
      v30._uint64_t countAndFlagsBits = 0xD000000000000013;
      Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v30);
      uint64_t countAndFlagsBits = v23._countAndFlagsBits;
      unint64_t object = v23._object;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v29[0] = countAndFlagsBits;
    v29[1] = object;
    sub_10000C92C();
    uint64_t v11 = Text.init<A>(_:)();
    uint64_t v12 = v24;
    uint64_t v14 = v25;
    uint64_t v13 = v26 & 1;
    if (qword_1000C2CB0 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_1000CAF40;
    swift_retain();
  }
  sub_10006967C(a1, (uint64_t)v9);
  sub_10000FA94((uint64_t)v9, (uint64_t)v7, &qword_1000C5F10);
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  a2[4] = v15;
  uint64_t v27 = sub_100007830(&qword_1000C5F18);
  sub_10000FA94((uint64_t)v7, (uint64_t)a2 + *(int *)(v27 + 48), &qword_1000C5F10);
  sub_100069E18(v11, v12, v13, v14);
  sub_10000FAF8((uint64_t)v9, &qword_1000C5F10);
  sub_10000FAF8((uint64_t)v7, &qword_1000C5F10);
  return sub_100069E68(v11, v12, v13, v14);
}

uint64_t sub_10006967C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v35[1] = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for RunningCountdownView(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v35 - v11;
  v35[0] = sub_100007830(&qword_1000C5F20);
  __chkstk_darwin(v35[0]);
  uint64_t v14 = (void *)((char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for TimerCountdownCustomView(0);
  uint64_t v16 = a1 + *(int *)(v15 + 20);
  uint64_t v17 = (int *)type metadata accessor for TimerSessionEntry(0);
  if (*(unsigned char *)(v16 + v17[7]) == 1)
  {
    uint64_t v18 = (uint64_t *)(v16 + v17[8]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    if (*(unsigned char *)(a1 + *(int *)(v15 + 24)))
    {
      uint64_t v21 = qword_1000C2CA8;
      swift_bridgeObjectRetain();
      if (v21 != -1) {
        swift_once();
      }
      Swift::String v22 = &qword_1000CAF38;
      uint64_t v23 = 0x4048000000000000;
    }
    else
    {
      uint64_t v27 = qword_1000C2CD0;
      swift_bridgeObjectRetain();
      if (v27 != -1) {
        swift_once();
      }
      uint64_t v23 = qword_1000CAF60;
      if (qword_1000C2CD8 != -1) {
        swift_once();
      }
      Swift::String v22 = &qword_1000CAF68;
    }
    uint64_t v28 = *v22;
    id v29 = [self mtOrange];
    uint64_t v30 = Color.init(uiColor:)();
    *uint64_t v14 = v19;
    v14[1] = v20;
    v14[2] = v23;
    v14[3] = v28;
    _OWORD v14[4] = v30;
    swift_storeEnumTagMultiPayload();
    sub_100069ED8();
    sub_100069F2C(&qword_1000C3208, (void (*)(uint64_t))type metadata accessor for RunningCountdownView);
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v16 + v17[6], v3);
    int v24 = *(unsigned __int8 *)(a1 + *(int *)(v15 + 24));
    if (v24 == 1)
    {
      if (qword_1000C2CA8 != -1) {
        swift_once();
      }
      uint64_t v25 = &qword_1000CAF38;
      uint64_t v26 = 0x4048000000000000;
    }
    else
    {
      if (qword_1000C2CD0 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_1000CAF60;
      if (qword_1000C2CD8 != -1) {
        swift_once();
      }
      uint64_t v25 = &qword_1000CAF68;
    }
    uint64_t v32 = *v25;
    id v33 = [self mtOrange];
    uint64_t v34 = Color.init(uiColor:)();
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v6, v3);
    v10[v7[5]] = 0;
    *(void *)&v10[v7[6]] = v26;
    *(void *)&v10[v7[7]] = v32;
    *(void *)&v10[v7[8]] = v34;
    v10[v7[9]] = v24 ^ 1;
    sub_10006D944((uint64_t)v10, (uint64_t)v12, type metadata accessor for RunningCountdownView);
    sub_100069CD8((uint64_t)v12, (uint64_t)v14, type metadata accessor for RunningCountdownView);
    swift_storeEnumTagMultiPayload();
    sub_100069ED8();
    sub_100069F2C(&qword_1000C3208, (void (*)(uint64_t))type metadata accessor for RunningCountdownView);
    _ConditionalContent<>.init(storage:)();
    return sub_100069F74((uint64_t)v12, type metadata accessor for RunningCountdownView);
  }
}

uint64_t sub_100069BD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v8 = self;
  sub_10000C484(v3, v4, v5);
  swift_bridgeObjectRetain();
  swift_retain();
  id v9 = [v8 mtOrange];
  uint64_t result = Color.init(uiColor:)();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = result;
  *(void *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_100069C80()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100069C9C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for TimerControlsCustomView(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C6030);
}

uint64_t sub_100069CD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100069D40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  char v5 = *(unsigned char *)(v1 + 56);
  uint64_t v6 = Text.font(_:)();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = v10 & 1;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = KeyPath;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = 0x3FEB333333333333;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v3;

  return swift_retain();
}

uint64_t sub_100069E18(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000C484(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_100069E68(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000C494(result, a2, a3 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for RunningCountdownView(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C60C8);
}

unint64_t sub_100069ED8()
{
  unint64_t result = qword_1000C5F28;
  if (!qword_1000C5F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5F28);
  }
  return result;
}

uint64_t sub_100069F2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100069F74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100069FD4()
{
  unint64_t result = qword_1000C5F30;
  if (!qword_1000C5F30)
  {
    sub_10000C61C(&qword_1000C3130);
    sub_100069F2C(&qword_1000C3208, (void (*)(uint64_t))type metadata accessor for RunningCountdownView);
    sub_10000FD6C(&qword_1000C3340, &qword_1000C3348);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C5F30);
  }
  return result;
}

uint64_t sub_10006A0A4()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_10006A0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A0F4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

uint64_t sub_10006A0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  __chkstk_darwin();
  char v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

double sub_10006A1C4@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_10006A248()
{
  return static Published.subscript.setter();
}

ValueMetadata *type metadata accessor for LowLuminanceSessionUiConfig()
{
  return &type metadata for LowLuminanceSessionUiConfig;
}

void *sub_10006A2F8(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    char v9 = (int *)type metadata accessor for TimerSessionEntry(0);
    uint64_t v10 = v9[6];
    uint64_t v34 = (char *)v4 + v10;
    uint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v34, v11, v12);
    *((unsigned char *)v4 + v9[7]) = *((unsigned char *)a2 + v9[7]);
    uint64_t v14 = v9[8];
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = v9[9];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    v19[8] = v20[8];
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v21 = v9[10];
    Swift::String v22 = (char *)v4 + v21;
    uint64_t v23 = (char *)a2 + v21;
    *(void *)Swift::String v22 = *(void *)v23;
    v22[8] = v23[8];
    *(void *)((char *)v4 + v9[11]) = *(void *)((char *)a2 + v9[11]);
    uint64_t v24 = a3[5];
    uint64_t v25 = (char *)v4 + v24;
    uint64_t v26 = (char *)a2 + v24;
    long long v27 = *(_OWORD *)((char *)a2 + v24 + 24);
    *(_OWORD *)((char *)v4 + v24 + 24) = v27;
    uint64_t v28 = v27;
    id v29 = **(void (***)(char *, char *, uint64_t))(v27 - 8);
    swift_bridgeObjectRetain();
    v29(v25, v26, v28);
    uint64_t v30 = a3[6];
    long long v31 = *(_OWORD *)((char *)a2 + v30 + 24);
    *(_OWORD *)((char *)v4 + v30 + 24) = v31;
    (**(void (***)(void))(v31 - 8))();
    *(void *)((char *)v4 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  }
  return v4;
}

void *sub_10006A540(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v8 = v7[6];
  char v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  *((unsigned char *)a1 + v7[7]) = *((unsigned char *)a2 + v7[7]);
  uint64_t v13 = v7[8];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = v7[9];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v20 = v7[10];
  uint64_t v21 = (char *)a1 + v20;
  Swift::String v22 = (char *)a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)((char *)a1 + v7[11]) = *(void *)((char *)a2 + v7[11]);
  uint64_t v23 = a3[5];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  long long v26 = *(_OWORD *)((char *)a2 + v23 + 24);
  *(_OWORD *)((char *)a1 + v23 + 24) = v26;
  uint64_t v27 = v26;
  uint64_t v28 = **(void (***)(char *, char *, uint64_t))(v26 - 8);
  swift_bridgeObjectRetain();
  v28(v24, v25, v27);
  uint64_t v29 = a3[6];
  long long v30 = *(_OWORD *)((char *)a2 + v29 + 24);
  *(_OWORD *)((char *)a1 + v29 + 24) = v30;
  (**(void (***)(void))(v30 - 8))();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *sub_10006A738(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  char v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *((unsigned char *)a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
  uint64_t v11 = v6[8];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v6[9];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  uint64_t v18 = v6[10];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
  sub_1000046D0((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]));
  sub_1000046D0((void *)((char *)a1 + a3[6]), (void *)((char *)a2 + a3[6]));
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

_OWORD *sub_10006A8B0(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v8 = v7[6];
  char v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *((unsigned char *)a1 + v7[7]) = *((unsigned char *)a2 + v7[7]);
  *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
  uint64_t v12 = v7[9];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  uint64_t v15 = v7[10];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)((char *)a1 + v7[11]) = *(void *)((char *)a2 + v7[11]);
  uint64_t v18 = a3[5];
  uint64_t v19 = a3[6];
  uint64_t v20 = (char *)a1 + v18;
  uint64_t v21 = (char *)a2 + v18;
  long long v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((void *)v20 + 4) = *((void *)v21 + 4);
  uint64_t v23 = (char *)a1 + v19;
  uint64_t v24 = (char *)a2 + v19;
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((void *)v23 + 4) = *((void *)v24 + 4);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *sub_10006A9E4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v9 = v8[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *((unsigned char *)a1 + v8[7]) = *((unsigned char *)a2 + v8[7]);
  uint64_t v13 = v8[8];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = v8[9];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = v8[10];
  long long v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  v22[8] = v23[8];
  *(void *)long long v22 = *(void *)v23;
  *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
  uint64_t v24 = a3[5];
  long long v25 = (char *)a1 + v24;
  long long v26 = (char *)a2 + v24;
  sub_100004678((uint64_t)a1 + v24);
  long long v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)long long v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *((void *)v25 + 4) = *((void *)v26 + 4);
  uint64_t v28 = a3[6];
  uint64_t v29 = (char *)a1 + v28;
  long long v30 = (char *)a2 + v28;
  sub_100004678((uint64_t)a1 + v28);
  long long v31 = *((_OWORD *)v30 + 1);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *((_OWORD *)v29 + 1) = v31;
  *((void *)v29 + 4) = *((void *)v30 + 4);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_10006AB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006AB68);
}

uint64_t sub_10006AB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006AB80);
}

uint64_t type metadata accessor for SessionsTimerPlatter(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C5F98);
}

uint64_t sub_10006ABA4()
{
  uint64_t result = type metadata accessor for TimerSessionEntry(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10006AC48(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = (int *)type metadata accessor for TimerSessionEntry(0);
    uint64_t v10 = v9[6];
    uint64_t v34 = (char *)v4 + v10;
    uint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v34, v11, v12);
    *((unsigned char *)v4 + v9[7]) = *((unsigned char *)a2 + v9[7]);
    uint64_t v14 = v9[8];
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = v9[9];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    v19[8] = v20[8];
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v21 = v9[10];
    long long v22 = (char *)v4 + v21;
    uint64_t v23 = (char *)a2 + v21;
    *(void *)long long v22 = *(void *)v23;
    v22[8] = v23[8];
    *(void *)((char *)v4 + v9[11]) = *(void *)((char *)a2 + v9[11]);
    uint64_t v24 = *(int *)(a3 + 20);
    long long v25 = (char *)v4 + v24;
    long long v26 = (char *)a2 + v24;
    long long v27 = *(_OWORD *)((char *)a2 + v24 + 24);
    *(_OWORD *)((char *)v4 + v24 + 24) = v27;
    uint64_t v28 = v27;
    uint64_t v29 = **(void (***)(char *, char *, uint64_t))(v27 - 8);
    swift_bridgeObjectRetain();
    v29(v25, v26, v28);
    uint64_t v30 = *(int *)(a3 + 24);
    long long v31 = *(_OWORD *)((char *)a2 + v30 + 24);
    *(_OWORD *)((char *)v4 + v30 + 24) = v31;
    (**(void (***)(void))(v31 - 8))();
  }
  return v4;
}

uint64_t sub_10006AE84(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 24);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_100004678(a1 + *(int *)(a2 + 20));
  uint64_t v6 = a1 + *(int *)(a2 + 24);

  return sub_100004678(v6);
}

void *sub_10006AF40(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  *((unsigned char *)a1 + v7[7]) = *((unsigned char *)a2 + v7[7]);
  uint64_t v13 = v7[8];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = v7[9];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v20 = v7[10];
  uint64_t v21 = (char *)a1 + v20;
  long long v22 = (char *)a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)((char *)a1 + v7[11]) = *(void *)((char *)a2 + v7[11]);
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (char *)a1 + v23;
  long long v25 = (char *)a2 + v23;
  long long v26 = *(_OWORD *)((char *)a2 + v23 + 24);
  *(_OWORD *)((char *)a1 + v23 + 24) = v26;
  uint64_t v27 = v26;
  uint64_t v28 = **(void (***)(char *, char *, uint64_t))(v26 - 8);
  swift_bridgeObjectRetain();
  v28(v24, v25, v27);
  uint64_t v29 = *(int *)(a3 + 24);
  long long v30 = *(_OWORD *)((char *)a2 + v29 + 24);
  *(_OWORD *)((char *)a1 + v29 + 24) = v30;
  (**(void (***)(void))(v30 - 8))();
  return a1;
}

void *sub_10006B12C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *((unsigned char *)a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
  uint64_t v11 = v6[8];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v6[9];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  uint64_t v18 = v6[10];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
  sub_1000046D0((void *)((char *)a1 + *(int *)(a3 + 20)), (void *)((char *)a2 + *(int *)(a3 + 20)));
  sub_1000046D0((void *)((char *)a1 + *(int *)(a3 + 24)), (void *)((char *)a2 + *(int *)(a3 + 24)));
  return a1;
}

_OWORD *sub_10006B298(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *((unsigned char *)a1 + v7[7]) = *((unsigned char *)a2 + v7[7]);
  *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
  uint64_t v12 = v7[9];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  uint64_t v15 = v7[10];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)((char *)a1 + v7[11]) = *(void *)((char *)a2 + v7[11]);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (char *)a1 + v18;
  uint64_t v21 = (char *)a2 + v18;
  long long v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((void *)v20 + 4) = *((void *)v21 + 4);
  uint64_t v23 = (char *)a1 + v19;
  uint64_t v24 = (char *)a2 + v19;
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((void *)v23 + 4) = *((void *)v24 + 4);
  return a1;
}

void *sub_10006B3C0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v9 = v8[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *((unsigned char *)a1 + v8[7]) = *((unsigned char *)a2 + v8[7]);
  uint64_t v13 = v8[8];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = v8[9];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = v8[10];
  long long v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  v22[8] = v23[8];
  *(void *)long long v22 = *(void *)v23;
  *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
  uint64_t v24 = *(int *)(a3 + 20);
  long long v25 = (char *)a1 + v24;
  long long v26 = (char *)a2 + v24;
  sub_100004678((uint64_t)a1 + v24);
  long long v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)long long v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *((void *)v25 + 4) = *((void *)v26 + 4);
  uint64_t v28 = *(int *)(a3 + 24);
  uint64_t v29 = (char *)a1 + v28;
  long long v30 = (char *)a2 + v28;
  sub_100004678((uint64_t)a1 + v28);
  long long v31 = *((_OWORD *)v30 + 1);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *((_OWORD *)v29 + 1) = v31;
  *((void *)v29 + 4) = *((void *)v30 + 4);
  return a1;
}

uint64_t sub_10006B524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B538);
}

uint64_t sub_10006B53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10006B600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B614);
}

uint64_t sub_10006B618(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TimerSessionEntry(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10006B6D8()
{
  uint64_t result = type metadata accessor for TimerSessionEntry(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for PausedCountdownView()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for PausedCountdownView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PausedCountdownView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PausedCountdownView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PausedCountdownView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PausedCountdownView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PausedCountdownView()
{
  return &type metadata for PausedCountdownView;
}

uint64_t destroy for CountdownLabelCustomView(uint64_t a1)
{
  sub_10000C494(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for CountdownLabelCustomView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000C484(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CountdownLabelCustomView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000C484(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10000C494(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v10;
  return a1;
}

__n128 initializeWithTake for CountdownLabelCustomView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CountdownLabelCustomView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_10000C494(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CountdownLabelCustomView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CountdownLabelCustomView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CountdownLabelCustomView()
{
  return &type metadata for CountdownLabelCustomView;
}

uint64_t destroy for SmallActionButton()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SmallActionButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SmallActionButton(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  uint64_t v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for SmallActionButton(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SmallActionButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SmallActionButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SmallActionButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SmallActionButton()
{
  return &type metadata for SmallActionButton;
}

void *initializeBufferWithCopyOfBuffer for CompressedGlyphLeadingView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CompressedGlyphLeadingView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CompressedGlyphLeadingView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CompressedGlyphLeadingView()
{
  return &type metadata for CompressedGlyphLeadingView;
}

void *sub_10006BFBC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  swift_retain();
  return a1;
}

uint64_t sub_10006C0B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  swift_retain();
  return a1;
}

uint64_t sub_10006C158(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006C214(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006C2B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_release();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006C364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C378);
}

uint64_t sub_10006C378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10006C438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C44C);
}

uint64_t sub_10006C44C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10006C508()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s10ClockAngel23StandardSessionUiConfigVwxx_0()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *_s10ClockAngel23StandardSessionUiConfigVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *_s10ClockAngel23StandardSessionUiConfigVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *_s10ClockAngel23StandardSessionUiConfigVwta_0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t _s10ClockAngel23StandardSessionUiConfigVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10006C790(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StandardSessionUiConfig()
{
  return &type metadata for StandardSessionUiConfig;
}

uint64_t sub_10006C7E0()
{
  return sub_10000FD6C(&qword_1000C6110, &qword_1000C6118);
}

unint64_t sub_10006C820()
{
  unint64_t result = qword_1000C6120;
  if (!qword_1000C6120)
  {
    sub_10000C61C(&qword_1000C5F08);
    sub_10006C8C0();
    sub_10000FD6C(&qword_1000C3340, &qword_1000C3348);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6120);
  }
  return result;
}

unint64_t sub_10006C8C0()
{
  unint64_t result = qword_1000C6128;
  if (!qword_1000C6128)
  {
    sub_10000C61C(&qword_1000C5EF8);
    sub_10000FD6C(&qword_1000C6130, &qword_1000C5EF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6128);
  }
  return result;
}

unint64_t sub_10006C964()
{
  unint64_t result = qword_1000C6138;
  if (!qword_1000C6138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6138);
  }
  return result;
}

unint64_t sub_10006C9BC()
{
  unint64_t result = qword_1000C6140;
  if (!qword_1000C6140)
  {
    sub_10000C61C(&qword_1000C6148);
    sub_100069ED8();
    sub_100069F2C(&qword_1000C3310, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6140);
  }
  return result;
}

unint64_t sub_10006CA6C()
{
  unint64_t result = qword_1000C6150;
  if (!qword_1000C6150)
  {
    sub_10000C61C(&qword_1000C6158);
    sub_100069FD4();
    sub_100069F2C(&qword_1000C3310, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6150);
  }
  return result;
}

uint64_t sub_10006CB18()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006CB34()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006CB50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006CB6C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006CB88()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006CBA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006CBC0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006CBDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006513C(*(void *)(v1 + 16), a1);
}

unint64_t sub_10006CBE4()
{
  unint64_t result = qword_1000C6170;
  if (!qword_1000C6170)
  {
    sub_10000C61C(&qword_1000C6168);
    sub_10006CC84();
    sub_10000FD6C(&qword_1000C61B8, &qword_1000C61C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6170);
  }
  return result;
}

unint64_t sub_10006CC84()
{
  unint64_t result = qword_1000C6178;
  if (!qword_1000C6178)
  {
    sub_10000C61C(&qword_1000C6180);
    sub_10006CD24();
    sub_10000FD6C(&qword_1000C61A8, &qword_1000C61B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6178);
  }
  return result;
}

unint64_t sub_10006CD24()
{
  unint64_t result = qword_1000C6188;
  if (!qword_1000C6188)
  {
    sub_10000C61C(&qword_1000C6190);
    sub_10000FD6C(&qword_1000C6198, &qword_1000C61A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6188);
  }
  return result;
}

uint64_t sub_10006CDC4(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = sub_100007830(&qword_1000C5650);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100007830(&qword_1000C6598);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = v7 - 8;
  if (*(void *)(v9 + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006CF0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10006CF3C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10006CF6C()
{
  return EnvironmentValues.allowsTightening.setter();
}

uint64_t sub_10006CF94()
{
  return EnvironmentValues.allowsTightening.setter();
}

unint64_t sub_10006CFCC()
{
  unint64_t result = qword_1000C61E0;
  if (!qword_1000C61E0)
  {
    sub_10000C61C(&qword_1000C61D8);
    sub_10006D06C();
    sub_10000FD6C(&qword_1000C3568, &qword_1000C3570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C61E0);
  }
  return result;
}

unint64_t sub_10006D06C()
{
  unint64_t result = qword_1000C61E8;
  if (!qword_1000C61E8)
  {
    sub_10000C61C(&qword_1000C61F0);
    sub_100070078(&qword_1000C61F8, &qword_1000C6200, &qword_1000C3558, &qword_1000C3560);
    sub_10000FD6C(&qword_1000C31C8, &qword_1000C31D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C61E8);
  }
  return result;
}

unint64_t sub_10006D12C()
{
  unint64_t result = qword_1000C6228;
  if (!qword_1000C6228)
  {
    sub_10000C61C(&qword_1000C6220);
    sub_10006D1F8(&qword_1000C6230, &qword_1000C6218, (void (*)(void))sub_10006D274);
    sub_10000FD6C(&qword_1000C6298, &qword_1000C62A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6228);
  }
  return result;
}

uint64_t sub_10006D1F8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000C61C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006D274()
{
  unint64_t result = qword_1000C6238;
  if (!qword_1000C6238)
  {
    sub_10000C61C(&qword_1000C6210);
    sub_10006D320();
    sub_100069F2C(&qword_1000C3310, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6238);
  }
  return result;
}

unint64_t sub_10006D320()
{
  unint64_t result = qword_1000C6240;
  if (!qword_1000C6240)
  {
    sub_10000C61C(&qword_1000C6248);
    sub_10006D3C0();
    sub_10000FD6C(&qword_1000C3568, &qword_1000C3570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6240);
  }
  return result;
}

unint64_t sub_10006D3C0()
{
  unint64_t result = qword_1000C6250;
  if (!qword_1000C6250)
  {
    sub_10000C61C(&qword_1000C6258);
    sub_10006D460();
    sub_10000FD6C(&qword_1000C31C8, &qword_1000C31D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6250);
  }
  return result;
}

unint64_t sub_10006D460()
{
  unint64_t result = qword_1000C6260;
  if (!qword_1000C6260)
  {
    sub_10000C61C(&qword_1000C6268);
    sub_10006D500();
    sub_10000FD6C(&qword_1000C3558, &qword_1000C3560);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6260);
  }
  return result;
}

unint64_t sub_10006D500()
{
  unint64_t result = qword_1000C6270;
  if (!qword_1000C6270)
  {
    sub_10000C61C(&qword_1000C6278);
    sub_10006D5A0();
    sub_10000FD6C(&qword_1000C3548, &qword_1000C3550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6270);
  }
  return result;
}

unint64_t sub_10006D5A0()
{
  unint64_t result = qword_1000C6280;
  if (!qword_1000C6280)
  {
    sub_10000C61C(&qword_1000C6288);
    sub_100069F2C(&qword_1000C6290, (void (*)(uint64_t))type metadata accessor for TimelineCountdownView);
    sub_10000FD6C(&qword_1000C34A8, &qword_1000C34B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6280);
  }
  return result;
}

uint64_t type metadata accessor for TimelineCountdownView(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C6430);
}

uint64_t sub_10006D690()
{
  return EnvironmentValues.contentTransitionStyle.getter();
}

uint64_t sub_10006D6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A0F4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for ContentTransition.Style, (uint64_t (*)(char *))&EnvironmentValues.contentTransitionStyle.setter);
}

uint64_t sub_10006D6FC()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_10006D720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A0F4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

unint64_t sub_10006D760()
{
  unint64_t result = qword_1000C62C8;
  if (!qword_1000C62C8)
  {
    sub_10000C61C(&qword_1000C62B0);
    sub_10000FD6C(&qword_1000C62D0, &qword_1000C62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C62C8);
  }
  return result;
}

unint64_t sub_10006D800()
{
  unint64_t result = qword_1000C6308;
  if (!qword_1000C6308)
  {
    sub_10000C61C(&qword_1000C62E8);
    sub_10006D8A0();
    sub_10000FD6C(&qword_1000C6320, &qword_1000C6328);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6308);
  }
  return result;
}

unint64_t sub_10006D8A0()
{
  unint64_t result = qword_1000C6310;
  if (!qword_1000C6310)
  {
    sub_10000C61C(&qword_1000C62E0);
    sub_10000FD6C(&qword_1000C6318, &qword_1000C62D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6310);
  }
  return result;
}

uint64_t sub_10006D944(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006D9AC()
{
  return sub_10006DCB8((uint64_t (*)(void, void))sub_100053A0C);
}

uint64_t sub_10006D9C8()
{
  uint64_t v1 = (int *)(type metadata accessor for TimerControlsCustomView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 24);
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  sub_100004678(v6 + v1[7]);
  sub_100004678(v6 + v1[8]);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10006DB00()
{
  return sub_10006DCB8((uint64_t (*)(void, void))sub_100053D94);
}

unint64_t sub_10006DB18()
{
  unint64_t result = qword_1000C6390;
  if (!qword_1000C6390)
  {
    sub_10000C61C(&qword_1000C4818);
    sub_10006DBB8();
    sub_10000FD6C(&qword_1000C63A0, &qword_1000C4848);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6390);
  }
  return result;
}

unint64_t sub_10006DBB8()
{
  unint64_t result = qword_1000C6398;
  if (!qword_1000C6398)
  {
    sub_10000C61C(&qword_1000C3180);
    sub_10000C664();
    sub_100069F2C(&qword_1000C3310, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6398);
  }
  return result;
}

uint64_t sub_10006DC68()
{
  return sub_10006DCB8((uint64_t (*)(void, void))sub_100053354);
}

uint64_t sub_10006DC84()
{
  return sub_10006DCB8((uint64_t (*)(void, void))sub_1000536B0);
}

uint64_t sub_10006DCA0()
{
  return sub_10006DCB8((uint64_t (*)(void, void))sub_100052FF0);
}

uint64_t sub_10006DCB8(uint64_t (*a1)(void, void))
{
  uint64_t v3 = *(void *)(type metadata accessor for TimerControlsCustomView(0) - 8);
  return sub_1000690B8((void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))), a1);
}

unint64_t sub_10006DD1C()
{
  unint64_t result = qword_1000C63C0;
  if (!qword_1000C63C0)
  {
    sub_10000C61C(&qword_1000C63B8);
    sub_10006DDBC();
    sub_10000FD6C(&qword_1000C34A8, &qword_1000C34B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C63C0);
  }
  return result;
}

unint64_t sub_10006DDBC()
{
  unint64_t result = qword_1000C63C8;
  if (!qword_1000C63C8)
  {
    sub_10000C61C(&qword_1000C63D0);
    sub_10000FD6C(&qword_1000C3548, &qword_1000C3550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C63C8);
  }
  return result;
}

unint64_t sub_10006DE5C(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_100034474(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_100007830(&qword_1000C49D0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    uint64_t v15 = a1 + v14;
    uint64_t v16 = a2 + v14;
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[8];
    *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
    *(void *)(a1 + v18) = *(void *)(a2 + v18);
    uint64_t v19 = a3[9];
    uint64_t v20 = a3[10];
    uint64_t v21 = (void *)(a1 + v19);
    long long v22 = (uint64_t *)(a2 + v19);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    *uint64_t v21 = v24;
    v21[1] = v23;
    uint64_t v25 = a1 + v20;
    uint64_t v26 = a2 + v20;
    uint64_t v27 = type metadata accessor for Calendar();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16);
    swift_retain();
    v28(v25, v26, v27);
    *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  }
  return a1;
}

uint64_t sub_10006E070(uint64_t a1, int *a2)
{
  sub_1000344D0(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  sub_100007830(&qword_1000C49D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = type metadata accessor for Calendar();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

uint64_t sub_10006E1AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_100034474(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  sub_100007830(&qword_1000C49D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for Locale();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (uint64_t *)(a2 + v17);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  void *v19 = v22;
  v19[1] = v21;
  uint64_t v23 = a1 + v18;
  uint64_t v24 = a2 + v18;
  uint64_t v25 = type metadata accessor for Calendar();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16);
  swift_retain();
  v26(v23, v24, v25);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10006E370(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_100034474(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_1000344D0(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_10000FAF8(a1 + v10, &qword_1000C49D0);
    sub_100007830(&qword_1000C49D0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  swift_retain();
  swift_release();
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10006E55C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100007830(&qword_1000C49D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Locale();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10006E700(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_1000344D0(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    sub_10000FAF8(a1 + v10, &qword_1000C49D0);
    uint64_t v13 = sub_100007830(&qword_1000C49D0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for Locale();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)(a1 + v19) = *(uint64_t *)((char *)a2 + v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (uint64_t)a2 + v20;
  *(void *)(a1 + v20) = *(uint64_t *)((char *)a2 + v20);
  swift_release();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  uint64_t v23 = a3[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (uint64_t)a2 + v23;
  uint64_t v26 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  *(void *)(a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_10006E8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E8F8);
}

uint64_t sub_10006E8F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100007830(&qword_1000C5558);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_5;
  }
  if (a2 == 2147483646)
  {
    unint64_t v13 = *(void *)(a1 + a3[9]);
    if (v13 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    int v14 = v13 - 1;
    if (v14 < 0) {
      int v14 = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = type metadata accessor for Calendar();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[10];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_10006EA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006EA98);
}

uint64_t sub_10006EA98(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100007830(&qword_1000C5558);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_5:
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  uint64_t result = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
    goto LABEL_5;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[9]) = a2;
  }
  else
  {
    uint64_t v14 = type metadata accessor for Calendar();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a4[10];
    return v15(v17, a2, a2, v16);
  }
  return result;
}

void sub_10006EC18()
{
  sub_10006ED48();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Calendar();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_10006ED48()
{
  if (!qword_1000C55C8)
  {
    type metadata accessor for Locale();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000C55C8);
    }
  }
}

uint64_t *sub_10006EDA0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Material();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (_OWORD *)((char *)v4 + v13);
    uint64_t v16 = (_OWORD *)((char *)a2 + v13);
    long long v17 = v16[3];
    v15[2] = v16[2];
    v15[3] = v17;
    v15[4] = v16[4];
    long long v18 = v16[1];
    _OWORD *v15 = *v16;
    v15[1] = v18;
    uint64_t v19 = (char *)v4 + v14;
    uint64_t v20 = (char *)a2 + v14;
    uint64_t v21 = type metadata accessor for BlendMode();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    uint64_t v22 = a3[9];
    uint64_t v23 = (uint64_t *)((char *)v4 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
  }
  swift_retain();
  return v4;
}

uint64_t sub_10006EF24(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Material();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for BlendMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return swift_release();
}

void *sub_10006EFFC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Material();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (_OWORD *)((char *)a1 + v12);
  uint64_t v15 = (_OWORD *)((char *)a2 + v12);
  long long v16 = v15[3];
  v14[2] = v15[2];
  v14[3] = v16;
  _OWORD v14[4] = v15[4];
  long long v17 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v17;
  long long v18 = (char *)a1 + v13;
  uint64_t v19 = (char *)a2 + v13;
  uint64_t v20 = type metadata accessor for BlendMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_retain();
  return a1;
}

void *sub_10006F134(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Material();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (_DWORD *)((char *)a1 + v10);
  uint64_t v12 = (_DWORD *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  void v11[2] = v12[2];
  v11[3] = v12[3];
  v11[4] = v12[4];
  v11[5] = v12[5];
  void v11[6] = v12[6];
  v11[7] = v12[7];
  v11[8] = v12[8];
  v11[9] = v12[9];
  v11[10] = v12[10];
  v11[11] = v12[11];
  v11[12] = v12[12];
  v11[13] = v12[13];
  v11[14] = v12[14];
  v11[15] = v12[15];
  v11[16] = v12[16];
  v11[17] = v12[17];
  v11[18] = v12[18];
  v11[19] = v12[19];
  uint64_t v13 = a3[8];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for BlendMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  uint64_t v17 = a3[9];
  long long v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  *long long v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10006F308(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Material();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = (_OWORD *)(a1 + v10);
  uint64_t v13 = (_OWORD *)(a2 + v10);
  long long v14 = v13[3];
  void v12[2] = v13[2];
  unint64_t v12[3] = v14;
  v12[4] = v13[4];
  long long v15 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v15;
  uint64_t v16 = a1 + v11;
  uint64_t v17 = a2 + v11;
  uint64_t v18 = type metadata accessor for BlendMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

void *sub_10006F410(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_release();
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Material();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (_OWORD *)((char *)a1 + v11);
  long long v14 = (_OWORD *)((char *)a2 + v11);
  long long v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  long long v16 = v14[3];
  void v13[2] = v14[2];
  v13[3] = v16;
  v13[4] = v14[4];
  uint64_t v17 = (char *)a1 + v12;
  uint64_t v18 = (char *)a2 + v12;
  uint64_t v19 = type metadata accessor for BlendMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  swift_release();
  return a1;
}

uint64_t sub_10006F534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F548);
}

uint64_t sub_10006F548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Material();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for BlendMode();
      long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10006F674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F688);
}

uint64_t sub_10006F688(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Material();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for BlendMode();
      long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for MediumActionButton(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C64D8);
}

uint64_t sub_10006F7D4()
{
  uint64_t result = type metadata accessor for Material();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BlendMode();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for LargeActionButton()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for LargeActionButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LargeActionButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for LargeActionButton(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for LargeActionButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeActionButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeActionButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeActionButton()
{
  return &type metadata for LargeActionButton;
}

uint64_t sub_10006FBB4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10006FC88()
{
  unint64_t result = qword_1000C6520;
  if (!qword_1000C6520)
  {
    sub_10000C61C(&qword_1000C6528);
    sub_10006CFCC();
    sub_100069F2C(&qword_1000C3310, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6520);
  }
  return result;
}

uint64_t sub_10006FD34()
{
  return sub_10006FD84(&qword_1000C6530, &qword_1000C6538, (void (*)(void))sub_10006D12C, (void (*)(void))sub_10006D274);
}

uint64_t sub_10006FD84(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000C61C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006FE10()
{
  unint64_t result = qword_1000C6540;
  if (!qword_1000C6540)
  {
    sub_10000C61C(&qword_1000C6548);
    sub_10000C61C(&qword_1000C62B0);
    sub_10006D760();
    swift_getOpaqueTypeConformance2();
    sub_100069F2C(&qword_1000C3310, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6540);
  }
  return result;
}

unint64_t sub_10006FEF4()
{
  unint64_t result = qword_1000C6550;
  if (!qword_1000C6550)
  {
    sub_10000C61C(&qword_1000C6558);
    sub_10000FD6C(&qword_1000C6358, &qword_1000C6348);
    sub_10000FD6C(&qword_1000C6360, &qword_1000C6338);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6550);
  }
  return result;
}

unint64_t sub_10006FFB8()
{
  unint64_t result = qword_1000C4998;
  if (!qword_1000C4998)
  {
    sub_10000C61C(&qword_1000C49A0);
    sub_100070078((unint64_t *)&qword_1000C49A8, &qword_1000C49B0, &qword_1000C31C8, &qword_1000C31D0);
    sub_10000FD6C(&qword_1000C3568, &qword_1000C3570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C4998);
  }
  return result;
}

uint64_t sub_100070078(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000C61C(a2);
    sub_10000FD6C(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100070114()
{
  return sub_10000FD6C(&qword_1000C6560, &qword_1000C6568);
}

uint64_t sub_100070150()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007016C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100070188()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000701A4()
{
  unint64_t v1 = (int *)type metadata accessor for TimelineCountdownView(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  sub_1000344D0(*(void *)(v0 + v3), *(unsigned char *)(v0 + v3 + 8));
  uint64_t v6 = v0 + v3 + v1[5];
  sub_100007830(&qword_1000C49D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v2 | 7;
  uint64_t v9 = v3 + v4;
  uint64_t v10 = v5 + v1[6];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_release();
  uint64_t v12 = v5 + v1[10];
  uint64_t v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);

  return _swift_deallocObject(v0, v9, v8);
}

uint64_t sub_100070360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for TimelineCountdownView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100062754(a1, v6, a2);
}

uint64_t sub_1000703E0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100070418(uint64_t a1)
{
  return sub_10006CDC4(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_100070420()
{
  return sub_10006D1F8(&qword_1000C6588, &qword_1000C6590, (void (*)(void))sub_100059B94);
}

uint64_t sub_100070450()
{
  uint64_t result = Transaction.disablesAnimations.getter();
  if ((result & 1) == 0)
  {
    swift_retain();
    return Transaction.animation.setter();
  }
  return result;
}

void sub_10007048C(long double a1, uint64_t a2, char a3, char a4)
{
  v7.super.Class isa = Locale._bridgeToObjectiveC()().super.isa;
  int v8 = a4 & 1;
  long double v9 = a1;
  uint64_t v10 = 0;
  int v11 = 0;
  int v12 = 1;
  int v13 = 1;
  int v14 = 0;
  int v15 = 0;
  Class isa = v7.super.isa;
  if (a3)
  {
    id v17 = sub_100002BCC(0, 0, 1, 1, 0, 0, v8, (uint64_t)v7.super.isa, a1);

    if (v17)
    {
LABEL_5:
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
    __break(1u);
  }
  id v17 = sub_100002608(v10, v11, v12, v13, v14, v15, v8, (uint64_t)isa, v9);

  if (v17) {
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t sub_10007054C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007055C()
{
  return swift_release();
}

unint64_t sub_100070564()
{
  unint64_t result = qword_1000C65B8;
  if (!qword_1000C65B8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000C65B8);
  }
  return result;
}

_OWORD *sub_1000705A4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000705B4()
{
  return swift_release();
}

uint64_t sub_1000705BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000656E4(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000705C4()
{
  unint64_t result = qword_1000C65C8;
  if (!qword_1000C65C8)
  {
    sub_10000C61C(&qword_1000C65C0);
    sub_100070664();
    sub_10000FD6C(&qword_1000C65F0, &qword_1000C65F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C65C8);
  }
  return result;
}

unint64_t sub_100070664()
{
  unint64_t result = qword_1000C65D0;
  if (!qword_1000C65D0)
  {
    sub_10000C61C(&qword_1000C65D8);
    sub_10000FD6C(&qword_1000C65E0, &qword_1000C65E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C65D0);
  }
  return result;
}

uint64_t sub_100070704@<X0>(uint64_t a1@<X8>)
{
  return sub_100066228(*(void *)(v1 + 16), a1);
}

unint64_t sub_10007070C()
{
  unint64_t result = qword_1000C6648;
  if (!qword_1000C6648)
  {
    sub_10000C61C(&qword_1000C6640);
    sub_1000707AC();
    sub_10000FD6C(&qword_1000C6670, &qword_1000C6678);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6648);
  }
  return result;
}

unint64_t sub_1000707AC()
{
  unint64_t result = qword_1000C6650;
  if (!qword_1000C6650)
  {
    sub_10000C61C(&qword_1000C6658);
    sub_10000FD6C(&qword_1000C6660, &qword_1000C6668);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6650);
  }
  return result;
}

uint64_t sub_10007084C()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100070884()
{
  return sub_100070450();
}

uint64_t sub_100070890()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000708E4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10007093C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100070988(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000709F0()
{
  unint64_t result = qword_1000C6690;
  if (!qword_1000C6690)
  {
    sub_10000C61C(&qword_1000C6628);
    sub_10000C61C(&qword_1000C6618);
    type metadata accessor for BorderlessButtonStyle();
    sub_10000FD6C(&qword_1000C6680, &qword_1000C6618);
    sub_100069F2C(&qword_1000C61D0, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6690);
  }
  return result;
}

uint64_t sub_100070B14(uint64_t a1)
{
  return a1;
}

unint64_t sub_100070B44()
{
  unint64_t result = qword_1000C6698;
  if (!qword_1000C6698)
  {
    sub_10000C61C(&qword_1000C66A0);
    sub_10006FD84(&qword_1000C6580, &qword_1000C6570, (void (*)(void))sub_100070420, (void (*)(void))sub_100059B94);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6698);
  }
  return result;
}

uint64_t sub_100070BF0()
{
  return sub_10000FD6C(&qword_1000C66A8, (uint64_t *)&unk_1000C66B0);
}

uint64_t sub_100070C2C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_100070CC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel29StopwatchLockscreenController_customTrailingView;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel29StopwatchLockscreenController_customTrailingView];
  if (v3) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel];
  uint64_t v50 = &type metadata for LockscreenConfig;
  uint64_t v51 = &off_1000B43A8;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for ObservableStopwatchModel();
  sub_10003A524();
  swift_retain();
  id v6 = v4;
  v52[0] = ObservedObject.init(wrappedValue:)();
  v52[1] = v7;
  v52[2] = v4;
  sub_10000CB18(&v49, (uint64_t)v53);
  v53[5] = KeyPath;
  char v54 = 0;
  int v8 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C6708));
  *(void *)&v8[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v8) + 16) + 8] = 0;
  swift_unknownObjectWeakInit();
  sub_10003A38C((uint64_t)v52, (uint64_t)&v49);
  long double v9 = (void *)UIHostingController.init(rootView:)();
  sub_10003A3C4((uint64_t)v52);
  id v10 = [v9 view];
  if (!v10)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int v11 = v10;
  [v10 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v12 = [v9 view];
  if (!v12)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int v13 = v12;
  id v14 = [self clearColor];
  [v13 setBackgroundColor:v14];

  [v1 addChildViewController:v9];
  id v15 = [v1 view];
  if (!v15)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v16 = v15;
  id v17 = [v9 view];
  if (!v17)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v18 = v17;
  [v16 addSubview:v17];

  [v9 didMoveToParentViewController:v1];
  uint64_t v19 = *(void **)&v1[v2];
  *(void *)&v1[v2] = v9;

  uint64_t v3 = *(void **)&v1[v2];
  if (v3)
  {
LABEL_7:
    id v20 = [v3 view];
    if (v20)
    {
      uint64_t v21 = v20;
      id v22 = [v20 leadingAnchor];

      sub_100013758();
      sub_100007830((uint64_t *)&unk_1000C66F0);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_100098550;
      uint64_t v24 = *(void **)&v1[v2];
      if (v24)
      {
        id v25 = [v24 view];
        if (v25)
        {
          uint64_t v26 = v25;
          id v27 = [v25 leadingAnchor];

          uint64_t v28 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
          if (v28)
          {
            id v29 = [v28 trailingAnchor];
            id v30 = [v27 constraintEqualToAnchor:v29 constant:25.0];

            *(void *)(v23 + 32) = v30;
            long long v31 = *(void **)&v1[v2];
            if (v31)
            {
              id v32 = [v31 view];
              if (v32)
              {
                id v33 = v32;
                id v34 = [v32 trailingAnchor];

                id v35 = [v1 view];
                if (v35)
                {
                  uint64_t v36 = v35;
                  id v37 = [v35 trailingAnchor];

                  id v38 = [v34 constraintEqualToAnchor:v37];
                  *(void *)(v23 + 40) = v38;
                  uint64_t v39 = *(void **)&v1[v2];
                  if (v39)
                  {
                    id v40 = [v39 view];
                    if (v40)
                    {
                      uint64_t v41 = v40;
                      id v42 = [v40 centerYAnchor];

                      id v43 = [v1 view];
                      if (v43)
                      {
                        uint64_t v44 = v43;
                        uint64_t v45 = self;
                        id v46 = [v44 centerYAnchor];

                        id v47 = [v42 constraintEqualToAnchor:v46];
                        *(void *)(v23 + 48) = v47;
                        v52[0] = v23;
                        specialized Array._endMutation()();
                        sub_1000714B0();
                        Class isa = Array._bridgeToObjectiveC()().super.isa;
                        swift_bridgeObjectRelease();
                        [v45 activateConstraints:isa];

                        return;
                      }
                      goto LABEL_27;
                    }
LABEL_26:
                    __break(1u);
LABEL_27:
                    __break(1u);
                    goto LABEL_28;
                  }
LABEL_25:
                  __break(1u);
                  goto LABEL_26;
                }
LABEL_24:
                __break(1u);
                goto LABEL_25;
              }
LABEL_23:
              __break(1u);
              goto LABEL_24;
            }
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_32:
  __break(1u);
}

void sub_1000713E0()
{
}

id sub_1000713F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StopwatchLockscreenController();
  return [super dealloc];
}

uint64_t type metadata accessor for StopwatchLockscreenController()
{
  return self;
}

uint64_t sub_100071458@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isLuminanceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100071488()
{
  return EnvironmentValues.isLuminanceReduced.setter();
}

unint64_t sub_1000714B0()
{
  unint64_t result = qword_1000C3FC0;
  if (!qword_1000C3FC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000C3FC0);
  }
  return result;
}

uint64_t sub_1000714F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isLuminanceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100071520()
{
  return EnvironmentValues.isLuminanceReduced.setter();
}

double sub_100071548@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10007165C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000C3440, &qword_1000C3448).n128_u64[0];
  return result;
}

double sub_1000715A4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10007165C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000C33C8, &qword_1000C33D0).n128_u64[0];
  return result;
}

double sub_100071600@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100071A14(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000C62D8, &qword_1000C62E0).n128_u64[0];
  return result;
}

__n128 sub_10007165C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a16;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v29 = sub_100007830(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(a9, v17, v29);
  id v30 = (_OWORD *)(a9 + *(int *)(sub_100007830(a17) + 36));
  v30[4] = v36;
  v30[5] = v37;
  v30[6] = v38;
  _OWORD *v30 = v32;
  v30[1] = v33;
  __n128 result = v35;
  _OWORD v30[2] = v34;
  v30[3] = v35;
  return result;
}

uint64_t sub_100071858@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    id v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;

  return swift_retain();
}

__n128 sub_100071A14@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_10000FA94(v17, a9, a16);
  long long v29 = (_OWORD *)(a9 + *(int *)(sub_100007830(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  _OWORD *v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  void v29[2] = v33;
  _OWORD v29[3] = v34;
  return result;
}

uint64_t sub_100071BE4@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_100079A20(a1, a4, type metadata accessor for TimerSessionEntry);
  uint64_t v7 = (int *)type metadata accessor for LinearTimerTimelineCountdown();
  int v8 = (void *)(a4 + v7[5]);
  long double v9 = self;
  id v10 = [v9 mtOrange];
  uint64_t v11 = Color.init(uiColor:)();
  id v12 = [v9 mtOrange];
  Color.init(uiColor:)();
  uint64_t v13 = Color.opacity(_:)();
  swift_release();
  uint64_t v14 = static Color.white.getter();
  static Color.white.getter();
  uint64_t v15 = Color.opacity(_:)();
  swift_release();
  v8[3] = &type metadata for StandardSessionUiConfig;
  v8[4] = &off_1000B5578;
  uint64_t v16 = (void *)swift_allocObject();
  void *v8 = v16;
  void v16[2] = v11;
  void v16[3] = v13;
  void v16[4] = v14;
  v16[5] = v15;
  sub_10000CB18(a2, a4 + v7[6]);
  sub_10000F834(a3, a4 + v7[7], (uint64_t *)&unk_1000C3B70);
  uint64_t v17 = (void *)(a4 + v7[8]);
  State.init(wrappedValue:)();
  *uint64_t v17 = v29;
  v17[1] = v30;
  uint64_t v18 = a4 + v7[9];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v18 = v29;
  *(void *)(v18 + 8) = v30;
  uint64_t v19 = a4 + v7[10];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v19 = v29;
  *(void *)(v19 + 8) = v30;
  uint64_t v20 = a4 + v7[11];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v20 = v29;
  *(void *)(v20 + 8) = v30;
  uint64_t v21 = a4 + v7[12];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v21 = v29;
  *(void *)(v21 + 8) = v30;
  uint64_t v22 = a4 + v7[13];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v22 = v29;
  *(void *)(v22 + 8) = v30;
  uint64_t v23 = a4 + v7[14];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v23 = v29;
  *(void *)(v23 + 8) = v30;
  uint64_t v24 = a4 + v7[15];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v24 = v29;
  *(void *)(v24 + 8) = v30;
  uint64_t v25 = a4 + v7[16];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v25 = v29;
  *(void *)(v25 + 8) = v30;
  uint64_t v26 = a4 + v7[17];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v26 = v29;
  *(void *)(v26 + 8) = v30;
  uint64_t v27 = a4 + v7[18];
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v27 = v29;
  *(void *)(v27 + 8) = v30;
  return result;
}

uint64_t type metadata accessor for LinearTimerTimelineCountdown()
{
  uint64_t result = qword_1000C6778;
  if (!qword_1000C6778) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100071FEC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void *sub_10007203C(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    long double v9 = (int *)type metadata accessor for TimerSessionEntry(0);
    uint64_t v10 = v9[6];
    uint64_t v72 = (char *)v4 + v10;
    uint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v72, v11, v12);
    *((unsigned char *)v4 + v9[7]) = *((unsigned char *)a2 + v9[7]);
    uint64_t v14 = v9[8];
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = v9[9];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    v19[8] = v20[8];
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v21 = v9[10];
    uint64_t v22 = (char *)v4 + v21;
    uint64_t v23 = (char *)a2 + v21;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    *(void *)((char *)v4 + v9[11]) = *(void *)((char *)a2 + v9[11]);
    uint64_t v24 = a3[5];
    uint64_t v25 = (char *)v4 + v24;
    uint64_t v26 = (char *)a2 + v24;
    long long v27 = *(_OWORD *)((char *)a2 + v24 + 24);
    *(_OWORD *)((char *)v4 + v24 + 24) = v27;
    uint64_t v28 = v27;
    uint64_t v29 = **(void (***)(char *, char *, uint64_t))(v27 - 8);
    swift_bridgeObjectRetain();
    v29(v25, v26, v28);
    uint64_t v30 = a3[6];
    long long v31 = *(_OWORD *)((char *)a2 + v30 + 24);
    *(_OWORD *)((char *)v4 + v30 + 24) = v31;
    (**(void (***)(void))(v31 - 8))();
    uint64_t v32 = a3[7];
    long long v33 = (void *)((char *)v4 + v32);
    __n128 v34 = (void *)((char *)a2 + v32);
    sub_100007830(&qword_1000C3220);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v35 = type metadata accessor for Font.Context();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
    }
    else
    {
      void *v33 = *v34;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = a3[8];
    uint64_t v38 = a3[9];
    uint64_t v39 = (void *)((char *)v4 + v37);
    id v40 = (void *)((char *)a2 + v37);
    uint64_t v41 = v40[1];
    void *v39 = *v40;
    v39[1] = v41;
    id v42 = (char *)v4 + v38;
    id v43 = (char *)a2 + v38;
    char *v42 = *v43;
    *((void *)v42 + 1) = *((void *)v43 + 1);
    uint64_t v44 = a3[10];
    uint64_t v45 = a3[11];
    id v46 = (char *)v4 + v44;
    id v47 = (char *)a2 + v44;
    char *v46 = *v47;
    *((void *)v46 + 1) = *((void *)v47 + 1);
    uint64_t v48 = (char *)v4 + v45;
    long long v49 = (char *)a2 + v45;
    *uint64_t v48 = *v49;
    *((void *)v48 + 1) = *((void *)v49 + 1);
    uint64_t v50 = a3[12];
    uint64_t v51 = a3[13];
    uint64_t v52 = (char *)v4 + v50;
    uint64_t v53 = (char *)a2 + v50;
    *uint64_t v52 = *v53;
    *((void *)v52 + 1) = *((void *)v53 + 1);
    char v54 = (char *)v4 + v51;
    uint64_t v55 = (char *)a2 + v51;
    char *v54 = *v55;
    *((void *)v54 + 1) = *((void *)v55 + 1);
    uint64_t v56 = a3[14];
    uint64_t v57 = a3[15];
    uint64_t v58 = (char *)v4 + v56;
    uint64_t v59 = (char *)a2 + v56;
    char *v58 = *v59;
    *((void *)v58 + 1) = *((void *)v59 + 1);
    uint64_t v60 = (char *)v4 + v57;
    uint64_t v61 = (char *)a2 + v57;
    char *v60 = *v61;
    *((void *)v60 + 1) = *((void *)v61 + 1);
    uint64_t v62 = a3[16];
    uint64_t v63 = a3[17];
    uint64_t v64 = (char *)v4 + v62;
    uint64_t v65 = (char *)a2 + v62;
    char *v64 = *v65;
    *((void *)v64 + 1) = *((void *)v65 + 1);
    uint64_t v66 = (char *)v4 + v63;
    uint64_t v67 = (char *)a2 + v63;
    *uint64_t v66 = *v67;
    *((void *)v66 + 1) = *((void *)v67 + 1);
    uint64_t v68 = a3[18];
    uint64_t v69 = (char *)v4 + v68;
    uint64_t v70 = (char *)a2 + v68;
    char *v69 = *v70;
    *((void *)v69 + 1) = *((void *)v70 + 1);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100072478(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 24);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_100004678(a1 + a2[5]);
  sub_100004678(a1 + a2[6]);
  uint64_t v6 = a1 + a2[7];
  sub_100007830(&qword_1000C3220);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Font.Context();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *sub_100072650(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v9 = v8[6];
  uint64_t v70 = (char *)a1 + v9;
  uint64_t v10 = (char *)a2 + v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v70, v10, v11);
  *((unsigned char *)a1 + v8[7]) = *((unsigned char *)a2 + v8[7]);
  uint64_t v13 = v8[8];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = v8[9];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v20 = v8[10];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
  uint64_t v23 = a3[5];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  long long v26 = *(_OWORD *)((char *)a2 + v23 + 24);
  *(_OWORD *)((char *)a1 + v23 + 24) = v26;
  uint64_t v27 = v26;
  uint64_t v28 = **(void (***)(char *, char *, uint64_t))(v26 - 8);
  swift_bridgeObjectRetain();
  v28(v24, v25, v27);
  uint64_t v29 = a3[6];
  long long v30 = *(_OWORD *)((char *)a2 + v29 + 24);
  *(_OWORD *)((char *)a1 + v29 + 24) = v30;
  (**(void (***)(void))(v30 - 8))();
  uint64_t v31 = a3[7];
  uint64_t v32 = (void *)((char *)a1 + v31);
  long long v33 = (void *)((char *)a2 + v31);
  sub_100007830(&qword_1000C3220);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v34 = type metadata accessor for Font.Context();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  }
  else
  {
    void *v32 = *v33;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = a3[8];
  uint64_t v36 = a3[9];
  uint64_t v37 = (void *)((char *)a1 + v35);
  uint64_t v38 = (void *)((char *)a2 + v35);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  id v40 = (char *)a1 + v36;
  uint64_t v41 = (char *)a2 + v36;
  char *v40 = *v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  uint64_t v42 = a3[10];
  uint64_t v43 = a3[11];
  uint64_t v44 = (char *)a1 + v42;
  uint64_t v45 = (char *)a2 + v42;
  char *v44 = *v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  id v46 = (char *)a1 + v43;
  id v47 = (char *)a2 + v43;
  char *v46 = *v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  uint64_t v48 = a3[12];
  uint64_t v49 = a3[13];
  uint64_t v50 = (char *)a1 + v48;
  uint64_t v51 = (char *)a2 + v48;
  char *v50 = *v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  uint64_t v52 = (char *)a1 + v49;
  uint64_t v53 = (char *)a2 + v49;
  *uint64_t v52 = *v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  uint64_t v54 = a3[14];
  uint64_t v55 = a3[15];
  uint64_t v56 = (char *)a1 + v54;
  uint64_t v57 = (char *)a2 + v54;
  char *v56 = *v57;
  *((void *)v56 + 1) = *((void *)v57 + 1);
  uint64_t v58 = (char *)a1 + v55;
  uint64_t v59 = (char *)a2 + v55;
  char *v58 = *v59;
  *((void *)v58 + 1) = *((void *)v59 + 1);
  uint64_t v60 = a3[16];
  uint64_t v61 = a3[17];
  uint64_t v62 = (char *)a1 + v60;
  uint64_t v63 = (char *)a2 + v60;
  *uint64_t v62 = *v63;
  *((void *)v62 + 1) = *((void *)v63 + 1);
  uint64_t v64 = (char *)a1 + v61;
  uint64_t v65 = (char *)a2 + v61;
  char *v64 = *v65;
  *((void *)v64 + 1) = *((void *)v65 + 1);
  uint64_t v66 = a3[18];
  uint64_t v67 = (char *)a1 + v66;
  uint64_t v68 = (char *)a2 + v66;
  *uint64_t v67 = *v68;
  *((void *)v67 + 1) = *((void *)v68 + 1);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_100072A40(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *((unsigned char *)a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
  uint64_t v11 = v6[8];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v6[9];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  uint64_t v18 = v6[10];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
  sub_1000046D0((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]));
  sub_1000046D0((void *)((char *)a1 + a3[6]), (void *)((char *)a2 + a3[6]));
  if (a1 != a2)
  {
    uint64_t v22 = a3[7];
    uint64_t v23 = (void *)((char *)a1 + v22);
    uint64_t v24 = (void *)((char *)a2 + v22);
    sub_10000FAF8((uint64_t)a1 + v22, &qword_1000C3220);
    sub_100007830(&qword_1000C3220);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = type metadata accessor for Font.Context();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    else
    {
      *uint64_t v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v26 = a3[8];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_retain();
  swift_release();
  uint64_t v29 = a3[9];
  long long v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  char *v30 = *v31;
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_retain();
  swift_release();
  uint64_t v32 = a3[10];
  long long v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  char *v33 = *v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  swift_retain();
  swift_release();
  uint64_t v35 = a3[11];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  char *v36 = *v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  swift_retain();
  swift_release();
  uint64_t v38 = a3[12];
  uint64_t v39 = (char *)a1 + v38;
  id v40 = (char *)a2 + v38;
  char *v39 = *v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_retain();
  swift_release();
  uint64_t v41 = a3[13];
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  char *v42 = *v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_retain();
  swift_release();
  uint64_t v44 = a3[14];
  uint64_t v45 = (char *)a1 + v44;
  id v46 = (char *)a2 + v44;
  *uint64_t v45 = *v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_retain();
  swift_release();
  uint64_t v47 = a3[15];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  *uint64_t v48 = *v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_retain();
  swift_release();
  uint64_t v50 = a3[16];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  char *v51 = *v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  swift_retain();
  swift_release();
  uint64_t v53 = a3[17];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)a2 + v53;
  char *v54 = *v55;
  *((void *)v54 + 1) = *((void *)v55 + 1);
  swift_retain();
  swift_release();
  uint64_t v56 = a3[18];
  uint64_t v57 = (char *)a1 + v56;
  uint64_t v58 = (char *)a2 + v56;
  char *v57 = *v58;
  *((void *)v57 + 1) = *((void *)v58 + 1);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_100072E38(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *((unsigned char *)a1 + v7[7]) = *((unsigned char *)a2 + v7[7]);
  *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
  uint64_t v12 = v7[9];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = *(void *)v14;
  uint64_t v15 = v7[10];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)((char *)a1 + v7[11]) = *(void *)((char *)a2 + v7[11]);
  uint64_t v18 = a3[5];
  uint64_t v19 = a3[6];
  uint64_t v20 = (char *)a1 + v18;
  uint64_t v21 = (char *)a2 + v18;
  long long v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((void *)v20 + 4) = *((void *)v21 + 4);
  uint64_t v23 = (char *)a1 + v19;
  uint64_t v24 = (char *)a2 + v19;
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((void *)v23 + 4) = *((void *)v24 + 4);
  uint64_t v26 = a3[7];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = sub_100007830(&qword_1000C3220);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v30 = type metadata accessor for Font.Context();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v27, v28, v30);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  uint64_t v31 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v31) = *(_OWORD *)((char *)a2 + v31);
  uint64_t v32 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v32) = *(_OWORD *)((char *)a2 + v32);
  uint64_t v33 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v33) = *(_OWORD *)((char *)a2 + v33);
  uint64_t v34 = a3[15];
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v34) = *(_OWORD *)((char *)a2 + v34);
  uint64_t v35 = a3[17];
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  *(_OWORD *)((char *)a1 + v35) = *(_OWORD *)((char *)a2 + v35);
  *(_OWORD *)((char *)a1 + a3[18]) = *(_OWORD *)((char *)a2 + a3[18]);
  return a1;
}

void *sub_100073070(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v9 = v8[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *((unsigned char *)a1 + v8[7]) = *((unsigned char *)a2 + v8[7]);
  uint64_t v13 = v8[8];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = v8[9];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = v8[10];
  long long v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  v22[8] = v23[8];
  *(void *)long long v22 = *(void *)v23;
  *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
  uint64_t v24 = a3[5];
  long long v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  sub_100004678((uint64_t)a1 + v24);
  long long v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)long long v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *((void *)v25 + 4) = *((void *)v26 + 4);
  uint64_t v28 = a3[6];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  sub_100004678((uint64_t)a1 + v28);
  long long v31 = *((_OWORD *)v30 + 1);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *((_OWORD *)v29 + 1) = v31;
  *((void *)v29 + 4) = *((void *)v30 + 4);
  if (a1 != a2)
  {
    uint64_t v32 = a3[7];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    sub_10000FAF8((uint64_t)a1 + v32, &qword_1000C3220);
    uint64_t v35 = sub_100007830(&qword_1000C3220);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v36 = type metadata accessor for Font.Context();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
  }
  uint64_t v37 = a3[8];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  void *v38 = *v39;
  v38[1] = v39[1];
  swift_release();
  uint64_t v40 = a3[9];
  uint64_t v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  char *v41 = *v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_release();
  uint64_t v43 = a3[10];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  char *v44 = *v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  swift_release();
  uint64_t v46 = a3[11];
  uint64_t v47 = (char *)a1 + v46;
  uint64_t v48 = (char *)a2 + v46;
  char *v47 = *v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  swift_release();
  uint64_t v49 = a3[12];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = (char *)a2 + v49;
  char *v50 = *v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  swift_release();
  uint64_t v52 = a3[13];
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)a2 + v52;
  *uint64_t v53 = *v54;
  *((void *)v53 + 1) = *((void *)v54 + 1);
  swift_release();
  uint64_t v55 = a3[14];
  uint64_t v56 = (char *)a1 + v55;
  uint64_t v57 = (char *)a2 + v55;
  char *v56 = *v57;
  *((void *)v56 + 1) = *((void *)v57 + 1);
  swift_release();
  uint64_t v58 = a3[15];
  uint64_t v59 = (char *)a1 + v58;
  uint64_t v60 = (char *)a2 + v58;
  char *v59 = *v60;
  *((void *)v59 + 1) = *((void *)v60 + 1);
  swift_release();
  uint64_t v61 = a3[16];
  uint64_t v62 = (char *)a1 + v61;
  uint64_t v63 = (char *)a2 + v61;
  *uint64_t v62 = *v63;
  *((void *)v62 + 1) = *((void *)v63 + 1);
  swift_release();
  uint64_t v64 = a3[17];
  uint64_t v65 = (char *)a1 + v64;
  uint64_t v66 = (char *)a2 + v64;
  *uint64_t v65 = *v66;
  *((void *)v65 + 1) = *((void *)v66 + 1);
  swift_release();
  uint64_t v67 = a3[18];
  uint64_t v68 = (char *)a1 + v67;
  uint64_t v69 = (char *)a2 + v67;
  *uint64_t v68 = *v69;
  *((void *)v68 + 1) = *((void *)v69 + 1);
  swift_release();
  return a1;
}

uint64_t sub_100073418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007342C);
}

uint64_t sub_10007342C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_100007830((uint64_t *)&unk_1000C3B70);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100073560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100073574);
}

uint64_t sub_100073574(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TimerSessionEntry(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_100007830((uint64_t *)&unk_1000C3B70);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_1000736A8()
{
  type metadata accessor for TimerSessionEntry(319);
  if (v0 <= 0x3F)
  {
    sub_10000DD80();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_100073798()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000737B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v3 = sub_100007830(&qword_1000C67E8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v75 = sub_100007830(&qword_1000C67F0);
  uint64_t v6 = __chkstk_darwin(v75);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v70 = (uint64_t)&v67 - v9;
  uint64_t v73 = sub_100007830(&qword_1000C67F8);
  __chkstk_darwin(v73);
  uint64_t v74 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007830(&qword_1000C6800);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100007830(&qword_1000C6808);
  __chkstk_darwin(v68);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007830(&qword_1000C6810);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (uint64_t *)((char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v69 = sub_100007830(&qword_1000C6818);
  __chkstk_darwin(v69);
  uint64_t v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_100007830(&qword_1000C6820);
  uint64_t v21 = __chkstk_darwin(v72);
  uint64_t v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  long long v25 = (char *)&v67 - v24;
  GeometryProxy.size.getter();
  double v27 = v26;
  uint64_t v28 = *(int *)(type metadata accessor for TimerSessionEntry(0) + 28);
  uint64_t v71 = a1;
  if (*(unsigned char *)(a1 + v28) == 2)
  {
    *uint64_t v18 = static Alignment.center.getter();
    v18[1] = v29;
    uint64_t v30 = (uint64_t)v18 + *(int *)(sub_100007830(&qword_1000C6868) + 44);
    if (qword_1000C2D00 != -1) {
      swift_once();
    }
    double v31 = *(double *)&qword_1000CAF90;
    if (qword_1000C2D08 != -1) {
      swift_once();
    }
    *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
    *((void *)v13 + 1) = 0;
    v13[16] = 1;
    uint64_t v32 = sub_100007830(&qword_1000C6870);
    sub_100073EF0(v71, (uint64_t)&v13[*(int *)(v32 + 44)], v27, v31);
    char v33 = static Edge.Set.vertical.getter();
    EdgeInsets.init(_all:)();
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    sub_10000FA94((uint64_t)v13, (uint64_t)v15, &qword_1000C6800);
    uint64_t v42 = &v15[*(int *)(v68 + 36)];
    char *v42 = v33;
    *((void *)v42 + 1) = v35;
    *((void *)v42 + 2) = v37;
    *((void *)v42 + 3) = v39;
    *((void *)v42 + 4) = v41;
    v42[40] = 0;
    sub_10000FAF8((uint64_t)v13, &qword_1000C6800);
    char v43 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    sub_10000FA94((uint64_t)v15, v30, &qword_1000C6808);
    uint64_t v52 = v30 + *(int *)(sub_100007830(&qword_1000C6878) + 36);
    *(unsigned char *)uint64_t v52 = v43;
    *(void *)(v52 + 8) = v45;
    *(void *)(v52 + 16) = v47;
    *(void *)(v52 + 24) = v49;
    *(void *)(v52 + 32) = v51;
    *(unsigned char *)(v52 + 40) = 0;
    sub_10000FAF8((uint64_t)v15, &qword_1000C6808);
    uint64_t v53 = static Color.black.getter();
    char v54 = static Edge.Set.all.getter();
    sub_10000FA94((uint64_t)v18, (uint64_t)v20, &qword_1000C6810);
    uint64_t v55 = &v20[*(int *)(v69 + 36)];
    *(void *)uint64_t v55 = v53;
    v55[8] = v54;
    sub_10000FAF8((uint64_t)v18, &qword_1000C6810);
    char v56 = static Edge.Set.vertical.getter();
    sub_10000FA94((uint64_t)v20, (uint64_t)v23, &qword_1000C6818);
    v23[*(int *)(v72 + 36)] = v56;
    sub_10000FAF8((uint64_t)v20, &qword_1000C6818);
    uint64_t v57 = &qword_1000C6820;
    sub_10000F834((uint64_t)v23, (uint64_t)v25, &qword_1000C6820);
    sub_10000FA94((uint64_t)v25, v74, &qword_1000C6820);
    swift_storeEnumTagMultiPayload();
    sub_10007A5D4(&qword_1000C6830, &qword_1000C6820, (void (*)(void))sub_100079B08);
    sub_100079BCC();
    _ConditionalContent<>.init(storage:)();
    uint64_t v58 = (uint64_t)v25;
  }
  else
  {
    GeometryProxy.safeAreaInsets.getter();
    if (v59 == 0.0)
    {
      if (qword_1000C2D58 != -1) {
        swift_once();
      }
      double v60 = *(double *)&qword_1000CAFE8;
    }
    else
    {
      GeometryProxy.safeAreaInsets.getter();
      double v60 = v61;
    }
    *uint64_t v5 = static Alignment.bottom.getter();
    v5[1] = v62;
    uint64_t v63 = sub_100007830(&qword_1000C6828);
    sub_100076C18(v71, (uint64_t)v5 + *(int *)(v63 + 44), v27, v60);
    char v64 = static Edge.Set.all.getter();
    sub_10000FA94((uint64_t)v5, (uint64_t)v8, &qword_1000C67E8);
    v8[*(int *)(v75 + 36)] = v64;
    sub_10000FAF8((uint64_t)v5, &qword_1000C67E8);
    uint64_t v57 = &qword_1000C67F0;
    uint64_t v65 = v70;
    sub_10000F834((uint64_t)v8, v70, &qword_1000C67F0);
    sub_10000FA94(v65, v74, &qword_1000C67F0);
    swift_storeEnumTagMultiPayload();
    sub_10007A5D4(&qword_1000C6830, &qword_1000C6820, (void (*)(void))sub_100079B08);
    sub_100079BCC();
    _ConditionalContent<>.init(storage:)();
    uint64_t v58 = v65;
  }
  return sub_10000FAF8(v58, v57);
}

uint64_t sub_100073EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v8 = sub_100007830(&qword_1000C6880);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v20[-v12];
  *(void *)uint64_t v13 = static VerticalAlignment.top.getter();
  *((void *)v13 + 1) = 0;
  v13[16] = 0;
  uint64_t v14 = sub_100007830(&qword_1000C6888);
  sub_1000740EC(a1, (uint64_t)&v13[*(int *)(v14 + 44)], a3, a4);
  uint64_t v15 = static VerticalAlignment.center.getter();
  sub_100075E48(a1, (uint64_t)v20);
  v21[376] = 1;
  memcpy(&v21[7], v20, 0x170uLL);
  sub_10000FA94((uint64_t)v13, (uint64_t)v11, &qword_1000C6880);
  sub_10000FA94((uint64_t)v11, a2, &qword_1000C6880);
  uint64_t v16 = sub_100007830(&qword_1000C6890);
  uint64_t v17 = a2 + *(int *)(v16 + 48);
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = (void *)(a2 + *(int *)(v16 + 64));
  v22[0] = v15;
  v22[1] = 0;
  LOBYTE(v22[2]) = 1;
  memcpy((char *)&v22[2] + 1, v21, 0x177uLL);
  memcpy(v18, v22, 0x188uLL);
  sub_100079C6C(v22);
  sub_10000FAF8((uint64_t)v13, &qword_1000C6880);
  v23[0] = v15;
  v23[1] = 0;
  char v24 = 1;
  memcpy(v25, v21, sizeof(v25));
  sub_100079D94(v23);
  return sub_10000FAF8((uint64_t)v11, &qword_1000C6880);
}

uint64_t sub_1000740EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v122 = a2;
  uint64_t v112 = type metadata accessor for Date();
  uint64_t v110 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v108 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007830(&qword_1000C6898);
  __chkstk_darwin(v8 - 8);
  uint64_t v113 = (uint64_t)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100007830(&qword_1000C68A0);
  __chkstk_darwin(v109);
  uint64_t v116 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_100007830(&qword_1000C68A8);
  __chkstk_darwin(v114);
  uint64_t v115 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_100007830(&qword_1000C68B0);
  __chkstk_darwin(v111);
  uint64_t v119 = (uint64_t)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_100007830(&qword_1000C68B8);
  uint64_t v13 = __chkstk_darwin(v118);
  uint64_t v121 = (uint64_t)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v117 = (uint64_t)&v94 - v16;
  __chkstk_darwin(v15);
  uint64_t v120 = (uint64_t)&v94 - v17;
  uint64_t v124 = type metadata accessor for LinearTimerTimelineCountdown();
  uint64_t v104 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v105 = v18;
  uint64_t v125 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for Font.Context();
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v94 = (uint64_t)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100007830(&qword_1000C68C0);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100007830(&qword_1000C68C8);
  __chkstk_darwin(v24 - 8);
  double v26 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100007830(&qword_1000C68D0);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v94 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_100007830(&qword_1000C68D8);
  __chkstk_darwin(v97);
  double v31 = (char *)&v94 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100007830(&qword_1000C68E0);
  __chkstk_darwin(v98);
  char v33 = (char *)&v94 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_100007830(&qword_1000C68E8);
  __chkstk_darwin(v100);
  uint64_t v99 = (uint64_t)&v94 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100007830(&qword_1000C68F0);
  __chkstk_darwin(v102);
  uint64_t v103 = (uint64_t)&v94 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100007830(&qword_1000C68F8);
  uint64_t v37 = __chkstk_darwin(v36 - 8);
  uint64_t v107 = (uint64_t)&v94 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v101 = (char *)&v94 - v40;
  __chkstk_darwin(v39);
  uint64_t v106 = (uint64_t)&v94 - v41;
  [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.764705882 blue:0.0431372549 alpha:1.0];
  Color.init(uiColor:)();
  sub_100075064(a1);
  swift_release();
  uint64_t v42 = static Alignment.leading.getter();
  __n128 v44 = sub_10007165C(0.0, 1, 0.0, 1, a3 * 0.5 - a4, 0, 0.0, 1, (uint64_t)v26, 0.0, 1, 0.0, 1, v42, v43, &qword_1000C68C0, &qword_1000C68C8);
  (*(void (**)(char *, uint64_t, __n128))(v21 + 8))(v23, v20, v44);
  if (qword_1000C2D28 != -1) {
    swift_once();
  }
  static Alignment.top.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FA94((uint64_t)v26, (uint64_t)v29, &qword_1000C68C8);
  uint64_t v45 = &v29[*(int *)(v27 + 36)];
  long long v46 = v130;
  *(_OWORD *)uint64_t v45 = v129;
  *((_OWORD *)v45 + 1) = v46;
  *((_OWORD *)v45 + 2) = v131;
  sub_10000FAF8((uint64_t)v26, &qword_1000C68C8);
  uint64_t v47 = v124;
  uint64_t v48 = a1 + *(int *)(v124 + 40);
  uint64_t v49 = *(void *)(v48 + 8);
  char v126 = *(unsigned char *)v48;
  uint64_t v127 = v49;
  uint64_t v123 = sub_100007830(&qword_1000C33A8);
  State.wrappedValue.getter();
  if (v128 == 1)
  {
    uint64_t v50 = v125;
    if (qword_1000C2D10 != -1) {
      swift_once();
    }
    uint64_t v51 = v94;
    sub_100038DB0(v94);
    uint64_t v52 = (const __CTFont *)Font.platformFont(in:)();
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v51, v96);
    CGFloat CapHeight = CTFontGetCapHeight(v52);
  }
  else
  {
    CGFloat CapHeight = 50.0;
    uint64_t v50 = v125;
  }
  sub_10000FA94((uint64_t)v29, (uint64_t)v31, &qword_1000C68D0);
  char v54 = (CGFloat *)&v31[*(int *)(v97 + 36)];
  CGFloat *v54 = 0.0;
  v54[1] = CapHeight;
  sub_10000FAF8((uint64_t)v29, &qword_1000C68D0);
  uint64_t v55 = a1 + *(int *)(v47 + 60);
  char v56 = *(unsigned char *)v55;
  uint64_t v57 = *(void *)(v55 + 8);
  char v126 = v56;
  uint64_t v127 = v57;
  State.wrappedValue.getter();
  if (v128) {
    double v58 = 1.0;
  }
  else {
    double v58 = 0.0;
  }
  sub_10000FA94((uint64_t)v31, (uint64_t)v33, &qword_1000C68D8);
  *(double *)&v33[*(int *)(v98 + 36)] = v58;
  sub_10000FAF8((uint64_t)v31, &qword_1000C68D8);
  if (qword_1000C2E08 != -1) {
    swift_once();
  }
  uint64_t v59 = qword_1000CB098;
  uint64_t v60 = v99;
  sub_10000FA94((uint64_t)v33, v99, &qword_1000C68E0);
  *(void *)(v60 + *(int *)(v100 + 36)) = v59;
  swift_retain();
  sub_10000FAF8((uint64_t)v33, &qword_1000C68E0);
  sub_10007A744(a1, v50, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  uint64_t v61 = *(unsigned __int8 *)(v104 + 80);
  uint64_t v62 = (v61 + 16) & ~v61;
  v105 += v62;
  uint64_t v104 = v61 | 7;
  uint64_t v63 = swift_allocObject();
  sub_100079A20(v50, v63 + v62, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  uint64_t v64 = v103;
  sub_10000FA94(v60, v103, &qword_1000C68E8);
  uint64_t v65 = (uint64_t (**)())(v64 + *(int *)(v102 + 36));
  *uint64_t v65 = sub_10007A074;
  v65[1] = (uint64_t (*)())v63;
  v65[2] = 0;
  v65[3] = 0;
  sub_10000FAF8(v60, &qword_1000C68E8);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v66 = a1;
  sub_10007A5D4(&qword_1000C6900, &qword_1000C68F0, (void (*)(void))sub_10007A08C);
  uint64_t v67 = (uint64_t)v101;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FAF8(v64, &qword_1000C68F0);
  uint64_t v68 = v106;
  sub_10000F834(v67, v106, &qword_1000C68F8);
  uint64_t v69 = v108;
  static Date.now.getter();
  if (qword_1000C2D18 != -1) {
    swift_once();
  }
  uint64_t v70 = static Color.white.getter();
  uint64_t v71 = v113;
  sub_10007548C(v66, v70, v113);
  swift_release();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v69, v112);
  uint64_t v72 = *(void *)(v48 + 8);
  char v126 = *(unsigned char *)v48;
  uint64_t v127 = v72;
  State.wrappedValue.getter();
  double v73 = 0.0;
  if (v128) {
    double v74 = 0.0;
  }
  else {
    double v74 = 50.0;
  }
  uint64_t v75 = v116;
  sub_10000FA94(v71, v116, &qword_1000C6898);
  uint64_t v76 = v75 + *(int *)(v109 + 36);
  *(void *)uint64_t v76 = 0;
  *(double *)(v76 + 8) = v74;
  sub_10000FAF8(v71, &qword_1000C6898);
  uint64_t v77 = v66 + *(int *)(v124 + 56);
  char v78 = *(unsigned char *)v77;
  uint64_t v79 = *(void *)(v77 + 8);
  char v126 = v78;
  uint64_t v127 = v79;
  State.wrappedValue.getter();
  if (v128) {
    double v73 = 1.0;
  }
  uint64_t v80 = v115;
  sub_10000FA94(v75, v115, &qword_1000C68A0);
  *(double *)(v80 + *(int *)(v114 + 36)) = v73;
  sub_10000FAF8(v75, &qword_1000C68A0);
  uint64_t v81 = qword_1000CB098;
  uint64_t v82 = v119;
  sub_10000FA94(v80, v119, &qword_1000C68A8);
  *(void *)(v82 + *(int *)(v111 + 36)) = v81;
  swift_retain();
  sub_10000FAF8(v80, &qword_1000C68A8);
  uint64_t v83 = v125;
  sub_10007A744(v66, v125, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  uint64_t v84 = swift_allocObject();
  sub_100079A20(v83, v84 + v62, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  uint64_t v85 = v117;
  sub_10000FA94(v82, v117, &qword_1000C68B0);
  uint64_t v86 = (uint64_t (**)())(v85 + *(int *)(v118 + 36));
  char *v86 = sub_10007A444;
  v86[1] = (uint64_t (*)())v84;
  v86[2] = 0;
  v86[3] = 0;
  sub_10000FAF8(v82, &qword_1000C68B0);
  uint64_t v87 = v120;
  sub_10000F834(v85, v120, &qword_1000C68B8);
  uint64_t v88 = v107;
  sub_10000FA94(v68, v107, &qword_1000C68F8);
  uint64_t v89 = v121;
  sub_10000FA94(v87, v121, &qword_1000C68B8);
  uint64_t v90 = v122;
  sub_10000FA94(v88, v122, &qword_1000C68F8);
  uint64_t v91 = sub_100007830(&qword_1000C6970);
  uint64_t v92 = v90 + *(int *)(v91 + 48);
  *(void *)uint64_t v92 = 0;
  *(unsigned char *)(v92 + 8) = 1;
  sub_10000FA94(v89, v90 + *(int *)(v91 + 64), &qword_1000C68B8);
  sub_10000FAF8(v87, &qword_1000C68B8);
  sub_10000FAF8(v68, &qword_1000C68F8);
  sub_10000FAF8(v89, &qword_1000C68B8);
  return sub_10000FAF8(v88, &qword_1000C68F8);
}

uint64_t sub_100075064(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DynamicTypeSize();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100078A94(a1, (uint64_t)&v14);
  uint64_t v6 = v14;
  uint64_t v7 = v15;
  char v8 = v16;
  uint64_t v9 = v17;
  if (qword_1000C2D10 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1000CAFA0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = swift_getKeyPath();
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  char v16 = v8;
  uint64_t v17 = v9;
  __int16 v18 = 256;
  uint64_t v19 = KeyPath;
  uint64_t v20 = v10;
  uint64_t v21 = v12;
  uint64_t v22 = 2;
  char v23 = 0;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DynamicTypeSize.large(_:), v2);
  swift_retain();
  sub_100007830(&qword_1000C6930);
  sub_10007A268();
  View.dynamicTypeSize(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_10000C494(v14, v15, v16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10007526C()
{
  if (qword_1000C2DD8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB068);
  withAnimation<A>(_:_:)();
  if (qword_1000C2DE0 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB070);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_1000753A4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100075418()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10007548C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v73 = a3;
  uint64_t v72 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v69 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for DynamicTypeSize();
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v57 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100007830(&qword_1000C33C8);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v55 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007830(&qword_1000C33D0);
  __chkstk_darwin(v11 - 8);
  uint64_t v56 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100007830(&qword_1000C33D8) - 8;
  __chkstk_darwin(v59);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100007830(&qword_1000C6978) - 8;
  __chkstk_darwin(v64);
  uint64_t v61 = (uint64_t)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100007830(&qword_1000C6980) - 8;
  __chkstk_darwin(v66);
  uint64_t v62 = (uint64_t)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100007830(&qword_1000C6988) - 8;
  __chkstk_darwin(v68);
  uint64_t v63 = (uint64_t)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000787F4(a1);
  uint64_t v74 = v18;
  uint64_t v75 = v19;
  sub_10000C92C();
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  LOBYTE(a1) = v23 & 1;
  Font.monospacedDigit()();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Font._StylisticAlternative.three(_:), v6);
  Font._stylisticAlternative(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v24 = Text.font(_:)();
  uint64_t v26 = v25;
  LOBYTE(v6) = v27;
  uint64_t v29 = v28;
  swift_release();
  sub_10000C494(v20, v22, a1);
  swift_bridgeObjectRelease();
  uint64_t v74 = v24;
  uint64_t v75 = v26;
  char v76 = v6 & 1;
  uint64_t v77 = v29;
  uint64_t v30 = v58;
  double v31 = v57;
  uint64_t v32 = v60;
  (*(void (**)(char *, void, uint64_t))(v58 + 104))(v57, enum case for DynamicTypeSize.large(_:), v60);
  char v33 = v55;
  View.dynamicTypeSize(_:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
  sub_10000C494(v74, v75, v76);
  swift_bridgeObjectRelease();
  uint64_t v34 = static Alignment.bottomTrailing.getter();
  uint64_t v35 = v56;
  __n128 v37 = sub_10007165C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v56, 0.0, 1, 0.0, 1, v34, v36, &qword_1000C33C8, &qword_1000C33D0);
  (*(void (**)(char *, uint64_t, __n128))(v65 + 8))(v33, v67, v37);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FA94(v35, (uint64_t)v14, &qword_1000C33D0);
  uint64_t v39 = (uint64_t *)&v14[*(int *)(v59 + 44)];
  uint64_t v40 = v71;
  uint64_t *v39 = KeyPath;
  v39[1] = v40;
  swift_retain();
  sub_10000FAF8(v35, &qword_1000C33D0);
  (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, enum case for Color.RGBColorSpace.sRGBLinear(_:), v72);
  uint64_t v41 = Color.init(_:white:opacity:)();
  uint64_t v42 = v61;
  sub_10000FA94((uint64_t)v14, v61, &qword_1000C33D8);
  uint64_t v43 = (uint64_t *)(v42 + *(int *)(v64 + 44));
  uint64_t *v43 = v41;
  v43[1] = 0x3FF0000000000000;
  v43[2] = 0;
  v43[3] = 0;
  sub_10000FAF8((uint64_t)v14, &qword_1000C33D8);
  uint64_t v44 = swift_getKeyPath();
  uint64_t v45 = v62;
  sub_10000FA94(v42, v62, &qword_1000C6978);
  uint64_t v46 = v45 + *(int *)(v66 + 44);
  *(void *)uint64_t v46 = v44;
  *(void *)(v46 + 8) = 1;
  *(unsigned char *)(v46 + 16) = 0;
  sub_10000FAF8(v42, &qword_1000C6978);
  uint64_t v47 = swift_getKeyPath();
  uint64_t v48 = v63;
  sub_10000FA94(v45, v63, &qword_1000C6980);
  uint64_t v49 = v48 + *(int *)(v68 + 44);
  *(void *)uint64_t v49 = v47;
  *(unsigned char *)(v49 + 8) = 1;
  sub_10000FAF8(v45, &qword_1000C6980);
  uint64_t v50 = swift_getKeyPath();
  uint64_t v51 = v73;
  sub_10000FA94(v48, v73, &qword_1000C6988);
  uint64_t v52 = (uint64_t *)(v51 + *(int *)(sub_100007830(&qword_1000C6898) + 36));
  *uint64_t v52 = v50;
  v52[1] = 0x3FE6666666666666;
  return sub_10000FAF8(v48, &qword_1000C6988);
}

uint64_t sub_100075C28()
{
  if (qword_1000C2DC8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB058);
  withAnimation<A>(_:_:)();
  if (qword_1000C2DD0 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB060);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_100075D60()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100075DD4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100075E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v90 = type metadata accessor for SlideTransition();
  uint64_t v88 = *(void *)(v90 - 8);
  uint64_t v4 = __chkstk_darwin(v90);
  uint64_t v91 = (char *)v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v87 = (char *)v76 - v6;
  uint64_t v7 = type metadata accessor for LinearTimerTimelineCountdown();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v99 = static Color.white.getter();
  [objc_allocWithZone((Class)UIColor) initWithRed:0.17254902 green:0.17254902 blue:0.17254902 alpha:1.0];
  uint64_t v98 = Color.init(uiColor:)();
  uint64_t v86 = (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown;
  sub_10007A744(a1, (uint64_t)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 16) & ~v10;
  *(void *)&long long v97 = v11 + v9;
  v76[1] = v10 | 7;
  uint64_t v96 = swift_allocObject();
  uint64_t v85 = (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown;
  sub_100079A20((uint64_t)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v96 + v11, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  LOBYTE(v143[0]) = 0;
  State.init(wrappedValue:)();
  int v94 = v123[0];
  uint64_t v95 = *(void *)&v123[8];
  uint64_t v12 = a1 + *(int *)(v7 + 48);
  v76[0] = a1;
  uint64_t v14 = *(void *)(v12 + 8);
  v123[0] = *(unsigned char *)v12;
  char v13 = v123[0];
  *(void *)&v123[8] = v14;
  uint64_t v15 = sub_100007830(&qword_1000C33A8);
  State.wrappedValue.getter();
  LODWORD(v84) = LOBYTE(v143[0]);
  uint64_t v89 = (uint64_t (*)())v7;
  uint64_t v16 = a1 + *(int *)(v7 + 68);
  char v17 = *(unsigned char *)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  v123[0] = v17;
  *(void *)&v123[8] = v18;
  State.wrappedValue.getter();
  LODWORD(v83) = LOBYTE(v143[0]);
  v123[0] = v13;
  *(void *)&v123[8] = v14;
  uint64_t v19 = (char *)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = v15;
  State.wrappedValue.getter();
  uint64_t v20 = v11;
  int v80 = LOBYTE(v143[0]);
  static UnitPoint.center.getter();
  uint64_t v92 = v22;
  uint64_t v93 = v21;
  char v23 = v87;
  SlideTransition.init()();
  uint64_t v24 = v88;
  uint64_t v25 = v90;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v91, v23, v90);
  sub_10007A7AC(&qword_1000C33B0, (void (*)(uint64_t))&type metadata accessor for SlideTransition);
  uint64_t v91 = (char *)AnyTransition.init<A>(_:)();
  v164[0] = *(_DWORD *)v162;
  *(_DWORD *)((char *)v164 + 3) = *(_DWORD *)&v162[3];
  uint64_t v26 = v76[0];
  (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v25);
  v163[0] = v164[0];
  *(_DWORD *)((char *)v163 + 3) = *(_DWORD *)((char *)v164 + 3);
  sub_10007A744(v26, (uint64_t)v19, v86);
  uint64_t v90 = swift_allocObject();
  sub_100079A20((uint64_t)v19, v90 + v20, v85);
  if (qword_1000C2D40 != -1) {
    swift_once();
  }
  uint64_t v88 = qword_1000CAFD0;
  uint64_t v87 = (char *)static Color.black.getter();
  double v27 = 1.0;
  [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.764705882 blue:0.0431372549 alpha:1.0];
  uint64_t v86 = (uint64_t (*)(void))Color.init(uiColor:)();
  sub_10007A744(v26, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  uint64_t v85 = (uint64_t (*)(void))swift_allocObject();
  sub_100079A20((uint64_t)v19, (uint64_t)v85 + v20, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  LOBYTE(v143[0]) = 0;
  State.init(wrappedValue:)();
  int v82 = v123[0];
  uint64_t v81 = *(void *)&v123[8];
  uint64_t v28 = v89;
  uint64_t v29 = v26 + *((int *)v89 + 13);
  uint64_t v77 = v20;
  uint64_t v78 = (uint64_t)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v29 + 8);
  v123[0] = *(unsigned char *)v29;
  char v30 = v123[0];
  *(void *)&v123[8] = v31;
  State.wrappedValue.getter();
  int v32 = LOBYTE(v143[0]);
  uint64_t v33 = v26 + *((int *)v28 + 18);
  char v34 = *(unsigned char *)v33;
  uint64_t v35 = *(void *)(v33 + 8);
  v123[0] = v34;
  *(void *)&v123[8] = v35;
  State.wrappedValue.getter();
  uint64_t v36 = v26;
  int v37 = LOBYTE(v143[0]);
  v123[0] = v30;
  *(void *)&v123[8] = v31;
  State.wrappedValue.getter();
  int v38 = LOBYTE(v143[0]);
  static UnitPoint.center.getter();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  if (qword_1000C2E08 != -1) {
    swift_once();
  }
  if (v38) {
    double v43 = 1.0;
  }
  else {
    double v43 = 0.8;
  }
  if (v37) {
    double v44 = 1.0;
  }
  else {
    double v44 = 0.0;
  }
  if (v32) {
    double v45 = 0.0;
  }
  else {
    double v45 = 150.0;
  }
  if (v80) {
    double v46 = 1.0;
  }
  else {
    double v46 = 0.8;
  }
  if (!LODWORD(v83)) {
    double v27 = 0.0;
  }
  if (LODWORD(v84)) {
    double v47 = 0.0;
  }
  else {
    double v47 = 150.0;
  }
  double v83 = v27;
  double v84 = v47;
  uint64_t v48 = qword_1000CB098;
  uint64_t v49 = v78;
  sub_10007A744(v36, v78, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  uint64_t v50 = swift_allocObject();
  sub_100079A20(v49, v50 + v77, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  *(void *)&long long v100 = 0x746165706572;
  *((void *)&v100 + 1) = 0xE600000000000000;
  *(void *)&long long v101 = v99;
  *((void *)&v101 + 1) = v98;
  long long v97 = xmmword_100094F90;
  long long v102 = xmmword_100094F90;
  uint64_t v89 = sub_100079EBC;
  uint64_t v51 = v95;
  uint64_t v52 = v96;
  *(void *)&long long v103 = sub_100079EBC;
  *((void *)&v103 + 1) = v96;
  char v53 = v94;
  LOBYTE(v104) = v94;
  *(_DWORD *)((char *)&v104 + 1) = v163[0];
  DWORD1(v104) = *(_DWORD *)((char *)v163 + 3);
  *((void *)&v104 + 1) = v95;
  *(void *)&long long v105 = 0;
  *((double *)&v105 + 1) = v47;
  *(double *)&long long v106 = v27;
  *((double *)&v106 + 1) = v46;
  *(double *)&long long v107 = v46;
  uint64_t v55 = v92;
  uint64_t v54 = v93;
  *((void *)&v107 + 1) = v93;
  *(void *)&long long v108 = v92;
  uint64_t v57 = v90;
  uint64_t v56 = v91;
  *((void *)&v108 + 1) = v91;
  *(void *)&long long v109 = sub_100079ED8;
  *((void *)&v109 + 1) = v90;
  long long v110 = 0uLL;
  *(void *)&long long v111 = 1886352499;
  uint64_t v59 = v86;
  uint64_t v58 = v87;
  *((void *)&v111 + 1) = 0xE400000000000000;
  *(void *)&long long v112 = v87;
  *((void *)&v112 + 1) = v86;
  long long v113 = xmmword_100094F80;
  uint64_t v60 = v85;
  *(void *)&long long v114 = sub_100079F68;
  *((void *)&v114 + 1) = v85;
  char v61 = v82;
  LOBYTE(v115) = v82;
  uint64_t v62 = v81;
  *((void *)&v115 + 1) = v81;
  *(void *)&long long v116 = 0;
  *((double *)&v116 + 1) = v45;
  *(double *)&long long v117 = v44;
  *((double *)&v117 + 1) = v43;
  *(double *)&long long v118 = v43;
  *((void *)&v118 + 1) = v40;
  *(void *)&long long v119 = v42;
  *((void *)&v119 + 1) = v48;
  *(void *)&long long v120 = sub_100079FE8;
  *((void *)&v120 + 1) = v50;
  long long v63 = v109;
  *(_OWORD *)(a2 + 128) = v108;
  *(_OWORD *)(a2 + 144) = v63;
  *(_OWORD *)(a2 + 160) = v110;
  long long v64 = v105;
  *(_OWORD *)(a2 + 64) = v104;
  *(_OWORD *)(a2 + 80) = v64;
  long long v65 = v107;
  *(_OWORD *)(a2 + 96) = v106;
  *(_OWORD *)(a2 + 112) = v65;
  long long v66 = v101;
  *(_OWORD *)a2 = v100;
  *(_OWORD *)(a2 + 16) = v66;
  long long v67 = v103;
  *(_OWORD *)(a2 + 32) = v102;
  *(_OWORD *)(a2 + 48) = v67;
  *(_OWORD *)&v123[71] = v115;
  *(_OWORD *)&v123[55] = v114;
  *(_OWORD *)&v123[119] = v118;
  *(_OWORD *)&v123[135] = v119;
  uint64_t v122 = 0;
  uint64_t v121 = 0;
  *(_OWORD *)&v123[151] = v120;
  *(_OWORD *)&v123[167] = 0u;
  *(_OWORD *)&v123[87] = v116;
  *(_OWORD *)&v123[103] = v117;
  *(_OWORD *)&v123[7] = v111;
  *(_OWORD *)&v123[23] = v112;
  *(_OWORD *)&v123[39] = v113;
  long long v68 = *(_OWORD *)&v123[128];
  long long v69 = *(_OWORD *)&v123[160];
  *(_OWORD *)(a2 + 329) = *(_OWORD *)&v123[144];
  *(_OWORD *)(a2 + 345) = v69;
  long long v70 = *(_OWORD *)&v123[80];
  *(_OWORD *)(a2 + 249) = *(_OWORD *)&v123[64];
  long long v71 = *(_OWORD *)&v123[96];
  long long v72 = *(_OWORD *)&v123[112];
  *(_OWORD *)(a2 + 265) = v70;
  *(_OWORD *)(a2 + 281) = v71;
  *(_OWORD *)(a2 + 297) = v72;
  *(_OWORD *)(a2 + 313) = v68;
  long long v73 = *(_OWORD *)&v123[16];
  *(_OWORD *)(a2 + 185) = *(_OWORD *)v123;
  *(_OWORD *)(a2 + 201) = v73;
  long long v74 = *(_OWORD *)&v123[48];
  *(_OWORD *)(a2 + 217) = *(_OWORD *)&v123[32];
  char v124 = 0;
  *(void *)(a2 + 176) = v88;
  *(unsigned char *)(a2 + 184) = 0;
  *(void *)(a2 + 360) = *(void *)&v123[175];
  *(_OWORD *)(a2 + 233) = v74;
  v125[0] = 1886352499;
  v125[1] = 0xE400000000000000;
  v125[2] = v58;
  v125[3] = v59;
  long long v126 = xmmword_100094F80;
  uint64_t v127 = sub_100079F68;
  char v128 = v60;
  char v129 = v61;
  uint64_t v130 = v62;
  uint64_t v131 = 0;
  double v132 = v45;
  double v133 = v44;
  double v134 = v43;
  double v135 = v43;
  uint64_t v136 = v40;
  uint64_t v137 = v42;
  uint64_t v138 = v48;
  uint64_t v139 = sub_100079FE8;
  uint64_t v142 = 0;
  uint64_t v140 = v50;
  uint64_t v141 = 0;
  sub_10000EC80((uint64_t)&v100);
  sub_10000EC80((uint64_t)&v111);
  swift_retain();
  sub_10000ED98((uint64_t)v125);
  v143[0] = 0x746165706572;
  v143[1] = 0xE600000000000000;
  v143[2] = v99;
  v143[3] = v98;
  long long v144 = v97;
  uint64_t v145 = v89;
  uint64_t v146 = v52;
  char v147 = v53;
  *(_DWORD *)unint64_t v148 = v163[0];
  *(_DWORD *)&v148[3] = *(_DWORD *)((char *)v163 + 3);
  uint64_t v149 = v51;
  uint64_t v150 = 0;
  double v151 = v84;
  double v152 = v83;
  double v153 = v46;
  double v154 = v46;
  uint64_t v155 = v54;
  uint64_t v156 = v55;
  id v157 = v56;
  uint64_t v158 = sub_100079ED8;
  uint64_t v161 = 0;
  uint64_t v159 = v57;
  uint64_t v160 = 0;
  return sub_10000ED98((uint64_t)v143);
}

uint64_t sub_1000767D8()
{
  if (qword_1000C2DE8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB078);
  withAnimation<A>(_:_:)();
  if (qword_1000C2DF0 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB080);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_100076910()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100076984()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000769F8()
{
  if (qword_1000C2DF8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB088);
  withAnimation<A>(_:_:)();
  if (qword_1000C2E00 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1000CB090);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_100076B30()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100076BA4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100076C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v135 = a2;
  uint64_t v7 = type metadata accessor for DynamicTypeSize();
  uint64_t v133 = *(void *)(v7 - 8);
  uint64_t v134 = v7;
  __chkstk_darwin(v7);
  double v132 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007830(&qword_1000C6990);
  __chkstk_darwin(v9 - 8);
  uint64_t v121 = (uint64_t *)((char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100007830(&qword_1000C6998);
  __chkstk_darwin(v11 - 8);
  uint64_t v123 = (uint64_t)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007830(&qword_1000C69A0);
  __chkstk_darwin(v13 - 8);
  char v124 = (uint64_t *)((char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v122 = sub_100007830(&qword_1000C69A8);
  __chkstk_darwin(v122);
  uint64_t v125 = (uint64_t)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_100007830(&qword_1000C69B0);
  __chkstk_darwin(v126);
  uint64_t v127 = (uint64_t)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100007830(&qword_1000C69B8);
  uint64_t v130 = *(void *)(v17 - 8);
  uint64_t v131 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  char v129 = (char *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  char v128 = (char *)&v112 - v20;
  uint64_t v21 = type metadata accessor for LinearTimerTimelineCountdown();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v113 = v21 - 8;
  uint64_t v118 = v22;
  uint64_t v117 = *(void *)(v22 + 64);
  __chkstk_darwin(v21 - 8);
  uint64_t v116 = (uint64_t)&v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100007830(&qword_1000C69C0) - 8;
  uint64_t v24 = __chkstk_darwin(v115);
  uint64_t v120 = (uint64_t)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  long long v114 = (char *)&v112 - v26;
  uint64_t v119 = sub_100007830(&qword_1000C69C8);
  uint64_t v27 = __chkstk_darwin(v119);
  uint64_t v139 = (uint64_t)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v138 = (uint64_t)&v112 - v29;
  uint64_t v30 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v112 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100007830(&qword_1000C69D0);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  int v37 = (char *)&v112 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v112 - v38;
  static Date.now.getter();
  [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.764705882 blue:0.0431372549 alpha:1.0];
  uint64_t v40 = Color.init(uiColor:)();
  [objc_allocWithZone((Class)UIColor) initWithRed:0.831372549 green:0.431372549 blue:0.0 alpha:1.0];
  uint64_t v41 = Color.init(uiColor:)();
  uint64_t v42 = static Color.black.getter();
  uint64_t v43 = a1;
  sub_1000779B4((uint64_t)v33, v40, v41, v42, (uint64_t)v37, a3, a4);
  swift_release();
  swift_release();
  swift_release();
  double v44 = *(void (**)(char *, uint64_t))(v31 + 8);
  v44(v33, v30);
  uint64_t v136 = v39;
  sub_10000F834((uint64_t)v37, (uint64_t)v39, &qword_1000C69D0);
  static Date.now.getter();
  uint64_t v45 = static Color.black.getter();
  uint64_t v46 = static Color.secondary.getter();
  uint64_t v47 = static Color.white.getter();
  sub_1000779B4((uint64_t)v33, v45, v46, v47, (uint64_t)v37, a3, a4);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v48 = v33;
  uint64_t v49 = v43;
  v44(v48, v30);
  uint64_t v50 = (uint64_t)v114;
  uint64_t v51 = (uint64_t *)(v43 + *(int *)(v113 + 40));
  uint64_t v52 = *v51;
  uint64_t v53 = v51[1];
  uint64_t v140 = v52;
  uint64_t v141 = v53;
  sub_100007830(&qword_1000C69D8);
  State.wrappedValue.getter();
  double v54 = v142 * a3;
  sub_10000FA94((uint64_t)v37, v50, &qword_1000C69D0);
  uint64_t v55 = v50 + *(int *)(v115 + 44);
  *(double *)uint64_t v55 = v54;
  *(void *)(v55 + 8) = 0;
  *(_WORD *)(v55 + 16) = 256;
  uint64_t v137 = v37;
  sub_10000FAF8((uint64_t)v37, &qword_1000C69D0);
  uint64_t v56 = v116;
  sub_10007A744(v43, v116, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  unint64_t v57 = (*(unsigned __int8 *)(v118 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
  uint64_t v58 = swift_allocObject();
  sub_100079A20(v56, v58 + v57, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  if (qword_1000C2C88 != -1) {
    swift_once();
  }
  uint64_t v140 = qword_1000CAE08;
  type metadata accessor for DisplayLink();
  sub_10007A7AC(&qword_1000C69E0, (void (*)(uint64_t))type metadata accessor for DisplayLink);
  swift_retain();
  uint64_t v59 = Publisher.eraseToAnyPublisher()();
  uint64_t v60 = v120;
  sub_10000FA94(v50, v120, &qword_1000C69C0);
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = sub_10007A4F8;
  *(void *)(v61 + 24) = v58;
  uint64_t v62 = v119;
  uint64_t v63 = v139;
  *(void *)(v139 + *(int *)(v119 + 52)) = v59;
  sub_10000F834(v60, v63, &qword_1000C69C0);
  swift_release();
  long long v64 = (uint64_t (**)(double *))(v63 + *(int *)(v62 + 56));
  char *v64 = sub_10007A5A8;
  v64[1] = (uint64_t (*)(double *))v61;
  sub_10000FAF8(v50, &qword_1000C69C0);
  sub_10000F834(v63, v138, &qword_1000C69C8);
  if (qword_1000C2E10 != -1) {
    swift_once();
  }
  uint64_t v65 = (uint64_t)v124;
  *char v124 = qword_1000CB0A0;
  *(void *)(v65 + 8) = 0;
  *(unsigned char *)(v65 + 16) = 1;
  uint64_t v66 = *(int *)(sub_100007830(&qword_1000C69E8) + 44);
  if (qword_1000C2DB0 != -1) {
    swift_once();
  }
  uint64_t v67 = v65 + v66;
  uint64_t v68 = qword_1000CB040;
  uint64_t v69 = static VerticalAlignment.center.getter();
  uint64_t v70 = (uint64_t)v121;
  *uint64_t v121 = v69;
  *(void *)(v70 + 8) = v68;
  *(unsigned char *)(v70 + 16) = 0;
  uint64_t v71 = sub_100007830(&qword_1000C69F0);
  sub_100078E50(v49, v70 + *(int *)(v71 + 44));
  uint64_t v72 = static Alignment.bottomLeading.getter();
  uint64_t v73 = v123;
  sub_100071A14(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v123, 0.0, 1, 0.0, 1, v72, v74, &qword_1000C6990, &qword_1000C6998);
  sub_10000FAF8(v70, &qword_1000C6990);
  uint64_t v75 = qword_1000CB0A0;
  sub_10000FA94(v73, v67, &qword_1000C6998);
  char v76 = (uint64_t *)(v67 + *(int *)(sub_100007830(&qword_1000C69F8) + 36));
  *char v76 = v75;
  v76[1] = (uint64_t)sub_100077E78;
  void v76[2] = 0;
  sub_10000FAF8(v73, &qword_1000C6998);
  LOBYTE(v67) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v78 = v77;
  uint64_t v80 = v79;
  uint64_t v82 = v81;
  uint64_t v84 = v83;
  uint64_t v85 = v125;
  sub_10000FA94(v65, v125, &qword_1000C69A0);
  uint64_t v86 = v85 + *(int *)(v122 + 36);
  *(unsigned char *)uint64_t v86 = v67;
  *(void *)(v86 + 8) = v78;
  *(void *)(v86 + 16) = v80;
  *(void *)(v86 + 24) = v82;
  *(void *)(v86 + 32) = v84;
  *(unsigned char *)(v86 + 40) = 0;
  sub_10000FAF8(v65, &qword_1000C69A0);
  LOBYTE(v67) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v88 = v87;
  uint64_t v90 = v89;
  uint64_t v92 = v91;
  uint64_t v94 = v93;
  uint64_t v95 = v127;
  sub_10000FA94(v85, v127, &qword_1000C69A8);
  uint64_t v96 = v95 + *(int *)(v126 + 36);
  *(unsigned char *)uint64_t v96 = v67;
  *(void *)(v96 + 8) = v88;
  *(void *)(v96 + 16) = v90;
  *(void *)(v96 + 24) = v92;
  *(void *)(v96 + 32) = v94;
  *(unsigned char *)(v96 + 40) = 0;
  sub_10000FAF8(v85, &qword_1000C69A8);
  uint64_t v98 = v132;
  uint64_t v97 = v133;
  uint64_t v99 = v134;
  (*(void (**)(char *, void, uint64_t))(v133 + 104))(v132, enum case for DynamicTypeSize.large(_:), v134);
  sub_10007A5D4(&qword_1000C6A00, &qword_1000C69B0, (void (*)(void))sub_10007A650);
  long long v100 = v129;
  View.dynamicTypeSize(_:)();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
  sub_10000FAF8(v95, &qword_1000C69B0);
  uint64_t v102 = v130;
  uint64_t v101 = v131;
  long long v103 = v128;
  (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v128, v100, v131);
  uint64_t v104 = (uint64_t)v137;
  sub_10000FA94((uint64_t)v136, (uint64_t)v137, &qword_1000C69D0);
  uint64_t v106 = v138;
  uint64_t v105 = v139;
  sub_10000FA94(v138, v139, &qword_1000C69C8);
  long long v107 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
  v107(v100, v103, v101);
  uint64_t v108 = v135;
  sub_10000FA94(v104, v135, &qword_1000C69D0);
  uint64_t v109 = sub_100007830(&qword_1000C6A18);
  sub_10000FA94(v105, v108 + *(int *)(v109 + 48), &qword_1000C69C8);
  v107((char *)(v108 + *(int *)(v109 + 64)), v100, v101);
  long long v110 = *(void (**)(char *, uint64_t))(v102 + 8);
  v110(v103, v101);
  sub_10000FAF8(v106, &qword_1000C69C8);
  sub_10000FAF8((uint64_t)v136, &qword_1000C69D0);
  v110(v100, v101);
  sub_10000FAF8(v105, &qword_1000C69C8);
  return sub_10000FAF8((uint64_t)v137, &qword_1000C69D0);
}

uint64_t sub_1000779B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D2>)
{
  uint64_t v55 = a4;
  uint64_t v53 = a3;
  uint64_t v12 = sub_100007830(&qword_1000C6A40);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007830(&qword_1000C6A48);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = static Alignment.center.getter();
  sub_100071858(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v56, 0.0, 1, INFINITY, 0, v21, v22, a2);
  uint64_t v23 = v56[0];
  uint64_t v24 = v56[1];
  char v25 = v57;
  uint64_t v52 = v58;
  int v51 = v59;
  uint64_t v50 = v60;
  int v49 = v61;
  uint64_t v48 = v62;
  int v47 = v63;
  uint64_t v46 = v64;
  int v45 = v65;
  uint64_t v44 = v66;
  int v43 = v67;
  uint64_t v42 = v68;
  uint64_t v41 = v69;
  if (qword_1000C2E10 != -1) {
    swift_once();
  }
  *(void *)uint64_t v14 = qword_1000CB0A0;
  *((void *)v14 + 1) = 0;
  unsigned char v14[16] = 1;
  uint64_t v26 = sub_100007830(&qword_1000C6A50);
  sub_100077EA0(v54, v53, a1, v55, (uint64_t)&v14[*(int *)(v26 + 44)], a6, a7);
  char v27 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_10000FA94((uint64_t)v14, (uint64_t)v18, &qword_1000C6A40);
  uint64_t v36 = &v18[*(int *)(v15 + 36)];
  char *v36 = v27;
  *((void *)v36 + 1) = v29;
  *((void *)v36 + 2) = v31;
  *((void *)v36 + 3) = v33;
  *((void *)v36 + 4) = v35;
  v36[40] = 0;
  sub_10000FAF8((uint64_t)v14, &qword_1000C6A40);
  sub_10000F834((uint64_t)v18, (uint64_t)v20, &qword_1000C6A48);
  sub_10000FA94((uint64_t)v20, (uint64_t)v18, &qword_1000C6A48);
  *(void *)a5 = v23;
  *(void *)(a5 + 8) = v24;
  *(unsigned char *)(a5 + 16) = v25;
  *(void *)(a5 + 24) = v52;
  *(unsigned char *)(a5 + 32) = v51;
  *(void *)(a5 + 40) = v50;
  *(unsigned char *)(a5 + 48) = v49;
  *(void *)(a5 + 56) = v48;
  *(unsigned char *)(a5 + 64) = v47;
  *(void *)(a5 + 72) = v46;
  *(unsigned char *)(a5 + 80) = v45;
  *(void *)(a5 + 88) = v44;
  *(unsigned char *)(a5 + 96) = v43;
  uint64_t v37 = v41;
  *(void *)(a5 + 104) = v42;
  *(void *)(a5 + 112) = v37;
  uint64_t v38 = sub_100007830(&qword_1000C6A58);
  sub_10000FA94((uint64_t)v18, a5 + *(int *)(v38 + 48), &qword_1000C6A48);
  swift_retain();
  sub_10000FAF8((uint64_t)v20, &qword_1000C6A48);
  sub_10000FAF8((uint64_t)v18, &qword_1000C6A48);
  return swift_release();
}

uint64_t sub_100077DA4(uint64_t a1)
{
  uint64_t result = type metadata accessor for TimerSessionEntry(0);
  if (!*(unsigned char *)(a1 + *(int *)(result + 28)) && (*(unsigned char *)(a1 + *(int *)(result + 36) + 8) & 1) == 0)
  {
    type metadata accessor for LinearTimerTimelineCountdown();
    swift_retain();
    sub_100007830(&qword_1000C69D8);
    State.wrappedValue.getter();
    State.wrappedValue.setter();
    return swift_release();
  }
  return result;
}

uint64_t sub_100077E78()
{
  return ViewDimensions.subscript.getter();
}

uint64_t sub_100077EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D2>)
{
  uint64_t v14 = sub_100007830(&qword_1000C6A60);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100007830(&qword_1000C6A68);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = type metadata accessor for TimerSessionEntry(0);
  if (*(unsigned char *)(a1 + *(int *)(v23 + 28)))
  {
    double v24 = *(double *)(a1 + *(int *)(v23 + 44));
  }
  else
  {
    Date.timeIntervalSinceNow.getter();
    double v24 = v25;
  }
  *(void *)uint64_t v16 = static HorizontalAlignment.trailing.getter();
  *((void *)v16 + 1) = 0xC034000000000000;
  v16[16] = 0;
  uint64_t v26 = sub_100007830(&qword_1000C6A70);
  sub_10007810C(a1, a2, a3, a4, (uint64_t)&v16[*(int *)(v26 + 44)], a6, a7, v24);
  char v27 = static Edge.Set.bottom.getter();
  sub_10007869C(v24);
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_10000FA94((uint64_t)v16, (uint64_t)v20, &qword_1000C6A60);
  uint64_t v36 = &v20[*(int *)(v17 + 36)];
  char *v36 = v27;
  *((void *)v36 + 1) = v29;
  *((void *)v36 + 2) = v31;
  *((void *)v36 + 3) = v33;
  *((void *)v36 + 4) = v35;
  v36[40] = 0;
  sub_10000FAF8((uint64_t)v16, &qword_1000C6A60);
  sub_10000F834((uint64_t)v20, (uint64_t)v22, &qword_1000C6A68);
  sub_10000FA94((uint64_t)v22, (uint64_t)v20, &qword_1000C6A68);
  *(void *)a5 = 0;
  *(unsigned char *)(a5 + 8) = 1;
  uint64_t v37 = sub_100007830(&qword_1000C6A78);
  sub_10000FA94((uint64_t)v20, a5 + *(int *)(v37 + 48), &qword_1000C6A68);
  sub_10000FAF8((uint64_t)v22, &qword_1000C6A68);
  return sub_10000FAF8((uint64_t)v20, &qword_1000C6A68);
}

uint64_t sub_10007810C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  v49[0] = a1;
  v49[1] = a2;
  uint64_t v56 = a5;
  uint64_t v12 = sub_100007830(&qword_1000C6898);
  __chkstk_darwin(v12 - 8);
  uint64_t v50 = (uint64_t)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100007830(&qword_1000C6A80) - 8;
  __chkstk_darwin(v51);
  uint64_t v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100007830(&qword_1000C6A88);
  uint64_t v16 = __chkstk_darwin(v54);
  uint64_t v18 = (char *)v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v55 = (uint64_t)v49 - v19;
  uint64_t v20 = sub_100007830(&qword_1000C68C0);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100007830(&qword_1000C68C8);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100007830(&qword_1000C6A90);
  uint64_t v28 = v27 - 8;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)v49 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)v49 - v32;
  sub_100075064(a1);
  uint64_t v34 = static Alignment.trailing.getter();
  __n128 v36 = sub_10007165C(0.0, 1, 0.0, 1, a6 * 0.5 - a7, 0, 0.0, 1, (uint64_t)v26, 0.0, 1, 0.0, 1, v34, v35, &qword_1000C68C0, &qword_1000C68C8);
  (*(void (**)(char *, uint64_t, __n128))(v21 + 8))(v23, v20, v36);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FA94((uint64_t)v26, (uint64_t)v31, &qword_1000C68C8);
  uint64_t v38 = &v31[*(int *)(v28 + 44)];
  *(void *)uint64_t v38 = KeyPath;
  v38[8] = 2;
  sub_10000FAF8((uint64_t)v26, &qword_1000C68C8);
  sub_10000F834((uint64_t)v31, (uint64_t)v33, &qword_1000C6A90);
  uint64_t v39 = v49[0];
  sub_10007AB38(a8);
  swift_retain();
  uint64_t v40 = v50;
  sub_10007548C(v39, v53, v50);
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FA94(v40, (uint64_t)v15, &qword_1000C6898);
  uint64_t v41 = &v15[*(int *)(v51 + 44)];
  long long v42 = v58;
  *(_OWORD *)uint64_t v41 = v57;
  *((_OWORD *)v41 + 1) = v42;
  *((_OWORD *)v41 + 2) = v59;
  sub_10000FAF8(v40, &qword_1000C6898);
  if (qword_1000C2E10 != -1) {
    swift_once();
  }
  uint64_t v43 = qword_1000CB0A0;
  sub_10000FA94((uint64_t)v15, (uint64_t)v18, &qword_1000C6A80);
  uint64_t v44 = (uint64_t *)&v18[*(int *)(v54 + 36)];
  uint64_t *v44 = v43;
  v44[1] = (uint64_t)sub_100078674;
  v44[2] = 0;
  sub_10000FAF8((uint64_t)v15, &qword_1000C6A80);
  uint64_t v45 = v55;
  sub_10000F834((uint64_t)v18, v55, &qword_1000C6A88);
  sub_10000FA94((uint64_t)v33, (uint64_t)v31, &qword_1000C6A90);
  sub_10000FA94(v45, (uint64_t)v18, &qword_1000C6A88);
  uint64_t v46 = v56;
  sub_10000FA94((uint64_t)v31, v56, &qword_1000C6A90);
  uint64_t v47 = sub_100007830(&qword_1000C6A98);
  sub_10000FA94((uint64_t)v18, v46 + *(int *)(v47 + 48), &qword_1000C6A88);
  sub_10000FAF8(v45, &qword_1000C6A88);
  sub_10000FAF8((uint64_t)v33, &qword_1000C6A90);
  sub_10000FAF8((uint64_t)v18, &qword_1000C6A88);
  return sub_10000FAF8((uint64_t)v31, &qword_1000C6A90);
}

uint64_t sub_100078674()
{
  return ViewDimensions.subscript.getter();
}

double sub_10007869C(double a1)
{
  if (a1 >= 0.0 && a1 < 600.0)
  {
    if (qword_1000C2D80 != -1) {
      swift_once();
    }
    uint64_t v3 = &qword_1000CB010;
  }
  else if (a1 >= 600.0 && a1 < 3600.0)
  {
    if (qword_1000C2D88 != -1) {
      swift_once();
    }
    uint64_t v3 = &qword_1000CB018;
  }
  else if (a1 < 3600.0 || a1 >= 36000.0)
  {
    if (qword_1000C2D98 != -1) {
      swift_once();
    }
    uint64_t v3 = &qword_1000CB028;
  }
  else
  {
    if (qword_1000C2D90 != -1) {
      swift_once();
    }
    uint64_t v3 = &qword_1000CB020;
  }
  return *(double *)v3;
}

void sub_1000787F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v13 = *(unsigned __int8 *)(a1 + *(int *)(v10 + 28));
  sub_10007A744(a1, (uint64_t)v12, type metadata accessor for TimerSessionEntry);
  if (v13)
  {
    int v14 = v12[*(int *)(v9 + 28)];
    sub_10007A7F4((uint64_t)v12, type metadata accessor for TimerSessionEntry);
    if (v14 == 2) {
      goto LABEL_6;
    }
    long double v15 = *(double *)(a1 + *(int *)(v9 + 44));
    static Locale.current.getter();
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    id v17 = sub_100002608(0, 0, 1, 1, 0, 0, 0, (uint64_t)isa, v15);

    uint64_t v8 = v6;
    if (v17)
    {
LABEL_7:
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      return;
    }
    __break(1u);
  }
  sub_10007A7F4((uint64_t)v12, type metadata accessor for TimerSessionEntry);
LABEL_6:
  static Locale.current.getter();
  Date.timeIntervalSince(_:)();
  long double v19 = v18;
  Class v20 = Locale._bridgeToObjectiveC()().super.isa;
  id v17 = sub_100002608(0, 0, 1, 1, 0, 0, 0, (uint64_t)v20, v19);

  if (v17) {
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_100078A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 28)) == 2)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v4._uint64_t countAndFlagsBits = 0;
    v4._unint64_t object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v4);
    if (qword_1000C2DB8 != -1) {
      swift_once();
    }
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    v5._uint64_t countAndFlagsBits = 32;
    v5._unint64_t object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v5);
    LocalizedStringKey.init(stringInterpolation:)();
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
  }
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  static Color.secondary.getter();
  uint64_t v11 = Text.foregroundColor(_:)();
  uint64_t v36 = v12;
  char v14 = v13;
  swift_release();
  sub_10000C494(v6, v8, v10);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16) == 0x5F544E4552525543 && *(void *)(a1 + 24) == 0xED000052454D4954
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    id v15 = [self mainBundle];
    v39._unint64_t object = (void *)0x8000000100099CB0;
    v16._uint64_t countAndFlagsBits = 0x72656D6954;
    v16._unint64_t object = (void *)0xE500000000000000;
    v17._uint64_t countAndFlagsBits = 0;
    v17._unint64_t object = (void *)0xE000000000000000;
    v39._uint64_t countAndFlagsBits = 0xD000000000000013;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v39);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  char v35 = v14 & 1;
  sub_10000C92C();
  StringProtocol.localizedUppercase.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = Text.init<A>(_:)();
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  uint64_t v23 = Text.foregroundColor(_:)();
  uint64_t v25 = v24;
  char v27 = v26 & 1;
  sub_10000C494(v18, v20, v22);
  swift_bridgeObjectRelease();
  uint64_t v28 = static Text.+ infix(_:_:)();
  uint64_t v30 = v29;
  char v32 = v31;
  uint64_t v37 = v33;
  sub_10000C494(v23, v25, v27);
  swift_bridgeObjectRelease();
  sub_10000C494(v11, v36, v35);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v28;
  *(void *)(a2 + 8) = v30;
  *(unsigned char *)(a2 + 16) = v32 & 1;
  *(void *)(a2 + 24) = v37;
  return result;
}

uint64_t sub_100078E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v65 = sub_100007830(&qword_1000C6A20);
  __chkstk_darwin(v65);
  uint64_t v66 = (uint64_t)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for LinearTimerTimelineCountdown();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v74 = v6;
  uint64_t v75 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for BlendMode();
  uint64_t v76 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v77 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Material();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for MediumActionButton(0);
  uint64_t v11 = __chkstk_darwin(v72);
  uint64_t v69 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v14 = (char *)&v61 - v13;
  uint64_t v15 = sub_100007830(&qword_1000C6A28);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v67 = (uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v73 = (uint64_t)&v61 - v18;
  int v19 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 28));
  unsigned __int8 v63 = (void (*)(char *, char *, uint64_t))static Color.white.getter();
  uint64_t v68 = a1;
  if (v19)
  {
    if (qword_1000C2E18 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_10007A6F0(v8, (uint64_t)qword_1000CB0A8);
    char v21 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v71, v20, v8);
    uint64_t v23 = v76;
    char v22 = v77;
    uint64_t v64 = *(void (**)(char *, void, uint64_t))(v76 + 104);
    v64(v77, enum case for BlendMode.screen(_:), v78);
    uint64_t v24 = v8;
    uint64_t v25 = v9;
    uint64_t v26 = v75;
    sub_10007A744(a1, v75, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
    uint64_t v27 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = v26;
    uint64_t v9 = v25;
    uint64_t v8 = v24;
    sub_100079A20(v29, v28 + ((v27 + 16) & ~v27), (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
    *(void *)char v14 = 0x6C69662E79616C70;
    *((void *)v14 + 1) = 0xE90000000000006CLL;
    *((void *)v14 + 2) = v63;
    uint64_t v30 = (int *)v72;
    char v31 = &v14[*(int *)(v72 + 24)];
    unsigned __int8 v63 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v63(v31, v21, v8);
    char v32 = &v14[v30[7]];
    *(_OWORD *)char v32 = xmmword_1000985F0;
    *((_OWORD *)v32 + 1) = xmmword_100098600;
    *((_OWORD *)v32 + 2) = xmmword_100098610;
    *((_OWORD *)v32 + 3) = xmmword_100098620;
    *((_OWORD *)v32 + 4) = xmmword_100098630;
    uint64_t v33 = &v14[v30[8]];
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v62(v33, v22, v78);
    uint64_t v34 = (uint64_t (**)())&v14[v30[9]];
    *uint64_t v34 = sub_10007A72C;
    v34[1] = (uint64_t (*)())v28;
    sub_10007A744((uint64_t)v14, v66, type metadata accessor for MediumActionButton);
    swift_storeEnumTagMultiPayload();
    sub_10007A7AC(&qword_1000C6A30, (void (*)(uint64_t))type metadata accessor for MediumActionButton);
    _ConditionalContent<>.init(storage:)();
  }
  else
  {
    if (qword_1000C2E18 != -1) {
      swift_once();
    }
    uint64_t v35 = sub_10007A6F0(v8, (uint64_t)qword_1000CB0A8);
    uint64_t v36 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v71, v35, v8);
    uint64_t v37 = v76;
    uint64_t v38 = v78;
    uint64_t v64 = *(void (**)(char *, void, uint64_t))(v76 + 104);
    v64(v77, enum case for BlendMode.screen(_:), v78);
    uint64_t v39 = v75;
    sub_10007A744(a1, v75, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
    uint64_t v27 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v40 = swift_allocObject();
    sub_100079A20(v39, v40 + ((v27 + 16) & ~v27), (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
    *(void *)char v14 = 0x69662E6573756170;
    *((void *)v14 + 1) = 0xEA00000000006C6CLL;
    *((void *)v14 + 2) = v63;
    uint64_t v41 = (int *)v72;
    long long v42 = &v14[*(int *)(v72 + 24)];
    unsigned __int8 v63 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v63(v42, v36, v8);
    uint64_t v43 = &v14[v41[7]];
    *(_OWORD *)uint64_t v43 = xmmword_1000985F0;
    *((_OWORD *)v43 + 1) = xmmword_100098600;
    *((_OWORD *)v43 + 2) = xmmword_100098610;
    *((_OWORD *)v43 + 3) = xmmword_100098620;
    *((_OWORD *)v43 + 4) = xmmword_100098630;
    uint64_t v44 = &v14[v41[8]];
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v62(v44, v77, v38);
    uint64_t v45 = (uint64_t (**)())&v14[v41[9]];
    *uint64_t v45 = sub_10007AACC;
    v45[1] = (uint64_t (*)())v40;
    sub_10007A744((uint64_t)v14, v66, type metadata accessor for MediumActionButton);
    swift_storeEnumTagMultiPayload();
    sub_10007A7AC(&qword_1000C6A30, (void (*)(uint64_t))type metadata accessor for MediumActionButton);
    _ConditionalContent<>.init(storage:)();
  }
  sub_10007A7F4((uint64_t)v14, type metadata accessor for MediumActionButton);
  uint64_t v66 = static Color.white.getter();
  if (qword_1000C2E20 != -1) {
    swift_once();
  }
  uint64_t v46 = sub_10007A6F0(v8, (uint64_t)qword_1000CB0C0);
  uint64_t v47 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v71, v46, v8);
  uint64_t v48 = v77;
  uint64_t v49 = v78;
  v64(v77, enum case for BlendMode.sourceAtop(_:), v78);
  uint64_t v50 = v75;
  sub_10007A744(v68, v75, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  uint64_t v51 = swift_allocObject();
  sub_100079A20(v50, v51 + ((v27 + 16) & ~(unint64_t)v27), (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  *(void *)char v14 = 0x6B72616D78;
  *((void *)v14 + 1) = 0xE500000000000000;
  *((void *)v14 + 2) = v66;
  uint64_t v52 = (int *)v72;
  v63(&v14[*(int *)(v72 + 24)], v47, v8);
  uint64_t v53 = &v14[v52[7]];
  *(_OWORD *)uint64_t v53 = xmmword_100098640;
  *((_OWORD *)v53 + 1) = xmmword_100098650;
  *((_OWORD *)v53 + 2) = xmmword_100098660;
  *((_OWORD *)v53 + 3) = xmmword_100098670;
  *((_OWORD *)v53 + 4) = xmmword_100098630;
  v62(&v14[v52[8]], v48, v49);
  uint64_t v54 = (uint64_t (**)())&v14[v52[9]];
  CGFloat *v54 = sub_10007A858;
  v54[1] = (uint64_t (*)())v51;
  uint64_t v55 = v73;
  uint64_t v56 = v67;
  sub_10000FA94(v73, v67, &qword_1000C6A28);
  uint64_t v57 = v69;
  sub_10007A744((uint64_t)v14, v69, type metadata accessor for MediumActionButton);
  uint64_t v58 = v70;
  sub_10000FA94(v56, v70, &qword_1000C6A28);
  uint64_t v59 = sub_100007830(&qword_1000C6A38);
  sub_10007A744(v57, v58 + *(int *)(v59 + 48), type metadata accessor for MediumActionButton);
  sub_10007A7F4((uint64_t)v14, type metadata accessor for MediumActionButton);
  sub_10000FAF8(v55, &qword_1000C6A28);
  sub_10007A7F4(v57, type metadata accessor for MediumActionButton);
  return sub_10000FAF8(v56, &qword_1000C6A28);
}

uint64_t sub_1000798B0(void *a1, uint64_t (*a2)(void, void))
{
  uint64_t v4 = type metadata accessor for LinearTimerTimelineCountdown();
  sub_10000C4A4((void *)((char *)a1 + *(int *)(v4 + 24)), *(void *)((char *)a1 + *(int *)(v4 + 24) + 24));
  return a2(*a1, a1[1]);
}

uint64_t sub_100079900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  sub_10007A744(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_100079A20((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, (uint64_t (*)(void))type metadata accessor for LinearTimerTimelineCountdown);
  *(void *)a2 = sub_100079A88;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

uint64_t sub_100079A20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100079A88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for LinearTimerTimelineCountdown() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000737B4(v4, a1);
}

unint64_t sub_100079B08()
{
  unint64_t result = qword_1000C6838;
  if (!qword_1000C6838)
  {
    sub_10000C61C(&qword_1000C6818);
    sub_10000FD6C(&qword_1000C6840, &qword_1000C6810);
    sub_10000FD6C(&qword_1000C6848, &qword_1000C6850);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6838);
  }
  return result;
}

unint64_t sub_100079BCC()
{
  unint64_t result = qword_1000C6858;
  if (!qword_1000C6858)
  {
    sub_10000C61C(&qword_1000C67F0);
    sub_10000FD6C(&qword_1000C6860, &qword_1000C67E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6858);
  }
  return result;
}

void *sub_100079C6C(void *a1)
{
  uint64_t v2 = a1[21];
  uint64_t v4 = a1[23];
  uint64_t v5 = a1[45];
  uint64_t v6 = a1[47];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000E6C4(v2);
  sub_10000E6C4(v4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000E6C4(v5);
  sub_10000E6C4(v6);
  return a1;
}

void *sub_100079D94(void *a1)
{
  uint64_t v2 = a1[21];
  uint64_t v4 = a1[23];
  uint64_t v5 = a1[45];
  uint64_t v6 = a1[47];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000E8EC(v2);
  sub_10000E8EC(v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000E8EC(v5);
  sub_10000E8EC(v6);
  return a1;
}

uint64_t sub_100079EBC()
{
  return sub_100079F80((uint64_t (*)(void, void))sub_100053D94);
}

uint64_t sub_100079ED8()
{
  return sub_100079EF0((uint64_t (*)(uint64_t))sub_1000767D8);
}

uint64_t sub_100079EF0(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for LinearTimerTimelineCountdown() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_100079F68()
{
  return sub_100079F80((uint64_t (*)(void, void))sub_100053A0C);
}

uint64_t sub_100079F80(uint64_t (*a1)(void, void))
{
  uint64_t v3 = *(void *)(type metadata accessor for LinearTimerTimelineCountdown() - 8);
  return sub_1000798B0((void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))), a1);
}

uint64_t sub_100079FE8()
{
  return sub_100079EF0((uint64_t (*)(uint64_t))sub_1000769F8);
}

uint64_t sub_10007A000()
{
  return sub_100076B30();
}

uint64_t sub_10007A01C()
{
  return sub_100076BA4();
}

uint64_t sub_10007A038()
{
  return sub_100076910();
}

uint64_t sub_10007A054()
{
  return sub_100076984();
}

uint64_t sub_10007A074()
{
  return sub_100079EF0((uint64_t (*)(uint64_t))sub_10007526C);
}

unint64_t sub_10007A08C()
{
  unint64_t result = qword_1000C6908;
  if (!qword_1000C6908)
  {
    sub_10000C61C(&qword_1000C68E8);
    sub_10007A5D4(&qword_1000C6910, &qword_1000C68E0, (void (*)(void))sub_10007A158);
    sub_10000FD6C(&qword_1000C34E8, &qword_1000C34F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6908);
  }
  return result;
}

uint64_t sub_10007A158()
{
  return sub_10007A5D4(&qword_1000C6918, &qword_1000C68D8, (void (*)(void))sub_10007A188);
}

uint64_t sub_10007A188()
{
  return sub_10007A5D4(&qword_1000C6920, &qword_1000C68D0, (void (*)(void))sub_10007A1B8);
}

unint64_t sub_10007A1B8()
{
  unint64_t result = qword_1000C6928;
  if (!qword_1000C6928)
  {
    sub_10000C61C(&qword_1000C68C8);
    sub_10000C61C(&qword_1000C6930);
    sub_10007A268();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6928);
  }
  return result;
}

unint64_t sub_10007A268()
{
  unint64_t result = qword_1000C6938;
  if (!qword_1000C6938)
  {
    sub_10000C61C(&qword_1000C6930);
    sub_10007A308();
    sub_10000FD6C(&qword_1000C31C8, &qword_1000C31D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6938);
  }
  return result;
}

unint64_t sub_10007A308()
{
  unint64_t result = qword_1000C6940;
  if (!qword_1000C6940)
  {
    sub_10000C61C(&qword_1000C6948);
    sub_10007A5D4(&qword_1000C6950, &qword_1000C6958, (void (*)(void))sub_10007A3D4);
    sub_10000FD6C(&qword_1000C34A8, &qword_1000C34B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6940);
  }
  return result;
}

unint64_t sub_10007A3D4()
{
  unint64_t result = qword_1000C6960;
  if (!qword_1000C6960)
  {
    sub_10000C61C(&qword_1000C6968);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6960);
  }
  return result;
}

uint64_t sub_10007A444()
{
  return sub_100079EF0((uint64_t (*)(uint64_t))sub_100075C28);
}

uint64_t sub_10007A45C()
{
  return sub_100075D60();
}

uint64_t sub_10007A478()
{
  return sub_100075DD4();
}

uint64_t sub_10007A4B4()
{
  return sub_1000753A4();
}

uint64_t sub_10007A4D0()
{
  return sub_100075418();
}

uint64_t sub_10007A4F8()
{
  uint64_t v1 = *(void *)(type metadata accessor for LinearTimerTimelineCountdown() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100077DA4(v2);
}

uint64_t sub_10007A570()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007A5A8(double *a1)
{
  return (*(uint64_t (**)(double, double))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_10007A5D4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000C61C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10007A650()
{
  unint64_t result = qword_1000C6A08;
  if (!qword_1000C6A08)
  {
    sub_10000C61C(&qword_1000C69A8);
    sub_10000FD6C(&qword_1000C6A10, &qword_1000C69A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6A08);
  }
  return result;
}

uint64_t sub_10007A6F0(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10007A72C()
{
  return sub_100079F80((uint64_t (*)(void, void))sub_100053354);
}

uint64_t sub_10007A744(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007A7AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007A7F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10007A858()
{
  return sub_100079F80((uint64_t (*)(void, void))sub_1000536B0);
}

uint64_t sub_10007A874()
{
  uint64_t v1 = (int *)type metadata accessor for LinearTimerTimelineCountdown();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 24);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  sub_100004678(v0 + v3 + v1[5]);
  sub_100004678(v0 + v3 + v1[6]);
  uint64_t v7 = v0 + v3 + v1[7];
  sub_100007830(&qword_1000C3220);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for Font.Context();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10007AACC()
{
  return sub_100079F80((uint64_t (*)(void, void))sub_100052FF0);
}

uint64_t sub_10007AAE4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10007AB10()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_10007AB38(double a1)
{
  if (a1 >= 0.0 && a1 < 600.0)
  {
    if (qword_1000C2D78 != -1) {
      swift_once();
    }
    uint64_t v3 = &qword_1000CB008;
  }
  else if (a1 >= 600.0 && a1 < 3600.0)
  {
    if (qword_1000C2D70 != -1) {
      swift_once();
    }
    uint64_t v3 = &qword_1000CB000;
  }
  else if (a1 < 3600.0 || a1 >= 36000.0)
  {
    if (qword_1000C2D60 != -1) {
      swift_once();
    }
    uint64_t v3 = &qword_1000CAFF0;
  }
  else
  {
    if (qword_1000C2D68 != -1) {
      swift_once();
    }
    uint64_t v3 = &qword_1000CAFF8;
  }
  return *v3;
}

unint64_t sub_10007AC94()
{
  unint64_t result = qword_1000C6AA0;
  if (!qword_1000C6AA0)
  {
    sub_10000C61C(&qword_1000C6AA8);
    sub_10000FD6C(&qword_1000C6AB0, &qword_1000C6AB8);
    sub_10000FBF8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6AA0);
  }
  return result;
}

void sub_10007B2A0()
{
  uint64_t v1 = v0;
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for TimerApertureElementController(0);
  [super viewDidLoad];
  if (*(void *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8])
  {
    uint64_t v2 = qword_1000C2C70;
    swift_bridgeObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    sub_100086B80((unint64_t *)&unk_1000C6E50, (void (*)(uint64_t))type metadata accessor for TimerApertureElementController);
    AnyHashable.init<A>(_:)();
    dispatch thunk of DataStore.registerObserver(_:for:)();
    sub_10001EC9C((uint64_t)&v10);
  }
  uint64_t v3 = self;
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  id v4 = [v1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();

  uint64_t v10 = v5;
  unint64_t v11 = v7;
  v8._unint64_t object = (void *)0x800000010009CEB0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v8);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 logInfo:v9];

  sub_10007CF80();
  sub_10007F9F4();
}

char *sub_10007B4C0(uint64_t a1, uint64_t a2, int a3)
{
  int v63 = a3;
  uint64_t v6 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v6 - 8);
  Swift::String v8 = &v62[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  objc_super v12 = &v62[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_observerId];
  char v14 = v3;
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  *uint64_t v13 = v15;
  v13[1] = v17;
  uint64_t v18 = &v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_presentationBehaviors] = 9;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_contentRole] = 2;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_preferredLayoutMode] = 3;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_maximumLayoutMode] = 4;
  id v19 = [self mtURLForSection:4];
  if (v19)
  {
    uint64_t v20 = v19;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = type metadata accessor for URL();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 0, 1, v21);
  }
  else
  {
    uint64_t v22 = type metadata accessor for URL();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
  }
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  sub_10000F834((uint64_t)v8, (uint64_t)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_launchURL], (uint64_t *)&unk_1000C3FF0);
  uint64_t v23 = &v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_associatedAppBundleIdentifier];
  *(void *)uint64_t v23 = 0xD000000000000015;
  *((void *)v23 + 1) = 0x800000010009A860;
  uint64_t v24 = &v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_timerObserverIdentifier];
  *(void *)uint64_t v24 = 0xD00000000000001ELL;
  *((void *)v24 + 1) = 0x8000000100098850;
  uint64_t v25 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  uint64_t v26 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView;
  type metadata accessor for TimerApertureAccessoryView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v28 = objc_allocWithZone(ObjCClassFromMetadata);
  id v29 = v25;
  *(void *)&v14[v26] = [v28 init];
  uint64_t v30 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView;
  *(void *)&v14[v30] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v31 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView;
  *(void *)&v14[v31] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v32 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_keyColor;
  *(void *)&v14[v32] = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.622 blue:0.044 alpha:1.0];
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingOffset] = 0x401C000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingPadding] = 0x4030000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_verticalPadding] = 0x4031000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_interButtonPadding] = 0x4024000000000000;
  uint64_t v33 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_buttonSize;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  *(void *)&v14[v33] = qword_1000CAF50;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelBottomPadding] = 0x4035000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelToCountdownPadding] = 0x4014000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButtonToLabelPadding] = 0x4028000000000000;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer] = 0;
  uint64_t v34 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation;
  type metadata accessor for TimerAnimationCountdown(0);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  uint64_t v36 = v35 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  uint64_t v37 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
  v38(v36, 1, 1, v37);
  uint64_t v39 = (void *)(v35 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  void *v39 = 0;
  v39[1] = 0xE000000000000000;
  *(void *)&v14[v34] = v35;
  uint64_t v40 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation;
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = 0u;
  *(_OWORD *)(v41 + 32) = 0u;
  v38(v41 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, 1, 1, v37);
  long long v42 = (void *)(v41 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  void *v42 = 0;
  v42[1] = 0xE000000000000000;
  *(void *)&v14[v40] = v41;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton] = 0;
  *(void *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton] = 0;

  uint64_t v43 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v70.receiver = v14;
  v70.super_class = v43;
  uint64_t v44 = (char *)[super init];
  uint64_t v45 = &v44[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  uint64_t v47 = v64;
  uint64_t v46 = v65;
  *(void *)uint64_t v45 = v64;
  *((void *)v45 + 1) = v46;
  uint64_t v48 = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v63)
  {
    *(void *)&v48[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_presentationBehaviors] = 2;
    uint64_t v49 = (void *)0xE400000000000000;
    uint64_t v50 = 1702195828;
  }
  else
  {
    uint64_t v50 = 0x65736C6166;
    uint64_t v49 = (void *)0xE500000000000000;
  }
  uint64_t v68 = 0;
  unint64_t v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  id v51 = [v48 description];
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v54 = v53;

  v55._uint64_t countAndFlagsBits = v52;
  v55._unint64_t object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._unint64_t object = (void *)0x800000010009AE10;
  v56._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v56);
  uint64_t v66 = v47;
  uint64_t v67 = v46;
  sub_100007830(&qword_1000C3750);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRelease();
  v57._uint64_t countAndFlagsBits = 0x656C6120726F6620;
  v57._unint64_t object = (void *)0xEC000000203A7472;
  String.append(_:)(v57);
  uint64_t v58 = self;
  v59._uint64_t countAndFlagsBits = v50;
  v59._unint64_t object = v49;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  NSString v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v58 logInfo:v60];

  return v48;
}

id sub_10007BC14(void *a1)
{
  uint64_t v44 = a1;
  uint64_t v2 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_observerId];
  uint64_t v10 = v1;
  UUID.init()();
  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *uint64_t v9 = v11;
  v9[1] = v13;
  char v14 = &v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  *(void *)char v14 = 0;
  *((void *)v14 + 1) = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_presentationBehaviors] = 9;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_contentRole] = 2;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_preferredLayoutMode] = 3;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_maximumLayoutMode] = 4;
  id v15 = [self mtURLForSection:4];
  if (v15)
  {
    uint64_t v16 = v15;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 0, 1, v17);
  }
  else
  {
    uint64_t v18 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 1, 1, v18);
  }
  sub_10000F834((uint64_t)v4, (uint64_t)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_launchURL], (uint64_t *)&unk_1000C3FF0);
  id v19 = &v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_associatedAppBundleIdentifier];
  *(void *)id v19 = 0xD000000000000015;
  *((void *)v19 + 1) = 0x800000010009A860;
  uint64_t v20 = &v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_timerObserverIdentifier];
  *(void *)uint64_t v20 = 0xD00000000000001ELL;
  *((void *)v20 + 1) = 0x8000000100098850;
  uint64_t v21 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  uint64_t v22 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView;
  type metadata accessor for TimerApertureAccessoryView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v24 = objc_allocWithZone(ObjCClassFromMetadata);
  id v25 = v21;
  *(void *)&v10[v22] = [v24 init];
  uint64_t v26 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView;
  *(void *)&v10[v26] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v27 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView;
  *(void *)&v10[v27] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v28 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_keyColor;
  *(void *)&v10[v28] = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.622 blue:0.044 alpha:1.0];
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingOffset] = 0x401C000000000000;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingPadding] = 0x4030000000000000;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_verticalPadding] = 0x4031000000000000;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_interButtonPadding] = 0x4024000000000000;
  uint64_t v29 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_buttonSize;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  *(void *)&v10[v29] = qword_1000CAF50;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelBottomPadding] = 0x4035000000000000;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelToCountdownPadding] = 0x4014000000000000;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButtonToLabelPadding] = 0x4028000000000000;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer] = 0;
  uint64_t v30 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation;
  type metadata accessor for TimerAnimationCountdown(0);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  uint64_t v32 = v31 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  uint64_t v33 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
  v34(v32, 1, 1, v33);
  uint64_t v35 = (void *)(v31 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  void *v35 = 0;
  v35[1] = 0xE000000000000000;
  *(void *)&v10[v30] = v31;
  uint64_t v36 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation;
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = 0u;
  *(_OWORD *)(v37 + 32) = 0u;
  v34(v37 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, 1, 1, v33);
  uint64_t v38 = (void *)(v37 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  void *v38 = 0;
  v38[1] = 0xE000000000000000;
  *(void *)&v10[v36] = v37;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton] = 0;

  uint64_t v39 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v45.receiver = v10;
  v45.super_class = v39;
  uint64_t v40 = v44;
  id v41 = [super initWithCoder:v44];

  return v41;
}

id sub_10007C204(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v49 = a3;
  v47[1] = a1;
  uint64_t v5 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_observerId];
  uint64_t v13 = v3;
  UUID.init()();
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *uint64_t v12 = v14;
  v12[1] = v16;
  uint64_t v17 = &v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_presentationBehaviors] = 9;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_contentRole] = 2;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_preferredLayoutMode] = 3;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_maximumLayoutMode] = 4;
  id v18 = [self mtURLForSection:4];
  if (v18)
  {
    id v19 = v18;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 0, 1, v20);
  }
  else
  {
    uint64_t v21 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 1, 1, v21);
  }
  uint64_t v48 = a2;
  sub_10000F834((uint64_t)v7, (uint64_t)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_launchURL], (uint64_t *)&unk_1000C3FF0);
  uint64_t v22 = &v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_associatedAppBundleIdentifier];
  *(void *)uint64_t v22 = 0xD000000000000015;
  *((void *)v22 + 1) = 0x800000010009A860;
  uint64_t v23 = &v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_timerObserverIdentifier];
  *(void *)uint64_t v23 = 0xD00000000000001ELL;
  *((void *)v23 + 1) = 0x8000000100098850;
  id v24 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  uint64_t v25 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView;
  type metadata accessor for TimerApertureAccessoryView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v27 = objc_allocWithZone(ObjCClassFromMetadata);
  id v28 = v24;
  *(void *)&v13[v25] = [v27 init];
  uint64_t v29 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView;
  *(void *)&v13[v29] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v30 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView;
  *(void *)&v13[v30] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v31 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_keyColor;
  *(void *)&v13[v31] = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.622 blue:0.044 alpha:1.0];
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingOffset] = 0x401C000000000000;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingPadding] = 0x4030000000000000;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_verticalPadding] = 0x4031000000000000;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_interButtonPadding] = 0x4024000000000000;
  uint64_t v32 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_buttonSize;
  if (qword_1000C2CC0 != -1) {
    swift_once();
  }
  *(void *)&v13[v32] = qword_1000CAF50;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelBottomPadding] = 0x4035000000000000;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelToCountdownPadding] = 0x4014000000000000;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButtonToLabelPadding] = 0x4028000000000000;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer] = 0;
  uint64_t v33 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation;
  type metadata accessor for TimerAnimationCountdown(0);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = 0u;
  *(_OWORD *)(v34 + 32) = 0u;
  uint64_t v35 = v34 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  uint64_t v36 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56);
  v37(v35, 1, 1, v36);
  uint64_t v38 = (void *)(v34 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  void *v38 = 0;
  v38[1] = 0xE000000000000000;
  *(void *)&v13[v33] = v34;
  uint64_t v39 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation;
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = 0u;
  *(_OWORD *)(v40 + 32) = 0u;
  v37(v40 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, 1, 1, v36);
  id v41 = (void *)(v40 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  void *v41 = 0;
  v41[1] = 0xE000000000000000;
  *(void *)&v13[v39] = v40;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton] = 0;

  if (v48)
  {
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v42 = 0;
  }
  uint64_t v43 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v50.receiver = v13;
  v50.super_class = v43;
  uint64_t v44 = v49;
  [super initWithNibName:v42 bundle:v49];

  return v45;
}

id sub_10007C868()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  _StringGuts.grow(_:)(40);
  id v3 = [v0 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();

  v13[0] = v4;
  v13[1] = v6;
  v7._unint64_t object = (void *)0x800000010009CEE0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 logInfo:v8];

  if (*(void *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8])
  {
    uint64_t v9 = qword_1000C2C70;
    swift_bridgeObjectRetain();
    if (v9 != -1) {
      swift_once();
    }
    sub_100086B80((unint64_t *)&unk_1000C6E50, (void (*)(uint64_t))type metadata accessor for TimerApertureElementController);
    id v10 = v1;
    AnyHashable.init<A>(_:)();
    dispatch thunk of DataStore.deregisterObserver(_:for:)();

    sub_10001EC9C((uint64_t)v13);
  }
  uint64_t v11 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v14.receiver = v1;
  v14.super_class = v11;
  return [super dealloc];
}

uint64_t sub_10007CBFC()
{
  return type metadata accessor for TimerApertureElementController(0);
}

uint64_t type metadata accessor for TimerApertureElementController(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C6BE0);
}

uint64_t sub_10007CC24(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (void *)((char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v26.receiver = v2;
  v26.super_class = v11;
  [super viewWillAppear:a1 & 1];
  uint64_t v12 = self;
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  id v13 = [v2 description];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();

  uint64_t v24 = v14;
  unint64_t v25 = v16;
  v17._unint64_t object = (void *)0x800000010009CE90;
  v17._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 logInfo:v18];

  uint64_t v19 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (v19)
  {
    uint64_t v20 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
    uint64_t v21 = qword_1000C2C70;
    swift_bridgeObjectRetain();
    if (v21 != -1) {
      swift_once();
    }
    v23[1] = v20;
    void v23[2] = v19;
    AnyHashable.init<A>(_:)();
    dispatch thunk of DataStore.getEntry(for:)();
    sub_10001EC9C((uint64_t)&v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      sub_100086D64((uint64_t)v6, (uint64_t)v10, type metadata accessor for TimerSessionEntry);
      sub_10007D7BC(v10);
      return sub_100086E34((uint64_t)v10, type metadata accessor for TimerSessionEntry);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  return sub_10000FAF8((uint64_t)v6, &qword_1000C5390);
}

void sub_10007CF80()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v66 - v7;
  __chkstk_darwin(v6);
  id v10 = (char *)&v66 - v9;
  uint64_t v11 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v15 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView];
  if (v15)
  {
    uint64_t v70 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v71 = v14;
    NSString v72 = (NSString)v12;
    type metadata accessor for TimerApertureElementController(0);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v17 = [self bundleForClass:ObjCClassFromMetadata];
    NSString v18 = String._bridgeToObjectiveC()();
    NSString v19 = String._bridgeToObjectiveC()();
    NSString v20 = [v17 localizedStringForKey:v18 value:0 table:v19];

    if (!v20)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v15 setAccessibilityLabel:v20];

    id v21 = v15;
    id v22 = [v1 view];
    if (v22)
    {
      uint64_t v23 = v22;
      [v22 addSubview:v21];

      uint64_t v24 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
      id v25 = sub_100085090(2u);
      if (v25)
      {
        objc_super v26 = v25;
        uint64_t v67 = v24;
        uint64_t v68 = v8;
        unint64_t v69 = v5;
        id v27 = self;
        uint64_t v75 = 0;
        unint64_t v76 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        id v28 = [v1 description];
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;
        swift_bridgeObjectRelease();

        uint64_t v75 = v29;
        unint64_t v76 = v31;
        v32._unint64_t object = (void *)0x800000010009ADC0;
        v32._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
        String.append(_:)(v32);
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v27 logInfo:v33];

        [v21 addSubview:v26];
        [v26 setTranslatesAutoresizingMaskIntoConstraints:0];
        uint64_t v34 = self;
        sub_100007830((uint64_t *)&unk_1000C66F0);
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_100095580;
        id v36 = [v26 leadingAnchor];
        id v37 = [v21 leadingAnchor];
        id v38 = [v36 constraintEqualToAnchor:v37 constant:-2.0];

        *(void *)(v35 + 32) = v38;
        id v39 = [v26 trailingAnchor];
        id v40 = [v21 trailingAnchor];
        id v41 = [v39 constraintEqualToAnchor:v40];

        *(void *)(v35 + 40) = v41;
        id v42 = [v26 topAnchor];
        id v43 = [v21 topAnchor];
        id v44 = [v42 constraintEqualToAnchor:v43];

        *(void *)(v35 + 48) = v44;
        id v45 = [v26 bottomAnchor];
        id v46 = [v21 bottomAnchor];
        id v47 = [v45 constraintEqualToAnchor:v46];

        *(void *)(v35 + 56) = v47;
        uint64_t v75 = v35;
        specialized Array._endMutation()();
        sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v34 activateConstraints:isa];

        uint64_t v49 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
        if (v49)
        {
          uint64_t v50 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
          uint64_t v51 = qword_1000C2C70;
          swift_bridgeObjectRetain();
          uint64_t v52 = (uint64_t)v68;
          uint64_t v54 = v71;
          NSString v53 = v72;
          if (v51 != -1) {
            swift_once();
          }
          uint64_t v73 = v50;
          uint64_t v74 = v49;
          AnyHashable.init<A>(_:)();
          dispatch thunk of DataStore.getEntry(for:)();
          sub_10001EC9C((uint64_t)&v75);
        }
        else
        {
          uint64_t v54 = v71;
          NSString v53 = v72;
          (*(void (**)(char *, uint64_t, uint64_t, NSString))(v71 + 56))(v10, 1, 1, v72);

          uint64_t v52 = (uint64_t)v68;
        }
        int v62 = (*(uint64_t (**)(char *, uint64_t, NSString))(v54 + 48))(v10, 1, v53);
        uint64_t v63 = (uint64_t)v69;
        if (v62 == 1)
        {
          sub_10000FAF8((uint64_t)v10, &qword_1000C5390);
        }
        else
        {
          uint64_t v64 = v70;
          sub_100086D64((uint64_t)v10, v70, type metadata accessor for TimerSessionEntry);
          sub_100086D64(v64, v52, type metadata accessor for TimerSessionEntry);
          (*(void (**)(uint64_t, void, uint64_t, NSString))(v54 + 56))(v52, 0, 1, v53);
          sub_10000F834(v52, v63, &qword_1000C5390);
          uint64_t v65 = v67 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
          swift_beginAccess();
          sub_10001EFF4(v63, v65, &qword_1000C5390);
          swift_endAccess();
        }
      }
      else
      {
        Swift::String v55 = self;
        uint64_t v75 = 0;
        unint64_t v76 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        id v56 = [v1 description];
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v59 = v58;
        swift_bridgeObjectRelease();

        uint64_t v75 = v57;
        unint64_t v76 = v59;
        v60._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
        v60._unint64_t object = (void *)0x800000010009CDD0;
        String.append(_:)(v60);
        NSString v72 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v55 logInfo:v72];

        uint64_t v61 = v72;
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10007D7BC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = self;
  _StringGuts.grow(_:)(49);
  id v5 = [v1 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._unint64_t object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v10._unint64_t object = (void *)0x800000010009CD70;
  String.append(_:)(v10);
  uint64_t v11 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost;
  sub_100007830(&qword_1000C6E38);
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = 0x646573756170202CLL;
  v12._unint64_t object = (void *)0xEF203A74736F6820;
  String.append(_:)(v12);
  uint64_t v13 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost;
  sub_100007830((uint64_t *)&unk_1000C6E40);
  _print_unlocked<A, B>(_:_:)();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 logInfo:v14];

  int v15 = *((unsigned __int8 *)a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 28));
  if (v15 == 1)
  {
    if (!*(void *)&v2[v11]) {
      goto LABEL_11;
    }
    _StringGuts.grow(_:)(24);
    id v16 = [v2 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v17._uint64_t countAndFlagsBits = 0xD000000000000016;
    v17._unint64_t object = (void *)0x800000010009CDB0;
    String.append(_:)(v17);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 logInfo:v18];

    NSString v19 = *(void **)&v2[v11];
    if (v19)
    {
      id v20 = [v19 view];
      if (v20)
      {
        id v21 = v20;
        id v22 = [v20 superview];

        if (v22)
        {

          uint64_t v23 = *(void **)&v2[v11];
          if (!v23)
          {
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          id v24 = [v23 view];
          if (!v24)
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
          id v25 = v24;
          [v24 removeFromSuperview];
        }
        objc_super v26 = *(void **)&v2[v11];
        if (v26)
        {
          [v26 removeFromParentViewController];
LABEL_11:
          sub_10007F174();
          sub_10007DC88((uint64_t)a1);
          if (*(void *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] != 4) {
            return;
          }
          goto LABEL_25;
        }
        goto LABEL_29;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (*(void *)&v2[v13])
  {
    _StringGuts.grow(_:)(23);
    id v27 = [v2 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v28._unint64_t object = (void *)0x800000010009CD90;
    v28._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v28);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 logInfo:v29];

    unint64_t v30 = *(void **)&v2[v13];
    if (!v30)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    id v31 = [v30 view];
    if (!v31)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    Swift::String v32 = v31;
    id v33 = [v31 superview];

    if (v33)
    {

      uint64_t v34 = *(void **)&v2[v13];
      if (!v34)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      id v35 = [v34 view];
      if (!v35)
      {
LABEL_36:
        __break(1u);
        return;
      }
      id v36 = v35;
      [v35 removeFromSuperview];
    }
    id v37 = *(void **)&v2[v13];
    if (!v37) {
      goto LABEL_32;
    }
    [v37 removeFromParentViewController];
  }
  sub_10007E5A8((uint64_t)a1);
  sub_10007E118((uint64_t)a1);
  if (*(void *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] != 4) {
    return;
  }
  if (v15 == 2)
  {
    sub_100081C30(a1);
    return;
  }
LABEL_25:
  sub_1000811F8((uint64_t)a1);
}

void sub_10007DC88(uint64_t a1)
{
  uint64_t v3 = sub_100007830(&qword_1000C5390);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
  sub_100086DCC(a1, (uint64_t)&v43 - v7, type metadata accessor for TimerSessionEntry);
  uint64_t v10 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v11 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v8, 0, 1, v10);
  sub_10000F834((uint64_t)v8, (uint64_t)v6, &qword_1000C5390);
  uint64_t v43 = v9;
  uint64_t v12 = v9 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess();
  sub_10001EFF4((uint64_t)v6, v12, &qword_1000C5390);
  swift_endAccess();
  uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
  sub_100086DCC(a1, (uint64_t)v8, type metadata accessor for TimerSessionEntry);
  v11(v8, 0, 1, v10);
  sub_10000F834((uint64_t)v8, (uint64_t)v6, &qword_1000C5390);
  uint64_t v14 = v13 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess();
  sub_10001EFF4((uint64_t)v6, v14, &qword_1000C5390);
  swift_endAccess();
  uint64_t v15 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode];
  if (v15 == 3)
  {
    uint64_t v23 = self;
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    id v24 = [v1 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();

    uint64_t v44 = v25;
    unint64_t v45 = v27;
    v28._unint64_t object = (void *)0x800000010009CD10;
    v28._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v28);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v23 logInfo:v29];

    sub_100085CD4();
  }
  else if (v15 == 2)
  {
    id v16 = self;
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    id v17 = [v1 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();

    uint64_t v44 = v18;
    unint64_t v45 = v20;
    v21._unint64_t object = (void *)0x800000010009CD40;
    v21._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 logInfo:v22];

    sub_100085CD4();
  }
  else
  {
    unint64_t v30 = self;
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    id v31 = [v1 description];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    v35._uint64_t countAndFlagsBits = v32;
    v35._unint64_t object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 0xD000000000000036;
    v36._unint64_t object = (void *)0x800000010009CCD0;
    String.append(_:)(v36);
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v30 logInfo:v37];

    uint64_t v38 = v43;
    id v39 = *(void **)(v43 + 40);
    if (v39)
    {
      [v39 invalidate];
      id v40 = *(void **)(v38 + 40);
      *(void *)(v38 + 40) = 0;
    }
    id v41 = *(void **)(v13 + 40);
    if (v41)
    {
      [v41 invalidate];
      id v42 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = 0;
    }
  }
}

void sub_10007E118(uint64_t a1)
{
  uint64_t v3 = sub_100007830(&qword_1000C5390);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
  sub_100086DCC(a1, (uint64_t)&v43 - v7, type metadata accessor for TimerSessionEntry);
  uint64_t v10 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v11 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v8, 0, 1, v10);
  sub_10000F834((uint64_t)v8, (uint64_t)v6, &qword_1000C5390);
  uint64_t v43 = v9;
  uint64_t v12 = v9 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess();
  sub_10001EFF4((uint64_t)v6, v12, &qword_1000C5390);
  swift_endAccess();
  uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
  sub_100086DCC(a1, (uint64_t)v8, type metadata accessor for TimerSessionEntry);
  v11(v8, 0, 1, v10);
  sub_10000F834((uint64_t)v8, (uint64_t)v6, &qword_1000C5390);
  uint64_t v14 = v13 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess();
  sub_10001EFF4((uint64_t)v6, v14, &qword_1000C5390);
  swift_endAccess();
  uint64_t v15 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode];
  if (v15 == 3)
  {
    uint64_t v23 = self;
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    id v24 = [v1 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();

    uint64_t v44 = v25;
    unint64_t v45 = v27;
    v28._unint64_t object = (void *)0x800000010009CC70;
    v28._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v28);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v23 logInfo:v29];

    sub_1000855F0();
  }
  else if (v15 == 2)
  {
    id v16 = self;
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    id v17 = [v1 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();

    uint64_t v44 = v18;
    unint64_t v45 = v20;
    v21._unint64_t object = (void *)0x800000010009CCA0;
    v21._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 logInfo:v22];

    sub_1000855F0();
  }
  else
  {
    unint64_t v30 = self;
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    id v31 = [v1 description];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    v35._uint64_t countAndFlagsBits = v32;
    v35._unint64_t object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 0xD000000000000038;
    v36._unint64_t object = (void *)0x800000010009CC30;
    String.append(_:)(v36);
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v30 logInfo:v37];

    uint64_t v38 = v43;
    id v39 = *(void **)(v43 + 40);
    if (v39)
    {
      [v39 invalidate];
      id v40 = *(void **)(v38 + 40);
      *(void *)(v38 + 40) = 0;
    }
    id v41 = *(void **)(v13 + 40);
    if (v41)
    {
      [v41 invalidate];
      id v42 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = 0;
    }
  }
}

void sub_10007E5A8(uint64_t a1)
{
  uint64_t v108 = a1;
  uint64_t v2 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v107 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v109 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TimerRunningCompressedTrailingView(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v101 - v11;
  uint64_t v13 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost;
  uint64_t v14 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost];
  if (v14)
  {
    id v15 = [v14 parentViewController];
    if (v15)
    {

      return;
    }
  }
  uint64_t v102 = v3;
  uint64_t v103 = v4;
  uint64_t v104 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v110 = (char *)self;
  long long aBlock = 0;
  unint64_t v112 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  id v16 = [v1 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v106 = v7;
  uint64_t v18 = v13;
  uint64_t v19 = v2;
  uint64_t v20 = v5;
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();

  long long aBlock = (void **)v17;
  unint64_t v112 = v22;
  uint64_t v23 = v20;
  v24._unint64_t object = (void *)0x800000010009CC10;
  v24._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v24);
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v110 logInfo:v25];

  uint64_t v26 = *(int *)(v19 + 24);
  uint64_t v27 = v18;
  Swift::String v28 = v1;
  NSString v29 = v109;
  unint64_t v30 = *(void (**)(char *))(v23 + 16);
  uint64_t v105 = v108 + v26;
  uint64_t v31 = v107;
  v30(v109);
  ((void (*)(char *, char *, uint64_t))v30)(&v10[*(int *)(v106 + 20)], v29, v31);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v1;
  *(void *)(v32 + 24) = &off_1000B5A40;
  id v33 = *(void (**)(char *, uint64_t))(v23 + 8);
  long long v110 = v1;
  v33(v29, v31);
  *(void *)uint64_t v10 = sub_100086D5C;
  *((void *)v10 + 1) = v32;
  v10[16] = 0;
  sub_100086D64((uint64_t)v10, (uint64_t)v12, type metadata accessor for TimerRunningCompressedTrailingView);
  uint64_t v34 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C6E30));
  *(void *)&v34[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v34) + 16) + 8] = 0;
  swift_unknownObjectWeakInit();
  sub_100086DCC((uint64_t)v12, (uint64_t)v10, type metadata accessor for TimerRunningCompressedTrailingView);
  uint64_t v35 = UIHostingController.init(rootView:)();
  sub_100086E34((uint64_t)v12, type metadata accessor for TimerRunningCompressedTrailingView);
  Swift::String v36 = *(void **)&v28[v27];
  *(void *)&v28[v27] = v35;

  NSString v37 = *(void **)&v28[v27];
  if (!v37)
  {
    __break(1u);
    goto LABEL_28;
  }
  id v38 = [v37 view];
  if (!v38)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  id v39 = v38;
  [v38 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v40 = v110;
  if (!*(void *)&v28[v27])
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  [v110 addChildViewController:];
  id v41 = *(void **)&v28[v27];
  if (!v41)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  [v41 didMoveToParentViewController:v40];
  id v42 = *(void **)&v40[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
  if (!v42) {
    goto LABEL_21;
  }
  uint64_t v43 = *(void **)&v28[v27];
  if (!v43) {
    goto LABEL_31;
  }
  id v44 = [v43 view];
  if (!v44)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v45 = v44;
  [v42 addSubview:v44];

  id v46 = v109;
  Date.init()();
  Date.timeIntervalSince(_:)();
  v33(v46, v31);
  sub_10005DB1C();
  NSString v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v42 setAccessibilityLabel:v47];

  id v48 = v42;
  id v49 = [v110 view];
  if (!v49)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v50 = v49;
  [v49 addSubview:v48];

  [v48 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v51 = *(void **)&v28[v27];
  if (!v51)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  id v52 = [v51 view];
  NSString v53 = v110;
  if (!v52)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v54 = v52;
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_100095590;
  id v56 = [v54 leadingAnchor];
  id v57 = [v48 leadingAnchor];
  id v58 = [v56 constraintEqualToAnchor:v57];

  *(void *)(v55 + 32) = v58;
  id v59 = [v54 trailingAnchor];
  id v60 = [v48 trailingAnchor];
  id v61 = [v59 constraintEqualToAnchor:v60];

  *(void *)(v55 + 40) = v61;
  id v62 = [v54 topAnchor];
  id v63 = [v48 topAnchor];
  id v64 = [v62 constraintEqualToAnchor:v63];

  *(void *)(v55 + 48) = v64;
  id v65 = [v54 bottomAnchor];
  id v66 = [v48 bottomAnchor];
  id v67 = [v65 constraintEqualToAnchor:v66];

  *(void *)(v55 + 56) = v67;
  id v68 = [v48 trailingAnchor];
  id v69 = [v53 view];
  if (!v69)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v70 = v69;
  id v71 = [v69 trailingAnchor];

  id v72 = [v68 constraintEqualToAnchor:v71];
  *(void *)(v55 + 64) = v72;
  id v73 = [v48 topAnchor];
  id v74 = [v53 view];
  if (!v74)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v75 = v74;
  id v76 = [v74 topAnchor];

  id v77 = [v73 constraintEqualToAnchor:v76];
  *(void *)(v55 + 72) = v77;
  id v78 = [v48 leadingAnchor];
  id v79 = [v53 view];
  if (!v79)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v80 = v79;
  id v81 = [v79 SBUISA_systemApertureObstructedAreaLayoutGuide];

  id v82 = [v81 trailingAnchor];
  id v83 = [v78 constraintEqualToAnchor:v82];

  *(void *)(v55 + 80) = v83;
  id v84 = [v48 bottomAnchor];
  id v85 = [v53 view];
  if (!v85)
  {
LABEL_39:
    __break(1u);
    return;
  }
  uint64_t v86 = v85;
  uint64_t v87 = self;
  id v88 = [v86 bottomAnchor];

  id v89 = [v84 constraintEqualToAnchor:v88];
  *(void *)(v55 + 88) = v89;
  long long aBlock = (void **)v55;
  specialized Array._endMutation()();
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v87 activateConstraints:isa];

  id v40 = v110;
LABEL_21:
  if (UIAccessibilityIsVoiceOverRunning()
    || UIAccessibilityIsSwitchControlRunning()
    || _AXSCommandAndControlEnabled())
  {
    objc_msgSend(objc_msgSend(v40, "systemApertureElementContext"), "setElementNeedsUpdate");
    swift_unknownObjectRelease();
    uint64_t v91 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer;
    if (!*(void *)&v40[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer])
    {
      uint64_t v92 = self;
      uint64_t v93 = v40;
      uint64_t v94 = v104;
      sub_100086DCC(v108, v104, type metadata accessor for TimerSessionEntry);
      unint64_t v95 = (*(unsigned __int8 *)(v102 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
      uint64_t v96 = swift_allocObject();
      *(void *)(v96 + 16) = v93;
      sub_100086D64(v94, v96 + v95, type metadata accessor for TimerSessionEntry);
      uint64_t v115 = sub_100086FAC;
      uint64_t v116 = v96;
      long long aBlock = _NSConcreteStackBlock;
      unint64_t v112 = 1107296256;
      uint64_t v113 = sub_100054254;
      long long v114 = &unk_1000B5B90;
      uint64_t v97 = _Block_copy(&aBlock);
      uint64_t v98 = v93;
      swift_release();
      id v99 = [v92 scheduledTimerWithTimeInterval:1 repeats:v97 block:1.0];
      _Block_release(v97);
      long long v100 = *(void **)&v93[v91];
      *(void *)&v93[v91] = v99;
    }
  }
}

void sub_10007F174()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost];
  if (v3)
  {
    id v4 = [v3 parentViewController];
    if (v4)
    {

      return;
    }
  }
  uint64_t v5 = self;
  _StringGuts.grow(_:)(25);
  id v6 = [v0 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v7._unint64_t object = (void *)0x800000010009CBF0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 logInfo:v8];

  type metadata accessor for TimerSessionEntry(0);
  id v9 = objc_allocWithZone((Class)NSDateComponentsFormatter);
  swift_bridgeObjectRetain();
  id v10 = [v9 init];
  [v10 setAllowedUnits:32];
  [v10 setUnitsStyle:1];
  id v11 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
  [v11 setAllowedUnits:96];
  [v11 setUnitsStyle:1];
  uint64_t v12 = objc_allocWithZone((Class)sub_100007830(&qword_1000C6E28));
  *(void *)((char *)v12 + *(void *)(qword_1000CACE0 + (swift_isaMask & *v12) + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v13 = UIHostingController.init(rootView:)();
  uint64_t v14 = *(void **)&v1[v2];
  *(void *)&v1[v2] = v13;

  id v15 = *(void **)&v1[v2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_28;
  }
  id v16 = [v15 view];
  if (!v16)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v17 = v16;
  [v16 setTranslatesAutoresizingMaskIntoConstraints:0];

  if (!*(void *)&v1[v2])
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  [v1 addChildViewController:];
  uint64_t v18 = *(void **)&v1[v2];
  if (!v18)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  [v18 didMoveToParentViewController:v1];
  uint64_t v19 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
  if (!v19) {
    goto LABEL_21;
  }
  uint64_t v20 = *(void **)&v1[v2];
  if (!v20) {
    goto LABEL_31;
  }
  id v21 = [v20 view];
  if (!v21)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v22 = v21;
  [v19 addSubview:v21];

  NSString v23 = String._bridgeToObjectiveC()();
  [v19 setAccessibilityLabel:v23];

  id v24 = v19;
  id v25 = [v1 view];
  if (!v25)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v26 = v25;
  [v25 addSubview:v24];

  [v24 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v27 = *(void **)&v1[v2];
  if (!v27)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  id v28 = [v27 view];
  if (!v28)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  NSString v29 = v28;
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100095590;
  id v31 = [v29 leadingAnchor];
  id v32 = [v24 leadingAnchor];
  id v33 = [v31 constraintEqualToAnchor:v32];

  *(void *)(v30 + 32) = v33;
  id v34 = [v29 trailingAnchor];
  id v35 = [v24 trailingAnchor];
  id v36 = [v34 constraintEqualToAnchor:v35];

  *(void *)(v30 + 40) = v36;
  id v37 = [v29 topAnchor];
  id v38 = [v24 topAnchor];
  id v39 = [v37 constraintEqualToAnchor:v38];

  *(void *)(v30 + 48) = v39;
  id v40 = [v29 bottomAnchor];
  id v41 = [v24 bottomAnchor];
  id v42 = [v40 constraintEqualToAnchor:v41];

  *(void *)(v30 + 56) = v42;
  id v43 = [v24 trailingAnchor];
  id v44 = [v1 view];
  if (!v44)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v45 = v44;
  id v46 = [v44 trailingAnchor];

  id v47 = [v43 constraintEqualToAnchor:v46];
  *(void *)(v30 + 64) = v47;
  id v48 = [v24 topAnchor];
  id v49 = [v1 view];
  if (!v49)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v50 = v49;
  id v51 = [v49 topAnchor];

  id v52 = [v48 constraintEqualToAnchor:v51];
  *(void *)(v30 + 72) = v52;
  id v53 = [v24 leadingAnchor];
  id v54 = [v1 view];
  if (!v54)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v55 = v54;
  id v56 = [v54 SBUISA_systemApertureObstructedAreaLayoutGuide];

  id v57 = [v56 trailingAnchor];
  id v58 = [v53 constraintEqualToAnchor:v57];

  *(void *)(v30 + 80) = v58;
  id v59 = [v24 bottomAnchor];
  id v60 = [v1 view];
  if (!v60)
  {
LABEL_39:
    __break(1u);
    return;
  }
  id v61 = v60;
  id v62 = self;
  id v63 = [v61 bottomAnchor];

  id v64 = [v59 constraintEqualToAnchor:v63];
  *(void *)(v30 + 88) = v64;
  specialized Array._endMutation()();
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v62 activateConstraints:isa];

LABEL_21:
  if (UIAccessibilityIsVoiceOverRunning()
    || UIAccessibilityIsSwitchControlRunning()
    || _AXSCommandAndControlEnabled())
  {
    objc_msgSend(objc_msgSend(v1, "systemApertureElementContext"), "setElementNeedsUpdate");
    swift_unknownObjectRelease();
    uint64_t v66 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer;
    id v67 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer];
    if (v67)
    {
      [v67 invalidate];
      id v68 = *(void **)&v1[v66];
      *(void *)&v1[v66] = 0;
    }
  }
}

void sub_10007F9F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  NSString v8 = (char *)&v66 - v7;
  __chkstk_darwin(v6);
  id v10 = (char *)&v66 - v9;
  uint64_t v11 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v12 = __chkstk_darwin(v11);
  id v15 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView];
  if (v15)
  {
    uint64_t v70 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v71 = v14;
    NSString v72 = (NSString)v12;
    type metadata accessor for TimerApertureElementController(0);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v17 = [self bundleForClass:ObjCClassFromMetadata];
    NSString v18 = String._bridgeToObjectiveC()();
    NSString v19 = String._bridgeToObjectiveC()();
    NSString v20 = [v17 localizedStringForKey:v18 value:0 table:v19];

    if (!v20)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v15 setAccessibilityLabel:v20];

    id v21 = v15;
    id v22 = [v1 view];
    if (v22)
    {
      NSString v23 = v22;
      [v22 addSubview:v21];

      uint64_t v24 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
      id v25 = sub_100085090(0);
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v67 = v24;
        id v68 = v8;
        id v69 = v5;
        uint64_t v27 = self;
        uint64_t v75 = 0;
        unint64_t v76 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        id v28 = [v1 description];
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;
        swift_bridgeObjectRelease();

        uint64_t v75 = v29;
        unint64_t v76 = v31;
        v32._unint64_t object = (void *)0x800000010009ADC0;
        v32._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
        String.append(_:)(v32);
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v27 logInfo:v33];

        [v21 addSubview:v26];
        [v26 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v34 = self;
        sub_100007830((uint64_t *)&unk_1000C66F0);
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_100095580;
        id v36 = [v26 leadingAnchor];
        id v37 = [v21 leadingAnchor];
        id v38 = [v36 constraintEqualToAnchor:v37];

        *(void *)(v35 + 32) = v38;
        id v39 = [v26 trailingAnchor];
        id v40 = [v21 trailingAnchor];
        id v41 = [v39 constraintEqualToAnchor:v40];

        *(void *)(v35 + 40) = v41;
        id v42 = [v26 topAnchor];
        id v43 = [v21 topAnchor];
        id v44 = [v42 constraintEqualToAnchor:v43];

        *(void *)(v35 + 48) = v44;
        id v45 = [v26 bottomAnchor];
        id v46 = [v21 bottomAnchor];
        id v47 = [v45 constraintEqualToAnchor:v46];

        *(void *)(v35 + 56) = v47;
        uint64_t v75 = v35;
        specialized Array._endMutation()();
        sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v34 activateConstraints:isa];

        uint64_t v49 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
        if (v49)
        {
          uint64_t v50 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
          uint64_t v51 = qword_1000C2C70;
          swift_bridgeObjectRetain();
          uint64_t v52 = (uint64_t)v68;
          uint64_t v54 = v71;
          NSString v53 = v72;
          if (v51 != -1) {
            swift_once();
          }
          uint64_t v73 = v50;
          uint64_t v74 = v49;
          AnyHashable.init<A>(_:)();
          dispatch thunk of DataStore.getEntry(for:)();
          sub_10001EC9C((uint64_t)&v75);
        }
        else
        {
          uint64_t v54 = v71;
          NSString v53 = v72;
          (*(void (**)(char *, uint64_t, uint64_t, NSString))(v71 + 56))(v10, 1, 1, v72);

          uint64_t v52 = (uint64_t)v68;
        }
        int v62 = (*(uint64_t (**)(char *, uint64_t, NSString))(v54 + 48))(v10, 1, v53);
        uint64_t v63 = (uint64_t)v69;
        if (v62 == 1)
        {
          sub_10000FAF8((uint64_t)v10, &qword_1000C5390);
        }
        else
        {
          uint64_t v64 = v70;
          sub_100086D64((uint64_t)v10, v70, type metadata accessor for TimerSessionEntry);
          sub_100086D64(v64, v52, type metadata accessor for TimerSessionEntry);
          (*(void (**)(uint64_t, void, uint64_t, NSString))(v54 + 56))(v52, 0, 1, v53);
          sub_10000F834(v52, v63, &qword_1000C5390);
          uint64_t v65 = v67 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
          swift_beginAccess();
          sub_10001EFF4(v63, v65, &qword_1000C5390);
          swift_endAccess();
        }
      }
      else
      {
        uint64_t v55 = self;
        uint64_t v75 = 0;
        unint64_t v76 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        id v56 = [v1 description];
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v59 = v58;
        swift_bridgeObjectRelease();

        uint64_t v75 = v57;
        unint64_t v76 = v59;
        v60._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
        v60._unint64_t object = (void *)0x800000010009AD90;
        String.append(_:)(v60);
        NSString v72 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v55 logInfo:v72];

        id v61 = v72;
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100080228()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton;
  if (!*(void *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton])
  {
    sub_100080BE0();
    sub_10008090C();
    sub_100007830((uint64_t *)&unk_1000C66F0);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_100095F00;
    uint64_t v4 = *(void **)&v1[v2];
    if (v4)
    {
      id v5 = [v4 leadingAnchor];
      id v6 = [v1 view];
      if (v6)
      {
        uint64_t v7 = v6;
        id v8 = [v6 leadingAnchor];

        id v9 = [v5 constraintEqualToAnchor:v8 constant:16.0];
        *(void *)(v3 + 32) = v9;
        id v10 = *(void **)&v1[v2];
        if (v10)
        {
          id v11 = [v10 trailingAnchor];
          uint64_t v12 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton;
          uint64_t v13 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton];
          if (v13)
          {
            id v14 = [v13 leadingAnchor];
            id v15 = [v11 constraintEqualToAnchor:v14 constant:-10.0];

            *(void *)(v3 + 40) = v15;
            id v16 = *(void **)&v1[v2];
            if (v16)
            {
              id v17 = [v16 widthAnchor];
              NSString v18 = *(void **)&v1[v2];
              if (v18)
              {
                id v19 = [v18 heightAnchor];
                id v20 = [v17 constraintEqualToAnchor:v19];

                *(void *)(v3 + 48) = v20;
                id v21 = *(void **)&v1[v2];
                if (v21)
                {
                  id v22 = [v21 widthAnchor];
                  NSString v23 = *(void **)&v1[v12];
                  if (v23)
                  {
                    id v24 = [v23 widthAnchor];
                    id v25 = [v22 constraintEqualToAnchor:v24];

                    *(void *)(v3 + 56) = v25;
                    uint64_t v26 = *(void **)&v1[v2];
                    if (v26)
                    {
                      id v27 = [v26 widthAnchor];
                      id v28 = *(void **)&v1[v12];
                      if (v28)
                      {
                        id v29 = [v28 heightAnchor];
                        id v30 = [v27 constraintEqualToAnchor:v29];

                        *(void *)(v3 + 64) = v30;
                        unint64_t v31 = *(void **)&v1[v12];
                        if (v31)
                        {
                          id v32 = [v31 trailingAnchor];
                          id v33 = [v1 view];
                          if (v33)
                          {
                            id v34 = v33;
                            id v35 = [v33 SBUISA_systemApertureObstructedAreaLayoutGuide];

                            id v36 = [v35 leadingAnchor];
                            id v37 = [v32 constraintLessThanOrEqualToAnchor:v36];

                            *(void *)(v3 + 72) = v37;
                            id v38 = *(void **)&v1[v2];
                            if (v38)
                            {
                              id v39 = [v38 topAnchor];
                              id v40 = [v1 view];
                              if (v40)
                              {
                                id v41 = v40;
                                id v42 = [v40 topAnchor];

                                id v43 = [v39 constraintEqualToAnchor:v42 constant:17.0];
                                *(void *)(v3 + 80) = v43;
                                id v44 = *(void **)&v1[v2];
                                if (v44)
                                {
                                  id v45 = [v44 bottomAnchor];
                                  id v46 = [v1 view];
                                  if (v46)
                                  {
                                    id v47 = v46;
                                    id v48 = [v46 bottomAnchor];

                                    id v49 = [v45 constraintEqualToAnchor:v48 constant:-17.0];
                                    *(void *)(v3 + 88) = v49;
                                    uint64_t v50 = *(void **)&v1[v12];
                                    if (v50)
                                    {
                                      id v51 = [v50 topAnchor];
                                      id v52 = [v1 view];
                                      if (v52)
                                      {
                                        NSString v53 = v52;
                                        id v54 = [v52 topAnchor];

                                        id v55 = [v51 constraintEqualToAnchor:v54 constant:17.0];
                                        *(void *)(v3 + 96) = v55;
                                        id v56 = *(void **)&v1[v12];
                                        if (v56)
                                        {
                                          id v57 = [v56 bottomAnchor];
                                          id v58 = [v1 view];
                                          if (v58)
                                          {
                                            unint64_t v59 = v58;
                                            Swift::String v60 = self;
                                            id v61 = [v59 bottomAnchor];

                                            id v62 = [v57 constraintEqualToAnchor:v61 constant:-17.0];
                                            *(void *)(v3 + 104) = v62;
                                            specialized Array._endMutation()();
                                            sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
                                            Class isa = Array._bridgeToObjectiveC()().super.isa;
                                            swift_bridgeObjectRelease();
                                            [v60 activateConstraints:isa];

                                            goto LABEL_23;
                                          }
LABEL_47:
                                          __break(1u);
                                          return;
                                        }
LABEL_46:
                                        __break(1u);
                                        goto LABEL_47;
                                      }
LABEL_45:
                                      __break(1u);
                                      goto LABEL_46;
                                    }
LABEL_44:
                                    __break(1u);
                                    goto LABEL_45;
                                  }
LABEL_43:
                                  __break(1u);
                                  goto LABEL_44;
                                }
LABEL_42:
                                __break(1u);
                                goto LABEL_43;
                              }
LABEL_41:
                              __break(1u);
                              goto LABEL_42;
                            }
LABEL_40:
                            __break(1u);
                            goto LABEL_41;
                          }
LABEL_39:
                          __break(1u);
                          goto LABEL_40;
                        }
LABEL_38:
                        __break(1u);
                        goto LABEL_39;
                      }
LABEL_37:
                      __break(1u);
                      goto LABEL_38;
                    }
LABEL_36:
                    __break(1u);
                    goto LABEL_37;
                  }
LABEL_35:
                  __break(1u);
                  goto LABEL_36;
                }
LABEL_34:
                __break(1u);
                goto LABEL_35;
              }
LABEL_33:
              __break(1u);
              goto LABEL_34;
            }
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
LABEL_23:
  uint64_t v64 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage];
  if (v64)
  {
    type metadata accessor for TimerSessionEntry(0);
    id v65 = v64;
    NSString v66 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v65 setState:v66];
  }
}

void sub_10008090C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIButton.Configuration();
  __chkstk_darwin(v2 - 8);
  sub_100014314(0, &qword_1000C6E20);
  id v3 = [self sbui_systemApertureSymbolButtonConfiguration];
  static UIButton.Configuration._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = UIButton.init(configuration:primaryAction:)();
  uint64_t v5 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton;
  id v6 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton];
  *(void *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton] = v4;

  uint64_t v7 = *(void **)&v0[v5];
  if (!v7)
  {
    __break(1u);
    goto LABEL_15;
  }
  id v8 = [v7 layer];
  [v8 setCornerRadius:25.0];

  id v9 = *(void **)&v1[v5];
  if (!v9)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v10 = [v9 layer];
  [v10 setMasksToBounds:1];

  id v11 = *(void **)&v1[v5];
  if (!v11)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  [v11 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v12 = [v1 view];
  if (!v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (!*(void *)&v1[v5])
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v13 = v12;
  [v12 addSubview:];

  id v14 = [self sbui_systemApertureControlConfiguration];
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [self systemImageNamed:v15 withConfiguration:v14];

  if (v16)
  {
    if (qword_1000C2CC8 != -1) {
      goto LABEL_13;
    }
    while (1)
    {
      id v17 = [v16 imageWithSymbolConfiguration:qword_1000CAF58];

      NSString v18 = *(void **)&v1[v5];
      if (v18) {
        break;
      }
LABEL_12:
      __break(1u);
LABEL_13:
      swift_once();
    }
  }
  else
  {
    id v17 = 0;
    NSString v18 = *(void **)&v1[v5];
    if (!v18) {
      goto LABEL_12;
    }
  }
  [v18 setImage:v17 forState:0];
  id v19 = *(void **)&v1[v5];
  if (v19)
  {
    [v19 addTarget:v1 action:"stopAction" forControlEvents:64];

    return;
  }
LABEL_19:
  __break(1u);
}

void sub_100080BE0()
{
  uint64_t v1 = v0;
  id v2 = [self buttonWithType:0];
  uint64_t v3 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton;
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton];
  *(void *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton] = v2;

  uint64_t v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_18;
  }
  id v6 = [v5 layer];
  [v6 setCornerRadius:25.0];

  uint64_t v7 = *(void **)&v1[v3];
  if (!v7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v8 = [v7 layer];
  [v8 setMasksToBounds:1];

  id v9 = *(void **)&v1[v3];
  if (!v9)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v10 = *(void **)&v1[v3];
  if (!v10)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v11 = self;
  id v12 = v10;
  id v13 = [v11 mtOrange];
  id v14 = [v13 colorWithAlphaComponent:0.35];

  [v12 setBackgroundColor:v14];
  NSString v15 = *(void **)&v1[v3];
  if (!v15)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  [v15 addTarget:v1 action:"playPausedAction" forControlEvents:64];
  id v16 = [v1 view];
  if (!v16)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!*(void *)&v1[v3])
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  id v17 = v16;
  [v16 addSubview:];

  swift_getObjectType();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v19 = [self bundleForClass:ObjCClassFromMetadata];
  id v20 = objc_allocWithZone((Class)BSUICAPackageView);
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 initWithPackageName:v21 inBundle:v19];

  NSString v23 = self;
  if (!v22)
  {
    _StringGuts.grow(_:)(50);
    id v45 = [v1 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v46._uint64_t countAndFlagsBits = 0xD000000000000030;
    v46._unint64_t object = (void *)0x8000000100098E50;
    String.append(_:)(v46);
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v23 logInfo:v47];
    id v44 = v47;
    goto LABEL_14;
  }
  _StringGuts.grow(_:)(30);
  id v24 = [v1 description];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v25._unint64_t object = (void *)0x800000010009ADC0;
  v25._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v25);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 logInfo:v26];

  id v27 = *(void **)&v1[v3];
  if (!v27) {
    goto LABEL_24;
  }
  [v27 addSubview:v22];
  [v22 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v22 setUserInteractionEnabled:0];
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_100095580;
  id v29 = [v22 widthAnchor];
  id v30 = [v29 constraintEqualToConstant:23.0];

  *(void *)(v28 + 32) = v30;
  id v31 = [v22 heightAnchor];
  id v32 = [v31 constraintEqualToConstant:23.0];

  *(void *)(v28 + 40) = v32;
  id v33 = [v22 centerXAnchor];
  id v34 = *(void **)&v1[v3];
  if (!v34)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v35 = [v34 centerXAnchor];
  id v36 = [v33 constraintEqualToAnchor:v35];

  *(void *)(v28 + 48) = v36;
  id v37 = [v22 centerYAnchor];
  id v38 = *(void **)&v1[v3];
  if (!v38)
  {
LABEL_26:
    __break(1u);
    return;
  }
  id v39 = v37;
  id v40 = self;
  id v41 = [v38 centerYAnchor];
  id v42 = [v39 constraintEqualToAnchor:v41];

  *(void *)(v28 + 56) = v42;
  specialized Array._endMutation()();
  sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v40 activateConstraints:isa];

  id v44 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage];
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage] = v22;
LABEL_14:
}

void sub_1000811F8(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for TimerCountdownCustomView(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v90 - v8;
  sub_100080228();
  uint64_t v10 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost;
  if (!*(void *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost])
  {
    sub_100086DCC(a1, (uint64_t)&v9[*(int *)(v4 + 20)], type metadata accessor for TimerSessionEntry);
    *(void *)id v9 = sub_10006910C;
    *((void *)v9 + 1) = 0;
    unsigned char v9[16] = 0;
    v9[*(int *)(v4 + 24)] = 0;
    id v11 = (char *)objc_allocWithZone((Class)sub_100007830(&qword_1000C6E18));
    *(void *)&v11[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v11) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_100086DCC((uint64_t)v9, (uint64_t)v7, type metadata accessor for TimerCountdownCustomView);
    id v12 = (void *)UIHostingController.init(rootView:)();
    sub_100086E34((uint64_t)v9, type metadata accessor for TimerCountdownCustomView);
    id v13 = [v12 view];
    if (!v13)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    id v14 = v13;
    [v13 setTranslatesAutoresizingMaskIntoConstraints:0];

    id v15 = [v12 view];
    if (!v15)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    id v16 = v15;
    id v17 = [v15 layer];

    [v17 setAllowsHitTesting:0];
    [v2 addChildViewController:v12];
    id v18 = [v2 view];
    if (!v18)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    id v19 = v18;
    id v20 = [v12 view];
    if (!v20)
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    NSString v21 = v20;
    [v19 addSubview:v20];

    [v12 didMoveToParentViewController:v2];
    id v22 = *(void **)&v2[v10];
    *(void *)&v2[v10] = v12;
  }
  uint64_t v23 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost;
  uint64_t v24 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost];
  uint64_t v93 = v10;
  if (v24)
  {
LABEL_20:
    id v51 = *(void **)&v2[v10];
    if (v51)
    {
      id v52 = [v51 view];
      if (v52)
      {
        NSString v53 = v52;
        id v54 = *(void **)&v2[v23];
        if (v54)
        {
          id v55 = [v54 view];
          if (v55)
          {
            id v56 = v55;
            id v57 = [v2 view];
            if (v57)
            {
              id v58 = v57;
              uint64_t v91 = v4;
              uint64_t v92 = a1;
              id v94 = [v57 SBUISA_systemApertureObstructedAreaLayoutGuide];

              sub_100007830((uint64_t *)&unk_1000C66F0);
              uint64_t v59 = swift_allocObject();
              *(_OWORD *)(v59 + 16) = xmmword_1000971A0;
              id v60 = [v56 bottomAnchor];
              id v61 = [v2 view];
              if (v61)
              {
                id v62 = v61;
                id v63 = [v61 bottomAnchor];

                id v64 = [v60 constraintEqualToAnchor:v63 constant:-21.0];
                *(void *)(v59 + 32) = v64;
                id v65 = [v56 leadingAnchor];
                NSString v66 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton];
                if (v66)
                {
                  id v67 = [v66 trailingAnchor];
                  id v68 = [v65 constraintGreaterThanOrEqualToAnchor:v67 constant:12.0];

                  *(void *)(v59 + 40) = v68;
                  id v69 = [v53 leadingAnchor];
                  id v70 = [v94 trailingAnchor];
                  id v71 = [v69 constraintGreaterThanOrEqualToAnchor:v70];

                  *(void *)(v59 + 48) = v71;
                  id v72 = [v53 leadingAnchor];
                  id v73 = [v56 trailingAnchor];
                  id v74 = [v72 constraintEqualToAnchor:v73 constant:5.0];

                  *(void *)(v59 + 56) = v74;
                  id v75 = [v53 trailingAnchor];
                  id v76 = [v2 view];
                  if (v76)
                  {
                    id v77 = v76;
                    id v78 = self;
                    id v79 = [v77 SBUISA_systemApertureLegibleContentLayoutMarginsGuide];

                    id v80 = [v79 trailingAnchor];
                    id v81 = [v75 constraintEqualToAnchor:v80];

                    *(void *)(v59 + 64) = v81;
                    id v82 = [v53 lastBaselineAnchor];
                    id v83 = [v56 lastBaselineAnchor];
                    id v84 = [v82 constraintEqualToAnchor:v83];

                    *(void *)(v59 + 72) = v84;
                    uint64_t v95 = v59;
                    specialized Array._endMutation()();
                    sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
                    Class isa = Array._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease();
                    [v78 activateConstraints:isa];

                    [v56 setNeedsUpdateConstraints];
                    uint64_t v86 = *(void **)&v2[v93];
                    if (v86)
                    {
                      id v87 = v86;
                      id v88 = (void (*)(uint64_t *, void))dispatch thunk of UIHostingController.rootView.modify();
                      sub_100086CC0(v92, v89 + *(int *)(v91 + 20));
                      v88(&v95, 0);

                      return;
                    }
                    goto LABEL_38;
                  }
LABEL_37:
                  __break(1u);
LABEL_38:
                  __break(1u);
                  goto LABEL_39;
                }
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_32;
  }
  uint64_t countAndFlagsBits = *(void *)(a1 + 16);
  unint64_t object = *(void **)(a1 + 24);
  if (countAndFlagsBits == 0x5F544E4552525543 && object == (void *)0xED000052454D4954
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    id v27 = [self mainBundle];
    v100._unint64_t object = (void *)0x8000000100099CB0;
    v28._uint64_t countAndFlagsBits = 0x72656D6954;
    v28._unint64_t object = (void *)0xE500000000000000;
    v29._uint64_t countAndFlagsBits = 0;
    v29._unint64_t object = (void *)0xE000000000000000;
    v100._uint64_t countAndFlagsBits = 0xD000000000000013;
    Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v100);
    uint64_t countAndFlagsBits = v30._countAndFlagsBits;
    unint64_t object = v30._object;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v95 = countAndFlagsBits;
  uint64_t v96 = object;
  sub_10000C92C();
  uint64_t v31 = Text.init<A>(_:)();
  id v33 = v32;
  char v35 = v34;
  uint64_t v37 = v36;
  if (qword_1000C2CF0 != -1) {
    swift_once();
  }
  uint64_t v38 = qword_1000CAF80;
  id v39 = objc_allocWithZone((Class)sub_100007830(&qword_1000C6E10));
  *(void *)((char *)v39 + *(void *)(qword_1000CACE0 + (swift_isaMask & *v39) + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v95 = v31;
  uint64_t v96 = v33;
  char v97 = v35 & 1;
  uint64_t v98 = v37;
  uint64_t v99 = v38;
  swift_retain();
  id v40 = (void *)UIHostingController.init(rootView:)();
  id v41 = [v40 view];
  if (!v41) {
    goto LABEL_43;
  }
  id v42 = v41;
  [v41 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v43 = [v40 view];
  uint64_t v10 = v93;
  if (!v43)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  id v44 = v43;
  id v45 = [v43 layer];

  [v45 setAllowsHitTesting:0];
  [v2 addChildViewController:v40];
  id v46 = [v2 view];
  if (!v46)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  NSString v47 = v46;
  id v48 = [v40 view];
  if (v48)
  {
    id v49 = v48;
    [v47 addSubview:v48];

    [v40 didMoveToParentViewController:v2];
    uint64_t v50 = *(void **)&v2[v23];
    *(void *)&v2[v23] = v40;

    goto LABEL_20;
  }
LABEL_46:
  __break(1u);
}

void sub_100081C30(uint64_t *a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for AlertingTimerView(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v70 - v8;
  uint64_t v10 = self;
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  id v11 = [v1 description];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();

  uint64_t v70 = v12;
  unint64_t v71 = v14;
  v15._unint64_t object = (void *)0x800000010009CBC0;
  v15._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v15);
  uint64_t v16 = *a1;
  id v17 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v16;
  v18._unint64_t object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 logInfo:v19];

  uint64_t v20 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost;
  NSString v21 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost];
  id v22 = &stru_1000BF000;
  if (v21) {
    goto LABEL_8;
  }
  sub_100086DCC((uint64_t)a1, (uint64_t)v9, type metadata accessor for TimerSessionEntry);
  if (qword_1000C2C98 != -1) {
    swift_once();
  }
  uint64_t v23 = (void *)qword_1000CAE28;
  uint64_t v24 = &v9[*(int *)(v4 + 20)];
  *((void *)v24 + 3) = type metadata accessor for ClockAngelConnectionManager();
  *((void *)v24 + 4) = &off_1000B4D40;
  *(void *)uint64_t v24 = v23;
  Swift::String v25 = self;
  id v26 = v23;
  id v27 = [v25 mtOrange];
  uint64_t v28 = Color.init(uiColor:)();
  id v29 = [v25 mtOrange];
  Color.init(uiColor:)();
  uint64_t v30 = Color.opacity(_:)();
  swift_release();
  uint64_t v31 = static Color.white.getter();
  static Color.white.getter();
  uint64_t v32 = Color.opacity(_:)();
  swift_release();
  id v33 = &v9[*(int *)(v4 + 24)];
  *((void *)v33 + 3) = &type metadata for StandardSessionUiConfig;
  *((void *)v33 + 4) = &off_1000B5578;
  char v34 = (void *)swift_allocObject();
  *(void *)id v33 = v34;
  v34[2] = v28;
  v34[3] = v30;
  v34[4] = v31;
  v34[5] = v32;
  char v35 = (char *)objc_allocWithZone((Class)sub_100007830((uint64_t *)&unk_1000C6E00));
  *(void *)&v35[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v35) + 16) + 8] = 0;
  swift_unknownObjectWeakInit();
  sub_100086DCC((uint64_t)v9, (uint64_t)v7, type metadata accessor for AlertingTimerView);
  uint64_t v36 = (void *)UIHostingController.init(rootView:)();
  sub_100086E34((uint64_t)v9, type metadata accessor for AlertingTimerView);
  id v22 = &stru_1000BF000;
  id v37 = [v36 view];
  if (!v37) {
    goto LABEL_19;
  }
  uint64_t v38 = v37;
  [v37 setTranslatesAutoresizingMaskIntoConstraints:0];

  [v2 addChildViewController:v36];
  id v39 = [v2 view];
  if (!v39)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v40 = v39;
  id v41 = [v36 view];
  if (!v41)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v42 = v41;
  [v40 addSubview:v41];

  [v36 didMoveToParentViewController:v2];
  id v43 = *(void **)&v2[v20];
  *(void *)&v2[v20] = v36;

  NSString v21 = *(void **)&v2[v20];
  if (v21)
  {
LABEL_8:
    id v44 = [v21 v22[113].type];
    if (v44)
    {
      id v45 = v44;
      sub_100007830((uint64_t *)&unk_1000C66F0);
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_100095580;
      id v47 = [v45 leadingAnchor];
      id v48 = [v2 v22[113].type];
      if (v48)
      {
        id v49 = v48;
        id v50 = [v48 leadingAnchor];

        id v51 = [v47 constraintEqualToAnchor:v50 constant:-7.0];
        *(void *)(v46 + 32) = v51;
        id v52 = [v45 topAnchor];
        id v53 = [v2 v22[113].type];
        if (v53)
        {
          id v54 = v53;
          id v55 = [v53 topAnchor];

          id v56 = [v52 constraintEqualToAnchor:v55];
          *(void *)(v46 + 40) = v56;
          id v57 = [v45 trailingAnchor];
          id v58 = [v2 v22[113].type];
          if (v58)
          {
            uint64_t v59 = v58;
            id v60 = [v58 SBUISA_systemApertureLegibleContentLayoutMarginsGuide];

            id v61 = [v60 trailingAnchor];
            id v62 = [v57 constraintEqualToAnchor:v61];

            *(void *)(v46 + 48) = v62;
            id v63 = [v45 bottomAnchor];
            id v64 = [v2 v22[113].type];
            if (v64)
            {
              id v65 = v64;
              NSString v66 = self;
              id v67 = [v65 bottomAnchor];

              id v68 = [v63 constraintEqualToAnchor:v67];
              *(void *)(v46 + 56) = v68;
              uint64_t v70 = v46;
              specialized Array._endMutation()();
              sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v66 activateConstraints:isa];

              return;
            }
            goto LABEL_18;
          }
LABEL_17:
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
}

void sub_10008235C()
{
  uint64_t v1 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost];
  if (v2)
  {
    id v3 = v2;
    id v4 = [v3 view];
    if (!v4)
    {
      __break(1u);
      goto LABEL_11;
    }
    uint64_t v5 = v4;
    [v4 removeFromSuperview];

    [v3 didMoveToParentViewController:0];
    [v0 removeChildViewController:v3];
    uint64_t v6 = *(void **)&v0[v1];
    *(void *)&v0[v1] = 0;
  }
  uint64_t v7 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost;
  uint64_t v8 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost];
  if (!v8) {
    return;
  }
  id v9 = v8;
  id v10 = [v9 view];
  if (!v10)
  {
LABEL_11:
    __break(1u);
    return;
  }
  id v11 = v10;
  [v10 removeFromSuperview];

  [v9 didMoveToParentViewController:0];
  [v0 removeChildViewController:v9];
  id v12 = *(id *)&v0[v7];
  *(void *)&v0[v7] = 0;
}

void sub_1000824B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v47 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = self;
  uint64_t v49 = 0;
  unint64_t v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  id v9 = [v0 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();

  uint64_t v49 = v10;
  unint64_t v50 = v12;
  v13._unint64_t object = (void *)0x8000000100098FB0;
  v13._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v48 = v8;
  [v8 logInfo:v14];

  Swift::String v15 = &v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  uint64_t v16 = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (!v16) {
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)v15;
  uint64_t v18 = qword_1000C2C70;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v51 = v17;
  uint64_t v52 = v16;
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.getEntry(for:)();
  sub_10001EC9C((uint64_t)&v49);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FAF8((uint64_t)v4, &qword_1000C5390);
LABEL_6:
    uint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    id v19 = [v1 description];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();

    uint64_t v49 = v20;
    unint64_t v50 = v22;
    v23._uint64_t countAndFlagsBits = 0xD000000000000022;
    v23._unint64_t object = (void *)0x800000010009CB90;
    String.append(_:)(v23);
    uint64_t v24 = *((void *)v15 + 1);
    uint64_t v51 = *(void *)v15;
    uint64_t v52 = v24;
    swift_bridgeObjectRetain();
    sub_100007830(&qword_1000C3750);
    v25._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v48 logInfo:v26];

    return;
  }
  uint64_t v27 = v47;
  sub_100086D64((uint64_t)v4, v47, type metadata accessor for TimerSessionEntry);
  if (*(unsigned char *)(v27 + *(int *)(v5 + 28)) == 1)
  {
    uint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    id v28 = [v1 description];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();

    uint64_t v49 = v29;
    unint64_t v50 = v31;
    v32._uint64_t countAndFlagsBits = 0x6E696D7573657220;
    v32._unint64_t object = (void *)0xEF72656D69742067;
    String.append(_:)(v32);
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v48 logInfo:v33];

    char v34 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage];
    if (v34)
    {
      id v35 = v34;
      NSString v36 = String._bridgeToObjectiveC()();
      [v35 setState:v36];
    }
    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    sub_100053354();
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    id v37 = [v1 description];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();

    uint64_t v49 = v38;
    unint64_t v50 = v40;
    v41._uint64_t countAndFlagsBits = 0x676E697375617020;
    v41._unint64_t object = (void *)0xEE0072656D697420;
    String.append(_:)(v41);
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v48 logInfo:v42];

    id v43 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage];
    if (v43)
    {
      id v44 = v43;
      NSString v45 = String._bridgeToObjectiveC()();
      [v44 setState:v45];
    }
    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    sub_100052FF0();
  }
  swift_bridgeObjectRelease();
  sub_100086E34(v27, type metadata accessor for TimerSessionEntry);
}

void sub_100082B34()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = self;
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  id v10 = [v0 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();

  uint64_t v29 = v11;
  unint64_t v30 = v13;
  v14._unint64_t object = (void *)0x800000010009CB70;
  v14._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 logInfo:v15];

  uint64_t v16 = &v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  uint64_t v17 = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (!v17) {
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)v16;
  uint64_t v19 = qword_1000C2C70;
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v31 = v18;
  uint64_t v32 = v17;
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.getEntry(for:)();
  sub_10001EC9C((uint64_t)&v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FAF8((uint64_t)v4, &qword_1000C5390);
LABEL_6:
    uint64_t v29 = 0;
    unint64_t v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    id v20 = [v1 description];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();

    uint64_t v29 = v21;
    unint64_t v30 = v23;
    v24._uint64_t countAndFlagsBits = 0xD000000000000022;
    v24._unint64_t object = (void *)0x800000010009CB90;
    String.append(_:)(v24);
    uint64_t v25 = *((void *)v16 + 1);
    uint64_t v31 = *(void *)v16;
    uint64_t v32 = v25;
    swift_bridgeObjectRetain();
    sub_100007830(&qword_1000C3750);
    v26._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 logInfo:v27];

    return;
  }
  sub_100086D64((uint64_t)v4, (uint64_t)v8, type metadata accessor for TimerSessionEntry);
  if (qword_1000C2C98 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_1000536B0();
  swift_bridgeObjectRelease();
  sub_100086E34((uint64_t)v8, type metadata accessor for TimerSessionEntry);
}

void sub_100082F64(void *a1, double a2, double a3)
{
  id v4 = v3;
  uint64_t v8 = self;
  _StringGuts.grow(_:)(21);
  id v9 = [v3 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();

  v13._unint64_t object = (void *)0x800000010009CE30;
  v13._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 logInfo:v14, v10, v12];

  v19.receiver = v3;
  v19.super_class = (Class)type metadata accessor for TimerApertureElementController(0);
  [super viewWillTransitionToSize:a1 withTransitionCoordinator:a2];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v3;
  v18[4] = sub_100087058;
  _OWORD v18[5] = v15;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  double v18[2] = sub_10008822C;
  v18[3] = &unk_1000B5BE0;
  uint64_t v16 = _Block_copy(v18);
  id v17 = v4;
  swift_release();
  [a1 animateAlongsideTransition:v16 completion:0];
  _Block_release(v16);
}

void sub_10008313C(uint64_t a1, char *a2)
{
  uint64_t v3 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TimerSessionEntry(0);
  __chkstk_darwin(v6);
  id v9 = (uint64_t *)((char *)v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode;
  switch(*(void *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode])
  {
    case 0:
      uint64_t v11 = self;
      uint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      id v12 = [a2 description];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();

      uint64_t v84 = v13;
      unint64_t v85 = v15;
      v16._unint64_t object = (void *)0x800000010009A840;
      v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v16);
      v83[0] = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v11 logInfo:v83[0]];
      goto LABEL_30;
    case 1:
      uint64_t v25 = self;
      uint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      id v26 = [a2 description];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();

      uint64_t v84 = v27;
      unint64_t v85 = v29;
      v30._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v30._unint64_t object = (void *)0x800000010009A7C0;
      String.append(_:)(v30);
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v25 logInfo:v31];

      sub_10008235C();
      goto LABEL_5;
    case 2:
      uint64_t v38 = self;
      uint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      id v39 = [a2 description];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();

      uint64_t v84 = v40;
      unint64_t v85 = v42;
      v43._unint64_t object = (void *)0x800000010009A820;
      v43._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v43);
      NSString v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v38 logInfo:v44];

      sub_10008235C();
      sub_100083F9C();
      uint64_t v45 = *(void *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
      uint64_t v46 = *(void **)(v45 + 40);
      if (v46)
      {
        [v46 invalidate];
        uint64_t v47 = *(void **)(v45 + 40);
        *(void *)(v45 + 40) = 0;
      }
      id v48 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView];
      if (v48) {
        [v48 setHidden:1];
      }
      uint64_t v49 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
      if (v49) {
        [v49 setHidden:1];
      }
      unint64_t v50 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView];
      if (v50)
      {
        [v50 setHidden:0];
      }
      return;
    case 3:
      uint64_t v51 = self;
      uint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      id v52 = [a2 description];
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v55 = v54;
      swift_bridgeObjectRelease();

      uint64_t v84 = v53;
      unint64_t v85 = v55;
      v56._unint64_t object = (void *)0x800000010009A800;
      v56._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v56);
      NSString v57 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v51 logInfo:v57];

      sub_10008235C();
      sub_100083FA8();
      uint64_t v58 = *(void *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
      uint64_t v59 = *(void **)(v58 + 40);
      if (v59)
      {
        [v59 invalidate];
        id v60 = *(void **)(v58 + 40);
        *(void *)(v58 + 40) = 0;
      }
      id v61 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView];
      if (v61) {
        [v61 setHidden:0];
      }
      id v62 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
      if (v62) {
        [v62 setHidden:0];
      }
      id v63 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView];
      if (v63) {
        [v63 setHidden:1];
      }
      v83[0] = objc_msgSend(objc_msgSend(a2, "systemApertureElementContext"), "transitionContext");
      swift_unknownObjectRelease();
      if (!v83[0]) {
        return;
      }
      if ([v83[0] isUserInitiated]) {
        sub_100083BA0();
      }
LABEL_30:
      id v37 = v83[0];
      goto LABEL_31;
    case 4:
      v83[0] = v7;
      id v64 = self;
      uint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      id v65 = [a2 description];
      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v68 = v67;
      swift_bridgeObjectRelease();

      uint64_t v84 = v66;
      unint64_t v85 = v68;
      v69._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v69._unint64_t object = (void *)0x800000010009A7E0;
      String.append(_:)(v69);
      NSString v70 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v64 logInfo:v70];

      uint64_t v71 = *(void *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
      id v72 = *(void **)(v71 + 40);
      if (v72)
      {
        [v72 invalidate];
        id v73 = *(void **)(v71 + 40);
        *(void *)(v71 + 40) = 0;
      }
      uint64_t v74 = *(void *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
      id v75 = *(void **)(v74 + 40);
      if (v75)
      {
        [v75 invalidate];
        id v76 = *(void **)(v74 + 40);
        *(void *)(v74 + 40) = 0;
      }
      id v77 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView];
      if (v77) {
        [v77 setHidden:1];
      }
      id v78 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
      if (v78) {
        [v78 setHidden:1];
      }
      id v79 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView];
      if (v79) {
        [v79 setHidden:1];
      }
      id v80 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
      if (!v80)
      {
        (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v83[0] + 7))(v5, 1, 1, v6);
LABEL_52:
        sub_10000FAF8((uint64_t)v5, &qword_1000C5390);
        return;
      }
      id v81 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
      uint64_t v82 = qword_1000C2C70;
      swift_bridgeObjectRetain();
      if (v82 != -1) {
        swift_once();
      }
      v83[1] = v81;
      v83[2] = v80;
      AnyHashable.init<A>(_:)();
      dispatch thunk of DataStore.getEntry(for:)();
      sub_10001EC9C((uint64_t)&v84);
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v83[0] + 6))(v5, 1, v6) == 1) {
        goto LABEL_52;
      }
      sub_100086D64((uint64_t)v5, (uint64_t)v9, type metadata accessor for TimerSessionEntry);
      if (*(void *)&a2[v10] == 4)
      {
        if (*((unsigned char *)v9 + *(int *)(v6 + 28)) == 2) {
          sub_100081C30(v9);
        }
        else {
          sub_1000811F8((uint64_t)v9);
        }
      }
      sub_100086E34((uint64_t)v9, type metadata accessor for TimerSessionEntry);
      return;
    default:
      id v17 = self;
      uint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(54);
      id v18 = [a2 description];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      v22._uint64_t countAndFlagsBits = v19;
      v22._unint64_t object = v21;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 0xD000000000000034;
      v23._unint64_t object = (void *)0x800000010009CE50;
      String.append(_:)(v23);
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v17 logInfo:v24];

LABEL_5:
      uint64_t v32 = *(void *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
      NSString v33 = *(void **)(v32 + 40);
      if (v33)
      {
        [v33 invalidate];
        char v34 = *(void **)(v32 + 40);
        *(void *)(v32 + 40) = 0;
      }
      uint64_t v35 = *(void *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
      NSString v36 = *(void **)(v35 + 40);
      if (!v36) {
        return;
      }
      [v36 invalidate];
      id v37 = *(id *)(v35 + 40);
      *(void *)(v35 + 40) = 0;
LABEL_31:

      return;
  }
}

uint64_t sub_100083BA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = self;
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  id v10 = [v0 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();

  uint64_t v30 = v11;
  unint64_t v31 = v13;
  v14._unint64_t object = (void *)0x800000010009A540;
  v14._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 logInfo:v15];

  uint64_t v16 = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    return sub_10000FAF8((uint64_t)v4, &qword_1000C5390);
  }
  uint64_t v17 = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  uint64_t v18 = qword_1000C2C70;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  v29[1] = v17;
  void v29[2] = v16;
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.getEntry(for:)();
  sub_10001EC9C((uint64_t)&v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return sub_10000FAF8((uint64_t)v4, &qword_1000C5390);
  }
  sub_100086D64((uint64_t)v4, (uint64_t)v8, type metadata accessor for TimerSessionEntry);
  if (*((unsigned char *)v8 + *(int *)(v5 + 28)) == 2)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    id v19 = [v1 description];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();

    uint64_t v30 = v20;
    unint64_t v31 = v22;
    v23._uint64_t countAndFlagsBits = 0xD000000000000020;
    v23._unint64_t object = (void *)0x800000010009CB40;
    String.append(_:)(v23);
    uint64_t v25 = *v8;
    NSString v24 = (void *)v8[1];
    swift_bridgeObjectRetain();
    v26._uint64_t countAndFlagsBits = v25;
    v26._unint64_t object = v24;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 logInfo:v27];

    if (qword_1000C2C98 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    sub_100053A0C(v25, v24);
    swift_bridgeObjectRelease();
  }
  return sub_100086E34((uint64_t)v8, type metadata accessor for TimerSessionEntry);
}

uint64_t sub_100083F9C()
{
  return sub_100083FB4();
}

uint64_t sub_100083FA8()
{
  return sub_100083FB4();
}

uint64_t sub_100083FB4()
{
  uint64_t v1 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8);
  if (!v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    return sub_10000FAF8((uint64_t)v3, &qword_1000C5390);
  }
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId);
  uint64_t v10 = qword_1000C2C70;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  v12[1] = v9;
  void v12[2] = v8;
  AnyHashable.init<A>(_:)();
  dispatch thunk of DataStore.getEntry(for:)();
  sub_10001EC9C((uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    return sub_10000FAF8((uint64_t)v3, &qword_1000C5390);
  }
  sub_100086D64((uint64_t)v3, (uint64_t)v7, type metadata accessor for TimerSessionEntry);
  if (v7[*(int *)(v4 + 28)] == 1) {
    sub_100085CD4();
  }
  else {
    sub_1000855F0();
  }
  return sub_100086E34((uint64_t)v7, type metadata accessor for TimerSessionEntry);
}

uint64_t sub_100084264(uint64_t a1, char *a2)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
  if (v7)
  {
    type metadata accessor for TimerSessionEntry(0);
    Date.init()();
    Date.timeIntervalSince(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_10005DB1C();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v7 setAccessibilityLabel:v8];
  }
  objc_msgSend(objc_msgSend(a2, "systemApertureElementContext"), "setElementNeedsUpdate");
  return swift_unknownObjectRelease();
}

void sub_1000843FC()
{
  sub_1000864F8(319, (unint64_t *)&qword_1000C6BF0, (void (*)(uint64_t))&type metadata accessor for URL);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100084528(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v78 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v76 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for DispatchQoS();
  uint64_t v75 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v74 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v69 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v69 - v17;
  sub_10000F9F0(a1, (uint64_t)&aBlock);
  sub_100007830(&qword_1000C3F78);
  if (swift_dynamicCast())
  {
    uint64_t v71 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v72 = v16;
    uint64_t v70 = v4;
    sub_100086E34((uint64_t)v18, type metadata accessor for TimerSessionEntry);
    id v19 = self;
    long long aBlock = 0;
    unint64_t v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    id v20 = [v2 description];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v23 = v22;

    v24._uint64_t countAndFlagsBits = v21;
    v24._unint64_t object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 0xD000000000000033;
    v25._unint64_t object = (void *)0x800000010009AD10;
    String.append(_:)(v25);
    id v26 = [v2 description];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    v30._uint64_t countAndFlagsBits = v27;
    v30._unint64_t object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v73 = v19;
    [v19 logInfo:v31];

    uint64_t v32 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
    if (v32)
    {
      uint64_t v33 = *(void *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
      uint64_t v34 = qword_1000C2C70;
      swift_bridgeObjectRetain();
      if (v34 != -1) {
        swift_once();
      }
      uint64_t v85 = v33;
      uint64_t v86 = v32;
      AnyHashable.init<A>(_:)();
      dispatch thunk of DataStore.getEntry(for:)();
      sub_10001EC9C((uint64_t)&aBlock);
      int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
      uint64_t v36 = (uint64_t)v71;
      if (v35 != 1)
      {
        uint64_t v37 = (uint64_t)v72;
        sub_100086D64((uint64_t)v9, (uint64_t)v72, type metadata accessor for TimerSessionEntry);
        long long aBlock = 0;
        unint64_t v80 = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        id v38 = [v2 description];
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;
        swift_bridgeObjectRelease();

        long long aBlock = (void **)v39;
        unint64_t v80 = v41;
        v42._unint64_t object = (void *)0x800000010009AD70;
        v42._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v42);
        NSString v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v73 logInfo:v43];

        sub_100014314(0, (unint64_t *)&qword_1000C3F90);
        NSString v44 = (void *)static OS_dispatch_queue.main.getter();
        sub_100086DCC(v37, v36, type metadata accessor for TimerSessionEntry);
        unint64_t v45 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        uint64_t v46 = swift_allocObject();
        *(void *)(v46 + 16) = v2;
        sub_100086D64(v36, v46 + v45, type metadata accessor for TimerSessionEntry);
        id v83 = sub_100086B04;
        uint64_t v84 = v46;
        long long aBlock = _NSConcreteStackBlock;
        unint64_t v80 = 1107296256;
        id v81 = sub_10001C5B8;
        uint64_t v82 = &unk_1000B5A78;
        uint64_t v47 = _Block_copy(&aBlock);
        id v48 = v2;
        swift_release();
        uint64_t v49 = v74;
        static DispatchQoS.unspecified.getter();
        long long aBlock = (void **)_swiftEmptyArrayStorage;
        sub_100086B80((unint64_t *)&qword_1000C3B30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100007830((uint64_t *)&unk_1000C3FA0);
        sub_10001DF74();
        unint64_t v50 = v76;
        uint64_t v51 = v70;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v47);

        (*(void (**)(char *, uint64_t))(v78 + 8))(v50, v51);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v49, v77);
        sub_100086E34((uint64_t)v72, type metadata accessor for TimerSessionEntry);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    }
    sub_10000FAF8((uint64_t)v9, &qword_1000C5390);
    long long aBlock = 0;
    unint64_t v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    id v64 = [v2 description];
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v67 = v66;
    swift_bridgeObjectRelease();

    long long aBlock = (void **)v65;
    unint64_t v80 = v67;
    v68._uint64_t countAndFlagsBits = 0xD000000000000011;
    v68._unint64_t object = (void *)0x800000010009AD50;
    String.append(_:)(v68);
    NSString v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v73 logInfo:v63];
  }
  else
  {
    id v52 = self;
    long long aBlock = 0;
    unint64_t v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    id v53 = [v2 description];
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v56 = v55;
    swift_bridgeObjectRelease();

    long long aBlock = (void **)v54;
    unint64_t v80 = v56;
    v57._uint64_t countAndFlagsBits = 0xD000000000000027;
    v57._unint64_t object = (void *)0x800000010009ACE0;
    String.append(_:)(v57);
    id v58 = [v2 description];
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v61 = v60;

    v62._uint64_t countAndFlagsBits = v59;
    v62._unint64_t object = v61;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    NSString v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v52 logInfo:v63];
  }
}

uint64_t sub_100084DFC()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_observerId);
  swift_bridgeObjectRetain();
  return v1;
}

id sub_100085038()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimerApertureAccessoryView();
  [super dealloc];
}

uint64_t type metadata accessor for TimerApertureAccessoryView()
{
  return self;
}

id sub_100085090(unsigned __int8 a1)
{
  objc_super v2 = v1;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v5 = [self bundleForClass:ObjCClassFromMetadata];
  id v6 = objc_allocWithZone((Class)BSUICAPackageView);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithPackageName:v7 inBundle:v5];

  if (!v8)
  {
    uint64_t v11 = self;
    uint64_t v34 = 0;
    unint64_t v35 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    *(void *)&long long v32 = v2;
    type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)();
    v12._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v12._unint64_t object = (void *)0x800000010009CA90;
    String.append(_:)(v12);
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 logInfo:v13];
    id v8 = 0;
    goto LABEL_21;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 publishedObjectWithName:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  sub_10000F834((uint64_t)&v32, (uint64_t)&v34, &qword_1000C5370);
  if (!v36) {
    goto LABEL_19;
  }
  sub_100014314(0, (unint64_t *)&unk_1000C6DE0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    unint64_t v28 = self;
    uint64_t v34 = 0;
    unint64_t v35 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    *(void *)&long long v32 = v2;
    type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)();
    v29._uint64_t countAndFlagsBits = 0xD000000000000026;
    v29._unint64_t object = (void *)0x800000010009CAC0;
    String.append(_:)(v29);
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v28 logInfo:v13];
    goto LABEL_21;
  }
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v8 publishedObjectWithName:v14];

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  sub_10000F834((uint64_t)&v32, (uint64_t)&v34, &qword_1000C5370);
  if (!v36)
  {

LABEL_19:
    sub_10000FAF8((uint64_t)&v34, &qword_1000C5370);
    goto LABEL_20;
  }
  sub_100014314(0, (unint64_t *)&unk_1000C7080);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_20;
  }
  int v16 = a1;
  uint64_t v17 = self;
  uint64_t v34 = 0;
  unint64_t v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  *(void *)&long long v32 = v2;
  type metadata accessor for TimerAnimationCountdown(0);
  _print_unlocked<A, B>(_:_:)();
  v18._uint64_t countAndFlagsBits = 0xD000000000000029;
  v18._unint64_t object = (void *)0x800000010009CAF0;
  String.append(_:)(v18);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 logInfo:v19];

  id v20 = (void *)v2[2];
  v2[2] = v8;
  id v21 = v8;

  unint64_t v22 = (void *)v2[3];
  v2[3] = v31;
  id v23 = v31;

  Swift::String v24 = (void *)v2[4];
  v2[4] = v31;
  NSString v13 = v31;

  uint64_t v25 = 0x646573756170;
  if (v16 == 1) {
    uint64_t v25 = 0x702D6F6E696D6F64;
  }
  unint64_t v26 = 0xE600000000000000;
  uint64_t v27 = (void *)((char *)v2 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  if (v16 == 1) {
    unint64_t v26 = 0xED00006465737561;
  }
  *uint64_t v27 = v25;
  v27[1] = v26;
  swift_bridgeObjectRelease();
  sub_100086008(0.0);

LABEL_21:
  return v8;
}

void sub_1000855F0()
{
  uint64_t v1 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void **)(v0 + 40);
  if (v4)
  {
    [v4 invalidate];
    id v5 = *(void **)(v0 + 40);
    *(void *)(v0 + 40) = 0;
  }
  id v6 = [self displayLinkWithTarget:v0 selector:"updateCountdownAnimation"];
  NSString v7 = *(void **)(v0 + 40);
  *(void *)(v0 + 40) = v6;

  id v8 = *(void **)(v0 + 40);
  if (v8)
  {
    uint64_t v9 = v0 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
    swift_beginAccess();
    sub_10000FA94(v9, (uint64_t)v3, &qword_1000C5390);
    uint64_t v10 = type metadata accessor for TimerSessionEntry(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v3, 1, v10))
    {
      id v11 = v8;
      sub_10000FAF8((uint64_t)v3, &qword_1000C5390);
    }
    else
    {
      Swift::String v12 = &v3[*(int *)(v10 + 36)];
      double v13 = *(double *)v12;
      char v14 = v12[8];
      id v15 = v8;
      sub_10000FAF8((uint64_t)v3, &qword_1000C5390);
      if ((v14 & 1) == 0)
      {
        if (v13 >= 0.0 && v13 < 10.0)
        {
          uint64_t v16 = 30;
LABEL_8:
          [v8 setPreferredFramesPerSecond:v16];

          uint64_t v17 = *(void **)(v0 + 40);
          if (v17)
          {
            Swift::String v18 = self;
            id v19 = v17;
            id v20 = [v18 currentRunLoop];
            [v19 addToRunLoop:v20 forMode:NSRunLoopCommonModes];
          }
          return;
        }
        if (v13 < 10.0 || v13 >= 45.0)
        {
          if (v13 >= 240.0 || v13 < 45.0) {
            uint64_t v16 = 1;
          }
          else {
            uint64_t v16 = 5;
          }
          goto LABEL_8;
        }
      }
    }
    uint64_t v16 = 10;
    goto LABEL_8;
  }
}

void sub_10008585C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = (int *)type metadata accessor for TimerSessionEntry(0);
  uint64_t v6 = *((void *)v5 - 1);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v27 - v10;
  uint64_t v12 = v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess();
  sub_10000FA94(v12, (uint64_t)v4, &qword_1000C5390);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FAF8((uint64_t)v4, &qword_1000C5390);
    double v13 = self;
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    uint64_t v27 = v1;
    type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)();
    v14._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v14._unint64_t object = (void *)0x800000010009C9C0;
    String.append(_:)(v14);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 logInfo:v15];

    return;
  }
  sub_100086D64((uint64_t)v4, (uint64_t)v11, type metadata accessor for TimerSessionEntry);
  uint64_t v16 = &v11[v5[9]];
  if (v16[8])
  {
    uint64_t v17 = self;
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    uint64_t v27 = v1;
    type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)();
    unint64_t v18 = 0x800000010009CA10;
    unint64_t v19 = 0xD000000000000010;
  }
  else
  {
    if (!v11[v5[7]])
    {
      double v22 = *(double *)v16;
      id v23 = &v11[v5[10]];
      double v24 = *(double *)v23;
      int v25 = v23[8];
      sub_100086DCC((uint64_t)v11, (uint64_t)v9, type metadata accessor for TimerSessionEntry);
      if (v25 == 1)
      {
        Date.timeIntervalSinceNow.getter();
        double v24 = v26 / v22;
      }
      sub_100086E34((uint64_t)v9, type metadata accessor for TimerSessionEntry);
      sub_100086008(1.0 - v24);
      uint64_t v21 = (uint64_t)v11;
      goto LABEL_8;
    }
    uint64_t v17 = self;
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    uint64_t v27 = v1;
    type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)();
    unint64_t v19 = 0xD000000000000036;
    unint64_t v18 = 0x800000010009CA30;
  }
  String.append(_:)(*(Swift::String *)&v19);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 logInfo:v20];

  uint64_t v21 = (uint64_t)v11;
LABEL_8:
  sub_100086E34(v21, type metadata accessor for TimerSessionEntry);
}

void sub_100085CD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v1 + 40);
  if (v9)
  {
    [v9 invalidate];
    uint64_t v10 = *(void **)(v1 + 40);
    *(void *)(v1 + 40) = 0;
  }
  uint64_t v11 = v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess();
  sub_10000FA94(v11, (uint64_t)v4, &qword_1000C5390);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FAF8((uint64_t)v4, &qword_1000C5390);
    uint64_t v12 = self;
    uint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    uint64_t v19 = v1;
    type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)();
    v13._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v13._unint64_t object = (void *)0x800000010009C9C0;
    String.append(_:)(v13);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 logInfo:v14];
  }
  else
  {
    sub_100086D64((uint64_t)v4, (uint64_t)v8, type metadata accessor for TimerSessionEntry);
    NSString v15 = &v8[*(int *)(v5 + 40)];
    if (v15[8])
    {
      uint64_t v16 = self;
      uint64_t v20 = 0;
      unint64_t v21 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      uint64_t v19 = v1;
      type metadata accessor for TimerAnimationCountdown(0);
      _print_unlocked<A, B>(_:_:)();
      v17._unint64_t object = (void *)0x800000010009C9F0;
      v17._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v17);
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v16 logInfo:v18];
    }
    else
    {
      sub_100086008(1.0 - *(double *)v15);
    }
    sub_100086E34((uint64_t)v8, type metadata accessor for TimerSessionEntry);
  }
}

void sub_100086008(double a1)
{
  uint64_t v3 = sub_100007830(&qword_1000C5390);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)v1[3];
  if (v10) {
    [v10 setStrokeStart:a1 * 0.9299 + 0.07];
  }
  uint64_t v11 = (uint64_t)v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess();
  sub_10000FA94(v11, (uint64_t)v5, &qword_1000C5390);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000FAF8((uint64_t)v5, &qword_1000C5390);
    uint64_t v12 = (void *)v1[2];
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  sub_100086D64((uint64_t)v5, (uint64_t)v9, type metadata accessor for TimerSessionEntry);
  if (v9[*(int *)(v6 + 28)] != 1)
  {
    sub_100086E34((uint64_t)v9, type metadata accessor for TimerSessionEntry);
    uint64_t v12 = (void *)v1[2];
    if (!v12)
    {
LABEL_6:
      [self setDisableActions:1];
      NSString v15 = (void *)v1[4];
      if (v15)
      {
        uint64_t v16 = self;
        id v17 = v15;
        [v16 radFromDeg:a1 * 342.0 + 18.0];
        CATransform3DMakeRotation(&v22, v18, 0.0, 0.0, 1.0);
        [v17 setTransform:&v22];
      }
      return;
    }
LABEL_5:
    id v13 = v12;
    NSString v14 = String._bridgeToObjectiveC()();
    [v13 setState:v14];

    goto LABEL_6;
  }
  uint64_t v19 = (void *)v1[2];
  if (v19)
  {
    id v20 = v19;
    swift_bridgeObjectRetain();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v20 setState:v21];
  }
  sub_100086E34((uint64_t)v9, type metadata accessor for TimerSessionEntry);
}

uint64_t sub_10008636C()
{
  sub_10000FAF8((uint64_t)v0 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, &qword_1000C5390);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10008640C()
{
  return type metadata accessor for TimerAnimationCountdown(0);
}

uint64_t type metadata accessor for TimerAnimationCountdown(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C6C48);
}

void sub_100086434()
{
  sub_1000864F8(319, (unint64_t *)&unk_1000C6F40, (void (*)(uint64_t))type metadata accessor for TimerSessionEntry);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000864F8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_10008654C(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [v2 traitCollection];
  id v5 = [v4 _backlightLuminance];

  if (v5 == (id)1 && (!a1 || [a1 _backlightLuminance] != (id)1))
  {
    uint64_t v9 = self;
    _StringGuts.grow(_:)(42);
    id v13 = [v2 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    unint64_t v12 = 0x800000010009C990;
    unint64_t v11 = 0xD000000000000028;
    goto LABEL_12;
  }
  id v6 = [v2 traitCollection];
  id v7 = [v6 _backlightLuminance];

  BOOL v8 = v7 == (id)1 || a1 == 0;
  if (!v8 && [a1 _backlightLuminance] == (id)1)
  {
    uint64_t v9 = self;
    _StringGuts.grow(_:)(44);
    id v10 = [v2 description];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    unint64_t v11 = 0xD00000000000002ALL;
    unint64_t v12 = 0x800000010009C960;
LABEL_12:
    String.append(_:)(*(Swift::String *)&v11);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 logInfo:v14];
  }
}

uint64_t sub_100086AB8()
{
  return sub_100086B80(&qword_1000C6DC8, (void (*)(uint64_t))type metadata accessor for TimerApertureElementController);
}

void sub_100086B04()
{
  uint64_t v1 = *(void *)(type metadata accessor for TimerSessionEntry(0) - 8);
  sub_10007D7BC((uint64_t *)(v0
                          + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))));
}

uint64_t sub_100086B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100086B78()
{
  return swift_release();
}

uint64_t sub_100086B80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100086BC8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100086C00()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100086C10()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100086C48()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100086C70()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100086CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100086D24()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100086D5C()
{
  return sub_100066A58();
}

uint64_t sub_100086D64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100086DCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100086E34(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100086E98()
{
  uint64_t v1 = (int *)(type metadata accessor for TimerSessionEntry(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100086FAC(uint64_t a1)
{
  type metadata accessor for TimerSessionEntry(0);
  uint64_t v3 = *(char **)(v1 + 16);

  return sub_100084264(a1, v3);
}

uint64_t sub_100087020()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100087058(uint64_t a1)
{
  sub_10008313C(a1, *(char **)(v1 + 16));
}

id sub_1000871C4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultSceneDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for DefaultSceneDelegate()
{
  return self;
}

void sub_10008722C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = self;
  _StringGuts.grow(_:)(61);
  v7._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  v7._unint64_t object = (void *)0x800000010009CF70;
  String.append(_:)(v7);
  id v8 = [a2 role];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  v12._uint64_t countAndFlagsBits = v9;
  v12._unint64_t object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 logInfo:v13];

  self;
  uint64_t v14 = swift_dynamicCastObjCClass();
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = objc_allocWithZone((Class)UIWindow);
    id v17 = a1;
    id v18 = [v16 initWithWindowScene:v15];
    id v19 = [objc_allocWithZone((Class)UIViewController) init];
    id v20 = [v19 view];
    if (!v20)
    {
      __break(1u);
      return;
    }
    NSString v21 = v20;
    id v22 = [self redColor];
    [v21 setBackgroundColor:v22];

    [v18 setRootViewController:v19];
    [v18 makeKeyAndVisible];
    NSString v28 = *(NSString *)(v3 + OBJC_IVAR____TtC10ClockAngel20DefaultSceneDelegate_window);
    *(void *)(v3 + OBJC_IVAR____TtC10ClockAngel20DefaultSceneDelegate_window) = v18;
  }
  else
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    id v23 = [a1 description];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    double v26 = v25;

    v27._uint64_t countAndFlagsBits = v24;
    v27._unint64_t object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v6 logError:v28];
  }
}

id sub_1000874F8()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v0 initWithRed:0.6 green:0.6 blue:0.6 alpha:1.0];
}

uint64_t sub_100087548()
{
  uint64_t result = static Font.Weight.light.getter();
  qword_1000CAF38 = v1;
  return result;
}

uint64_t sub_100087568(uint64_t a1)
{
  return sub_1000878C4(a1, &qword_1000CAF40);
}

uint64_t sub_100087578()
{
  uint64_t result = static Font.Weight.medium.getter();
  qword_1000CAF48 = v1;
  return result;
}

void sub_100087598()
{
  qword_1000CAF50 = 0x4049000000000000;
}

id sub_1000875A8()
{
  id result = [self configurationWithPointSize:6 weight:16.0];
  qword_1000CAF58 = (uint64_t)result;
  return result;
}

void sub_1000875EC()
{
  qword_1000CAF60 = 0x4047800000000000;
}

uint64_t sub_100087600()
{
  uint64_t result = static Font.Weight.light.getter();
  qword_1000CAF68 = v1;
  return result;
}

uint64_t sub_100087620(uint64_t a1)
{
  return sub_1000878C4(a1, &qword_1000CAF70);
}

uint64_t sub_100087630(uint64_t a1)
{
  return sub_1000878C4(a1, &qword_1000CAF78);
}

uint64_t sub_100087640()
{
  uint64_t v0 = type metadata accessor for Font.Leading();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007830(&qword_1000C3148);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Font.TextStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.body(_:), v7);
  uint64_t v11 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  static Font.Weight.medium.getter();
  static Font.system(_:design:weight:)();
  sub_1000879B0((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  uint64_t v12 = Font.leading(_:)();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_1000CAF80 = v12;
  return result;
}

uint64_t sub_1000878B4(uint64_t a1)
{
  return sub_1000878C4(a1, &qword_1000CAF88);
}

uint64_t sub_1000878C4(uint64_t a1, uint64_t *a2)
{
  sub_100007830(&qword_1000C3148);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Font.Weight.medium.getter();
  uint64_t v5 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = static Font.system(size:weight:design:)();
  uint64_t result = sub_1000879B0((uint64_t)v4);
  *a2 = v6;
  return result;
}

uint64_t sub_1000879B0(uint64_t a1)
{
  uint64_t v2 = sub_100007830(&qword_1000C3148);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100087A10()
{
  qword_1000CAF90 = 0x4045000000000000;
}

void sub_100087A20()
{
  qword_1000CAF98 = 0x4043000000000000;
}

uint64_t sub_100087A30(uint64_t a1)
{
  return sub_100087C68(a1, (void (*)(uint64_t))&static Font.Weight.bold.getter, (unsigned int *)&enum case for Font.Design.rounded(_:), &qword_1000CAFA0);
}

uint64_t sub_100087A60(uint64_t a1)
{
  return sub_100087B80(158.0, a1, &qword_1000CAFA8);
}

uint64_t sub_100087A78(uint64_t a1)
{
  return sub_100087C68(a1, (void (*)(uint64_t))&static Font.Weight.semibold.getter, (unsigned int *)&enum case for Font.Design.rounded(_:), &qword_1000CAFB0);
}

void sub_100087AA8()
{
  qword_1000CAFB8 = 0x4058000000000000;
}

void sub_100087AB8()
{
  qword_1000CAFC0 = 0x4042000000000000;
}

void sub_100087AC8()
{
  qword_1000CAFC8 = 0x4045800000000000;
}

void sub_100087ADC()
{
  qword_1000CAFD0 = 0x4038000000000000;
}

void sub_100087AEC()
{
  qword_1000CAFD8 = 0x404E000000000000;
}

void sub_100087AFC()
{
  qword_1000CAFE0 = 0x4061400000000000;
}

void sub_100087B10()
{
  qword_1000CAFE8 = 0x4043000000000000;
}

uint64_t sub_100087B20(uint64_t a1)
{
  return sub_100087B80(110.0, a1, &qword_1000CAFF0);
}

uint64_t sub_100087B38(uint64_t a1)
{
  return sub_100087B80(130.0, a1, &qword_1000CAFF8);
}

uint64_t sub_100087B50(uint64_t a1)
{
  return sub_100087B80(170.0, a1, &qword_1000CB000);
}

uint64_t sub_100087B68(uint64_t a1)
{
  return sub_100087B80(190.0, a1, &qword_1000CB008);
}

uint64_t sub_100087B80(CGFloat a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (__CFString *)String._bridgeToObjectiveC()();
  CTFontCreateWithNameAndOptions(v5, a1, 0, 0x20000uLL);

  uint64_t result = Font.init(_:)();
  *a3 = result;
  return result;
}

void sub_100087BF8()
{
  qword_1000CB010 = 0xC024000000000000;
}

void sub_100087C08()
{
  qword_1000CB018 = 0xC010000000000000;
}

void sub_100087C18()
{
  qword_1000CB020 = 0x4034000000000000;
}

void sub_100087C28()
{
  qword_1000CB028 = 0x403E000000000000;
}

uint64_t sub_100087C38(uint64_t a1)
{
  return sub_100087C68(a1, (void (*)(uint64_t))&static Font.Weight.bold.getter, &enum case for Font.Design.default(_:), &qword_1000CB030);
}

uint64_t sub_100087C68(uint64_t a1, void (*a2)(uint64_t), unsigned int *a3, uint64_t *a4)
{
  uint64_t v7 = sub_100007830(&qword_1000C3148);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  id v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v8);
  uint64_t v11 = *a3;
  uint64_t v12 = type metadata accessor for Font.Design();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  uint64_t v14 = static Font.system(size:weight:design:)();
  uint64_t result = sub_1000879B0((uint64_t)v10);
  *a4 = v14;
  return result;
}

void sub_100087DA4()
{
  qword_1000CB038 = 0x405C800000000000;
}

void sub_100087DB8()
{
  qword_1000CB040 = 0x4034000000000000;
}

uint64_t sub_100087DC8()
{
  uint64_t result = Image.init(systemName:)();
  qword_1000CB048 = result;
  return result;
}

uint64_t sub_100087DF8()
{
  uint64_t result = Image.init(systemName:)();
  qword_1000CB050 = result;
  return result;
}

uint64_t sub_100087E30(uint64_t a1)
{
  return sub_100087ED0(a1, &qword_1000CB058);
}

uint64_t sub_100087E44()
{
  uint64_t result = static Animation.easeInOut(duration:)();
  qword_1000CB060 = result;
  return result;
}

uint64_t sub_100087E70(uint64_t a1)
{
  return sub_100087ED0(a1, &qword_1000CB068);
}

uint64_t sub_100087E84(uint64_t a1)
{
  return sub_100087F44(a1, &qword_1000CB070);
}

uint64_t sub_100087E98(uint64_t a1)
{
  return sub_100087ED0(a1, &qword_1000CB078);
}

uint64_t sub_100087EAC(uint64_t a1)
{
  return sub_100087F44(a1, &qword_1000CB080);
}

uint64_t sub_100087EC0(uint64_t a1)
{
  return sub_100087ED0(a1, &qword_1000CB088);
}

uint64_t sub_100087ED0(uint64_t a1, uint64_t *a2)
{
  static Animation.spring(response:dampingFraction:blendDuration:)();
  uint64_t v3 = Animation.delay(_:)();
  uint64_t result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t sub_100087F30(uint64_t a1)
{
  return sub_100087F44(a1, &qword_1000CB090);
}

uint64_t sub_100087F44(uint64_t a1, uint64_t *a2)
{
  static Animation.easeInOut(duration:)();
  uint64_t v3 = Animation.delay(_:)();
  uint64_t result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t sub_100087FA4()
{
  static AnyTransition.move(edge:)();
  static AnyTransition.scale.getter();
  uint64_t v0 = AnyTransition.combined(with:)();
  swift_release();
  uint64_t result = swift_release();
  qword_1000CB098 = v0;
  return result;
}

uint64_t sub_100088004()
{
  sub_1000881C8();
  uint64_t result = VerticalAlignment.init(_:)();
  qword_1000CB0A0 = result;
  return result;
}

void sub_100088034(uint64_t a1)
{
}

uint64_t sub_100088054()
{
  return 0x6C655972656D6974;
}

void sub_100088074(uint64_t a1)
{
}

void sub_100088094(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Material();
  sub_100088148(v3, a2);
  sub_10007A6F0(v3, (uint64_t)a2);
  type metadata accessor for TimerCompressedController();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v5 = [self bundleForClass:ObjCClassFromMetadata];
  static Material.coreMaterial(bundle:provider:)();
}

uint64_t *sub_100088148(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1000881AC()
{
  return 0x72614472656D6974;
}

unint64_t sub_1000881C8()
{
  unint64_t result = qword_1000C6E90;
  if (!qword_1000C6E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000C6E90);
  }
  return result;
}

ValueMetadata *_s18ActionButtonBottomOMa()
{
  return &_s18ActionButtonBottomON;
}

uint64_t sub_10008822C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

void sub_100088814()
{
  sub_100089388();
  sub_100088840();

  sub_100089E0C();
}

void sub_100088840()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView;
  if (*(void *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView]) {
    goto LABEL_17;
  }
  type metadata accessor for ObservableStopwatchModel();
  sub_10003A524();
  swift_retain();
  uint64_t v3 = ObservedObject.init(wrappedValue:)();
  CGFloat v5 = v4;
  uint64_t v6 = objc_allocWithZone((Class)sub_100007830(&qword_1000C70A0));
  *(void *)((char *)v6 + *(void *)(qword_1000CACE0 + (swift_isaMask & *v6) + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v99.m11 = v3;
  v99.m12 = v5;
  *(_OWORD *)&v99.m13 = xmmword_100098A40;
  uint64_t v7 = UIHostingController.init(rootView:)();
  uint64_t v8 = *(void **)&v1[v2];
  *(void *)&v1[v2] = v7;

  uint64_t v9 = *(void **)&v1[v2];
  if (!v9)
  {
    __break(1u);
    goto LABEL_27;
  }
  id v10 = [v9 view:*(_OWORD *)&v99.m11];
  if (!v10)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v11 = v10;
  [v10 setTranslatesAutoresizingMaskIntoConstraints:0];

  if (!*(void *)&v1[v2])
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  [v1 addChildViewController:];
  uint64_t v12 = *(void **)&v1[v2];
  if (!v12)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  [v12 didMoveToParentViewController:v1];
  uint64_t v13 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView];
  if (v13)
  {
    uint64_t v14 = *(void **)&v1[v2];
    if (v14)
    {
      id v15 = [v14 view];
      if (v15)
      {
        uint64_t v16 = v15;
        [v13 addSubview:v15];

        id v17 = v13;
        id v18 = [v1 view];
        if (v18)
        {
          id v19 = v18;
          [v18 addSubview:v17];

          id v20 = *(void **)&v1[v2];
          if (v20)
          {
            id v21 = [v20 view];
            if (v21)
            {
              id v22 = v21;
              sub_100007830((uint64_t *)&unk_1000C66F0);
              uint64_t v23 = swift_allocObject();
              *(_OWORD *)(v23 + 16) = xmmword_100095590;
              id v24 = [v17 leadingAnchor];
              id v25 = [v1 view];
              if (v25)
              {
                double v26 = v25;
                id v27 = [v25 SBUISA_systemApertureObstructedAreaLayoutGuide];

                id v28 = [v27 trailingAnchor];
                id v29 = [v24 constraintEqualToAnchor:v28];

                *(void *)(v23 + 32) = v29;
                id v30 = [v17 trailingAnchor];
                id v31 = [v1 view];
                if (v31)
                {
                  long long v32 = v31;
                  id v33 = [v31 trailingAnchor];

                  id v34 = [v30 constraintEqualToAnchor:v33];
                  *(void *)(v23 + 40) = v34;
                  id v35 = [v17 topAnchor];
                  id v36 = [v1 view];
                  if (v36)
                  {
                    uint64_t v37 = v36;
                    id v38 = [v36 topAnchor];

                    id v39 = [v35 constraintEqualToAnchor:v38];
                    *(void *)(v23 + 48) = v39;
                    id v40 = [v17 bottomAnchor];
                    id v41 = [v1 view];
                    if (v41)
                    {
                      Swift::String v42 = v41;
                      NSString v43 = self;
                      id v44 = [v42 bottomAnchor];

                      id v45 = [v40 constraintEqualToAnchor:v44];
                      *(void *)(v23 + 56) = v45;
                      id v46 = [v22 leadingAnchor];
                      id v47 = [v17 leadingAnchor];
                      id v48 = [v46 constraintEqualToAnchor:v47];

                      *(void *)(v23 + 64) = v48;
                      id v49 = [v22 trailingAnchor];
                      id v50 = [v17 trailingAnchor];
                      id v51 = [v49 constraintEqualToAnchor:v50];

                      *(void *)(v23 + 72) = v51;
                      id v52 = [v22 topAnchor];
                      id v53 = [v17 topAnchor];
                      id v54 = [v52 constraintEqualToAnchor:v53];

                      *(void *)(v23 + 80) = v54;
                      id v55 = [v22 bottomAnchor];
                      id v56 = [v17 bottomAnchor];
                      id v57 = [v55 constraintEqualToAnchor:v56];

                      *(void *)(v23 + 88) = v57;
                      specialized Array._endMutation()();
                      sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
                      Class isa = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      [v43 activateConstraints:isa, v23];

                      goto LABEL_17;
                    }
LABEL_38:
                    __break(1u);
                    goto LABEL_39;
                  }
LABEL_37:
                  __break(1u);
                  goto LABEL_38;
                }
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_17:
  if (*(void *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedLeadingView]) {
    return;
  }
  uint64_t v59 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView];
  if (!v59) {
    return;
  }
  id v60 = v59;
  id v61 = [v1 view];
  if (!v61)
  {
LABEL_39:
    __break(1u);
    return;
  }
  Swift::String v62 = v61;
  [v61 addSubview:v60];

  uint64_t v63 = *(void *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation];
  id v64 = sub_10008C3E4();
  if (v64)
  {
    NSString v65 = v64;
    unint64_t v66 = self;
    v99.m11 = 0.0;
    v99.m12 = -2.68156159e154;
    _StringGuts.grow(_:)(45);
    id v67 = [v1 description:*(_OWORD *)&v99.m11];
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    CGFloat v70 = v69;
    swift_bridgeObjectRelease();

    v99.m12 = v70;
    v71._unint64_t object = (void *)0x800000010009D270;
    v71._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v71);
    NSString v72 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v66 logInfo:v72, v68];

    [v60 addSubview:v65];
    [v65 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v73 = self;
    sub_100007830((uint64_t *)&unk_1000C66F0);
    uint64_t v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = xmmword_100095580;
    id v75 = [v65 leadingAnchor];
    id v76 = [v60 leadingAnchor];
    id v77 = [v75 constraintEqualToAnchor:v76 constant:-2.0];

    *(void *)(v74 + 32) = v77;
    id v78 = [v65 trailingAnchor];
    id v79 = [v60 trailingAnchor];
    id v80 = [v78 constraintEqualToAnchor:v79];

    *(void *)(v74 + 40) = v80;
    id v81 = [v65 topAnchor];
    id v82 = [v60 topAnchor];
    id v83 = [v81 constraintEqualToAnchor:v82];

    *(void *)(v74 + 48) = v83;
    id v84 = [v65 bottomAnchor];
    id v85 = [v60 bottomAnchor];
    id v86 = [v84 constraintEqualToAnchor:v85];

    *(void *)(v74 + 56) = v86;
    *(void *)&v99.m11 = v74;
    specialized Array._endMutation()();
    sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
    Class v87 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v73 activateConstraints:v87];

    [self setDisableActions:1];
    id v88 = *(void **)(v63 + 32);
    if (v88)
    {
      uint64_t v89 = self;
      id v90 = v88;
      [v89 radFromDeg:357.0];
      CATransform3DMakeRotation(&v99, v91, 0.0, 0.0, 1.0);
      [v90 setTransform:&v99];

      id v60 = v65;
      NSString v65 = v90;
    }
  }
  else
  {
    uint64_t v92 = self;
    v99.m11 = 0.0;
    v99.m12 = -2.68156159e154;
    _StringGuts.grow(_:)(53);
    id v93 = [v1 description:*(_OWORD *)&v99.m11];
    uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v96 = v95;

    v97._uint64_t countAndFlagsBits = v94;
    v97._unint64_t object = v96;
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    v98._uint64_t countAndFlagsBits = 0xD000000000000033;
    v98._unint64_t object = (void *)0x800000010009D230;
    String.append(_:)(v98);
    NSString v65 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v92 logInfo:v65];
  }
}

void sub_100089388()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView;
  if (!*(void *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView])
  {
    id v93 = &type metadata for ApertureConfig;
    uint64_t v94 = &off_1000B43D8;
    type metadata accessor for ObservableStopwatchModel();
    sub_10003A524();
    swift_retain();
    uint64_t v91 = ObservedObject.init(wrappedValue:)();
    uint64_t v92 = v3;
    double v4 = (char *)objc_allocWithZone((Class)sub_100007830((uint64_t *)&unk_1000C51B0));
    *(void *)&v4[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v4) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_10004F734((uint64_t)&v91, (uint64_t)v90);
    CGFloat v5 = (void *)UIHostingController.init(rootView:)();
    sub_10004F790((uint64_t)&v91);
    id v6 = [v5 view];
    if (!v6)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    uint64_t v7 = v6;
    [v6 setTranslatesAutoresizingMaskIntoConstraints:0];

    id v8 = [v5 view];
    if (!v8)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v9 = v8;
    id v10 = [v8 layer];

    [v10 setAllowsHitTesting:0];
    [v1 addChildViewController:v5];
    id v11 = [v1 view];
    if (!v11)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v12 = v11;
    id v13 = [v5 view];
    if (!v13)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v14 = v13;
    [v12 addSubview:v13];

    [v5 didMoveToParentViewController:v1];
    id v15 = *(void **)&v1[v2];
    *(void *)&v1[v2] = v5;
  }
  uint64_t v16 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView;
  if (*(void *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView])
  {
LABEL_13:
    id v30 = [v1 view];
    if (v30)
    {
      id v31 = v30;
      id v32 = [v30 SBUISA_systemApertureObstructedAreaLayoutGuide];

      id v33 = [v32 leadingAnchor];
      sub_100013758();

      id v34 = [v1 view];
      if (v34)
      {
        id v35 = v34;
        id v36 = [v34 SBUISA_systemApertureObstructedAreaLayoutGuide];

        sub_100007830((uint64_t *)&unk_1000C66F0);
        uint64_t v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = xmmword_1000971A0;
        id v38 = *(void **)&v1[v2];
        if (v38)
        {
          id v39 = [v38 view];
          if (v39)
          {
            id v40 = v39;
            id v41 = [v39 leadingAnchor];

            uint64_t v89 = v36;
            id v42 = [v36 trailingAnchor];
            id v43 = [v41 constraintEqualToAnchor:v42];

            *(void *)(v37 + 32) = v43;
            id v44 = *(void **)&v1[v2];
            if (v44)
            {
              id v45 = [v44 view];
              if (v45)
              {
                id v46 = v45;
                id v47 = [v45 trailingAnchor];

                id v48 = [v1 view];
                if (v48)
                {
                  id v49 = v48;
                  id v50 = [v48 SBUISA_systemApertureLegibleContentLayoutMarginsGuide];

                  id v51 = [v50 trailingAnchor];
                  id v52 = [v47 constraintEqualToAnchor:v51];

                  *(void *)(v37 + 40) = v52;
                  id v53 = *(void **)&v1[v2];
                  if (v53)
                  {
                    id v54 = [v53 view];
                    if (v54)
                    {
                      id v55 = v54;
                      id v56 = [v54 bottomAnchor];

                      id v57 = *(void **)&v1[v16];
                      if (v57)
                      {
                        id v58 = [v57 view];
                        if (v58)
                        {
                          uint64_t v59 = v58;
                          id v60 = [v58 topAnchor];

                          id v61 = [v56 constraintEqualToAnchor:v60];
                          *(void *)(v37 + 48) = v61;
                          Swift::String v62 = *(void **)&v1[v16];
                          if (v62)
                          {
                            id v63 = [v62 view];
                            if (v63)
                            {
                              id v64 = v63;
                              id v65 = [v63 leadingAnchor];

                              unint64_t v66 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
                              if (v66)
                              {
                                id v67 = [v66 trailingAnchor];
                                id v68 = [v65 constraintEqualToAnchor:v67];

                                *(void *)(v37 + 56) = v68;
                                double v69 = *(void **)&v1[v16];
                                if (v69)
                                {
                                  id v70 = [v69 view];
                                  if (v70)
                                  {
                                    Swift::String v71 = v70;
                                    id v72 = [v70 trailingAnchor];

                                    id v73 = [v1 view];
                                    if (v73)
                                    {
                                      uint64_t v74 = v73;
                                      id v75 = [v73 SBUISA_systemApertureLegibleContentLayoutMarginsGuide];

                                      id v76 = [v75 trailingAnchor];
                                      id v77 = [v72 constraintEqualToAnchor:v76];

                                      *(void *)(v37 + 64) = v77;
                                      id v78 = *(void **)&v1[v16];
                                      if (v78)
                                      {
                                        id v79 = [v78 view];
                                        if (v79)
                                        {
                                          id v80 = v79;
                                          id v81 = [v79 bottomAnchor];

                                          id v82 = [v1 view];
                                          if (v82)
                                          {
                                            id v83 = v82;
                                            id v84 = self;
                                            id v85 = [v83 SBUISA_systemApertureLegibleContentLayoutMarginsGuide];

                                            id v86 = [v85 bottomAnchor];
                                            id v87 = [v81 constraintEqualToAnchor:v86];

                                            *(void *)(v37 + 72) = v87;
                                            uint64_t v91 = v37;
                                            specialized Array._endMutation()();
                                            sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
                                            Class isa = Array._bridgeToObjectiveC()().super.isa;
                                            swift_bridgeObjectRelease();
                                            [v84 activateConstraints:isa];

                                            return;
                                          }
                                          goto LABEL_53;
                                        }
LABEL_52:
                                        __break(1u);
LABEL_53:
                                        __break(1u);
                                        goto LABEL_54;
                                      }
LABEL_51:
                                      __break(1u);
                                      goto LABEL_52;
                                    }
LABEL_50:
                                    __break(1u);
                                    goto LABEL_51;
                                  }
LABEL_49:
                                  __break(1u);
                                  goto LABEL_50;
                                }
LABEL_48:
                                __break(1u);
                                goto LABEL_49;
                              }
LABEL_47:
                              __break(1u);
                              goto LABEL_48;
                            }
LABEL_46:
                            __break(1u);
                            goto LABEL_47;
                          }
LABEL_45:
                          __break(1u);
                          goto LABEL_46;
                        }
LABEL_44:
                        __break(1u);
                        goto LABEL_45;
                      }
LABEL_43:
                      __break(1u);
                      goto LABEL_44;
                    }
LABEL_42:
                    __break(1u);
                    goto LABEL_43;
                  }
LABEL_41:
                  __break(1u);
                  goto LABEL_42;
                }
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_36;
  }
  id v93 = &type metadata for ApertureConfig;
  uint64_t v94 = &off_1000B43D8;
  type metadata accessor for ObservableStopwatchModel();
  sub_10003A524();
  swift_retain();
  uint64_t v91 = ObservedObject.init(wrappedValue:)();
  uint64_t v92 = v17;
  id v18 = (char *)objc_allocWithZone((Class)sub_100007830((uint64_t *)&unk_1000C7090));
  *(void *)&v18[*(void *)(qword_1000CACE0 + (swift_isaMask & *(void *)v18) + 16) + 8] = 0;
  swift_unknownObjectWeakInit();
  sub_10004F684((uint64_t)&v91, (uint64_t)v90);
  id v19 = (void *)UIHostingController.init(rootView:)();
  sub_10004F6E0((uint64_t)&v91);
  id v20 = [v19 view];
  if (!v20)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  id v21 = v20;
  [v20 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v22 = [v19 view];
  if (!v22)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v23 = v22;
  id v24 = [v22 layer];

  [v24 setAllowsHitTesting:0];
  [v1 addChildViewController:v19];
  id v25 = [v1 view];
  if (!v25)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  double v26 = v25;
  id v27 = [v19 view];
  if (v27)
  {
    id v28 = v27;
    [v26 addSubview:v27];

    [v19 didMoveToParentViewController:v1];
    id v29 = *(void **)&v1[v16];
    *(void *)&v1[v16] = v19;

    goto LABEL_13;
  }
LABEL_61:
  __break(1u);
}

void sub_100089D2C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView);
  if (v1)
  {
    id v2 = [v1 view];
    if (v2)
    {
      uint64_t v3 = v2;
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      [v3 setHidden:v4 < 2];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100089E0C()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView];
  if (v1)
  {
    id v2 = v0;
    id v3 = v1;
    id v4 = [v0 view];
    if (v4)
    {
      CGFloat v5 = v4;
      [v4 addSubview:v3];

      id v6 = sub_10008C3E4();
      if (v6)
      {
        uint64_t v7 = v6;
        id v8 = self;
        _StringGuts.grow(_:)(38);
        id v9 = [v2 description];
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        swift_bridgeObjectRelease();

        v10._unint64_t object = (void *)0x800000010009D200;
        v10._uint64_t countAndFlagsBits = 0xD000000000000024;
        String.append(_:)(v10);
        NSString v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v8 logInfo:v11];

        [v3 addSubview:v7];
        [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
        uint64_t v12 = self;
        sub_100007830((uint64_t *)&unk_1000C66F0);
        uint64_t v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_100095580;
        id v14 = [v7 leadingAnchor];
        id v15 = [v3 leadingAnchor];
        id v16 = [v14 constraintEqualToAnchor:v15];

        *(void *)(v13 + 32) = v16;
        id v17 = [v7 trailingAnchor];
        id v18 = [v3 trailingAnchor];
        id v19 = [v17 constraintEqualToAnchor:v18];

        *(void *)(v13 + 40) = v19;
        id v20 = [v7 topAnchor];
        id v21 = [v3 topAnchor];
        id v22 = [v20 constraintEqualToAnchor:v21];

        *(void *)(v13 + 48) = v22;
        id v23 = [v7 bottomAnchor];
        id v24 = [v3 bottomAnchor];
        id v25 = [v23 constraintEqualToAnchor:v24];

        *(void *)(v13 + 56) = v25;
        specialized Array._endMutation()();
        sub_100014314(0, (unint64_t *)&qword_1000C3FC0);
        id isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v12 activateConstraints:isa];

        id v3 = v7;
      }
      else
      {
        double v26 = self;
        _StringGuts.grow(_:)(50);
        id v27 = [v2 description];
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        swift_bridgeObjectRelease();

        v28._uint64_t countAndFlagsBits = 0xD000000000000030;
        v28._unint64_t object = (void *)0x800000010009D1C0;
        String.append(_:)(v28);
        id isa = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v26 logInfo:isa];
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10008A284(void *a1, double a2, double a3)
{
  id v4 = v3;
  id v8 = self;
  _StringGuts.grow(_:)(21);
  id v9 = [v3 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();

  v13._unint64_t object = (void *)0x800000010009CE30;
  v13._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 logInfo:v14, v10, v12];

  v19.receiver = v3;
  v19.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  [super viewWillTransitionToSize:a1 withTransitionCoordinator:a2];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v3;
  v18[4] = sub_10008CA1C;
  _OWORD v18[5] = v15;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  double v18[2] = sub_10008822C;
  v18[3] = &unk_1000B5C50;
  id v16 = _Block_copy(v18);
  id v17 = v4;
  swift_release();
  [a1 animateAlongsideTransition:v16 completion:0];
  _Block_release(v16);
}

void sub_10008A45C(uint64_t a1, char *a2)
{
  switch(*(void *)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_activeLayoutMode])
  {
    case 0:
      id v3 = self;
      _StringGuts.grow(_:)(31);
      id v4 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      CGFloat v5 = " transitioned to initial view";
      goto LABEL_18;
    case 1:
      id v3 = self;
      _StringGuts.grow(_:)(32);
      id v28 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      unint64_t v26 = 0xD00000000000001ELL;
      id v27 = " transitioned to inactive view";
      goto LABEL_16;
    case 2:
      id v3 = self;
      _StringGuts.grow(_:)(31);
      id v30 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      CGFloat v5 = " transitioned to minimal view";
LABEL_18:
      unint64_t v29 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v26 = 0xD00000000000001DLL;
      goto LABEL_19;
    case 3:
      id v31 = self;
      _StringGuts.grow(_:)(31);
      id v32 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      v33._unint64_t object = (void *)0x800000010009A800;
      v33._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v33);
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v31 logInfo:v34];

      id v35 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView];
      if (!v35) {
        goto LABEL_38;
      }
      id v36 = [v35 view];
      if (!v36) {
        goto LABEL_39;
      }
      uint64_t v37 = v36;
      [v36 setHidden:1];

      id v38 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView];
      if (!v38) {
        goto LABEL_40;
      }
      id v39 = [v38 view];
      if (!v39) {
        goto LABEL_41;
      }
      id v40 = v39;
      [v39 setHidden:1];

      id v41 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView];
      if (v41) {
        [v41 setHidden:0];
      }
      id v42 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView];
      if (v42)
      {
        [v42 setHidden:0];
      }
      return;
    case 4:
      _StringGuts.grow(_:)(67);
      id v6 = [a2 description];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v9 = v8;

      v10._uint64_t countAndFlagsBits = v7;
      v10._unint64_t object = v9;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
      v11._unint64_t object = (void *)0x800000010009D2C0;
      String.append(_:)(v11);
      uint64_t v12 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch];
      if (!v12)
      {
        __break(1u);
        goto LABEL_34;
      }
      Swift::String v13 = self;
      [v12 state];
      type metadata accessor for MTStopwatchState(0);
      _print_unlocked<A, B>(_:_:)();
      v14._uint64_t countAndFlagsBits = 0x6D2077656976202CLL;
      v14._unint64_t object = (void *)0xEE00203A6C65646FLL;
      String.append(_:)(v14);
      sub_100007830(&qword_1000C70A8);
      _print_unlocked<A, B>(_:_:)();
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v13 logInfo:v15];

      id v16 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView];
      if (!v16)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      id v17 = [v16 view];
      if (!v17)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      id v18 = v17;
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      [v18 setHidden:1];

      objc_super v19 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView];
      if (!v19)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        JUMPOUT(0x10008AB68);
      }
      id v20 = [v19 view];
      if (!v20) {
        goto LABEL_37;
      }
      id v21 = v20;
      [v20 setHidden:0];

      id v22 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView];
      if (v22) {
        [v22 setHidden:1];
      }
      id v23 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView];
      if (v23) {
        [v23 setHidden:1];
      }
      id v24 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView];
      if (v24) {
        [v24 setHidden:1];
      }
      return;
    default:
      id v3 = self;
      _StringGuts.grow(_:)(35);
      id v25 = [a2 description];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      unint64_t v26 = 0xD000000000000021;
      id v27 = " transitioned to other view state";
LABEL_16:
      unint64_t v29 = (unint64_t)(v27 - 32) | 0x8000000000000000;
LABEL_19:
      String.append(_:)(*(Swift::String *)&v26);
      NSString v43 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v3 logInfo:v43];

      return;
  }
}

uint64_t sub_10008ABFC(char a1, char a2, double a3, double a4, long double a5, double a6)
{
  v31.receiver = v6;
  v31.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  [super didUpdateCurrentInterval:a1 & 1 adjustedCurrentInterval:a2 & 1 totalInterval:a3 adjustedTotalInterval:a4 isStopwatchRunning:a5 isStopwatchStopped:a6];
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100098A50;
  *(void *)(inited + 32) = *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation];
  *(void *)(inited + 40) = *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation];
  *(void *)&v30.CGFloat m11 = inited;
  specialized Array._endMutation()();
  CGFloat m11 = v30.m11;
  NSString v15 = self;
  double v16 = fmod(a5, 60.0) / 60.0 * 360.0;
  unint64_t v17 = *(void *)&v30.m11 & 0xC000000000000001;
  swift_retain();
  swift_retain();
  if ((*(void *)&v30.m11 & 0xC000000000000001) != 0)
  {
    uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v18 = *(void *)(*(void *)&v30.m11 + 32);
    swift_retain();
  }
  double v19 = 360.0 - v16;
  [v15 setDisableActions:1, *(void *)&v30.m11];
  id v20 = *(void **)(v18 + 32);
  if (v20)
  {
    id v21 = self;
    id v22 = v20;
    [v21 radFromDeg:v19];
    CATransform3DMakeRotation(&v30, v23, 0.0, 0.0, 1.0);
    [v22 setTransform:&v30];
    swift_release();

    if (v17)
    {
LABEL_6:
      uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_9;
    }
  }
  else
  {
    swift_release();
    if (v17) {
      goto LABEL_6;
    }
  }
  uint64_t v24 = *(void *)(*(void *)&m11 + 40);
  swift_retain();
LABEL_9:
  [v15 setDisableActions:1];
  id v25 = *(void **)(v24 + 32);
  if (v25)
  {
    unint64_t v26 = self;
    id v27 = v25;
    [v26 radFromDeg:v19];
    CATransform3DMakeRotation(&v30, v28, 0.0, 0.0, 1.0);
    [v27 setTransform:&v30];
    swift_release();
  }
  else
  {
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

void sub_10008AF58()
{
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  [super didPauseLapTimer];
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100098A50;
  *(void *)(inited + 32) = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation];
  *(void *)(inited + 40) = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation];
  uint64_t v11 = inited;
  specialized Array._endMutation()();
  unint64_t v2 = v11 & 0xC000000000000001;
  swift_retain();
  swift_retain();
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v3 = *(void *)(v11 + 32);
    swift_retain();
  }
  id v4 = *(void **)(v3 + 16);
  if (v4)
  {
    id v5 = v4;
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setState:v6];
    swift_release();

    if (v2) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v10 = *(void *)(v11 + 40);
    swift_retain();
    uint64_t v7 = *(void **)(v10 + 16);
    if (v7) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  swift_release();
  if (!v2) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v7 = *(void **)(specialized _ArrayBuffer._getElementSlowPath(_:)() + 16);
  if (v7)
  {
LABEL_7:
    id v8 = v7;
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 setState:v9];
    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  swift_release();
}

void sub_10008B15C()
{
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  [super didResumeLapTimer];
  sub_100007830((uint64_t *)&unk_1000C66F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100098A50;
  *(void *)(inited + 32) = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation];
  *(void *)(inited + 40) = *(void *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation];
  uint64_t v11 = inited;
  specialized Array._endMutation()();
  unint64_t v2 = v11 & 0xC000000000000001;
  swift_retain();
  swift_retain();
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v3 = *(void *)(v11 + 32);
    swift_retain();
  }
  id v4 = *(void **)(v3 + 16);
  if (v4)
  {
    id v5 = v4;
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setState:v6];
    swift_release();

    if (v2) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v10 = *(void *)(v11 + 40);
    swift_retain();
    uint64_t v7 = *(void **)(v10 + 16);
    if (v7) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  swift_release();
  if (!v2) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v7 = *(void **)(specialized _ArrayBuffer._getElementSlowPath(_:)() + 16);
  if (v7)
  {
LABEL_7:
    id v8 = v7;
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 setState:v9];
    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  swift_release();
}

char *sub_10008B368(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v3 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_presentationBehaviors] = 9;
  *(void *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_activeLayoutMode] = 0;
  *(void *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_contentRole] = 2;
  *(void *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_preferredLayoutMode] = 3;
  *(void *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_maximumLayoutMode] = 4;
  NSString v6 = self;
  uint64_t v7 = v2;
  id v8 = [v6 mtURLForSection:3];
  if (v8)
  {
    NSString v9 = v8;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
  }
  sub_10000F834((uint64_t)v5, (uint64_t)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_launchURL], (uint64_t *)&unk_1000C3FF0);
  objc_super v12 = &v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_associatedAppBundleIdentifier];
  *(void *)objc_super v12 = 0xD000000000000015;
  *((void *)v12 + 1) = 0x800000010009A860;
  Swift::String v13 = &v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_timerObserverIdentifier];
  *(void *)Swift::String v13 = 0xD00000000000001ELL;
  *((void *)v13 + 1) = 0x800000010009D2A0;
  Swift::String v14 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(void *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  uint64_t v15 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView;
  type metadata accessor for TimerApertureAccessoryView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v17 = objc_allocWithZone(ObjCClassFromMetadata);
  id v18 = v14;
  *(void *)&v7[v15] = [v17 init];
  uint64_t v19 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView;
  *(void *)&v7[v19] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v20 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView;
  *(void *)&v7[v20] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v21 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_keyColor;
  *(void *)&v7[v21] = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.622 blue:0.044 alpha:1.0];
  *(void *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedLeadingView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customLeadingView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView] = 0;
  uint64_t v22 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation;
  type metadata accessor for StopwatchRunningAnimation(0);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  uint64_t v24 = v23 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  uint64_t v25 = type metadata accessor for TimerSessionEntry(0);
  unint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
  v26(v24, 1, 1, v25);
  *(void *)(v23 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(void *)&v7[v22] = v23;
  uint64_t v27 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation;
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  v26(v28 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry, 1, 1, v25);
  *(void *)(v28 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(void *)&v7[v27] = v28;

  return sub_10000FEAC(v30, v31);
}

id sub_10008B754(void *a1)
{
  Swift::String v33 = a1;
  uint64_t v2 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_presentationBehaviors] = 9;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_activeLayoutMode] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_contentRole] = 2;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_preferredLayoutMode] = 3;
  *(void *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_maximumLayoutMode] = 4;
  id v5 = self;
  NSString v6 = v1;
  id v7 = [v5 mtURLForSection:3];
  if (v7)
  {
    id v8 = v7;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 0, 1, v9);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
  }
  sub_10000F834((uint64_t)v4, (uint64_t)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_launchURL], (uint64_t *)&unk_1000C3FF0);
  uint64_t v11 = &v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_associatedAppBundleIdentifier];
  *(void *)uint64_t v11 = 0xD000000000000015;
  *((void *)v11 + 1) = 0x800000010009A860;
  objc_super v12 = &v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_timerObserverIdentifier];
  *(void *)objc_super v12 = 0xD00000000000001ELL;
  *((void *)v12 + 1) = 0x800000010009D2A0;
  Swift::String v13 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  uint64_t v14 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView;
  type metadata accessor for TimerApertureAccessoryView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v16 = objc_allocWithZone(ObjCClassFromMetadata);
  id v17 = v13;
  *(void *)&v6[v14] = [v16 init];
  uint64_t v18 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView;
  *(void *)&v6[v18] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v19 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView;
  *(void *)&v6[v19] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v20 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_keyColor;
  *(void *)&v6[v20] = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.622 blue:0.044 alpha:1.0];
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedLeadingView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customLeadingView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView] = 0;
  uint64_t v21 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation;
  type metadata accessor for StopwatchRunningAnimation(0);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  uint64_t v23 = v22 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  uint64_t v24 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  *(void *)(v22 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(void *)&v6[v21] = v22;
  uint64_t v26 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  v25(v27 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry, 1, 1, v24);
  *(void *)(v27 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(void *)&v6[v26] = v27;

  uint64_t v28 = (objc_class *)type metadata accessor for StopwatchApertureController(0);
  v34.receiver = v6;
  v34.super_class = v28;
  unint64_t v29 = v33;
  [super initWithCoder:v33];

  return v30;
}

id sub_10008BB8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v38 = a3;
  v36[1] = a1;
  uint64_t v5 = sub_100007830((uint64_t *)&unk_1000C3FF0);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_presentationBehaviors] = 9;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_activeLayoutMode] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_contentRole] = 2;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_preferredLayoutMode] = 3;
  *(void *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_maximumLayoutMode] = 4;
  id v8 = self;
  uint64_t v9 = v3;
  id v10 = [v8 mtURLForSection:3];
  uint64_t v37 = a2;
  if (v10)
  {
    uint64_t v11 = v10;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 0, 1, v12);
  }
  else
  {
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
  }
  sub_10000F834((uint64_t)v7, (uint64_t)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_launchURL], (uint64_t *)&unk_1000C3FF0);
  uint64_t v14 = &v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_associatedAppBundleIdentifier];
  *(void *)uint64_t v14 = 0xD000000000000015;
  *((void *)v14 + 1) = 0x800000010009A860;
  uint64_t v15 = &v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_timerObserverIdentifier];
  *(void *)uint64_t v15 = 0xD00000000000001ELL;
  *((void *)v15 + 1) = 0x800000010009D2A0;
  id v16 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  uint64_t v17 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView;
  type metadata accessor for TimerApertureAccessoryView();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v19 = objc_allocWithZone(ObjCClassFromMetadata);
  id v20 = v16;
  *(void *)&v9[v17] = [v19 init];
  uint64_t v21 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView;
  *(void *)&v9[v21] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v22 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView;
  *(void *)&v9[v22] = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v23 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_keyColor;
  *(void *)&v9[v23] = [objc_allocWithZone((Class)UIColor) initWithRed:1.0 green:0.622 blue:0.044 alpha:1.0];
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedLeadingView] = 0;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView] = 0;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customLeadingView] = 0;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView] = 0;
  *(void *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView] = 0;
  uint64_t v24 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation;
  type metadata accessor for StopwatchRunningAnimation(0);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  uint64_t v26 = v25 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  uint64_t v27 = type metadata accessor for TimerSessionEntry(0);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  *(void *)(v25 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(void *)&v9[v24] = v25;
  uint64_t v29 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  v28(v30 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry, 1, 1, v27);
  *(void *)(v30 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(void *)&v9[v29] = v30;

  if (v37)
  {
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v31 = 0;
  }
  uint64_t v32 = (objc_class *)type metadata accessor for StopwatchApertureController(0);
  v39.receiver = v9;
  v39.super_class = v32;
  Swift::String v33 = v38;
  id v34 = [super initWithNibName:v31 bundle:v38];

  return v34;
}

uint64_t sub_10008C038()
{
  sub_10000FAF8(v0 + OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_launchURL, (uint64_t *)&unk_1000C3FF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_release();
}

id sub_10008C158()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  return [super dealloc];
}

uint64_t sub_10008C2BC()
{
  return type metadata accessor for StopwatchApertureController(0);
}

uint64_t type metadata accessor for StopwatchApertureController(uint64_t a1)
{
  return sub_10000CB50(a1, qword_1000C6EF0);
}

void sub_10008C2E4()
{
  sub_1000864F8(319, (unint64_t *)&qword_1000C6BF0, (void (*)(uint64_t))&type metadata accessor for URL);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

id sub_10008C3E4()
{
  uint64_t v1 = v0;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = [self bundleForClass:ObjCClassFromMetadata];
  id v4 = objc_allocWithZone((Class)BSUICAPackageView);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithPackageName:v5 inBundle:v3];

  if (!v6)
  {
    uint64_t v9 = self;
    v26.CGFloat m11 = 0.0;
    v26.m12 = -2.68156159e154;
    _StringGuts.grow(_:)(52);
    *(void *)&v28[0] = v1;
    type metadata accessor for StopwatchRunningAnimation(0);
    _print_unlocked<A, B>(_:_:)();
    v10._uint64_t countAndFlagsBits = 0xD000000000000032;
    v10._unint64_t object = (void *)0x800000010009D160;
    String.append(_:)(v10);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 logInfo:v11 *(_OWORD *)&v26.m11];
    id v6 = 0;
    goto LABEL_12;
  }
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 publishedObjectWithName:v7];

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v28, 0, sizeof(v28));
  }
  sub_10000F834((uint64_t)v28, (uint64_t)&v26, &qword_1000C5370);
  if (!*(void *)&v26.m14)
  {
    sub_10000FAF8((uint64_t)&v26, &qword_1000C5370);
    goto LABEL_11;
  }
  sub_100014314(0, (unint64_t *)&unk_1000C7080);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    uint64_t v23 = self;
    v26.CGFloat m11 = 0.0;
    v26.m12 = -2.68156159e154;
    _StringGuts.grow(_:)(40);
    *(void *)&v28[0] = v1;
    type metadata accessor for StopwatchRunningAnimation(0);
    _print_unlocked<A, B>(_:_:)();
    v24._uint64_t countAndFlagsBits = 0xD000000000000026;
    v24._unint64_t object = (void *)0x800000010009CAC0;
    String.append(_:)(v24);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v23 logInfo:v11];
    goto LABEL_12;
  }
  uint64_t v12 = v27;
  uint64_t v13 = self;
  v26.CGFloat m11 = 0.0;
  v26.m12 = -2.68156159e154;
  _StringGuts.grow(_:)(33);
  *(void *)&v28[0] = v1;
  type metadata accessor for StopwatchRunningAnimation(0);
  _print_unlocked<A, B>(_:_:)();
  v14._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v14._unint64_t object = (void *)0x800000010009D1A0;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 logInfo:v15];

  id v16 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v6;
  id v17 = v6;

  uint64_t v18 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = v12;
  NSString v11 = v12;

  [self setDisableActions:1];
  id v19 = *(void **)(v1 + 32);
  if (v19)
  {
    id v20 = self;
    id v21 = v19;
    [v20 radFromDeg:360.0];
    CATransform3DMakeRotation(&v26, v22, 0.0, 0.0, 1.0);
    [v21 setTransform:&v26];

    NSString v11 = v21;
  }
LABEL_12:

  return v6;
}

uint64_t sub_10008C860()
{
  sub_10000FAF8((uint64_t)v0 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry, &qword_1000C5390);

  return swift_deallocClassInstance();
}

uint64_t sub_10008C8EC()
{
  return type metadata accessor for StopwatchRunningAnimation(0);
}

uint64_t type metadata accessor for StopwatchRunningAnimation(uint64_t a1)
{
  return sub_10000CB50(a1, (uint64_t *)&unk_1000C6F30);
}

void sub_10008C914()
{
  sub_1000864F8(319, (unint64_t *)&unk_1000C6F40, (void (*)(uint64_t))type metadata accessor for TimerSessionEntry);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10008C9E4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10008CA1C(uint64_t a1)
{
  sub_10008A45C(a1, *(char **)(v1 + 16));
}

uint64_t sub_10008CA24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008CA34()
{
  return swift_release();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t static Measurement.== infix<A, B>(_:_:)()
{
  return static Measurement.== infix<A, B>(_:_:)();
}

uint64_t Measurement.unit.getter()
{
  return Measurement.unit.getter();
}

uint64_t Measurement.init(value:unit:)()
{
  return Measurement.init(value:unit:)();
}

uint64_t Measurement.value.getter()
{
  return Measurement.value.getter();
}

uint64_t Measurement<>.converted(to:)()
{
  return Measurement<>.converted(to:)();
}

uint64_t type metadata accessor for Measurement()
{
  return type metadata accessor for Measurement();
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  return (NSDateInterval)DateInterval._bridgeToObjectiveC()();
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t DateComponents.hour.getter()
{
  return DateComponents.hour.getter();
}

uint64_t DateComponents.hour.setter()
{
  return DateComponents.hour.setter();
}

uint64_t DateComponents.minute.getter()
{
  return DateComponents.minute.getter();
}

uint64_t DateComponents.minute.setter()
{
  return DateComponents.minute.setter();
}

uint64_t DateComponents.second.getter()
{
  return DateComponents.second.getter();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._unint64_t object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t static Locale.MeasurementSystem.== infix(_:_:)()
{
  return static Locale.MeasurementSystem.== infix(_:_:)();
}

uint64_t static Locale.MeasurementSystem.us.getter()
{
  return static Locale.MeasurementSystem.us.getter();
}

uint64_t type metadata accessor for Locale.MeasurementSystem()
{
  return type metadata accessor for Locale.MeasurementSystem();
}

uint64_t Locale.measurementSystem.getter()
{
  return Locale.measurementSystem.getter();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t Calendar.init(identifier:)()
{
  return Calendar.init(identifier:)();
}

uint64_t type metadata accessor for Calendar.MatchingPolicy()
{
  return type metadata accessor for Calendar.MatchingPolicy();
}

uint64_t Calendar.dateComponents(_:from:to:)()
{
  return Calendar.dateComponents(_:from:to:)();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return Calendar.dateComponents(_:from:)();
}

uint64_t type metadata accessor for Calendar.SearchDirection()
{
  return type metadata accessor for Calendar.SearchDirection();
}

uint64_t type metadata accessor for Calendar.RepeatedTimePolicy()
{
  return type metadata accessor for Calendar.RepeatedTimePolicy();
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  return (NSCalendar)Calendar._bridgeToObjectiveC()();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t Calendar.date(_:matchesComponents:)()
{
  return Calendar.date(_:matchesComponents:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)()
{
  return Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t static TimeZone.current.getter()
{
  return static TimeZone.current.getter();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t CurrentWeather.symbolName.getter()
{
  return CurrentWeather.symbolName.getter();
}

uint64_t CurrentWeather.temperature.getter()
{
  return CurrentWeather.temperature.getter();
}

uint64_t type metadata accessor for CurrentWeather()
{
  return type metadata accessor for CurrentWeather();
}

uint64_t static WeatherQuery.current.getter()
{
  return static WeatherQuery.current.getter();
}

uint64_t WeatherService.__allocating_init()()
{
  return WeatherService.__allocating_init()();
}

uint64_t type metadata accessor for WeatherService()
{
  return type metadata accessor for WeatherService();
}

uint64_t ActivityDescriptor.attributesData.getter()
{
  return ActivityDescriptor.attributesData.getter();
}

uint64_t ActivityDescriptor.attributesType.getter()
{
  return ActivityDescriptor.attributesType.getter();
}

uint64_t type metadata accessor for ActivityDescriptor()
{
  return type metadata accessor for ActivityDescriptor();
}

uint64_t static ActivityAttributesType.== infix(_:_:)()
{
  return static ActivityAttributesType.== infix(_:_:)();
}

uint64_t ActivityAttributesType.init<A>(from:)()
{
  return ActivityAttributesType.init<A>(from:)();
}

uint64_t type metadata accessor for ActivityAttributesType()
{
  return type metadata accessor for ActivityAttributesType();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.init()()
{
  return ObservationRegistrar.init()();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return type metadata accessor for ObservationRegistrar();
}

uint64_t dispatch thunk of ProminentPresentationAssertion.invalidate()()
{
  return dispatch thunk of ProminentPresentationAssertion.invalidate()();
}

uint64_t ProminentPresentationAssertion.init(explanation:activityIdentifier:duration:invalidationHandler:)()
{
  return ProminentPresentationAssertion.init(explanation:activityIdentifier:duration:invalidationHandler:)();
}

uint64_t dispatch thunk of ProminentPresentationAssertion.activityIdentifier.getter()
{
  return dispatch thunk of ProminentPresentationAssertion.activityIdentifier.getter();
}

uint64_t type metadata accessor for ProminentPresentationAssertion()
{
  return type metadata accessor for ProminentPresentationAssertion();
}

uint64_t ActivitySceneMetrics.init(size:cornerRadius:)()
{
  return ActivitySceneMetrics.init(size:cornerRadius:)();
}

uint64_t type metadata accessor for ActivitySceneMetrics()
{
  return type metadata accessor for ActivitySceneMetrics();
}

uint64_t dispatch thunk of ActivityScene.subscript.getter()
{
  return dispatch thunk of ActivityScene.subscript.getter();
}

uint64_t dispatch thunk of ActivityScene.resolvedMetrics.setter()
{
  return dispatch thunk of ActivityScene.resolvedMetrics.setter();
}

uint64_t dispatch thunk of ActivityScene.backgroundTintColor.setter()
{
  return dispatch thunk of ActivityScene.backgroundTintColor.setter();
}

uint64_t dispatch thunk of ActivityScene.textColor.setter()
{
  return dispatch thunk of ActivityScene.textColor.setter();
}

uint64_t type metadata accessor for ActivityScene()
{
  return type metadata accessor for ActivityScene();
}

uint64_t SceneSettingScopes.ActivitySettings.activityDescriptor.getter()
{
  return SceneSettingScopes.ActivitySettings.activityDescriptor.getter();
}

uint64_t TimerActivityAttributes.context.getter()
{
  return TimerActivityAttributes.context.getter();
}

uint64_t type metadata accessor for TimerActivityAttributes()
{
  return type metadata accessor for TimerActivityAttributes();
}

uint64_t dispatch thunk of TimerContext.firing.getter()
{
  return dispatch thunk of TimerContext.firing.getter();
}

uint64_t dispatch thunk of TimerContext.timerId.getter()
{
  return dispatch thunk of TimerContext.timerId.getter();
}

uint64_t dispatch thunk of AlarmContext.alarmId.getter()
{
  return dispatch thunk of AlarmContext.alarmId.getter();
}

uint64_t dispatch thunk of AlarmContext.isSnoozed.getter()
{
  return dispatch thunk of AlarmContext.isSnoozed.getter();
}

uint64_t dispatch thunk of static MTSUtilities.launchClockAppIfPossible(_:)()
{
  return dispatch thunk of static MTSUtilities.launchClockAppIfPossible(_:)();
}

uint64_t type metadata accessor for MTSUtilities()
{
  return type metadata accessor for MTSUtilities();
}

uint64_t StopwatchContext.id.getter()
{
  return StopwatchContext.id.getter();
}

uint64_t type metadata accessor for StopwatchContext()
{
  return type metadata accessor for StopwatchContext();
}

uint64_t dispatch thunk of StopwatchViewModel.getStopwatch()()
{
  return dispatch thunk of StopwatchViewModel.getStopwatch()();
}

uint64_t dispatch thunk of StopwatchViewModel.lapLapTimer()()
{
  return dispatch thunk of StopwatchViewModel.lapLapTimer()();
}

uint64_t dispatch thunk of StopwatchViewModel.pauseLapTimer()()
{
  return dispatch thunk of StopwatchViewModel.pauseLapTimer()();
}

uint64_t dispatch thunk of StopwatchViewModel.resetLapTimer()()
{
  return dispatch thunk of StopwatchViewModel.resetLapTimer()();
}

uint64_t dispatch thunk of StopwatchViewModel.resumeLapTimer()()
{
  return dispatch thunk of StopwatchViewModel.resumeLapTimer()();
}

uint64_t dispatch thunk of StopwatchViewModel.updateTime()()
{
  return dispatch thunk of StopwatchViewModel.updateTime()();
}

uint64_t dispatch thunk of StopwatchViewModel.invalidateDisplayLink()()
{
  return dispatch thunk of StopwatchViewModel.invalidateDisplayLink()();
}

uint64_t dispatch thunk of StopwatchViewModel.updateWithDisplayLink()()
{
  return dispatch thunk of StopwatchViewModel.updateWithDisplayLink()();
}

uint64_t StopwatchViewModel.init(stopwatch:manager:delegate:dateProvider:registerForNotifications:broadcastUpdates:)()
{
  return StopwatchViewModel.init(stopwatch:manager:delegate:dateProvider:registerForNotifications:broadcastUpdates:)();
}

uint64_t type metadata accessor for StopwatchViewModel()
{
  return type metadata accessor for StopwatchViewModel();
}

Swift::String_optional __swiftcall StopwatchAutoFormatter.formatInterval(_:)(Swift::Double a1)
{
  uint64_t v1 = StopwatchAutoFormatter.formatInterval(_:)(a1);
  result.value._unint64_t object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t StopwatchAutoFormatter.init()()
{
  return StopwatchAutoFormatter.init()();
}

uint64_t type metadata accessor for StopwatchAutoFormatter()
{
  return type metadata accessor for StopwatchAutoFormatter();
}

uint64_t AlarmActivityAttributes.context.getter()
{
  return AlarmActivityAttributes.context.getter();
}

uint64_t type metadata accessor for AlarmActivityAttributes()
{
  return type metadata accessor for AlarmActivityAttributes();
}

uint64_t dispatch thunk of StopwatchActivityAttributes.context.getter()
{
  return dispatch thunk of StopwatchActivityAttributes.context.getter();
}

uint64_t type metadata accessor for StopwatchActivityAttributes()
{
  return type metadata accessor for StopwatchActivityAttributes();
}

uint64_t DataStore.init(identifier:)()
{
  return DataStore.init(identifier:)();
}

uint64_t dispatch thunk of DataStore.updateEntry(_:)()
{
  return dispatch thunk of DataStore.updateEntry(_:)();
}

uint64_t dispatch thunk of DataStore.registerObserver(_:for:)()
{
  return dispatch thunk of DataStore.registerObserver(_:for:)();
}

uint64_t dispatch thunk of DataStore.deregisterObserver(_:for:)()
{
  return dispatch thunk of DataStore.deregisterObserver(_:for:)();
}

uint64_t dispatch thunk of DataStore.clear(for:)()
{
  return dispatch thunk of DataStore.clear(for:)();
}

uint64_t dispatch thunk of DataStore.getEntry(for:)()
{
  return dispatch thunk of DataStore.getEntry(for:)();
}

uint64_t DataStore.deinit()
{
  return DataStore.deinit();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter()
{
  return dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t type metadata accessor for CombineIdentifier()
{
  return type metadata accessor for CombineIdentifier();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return dispatch thunk of Subscriber.receive(subscription:)();
}

uint64_t type metadata accessor for AnySubscriberBox()
{
  return type metadata accessor for AnySubscriberBox();
}

uint64_t AnySubscriberBox.__allocating_init(_:)()
{
  return AnySubscriberBox.__allocating_init(_:)();
}

uint64_t static ObservableObject.environmentStore.getter()
{
  return static ObservableObject.environmentStore.getter();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t dispatch thunk of AnySubscriberBase.receive(_:)()
{
  return dispatch thunk of AnySubscriberBase.receive(_:)();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t NWPathMonitor.pathUpdateHandler.setter()
{
  return NWPathMonitor.pathUpdateHandler.setter();
}

uint64_t NWPathMonitor.start(queue:)()
{
  return NWPathMonitor.start(queue:)();
}

Swift::Void __swiftcall NWPathMonitor.cancel()()
{
}

uint64_t NWPathMonitor.init()()
{
  return NWPathMonitor.init()();
}

uint64_t type metadata accessor for NWPathMonitor()
{
  return type metadata accessor for NWPathMonitor();
}

uint64_t static NWPath.Status.== infix(_:_:)()
{
  return static NWPath.Status.== infix(_:_:)();
}

uint64_t type metadata accessor for NWPath.Status()
{
  return type metadata accessor for NWPath.Status();
}

uint64_t NWPath.status.getter()
{
  return NWPath.status.getter();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t static AlignmentID._combineExplicit(childValue:_:into:)()
{
  return static AlignmentID._combineExplicit(childValue:_:into:)();
}

uint64_t type metadata accessor for Environment.Content()
{
  return type metadata accessor for Environment.Content();
}

uint64_t StateObject.wrappedValue.getter()
{
  return StateObject.wrappedValue.getter();
}

uint64_t Transaction.disablesAnimations.getter()
{
  return Transaction.disablesAnimations.getter();
}

uint64_t Transaction.animation.setter()
{
  return Transaction.animation.setter();
}

uint64_t TimelineView.Context.date.getter()
{
  return TimelineView.Context.date.getter();
}

uint64_t TimelineView<>.init(_:content:)()
{
  return TimelineView<>.init(_:content:)();
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t static AnyTransition.move(edge:)()
{
  return static AnyTransition.move(edge:)();
}

uint64_t static AnyTransition.scale.getter()
{
  return static AnyTransition.scale.getter();
}

uint64_t AnyTransition.combined(with:)()
{
  return AnyTransition.combined(with:)();
}

uint64_t AnyTransition.init<A>(_:)()
{
  return AnyTransition.init<A>(_:)();
}

uint64_t GeometryProxy.safeAreaInsets.getter()
{
  return GeometryProxy.safeAreaInsets.getter();
}

uint64_t GeometryProxy.size.getter()
{
  return GeometryProxy.size.getter();
}

uint64_t withAnimation<A>(_:_:)()
{
  return withAnimation<A>(_:_:)();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t ViewDimensions.subscript.getter()
{
  return ViewDimensions.subscript.getter();
}

uint64_t type metadata accessor for DynamicTypeSize()
{
  return type metadata accessor for DynamicTypeSize();
}

uint64_t ModifiedContent<>.accessibilityIdentifier(_:)()
{
  return ModifiedContent<>.accessibilityIdentifier(_:)();
}

uint64_t SlideTransition.init()()
{
  return SlideTransition.init()();
}

uint64_t type metadata accessor for SlideTransition()
{
  return type metadata accessor for SlideTransition();
}

uint64_t type metadata accessor for RoundedRectangle()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t type metadata accessor for _BlendModeEffect()
{
  return type metadata accessor for _BlendModeEffect();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t static ContentShapeKinds.accessibility.getter()
{
  return static ContentShapeKinds.accessibility.getter();
}

uint64_t type metadata accessor for ContentShapeKinds()
{
  return type metadata accessor for ContentShapeKinds();
}

uint64_t static ContentTransition.numericText(countsDown:)()
{
  return static ContentTransition.numericText(countsDown:)();
}

uint64_t static ContentTransition.Style.sessionWidget.getter()
{
  return static ContentTransition.Style.sessionWidget.getter();
}

uint64_t type metadata accessor for ContentTransition.Style()
{
  return type metadata accessor for ContentTransition.Style();
}

uint64_t static ContentTransition.Options.animatesDifferentContent.getter()
{
  return static ContentTransition.Options.animatesDifferentContent.getter();
}

uint64_t type metadata accessor for ContentTransition()
{
  return type metadata accessor for ContentTransition();
}

uint64_t EnvironmentObject.error()()
{
  return EnvironmentObject.error()();
}

uint64_t EnvironmentObject.init()()
{
  return EnvironmentObject.init()();
}

uint64_t EnvironmentValues.truncationMode.getter()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t EnvironmentValues.truncationMode.setter()
{
  return EnvironmentValues.truncationMode.setter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues.allowsTightening.getter()
{
  return EnvironmentValues.allowsTightening.getter();
}

uint64_t EnvironmentValues.allowsTightening.setter()
{
  return EnvironmentValues.allowsTightening.setter();
}

uint64_t EnvironmentValues.isLuminanceReduced.getter()
{
  return EnvironmentValues.isLuminanceReduced.getter();
}

uint64_t EnvironmentValues.isLuminanceReduced.setter()
{
  return EnvironmentValues.isLuminanceReduced.setter();
}

uint64_t EnvironmentValues.minimumScaleFactor.getter()
{
  return EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t EnvironmentValues.minimumScaleFactor.setter()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t EnvironmentValues.fontResolutionContext.getter()
{
  return EnvironmentValues.fontResolutionContext.getter();
}

uint64_t EnvironmentValues.contentTransitionStyle.getter()
{
  return EnvironmentValues.contentTransitionStyle.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t EnvironmentValues.locale.getter()
{
  return EnvironmentValues.locale.getter();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t EnvironmentValues.init()()
{
  return EnvironmentValues.init()();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t static VerticalAlignment.lastTextBaseline.getter()
{
  return static VerticalAlignment.lastTextBaseline.getter();
}

uint64_t static VerticalAlignment.firstTextBaseline.getter()
{
  return static VerticalAlignment.firstTextBaseline.getter();
}

uint64_t static VerticalAlignment.top.getter()
{
  return static VerticalAlignment.top.getter();
}

uint64_t static VerticalAlignment.bottom.getter()
{
  return static VerticalAlignment.bottom.getter();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

uint64_t VerticalAlignment.init(_:)()
{
  return VerticalAlignment.init(_:)();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t LocalizedStringKey.init(_:)()
{
  return LocalizedStringKey.init(_:)();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t static HorizontalAlignment.trailing.getter()
{
  return static HorizontalAlignment.trailing.getter();
}

uint64_t UIHostingController.init(coder:rootView:)()
{
  return UIHostingController.init(coder:rootView:)();
}

uint64_t UIHostingController.init(rootView:)()
{
  return UIHostingController.init(rootView:)();
}

uint64_t dispatch thunk of UIHostingController.rootView.modify()
{
  return dispatch thunk of UIHostingController.rootView.modify();
}

uint64_t dispatch thunk of UIHostingController.rootView.setter()
{
  return dispatch thunk of UIHostingController.rootView.setter();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t static TimelineScheduleMode.== infix(_:_:)()
{
  return static TimelineScheduleMode.== infix(_:_:)();
}

uint64_t type metadata accessor for TimelineScheduleMode()
{
  return type metadata accessor for TimelineScheduleMode();
}

uint64_t BorderlessButtonStyle.init()()
{
  return BorderlessButtonStyle.init()();
}

uint64_t type metadata accessor for BorderlessButtonStyle()
{
  return type metadata accessor for BorderlessButtonStyle();
}

uint64_t static AccessibilityChildBehavior.combine.getter()
{
  return static AccessibilityChildBehavior.combine.getter();
}

uint64_t static AccessibilityChildBehavior.contain.getter()
{
  return static AccessibilityChildBehavior.contain.getter();
}

uint64_t type metadata accessor for AccessibilityChildBehavior()
{
  return type metadata accessor for AccessibilityChildBehavior();
}

uint64_t type metadata accessor for _ContentTransitionModifier()
{
  return type metadata accessor for _ContentTransitionModifier();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.all.getter()
{
  return static Edge.Set.all.getter();
}

uint64_t static Edge.Set.top.getter()
{
  return static Edge.Set.top.getter();
}

uint64_t static Edge.Set.bottom.getter()
{
  return static Edge.Set.bottom.getter();
}

uint64_t static Edge.Set.leading.getter()
{
  return static Edge.Set.leading.getter();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t Font.platformFont(in:)()
{
  return Font.platformFont(in:)();
}

uint64_t Font.monospacedDigit()()
{
  return Font.monospacedDigit()();
}

uint64_t type metadata accessor for Font._StylisticAlternative()
{
  return type metadata accessor for Font._StylisticAlternative();
}

uint64_t Font._stylisticAlternative(_:)()
{
  return Font._stylisticAlternative(_:)();
}

uint64_t type metadata accessor for Font.Design()
{
  return type metadata accessor for Font.Design();
}

uint64_t static Font.Weight.bold.getter()
{
  return static Font.Weight.bold.getter();
}

uint64_t static Font.Weight.thin.getter()
{
  return static Font.Weight.thin.getter();
}

uint64_t static Font.Weight.light.getter()
{
  return static Font.Weight.light.getter();
}

uint64_t static Font.Weight.medium.getter()
{
  return static Font.Weight.medium.getter();
}

uint64_t static Font.Weight.regular.getter()
{
  return static Font.Weight.regular.getter();
}

uint64_t static Font.Weight.semibold.getter()
{
  return static Font.Weight.semibold.getter();
}

uint64_t static Font.system(size:weight:design:)()
{
  return static Font.system(size:weight:design:)();
}

uint64_t static Font.system(_:design:weight:)()
{
  return static Font.system(_:design:weight:)();
}

uint64_t type metadata accessor for Font.Context()
{
  return type metadata accessor for Font.Context();
}

uint64_t type metadata accessor for Font.Leading()
{
  return type metadata accessor for Font.Leading();
}

uint64_t Font.leading(_:)()
{
  return Font.leading(_:)();
}

uint64_t type metadata accessor for Font.TextStyle()
{
  return type metadata accessor for Font.TextStyle();
}

uint64_t Font.init(_:)()
{
  return Font.init(_:)();
}

uint64_t Text.init(dateFormat:timeZone:)()
{
  return Text.init(dateFormat:timeZone:)();
}

uint64_t type metadata accessor for Text.TruncationMode()
{
  return type metadata accessor for Text.TruncationMode();
}

uint64_t Text.foregroundColor(_:)()
{
  return Text.foregroundColor(_:)();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t Text.monospacedDigit()()
{
  return Text.monospacedDigit()();
}

uint64_t static Text.+ infix(_:_:)()
{
  return static Text.+ infix(_:_:)();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t static Text.DateStyle.time.getter()
{
  return static Text.DateStyle.time.getter();
}

uint64_t type metadata accessor for Text.DateStyle()
{
  return type metadata accessor for Text.DateStyle();
}

uint64_t Text.init(_:style:)()
{
  return Text.init(_:style:)();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t static View._makeView(view:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

uint64_t View._colorMatrix(_:)()
{
  return View._colorMatrix(_:)();
}

uint64_t View.onTapGesture(count:perform:)()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t View.baselineOffset(_:)()
{
  return View.baselineOffset(_:)();
}

uint64_t View.dynamicTypeSize(_:)()
{
  return View.dynamicTypeSize(_:)();
}

uint64_t View.hyphenationFactor(_:)()
{
  return View.hyphenationFactor(_:)();
}

uint64_t View.accessibilityLabel(_:)()
{
  return View.accessibilityLabel(_:)();
}

{
  return View.accessibilityLabel(_:)();
}

uint64_t View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)()
{
  return View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)();
}

uint64_t View.accessibilityHidden(_:)()
{
  return View.accessibilityHidden(_:)();
}

uint64_t View.accessibilityElement(children:)()
{
  return View.accessibilityElement(children:)();
}

uint64_t View.accessibilityIdentifier(_:)()
{
  return View.accessibilityIdentifier(_:)();
}

uint64_t View.lineLimit(_:reservesSpace:)()
{
  return View.lineLimit(_:reservesSpace:)();
}

uint64_t Color.init(uiColor:)()
{
  return Color.init(uiColor:)();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t static Color.gray.getter()
{
  return static Color.gray.getter();
}

uint64_t static Color.black.getter()
{
  return static Color.black.getter();
}

uint64_t static Color.white.getter()
{
  return static Color.white.getter();
}

uint64_t static Color.orange.getter()
{
  return static Color.orange.getter();
}

uint64_t Color.opacity(_:)()
{
  return Color.opacity(_:)();
}

uint64_t static Color.secondary.getter()
{
  return static Color.secondary.getter();
}

uint64_t Color.init(_:white:opacity:)()
{
  return Color.init(_:white:opacity:)();
}

uint64_t Image.init(systemName:)()
{
  return Image.init(systemName:)();
}

uint64_t Image.init(_internalSystemName:)()
{
  return Image.init(_internalSystemName:)();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t static Material.coreMaterial(bundle:provider:)()
{
  return static Material.coreMaterial(bundle:provider:)();
}

uint64_t type metadata accessor for Material()
{
  return type metadata accessor for Material();
}

uint64_t static Alignment.bottomLeading.getter()
{
  return static Alignment.bottomLeading.getter();
}

uint64_t static Alignment.bottomTrailing.getter()
{
  return static Alignment.bottomTrailing.getter();
}

uint64_t static Alignment.top.getter()
{
  return static Alignment.top.getter();
}

uint64_t static Alignment.bottom.getter()
{
  return static Alignment.bottom.getter();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.leading.getter();
}

uint64_t static Alignment.trailing.getter()
{
  return static Alignment.trailing.getter();
}

uint64_t Animation.delay(_:)()
{
  return Animation.delay(_:)();
}

uint64_t static Animation.spring(response:dampingFraction:blendDuration:)()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t static Animation.default.getter()
{
  return static Animation.default.getter();
}

uint64_t static Animation.easeInOut(duration:)()
{
  return static Animation.easeInOut(duration:)();
}

uint64_t type metadata accessor for BlendMode()
{
  return type metadata accessor for BlendMode();
}

uint64_t static UnitPoint.center.getter()
{
  return static UnitPoint.center.getter();
}

uint64_t static UnitPoint.trailing.getter()
{
  return static UnitPoint.trailing.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t static Task<>.checkCancellation()()
{
  return static Task<>.checkCancellation()();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t static UISceneSessionRole.activityAmbient.getter()
{
  return static UISceneSessionRole.activityAmbient.getter();
}

uint64_t static UISceneSessionRole.activityAmbientCompact.getter()
{
  return static UISceneSessionRole.activityAmbientCompact.getter();
}

uint64_t NSMeasurementFormatter.string<A>(from:)()
{
  return NSMeasurementFormatter.string<A>(from:)();
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)()
{
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
}

uint64_t static UIButton.Configuration._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UIButton.Configuration._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for UIButton.Configuration()
{
  return type metadata accessor for UIButton.Configuration();
}

uint64_t UIButton.init(configuration:primaryAction:)()
{
  return UIButton.init(configuration:primaryAction:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t StringProtocol.localizedUppercase.getter()
{
  return StringProtocol.localizedUppercase.getter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static CommandLine.unsafeArgv.getter()
{
  return static CommandLine.unsafeArgv.getter();
}

uint64_t static CommandLine.argc.getter()
{
  return static CommandLine.argc.getter();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t dispatch thunk of Identifiable.id.getter()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t dispatch thunk of CustomReflectable.customMirror.getter()
{
  return dispatch thunk of CustomReflectable.customMirror.getter();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter()
{
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return type metadata accessor for Mirror.DisplayStyle();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return type metadata accessor for Mirror.AncestorRepresentation();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

CATransform3D *__cdecl CATransform3DMakeRotation(CATransform3D *__return_ptr retstr, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return _CATransform3DMakeRotation(retstr, angle, x, y, z);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return _CGAffineTransformRotate(retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformScale(retstr, t, sx, sy);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CTFontRef CTFontCreateWithNameAndOptions(CFStringRef name, CGFloat size, const CGAffineTransform *matrix, CTFontOptions options)
{
  return _CTFontCreateWithNameAndOptions(name, size, matrix, options);
}

CGFloat CTFontGetCapHeight(CTFontRef font)
{
  return _CTFontGetCapHeight(font);
}

uint64_t FormatTime()
{
  return _FormatTime();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

BOOL UIAccessibilityIsSwitchControlRunning(void)
{
  return _UIAccessibilityIsSwitchControlRunning();
}

BOOL UIAccessibilityIsVoiceOverRunning(void)
{
  return _UIAccessibilityIsVoiceOverRunning();
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

uint64_t _AXSCommandAndControlEnabled()
{
  return __AXSCommandAndControlEnabled();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

long double fmod(long double __x, long double __y)
{
  return _fmod(__x, __y);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unownedRelease()
{
  return _swift_unownedRelease();
}

uint64_t swift_unownedRetain()
{
  return _swift_unownedRetain();
}

uint64_t swift_unownedRetainStrong()
{
  return _swift_unownedRetainStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

id objc_msgSend__timeFormatDataAccessLock(void *a1, const char *a2, ...)
{
  return _[a1 _timeFormatDataAccessLock];
}

id objc_msgSend__timeLocaleForLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_timeLocaleForLocale:");
}

id objc_msgSend_abbreviatedHourDateFormatter(void *a1, const char *a2, ...)
{
  return _[a1 abbreviatedHourDateFormatter];
}

id objc_msgSend_abbreviatedHourMinuteDateFormatter(void *a1, const char *a2, ...)
{
  return _[a1 abbreviatedHourMinuteDateFormatter];
}

id objc_msgSend_addSuccessBlock_(void *a1, const char *a2, ...)
{
  return [a1 addSuccessBlock:];
}

id objc_msgSend_dateFormatFromTemplate_options_locale_(void *a1, const char *a2, ...)
{
  return [a1 dateFormatFromTemplate:options:locale:];
}

id objc_msgSend_doubleWidthNumberFormatter(void *a1, const char *a2, ...)
{
  return _[a1 doubleWidthNumberFormatter];
}

id objc_msgSend_flatMap_(void *a1, const char *a2, ...)
{
  return [a1 flatMap:];
}

id objc_msgSend_formatHourMin(void *a1, const char *a2, ...)
{
  return _[a1 formatHourMin];
}

id objc_msgSend_formatHourMinSec(void *a1, const char *a2, ...)
{
  return _[a1 formatHourMinSec];
}

id objc_msgSend_formatHourMinSecSubsec(void *a1, const char *a2, ...)
{
  return _[a1 formatHourMinSecSubsec];
}

id objc_msgSend_formatMin(void *a1, const char *a2, ...)
{
  return _[a1 formatMin];
}

id objc_msgSend_formatMinSec(void *a1, const char *a2, ...)
{
  return _[a1 formatMinSec];
}

id objc_msgSend_formatMinSecSubsec(void *a1, const char *a2, ...)
{
  return _[a1 formatMinSecSubsec];
}

id objc_msgSend_futureWithResult_(void *a1, const char *a2, ...)
{
  return [a1 futureWithResult:];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return [a1 hasPrefix:];
}

id objc_msgSend_initWithLocale_(void *a1, const char *a2, ...)
{
  return [a1 initWithLocale:];
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithLocaleIdentifier:];
}

id objc_msgSend_instanceForLocale_(void *a1, const char *a2, ...)
{
  return [a1 instanceForLocale:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 localeIdentifier];
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_na_firstObjectPassingTest_(void *a1, const char *a2, ...)
{
  return [a1 na_firstObjectPassingTest:];
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInteger:];
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectForKeyedSubscript:];
}

id objc_msgSend_setAllowedUnits_(void *a1, const char *a2, ...)
{
  return [a1 setAllowedUnits:];
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return [a1 setLocale:];
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return [a1 setNumberStyle:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setPositiveFormat_(void *a1, const char *a2, ...)
{
  return [a1 setPositiveFormat:];
}

id objc_msgSend_setUnitsStyle_(void *a1, const char *a2, ...)
{
  return [a1 setUnitsStyle:];
}

id objc_msgSend_singleWidthNumberFormatter(void *a1, const char *a2, ...)
{
  return _[a1 singleWidthNumberFormatter];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return [a1 stringByReplacingOccurrencesOfString:withString:];
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return [a1 stringFromNumber:];
}

id objc_msgSend_stringFromTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 stringFromTimeInterval:];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringFromIndex:];
}

id objc_msgSend_timerByUpdatingWithState_(void *a1, const char *a2, ...)
{
  return [a1 timerByUpdatingWithState:];
}

id objc_msgSend_timerIDString(void *a1, const char *a2, ...)
{
  return _[a1 timerIDString];
}

id objc_msgSend_timers(void *a1, const char *a2, ...)
{
  return _[a1 timers];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_updateTimer_(void *a1, const char *a2, ...)
{
  return [a1 updateTimer:];
}