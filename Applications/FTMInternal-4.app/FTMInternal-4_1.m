uint64_t sub_1001649CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  String.append(_:)(*(Swift::String *)&a1);
  sub_100157064((uint64_t *)&unk_1002D97F0);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100267EF0;
  *(void *)(v6 + 56) = &type metadata for Double;
  *(void *)(v6 + 64) = &protocol witness table for Double;
  *(double *)(v6 + 32) = a3;
  String.init(format:_:)();
  swift_bridgeObjectRelease();
  sub_1001571E0();
  v7 = Text.init<A>(_:)();
  v9 = v8;
  v11 = v10 & 1;
  static Color.gray.getter();
  v12 = Text.foregroundColor(_:)();
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release();
  sub_10015D6C4(v7, v9, v11);
  result = swift_bridgeObjectRelease();
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v14;
  *(unsigned char *)(a2 + 16) = v16 & 1;
  *(void *)(a2 + 24) = v18;
  return result;
}

double sub_100164B24@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Color.yellow.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v2;
  *(_WORD *)(a1 + 8) = 256;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(a1 + 48) = v8;
  return result;
}

uint64_t sub_100164BAC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t (**a3)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v6 = type metadata accessor for ChartProxy();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  long long v9 = a2[1];
  long long v20 = *a2;
  long long v10 = a2[2];
  long long v16 = v9;
  long long v17 = v10;
  sub_10015D474((uint64_t)&v16, (uint64_t)v19, &qword_1002D80A8);
  sub_10015D474((uint64_t)&v17 + 8, (uint64_t)v18, &qword_1002D80E8);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v13 = (long long *)(v12 + ((v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  long long v14 = a2[1];
  long long *v13 = *a2;
  v13[1] = v14;
  v13[2] = a2[2];
  *a3 = sub_1001662AC;
  a3[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v12;
  sub_10015C534((uint64_t)&v20);
  sub_10015D380((uint64_t)v19);
  return sub_10015C534((uint64_t)v18);
}

uint64_t sub_100164D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v40 = a1;
  uint64_t v50 = a4;
  uint64_t v39 = type metadata accessor for ChartProxy();
  uint64_t v5 = *(void *)(v39 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v39);
  v36 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GeometryProxy();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  v37 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalCoordinateSpace();
  __chkstk_darwin(v10);
  uint64_t v43 = type metadata accessor for DragGesture();
  uint64_t v45 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  v38 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100157064(&qword_1002D81A0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v46 = v12;
  uint64_t v47 = v13;
  __chkstk_darwin(v12);
  v42 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100157064(&qword_1002D81A8);
  uint64_t v48 = *(void *)(v15 - 8);
  uint64_t v49 = v15;
  __chkstk_darwin(v15);
  v44 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = static Color.clear.getter();
  __int16 v52 = 256;
  char v53 = 0;
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  long long v17 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v37, v40, v7);
  uint64_t v18 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v41, v39);
  long long v19 = a3[1];
  v58[0] = *a3;
  long long v20 = a3[2];
  long long v54 = v19;
  long long v55 = v20;
  sub_10015D474((uint64_t)&v54, (uint64_t)v57, &qword_1002D80A8);
  sub_10015D474((uint64_t)&v55 + 8, (uint64_t)v56, &qword_1002D80E8);
  unint64_t v21 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v22 = (v9 + *(unsigned __int8 *)(v5 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v23 + v21, v17, v7);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23 + v22, v36, v18);
  v24 = (_OWORD *)(v23 + ((v6 + v22 + 7) & 0xFFFFFFFFFFFFFFF8));
  long long v25 = a3[1];
  _OWORD *v24 = *a3;
  v24[1] = v25;
  v24[2] = a3[2];
  sub_10015C534((uint64_t)v58);
  sub_10015D380((uint64_t)v57);
  sub_10015C534((uint64_t)v56);
  sub_100166740(&qword_1002D81B0, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_100166740(&qword_1002D81B8, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  v26 = v42;
  uint64_t v27 = v43;
  v28 = v38;
  Gesture<>.onChanged(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v27);
  v29 = (_OWORD *)swift_allocObject();
  long long v30 = a3[1];
  v29[1] = *a3;
  v29[2] = v30;
  v29[3] = a3[2];
  sub_10015C534((uint64_t)v58);
  sub_10015D380((uint64_t)v57);
  sub_10015C534((uint64_t)v56);
  sub_10015D788(&qword_1002D81C0, &qword_1002D81A0);
  v31 = v44;
  uint64_t v32 = v46;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v32);
  static GestureMask.all.getter();
  sub_100157064(&qword_1002D81C8);
  sub_10016667C();
  sub_10015D788(&qword_1002D81F8, &qword_1002D81A8);
  uint64_t v33 = v49;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v33);
  return swift_release();
}

uint64_t sub_100165414()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100165510()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return Label<>.init(_:systemImage:)();
}

uint64_t sub_1001655A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  sub_10015D6B4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRetain();
  sub_10015D6B4(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100165618(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 128);
  char v4 = *(unsigned char *)(a1 + 136);
  sub_10015D6C4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_10015D6C4(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10016568C()
{
  unint64_t result = qword_1002D8088;
  if (!qword_1002D8088)
  {
    sub_100157104(&qword_1002D8078);
    sub_10015D788(&qword_1002D8090, &qword_1002D8098);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8088);
  }
  return result;
}

uint64_t sub_10016572C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  sub_10015D6C4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  sub_10015D6C4(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001657A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 128);
  char v4 = *(unsigned char *)(a1 + 136);
  sub_10015D6B4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_10015D6B4(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *sub_100165814@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1001AD220(a1, a2);
}

uint64_t sub_100165830(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FTMCellMonitorBookmarkedSheetView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100165894()
{
  v1 = (int *)(type metadata accessor for FTMCellMonitorBookmarkedSheetView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  uint64_t v5 = v0 + v3 + v1[7];
  sub_100157064(&qword_1002D7FA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001659AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FTMCellMonitorBookmarkedSheetView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100165A10()
{
  type metadata accessor for FTMCellMonitorBookmarkedSheetView();

  return sub_1001608CC();
}

uint64_t sub_100165A70()
{
  return sub_100165510();
}

uint64_t destroy for FTMCellMonitorChartView()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for FTMCellMonitorChartView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for FTMCellMonitorChartView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for FTMCellMonitorChartView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FTMCellMonitorChartView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FTMCellMonitorChartView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FTMCellMonitorChartView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMCellMonitorChartView()
{
  return &type metadata for FTMCellMonitorChartView;
}

unint64_t sub_100165D04()
{
  unint64_t result = qword_1002D80C0;
  if (!qword_1002D80C0)
  {
    sub_100157104(&qword_1002D80C8);
    sub_10015D788(&qword_1002D8080, &qword_1002D8050);
    sub_10016568C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D80C0);
  }
  return result;
}

uint64_t sub_100165DA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100165DC0()
{
  return sub_1001665D8(80);
}

uint64_t sub_100165DC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100163450(a1, v2 + 16, a2, *(double *)(v2 + 64), *(double *)(v2 + 72));
}

unint64_t sub_100165DD4()
{
  unint64_t result = qword_1002D8108;
  if (!qword_1002D8108)
  {
    sub_100157104(&qword_1002D80F8);
    sub_100165F64();
    sub_100157104(&qword_1002D8138);
    sub_100157104(&qword_1002D8140);
    sub_100157104(&qword_1002D8148);
    sub_100157104(&qword_1002D8150);
    type metadata accessor for LineMark();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1001660D8();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8108);
  }
  return result;
}

unint64_t sub_100165F64()
{
  unint64_t result = qword_1002D8110;
  if (!qword_1002D8110)
  {
    sub_100157104(&qword_1002D8118);
    sub_100165FD8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8110);
  }
  return result;
}

unint64_t sub_100165FD8()
{
  unint64_t result = qword_1002D8120;
  if (!qword_1002D8120)
  {
    sub_100157104(&qword_1002D8128);
    sub_100157104(&qword_1002D8130);
    type metadata accessor for RuleMark();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8120);
  }
  return result;
}

unint64_t sub_1001660D8()
{
  unint64_t result = qword_1002D8158;
  if (!qword_1002D8158)
  {
    sub_100157104(&qword_1002D8140);
    sub_10015D788(&qword_1002D8160, &qword_1002D8168);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8158);
  }
  return result;
}

unint64_t sub_100166178()
{
  unint64_t result = qword_1002D8188;
  if (!qword_1002D8188)
  {
    sub_100157104(&qword_1002D8178);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8188);
  }
  return result;
}

uint64_t sub_1001661E4()
{
  return sub_1001665D8(64);
}

uint64_t sub_1001661EC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  return sub_100164BAC(a1, (long long *)(v2 + 16), a2);
}

uint64_t sub_1001661F4()
{
  uint64_t v1 = type metadata accessor for ChartProxy();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001662AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ChartProxy() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (_OWORD *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100164D54(a1, v2 + v6, v7, a2);
}

uint64_t sub_100166358()
{
  uint64_t v1 = type metadata accessor for GeometryProxy();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for ChartProxy();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v11 + 48, v10);
}

uint64_t sub_1001664D0()
{
  type metadata accessor for GeometryProxy();
  type metadata accessor for ChartProxy();

  return sub_100165414();
}

uint64_t sub_1001665D0()
{
  return sub_1001665D8(64);
}

uint64_t sub_1001665D8(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10016662C()
{
  return State.wrappedValue.setter();
}

unint64_t sub_10016667C()
{
  unint64_t result = qword_1002D81D0;
  if (!qword_1002D81D0)
  {
    sub_100157104(&qword_1002D81C8);
    sub_10015D788(&qword_1002D81D8, &qword_1002D81E0);
    sub_10015D788(&qword_1002D81E8, &qword_1002D81F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D81D0);
  }
  return result;
}

uint64_t sub_100166740(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100166788(uint64_t a1)
{
  return a1;
}

void *sub_1001667B4@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001AD2EC(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1001667D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001649CC(*(void *)(v1 + 16), a1, *(double *)(v1 + 32));
}

uint64_t sub_1001667DC()
{
  return swift_getOpaqueTypeConformance2();
}

unsigned char *sub_1001668FC@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100165814(a1, a2);
}

BOOL sub_100166914(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100166928()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100166970()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10016699C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id sub_1001669E0(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView;
  id v10 = objc_allocWithZone((Class)UITableView);
  unint64_t v11 = v4;
  *(void *)&v4[v9] = [v10 init];
  *(void *)&v11[OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_characters] = _swiftEmptyArrayStorage;
  v11[OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_size] = 2;
  v11[OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_isScrolling] = 0;

  v14.receiver = v11;
  v14.super_class = (Class)type metadata accessor for TickerColumnCell();
  id v12 = [super initWithFrame:a1, a2, a3, a4];
  sub_100166BC4();

  return v12;
}

void sub_100166BC4()
{
  Swift::UInt v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView;
  [*(id *)&v0[OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView] setUserInteractionEnabled:0];
  uint64_t v3 = *(void **)&v0[v2];
  type metadata accessor for TickerCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v5 = v3;
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v6];

  [*(id *)&v1[v2] setDataSource:v1];
  [*(id *)&v1[v2] setDelegate:v1];
  [*(id *)&v1[v2] setSeparatorStyle:0];
  uint64_t v7 = *(void **)&v1[v2];
  uint64_t v8 = self;
  id v9 = v7;
  id v10 = [v8 clearColor];
  [v9 setBackgroundColor:v10];

  id v11 = [v1 contentView];
  [v11 addSubview:*(void *)&v1[v2]];

  [*(id *)&v1[v2] setTranslatesAutoresizingMaskIntoConstraints:0];
  id v12 = [v1 contentView];
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100268000;
  sub_100167598(0, (unint64_t *)&qword_1002D9800);
  objc_super v14 = *(void **)&v1[v2];
  uint64_t v15 = sub_100167598(0, (unint64_t *)&unk_1002D82A0);
  uint64_t v32 = v15;
  v31[0] = v14;
  id v16 = v14;
  id v17 = [v1 contentView];
  uint64_t v18 = sub_100167598(0, qword_1002D9810);
  uint64_t v30 = v18;
  v29[0] = v17;
  *(void *)(v13 + 32) = sub_100198F0C(v31, 5, 0, v29, 5, 1.0, 0.0);
  long long v19 = *(void **)&v1[v2];
  uint64_t v32 = v15;
  v31[0] = v19;
  id v20 = v19;
  id v21 = [v1 contentView];
  uint64_t v30 = v18;
  v29[0] = v21;
  *(void *)(v13 + 40) = sub_100198F0C(v31, 6, 0, v29, 6, 1.0, 0.0);
  unint64_t v22 = *(void **)&v1[v2];
  uint64_t v32 = v15;
  v31[0] = v22;
  id v23 = v22;
  id v24 = [v1 contentView];
  uint64_t v30 = v18;
  v29[0] = v24;
  *(void *)(v13 + 48) = sub_100198F0C(v31, 3, 0, v29, 3, 1.0, 0.0);
  long long v25 = *(void **)&v1[v2];
  uint64_t v32 = v15;
  v31[0] = v25;
  id v26 = v25;
  id v27 = [v1 contentView];
  uint64_t v30 = v18;
  v29[0] = v27;
  *(void *)(v13 + 56) = sub_100198F0C(v31, 4, 0, v29, 4, 1.0, 0.0);
  v31[0] = v13;
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 addConstraints:isa];
}

id sub_100166F88()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TickerColumnCell();
  return [super dealloc];
}

uint64_t type metadata accessor for TickerColumnCell()
{
  return self;
}

unint64_t sub_10016702C(void *a1)
{
  uint64_t v2 = v1;
  NSString v4 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v6 = [a1 dequeueReusableCellWithIdentifier:v4 forIndexPath:isa];

  type metadata accessor for TickerCell();
  uint64_t v7 = swift_dynamicCastClass();
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t result = IndexPath.row.getter();
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_characters);
      if (result < *(void *)(v10 + 16))
      {
        uint64_t v11 = v10 + 16 * result;
        uint64_t v12 = *(void *)(v11 + 40);
        uint64_t v13 = (void *)(v8 + OBJC_IVAR____TtC13FTMInternal_410TickerCell_digit);
        void *v13 = *(void *)(v11 + 32);
        v13[1] = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v14 = OBJC_IVAR____TtC13FTMInternal_410TickerCell_numberLabel;
        uint64_t v15 = *(void **)(v8 + OBJC_IVAR____TtC13FTMInternal_410TickerCell_numberLabel);
        swift_bridgeObjectRetain();
        NSString v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v15 setText:v16];

        if (*(unsigned char *)(v2 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_size) == 1) {
          double v17 = 35.0;
        }
        else {
          double v17 = 40.0;
        }
        *(double *)(v8 + OBJC_IVAR____TtC13FTMInternal_410TickerCell_fontSize) = v17;
        uint64_t v18 = *(void **)(v8 + v14);
        id v19 = [self systemFontOfSize:v17 weight:UIFontWeightRegular];
        [v18 setFont:v19];

        return v8;
      }
    }
    __break(1u);
    return result;
  }

  id v20 = objc_allocWithZone((Class)UITableViewCell);

  return (unint64_t)[v20 init];
}

unsigned char *initializeBufferWithCopyOfBuffer for SPApplicationCategories(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AttributeDetailTimeFrame(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TickerColumnCell.Size(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001674F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_100167520(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100167528(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TickerColumnCell.Size()
{
  return &type metadata for TickerColumnCell.Size;
}

unint64_t sub_100167544()
{
  unint64_t result = qword_1002D8288;
  if (!qword_1002D8288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8288);
  }
  return result;
}

uint64_t sub_100167598(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t *sub_1001675D4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    id v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *id v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = a3[7];
    uint64_t v13 = a3[8];
    uint64_t v14 = (uint64_t *)((char *)a1 + v12);
    uint64_t v15 = (uint64_t *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    double v17 = (uint64_t *)((char *)a1 + v13);
    uint64_t v18 = (uint64_t *)((char *)a2 + v13);
    uint64_t v19 = v18[1];
    *double v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001676E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100167780(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  id v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = (void *)(a1 + v12);
  double v17 = (void *)(a2 + v12);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100167844(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  id v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100167944(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_1001679DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  id v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100167AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100167ABC);
}

uint64_t sub_100167ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100167B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100167B94);
}

uint64_t sub_100167B94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for FTMCellMonitorHardwareDetailModel()
{
  uint64_t result = qword_1002D83C8;
  if (!qword_1002D83C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100167CA0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100167D50()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x726564726FLL;
      break;
    case 2:
      uint64_t result = 7955819;
      break;
    case 3:
      uint64_t result = 0x65756C6176;
      break;
    case 4:
      uint64_t result = 0x70795465756C6176;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100167DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100168A2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100167E0C()
{
  return 0;
}

void sub_100167E18(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100167E24(uint64_t a1)
{
  unint64_t v2 = sub_100168638();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100167E60(uint64_t a1)
{
  unint64_t v2 = sub_100168638();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100167E9C(void *a1)
{
  uint64_t v3 = sub_100157064(&qword_1002D8430);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10015714C(a1, a1[3]);
  sub_100168638();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_10016874C(&qword_1002D8438);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for FTMCellMonitorHardwareDetailModel();
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001680D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100157064(&qword_1002D8418);
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FTMCellMonitorHardwareDetailModel();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v38 = v10;
  uint64_t v13 = &v12[*(int *)(v10 + 32)];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  uint64_t v35 = a1;
  v36 = v13;
  sub_10015714C(a1, a1[3]);
  sub_100168638();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v14 = v4;
    uint64_t v15 = v37;
    sub_100157190((uint64_t)v35);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = v33;
    char v43 = 0;
    sub_10016874C(&qword_1002D8428);
    uint64_t v17 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v12, v6, v4);
    char v42 = 1;
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = v38;
    *(void *)&v12[*(int *)(v38 + 20)] = v18;
    char v41 = 2;
    uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v22 = (uint64_t *)&v12[*(int *)(v20 + 24)];
    *unint64_t v22 = v21;
    v22[1] = v23;
    char v40 = 3;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    long long v25 = (uint64_t *)&v12[*(int *)(v20 + 28)];
    *long long v25 = v24;
    v25[1] = v26;
    char v39 = 4;
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v29 = v28;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
    uint64_t v30 = (uint64_t *)v36;
    swift_bridgeObjectRelease();
    *uint64_t v30 = v27;
    v30[1] = v29;
    sub_10016868C((uint64_t)v12, v32);
    sub_100157190((uint64_t)v35);
    return sub_1001686F0((uint64_t)v12);
  }
}

uint64_t sub_10016856C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_1001685D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001680D0(a1, a2);
}

uint64_t sub_1001685EC(void *a1)
{
  return sub_100167E9C(a1);
}

uint64_t sub_100168604()
{
  return sub_10016874C((unint64_t *)&qword_1002D8410);
}

unint64_t sub_100168638()
{
  unint64_t result = qword_1002D8420;
  if (!qword_1002D8420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8420);
  }
  return result;
}

uint64_t sub_10016868C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FTMCellMonitorHardwareDetailModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001686F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FTMCellMonitorHardwareDetailModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10016874C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FTMCellMonitorHardwareDetailModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FTMCellMonitorHardwareDetailModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001688ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMCellMonitorHardwareDetailModel.CodingKeys()
{
  return &type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys;
}

unint64_t sub_100168928()
{
  unint64_t result = qword_1002D8440;
  if (!qword_1002D8440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8440);
  }
  return result;
}

unint64_t sub_100168980()
{
  unint64_t result = qword_1002D8448;
  if (!qword_1002D8448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8448);
  }
  return result;
}

unint64_t sub_1001689D8()
{
  unint64_t result = qword_1002D8450;
  if (!qword_1002D8450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8450);
  }
  return result;
}

uint64_t sub_100168A2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726564726FLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7955819 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x70795465756C6176 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t destroy for SCircleButton()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for SCircleButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SCircleButton(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SCircleButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SCircleButton()
{
  return &type metadata for SCircleButton;
}

uint64_t sub_100168D70()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100168D8C@<X0>(uint64_t a1@<X8>)
{
  sub_1001571E0();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_100168DF8()
{
  uint64_t v1 = sub_100157064(&qword_1002D7D38);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  uint64_t v8 = v0[2];
  uint64_t v7 = v0[3];
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v8;
  uint64_t v16 = v7;
  swift_retain();
  Button.init(action:label:)();
  uint64_t v9 = static Color.green.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = v9;
  uint64_t v18 = KeyPath;
  char v19 = 0;
  sub_10015D788(&qword_1002D7D48, &qword_1002D7D38);
  sub_1001699EC();
  View.buttonStyle<A>(_:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100168FA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100168D8C(a1);
}

uint64_t sub_100168FAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v60 = a3;
  uint64_t v58 = a2;
  uint64_t v77 = a5;
  char v6 = a4 & 1;
  uint64_t v7 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v74 = *(void *)(v7 - 8);
  uint64_t v75 = v7;
  __chkstk_darwin(v7);
  v73 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100157064(&qword_1002D8460);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100157064(&qword_1002D8468);
  __chkstk_darwin(v17 - 8);
  v59 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100157064(&qword_1002D8470);
  __chkstk_darwin(v63);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100157064(&qword_1002D8478);
  __chkstk_darwin(v62);
  unint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100157064(&qword_1002D8480);
  __chkstk_darwin(v61);
  uint64_t v65 = (uint64_t)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100157064(&qword_1002D8488);
  __chkstk_darwin(v64);
  uint64_t v70 = (uint64_t)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100157064(&qword_1002D8490);
  __chkstk_darwin(v66);
  uint64_t v71 = (uint64_t)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100157064(&qword_1002D8498);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100157064(&qword_1002D84A0);
  __chkstk_darwin(v68);
  uint64_t v69 = (uint64_t)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = a1;
  ButtonStyleConfiguration.label.getter();
  uint64_t v28 = static Font.largeTitle.getter();
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v12, v9);
  uint64_t v30 = (uint64_t *)&v16[*(int *)(v14 + 44)];
  *uint64_t v30 = KeyPath;
  v30[1] = v28;
  uint64_t v31 = v10;
  uint64_t v32 = v60;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v9);
  uint64_t v33 = (uint64_t)v59;
  static Alignment.center.getter();
  sub_1001697C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v33, 0.0, 1, INFINITY, 0);
  sub_10015D658((uint64_t)v16, &qword_1002D8460);
  sub_100169A44(v32, v6);
  LOBYTE(v14) = sub_1001A898C(v32, v6);
  sub_100169A90(v32, v6);
  if (v14)
  {
    uint64_t v34 = v58;
    swift_retain();
  }
  else
  {
    uint64_t v34 = static Color.gray.getter();
  }
  char v35 = static Edge.Set.all.getter();
  sub_10015D5F4(v33, (uint64_t)v20, &qword_1002D8468);
  v36 = &v20[*(int *)(v63 + 36)];
  *(void *)v36 = v34;
  v36[8] = v35;
  sub_10015D658(v33, &qword_1002D8468);
  uint64_t v37 = static Color.white.getter();
  sub_10015D5F4((uint64_t)v20, (uint64_t)v22, &qword_1002D8470);
  *(void *)&v22[*(int *)(v62 + 36)] = v37;
  sub_10015D658((uint64_t)v20, &qword_1002D8470);
  uint64_t v38 = v65;
  sub_10015D5F4((uint64_t)v22, v65, &qword_1002D8478);
  *(_WORD *)(v38 + *(int *)(v61 + 36)) = 256;
  sub_10015D658((uint64_t)v22, &qword_1002D8478);
  sub_100169A44(v32, v6);
  LOBYTE(v37) = sub_1001A898C(v32, v6);
  sub_100169A90(v32, v6);
  if (v37) {
    double v39 = 4.0;
  }
  else {
    double v39 = 0.0;
  }
  (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, enum case for Color.RGBColorSpace.sRGBLinear(_:), v75);
  uint64_t v40 = Color.init(_:white:opacity:)();
  uint64_t v41 = v70;
  sub_10015D5F4(v38, v70, &qword_1002D8480);
  uint64_t v42 = v41 + *(int *)(v64 + 36);
  *(void *)uint64_t v42 = v40;
  *(double *)(v42 + 8) = v39;
  *(void *)(v42 + 16) = 0;
  *(void *)(v42 + 24) = 0;
  sub_10015D658(v38, &qword_1002D8480);
  sub_100169A44(v32, v6);
  LOBYTE(v40) = sub_1001A898C(v32, v6);
  sub_100169A90(v32, v6);
  double v43 = 1.0;
  if (v40)
  {
    if (ButtonStyleConfiguration.isPressed.getter()) {
      double v43 = 0.92;
    }
    else {
      double v43 = 1.0;
    }
  }
  static UnitPoint.center.getter();
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v48 = v71;
  sub_10015D5F4(v41, v71, &qword_1002D8488);
  uint64_t v49 = v48 + *(int *)(v66 + 36);
  *(double *)uint64_t v49 = v43;
  *(double *)(v49 + 8) = v43;
  *(void *)(v49 + 16) = v45;
  *(void *)(v49 + 24) = v47;
  sub_10015D658(v41, &qword_1002D8488);
  uint64_t v50 = static Animation.easeInOut(duration:)();
  char v51 = ButtonStyleConfiguration.isPressed.getter();
  uint64_t v52 = v72;
  sub_10015D5F4(v48, v72, &qword_1002D8490);
  uint64_t v53 = v52 + *(int *)(v67 + 36);
  *(void *)uint64_t v53 = v50;
  *(unsigned char *)(v53 + 8) = v51 & 1;
  sub_10015D658(v48, &qword_1002D8490);
  LOBYTE(v50) = static Edge.Set.all.getter();
  uint64_t v54 = v69;
  sub_10015D5F4(v52, v69, &qword_1002D8498);
  uint64_t v55 = v54 + *(int *)(v68 + 36);
  *(unsigned char *)uint64_t v55 = v50;
  *(_OWORD *)(v55 + 8) = 0u;
  *(_OWORD *)(v55 + 24) = 0u;
  *(unsigned char *)(v55 + 40) = 1;
  sub_10015D658(v52, &qword_1002D8498);
  return sub_100169D00(v54, v77);
}

__n128 sub_1001697C8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_10015D5F4(v13, a9, &qword_1002D8460);
  uint64_t v24 = (_OWORD *)(a9 + *(int *)(sub_100157064(&qword_1002D8468) + 36));
  v24[4] = v30;
  v24[5] = v31;
  v24[6] = v32;
  _OWORD *v24 = v26;
  v24[1] = v27;
  __n128 result = v29;
  v24[2] = v28;
  v24[3] = v29;
  return result;
}

uint64_t sub_100169988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100168FAC(a1, *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_100169994@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001699C4()
{
  return EnvironmentValues.isEnabled.setter();
}

unint64_t sub_1001699EC()
{
  unint64_t result = qword_1002D8458;
  if (!qword_1002D8458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8458);
  }
  return result;
}

uint64_t sub_100169A44(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for SCircleButtonStyle(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);

  return sub_100169A90(v2, v3);
}

uint64_t sub_100169A90(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t _s13FTMInternal_418SCircleButtonStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  swift_retain();
  sub_100169A44(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SCircleButtonStyle(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = v2[1];
  LOBYTE(v2) = *((unsigned char *)v2 + 16);
  sub_100169A44(v4, (char)v2);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = (_BYTE)v2;
  sub_100169A90(v5, v6);
  return a1;
}

uint64_t assignWithTake for SCircleButtonStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  sub_100169A90(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SCircleButtonStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SCircleButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SCircleButtonStyle()
{
  return &type metadata for SCircleButtonStyle;
}

uint64_t sub_100169C48()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100169CDC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100169D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D84A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100169D68()
{
  return sub_100169E78(&qword_1002D84A8, &qword_1002D84A0, (void (*)(void))sub_100169DAC);
}

unint64_t sub_100169DAC()
{
  unint64_t result = qword_1002D84B0;
  if (!qword_1002D84B0)
  {
    sub_100157104(&qword_1002D8498);
    sub_100169E78(&qword_1002D84B8, &qword_1002D8490, (void (*)(void))sub_100169EF4);
    sub_10015D788(&qword_1002D8538, &qword_1002D8540);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D84B0);
  }
  return result;
}

uint64_t sub_100169E78(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100157104(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100169EF4()
{
  return sub_100169E78(&qword_1002D84C0, &qword_1002D8488, (void (*)(void))sub_100169F24);
}

unint64_t sub_100169F24()
{
  unint64_t result = qword_1002D84C8;
  if (!qword_1002D84C8)
  {
    sub_100157104(&qword_1002D8480);
    sub_100169FC4();
    sub_10015D788(&qword_1002D8528, &qword_1002D8530);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D84C8);
  }
  return result;
}

unint64_t sub_100169FC4()
{
  unint64_t result = qword_1002D84D0;
  if (!qword_1002D84D0)
  {
    sub_100157104(&qword_1002D8478);
    sub_10016A064();
    sub_10015D788(&qword_1002D8518, &qword_1002D8520);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D84D0);
  }
  return result;
}

unint64_t sub_10016A064()
{
  unint64_t result = qword_1002D84D8;
  if (!qword_1002D84D8)
  {
    sub_100157104(&qword_1002D8470);
    sub_100169E78(&qword_1002D84E0, &qword_1002D8468, (void (*)(void))sub_10016A130);
    sub_10015D788(&qword_1002D8508, &qword_1002D8510);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D84D8);
  }
  return result;
}

unint64_t sub_10016A130()
{
  unint64_t result = qword_1002D84E8;
  if (!qword_1002D84E8)
  {
    sub_100157104(&qword_1002D8460);
    sub_10016A1D0();
    sub_10015D788(&qword_1002D84F8, &qword_1002D8500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D84E8);
  }
  return result;
}

unint64_t sub_10016A1D0()
{
  unint64_t result = qword_1002D84F0;
  if (!qword_1002D84F0)
  {
    type metadata accessor for ButtonStyleConfiguration.Label();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D84F0);
  }
  return result;
}

uint64_t sub_10016A2A8()
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricTech);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricTech + 8);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricName);
  char v6 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricName + 8);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_attributeName);
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_attributeName + 8);
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  uint64_t v13 = *(void *)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricId);
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricId + 8);
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 40;
}

void sub_10016A404(void *a1)
{
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  [a1 encodeObject:v2 forKey:v3];

  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v5 = String._bridgeToObjectiveC()();
  [a1 encodeObject:v4 forKey:v5];

  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v7 = String._bridgeToObjectiveC()();
  [a1 encodeObject:v6 forKey:v7];

  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  [a1 encodeObject:v8 forKey:v9];
}

id sub_10016A670(void *a1)
{
  id v3 = v1;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a1 decodeObjectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  sub_10016ABBC((uint64_t)&v30, (uint64_t)v32);
  if (!v33)
  {

LABEL_31:
    sub_10016AC24((uint64_t)v32);
    goto LABEL_35;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

LABEL_35:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v6 = v29;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [a1 decodeObjectForKey:v7];

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  sub_10016ABBC((uint64_t)&v30, (uint64_t)v32);
  if (!v33)
  {

LABEL_30:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  uint64_t v10 = v28;
  uint64_t v9 = v29;
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [a1 decodeObjectForKey:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  sub_10016ABBC((uint64_t)&v30, (uint64_t)v32);
  if (!v33)
  {

LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  uint64_t v13 = v29;
  uint64_t v26 = v28;
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [a1 decodeObjectForKey:v14];

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  sub_10016ABBC((uint64_t)&v30, (uint64_t)v32);
  if (!v33)
  {

    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  uint64_t v16 = v28;
  uint64_t v17 = v29;

  uint64_t v18 = (objc_class *)type metadata accessor for DashboardItem();
  uint64_t v19 = (char *)objc_allocWithZone(v18);
  uint64_t v20 = &v19[OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricTech];
  *(void *)uint64_t v20 = v28;
  *((void *)v20 + 1) = v6;
  uint64_t v21 = &v19[OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricName];
  *(void *)uint64_t v21 = v10;
  *((void *)v21 + 1) = v9;
  unint64_t v22 = &v19[OBJC_IVAR____TtC13FTMInternal_413DashboardItem_attributeName];
  *(void *)unint64_t v22 = v26;
  *((void *)v22 + 1) = v13;
  uint64_t v23 = &v19[OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricId];
  *(void *)uint64_t v23 = v16;
  *((void *)v23 + 1) = v17;
  v27.receiver = v19;
  v27.super_class = v18;
  id v24 = [super init];

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v24;
}

id sub_10016AAE8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DashboardItem();
  return [super dealloc];
}

uint64_t type metadata accessor for DashboardItem()
{
  return self;
}

uint64_t sub_10016ABBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064((uint64_t *)&unk_1002D9680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016AC24(uint64_t a1)
{
  uint64_t v2 = sub_100157064((uint64_t *)&unk_1002D9680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10016AC84@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_10016AC9C(void *a1@<X8>)
{
  *a1 = *v1;
}

id sub_10016ACA8()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle;
  id v2 = objc_allocWithZone((Class)UIView);
  id v3 = v0;
  *(void *)&v0[v1] = [v2 init];
  uint64_t v4 = &v3[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circleColor;
  *(void *)&v3[v5] = [self whiteColor];
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_duration] = 0x3FD3333333333333;
  v3[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_transitionMode] = 0;

  v7.receiver = v3;
  v7.super_class = (Class)type metadata accessor for CircularTransition();
  return [super init];
}

id sub_10016ADA8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CircularTransition();
  return [super dealloc];
}

uint64_t type metadata accessor for CircularTransition()
{
  return self;
}

void sub_10016AE5C(void *a1)
{
  id v63 = [a1 containerView];
  id v3 = (id *)&UITransitionContextToViewKey;
  if (v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_transitionMode] != 2)
  {
    if (!v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_transitionMode])
    {
      id v4 = [a1 viewForKey:UITransitionContextToViewKey];
      if (v4)
      {
        uint64_t v5 = v4;
        [v4 center];
        uint64_t v7 = v6;
        uint64_t v9 = v8;
        [v5 frame];
        double v11 = v10;
        double v13 = v12;
        id v14 = [objc_allocWithZone((Class)UIView) init];
        uint64_t v15 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle;
        uint64_t v16 = *(void **)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle];
        *(void *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle] = v14;

        uint64_t v17 = (double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint];
        double v18 = fmax(*(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint], v11 - *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint]);
        double v19 = fmax(*(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8], v13 - *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8]);
        double v20 = sqrt(v18 * v18 + v19 * v19);
        double v21 = v20 + v20;
        id v22 = *(id *)&v1[v15];
        [v22 setFrame:0.0, 0.0, v21, v21];

        id v23 = [*(id *)&v1[v15] layer];
        [*(id *)&v1[v15] frame];
        [v23 setCornerRadius:v24 * 0.5];

        [v1[v15] setCenter:*v17, v17[1]];
        [*(id *)&v1[v15] setBackgroundColor:*(void *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circleColor]];
        uint64_t v25 = *(void **)&v1[v15];
        CGAffineTransformMakeScale(&aBlock, 0.001, 0.001);
        [v25 setTransform:&aBlock];
        [v63 addSubview:*(void *)&v1[v15]];
        [v5 setCenter:*v17, v17[1]];
        CGAffineTransformMakeScale(&aBlock, 0.001, 0.001);
        [v5 setTransform:&aBlock];
        [v5 setAlpha:0.0];
        [v63 addSubview:v5];
        uint64_t v26 = self;
        double v27 = *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_duration];
        uint64_t v28 = (void *)swift_allocObject();
        v28[2] = v1;
        v28[3] = v5;
        v28[4] = v7;
        v28[5] = v9;
        *(void *)&aBlock.tx = sub_10016BA88;
        *(void *)&aBlock.ty = v28;
        *(void *)&aBlock.a = _NSConcreteStackBlock;
        *(void *)&aBlock.b = 1107296256;
        *(void *)&aBlock.c = sub_1001E0068;
        *(void *)&aBlock.d = &unk_10028B798;
        uint64_t v29 = _Block_copy(&aBlock);
        long long v30 = v1;
        id v31 = v5;
        swift_release();
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = a1;
        *(void *)&aBlock.tx = sub_10016BACC;
        *(void *)&aBlock.ty = v32;
        *(void *)&aBlock.a = _NSConcreteStackBlock;
        *(void *)&aBlock.b = 1107296256;
        *(void *)&aBlock.c = sub_1001C13F8;
        *(void *)&aBlock.d = &unk_10028B7E8;
        uint64_t v33 = _Block_copy(&aBlock);
        swift_unknownObjectRetain();
        swift_release();
        [v26 animateWithDuration:v29 animations:v33 completion:v27];

        _Block_release(v33);
        _Block_release(v29);

        return;
      }
      goto LABEL_9;
    }
    id v3 = (id *)&UITransitionContextFromViewKey;
  }
  id v34 = *v3;
  id v35 = [a1 viewForKey:v34];
  if (v35)
  {
    v36 = v35;
    [v35 center];
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    [v36 frame];
    uint64_t v41 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle;
    uint64_t v42 = (double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint];
    double v44 = fmax(*(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint], v43 - *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint]);
    double v46 = fmax(*(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8], v45 - *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8]);
    double v47 = sqrt(v44 * v44 + v46 * v46);
    double v48 = v47 + v47;
    id v49 = *(id *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle];
    [v49 setFrame:0.0, 0.0, v48, v48];

    id v50 = [*(id *)&v1[v41] layer];
    [*(id *)&v1[v41] frame];
    [v50 setCornerRadius:v51 * 0.5];

    [v1[v41] setCenter:*v42, v42[1]];
    uint64_t v52 = self;
    double v53 = *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_duration];
    uint64_t v54 = (void *)swift_allocObject();
    v54[2] = v1;
    v54[3] = v36;
    v54[4] = v63;
    *(void *)&aBlock.tx = sub_10016B94C;
    *(void *)&aBlock.ty = v54;
    *(void *)&aBlock.a = _NSConcreteStackBlock;
    *(void *)&aBlock.b = 1107296256;
    *(void *)&aBlock.c = sub_1001E0068;
    *(void *)&aBlock.d = &unk_10028B6F8;
    uint64_t v55 = _Block_copy(&aBlock);
    v56 = v1;
    id v57 = v36;
    id v58 = v63;
    swift_release();
    v59 = (void *)swift_allocObject();
    v59[2] = v57;
    v59[3] = v38;
    v59[4] = v40;
    v59[5] = v56;
    v59[6] = a1;
    *(void *)&aBlock.tx = sub_10016B9B8;
    *(void *)&aBlock.ty = v59;
    *(void *)&aBlock.a = _NSConcreteStackBlock;
    *(void *)&aBlock.b = 1107296256;
    *(void *)&aBlock.c = sub_1001C13F8;
    *(void *)&aBlock.d = &unk_10028B748;
    uint64_t v60 = _Block_copy(&aBlock);
    uint64_t v61 = v56;
    swift_unknownObjectRetain();
    id v62 = v57;
    swift_release();
    [v52 animateWithDuration:v55 animations:v60 completion:v53];

    _Block_release(v60);
    _Block_release(v55);

    return;
  }

LABEL_9:
}

id sub_10016B558(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v7 = *(void **)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle);
  uint64_t v9 = 0x3FF0000000000000;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0x3FF0000000000000;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  [v7 setTransform:&v9];
  uint64_t v9 = 0x3FF0000000000000;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0x3FF0000000000000;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  [a2 setTransform:&v9];
  [a2 setAlpha:1.0];
  return [a2 setCenter:a3, a4];
}

id sub_10016B60C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle;
  uint64_t v7 = *(void **)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle);
  CGAffineTransformMakeScale(&v9, 0.001, 0.001);
  [v7 setTransform:&v9];
  CGAffineTransformMakeScale(&v9, 0.001, 0.001);
  [a2 setTransform:&v9];
  [a2 setCenter:*(double *)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint), *(double *)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8)];
  id result = [a2 setAlpha:0.0];
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_transitionMode) == 2)
  {
    [a3 insertSubview:a2 belowSubview:a2];
    return [a3 insertSubview:*(void *)(a1 + v6) belowSubview:a2];
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CircularTransition.CircularTransitionMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *id result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016B874);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CircularTransition.CircularTransitionMode()
{
  return &type metadata for CircularTransition.CircularTransitionMode;
}

unint64_t sub_10016B8B0()
{
  unint64_t result = qword_1002D8710;
  if (!qword_1002D8710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8710);
  }
  return result;
}

uint64_t sub_10016B904()
{
  return _swift_deallocObject(v0, 40, 7);
}

id sub_10016B94C()
{
  return sub_10016B60C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10016B958(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10016B968()
{
  return swift_release();
}

uint64_t sub_10016B970()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

id sub_10016B9B8(char a1)
{
  int v3 = (void *)*((void *)v1 + 2);
  double v4 = v1[3];
  double v5 = v1[4];
  uint64_t v7 = *((void *)v1 + 5);
  unsigned int v6 = (void *)*((void *)v1 + 6);
  [v3 setCenter:v4, v5];
  [v3 removeFromSuperview];
  [*(id *)(v7 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle) removeFromSuperview];

  return [v6 completeTransition:a1 & 1];
}

uint64_t sub_10016BA48()
{
  return _swift_deallocObject(v0, 48, 7);
}

id sub_10016BA88()
{
  return sub_10016B558(*(void *)(v0 + 16), *(void **)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_10016BA94()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

id sub_10016BACC(char a1)
{
  return [*(id *)(v1 + 16) completeTransition:a1 & 1];
}

void *sub_10016BAFC(uint64_t a1, uint64_t *a2, int *a3)
{
  double v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *double v4 = *a2;
    double v4 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
    uint64_t v7 = a3[7];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v28(v8, v9, v10);
    uint64_t v12 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *((unsigned char *)v4 + v12) = *((unsigned char *)a2 + v12);
    uint64_t v13 = a3[10];
    uint64_t v14 = a3[11];
    uint64_t v15 = (void *)((char *)v4 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    double v18 = (char *)v4 + v14;
    double v19 = (char *)a2 + v14;
    double v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    if (v20(v19, 1, v10))
    {
      uint64_t v21 = sub_100157064(&qword_1002D8210);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      v28((uint64_t)v18, (uint64_t)v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
    }
    uint64_t v23 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(void *)((char *)v4 + v23) = *(uint64_t *)((char *)a2 + v23);
    uint64_t v24 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *(void *)((char *)v4 + v24) = *(uint64_t *)((char *)a2 + v24);
    uint64_t v25 = a3[16];
    uint64_t v26 = *(uint64_t *)((char *)a2 + v25);
    swift_errorRetain();
    *(void *)((char *)v4 + v25) = v26;
    *((unsigned char *)v4 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  }
  return v4;
}

uint64_t sub_10016BD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(a2 + 44);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }

  return swift_errorRelease();
}

uint64_t sub_10016BE3C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v26 = *(void (**)(void *, const void *, uint64_t))(v10 + 16);
  v26(v7, v8, v9);
  uint64_t v11 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[10];
  uint64_t v13 = a3[11];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)(a1 + v13);
  double v18 = (const void *)(a2 + v13);
  double v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v19(v18, 1, v9))
  {
    uint64_t v20 = sub_100157064(&qword_1002D8210);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v26(v17, v18, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
  }
  uint64_t v21 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  uint64_t v22 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  uint64_t v23 = a3[16];
  uint64_t v24 = *(void *)(a2 + v23);
  swift_errorRetain();
  *(void *)(a1 + v23) = v24;
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_10016C01C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v24(v7, v8, v9);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v11 = a3[10];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[11];
  uint64_t v15 = (const void *)(a2 + v14);
  uint64_t v16 = *(uint64_t (**)(void))(v10 + 48);
  uint64_t v25 = (void *)(a1 + v14);
  int v17 = v16();
  int v18 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v16)(v15, 1, v9);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v25, v15, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v25, 0, 1, v9);
      goto LABEL_9;
    }
    size_t v19 = *(void *)(*(void *)(sub_100157064(&qword_1002D8210) - 8) + 64);
    uint64_t v20 = v25;
  }
  else
  {
    if (!v18)
    {
      v24((uint64_t)v25, (uint64_t)v15, v9);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v25, v9);
    size_t v19 = *(void *)(*(void *)(sub_100157064(&qword_1002D8210) - 8) + 64);
    uint64_t v20 = v25;
  }
  memcpy(v20, v15, v19);
LABEL_9:
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  uint64_t v21 = a3[16];
  uint64_t v22 = *(void *)(a2 + v21);
  swift_errorRetain();
  *(void *)(a1 + v21) = v22;
  swift_errorRelease();
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_10016C2B8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  uint64_t v12 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a2 + v13, 1, v9))
  {
    uint64_t v16 = sub_100157064(&qword_1002D8210);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v11(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v18 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  uint64_t v19 = a3[17];
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  return a1;
}

uint64_t sub_10016C470(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  double v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v27(v7, v8, v9);
  uint64_t v11 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[10];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[11];
  uint64_t v18 = (const void *)(a2 + v17);
  uint64_t v19 = *(uint64_t (**)(void))(v10 + 48);
  uint64_t v28 = (void *)(a1 + v17);
  int v20 = v19();
  int v21 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v19)(v18, 1, v9);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v28, v18, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v28, 0, 1, v9);
      goto LABEL_9;
    }
    size_t v22 = *(void *)(*(void *)(sub_100157064(&qword_1002D8210) - 8) + 64);
    uint64_t v23 = v28;
  }
  else
  {
    if (!v21)
    {
      v27((uint64_t)v28, (uint64_t)v18, v9);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v28, v9);
    size_t v22 = *(void *)(*(void *)(sub_100157064(&qword_1002D8210) - 8) + 64);
    uint64_t v23 = v28;
  }
  memcpy(v23, v18, v22);
LABEL_9:
  uint64_t v24 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v24) = *(void *)(a2 + v24);
  uint64_t v25 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_errorRelease();
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_10016C6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016C6F8);
}

uint64_t sub_10016C6F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[7];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v12 = *(void *)(a1 + a3[10] + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v13 = sub_100157064(&qword_1002D8210);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a3[11];
    return v14(v16, a2, v15);
  }
}

uint64_t sub_10016C830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016C844);
}

uint64_t sub_10016C844(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[7];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[10] + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v13 = sub_100157064(&qword_1002D8210);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[11];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

uint64_t type metadata accessor for STransferMetrics()
{
  uint64_t result = qword_1002D87E0;
  if (!qword_1002D87E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10016C9C8()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_10016CAE0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10016CAE0()
{
  if (!qword_1002D87F0)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002D87F0);
    }
  }
}

void *sub_10016CB38()
{
  return &protocol witness table for Int;
}

uint64_t sub_10016CB44(char *a1, char *a2)
{
  return sub_10017C5C8(*a1, *a2);
}

Swift::Int sub_10016CB50()
{
  return Hasher._finalize()();
}

uint64_t sub_10016CBD0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10016CC3C()
{
  return Hasher._finalize()();
}

uint64_t sub_10016CCB8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100288910, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10016CD18(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x4B4E494C5055;
  if (*v1) {
    uint64_t v2 = 0x4B4E494C4E574F44;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_10016CD54()
{
  id v0 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
  [v0 setAllowedUnits:224];
  [v0 setZeroFormattingBehavior:0x10000];

  qword_1002D8780 = (uint64_t)v0;
}

double sub_10016CDC0()
{
  uint64_t v1 = sub_100157064(&qword_1002D8210);
  __chkstk_darwin(v1 - 8);
  unint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = type metadata accessor for STransferMetrics();
  if (*(unsigned char *)(v0 + *(int *)(v11 + 68)) == 1)
  {
    sub_10016D8C8(v0 + *(int *)(v11 + 44), (uint64_t)v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
      uint64_t v8 = v10;
      goto LABEL_6;
    }
    sub_10016D930((uint64_t)v3);
  }
  static Date.now.getter();
LABEL_6:
  Date.timeIntervalSince(_:)();
  double v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v13;
}

int *sub_10016CF9C()
{
  uint64_t result = (int *)type metadata accessor for STransferMetrics();
  uint64_t v2 = *(void *)(v0 + result[15]);
  uint64_t v3 = *(void *)(v0 + result[14]);
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!v5) {
    return (int *)(uint64_t)0.0;
  }
  uint64_t v6 = *(void *)(v0 + result[13]);
  uint64_t v7 = *(void *)(v0 + result[12]);
  BOOL v4 = __OFADD__(v6, v7);
  uint64_t v8 = v6 + v7;
  if (v4) {
    goto LABEL_12;
  }
  double v9 = (double)v8 / (double)v5 * 100.0;
  if ((~*(void *)&v9 & 0x7FF0000000000000) != 0)
  {
    if (v9 > -9.22337204e18)
    {
      if (v9 < 9.22337204e18) {
        return (int *)(uint64_t)v9;
      }
      __break(1u);
      return (int *)(uint64_t)0.0;
    }
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

int *sub_10016D04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_100157064(&qword_1002D8210);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (int *)type metadata accessor for STransferMetrics();
  uint64_t v13 = result[17];
  if ((*(unsigned char *)(v4 + v13) & 1) == 0)
  {
    uint64_t v14 = result;
    *(void *)(v4 + result[12]) = a1;
    *(void *)(v4 + result[13]) = a3;
    *(void *)(v4 + result[14]) = a2;
    *(void *)(v4 + result[15]) = a4;
    if (*(unsigned char *)(v4 + 8) == 1)
    {
      if (a1 != a2) {
        return result;
      }
    }
    else if (a3 != a4)
    {
      return result;
    }
    static Date.now.getter();
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 0, 1, v15);
    sub_10016DC94((uint64_t)v11, v4 + v14[11]);
    *(unsigned char *)(v4 + v13) = 1;
    uint64_t v16 = v14[16];
    uint64_t result = (int *)swift_errorRelease();
    *(void *)(v4 + v16) = 0;
  }
  return result;
}

void sub_10016D1A4()
{
  uint64_t v1 = v0;
  uint64_t v52 = sub_100157064(&qword_1002D8858);
  uint64_t v2 = *(void *)(v52 - 8);
  uint64_t v3 = __chkstk_darwin(v52);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v48 - v6;
  double v8 = sub_10016CDC0();
  if (qword_1002D7A58 != -1) {
    swift_once();
  }
  id v9 = [(id)qword_1002D8780 stringFromTimeInterval:v8];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    Double.write<A>(to:)();
    uint64_t v11 = v54;
    uint64_t v13 = (void *)v55;
  }
  uint64_t v14 = type metadata accessor for STransferMetrics();
  uint64_t v15 = *(int *)(v14 + 48);
  if (__OFADD__(*(void *)(v1 + *(int *)(v14 + 52)), *(void *)(v1 + v15)))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v16 = (int *)v14;
  uint64_t v49 = *(int *)(v14 + 52);
  uint64_t v50 = v15;
  uint64_t v17 = self;
  uint64_t v51 = v2;
  id v48 = v17;
  id v18 = [v17 bytes];
  sub_10016D82C();
  Measurement.init(value:unit:)();
  uint64_t v54 = 0;
  unint64_t v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v19._countAndFlagsBits = 123;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  double v53 = v16;
  sub_100157064(&qword_1002D8868);
  v20._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 1029990688;
  v21._object = (void *)0xE400000000000000;
  String.append(_:)(v21);
  if (*(unsigned char *)(v1 + 8)) {
    uint64_t v22 = 0x4B4E494C4E574F44;
  }
  else {
    uint64_t v22 = 0x4B4E494C5055;
  }
  if (*(unsigned char *)(v1 + 8)) {
    unint64_t v23 = 0xE800000000000000;
  }
  else {
    unint64_t v23 = 0xE600000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 46;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  double v53 = *(int **)v1;
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0xEA00000000003D73;
  v27._countAndFlagsBits = 0x736572676F727020;
  String.append(_:)(v27);
  double v53 = sub_10016CF9C();
  uint64_t v28 = v7;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x657370616C652025;
  v30._object = (void *)0xEA00000000003D64;
  String.append(_:)(v30);
  v31._countAndFlagsBits = v11;
  v31._object = v13;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._object = (void *)0xEA00000000003D72;
  v32._countAndFlagsBits = 0x6566736E61727420;
  String.append(_:)(v32);
  uint64_t v33 = v51;
  id v34 = [v48 megabytes];
  uint64_t v35 = v52;
  Measurement<>.converted(to:)();

  sub_10016D86C();
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v33 + 8);
  v37(v5, v35);
  v38._object = (void *)0xEA00000000003D65;
  v38._countAndFlagsBits = 0x74656C706D6F6320;
  String.append(_:)(v38);
  if (*(unsigned char *)(v1 + v16[17])) {
    uint64_t v39 = 1702195828;
  }
  else {
    uint64_t v39 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + v16[17])) {
    unint64_t v40 = 0xE400000000000000;
  }
  else {
    unint64_t v40 = 0xE500000000000000;
  }
  unint64_t v41 = v40;
  String.append(_:)(*(Swift::String *)&v39);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 1030779936;
  v42._object = (void *)0xE400000000000000;
  String.append(_:)(v42);
  uint64_t v43 = *(void *)(v1 + v49);
  uint64_t v44 = *(void *)(v1 + v50);
  BOOL v45 = __OFADD__(v43, v44);
  uint64_t v46 = v43 + v44;
  if (v45) {
    goto LABEL_23;
  }
  if ((unint64_t)(v46 - 0x1000000000000000) >> 61 == 7)
  {
    sub_10016CDC0();
    Double.write<A>(to:)();
    v47._countAndFlagsBits = 0x7D7370624DLL;
    v47._object = (void *)0xE500000000000000;
    String.append(_:)(v47);
    v37(v28, v35);
    return;
  }
LABEL_24:
  __break(1u);
}

void sub_10016D6BC()
{
  Hasher._combine(_:)(*(void *)v0);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(qword_1002686E0[*(char *)(v0 + 9)]);
}

Swift::Int sub_10016D74C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10016D790()
{
  return Hasher._finalize()();
}

unint64_t sub_10016D7D4()
{
  unint64_t result = qword_1002D8850;
  if (!qword_1002D8850)
  {
    type metadata accessor for STransferMetrics();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8850);
  }
  return result;
}

unint64_t sub_10016D82C()
{
  unint64_t result = qword_1002D8860;
  if (!qword_1002D8860)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002D8860);
  }
  return result;
}

unint64_t sub_10016D86C()
{
  unint64_t result = qword_1002D8870;
  if (!qword_1002D8870)
  {
    sub_100157104(&qword_1002D8858);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8870);
  }
  return result;
}

uint64_t sub_10016D8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D8210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016D930(uint64_t a1)
{
  uint64_t v2 = sub_100157064(&qword_1002D8210);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_10016D990(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for STransferMetrics();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v26 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *a1;
  uint64_t v17 = *a2;
  sub_10016DBD4((uint64_t)a1, (uint64_t)&v26 - v14);
  sub_10016DBD4((uint64_t)a2, (uint64_t)v13);
  if (v16 == v17)
  {
    if (v15[8]) {
      uint64_t v18 = 0x4B4E494C4E574F44;
    }
    else {
      uint64_t v18 = 0x4B4E494C5055;
    }
    if (v15[8]) {
      unint64_t v19 = 0xE800000000000000;
    }
    else {
      unint64_t v19 = 0xE600000000000000;
    }
    if (v13[8]) {
      uint64_t v20 = 0x4B4E494C4E574F44;
    }
    else {
      uint64_t v20 = 0x4B4E494C5055;
    }
    if (v13[8]) {
      unint64_t v21 = 0xE800000000000000;
    }
    else {
      unint64_t v21 = 0xE600000000000000;
    }
    if (v18 == v20 && v19 == v21)
    {
      swift_bridgeObjectRelease_n();
      sub_10016DC38((uint64_t)v13);
      sub_10016DC38((uint64_t)v15);
      sub_10016DBD4((uint64_t)a1, (uint64_t)v10);
      sub_10016DBD4((uint64_t)a2, (uint64_t)v7);
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10016DC38((uint64_t)v13);
      sub_10016DC38((uint64_t)v15);
      sub_10016DBD4((uint64_t)a1, (uint64_t)v10);
      sub_10016DBD4((uint64_t)a2, (uint64_t)v7);
      BOOL v24 = 0;
      if ((v23 & 1) == 0) {
        goto LABEL_23;
      }
    }
    BOOL v24 = sub_10017C5A4(v10[9], v7[9]);
  }
  else
  {
    sub_10016DC38((uint64_t)v13);
    sub_10016DC38((uint64_t)v15);
    sub_10016DBD4((uint64_t)a1, (uint64_t)v10);
    sub_10016DBD4((uint64_t)a2, (uint64_t)v7);
    BOOL v24 = 0;
  }
LABEL_23:
  sub_10016DC38((uint64_t)v7);
  sub_10016DC38((uint64_t)v10);
  return v24;
}

uint64_t sub_10016DBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for STransferMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016DC38(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for STransferMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10016DC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D8210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for STransferMetrics.SDirection(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for STransferMetrics.SDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016DE58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10016DE80(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for STransferMetrics.SDirection()
{
  return &type metadata for STransferMetrics.SDirection;
}

unint64_t sub_10016DEA0()
{
  unint64_t result = qword_1002D8878;
  if (!qword_1002D8878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8878);
  }
  return result;
}

uint64_t destroy for SURLSessionModel()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SURLSessionModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SURLSessionModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  uint64_t v4 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

__n128 initializeWithTake for SURLSessionModel(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SURLSessionModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for SURLSessionModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 82)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SURLSessionModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 82) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SURLSessionModel()
{
  return &type metadata for SURLSessionModel;
}

unint64_t sub_10016E1E8()
{
  unint64_t result = qword_1002D8880;
  if (!qword_1002D8880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8880);
  }
  return result;
}

uint64_t sub_10016E23C(uint64_t result, char a2)
{
  switch(a2)
  {
    case 1:
      double v2 = *(double *)&result * 1024.0;
      if ((~COERCE__INT64(*(double *)&result * 1024.0) & 0x7FF0000000000000) == 0)
      {
        __break(1u);
        goto LABEL_19;
      }
      if (v2 <= -9.22337204e18)
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v2 < 9.22337204e18) {
        return (uint64_t)v2;
      }
      __break(1u);
LABEL_6:
      double v2 = *(double *)&result * 1024.0 * 1024.0;
      if ((~*(void *)&v2 & 0x7FF0000000000000) == 0) {
        goto LABEL_20;
      }
      if (v2 <= -9.22337204e18)
      {
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      if (v2 < 9.22337204e18) {
        return (uint64_t)v2;
      }
      __break(1u);
LABEL_10:
      double v2 = *(double *)&result * 1024.0 * 1024.0 * 1024.0;
      if ((~*(void *)&v2 & 0x7FF0000000000000) == 0) {
        goto LABEL_22;
      }
      if (v2 <= -9.22337204e18)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      if (v2 >= 9.22337204e18)
      {
        __break(1u);
LABEL_14:
        double v2 = *(double *)&result * 1024.0 * 1024.0 * 1024.0 * 1024.0;
        if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
        {
          if (v2 > -9.22337204e18)
          {
            if (v2 < 9.22337204e18) {
              return (uint64_t)v2;
            }
LABEL_26:
            __break(1u);
            JUMPOUT(0x10016E3C0);
          }
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      return (uint64_t)v2;
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_10;
    case 4:
      goto LABEL_14;
    default:
      return result;
  }
}

uint64_t sub_10016E3D4()
{
  return 1;
}

void sub_10016E3E0()
{
}

uint64_t sub_10016E40C()
{
  return 12383;
}

void sub_10016E41C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10016E428(uint64_t a1)
{
  unint64_t v2 = sub_100170CF4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016E464(uint64_t a1)
{
  unint64_t v2 = sub_100170CF4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016E4A0()
{
  uint64_t result = 0x7365747962;
  switch(*v0)
  {
    case 1:
      unsigned int v2 = 1869375851;
      goto LABEL_6;
    case 2:
      unsigned int v2 = 1634166125;
      goto LABEL_6;
    case 3:
      return 0x6579746261676967;
    case 4:
      unsigned int v2 = 1634887028;
LABEL_6:
      uint64_t result = v2 | 0x6574796200000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10016E530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10016F9A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016E558(uint64_t a1)
{
  unint64_t v2 = sub_100170B50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016E594(uint64_t a1)
{
  unint64_t v2 = sub_100170B50();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016E5D0(uint64_t a1)
{
  unint64_t v2 = sub_100170BF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016E60C(uint64_t a1)
{
  unint64_t v2 = sub_100170BF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016E648(uint64_t a1)
{
  unint64_t v2 = sub_100170CA0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016E684(uint64_t a1)
{
  unint64_t v2 = sub_100170CA0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016E6C0(uint64_t a1)
{
  unint64_t v2 = sub_100170C4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016E6FC(uint64_t a1)
{
  unint64_t v2 = sub_100170C4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016E738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10016E7B8(uint64_t a1)
{
  unint64_t v2 = sub_100170BA4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016E7F4(uint64_t a1)
{
  unint64_t v2 = sub_100170BA4();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10016E830()
{
  return Hasher._finalize()();
}

Swift::Int sub_10016E874()
{
  return Hasher._finalize()();
}

uint64_t sub_10016E8B4()
{
  return 0x72546F5461746164;
}

uint64_t sub_10016E8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x72546F5461746164 && a2 == 0xEE00726566736E61)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10016E994(uint64_t a1)
{
  unint64_t v2 = sub_1001700BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016E9D0(uint64_t a1)
{
  unint64_t v2 = sub_1001700BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016EA0C()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v0 - 8);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10016F878();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  swift_release();
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.init(data:encoding:)();
  uint64_t v6 = v5;
  sub_100156FB8(v1, v3);
  if (!v6) {
    return 32123;
  }
  return v4;
}

uint64_t sub_10016EB4C@<X0>(uint64_t a1@<X8>)
{
  sub_10016FBDC((uint64_t)v3);
  return sub_10016FE24((uint64_t)v3, a1);
}

uint64_t sub_10016EB90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016EA0C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10016EBB8()
{
  uint64_t v0 = sub_10016EA0C();
  uint64_t v2 = v1;
  if (v0 == sub_10016EA0C() && v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

Swift::Int sub_10016EC48()
{
  return Hasher._finalize()();
}

uint64_t sub_10016ECA4()
{
  sub_10016EA0C();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10016ECF4()
{
  return Hasher._finalize()();
}

uint64_t sub_10016ED4C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10016EDAC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10016EDFC(void *a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100157064(&qword_1002D88D0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015714C(a1, a1[3]);
  sub_1001700BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = a2;
  char v12 = a3;
  sub_100170164();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void *sub_10016EF50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10016FF48(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10016EF80(void *a1)
{
  return sub_10016EDFC(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

BOOL sub_10016EFA0(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  switch(*(unsigned char *)(a1 + 8))
  {
    case 1:
      return v4 == 1 && v2 == v3;
    case 2:
      return v4 == 2 && v2 == v3;
    case 3:
      return v4 == 3 && v2 == v3;
    case 4:
      return v4 == 4 && v2 == v3;
    default:
      return !*(unsigned char *)(a2 + 8) && *(void *)&v2 == *(void *)&v3;
  }
}

Swift::Int sub_10016F05C()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10016F6C8((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_10016F0AC(uint64_t a1)
{
  sub_10016F6C8(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int sub_10016F0B8()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_10016F6C8((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10016F104(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  uint64_t v4 = sub_100157064(&qword_1002D8948);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  id v34 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100157064(&qword_1002D8950);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  __chkstk_darwin(v6);
  Swift::String v31 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100157064(&qword_1002D8958);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100157064(&qword_1002D8960);
  uint64_t v28 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100157064(&qword_1002D8968);
  uint64_t v27 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100157064(&qword_1002D8970);
  uint64_t v39 = *(void *)(v17 - 8);
  uint64_t v40 = v17;
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015714C(a1, a1[3]);
  sub_100170B50();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v37)
  {
    case 1:
      char v42 = 1;
      sub_100170CA0();
      uint64_t v20 = v40;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v19, v20);
    case 2:
      char v43 = 2;
      sub_100170C4C();
      uint64_t v20 = v40;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v30;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      char v23 = v10;
      goto LABEL_8;
    case 3:
      char v44 = 3;
      sub_100170BF8();
      BOOL v24 = v31;
      uint64_t v20 = v40;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v33;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v25 = v32;
      goto LABEL_7;
    case 4:
      char v45 = 4;
      sub_100170BA4();
      BOOL v24 = v34;
      uint64_t v20 = v40;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v36;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v25 = v35;
LABEL_7:
      uint64_t v22 = *(void (**)(char *, uint64_t))(v25 + 8);
      char v23 = v24;
LABEL_8:
      v22(v23, v21);
      break;
    default:
      char v41 = 0;
      sub_100170CF4();
      uint64_t v20 = v40;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v14);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v19, v20);
}

void sub_10016F6C8(uint64_t a1, Swift::UInt64 a2, char a3)
{
  switch(a3)
  {
    case 1:
      Swift::UInt v4 = 1;
      goto LABEL_7;
    case 2:
      Swift::UInt v4 = 2;
      goto LABEL_7;
    case 3:
      Swift::UInt v4 = 3;
      goto LABEL_7;
    case 4:
      Swift::UInt v4 = 4;
LABEL_7:
      Hasher._combine(_:)(v4);
      if ((a2 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        a2 = 0;
      }
      break;
    default:
      Hasher._combine(_:)(0);
      break;
  }
  Hasher._combine(_:)(a2);
}

char *sub_10016F760@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001701B8(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10016F790(void *a1)
{
  return sub_10016F104(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

BOOL sub_10016F7B0(uint64_t a1, uint64_t a2)
{
  return sub_10016F8CC(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

unint64_t sub_10016F7CC()
{
  unint64_t result = qword_1002D8888;
  if (!qword_1002D8888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8888);
  }
  return result;
}

unint64_t sub_10016F824()
{
  unint64_t result = qword_1002D8890;
  if (!qword_1002D8890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8890);
  }
  return result;
}

unint64_t sub_10016F878()
{
  unint64_t result = qword_1002D8898;
  if (!qword_1002D8898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8898);
  }
  return result;
}

BOOL sub_10016F8CC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  switch(a2)
  {
    case 1:
      BOOL result = a4 == 1 && *(double *)&a1 == *(double *)&a3;
      break;
    case 2:
      BOOL result = a4 == 2 && *(double *)&a1 == *(double *)&a3;
      break;
    case 3:
      BOOL result = a4 == 3 && *(double *)&a1 == *(double *)&a3;
      break;
    case 4:
      BOOL result = a4 == 4 && *(double *)&a1 == *(double *)&a3;
      break;
    default:
      if (a4) {
        BOOL v4 = 0;
      }
      else {
        BOOL v4 = a1 == a3;
      }
      BOOL result = v4;
      break;
  }
  return result;
}

uint64_t sub_10016F9A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7365747962 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657479626F6C696BLL && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657479626167656DLL && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6579746261676967 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6574796261726574 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10016FBDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10017FBB0((uint64_t)&off_100288960);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v6 = String.data(using:allowLossyConversion:)();
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8 >> 60 == 15)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t result = 0;
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_10016FE8C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10016FEE0(v6, v8);
    swift_release();
    uint64_t v9 = v22[8];
    uint64_t v10 = v23;
    uint64_t v11 = v24;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v16 = v31;
    uint64_t v17 = v32;
    uint64_t v18 = v33;
    unint64_t v12 = v25 | ((unint64_t)v26 << 16);
    if (v30) {
      uint64_t v20 = 256;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v15 = v20 | v29;
    if (v35) {
      int v21 = 256;
    }
    else {
      int v21 = 0;
    }
    uint64_t result = v21 | v34;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v18;
  *(_WORD *)(a1 + 80) = result;
  return result;
}

uint64_t sub_10016FE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D88A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10016FE8C()
{
  unint64_t result = qword_1002D88A8;
  if (!qword_1002D88A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D88A8);
  }
  return result;
}

uint64_t sub_10016FEE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100156FB8(a1, a2);
  }
  return a1;
}

unint64_t sub_10016FEF4()
{
  unint64_t result = qword_1002D88B0;
  if (!qword_1002D88B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D88B0);
  }
  return result;
}

void *sub_10016FF48(void *a1)
{
  uint64_t v3 = sub_100157064(&qword_1002D88B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = sub_10015714C(a1, a1[3]);
  sub_1001700BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100157190((uint64_t)a1);
  }
  else
  {
    sub_100170110();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v7 = v9;
    sub_100157190((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1001700BC()
{
  unint64_t result = qword_1002D88C0;
  if (!qword_1002D88C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D88C0);
  }
  return result;
}

unint64_t sub_100170110()
{
  unint64_t result = qword_1002D88C8;
  if (!qword_1002D88C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D88C8);
  }
  return result;
}

unint64_t sub_100170164()
{
  unint64_t result = qword_1002D88D8;
  if (!qword_1002D88D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D88D8);
  }
  return result;
}

char *sub_1001701B8(void *a1)
{
  uint64_t v53 = sub_100157064(&qword_1002D88E0);
  uint64_t v57 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v60 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100157064(&qword_1002D88E8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v55 = v3;
  uint64_t v56 = v4;
  __chkstk_darwin(v3);
  v59 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100157064(&qword_1002D88F0);
  uint64_t v54 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  id v58 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100157064(&qword_1002D88F8);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100157064(&qword_1002D8900);
  uint64_t v50 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100157064(&qword_1002D8908);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v61 = a1;
  sub_10015714C(a1, v17);
  sub_100170B50();
  uint64_t v18 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    goto LABEL_6;
  }
  uint64_t v47 = v10;
  id v48 = v9;
  unint64_t v19 = v58;
  uint64_t v20 = v59;
  int v21 = v60;
  uint64_t v62 = v14;
  uint64_t v22 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v23 = v13;
  if (*(void *)(v22 + 16) != 1)
  {
    uint64_t v27 = v16;
    uint64_t v16 = (char *)type metadata accessor for DecodingError();
    swift_allocError();
    unsigned __int8 v29 = v28;
    sub_100157064(&qword_1002D8918);
    void *v29 = &type metadata for SDataTransferProperties.SDataSize;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, char *))(*((void *)v16 - 1) + 104))(v29, enum case for DecodingError.typeMismatch(_:), v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v27, v23);
LABEL_6:
    uint64_t v26 = (uint64_t)v61;
    goto LABEL_7;
  }
  switch(*(unsigned char *)(v22 + 32))
  {
    case 1:
      char v64 = 1;
      sub_100170CA0();
      uint64_t v31 = v48;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v33 = v52;
      KeyedDecodingContainer.decode(_:forKey:)();
      char v35 = v34;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v16, v13);
      uint64_t v26 = (uint64_t)v61;
      uint64_t v16 = v35;
      break;
    case 2:
      uint64_t v52 = *(unsigned __int8 *)(v22 + 32);
      char v65 = 2;
      sub_100170C4C();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v36 = v49;
      KeyedDecodingContainer.decode(_:forKey:)();
      char v42 = v41;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v19, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v16, v13);
      goto LABEL_12;
    case 3:
      uint64_t v52 = *(unsigned __int8 *)(v22 + 32);
      char v66 = 3;
      sub_100170BF8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v37 = v55;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v38 = v62;
      char v42 = v43;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v23);
LABEL_12:
      uint64_t v16 = v42;
      uint64_t v26 = (uint64_t)v61;
      break;
    case 4:
      uint64_t v52 = *(unsigned __int8 *)(v22 + 32);
      v59 = (char *)v22;
      char v67 = 4;
      sub_100170BA4();
      unsigned __int8 v32 = v21;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v39 = v53;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v40 = v62;
      char v45 = v44;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v32, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v23);
      uint64_t v16 = v45;
      uint64_t v26 = (uint64_t)v61;
      break;
    default:
      uint64_t v52 = *(unsigned __int8 *)(v22 + 32);
      char v63 = 0;
      sub_100170CF4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v47;
      unsigned __int16 v25 = v16;
      uint64_t v16 = (char *)KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v25, v13);
      uint64_t v26 = (uint64_t)v61;
      break;
  }
LABEL_7:
  sub_100157190(v26);
  return v16;
}

unint64_t sub_100170B50()
{
  unint64_t result = qword_1002D8910;
  if (!qword_1002D8910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8910);
  }
  return result;
}

unint64_t sub_100170BA4()
{
  unint64_t result = qword_1002D8920;
  if (!qword_1002D8920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8920);
  }
  return result;
}

unint64_t sub_100170BF8()
{
  unint64_t result = qword_1002D8928;
  if (!qword_1002D8928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8928);
  }
  return result;
}

unint64_t sub_100170C4C()
{
  unint64_t result = qword_1002D8930;
  if (!qword_1002D8930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8930);
  }
  return result;
}

unint64_t sub_100170CA0()
{
  unint64_t result = qword_1002D8938;
  if (!qword_1002D8938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8938);
  }
  return result;
}

unint64_t sub_100170CF4()
{
  unint64_t result = qword_1002D8940;
  if (!qword_1002D8940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8940);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SDataTransferProperties.SDataSize.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100170E14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.CodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.CodingKeys;
}

uint64_t sub_100170E58()
{
  return 0;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.BytesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.BytesCodingKeys;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.KilobytesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.KilobytesCodingKeys;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.MegabytesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.MegabytesCodingKeys;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.GigabtyesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.GigabtyesCodingKeys;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.TerabytesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.TerabytesCodingKeys;
}

uint64_t getEnumTagSinglePayload for Database(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s13FTMInternal_423SDataTransferPropertiesV9SDataSizeO15BytesCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100170F9CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.CodingKeys()
{
  return &type metadata for SDataTransferProperties.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for SDataTransferProperties.SDataSize(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t sub_100170FF0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100170FF8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize()
{
  return &type metadata for SDataTransferProperties.SDataSize;
}

uint64_t _s13FTMInternal_423SDataTransferPropertiesV9SDataSizeOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s13FTMInternal_423SDataTransferPropertiesV9SDataSizeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDataTransferProperties()
{
  return &type metadata for SDataTransferProperties;
}

unint64_t sub_1001710B0()
{
  unint64_t result = qword_1002D8978;
  if (!qword_1002D8978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8978);
  }
  return result;
}

unint64_t sub_100171108()
{
  unint64_t result = qword_1002D8980;
  if (!qword_1002D8980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8980);
  }
  return result;
}

unint64_t sub_100171160()
{
  unint64_t result = qword_1002D8988;
  if (!qword_1002D8988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8988);
  }
  return result;
}

unint64_t sub_1001711B8()
{
  unint64_t result = qword_1002D8990;
  if (!qword_1002D8990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8990);
  }
  return result;
}

unint64_t sub_100171210()
{
  unint64_t result = qword_1002D8998;
  if (!qword_1002D8998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8998);
  }
  return result;
}

unint64_t sub_100171268()
{
  unint64_t result = qword_1002D89A0;
  if (!qword_1002D89A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89A0);
  }
  return result;
}

unint64_t sub_1001712C0()
{
  unint64_t result = qword_1002D89A8;
  if (!qword_1002D89A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89A8);
  }
  return result;
}

unint64_t sub_100171318()
{
  unint64_t result = qword_1002D89B0;
  if (!qword_1002D89B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89B0);
  }
  return result;
}

unint64_t sub_100171370()
{
  unint64_t result = qword_1002D89B8;
  if (!qword_1002D89B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89B8);
  }
  return result;
}

unint64_t sub_1001713C8()
{
  unint64_t result = qword_1002D89C0;
  if (!qword_1002D89C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89C0);
  }
  return result;
}

unint64_t sub_100171420()
{
  unint64_t result = qword_1002D89C8;
  if (!qword_1002D89C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89C8);
  }
  return result;
}

unint64_t sub_100171478()
{
  unint64_t result = qword_1002D89D0;
  if (!qword_1002D89D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89D0);
  }
  return result;
}

unint64_t sub_1001714D0()
{
  unint64_t result = qword_1002D89D8;
  if (!qword_1002D89D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89D8);
  }
  return result;
}

unint64_t sub_100171528()
{
  unint64_t result = qword_1002D89E0;
  if (!qword_1002D89E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89E0);
  }
  return result;
}

unint64_t sub_100171580()
{
  unint64_t result = qword_1002D89E8;
  if (!qword_1002D89E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89E8);
  }
  return result;
}

unint64_t sub_1001715D8()
{
  unint64_t result = qword_1002D89F0;
  if (!qword_1002D89F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89F0);
  }
  return result;
}

unint64_t sub_100171630()
{
  unint64_t result = qword_1002D89F8;
  if (!qword_1002D89F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D89F8);
  }
  return result;
}

unint64_t sub_100171688()
{
  unint64_t result = qword_1002D8A00;
  if (!qword_1002D8A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8A00);
  }
  return result;
}

unint64_t sub_1001716E0()
{
  unint64_t result = qword_1002D8A08;
  if (!qword_1002D8A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8A08);
  }
  return result;
}

unint64_t sub_100171738()
{
  unint64_t result = qword_1002D8A10;
  if (!qword_1002D8A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8A10);
  }
  return result;
}

unint64_t sub_100171790()
{
  unint64_t result = qword_1002D8A18;
  if (!qword_1002D8A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8A18);
  }
  return result;
}

uint64_t sub_1001717E8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void (*sub_10017185C(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return sub_1001718E8;
}

void sub_1001718E8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();

  free(v1);
}

uint64_t sub_100171950(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for STransferMetrics();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2 - 8);
  uint64_t v30 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v28 - v10;
  int64_t v12 = 0;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v31 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v33 = _swiftEmptyArrayStorage;
  unint64_t v17 = v15 & v13;
  int64_t v32 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v20 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v20 < v32)
    {
      unint64_t v21 = *(void *)(v31 + 8 * v20);
      ++v12;
      if (v21) {
        goto LABEL_22;
      }
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v32) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v31 + 8 * v12);
      if (v21) {
        goto LABEL_22;
      }
      int64_t v12 = v20 + 2;
      if (v20 + 2 >= v32) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v31 + 8 * v12);
      if (v21) {
        goto LABEL_22;
      }
      int64_t v12 = v20 + 3;
      if (v20 + 3 >= v32) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v31 + 8 * v12);
      if (v21)
      {
LABEL_22:
        unint64_t v17 = (v21 - 1) & v21;
        for (unint64_t i = __clz(__rbit64(v21)) + (v12 << 6); ; unint64_t i = v18 | (v12 << 6))
        {
          uint64_t v23 = *(void *)(v3 + 72);
          sub_10016DBD4(*(void *)(a1 + 56) + v23 * i, (uint64_t)v8);
          sub_100174DDC((uint64_t)v8, (uint64_t)v11);
          if (v11[8])
          {
            char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v24 & 1) == 0)
            {
              uint64_t result = sub_10016DC38((uint64_t)v11);
              if (!v17) {
                goto LABEL_7;
              }
              goto LABEL_6;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          sub_100174DDC((uint64_t)v11, v30);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1001B2314(0, v16[2] + 1, 1);
          }
          uint64_t v16 = v33;
          unint64_t v26 = v33[2];
          unint64_t v25 = v33[3];
          unint64_t v27 = v26 + 1;
          if (v26 >= v25 >> 1)
          {
            unint64_t v29 = v26 + 1;
            sub_1001B2314(v25 > 1, v26 + 1, 1);
            unint64_t v27 = v29;
            uint64_t v16 = v33;
          }
          v16[2] = v27;
          uint64_t result = sub_100174DDC(v30, (uint64_t)v16+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ v26 * v23);
          if (!v17) {
            goto LABEL_7;
          }
LABEL_6:
          unint64_t v18 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
        }
      }
      int64_t v22 = v20 + 4;
      if (v22 < v32)
      {
        unint64_t v21 = *(void *)(v31 + 8 * v22);
        if (v21)
        {
          int64_t v12 = v22;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v12 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_35;
          }
          if (v12 >= v32) {
            break;
          }
          unint64_t v21 = *(void *)(v31 + 8 * v12);
          ++v22;
          if (v21) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_33:
    swift_release();
    return (uint64_t)v16;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100171CB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for STransferMetrics();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2 - 8);
  uint64_t v30 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v28 - v10;
  int64_t v12 = 0;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v31 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v33 = _swiftEmptyArrayStorage;
  unint64_t v17 = v15 & v13;
  int64_t v32 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v20 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v20 < v32)
    {
      unint64_t v21 = *(void *)(v31 + 8 * v20);
      ++v12;
      if (v21) {
        goto LABEL_22;
      }
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v32) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v31 + 8 * v12);
      if (v21) {
        goto LABEL_22;
      }
      int64_t v12 = v20 + 2;
      if (v20 + 2 >= v32) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v31 + 8 * v12);
      if (v21) {
        goto LABEL_22;
      }
      int64_t v12 = v20 + 3;
      if (v20 + 3 >= v32) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v31 + 8 * v12);
      if (v21)
      {
LABEL_22:
        unint64_t v17 = (v21 - 1) & v21;
        for (unint64_t i = __clz(__rbit64(v21)) + (v12 << 6); ; unint64_t i = v18 | (v12 << 6))
        {
          uint64_t v23 = *(void *)(v3 + 72);
          sub_10016DBD4(*(void *)(a1 + 56) + v23 * i, (uint64_t)v8);
          sub_100174DDC((uint64_t)v8, (uint64_t)v11);
          if (v11[8] == 1)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v24 & 1) == 0)
            {
              uint64_t result = sub_10016DC38((uint64_t)v11);
              if (!v17) {
                goto LABEL_7;
              }
              goto LABEL_6;
            }
          }
          sub_100174DDC((uint64_t)v11, v30);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1001B2314(0, v16[2] + 1, 1);
          }
          uint64_t v16 = v33;
          unint64_t v26 = v33[2];
          unint64_t v25 = v33[3];
          unint64_t v27 = v26 + 1;
          if (v26 >= v25 >> 1)
          {
            unint64_t v29 = v26 + 1;
            sub_1001B2314(v25 > 1, v26 + 1, 1);
            unint64_t v27 = v29;
            uint64_t v16 = v33;
          }
          v16[2] = v27;
          uint64_t result = sub_100174DDC(v30, (uint64_t)v16+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ v26 * v23);
          if (!v17) {
            goto LABEL_7;
          }
LABEL_6:
          unint64_t v18 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
        }
      }
      int64_t v22 = v20 + 4;
      if (v22 < v32)
      {
        unint64_t v21 = *(void *)(v31 + 8 * v22);
        if (v21)
        {
          int64_t v12 = v22;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v12 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_35;
          }
          if (v12 >= v32) {
            break;
          }
          unint64_t v21 = *(void *)(v31 + 8 * v12);
          ++v22;
          if (v21) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_33:
    swift_release();
    return (uint64_t)v16;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10017201C()
{
  return sub_10017204C(sub_100171950);
}

uint64_t sub_100172034()
{
  return sub_10017204C(sub_100171CB4);
}

uint64_t sub_10017204C(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = v1;
  uint64_t v4 = sub_100157064(&qword_1002D8210);
  __chkstk_darwin(v4 - 8);
  uint64_t v36 = (uint64_t)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v39 - 8);
  uint64_t v7 = __chkstk_darwin(v39);
  uint64_t v37 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v35 = (char *)v31 - v9;
  uint64_t v10 = (int *)type metadata accessor for STransferMetrics();
  uint64_t v11 = *((void *)v10 - 1);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v14 = a1(v40);
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    a1(v40);
    return swift_bridgeObjectRelease();
  }
  v31[2] = 0;
  void v31[3] = v3;
  int64_t v32 = a1;
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  v31[1] = v14;
  uint64_t v17 = v14 + ((v16 + 32) & ~v16);
  uint64_t v38 = *(void *)(v11 + 72);
  unint64_t v18 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  unint64_t v19 = (void (**)(char *, uint64_t))(v6 + 8);
  double v20 = 0.0;
  uint64_t v33 = (void (**)(char *, uint64_t))(v6 + 8);
  unsigned __int8 v34 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  while (1)
  {
    uint64_t result = sub_10016DBD4(v17, (uint64_t)v13);
    uint64_t v25 = *(void *)&v13[v10[13]];
    uint64_t v26 = *(void *)&v13[v10[12]];
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    if ((unint64_t)(v27 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_15;
    }
    if (v13[v10[17]] == 1)
    {
      uint64_t v28 = v36;
      sub_10015D5F4((uint64_t)&v13[v10[11]], v36, &qword_1002D8210);
      if ((*v18)(v28, 1, v39) != 1)
      {
        unint64_t v29 = v18;
        uint64_t v30 = v35;
        (*v34)(v35, v28, v39);
        unint64_t v21 = v30;
        unint64_t v18 = v29;
        unint64_t v19 = v33;
        goto LABEL_5;
      }
      sub_10015D658(v28, &qword_1002D8210);
    }
    unint64_t v21 = v37;
    static Date.now.getter();
LABEL_5:
    Date.timeIntervalSince(_:)();
    double v23 = v22;
    (*v19)(v21, v39);
    double v20 = v20 + (double)(8 * v27) / v23 / 1000000.0;
    sub_10016DC38((uint64_t)v13);
    v17 += v38;
    if (!--v15)
    {
      swift_bridgeObjectRelease();
      a1 = v32;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10017246C()
{
  uint64_t v0 = type metadata accessor for STransferMetrics();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v23 - v5;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v7 = v24;
  uint64_t v8 = v24 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v24 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v15 = 0;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v16 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    sub_10016DBD4(*(void *)(v7 + 56) + *(void *)(v1 + 72) * i, (uint64_t)v6);
    uint64_t result = sub_100174DDC((uint64_t)v6, (uint64_t)v4);
    uint64_t v21 = *(void *)&v4[*(int *)(v0 + 52)];
    BOOL v22 = __OFADD__(v15, v21);
    v15 += v21;
    if (v22)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    uint64_t result = sub_10016DC38((uint64_t)v4);
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_28;
    }
    if (v18 >= v12) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v12) {
          goto LABEL_26;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19)
        {
          int64_t v14 = v18 + 3;
          if (v18 + 3 >= v12) {
            goto LABEL_26;
          }
          unint64_t v19 = *(void *)(v8 + 8 * v14);
          if (!v19)
          {
            int64_t v14 = v18 + 4;
            if (v18 + 4 >= v12) {
              goto LABEL_26;
            }
            unint64_t v19 = *(void *)(v8 + 8 * v14);
            if (!v19) {
              break;
            }
          }
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 5;
  if (v20 >= v12)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return v15;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10017270C()
{
  uint64_t v0 = type metadata accessor for STransferMetrics();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v23 - v5;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v7 = v24;
  uint64_t v8 = v24 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v24 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v15 = 0;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v16 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    sub_10016DBD4(*(void *)(v7 + 56) + *(void *)(v1 + 72) * i, (uint64_t)v6);
    uint64_t result = sub_100174DDC((uint64_t)v6, (uint64_t)v4);
    uint64_t v21 = *(void *)&v4[*(int *)(v0 + 48)];
    BOOL v22 = __OFADD__(v15, v21);
    v15 += v21;
    if (v22)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    uint64_t result = sub_10016DC38((uint64_t)v4);
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_28;
    }
    if (v18 >= v12) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v12) {
          goto LABEL_26;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19)
        {
          int64_t v14 = v18 + 3;
          if (v18 + 3 >= v12) {
            goto LABEL_26;
          }
          unint64_t v19 = *(void *)(v8 + 8 * v14);
          if (!v19)
          {
            int64_t v14 = v18 + 4;
            if (v18 + 4 >= v12) {
              goto LABEL_26;
            }
            unint64_t v19 = *(void *)(v8 + 8 * v14);
            if (!v19) {
              break;
            }
          }
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 5;
  if (v20 >= v12)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return v15;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_1001729AC(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v68 = a4;
  uint64_t v64 = a3;
  int v67 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = sub_100157064(&qword_1002D8A90);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for STransferMetrics();
  uint64_t v69 = *((void *)v10 - 1);
  __chkstk_darwin(v10);
  int64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100157064(&qword_1002D8A98);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  unint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  int64_t v18 = (char *)&v63 - v17;
  uint64_t v71 = OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock;
  [*(id *)(v5 + OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock) lock];
  id v19 = [a1 taskDescription];
  if (v19)
  {
    int64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v23 = 0xE000000000000000;
  }
  uint64_t v24 = HIBYTE(v23) & 0xF;
  uint64_t v25 = v21 & 0xFFFFFFFFFFFFLL;
  if ((v23 & 0x2000000000000000) != 0) {
    uint64_t v26 = HIBYTE(v23) & 0xF;
  }
  else {
    uint64_t v26 = v21 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v72 = v5;
  if (v26)
  {
    if ((v23 & 0x1000000000000000) != 0)
    {
      uint64_t v28 = (uint64_t)sub_1001D230C(v21, v23, 10);
      LOBYTE(v21) = v62;
      goto LABEL_47;
    }
    if ((v23 & 0x2000000000000000) == 0)
    {
      if ((v21 & 0x1000000000000000) != 0) {
        uint64_t v27 = (unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v28 = (uint64_t)sub_1001D22F4(v27, v25, 10);
      LOBYTE(v21) = v29 & 1;
      goto LABEL_47;
    }
    v73[0] = v21;
    v73[1] = v23 & 0xFFFFFFFFFFFFFFLL;
    if (v21 == 43)
    {
      if (!v24) {
        goto LABEL_74;
      }
      if (v24 == 1 || (BYTE1(v21) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v28 = (BYTE1(v21) - 48);
      if (v24 != 2)
      {
        if ((BYTE2(v21) - 48) > 9u) {
          goto LABEL_34;
        }
        uint64_t v28 = 10 * (BYTE1(v21) - 48) + (BYTE2(v21) - 48);
        uint64_t v30 = v24 - 3;
        if (v30)
        {
          uint64_t v31 = (unsigned __int8 *)v73 + 3;
          while (1)
          {
            unsigned int v32 = *v31 - 48;
            if (v32 > 9) {
              goto LABEL_34;
            }
            uint64_t v33 = 10 * v28;
            if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63) {
              goto LABEL_34;
            }
            uint64_t v28 = v33 + v32;
            if (__OFADD__(v33, v32)) {
              goto LABEL_34;
            }
            LOBYTE(v21) = 0;
            ++v31;
            if (!--v30) {
              goto LABEL_47;
            }
          }
        }
      }
    }
    else
    {
      if (v21 == 45)
      {
        if (v24)
        {
          if (v24 != 1 && (BYTE1(v21) - 48) <= 9u)
          {
            if (v24 == 2)
            {
              LOBYTE(v21) = 0;
              uint64_t v28 = -(uint64_t)(BYTE1(v21) - 48);
LABEL_47:
              swift_bridgeObjectRelease();
              if (v21) {
                uint64_t v39 = 0;
              }
              else {
                uint64_t v39 = v28;
              }
              uint64_t v65 = v39;
              goto LABEL_51;
            }
            if ((BYTE2(v21) - 48) <= 9u)
            {
              uint64_t v28 = -10 * (BYTE1(v21) - 48) - (BYTE2(v21) - 48);
              uint64_t v38 = v24 - 3;
              if (!v38) {
                goto LABEL_46;
              }
              v59 = (unsigned __int8 *)v73 + 3;
              while (1)
              {
                unsigned int v60 = *v59 - 48;
                if (v60 > 9) {
                  break;
                }
                uint64_t v61 = 10 * v28;
                if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63) {
                  break;
                }
                uint64_t v28 = v61 - v60;
                if (__OFSUB__(v61, v60)) {
                  break;
                }
                LOBYTE(v21) = 0;
                ++v59;
                if (!--v38) {
                  goto LABEL_47;
                }
              }
            }
          }
LABEL_34:
          uint64_t v28 = 0;
          LOBYTE(v21) = 1;
          goto LABEL_47;
        }
        __break(1u);
LABEL_74:
        __break(1u);
        return;
      }
      if (!v24 || (v21 - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v28 = (v21 - 48);
      if (v24 != 1)
      {
        if ((BYTE1(v21) - 48) > 9u) {
          goto LABEL_34;
        }
        uint64_t v28 = 10 * (v21 - 48) + (BYTE1(v21) - 48);
        uint64_t v34 = v24 - 2;
        if (v34)
        {
          char v35 = (unsigned __int8 *)v73 + 2;
          while (1)
          {
            unsigned int v36 = *v35 - 48;
            if (v36 > 9) {
              goto LABEL_34;
            }
            uint64_t v37 = 10 * v28;
            if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63) {
              goto LABEL_34;
            }
            uint64_t v28 = v37 + v36;
            if (__OFADD__(v37, v36)) {
              goto LABEL_34;
            }
            LOBYTE(v21) = 0;
            ++v35;
            if (!--v34) {
              goto LABEL_47;
            }
          }
        }
      }
    }
LABEL_46:
    LOBYTE(v21) = 0;
    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  uint64_t v65 = 0;
LABEL_51:
  char v66 = v9;
  sub_100174E40();
  unsigned __int8 v40 = [a1 isKindOfClass:swift_getObjCClassFromMetadata()];
  id v41 = [a1 originalRequest];
  if (v41)
  {
    char v42 = v41;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = type metadata accessor for URLRequest();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v16, 0, 1, v43);
  }
  else
  {
    uint64_t v43 = type metadata accessor for URLRequest();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v16, 1, 1, v43);
  }
  sub_100174E80((uint64_t)v16, (uint64_t)v18);
  type metadata accessor for URLRequest();
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v18, 1, v43) == 1)
  {
    sub_10015D658((uint64_t)v18, &qword_1002D8A98);
    unint64_t v45 = 0;
  }
  else
  {
    unint64_t v45 = URLRequest.networkServiceType.getter();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v43);
  }
  char v46 = sub_1001F4860(v45);
  id v47 = [a1 taskIdentifier];
  if (v68)
  {
    uint64_t v48 = v68;
    uint64_t v49 = v64;
  }
  else
  {
    uint64_t v49 = *(void *)aPdpIp0;
    uint64_t v48 = unk_1002DA2D0;
    swift_bridgeObjectRetain();
  }
  char v50 = v67 & 1;
  if (v46 == 9) {
    char v51 = 0;
  }
  else {
    char v51 = v46;
  }
  uint64_t v52 = &v12[v10[11]];
  uint64_t v53 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 1, 1, v53);
  *(void *)int64_t v12 = v47;
  v12[8] = v40;
  v12[9] = v51;
  swift_bridgeObjectRetain();
  static Date.now.getter();
  uint64_t v54 = v65;
  *(void *)&v12[v10[8]] = v65;
  v12[v10[9]] = v50;
  uint64_t v55 = &v12[v10[10]];
  *(void *)uint64_t v55 = v49;
  *((void *)v55 + 1) = v48;
  *(void *)&v12[v10[12]] = 0;
  *(void *)&v12[v10[13]] = 0;
  *(void *)&v12[v10[14]] = 0;
  *(void *)&v12[v10[15]] = 0;
  *(void *)&v12[v10[16]] = 0;
  v12[v10[17]] = 0;
  sub_100174804();
  uint64_t v56 = v72;
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v57 = (uint64_t)v66;
  sub_10016DBD4((uint64_t)v12, (uint64_t)v66);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v69 + 56))(v57, 0, 1, v10);
  swift_getKeyPath();
  swift_getKeyPath();
  id v58 = (void (*)(void *, void))static Published.subscript.modify();
  sub_10018DA3C(v57, v54);
  v58(v73, 0);
  swift_release();
  swift_release();
  sub_10016DC38((uint64_t)v12);
  [*(id *)(v56 + v71) unlock];
}

void sub_10017319C(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v72 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t KeyPath = 0;
  uint64_t v80 = sub_100157064(&qword_1002D8A80);
  __chkstk_darwin(v80);
  uint64_t v9 = (uint64_t *)((char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock;
  [*(id *)(v3 + OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock) lock];
  v78 = a1;
  id v11 = [a1 taskDescription];
  if (v11)
  {
    int64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;
  }
  else
  {
    unint64_t v15 = 0xE000000000000000;
    uint64_t v13 = 0;
  }
  uint64_t v16 = HIBYTE(v15) & 0xF;
  uint64_t v17 = v13 & 0xFFFFFFFFFFFFLL;
  if ((v15 & 0x2000000000000000) != 0) {
    uint64_t v18 = HIBYTE(v15) & 0xF;
  }
  else {
    uint64_t v18 = v13 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v77 = v10;
  uint64_t v73 = ObjectType;
  unint64_t v74 = a3;
  if (!v18)
  {
LABEL_93:
    uint64_t v67 = KeyPath;
    swift_bridgeObjectRelease();
    uint64_t v81 = 0;
    goto LABEL_51;
  }
  if ((v15 & 0x1000000000000000) != 0)
  {
    uint64_t v67 = 0;
    uint64_t v20 = (uint64_t)sub_1001D230C(v13, v15, 10);
    char v22 = v65;
    goto LABEL_47;
  }
  if ((v15 & 0x2000000000000000) == 0)
  {
    if ((v13 & 0x1000000000000000) != 0) {
      id v19 = (unsigned __int8 *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
LABEL_96:
    }
      id v19 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    uint64_t v20 = (uint64_t)sub_1001D22F4(v19, v17, 10);
    uint64_t v67 = KeyPath;
    char v22 = v21 & 1;
    goto LABEL_47;
  }
  v83[0] = v13;
  v83[1] = v15 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v67 = 0;
  if (v13 == 43)
  {
    if (!v16)
    {
LABEL_98:
      __break(1u);
      return;
    }
    if (v16 == 1 || (BYTE1(v13) - 48) > 9u) {
      goto LABEL_34;
    }
    uint64_t v20 = (BYTE1(v13) - 48);
    if (v16 != 2)
    {
      if ((BYTE2(v13) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v20 = 10 * (BYTE1(v13) - 48) + (BYTE2(v13) - 48);
      uint64_t v23 = v16 - 3;
      if (v23)
      {
        uint64_t v24 = (unsigned __int8 *)v83 + 3;
        while (1)
        {
          unsigned int v25 = *v24 - 48;
          if (v25 > 9) {
            goto LABEL_34;
          }
          uint64_t v26 = 10 * v20;
          if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63) {
            goto LABEL_34;
          }
          uint64_t v20 = v26 + v25;
          if (__OFADD__(v26, v25)) {
            goto LABEL_34;
          }
          char v22 = 0;
          ++v24;
          if (!--v23) {
            goto LABEL_47;
          }
        }
      }
    }
LABEL_46:
    char v22 = 0;
    goto LABEL_47;
  }
  if (v13 != 45)
  {
    if (!v16 || (v13 - 48) > 9u) {
      goto LABEL_34;
    }
    uint64_t v20 = (v13 - 48);
    if (v16 != 1)
    {
      if ((BYTE1(v13) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v20 = 10 * (v13 - 48) + (BYTE1(v13) - 48);
      uint64_t v27 = v16 - 2;
      if (v27)
      {
        uint64_t v28 = (unsigned __int8 *)v83 + 2;
        while (1)
        {
          unsigned int v29 = *v28 - 48;
          if (v29 > 9) {
            goto LABEL_34;
          }
          uint64_t v30 = 10 * v20;
          if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63) {
            goto LABEL_34;
          }
          uint64_t v20 = v30 + v29;
          if (__OFADD__(v30, v29)) {
            goto LABEL_34;
          }
          char v22 = 0;
          ++v28;
          if (!--v27) {
            goto LABEL_47;
          }
        }
      }
    }
    goto LABEL_46;
  }
  if (!v16)
  {
    __break(1u);
    goto LABEL_98;
  }
  if (v16 == 1 || (BYTE1(v13) - 48) > 9u) {
    goto LABEL_34;
  }
  if (v16 != 2)
  {
    if ((BYTE2(v13) - 48) <= 9u)
    {
      uint64_t v20 = -10 * (BYTE1(v13) - 48) - (BYTE2(v13) - 48);
      uint64_t v31 = v16 - 3;
      if (!v31) {
        goto LABEL_46;
      }
      char v62 = (unsigned __int8 *)v83 + 3;
      while (1)
      {
        unsigned int v63 = *v62 - 48;
        if (v63 > 9) {
          break;
        }
        uint64_t v64 = 10 * v20;
        if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63) {
          break;
        }
        uint64_t v20 = v64 - v63;
        if (__OFSUB__(v64, v63)) {
          break;
        }
        char v22 = 0;
        ++v62;
        if (!--v31) {
          goto LABEL_47;
        }
      }
    }
LABEL_34:
    uint64_t v20 = 0;
    char v22 = 1;
    goto LABEL_47;
  }
  char v22 = 0;
  uint64_t v20 = -(uint64_t)(BYTE1(v13) - 48);
LABEL_47:
  swift_bridgeObjectRelease();
  if (v22) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v20;
  }
  uint64_t v81 = v32;
LABEL_51:
  uint64_t v33 = v78;
  id v71 = [v78 countOfBytesSent];
  id v70 = [v33 countOfBytesReceived];
  id v69 = [v33 countOfBytesExpectedToSend];
  id v68 = [v33 countOfBytesExpectedToReceive];
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  int64_t v76 = v3;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v75 = &v66;
  uint64_t v34 = v83[0];
  uint64_t v35 = v83[0] + 64;
  uint64_t v36 = 1 << *(unsigned char *)(v83[0] + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & *(void *)(v83[0] + 64);
  int64_t v79 = (unint64_t)(v36 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v3 = 0;
  do
  {
    if (v38)
    {
      unint64_t v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v40 = v39 | (v3 << 6);
    }
    else
    {
      if (__OFADD__(v3++, 1))
      {
        __break(1u);
        goto LABEL_93;
      }
      if (v3 >= v79) {
        goto LABEL_82;
      }
      unint64_t v45 = *(void *)(v35 + 8 * v3);
      if (!v45)
      {
        int64_t v46 = v3 + 1;
        if (v3 + 1 >= v79) {
          goto LABEL_82;
        }
        unint64_t v45 = *(void *)(v35 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v3 + 2;
          if (v3 + 2 >= v79) {
            goto LABEL_82;
          }
          unint64_t v45 = *(void *)(v35 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v3 + 3;
            if (v3 + 3 >= v79) {
              goto LABEL_82;
            }
            unint64_t v45 = *(void *)(v35 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v3 + 4;
              if (v3 + 4 >= v79)
              {
LABEL_82:
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t v59 = *(void *)aPdpIp0;
                uint64_t v60 = unk_1002DA2D0;
                swift_bridgeObjectRetain();
                int64_t v47 = v76;
                sub_1001729AC(v78, 0, v59, v60);
                swift_bridgeObjectRelease();
                uint64_t v52 = v77;
                goto LABEL_85;
              }
              unint64_t v45 = *(void *)(v35 + 8 * v46);
              if (!v45)
              {
                while (1)
                {
                  int64_t v3 = v46 + 1;
                  if (__OFADD__(v46, 1)) {
                    break;
                  }
                  if (v3 >= v79) {
                    goto LABEL_82;
                  }
                  unint64_t v45 = *(void *)(v35 + 8 * v3);
                  ++v46;
                  if (v45) {
                    goto LABEL_69;
                  }
                }
                __break(1u);
                goto LABEL_96;
              }
            }
          }
        }
        int64_t v3 = v46;
      }
LABEL_69:
      unint64_t v38 = (v45 - 1) & v45;
      unint64_t v40 = __clz(__rbit64(v45)) + (v3 << 6);
    }
    uint64_t KeyPath = *(void *)(v34 + 56);
    uint64_t v41 = *(void *)(*(void *)(v34 + 48) + 8 * v40);
    uint64_t v42 = type metadata accessor for STransferMetrics();
    uint64_t v43 = *(void *)(v42 - 8);
    sub_10016DBD4(KeyPath + *(void *)(v43 + 72) * v40, (uint64_t)v9 + *(int *)(v80 + 48));
    *uint64_t v9 = v41;
    sub_10015D658((uint64_t)v9, &qword_1002D8A80);
  }
  while (v41 != v81);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100174804();
  int64_t v47 = v76;
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v48 = sub_10017185C(v83);
  uint64_t v49 = sub_1001739BC(v82, v81);
  char v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  if (!v50(v51, 1, v42)) {
    sub_10016D04C((uint64_t)v70, (uint64_t)v68, (uint64_t)v71, (uint64_t)v69);
  }
  ((void (*)(void *, void))v49)(v82, 0);
  ((void (*)(void *, void))v48)(v83, 0);
  uint64_t v52 = v77;
  unint64_t v53 = v74;
  if (v74)
  {
    uint64_t v54 = HIBYTE(v74) & 0xF;
    if ((v74 & 0x2000000000000000) == 0) {
      uint64_t v54 = v72 & 0xFFFFFFFFFFFFLL;
    }
    if (v54)
    {
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_10017185C(v83);
      uint64_t v56 = sub_1001739BC(v82, v81);
      uint64_t v58 = v57;
      if (!v50(v57, 1, v42))
      {
        uint64_t v61 = (void *)(v58 + *(int *)(v42 + 40));
        *uint64_t v61 = v72;
        v61[1] = v53;
      }
      swift_bridgeObjectRelease();
      ((void (*)(void *, void))v56)(v82, 0);
      ((void (*)(void *, void))v55)(v83, 0);
    }
  }
LABEL_85:
  [*(id *)(v47 + v52) unlock];
}

void (*sub_1001739BC(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_10017485C(v4, a2);
  return sub_100173A1C;
}

void sub_100173A1C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

void sub_100173A68(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = sub_100157064(&qword_1002D8210);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100157064(&qword_1002D8A80);
  __chkstk_darwin(v75);
  id v11 = (uint64_t *)((char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v71 = OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock;
  [*(id *)(v3 + OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock) lock];
  uint64_t v67 = a1;
  id v12 = [a1 taskDescription];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
  }
  else
  {
    unint64_t v16 = 0xE000000000000000;
    uint64_t v14 = 0;
  }
  uint64_t v17 = HIBYTE(v16) & 0xF;
  uint64_t v18 = v14 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000) != 0) {
    uint64_t v19 = HIBYTE(v16) & 0xF;
  }
  else {
    uint64_t v19 = v14 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v68 = ObjectType;
  uint64_t v69 = a2;
  uint64_t v66 = v9;
  if (!v19)
  {
LABEL_85:
    uint64_t v65 = 0;
    swift_bridgeObjectRelease();
    uint64_t v32 = 0;
    goto LABEL_50;
  }
  if ((v16 & 0x1000000000000000) == 0)
  {
    if ((v16 & 0x2000000000000000) == 0)
    {
      if ((v14 & 0x1000000000000000) != 0) {
        uint64_t v20 = (unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
LABEL_88:
      }
        uint64_t v20 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      uint64_t v21 = (uint64_t)sub_1001D22F4(v20, v18, 10);
      LOBYTE(v14) = v22 & 1;
      goto LABEL_47;
    }
    v77[0] = v14;
    v77[1] = v16 & 0xFFFFFFFFFFFFFFLL;
    if (v14 == 43)
    {
      if (!v17) {
        goto LABEL_90;
      }
      if (v17 == 1 || (BYTE1(v14) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v21 = (BYTE1(v14) - 48);
      if (v17 != 2)
      {
        if ((BYTE2(v14) - 48) > 9u) {
          goto LABEL_34;
        }
        uint64_t v21 = 10 * (BYTE1(v14) - 48) + (BYTE2(v14) - 48);
        uint64_t v23 = v17 - 3;
        if (v23)
        {
          uint64_t v24 = (unsigned __int8 *)v77 + 3;
          while (1)
          {
            unsigned int v25 = *v24 - 48;
            if (v25 > 9) {
              goto LABEL_34;
            }
            uint64_t v26 = 10 * v21;
            if ((unsigned __int128)(v21 * (__int128)10) >> 64 != (10 * v21) >> 63) {
              goto LABEL_34;
            }
            uint64_t v21 = v26 + v25;
            if (__OFADD__(v26, v25)) {
              goto LABEL_34;
            }
            LOBYTE(v14) = 0;
            ++v24;
            if (!--v23) {
              goto LABEL_47;
            }
          }
        }
      }
    }
    else
    {
      if (v14 == 45)
      {
        if (v17)
        {
          if (v17 != 1 && (BYTE1(v14) - 48) <= 9u)
          {
            if (v17 == 2)
            {
              LOBYTE(v14) = 0;
              uint64_t v21 = -(uint64_t)(BYTE1(v14) - 48);
              goto LABEL_47;
            }
            if ((BYTE2(v14) - 48) <= 9u)
            {
              uint64_t v21 = -10 * (BYTE1(v14) - 48) - (BYTE2(v14) - 48);
              uint64_t v31 = v17 - 3;
              if (!v31) {
                goto LABEL_46;
              }
              uint64_t v60 = (unsigned __int8 *)v77 + 3;
              while (1)
              {
                unsigned int v61 = *v60 - 48;
                if (v61 > 9) {
                  break;
                }
                uint64_t v62 = 10 * v21;
                if ((unsigned __int128)(v21 * (__int128)10) >> 64 != (10 * v21) >> 63) {
                  break;
                }
                uint64_t v21 = v62 - v61;
                if (__OFSUB__(v62, v61)) {
                  break;
                }
                LOBYTE(v14) = 0;
                ++v60;
                if (!--v31) {
                  goto LABEL_47;
                }
              }
            }
          }
LABEL_34:
          uint64_t v21 = 0;
          LOBYTE(v14) = 1;
          goto LABEL_47;
        }
        __break(1u);
LABEL_90:
        __break(1u);
        return;
      }
      if (!v17 || (v14 - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v21 = (v14 - 48);
      if (v17 != 1)
      {
        if ((BYTE1(v14) - 48) > 9u) {
          goto LABEL_34;
        }
        uint64_t v21 = 10 * (v14 - 48) + (BYTE1(v14) - 48);
        uint64_t v27 = v17 - 2;
        if (v27)
        {
          uint64_t v28 = (unsigned __int8 *)v77 + 2;
          while (1)
          {
            unsigned int v29 = *v28 - 48;
            if (v29 > 9) {
              goto LABEL_34;
            }
            uint64_t v30 = 10 * v21;
            if ((unsigned __int128)(v21 * (__int128)10) >> 64 != (10 * v21) >> 63) {
              goto LABEL_34;
            }
            uint64_t v21 = v30 + v29;
            if (__OFADD__(v30, v29)) {
              goto LABEL_34;
            }
            LOBYTE(v14) = 0;
            ++v28;
            if (!--v27) {
              goto LABEL_47;
            }
          }
        }
      }
    }
LABEL_46:
    LOBYTE(v14) = 0;
    goto LABEL_47;
  }
  uint64_t v21 = (uint64_t)sub_1001D230C(v14, v16, 10);
  LOBYTE(v14) = v63;
LABEL_47:
  swift_bridgeObjectRelease();
  uint64_t v65 = 0;
  if (v14) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v21;
  }
LABEL_50:
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v72 = v3;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v70 = &v64;
  uint64_t v33 = v77[0];
  uint64_t v34 = *(void *)(v77[0] + 64);
  uint64_t v73 = v77[0] + 64;
  uint64_t v35 = 1 << *(unsigned char *)(v77[0] + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & v34;
  int64_t v74 = (unint64_t)(v35 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v38 = 0;
  do
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v38 << 6);
    }
    else
    {
      if (__OFADD__(v38++, 1))
      {
        __break(1u);
        goto LABEL_85;
      }
      if (v38 >= v74) {
        goto LABEL_76;
      }
      unint64_t v45 = *(void *)(v73 + 8 * v38);
      if (!v45)
      {
        int64_t v46 = v38 + 1;
        if (v38 + 1 >= v74) {
          goto LABEL_76;
        }
        unint64_t v45 = *(void *)(v73 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v38 + 2;
          if (v38 + 2 >= v74) {
            goto LABEL_76;
          }
          unint64_t v45 = *(void *)(v73 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v38 + 3;
            if (v38 + 3 >= v74) {
              goto LABEL_76;
            }
            unint64_t v45 = *(void *)(v73 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v38 + 4;
              if (v38 + 4 >= v74)
              {
LABEL_76:
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t v56 = *(void *)aPdpIp0;
                uint64_t v57 = unk_1002DA2D0;
                swift_bridgeObjectRetain();
                uint64_t v58 = v67;
                uint64_t v59 = v56;
                uint64_t v55 = v72;
                sub_1001729AC(v67, 0, v59, v57);
                swift_bridgeObjectRelease();
                sub_100173A68(v58, v69);
                goto LABEL_77;
              }
              unint64_t v45 = *(void *)(v73 + 8 * v46);
              if (!v45)
              {
                while (1)
                {
                  int64_t v38 = v46 + 1;
                  if (__OFADD__(v46, 1)) {
                    break;
                  }
                  if (v38 >= v74) {
                    goto LABEL_76;
                  }
                  unint64_t v45 = *(void *)(v73 + 8 * v38);
                  ++v46;
                  if (v45) {
                    goto LABEL_68;
                  }
                }
                __break(1u);
                goto LABEL_88;
              }
            }
          }
        }
        int64_t v38 = v46;
      }
LABEL_68:
      unint64_t v37 = (v45 - 1) & v45;
      unint64_t v40 = __clz(__rbit64(v45)) + (v38 << 6);
    }
    uint64_t v3 = *(void *)(v33 + 56);
    uint64_t v41 = *(void *)(*(void *)(v33 + 48) + 8 * v40);
    uint64_t v42 = (int *)type metadata accessor for STransferMetrics();
    uint64_t v43 = *((void *)v42 - 1);
    sub_10016DBD4(v3 + *(void *)(v43 + 72) * v40, (uint64_t)v11 + *(int *)(v75 + 48));
    *id v11 = v41;
    sub_10015D658((uint64_t)v11, &qword_1002D8A80);
  }
  while (v41 != v32);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100174804();
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  int64_t v47 = sub_10017185C(v77);
  uint64_t v48 = sub_1001739BC(v76, v32);
  uint64_t v50 = v49;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v43 + 48))(v49, 1, v42))
  {
    uint64_t v51 = (uint64_t)v66;
    static Date.now.getter();
    uint64_t v52 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 0, 1, v52);
    sub_10016DC94(v51, v50 + v42[11]);
    *(unsigned char *)(v50 + v42[17]) = 1;
    uint64_t v53 = v42[16];
    uint64_t v54 = v69;
    swift_errorRetain();
    swift_errorRelease();
    *(void *)(v50 + v53) = v54;
  }
  ((void (*)(void *, void))v48)(v76, 0);
  ((void (*)(void *, void))v47)(v77, 0);
  uint64_t v55 = v72;
LABEL_77:
  [*(id *)(v55 + v71) unlock];
}

id sub_100174318()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = sub_100157064(&qword_1002D8AA8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = &v0[OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore__metrics];
  id v12 = &_swiftEmptyDictionarySingleton;
  uint64_t v7 = v0;
  sub_100157064(&qword_1002D8A78);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v5, v2);
  uint64_t v8 = OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock;
  *(void *)&v7[v8] = [objc_allocWithZone((Class)NSLock) init];
  *(void *)&v7[OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore____lazy_storage___queue] = 0;

  v11.receiver = v7;
  v11.super_class = ObjectType;
  return [super init];
}

id sub_100174494()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_100174560()
{
  return type metadata accessor for STransferMetricsStore();
}

uint64_t type metadata accessor for STransferMetricsStore()
{
  uint64_t result = qword_1002D8A60;
  if (!qword_1002D8A60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001745B4()
{
  sub_10017465C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10017465C()
{
  if (!qword_1002D8A70)
  {
    sub_100157104(&qword_1002D8A78);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002D8A70);
    }
  }
}

void *sub_1001746B8()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1001746C4@<X0>(uint64_t *a1@<X8>)
{
  swift_getObjectType();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100174704@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100174784(uint64_t a1, void **a2)
{
  objc_super v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

unint64_t sub_100174804()
{
  unint64_t result = qword_1002D8A88;
  if (!qword_1002D8A88)
  {
    type metadata accessor for STransferMetricsStore();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8A88);
  }
  return result;
}

void (*sub_10017485C(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_100174BBC(v4);
  v4[9] = sub_10017494C(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_1001748EC;
}

void sub_1001748EC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  objc_super v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

void (*sub_10017494C(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  *uint64_t v8 = a2;
  v8[1] = v3;
  uint64_t v9 = sub_100157064(&qword_1002D8A90);
  uint64_t v10 = malloc(*(void *)(*(void *)(v9 - 8) + 64));
  v8[2] = v10;
  uint64_t v11 = *v3;
  unint64_t v13 = sub_1001EB824(a2);
  *((unsigned char *)v8 + 32) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*v4 + 56);
        uint64_t v20 = type metadata accessor for STransferMetrics();
        uint64_t v21 = *(void *)(v20 - 8);
        sub_100174DDC(v19 + *(void *)(v21 + 72) * v13, (uint64_t)v10);
        uint64_t v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return sub_100174B5C;
      }
LABEL_11:
      uint64_t v20 = type metadata accessor for STransferMetrics();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1001EDF14();
      goto LABEL_7;
    }
    sub_1001EB924(v16, a3 & 1);
    unint64_t v23 = sub_1001EB824(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      unint64_t v13 = v23;
      v8[3] = v23;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  unint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100174B5C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  objc_super v2 = (void *)(*a1)[2];
  sub_100174BF8((uint64_t)v2, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[1], (*a1)[3], **a1);
  sub_10015D658((uint64_t)v2, &qword_1002D8A90);
  free(v2);

  free(v1);
}

uint64_t (*sub_100174BBC(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return sub_100174BEC;
}

uint64_t sub_100174BEC(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

unint64_t sub_100174BF8(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v22 = a5;
  uint64_t v9 = sub_100157064(&qword_1002D8A90);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for STransferMetrics();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v21 - v17;
  sub_10015D5F4(a1, (uint64_t)v11, &qword_1002D8A90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    unint64_t result = sub_10015D658((uint64_t)v11, &qword_1002D8A90);
    if (a2) {
      return sub_1001FB254(a4, *a3);
    }
  }
  else
  {
    sub_100174DDC((uint64_t)v11, (uint64_t)v18);
    uint64_t v20 = (void *)*a3;
    if (a2)
    {
      return sub_100174DDC((uint64_t)v18, v20[7] + *(void *)(v13 + 72) * a4);
    }
    else
    {
      sub_100174DDC((uint64_t)v18, (uint64_t)v16);
      return sub_1001EDB3C(a4, v22, (uint64_t)v16, v20);
    }
  }
  return result;
}

uint64_t sub_100174DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for STransferMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100174E40()
{
  unint64_t result = qword_1002D8AA0;
  if (!qword_1002D8AA0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002D8AA0);
  }
  return result;
}

uint64_t sub_100174E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D8A98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for AllMetricsStates(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AllMetricsStates(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100175044);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AllMetricsStates()
{
  return &type metadata for AllMetricsStates;
}

unint64_t sub_100175080()
{
  unint64_t result = qword_1002D8AB0;
  if (!qword_1002D8AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8AB0);
  }
  return result;
}

uint64_t sub_1001750D4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10017514C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13FTMInternal_424MetricDetailViewDelegate__metric;
  uint64_t v2 = sub_100157064(&qword_1002D8BB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_1001751F0()
{
  return type metadata accessor for MetricDetailViewDelegate();
}

uint64_t type metadata accessor for MetricDetailViewDelegate()
{
  uint64_t result = qword_1002D8AE8;
  if (!qword_1002D8AE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100175244()
{
  sub_1001752D4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001752D4()
{
  if (!qword_1002D8AF8)
  {
    sub_100157104((uint64_t *)&unk_1002D8B00);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002D8AF8);
    }
  }
}

uint64_t sub_100175330@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for MetricDetailViewDelegate();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100175370()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1001753F0(uint64_t a1)
{
  uint64_t v2 = sub_100157064((uint64_t *)&unk_1002D8B00);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  BOOL v7 = (char *)&v9 - v6;
  sub_1001754F4(a1, (uint64_t)&v9 - v6);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1001754F4((uint64_t)v7, (uint64_t)v5);
  swift_retain();
  static Published.subscript.setter();
  return sub_10017555C((uint64_t)v7);
}

uint64_t sub_1001754F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064((uint64_t *)&unk_1002D8B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017555C(uint64_t a1)
{
  uint64_t v2 = sub_100157064((uint64_t *)&unk_1002D8B00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for DashboardStates(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100175688);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DashboardStates()
{
  return &type metadata for DashboardStates;
}

unint64_t sub_1001756C4()
{
  unint64_t result = qword_1002D8BB8;
  if (!qword_1002D8BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8BB8);
  }
  return result;
}

id sub_100175718()
{
  id v0 = [objc_allocWithZone((Class)UIView) init];
  NSString v1 = String._bridgeToObjectiveC()();
  uint64_t v2 = self;
  id v3 = [v2 colorNamed:v1];

  [v0 setBackgroundColor:v3];
  id v4 = [v0 layer];
  id v5 = [v2 blackColor];
  id v6 = [v5 CGColor];

  [v4 setShadowColor:v6];
  id v7 = [v0 layer];
  [v7 setCornerRadius:8.0];

  id v8 = [v0 layer];
  LODWORD(v9) = 1050253722;
  [v8 setShadowOpacity:v9];

  id v10 = [v0 layer];
  [v10 setShadowRadius:8.0];

  id v11 = [v0 layer];
  [v11 setShadowOffset:0.0, 2.0];

  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v0;
}

id sub_100175908()
{
  return sub_100175A84(&OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricNameLabel, (uint64_t (*)(void))sub_100175928);
}

id sub_100175928()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setText:v1];

  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self colorNamed:v2];

  [v0 setTextColor:v3];
  [v0 setTextAlignment:0];
  id v4 = [self systemFontOfSize:14.0 weight:UIFontWeightMedium];
  [v0 setFont:v4];

  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v0;
}

id sub_100175A64()
{
  return sub_100175A84(&OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricAvailabilityLabel, (uint64_t (*)(void))sub_100175AE4);
}

id sub_100175A84(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2();
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id sub_100175AE4()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setText:v1];

  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self colorNamed:v2];

  [v0 setTextColor:v3];
  [v0 setTextAlignment:0];
  id v4 = [self systemFontOfSize:12.0 weight:UIFontWeightMedium];
  [v0 setFont:v4];

  [v0 setHidden:1];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v0;
}

id sub_100175C34()
{
  return sub_100175A84(&OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___activityIndicatorButton, (uint64_t (*)(void))sub_100175C54);
}

id sub_100175C54()
{
  id v0 = [objc_allocWithZone((Class)UIButton) init];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self systemImageNamed:v1];

  [v0 setImage:v2 forState:0];
  id v3 = [v0 titleLabel];
  if (v3)
  {
    id v4 = v3;
    id v5 = [self systemFontOfSize:35.0 weight:UIFontWeightBold];
    [v4 setFont:v5];
  }
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [self colorNamed:v6];

  [v0 setTintColor:v7];
  [v0 setUserInteractionEnabled:0];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v0;
}

id sub_100175E04()
{
  return sub_100175A84(&OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___bottomLabel, (uint64_t (*)(void))sub_100175E24);
}

id sub_100175E24()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setText:v1];

  [v0 setTextAlignment:0];
  id v2 = [self systemFontOfSize:12.0 weight:UIFontWeightLight];
  [v0 setFont:v2];

  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self colorNamed:v3];

  [v0 setTextColor:v4];
  return v0;
}

char *sub_100175F60(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_container;
  id v10 = v4;
  *(void *)&v4[v9] = sub_100175718();
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricNameLabel] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricAvailabilityLabel] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___activityIndicatorButton] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___bottomLabel] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint] = 0;

  v100.receiver = v10;
  v100.super_class = (Class)type metadata accessor for AllMetricsViewCell();
  id v11 = [super initWithFrame:a1, a2, a3, a4];
  uint64_t v12 = OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_container;
  uint64_t v13 = *(void **)&v11[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_container];
  uint64_t v14 = v11;
  id v15 = v13;
  id v16 = sub_100175908();
  [v15 addSubview:v16];

  id v17 = *(id *)&v11[v12];
  id v18 = sub_100175A64();
  [v17 addSubview:v18];

  id v19 = *(id *)&v11[v12];
  id v20 = sub_100175E04();
  [v19 addSubview:v20];

  id v21 = *(id *)&v11[v12];
  id v22 = sub_100175C34();
  [v21 addSubview:v22];

  id v23 = [v14 contentView];
  [v23 addSubview:*(void *)&v11[v12]];

  id v99 = self;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100268000;
  id v25 = [*(id *)&v11[v12] bottomAnchor];
  id v26 = [v14 contentView];
  id v27 = [v26 bottomAnchor];

  id v28 = [v25 constraintEqualToAnchor:v27];
  *(void *)(v24 + 32) = v28;
  id v29 = [*(id *)&v11[v12] leftAnchor];
  id v30 = [v14 contentView];
  id v31 = [v30 leftAnchor];

  id v32 = [v29 constraintEqualToAnchor:v31];
  *(void *)(v24 + 40) = v32;
  id v33 = [*(id *)&v11[v12] rightAnchor];
  id v34 = [v14 contentView];
  id v35 = [v34 rightAnchor];

  id v36 = [v33 constraintEqualToAnchor:v35];
  *(void *)(v24 + 48) = v36;
  id v37 = [*(id *)&v11[v12] topAnchor];
  id v38 = [v14 contentView];
  id v39 = [v38 topAnchor];

  id v40 = [v37 constraintEqualToAnchor:v39];
  *(void *)(v24 + 56) = v40;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v99 activateConstraints:isa];

  id v42 = sub_100175908();
  id v43 = [v42 centerYAnchor];

  id v44 = [*(id *)&v11[v12] centerYAnchor];
  id v45 = [v43 constraintEqualToAnchor:v44];

  int64_t v46 = *(void **)&v14[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint];
  *(void *)&v14[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint] = v45;

  id v47 = sub_100175908();
  id v48 = [v47 centerYAnchor];

  id v49 = [*(id *)&v11[v12] centerYAnchor];
  id v50 = [v48 constraintEqualToAnchor:v49 constant:-10.0];

  uint64_t v51 = *(void **)&v14[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint];
  *(void *)&v14[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint] = v50;

  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1002693E0;
  id v53 = sub_100175908();
  id v54 = [v53 leftAnchor];

  id v55 = [*(id *)&v11[v12] leftAnchor];
  id v56 = [v54 constraintEqualToAnchor:v55 constant:10.0];

  *(void *)(v52 + 32) = v56;
  specialized Array._endMutation()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v99 activateConstraints:v57];

  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_100267EC0;
  id v59 = sub_100175A64();
  id v60 = [v59 centerYAnchor];

  id v61 = sub_100175908();
  id v62 = [v61 centerYAnchor];

  id v63 = [v60 constraintEqualToAnchor:v62];
  *(void *)(v58 + 32) = v63;
  id v64 = sub_100175A64();
  id v65 = [v64 leftAnchor];

  id v66 = [v14 centerXAnchor];
  id v67 = [v65 constraintEqualToAnchor:v66 constant:10.0];

  *(void *)(v58 + 40) = v67;
  specialized Array._endMutation()();
  Class v68 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v99 activateConstraints:v68];

  uint64_t v69 = swift_allocObject();
  *(_OWORD *)(v69 + 16) = xmmword_100267EC0;
  id v70 = sub_100175C34();
  id v71 = [v70 rightAnchor];

  id v72 = [v14 rightAnchor];
  id v73 = [v71 constraintEqualToAnchor:v72 constant:-15.0];

  *(void *)(v69 + 32) = v73;
  id v74 = sub_100175C34();
  id v75 = [v74 centerYAnchor];

  id v76 = [v14 centerYAnchor];
  id v77 = [v75 constraintEqualToAnchor:v76];

  *(void *)(v69 + 40) = v77;
  specialized Array._endMutation()();
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v99 activateConstraints:v78];

  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  if (*(void *)(qword_1002E31C8 + 32) == 0x656E6F685069
    && *(void *)(qword_1002E31C8 + 40) == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v79 = swift_allocObject();
    *(_OWORD *)(v79 + 16) = xmmword_1002693E0;
    id v80 = sub_100175A64();
    id v81 = [v80 rightAnchor];

    id v82 = sub_100175C34();
    id v83 = [v82 leftAnchor];

    id v84 = [v81 constraintGreaterThanOrEqualToAnchor:v83 constant:5.0];
    *(void *)(v79 + 32) = v84;
    specialized Array._endMutation()();
    Class v85 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v99 activateConstraints:v85];
  }
  uint64_t v86 = swift_allocObject();
  *(_OWORD *)(v86 + 16) = xmmword_100267EC0;
  id v87 = sub_100175E04();
  id v88 = [v87 leftAnchor];

  id v89 = sub_100175908();
  id v90 = [v89 leftAnchor];

  id v91 = [v88 constraintEqualToAnchor:v90];
  *(void *)(v86 + 32) = v91;
  id v92 = sub_100175E04();
  id v93 = [v92 topAnchor];

  id v94 = sub_100175908();
  id v95 = [v94 bottomAnchor];

  id v96 = [v93 constraintEqualToAnchor:v95 constant:5.0];
  *(void *)(v86 + 40) = v96;
  specialized Array._endMutation()();
  Class v97 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v99 activateConstraints:v97];

  return v14;
}

void sub_100176AFC()
{
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for AllMetricsViewCell();
  [super layoutSubviews];
  id v1 = [v0 layer];
  [v1 setCornerRadius:10.0];

  id v2 = [v0 layer];
  id v3 = [self clearColor];
  id v4 = [v3 CGColor];

  [v2 setBorderColor:v4];
  id v5 = [v0 layer];
  [v5 setMasksToBounds:1];

  NSString v6 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint];
  if (v6)
  {
    id v7 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint];
    if (v7)
    {
      id v8 = v6;
      id v9 = v7;
      id v10 = sub_100175E04();
      id v11 = [v10 text];

      if (!v11) {
        goto LABEL_7;
      }
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      swift_bridgeObjectRelease();
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
      }
      id v16 = v8;
      id v17 = v9;
      if (v15)
      {
LABEL_7:
        id v16 = v9;
        id v17 = v8;
      }
      [v16 setActive:1];
      [v17 setActive:0];
    }
  }
}

void sub_100176DC8()
{
}

id sub_100176EAC()
{
  return sub_10017B378(type metadata accessor for AllMetricsViewCell);
}

uint64_t type metadata accessor for AllMetricsViewCell()
{
  return self;
}

id sub_100176F84()
{
  return sub_100179B2C(&OBJC_IVAR____TtC13FTMInternal_413TopHeaderView____lazy_storage___separatorView);
}

id sub_100176F90(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_413TopHeaderView____lazy_storage___separatorView] = 0;
  v31.receiver = v4;
  v31.super_class = (Class)type metadata accessor for TopHeaderView();
  [super initWithFrame:a1, a2, a3, a4];
  id v10 = sub_100176F84();
  [v9 addSubview:v10];

  id v11 = sub_100176F84();
  [v11 setTranslatesAutoresizingMaskIntoConstraints:0];

  uint64_t v12 = self;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100268000;
  id v14 = sub_100176F84();
  id v15 = [v14 centerXAnchor];

  id v16 = [v9 centerXAnchor];
  id v17 = [v15 constraintEqualToAnchor:v16];

  *(void *)(v13 + 32) = v17;
  id v18 = sub_100176F84();
  id v19 = [v18 heightAnchor];

  id v20 = [v19 constraintEqualToConstant:1.0];
  *(void *)(v13 + 40) = v20;
  id v21 = sub_100176F84();
  id v22 = [v21 widthAnchor];

  id v23 = [v9 widthAnchor];
  id v24 = [v22 constraintEqualToAnchor:v23];

  *(void *)(v13 + 48) = v24;
  id v25 = sub_100176F84();
  id v26 = [v25 bottomAnchor];

  id v27 = [v9 bottomAnchor];
  id v28 = [v26 constraintEqualToAnchor:v27 constant:1.0];

  *(void *)(v13 + 56) = v28;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 activateConstraints:isa];

  return v9;
}

id sub_10017732C()
{
  return sub_10017B378(type metadata accessor for TopHeaderView);
}

uint64_t type metadata accessor for TopHeaderView()
{
  return self;
}

id sub_100177378()
{
  return sub_100177388(&OBJC_IVAR____TtC13FTMInternal_432CollectionHeaderSuplementaryCell____lazy_storage___headerLabel, 18.0);
}

id sub_100177388(uint64_t *a1, double a2)
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = sub_1001773F4(a2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id sub_1001773E4()
{
  return sub_100177388(&OBJC_IVAR____TtC13FTMInternal_432CollectionHeaderSuplementaryCell____lazy_storage___subHeaderLabel, 14.0);
}

id sub_1001773F4(double a1)
{
  id v2 = [objc_allocWithZone((Class)UILabel) init];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self colorNamed:v3];

  [v2 setTextColor:v4];
  id v5 = [self systemFontOfSize:a1 weight:UIFontWeightBold];
  [v2 setFont:v5];

  [v2 setTextAlignment:0];
  return v2;
}

id sub_100177500(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_432CollectionHeaderSuplementaryCell____lazy_storage___headerLabel] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_432CollectionHeaderSuplementaryCell____lazy_storage___subHeaderLabel] = 0;
  v41.receiver = v4;
  v41.super_class = (Class)type metadata accessor for CollectionHeaderSuplementaryCell();
  id v9 = [super initWithFrame:a1, a2, a3, a4];
  id v10 = sub_100177378();
  [v9 addSubview:v10];

  id v11 = v9;
  id v12 = sub_1001773E4();
  [v11 addSubview:v12];

  id v13 = sub_100177378();
  [v13 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v14 = sub_1001773E4();
  [v14 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v40 = self;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1002693F0;
  id v16 = sub_100177378();
  id v17 = [v16 topAnchor];

  id v18 = [v11 topAnchor];
  id v19 = [v17 constraintEqualToAnchor:v18 constant:10.0];

  *(void *)(v15 + 32) = v19;
  id v20 = sub_100177378();
  id v21 = [v20 leftAnchor];

  id v22 = [v11 leftAnchor];
  id v23 = [v21 constraintEqualToAnchor:v22 constant:20.0];

  *(void *)(v15 + 40) = v23;
  id v24 = sub_100177378();
  id v25 = [v24 heightAnchor];

  id v26 = [v25 constraintEqualToConstant:21.0];
  *(void *)(v15 + 48) = v26;
  id v27 = sub_1001773E4();
  id v28 = [v27 topAnchor];

  id v29 = [v11 topAnchor];
  id v30 = [v28 constraintEqualToAnchor:v29 constant:10.0];

  *(void *)(v15 + 56) = v30;
  id v31 = sub_1001773E4();
  id v32 = [v31 leftAnchor];

  id v33 = [v11 centerXAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33 constant:10.0];

  *(void *)(v15 + 64) = v34;
  id v35 = sub_100177378();
  id v36 = [v35 heightAnchor];

  id v37 = [v36 constraintEqualToConstant:17.0];
  *(void *)(v15 + 72) = v37;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v40 activateConstraints:isa];

  return v11;
}

id sub_100177974()
{
  return sub_10017B378(type metadata accessor for CollectionHeaderSuplementaryCell);
}

uint64_t type metadata accessor for CollectionHeaderSuplementaryCell()
{
  return self;
}

id sub_1001779FC()
{
  return sub_100179A14(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___titleLabel, (double *)&UIFontWeightSemibold, 15.0);
}

id sub_100177A14()
{
  return sub_100179A14(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___subtitleLabel, (double *)&UIFontWeightMedium, 13.0);
}

id sub_100177A2C()
{
  return sub_100177A50(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___valueLabel, 0x726564616548, 0xE600000000000000, (double *)&UIFontWeightMedium);
}

id sub_100177A50(uint64_t *a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v5 = *a1;
  id v6 = *(void **)(v4 + *a1);
  if (v6)
  {
    id v7 = *(id *)(v4 + *a1);
  }
  else
  {
    id v8 = sub_10017A48C(2, a2, a3, a4);
    id v9 = *(void **)(v4 + v5);
    *(void *)(v4 + v5) = v8;
    id v7 = v8;

    id v6 = 0;
  }
  id v10 = v6;
  return v7;
}

id sub_100177AB0()
{
  return sub_100178A64(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___activityIndicator);
}

id sub_100177ABC()
{
  return sub_100179B2C(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___separatorView);
}

id sub_100177AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___titleLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___subtitleLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___valueLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___activityIndicator] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___separatorView] = 0;
  if (a3)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  v95.receiver = v3;
  v95.super_class = (Class)type metadata accessor for FavoritesTableCellV2();
  id v6 = [super initWithStyle:a1 reuseIdentifier:v5];

  id v7 = v6;
  id v8 = [v7 contentView];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [self colorNamed:v9];

  [v8 setBackgroundColor:v10];
  [v7 setSelectionStyle:0];
  id v11 = [v7 contentView];
  id v12 = sub_1001779FC();
  [v11 addSubview:v12];

  id v13 = [v7 contentView];
  id v14 = sub_100177A14();
  [v13 addSubview:v14];

  id v15 = [v7 contentView];
  id v16 = sub_100177A2C();
  [v15 addSubview:v16];

  id v17 = [v7 contentView];
  id v18 = sub_100177AB0();
  [v17 addSubview:v18];

  id v19 = [v7 contentView];
  id v20 = sub_100177ABC();
  [v19 addSubview:v20];

  id v21 = sub_1001779FC();
  [v21 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v22 = sub_100177A14();
  [v22 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v23 = sub_100177A2C();
  [v23 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v24 = sub_100177AB0();
  [v24 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v25 = sub_100177ABC();
  [v25 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v26 = self;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100267EC0;
  id v28 = sub_1001779FC();
  id v29 = [v28 topAnchor];

  id v30 = [v7 topAnchor];
  id v31 = [v29 constraintEqualToAnchor:v30 constant:5.0];

  *(void *)(v27 + 32) = v31;
  id v32 = sub_1001779FC();
  id v33 = [v32 leftAnchor];

  id v34 = sub_100177ABC();
  id v35 = [v34 leftAnchor];

  id v36 = [v33 constraintEqualToAnchor:v35];
  *(void *)(v27 + 40) = v36;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v38 = v26;
  [v26 activateConstraints:isa];

  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_100267EC0;
  id v40 = sub_100177A14();
  id v41 = [v40 leftAnchor];

  id v42 = sub_1001779FC();
  id v43 = [v42 leftAnchor];

  id v44 = [v41 constraintEqualToAnchor:v43];
  *(void *)(v39 + 32) = v44;
  id v45 = sub_100177A14();
  id v46 = [v45 topAnchor];

  id v47 = sub_1001779FC();
  id v48 = [v47 bottomAnchor];

  id v49 = [v46 constraintEqualToAnchor:v48 constant:5.0];
  *(void *)(v39 + 40) = v49;
  specialized Array._endMutation()();
  Class v50 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v38 activateConstraints:v50];

  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_100267EC0;
  id v52 = sub_100177A2C();
  id v53 = [v52 centerYAnchor];

  id v54 = sub_100177A14();
  id v55 = [v54 centerYAnchor];

  id v56 = [v53 constraintEqualToAnchor:v55];
  *(void *)(v51 + 32) = v56;
  id v57 = sub_100177A2C();
  id v58 = [v57 rightAnchor];

  id v59 = sub_100177ABC();
  id v60 = [v59 rightAnchor];

  id v61 = [v58 constraintEqualToAnchor:v60];
  *(void *)(v51 + 40) = v61;
  specialized Array._endMutation()();
  Class v62 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v38 activateConstraints:v62];

  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_100267EC0;
  id v64 = sub_100177AB0();
  id v65 = [v64 centerYAnchor];

  id v66 = [v7 contentView];
  id v67 = [v66 centerYAnchor];

  id v68 = [v65 constraintEqualToAnchor:v67];
  *(void *)(v63 + 32) = v68;
  id v69 = sub_100177AB0();
  id v70 = [v69 rightAnchor];

  id v71 = sub_100177ABC();
  id v72 = [v71 rightAnchor];

  id v73 = [v70 constraintEqualToAnchor:v72];
  *(void *)(v63 + 40) = v73;
  specialized Array._endMutation()();
  Class v74 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v75 = v38;
  [v38 activateConstraints:v74];

  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_100268000;
  id v77 = sub_100177ABC();
  id v78 = [v77 centerXAnchor];

  id v79 = [v7 centerXAnchor];
  id v80 = [v78 constraintEqualToAnchor:v79];

  *(void *)(v76 + 32) = v80;
  id v81 = sub_100177ABC();
  id v82 = [v81 heightAnchor];

  id v83 = [v82 constraintEqualToConstant:1.0];
  *(void *)(v76 + 40) = v83;
  id v84 = sub_100177ABC();
  id v85 = [v84 widthAnchor];

  id v86 = [v7 widthAnchor];
  id v87 = [v85 constraintEqualToAnchor:v86 constant:-40.0];

  *(void *)(v76 + 48) = v87;
  id v88 = sub_100177ABC();
  id v89 = [v88 bottomAnchor];

  id v90 = [v7 contentView];
  id v91 = [v90 bottomAnchor];

  id v92 = [v89 constraintEqualToAnchor:v91 constant:-5.0];
  *(void *)(v76 + 56) = v92;
  specialized Array._endMutation()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v75 activateConstraints:v93];

  return v7;
}

void sub_100178670(void *a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(id))
{
  v7.receiver = a1;
  v7.super_class = (Class)a3();
  id v5 = v7.receiver;
  [super prepareForReuse];
  a4(v6);
}

void sub_1001786D8()
{
}

void sub_100178718(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  id v5 = (void *)a1();
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 setText:v6];

  objc_super v7 = (void *)a2();
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 setText:v8];

  NSString v9 = (void *)a3();
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setText:v10];
}

id sub_100178804()
{
  return sub_10017B378(type metadata accessor for FavoritesTableCellV2);
}

uint64_t type metadata accessor for FavoritesTableCellV2()
{
  return self;
}

id sub_1001788BC()
{
  return sub_100179A14(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___titleLabel, (double *)&UIFontWeightSemibold, 15.0);
}

id sub_1001788D4()
{
  return sub_100179A14(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___subtitleLabel, (double *)&UIFontWeightMedium, 14.0);
}

id sub_1001788EC()
{
  return sub_100175A84(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___bottomLabel, (uint64_t (*)(void))sub_10017890C);
}

id sub_10017890C()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setText:v1];

  [v0 setTextAlignment:0];
  id v2 = [self systemFontOfSize:12.0 weight:UIFontWeightLight];
  [v0 setFont:v2];

  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self colorNamed:v3];

  [v0 setTextColor:v4];
  return v0;
}

id sub_100178A34()
{
  return sub_100177A50(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___valueLabel, 0x726564616548, 0xE600000000000000, (double *)&UIFontWeightMedium);
}

id sub_100178A58()
{
  return sub_100178A64(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___activityIndicator);
}

id sub_100178A64(uint64_t *a1)
{
  uint64_t v2 = *a1;
  NSString v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }
  else
  {
    id v5 = [objc_allocWithZone((Class)UIActivityIndicatorView) initWithActivityIndicatorStyle:100];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [self colorNamed:v6];

    [v5 setColor:v7];
    [v5 setHidesWhenStopped:1];
    NSString v8 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    id v4 = v5;

    NSString v3 = 0;
  }
  id v9 = v3;
  return v4;
}

id sub_100178B54()
{
  return sub_100179B2C(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___separatorView);
}

id sub_100178B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___titleLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___subtitleLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___bottomLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___valueLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___activityIndicator] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___separatorView] = 0;
  if (a3)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  v108.receiver = v3;
  v108.super_class = (Class)type metadata accessor for DashboardCell();
  id v6 = [super initWithStyle:a1 reuseIdentifier:v5];

  id v7 = v6;
  id v8 = [v7 contentView];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [self colorNamed:v9];

  [v8 setBackgroundColor:v10];
  [v7 setSelectionStyle:0];
  id v11 = [v7 contentView];
  id v12 = sub_1001788BC();
  [v11 addSubview:v12];

  id v13 = [v7 contentView];
  id v14 = sub_1001788D4();
  [v13 addSubview:v14];

  id v15 = [v7 contentView];
  id v16 = sub_1001788EC();
  [v15 addSubview:v16];

  id v17 = [v7 contentView];
  id v18 = sub_100178A34();
  [v17 addSubview:v18];

  id v19 = [v7 contentView];
  id v20 = sub_100178A58();
  [v19 addSubview:v20];

  id v21 = [v7 contentView];
  id v22 = sub_100178B54();
  [v21 addSubview:v22];

  id v23 = sub_1001788BC();
  [v23 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v24 = sub_1001788D4();
  [v24 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v25 = sub_1001788EC();
  [v25 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v26 = sub_100178A34();
  [v26 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v27 = sub_100178A58();
  [v27 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v28 = sub_100178B54();
  [v28 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v29 = self;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100267EC0;
  id v31 = sub_1001788BC();
  id v32 = [v31 topAnchor];

  id v33 = [v7 topAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33 constant:5.0];

  *(void *)(v30 + 32) = v34;
  id v35 = sub_1001788BC();
  id v36 = [v35 leftAnchor];

  id v37 = sub_100178B54();
  id v38 = [v37 leftAnchor];

  id v39 = [v36 constraintEqualToAnchor:v38];
  *(void *)(v30 + 40) = v39;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v29 activateConstraints:isa];

  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_100267EC0;
  id v42 = sub_1001788D4();
  id v43 = [v42 leftAnchor];

  id v44 = sub_1001788BC();
  id v45 = [v44 leftAnchor];

  id v46 = [v43 constraintEqualToAnchor:v45];
  *(void *)(v41 + 32) = v46;
  id v47 = sub_1001788D4();
  id v48 = [v47 topAnchor];

  id v49 = sub_1001788BC();
  id v50 = [v49 bottomAnchor];

  id v51 = [v48 constraintEqualToAnchor:v50 constant:5.0];
  *(void *)(v41 + 40) = v51;
  specialized Array._endMutation()();
  Class v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v29 activateConstraints:v52];

  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_100267EC0;
  id v54 = sub_1001788EC();
  id v55 = [v54 leftAnchor];

  id v56 = sub_1001788D4();
  id v57 = [v56 leftAnchor];

  id v58 = [v55 constraintEqualToAnchor:v57];
  *(void *)(v53 + 32) = v58;
  id v59 = sub_1001788EC();
  id v60 = [v59 topAnchor];

  id v61 = sub_1001788D4();
  id v62 = [v61 bottomAnchor];

  id v63 = [v60 constraintEqualToAnchor:v62 constant:5.0];
  *(void *)(v53 + 40) = v63;
  specialized Array._endMutation()();
  Class v64 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v29 activateConstraints:v64];

  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_100267EC0;
  id v66 = sub_100178A34();
  id v67 = [v66 centerYAnchor];

  id v68 = sub_1001788D4();
  id v69 = [v68 centerYAnchor];

  id v70 = [v67 constraintEqualToAnchor:v69];
  *(void *)(v65 + 32) = v70;
  id v71 = sub_100178A34();
  id v72 = [v71 rightAnchor];

  id v73 = sub_100178B54();
  id v74 = [v73 rightAnchor];

  id v75 = [v72 constraintEqualToAnchor:v74];
  *(void *)(v65 + 40) = v75;
  specialized Array._endMutation()();
  Class v76 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v29 activateConstraints:v76];

  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_100267EC0;
  id v78 = sub_100178A58();
  id v79 = [v78 centerYAnchor];

  id v80 = sub_1001788D4();
  id v81 = [v80 centerYAnchor];

  id v82 = [v79 constraintEqualToAnchor:v81];
  *(void *)(v77 + 32) = v82;
  id v83 = sub_100178A58();
  id v84 = [v83 rightAnchor];

  id v85 = sub_100178B54();
  id v86 = [v85 rightAnchor];

  id v87 = [v84 constraintEqualToAnchor:v86];
  *(void *)(v77 + 40) = v87;
  specialized Array._endMutation()();
  Class v88 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v29 activateConstraints:v88];

  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = xmmword_100268000;
  id v90 = sub_100178B54();
  id v91 = [v90 centerXAnchor];

  id v92 = [v7 centerXAnchor];
  id v93 = [v91 constraintEqualToAnchor:v92];

  *(void *)(v89 + 32) = v93;
  id v94 = sub_100178B54();
  id v95 = [v94 heightAnchor];

  id v96 = [v95 constraintEqualToConstant:1.0];
  *(void *)(v89 + 40) = v96;
  id v97 = sub_100178B54();
  id v98 = [v97 widthAnchor];

  id v99 = [v7 widthAnchor];
  id v100 = [v98 constraintEqualToAnchor:v99 constant:-40.0];

  *(void *)(v89 + 48) = v100;
  id v101 = sub_100178B54();
  id v102 = [v101 bottomAnchor];

  id v103 = [v7 contentView];
  id v104 = [v103 bottomAnchor];

  id v105 = [v102 constraintEqualToAnchor:v104 constant:-5.0];
  *(void *)(v89 + 56) = v105;
  specialized Array._endMutation()();
  Class v106 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v29 activateConstraints:v106];

  return v7;
}

void sub_100179834()
{
  id v0 = sub_1001788BC();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setText:v1];

  id v2 = sub_1001788D4();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setText:v3];

  id v4 = sub_1001788EC();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setText:v5];

  id v6 = sub_100178A34();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setText:v7];
}

id sub_100179934()
{
  return sub_10017B378(type metadata accessor for DashboardCell);
}

uint64_t type metadata accessor for DashboardCell()
{
  return self;
}

id sub_1001799FC()
{
  return sub_100179A14(&OBJC_IVAR____TtC13FTMInternal_423MultiSelectionModalCell____lazy_storage___titleLabel, (double *)&UIFontWeightSemibold, 15.0);
}

id sub_100179A14(uint64_t *a1, double *a2, double a3)
{
  uint64_t v4 = *a1;
  NSString v5 = *(void **)(v3 + *a1);
  if (v5)
  {
    id v6 = *(id *)(v3 + *a1);
  }
  else
  {
    id v9 = [objc_allocWithZone((Class)UILabel) init];
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 setText:v10];

    [v9 setTextAlignment:0];
    id v11 = [self systemFontOfSize:a3 weight:*a2];
    [v9 setFont:v11];

    id v12 = *(void **)(v3 + v4);
    *(void *)(v3 + v4) = v9;
    id v6 = v9;

    NSString v5 = 0;
  }
  id v13 = v5;
  return v6;
}

id sub_100179B20()
{
  return sub_100179B2C(&OBJC_IVAR____TtC13FTMInternal_423MultiSelectionModalCell____lazy_storage___separatorView);
}

id sub_100179B2C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }
  else
  {
    id v5 = [objc_allocWithZone((Class)UIView) init];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [self colorNamed:v6];

    [v5 setBackgroundColor:v7];
    id v8 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    id v4 = v5;

    uint64_t v3 = 0;
  }
  id v9 = v3;
  return v4;
}

id sub_100179C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_423MultiSelectionModalCell____lazy_storage___titleLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_423MultiSelectionModalCell____lazy_storage___separatorView] = 0;
  if (a3)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  v47.receiver = v3;
  v47.super_class = (Class)type metadata accessor for MultiSelectionModalCell();
  id v6 = [super initWithStyle:a1 reuseIdentifier:v5];

  id v7 = v6;
  id v8 = [v7 contentView];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [self colorNamed:v9];

  [v8 setBackgroundColor:v10];
  [v7 setSelectionStyle:0];
  id v11 = [v7 contentView];
  id v12 = sub_1001799FC();
  [v11 addSubview:v12];

  id v13 = [v7 contentView];
  id v14 = sub_100179B20();
  [v13 addSubview:v14];

  id v15 = sub_1001799FC();
  [v15 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v16 = sub_100179B20();
  [v16 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v17 = self;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100267EC0;
  id v19 = sub_1001799FC();
  id v20 = [v19 centerXAnchor];

  id v21 = [v7 centerXAnchor];
  id v22 = [v20 constraintEqualToAnchor:v21];

  *(void *)(v18 + 32) = v22;
  id v23 = sub_1001799FC();
  id v24 = [v23 centerYAnchor];

  id v25 = [v7 centerYAnchor];
  id v26 = [v24 constraintEqualToAnchor:v25];

  *(void *)(v18 + 40) = v26;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v17 activateConstraints:isa];

  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_100268000;
  id v29 = sub_100179B20();
  id v30 = [v29 centerXAnchor];

  id v31 = [v7 centerXAnchor];
  id v32 = [v30 constraintEqualToAnchor:v31];

  *(void *)(v28 + 32) = v32;
  id v33 = sub_100179B20();
  id v34 = [v33 heightAnchor];

  id v35 = [v34 constraintEqualToConstant:1.0];
  *(void *)(v28 + 40) = v35;
  id v36 = sub_100179B20();
  id v37 = [v36 widthAnchor];

  id v38 = [v7 widthAnchor];
  id v39 = [v37 constraintEqualToAnchor:v38 constant:-40.0];

  *(void *)(v28 + 48) = v39;
  id v40 = sub_100179B20();
  id v41 = [v40 bottomAnchor];

  id v42 = [v7 contentView];
  id v43 = [v42 bottomAnchor];

  id v44 = [v41 constraintEqualToAnchor:v43 constant:-5.0];
  *(void *)(v28 + 56) = v44;
  specialized Array._endMutation()();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v17 activateConstraints:v45];

  return v7;
}

uint64_t sub_10017A1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (a4)
  {
    a4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 0;
  }
  return a5(a3, a4, v8);
}

void sub_10017A214(char *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  *(void *)&a1[*a4] = 0;
  *(void *)&a1[*a5] = 0;
  id v6 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10017A2BC(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(id))
{
  v9.receiver = a1;
  v9.super_class = (Class)a3();
  id v5 = v9.receiver;
  [super prepareForReuse];
  uint64_t v7 = (void *)a4(v6);
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 setText:v8];
}

id sub_10017A354()
{
  return sub_10017B378(type metadata accessor for MultiSelectionModalCell);
}

uint64_t type metadata accessor for MultiSelectionModalCell()
{
  return self;
}

id sub_10017A3DC()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___leftLabel;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___leftLabel);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___leftLabel);
  }
  else
  {
    id v4 = sub_10017A48C(0, 0x656C746954, 0xE500000000000000, (double *)&UIFontWeightLight);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_10017A458()
{
  return sub_100177A50(&OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___rightLabel, 0x656C746974627553, 0xEF737265626D754ELL, (double *)&UIFontWeightLight);
}

id sub_10017A48C(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  id v6 = [objc_allocWithZone((Class)UILabel) init];
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setText:v7];

  [v6 setTextAlignment:a1];
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [self colorNamed:v8];

  [v6 setTextColor:v9];
  id v10 = [self systemFontOfSize:13.0 weight:*a4];
  [v6 setFont:v10];

  return v6;
}

id sub_10017A5BC()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___separatorView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___separatorView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___separatorView);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UIView) init];
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [self colorNamed:v5];

    [v4 setBackgroundColor:v6];
    [v4 setHidden:1];
    NSString v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

id sub_10017A6BC(double a1, double a2, double a3, double a4)
{
  v4[OBJC_IVAR____TtC13FTMInternal_412SecondVCCell_metricFavorited] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___leftLabel] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___rightLabel] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___separatorView] = 0;
  v71.receiver = v4;
  v71.super_class = (Class)type metadata accessor for SecondVCCell();
  id v9 = [super initWithFrame:a1, a2, a3, a4];
  id v10 = [v9 contentView];
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [self colorNamed:v11];

  [v10 setBackgroundColor:v12];
  id v13 = [v9 contentView];
  id v14 = sub_10017A3DC();
  [v13 addSubview:v14];

  id v15 = [v9 contentView];
  id v16 = sub_10017A458();
  [v15 addSubview:v16];

  id v17 = [v9 contentView];
  id v18 = sub_10017A5BC();
  [v17 addSubview:v18];

  id v19 = sub_10017A3DC();
  [v19 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v20 = sub_10017A458();
  [v20 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v21 = sub_10017A5BC();
  [v21 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v22 = self;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100267EC0;
  id v24 = sub_10017A3DC();
  id v25 = [v24 bottomAnchor];

  id v26 = sub_10017A5BC();
  id v27 = [v26 topAnchor];

  id v28 = [v25 constraintEqualToAnchor:v27 constant:-5.0];
  *(void *)(v23 + 32) = v28;
  id v29 = sub_10017A3DC();
  id v30 = [v29 leftAnchor];

  id v31 = sub_10017A5BC();
  id v32 = [v31 leftAnchor];

  id v33 = [v30 constraintEqualToAnchor:v32];
  *(void *)(v23 + 40) = v33;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v22 activateConstraints:isa];

  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_100269400;
  id v36 = sub_10017A458();
  id v37 = [v36 centerYAnchor];

  id v38 = sub_10017A3DC();
  id v39 = [v38 centerYAnchor];

  id v40 = [v37 constraintEqualToAnchor:v39];
  *(void *)(v35 + 32) = v40;
  id v41 = sub_10017A458();
  id v42 = [v41 rightAnchor];

  id v43 = sub_10017A5BC();
  id v44 = [v43 rightAnchor];

  id v45 = [v42 constraintEqualToAnchor:v44];
  *(void *)(v35 + 40) = v45;
  id v46 = sub_10017A458();
  id v47 = [v46 leftAnchor];

  id v48 = sub_10017A3DC();
  id v49 = [v48 rightAnchor];

  id v50 = [v47 constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:v49 multiplier:1.0];
  *(void *)(v35 + 48) = v50;
  specialized Array._endMutation()();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v22 activateConstraints:v51];

  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_100268000;
  id v53 = sub_10017A5BC();
  id v54 = [v53 centerXAnchor];

  id v55 = [v9 centerXAnchor];
  id v56 = [v54 constraintEqualToAnchor:v55];

  *(void *)(v52 + 32) = v56;
  id v57 = sub_10017A5BC();
  id v58 = [v57 heightAnchor];

  id v59 = [v58 constraintEqualToConstant:1.0];
  *(void *)(v52 + 40) = v59;
  id v60 = sub_10017A5BC();
  id v61 = [v60 widthAnchor];

  id v62 = [v9 widthAnchor];
  id v63 = [v61 constraintEqualToAnchor:v62 constant:-40.0];

  *(void *)(v52 + 48) = v63;
  id v64 = sub_10017A5BC();
  id v65 = [v64 bottomAnchor];

  id v66 = [v9 contentView];
  id v67 = [v66 bottomAnchor];

  id v68 = [v65 constraintEqualToAnchor:v67 constant:-5.0];
  *(void *)(v52 + 56) = v68;
  specialized Array._endMutation()();
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v22 activateConstraints:v69];

  return v9;
}

void sub_10017AF64()
{
  id v0 = sub_10017A3DC();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setText:v1];

  id v2 = sub_10017A458();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setText:v3];

  id v4 = sub_10017A458();
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [self colorNamed:v5];

  [v4 setTextColor:v6];
}

id sub_10017B094(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return [super isHighlighted];
}

void sub_10017B164(char a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  v15.receiver = v5;
  v15.super_class = (Class)a2();
  [super setHighlighted:a1 & 1];
  if ([v5 isHighlighted])
  {
    id v9 = [objc_allocWithZone((Class)UISelectionFeedbackGenerator) init];
    [v9 selectionChanged];
    [v5 setAlpha:0.5];
    id v10 = self;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v5;
    v14[4] = a4;
    v14[5] = v11;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_1001E0068;
    v14[3] = a5;
    id v12 = _Block_copy(v14);
    id v13 = v5;
    swift_release();
    [v10 animateWithDuration:0 delay:v12 options:0 animations:0.5 completion:0.05];

    _Block_release(v12);
  }
}

id sub_10017B2CC(void *a1)
{
  [a1 setAlpha:1.0];
  CGAffineTransformMakeScale(&v3, 1.7, 1.7);
  [a1 setTransform:&v3];
  *(_OWORD *)&v3.a = 0x3FF0000000000000uLL;
  v3.c = 0.0;
  v3.d = 1.0;
  *(_OWORD *)&v3.tx = 0uLL;
  return [a1 setTransform:&v3];
}

id sub_10017B360()
{
  return sub_10017B378(type metadata accessor for SecondVCCell);
}

id sub_10017B378(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for SecondVCCell()
{
  return self;
}

uint64_t sub_10017B430()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10017B468()
{
  return sub_10017B2CC(*(void **)(v0 + 16));
}

uint64_t sub_10017B484(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10017B494()
{
  return swift_release();
}

void sub_10017B49C()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_container;
  *(void *)&v0[v1] = sub_100175718();
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricNameLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricAvailabilityLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___activityIndicatorButton] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___bottomLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10017B558()
{
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___titleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___subtitleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___bottomLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___valueLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___activityIndicator] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___separatorView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_10017B610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = &v3[OBJC_IVAR____TtC13FTMInternal_410TickerCell_digit];
  *(void *)id v6 = 48;
  *((void *)v6 + 1) = 0xE100000000000000;
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_410TickerCell_fontSize] = 0x4044000000000000;
  uint64_t v7 = OBJC_IVAR____TtC13FTMInternal_410TickerCell_numberLabel;
  id v8 = objc_allocWithZone((Class)UILabel);
  id v9 = v3;
  *(void *)&v3[v7] = [v8 init];

  if (a3)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for TickerCell();
  id v11 = [super initWithStyle:a1 reuseIdentifier:v10];

  id v12 = v11;
  sub_10017B82C();

  return v12;
}

void sub_10017B82C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_410TickerCell_numberLabel];
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setText:v3];

  id v4 = [self systemFontOfSize:*(double *)&v1[OBJC_IVAR____TtC13FTMInternal_410TickerCell_fontSize] weight:UIFontWeightRegular];
  [v2 setFont:v4];

  [v2 setTextAlignment:1];
  NSString v5 = self;
  id v6 = [v5 blackColor];
  [v2 setTextColor:v6];

  id v7 = [v1 contentView];
  [v7 addSubview:v2];

  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v8 = [v1 contentView];
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100268000;
  sub_100167598(0, (unint64_t *)&qword_1002D9800);
  uint64_t v10 = sub_100167598(0, &qword_1002D8E30);
  uint64_t v27 = v10;
  v26[0] = v2;
  id v11 = v2;
  id v12 = [v1 contentView];
  uint64_t v13 = sub_100167598(0, qword_1002D9810);
  uint64_t v25 = v13;
  v24[0] = v12;
  *(void *)(v9 + 32) = sub_100198F0C(v26, 5, 0, v24, 5, 1.0, 0.0);
  uint64_t v27 = v10;
  v26[0] = v11;
  id v14 = v11;
  id v15 = [v1 contentView];
  uint64_t v25 = v13;
  v24[0] = v15;
  *(void *)(v9 + 40) = sub_100198F0C(v26, 6, 0, v24, 6, 1.0, 0.0);
  uint64_t v27 = v10;
  v26[0] = v14;
  id v16 = v14;
  id v17 = [v1 contentView];
  uint64_t v25 = v13;
  v24[0] = v17;
  *(void *)(v9 + 48) = sub_100198F0C(v26, 3, 0, v24, 3, 1.0, 0.0);
  uint64_t v27 = v10;
  v26[0] = v16;
  id v18 = v16;
  id v19 = [v1 contentView];
  uint64_t v25 = v13;
  v24[0] = v19;
  *(void *)(v9 + 56) = sub_100198F0C(v26, 4, 0, v24, 4, 1.0, 0.0);
  v26[0] = v9;
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 addConstraints:isa];

  id v21 = [v5 clearColor];
  [v1 setBackgroundColor:v21];

  id v22 = [v1 contentView];
  id v23 = [v5 clearColor];
  [v22 setBackgroundColor:v23];
}

id sub_10017BC5C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TickerCell();
  return [super dealloc];
}

uint64_t type metadata accessor for TickerCell()
{
  return self;
}

uint64_t sub_10017BD04()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for AttributeDetailsViewModel()
{
  return self;
}

uint64_t *sub_10017BD78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    id v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    id v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10017BE68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10017BEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10017BF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10017C058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10017C0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10017C184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10017C198);
}

uint64_t sub_10017C198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10017C25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017C270);
}

uint64_t sub_10017C270(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AttributeDetailsCollection()
{
  uint64_t result = qword_1002D8F98;
  if (!qword_1002D8F98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10017C37C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10017C418()
{
  unint64_t result = qword_1002D8410;
  if (!qword_1002D8410)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8410);
  }
  return result;
}

uint64_t sub_10017C470@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AttributeDetailsViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10017C4AC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000021;
  unint64_t v3 = 0x8000000100239AC0;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000027;
    }
    else {
      unint64_t v5 = 0xD00000000000001FLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x8000000100239AF0;
    }
    else {
      unint64_t v6 = 0x8000000100239B20;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000021;
  unint64_t v6 = 0x8000000100239AC0;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD000000000000027;
    }
    else {
      unint64_t v2 = 0xD00000000000001FLL;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x8000000100239AF0;
    }
    else {
      unint64_t v3 = 0x8000000100239B20;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

BOOL sub_10017C5A4(char a1, char a2)
{
  return qword_1002696C0[a1] == qword_1002696C0[a2];
}

uint64_t sub_10017C5C8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x4B4E494C4E574F44;
  }
  else {
    uint64_t v3 = 0x4B4E494C5055;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x4B4E494C4E574F44;
  }
  else {
    uint64_t v5 = 0x4B4E494C5055;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10017C66C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

void sub_10017C6FC(uint64_t a1, char a2)
{
}

Swift::Int sub_10017C730(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10017C780()
{
  return Hasher._finalize()();
}

char *sub_10017C824()
{
  v2[0] = 1;
  unint64_t v3 = 0xD000000000000013;
  unint64_t v4 = 0x800000010023B150;
  __int16 v5 = -25535;
  char v6 = 0;
  uint64_t v7 = sub_10017FBB0((uint64_t)&off_1002888E8);
  uint64_t v8 = 0x3FF0000000000000;
  __int16 v9 = 257;
  uint64_t v10 = 0x4059000000000000;
  char v11 = 2;
  uint64_t v12 = 0x4059000000000000;
  __int16 v13 = 2;
  id v0 = objc_allocWithZone((Class)type metadata accessor for SURLSessionViewModel());
  return sub_10020C5BC((uint64_t)v2);
}

uint64_t sub_10017C8C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v81 = a2;
  uint64_t v3 = sub_100157064(&qword_1002D9010);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v82 = (uint64_t)v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v80 = (char *)v63 - v6;
  uint64_t v71 = sub_100157064(&qword_1002D9018);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  Class v69 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100157064(&qword_1002D9020);
  uint64_t v75 = *(void *)(v76 - 8);
  uint64_t v8 = __chkstk_darwin(v76);
  id v68 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v67 = (uint64_t)v63 - v10;
  uint64_t v11 = sub_100157064(&qword_1002D9028);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v79 = (uint64_t)v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v78 = (uint64_t)v63 - v14;
  uint64_t v77 = (char *)sub_100157064(&qword_1002D9030);
  uint64_t v73 = *((void *)v77 - 1);
  __chkstk_darwin(v77);
  id v72 = (char *)v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100157064(&qword_1002D9038);
  uint64_t v17 = v16 - 8;
  uint64_t v18 = __chkstk_darwin(v16);
  id v20 = (char *)v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v85 = (uint64_t)v63 - v21;
  id v22 = *(void **)a1;
  v63[1] = *(void *)(a1 + 8);
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v24 = *(void *)(a1 + 24);
  int v25 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v26 = *(void *)(a1 + 48);
  uint64_t v27 = swift_allocObject();
  long long v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v27 + 32) = v28;
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v27 + 64) = *(void *)(a1 + 48);
  v86.n128_u64[0] = 0;
  id v64 = v22;
  id v29 = v22;
  uint64_t v66 = v23;
  uint64_t v65 = v24;
  int v84 = v25;
  sub_10017FE20(v23, v24, v25);
  swift_retain();
  uint64_t v30 = v26;
  swift_retain();
  State.init(wrappedValue:)();
  __n128 v31 = v90;
  v90.n128_u64[0] = (unint64_t)sub_1001801D4;
  v90.n128_u64[1] = v27;
  v91[0] = 0;
  *(__n128 *)&v91[8] = v31;
  uint64_t v32 = sub_100157064(&qword_1002D7DD8);
  sub_1001801DC();
  uint64_t v33 = sub_10015D788(&qword_1002D7DF0, &qword_1002D7DD8);
  id v34 = v72;
  uint64_t v74 = v32;
  uint64_t v83 = v33;
  View.tabItem<A>(_:)();
  swift_release();
  swift_release();
  uint64_t v35 = v73;
  uint64_t v36 = (uint64_t)v77;
  (*(void (**)(char *, char *, char *))(v73 + 16))(v20, v34, v77);
  id v37 = (uint64_t (**)())&v20[*(int *)(v17 + 44)];
  char *v37 = sub_10017D394;
  v37[1] = 0;
  v37[2] = 0;
  v37[3] = 0;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
  uint64_t v77 = v20;
  sub_10015D474((uint64_t)v20, v85, &qword_1002D9038);
  uint64_t v73 = v30;
  uint64_t v38 = *(void *)(v30 + 24);
  if ((*(unsigned char *)(v38 + 24) & 1) != 0 || *(unsigned char *)(v38 + 25) == 1)
  {
    type metadata accessor for SURLSessionViewModel();
    sub_100180284(&qword_1002D7CA8, (void (*)(uint64_t))type metadata accessor for SURLSessionViewModel);
    StateObject.wrappedValue.getter();
    if (!v64)
    {
      type metadata accessor for SPCarrierBundleViewModel();
      sub_100180284((unint64_t *)&unk_1002DA0E0, (void (*)(uint64_t))type metadata accessor for SPCarrierBundleViewModel);
      uint64_t result = EnvironmentObject.error()();
      __break(1u);
      return result;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    id v39 = v29;
    static Published.subscript.getter();

    swift_release();
    swift_release();
    unsigned __int8 v40 = v90.n128_u8[0];
    swift_getKeyPath();
    swift_getKeyPath();
    id v41 = v39;
    static Published.subscript.getter();

    swift_release();
    swift_release();
    sub_10015BAE8(v40, v90.n128_u8[0], &v90);
    long long v88 = *(_OWORD *)&v91[16];
    *(_OWORD *)uint64_t v89 = *(_OWORD *)v92;
    *(_OWORD *)&v89[10] = *(_OWORD *)&v92[10];
    __n128 v86 = v90;
    long long v87 = *(_OWORD *)v91;
    sub_1001802DC();
    id v42 = v69;
    View.tabItem<A>(_:)();
    sub_100180330((uint64_t)&v90);
    uint64_t v43 = StateObject.wrappedValue.getter();
    uint64_t v44 = static ObservableObject.environmentStore.getter();
    uint64_t v45 = v70;
    uint64_t v46 = (uint64_t)v68;
    uint64_t v47 = v71;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v68, v42, v71);
    uint64_t v48 = v76;
    id v49 = (uint64_t *)(v46 + *(int *)(v76 + 36));
    *id v49 = v44;
    v49[1] = v43;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v47);
    uint64_t v50 = v67;
    sub_10015D474(v46, v67, &qword_1002D9020);
    uint64_t v51 = v78;
    sub_10015D474(v50, v78, &qword_1002D9020);
    uint64_t v52 = 0;
  }
  else
  {
    uint64_t v52 = 1;
    uint64_t v51 = v78;
    uint64_t v48 = v76;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v51, v52, 1, v48);
  uint64_t v53 = (uint64_t)v80;
  if (*(unsigned char *)(*(void *)(v73 + 24) + 29) == 1)
  {
    sub_100180230();
    View.tabItem<A>(_:)();
    uint64_t v54 = sub_100157064(&qword_1002D9048);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 0, 1, v54);
  }
  else
  {
    uint64_t v55 = sub_100157064(&qword_1002D9048);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v53, 1, 1, v55);
  }
  uint64_t v56 = v85;
  uint64_t v57 = (uint64_t)v77;
  sub_10015D5F4(v85, (uint64_t)v77, &qword_1002D9038);
  uint64_t v58 = v79;
  sub_10015D5F4(v51, v79, &qword_1002D9028);
  uint64_t v59 = v82;
  sub_10015D5F4(v53, v82, &qword_1002D9010);
  uint64_t v60 = v81;
  sub_10015D5F4(v57, v81, &qword_1002D9038);
  uint64_t v61 = sub_100157064(&qword_1002D9050);
  sub_10015D5F4(v58, v60 + *(int *)(v61 + 48), &qword_1002D9028);
  sub_10015D5F4(v59, v60 + *(int *)(v61 + 64), &qword_1002D9010);
  sub_10015D658(v53, &qword_1002D9010);
  sub_10015D658(v51, &qword_1002D9028);
  sub_10015D658(v56, &qword_1002D9038);
  sub_10015D658(v59, &qword_1002D9010);
  sub_10015D658(v58, &qword_1002D9028);
  return sub_10015D658(v57, &qword_1002D9038);
}

uint64_t sub_10017D35C()
{
  return sub_10017D828();
}

uint64_t sub_10017D394()
{
  uint64_t v0 = sub_100157064(&qword_1002D9068);
  __chkstk_darwin(v0 - 8);
  BOOL v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  type metadata accessor for MainActor();
  uint64_t v4 = static MainActor.shared.getter();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = &protocol witness table for MainActor;
  sub_10017D628((uint64_t)v2, (uint64_t)&unk_1002D9078, v5);
  return swift_release();
}

uint64_t sub_10017D494()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10017D528, v2, v1);
}

uint64_t sub_10017D528()
{
  swift_release();
  if (qword_1002D7A98 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10017D628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10015D658(a1, &qword_1002D9068);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10017D7D4()
{
  return sub_10017D828();
}

uint64_t sub_10017D800()
{
  return sub_10017D828();
}

uint64_t sub_10017D828()
{
  LocalizedStringKey.init(stringLiteral:)();

  return Label<>.init(_:systemImage:)();
}

void sub_10017D87C(id *a1)
{
  if (*a1)
  {
    id v1 = *a1;
    sub_1001AA850();
  }
  else
  {
    type metadata accessor for SPCarrierBundleViewModel();
    sub_100180284((unint64_t *)&unk_1002DA0E0, (void (*)(uint64_t))type metadata accessor for SPCarrierBundleViewModel);
    EnvironmentObject.error()();
    __break(1u);
  }
}

uint64_t sub_10017D928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100157064(&qword_1002D8FF0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v7 = v1[1];
  long long v16 = *v1;
  long long v17 = v7;
  long long v18 = v1[2];
  uint64_t v19 = *((void *)v1 + 6);
  uint64_t v15 = &v16;
  sub_100157064(&qword_1002D8FF8);
  sub_10015D788(&qword_1002D9000, &qword_1002D8FF8);
  TabView<>.init(content:)();
  uint64_t v8 = swift_allocObject();
  long long v9 = v16;
  long long v10 = v17;
  *(_OWORD *)(v8 + 16) = v16;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v18;
  *(void *)(v8 + 64) = v19;
  long long v20 = v9;
  long long v21 = v10;
  char v22 = v18;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v4 + 16))(a1, v6, v3);
  uint64_t v11 = (void (**)())(a1 + *(int *)(sub_100157064(&qword_1002D9008) + 36));
  *uint64_t v11 = sub_100180114;
  v11[1] = (void (*)())v8;
  v11[2] = 0;
  v11[3] = 0;
  sub_10018011C((id *)&v20);
  sub_100180148((uint64_t)&v21);
  uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8);
  swift_retain();
  swift_retain();
  return v12(v6, v3);
}

uint64_t sub_10017DB24(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10017DC00;
  return v6(a1);
}

uint64_t sub_10017DC00()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10017DCF8(unsigned char *a1, Swift::Int a2)
{
  uint64_t v3 = v2;
  Swift::Int v4 = a2;
  uint64_t v6 = *v2;
  Swift::Int v7 = sub_10017C730(*(void *)(v6 + 40), a2);
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (qword_1002696C0[*(char *)(*(void *)(v6 + 48) + v9)] != qword_1002696C0[(char)v4])
    {
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    LOBYTE(v4) = *(unsigned char *)(*(void *)(*v3 + 48) + v9);
  }
  else
  {
LABEL_5:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10017EA28(v4, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_10017DE08(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      long long v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10017EB54(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10017DFB8(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_10017ECF0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v11 = ~v9;
  uint64_t v12 = *(void *)(v7 + 48);
  while (1)
  {
    BOOL v13 = (void *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    if (v14) {
      break;
    }
    if (!a3) {
      goto LABEL_16;
    }
LABEL_7:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_17;
    }
  }
  if (!a3) {
    goto LABEL_7;
  }
  BOOL v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  long long v16 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
  Swift::Int v17 = v16[1];
  *a1 = *v16;
  a1[1] = v17;
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t sub_10017E184()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  sub_100157064(&qword_1002D8FD8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                id v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(char *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(qword_1002696C0[v18]);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_10017E43C()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  sub_100157064(&qword_1002D90A0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                id v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_10017E71C()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  sub_100157064(&qword_1002D8FE8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_36;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_36;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_36:
                swift_release();
                id v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_42;
                  }
                  if (v11 >= v8) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      Hasher.init(_seed:)();
      if (v20)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v21;
      v13[1] = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int sub_10017EA28(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10017E184();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_10017EEA8();
      goto LABEL_12;
    }
    sub_10017F3A0();
  }
  uint64_t v8 = *v3;
  uint64_t result = sub_10017C730(*(void *)(*v3 + 40), v5);
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    while (qword_1002696C0[*(char *)(*(void *)(v8 + 48) + a2)] != qword_1002696C0[v5])
    {
      a2 = (a2 + 1) & v10;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_12;
      }
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v11 + 48) + a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10017EB54(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  char v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10017E43C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10017F03C();
      goto LABEL_22;
    }
    sub_10017F628();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_10017ECF0(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  char v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_23;
  }
  if (a4)
  {
    sub_10017E71C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10017F1F0();
      goto LABEL_23;
    }
    sub_10017F8D8();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v11 + 48);
    do
    {
      BOOL v16 = (void *)(v15 + 16 * a3);
      uint64_t v17 = v16[1];
      if (v17)
      {
        if (a2)
        {
          BOOL v18 = *v16 == v8 && v17 == a2;
          if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
LABEL_22:
            sub_100157064((uint64_t *)&unk_1002D9650);
            uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_22;
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_23:
  uint64_t v19 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v20 = (Swift::Int *)(*(void *)(v19 + 48) + 16 * a3);
  *uint64_t v20 = v8;
  v20[1] = a2;
  uint64_t v21 = *(void *)(v19 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v23;
  }
  return result;
}

void *sub_10017EEA8()
{
  id v1 = v0;
  sub_100157064(&qword_1002D8FD8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10017F03C()
{
  id v1 = v0;
  sub_100157064(&qword_1002D90A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10017F1F0()
{
  id v1 = v0;
  sub_100157064(&qword_1002D8FE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10017F3A0()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  sub_100157064(&qword_1002D8FD8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(char *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(qword_1002696C0[v18]);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    id v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10017F628()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  sub_100157064(&qword_1002D90A0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    id v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10017F8D8()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  sub_100157064(&qword_1002D8FE8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v29) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    Hasher.init(_seed:)();
    if (v20)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v21;
    v13[1] = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    id v1 = v0;
    goto LABEL_38;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10017FBB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10017FC24();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_10017DCF8(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

unint64_t sub_10017FC24()
{
  unint64_t result = qword_1002DA9D0;
  if (!qword_1002DA9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DA9D0);
  }
  return result;
}

uint64_t sub_10017FC78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10017DE08(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10017FD10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100157064((uint64_t *)&unk_1002D9650);
  sub_10017FDB4();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10017DFB8(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_10017FDB4()
{
  unint64_t result = qword_1002D8FE0;
  if (!qword_1002D8FE0)
  {
    sub_100157104((uint64_t *)&unk_1002D9650);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D8FE0);
  }
  return result;
}

uint64_t sub_10017FE20(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return _objc_retain_x1();
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for MainWindowView(uint64_t a1)
{
  sub_10017FE80(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  swift_release();

  return swift_release();
}

uint64_t sub_10017FE80(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return _objc_release_x1();
  }
  else {
    return swift_release();
  }
}

uint64_t initializeWithCopy for MainWindowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  id v9 = v4;
  sub_10017FE20(v6, v7, v8);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MainWindowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  char v9 = *(unsigned char *)(a2 + 32);
  sub_10017FE20(v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  sub_10017FE80(v10, v11, v12);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for MainWindowView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MainWindowView(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  sub_10017FE80(v7, v8, v9);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MainWindowView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MainWindowView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MainWindowView()
{
  return &type metadata for MainWindowView;
}

uint64_t sub_1001800EC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100180108@<X0>(uint64_t a1@<X8>)
{
  return sub_10017C8C4(*(void *)(v1 + 16), a1);
}

void sub_100180114()
{
  sub_10017D87C((id *)(v0 + 16));
}

id *sub_10018011C(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_100180148(uint64_t a1)
{
  return a1;
}

uint64_t sub_100180180()
{
  sub_10017FE80(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001801D4()
{
  return swift_retain();
}

unint64_t sub_1001801DC()
{
  unint64_t result = qword_1002D9040;
  if (!qword_1002D9040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9040);
  }
  return result;
}

unint64_t sub_100180230()
{
  unint64_t result = qword_1002D9058;
  if (!qword_1002D9058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9058);
  }
  return result;
}

uint64_t sub_100180284(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001802DC()
{
  unint64_t result = qword_1002D9060;
  if (!qword_1002D9060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9060);
  }
  return result;
}

uint64_t sub_100180330(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_100180398()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001803D0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10018047C;
  return sub_10017D494();
}

uint64_t sub_10018047C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100180570()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001805A8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10018047C;
  char v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1002D9080 + dword_1002D9080);
  return v6(a1, v4);
}

unint64_t sub_100180664()
{
  unint64_t result = qword_1002D9090;
  if (!qword_1002D9090)
  {
    sub_100157104(&qword_1002D9008);
    sub_10015D788(&qword_1002D9098, &qword_1002D8FF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9090);
  }
  return result;
}

void sub_100180704()
{
  qword_1002E3118 = 0x404E000000000000;
}

void sub_100180714()
{
  qword_1002E3120 = (uint64_t)&off_100288988;
}

uint64_t sub_100180728@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setDateFormat:v7];

  static Locale.current.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v6 setLocale:isa];

  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v6 dateFromString:v9];

  if (v10)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v11 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 0, 1, v11);
  }
  else
  {

    uint64_t v13 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

void sub_10018093C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_1001809A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [self alertControllerWithTitle:v10 message:v11 preferredStyle:1];

  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a9;
  *(void *)(v13 + 24) = a10;
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  BOOL v27 = sub_100181074;
  uint64_t v28 = v13;
  CGAffineTransform aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  char v25 = sub_10018093C;
  unint64_t v26 = &unk_10028C158;
  unint64_t v15 = _Block_copy(&aBlock);
  swift_release();
  int64_t v16 = self;
  id v17 = [v16 actionWithTitle:v14 style:0 handler:v15];
  _Block_release(v15);

  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a9;
  *(void *)(v18 + 24) = a10;
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  BOOL v27 = sub_1001810B8;
  uint64_t v28 = v18;
  CGAffineTransform aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  char v25 = sub_10018093C;
  unint64_t v26 = &unk_10028C1A8;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_release();
  id v21 = [v16 actionWithTitle:v19 style:1 handler:v20];
  _Block_release(v20);

  [v12 addAction:v17];
  [v12 addAction:v21];
  [v22 presentViewController:v12 animated:1 completion:0];
}

uint64_t sub_100180C9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimeZone();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setDateFormat:v7];

  static TimeZone.autoupdatingCurrent.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v6 setTimeZone:isa];

  [v6 setDateStyle:a1];
  [v6 setTimeStyle:a1];
  Class v9 = Date._bridgeToObjectiveC()().super.isa;
  id v10 = [v6 stringFromDate:v9];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v11;
}

id sub_100180E60()
{
  id result = [objc_allocWithZone((Class)NSDateFormatter) init];
  qword_1002E3128 = (uint64_t)result;
  return result;
}

uint64_t sub_100180E94()
{
  uint64_t v0 = type metadata accessor for TimeZone();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002D7A70 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_1002E3128;
  static TimeZone.current.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setTimeZone:isa];

  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setDateFormat:v6];

  Class v7 = Date._bridgeToObjectiveC()().super.isa;
  id v8 = [v4 stringFromDate:v7];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v9;
}

uint64_t sub_10018103C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100181074()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_1001810A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001810B0()
{
  return swift_release();
}

uint64_t sub_1001810B8()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

void sub_1001810E4()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self animationWithKeyPath:v1];

  [v2 setDuration:0.2];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  [v2 setFromValue:isa];

  Class v4 = Double._bridgeToObjectiveC()().super.super.isa;
  [v2 setToValue:v4];

  uint64_t v5 = self;
  id v6 = v2;
  id v7 = [v5 functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
  [v6 setTimingFunction:v7];

  [v6 setAutoreverses:1];
  LODWORD(v8) = 2.0;
  [v6 setRepeatCount:v8];
  id v9 = [v0 layer];
  [v9 addAnimation:v6 forKey:0];
}

uint64_t sub_100181298(void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  uint64_t v3 = qword_1002D7A88;
  Class v4 = a1;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100267EF0;
  int v6 = *(unsigned __int8 *)(*(void *)&v4[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_hardwareManager] + 28);
  unint64_t v7 = sub_100181588();
  uint64_t v8 = 7758189;
  if (v6) {
    uint64_t v8 = 6644585;
  }
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = v7;
  *(void *)(v5 + 32) = v8;
  *(void *)(v5 + 40) = 0xE300000000000000;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  swift_release();
  return v2;
}

void sub_1001813D0()
{
  id v1 = *(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_aBMWrapper);
  NSString v2 = String._bridgeToObjectiveC()();
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  [v1 querySpecificMetric:nil triggerRef:nil triggerType:nil triggerID:nil profileID:nil metricID:nil];
}

uint64_t sub_1001814E8()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for MainWindowViewModel()
{
  return self;
}

uint64_t sub_10018154C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for MainWindowViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100181588()
{
  unint64_t result = qword_1002D9630;
  if (!qword_1002D9630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9630);
  }
  return result;
}

uint64_t sub_1001815DC()
{
  return swift_retain();
}

uint64_t destroy for FTMCellMonitorView()
{
  sub_100181628();

  return swift_release();
}

uint64_t sub_100181628()
{
  return swift_release();
}

uint64_t initializeWithCopy for FTMCellMonitorView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  sub_1001815DC();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FTMCellMonitorView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  sub_1001815DC();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100181628();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for FTMCellMonitorView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FTMCellMonitorView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_100181628();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FTMCellMonitorView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FTMCellMonitorView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMCellMonitorView()
{
  return &type metadata for FTMCellMonitorView;
}

uint64_t sub_10018184C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100181868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v66 = sub_100157064(&qword_1002D9198);
  __chkstk_darwin(v66);
  int v4 = (_OWORD *)((char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v62 = sub_100157064(&qword_1002D91A0);
  __chkstk_darwin(v62);
  char v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100157064(&qword_1002D91A8);
  __chkstk_darwin(v67);
  uint64_t v65 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for StackNavigationViewStyle();
  uint64_t v58 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v57 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100157064(&qword_1002D91B0);
  uint64_t v56 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v55 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100157064(&qword_1002D91B8);
  uint64_t v59 = *(void *)(v64 - 8);
  uint64_t v10 = __chkstk_darwin(v64);
  uint64_t v54 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v60 = (char *)&v51 - v12;
  type metadata accessor for AllMetricsViewModel();
  sub_10018B8D4(&qword_1002D91C0, (void (*)(uint64_t))type metadata accessor for AllMetricsViewModel);
  uint64_t v13 = *(unsigned __int8 *)(StateObject.wrappedValue.getter() + 56);
  uint64_t v14 = swift_release();
  switch(v13)
  {
    case 1:
      uint64_t v43 = static HorizontalAlignment.center.getter();
      sub_1001AD67C((uint64_t)&v70);
      *(_OWORD *)&v90[103] = v76;
      *(_OWORD *)&v90[87] = v75;
      *(_OWORD *)&v90[39] = v72;
      *(_OWORD *)&v90[23] = v71;
      *(_OWORD *)&v90[119] = v77;
      v90[135] = v78[0];
      *(_OWORD *)&v90[55] = v73;
      *(_OWORD *)&v90[71] = v74;
      *(_OWORD *)&v90[7] = v70;
      long long v44 = *(_OWORD *)&v90[64];
      *(_OWORD *)(v6 + 97) = *(_OWORD *)&v90[80];
      long long v45 = *(_OWORD *)&v90[112];
      *(_OWORD *)(v6 + 113) = *(_OWORD *)&v90[96];
      *(_OWORD *)(v6 + 129) = v45;
      long long v46 = *(_OWORD *)v90;
      *(_OWORD *)(v6 + 33) = *(_OWORD *)&v90[16];
      long long v47 = *(_OWORD *)&v90[48];
      *(_OWORD *)(v6 + 49) = *(_OWORD *)&v90[32];
      *(_OWORD *)(v6 + 65) = v47;
      *(_OWORD *)(v6 + 81) = v44;
      v88[0] = 1;
      *(void *)char v6 = v43;
      *((void *)v6 + 1) = 0;
      v6[16] = 1;
      *(void *)(v6 + 145) = *(void *)&v90[128];
      *(_OWORD *)(v6 + 17) = v46;
      swift_storeEnumTagMultiPayload();
      sub_100185974((uint64_t)&v70);
      sub_100157064(&qword_1002D91D0);
      uint64_t v48 = sub_10015D788(&qword_1002D91F0, &qword_1002D91B0);
      uint64_t v49 = sub_10018B8D4(&qword_1002D7D58, (void (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle);
      v69[0] = v61;
      v69[1] = v63;
      v69[2] = v48;
      v69[3] = v49;
      swift_getOpaqueTypeConformance2();
      sub_10015D788((unint64_t *)&qword_1002D91D8, &qword_1002D91D0);
      uint64_t v50 = (uint64_t)v65;
      _ConditionalContent<>.init(storage:)();
      sub_10015D5F4(v50, (uint64_t)v4, &qword_1002D91A8);
      swift_storeEnumTagMultiPayload();
      sub_100157064(&qword_1002D91E0);
      sub_1001859F8();
      sub_100185B40();
      _ConditionalContent<>.init(storage:)();
      sub_10015D658(v50, &qword_1002D91A8);
      id v42 = &v70;
      goto LABEL_7;
    case 2:
      uint64_t v36 = static HorizontalAlignment.center.getter();
      sub_1001AD64C((uint64_t)&v79);
      *(_OWORD *)&v88[103] = v85;
      *(_OWORD *)&v88[87] = v84;
      *(_OWORD *)&v88[39] = v81;
      *(_OWORD *)&v88[23] = v80;
      *(_OWORD *)&v88[119] = v86;
      v88[135] = v87;
      *(_OWORD *)&v88[55] = v82;
      *(_OWORD *)&v88[71] = v83;
      *(_OWORD *)&v88[7] = v79;
      *(_OWORD *)&v90[97] = *(_OWORD *)&v88[80];
      *(_OWORD *)&v90[113] = *(_OWORD *)&v88[96];
      *(_OWORD *)&v90[129] = *(_OWORD *)&v88[112];
      *(_OWORD *)&v90[33] = *(_OWORD *)&v88[16];
      *(_OWORD *)&v90[49] = *(_OWORD *)&v88[32];
      *(_OWORD *)&v90[65] = *(_OWORD *)&v88[48];
      *(_OWORD *)&v90[81] = *(_OWORD *)&v88[64];
      char v89 = 1;
      *(void *)__n128 v90 = v36;
      *(void *)&v90[8] = 0;
      v90[16] = 1;
      uint64_t v91 = *(void *)&v88[128];
      *(_OWORD *)&v90[17] = *(_OWORD *)v88;
      sub_100185C5C((uint64_t)v90);
      goto LABEL_5;
    case 3:
      uint64_t v37 = static HorizontalAlignment.center.getter();
      sub_1001AD64C((uint64_t)&v79);
      *(_OWORD *)&v88[103] = v85;
      *(_OWORD *)&v88[87] = v84;
      *(_OWORD *)&v88[39] = v81;
      *(_OWORD *)&v88[23] = v80;
      *(_OWORD *)&v88[119] = v86;
      v88[135] = v87;
      *(_OWORD *)&v88[55] = v82;
      *(_OWORD *)&v88[71] = v83;
      *(_OWORD *)&v88[7] = v79;
      *(_OWORD *)&v90[97] = *(_OWORD *)&v88[80];
      *(_OWORD *)&v90[113] = *(_OWORD *)&v88[96];
      *(_OWORD *)&v90[129] = *(_OWORD *)&v88[112];
      *(_OWORD *)&v90[33] = *(_OWORD *)&v88[16];
      *(_OWORD *)&v90[49] = *(_OWORD *)&v88[32];
      *(_OWORD *)&v90[65] = *(_OWORD *)&v88[48];
      *(_OWORD *)&v90[81] = *(_OWORD *)&v88[64];
      char v89 = 1;
      *(void *)__n128 v90 = v37;
      *(void *)&v90[8] = 0;
      v90[16] = 1;
      uint64_t v91 = *(void *)&v88[128];
      *(_OWORD *)&v90[17] = *(_OWORD *)v88;
      sub_100185968((uint64_t)v90);
LABEL_5:
      sub_10015D474((uint64_t)v90, (uint64_t)v69, &qword_1002D91C8);
      sub_100185974((uint64_t)&v79);
      sub_100157064(&qword_1002D91D0);
      sub_10015D788((unint64_t *)&qword_1002D91D8, &qword_1002D91D0);
      _ConditionalContent<>.init(storage:)();
      long long v38 = v77;
      v4[6] = v76;
      v4[7] = v38;
      v4[8] = v78[0];
      *(_OWORD *)((char *)v4 + 138) = *(_OWORD *)((char *)v78 + 10);
      long long v39 = v73;
      v4[2] = v72;
      v4[3] = v39;
      long long v40 = v75;
      v4[4] = v74;
      v4[5] = v40;
      long long v41 = v71;
      *int v4 = v70;
      v4[1] = v41;
      swift_storeEnumTagMultiPayload();
      sub_100157064(&qword_1002D91E0);
      sub_1001859F8();
      sub_100185B40();
      _ConditionalContent<>.init(storage:)();
      id v42 = &v79;
LABEL_7:
      uint64_t result = sub_100185BD8((uint64_t)v42);
      break;
    default:
      uint64_t v52 = &v51;
      __chkstk_darwin(v14);
      *(&v51 - 2) = a1;
      uint64_t v51 = sub_100157064(&qword_1002D9200);
      uint64_t v15 = sub_100157104(&qword_1002D9208);
      uint64_t v16 = sub_100157104(&qword_1002D9210);
      uint64_t v17 = sub_100157104(&qword_1002D9218);
      uint64_t v53 = &protocol conformance descriptor for VStack<A>;
      uint64_t v18 = sub_10015D788(&qword_1002D9220, &qword_1002D9218);
      *(void *)__n128 v90 = v17;
      *(void *)&v90[8] = v18;
      uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      uint64_t v20 = sub_100157104(&qword_1002D9228);
      uint64_t v21 = sub_100157104(&qword_1002D9230);
      uint64_t v22 = sub_10015D788(&qword_1002D9238, &qword_1002D9230);
      *(void *)__n128 v90 = v21;
      *(void *)&v90[8] = v22;
      uint64_t v23 = swift_getOpaqueTypeConformance2();
      *(void *)__n128 v90 = v20;
      *(void *)&v90[8] = v23;
      uint64_t v24 = swift_getOpaqueTypeConformance2();
      *(void *)__n128 v90 = v15;
      *(void *)&v90[8] = v16;
      *(void *)&v90[16] = OpaqueTypeConformance2;
      *(void *)&v90[24] = v24;
      swift_getOpaqueTypeConformance2();
      char v25 = v55;
      NavigationView.init(content:)();
      unint64_t v26 = v57;
      StackNavigationViewStyle.init()();
      uint64_t v52 = (uint64_t *)sub_10015D788(&qword_1002D91F0, &qword_1002D91B0);
      uint64_t v27 = sub_10018B8D4(&qword_1002D7D58, (void (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle);
      uint64_t v28 = v54;
      uint64_t v29 = v61;
      uint64_t v30 = v63;
      View.navigationViewStyle<A>(_:)();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v26, v30);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v25, v29);
      uint64_t v31 = v59;
      uint64_t v32 = v60;
      uint64_t v33 = v64;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v60, v28, v64);
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v6, v32, v33);
      swift_storeEnumTagMultiPayload();
      sub_100157064(&qword_1002D91D0);
      *(void *)__n128 v90 = v29;
      *(void *)&v90[8] = v30;
      *(void *)&v90[16] = v52;
      *(void *)&v90[24] = v27;
      swift_getOpaqueTypeConformance2();
      sub_10015D788((unint64_t *)&qword_1002D91D8, &qword_1002D91D0);
      uint64_t v34 = (uint64_t)v65;
      _ConditionalContent<>.init(storage:)();
      sub_10015D5F4(v34, (uint64_t)v4, &qword_1002D91A8);
      swift_storeEnumTagMultiPayload();
      sub_100157064(&qword_1002D91E0);
      sub_1001859F8();
      sub_100185B40();
      _ConditionalContent<>.init(storage:)();
      sub_10015D658(v34, &qword_1002D91A8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v60, v33);
      break;
  }
  return result;
}

uint64_t sub_1001823EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100157064(&qword_1002D9218);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100157064(&qword_1002D9208);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  __chkstk_darwin(v10);
  uint64_t v23 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v9 = static HorizontalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  uint64_t v13 = sub_100157064(&qword_1002D9240);
  sub_1001827AC(a1, (uint64_t)&v9[*(int *)(v13 + 44)]);
  LocalizedStringKey.init(stringLiteral:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v3);
  uint64_t v14 = sub_10015D788(&qword_1002D9220, &qword_1002D9218);
  uint64_t v15 = v23;
  View.navigationBarTitle(_:displayMode:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10015D658((uint64_t)v9, &qword_1002D9218);
  uint64_t v28 = v24;
  sub_100157064(&qword_1002D9210);
  uint64_t v29 = v7;
  uint64_t v30 = v14;
  swift_getOpaqueTypeConformance2();
  uint64_t v16 = sub_100157104(&qword_1002D9228);
  uint64_t v17 = sub_100157104(&qword_1002D9230);
  uint64_t v18 = sub_10015D788(&qword_1002D9238, &qword_1002D9230);
  uint64_t v29 = v17;
  uint64_t v30 = v18;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v29 = v16;
  uint64_t v30 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v20 = v25;
  View.toolbar<A>(content:)();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v20);
}

uint64_t sub_1001827AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v3 = sub_100157064(&qword_1002D9348);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = sub_100157064(&qword_1002D8098);
  uint64_t v6 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v58 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100157064(&qword_1002D8078);
  uint64_t v8 = __chkstk_darwin(v76);
  uint64_t v57 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v60 = (uint64_t *)((char *)&v56 - v10);
  uint64_t v70 = sub_100157064(&qword_1002D9350);
  __chkstk_darwin(v70);
  uint64_t v74 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100157064(&qword_1002D9358);
  uint64_t v62 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_100157064(&qword_1002D9360);
  uint64_t v64 = *(void *)(v72 - 8);
  uint64_t v14 = __chkstk_darwin(v72);
  uint64_t v61 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v63 = (char *)&v56 - v16;
  uint64_t v17 = sub_100157064(&qword_1002D9368);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v75 = (uint64_t)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  long long v73 = (char *)&v56 - v20;
  type metadata accessor for AllMetricsViewModel();
  sub_10018B8D4(&qword_1002D91C0, (void (*)(uint64_t))type metadata accessor for AllMetricsViewModel);
  uint64_t v71 = StateObject.wrappedValue.getter();
  uint64_t v21 = sub_100189510();
  uint64_t v77 = sub_100189A8C(5521746, 0xE300000000000000);
  type metadata accessor for FTMMetricDetailsClass();
  sub_10018B8D4(&qword_1002D9370, (void (*)(uint64_t))type metadata accessor for FTMMetricDetailsClass);
  uint64_t v68 = EnvironmentObject.init()();
  uint64_t v66 = v22;
  uint64_t v23 = static ObservableObject.environmentStore.getter();
  uint64_t v67 = v23;
  if (v21[2])
  {
    uint64_t v60 = v5;
    __chkstk_darwin(v23);
    *(&v56 - 2) = (uint64_t)v21;
    *(&v56 - 1) = a1;
    swift_retain();
    sub_100157064(&qword_1002D9378);
    sub_10018A008(&qword_1002D9380, &qword_1002D9378, (void (*)(void))sub_10018A074);
    List<>.init(content:)();
    swift_bridgeObjectRelease();
    uint64_t v5 = v60;
    long long v80 = *(_OWORD *)(a1 + 24);
    uint64_t v24 = swift_allocObject();
    long long v25 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v24 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v24 + 32) = v25;
    *(void *)(v24 + 48) = *(void *)(a1 + 32);
    sub_1001815DC();
    sub_100186024((uint64_t)&v80);
    uint64_t v26 = sub_10015D788(&qword_1002D93D0, &qword_1002D9358);
    uint64_t v27 = v61;
    uint64_t v28 = v69;
    View.refreshable(action:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v28);
    uint64_t v29 = v64;
    uint64_t v30 = v63;
    uint64_t v31 = v27;
    uint64_t v32 = v72;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v63, v31, v72);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v74, v30, v32);
    swift_storeEnumTagMultiPayload();
    uint64_t v78 = v28;
    uint64_t v79 = v26;
    swift_getOpaqueTypeConformance2();
    sub_10016568C();
    uint64_t v33 = (uint64_t)v73;
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v32);
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v34 = v58;
    ProgressView<>.init<>()();
    char v35 = static Edge.Set.vertical.getter();
    EdgeInsets.init(_all:)();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v44 = (uint64_t)v57;
    uint64_t v45 = v59;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v57, v34, v59);
    uint64_t v46 = v44 + *(int *)(v76 + 36);
    *(unsigned char *)uint64_t v46 = v35;
    *(void *)(v46 + 8) = v37;
    *(void *)(v46 + 16) = v39;
    *(void *)(v46 + 24) = v41;
    *(void *)(v46 + 32) = v43;
    *(unsigned char *)(v46 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v34, v45);
    uint64_t v47 = (uint64_t)v60;
    sub_10015D474(v44, (uint64_t)v60, &qword_1002D8078);
    sub_10015D5F4(v47, v74, &qword_1002D8078);
    swift_storeEnumTagMultiPayload();
    uint64_t v48 = sub_10015D788(&qword_1002D93D0, &qword_1002D9358);
    *(void *)&long long v80 = v69;
    *((void *)&v80 + 1) = v48;
    swift_getOpaqueTypeConformance2();
    sub_10016568C();
    uint64_t v33 = (uint64_t)v73;
    _ConditionalContent<>.init(storage:)();
    sub_10015D658(v47, &qword_1002D8078);
  }
  uint64_t v49 = v75;
  sub_10015D5F4(v33, v75, &qword_1002D9368);
  uint64_t v50 = v67;
  uint64_t v51 = v66;
  *uint64_t v5 = v68;
  v5[1] = v51;
  uint64_t v52 = v77;
  v5[2] = v50;
  v5[3] = v52;
  uint64_t v53 = sub_100157064(&qword_1002D93D8);
  sub_10015D5F4(v49, (uint64_t)v5 + *(int *)(v53 + 48), &qword_1002D9368);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_release();
  sub_10015D658(v33, &qword_1002D9368);
  swift_release();
  swift_release();
  swift_release();
  sub_10015D658(v49, &qword_1002D9368);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v54 = sub_100157064(&qword_1002D93E0);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v5, 0, 1, v54);
  return sub_10015D474((uint64_t)v5, v65, &qword_1002D9348);
}

uint64_t sub_100183140(uint64_t a1, long long *a2)
{
  swift_getKeyPath();
  long long v4 = *a2;
  char v10 = *((unsigned char *)a2 + 16);
  long long v8 = *(long long *)((char *)a2 + 24);
  long long v9 = v4;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  long long v6 = a2[1];
  *(_OWORD *)(v5 + 24) = *a2;
  *(_OWORD *)(v5 + 40) = v6;
  *(void *)(v5 + 56) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  sub_100185FF0((uint64_t)&v9);
  sub_100186024((uint64_t)&v8);
  sub_100157064(&qword_1002D9330);
  sub_100157064(&qword_1002D9390);
  sub_100186090();
  sub_10018A074();
  return ForEach<>.init(_:id:content:)();
}

unint64_t *sub_100183260(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v2 < *(void *)(a2 + 16))
  {
    __chkstk_darwin(*(void *)(a2 + 16 * v2 + 40));
    swift_bridgeObjectRetain();
    sub_100157064(&qword_1002D93A0);
    sub_10018A0FC();
    sub_1001571E0();
    return (unint64_t *)Section<>.init<A>(_:content:)();
  }
  __break(1u);
  return result;
}

void sub_100183348(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a1 + 16) > a2)
  {
    uint64_t v4 = a1 + 16 * a2;
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = *(void *)(v4 + 40);
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_100189A8C(v5, v6);
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 40);
    type metadata accessor for FTMMetricDetailsClass();
    sub_10018B8D4(&qword_1002D9370, (void (*)(uint64_t))type metadata accessor for FTMMetricDetailsClass);
    swift_bridgeObjectRetain();
    uint64_t v10 = EnvironmentObject.init()();
    uint64_t v12 = v11;
    uint64_t v13 = static ObservableObject.environmentStore.getter();
    *a3 = v10;
    a3[1] = v12;
    a3[2] = v9;
    a3[3] = v8;
    a3[4] = v13;
    a3[5] = v7;
    return;
  }
  __break(1u);
}

uint64_t sub_100183450(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001834E8, v3, v2);
}

uint64_t sub_1001834E8()
{
  swift_release();
  type metadata accessor for AllMetricsViewModel();
  sub_10018B8D4(&qword_1002D91C0, (void (*)(uint64_t))type metadata accessor for AllMetricsViewModel);
  id v1 = *(id *)(StateObject.wrappedValue.getter() + 16);
  swift_release();
  sub_1001DE69C();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001835D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v16[1] = a2;
  uint64_t v3 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_100157064(&qword_1002D9230);
  v16[0] = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100157064(&qword_1002D9228);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v16 - v12;
  static ToolbarItemPlacement.principal.getter();
  v16[4] = a1;
  sub_100157064(&qword_1002D9248);
  sub_10015D788(&qword_1002D9250, &qword_1002D9248);
  ToolbarItem<>.init(placement:content:)();
  uint64_t v14 = sub_10015D788(&qword_1002D9238, &qword_1002D9230);
  static ToolbarContentBuilder.buildBlock<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16[0] + 8))(v6, v4);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v11, v7);
  v16[6] = v4;
  v16[7] = v14;
  swift_getOpaqueTypeConformance2();
  static ToolbarContentBuilder.buildBlock<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_1001838B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = static VerticalAlignment.center.getter();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  uint64_t v4 = sub_100157064(&qword_1002D9258);
  return sub_100183908(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100183908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v92 = a1;
  uint64_t v98 = a2;
  uint64_t v2 = type metadata accessor for InlinePickerStyle();
  uint64_t v87 = *(void *)(v2 - 8);
  uint64_t v88 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100157064(&qword_1002D9260);
  uint64_t v85 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100157064(&qword_1002D9268);
  uint64_t v89 = *(void *)(v8 - 8);
  uint64_t v90 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_100157064(&qword_1002D9270);
  __chkstk_darwin(v84);
  long long v86 = (char *)v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100157064(&qword_1002D9278);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v91 = (uint64_t)v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v82 - v15;
  uint64_t v96 = sub_100157064(&qword_1002D9280);
  __chkstk_darwin(v96);
  uint64_t v18 = (char *)v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_100157064(&qword_1002D9288);
  __chkstk_darwin(v94);
  uint64_t v20 = (_OWORD *)((char *)v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v97 = sub_100157064(&qword_1002D9290);
  __chkstk_darwin(v97);
  id v95 = (char *)v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_1002E31C8;
  swift_beginAccess();
  uint64_t v23 = *(void *)(*(void *)(v22 + 80) + 16);
  if (v23 == 1)
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v44 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v46 = v45;
    char v48 = v47 & 1;
    static Font.headline.getter();
    id v95 = (char *)Text.font(_:)();
    uint64_t v50 = v49;
    char v52 = v51;
    uint64_t v54 = v53;
    swift_release();
    sub_10015D6C4(v44, v46, v48);
    swift_bridgeObjectRelease();
    static Alignment.center.getter();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    uint64_t v55 = v99;
    char v56 = BYTE8(v99);
    uint64_t v57 = v100;
    char v58 = BYTE8(v100);
    uint64_t v59 = v101;
    uint64_t v60 = v102;
    char v61 = BYTE8(v102);
    uint64_t v62 = v103;
    char v63 = BYTE8(v103);
    uint64_t v64 = v104;
    char v65 = BYTE8(v104);
    LOBYTE(v113) = v52 & 1;
    LOBYTE(v125) = BYTE8(v99);
    LOBYTE(v108) = BYTE8(v100);
    char v112 = BYTE8(v101);
    char v111 = BYTE8(v102);
    char v110 = BYTE8(v103);
    char v109 = BYTE8(v104);
    *(void *)uint64_t v18 = v95;
    *((void *)v18 + 1) = v50;
    v18[16] = v52 & 1;
    *((void *)v18 + 3) = v54;
    *((void *)v18 + 4) = v55;
    v18[40] = v56;
    *((void *)v18 + 6) = v57;
    v18[56] = v58;
    *((void *)v18 + 8) = v59;
    v18[72] = v112;
    *((void *)v18 + 10) = v60;
    v18[88] = v61;
    *((void *)v18 + 12) = v62;
    v18[104] = v63;
    *((void *)v18 + 14) = v64;
    v18[120] = v65;
    *((_OWORD *)v18 + 8) = v105;
    swift_storeEnumTagMultiPayload();
    sub_100157064(&qword_1002D9298);
    sub_100185C7C();
    sub_10018B3A4(&qword_1002D92A8, &qword_1002D9298);
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    uint64_t v93 = v12;
    if (v23)
    {
      long long v83 = v16;
      uint64_t v66 = v92;
      long long v125 = *(_OWORD *)(v92 + 24);
      long long v113 = *(_OWORD *)(v92 + 24);
      v82[1] = sub_100157064(&qword_1002D92D8);
      State.projectedValue.getter();
      sub_100157064(&qword_1002D92E0);
      sub_10018A008(&qword_1002D92E8, &qword_1002D92E0, (void (*)(void))sub_100185EA4);
      Picker.init(selection:label:content:)();
      InlinePickerStyle.init()();
      sub_10015D788(&qword_1002D92C0, &qword_1002D9260);
      uint64_t v67 = v88;
      View.pickerStyle<A>(_:)();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v4, v67);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v7, v5);
      static Alignment.center.getter();
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
      uint64_t v69 = v89;
      uint64_t v68 = v90;
      uint64_t v70 = (uint64_t)v86;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v86, v10, v90);
      uint64_t v71 = (_OWORD *)(v70 + *(int *)(v84 + 36));
      long long v72 = v104;
      v71[4] = v103;
      v71[5] = v72;
      v71[6] = v105;
      long long v73 = v100;
      *uint64_t v71 = v99;
      v71[1] = v73;
      long long v74 = v102;
      v71[2] = v101;
      v71[3] = v74;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v10, v68);
      long long v113 = v125;
      State.wrappedValue.getter();
      uint64_t v75 = v108;
      long long v113 = *(_OWORD *)v66;
      LOBYTE(v114) = *(unsigned char *)(v66 + 16);
      uint64_t v76 = swift_allocObject();
      long long v77 = *(_OWORD *)(v66 + 16);
      *(_OWORD *)(v76 + 16) = *(_OWORD *)v66;
      *(_OWORD *)(v76 + 32) = v77;
      *(void *)(v76 + 48) = *(void *)(v66 + 32);
      uint64_t v78 = v91;
      sub_10015D5F4(v70, v91, &qword_1002D9270);
      uint64_t v79 = (void *)(v78 + *(int *)(v93 + 36));
      *uint64_t v79 = v75;
      v79[1] = sub_100185FE8;
      v79[2] = v76;
      sub_100185FF0((uint64_t)&v113);
      sub_100186024((uint64_t)&v125);
      sub_10015D658(v70, &qword_1002D9270);
      uint64_t v80 = (uint64_t)v83;
      sub_10015D474(v78, (uint64_t)v83, &qword_1002D9278);
      sub_10015D5F4(v80, (uint64_t)v20, &qword_1002D9278);
      swift_storeEnumTagMultiPayload();
      sub_100157064(&qword_1002D9298);
      sub_10018B3A4(&qword_1002D92A8, &qword_1002D9298);
      sub_100185D10();
      uint64_t v81 = (uint64_t)v95;
      _ConditionalContent<>.init(storage:)();
      sub_10015D5F4(v81, (uint64_t)v18, &qword_1002D9290);
      swift_storeEnumTagMultiPayload();
      sub_100185C7C();
      _ConditionalContent<>.init(storage:)();
      sub_10015D658(v81, &qword_1002D9290);
      return sub_10015D658(v80, &qword_1002D9278);
    }
    else
    {
      LocalizedStringKey.init(stringLiteral:)();
      uint64_t v24 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v26 = v25;
      char v28 = v27 & 1;
      static Font.headline.getter();
      uint64_t v29 = Text.font(_:)();
      uint64_t v91 = v30;
      uint64_t v92 = v29;
      char v32 = v31;
      uint64_t v90 = v33;
      swift_release();
      sub_10015D6C4(v24, v26, v28);
      swift_bridgeObjectRelease();
      static Alignment.center.getter();
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
      *(void *)&long long v99 = v29;
      uint64_t v34 = v91;
      *((void *)&v99 + 1) = v91;
      LOBYTE(v100) = v32 & 1;
      *((void *)&v100 + 1) = v90;
      *(void *)&long long v101 = v113;
      BYTE8(v101) = BYTE8(v113);
      *(void *)&long long v102 = v114;
      BYTE8(v102) = v115;
      *(void *)&long long v103 = v116;
      BYTE8(v103) = v117;
      *(void *)&long long v104 = v118;
      BYTE8(v104) = v119;
      *(void *)&long long v105 = v120;
      BYTE8(v105) = v121;
      *(void *)&long long v106 = v122;
      BYTE8(v106) = v123;
      long long v107 = v124;
      long long v35 = v99;
      long long v36 = v100;
      long long v37 = v102;
      v20[2] = v101;
      v20[3] = v37;
      *uint64_t v20 = v35;
      v20[1] = v36;
      long long v38 = v103;
      long long v39 = v104;
      long long v40 = v107;
      v20[7] = v106;
      v20[8] = v40;
      long long v41 = v105;
      v20[5] = v39;
      v20[6] = v41;
      v20[4] = v38;
      swift_storeEnumTagMultiPayload();
      sub_100186050((uint64_t)&v99);
      sub_100157064(&qword_1002D9298);
      sub_10018B3A4(&qword_1002D92A8, &qword_1002D9298);
      sub_100185D10();
      uint64_t v42 = (uint64_t)v95;
      _ConditionalContent<>.init(storage:)();
      sub_10015D5F4(v42, (uint64_t)v18, &qword_1002D9290);
      swift_storeEnumTagMultiPayload();
      sub_100185C7C();
      _ConditionalContent<>.init(storage:)();
      sub_10015D658(v42, &qword_1002D9290);
      sub_10015D6C4(v92, v34, v32 & 1);
      return swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100184510()
{
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_getKeyPath();
  sub_100157064(&qword_1002D9330);
  sub_100157064(&qword_1002D92F8);
  sub_100186090();
  sub_100185EA4();
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_10018461C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *a1;
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1002E31C8;
  uint64_t result = swift_beginAccess();
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)(v4 + 80) + 16))
  {
    sub_1001571E0();
    swift_bridgeObjectRetain();
    uint64_t result = Text.init<A>(_:)();
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 16) = v7 & 1;
    *(void *)(a2 + 24) = v8;
    *(void *)(a2 + 32) = v3;
    *(unsigned char *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = v3;
    *(_WORD *)(a2 + 56) = 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100184708(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  int v8 = *((unsigned __int8 *)a2 + 16);
  type metadata accessor for AllMetricsViewModel();
  sub_10018B8D4(&qword_1002D91C0, (void (*)(uint64_t))type metadata accessor for AllMetricsViewModel);
  uint64_t v20 = v7;
  uint64_t v21 = v6;
  v19[1] = v8;
  uint64_t v22 = StateObject.wrappedValue.getter();
  if (qword_1002D7A88 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100267EF0;
  long long v25 = *(_OWORD *)(a2 + 3);
  long long v26 = v25;
  sub_100157064(&qword_1002D92D8);
  State.wrappedValue.getter();
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_100181588();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = (char *)*(id *)(StateObject.wrappedValue.getter() + 16);
  swift_release();
  Date.init()();
  uint64_t v14 = sub_100180E94();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v23);
  uint64_t v17 = (uint64_t *)&v13[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_recordedTime];
  *uint64_t v17 = v14;
  v17[1] = v16;

  swift_bridgeObjectRelease();
  long long v25 = v26;
  State.wrappedValue.getter();
  sub_1001B1478(v24);
  return swift_release();
}

uint64_t sub_1001849DC@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v3;
  uint64_t v8 = *(void *)(v1 + 32);
  *a1 = static Alignment.center.getter();
  a1[1] = v4;
  uint64_t v5 = sub_100157064(&qword_1002D9190);
  return sub_100181868((uint64_t)v7, (uint64_t)a1 + *(int *)(v5 + 44));
}

uint64_t sub_100184A38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8 = sub_10018A56C(a3, a4);
  if (v8 >> 62
    && (swift_bridgeObjectRetain(),
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(),
        uint64_t result = swift_bridgeObjectRelease(),
        v11 < 0))
  {
    __break(1u);
  }
  else
  {
    swift_getKeyPath();
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = v8;
    v9[3] = a1;
    v9[4] = a2;
    v9[5] = a3;
    v9[6] = a4;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100157064(&qword_1002D9330);
    sub_100157064(&qword_1002D9408);
    sub_100186090();
    sub_10015D788(&qword_1002D9410, &qword_1002D9408);
    return ForEach<>.init(_:id:content:)();
  }
  return result;
}

uint64_t sub_100184BB0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *a1;
  *(void *)a3 = static VerticalAlignment.center.getter();
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t v6 = sub_100157064(&qword_1002D9418);
  return sub_100184C40(a2, v5, (uint64_t *)(a3 + *(int *)(v6 + 44)));
}

uint64_t sub_100184C40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100157064(&qword_1002D9420);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v77 = result;
  uint64_t v76 = v9;
  uint64_t v75 = v10;
  uint64_t v79 = (char *)&v68 - v11;
  long long v74 = a3;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v12 = *(void *)(a1 + 8 * a2 + 32);
  swift_retain();
LABEL_5:
  uint64_t v14 = *(void *)(v12 + 48);
  uint64_t v13 = *(void *)(v12 + 56);
  swift_bridgeObjectRetain();
  swift_release();
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 8 * a2 + 32);
    swift_retain();
  }
  uint64_t v17 = *(void *)(v15 + 96);
  uint64_t v16 = *(void *)(v15 + 104);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v80 = v14;
  uint64_t v81 = v13;
  sub_1001571E0();
  uint64_t v18 = Text.init<A>(_:)();
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  static Color.blue.getter();
  uint64_t v72 = Text.foregroundColor(_:)();
  uint64_t v78 = v23;
  char v25 = v24;
  uint64_t v73 = v26;
  swift_release();
  int v71 = v25 & 1;
  sub_10015D6C4(v18, v20, v22);
  swift_bridgeObjectRelease();
  int v70 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = v17;
  uint64_t v80 = v17;
  uint64_t v81 = v16;
  swift_bridgeObjectRetain();
  uint64_t v36 = Text.init<A>(_:)();
  uint64_t v38 = v37;
  char v40 = v39 & 1;
  static Color.gray.getter();
  uint64_t v41 = Text.foregroundColor(_:)();
  uint64_t v69 = v42;
  LOBYTE(v20) = v43;
  uint64_t v45 = v44;
  swift_release();
  LOBYTE(v18) = v20 & 1;
  sub_10015D6C4(v36, v38, v40);
  swift_bridgeObjectRelease();
  LOBYTE(v36) = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = v35;
  *(void *)(v54 + 24) = v16;
  uint64_t v55 = v69;
  uint64_t v80 = v41;
  uint64_t v81 = v69;
  char v82 = v18;
  uint64_t v83 = v45;
  char v84 = v36;
  uint64_t v85 = v47;
  uint64_t v86 = v49;
  uint64_t v87 = v51;
  uint64_t v88 = v53;
  char v89 = 0;
  sub_100157064(&qword_1002D9428);
  sub_10018B3A4((unint64_t *)&qword_1002D9430, &qword_1002D9428);
  char v56 = v79;
  View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)();
  swift_release();
  sub_10015D6C4(v41, v55, v18);
  swift_bridgeObjectRelease();
  uint64_t v57 = v76;
  char v58 = *(void (**)(uint64_t, char *, uint64_t))(v76 + 16);
  uint64_t v59 = v75;
  uint64_t v60 = v77;
  v58((uint64_t)v75, v56, v77);
  uint64_t v61 = v72;
  uint64_t v62 = v74;
  uint64_t v63 = v78;
  *long long v74 = v72;
  v62[1] = v63;
  LOBYTE(v38) = v71;
  *((unsigned char *)v62 + 16) = v71;
  v62[3] = v73;
  *((unsigned char *)v62 + 32) = v70;
  v62[5] = v28;
  v62[6] = v30;
  v62[7] = v32;
  v62[8] = v34;
  *((unsigned char *)v62 + 72) = 0;
  v62[10] = 0;
  *((unsigned char *)v62 + 88) = 1;
  uint64_t v64 = sub_100157064(&qword_1002D9438);
  v58((uint64_t)v62 + *(int *)(v64 + 64), v59, v60);
  char v65 = (_OWORD *)((char *)v62 + *(int *)(v64 + 80));
  v65[1] = 0u;
  v65[2] = 0u;
  *char v65 = 0u;
  uint64_t v66 = v78;
  sub_10015D6B4(v61, v78, v38);
  swift_bridgeObjectRetain();
  sub_10018B410(0, 0, 0, 0, 0);
  uint64_t v67 = *(void (**)(char *, uint64_t))(v57 + 8);
  v67(v79, v60);
  sub_10018B474(0, 0, 0, 0, 0);
  v67(v59, v60);
  sub_10015D6C4(v61, v66, v38);
  return swift_bridgeObjectRelease();
}

void sub_10018519C(uint64_t a1, uint64_t a2)
{
  if (qword_1002D7B20 != -1) {
    swift_once();
  }
  id v4 = (id)qword_1002E31D0;
  sub_1001A44C8(a1, a2);

  id v5 = [objc_allocWithZone((Class)UIImpactFeedbackGenerator) initWithStyle:1];
  [v5 impactOccurred];
}

uint64_t sub_100185260()
{
  return sub_100184A38(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10018526C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v18 = a5;
  uint64_t v17 = sub_100157064(&qword_1002D9450);
  uint64_t v9 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  *(unsigned char *)(v12 + 32) = a3;
  *(void *)(v12 + 40) = a4;
  swift_retain();
  swift_retain();
  Button.init(action:label:)();
  char v19 = a3;
  uint64_t v20 = a4;
  sub_100157064(&qword_1002D7D78);
  State.projectedValue.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  *(unsigned char *)(v13 + 32) = a3;
  *(void *)(v13 + 40) = a4;
  swift_retain();
  swift_retain();
  sub_100157064(&qword_1002D9458);
  sub_10015D788(&qword_1002D9460, &qword_1002D9450);
  sub_10018A008(&qword_1002D9468, &qword_1002D9458, (void (*)(void))sub_10018B804);
  uint64_t v14 = v17;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v14);
}

uint64_t sub_10018550C()
{
  return swift_release();
}

uint64_t sub_10018559C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(systemName:)();
  *a1 = result;
  return result;
}

uint64_t sub_1001855E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FTMCellMonitorBookmarkedSheetView();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = sub_100157064(&qword_1002D9478);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v25 - v15;
  if (a1)
  {
    uint64_t v26 = a2;
    uint64_t v17 = qword_1002D7B20;
    swift_retain();
    if (v17 != -1) {
      swift_once();
    }
    *(void *)(qword_1002E31D0 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricSheetData) = a1;
    swift_retain();
    swift_release();
    type metadata accessor for FTMAllMetricsModel();
    sub_10018B8D4(&qword_1002D8068, (void (*)(uint64_t))type metadata accessor for FTMAllMetricsModel);
    *uint64_t v7 = EnvironmentObject.init()();
    v7[1] = v18;
    char v19 = (uint64_t *)((char *)v7 + *(int *)(v4 + 20));
    *char v19 = swift_getKeyPath();
    sub_100157064(&qword_1002D7FA0);
    swift_storeEnumTagMultiPayload();
    sub_1001659AC((uint64_t)v7, (uint64_t)v9);
    uint64_t v20 = *(void *)(qword_1002E31D0 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricSheetData);
    if (v20)
    {
      swift_retain();
      uint64_t v21 = static ObservableObject.environmentStore.getter();
      sub_10018B920((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for FTMCellMonitorBookmarkedSheetView);
      swift_release();
      char v22 = (uint64_t *)&v14[*(int *)(v10 + 36)];
      *char v22 = v21;
      v22[1] = v20;
      sub_10018B988((uint64_t)v9);
      sub_10015D474((uint64_t)v14, (uint64_t)v16, &qword_1002D9478);
      uint64_t v23 = v26;
      sub_10015D474((uint64_t)v16, v26, &qword_1002D9478);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v23, 0, 1, v10);
    }
    __break(1u);
  }
  type metadata accessor for FTMAllMetricsModel();
  sub_10018B8D4(&qword_1002D8068, (void (*)(uint64_t))type metadata accessor for FTMAllMetricsModel);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_100185958@<X0>(uint64_t a1@<X8>)
{
  return sub_10018526C(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100185968(uint64_t result)
{
  *(unsigned char *)(result + 153) = 1;
  return result;
}

uint64_t sub_100185974(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  sub_10015D6B4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRetain();
  sub_10015D6B4(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

unint64_t sub_1001859F8()
{
  unint64_t result = qword_1002D91E8;
  if (!qword_1002D91E8)
  {
    sub_100157104(&qword_1002D91A8);
    sub_100157104(&qword_1002D91B0);
    type metadata accessor for StackNavigationViewStyle();
    sub_10015D788(&qword_1002D91F0, &qword_1002D91B0);
    sub_10018B8D4(&qword_1002D7D58, (void (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle);
    swift_getOpaqueTypeConformance2();
    sub_10015D788((unint64_t *)&qword_1002D91D8, &qword_1002D91D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D91E8);
  }
  return result;
}

unint64_t sub_100185B40()
{
  unint64_t result = qword_1002D91F8;
  if (!qword_1002D91F8)
  {
    sub_100157104(&qword_1002D91E0);
    sub_10015D788((unint64_t *)&qword_1002D91D8, &qword_1002D91D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D91F8);
  }
  return result;
}

uint64_t sub_100185BD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  sub_10015D6C4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  sub_10015D6C4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100185C5C(uint64_t result)
{
  *(unsigned char *)(result + 153) = 0;
  return result;
}

uint64_t sub_100185C64@<X0>(uint64_t a1@<X8>)
{
  return sub_1001823EC(*(void *)(v1 + 16), a1);
}

uint64_t sub_100185C6C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001835D4(*(void *)(v1 + 16), a1);
}

uint64_t sub_100185C74@<X0>(uint64_t a1@<X8>)
{
  return sub_1001838B8(*(void *)(v1 + 16), a1);
}

unint64_t sub_100185C7C()
{
  unint64_t result = qword_1002D92A0;
  if (!qword_1002D92A0)
  {
    sub_100157104(&qword_1002D9290);
    sub_10018B3A4(&qword_1002D92A8, &qword_1002D9298);
    sub_100185D10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D92A0);
  }
  return result;
}

unint64_t sub_100185D10()
{
  unint64_t result = qword_1002D92B0;
  if (!qword_1002D92B0)
  {
    sub_100157104(&qword_1002D9278);
    sub_100185DB0();
    sub_10015D788(&qword_1002D92C8, &qword_1002D92D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D92B0);
  }
  return result;
}

unint64_t sub_100185DB0()
{
  unint64_t result = qword_1002D92B8;
  if (!qword_1002D92B8)
  {
    sub_100157104(&qword_1002D9270);
    sub_100157104(&qword_1002D9260);
    type metadata accessor for InlinePickerStyle();
    sub_10015D788(&qword_1002D92C0, &qword_1002D9260);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D92B8);
  }
  return result;
}

unint64_t sub_100185EA4()
{
  unint64_t result = qword_1002D92F0;
  if (!qword_1002D92F0)
  {
    sub_100157104(&qword_1002D92F8);
    sub_100185F44();
    sub_10015D788(&qword_1002D9320, &qword_1002D9328);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D92F0);
  }
  return result;
}

unint64_t sub_100185F44()
{
  unint64_t result = qword_1002D9300;
  if (!qword_1002D9300)
  {
    sub_100157104(&qword_1002D9308);
    sub_10015D788(&qword_1002D9310, &qword_1002D9318);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9300);
  }
  return result;
}

uint64_t sub_100185FE8(uint64_t a1)
{
  return sub_100184708(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_100185FF0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100186024(uint64_t a1)
{
  return a1;
}

uint64_t sub_100186050(uint64_t a1)
{
  return a1;
}

unint64_t sub_100186090()
{
  unint64_t result = qword_1002D9338;
  if (!qword_1002D9338)
  {
    sub_100157104(&qword_1002D9330);
    sub_10018610C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9338);
  }
  return result;
}

unint64_t sub_10018610C()
{
  unint64_t result = qword_1002D9340;
  if (!qword_1002D9340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9340);
  }
  return result;
}

Swift::Int sub_100186160(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001B54B8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1001862C4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1001861CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1001B54CC(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_100187364((uint64_t)v6);
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_100186248(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1001B54CC(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1001869B0(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_1001862C4(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_100188670(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  long long v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      uint64_t v94 = v11;
      long long v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_100188740((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_1001B49EC((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          long long v100 = &v97[16 * v96 + 32];
          *(void *)long long v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    long long v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    long long v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1001B43F0(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_1001B43F0((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    char v43 = &v11[16 * v41 + 32];
    *(void *)char v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_100188740((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1001869B0(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result < v3)
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_229;
    }
    Swift::Int v6 = result;
    if (v3 < 2)
    {
      Swift::Int v20 = (char *)_swiftEmptyArrayStorage;
      uint64_t v140 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v9 = ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32;
      if (v3 != 1)
      {
        unint64_t v24 = _swiftEmptyArrayStorage[2];
        if (v24 < 2) {
          goto LABEL_196;
        }
        goto LABEL_186;
      }
    }
    else
    {
      uint64_t v7 = v5 >> 1;
      type metadata accessor for FTMAllMetricsModel();
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
      uint64_t v9 = (v8 & 0xFFFFFFFFFFFFFF8) + 32;
      uint64_t v140 = v8;
    }
    v126 = v2;
    Swift::Int v127 = v6;
    Swift::Int v21 = 0;
    uint64_t v22 = *v2;
    uint64_t v130 = *v2 - 8;
    Swift::Int v20 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v23 = v3;
    Swift::Int v128 = v3;
    __dst = (char *)v9;
    uint64_t v131 = *v2;
    while (1)
    {
      Swift::Int v25 = v21;
      Swift::Int v26 = v21 + 1;
      if (v21 + 1 >= v23) {
        goto LABEL_54;
      }
      uint64_t v27 = *(void *)(v22 + 8 * v26);
      uint64_t v28 = *(void *)(v22 + 8 * v21);
      if (*(void *)(v27 + 48) == *(void *)(v28 + 48) && *(void *)(v27 + 56) == *(void *)(v28 + 56))
      {
        Swift::Int v31 = v25 + 2;
        if (v25 + 2 >= v23) {
          goto LABEL_53;
        }
        int v30 = 0;
        do
        {
LABEL_37:
          uint64_t v33 = *(void *)(v22 + 8 * v31);
          uint64_t v34 = *(void *)(v22 + 8 * v26);
          if (*(void *)(v33 + 48) == *(void *)(v34 + 48) && *(void *)(v33 + 56) == *(void *)(v34 + 56))
          {
            if (v30) {
              goto LABEL_46;
            }
          }
          else if ((v30 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
          {
            goto LABEL_45;
          }
          Swift::Int v32 = v31 + 1;
          Swift::Int v26 = v31;
          Swift::Int v31 = v32;
        }
        while (v32 < v23);
        Swift::Int v31 = v32;
      }
      else
      {
        int v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        Swift::Int v31 = v25 + 2;
        if (v25 + 2 < v23) {
          goto LABEL_37;
        }
      }
LABEL_45:
      Swift::Int v26 = v31;
      if ((v30 & 1) == 0) {
        goto LABEL_54;
      }
LABEL_46:
      if (v31 < v25) {
        goto LABEL_221;
      }
      if (v25 < v31)
      {
        uint64_t v36 = (uint64_t *)(v130 + 8 * v31);
        Swift::Int v37 = v31;
        Swift::Int v38 = v25;
        BOOL v39 = (uint64_t *)(v22 + 8 * v25);
        do
        {
          if (v38 != --v37)
          {
            if (!v22) {
              goto LABEL_226;
            }
            uint64_t v40 = *v39;
            *BOOL v39 = *v36;
            uint64_t *v36 = v40;
          }
          ++v38;
          --v36;
          ++v39;
        }
        while (v38 < v37);
      }
LABEL_53:
      Swift::Int v26 = v31;
LABEL_54:
      if (v26 < v23)
      {
        if (__OFSUB__(v26, v25)) {
          goto LABEL_214;
        }
        if (v26 - v25 < v127)
        {
          if (__OFADD__(v25, v127)) {
            goto LABEL_219;
          }
          if (v25 + v127 >= v23) {
            Swift::Int v41 = v23;
          }
          else {
            Swift::Int v41 = v25 + v127;
          }
          if (v41 < v25) {
            goto LABEL_220;
          }
          if (v26 != v41)
          {
            uint64_t v42 = (void *)(v130 + 8 * v26);
            do
            {
              uint64_t v43 = *(void *)(v22 + 8 * v26);
              Swift::Int v44 = v25;
              uint64_t v45 = v42;
              do
              {
                BOOL v46 = *(void *)(v43 + 48) == *(void *)(*v45 + 48)
                   && *(void *)(v43 + 56) == *(void *)(*v45 + 56);
                if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                  break;
                }
                if (!v22) {
                  goto LABEL_223;
                }
                uint64_t v47 = *v45;
                uint64_t v43 = v45[1];
                *uint64_t v45 = v43;
                v45[1] = v47;
                --v45;
                ++v44;
              }
              while (v26 != v44);
              ++v26;
              ++v42;
            }
            while (v26 != v41);
            Swift::Int v26 = v41;
          }
        }
      }
      if (v26 < v25) {
        goto LABEL_213;
      }
      Swift::Int v129 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::Int v20 = sub_1001B43F0(0, *((void *)v20 + 2) + 1, 1, v20);
      }
      unint64_t v49 = *((void *)v20 + 2);
      unint64_t v48 = *((void *)v20 + 3);
      unint64_t v24 = v49 + 1;
      if (v49 >= v48 >> 1) {
        Swift::Int v20 = sub_1001B43F0((char *)(v48 > 1), v49 + 1, 1, v20);
      }
      *((void *)v20 + 2) = v24;
      uint64_t v50 = v20 + 32;
      uint64_t v51 = &v20[16 * v49 + 32];
      *(void *)uint64_t v51 = v25;
      *((void *)v51 + 1) = v26;
      if (v49)
      {
        uint64_t v9 = (uint64_t)__dst;
        v132 = v20 + 32;
        v133 = v20;
        while (1)
        {
          unint64_t v52 = v24 - 1;
          if (v24 >= 4)
          {
            uint64_t v57 = &v50[16 * v24];
            uint64_t v58 = *((void *)v57 - 8);
            uint64_t v59 = *((void *)v57 - 7);
            BOOL v63 = __OFSUB__(v59, v58);
            uint64_t v60 = v59 - v58;
            if (v63) {
              goto LABEL_202;
            }
            uint64_t v62 = *((void *)v57 - 6);
            uint64_t v61 = *((void *)v57 - 5);
            BOOL v63 = __OFSUB__(v61, v62);
            uint64_t v55 = v61 - v62;
            char v56 = v63;
            if (v63) {
              goto LABEL_203;
            }
            unint64_t v64 = v24 - 2;
            BOOL v65 = &v50[16 * v24 - 32];
            uint64_t v67 = *(void *)v65;
            uint64_t v66 = *((void *)v65 + 1);
            BOOL v63 = __OFSUB__(v66, v67);
            uint64_t v68 = v66 - v67;
            if (v63) {
              goto LABEL_205;
            }
            BOOL v63 = __OFADD__(v55, v68);
            uint64_t v69 = v55 + v68;
            if (v63) {
              goto LABEL_208;
            }
            if (v69 >= v60)
            {
              uint64_t v87 = &v50[16 * v52];
              uint64_t v89 = *(void *)v87;
              uint64_t v88 = *((void *)v87 + 1);
              BOOL v63 = __OFSUB__(v88, v89);
              uint64_t v90 = v88 - v89;
              if (v63) {
                goto LABEL_212;
              }
              BOOL v80 = v55 < v90;
              goto LABEL_113;
            }
          }
          else
          {
            if (v24 != 3)
            {
              uint64_t v81 = *((void *)v20 + 4);
              uint64_t v82 = *((void *)v20 + 5);
              BOOL v63 = __OFSUB__(v82, v81);
              uint64_t v74 = v82 - v81;
              char v75 = v63;
              goto LABEL_107;
            }
            uint64_t v54 = *((void *)v20 + 4);
            uint64_t v53 = *((void *)v20 + 5);
            BOOL v63 = __OFSUB__(v53, v54);
            uint64_t v55 = v53 - v54;
            char v56 = v63;
          }
          if (v56) {
            goto LABEL_204;
          }
          unint64_t v64 = v24 - 2;
          uint64_t v70 = &v50[16 * v24 - 32];
          uint64_t v72 = *(void *)v70;
          uint64_t v71 = *((void *)v70 + 1);
          BOOL v73 = __OFSUB__(v71, v72);
          uint64_t v74 = v71 - v72;
          char v75 = v73;
          if (v73) {
            goto LABEL_207;
          }
          uint64_t v76 = &v50[16 * v52];
          uint64_t v78 = *(void *)v76;
          uint64_t v77 = *((void *)v76 + 1);
          BOOL v63 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          if (v63) {
            goto LABEL_210;
          }
          if (__OFADD__(v74, v79)) {
            goto LABEL_211;
          }
          if (v74 + v79 >= v55)
          {
            BOOL v80 = v55 < v79;
LABEL_113:
            if (v80) {
              unint64_t v52 = v64;
            }
            goto LABEL_115;
          }
LABEL_107:
          if (v75) {
            goto LABEL_206;
          }
          unint64_t v83 = &v50[16 * v52];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v63 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v63) {
            goto LABEL_209;
          }
          if (v86 < v74) {
            goto LABEL_25;
          }
LABEL_115:
          unint64_t v91 = v52 - 1;
          if (v52 - 1 >= v24)
          {
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
            goto LABEL_215;
          }
          if (!v22) {
            goto LABEL_225;
          }
          v136 = &v50[16 * v91];
          int64_t v137 = v52;
          uint64_t v92 = &v50[16 * v52];
          uint64_t v94 = *(void *)v92;
          uint64_t v93 = *((void *)v92 + 1);
          v135 = v92;
          uint64_t v95 = v22;
          uint64_t v138 = *(void *)v136;
          uint64_t v139 = v93;
          unint64_t v96 = (char *)(v22 + 8 * *(void *)v136);
          uint64_t v97 = (char *)(v95 + 8 * v94);
          unint64_t v98 = v95 + 8 * v93;
          uint64_t v99 = v97 - v96;
          uint64_t v100 = v97 - v96 + 7;
          if (v97 - v96 >= 0) {
            uint64_t v100 = v97 - v96;
          }
          uint64_t v101 = v100 >> 3;
          uint64_t v102 = v98 - (void)v97;
          uint64_t v103 = v98 - (void)v97 + 7;
          if ((uint64_t)(v98 - (void)v97) >= 0) {
            uint64_t v103 = v98 - (void)v97;
          }
          uint64_t v104 = v103 >> 3;
          if (v101 >= v103 >> 3)
          {
            if (v102 < -7) {
              goto LABEL_228;
            }
            if ((unint64_t)__dst >= v98 || __dst != v97) {
              memmove(__dst, v97, 8 * v104);
            }
            Swift::Int v105 = &__dst[8 * v104];
            uint64_t v109 = v138;
            uint64_t v9 = (uint64_t)__dst;
            if (v138 >= v94 || v102 < 8)
            {
              Swift::Int v106 = __dst;
              goto LABEL_172;
            }
            char v110 = (char *)(v130 + 8 * v139);
            while (2)
            {
              char v111 = v110 + 8;
              long long v113 = v105 - 8;
              uint64_t v112 = *((void *)v105 - 1);
              uint64_t v114 = *((void *)v97 - 1);
              BOOL v115 = *(void *)(v112 + 48) == *(void *)(v114 + 48)
                  && *(void *)(v112 + 56) == *(void *)(v114 + 56);
              if (v115 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                if (v111 == v105)
                {
                  BOOL v19 = v110 >= v105;
                  v105 -= 8;
                  if (!v19) {
                    goto LABEL_165;
                  }
                }
                else
                {
                  v105 -= 8;
                }
              }
              else
              {
                long long v113 = v97 - 8;
                if (v111 == v97)
                {
                  BOOL v19 = v110 >= v97;
                  v97 -= 8;
                  if (!v19) {
                    goto LABEL_165;
                  }
                }
                else
                {
                  v97 -= 8;
                }
              }
              *(void *)char v110 = *(void *)v113;
LABEL_165:
              if (v96 >= v97 || (v110 -= 8, __dst >= v105))
              {
                Swift::Int v106 = __dst;
                goto LABEL_170;
              }
              continue;
            }
          }
          if (v99 < -7) {
            goto LABEL_228;
          }
          uint64_t v9 = (uint64_t)__dst;
          if (__dst != v96 || __dst >= v97) {
            memmove(__dst, v96, 8 * v101);
          }
          Swift::Int v105 = &__dst[8 * v101];
          if (v94 < v139 && v99 >= 8)
          {
            Swift::Int v106 = __dst;
            while (1)
            {
              BOOL v107 = *(void *)(*(void *)v97 + 48) == *(void *)(*(void *)v106 + 48)
                  && *(void *)(*(void *)v97 + 56) == *(void *)(*(void *)v106 + 56);
              if (v107 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                break;
              }
              uint64_t v108 = v97;
              BOOL v17 = v96 == v97;
              v97 += 8;
              if (!v17) {
                goto LABEL_138;
              }
LABEL_139:
              v96 += 8;
              if (v106 >= v105 || (unint64_t)v97 >= v98) {
                goto LABEL_169;
              }
            }
            uint64_t v108 = v106;
            BOOL v17 = v96 == v106;
            v106 += 8;
            if (v17) {
              goto LABEL_139;
            }
LABEL_138:
            *(void *)unint64_t v96 = *(void *)v108;
            goto LABEL_139;
          }
          Swift::Int v106 = __dst;
LABEL_169:
          uint64_t v97 = v96;
LABEL_170:
          uint64_t v109 = v138;
LABEL_172:
          uint64_t v116 = v105 - v106 + 7;
          if (v105 - v106 >= 0) {
            uint64_t v116 = v105 - v106;
          }
          Swift::Int v20 = v133;
          uint64_t v22 = v131;
          if (v105 - v106 <= -8) {
            goto LABEL_228;
          }
          uint64_t v117 = v116 >> 3;
          if (v97 != v106 || v97 >= &v106[8 * v117]) {
            memmove(v97, v106, 8 * v117);
          }
          if (v139 < v109) {
            goto LABEL_199;
          }
          if (v137 > *((void *)v133 + 2)) {
            goto LABEL_200;
          }
          *(void *)v136 = v109;
          uint64_t v50 = v132;
          *(void *)&v132[16 * v91 + 8] = v139;
          unint64_t v118 = *((void *)v133 + 2);
          if (v137 >= (uint64_t)v118) {
            goto LABEL_201;
          }
          unint64_t v24 = v118 - 1;
          memmove(v135, v135 + 16, 16 * (v118 - 1 - v137));
          *((void *)v133 + 2) = v118 - 1;
          if (v118 <= 2) {
            goto LABEL_25;
          }
        }
      }
      unint64_t v24 = 1;
      uint64_t v9 = (uint64_t)__dst;
LABEL_25:
      Swift::Int v23 = v128;
      Swift::Int v21 = v129;
      if (v129 >= v128)
      {
        uint64_t v2 = v126;
        if (v24 < 2)
        {
LABEL_196:
          swift_bridgeObjectRelease();
          *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
          specialized Array._endMutation()();
          return swift_bridgeObjectRelease();
        }
LABEL_186:
        uint64_t v119 = *v2;
        while (1)
        {
          unint64_t v120 = v24 - 2;
          if (v24 < 2) {
            break;
          }
          if (!v119) {
            goto LABEL_227;
          }
          char v121 = (char *)v9;
          uint64_t v122 = *(void *)&v20[16 * v120 + 32];
          uint64_t v123 = *(void *)&v20[16 * v24 + 24];
          sub_1001889DC((char *)(v119 + 8 * v122), (char *)(v119 + 8 * *(void *)&v20[16 * v24 + 16]), v119 + 8 * v123, v121);
          if (v1) {
            goto LABEL_196;
          }
          if (v123 < v122) {
            goto LABEL_216;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::Int v20 = sub_1001B49EC((uint64_t)v20);
          }
          if (v120 >= *((void *)v20 + 2)) {
            goto LABEL_217;
          }
          long long v124 = &v20[16 * v120 + 32];
          *(void *)long long v124 = v122;
          *((void *)v124 + 1) = v123;
          unint64_t v125 = *((void *)v20 + 2);
          if (v24 > v125) {
            goto LABEL_218;
          }
          memmove(&v20[16 * v24 + 16], &v20[16 * v24 + 32], 16 * (v125 - v24));
          *((void *)v20 + 2) = v125 - 1;
          unint64_t v24 = v125 - 1;
          uint64_t v9 = (uint64_t)v121;
          if (v125 <= 2) {
            goto LABEL_196;
          }
        }
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
LABEL_229:
        Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
  }
  if (v3 < 0) {
    goto LABEL_222;
  }
  if ((unint64_t)v3 >= 2)
  {
    uint64_t v10 = (void *)*v2;
    uint64_t v11 = -1;
    uint64_t v12 = 1;
    Swift::Int v13 = v10;
    do
    {
      uint64_t v14 = v10[v12];
      uint64_t v15 = v11;
      uint64_t v16 = v13;
      do
      {
        Swift::Int result = *(void *)(v14 + 48);
        BOOL v17 = result == *(void *)(*v16 + 48) && *(void *)(v14 + 56) == *(void *)(*v16 + 56);
        if (v17) {
          break;
        }
        Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v10) {
          goto LABEL_224;
        }
        uint64_t v18 = *v16;
        uint64_t v14 = v16[1];
        *uint64_t v16 = v14;
        v16[1] = v18;
        --v16;
        BOOL v19 = __CFADD__(v15++, 1);
      }
      while (!v19);
      ++v12;
      ++v13;
      --v11;
    }
    while (v12 != v3);
  }
  return result;
}

Swift::Int sub_100187364(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100157064(&qword_1002D8210);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  v217 = (uint64_t *)((char *)&v191 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v5);
  v218 = (char *)&v191 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v213 = (void (**)(char *, uint64_t))((char *)&v191 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v212 = (uint64_t)&v191 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v203 = (uint64_t)&v191 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v202 = (uint64_t)&v191 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  BOOL v19 = (char *)&v191 - v18;
  __chkstk_darwin(v17);
  Swift::Int v21 = (char *)&v191 - v20;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  v216 = (char *)&v191 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  v221 = (char *)&v191 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  int v30 = (char *)&v191 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  v220 = (char *)&v191 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v191 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  v206 = (char *)&v191 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v198 = (char *)&v191 - v39;
  __chkstk_darwin(v38);
  v199 = (char *)&v191 - v40;
  Swift::Int v41 = *(void *)(a1 + 8);
  Swift::Int result = _minimumMergeRunLength(_:)(v41);
  uint64_t v219 = v22;
  uint64_t v208 = v41;
  if (result >= v41)
  {
    if (v41 < 0) {
      goto LABEL_169;
    }
    if ((unint64_t)v41 >= 2)
    {
      uint64_t v209 = v1;
      BOOL v46 = *(char **)a1;
      uint64_t v47 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
      v214 = (char **)(v23 + 32);
      v213 = (void (**)(char *, uint64_t))(v23 + 8);
      uint64_t v48 = -1;
      uint64_t v49 = 1;
      v220 = v46;
      uint64_t v50 = (uint64_t)v218;
      v215 = (char *)v47;
      do
      {
        v211 = (char *)v49;
        uint64_t v51 = *(void *)&v220[8 * v49];
        uint64_t v212 = v48;
        v210 = v46;
        do
        {
          uint64_t v52 = *(void *)v46;
          uint64_t v53 = v51 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess();
          sub_10015D5F4(v53, v50, &qword_1002D8210);
          uint64_t v54 = *v47;
          uint64_t v55 = v219;
          if ((*v47)(v50, 1, v219) == 1)
          {
            swift_retain();
            swift_retain();
            Date.init()();
            sub_10015D658(v50, &qword_1002D8210);
          }
          else
          {
            ((void (*)(char *, uint64_t, uint64_t))*v214)(v221, v50, v55);
            swift_retain();
            swift_retain();
          }
          uint64_t v56 = v55;
          uint64_t v57 = v52 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess();
          uint64_t v58 = v57;
          uint64_t v59 = (void (**)(void, void, void))v217;
          sub_10015D5F4(v58, (uint64_t)v217, &qword_1002D8210);
          if (v54((uint64_t)v59, 1, v56) == 1)
          {
            uint64_t v60 = v216;
            Date.init()();
            sub_10015D658((uint64_t)v59, &qword_1002D8210);
          }
          else
          {
            uint64_t v60 = v216;
            ((void (*)(char *, void, uint64_t))*v214)(v216, v59, v56);
          }
          uint64_t v61 = v221;
          char v62 = static Date.> infix(_:_:)();
          BOOL v63 = v60;
          unint64_t v64 = *v213;
          (*v213)(v63, v56);
          v64(v61, v56);
          swift_release();
          Swift::Int result = swift_release();
          uint64_t v50 = (uint64_t)v218;
          uint64_t v47 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v215;
          if ((v62 & 1) == 0) {
            break;
          }
          if (!v220) {
            goto LABEL_173;
          }
          uint64_t v65 = *(void *)v46;
          uint64_t v51 = *((void *)v46 + 1);
          *(void *)BOOL v46 = v51;
          *((void *)v46 + 1) = v65;
          v46 -= 8;
        }
        while (!__CFADD__(v48++, 1));
        uint64_t v49 = (uint64_t)(v211 + 1);
        BOOL v46 = v210 + 8;
        uint64_t v48 = v212 - 1;
      }
      while (v211 + 1 != (char *)v208);
    }
    return result;
  }
  if (v41 >= 0) {
    uint64_t v43 = v41;
  }
  else {
    uint64_t v43 = v41 + 1;
  }
  if (v41 < -1) {
    goto LABEL_178;
  }
  Swift::Int v196 = result;
  v197 = v21;
  if (v41 < 2)
  {
    uint64_t v67 = (char *)_swiftEmptyArrayStorage;
    uint64_t v222 = (uint64_t)_swiftEmptyArrayStorage;
    v207 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v41 != 1)
    {
      unint64_t v72 = _swiftEmptyArrayStorage[2];
      if (v72 < 2)
      {
LABEL_146:
        swift_bridgeObjectRelease();
        *(void *)((v222 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()();
        return swift_bridgeObjectRelease();
      }
LABEL_133:
      v183 = *(char **)a1;
      while (1)
      {
        unint64_t v184 = v72 - 2;
        if (v72 < 2) {
          goto LABEL_164;
        }
        if (!v183) {
          goto LABEL_177;
        }
        v210 = v67;
        uint64_t v185 = *(void *)&v67[16 * v184 + 32];
        uint64_t v186 = *(void *)&v67[16 * v72 + 24];
        sub_100188C88(&v183[8 * v185], &v183[8 * *(void *)&v67[16 * v72 + 16]], (unint64_t)&v183[8 * v186], v207);
        if (v2) {
          goto LABEL_146;
        }
        if (v186 < v185) {
          goto LABEL_165;
        }
        if (swift_isUniquelyReferenced_nonNull_native()) {
          v187 = v210;
        }
        else {
          v187 = sub_1001B49EC((uint64_t)v210);
        }
        if (v184 >= *((void *)v187 + 2)) {
          goto LABEL_166;
        }
        v188 = &v187[16 * v184 + 32];
        *(void *)v188 = v185;
        *((void *)v188 + 1) = v186;
        unint64_t v189 = *((void *)v187 + 2);
        if (v72 > v189) {
          goto LABEL_167;
        }
        v190 = v187;
        memmove(&v187[16 * v72 + 16], &v187[16 * v72 + 32], 16 * (v189 - v72));
        uint64_t v67 = v190;
        *((void *)v190 + 2) = v189 - 1;
        unint64_t v72 = v189 - 1;
        if (v189 <= 2) {
          goto LABEL_146;
        }
      }
    }
  }
  else
  {
    uint64_t v44 = v43 >> 1;
    type metadata accessor for FTMAllMetricsModel();
    uint64_t v45 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10) = v44;
    v207 = (char *)((v45 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v222 = v45;
  }
  v211 = v30;
  v195 = v19;
  uint64_t v209 = v1;
  Swift::Int v68 = 0;
  uint64_t v192 = a1;
  uint64_t v69 = *(char **)a1;
  uint64_t v70 = v23;
  uint64_t v71 = (char **)(v23 + 48);
  v217 = (uint64_t *)(v70 + 32);
  v216 = (char *)(v70 + 8);
  v194 = v69 + 16;
  v193 = v69 - 8;
  uint64_t v67 = (char *)_swiftEmptyArrayStorage;
  v201 = v35;
  v215 = v69;
  v214 = v71;
  while (1)
  {
    Swift::Int v73 = v68;
    Swift::Int v74 = v68 + 1;
    Swift::Int v204 = v68;
    if (v68 + 1 < v41)
    {
      v210 = v67;
      uint64_t v75 = *(void *)&v69[8 * v74];
      uint64_t v76 = *(void *)&v69[8 * v68];
      uint64_t v77 = v75 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
      swift_beginAccess();
      uint64_t v78 = v77;
      uint64_t v79 = (uint64_t)v197;
      sub_10015D5F4(v78, (uint64_t)v197, &qword_1002D8210);
      v221 = *v71;
      int v80 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v221)(v79, 1, v22);
      uint64_t v81 = v198;
      if (v80 == 1)
      {
        swift_retain();
        swift_retain();
        Date.init()();
        sub_10015D658(v79, &qword_1002D8210);
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t))*v217)(v199, v79, v22);
        swift_retain();
        swift_retain();
      }
      uint64_t v82 = v76 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
      swift_beginAccess();
      uint64_t v83 = v82;
      uint64_t v84 = (uint64_t)v195;
      sub_10015D5F4(v83, (uint64_t)v195, &qword_1002D8210);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v221)(v84, 1, v22) == 1)
      {
        Date.init()();
        sub_10015D658(v84, &qword_1002D8210);
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t))*v217)(v81, v84, v22);
      }
      uint64_t v85 = v199;
      LODWORD(v218) = static Date.> infix(_:_:)();
      uint64_t v86 = v81;
      uint64_t v87 = *(void (**)(char *, uint64_t))v216;
      (*(void (**)(char *, uint64_t))v216)(v86, v22);
      v87(v85, v22);
      swift_release();
      swift_release();
      Swift::Int v73 = v204;
      Swift::Int v74 = v204 + 2;
      if (v204 + 2 < v41)
      {
        uint64_t v88 = &v194[8 * v204];
        while (1)
        {
          uint64_t v89 = *((void *)v88 - 1);
          uint64_t v90 = *(void *)v88 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess();
          uint64_t v91 = v90;
          uint64_t v92 = v202;
          sub_10015D5F4(v91, v202, &qword_1002D8210);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v221)(v92, 1, v22) == 1)
          {
            swift_retain();
            swift_retain();
            Date.init()();
            sub_10015D658(v92, &qword_1002D8210);
          }
          else
          {
            ((void (*)(char *, uint64_t, uint64_t))*v217)(v206, v92, v22);
            swift_retain();
            swift_retain();
          }
          uint64_t v93 = v89 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess();
          uint64_t v94 = v93;
          uint64_t v95 = v203;
          sub_10015D5F4(v94, v203, &qword_1002D8210);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v221)(v95, 1, v22) == 1)
          {
            unint64_t v96 = v201;
            Date.init()();
            sub_10015D658(v95, &qword_1002D8210);
          }
          else
          {
            unint64_t v96 = v201;
            ((void (*)(char *, uint64_t, uint64_t))*v217)(v201, v95, v22);
          }
          uint64_t v97 = v206;
          int v98 = static Date.> infix(_:_:)();
          v87(v96, v22);
          v87(v97, v22);
          swift_release();
          swift_release();
          if ((v218 ^ v98)) {
            break;
          }
          ++v74;
          v88 += 8;
          Swift::Int v41 = v208;
          uint64_t v69 = v215;
          uint64_t v71 = v214;
          if (v208 == v74)
          {
            Swift::Int v74 = v208;
            goto LABEL_47;
          }
        }
        Swift::Int v41 = v208;
        uint64_t v69 = v215;
        uint64_t v71 = v214;
LABEL_47:
        Swift::Int v73 = v204;
      }
      uint64_t v67 = v210;
      if (v218)
      {
        if (v74 < v73) {
          goto LABEL_170;
        }
        if (v73 < v74)
        {
          uint64_t v99 = &v193[8 * v74];
          Swift::Int v100 = v74;
          Swift::Int v101 = v73;
          uint64_t v102 = &v69[8 * v73];
          do
          {
            if (v101 != --v100)
            {
              if (!v69) {
                goto LABEL_176;
              }
              uint64_t v103 = *(void *)v102;
              *(void *)uint64_t v102 = *(void *)v99;
              *(void *)uint64_t v99 = v103;
            }
            ++v101;
            v99 -= 8;
            v102 += 8;
          }
          while (v101 < v100);
        }
      }
    }
    if (v74 >= v41) {
      goto LABEL_81;
    }
    if (__OFSUB__(v74, v73)) {
      goto LABEL_168;
    }
    if (v74 - v73 >= v196) {
      goto LABEL_81;
    }
    if (__OFADD__(v73, v196)) {
      goto LABEL_171;
    }
    Swift::Int v104 = v73 + v196 >= v41 ? v41 : v73 + v196;
    if (v104 < v73) {
      break;
    }
    if (v74 != v104)
    {
      v210 = v67;
      Swift::Int v105 = &v193[8 * v74];
      Swift::Int v200 = v104;
      do
      {
        v218 = (char *)v74;
        BOOL v107 = *(char **)&v69[8 * v74];
        uint64_t v108 = (char *)v73;
        v205 = v105;
        uint64_t v109 = (char **)v105;
        while (1)
        {
          char v110 = *v109;
          uint64_t v111 = (uint64_t)&v107[OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp];
          swift_beginAccess();
          uint64_t v112 = v111;
          uint64_t v113 = v212;
          sub_10015D5F4(v112, v212, &qword_1002D8210);
          uint64_t v114 = v22;
          BOOL v115 = *v71;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v71)(v113, 1, v114) == 1)
          {
            swift_retain();
            swift_retain();
            Date.init()();
            sub_10015D658(v113, &qword_1002D8210);
          }
          else
          {
            ((void (*)(char *, uint64_t, uint64_t))*v217)(v220, v113, v114);
            swift_retain();
            swift_retain();
          }
          uint64_t v116 = (uint64_t)&v110[OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp];
          swift_beginAccess();
          uint64_t v117 = v116;
          unint64_t v118 = v213;
          sub_10015D5F4(v117, (uint64_t)v213, &qword_1002D8210);
          unsigned int v119 = ((uint64_t (*)(void (**)(char *, uint64_t), uint64_t, uint64_t))v115)(v118, 1, v114);
          v221 = v110;
          unint64_t v120 = v211;
          if (v119 == 1)
          {
            Date.init()();
            sub_10015D658((uint64_t)v118, &qword_1002D8210);
          }
          else
          {
            ((void (*)(char *, void (**)(char *, uint64_t), uint64_t))*v217)(v211, v118, v114);
          }
          char v121 = v220;
          char v122 = static Date.> infix(_:_:)();
          uint64_t v123 = *(void (**)(char *, uint64_t))v216;
          (*(void (**)(char *, uint64_t))v216)(v120, v114);
          long long v124 = v121;
          uint64_t v125 = v114;
          v123(v124, v114);
          swift_release();
          swift_release();
          if ((v122 & 1) == 0) {
            break;
          }
          uint64_t v69 = v215;
          uint64_t v71 = v214;
          Swift::Int v106 = v218;
          if (!v215) {
            goto LABEL_174;
          }
          v126 = *v109;
          BOOL v107 = v109[1];
          *uint64_t v109 = v107;
          v109[1] = v126;
          --v109;
          ++v108;
          uint64_t v22 = v125;
          if (v106 == v108) {
            goto LABEL_68;
          }
        }
        uint64_t v69 = v215;
        uint64_t v71 = v214;
        uint64_t v22 = v114;
        Swift::Int v106 = v218;
LABEL_68:
        Swift::Int v74 = (Swift::Int)(v106 + 1);
        Swift::Int v105 = v205 + 8;
        Swift::Int v73 = v204;
      }
      while (v74 != v200);
      Swift::Int v74 = v200;
      uint64_t v67 = v210;
    }
LABEL_81:
    if (v74 < v73) {
      goto LABEL_163;
    }
    Swift::Int v127 = v67;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v218 = (char *)v74;
    if (isUniquelyReferenced_nonNull_native) {
      uint64_t v67 = v127;
    }
    else {
      uint64_t v67 = sub_1001B43F0(0, *((void *)v127 + 2) + 1, 1, v127);
    }
    unint64_t v130 = *((void *)v67 + 2);
    unint64_t v129 = *((void *)v67 + 3);
    unint64_t v72 = v130 + 1;
    if (v130 >= v129 >> 1) {
      uint64_t v67 = sub_1001B43F0((char *)(v129 > 1), v130 + 1, 1, v67);
    }
    *((void *)v67 + 2) = v72;
    uint64_t v131 = v67 + 32;
    v132 = &v67[16 * v130 + 32];
    v133 = v218;
    *(void *)v132 = v73;
    *((void *)v132 + 1) = v133;
    if (v130)
    {
      v210 = v67;
      while (1)
      {
        unint64_t v134 = v72 - 1;
        if (v72 >= 4)
        {
          uint64_t v139 = &v131[16 * v72];
          uint64_t v140 = *((void *)v139 - 8);
          uint64_t v141 = *((void *)v139 - 7);
          BOOL v145 = __OFSUB__(v141, v140);
          uint64_t v142 = v141 - v140;
          if (v145) {
            goto LABEL_152;
          }
          uint64_t v144 = *((void *)v139 - 6);
          uint64_t v143 = *((void *)v139 - 5);
          BOOL v145 = __OFSUB__(v143, v144);
          uint64_t v137 = v143 - v144;
          char v138 = v145;
          if (v145) {
            goto LABEL_153;
          }
          unint64_t v146 = v72 - 2;
          v147 = &v131[16 * v72 - 32];
          uint64_t v149 = *(void *)v147;
          uint64_t v148 = *((void *)v147 + 1);
          BOOL v145 = __OFSUB__(v148, v149);
          uint64_t v150 = v148 - v149;
          if (v145) {
            goto LABEL_155;
          }
          BOOL v145 = __OFADD__(v137, v150);
          uint64_t v151 = v137 + v150;
          if (v145) {
            goto LABEL_158;
          }
          if (v151 >= v142)
          {
            v169 = &v131[16 * v134];
            uint64_t v171 = *(void *)v169;
            uint64_t v170 = *((void *)v169 + 1);
            BOOL v145 = __OFSUB__(v170, v171);
            uint64_t v172 = v170 - v171;
            if (v145) {
              goto LABEL_162;
            }
            BOOL v162 = v137 < v172;
            goto LABEL_119;
          }
        }
        else
        {
          if (v72 != 3)
          {
            uint64_t v163 = *((void *)v67 + 4);
            uint64_t v164 = *((void *)v67 + 5);
            BOOL v145 = __OFSUB__(v164, v163);
            uint64_t v156 = v164 - v163;
            char v157 = v145;
            goto LABEL_113;
          }
          uint64_t v136 = *((void *)v67 + 4);
          uint64_t v135 = *((void *)v67 + 5);
          BOOL v145 = __OFSUB__(v135, v136);
          uint64_t v137 = v135 - v136;
          char v138 = v145;
        }
        if (v138) {
          goto LABEL_154;
        }
        unint64_t v146 = v72 - 2;
        v152 = &v131[16 * v72 - 32];
        uint64_t v154 = *(void *)v152;
        uint64_t v153 = *((void *)v152 + 1);
        BOOL v155 = __OFSUB__(v153, v154);
        uint64_t v156 = v153 - v154;
        char v157 = v155;
        if (v155) {
          goto LABEL_157;
        }
        v158 = &v131[16 * v134];
        uint64_t v160 = *(void *)v158;
        uint64_t v159 = *((void *)v158 + 1);
        BOOL v145 = __OFSUB__(v159, v160);
        uint64_t v161 = v159 - v160;
        if (v145) {
          goto LABEL_160;
        }
        if (__OFADD__(v156, v161)) {
          goto LABEL_161;
        }
        if (v156 + v161 >= v137)
        {
          BOOL v162 = v137 < v161;
LABEL_119:
          if (v162) {
            unint64_t v134 = v146;
          }
          goto LABEL_121;
        }
LABEL_113:
        if (v157) {
          goto LABEL_156;
        }
        v165 = &v131[16 * v134];
        uint64_t v167 = *(void *)v165;
        uint64_t v166 = *((void *)v165 + 1);
        BOOL v145 = __OFSUB__(v166, v167);
        uint64_t v168 = v166 - v167;
        if (v145) {
          goto LABEL_159;
        }
        if (v168 < v156) {
          goto LABEL_27;
        }
LABEL_121:
        unint64_t v173 = v134 - 1;
        if (v134 - 1 >= v72)
        {
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
          goto LABEL_172;
        }
        if (!v69) {
          goto LABEL_175;
        }
        v174 = &v131[16 * v173];
        uint64_t v175 = *(void *)v174;
        v176 = v131;
        unint64_t v177 = v134;
        v178 = &v131[16 * v134];
        uint64_t v179 = *((void *)v178 + 1);
        uint64_t v180 = v209;
        sub_100188C88(&v69[8 * *(void *)v174], &v69[8 * *(void *)v178], (unint64_t)&v69[8 * v179], v207);
        uint64_t v209 = v180;
        if (v180) {
          goto LABEL_146;
        }
        if (v179 < v175) {
          goto LABEL_149;
        }
        uint64_t v181 = (uint64_t)v210;
        if (v177 > *((void *)v210 + 2)) {
          goto LABEL_150;
        }
        *(void *)v174 = v175;
        *(void *)&v176[16 * v173 + 8] = v179;
        unint64_t v182 = *(void *)(v181 + 16);
        if (v177 >= v182) {
          goto LABEL_151;
        }
        unint64_t v72 = v182 - 1;
        memmove(v178, v178 + 16, 16 * (v182 - 1 - v177));
        uint64_t v131 = v176;
        uint64_t v67 = v210;
        *((void *)v210 + 2) = v182 - 1;
        uint64_t v22 = v219;
        if (v182 <= 2) {
          goto LABEL_27;
        }
      }
    }
    unint64_t v72 = 1;
LABEL_27:
    Swift::Int v41 = v208;
    Swift::Int v68 = (Swift::Int)v218;
    if ((uint64_t)v218 >= v208)
    {
      uint64_t v2 = v209;
      a1 = v192;
      if (v72 < 2) {
        goto LABEL_146;
      }
      goto LABEL_133;
    }
  }
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100188670(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100188740(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      uint64_t v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        BOOL v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            BOOL v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            uint64_t v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v27 = v7;
    }
LABEL_50:
    sub_1001B44EC((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001889DC(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v28 = __src;
  uint64_t v27 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v17 = &v4[8 * v13];
      uint64_t v26 = v17;
      uint64_t v28 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v18 = (char *)(a3 - 8);
        BOOL v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 8;
          uint64_t v21 = *((void *)v17 - 1);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 8;
          uint64_t v23 = *(void *)(v22 + 56);
          BOOL v24 = *(void *)(v21 + 48) == *(void *)(v22 + 48) && *(void *)(v21 + 56) == v23;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v26 = v17 - 8;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(void *)uint64_t v18 = *((void *)v17 - 1);
            }
            BOOL v19 = v6;
            v17 -= 8;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(void *)uint64_t v18 = *(void *)v19;
            }
            uint64_t v28 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 8;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        BOOL v15 = *(void *)(*(void *)v6 + 48) == *(void *)(*(void *)v4 + 48)
           && *(void *)(*(void *)v6 + 56) == *(void *)(*(void *)v4 + 56);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v27 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 8;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v28 = v7;
    }
LABEL_50:
    sub_1001B45A8((void **)&v28, &v27, &v26);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100188C88(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8 = sub_100157064(&qword_1002D8210);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v83 = &v77[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v82 = &v77[-v12];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v86 = &v77[-v14];
  __chkstk_darwin(v13);
  uint64_t v87 = &v77[-v15];
  uint64_t v91 = type metadata accessor for Date();
  uint64_t v16 = __chkstk_darwin(v91);
  uint64_t v81 = &v77[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v90 = &v77[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  int v80 = &v77[-v21];
  __chkstk_darwin(v20);
  unint64_t v88 = a3;
  uint64_t v89 = &v77[-v23];
  uint64_t v24 = a2 - a1;
  uint64_t v25 = a2 - a1 + 7;
  if (a2 - a1 >= 0) {
    uint64_t v25 = a2 - a1;
  }
  uint64_t v26 = v25 >> 3;
  uint64_t v27 = a3 - (void)a2;
  uint64_t v28 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v28 = a3 - (void)a2;
  }
  uint64_t v29 = v28 >> 3;
  uint64_t v84 = a1;
  uint64_t v85 = a4;
  uint64_t v95 = a1;
  uint64_t v94 = a4;
  if (v26 >= v28 >> 3)
  {
    if (v27 < -7) {
      goto LABEL_60;
    }
    uint64_t v49 = v85;
    if (v85 != a2 || &a2[8 * v29] <= v85)
    {
      uint64_t v50 = v22;
      memmove(v85, a2, 8 * v29);
      uint64_t v22 = v50;
    }
    uint64_t v51 = &v49[8 * v29];
    uint64_t v93 = v51;
    uint64_t v95 = a2;
    if (v27 < 8 || v84 >= a2)
    {
LABEL_59:
      sub_1001B45A8((void **)&v95, (const void **)&v94, &v93);
      return 1;
    }
    uint64_t v52 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48);
    uint64_t v79 = (void (**)(char *, unsigned char *, uint64_t))(v22 + 32);
    uint64_t v78 = (void (**)(char *, uint64_t))(v22 + 8);
    uint64_t v53 = (char *)(v88 - 8);
    uint64_t v54 = a2;
    int v80 = (unsigned char *)(v22 + 48);
    while (1)
    {
      uint64_t v92 = a2;
      uint64_t v89 = v51;
      uint64_t v55 = *((void *)v51 - 1);
      unint64_t v56 = *((void *)v54 - 1);
      uint64_t v86 = v51 - 8;
      uint64_t v87 = v54 - 8;
      uint64_t v57 = v55 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
      swift_beginAccess();
      uint64_t v58 = v82;
      sub_10015D5F4(v57, (uint64_t)v82, &qword_1002D8210);
      uint64_t v59 = *v52;
      uint64_t v60 = v91;
      if ((*v52)(v58, 1, v91) == 1)
      {
        swift_retain();
        swift_retain();
        Date.init()();
        sub_10015D658((uint64_t)v58, &qword_1002D8210);
      }
      else
      {
        (*v79)(v90, v58, v60);
        swift_retain();
        swift_retain();
      }
      unint64_t v88 = v56;
      uint64_t v61 = v56 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
      swift_beginAccess();
      char v62 = v83;
      sub_10015D5F4(v61, (uint64_t)v83, &qword_1002D8210);
      if (v59(v62, 1, v60) == 1)
      {
        BOOL v63 = v89;
        unint64_t v64 = v81;
        Date.init()();
        sub_10015D658((uint64_t)v62, &qword_1002D8210);
      }
      else
      {
        BOOL v63 = v89;
        unint64_t v64 = v81;
        (*v79)(v81, v62, v60);
      }
      uint64_t v65 = v60;
      uint64_t v66 = v53 + 8;
      uint64_t v67 = v90;
      char v68 = static Date.> infix(_:_:)();
      uint64_t v69 = v64;
      char v70 = v68;
      uint64_t v71 = *v78;
      (*v78)(v69, v65);
      v71(v67, v65);
      swift_release();
      swift_release();
      if (v70) {
        break;
      }
      unint64_t v72 = v85;
      uint64_t v51 = v86;
      uint64_t v93 = v86;
      Swift::Int v73 = v84;
      if (v66 < v63 || v53 >= v63)
      {
        *(void *)uint64_t v53 = *(void *)v86;
        uint64_t v54 = v92;
        goto LABEL_57;
      }
      BOOL v74 = v66 == v63;
      uint64_t v75 = v92;
      if (!v74) {
        *(void *)uint64_t v53 = *(void *)v86;
      }
      uint64_t v54 = v75;
      uint64_t v52 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))v80;
      if (v51 <= v72) {
        goto LABEL_59;
      }
LABEL_58:
      v53 -= 8;
      a2 = v54;
      if (v54 <= v73) {
        goto LABEL_59;
      }
    }
    Swift::Int v73 = v84;
    unint64_t v72 = v85;
    uint64_t v51 = v63;
    uint64_t v54 = v87;
    if (v66 != v92 || v53 >= v92) {
      *(void *)uint64_t v53 = *(void *)v87;
    }
    uint64_t v95 = v54;
LABEL_57:
    uint64_t v52 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))v80;
    if (v51 <= v72) {
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  if (v24 >= -7)
  {
    uint64_t v31 = v84;
    int v30 = v85;
    if (v85 != v84 || &v84[8 * v26] <= v85)
    {
      uint64_t v32 = v22;
      memmove(v85, v84, 8 * v26);
      uint64_t v22 = v32;
    }
    uint64_t v90 = &v30[8 * v26];
    uint64_t v93 = v90;
    uint64_t v33 = (uint64_t)v87;
    if (v24 >= 8 && (unint64_t)a2 < v88)
    {
      uint64_t v34 = (unsigned char *)(v22 + 48);
      uint64_t v81 = (unsigned char *)(v22 + 8);
      uint64_t v82 = (unsigned char *)(v22 + 32);
      uint64_t v83 = (unsigned char *)(v22 + 48);
      while (1)
      {
        uint64_t v92 = a2;
        uint64_t v35 = *(void *)v30;
        uint64_t v36 = *(void *)a2 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
        swift_beginAccess();
        sub_10015D5F4(v36, v33, &qword_1002D8210);
        uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))v34;
        uint64_t v38 = v91;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v34)(v33, 1, v91) == 1)
        {
          swift_retain();
          swift_retain();
          Date.init()();
          sub_10015D658(v33, &qword_1002D8210);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))v82)(v89, v33, v38);
          swift_retain();
          swift_retain();
        }
        uint64_t v39 = v38;
        uint64_t v40 = v35 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
        swift_beginAccess();
        uint64_t v41 = v40;
        uint64_t v42 = v86;
        sub_10015D5F4(v41, (uint64_t)v86, &qword_1002D8210);
        if (v37(v42, 1, v39) == 1)
        {
          uint64_t v43 = v80;
          Date.init()();
          sub_10015D658((uint64_t)v42, &qword_1002D8210);
        }
        else
        {
          uint64_t v43 = v80;
          (*(void (**)(unsigned char *, char *, uint64_t))v82)(v80, v42, v39);
        }
        uint64_t v44 = v89;
        char v45 = static Date.> infix(_:_:)();
        BOOL v46 = v43;
        uint64_t v47 = *(void (**)(char *, uint64_t))v81;
        (*(void (**)(unsigned char *, uint64_t))v81)(v46, v39);
        v47(v44, v39);
        swift_release();
        swift_release();
        if (v45)
        {
          uint64_t v48 = v92 + 8;
          uint64_t v33 = (uint64_t)v87;
          if (v31 >= v92 && v31 < v48)
          {
            uint64_t v34 = v83;
            if (v31 != v92) {
              *(void *)uint64_t v31 = *(void *)v92;
            }
            goto LABEL_29;
          }
          *(void *)uint64_t v31 = *(void *)v92;
        }
        else
        {
          uint64_t v33 = (uint64_t)v87;
          if (v31 != v30) {
            *(void *)uint64_t v31 = *(void *)v30;
          }
          v30 += 8;
          uint64_t v94 = v30;
          uint64_t v48 = v92;
        }
        uint64_t v34 = v83;
LABEL_29:
        v31 += 8;
        uint64_t v95 = v31;
        if (v30 < v90)
        {
          a2 = v48;
          if ((unint64_t)v48 < v88) {
            continue;
          }
        }
        goto LABEL_59;
      }
    }
    goto LABEL_59;
  }
LABEL_60:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100189510()
{
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(qword_1002E31C8 + 152)) {
    goto LABEL_11;
  }
  uint64_t v0 = *(int *)(qword_1002E31C8 + 148);
  if (qword_1002D7B20 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(qword_1002E31D0 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_currentSelectedSubsId);
  if (v1 == v0 || (uint64_t v2 = qword_1002E31C8, swift_beginAccess(), *(void *)(*(void *)(v2 + 80) + 16) < 2uLL))
  {
LABEL_11:
    Swift::Int v3 = _swiftEmptyArrayStorage;
    if (*(unsigned char *)(qword_1002E31C8 + 152)) {
      return v3;
    }
    uint64_t v4 = *(int *)(qword_1002E31C8 + 148);
    if (qword_1002D7B20 != -1) {
      swift_once();
    }
    uint64_t v5 = (unint64_t *)(qword_1002E31D0
                            + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
    swift_beginAccess();
    unint64_t v6 = *v5;
    uint64_t v33 = (uint64_t)_swiftEmptyArrayStorage;
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (v7)
      {
LABEL_16:
        if (v7 < 1)
        {
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v9 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          if (*(void *)(v9 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_subsId) == v4
            && (*(unsigned char *)(v9 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible) & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v10 = v33;
        if (v33 < 0) {
          goto LABEL_62;
        }
LABEL_30:
        if ((v10 & 0x4000000000000000) == 0)
        {
          uint64_t v11 = *(void *)(v10 + 16);
          if (!v11)
          {
LABEL_63:
            swift_release();
            return _swiftEmptyArrayStorage;
          }
          goto LABEL_32;
        }
LABEL_62:
        swift_retain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v11) {
          goto LABEL_63;
        }
LABEL_32:
        if (v11 >= 1)
        {
          swift_retain();
          uint64_t v12 = 0;
          uint64_t v13 = _swiftEmptyArrayStorage;
          do
          {
            if ((v10 & 0xC000000000000001) != 0)
            {
              uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v14 = *(void *)(v10 + 8 * v12 + 32);
              swift_retain();
            }
            uint64_t v16 = *(void *)(v14 + 32);
            uint64_t v15 = *(void *)(v14 + 40);
            swift_bridgeObjectRetain();
            swift_release();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v13 = sub_1001EABC4(0, v13[2] + 1, 1, v13);
            }
            unint64_t v18 = v13[2];
            unint64_t v17 = v13[3];
            if (v18 >= v17 >> 1) {
              uint64_t v13 = sub_1001EABC4((void *)(v17 > 1), v18 + 1, 1, v13);
            }
            ++v12;
            v13[2] = v18 + 1;
            uint64_t v19 = &v13[2 * v18];
            v19[4] = v16;
            v19[5] = v15;
          }
          while (v11 != v12);
          swift_release_n();
          uint64_t v20 = sub_10017FC78((uint64_t)v13);
          swift_bridgeObjectRelease();
          uint64_t v21 = sub_1001B1E88(v20);
          swift_bridgeObjectRelease();
          uint64_t v33 = (uint64_t)v21;
          swift_retain();
          sub_100186160(&v33);
          swift_release();
          uint64_t v22 = *(void *)(v33 + 16);
          if (v22)
          {
            uint64_t v23 = (uint64_t *)(v33 + 40);
            Swift::Int v3 = _swiftEmptyArrayStorage;
            do
            {
              uint64_t v27 = *(v23 - 1);
              uint64_t v28 = *v23;
              BOOL v29 = v27 == 5521746 && v28 == 0xE300000000000000;
              if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                BOOL v30 = v27 == 1129531725 && v28 == 0xE400000000000000;
                if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  swift_bridgeObjectRetain();
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v33 = (uint64_t)v3;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    sub_1001B2350(0, v3[2] + 1, 1);
                    Swift::Int v3 = (void *)v33;
                  }
                  unint64_t v25 = v3[2];
                  unint64_t v24 = v3[3];
                  if (v25 >= v24 >> 1)
                  {
                    sub_1001B2350(v24 > 1, v25 + 1, 1);
                    Swift::Int v3 = (void *)v33;
                  }
                  v3[2] = v25 + 1;
                  uint64_t v26 = &v3[2 * v25];
                  v26[4] = v27;
                  v26[5] = v28;
                }
              }
              v23 += 2;
              --v22;
            }
            while (v22);
          }
          else
          {
            Swift::Int v3 = _swiftEmptyArrayStorage;
          }
          swift_release();
          return v3;
        }
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7) {
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_62;
    }
    goto LABEL_30;
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (v1 <= 0x7FFFFFFF)
  {
    *(_DWORD *)(v2 + 148) = v1;
    *(unsigned char *)(v2 + 152) = 0;
    sub_10019D82C();
    goto LABEL_11;
  }
LABEL_68:
  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100189A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D93E8);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AllMetricsViewModel();
  sub_10018B8D4(&qword_1002D91C0, (void (*)(uint64_t))type metadata accessor for AllMetricsViewModel);
  uint64_t v7 = StateObject.wrappedValue.getter();
  if ((a1 != 0x544C20726568744FLL || a2 != 0xEF73646E61422045)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v35 = *(void *)(v8 + 16);
    if (v35)
    {
      v30[1] = v7;
      uint64_t v34 = v8 + 32;
      swift_bridgeObjectRetain();
      unint64_t v9 = 0;
      uint64_t v32 = a1;
      uint64_t v33 = a2;
      uint64_t v31 = v8;
      while (v9 < *(void *)(v8 + 16))
      {
        uint64_t v11 = (void *)(v34 + 24 * v9);
        uint64_t v12 = v11[2];
        BOOL v13 = *v11 == a1 && v11[1] == a2;
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v14 = *(void *)(v12 + 16);
          if (v14)
          {
            uint64_t v15 = type metadata accessor for AllMetricsRowItem();
            uint64_t v16 = *(void *)(v15 - 8);
            uint64_t v17 = v12 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
            uint64_t v18 = *(void *)(v16 + 72);
            uint64_t v19 = (void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            do
            {
              sub_10018B920(v17, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AllMetricsRowItem);
              (*v19)(v6, 0, 1, v15);
              sub_10015D658((uint64_t)v6, &qword_1002D93E8);
              v17 += v18;
              --v14;
            }
            while (v14);
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v10 = type metadata accessor for AllMetricsRowItem();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v32;
          a2 = v33;
          uint64_t v8 = v31;
        }
        if (++v9 == v35)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_29:
      swift_once();
      goto LABEL_21;
    }
  }
  swift_release();
LABEL_20:
  if (qword_1002D7B20 != -1) {
    goto LABEL_29;
  }
LABEL_21:
  uint64_t v20 = (uint64_t *)(qword_1002E31D0 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject);
  swift_beginAccess();
  uint64_t v21 = *v20;
  if (!*(void *)(v21 + 16))
  {
LABEL_25:
    type metadata accessor for FTMMetricDetailsClass();
    uint64_t v24 = swift_allocObject();
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_100157064(&qword_1002D93F0);
    Published.init(initialValue:)();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v37 = _swiftEmptyArrayStorage;
    swift_retain();
    static Published.subscript.setter();
    unint64_t v25 = (void *)qword_1002E31D0;
    uint64_t v26 = (uint64_t *)(qword_1002E31D0
                    + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    id v27 = v25;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *v26;
    uint64_t *v26 = 0x8000000000000000;
    sub_1001ED458(v24, a1, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v26 = v36;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();

    return v24;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1001EB868(a1, a2);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t v24 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v37 = _swiftEmptyArrayStorage;
  swift_retain();
  static Published.subscript.setter();
  return v24;
}

uint64_t sub_10018A000()
{
  return sub_100183140(*(void *)(v0 + 16), *(long long **)(v0 + 24));
}

uint64_t sub_10018A008(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100157104(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10018A074()
{
  unint64_t result = qword_1002D9388;
  if (!qword_1002D9388)
  {
    sub_100157104(&qword_1002D9390);
    sub_10018A0FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9388);
  }
  return result;
}

unint64_t sub_10018A0FC()
{
  unint64_t result = qword_1002D9398;
  if (!qword_1002D9398)
  {
    sub_100157104(&qword_1002D93A0);
    sub_10018A19C();
    sub_10015D788(&qword_1002D93B0, &qword_1002D93B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9398);
  }
  return result;
}

unint64_t sub_10018A19C()
{
  unint64_t result = qword_1002D93A8;
  if (!qword_1002D93A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D93A8);
  }
  return result;
}

uint64_t sub_10018A1F4()
{
  sub_100181628();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10018A238()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10018047C;
  return sub_100183450(v0 + 16);
}

uint64_t sub_10018A2CC()
{
  swift_bridgeObjectRelease();
  sub_100181628();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

unint64_t *sub_10018A318(unint64_t *a1)
{
  return sub_100183260(a1, *(void *)(v1 + 16));
}

void sub_10018A324(uint64_t *a1@<X8>)
{
  sub_100183348(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t destroy for FTMMonitorDetailedPageView()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FTMMonitorDetailedPageView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FTMMonitorDetailedPageView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FTMMonitorDetailedPageView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FTMMonitorDetailedPageView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FTMMonitorDetailedPageView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMMonitorDetailedPageView()
{
  return &type metadata for FTMMonitorDetailedPageView;
}

uint64_t sub_10018A514()
{
  return sub_10015D788(&qword_1002D93F8, &qword_1002D9400);
}

uint64_t sub_10018A550()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10018A56C(uint64_t a1, unint64_t a2)
{
  unint64_t v64 = a2;
  if (qword_1002D7B20 != -1) {
LABEL_25:
  }
    swift_once();
  [*(id *)(qword_1002E31D0 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock) lock];
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  unint64_t v2 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v3 = (unint64_t)_swiftEmptyArrayStorage;
  if (*(unsigned char *)(qword_1002E31C8 + 152)) {
    goto LABEL_32;
  }
  uint64_t v75 = a1;
  unint64_t v76 = v64;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 126;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  unint64_t v6 = (unint64_t *)(qword_1002E31D0
                          + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_beginAccess();
  unint64_t v7 = *v6;
  uint64_t v75 = (uint64_t)_swiftEmptyArrayStorage;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_7:
      unint64_t v9 = 0;
      uint64_t v70 = v8;
      while (1)
      {
        if ((v7 & 0xC000000000000001) != 0)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_22:
            __break(1u);
LABEL_23:
            unint64_t v3 = v75;
            unint64_t v2 = (unint64_t)_swiftEmptyArrayStorage;
            goto LABEL_28;
          }
        }
        else
        {
          if (v9 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_25;
          }
          uint64_t v10 = *(void *)(v7 + 8 * v9 + 32);
          swift_retain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_22;
          }
        }
        BOOL v12 = *(void *)(v10 + 16) == a1 && *(void *)(v10 + 24) == v64;
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && *(unsigned char *)(v10 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible) == 1)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v8 = v70;
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8) {
          goto LABEL_23;
        }
      }
    }
  }
  unint64_t v3 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_28:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0) {
    goto LABEL_139;
  }
  if (!*(void *)(v3 + 16))
  {
LABEL_31:
    swift_release();
    unint64_t v3 = (unint64_t)_swiftEmptyArrayStorage;
  }
LABEL_32:
  unint64_t v77 = v2;
  if (v3 >> 62) {
    goto LABEL_110;
  }
  uint64_t v13 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v13)
  {
LABEL_34:
    unint64_t v14 = 0;
    uint64_t v66 = v13;
    unint64_t v15 = v3 & 0xC000000000000001;
    while (1)
    {
      if (v15)
      {
        uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v17 = __OFADD__(v14++, 1);
        if (v17) {
          goto LABEL_106;
        }
      }
      else
      {
        if (v14 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_107;
        }
        uint64_t v16 = *(void *)(v3 + 32 + 8 * v14);
        swift_retain();
        BOOL v17 = __OFADD__(v14++, 1);
        if (v17) {
          goto LABEL_106;
        }
      }
      uint64_t v18 = *(void *)(v16 + 48);
      uint64_t v19 = *(void *)(v16 + 56);
      uint64_t v20 = *(void *)(v2 + 16);
      if (!v20) {
        break;
      }
      BOOL v21 = *(void *)(v2 + 32) == v18 && *(void *)(v2 + 40) == v19;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_35;
      }
      if (v20 == 1) {
        break;
      }
      if (*(void *)(v2 + 48) == v18 && *(void *)(v2 + 56) == v19
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_35:
        swift_release();
      }
      else
      {
        if (v20 == 2) {
          break;
        }
        unint64_t v22 = (void *)v2;
        v2 += 72;
        uint64_t v32 = 2;
        while (1)
        {
          if (__OFADD__(v32, 1)) {
            goto LABEL_109;
          }
          if (*(void *)(v2 - 8) == v18 && *(void *)v2 == v19) {
            break;
          }
          uint64_t v69 = v32 + 1;
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            break;
          }
          v2 += 16;
          ++v32;
          if (v69 == v20) {
            goto LABEL_51;
          }
        }
        swift_release();
        unint64_t v2 = (unint64_t)v22;
      }
LABEL_36:
      if (v14 == v66) {
        goto LABEL_111;
      }
    }
    unint64_t v22 = (void *)v2;
LABEL_51:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v22 = sub_1001EABC4(0, v20 + 1, 1, v22);
    }
    unint64_t v24 = v22[2];
    unint64_t v23 = v22[3];
    char v68 = v22;
    if (v24 >= v23 >> 1) {
      char v68 = sub_1001EABC4((void *)(v23 > 1), v24 + 1, 1, v22);
    }
    v68[2] = v24 + 1;
    unint64_t v25 = &v68[2 * v24];
    v25[4] = v18;
    v25[5] = v19;
    uint64_t v75 = (uint64_t)_swiftEmptyArrayStorage;
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      if (v26)
      {
LABEL_59:
        unint64_t v2 = 0;
        do
        {
          if (v15)
          {
            uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            unint64_t v28 = v2 + 1;
            if (__OFADD__(v2, 1)) {
              goto LABEL_104;
            }
          }
          else
          {
            if (v2 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_105;
            }
            uint64_t v27 = *(void *)(v3 + 8 * v2 + 32);
            swift_retain();
            unint64_t v28 = v2 + 1;
            if (__OFADD__(v2, 1))
            {
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
LABEL_110:
              swift_bridgeObjectRetain_n();
              uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v13) {
                goto LABEL_111;
              }
              goto LABEL_34;
            }
          }
          BOOL v29 = *(void *)(v27 + 48) == *(void *)(v16 + 48) && *(void *)(v27 + 56) == *(void *)(v16 + 56);
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
          ++v2;
        }
        while (v28 != v26);
      }
    }
    else
    {
      uint64_t v26 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v26) {
        goto LABEL_59;
      }
    }
    unint64_t v30 = v75;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    if ((v30 & 0x8000000000000000) != 0 || (unint64_t v2 = v30, (v30 & 0x4000000000000000) != 0))
    {
      unint64_t v2 = (unint64_t)sub_1001B1F70(v30);
      swift_release();
    }
    uint64_t v75 = v2;
    sub_1001861CC(&v75);
    swift_release();
    uint64_t v31 = v75;
    if (v75 < 0 || (v75 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v2) {
        goto LABEL_79;
      }
    }
    else if (*(void *)(v75 + 16))
    {
LABEL_79:
      if ((v31 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)(v31 + 16)) {
          goto LABEL_108;
        }
        swift_retain();
      }
      swift_release();
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      goto LABEL_102;
    }
    swift_release();
LABEL_102:
    swift_release();
    unint64_t v2 = (unint64_t)v68;
    goto LABEL_36;
  }
LABEL_111:
  swift_bridgeObjectRelease_n();
  if ((a1 != 0x544C20726568744FLL || v64 != 0xEF73646E61422045)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_136;
  }
  if (*(unsigned char *)(qword_1002E31C8 + 152)) {
    goto LABEL_155;
  }
  int v34 = *(_DWORD *)(qword_1002E31C8 + 148);
  uint64_t v75 = 2118472780;
  unint64_t v76 = 0xE400000000000000;
  LODWORD(v73) = v34;
  v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  unint64_t v3 = v75;
  unint64_t v2 = v76;
  uint64_t v36 = (unint64_t *)(qword_1002E31D0
                           + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_beginAccess();
  unint64_t v37 = *v36;
  uint64_t v73 = (uint64_t)_swiftEmptyArrayStorage;
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    if (!v38)
    {
LABEL_142:
      unint64_t v44 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_143;
    }
  }
  else
  {
    uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v38) {
      goto LABEL_142;
    }
  }
  unint64_t v39 = 0;
  unint64_t v71 = v3;
  unint64_t v67 = v2;
  do
  {
    if ((v37 & 0xC000000000000001) != 0)
    {
      uint64_t v40 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v41 = v39 + 1;
      if (__OFADD__(v39, 1))
      {
LABEL_135:
        __break(1u);
LABEL_136:
        unint64_t v43 = v77;
        goto LABEL_178;
      }
    }
    else
    {
      if (v39 >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_139:
        swift_bridgeObjectRetain();
        uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v45) {
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      uint64_t v40 = *(void **)(v37 + 8 * v39 + 32);
      swift_retain();
      unint64_t v41 = v39 + 1;
      if (__OFADD__(v39, 1)) {
        goto LABEL_135;
      }
    }
    BOOL v42 = v40[2] == v3 && v40[3] == v2;
    if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)())
      && *((unsigned char *)v40 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible) == 1
      && (v40[6] == 1684955458 && v40[7] == 0xE400000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v2 = v67;
      unint64_t v3 = v71;
    }
    else
    {
      swift_release();
    }
    ++v39;
  }
  while (v41 != v38);
  unint64_t v44 = v73;
LABEL_143:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v44 & 0x8000000000000000) != 0 || (BOOL v46 = (void *)v44, (v44 & 0x4000000000000000) != 0))
  {
    BOOL v46 = sub_1001B1F70(v44);
    swift_release();
  }
  uint64_t v73 = (uint64_t)v46;
  sub_1001861CC(&v73);
  swift_release();
  uint64_t v47 = v73;
  if (v73 < 0 || (v73 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v54) {
      goto LABEL_154;
    }
LABEL_148:
    if ((v47 & 0xC000000000000001) != 0)
    {
      uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)(v47 + 16))
      {
        __break(1u);
        swift_release();
        __break(1u);
        uint64_t result = swift_release();
        __break(1u);
        return result;
      }
      uint64_t v48 = *(void *)(v47 + 32);
      swift_retain();
    }
    swift_release();
    uint64_t v73 = 0x20646E6142;
    unint64_t v74 = 0xE500000000000000;
    uint64_t v49 = *(void *)(v48 + 112);
    uint64_t v50 = *(void **)(v48 + 120);
    swift_bridgeObjectRetain();
    v51._countAndFlagsBits = v49;
    v51._object = v50;
    String.append(_:)(v51);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v53 = v73;
    unint64_t v52 = v74;
    goto LABEL_156;
  }
  if (*(void *)(v73 + 16)) {
    goto LABEL_148;
  }
LABEL_154:
  swift_release();
LABEL_155:
  uint64_t v53 = 0;
  unint64_t v52 = 0xE000000000000000;
LABEL_156:
  unint64_t v55 = v77;
  uint64_t v73 = (uint64_t)_swiftEmptyArrayStorage;
  if (v77 >> 62) {
    goto LABEL_175;
  }
  uint64_t v56 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v56)
  {
LABEL_158:
    unint64_t v57 = 0;
    uint64_t v72 = v53;
    while (1)
    {
      if ((v55 & 0xC000000000000001) != 0)
      {
        uint64_t v58 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v59 = v57 + 1;
        if (__OFADD__(v57, 1))
        {
LABEL_172:
          __break(1u);
LABEL_173:
          unint64_t v43 = v73;
          goto LABEL_177;
        }
      }
      else
      {
        if (v57 >= *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_175:
          swift_bridgeObjectRetain();
          uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
          if (!v56) {
            break;
          }
          goto LABEL_158;
        }
        uint64_t v58 = *(void *)(v55 + 8 * v57 + 32);
        swift_retain();
        unint64_t v59 = v57 + 1;
        if (__OFADD__(v57, 1)) {
          goto LABEL_172;
        }
      }
      BOOL v60 = *(void *)(v58 + 48) == v53 && *(void *)(v58 + 56) == v52;
      if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_release();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v53 = v72;
      }
      ++v57;
      if (v59 == v56) {
        goto LABEL_173;
      }
    }
  }
  unint64_t v43 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_177:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v77 = v43;
  swift_bridgeObjectRelease();
LABEL_178:
  [*(id *)(qword_1002E31D0 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock) unlock];
  if ((v43 & 0x8000000000000000) != 0 || (v43 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v61 = (uint64_t)sub_1001B1F70(v43);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v61 = v43 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
  }
  uint64_t v73 = v61;
  sub_100186248(&v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v62 = v73;
  swift_bridgeObjectRelease();
  return v62;
}

uint64_t sub_10018B30C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10018B354@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100184BB0(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10018B364()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10018B39C()
{
  sub_10018519C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10018B3A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100157104(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10018B410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10018B474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t destroy for FTMGraphButton()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for FTMGraphButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FTMGraphButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FTMGraphButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FTMGraphButton(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FTMGraphButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMGraphButton()
{
  return &type metadata for FTMGraphButton;
}

unint64_t sub_10018B6E8()
{
  unint64_t result = qword_1002D9440;
  if (!qword_1002D9440)
  {
    sub_100157104(&qword_1002D9448);
    sub_10015D788(&qword_1002D9410, &qword_1002D9408);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9440);
  }
  return result;
}

uint64_t sub_10018B780()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10018B7A0()
{
  return sub_10018550C();
}

uint64_t sub_10018B7B4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10018B7F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001855E4(*(void *)(v1 + 16), a1);
}

unint64_t sub_10018B804()
{
  unint64_t result = qword_1002D9470;
  if (!qword_1002D9470)
  {
    sub_100157104(&qword_1002D9478);
    sub_10018B8D4(&qword_1002D9480, (void (*)(uint64_t))type metadata accessor for FTMCellMonitorBookmarkedSheetView);
    sub_10015D788(&qword_1002D9488, &qword_1002D9490);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9470);
  }
  return result;
}

uint64_t sub_10018B8D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10018B920(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10018B988(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FTMCellMonitorBookmarkedSheetView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10018B9E4()
{
  return swift_getOpaqueTypeConformance2();
}

Swift::Int sub_10018BAC0()
{
  return Hasher._finalize()();
}

uint64_t sub_10018BB68()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TimeZone();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [objc_allocWithZone((Class)NSDateFormatter) init];
  static TimeZone.autoupdatingCurrent.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  [v8 setTimeZone:isa];

  id v10 = [self currentLocale];
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  Class v11 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v8 setLocale:v11];

  sub_10018D3D0();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setDateFormat:v12];

  Class v13 = Date._bridgeToObjectiveC()().super.isa;
  id v14 = [v8 stringFromDate:v13];

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v15;
}

void sub_10018BE54()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (!v1)
  {
    id v2 = [self processInfo];
    id v1 = [v2 processName];
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  qword_1002D9498 = v3;
  unk_1002D94A0 = v5;
}

uint64_t sub_10018BF1C(uint64_t a1)
{
  return sub_10018BF64(a1, 0x69752D707061, 0xE600000000000000, &qword_1002E3130);
}

uint64_t sub_10018BF38(uint64_t a1)
{
  return sub_10018BF64(a1, 0x722D63697274656DLL, 0xEE00646574616C65, &qword_1002E3138);
}

uint64_t sub_10018BF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_100167598(0, &qword_1002D94C0);
  if (qword_1002D7A78 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  *a4 = result;
  return result;
}

uint64_t sub_10018C018(uint64_t a1)
{
  return sub_10018BF64(a1, 0xD000000000000010, 0x800000010023B9A0, &qword_1002E3140);
}

uint64_t sub_10018C03C(uint64_t a1)
{
  return sub_10018BF64(a1, 0x6C6172656E6567, 0xE700000000000000, &qword_1002E3148);
}

uint64_t sub_10018C05C(uint64_t a1)
{
  return sub_10018BF64(a1, 0x72616F6268736164, 0xE900000000000064, &qword_1002E3150);
}

uint64_t sub_10018C080(uint64_t a1)
{
  return sub_10018BF64(a1, 0x697274656D6C6C61, 0xEA00000000007363, &qword_1002E3158);
}

uint64_t sub_10018C0A4(uint64_t a1)
{
  return sub_10018BF64(a1, 0x732D63697274656DLL, 0xEE00656369767265, &qword_1002E3160);
}

uint64_t sub_10018C0D0(uint64_t a1)
{
  return sub_10018BF64(a1, 0x6573616261746164, 0xE800000000000000, &qword_1002E3168);
}

uint64_t sub_10018C0F0(uint64_t a1)
{
  return sub_10018BF64(a1, 0x654463697274656DLL, 0xEC0000006C696174, &qword_1002E3170);
}

uint64_t sub_10018C118(uint64_t a1)
{
  return sub_10018BF64(a1, 0xD000000000000015, 0x800000010023B9C0, &qword_1002E3178);
}

unint64_t AnalyticsInteractionTypes.rawValue.getter(char a1)
{
  if (!a1) {
    return 0xD000000000000021;
  }
  if (a1 == 1) {
    return 0xD000000000000027;
  }
  return 0xD00000000000001FLL;
}

uint64_t sub_10018C19C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10017C4AC(*a1, *a2);
}

Swift::Int sub_10018C1A8()
{
  return sub_10018BAC0();
}

uint64_t sub_10018C1B0()
{
  return sub_10017C66C();
}

Swift::Int sub_10018C1B8()
{
  return sub_10017C780();
}

unint64_t sub_10018C1C0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s13FTMInternal_425AnalyticsInteractionTypesO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10018C1F0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AnalyticsInteractionTypes.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Void __swiftcall AnalyticsManager.sendAnalytics(interactionType:payload:)(FTMInternal_4::AnalyticsInteractionTypes interactionType, Swift::OpaquePointer payload)
{
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100167598(0, (unint64_t *)&qword_1002DA0F0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  AnalyticsSendEvent();
}

uint64_t sub_10018C314()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TimeZone();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [objc_allocWithZone((Class)NSDateFormatter) init];
  static TimeZone.autoupdatingCurrent.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  [v8 setTimeZone:isa];

  id v10 = [self currentLocale];
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  Class v11 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v8 setLocale:v11];

  sub_10018D3D0();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setDateFormat:v12];

  Class v13 = Date._bridgeToObjectiveC()().super.isa;
  id v14 = [v8 stringFromDate:v13];

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v15;
}

Swift::String __swiftcall FTMDateFactory.configureDateFormat(for:)(FTMInternal_4::FormatType a1)
{
  int v2 = sub_10018D3D0();
  if (v2)
  {
    uint64_t v3 = 0xD000000000000015;
    if (v2 == 1)
    {
      unint64_t v4 = 0x800000010023B940;
      switch(a1)
      {
        case FTMInternal_4_FormatType_withTimeOnly:
          goto LABEL_7;
        case FTMInternal_4_FormatType_withMinutesAndSecondsOnly:
          goto LABEL_9;
        case FTMInternal_4_FormatType_withoutTimezone:
          goto LABEL_8;
        default:
          break;
      }
    }
    else
    {
      unint64_t v4 = 0x800000010023B940;
      switch(a1)
      {
        case FTMInternal_4_FormatType_withTimeOnly:
LABEL_7:
          uint64_t v3 = 0x6D3A4848202C4545;
          unint64_t v4 = 0xEF7A7A2073733A6DLL;
          break;
        case FTMInternal_4_FormatType_withMinutesAndSecondsOnly:
LABEL_9:
          uint64_t v3 = 0x73733A6D6D3A4848;
          unint64_t v4 = -1513209474788460000;
          break;
        case FTMInternal_4_FormatType_withoutTimezone:
          goto LABEL_8;
        default:
          break;
      }
    }
  }
  else
  {
    uint64_t v3 = 0xD000000000000016;
    unint64_t v4 = 0x800000010023B980;
    switch(a1)
    {
      case FTMInternal_4_FormatType_withTimeOnly:
        uint64_t v3 = 0xD000000000000010;
        unint64_t v4 = 0x800000010023B960;
        break;
      case FTMInternal_4_FormatType_withMinutesAndSecondsOnly:
        unint64_t v4 = 0xED00007A7A206120;
        uint64_t v3 = 0x73733A6D6D3A4848;
        break;
      case FTMInternal_4_FormatType_withoutTimezone:
LABEL_8:
        uint64_t v3 = 0x73733A6D6D3A4848;
        unint64_t v4 = 0xEA00000000006120;
        break;
      default:
        break;
    }
  }
  result._object = (void *)v4;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t sub_10018C780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(qword_1002E31C8 + 24) == 1)
  {
    if (qword_1002D7A88 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100269950;
    *(void *)(v8 + 56) = &type metadata for String;
    unint64_t v9 = sub_100181588();
    *(void *)(v8 + 32) = a1;
    *(void *)(v8 + 40) = a2;
    *(void *)(v8 + 96) = &type metadata for String;
    *(void *)(v8 + 104) = v9;
    *(void *)(v8 + 64) = v9;
    *(void *)(v8 + 72) = a3;
    *(void *)(v8 + 80) = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v8 + 136) = &type metadata for String;
    *(void *)(v8 + 144) = v9;
    *(void *)(v8 + 112) = v10;
    *(void *)(v8 + 120) = v11;
  }
  else
  {
    if (qword_1002D7A88 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_100267EF0;
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v15 = v14;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_100181588();
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v15;
  }
  os_log(_:dso:log:type:_:)();
  return swift_bridgeObjectRelease();
}

BOOL static FormatType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FormatType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int _s13FTMInternal_418UserTimePreferenceO9hashValueSivg_0(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

NSString sub_10018CA58()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.NewABMMetric = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.NewABMMetric.unsafeMutableAddressor()
{
  if (qword_1002D7AD0 != -1) {
    swift_once();
  }
  return &static NSNotificationName.NewABMMetric;
}

id static NSNotificationName.NewABMMetric.getter()
{
  return sub_10018CF00(&qword_1002D7AD0, (void **)&static NSNotificationName.NewABMMetric);
}

NSString sub_10018CB04()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.NewCTMetric = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.NewCTMetric.unsafeMutableAddressor()
{
  if (qword_1002D7AD8 != -1) {
    swift_once();
  }
  return &static NSNotificationName.NewCTMetric;
}

id static NSNotificationName.NewCTMetric.getter()
{
  return sub_10018CF00(&qword_1002D7AD8, (void **)&static NSNotificationName.NewCTMetric);
}

NSString sub_10018CBB0()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.carrierUpdate = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.carrierUpdate.unsafeMutableAddressor()
{
  if (qword_1002D7AE0 != -1) {
    swift_once();
  }
  return &static NSNotificationName.carrierUpdate;
}

id static NSNotificationName.carrierUpdate.getter()
{
  return sub_10018CF00(&qword_1002D7AE0, (void **)&static NSNotificationName.carrierUpdate);
}

NSString sub_10018CC60()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.subsIdSelectionChange = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.subsIdSelectionChange.unsafeMutableAddressor()
{
  if (qword_1002D7AE8 != -1) {
    swift_once();
  }
  return &static NSNotificationName.subsIdSelectionChange;
}

id static NSNotificationName.subsIdSelectionChange.getter()
{
  return sub_10018CF00(&qword_1002D7AE8, (void **)&static NSNotificationName.subsIdSelectionChange);
}

NSString sub_10018CD08()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.numberOfSubsChanged = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.numberOfSubsChanged.unsafeMutableAddressor()
{
  if (qword_1002D7AF0 != -1) {
    swift_once();
  }
  return &static NSNotificationName.numberOfSubsChanged;
}

id static NSNotificationName.numberOfSubsChanged.getter()
{
  return sub_10018CF00(&qword_1002D7AF0, (void **)&static NSNotificationName.numberOfSubsChanged);
}

NSString sub_10018CDB0()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.dashboardMetricUpdate = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.dashboardMetricUpdate.unsafeMutableAddressor()
{
  if (qword_1002D7AF8 != -1) {
    swift_once();
  }
  return &static NSNotificationName.dashboardMetricUpdate;
}

id static NSNotificationName.dashboardMetricUpdate.getter()
{
  return sub_10018CF00(&qword_1002D7AF8, (void **)&static NSNotificationName.dashboardMetricUpdate);
}

NSString sub_10018CE58()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.isAirPlaneModeEnabled = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.isAirPlaneModeEnabled.unsafeMutableAddressor()
{
  if (qword_1002D7B00 != -1) {
    swift_once();
  }
  return &static NSNotificationName.isAirPlaneModeEnabled;
}

id static NSNotificationName.isAirPlaneModeEnabled.getter()
{
  return sub_10018CF00(&qword_1002D7B00, (void **)&static NSNotificationName.isAirPlaneModeEnabled);
}

id sub_10018CF00(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

uint64_t sub_10018CF4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v1 = type metadata accessor for Calendar();
  uint64_t v30 = *(void *)(v1 - 8);
  uint64_t v2 = v30;
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100157064(&qword_1002D8210);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v31 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = sub_100157064(&qword_1002D94C8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100157064((uint64_t *)&unk_1002D94D0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DateComponents();
  uint64_t v27 = *(void *)(v16 - 8);
  uint64_t v28 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v15, 1, 1, v1);
  uint64_t v23 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v12, 1, 1, v23);
  uint64_t v24 = (uint64_t)v31;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  DateComponents.day.setter();
  static Calendar.current.getter();
  Calendar.date(byAdding:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v1);
  sub_10016D8C8((uint64_t)v9, v24);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v24, 1, v19);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_10016D930((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v28);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v29, v24, v19);
  }
  return result;
}

uint64_t sub_10018D3D0()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v4 = self;
  NSString v5 = String._bridgeToObjectiveC()();
  static Locale.current.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v7 = [v4 dateFormatFromTemplate:v5 options:0 locale:isa];

  if (!v7) {
    return 2;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  uint64_t v15 = v8;
  uint64_t v16 = v10;
  uint64_t v13 = 97;
  unint64_t v14 = 0xE100000000000000;
  sub_1001571E0();
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v15 = v8;
  uint64_t v16 = v10;
  uint64_t v13 = 18504;
  unint64_t v14 = 0xE200000000000000;
  char v12 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if (v12) {
    return 1;
  }
  else {
    return 2;
  }
}

unint64_t _s13FTMInternal_425AnalyticsInteractionTypesO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100288D08, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_10018D5F8()
{
  unint64_t result = qword_1002D94A8;
  if (!qword_1002D94A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D94A8);
  }
  return result;
}

unint64_t sub_10018D650()
{
  unint64_t result = qword_1002D94B0;
  if (!qword_1002D94B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D94B0);
  }
  return result;
}

unint64_t sub_10018D6A8()
{
  unint64_t result = qword_1002D94B8;
  if (!qword_1002D94B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D94B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsInteractionTypes()
{
  return &type metadata for AnalyticsInteractionTypes;
}

ValueMetadata *type metadata accessor for AnalyticsManager()
{
  return &type metadata for AnalyticsManager;
}

unsigned char *storeEnumTagSinglePayload for FormatType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10018D7F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatType()
{
  return &type metadata for FormatType;
}

unsigned char *_s13FTMInternal_425AnalyticsInteractionTypesOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10018D8F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserTimePreference()
{
  return &type metadata for UserTimePreference;
}

ValueMetadata *type metadata accessor for FTMDateFactory()
{
  return &type metadata for FTMDateFactory;
}

uint64_t sub_10018D93C()
{
  sub_1001571E0();
  if ((StringProtocol.contains<A>(_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v0 = StringProtocol.components<A>(separatedBy:)();
  if (!*(void *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10018DA3C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_100157064(&qword_1002D8A90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for STransferMetrics();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10015D658(a1, &qword_1002D8A90);
    unint64_t v13 = sub_1001EB824(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      *int v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001EDF14();
        uint64_t v17 = v21;
      }
      sub_100174DDC(*(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, (uint64_t)v8);
      sub_1001FB254(v15, v17);
      *int v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return sub_10015D658((uint64_t)v8, &qword_1002D8A90);
  }
  else
  {
    sub_100174DDC(a1, (uint64_t)v12);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1001ED30C((uint64_t)v12, a2, v18);
    *int v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10018DC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_100197FC0((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1001ED5C8(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *int v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10015D658(a1, (uint64_t *)&unk_1002D9680);
    sub_100195A04(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_10015D658((uint64_t)v9, (uint64_t *)&unk_1002D9680);
  }
}

uint64_t sub_10018DD4C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100197FC0((_OWORD *)a1, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *Swift::String v2 = 0x8000000000000000;
    sub_1001ED71C(v7, a2, isUniquelyReferenced_nonNull_native);
    *Swift::String v2 = v6;
    swift_bridgeObjectRelease();
    return sub_10019816C(a2);
  }
  else
  {
    sub_10015D658(a1, (uint64_t *)&unk_1002D9680);
    sub_100195B08(a2, v7);
    sub_10019816C(a2);
    return sub_10015D658((uint64_t)v7, (uint64_t *)&unk_1002D9680);
  }
}

char *sub_10018DE0C(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  __chkstk_darwin(v4);
  unint64_t v39 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  __chkstk_darwin(v6);
  uint64_t v38 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for DispatchTime();
  uint64_t v37 = *(void *)(v44 - 8);
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v33 = (char *)&v32 - v11;
  uint64_t v12 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client;
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  unint64_t v13 = v1;
  char v14 = (void *)static OS_dispatch_queue.main.getter();
  id v15 = [objc_allocWithZone((Class)CoreTelephonyClient) initWithQueue:v14];

  *(void *)&v1[v12] = v15;
  uint64_t v16 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager;
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  *(void *)&v13[v16] = qword_1002E31C8;
  *(void *)&v13[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray] = _swiftEmptyArrayStorage;
  v13[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_isSimAdded] = 0;
  *(void *)&v13[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_persistanceStore] = a1;
  swift_retain();
  id v36 = a1;

  v51.receiver = v13;
  v51.super_class = ObjectType;
  uint64_t v17 = (char *)[v51 init];
  uint64_t v34 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client;
  Swift::String v35 = v17;
  char v18 = *(void **)&v17[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client];
  uint64_t v19 = v17;
  [v18 setDelegate:v19];
  if (qword_1002D7AC8 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v20 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  uint64_t v21 = v33;
  + infix(_:_:)();
  uint64_t v37 = *(void *)(v37 + 8);
  ((void (*)(char *, uint64_t))v37)(v10, v44);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v19;
  uint64_t v49 = sub_1001957E4;
  uint64_t v50 = v22;
  CGAffineTransform aBlock = _NSConcreteStackBlock;
  uint64_t v46 = 1107296256;
  uint64_t v47 = sub_1001E0068;
  uint64_t v48 = &unk_10028C718;
  uint64_t v23 = _Block_copy(&aBlock);
  uint64_t v24 = v19;
  swift_release();
  unint64_t v25 = v38;
  static DispatchQoS.unspecified.getter();
  CGAffineTransform aBlock = (void **)_swiftEmptyArrayStorage;
  sub_100195820();
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  uint64_t v26 = v39;
  uint64_t v27 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v41);
  ((void (*)(char *, uint64_t))v37)(v21, v44);
  uint64_t v28 = *(void **)&v35[v34];
  uint64_t v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v49 = sub_1001958B0;
  uint64_t v50 = v29;
  CGAffineTransform aBlock = _NSConcreteStackBlock;
  uint64_t v46 = 1107296256;
  uint64_t v47 = sub_1001901D0;
  uint64_t v48 = &unk_10028C768;
  uint64_t v30 = _Block_copy(&aBlock);
  swift_release();
  [v28 getSubscriptionInfo:v30];
  _Block_release(v30);

  return v24;
}

void sub_10018E3F4()
{
  id v1 = [self defaultCenter];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  v6[4] = sub_100198164;
  v6[5] = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  void v6[2] = sub_1001DD9E8;
  v6[3] = &unk_10028CCE0;
  int v3 = _Block_copy(v6);
  id v4 = v0;
  swift_release();
  id v5 = [v1 addObserverForName:UIApplicationDidBecomeActiveNotification object:0 queue:0 usingBlock:v3];
  _Block_release(v3);
  swift_unknownObjectRelease();
}

id sub_10018E524()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v2 = [self defaultCenter];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 removeObserver:v3];

  v5.receiver = v0;
  v5.super_class = ObjectType;
  return [super dealloc];
}

void sub_10018E710(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_getErrorValue();
    uint64_t v2 = Error.localizedDescription.getter();
    unint64_t v4 = v3;
    if (qword_1002D7AC8 != -1) {
      goto LABEL_33;
    }
    goto LABEL_3;
  }
  if (!a1) {
    return;
  }
  id v6 = [a1 subscriptions];
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  sub_100167598(0, &qword_1002D9610);
  unint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_4;
  }
  uint64_t v9 = (unsigned char *)Strong;
  uint64_t v10 = (void *)(Strong + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray);
  swift_beginAccess();
  BOOL v63 = v10;
  *uint64_t v10 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (v71 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v66 = v9;
    if (v11) {
      goto LABEL_11;
    }
LABEL_35:
    uint64_t v2 = 0;
LABEL_36:
    swift_bridgeObjectRelease();
    uint64_t v65 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager;
    if (*(void *)(*(void *)&v9[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager] + 160) != v2) {
      v9[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_isSimAdded] = 1;
    }
    uint64_t v30 = *v63;
    uint64_t v31 = *(void *)(*v63 + 16);
    if (v31)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = 48;
      do
      {
        if (v2 == 1)
        {
          uint64_t v33 = *(void *)(v30 + v32);
          if (qword_1002D7B18 != -1) {
            swift_once();
          }
          uint64_t v34 = qword_1002E31C8;
          if ((*(unsigned char *)(qword_1002E31C8 + 152) & 1) == 0 && (v33 != 1) != (uint64_t)*(int *)(qword_1002E31C8 + 148))
          {
            *(_DWORD *)(qword_1002E31C8 + 148) = v33 != 1;
            *(unsigned char *)(v34 + 152) = 0;
            sub_10019D82C();
          }
        }
        v32 += 88;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
      uint64_t v9 = v66;
    }
    *(void *)(*(void *)&v9[v65] + 160) = v2;
    Swift::String v35 = self;
    swift_retain();
    id v36 = [v35 defaultCenter];
    if (qword_1002D7AF0 != -1) {
      swift_once();
    }
    [v36 postNotificationName:static NSNotificationName.numberOfSubsChanged object:0 userInfo:0];
    swift_release();

    uint64_t v37 = *v63;
    uint64_t v38 = *(void *)(*v63 + 16);
    if (v38)
    {
      uint64_t v62 = v35;
      uint64_t v64 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      uint64_t v39 = v37 + 112;
      uint64_t v40 = &NSLog_ptr;
      uint64_t v41 = &selRef_hMNC;
      do
      {
        uint64_t v68 = v38;
        uint64_t v42 = *(void *)(v39 - 64);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10018F188(v42);
        if (*(unsigned char *)(*(void *)&v9[v65] + 26) == 1) {
          sub_10018F7C0(v42);
        }
        id v43 = [objc_allocWithZone((Class)v40[452]) v41[336] v42];
        uint64_t v44 = *(void **)&v9[v64];
        uint64_t v45 = v41;
        uint64_t v46 = v40;
        uint64_t v47 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v48 = swift_allocObject();
        *(void *)(v48 + 16) = v42;
        *(void *)(v48 + 24) = v47;
        unint64_t v76 = sub_1001958F0;
        uint64_t v77 = v48;
        uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
        unint64_t v73 = 1107296256;
        unint64_t v74 = sub_1001901D0;
        uint64_t v75 = &unk_10028C7B8;
        uint64_t v49 = _Block_copy(&aBlock);
        swift_release();
        [v44 copyCellInfo:v43 completion:v49];
        _Block_release(v49);

        uint64_t v50 = swift_unknownObjectWeakLoadStrong();
        if (v50)
        {
          objc_super v51 = (char *)v50;
          id v52 = [objc_allocWithZone((Class)v46[452]) v45[336] v42];
          id v53 = [self descriptorWithSubscriptionContext:v52];
          uint64_t v54 = *(void **)&v51[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client];
          uint64_t v55 = swift_allocObject();
          *(void *)(v55 + 16) = sub_10018FC44;
          *(void *)(v55 + 24) = 0;
          unint64_t v76 = sub_1001958F8;
          uint64_t v77 = v55;
          uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
          unint64_t v73 = 1107296256;
          unint64_t v74 = sub_1001901D0;
          uint64_t v75 = &unk_10028C808;
          uint64_t v56 = _Block_copy(&aBlock);
          swift_release();
          [v54 getSignalStrengthMeasurements:v53 completion:v56];
          uint64_t v9 = v66;
          _Block_release(v56);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v41 = v45;
        v39 += 88;
        uint64_t v38 = v68 - 1;
        uint64_t v40 = &NSLog_ptr;
      }
      while (v68 != 1);
      swift_bridgeObjectRelease();
      Swift::String v35 = v62;
    }
    id v57 = [v35 defaultCenter];
    if (qword_1002D7AE0 != -1) {
      swift_once();
    }
    uint64_t v58 = static NSNotificationName.carrierUpdate;
    sub_100157064(&qword_1002D9618);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100267EF0;
    uint64_t aBlock = 0x7372656972726163;
    unint64_t v73 = 0xE800000000000000;
    AnyHashable.init<A>(_:)();
    uint64_t v60 = *v63;
    *(void *)(inited + 96) = sub_100157064((uint64_t *)&unk_1002D9620);
    *(void *)(inited + 72) = v60;
    swift_bridgeObjectRetain();
    sub_1001E02AC(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v57 postNotificationName:v58 object:0 userInfo:isa];

    return;
  }
  uint64_t v11 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v66 = v9;
  if (!v11) {
    goto LABEL_35;
  }
LABEL_11:
  if (v11 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v2 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = v71 & 0xC000000000000001;
  char v14 = &selRef_hMNC;
  int64x2_t v69 = vdupq_n_s64((unint64_t)_swiftEmptyArrayStorage);
  uint64_t v67 = v11;
  while (1)
  {
    id v15 = v13 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v71 + 8 * v12 + 32);
    uint64_t v16 = v15;
    if ([v15 v14[333]]) {
      break;
    }

LABEL_14:
    if (v11 == ++v12) {
      goto LABEL_36;
    }
  }
  if ([v16 slotID] == (id)1) {
    unint64_t v17 = 0x800000010023BC50;
  }
  else {
    unint64_t v17 = 0x800000010023BC30;
  }
  id v70 = [v16 slotID];
  unsigned __int8 v18 = [v16 v14[333]];
  id v19 = [v16 phoneNumber];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v23 = 0xE000000000000000;
  }
  swift_beginAccess();
  uint64_t v24 = (void *)*v63;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *BOOL v63 = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = sub_1001EACD4(0, v24[2] + 1, 1, v24);
    *BOOL v63 = v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  unint64_t v4 = v27 + 1;
  if (v27 >= v26 >> 1)
  {
    uint64_t v24 = sub_1001EACD4((void *)(v26 > 1), v27 + 1, 1, v24);
    *BOOL v63 = v24;
  }
  v24[2] = v4;
  uint64_t v28 = (int64x2_t *)&v24[11 * v27];
  v28[2].i64[0] = 0;
  v28[2].i64[1] = 0xE000000000000000;
  v28[3].i64[0] = (uint64_t)v70;
  v28[3].i8[8] = v18;
  v28[4].i64[0] = 0xD000000000000010;
  v28[4].i64[1] = v17;
  v28[5].i64[0] = v21;
  v28[5].i64[1] = v23;
  v28[6] = v69;
  v28[7].i64[0] = (uint64_t)_swiftEmptyArrayStorage;
  swift_endAccess();

  if (!__OFADD__(v2++, 1))
  {
    uint64_t v9 = v66;
    uint64_t v11 = v67;
    unint64_t v13 = v71 & 0xC000000000000001;
    char v14 = &selRef_hMNC;
    goto LABEL_14;
  }
  __break(1u);
LABEL_33:
  swift_once();
LABEL_3:
  static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100267EF0;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_100181588();
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 40) = v4;
  os_log(_:dso:log:type:_:)();
LABEL_4:
  swift_bridgeObjectRelease();
}

void sub_10018F188(uint64_t a1)
{
  unint64_t v3 = (char *)[objc_allocWithZone((Class)CTBundle) initWithBundleType:1];
  unint64_t v4 = (unint64_t *)[objc_allocWithZone((Class)CTXPCServiceSubscriptionContext) initWithSlot:a1];
  if (qword_1002D7AC8 != -1) {
    goto LABEL_43;
  }
  while (1)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    uint64_t v5 = *(void (**)(NSString *, ...))((char *)v1 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client);
    NSString v6 = String._bridgeToObjectiveC()();
    v35[0] = 0;
    id v7 = [v5 copyCarrierBundleValue:v4 key:v6 bundleType:v3 error:v35];

    if (!v7)
    {
      id v23 = v35[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100157064(&qword_1002D9670);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_100269B50;
      *(void *)(v24 + 56) = &type metadata for String;
      *(void *)(v24 + 32) = 0xD000000000000029;
      *(void *)(v24 + 40) = 0x800000010023C160;
      swift_getErrorValue();
      uint64_t v25 = Error.localizedDescription.getter();
      *(void *)(v24 + 88) = &type metadata for String;
      *(void *)(v24 + 64) = v25;
      *(void *)(v24 + 72) = v26;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();

      swift_errorRelease();
      return;
    }
    uint64_t v33 = v3;
    id v8 = v35[0];
    uint64_t v32 = v4;
    if ([v4 slotID] == (id)1) {
      unint64_t v4 = (unint64_t *)0x800000010023BC50;
    }
    else {
      unint64_t v4 = (unint64_t *)0x800000010023BC30;
    }
    uint64_t v34 = v1;
    uint64_t v9 = (char *)v1 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray;
    swift_beginAccess();
    uint64_t v10 = *(void *)(*(void *)v9 + 16);
    if (v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      unint64_t v3 = (char *)0xD000000000000010;
      id v1 = &NSLog_ptr;
      while (v12 < *(void *)(*(void *)v9 + 16))
      {
        uint64_t v13 = *(void *)v9 + v11;
        BOOL v14 = *(void *)(v13 + 64) == 0xD000000000000010 && *(void *)(v13 + 72) == (void)v4;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          self;
          if (swift_dynamicCastObjCClass())
          {
            id v15 = v7;
            static String._conditionallyBridgeFromObjectiveC(_:result:)();
          }
        }
        ++v12;
        v11 += 88;
        if (v10 == v12) {
          goto LABEL_17;
        }
      }
      __break(1u);
      goto LABEL_42;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    unint64_t v4 = *(unint64_t **)((char *)v34 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager);
    unint64_t v16 = v4[9];
    uint64_t v17 = v4[8] & 0xFFFFFFFFFFFFLL;
    if ((v16 & 0x2000000000000000) != 0) {
      uint64_t v17 = HIBYTE(v16) & 0xF;
    }
    if (!v17 || *((unsigned char *)v34 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_isSimAdded) != 1) {
      break;
    }
    uint64_t v18 = *(void *)(*(void *)v9 + 16);
    if (!v18) {
      goto LABEL_38;
    }
    unint64_t v3 = 0;
    unint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = *(void *)v9;
      if (v19 >= *(void *)(*(void *)v9 + 16)) {
        break;
      }
      id v1 = (void (**)(NSString *, ...))&v3[v20];
      BOOL v21 = *(void *)&v3[v20 + 32] == v4[8] && *(void *)&v3[v20 + 40] == v4[9];
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        *((_DWORD *)v4 + 37) = v1[6] != (void (*)(NSString *, ...))1;
        *((unsigned char *)v4 + 152) = 0;
        id v1 = (void (**)(NSString *, ...))v4;
        sub_10019D82C();
      }
      ++v19;
      v3 += 88;
      if (v18 == v19) {
        goto LABEL_38;
      }
    }
LABEL_42:
    __break(1u);
    __break(1u);
LABEL_43:
    swift_once();
  }
  BOOL v22 = !*(void *)(*(void *)v9 + 16) || *(void *)(*(void *)v9 + 48) != 1;
  *((_DWORD *)v4 + 37) = v22;
  *((unsigned char *)v4 + 152) = 0;
  sub_10019D82C();
LABEL_38:
  id v27 = [self defaultCenter];
  if (qword_1002D7AE0 != -1) {
    swift_once();
  }
  uint64_t v28 = static NSNotificationName.carrierUpdate;
  sub_100157064(&qword_1002D9618);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100267EF0;
  AnyHashable.init<A>(_:)();
  uint64_t v30 = *(void *)v9;
  *(void *)(inited + 96) = sub_100157064((uint64_t *)&unk_1002D9620);
  *(void *)(inited + 72) = v30;
  swift_bridgeObjectRetain();
  sub_1001E02AC(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v27 postNotificationName:v28 object:0 userInfo:isa];
}

uint64_t sub_10018F7C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [objc_allocWithZone((Class)CTXPCServiceSubscriptionContext) initWithSlot:a1];
  unint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client);
  id v32 = v11;
  aBlock[0] = 0;
  id v13 = [v12 getBandInfo:v13];
  id v14 = aBlock[0];
  if (v13)
  {
    id v15 = v13;
    uint64_t v30 = v8;
    BOOL v16 = a1 != 1;
    sub_100167598(0, (unint64_t *)&qword_1002D95F0);
    id v17 = v14;
    uint64_t v18 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = v15;
    *(_DWORD *)(v20 + 32) = v16;
    aBlock[4] = sub_1001959F8;
    aBlock[5] = (id)v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1001E0068;
    aBlock[3] = &unk_10028C858;
    BOOL v21 = _Block_copy(aBlock);
    id v22 = v15;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100195820();
    sub_100157064((uint64_t *)&unk_1002D9600);
    sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v10, v30);
  }
  else
  {
    id v24 = aBlock[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1002D7AC8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_100267EF0;
    swift_getErrorValue();
    uint64_t v26 = Error.localizedDescription.getter();
    uint64_t v28 = v27;
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 64) = sub_100181588();
    *(void *)(v25 + 32) = v26;
    *(void *)(v25 + 40) = v28;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
}

uint64_t sub_10018FC44(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_100157064(&qword_1002D9670);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_100267EF0;
    uint64_t aBlock = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t aBlock = 0x636F20726F727265;
    unint64_t v26 = 0xEF20646572727563;
    swift_getErrorValue();
    uint64_t v23 = Error.localizedDescription.getter();
    uint64_t v24 = v12;
    sub_100157064((uint64_t *)&unk_1002D9650);
    v13._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v14 = aBlock;
    unint64_t v15 = v26;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 32) = v14;
    *(void *)(v11 + 40) = v15;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  BOOL v16 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  uint64_t v29 = sub_100196E58;
  uint64_t v30 = v17;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v26 = 1107296256;
  uint64_t v27 = sub_1001E0068;
  uint64_t v28 = &unk_10028C9C0;
  uint64_t v18 = _Block_copy(&aBlock);
  id v19 = a1;
  swift_release();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock = (uint64_t)_swiftEmptyArrayStorage;
  sub_100195820();
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v22);
}

uint64_t sub_10018FFE4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_100157064(&qword_1002D9670);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_100267EF0;
    *(void *)(v2 + 56) = sub_100167598(0, &qword_1002D9678);
    *(void *)(v2 + 32) = v1;
    id v3 = v1;
    print(_:separator:terminator:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100190084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)CTXPCServiceSubscriptionContext) initWithSlot:a1];
  id v7 = [self descriptorWithSubscriptionContext:v6];
  uint64_t v8 = *(void **)(v3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  v11[4] = sub_100198630;
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1001901D0;
  v11[3] = &unk_10028C970;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  [v8 getSignalStrengthMeasurements:v7 completion:v10];
  _Block_release(v10);
}

uint64_t sub_1001901D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t result = __chkstk_darwin(v12);
  BOOL v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_getErrorValue();
    uint64_t v17 = Error.localizedDescription.getter();
    uint64_t v19 = v18;
    if (qword_1002D7AC8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_100267EF0;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_100181588();
    *(void *)(v20 + 32) = v17;
    *(void *)(v20 + 40) = v19;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  else if (a1)
  {
    uint64_t v28 = v14;
    sub_100167598(0, (unint64_t *)&qword_1002D95F0);
    id v21 = a1;
    uint64_t v27 = v9;
    id v22 = v21;
    uint64_t v23 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v24 = (void *)swift_allocObject();
    v24[2] = a3;
    void v24[3] = a4;
    v24[4] = v22;
    aBlock[4] = sub_100196EA0;
    aBlock[5] = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001E0068;
    aBlock[3] = &unk_10028CA10;
    uint64_t v25 = _Block_copy(aBlock);
    id v26 = v22;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100195820();
    sub_100157064((uint64_t *)&unk_1002D9600);
    sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v16, v12);
  }
  return result;
}

uint64_t sub_1001905A0(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_1002D7AC8 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100267EF0;
  *(void *)(v6 + 56) = &type metadata for Int;
  *(void *)(v6 + 64) = &protocol witness table for Int;
  *(void *)(v6 + 32) = a1;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = (void *)swift_allocObject();
    _OWORD v9[2] = a3;
    v9[3] = a2;
    v9[4] = a1;
    id v10 = a3;
    swift_retain();
    sub_100190084(a1, (uint64_t)sub_100196EEC, (uint64_t)v9);

    return swift_release();
  }
  return result;
}

uint64_t sub_10019071C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v27 = a3;
    uint64_t v28 = a4;
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    uint64_t v17 = v16;
    if (qword_1002D7AC8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_100267EF0;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_100181588();
    *(void *)(v18 + 32) = v15;
    *(void *)(v18 + 40) = v17;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    a3 = v27;
    a4 = v28;
  }
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  uint64_t v19 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v20 = (void *)swift_allocObject();
  id v21 = v30;
  v20[2] = v30;
  v20[3] = a3;
  v20[4] = a4;
  v20[5] = a5;
  aBlock[4] = sub_100196F40;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028CA88;
  id v22 = _Block_copy(aBlock);
  id v23 = v21;
  id v24 = a3;
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100195820();
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v31);
}

void sub_100190ADC(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if (!a1) {
    return;
  }
  uint64_t v6 = qword_1002D7AC8;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  id v8 = [a2 legacyInfo];
  if (!v8)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    goto LABEL_18;
  }
  uint64_t v9 = v8;
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v10 + 16))
  {
    long long v35 = 0u;
    long long v36 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  sub_100196D64(v10 + 32, (uint64_t)&v35);
  swift_bridgeObjectRelease();
  if (!*((void *)&v36 + 1))
  {
LABEL_18:
    sub_10015D658((uint64_t)&v35, (uint64_t *)&unk_1002D9680);
    goto LABEL_19;
  }
  uint64_t v11 = sub_100157064(&qword_1002DAE80);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
LABEL_20:

    return;
  }
  uint64_t v12 = v33;
  if (!*(void *)(v33 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(qword_1002E31C8 + 26) == 1)
  {
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_100267EF0;
    *(void *)(v13 + 56) = v11;
    *(void *)(v13 + 64) = sub_10015D788(&qword_1002D9698, &qword_1002DAE80);
    *(void *)(v13 + 32) = v12;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  id v14 = [a2 legacyInfo];
  if (!v14)
  {
    long long v35 = 0u;
    long long v36 = 0u;
LABEL_30:
    uint64_t v20 = &v35;
LABEL_31:
    sub_10015D658((uint64_t)v20, (uint64_t *)&unk_1002D9680);
    goto LABEL_32;
  }
  uint64_t v15 = v14;
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    sub_100196D64(v16 + 32 * v17, (uint64_t)&v35);
  }
  else
  {
    long long v35 = 0u;
    long long v36 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v36 + 1)) {
    goto LABEL_30;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_32:
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v22 = (void *)Strong;
      id v23 = [v7 rsrp];
      sub_100196F4C(v12, a4);
    }
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (*(void *)(v33 + 16) && (unint64_t v18 = sub_1001EB868(0xD000000000000012, 0x800000010023BF30), (v19 & 1) != 0))
  {
    sub_100196D64(*(void *)(v33 + 56) + 32 * v18, (uint64_t)&v33);
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v34 + 1))
  {
    uint64_t v20 = &v33;
    goto LABEL_31;
  }
  sub_100197FC0(&v33, &v35);
  id v24 = [v7 snr];
  if (!v24)
  {
    sub_100157190((uint64_t)&v35);
    goto LABEL_32;
  }
  uint64_t v25 = v24;
  swift_beginAccess();
  uint64_t v26 = swift_unknownObjectWeakLoadStrong();
  if (v26)
  {
    uint64_t v27 = (void *)v26;
    id v28 = [v7 rsrp];
    sub_100196D64((uint64_t)&v35, (uint64_t)&v33);
    sub_100167598(0, &qword_1002D9690);
    int v29 = swift_dynamicCast();
    id v30 = v25;
    sub_100196F4C(v12, a4);
    swift_bridgeObjectRelease();

    if (v29) {
      uint64_t v31 = v32;
    }
    else {
      uint64_t v31 = 0;
    }
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_100157190((uint64_t)&v35);
}

uint64_t sub_100191010(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = result;
  if (a2)
  {
    sub_100167598(0, (unint64_t *)&qword_1002D95F0);
    uint64_t v40 = v7;
    uint64_t v16 = v15;
    uint64_t v17 = static OS_dispatch_queue.main.getter();
    uint64_t v37 = v8;
    unint64_t v18 = (void *)v17;
    char v19 = (void *)swift_allocObject();
    _DWORD v19[2] = a2;
    v19[3] = a3;
    v19[4] = a4;
    uint64_t v45 = sub_100196E4C;
    uint64_t v46 = v19;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256;
    id v43 = sub_1001E0068;
    uint64_t v44 = &unk_10028C920;
    uint64_t v20 = _Block_copy(&aBlock);
    uint64_t v36 = a3;
    id v21 = v20;
    swift_errorRetain();
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    uint64_t aBlock = (void **)_swiftEmptyArrayStorage;
    sub_100195820();
    sub_100157064((uint64_t *)&unk_1002D9600);
    sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v22 = v18;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    uint64_t v23 = v39;
    id v24 = v21;
    a3 = v36;
    _Block_release(v24);

    uint64_t v15 = v16;
    uint64_t v7 = v40;
    uint64_t v8 = v37;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v40);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v23);
  }
  uint64_t v25 = v38;
  if (v38)
  {
    sub_100167598(0, (unint64_t *)&qword_1002D95F0);
    uint64_t v26 = v7;
    uint64_t v27 = v10;
    id v28 = v15;
    uint64_t v29 = v12;
    id v30 = v25;
    uint64_t v40 = static OS_dispatch_queue.main.getter();
    uint64_t v31 = (void *)swift_allocObject();
    v31[2] = v30;
    void v31[3] = a3;
    void v31[4] = a4;
    uint64_t v45 = sub_100196E00;
    uint64_t v46 = v31;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256;
    id v43 = sub_1001E0068;
    uint64_t v44 = &unk_10028C8D0;
    id v32 = _Block_copy(&aBlock);
    swift_retain();
    id v33 = v30;
    swift_release();
    static DispatchQoS.unspecified.getter();
    uint64_t aBlock = (void **)_swiftEmptyArrayStorage;
    sub_100195820();
    sub_100157064((uint64_t *)&unk_1002D9600);
    sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    long long v34 = (void *)v40;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v27, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v28, v39);
  }
  return result;
}

uint64_t sub_1001914C8(uint64_t a1, uint64_t (*a2)(void, uint64_t))
{
  sub_100157064(&qword_1002D9670);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100267EF0;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  if (a1)
  {
    swift_getErrorValue();
    Error.localizedDescription.getter();
  }
  sub_100157064((uint64_t *)&unk_1002D9650);
  v5._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 32) = 0x636F20726F727265;
  *(void *)(v4 + 40) = 0xEF20646572727563;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  if (a1)
  {
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    uint64_t v8 = v7;
    if (qword_1002D7AC8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100267EF0;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_100181588();
    *(void *)(v9 + 32) = v6;
    *(void *)(v9 + 40) = v8;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  return a2(0, a1);
}

uint64_t sub_1001916F4(void *a1, uint64_t (*a2)(id, void))
{
  sub_100157064(&qword_1002D9670);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100267EF0;
  strcpy((char *)v14, "measurements");
  BYTE5(v14[1]) = 0;
  HIWORD(v14[1]) = -5120;
  id v5 = a1;
  id v6 = [v5 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = v14[0];
  uint64_t v12 = v14[1];
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 32) = v11;
  *(void *)(v4 + 40) = v12;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  return a2(v5, 0);
}

void sub_100191818(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

double sub_1001918A4@<D0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X6>, int a7@<W7>, uint64_t a8@<X8>, void *a9)
{
  int v56 = a7;
  uint64_t v50 = a4;
  NSString v51 = a5;
  uint64_t v46 = a3;
  NSString v48 = a1;
  NSString v49 = a2;
  uint64_t v55 = a8;
  NSString v52 = a9;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v14 - 8);
  uint64_t v54 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100167598(0, (unint64_t *)&unk_1002DAE40);
  uint64_t v17 = NSString.init(stringLiteral:)();
  unint64_t v18 = NSString.init(stringLiteral:)();
  sub_100196D64((uint64_t)a6, (uint64_t)v59);
  if (swift_dynamicCast())
  {
    uint64_t v19 = NSString.init(stringLiteral:)();

    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();

    uint64_t v21 = (uint64_t)v20;
  }
  else if (swift_dynamicCast())
  {
    uint64_t v22 = v10;
    uint64_t v23 = DynamicType;
    uint64_t v24 = NSString.init(stringLiteral:)();

    uint64_t v57 = v23;
    uint64_t v10 = v22;
    dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = v16;
    uint64_t v26 = v13;
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();

    uint64_t v21 = (uint64_t)v27;
    uint64_t v13 = v26;
    uint64_t v16 = v25;
    uint64_t v19 = v24;
  }
  else
  {
    if (qword_1002D7B18 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(qword_1002E31C8 + 26) == 1)
    {
      if (qword_1002D7AC8 != -1) {
        swift_once();
      }
      uint64_t v47 = qword_1002E3178;
      LODWORD(v45) = static os_log_type_t.default.getter();
      sub_100157064((uint64_t *)&unk_1002D97F0);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_100267EF0;
      sub_10015714C(a6, a6[3]);
      uint64_t DynamicType = swift_getDynamicType();
      sub_100157064(&qword_1002D9668);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v31 = v30;
      *(void *)(v28 + 56) = &type metadata for String;
      *(void *)(v28 + 64) = sub_100181588();
      *(void *)(v28 + 32) = v29;
      *(void *)(v28 + 40) = v31;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = (uint64_t)v18;
    uint64_t v19 = (uint64_t)v17;
  }
  uint64_t v45 = v19;
  uint64_t v47 = v21;
  sub_100157190((uint64_t)v59);
  if (qword_1002D7AC8 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  UUID.init()();
  NSString v49 = String._bridgeToObjectiveC()();
  NSString v48 = String._bridgeToObjectiveC()();
  NSString v44 = String._bridgeToObjectiveC()();
  NSString v51 = String._bridgeToObjectiveC()();
  id v32 = v16;
  id v43 = v16;
  id v33 = *(void (**)(char *, NSString, uint64_t))(v11 + 16);
  v33(v13, v52, v10);
  NSString v52 = String._bridgeToObjectiveC()();
  long long v34 = v13;
  uint64_t v35 = (int *)type metadata accessor for Metric(0);
  uint64_t v50 = v35[14];
  uint64_t v46 = v35[15];
  uint64_t v36 = v10;
  uint64_t v37 = v55;
  uint64_t v38 = (void *)(v55 + v35[16]);
  void *v38 = 0;
  v38[1] = 0;
  uint64_t v39 = v53;
  uint64_t v40 = v32;
  uint64_t v41 = v54;
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 16))(v37, v40, v54);
  *(void *)(v37 + v35[5]) = v49;
  *(void *)(v37 + v35[6]) = v48;
  *(void *)(v37 + v35[7]) = v44;
  *(void *)(v37 + v35[8]) = v51;
  *(void *)(v37 + v35[9]) = v47;
  *(void *)(v37 + v35[10]) = v45;
  v33((char *)(v37 + v35[11]), v34, v36);
  *(void *)(v37 + v35[12]) = v52;
  *(_DWORD *)(v37 + v35[13]) = v56;
  *(unsigned char *)(v37 + v50) = 0;
  *(unsigned char *)(v37 + v46) = 0;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v36);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v41);
  swift_bridgeObjectRelease();
  double result = 0.0;
  *(_OWORD *)uint64_t v38 = xmmword_100269B60;
  return result;
}

uint64_t sub_100191ECC(char a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (qword_1002D7B18 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(qword_1002E31C8 + 26) == 1)
    {
      if (qword_1002D7AC8 != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      sub_100157064((uint64_t *)&unk_1002D97F0);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_100269B50;
      uint64_t v5 = type metadata accessor for Metric(0);
      id v6 = *(void **)(a3 + *(int *)(v5 + 20));
      uint64_t v7 = sub_100167598(0, (unint64_t *)&unk_1002DAE40);
      *(void *)(v4 + 56) = v7;
      uint64_t v8 = sub_100196D14(&qword_1002D9660, (unint64_t *)&unk_1002DAE40);
      *(void *)(v4 + 64) = v8;
      *(void *)(v4 + 32) = v6;
      uint64_t v9 = *(void **)(a3 + *(int *)(v5 + 24));
      *(void *)(v4 + 96) = v7;
      *(void *)(v4 + 104) = v8;
      *(void *)(v4 + 72) = v9;
      id v10 = v6;
      id v11 = v9;
      os_log(_:dso:log:type:_:)();
      return swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1002D7AC8 != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
      return os_log(_:dso:log:type:_:)();
    }
  }
  else
  {
    if (qword_1002D7AC8 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_100267EF0;
    if (a2)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    sub_100157064((uint64_t *)&unk_1002D9650);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_100181588();
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
}

void sub_100192220(uint64_t a1, void *a2, int a3)
{
  int v104 = a3;
  id v93 = a2;
  uint64_t v3 = type metadata accessor for Metric(0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v97 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v98 = (uint64_t)&v90 - v6;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v91 = *(void *)(v7 - 8);
  uint64_t v92 = v7;
  __chkstk_darwin(v7);
  Swift::Int v105 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v10 = (void *)Strong;
    uint64_t v11 = Strong + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray;
    swift_beginAccess();
    if (!*(void *)(*(void *)v11 + 16))
    {

      return;
    }
    Date.init()();
    uint64_t v12 = [v93 activeBands];
    uint64_t v103 = v10;
    if (v12)
    {
      uint64_t v13 = v12;
      sub_100157064(&qword_1002D9638);
      uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      int64_t v15 = 0;
      uint64_t v16 = *(void *)(v14 + 64);
      uint64_t v94 = v14 + 64;
      uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
      uint64_t v18 = -1;
      if (v17 < 64) {
        uint64_t v18 = ~(-1 << v17);
      }
      unint64_t v19 = v18 & v16;
      int64_t v95 = (unint64_t)(v17 + 63) >> 6;
      int64_t v96 = v14;
      while (1)
      {
        if (v19)
        {
          unint64_t v24 = __clz(__rbit64(v19));
          v19 &= v19 - 1;
          unint64_t v25 = v24 | (v15 << 6);
        }
        else
        {
          int64_t v26 = v15 + 1;
          if (__OFADD__(v15, 1)) {
            goto LABEL_81;
          }
          if (v26 >= v95)
          {
LABEL_37:
            swift_release();
            uint64_t v13 = [self defaultCenter];
            if (qword_1002D7AD8 != -1) {
              goto LABEL_85;
            }
            goto LABEL_38;
          }
          unint64_t v27 = *(void *)(v94 + 8 * v26);
          ++v15;
          if (!v27)
          {
            int64_t v15 = v26 + 1;
            if (v26 + 1 >= v95) {
              goto LABEL_37;
            }
            unint64_t v27 = *(void *)(v94 + 8 * v15);
            if (!v27)
            {
              int64_t v15 = v26 + 2;
              if (v26 + 2 >= v95) {
                goto LABEL_37;
              }
              unint64_t v27 = *(void *)(v94 + 8 * v15);
              if (!v27)
              {
                int64_t v28 = v26 + 3;
                if (v28 >= v95) {
                  goto LABEL_37;
                }
                unint64_t v27 = *(void *)(v94 + 8 * v28);
                if (!v27)
                {
                  while (1)
                  {
                    int64_t v15 = v28 + 1;
                    if (__OFADD__(v28, 1)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v95) {
                      goto LABEL_37;
                    }
                    unint64_t v27 = *(void *)(v94 + 8 * v15);
                    ++v28;
                    if (v27) {
                      goto LABEL_23;
                    }
                  }
                }
                int64_t v15 = v28;
              }
            }
          }
LABEL_23:
          unint64_t v19 = (v27 - 1) & v27;
          unint64_t v25 = __clz(__rbit64(v27)) + (v15 << 6);
        }
        uint64_t v29 = (uint64_t *)(*(void *)(v96 + 48) + 16 * v25);
        uint64_t v30 = *v29;
        uint64_t v31 = (void *)v29[1];
        unint64_t v32 = *(void *)(*(void *)(v96 + 56) + 8 * v25);
        if (v32 >> 62)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
          if (!v33)
          {
LABEL_36:
            uint64_t v35 = _swiftEmptyArrayStorage;
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (!v33) {
            goto LABEL_36;
          }
        }
        v107[0] = _swiftEmptyArrayStorage;
        uint64_t v13 = v107;
        sub_1001B2350(0, v33 & ~(v33 >> 63), 0);
        if (v33 < 0)
        {
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
        uint64_t v99 = v30;
        Swift::Int v100 = v31;
        unint64_t v101 = v19;
        int64_t v102 = v15;
        uint64_t v34 = 0;
        uint64_t v35 = (void *)v107[0];
        unint64_t v106 = v32 & 0xC000000000000001;
        unint64_t v36 = v32;
        uint64_t v37 = v33;
        do
        {
          if (v106) {
            id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v38 = *(id *)(v32 + 8 * v34 + 32);
          }
          uint64_t v39 = v38;
          id v40 = [v38 stringValue];
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v43 = v42;

          v107[0] = v35;
          unint64_t v45 = v35[2];
          unint64_t v44 = v35[3];
          if (v45 >= v44 >> 1)
          {
            sub_1001B2350(v44 > 1, v45 + 1, 1);
            uint64_t v35 = (void *)v107[0];
          }
          ++v34;
          v35[2] = v45 + 1;
          uint64_t v46 = &v35[2 * v45];
          v46[4] = v41;
          v46[5] = v43;
          unint64_t v32 = v36;
        }
        while (v37 != v34);
        int64_t v15 = v102;
        id v10 = v103;
        uint64_t v31 = v100;
        unint64_t v19 = v101;
        uint64_t v30 = v99;
LABEL_7:
        v107[0] = v35;
        sub_100157064(&qword_1002D9640);
        sub_10015D788((unint64_t *)&qword_1002D9648, &qword_1002D9640);
        uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v22 = v21;
        swift_bridgeObjectRelease();
        uint64_t v108 = &type metadata for String;
        v107[0] = v20;
        v107[1] = v22;
        uint64_t v23 = v98;
        uint64_t v13 = v10;
        sub_1001918A4((void *)0x544152, (void *)0xE300000000000000, 0x4220657669746341, v30, v31, v107, v104, v98, v105);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100157190((uint64_t)v107);
        sub_100196884(v23);
        sub_100196C78(v23);
      }
    }
LABEL_39:
    NSString v51 = [v93 supportedBands];
    if (v51)
    {
      uint64_t v13 = v51;
      sub_100157064(&qword_1002D9638);
      uint64_t v52 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      int64_t v53 = 0;
      uint64_t v54 = *(void *)(v52 + 64);
      int64_t v95 = v52 + 64;
      uint64_t v98 = v52;
      uint64_t v55 = 1 << *(unsigned char *)(v52 + 32);
      uint64_t v56 = -1;
      if (v55 < 64) {
        uint64_t v56 = ~(-1 << v55);
      }
      unint64_t v57 = v56 & v54;
      int64_t v96 = (unint64_t)(v55 + 63) >> 6;
      while (1)
      {
        if (v57)
        {
          unint64_t v62 = __clz(__rbit64(v57));
          v57 &= v57 - 1;
          unint64_t v63 = v62 | (v53 << 6);
        }
        else
        {
          int64_t v64 = v53 + 1;
          if (__OFADD__(v53, 1)) {
            goto LABEL_82;
          }
          if (v64 >= v96)
          {
LABEL_74:
            swift_release();
            id v85 = [self defaultCenter];
            if (qword_1002D7AD8 != -1) {
              swift_once();
            }
            uint64_t v86 = static NSNotificationName.NewCTMetric;
            sub_100157064(&qword_1002D9618);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_100267EF0;
            strcpy((char *)v107, "metricObject");
            BYTE5(v107[1]) = 0;
            HIWORD(v107[1]) = -5120;
            AnyHashable.init<A>(_:)();
            *(void *)(inited + 96) = &type metadata for MetricNotificationObject;
            uint64_t v88 = swift_allocObject();
            *(void *)(inited + 72) = v88;
            *(void *)(v88 + 16) = 5521746;
            *(void *)(v88 + 24) = 0xE300000000000000;
            *(void *)(v88 + 32) = 0x6574726F70707553;
            *(void *)(v88 + 40) = 0xEF73646E61422064;
            *(_DWORD *)(v88 + 48) = v104;
            sub_1001E02AC(inited);
            Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v85 postNotificationName:v86 object:0 userInfo:isa];

            id v10 = isa;
            break;
          }
          unint64_t v65 = *(void *)(v95 + 8 * v64);
          ++v53;
          if (!v65)
          {
            int64_t v53 = v64 + 1;
            if (v64 + 1 >= v96) {
              goto LABEL_74;
            }
            unint64_t v65 = *(void *)(v95 + 8 * v53);
            if (!v65)
            {
              int64_t v53 = v64 + 2;
              if (v64 + 2 >= v96) {
                goto LABEL_74;
              }
              unint64_t v65 = *(void *)(v95 + 8 * v53);
              if (!v65)
              {
                int64_t v66 = v64 + 3;
                if (v66 >= v96) {
                  goto LABEL_74;
                }
                unint64_t v65 = *(void *)(v95 + 8 * v66);
                if (!v65)
                {
                  while (1)
                  {
                    int64_t v53 = v66 + 1;
                    if (__OFADD__(v66, 1)) {
                      break;
                    }
                    if (v53 >= v96) {
                      goto LABEL_74;
                    }
                    unint64_t v65 = *(void *)(v95 + 8 * v53);
                    ++v66;
                    if (v65) {
                      goto LABEL_59;
                    }
                  }
LABEL_84:
                  __break(1u);
LABEL_85:
                  swift_once();
LABEL_38:
                  uint64_t v47 = static NSNotificationName.NewCTMetric;
                  sub_100157064(&qword_1002D9618);
                  uint64_t v48 = swift_initStackObject();
                  *(_OWORD *)(v48 + 16) = xmmword_100267EF0;
                  strcpy((char *)v107, "metricObject");
                  BYTE5(v107[1]) = 0;
                  HIWORD(v107[1]) = -5120;
                  AnyHashable.init<A>(_:)();
                  *(void *)(v48 + 96) = &type metadata for MetricNotificationObject;
                  uint64_t v49 = swift_allocObject();
                  *(void *)(v48 + 72) = v49;
                  *(void *)(v49 + 16) = 5521746;
                  *(void *)(v49 + 24) = 0xE300000000000000;
                  strcpy((char *)(v49 + 32), "Active Bands");
                  *(unsigned char *)(v49 + 45) = 0;
                  *(_WORD *)(v49 + 46) = -5120;
                  *(_DWORD *)(v49 + 48) = v104;
                  sub_1001E02AC(v48);
                  Class v50 = Dictionary._bridgeToObjectiveC()().super.isa;
                  swift_bridgeObjectRelease();
                  [v13 postNotificationName:v47 object:0 userInfo:v50];

                  goto LABEL_39;
                }
                int64_t v53 = v66;
              }
            }
          }
LABEL_59:
          unint64_t v57 = (v65 - 1) & v65;
          unint64_t v63 = __clz(__rbit64(v65)) + (v53 << 6);
        }
        uint64_t v67 = (uint64_t *)(*(void *)(v98 + 48) + 16 * v63);
        uint64_t v69 = *v67;
        uint64_t v68 = (void *)v67[1];
        unint64_t v70 = *(void *)(*(void *)(v98 + 56) + 8 * v63);
        if (v70 >> 62)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
          if (!v71)
          {
LABEL_72:
            unint64_t v73 = _swiftEmptyArrayStorage;
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (!v71) {
            goto LABEL_72;
          }
        }
        v107[0] = _swiftEmptyArrayStorage;
        uint64_t v13 = v107;
        sub_1001B2350(0, v71 & ~(v71 >> 63), 0);
        if (v71 < 0) {
          goto LABEL_80;
        }
        uint64_t v99 = v69;
        Swift::Int v100 = v68;
        unint64_t v101 = v57;
        int64_t v102 = v53;
        uint64_t v72 = 0;
        unint64_t v73 = (void *)v107[0];
        unint64_t v74 = v70;
        unint64_t v106 = v70 & 0xC000000000000001;
        uint64_t v75 = v71;
        do
        {
          if (v106) {
            id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v76 = *(id *)(v74 + 8 * v72 + 32);
          }
          uint64_t v77 = v76;
          id v78 = [v76 stringValue];
          uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v81 = v80;

          v107[0] = v73;
          unint64_t v83 = v73[2];
          unint64_t v82 = v73[3];
          if (v83 >= v82 >> 1)
          {
            sub_1001B2350(v82 > 1, v83 + 1, 1);
            unint64_t v73 = (void *)v107[0];
          }
          ++v72;
          v73[2] = v83 + 1;
          uint64_t v84 = &v73[2 * v83];
          v84[4] = v79;
          v84[5] = v81;
        }
        while (v75 != v72);
        int64_t v53 = v102;
        id v10 = v103;
        uint64_t v68 = v100;
        unint64_t v57 = v101;
        uint64_t v69 = v99;
LABEL_43:
        v107[0] = v73;
        sub_100157064(&qword_1002D9640);
        sub_10015D788((unint64_t *)&qword_1002D9648, &qword_1002D9640);
        uint64_t v58 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v60 = v59;
        swift_bridgeObjectRelease();
        uint64_t v108 = &type metadata for String;
        v107[0] = v58;
        v107[1] = v60;
        uint64_t v61 = v97;
        uint64_t v13 = v10;
        sub_1001918A4((void *)0x544152, (void *)0xE300000000000000, 0x6574726F70707553, v69, v68, v107, v104, v97, v105);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100157190((uint64_t)v107);
        sub_100196884(v61);
        sub_100196C78(v61);
      }
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v105, v92);
  }
}

uint64_t sub_100192E94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a1 || !*(void *)(a1 + 16))
  {
    if (qword_1002D7AC8 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100267EF0;
    if (a2)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    sub_100157064((uint64_t *)&unk_1002D9650);
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_100181588();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = a3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray;
  swift_beginAccess();
  if ((a4 & 0x8000000000000000) == 0 && *(void *)(*(void *)v7 + 16) > (int64_t)a4)
  {
    swift_beginAccess();
    uint64_t v8 = *(void **)v7;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = sub_1001B4A7C(v8);
      *(void *)uint64_t v7 = v8;
    }
    if (v8[2] > a4)
    {
      v8[11 * a4 + 12] = a1;
      swift_endAccess();
      return swift_bridgeObjectRelease();
    }
    __break(1u);
    goto LABEL_18;
  }
  if (qword_1002D7AC8 != -1) {
LABEL_18:
  }
    swift_once();
  static os_log_type_t.error.getter();
  return os_log(_:dso:log:type:_:)();
}

uint64_t sub_1001930F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a1 || !*(void *)(a1 + 16))
  {
    if (qword_1002D7AC8 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100267EF0;
    if (a2)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    sub_100157064((uint64_t *)&unk_1002D9650);
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_100181588();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = a3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray;
  uint64_t result = swift_beginAccess();
  if ((a4 & 0x8000000000000000) == 0 && *(void *)(*(void *)v7 + 16) > (int64_t)a4)
  {
    swift_beginAccess();
    uint64_t v9 = *(void **)v7;
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v7 = v9;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1001B4A7C(v9);
      uint64_t v9 = (void *)result;
      *(void *)uint64_t v7 = result;
    }
    if (v9[2] <= a4)
    {
      __break(1u);
      return result;
    }
    v9[11 * a4 + 13] = a1;
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001932E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a1 || !*(void *)(a1 + 16))
  {
    if (qword_1002D7AC8 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100267EF0;
    if (a2)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    sub_100157064((uint64_t *)&unk_1002D9650);
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_100181588();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = a3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray;
  uint64_t result = swift_beginAccess();
  if ((a4 & 0x8000000000000000) == 0 && *(void *)(*(void *)v7 + 16) > (int64_t)a4)
  {
    swift_beginAccess();
    uint64_t v9 = *(void **)v7;
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v7 = v9;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1001B4A7C(v9);
      uint64_t v9 = (void *)result;
      *(void *)uint64_t v7 = result;
    }
    if (v9[2] <= a4)
    {
      __break(1u);
      return result;
    }
    v9[11 * a4 + 14] = a1;
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1001934DC(uint64_t a1, uint64_t a2)
{
  if (qword_1002D7AC8 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v3 = (void *)(a2 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray);
  swift_beginAccess();
  *uint64_t v3 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client);
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1001958B0;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001901D0;
  aBlock[3] = &unk_10028CD08;
  uint64_t v6 = _Block_copy(aBlock);
  swift_release();
  [v4 getSubscriptionInfo:v6];
  _Block_release(v6);
}

uint64_t type metadata accessor for CoreTelephonyService()
{
  return self;
}

void sub_1001936B0(char *a1, void *a2)
{
  uint64_t v3 = v2;
  if (qword_1002D7AC8 != -1) {
LABEL_53:
  }
    swift_once();
  static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100269B50;
  v81[0] = a1;
  uint64_t v7 = a1;
  sub_100157064(&qword_1002D96C0);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  unint64_t v74 = a1;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v11 = sub_100181588();
  *(void *)(v6 + 64) = v11;
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  v81[0] = a2;
  id v12 = a2;
  sub_100157064(&qword_1002D96D0);
  uint64_t v13 = String.init<A>(describing:)();
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v11;
  *(void *)(v6 + 72) = v13;
  *(void *)(v6 + 80) = v14;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if (!a1)
  {
    __break(1u);
    return;
  }
  int64_t v15 = &selRef_puschCountersCount;
  if ([v7 slotID] == (id)1) {
    unint64_t v16 = 0x800000010023BC50;
  }
  else {
    unint64_t v16 = 0x800000010023BC30;
  }
  uint64_t v17 = &v3[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray];
  swift_beginAccess();
  uint64_t v18 = *(void *)(*(void *)v17 + 16);
  id v76 = v7;
  uint64_t v72 = v12;
  unint64_t v73 = a2;
  if (v18 == 1)
  {
    id v26 = *(id *)(*(void *)v17 + 48);
    if (v26 != [v7 slotID])
    {
      id v27 = [v7 slotID];
      unsigned __int8 v28 = [v7 isSimPresent];
      id v29 = [v7 phoneNumber];
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v33 = v32;
      }
      else
      {
        uint64_t v31 = 0;
        unint64_t v33 = 0xE000000000000000;
      }
      swift_beginAccess();
      v81[0] = 0;
      v81[1] = 0xE000000000000000;
      v81[2] = v27;
      unsigned __int8 v82 = v28;
      unint64_t v83 = 0xD000000000000010;
      unint64_t v84 = v16;
      uint64_t v85 = v31;
      unint64_t v86 = v33;
      uint64_t v87 = _swiftEmptyArrayStorage;
      uint64_t v88 = _swiftEmptyArrayStorage;
      uint64_t v89 = _swiftEmptyArrayStorage;
      sub_1001B35B4(0, 0, (uint64_t)v81);
LABEL_22:
      swift_endAccess();
      uint64_t v7 = v76;
      int64_t v15 = &selRef_puschCountersCount;
      goto LABEL_23;
    }
  }
  else if (!v18)
  {
    id v19 = [v7 slotID];
    id v20 = [v7 isSimPresent];
    id v21 = [v7 phoneNumber];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v25 = 0xE000000000000000;
    }
    swift_beginAccess();
    uint64_t v34 = *(void **)v17;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v17 = v34;
    a2 = v20;
    uint64_t v36 = (uint64_t)v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v34 = sub_1001EACD4(0, v34[2] + 1, 1, v34);
      *(void *)uint64_t v17 = v34;
    }
    unint64_t v38 = v34[2];
    unint64_t v37 = v34[3];
    if (v38 >= v37 >> 1)
    {
      uint64_t v34 = sub_1001EACD4((void *)(v37 > 1), v38 + 1, 1, v34);
      *(void *)uint64_t v17 = v34;
    }
    v34[2] = v38 + 1;
    uint64_t v39 = (int64x2_t *)&v34[11 * v38];
    v39[2].i64[0] = 0;
    v39[2].i64[1] = 0xE000000000000000;
    v39[3].i64[0] = v36;
    v39[3].i8[8] = (char)v20;
    v39[4].i64[0] = 0xD000000000000010;
    v39[4].i64[1] = v16;
    v39[5].i64[0] = v23;
    v39[5].i64[1] = v25;
    v39[6] = vdupq_n_s64((unint64_t)_swiftEmptyArrayStorage);
    v39[7].i64[0] = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
LABEL_23:
  a1 = *(char **)(*(void *)v17 + 16);
  if (a1)
  {
    uint64_t v71 = v3;
    uint64_t v3 = 0;
    id v40 = 0;
    do
    {
      if ((unint64_t)v40 >= *(void *)(*(void *)v17 + 16))
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      id v41 = *(id *)&v3[*(void *)v17 + 48];
      if (v41 == [v7 slotID])
      {
        unsigned __int8 v42 = [v7 isSimPresent];
        swift_beginAccess();
        uint64_t v43 = *(void **)v17;
        char v44 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v17 = v43;
        if ((v44 & 1) == 0)
        {
          uint64_t v43 = sub_1001B4A7C(v43);
          *(void *)uint64_t v17 = v43;
        }
        if ((unint64_t)v40 >= v43[2]) {
          goto LABEL_52;
        }
        v3[(void)v43 + 56] = v42;
        swift_endAccess();
      }
      ++v40;
      v3 += 88;
    }
    while (a1 != v40);
    uint64_t v45 = *(void *)v17;
    uint64_t v46 = *(void *)(*(void *)v17 + 16);
    if (v46)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = 0;
      uint64_t v48 = _swiftEmptyArrayStorage;
      uint64_t v75 = v17;
      do
      {
        uint64_t v52 = v45 + v47;
        if (*(unsigned char *)(v45 + v47 + 56) == 1)
        {
          uint64_t v53 = *(void *)(v52 + 32);
          uint64_t v54 = *(void *)(v52 + 40);
          uint64_t v77 = *(void *)(v52 + 48);
          uint64_t v55 = *(void *)(v52 + 64);
          uint64_t v56 = *(void *)(v52 + 72);
          uint64_t v57 = *(void *)(v52 + 80);
          long long v78 = *(_OWORD *)(v52 + 104);
          long long v79 = *(_OWORD *)(v52 + 88);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          aBlock[0] = v48;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001B2370(0, v48[2] + 1, 1);
            uint64_t v48 = (void *)aBlock[0];
          }
          unint64_t v50 = v48[2];
          unint64_t v49 = v48[3];
          if (v50 >= v49 >> 1)
          {
            sub_1001B2370(v49 > 1, v50 + 1, 1);
            uint64_t v48 = (void *)aBlock[0];
          }
          v48[2] = v50 + 1;
          NSString v51 = &v48[11 * v50];
          v51[4] = v53;
          v51[5] = v54;
          uint64_t v7 = v76;
          v51[6] = v77;
          *((unsigned char *)v51 + 56) = 1;
          v51[8] = v55;
          v51[9] = v56;
          v51[10] = v57;
          *(_OWORD *)(v51 + 11) = v79;
          *(_OWORD *)(v51 + 13) = v78;
          int64_t v15 = &selRef_puschCountersCount;
          uint64_t v17 = v75;
        }
        v47 += 88;
        --v46;
      }
      while (v46);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v48 = _swiftEmptyArrayStorage;
    }
    uint64_t v3 = v71;
  }
  else
  {
    uint64_t v48 = _swiftEmptyArrayStorage;
  }
  v3[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_isSimAdded] = v48[2] == 2;
  swift_beginAccess();
  char v58 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v59 = *(void *)v17;
  if (v58)
  {
    sub_1001B5838(0, *(void *)(v59 + 16));
  }
  else
  {
    *(void *)uint64_t v17 = sub_1001B3424(0, *(void *)(v59 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  sub_1002025DC((uint64_t)v48);
  swift_endAccess();
  id v60 = [v7 v15[181]];
  uint64_t v61 = (void *)swift_allocObject();
  v61[2] = v73;
  v61[3] = v74;
  v61[4] = v3;
  unint64_t v62 = v3;
  unint64_t v63 = v7;
  id v64 = v72;
  unint64_t v65 = v62;
  sub_100190084((uint64_t)v60, (uint64_t)sub_10019850C, (uint64_t)v61);
  swift_release();
  sub_10018F188((uint64_t)[v63 v15[181]]);
  uint64_t v66 = *(void *)&v65[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager];
  if (*(unsigned char *)(v66 + 26) == 1) {
    sub_10018F7C0((uint64_t)[v63 v15[181]]);
  }
  [*(id *)(v66 + 16) invalidate:v71];
  uint64_t v67 = self;
  aBlock[4] = sub_100198518;
  aBlock[5] = v66;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10018093C;
  aBlock[3] = &unk_10028CD80;
  uint64_t v68 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v69 = [v67 scheduledTimerWithTimeInterval:0 repeats:v68 block:2.0];
  _Block_release(v68);
  unint64_t v70 = *(void **)(v66 + 16);
  *(void *)(v66 + 16) = v69;
}

uint64_t sub_100193F08(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v31 = a5;
  unint64_t v32 = a1;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  id v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_100157064(&qword_1002D9670);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_100267EF0;
    uint64_t aBlock = 0;
    unint64_t v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t aBlock = 0x636F20726F727265;
    unint64_t v37 = 0xEF20646572727563;
    swift_getErrorValue();
    uint64_t v34 = Error.localizedDescription.getter();
    uint64_t v35 = v14;
    sub_100157064((uint64_t *)&unk_1002D9650);
    v15._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = aBlock;
    unint64_t v17 = v37;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 32) = v16;
    *(void *)(v13 + 40) = v17;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  uint64_t v18 = (void *)static OS_dispatch_queue.main.getter();
  id v19 = (void *)swift_allocObject();
  id v21 = v31;
  id v20 = v32;
  _DWORD v19[2] = a3;
  v19[3] = v20;
  v19[4] = a4;
  v19[5] = v21;
  id v40 = sub_100198570;
  id v41 = v19;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v37 = 1107296256;
  unint64_t v38 = sub_1001E0068;
  uint64_t v39 = &unk_10028CDD0;
  uint64_t v22 = _Block_copy(&aBlock);
  id v23 = a4;
  id v24 = v21;
  id v25 = a3;
  id v26 = v20;
  swift_release();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock = (uint64_t)_swiftEmptyArrayStorage;
  sub_100195820();
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v12, v33);
}

void sub_1001942CC(void *a1, void *a2, char *a3, uint64_t a4)
{
  uint64_t v102 = a4;
  uint64_t v103 = a3;
  id v104 = a2;
  object = (void *)type metadata accessor for Date();
  uint64_t v6 = *(object - 1);
  __chkstk_darwin(object);
  uint64_t v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (char **)type metadata accessor for Metric(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(char **)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v79 - v17;
  if (qword_1002D7AC8 != -1) {
    goto LABEL_65;
  }
  while (1)
  {
    Swift::Int v100 = object;
    uint64_t v101 = v6;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    if (!a1)
    {
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    id v19 = [a1 legacyInfo];
    if (!v19)
    {
      long long v108 = 0u;
      long long v109 = 0u;
LABEL_20:
      sub_10015D658((uint64_t)&v108, (uint64_t *)&unk_1002D9680);
LABEL_21:
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      return;
    }
    id v20 = v19;
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!*(void *)(v21 + 16))
    {
      long long v108 = 0u;
      long long v109 = 0u;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    sub_100196D64(v21 + 32, (uint64_t)&v108);
    swift_bridgeObjectRelease();
    if (!*((void *)&v109 + 1)) {
      goto LABEL_20;
    }
    uint64_t v22 = sub_100157064(&qword_1002DAE80);
    if (!swift_dynamicCast()) {
      goto LABEL_21;
    }
    object = (void *)v106;
    if (!v104 || (v99 = v22, (id v23 = [v104 rsrp]) == 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    id v24 = v23;
    if (!object[2])
    {
      swift_bridgeObjectRelease();

      goto LABEL_21;
    }
    id v98 = v23;
    unint64_t v25 = sub_1001EB868(0xD000000000000027, 0x8000000100239DB0);
    uint64_t v97 = object;
    if (v26)
    {
      sub_100196D64(object[7] + 32 * v25, (uint64_t)&v108);
      if (swift_dynamicCast())
      {
        object = (void *)*((void *)&v106 + 1);
        uint64_t v27 = HIBYTE(*((void *)&v106 + 1)) & 0xFLL;
        if ((*((void *)&v106 + 1) & 0x2000000000000000) == 0) {
          uint64_t v27 = v106 & 0xFFFFFFFFFFFFLL;
        }
        if (!v27)
        {
          swift_bridgeObjectRelease();
          goto LABEL_36;
        }
        v96._object = (void *)v106;
        UUID.init()();
        if (!v103) {
          goto LABEL_67;
        }
        BOOL v94 = [v103 slotID] != (id)1;
        Swift::String v96 = String.lowercased()();
        swift_bridgeObjectRelease();
        Swift::String v28 = String.lowercased()();
        object = v28._object;
        if (v96 == v28)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          LODWORD(v96._countAndFlagsBits) = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v96._countAndFlagsBits & 1) == 0)
          {
            unint64_t v63 = (void (*)(char *, uint64_t))*((void *)v13 + 1);
            v13 += 8;
            v63(v18, v12);
            goto LABEL_36;
          }
        }
        v96._object = (void *)qword_1002E3178;
        LODWORD(v96._countAndFlagsBits) = static os_log_type_t.default.getter();
        uint64_t v83 = sub_100157064((uint64_t *)&unk_1002D97F0);
        uint64_t v29 = swift_allocObject();
        long long v81 = xmmword_100269B50;
        *(_OWORD *)(v29 + 16) = xmmword_100269B50;
        id v30 = [v103 slotID];
        unint64_t v31 = sub_100181588();
        uint64_t v32 = 48;
        if (v30 != (id)1) {
          uint64_t v32 = 49;
        }
        *(void *)(v29 + 56) = &type metadata for String;
        *(void *)(v29 + 64) = v31;
        uint64_t v82 = v31;
        *(void *)(v29 + 32) = v32;
        *(void *)(v29 + 40) = 0xE100000000000000;
        uint64_t v80 = sub_100167598(0, &qword_1002D9690);
        *(void *)(v29 + 96) = v80;
        uint64_t v79 = sub_100196D14(&qword_1002D96D8, &qword_1002D9690);
        *(void *)(v29 + 104) = v79;
        id v33 = v98;
        *(void *)(v29 + 72) = v98;
        id v91 = v33;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        if (qword_1002D7B20 != -1) {
          swift_once();
        }
        uint64_t v34 = (void *)qword_1002E31D0;
        int64_t v95 = v13;
        v96._countAndFlagsBits = *((void *)v13 + 2);
        v96._object = v13 + 16;
        ((void (*)(char *, char *, uint64_t))v96._countAndFlagsBits)(v16, v18, v12);
        uint64_t v35 = sub_100167598(0, (unint64_t *)&unk_1002DAE40);
        uint64_t v92 = v34;
        id v93 = (void (*)(char *, uint64_t))NSString.init(stringLiteral:)();
        uint64_t v90 = (void (*)(char *, char *, void *))NSString.init(stringLiteral:)();
        uint64_t v89 = (void (*)(char *, char *))NSString.init(stringLiteral:)();
        *(void *)&long long v88 = NSString.init(stringLiteral:)();
        id v36 = [v91 description];
        id v91 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v91 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v84 = v35;
        uint64_t v37 = NSString.init(stringLiteral:)();
        Date.init()();
        UUID.uuidString.getter();
        uint64_t v87 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v86 = *((int *)v9 + 14);
        uint64_t v85 = *((int *)v9 + 15);
        unint64_t v38 = &v11[*((int *)v9 + 16)];
        *(void *)unint64_t v38 = 0;
        *((void *)v38 + 1) = 0;
        ((void (*)(char *, char *, uint64_t))v96._countAndFlagsBits)(v11, v16, v12);
        *(void *)&v11[*((int *)v9 + 5)] = v93;
        *(void *)&v11[*((int *)v9 + 6)] = v90;
        *(void *)&v11[*((int *)v9 + 7)] = v89;
        *(void *)&v11[*((int *)v9 + 8)] = v88;
        *(void *)&v11[*((int *)v9 + 9)] = v91;
        *(void *)&v11[*((int *)v9 + 10)] = v37;
        uint64_t v39 = &v11[*((int *)v9 + 11)];
        id v40 = v100;
        uint64_t v41 = v101;
        unsigned __int8 v42 = *(void (**)(char *, char *, void *))(v101 + 16);
        id v91 = (id)(v101 + 16);
        uint64_t v90 = v42;
        v42(v39, v8, v100);
        *(void *)&v11[*((int *)v9 + 12)] = v87;
        *(_DWORD *)&v11[*((int *)v9 + 13)] = v94;
        v11[v86] = 0;
        uint64_t v43 = (char *)v40;
        char v44 = v95;
        v11[v85] = 0;
        uint64_t v45 = *(void (**)(char *, char *))(v41 + 8);
        uint64_t v13 = (char *)(v41 + 8);
        uint64_t v101 = (uint64_t)v13;
        uint64_t v89 = v45;
        v45(v8, v43);
        uint64_t v47 = (void (*)(char *, uint64_t))*((void *)v44 + 1);
        uint64_t v46 = v44 + 8;
        id v93 = v47;
        v47(v16, v12);
        swift_bridgeObjectRelease();
        long long v88 = xmmword_100269B60;
        *(_OWORD *)unint64_t v38 = xmmword_100269B60;
        object = v92;
        sub_1001A1330((uint64_t)v11);

        sub_100196C78((uint64_t)v11);
        id v48 = [v104 snr];
        if (v48)
        {
          unint64_t v49 = v48;
          LODWORD(v87) = static os_log_type_t.default.getter();
          uint64_t v50 = swift_allocObject();
          int64_t v95 = v46;
          NSString v51 = (void *)v50;
          *(_OWORD *)(v50 + 16) = v81;
          id v52 = [v103 slotID];
          uint64_t v53 = 48;
          uint64_t v54 = v82;
          v51[7] = &type metadata for String;
          v51[8] = v54;
          if (v52 != (id)1) {
            uint64_t v53 = 49;
          }
          v51[4] = v53;
          v51[5] = 0xE100000000000000;
          uint64_t v55 = v79;
          v51[12] = v80;
          v51[13] = v55;
          v51[9] = v49;
          uint64_t v92 = v49;
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();
          uint64_t v56 = (void *)qword_1002E31D0;
          ((void (*)(char *, char *, uint64_t))v96._countAndFlagsBits)(v16, v18, v12);
          uint64_t v87 = v56;
          uint64_t v86 = NSString.init(stringLiteral:)();
          uint64_t v85 = NSString.init(stringLiteral:)();
          uint64_t v83 = NSString.init(stringLiteral:)();
          uint64_t v82 = NSString.init(stringLiteral:)();
          id v57 = [v92 description];
          *(void *)&long long v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();

          *(void *)&long long v81 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          uint64_t v58 = NSString.init(stringLiteral:)();
          Date.init()();
          UUID.uuidString.getter();
          uint64_t v84 = (uint64_t)String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          uint64_t v59 = *((int *)v9 + 15);
          uint64_t v80 = *((int *)v9 + 14);
          id v60 = &v11[*((int *)v9 + 16)];
          *(void *)id v60 = 0;
          *((void *)v60 + 1) = 0;
          ((void (*)(char *, char *, uint64_t))v96._countAndFlagsBits)(v11, v16, v12);
          *(void *)&v11[*((int *)v9 + 5)] = v86;
          *(void *)&v11[*((int *)v9 + 6)] = v85;
          *(void *)&v11[*((int *)v9 + 7)] = v83;
          *(void *)&v11[*((int *)v9 + 8)] = v82;
          *(void *)&v11[*((int *)v9 + 9)] = v81;
          *(void *)&v11[*((int *)v9 + 10)] = v58;
          uint64_t v13 = (char *)v100;
          v90(&v11[*((int *)v9 + 11)], v8, v100);
          *(void *)&v11[*((int *)v9 + 12)] = v84;
          *(_DWORD *)&v11[*((int *)v9 + 13)] = v94;
          v11[v80] = 0;
          v11[v59] = 0;
          v89(v8, v13);
          uint64_t v61 = v16;
          unint64_t v62 = v93;
          uint64_t v16 = v95;
          v93(v61, v12);
          swift_bridgeObjectRelease();
          *(_OWORD *)id v60 = v88;
          object = v87;
          sub_1001A1330((uint64_t)v11);

          sub_100196C78((uint64_t)v11);
          v62(v18, v12);
        }
        else
        {
          v93(v18, v12);
        }
      }
    }
LABEL_36:
    uint64_t v6 = (uint64_t)v97;
    uint64_t v9 = &selRef_hMNC;
    if (qword_1002D7B18 != -1) {
      swift_once();
    }
    uint64_t v11 = v103;
    if (*(unsigned char *)(qword_1002E31C8 + 24) == 1)
    {
      object = (void *)static os_log_type_t.default.getter();
      sub_100157064((uint64_t *)&unk_1002D97F0);
      uint64_t v16 = (char *)swift_allocObject();
      *((_OWORD *)v16 + 1) = xmmword_100267EF0;
      *((void *)v16 + 7) = v99;
      *((void *)v16 + 8) = sub_10015D788(&qword_1002D9698, &qword_1002DAE80);
      *((void *)v16 + 4) = v6;
      swift_bridgeObjectRetain();
      uint64_t v9 = &selRef_hMNC;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
    }
    id v64 = [a1 v9[344]];
    if (!v64)
    {
      long long v108 = 0u;
      long long v109 = 0u;
LABEL_50:
      uint64_t v68 = &v108;
LABEL_51:
      sub_10015D658((uint64_t)v68, (uint64_t *)&unk_1002D9680);
LABEL_52:
      if (v11) {
        goto LABEL_53;
      }
      goto LABEL_64;
    }
    object = v64;
    uint64_t v9 = (char **)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v65 = v9[2];
    if (v65)
    {
      sub_100196D64((uint64_t)&v9[4 * (void)v65], (uint64_t)&v108);
    }
    else
    {
      long long v108 = 0u;
      long long v109 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v109 + 1)) {
      goto LABEL_50;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_52;
    }
    object = (void *)v106;
    if (*(void *)(v106 + 16) && (unint64_t v66 = sub_1001EB868(0xD000000000000012, 0x800000010023BF30), (v67 & 1) != 0))
    {
      sub_100196D64(object[7] + 32 * v66, (uint64_t)&v106);
    }
    else
    {
      long long v106 = 0u;
      long long v107 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v107 + 1))
    {
      uint64_t v68 = &v106;
      goto LABEL_51;
    }
    sub_100197FC0(&v106, &v108);
    id v70 = [v104 snr];
    if (v70) {
      break;
    }
    sub_100157190((uint64_t)&v108);
    if (v11)
    {
LABEL_53:
      id v69 = v98;
      sub_100196F4C(v6, (uint64_t *)[v11 slotID]);
      swift_bridgeObjectRelease();

      return;
    }
LABEL_64:
    __break(1u);
LABEL_65:
    swift_once();
  }
  uint64_t v71 = v70;
  uint64_t v72 = v6;
  sub_100196D64((uint64_t)&v108, (uint64_t)&v106);
  sub_100167598(0, &qword_1002D9690);
  id v73 = v98;
  int v74 = swift_dynamicCast();
  if (!v11)
  {
LABEL_68:
    __break(1u);
    return;
  }
  int v75 = v74;
  id v76 = v105;
  id v77 = v71;
  sub_100196F4C(v72, (uint64_t *)[v11 slotID]);
  swift_bridgeObjectRelease();

  if (v75) {
    long long v78 = v76;
  }
  else {
    long long v78 = 0;
  }

  sub_100157190((uint64_t)&v108);
}

uint64_t destroy for CarrierInfoObject()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CarrierInfoObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CarrierInfoObject(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CarrierInfoObject(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for CarrierInfoObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CarrierInfoObject(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CarrierInfoObject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CarrierInfoObject()
{
  return &type metadata for CarrierInfoObject;
}

uint64_t sub_1001957AC()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001957E4()
{
}

uint64_t sub_100195808(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100195818()
{
  return swift_release();
}

unint64_t sub_100195820()
{
  unint64_t result = qword_1002DA560;
  if (!qword_1002DA560)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DA560);
  }
  return result;
}

uint64_t sub_100195878()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001958B0(void *a1, uint64_t a2)
{
}

uint64_t sub_1001958B8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001958F0(void *a1, uint64_t a2)
{
  return sub_1001901D4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001958F8(void *a1, uint64_t a2)
{
  return sub_100191010(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void *sub_100195900(uint64_t a1)
{
  return sub_100195918(a1, &qword_1002D96A8);
}

void *sub_10019590C(uint64_t a1)
{
  return sub_100195918(a1, (uint64_t *)&unk_1002D96B0);
}

void *sub_100195918(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    sub_100157064(a2);
    unint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1001959B8()
{
  swift_release();

  return _swift_deallocObject(v0, 36, 7);
}

void sub_1001959F8()
{
  sub_100192220(*(void *)(v0 + 16), *(void **)(v0 + 24), *(_DWORD *)(v0 + 32));
}

double sub_100195A04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1001EB868(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001EE344();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100197FC0((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1001FB424(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_100195B08@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001EB8E0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001EE52C();
      uint64_t v9 = v11;
    }
    sub_10019816C(*(void *)(v9 + 48) + 40 * v6);
    sub_100197FC0((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_1001FB5FC(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_100195C04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001EB868(a1, a2);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001EE714();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1001FB7C8(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100195CE4(uint64_t a1)
{
  unint64_t v2 = sub_1001E03F0((uint64_t)_swiftEmptyArrayStorage);
  if (qword_1002D7AC8 == -1) {
    goto LABEL_2;
  }
LABEL_107:
  swift_once();
LABEL_2:
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v42 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v43 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  int64_t v44 = 0;
  uint64_t v41 = 0;
  if (v5)
  {
LABEL_5:
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v44 << 6);
LABEL_6:
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (void *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v11 = v10[1];
    *(void *)&long long v48 = *v10;
    *((void *)&v48 + 1) = v11;
    sub_100196D64(v9 + 32 * v8, (uint64_t)v49);
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_107;
    }
    if (v12 < v43)
    {
      unint64_t v13 = *(void *)(v42 + 8 * v12);
      if (v13) {
        goto LABEL_10;
      }
      int64_t v14 = v44 + 2;
      ++v44;
      if (v12 + 1 < v43)
      {
        unint64_t v13 = *(void *)(v42 + 8 * v14);
        if (v13) {
          goto LABEL_13;
        }
        int64_t v44 = v12 + 1;
        if (v12 + 2 < v43)
        {
          unint64_t v13 = *(void *)(v42 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_10;
          }
          int64_t v14 = v12 + 3;
          int64_t v44 = v12 + 2;
          if (v12 + 3 < v43) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = 0;
    memset(v49, 0, sizeof(v49));
    long long v48 = 0u;
LABEL_25:
    sub_100197FD0((uint64_t)&v48, (uint64_t)&v50);
    uint64_t v15 = *((void *)&v50 + 1);
    if (!*((void *)&v50 + 1))
    {
      swift_release();
      if (v41 >= 1 && v40 >= 1)
      {
        *(void *)&long long v50 = v41;
        *(void *)&long long v50 = dispatch thunk of CustomStringConvertible.description.getter();
        *((void *)&v50 + 1) = v32;
        swift_bridgeObjectRetain();
        v33._countAndFlagsBits = 32;
        v33._object = (void *)0xE100000000000000;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        long long v34 = v50;
        *(void *)&long long v50 = v40;
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v37 = v36;
        long long v50 = v34;
        swift_bridgeObjectRetain();
        v38._countAndFlagsBits = v35;
        v38._object = v37;
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *((void *)&v51 + 1) = &type metadata for String;
        sub_100197FC0(&v50, &v48);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v46 = v2;
        sub_1001ED5C8(&v48, 1313688656, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
        unint64_t v2 = v46;
        swift_bridgeObjectRelease();
      }
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      return v2;
    }
    uint64_t v16 = v50;
    sub_100197FC0(&v51, &v48);
    if ((v16 != 0xD000000000000012 || v15 != 0x800000010023BFD0)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v16 == 0xD000000000000012 && v15 == 0x800000010023BF30
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v17 = sub_1001EB868(v16, v15);
        char v19 = v18;
        swift_bridgeObjectRelease();
        if (v19)
        {
          unint64_t v45 = v2;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1001EE344();
          }
          swift_bridgeObjectRelease();
          sub_100197FC0((_OWORD *)(*(void *)(v2 + 56) + 32 * v17), &v46);
          sub_1001FB424(v17, v2);
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v46 = 0u;
          long long v47 = 0u;
        }
        goto LABEL_37;
      }
      if (v16 == 0xD000000000000011 && v15 == 0x800000010023BFF0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        sub_100196D64((uint64_t)&v48, (uint64_t)&v46);
        if (swift_dynamicCast())
        {
          uint64_t v41 = v45;
          swift_bridgeObjectRetain();
          uint64_t v22 = "kCTCellMonitorRSRP";
          goto LABEL_61;
        }
      }
      if (v16 == 0xD000000000000011 && v15 == 0x800000010023C010
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        sub_100196D64((uint64_t)&v48, (uint64_t)&v46);
        if (swift_dynamicCast())
        {
          uint64_t v40 = v45;
          swift_bridgeObjectRetain();
          uint64_t v22 = "kCTCellMonitorMCC";
LABEL_61:
          unint64_t v23 = sub_1001EB868(0xD000000000000011, (unint64_t)v22 | 0x8000000000000000);
          char v25 = v24;
          swift_bridgeObjectRelease();
          if (v25)
          {
            unint64_t v45 = v2;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1001EE344();
            }
            swift_bridgeObjectRelease();
            sub_100197FC0((_OWORD *)(*(void *)(v2 + 56) + 32 * v23), &v46);
            sub_1001FB424(v23, v2);
LABEL_37:
            swift_bridgeObjectRelease();
          }
          else
          {
            long long v46 = 0u;
            long long v47 = 0u;
          }
          sub_10015D658((uint64_t)&v46, (uint64_t *)&unk_1002D9680);
          goto LABEL_39;
        }
      }
      sub_100196D64((uint64_t)&v48, (uint64_t)&v46);
      swift_bridgeObjectRetain();
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v45 = v2;
      sub_1001ED5C8(&v46, v16, v15, v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
LABEL_39:
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    if (v16 == 0xD000000000000017 && v15 == 0x800000010023C030
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v20 = 0xD000000000000017;
      unint64_t v21 = 0x800000010023C030;
      goto LABEL_81;
    }
    if (v16 == 0xD000000000000018 && v15 == 0x800000010023C050
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v20 = 0xD000000000000018;
      unint64_t v21 = 0x800000010023C050;
      goto LABEL_81;
    }
    if (v16 == 0xD000000000000016 && v15 == 0x8000000100239A40
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v20 = 0xD000000000000016;
      unint64_t v21 = 0x8000000100239A40;
      goto LABEL_81;
    }
    if (v16 == 0xD00000000000001BLL && v15 == 0x800000010023C070
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v20 = 0xD00000000000001BLL;
      unint64_t v21 = 0x800000010023C070;
      goto LABEL_81;
    }
    if (v16 == 0xD000000000000013 && v15 == 0x800000010023C090
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v20 = 0xD000000000000013;
      unint64_t v21 = 0x800000010023C090;
      goto LABEL_81;
    }
    if (v16 == 0xD000000000000012 && v15 == 0x800000010023C0B0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v27 = "kCTCellMonitorCsgId";
      goto LABEL_79;
    }
    if (v16 == 0xD000000000000018 && v15 == 0x800000010023C0D0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v20 = 0xD000000000000018;
      unint64_t v21 = 0x800000010023C0D0;
      goto LABEL_81;
    }
    if (v16 == 0xD000000000000012 && v15 == 0x800000010023C0F0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v27 = "kCTCellMonitorThroughput";
LABEL_79:
      unint64_t v21 = (unint64_t)v27 | 0x8000000000000000;
LABEL_80:
      uint64_t v20 = 0xD000000000000012;
LABEL_81:
      unint64_t v28 = sub_1001EB868(v20, v21);
      char v30 = v29;
      swift_bridgeObjectRelease();
      if (v30)
      {
        unint64_t v45 = v2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1001EE344();
        }
        swift_bridgeObjectRelease();
        sub_100197FC0((_OWORD *)(*(void *)(v2 + 56) + 32 * v28), &v46);
        sub_1001FB424(v28, v2);
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v46 = 0u;
        long long v47 = 0u;
      }
      sub_10015D658((uint64_t)&v46, (uint64_t *)&unk_1002D9680);
      goto LABEL_87;
    }
    if (v16 == 0xD000000000000012 && v15 == 0x800000010023C110)
    {
      swift_bridgeObjectRelease();
LABEL_101:
      swift_bridgeObjectRetain();
      unint64_t v21 = 0x800000010023C110;
      goto LABEL_80;
    }
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_101;
    }
LABEL_87:
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    uint64_t result = sub_100157190((uint64_t)&v48);
    if (v5) {
      goto LABEL_5;
    }
  }
  unint64_t v13 = *(void *)(v42 + 8 * v14);
  if (v13)
  {
LABEL_13:
    int64_t v12 = v14;
LABEL_10:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v8 = __clz(__rbit64(v13)) + (v12 << 6);
    int64_t v44 = v12;
    goto LABEL_6;
  }
  while (1)
  {
    int64_t v12 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v12 >= v43)
    {
      int64_t v44 = v43 - 1;
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v42 + 8 * v12);
    ++v14;
    if (v13) {
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100196884(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v42 = v2;
  uint64_t v46 = *(void *)(v2 - 8);
  uint64_t v3 = v46;
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v44 = v5;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  uint64_t v41 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Metric(0);
  uint64_t v9 = (int *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  int64_t v12 = *(void **)(a1 + v9[7]);
  unint64_t v13 = *(void **)(a1 + v9[8]);
  int64_t v14 = *(void **)(a1 + v9[9]);
  uint64_t v15 = v9[12];
  id v38 = *(id *)(a1 + v9[11]);
  id v39 = v12;
  id v40 = *(id *)(a1 + v15);
  uint64_t v16 = a1 + v9[13];
  int64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v43(v5, v16, v2);
  uint64_t v17 = v9[15];
  id v36 = *(id *)(a1 + v9[14]);
  int v45 = *(_DWORD *)(a1 + v17);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;
  id v24 = v14;
  id v39 = v39;
  id v37 = v13;
  id v38 = v38;
  id v25 = v40;
  id v40 = v36;
  LODWORD(v36) = sub_1001AA4C8(v18, v20, v21, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = v9[16];
  uint64_t v35 = v9[17];
  uint64_t v27 = &v11[v9[18]];
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v28 = v47;
  uint64_t v29 = v48;
  char v30 = v41;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v11, v41, v48);
  *(void *)&v11[v9[7]] = v39;
  *(void *)&v11[v9[8]] = v37;
  *(void *)&v11[v9[9]] = v24;
  *(void *)&v11[v9[10]] = v24;
  *(void *)&v11[v9[11]] = v38;
  *(void *)&v11[v9[12]] = v25;
  char v31 = v44;
  uint64_t v32 = v42;
  v43(&v11[v9[13]], (uint64_t)v44, v42);
  *(void *)&v11[v9[14]] = v40;
  *(_DWORD *)&v11[v9[15]] = v45;
  v11[v26] = v36 & 1;
  v11[v35] = 0;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v29);
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v27 = xmmword_100269B60;
  if (qword_1002D7B20 != -1) {
    swift_once();
  }
  id v33 = (id)qword_1002E31D0;
  sub_1001A1330((uint64_t)v11);

  sub_100191ECC(1, 0, (uint64_t)v11);
  return sub_100196C78((uint64_t)v11);
}

uint64_t sub_100196C78(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Metric(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100196CD4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 52, 7);
}

uint64_t sub_100196D14(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100167598(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100196D64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100196DC0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100196E00()
{
  return sub_1001916F4(*(void **)(v0 + 16), *(uint64_t (**)(id, void))(v0 + 24));
}

uint64_t sub_100196E0C()
{
  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100196E4C()
{
  return sub_1001914C8(*(void *)(v0 + 16), *(uint64_t (**)(void, uint64_t))(v0 + 24));
}

uint64_t sub_100196E58()
{
  return sub_10018FFE4(*(void *)(v0 + 16));
}

uint64_t sub_100196E60()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100196EA0()
{
  return sub_1001905A0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100196EAC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100196EEC(void *a1, uint64_t a2)
{
  return sub_10019071C(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100196EF8()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100196F40()
{
  sub_100190ADC(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(uint64_t **)(v0 + 40));
}

uint64_t sub_100196F4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v74 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v83 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  id v73 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for DispatchQoS();
  uint64_t v82 = *(char **)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v72 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v88 = (long long *)type metadata accessor for Date();
  uint64_t v6 = *((void *)v88 - 1);
  __chkstk_darwin(v88);
  uint64_t v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Metric(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v89) = a2 != (uint64_t *)1;
  if (qword_1002D7AC8 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    if (qword_1002D7B20 != -1) {
      swift_once();
    }
    id v12 = (id)qword_1002E31D0;
    sub_10019FD84(a1, (void *)(a2 != (uint64_t *)1));

    a1 = sub_100195CE4(a1);
    a2 = (uint64_t *)qword_1002E3178;
    static os_log_type_t.default.getter();
    uint64_t result = os_log(_:dso:log:type:_:)();
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a1 + 64);
    unint64_t v85 = a1 + 64;
    uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = -1;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    unint64_t v18 = v17 & v15;
    uint64_t v87 = v93;
    uint64_t v19 = (void (**)(char *, long long *))(v6 + 8);
    uint64_t v86 = (char *)((unint64_t)(v16 + 63) >> 6);
    long long v81 = v86 - 1;
    uint64_t v84 = (uint64_t)"CellularLteOtaMsg";
    uint64_t v6 = 0x800000010023A600;
    if ((v17 & v15) == 0) {
      break;
    }
    while (1)
    {
      unint64_t v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v23 = v22 | (v14 << 6);
LABEL_10:
      uint64_t v24 = *(void *)(a1 + 56);
      id v25 = (void *)(*(void *)(a1 + 48) + 16 * v23);
      uint64_t v26 = v25[1];
      *(void *)&long long v92 = *v25;
      *((void *)&v92 + 1) = v26;
      sub_100196D64(v24 + 32 * v23, (uint64_t)v87);
      swift_bridgeObjectRetain();
LABEL_29:
      sub_100197FD0((uint64_t)&v92, (uint64_t)&aBlock);
      char v30 = (void *)*((void *)&aBlock + 1);
      if (!*((void *)&aBlock + 1)) {
        break;
      }
      uint64_t v20 = aBlock;
      sub_100197FC0(&v95, &v92);
      Date.init()();
      uint64_t v21 = v20;
      a2 = v79;
      sub_1001918A4((void *)0x544152, (void *)0xE300000000000000, 0xD000000000000011, v21, v30, &v92, v89, (uint64_t)v11, v8);
      swift_bridgeObjectRelease();
      (*v19)(v8, v88);
      sub_100196884((uint64_t)v11);
      sub_100196C78((uint64_t)v11);
      uint64_t result = sub_100157190((uint64_t)&v92);
      if (!v18) {
        goto LABEL_11;
      }
    }
    swift_release();
    id v31 = [self defaultCenter];
    if (qword_1002D7AD8 != -1) {
      swift_once();
    }
    uint64_t v32 = static NSNotificationName.NewCTMetric;
    sub_100157064(&qword_1002D9618);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100267EF0;
    strcpy((char *)&aBlock, "metricObject");
    BYTE13(aBlock) = 0;
    HIWORD(aBlock) = -5120;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for MetricNotificationObject;
    uint64_t v34 = swift_allocObject();
    *(void *)(inited + 72) = v34;
    *(void *)(v34 + 16) = 5521746;
    *(void *)(v34 + 24) = 0xE300000000000000;
    unint64_t v35 = v84 | 0x8000000000000000;
    *(void *)(v34 + 32) = 0xD000000000000011;
    *(void *)(v34 + 40) = v35;
    unint64_t v71 = v35;
    *(_DWORD *)(v34 + 48) = v89;
    sub_1001E02AC(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 postNotificationName:v32 object:0 userInfo:isa];

    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    id v37 = (uint64_t *)((char *)v79 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray);
    uint64_t result = swift_beginAccess();
    int v75 = v37;
    uint64_t v70 = *(void *)(*v37 + 16);
    if (!v70) {
      return result;
    }
    unint64_t v38 = 0;
    uint64_t v89 = *(uint64_t *)((char *)v79 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_persistanceStore);
    long long v88 = &v95;
    uint64_t v87 = (_OWORD *)(v83 + 8);
    uint64_t v86 = v82 + 8;
    uint64_t v39 = 96;
    uint64_t v11 = v72;
    while (1)
    {
      a2 = v75;
      swift_beginAccess();
      a1 = *a2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = a1;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        a1 = (uint64_t)sub_1001B4A7C((void *)a1);
        *int v75 = a1;
      }
      if (v38 >= *(void *)(a1 + 16)) {
        break;
      }
      a2 = *(uint64_t **)(a1 + v39);
      *(void *)(a1 + v39) = _swiftEmptyArrayStorage;
      swift_endAccess();
      swift_bridgeObjectRelease();
      if (v38 == 0x80000000) {
        goto LABEL_41;
      }
      unint64_t v77 = v38 + 1;
      uint64_t v41 = swift_allocObject();
      uint64_t v42 = v79;
      *(void *)(v41 + 16) = v79;
      *(void *)(v41 + 24) = v38;
      id v76 = v42;
      uint64_t v43 = sub_1001DDCAC();
      uint64_t v44 = swift_allocObject();
      uint64_t v78 = v39;
      uint64_t v45 = v44;
      *(void *)(v44 + 16) = sub_100198038;
      *(void *)(v44 + 24) = v41;
      uint64_t v82 = *(char **)(v43 + 24);
      uint64_t v46 = swift_allocObject();
      int v47 = v38;
      unint64_t v80 = v38;
      uint64_t v48 = v46;
      swift_weakInit();
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = v48;
      *(void *)(v49 + 24) = 5521746;
      *(void *)(v49 + 32) = 0xE300000000000000;
      *(void *)(v49 + 40) = 0xD000000000000011;
      *(void *)(v49 + 48) = v71;
      *(void *)(v49 + 56) = 0;
      *(void *)(v49 + 64) = 0xE000000000000000;
      *(_DWORD *)(v49 + 72) = v47;
      *(void *)(v49 + 80) = sub_10015E118;
      *(void *)(v49 + 88) = v45;
      Swift::String v96 = sub_10019807C;
      uint64_t v97 = v49;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v95 = sub_1001E0068;
      *((void *)&v95 + 1) = &unk_10028CB50;
      long long v50 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v91 = _swiftEmptyArrayStorage;
      unint64_t v85 = sub_100195820();
      uint64_t v83 = sub_100157064((uint64_t *)&unk_1002D9600);
      uint64_t v84 = sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
      long long v51 = v73;
      uint64_t v52 = v74;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v50);
      uint64_t v82 = *(char **)v87;
      ((void (*)(char *, uint64_t))v82)(v51, v52);
      long long v81 = *(char **)v86;
      ((void (*)(char *, uint64_t))v81)(v11, v90);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v53 = swift_allocObject();
      uint64_t v54 = v76;
      unint64_t v55 = v80;
      *(void *)(v53 + 16) = v76;
      *(void *)(v53 + 24) = v55;
      id v76 = v54;
      sub_1001DDCAC();
      uint64_t v56 = swift_allocObject();
      *(void *)(v56 + 16) = sub_100198080;
      *(void *)(v56 + 24) = v53;
      uint64_t v57 = swift_allocObject();
      swift_weakInit();
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v57;
      *(void *)(v58 + 24) = 5521746;
      *(void *)(v58 + 32) = 0xE300000000000000;
      strcpy((char *)(v58 + 40), "Active Bands");
      *(unsigned char *)(v58 + 53) = 0;
      *(_WORD *)(v58 + 54) = -5120;
      *(void *)(v58 + 56) = 0;
      *(void *)(v58 + 64) = 0xE000000000000000;
      *(_DWORD *)(v58 + 72) = v55;
      *(void *)(v58 + 80) = sub_100198634;
      *(void *)(v58 + 88) = v56;
      Swift::String v96 = sub_10019807C;
      uint64_t v97 = v58;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v95 = sub_1001E0068;
      *((void *)&v95 + 1) = &unk_10028CBF0;
      uint64_t v59 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v91 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v59);
      ((void (*)(char *, uint64_t))v82)(v51, v52);
      ((void (*)(char *, uint64_t))v81)(v11, v90);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v60 = swift_allocObject();
      uint64_t v61 = v76;
      unint64_t v62 = v80;
      *(void *)(v60 + 16) = v76;
      *(void *)(v60 + 24) = v62;
      unint64_t v63 = v61;
      uint64_t v64 = sub_1001DDCAC();
      uint64_t v65 = swift_allocObject();
      *(void *)(v65 + 16) = sub_1001980C4;
      *(void *)(v65 + 24) = v60;
      uint64_t v8 = *(char **)(v64 + 24);
      uint64_t v6 = swift_allocObject();
      swift_weakInit();
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = v6;
      *(void *)(v66 + 24) = 5521746;
      *(void *)(v66 + 32) = 0xE300000000000000;
      *(void *)(v66 + 40) = 0x6574726F70707553;
      *(void *)(v66 + 48) = 0xEF73646E61422064;
      *(void *)(v66 + 56) = 0;
      *(void *)(v66 + 64) = 0xE000000000000000;
      *(_DWORD *)(v66 + 72) = v62;
      *(void *)(v66 + 80) = sub_100198634;
      *(void *)(v66 + 88) = v65;
      Swift::String v96 = sub_10019807C;
      uint64_t v97 = v66;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v95 = sub_1001E0068;
      *((void *)&v95 + 1) = &unk_10028CC90;
      char v67 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v91 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v67);
      ((void (*)(char *, uint64_t))v82)(v51, v52);
      ((void (*)(char *, uint64_t))v81)(v11, v90);
      uint64_t v68 = v78;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      uint64_t v39 = v68 + 88;
      unint64_t v38 = v77;
      if (v70 == v77) {
        return result;
      }
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
  }
LABEL_11:
  uint64_t v27 = v14 + 1;
  if (__OFADD__(v14, 1)) {
    goto LABEL_42;
  }
  if (v27 >= (uint64_t)v86) {
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v85 + 8 * v27);
  if (v28)
  {
LABEL_14:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v23 = __clz(__rbit64(v28)) + (v27 << 6);
    uint64_t v14 = v27;
    goto LABEL_10;
  }
  uint64_t v29 = v14 + 2;
  ++v14;
  if (v27 + 1 >= (uint64_t)v86) {
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v85 + 8 * v29);
  if (v28)
  {
LABEL_17:
    uint64_t v27 = v29;
    goto LABEL_14;
  }
  uint64_t v14 = v27 + 1;
  if (v27 + 2 >= (uint64_t)v86) {
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v85 + 8 * (v27 + 2));
  if (v28)
  {
    v27 += 2;
    goto LABEL_14;
  }
  uint64_t v29 = v27 + 3;
  uint64_t v14 = v27 + 2;
  if (v27 + 3 >= (uint64_t)v86)
  {
LABEL_28:
    unint64_t v18 = 0;
    memset(v93, 0, sizeof(v93));
    long long v92 = 0u;
    goto LABEL_29;
  }
  unint64_t v28 = *(void *)(v85 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= (uint64_t)v86)
    {
      uint64_t v14 = (uint64_t)v81;
      goto LABEL_28;
    }
    unint64_t v28 = *(void *)(v85 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

_OWORD *sub_100197FC0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100197FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D96A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100198038(uint64_t a1, uint64_t a2)
{
  return sub_100192E94(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100198040()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100198080(uint64_t a1, uint64_t a2)
{
  return sub_1001930F4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10019808C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001980C4(uint64_t a1, uint64_t a2)
{
  return sub_1001932E8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001980D0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100198128()
{
  return sub_1001E6444(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned int *)(v0 + 72), *(void (**)(void, uint64_t))(v0 + 80), *(void *)(v0 + 88));
}

void sub_100198164(uint64_t a1)
{
  sub_1001934DC(a1, *(void *)(v1 + 16));
}

uint64_t sub_10019816C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001981C0(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)result;
  if (qword_1002D7B18 != -1) {
    uint64_t result = swift_once();
  }
  if (*(unsigned char *)(qword_1002E31C8 + 26) == 1)
  {
    if (qword_1002D7AC8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100269950;
    id v6 = v4;
    sub_100157064(&qword_1002D96C0);
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v9 = v8;
    *(void *)(v5 + 56) = &type metadata for String;
    unint64_t v10 = sub_100181588();
    *(void *)(v5 + 64) = v10;
    *(void *)(v5 + 32) = v7;
    *(void *)(v5 + 40) = v9;
    type metadata accessor for CTDataConnectionType(0);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v5 + 96) = &type metadata for String;
    *(void *)(v5 + 104) = v10;
    *(void *)(v5 + 72) = v11;
    *(void *)(v5 + 80) = v12;
    id v13 = a3;
    sub_100157064(&qword_1002D96C8);
    uint64_t v14 = String.init<A>(describing:)();
    *(void *)(v5 + 136) = &type metadata for String;
    *(void *)(v5 + 144) = v10;
    *(void *)(v5 + 112) = v14;
    *(void *)(v5 + 120) = v15;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100198378()
{
  if (qword_1002D7AC8 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client);
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v4[4] = sub_1001958B0;
  v4[5] = v2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_1001901D0;
  v4[3] = &unk_10028CD30;
  uint64_t v3 = _Block_copy(v4);
  swift_release();
  [v1 getSubscriptionInfo:v3];
  _Block_release(v3);
}

uint64_t sub_1001984C4()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10019850C(void *a1, uint64_t a2)
{
  return sub_100193F08(a1, a2, v2[2], v2[3], v2[4]);
}

void sub_100198518(uint64_t a1)
{
  sub_10019E4C8(a1, v1);
}

uint64_t sub_100198520()
{
  return _swift_deallocObject(v0, 48, 7);
}

void sub_100198570()
{
  sub_1001942CC(*(void **)(v0 + 16), *(void **)(v0 + 24), *(char **)(v0 + 32), *(void *)(v0 + 40));
}

id sub_100198638()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___activityIndicator;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___activityIndicator);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___activityIndicator);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UIActivityIndicatorView) initWithActivityIndicatorStyle:101];
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [self colorNamed:v5];

    [v4 setColor:v6];
    [v4 setHidesWhenStopped:1];
    [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

id sub_100198740()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___loadingLabel;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___loadingLabel);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___loadingLabel);
  }
  else
  {
    id v4 = sub_1001987A4();
    NSString v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1001987A4()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setText:v1];

  [v0 setTextAlignment:0];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self colorNamed:v2];

  [v0 setTextColor:v3];
  id v4 = [self systemFontOfSize:18.0 weight:UIFontWeightMedium];
  [v0 setFont:v4];

  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setHidden:1];
  return v0;
}

id sub_100198918(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v6[OBJC_IVAR____TtC13FTMInternal_411LoadingView_shouldHideLoadingView] = 1;
  *(void *)&v6[OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___activityIndicator] = 0;
  *(void *)&v6[OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___loadingLabel] = 0;
  uint64_t v14 = &v6[OBJC_IVAR____TtC13FTMInternal_411LoadingView_loadingLabelText];
  *uint64_t v14 = a1;
  v14[1] = a2;
  v42.receiver = v6;
  v42.super_class = ObjectType;
  id v15 = [super initWithFrame:a3, a4, a5, a6];
  id v16 = sub_100198638();
  [v15 addSubview:v16];

  id v17 = v15;
  id v18 = sub_100198740();
  [v17 addSubview:v18];

  uint64_t v19 = self;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100267EC0;
  id v21 = sub_100198638();
  id v22 = [v21 centerYAnchor];

  id v23 = [v17 centerYAnchor];
  id v24 = [v22 constraintEqualToAnchor:v23];

  *(void *)(v20 + 32) = v24;
  id v25 = sub_100198638();
  id v26 = [v25 centerXAnchor];

  id v27 = [v17 centerXAnchor];
  id v28 = [v26 constraintEqualToAnchor:v27];

  *(void *)(v20 + 40) = v28;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v19 activateConstraints:isa];

  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100267EC0;
  id v31 = sub_100198740();
  id v32 = [v31 topAnchor];

  id v33 = sub_100198638();
  id v34 = [v33 bottomAnchor];

  id v35 = [v32 constraintEqualToAnchor:v34 constant:5.0];
  *(void *)(v30 + 32) = v35;
  id v36 = sub_100198740();
  id v37 = [v36 centerXAnchor];

  id v38 = [v17 centerXAnchor];
  id v39 = [v37 constraintEqualToAnchor:v38];

  *(void *)(v30 + 40) = v39;
  specialized Array._endMutation()();
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v19 activateConstraints:v40];

  return v17;
}

id sub_100198D7C()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_411LoadingView_shouldHideLoadingView;
  v0[OBJC_IVAR____TtC13FTMInternal_411LoadingView_shouldHideLoadingView] = 0;
  id v2 = sub_100198638();
  [v2 setHidden:v0[v1]];

  id v3 = sub_100198740();
  [v3 setHidden:v0[v1]];

  id v4 = sub_100198740();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setText:v5];

  id v6 = sub_100198638();
  [v6 startAnimating];

  return [v0 setHidden:0];
}

uint64_t type metadata accessor for LoadingView()
{
  return self;
}

id sub_100198F0C(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double a6, double a7)
{
  sub_10015714C(a1, a1[3]);
  uint64_t v14 = _bridgeAnythingToObjectiveC<A>(_:)();
  uint64_t v15 = a4[3];
  if (v15)
  {
    id v16 = sub_10015714C(a4, a4[3]);
    uint64_t v24 = a5;
    uint64_t v25 = a2;
    uint64_t v17 = a3;
    uint64_t v18 = *(void *)(v15 - 8);
    __chkstk_darwin(v16);
    uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v18 + 16))(v20);
    uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v15);
    a3 = v17;
    a5 = v24;
    a2 = v25;
    sub_100157190((uint64_t)a4);
  }
  else
  {
    uint64_t v21 = 0;
  }
  id v22 = [(id)swift_getObjCClassFromMetadata() constraintWithItem:v14 attribute:a2 relatedBy:a3 toItem:v21 attribute:a5 multiplier:a6 constant:a7];
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_100157190((uint64_t)a1);
  return v22;
}

void sub_1001990E0()
{
  qword_1002E31B8 = 0x4048000000000000;
}

void sub_1001990F0()
{
  qword_1002E31C0 = 0x4049000000000000;
}

void sub_100199128()
{
  uint64_t v1 = v0;
  v36.receiver = v0;
  v36.super_class = (Class)type metadata accessor for TickerViewController();
  [super viewDidLoad];
  id v2 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_420TickerViewController_collectionView];
  id v3 = self;
  id v4 = [v3 whiteColor];
  [v2 setBackgroundColor:v4];

  [v2 setDelegate:v1];
  [v2 setDataSource:v1];
  type metadata accessor for TickerColumnCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v6 = String._bridgeToObjectiveC()();
  [v2 registerClass:ObjCClassFromMetadata forCellWithReuseIdentifier:v6];

  id v7 = [v1 view];
  if (!v7)
  {
    __break(1u);
    goto LABEL_13;
  }
  id v8 = v7;
  [v7 addSubview:v2];

  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v9 = [v1 view];
  if (!v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v10 = v9;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100268000;
  id v12 = [v2 centerXAnchor];
  id v13 = [v1 view];
  if (!v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = v13;
  id v15 = [v13 centerXAnchor];

  id v16 = [v12 constraintEqualToAnchor:v15];
  *(void *)(v11 + 32) = v16;
  id v17 = [v2 centerYAnchor];
  id v18 = [v1 view];
  if (!v18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v19 = v18;
  id v20 = [v18 centerYAnchor];

  id v21 = [v17 constraintEqualToAnchor:v20];
  *(void *)(v11 + 40) = v21;
  sub_100167598(0, (unint64_t *)&qword_1002D9800);
  uint64_t v22 = sub_100167598(0, &qword_1002D9808);
  uint64_t v35 = v22;
  v34[0] = v2;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v23 = qword_1002D7B10;
  id v24 = v2;
  if (v23 != -1) {
    swift_once();
  }
  *(void *)(v11 + 48) = sub_100198F0C(v34, 8, 0, &v32, 0, 1.0, *(double *)&qword_1002E31C0);
  uint64_t v35 = v22;
  v34[0] = v24;
  id v25 = v24;
  id v26 = [v1 view:v32, v33];
  if (v26)
  {
    id v27 = v26;
    *((void *)&v33 + 1) = sub_100167598(0, qword_1002D9810);
    *(void *)&long long v32 = v27;
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  *(void *)(v11 + 56) = sub_100198F0C(v34, 7, 0, &v32, 7, 1.0, 0.0);
  v34[0] = v11;
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 addConstraints:isa v32];

  id v29 = [v1 view];
  if (v29)
  {
    uint64_t v30 = v29;
    id v31 = [v3 whiteColor];
    [v30 setBackgroundColor:v31];

    return;
  }
LABEL_16:
  __break(1u);
}

uint64_t sub_100199644(double a1)
{
  uint64_t v41 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v41 - 8);
  uint64_t v4 = __chkstk_darwin(v41);
  NSString v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v8 = (char *)&v39 - v7;
  *(double *)(v1 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_numberValue) = a1;
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100267EF0;
  *(void *)(v9 + 56) = &type metadata for Double;
  *(void *)(v9 + 64) = &protocol witness table for Double;
  *(double *)(v9 + 32) = a1;
  uint64_t v10 = String.init(format:_:)();
  uint64_t v43 = v1;
  uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue);
  *uint64_t v11 = v10;
  v11[1] = v12;
  swift_bridgeObjectRelease();
  unint64_t v13 = v11[1];
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = *v11 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v47 = *v11;
  unint64_t v48 = v13;
  uint64_t v49 = 0;
  uint64_t v50 = v14;
  uint64_t v42 = OBJC_IVAR____TtC13FTMInternal_420TickerViewController_collectionView;
  swift_bridgeObjectRetain();
  if (!(unint64_t)String.Iterator.next()().value._object) {
    return swift_bridgeObjectRelease();
  }
  uint64_t result = 0;
  Class v40 = (void (**)(char *, uint64_t))(v3 + 8);
  while (1)
  {
    uint64_t v19 = result + 1;
    if (__OFADD__(result, 1)) {
      break;
    }
    IndexPath.init(item:section:)();
    id v20 = *(void **)(v43 + v42);
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v22 = [v20 cellForItemAtIndexPath:isa];

    if (!v22) {
      goto LABEL_34;
    }
    type metadata accessor for TickerColumnCell();
    uint64_t v23 = swift_dynamicCastClass();
    if (!v23)
    {

LABEL_34:
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    uint64_t v24 = v23;
    uint64_t v44 = v19;
    id v25 = v6;
    id v26 = *(void **)(v23 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_characters);
    uint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    Character.write<A>(to:)();
    swift_bridgeObjectRelease();
    unint64_t v27 = v46;
    uint64_t v28 = v26[2];
    if (!v28) {
      goto LABEL_32;
    }
    uint64_t v29 = v45;
    BOOL v30 = v26[4] == v45 && v26[5] == v46;
    if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v28 == 1) {
        goto LABEL_32;
      }
      BOOL v33 = v26[6] == v29 && v26[7] == v27;
      if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        id v34 = v26 + 9;
        uint64_t v35 = 2;
        while (v28 != v35)
        {
          uint64_t v36 = v35;
          if (*(v34 - 1) != v29 || *v34 != v27)
          {
            char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v35 = v36 + 1;
            v34 += 2;
            if ((v38 & 1) == 0) {
              continue;
            }
          }
          goto LABEL_15;
        }
LABEL_32:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_35:
        (*v40)(v8, v41);
        return swift_bridgeObjectRelease();
      }
    }
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v6 = v25;
    IndexPath.init(item:section:)();
    if ((*(unsigned char *)(v24 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_isScrolling) & 1) == 0)
    {
      id v31 = *(id *)(v24 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView);
      Class v32 = IndexPath._bridgeToObjectiveC()().super.isa;
      [v31 scrollToRowAtIndexPath:v32 atScrollPosition:2 animated:1];
    }
    uint64_t v16 = v41;
    id v17 = *v40;
    (*v40)(v25, v41);
    v17(v8, v16);
    object = String.Iterator.next()().value._object;
    uint64_t result = v44;
    if (!object) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

id sub_100199AB0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TickerViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for TickerViewController()
{
  return self;
}

id sub_100199D94(void *a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v5 = [a1 dequeueReusableCellWithReuseIdentifier:v3 forIndexPath:isa];

  type metadata accessor for TickerColumnCell();
  uint64_t v6 = swift_dynamicCastClass();
  if (v6)
  {
    uint64_t v7 = v6;
    swift_bridgeObjectRetain();
    IndexPath.row.getter();
    String.index(_:offsetBy:)();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    Character.write<A>(to:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_numericAlphabet);
    if ((sub_1001C3D40(0, 0xE000000000000000, (void *)v8) & 1) == 0)
    {
      sub_100157064(&qword_1002D97E0);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_100267EF0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 40) = 0xE000000000000000;
      char v15 = (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0;
LABEL_12:
      *(unsigned char *)(v7 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_size) = v15;
      *(void *)(v7 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_characters) = v8;
      swift_bridgeObjectRelease();
      [*(id *)(v7 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView) reloadData];
      return (id)v7;
    }
    swift_bridgeObjectRelease();
    sub_100157064(&qword_1002D97E8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100269B50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = String.count.getter();
    id result = (id)swift_bridgeObjectRelease();
    if (__OFSUB__(v10, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(inited + 32) = v10 - 1;
      swift_bridgeObjectRetain();
      uint64_t v12 = String.count.getter();
      id result = (id)swift_bridgeObjectRelease();
      if (!__OFSUB__(v12, 2))
      {
        *(void *)(inited + 40) = v12 - 2;
        uint64_t v13 = IndexPath.row.getter();
        char v14 = sub_1001C3E08(v13, inited);
        swift_setDeallocating();
        if (v14) {
          char v15 = 1;
        }
        else {
          char v15 = 2;
        }
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {

    id v16 = objc_allocWithZone((Class)UICollectionViewCell);
    return [v16 init];
  }
  return result;
}

void sub_10019A1B8()
{
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_420TickerViewController_numericAlphabet] = &off_100288E70;
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_420TickerViewController_collectionView;
  id v2 = [objc_allocWithZone((Class)UICollectionViewFlowLayout) init];
  [v2 setScrollDirection:1];
  [v2 setMinimumInteritemSpacing:0.0];
  [v2 setMinimumLineSpacing:0.0];
  id v3 = [objc_allocWithZone((Class)UICollectionView) initWithFrame:v2 collectionViewLayout:0.0, 0.0, 0.0, 0.0];

  *(void *)&v0[v1] = v3;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10019A2C8()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t result = IndexPath.row.getter();
  if (!result)
  {
LABEL_6:
    if (qword_1002D7B08 == -1) {
      return result;
    }
    return swift_once();
  }
  if (__OFSUB__(v0, 1))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v0 - 1 == result) {
    goto LABEL_6;
  }
  if (__OFSUB__(v0, 2)) {
    goto LABEL_12;
  }
  if (v0 - 2 == result) {
    goto LABEL_6;
  }
  if (__OFSUB__(v0, 3))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (qword_1002D7B08 != -1) {
    return swift_once();
  }
  return result;
}

void sub_10019A3CC(void *a1)
{
  swift_bridgeObjectRetain();
  uint64_t v2 = String.count.getter();
  swift_bridgeObjectRelease();
  if (__OFSUB__(v2, 4))
  {
    __break(1u);
  }
  else
  {
    id v3 = [a1 layer];
    [v3 frame];
  }
}

uint64_t sub_10019A49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t type metadata accessor for SMultiselectionPicker(uint64_t a1, uint64_t a2)
{
  return _swift_getGenericMetadata(a1, a2, &nominal type descriptor for SMultiselectionPicker);
}

uint64_t sub_10019A4D4()
{
  return sub_10019D0C8();
}

uint64_t sub_10019A4EC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  char v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  Class v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  BOOL v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v12 = (char *)&v26 - v11;
  __chkstk_darwin(v10);
  char v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  __chkstk_darwin(v15);
  id v17 = (char *)&v26 - v16;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  if (!v18) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v19 = v18;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v32 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v19);
  uint64_t v36 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    id v34 = (void (**)(char *))(v33 + 2);
    uint64_t v35 = v14;
    ++v33;
    while (1)
    {
      id v21 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      id v22 = v12;
      uint64_t v23 = v12;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v19;
      uint64_t v12 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

uint64_t sub_10019A8EC()
{
  type metadata accessor for Set();
  type metadata accessor for Binding();
  Binding.projectedValue.getter();
  return v1;
}

uint64_t sub_10019A950@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_100157104(&qword_1002D98A0);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v19 = *(_OWORD *)(a1 + 16);
  long long v20 = v5;
  uint64_t v6 = type metadata accessor for SMultiselectionPickerList(255, (uint64_t)&v19);
  uint64_t v7 = sub_10015D788(&qword_1002D98A8, &qword_1002D98A0);
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v19 = v4;
  *((void *)&v19 + 1) = v6;
  *(void *)&long long v20 = v7;
  *((void *)&v20 + 1) = WitnessTable;
  uint64_t v9 = type metadata accessor for NavigationLink();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v19 - v14;
  sub_10019AB34((void *)a1);
  swift_getWitnessTable();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v16(v15, v13, v9);
  id v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  v16(a2, v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t sub_10019AB34(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  sub_100157064(&qword_1002D98A0);
  v6[0] = v1;
  v6[1] = v2;
  void v6[2] = v3;
  v6[3] = v4;
  type metadata accessor for SMultiselectionPickerList(0, (uint64_t)v6);
  sub_10015D788(&qword_1002D98A8, &qword_1002D98A0);
  swift_getWitnessTable();
  return sub_10019B3A8((uint64_t)sub_10019B4CC);
}

uint64_t sub_10019AC4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  type metadata accessor for SMultiselectionPicker(0, (uint64_t)&v25);
  uint64_t v33 = sub_10019A8EC();
  uint64_t v34 = v14;
  uint64_t v32 = v13;
  v31[0] = v12;
  v31[1] = v11;
  uint64_t v19 = v12;
  uint64_t v20 = v11;
  uint64_t v21 = v13;
  uint64_t v22 = v33;
  uint64_t v23 = v15;
  uint64_t v24 = v14;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v16 = type metadata accessor for SMultiselectionPickerList(0, (uint64_t)&v25);
  swift_getWitnessTable();
  id v17 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16);
  v17(&v25, &v19, v16);
  sub_10019CCE4((uint64_t)v31);
  sub_10019CD10((uint64_t)&v32);
  sub_10019CD3C((uint64_t)&v33);
  swift_release();
  sub_10019CD10((uint64_t)&v34);
  uint64_t v19 = v25;
  uint64_t v20 = v26;
  uint64_t v21 = v27;
  uint64_t v22 = v28;
  uint64_t v23 = v29;
  uint64_t v24 = v30;
  v17(a6, &v19, v16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10019ADDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = static VerticalAlignment.center.getter();
  *(void *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 16) = 1;
  uint64_t v12 = sub_100157064(&qword_1002D98B0);
  return sub_10019AE5C(a1, a2, a3, a4, a5, a6 + *(int *)(v12 + 44));
}

uint64_t sub_10019AE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v32 = a2;
  uint64_t v30 = a1;
  uint64_t v33 = a6;
  uint64_t v10 = sub_100157064(&qword_1002D98B8);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)&v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v28 = type metadata accessor for Text.TruncationMode();
  uint64_t v14 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v34 = sub_100157064(&qword_1002D98C0);
  __chkstk_darwin(v34);
  uint64_t v18 = &v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v29 = (void *)type metadata accessor for SMultiselectionPicker(0, (uint64_t)&v35);
  sub_10019B16C(v29, (uint64_t)&v35);
  uint64_t v19 = v35;
  uint64_t v20 = v36;
  int v26 = v37;
  uint64_t v27 = v38;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = v28;
  (*(void (**)(unsigned char *, void, uint64_t))(v14 + 104))(v16, enum case for Text.TruncationMode.tail(_:), v28);
  uint64_t v23 = swift_getKeyPath();
  (*(void (**)(char *, unsigned char *, uint64_t))(v14 + 16))((char *)v13 + *(int *)(v11 + 36), v16, v22);
  uint64_t *v13 = v23;
  sub_10015D5F4((uint64_t)v13, (uint64_t)&v18[*(int *)(v34 + 36)], &qword_1002D98B8);
  *(void *)uint64_t v18 = v19;
  *((void *)v18 + 1) = v20;
  LOBYTE(v23) = v26;
  v18[16] = v26;
  *((void *)v18 + 3) = v27;
  *((void *)v18 + 4) = KeyPath;
  *((void *)v18 + 5) = 1;
  v18[48] = 0;
  sub_10015D6B4(v19, v20, v23);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10015D658((uint64_t)v13, &qword_1002D98B8);
  (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v22);
  sub_10015D6C4(v19, v20, v23);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10019B4EC();
  Set.count.getter();
  swift_bridgeObjectRelease();
  sub_10019CB28();
  View.badge(_:)();
  return sub_10015D658((uint64_t)v18, &qword_1002D98C0);
}

uint64_t sub_10019B16C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10019B4EC();
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[4];
  char v6 = Set.isEmpty.getter();
  swift_bridgeObjectRelease();
  if (v6)
  {
    unint64_t v7 = 0xED00006465746365;
    uint64_t v8 = 0x6C657320656E6F4ELL;
  }
  else
  {
    uint64_t v26 = sub_10019B4EC();
    __chkstk_darwin(v26);
    uint64_t v9 = a1[3];
    uint64_t v22 = v4;
    uint64_t v23 = v9;
    uint64_t v10 = a1[5];
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v22 = v9;
    uint64_t v23 = v5;
    uint64_t v24 = v10;
    uint64_t v25 = __chkstk_darwin(KeyPath);
    uint64_t v12 = type metadata accessor for Set();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v15 = sub_10019A4EC((void (*)(char *, char *))sub_10019CCB8, (uint64_t)&v21, v12, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v14);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v26 = v15;
    sub_100157064(&qword_1002D9640);
    sub_10015D788((unint64_t *)&qword_1002D9648, &qword_1002D9640);
    uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v7 = v16;
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = v8;
  unint64_t v27 = v7;
  sub_1001571E0();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v19 & 1;
  *(void *)(a2 + 24) = v20;
  return result;
}

uint64_t sub_10019B3A8(uint64_t a1)
{
  uint64_t v1 = (void (*)(void))__chkstk_darwin(a1);
  v1();
  return NavigationLink.init(destination:label:)();
}

uint64_t sub_10019B478@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_10019A950(a1, a2);
}

uint64_t type metadata accessor for SMultiselectionPickerList(uint64_t a1, uint64_t a2)
{
  return _swift_getGenericMetadata(a1, a2, &nominal type descriptor for SMultiselectionPickerList);
}

uint64_t sub_10019B4CC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10019AC4C(*(uint64_t **)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_10019B4DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10019ADDC(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_10019B4EC()
{
  type metadata accessor for Set();
  type metadata accessor for Binding();
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_10019B54C@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v43 = a2;
  uint64_t v5 = a1[2];
  uint64_t v44 = type metadata accessor for Array();
  uint64_t v33 = a1[5];
  uint64_t v32 = v5;
  swift_getAssociatedTypeWitness();
  uint64_t v42 = sub_100157104(&qword_1002D9978);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for ForEach();
  uint64_t v40 = sub_10015D788(&qword_1002D9980, &qword_1002D9978);
  uint64_t v50 = v40;
  *(void *)&long long v51 = &type metadata for Never;
  *((void *)&v51 + 1) = v6;
  uint64_t v52 = &protocol witness table for Never;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for List();
  uint64_t v38 = v7;
  uint64_t v39 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v35 = (char *)&v31 - v8;
  uint64_t v9 = swift_getWitnessTable();
  uint64_t v37 = v9;
  unint64_t v36 = sub_1001571E0();
  *(void *)&long long v51 = v7;
  *((void *)&v51 + 1) = &type metadata for String;
  uint64_t v52 = (void *)v9;
  uint64_t v53 = v36;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v11 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v12 = __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v34 = (char *)&v31 - v15;
  uint64_t v57 = *((void *)v3 + 2);
  *(void *)&long long v51 = v57;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  uint64_t v18 = v32;
  uint64_t v45 = v32;
  uint64_t v46 = v16;
  uint64_t v19 = v33;
  uint64_t v47 = v17;
  uint64_t v48 = v33;
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v20 = Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  *(void *)&long long v49 = v20;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v18;
  *(void *)(v21 + 24) = v16;
  *(void *)(v21 + 32) = v17;
  *(void *)(v21 + 40) = v19;
  long long v22 = *v3;
  long long v23 = v3[1];
  *(_OWORD *)(v21 + 48) = *v3;
  *(_OWORD *)(v21 + 64) = v23;
  *(_OWORD *)(v21 + 80) = v3[2];
  long long v51 = v22;
  uint64_t v24 = *((void *)v3 + 3);
  uint64_t v55 = *((void *)v3 + 5);
  uint64_t v56 = v24;
  sub_10019D1D4((uint64_t)&v57);
  sub_10015D380((uint64_t)&v51);
  sub_10015C534((uint64_t)&v56);
  swift_retain();
  sub_10019D1D4((uint64_t)&v55);
  uint64_t v25 = v35;
  sub_10019BD28((uint64_t)&v49, (uint64_t)sub_10019D178, v21, v44);
  long long v49 = v51;
  uint64_t v26 = v38;
  View.navigationTitle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v26);
  unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v28 = v34;
  v27(v34, v14, OpaqueTypeMetadata2);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v11 + 8);
  v29(v14, OpaqueTypeMetadata2);
  v27(v43, v28, OpaqueTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v29)(v28, OpaqueTypeMetadata2);
}

uint64_t sub_10019BA64()
{
  uint64_t v0 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v2 = v1;
  if (v0 == dispatch thunk of CustomStringConvertible.description.getter() && v2 == v3) {
    char v4 = 0;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_10019BB24@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v17[1] = a3;
  uint64_t v6 = a2[2];
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  uint64_t v12 = a2[3];
  uint64_t v11 = a2[4];
  *(void *)(v10 + 16) = v6;
  *(void *)(v10 + 24) = v12;
  uint64_t v13 = a2[5];
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  long long v14 = v3[1];
  *(_OWORD *)(v10 + 48) = *v3;
  *(_OWORD *)(v10 + 64) = v14;
  *(_OWORD *)(v10 + 80) = v3[2];
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v17[4] = v6;
  v17[5] = v12;
  v17[6] = v11;
  v17[7] = v13;
  v17[8] = a1;
  uint64_t v18 = v3;
  long long v22 = *v3;
  uint64_t v15 = *((void *)v3 + 2);
  uint64_t v20 = *((void *)v3 + 3);
  uint64_t v21 = v15;
  uint64_t v19 = *((void *)v3 + 5);
  sub_10015D380((uint64_t)&v22);
  sub_10019D1D4((uint64_t)&v21);
  sub_10015C534((uint64_t)&v20);
  swift_retain();
  sub_10019D1D4((uint64_t)&v19);
  sub_100157064(&qword_1002D9988);
  sub_10015D788(&qword_1002D9990, &qword_1002D9988);
  return Button.init(action:label:)();
}

uint64_t sub_10019BD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t sub_10019BEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v22 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v14 = (char *)v22 - v13;
  if (sub_10019C574())
  {
    uint64_t v16 = v2[3];
    uint64_t v15 = v2[4];
    uint64_t v17 = v2[5];
    uint64_t v27 = v16;
    uint64_t v28 = v17;
    uint64_t v23 = v16;
    uint64_t v24 = v15;
    uint64_t v25 = v17;
    sub_10015C534((uint64_t)&v27);
    swift_retain();
    sub_10019D1D4((uint64_t)&v28);
    type metadata accessor for Set();
    type metadata accessor for Binding();
    Binding.wrappedValue.getter();
    Set.remove(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v23 = v16;
    uint64_t v24 = v15;
    uint64_t v25 = v17;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    uint64_t v19 = v2[3];
    uint64_t v18 = v2[4];
    uint64_t v20 = v2[5];
    uint64_t v27 = v19;
    uint64_t v28 = v20;
    uint64_t v23 = v19;
    uint64_t v24 = v18;
    uint64_t v25 = v20;
    sub_10015C534((uint64_t)&v27);
    swift_retain();
    sub_10019D1D4((uint64_t)&v28);
    type metadata accessor for Set();
    type metadata accessor for Binding();
    Binding.wrappedValue.getter();
    Set.insert(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    uint64_t v23 = v19;
    uint64_t v24 = v18;
    uint64_t v25 = v20;
  }
  v22[1] = v26;
  Binding.wrappedValue.setter();
  sub_10019CD3C((uint64_t)&v27);
  swift_release();
  return sub_10019CD10((uint64_t)&v28);
}

uint64_t sub_10019C1A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(void *)a6 = static VerticalAlignment.center.getter();
  *(void *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 16) = 1;
  uint64_t v12 = sub_100157064(&qword_1002D9998);
  return sub_10019C238(a1, a2, a3, a4, a5, a6 + *(int *)(v12 + 44));
}

uint64_t sub_10019C238@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v42 = a1;
  uint64_t v38 = type metadata accessor for SSFImage();
  __chkstk_darwin(v38);
  uint64_t v10 = (uint64_t *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100157064(&qword_1002D99A0);
  uint64_t v43 = *(void *)(v11 - 8);
  uint64_t v44 = v11;
  __chkstk_darwin(v11);
  uint64_t v37 = (uint64_t)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100157064(&qword_1002D99A8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v46 = v19;
  sub_1001571E0();
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  int v39 = v23;
  uint64_t v25 = v24;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v47 = v40;
  uint64_t v48 = v41;
  type metadata accessor for SMultiselectionPickerList(0, (uint64_t)&v45);
  char v26 = sub_10019C574();
  uint64_t v27 = 1;
  if (v26)
  {
    uint64_t v28 = v38;
    static SymbolRenderingMode.multicolor.getter();
    *uint64_t v10 = 0x72616D6B63656863;
    v10[1] = 0xE90000000000006BLL;
    uint64_t v29 = (void *)((char *)v10 + *(int *)(v28 + 24));
    void *v29 = 0;
    v29[1] = 0;
    uint64_t v30 = static Color.green.getter();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v32 = v37;
    sub_10015D3B4((uint64_t)v10, v37);
    uint64_t v33 = (uint64_t *)(v32 + *(int *)(v44 + 36));
    *uint64_t v33 = KeyPath;
    v33[1] = v30;
    sub_10015D418((uint64_t)v10);
    sub_10019D430(v32, (uint64_t)v18);
    uint64_t v27 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v18, v27, 1, v44);
  char v34 = v39 & 1;
  sub_10015D5F4((uint64_t)v18, (uint64_t)v16, &qword_1002D99A8);
  *(void *)a6 = v20;
  *(void *)(a6 + 8) = v22;
  *(unsigned char *)(a6 + 16) = v34;
  *(void *)(a6 + 24) = v25;
  *(void *)(a6 + 32) = 0;
  *(unsigned char *)(a6 + 40) = 1;
  uint64_t v35 = sub_100157064(&qword_1002D99B0);
  sub_10015D5F4((uint64_t)v16, a6 + *(int *)(v35 + 64), &qword_1002D99A8);
  sub_10015D6B4(v20, v22, v34);
  swift_bridgeObjectRetain();
  sub_10015D658((uint64_t)v18, &qword_1002D99A8);
  sub_10015D658((uint64_t)v16, &qword_1002D99A8);
  sub_10015D6C4(v20, v22, v34);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10019C574()
{
  sub_10019B4EC();
  char v0 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_10019C5D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, char *a8@<X8>)
{
  uint64_t v36 = a6;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  int v39 = a8;
  uint64_t v35 = a1;
  uint64_t v11 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v14;
  swift_getAssociatedTypeWitness();
  uint64_t v33 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v41 = a4;
  uint64_t v42 = AssociatedTypeWitness;
  uint64_t v43 = a5;
  uint64_t v44 = v15;
  uint64_t v18 = a5;
  uint64_t v32 = v15;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v19 = type metadata accessor for ForEach();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  int v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v32 - v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v35, a4);
  char v26 = (void *)swift_allocObject();
  v26[2] = a4;
  void v26[3] = v18;
  uint64_t v28 = v36;
  uint64_t v27 = v37;
  v26[4] = v15;
  v26[5] = v28;
  v26[6] = v33;
  v26[7] = v27;
  v26[8] = v38;
  swift_retain();
  ForEach<>.init(_:content:)();
  uint64_t v40 = v28;
  swift_getWitnessTable();
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v29(v25, v23, v19);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v20 + 8);
  v30(v23, v19);
  v29(v39, v25, v19);
  return ((uint64_t (*)(char *, uint64_t))v30)(v25, v19);
}

uint64_t sub_10019C8F0@<X0>(uint64_t a1@<X4>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v15 - v9;
  v11(v8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v12(v10, v7, a1);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, a1);
  v12(a2, v10, a1);
  return ((uint64_t (*)(char *, uint64_t))v13)(v10, a1);
}

uint64_t sub_10019CA38()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_10019CA5C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Text.TruncationMode();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.truncationMode.setter();
}

unint64_t sub_10019CB28()
{
  unint64_t result = qword_1002D98C8;
  if (!qword_1002D98C8)
  {
    sub_100157104(&qword_1002D98C0);
    sub_10019CBC8();
    sub_10015D788(qword_1002D98F0, &qword_1002D98B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D98C8);
  }
  return result;
}

unint64_t sub_10019CBC8()
{
  unint64_t result = qword_1002D98D0;
  if (!qword_1002D98D0)
  {
    sub_100157104(&qword_1002D98D8);
    sub_10015D788(&qword_1002D98E0, &qword_1002D98E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D98D0);
  }
  return result;
}

uint64_t sub_10019CC68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10019CCA0()
{
  return 32;
}

__n128 sub_10019CCAC(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10019CCB8()
{
  return swift_getAtKeyPath();
}

uint64_t sub_10019CCE4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10019CD10(uint64_t a1)
{
  return a1;
}

uint64_t sub_10019CD3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10019CD68()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_10019CDBC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10019CE2C(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10019CEDC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10019CF4C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10019CF94(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_10019CFE0(long long *a1)
{
  uint64_t v2 = sub_100157104(&qword_1002D98A0);
  long long v3 = a1[1];
  long long v8 = *a1;
  long long v9 = v3;
  uint64_t v4 = type metadata accessor for SMultiselectionPickerList(255, (uint64_t)&v8);
  uint64_t v5 = sub_10015D788(&qword_1002D98A8, &qword_1002D98A0);
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v8 = v2;
  *((void *)&v8 + 1) = v4;
  *(void *)&long long v9 = v5;
  *((void *)&v9 + 1) = WitnessTable;
  type metadata accessor for NavigationLink();
  return swift_getWitnessTable();
}

uint64_t sub_10019D0B0()
{
  return sub_10019D0C8();
}

uint64_t sub_10019D0C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10019D0FC()
{
  return sub_10019BA64() & 1;
}

uint64_t sub_10019D120()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10019D178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = *(_OWORD *)(v2 + 32);
  v8[0] = *(_OWORD *)(v2 + 16);
  v8[1] = v5;
  uint64_t v6 = (void *)type metadata accessor for SMultiselectionPickerList(0, (uint64_t)v8);
  return sub_10019BB24(a1, v6, a2);
}

uint64_t sub_10019D1D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10019D200@<X0>(char *a1@<X8>)
{
  return sub_10019C5D4(v1[7], v1[8], v1[9], v1[2], v1[3], v1[5], v1[6], a1);
}

uint64_t sub_10019D214()
{
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10019D24C@<X0>(char *a1@<X8>)
{
  return sub_10019C8F0(*(void *)(v1 + 24), a1);
}

uint64_t sub_10019D260()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10019D344()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  long long v2 = *(_OWORD *)(v0 + 32);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80));
  v6[0] = v1;
  v6[1] = v2;
  uint64_t v4 = type metadata accessor for SMultiselectionPickerList(0, (uint64_t)v6);
  return sub_10019BEAC(v3, v4);
}

uint64_t sub_10019D3C8@<X0>(uint64_t a1@<X8>)
{
  return sub_10019C1A8(v1[7], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_10019D3D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10019D404()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_10019D430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D99A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019D498()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10019D644()
{
  uint64_t v0 = 0x6E776F6E6B6E75;
  NSString v1 = String._bridgeToObjectiveC()();
  MGGetBoolAnswer();

  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  static Bool._conditionallyBridgeFromObjectiveC(_:result:)();

  NSString v3 = String._bridgeToObjectiveC()();
  MGGetBoolAnswer();

  Class v4 = Bool._bridgeToObjectiveC()().super.super.isa;
  static Bool._conditionallyBridgeFromObjectiveC(_:result:)();

  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = (void *)MGGetStringAnswer();

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0xE700000000000000;
    uint64_t v7 = 0x6E776F6E6B6E75;
  }
  NSString v10 = String._bridgeToObjectiveC()();
  uint64_t v11 = (void *)MGGetStringAnswer();

  if (v11)
  {
    uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v13 = 0xE700000000000000;
  }
  type metadata accessor for HardwareManager();
  uint64_t v14 = swift_allocObject();
  uint64_t result = sub_10019D9E0(0, 0, (void **)v7, v9, v0, v13);
  qword_1002E31C8 = v14;
  return result;
}

void sub_10019D82C()
{
  id v1 = [self defaultCenter];
  id v7 = v1;
  if (qword_1002D7AE8 != -1) {
    goto LABEL_18;
  }
  while (1)
  {
    [v1 postNotificationName:static NSNotificationName.subsIdSelectionChange object:0 userInfo:0];
    uint64_t v2 = *(void *)(v0 + 120);
    unint64_t v3 = *(void *)(v2 + 16);
    if (!v3) {
      break;
    }
    if (*(unsigned char *)(v0 + 152))
    {
      LODWORD(v4) = 0;
LABEL_9:
      unint64_t v5 = (int)v4;
      if ((int)v4 < v3) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
    int64_t v4 = *(int *)(v0 + 148);
    if ((uint64_t)v3 > v4) {
      goto LABEL_9;
    }
    unint64_t v5 = v3 - 1;
    if (v3 - 1 < v3)
    {
LABEL_10:
      sub_100196D64(v2 + 32 * v5 + 32, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        *(void *)(v0 + 88) = v8;
        *(void *)(v0 + 96) = v9;
        swift_bridgeObjectRelease();
      }
      uint64_t v6 = *(void *)(v0 + 128);
      if (v5 >= *(void *)(v6 + 16))
      {
        __break(1u);
      }
      else
      {
        sub_100196D64(v6 + 32 * v5 + 32, (uint64_t)v10);

        if (swift_dynamicCast())
        {
          *(void *)(v0 + 104) = v8;
          *(void *)(v0 + 112) = v9;
          swift_bridgeObjectRelease();
        }
      }
      return;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    swift_once();
    id v1 = v7;
  }
}

uint64_t sub_10019D9E0(char a1, char a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 22) = 0;
  *(void *)(v7 + 64) = 0;
  *(void *)(v7 + 72) = 0xE000000000000000;
  uint64_t v13 = 1684099177;
  *(void *)(v7 + 80) = &_swiftEmptyArrayStorage;
  *(void *)(v7 + 88) = 0;
  *(void *)(v7 + 96) = 0xE000000000000000;
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 112) = 0xE000000000000000;
  *(void *)(v7 + 120) = &_swiftEmptyArrayStorage;
  *(void *)(v7 + 128) = &_swiftEmptyArrayStorage;
  *(void *)(v7 + 136) = 0;
  *(_WORD *)(v7 + 144) = 2;
  *(unsigned char *)(v7 + 146) = 0;
  *(_DWORD *)(v7 + 148) = 0;
  *(unsigned char *)(v7 + 152) = 1;
  *(_OWORD *)(v7 + 160) = xmmword_100269E00;
  unint64_t v14 = 0xE400000000000000;
  *(void *)(v7 + 176) = 0xE400000000000000;
  *(_DWORD *)(v7 + 184) = 5202011;
  *(void *)(v7 + 192) = [objc_allocWithZone((Class)NSTimer) init];
  *(unsigned char *)(v7 + 24) = a1;
  *(unsigned char *)(v7 + 25) = a2;
  *(unsigned char *)(v7 + 26) = a1 | a2;
  *(void *)(v7 + 48) = a3;
  *(void *)(v7 + 56) = a4;
  sub_1001571E0();
  swift_bridgeObjectRetain();
  *(unsigned char *)(v7 + 27) = StringProtocol.contains<A>(_:)() & 1;
  long long aBlock = a3;
  uint64_t v34 = a4;
  uint64_t v39 = 6644585;
  unint64_t v40 = 0xE300000000000000;
  *(unsigned char *)(v7 + 28) = StringProtocol.contains<A>(_:)() & 1;
  if ((a5 != 1684099177 || a6 != 0xE400000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v13 = 0x656E6F685069;
    unint64_t v14 = 0xE600000000000000;
  }
  *(void *)(v7 + 32) = v13;
  *(void *)(v7 + 40) = v14;
  [*(id *)(v7 + 16) invalidate];
  uint64_t v15 = self;
  uint64_t v37 = (uint64_t (*)())sub_100198518;
  uint64_t v38 = v7;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_10018093C;
  uint64_t v36 = &unk_10028CF20;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v17 = [v15 scheduledTimerWithTimeInterval:0 repeats:v16 block:2.0];
  _Block_release(v16);
  uint64_t v18 = *(void **)(v7 + 16);
  *(void *)(v7 + 16) = v17;

  if (qword_1002D7A98 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_100269950;
  *(void *)(v19 + 56) = &type metadata for String;
  unint64_t v20 = sub_100181588();
  *(void *)(v19 + 32) = a3;
  *(void *)(v19 + 40) = a4;
  *(void *)(v19 + 96) = &type metadata for String;
  *(void *)(v19 + 104) = v20;
  *(void *)(v19 + 64) = v20;
  *(void *)(v19 + 72) = a5;
  *(void *)(v19 + 80) = a6;
  char v21 = *(unsigned char *)(v7 + 27);
  *(void *)(v19 + 136) = &type metadata for Bool;
  *(void *)(v19 + 144) = &protocol witness table for Bool;
  *(unsigned char *)(v19 + 112) = v21;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = 843928646;
  if (*(unsigned char *)(v7 + 28)) {
    uint64_t v22 = 827151430;
  }
  *(void *)(v7 + 168) = v22;
  *(void *)(v7 + 176) = 0xE400000000000000;
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v7 + 28)) {
    int v23 = 8323091;
  }
  else {
    int v23 = 5202011;
  }
  *(_DWORD *)(v7 + 184) = v23;
  id v24 = [self defaultCenter];
  if (qword_1002D7AE0 != -1) {
    swift_once();
  }
  uint64_t v25 = static NSNotificationName.carrierUpdate;
  uint64_t v37 = sub_10019E660;
  uint64_t v38 = v7;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_1001DD9E8;
  uint64_t v36 = &unk_10028CF48;
  char v26 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v27 = [v24 addObserverForName:v25 object:0 queue:0 usingBlock:v26];
  _Block_release(v26);
  swift_unknownObjectRelease();

  *(unsigned char *)(v7 + 29) = sub_10019E364() & 1;
  uint64_t v37 = (uint64_t (*)())sub_10019E084;
  uint64_t v38 = 0;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_10018093C;
  uint64_t v36 = &unk_10028CF70;
  uint64_t v28 = _Block_copy(&aBlock);
  id v29 = [v15 scheduledTimerWithTimeInterval:1 repeats:v28 block:900.0];
  _Block_release(v28);
  uint64_t v30 = *(void **)(v7 + 192);
  *(void *)(v7 + 192) = v29;

  return v7;
}

uint64_t sub_10019DF5C()
{
  id v1 = [self defaultCenter];
  if (qword_1002D7AE0 != -1) {
    swift_once();
  }
  [v1 removeObserver:v0 name:static NSNotificationName.carrierUpdate object:0];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_10019E050()
{
  sub_10019DF5C();

  return _swift_deallocClassInstance(v0, 200, 7);
}

void sub_10019E084()
{
  if (qword_1002D7B20 != -1) {
    swift_once();
  }
  id v0 = (id)qword_1002E31D0;
  sub_10019EE30();
}

uint64_t sub_10019E104()
{
  uint64_t v1 = v0;
  uint64_t result = Notification.userInfo.getter();
  if (result)
  {
    uint64_t v3 = result;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v3 + 16) && (unint64_t v4 = sub_1001EB8E0((uint64_t)v6), (v5 & 1) != 0))
    {
      sub_100196D64(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_10019816C((uint64_t)v6);
    if (*((void *)&v8 + 1))
    {
      sub_100157064((uint64_t *)&unk_1002D9620);
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        swift_beginAccess();
        *(void *)(v1 + 80) = _swiftEmptyArrayStorage;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        sub_1002025DC(0x7372656972726163);
        return swift_endAccess();
      }
    }
    else
    {
      return sub_10016AC24((uint64_t)&v7);
    }
  }
  return result;
}

uint64_t type metadata accessor for HardwareManager()
{
  return self;
}

uint64_t sub_10019E364()
{
  uint64_t v1 = objc_getClass("CellularLogging");
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10016AC24((uint64_t)v7);
  if (qword_1002D7A90 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100267EF0;
  unint64_t v3 = sub_100181588();
  uint64_t v4 = 1163219540;
  if (!v1) {
    uint64_t v4 = 0x45534C4146;
  }
  unint64_t v5 = 0xE400000000000000;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = v3;
  if (!v1) {
    unint64_t v5 = 0xE500000000000000;
  }
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v5;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if (v1 && (*(unsigned char *)(v0 + 28) & 1) == 0) {
    return *(unsigned __int8 *)(v0 + 26);
  }
  else {
    return 0;
  }
}

void sub_10019E4C8(uint64_t a1, uint64_t a2)
{
  NSString v3 = String._bridgeToObjectiveC()();
  MGGetBoolAnswer();

  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  static Bool._conditionallyBridgeFromObjectiveC(_:result:)();

  *(unsigned char *)(a2 + 146) = 0;
  if (qword_1002D7A98 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  id v5 = [self defaultCenter];
  id v6 = v5;
  if (qword_1002D7B00 != -1)
  {
    swift_once();
    id v5 = v6;
  }
  [v5 postNotificationName:static NSNotificationName.isAirPlaneModeEnabled object:0 userInfo:0 v6];
}

uint64_t sub_10019E648(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10019E658()
{
  return swift_release();
}

uint64_t sub_10019E674(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t sub_10019E6BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100157064(&qword_1002D8A80);
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_1001A409C(a1);
  if (v9) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 36) != v8)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    NSString v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v10(a2, 1, 1, v4);
  }
  else
  {
    uint64_t v11 = (uint64_t)v6 + *(int *)(v4 + 48);
    uint64_t v12 = sub_1001A4124(v11, result, v8, 0, a1);
    *id v6 = v12;
    *a2 = v12;
    sub_1001A5530(v11, (uint64_t)a2 + *(int *)(v4 + 48), (uint64_t (*)(void))type metadata accessor for STransferMetrics);
    sub_10015D658((uint64_t)v6, &qword_1002D8A80);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v4);
  }
}

void *sub_10019E878(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  unint64_t v5 = a3;
  uint64_t v18 = _swiftEmptyArrayStorage;
  if (a3 >> 62)
  {
LABEL_18:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      uint64_t v15 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v5 & 0xC000000000000001;
      unint64_t v14 = v5;
      while (1)
      {
        if (v16)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(void *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
          swift_retain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v17 = v10;
        NSString v3 = a2;
        char v12 = a1(&v17);
        if (v4) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v5 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          NSString v3 = &v18;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          NSString v3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  NSString v3 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

id sub_10019EA34()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for FTMCellMonitorSharedClass()) init];
  qword_1002E31D0 = (uint64_t)result;
  return result;
}

id sub_10019EA64(char a1)
{
  if (qword_1002D7A98 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  if ((a1 & 1) == 0)
  {
    unint64_t v3 = sub_1001E006C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v4 = (unint64_t *)(v1 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject);
    swift_beginAccess();
    *uint64_t v4 = v3;
    return (id)swift_bridgeObjectRelease();
  }
  uint64_t v6 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock;
  [*(id *)(v1 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock) lock];
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(qword_1002E31C8 + 152)) {
    return [*(id *)(v1 + v6) unlock];
  }
  uint64_t v7 = *(int *)(qword_1002E31C8 + 148);
  uint64_t v8 = (unint64_t *)(v1 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_beginAccess();
  unint64_t v9 = *v8;
  uint64_t v18 = v1;
  if (*v8 >> 62)
  {
    swift_bridgeObjectRetain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = (uint64_t)result;
    if (result) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id result = (id)swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    uint64_t v1 = v18;
    return [*(id *)(v1 + v6) unlock];
  }
LABEL_10:
  if (v10 >= 1)
  {
    uint64_t v11 = 0;
    while (1)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v12 = *(void *)(v9 + 8 * v11 + 32);
        swift_retain();
      }
      if (*(void *)(v12 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_subsId) == v7)
      {
        uint64_t v13 = *(void *)(v12 + 32);
        uint64_t v14 = *(void *)(v12 + 40);
        BOOL v15 = v13 == 5521746 && v14 == 0xE300000000000000;
        if (!v15
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v13 != 0x544C20726568744FLL || v14 != 0xEF73646E61422045)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          sub_1001571E0();
          if ((StringProtocol.contains<A>(_:)() & 1) == 0)
          {
            swift_beginAccess();
            swift_retain();
            uint64_t v17 = sub_1001A4A1C(v8, v12);
            swift_release();
            if (*v8 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v16 = *(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            id result = (id)v17;
            if (v16 < v17) {
              goto LABEL_35;
            }
            sub_1001B552C(v17, v16);
            swift_endAccess();
          }
        }
      }
      ++v11;
      swift_release();
      if (v10 == v11) {
        goto LABEL_32;
      }
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10019EE30()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v24 = v0;
  uint64_t v25 = v1;
  __chkstk_darwin(v0);
  int v23 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v22 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  static DispatchQoS.background.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1001A5358(&qword_1002D9EB0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100157064(&qword_1002D9EB8);
  sub_1001A53A0((unint64_t *)&unk_1002D9EC0, &qword_1002D9EB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  uint64_t v11 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v20;
  *(void *)(v12 + 16) = v20;
  aBlock[4] = sub_1001A54E8;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028D1A0;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v13;
  static DispatchQoS.unspecified.getter();
  char v26 = &_swiftEmptyArrayStorage;
  sub_1001A5358((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  uint64_t v17 = v23;
  uint64_t v16 = v24;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  return swift_release();
}

uint64_t sub_10019F2A0(uint64_t a1)
{
  uint64_t v41 = type metadata accessor for TimeZone();
  uint64_t v2 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  unint64_t v40 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100157064(&qword_1002D8210);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v29 = (char *)&v28 - v11;
  Date.init()();
  uint64_t v39 = a1;
  uint64_t v12 = (unint64_t *)(a1 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_beginAccess();
  uint64_t v38 = v12;
  unint64_t v13 = *v12;
  if (*v12 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, unint64_t))(v30 + 8))(v29, v7);
  }
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v14) {
    goto LABEL_28;
  }
LABEL_3:
  if (v14 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v32 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock;
    uint64_t v42 = (unsigned int (**)(char *, uint64_t, unint64_t))(v30 + 48);
    uint64_t v36 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v37 = (void (**)(char *, char *, unint64_t))(v30 + 32);
    uint64_t v31 = (void (**)(char *, unint64_t))(v30 + 8);
    unint64_t v34 = v7;
    unint64_t v35 = 0x800000010023B790;
    uint64_t v33 = v6;
    while (1)
    {
      if ((v13 & 0xC000000000000001) != 0)
      {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v17 = *(void *)(v13 + 8 * v16 + 32);
        swift_retain();
      }
      BOOL v18 = *(void *)(v17 + 32) == 5521746 && *(void *)(v17 + 40) == 0xE300000000000000;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_release();
      }
      else
      {
        uint64_t v19 = v17 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
        swift_beginAccess();
        sub_10016D8C8(v19, (uint64_t)v6);
        if ((*v42)(v6, 1, v7) == 1)
        {
          swift_release();
          sub_10015D658((uint64_t)v6, &qword_1002D8210);
        }
        else
        {
          (*v37)(v10, v6, v7);
          uint64_t v6 = v10;
          if (qword_1002D7A70 != -1) {
            swift_once();
          }
          unint64_t v20 = (void *)qword_1002E3128;
          uint64_t v21 = v40;
          static TimeZone.current.getter();
          Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
          (*v36)(v21, v41);
          [v20 setTimeZone:isa];

          NSString v23 = String._bridgeToObjectiveC()();
          [v20 setDateFormat:v23];

          Class v24 = Date._bridgeToObjectiveC()().super.isa;
          id v25 = [v20 stringFromDate:v24];

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v26 = sub_10019F8B4();
          swift_bridgeObjectRelease();
          if (v26 < 881)
          {
            unint64_t v7 = v34;
            (*v31)(v6, v34);
            swift_release();
            uint64_t v10 = v6;
          }
          else
          {
            [*(id *)(v39 + v32) lock];
            id v27 = v38;
            swift_beginAccess();
            swift_retain();
            uint64_t v2 = sub_1001A4A1C(v27, v17);
            swift_release();
            unint64_t v7 = *v27;
            if (v7 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v10 = (char *)_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if ((uint64_t)v10 < v2)
              {
LABEL_26:
                __break(1u);
                goto LABEL_27;
              }
            }
            else
            {
              uint64_t v10 = *(char **)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if ((uint64_t)v10 < v2) {
                goto LABEL_26;
              }
            }
            sub_1001B552C(v2, (uint64_t)v10);
            swift_endAccess();
            [*(id *)(v39 + v32) unlock];
            swift_release();
            uint64_t v10 = v6;
            unint64_t v7 = v34;
            (*v31)(v6, v34);
          }
          uint64_t v6 = v33;
        }
      }
      if (v14 == ++v16) {
        goto LABEL_28;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10019F8B4()
{
  uint64_t v0 = sub_100157064(&qword_1002D8210);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v38 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v32 - v3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v34 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - v10;
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v32 - v12;
  Date.init()();
  uint64_t v36 = sub_100180E94();
  uint64_t v39 = v14;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v6 + 8);
  v37(v13, v5);
  if (qword_1002D7A70 != -1) {
    swift_once();
  }
  id v15 = (void *)qword_1002E3128;
  NSString v16 = String._bridgeToObjectiveC()();
  [v15 setDateFormat:v16];

  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v15 dateFromString:v17];

  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_12;
  }
  unint64_t v35 = v11;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v19(v4, v13, v5);
  unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v20(v4, 0, 1, v5);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v33(v4, 1, v5) == 1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v31 = (uint64_t)v4;
LABEL_15:
    sub_10015D658(v31, &qword_1002D8210);
    return 0;
  }
  uint64_t v32 = v20;
  v19(v35, v4, v5);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v22 = [v15 dateFromString:v21];

  if (!v22)
  {
    NSString v23 = v38;
    v32(v38, 1, 1, v5);
    goto LABEL_14;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v23 = v38;
  v19(v38, v13, v5);
  v32(v23, 0, 1, v5);
  if (v33(v23, 1, v5) == 1)
  {
LABEL_14:
    v37(v35, v5);
    uint64_t v31 = (uint64_t)v23;
    goto LABEL_15;
  }
  Class v24 = v34;
  v19(v34, v23, v5);
  id v25 = v35;
  Date.timeIntervalSince(_:)();
  double v27 = v26;
  uint64_t v28 = v24;
  id v29 = (uint64_t (*)(char *, uint64_t))v37;
  v37(v28, v5);
  uint64_t result = v29(v25, v5);
  if ((~*(void *)&v27 & 0x7FF0000000000000) != 0)
  {
    if (v27 > -9.22337204e18)
    {
      if (v27 < 9.22337204e18) {
        return (uint64_t)v27;
      }
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10019FD84(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  unint64_t v34 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002D7A88 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100267EF0;
  uint64_t v43 = a2;
  long long aBlock = (void *)dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v38 = v13;
  v14._countAndFlagsBits = 44;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  double v27 = a2;
  v15._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  NSString v16 = aBlock;
  uint64_t v17 = v38;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_100181588();
  *(void *)(v12 + 32) = v16;
  *(void *)(v12 + 40) = v17;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  static DispatchQoS.userInteractive.getter();
  long long aBlock = _swiftEmptyArrayStorage;
  sub_1001A5358(&qword_1002D9EB0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100157064(&qword_1002D9EB8);
  sub_1001A53A0((unint64_t *)&unk_1002D9EC0, &qword_1002D9EB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v28, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v30);
  id v18 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v19 = (void *)swift_allocObject();
  unint64_t v20 = v33;
  _DWORD v19[2] = a1;
  v19[3] = v20;
  v19[4] = v27;
  uint64_t v41 = sub_1001A54A4;
  uint64_t v42 = v19;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256;
  uint64_t v39 = sub_1001E0068;
  unint64_t v40 = &unk_10028D150;
  NSString v21 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  id v22 = v20;
  static DispatchQoS.unspecified.getter();
  uint64_t v43 = _swiftEmptyArrayStorage;
  sub_1001A5358((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  NSString v23 = v34;
  uint64_t v24 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v32);
  return swift_release();
}

uint64_t sub_1001A0330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v97 = a3;
  uint64_t v102 = a2;
  uint64_t v4 = sub_100157064(&qword_1002D8210);
  __chkstk_darwin(v4 - 8);
  uint64_t v87 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (char *)&type metadata for Any;
  uint64_t v7 = "kCTCellMonitorCellRadioAccessTechnology";
  if (*(void *)(a1 + 16)
    && (unint64_t v8 = sub_1001EB868(0xD000000000000027, 0x8000000100239DB0), (v9 & 1) != 0)
    && (sub_100196D64(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v120), (swift_dynamicCast() & 1) != 0))
  {
    if (v118 != __PAIR128__(0x800000010023C300, 0xD000000000000025)) {
      goto LABEL_123;
    }
    swift_bridgeObjectRelease();
    int v109 = 1;
  }
  else
  {
    int v109 = 0;
  }
LABEL_7:
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v90 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  uint64_t v101 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock;
  Swift::String v14 = (unint64_t *)(v102 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_bridgeObjectRetain();
  id v98 = v14;
  uint64_t result = swift_beginAccess();
  unint64_t v16 = 0;
  unint64_t v17 = (unint64_t)(v11 + 63) >> 6;
  Swift::Int v100 = v119;
  Swift::Int v105 = &v122;
  unint64_t v84 = v17 - 1;
  int64_t v93 = v17;
  unint64_t v85 = v17 - 5;
  uint64_t v86 = a1 + 104;
  unint64_t v104 = 0x800000010023BFF0;
  uint64_t v99 = v6 + 8;
  uint64_t v92 = 0x800000010023C010;
  unint64_t v89 = (unint64_t)"avg_values_phy_cell_id";
  unint64_t v103 = 0x8000000100239D70;
  unint64_t v91 = 0x800000010023CB00;
  BOOL v94 = v7 - 32;
  unint64_t v88 = (unint64_t)(v7 - 32) | 0x8000000000000000;
  uint64_t v106 = a1;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      uint64_t v19 = (v13 - 1) & v13;
      unint64_t v20 = v18 | (v16 << 6);
      goto LABEL_14;
    }
    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v24 >= v93)
    {
      unint64_t v26 = v16;
    }
    else
    {
      unint64_t v25 = *(void *)(v90 + 8 * v24);
      if (v25) {
        goto LABEL_18;
      }
      unint64_t v26 = v16 + 1;
      if ((uint64_t)(v16 + 2) < v93)
      {
        unint64_t v25 = *(void *)(v90 + 8 * (v16 + 2));
        if (v25)
        {
          int64_t v24 = v16 + 2;
          goto LABEL_18;
        }
        unint64_t v26 = v16 + 2;
        if ((uint64_t)(v16 + 3) < v93)
        {
          unint64_t v25 = *(void *)(v90 + 8 * (v16 + 3));
          if (v25)
          {
            int64_t v24 = v16 + 3;
LABEL_18:
            uint64_t v19 = (v25 - 1) & v25;
            unint64_t v20 = __clz(__rbit64(v25)) + (v24 << 6);
            unint64_t v16 = v24;
LABEL_14:
            uint64_t v21 = *(void *)(a1 + 56);
            id v22 = (void *)(*(void *)(a1 + 48) + 16 * v20);
            uint64_t v23 = v22[1];
            *(void *)&long long v118 = *v22;
            *((void *)&v118 + 1) = v23;
            sub_100196D64(v21 + 32 * v20, (uint64_t)v100);
            swift_bridgeObjectRetain();
            goto LABEL_21;
          }
          int64_t v24 = v16 + 4;
          unint64_t v26 = v16 + 3;
          if ((uint64_t)(v16 + 4) < v93)
          {
            unint64_t v25 = *(void *)(v90 + 8 * v24);
            if (v25) {
              goto LABEL_18;
            }
            while (v85 != v16)
            {
              unint64_t v25 = *(void *)(v86 + 8 * v16++);
              if (v25)
              {
                int64_t v24 = v16 + 4;
                goto LABEL_18;
              }
            }
            unint64_t v26 = v84;
          }
        }
      }
    }
    uint64_t v19 = 0;
    memset(v119, 0, sizeof(v119));
    unint64_t v16 = v26;
    long long v118 = 0u;
LABEL_21:
    sub_100197FD0((uint64_t)&v118, (uint64_t)&v120);
    unint64_t v27 = v121;
    if (!v121) {
      return swift_release();
    }
    unint64_t v107 = v19;
    unint64_t v108 = v16;
    uint64_t v28 = v120;
    sub_100197FC0(v105, &v118);
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_1001A4D38(v109 & 1);
    uint64_t v31 = v30;
    char v33 = v32;
    swift_bridgeObjectRelease();
    Swift::String v34 = String.lowercased()();
    Swift::String v35 = String.lowercased()();
    if (v34._countAndFlagsBits == v35._countAndFlagsBits && v34._object == v35._object)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
      {
        unint64_t v41 = v27;
        uint64_t v40 = v28;
        a1 = v106;
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v115 = 0;
    *((void *)&v115 + 1) = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v37._countAndFlagsBits = 32;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    a1 = v106;
    if (*(void *)(v106 + 16) && (unint64_t v38 = sub_1001EB868(0xD000000000000011, v92), (v39 & 1) != 0))
    {
      sub_100196D64(*(void *)(a1 + 56) + 32 * v38, (uint64_t)&v113);
      sub_100197FC0(&v113, &v116);
    }
    else
    {
      uint64_t v117 = &type metadata for String;
      *(void *)&long long v116 = 0;
      *((void *)&v116 + 1) = 0xE000000000000000;
    }
    _print_unlocked<A, B>(_:_:)();
    sub_100157190((uint64_t)&v116);
    uint64_t v117 = &type metadata for String;
    long long v116 = v115;
    sub_100157190((uint64_t)&v118);
    sub_100197FC0(&v116, &v118);
    uint64_t v40 = 0x206B726F7774654ELL;
    unint64_t v41 = 0xEC0000004E4D4C50;
    uint64_t v31 = 0xE300000000000000;
    char v33 = 1;
    uint64_t v29 = 5521746;
LABEL_32:
    uint64_t v110 = v40;
    uint64_t v111 = (char *)v41;
    Swift::String v42 = String.lowercased()();
    Swift::String v43 = String.lowercased()();
    if (v42._countAndFlagsBits == v43._countAndFlagsBits && v42._object == v43._object)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v44 & 1) == 0) {
        goto LABEL_55;
      }
    }
    *(void *)&long long v115 = 0;
    *((void *)&v115 + 1) = 0xE000000000000000;
    if (!*(void *)(a1 + 16))
    {
      long long v114 = 0u;
      long long v113 = 0u;
LABEL_43:
      uint64_t v117 = &type metadata for String;
      *(void *)&long long v116 = 0;
      *((void *)&v116 + 1) = 0xE000000000000000;
      sub_10015D658((uint64_t)&v113, (uint64_t *)&unk_1002D9680);
      goto LABEL_44;
    }
    uint64_t v45 = (uint64_t)v111;
    swift_bridgeObjectRetain();
    unint64_t v46 = sub_1001EB868(v110, v45);
    if (v47)
    {
      sub_100196D64(*(void *)(a1 + 56) + 32 * v46, (uint64_t)&v113);
    }
    else
    {
      long long v114 = 0u;
      long long v113 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v114 + 1)) {
      goto LABEL_43;
    }
    sub_100197FC0(&v113, &v116);
LABEL_44:
    _print_unlocked<A, B>(_:_:)();
    sub_100157190((uint64_t)&v116);
    uint64_t v48 = sub_1001CC1AC(v115, *((unint64_t *)&v115 + 1));
    if ((v49 & 1) == 0 && v48 == 2)
    {
      *(void *)&long long v115 = 0;
      *((void *)&v115 + 1) = 0xE000000000000000;
      if (*(void *)(a1 + 16) && (unint64_t v50 = sub_1001EB868(0xD000000000000027, v88), (v51 & 1) != 0))
      {
        sub_100196D64(*(void *)(a1 + 56) + 32 * v50, (uint64_t)&v113);
        sub_100197FC0(&v113, &v116);
      }
      else
      {
        uint64_t v117 = &type metadata for String;
        *(void *)&long long v116 = 0;
        *((void *)&v116 + 1) = 0xE000000000000000;
      }
      _print_unlocked<A, B>(_:_:)();
      sub_100157190((uint64_t)&v116);
      Swift::String v52 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String v53 = String.lowercased()();
      if (v52._countAndFlagsBits == v53._countAndFlagsBits && v52._object == v53._object)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v54 & 1) == 0) {
          goto LABEL_55;
        }
      }
      uint64_t v117 = &type metadata for String;
      *(void *)&long long v116 = 51;
      *((void *)&v116 + 1) = 0xE100000000000000;
      sub_100157190((uint64_t)&v118);
      sub_100197FC0(&v116, &v118);
    }
LABEL_55:
    if ((v109 & 1) == 0) {
      goto LABEL_63;
    }
    Swift::String v55 = String.lowercased()();
    Swift::String v56 = String.lowercased()();
    if (v55._countAndFlagsBits == v56._countAndFlagsBits && v55._object == v56._object)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v57 & 1) == 0) {
        goto LABEL_63;
      }
    }
    if (*(void *)(a1 + 16))
    {
      unint64_t v58 = sub_1001EB868(0xD00000000000001CLL, v89 | 0x8000000000000000);
      if (v59)
      {
        sub_100196D64(*(void *)(a1 + 56) + 32 * v58, (uint64_t)&v116);
        if (swift_dynamicCast())
        {
LABEL_10:
          swift_bridgeObjectRelease();
          unint64_t v16 = v108;
          unint64_t v13 = v107;
          goto LABEL_11;
        }
      }
    }
LABEL_63:
    if ((v33 & 1) == 0) {
      goto LABEL_10;
    }
    *(void *)&long long v116 = v29;
    *((void *)&v116 + 1) = v31;
    swift_bridgeObjectRetain();
    v60._countAndFlagsBits = 126;
    v60._object = (void *)0xE100000000000000;
    String.append(_:)(v60);
    *(void *)&long long v113 = v97;
    v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    uint64_t v62 = *((void *)&v116 + 1);
    uint64_t v112 = v116;
    [*(id *)(v102 + v101) lock];
    unint64_t v63 = *v98;
    *(void *)&long long v116 = _swiftEmptyArrayStorage;
    uint64_t v96 = v29;
    if (v63 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      a1 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v64 = v110;
    uint64_t v7 = (const char *)v62;
    if (a1)
    {
      uint64_t v95 = v31;
      unint64_t v65 = 0;
      uint64_t v6 = v111;
      while (1)
      {
        if ((v63 & 0xC000000000000001) != 0)
        {
          uint64_t v66 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v67 = v65 + 1;
          if (__OFADD__(v65, 1)) {
            goto LABEL_122;
          }
        }
        else
        {
          if (v65 >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            int v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          uint64_t v66 = *(void **)(v63 + 8 * v65 + 32);
          swift_retain();
          unint64_t v67 = v65 + 1;
          if (__OFADD__(v65, 1)) {
            goto LABEL_122;
          }
        }
        BOOL v68 = v66[2] == v112 && v66[3] == v62;
        if (v68 || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && (v66[8] == v64 ? (BOOL v69 = v66[9] == (void)v6) : (BOOL v69 = 0),
              v69 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v6 = v111;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v64 = v110;
        }
        else
        {
          swift_release();
        }
        ++v65;
        if (v67 == a1)
        {
          unint64_t v70 = v116;
          a1 = v106;
          uint64_t v31 = v95;
          goto LABEL_89;
        }
      }
    }
    unint64_t v70 = (unint64_t)_swiftEmptyArrayStorage;
    a1 = v106;
LABEL_89:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v70 & 0x8000000000000000) != 0 || (v70 & 0x4000000000000000) != 0)
    {
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (result)
      {
LABEL_92:
        if ((v70 & 0xC000000000000001) != 0)
        {
          unint64_t v71 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)(v70 + 16)) {
            goto LABEL_125;
          }
          unint64_t v71 = *(void **)(v70 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v73 = v71[14];
        unint64_t v72 = v71[15];
        *(void *)&long long v116 = 0;
        *((void *)&v116 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _print_unlocked<A, B>(_:_:)();
        if (__PAIR128__(v72, v73) == v116)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v74)
          {
            swift_release();
          }
          else
          {
            *(void *)&long long v116 = 0;
            *((void *)&v116 + 1) = 0xE000000000000000;
            _print_unlocked<A, B>(_:_:)();
            uint64_t v75 = *((void *)&v116 + 1);
            v71[14] = v116;
            v71[15] = v75;
            swift_bridgeObjectRelease();
            v71[12] = sub_1001AC4FC();
            v71[13] = v76;
            swift_release();
            swift_bridgeObjectRelease();
          }
        }
        unint64_t v16 = v108;
        unint64_t v13 = v107;
        goto LABEL_118;
      }
    }
    else
    {
      uint64_t result = *(void *)(v70 + 16);
      if (result) {
        goto LABEL_92;
      }
    }
    uint64_t v77 = a1;
    swift_release();
    *(void *)&long long v116 = 0;
    *((void *)&v116 + 1) = 0xE000000000000000;
    uint64_t v78 = (uint64_t)v111;
    swift_bridgeObjectRetain();
    _print_unlocked<A, B>(_:_:)();
    long long v79 = v116;
    uint64_t v80 = (uint64_t)v87;
    Date.init()();
    uint64_t v81 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 0, 1, v81);
    type metadata accessor for FTMAllMetricsModel();
    swift_allocObject();
    sub_1001AC174(v112, v62, v96, v31, v64, v78, v79, *((uint64_t *)&v79 + 1), 0, 0xE000000000000000, v80, v97, 1);
    uint64_t v82 = v98;
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v82 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v82 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
    unint64_t v16 = v108;
    unint64_t v13 = v107;
    a1 = v77;
LABEL_118:
    [*(id *)(v102 + v101) unlock];
LABEL_11:
    sub_100157190((uint64_t)&v118);
    uint64_t result = swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_125:
  __break(1u);
  return result;
}

uint64_t sub_1001A1330(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v69 = *(void *)(v2 - 8);
  uint64_t v70 = v2;
  __chkstk_darwin(v2);
  BOOL v68 = (char *)v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (int *)type metadata accessor for Metric(0);
  uint64_t v62 = *((void *)v4 - 1);
  __chkstk_darwin(v4);
  uint64_t v63 = v5;
  uint64_t v64 = (uint64_t)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  __chkstk_darwin(v6);
  char v59 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  unint64_t v58 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v66 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002D7A88 != -1) {
    swift_once();
  }
  uint64_t v57 = qword_1002E3138;
  v56[3] = static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100267EF0;
  id v14 = *(id *)(a1 + v4[5]);
  id v15 = [v14 description];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  long long aBlock = (void **)v16;
  uint64_t v73 = v18;
  v19._countAndFlagsBits = 44;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  LODWORD(v71) = *(_DWORD *)(a1 + v4[13]);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 44;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  id v22 = *(id *)(a1 + v4[6]);
  id v23 = [v22 description];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);

  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 44;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  id v29 = *(id *)(a1 + v4[7]);
  id v30 = [v29 description];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v33 = v32;

  v34._countAndFlagsBits = v31;
  v34._object = v33;
  String.append(_:)(v34);

  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 44;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  id v36 = *(id *)(a1 + v4[9]);
  id v37 = [v36 description];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  v41._countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);

  swift_bridgeObjectRelease();
  Swift::String v42 = aBlock;
  uint64_t v43 = v73;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_100181588();
  *(void *)(v13 + 32) = v42;
  *(void *)(v13 + 40) = v43;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  static DispatchQoS.userInteractive.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  sub_1001A5358(&qword_1002D9EB0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100157064(&qword_1002D9EB8);
  sub_1001A53A0((unint64_t *)&unk_1002D9EC0, &qword_1002D9EB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v60 + 104))(v59, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v61);
  char v44 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v45 = a1;
  uint64_t v46 = v64;
  sub_1001A5530(v45, v64, type metadata accessor for Metric);
  unint64_t v47 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
  unint64_t v48 = (v63 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = swift_allocObject();
  sub_1001A5250(v46, v49 + v47);
  unint64_t v50 = v67;
  *(void *)(v49 + v48) = v67;
  uint64_t v76 = sub_1001A52B4;
  uint64_t v77 = v49;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v73 = 1107296256;
  char v74 = sub_1001E0068;
  uint64_t v75 = &unk_10028CFC0;
  char v51 = _Block_copy(&aBlock);
  id v52 = v50;
  static DispatchQoS.unspecified.getter();
  unint64_t v71 = _swiftEmptyArrayStorage;
  sub_1001A5358((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  Swift::String v53 = v68;
  uint64_t v54 = v70;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v51);

  (*(void (**)(char *, uint64_t))(v69 + 8))(v53, v54);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v12, v66);
  return swift_release();
}

id sub_1001A1AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v175 = (char *)a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v170 = *(void *)(v3 - 8);
  uint64_t v171 = v3;
  __chkstk_darwin(v3);
  uint64_t v168 = (char *)&v160 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v172 = *(void *)(v5 - 8);
  uint64_t v173 = v5;
  __chkstk_darwin(v5);
  uint64_t v169 = (uint64_t)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100157064(&qword_1002D8210);
  __chkstk_darwin(v7 - 8);
  v174 = (char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100167598(0, (unint64_t *)&unk_1002DAE40);
  unint64_t v177 = (int *)type metadata accessor for Metric(0);
  uint64_t v167 = v177[5];
  id v9 = *(id *)(a1 + v167);
  uint64_t v10 = NSString.init(stringLiteral:)();
  char v11 = static NSObject.== infix(_:_:)();

  uint64_t v176 = a1;
  if (v11)
  {
    uint64_t v12 = 12;
    uint64_t v166 = v177[8];
    for (uint64_t i = &off_100289068; ; i += 2)
    {
      Swift::String v14 = String.lowercased()();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v15 = String.lowercased()();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v14._countAndFlagsBits == v15._countAndFlagsBits && v14._object == v15._object) {
        break;
      }
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id result = (id)swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_31;
      }
      if (!--v12) {
        return result;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_31:
    id v47 = v9;
    id v48 = [v47 description];
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v51 = v50;

    aBlock._uint64_t countAndFlagsBits = v49;
    aBlock._object = v51;
    v52._uint64_t countAndFlagsBits = 126;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    uint64_t v53 = v176;
    uint64_t v54 = v177[13];
    *(_DWORD *)unint64_t v184 = *(_DWORD *)(v176 + v54);
    v55._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = aBlock._countAndFlagsBits;
    object = aBlock._object;
    uint64_t v58 = (uint64_t)v175;
    Swift::String v34 = (id *)&v175[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock];
    [*(id *)&v175[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock] lock];
    char v59 = (unint64_t *)(v58 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
    uint64_t v60 = swift_beginAccess();
    unint64_t v61 = *v59;
    __chkstk_darwin(v60);
    uint64_t v157 = countAndFlagsBits;
    v158 = object;
    uint64_t v159 = v53;
    swift_bridgeObjectRetain();
    unint64_t v62 = (unint64_t)sub_10019E878(sub_1001A53F8, &v156, v61);
    unint64_t v63 = v62;
    if (v62 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_33:
        if ((v63 & 0xC000000000000001) == 0)
        {
          if (*(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v64 = *(void **)(v63 + 32);
            swift_retain();
            goto LABEL_36;
          }
          __break(1u);
          goto LABEL_76;
        }
LABEL_74:
        uint64_t v64 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v66 = v64[14];
        uint64_t v65 = v64[15];
        if (v66 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v67)
        {
LABEL_38:
          swift_release();
          swift_bridgeObjectRelease();
          return [*v34 unlock];
        }
        char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v74)
        {
LABEL_51:
          swift_release();
          return [*v34 unlock];
        }
        v64[14] = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v64[15] = v75;
        swift_bridgeObjectRelease();
        v64[12] = sub_1001AC4FC();
        v64[13] = v76;
        swift_bridgeObjectRelease();
        uint64_t v77 = v175;
        uint64_t v78 = swift_allocObject();
        *(void *)(v78 + 16) = v77;
        *(void *)(v78 + 24) = v64;
        unint64_t v182 = nullsub_1;
        uint64_t v183 = v78;
        aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
        aBlock._object = (void *)1107296256;
        long long v79 = &unk_10028D0B0;
LABEL_50:
        uint64_t v180 = sub_1001E0068;
        uint64_t v181 = v79;
        uint64_t v80 = _Block_copy(&aBlock);
        id v81 = v77;
        swift_retain();
        uint64_t v82 = v169;
        static DispatchQoS.unspecified.getter();
        v178 = _swiftEmptyArrayStorage;
        sub_1001A5358((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100157064((uint64_t *)&unk_1002D9600);
        sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
        uint64_t v83 = v168;
        uint64_t v84 = v171;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v80);
        swift_release();
        (*(void (**)(char *, uint64_t))(v170 + 8))(v83, v84);
        (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v82, v173);
        goto LABEL_51;
      }
    }
    else if (*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_33;
    }
    v165 = v34;
    swift_bridgeObjectRelease();
    uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v164 = v121;
    uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v163 = v122;
    uint64_t v123 = v177;
    uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v161 = v124;
    uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v126 = v125;
    uint64_t v127 = v53;
    uint64_t v128 = v53 + v123[11];
    uint64_t v129 = type metadata accessor for Date();
    uint64_t v130 = *(void *)(v129 - 8);
    uint64_t v131 = (uint64_t)v174;
    (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v174, v128, v129);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v130 + 56))(v131, 0, 1, v129);
    uint64_t v132 = *(int *)(v127 + v54);
    type metadata accessor for FTMAllMetricsModel();
    swift_allocObject();
    v133 = sub_1001AC174(countAndFlagsBits, (uint64_t)object, v167, v164, v166, v163, v162, v161, v160, v126, v131, v132, 1);
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    unint64_t v134 = v175;
    uint64_t v135 = swift_allocObject();
    *(void *)(v135 + 16) = v134;
    *(void *)(v135 + 24) = v133;
    unint64_t v182 = nullsub_1;
    uint64_t v183 = v135;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    uint64_t v180 = sub_1001E0068;
    uint64_t v181 = &unk_10028D100;
    uint64_t v136 = _Block_copy(&aBlock);
    swift_retain();
    id v137 = v134;
LABEL_69:
    uint64_t v138 = v169;
    static DispatchQoS.unspecified.getter();
    v178 = _swiftEmptyArrayStorage;
    sub_1001A5358((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100157064((uint64_t *)&unk_1002D9600);
    sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
    uint64_t v139 = v168;
    uint64_t v140 = v171;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v136);
    swift_release();
    (*(void (**)(char *, uint64_t))(v170 + 8))(v139, v140);
    (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v138, v173);
    goto LABEL_70;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 4543564 && v19 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  id result = (id)swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_17:
    uint64_t v22 = v176;
    uint64_t v23 = v177[6];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v166 = v23;
    if (v24 == 0x207942206C6C6543 && v25 == 0xEC000000646E6142)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v26)
    {
LABEL_21:
      Swift::String v27 = v177;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v28 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String aBlock = v28;
      strcpy(v184, "-section-dl_bw");
      v184[15] = -18;
      sub_1001571E0();
      LODWORD(v173) = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      aBlock._uint64_t countAndFlagsBits = 0xD000000000000010;
      aBlock._object = (void *)0x800000010023CAB0;
      uint64_t v29 = v27[13];
      *(_DWORD *)unint64_t v184 = *(_DWORD *)(v22 + v29);
      v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      uint64_t v32 = aBlock._countAndFlagsBits;
      uint64_t v31 = aBlock._object;
      uint64_t v33 = (uint64_t)v175;
      Swift::String v34 = (id *)&v175[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock];
      [*(id *)&v175[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock] lock];
      Swift::String v35 = (unint64_t *)(v33 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
      uint64_t v36 = swift_beginAccess();
      unint64_t v37 = *v35;
      __chkstk_darwin(v36);
      uint64_t v157 = v32;
      v158 = v31;
      uint64_t v159 = v22;
      swift_bridgeObjectRetain();
      unint64_t v38 = (unint64_t)sub_10019E878(sub_1001A55D0, &v156, v37);
      unint64_t v39 = v38;
      if (v38 >> 62)
      {
        if (_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_23:
          if ((v39 & 0xC000000000000001) != 0)
          {
            uint64_t v40 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_74;
            }
            uint64_t v40 = *(void **)(v39 + 32);
            swift_retain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v42 = v40[14];
          uint64_t v41 = v40[15];
          if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v41 == v43) {
            goto LABEL_38;
          }
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0)
          {
            v40[14] = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v40[15] = v45;
            swift_bridgeObjectRelease();
            v40[12] = sub_1001AC4FC();
            v40[13] = v46;
            swift_release();
            swift_bridgeObjectRelease();
            return [*v34 unlock];
          }
          goto LABEL_51;
        }
      }
      else if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_23;
      }
      v165 = v34;
      swift_bridgeObjectRelease();
      uint64_t v175 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v172 = v110;
      uint64_t v111 = v177;
      uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v170 = v113;
      uint64_t v171 = v112;
      uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v115 = v114;
      uint64_t v116 = v22 + v111[11];
      uint64_t v117 = type metadata accessor for Date();
      uint64_t v118 = *(void *)(v117 - 8);
      uint64_t v119 = (uint64_t)v174;
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v174, v116, v117);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v119, 0, 1, v117);
      uint64_t v120 = *(int *)(v22 + v29);
      type metadata accessor for FTMAllMetricsModel();
      swift_allocObject();
      sub_1001AC174(v32, (uint64_t)v31, 0x544C20726568744FLL, 0xEF73646E61422045, (uint64_t)v175, v172, v171, v170, v169, v115, v119, v120, v173 & 1);
      swift_beginAccess();
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_64:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
LABEL_70:
        swift_release();
        Swift::String v34 = v165;
        return [*v34 unlock];
      }
LABEL_76:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_64;
    }
    uint64_t v68 = 15;
    uint64_t v164 = v177[8];
    for (j = &off_100288F58; ; j += 2)
    {
      Swift::String v70 = String.lowercased()();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v71 = String.lowercased()();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v70._countAndFlagsBits == v71._countAndFlagsBits && v70._object == v71._object) {
        break;
      }
      char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id result = (id)swift_bridgeObjectRelease();
      if (v73) {
        goto LABEL_53;
      }
      if (!--v68) {
        return result;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_53:
    id v85 = v9;
    id v86 = [v85 description];
    uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v89 = v88;

    aBlock._uint64_t countAndFlagsBits = v87;
    aBlock._object = v89;
    v90._uint64_t countAndFlagsBits = 126;
    v90._object = (void *)0xE100000000000000;
    String.append(_:)(v90);
    uint64_t v91 = v176;
    uint64_t v92 = v177[13];
    *(_DWORD *)unint64_t v184 = *(_DWORD *)(v176 + v92);
    v93._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v93);
    swift_bridgeObjectRelease();
    uint64_t v95 = aBlock._countAndFlagsBits;
    BOOL v94 = aBlock._object;
    uint64_t v96 = (uint64_t)v175;
    Swift::String v34 = (id *)&v175[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock];
    [*(id *)&v175[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock] lock];
    uint64_t v97 = (unint64_t *)(v96 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
    uint64_t v98 = swift_beginAccess();
    unint64_t v99 = *v97;
    __chkstk_darwin(v98);
    uint64_t v157 = v95;
    v158 = v94;
    uint64_t v159 = v91;
    swift_bridgeObjectRetain();
    unint64_t v100 = (unint64_t)sub_10019E878(sub_1001A55D0, &v156, v99);
    unint64_t v101 = v100;
    if (v100 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_55;
      }
    }
    else if (*(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_55:
      if ((v101 & 0xC000000000000001) != 0)
      {
        uint64_t v102 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_58:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v104 = v102[14];
        uint64_t v103 = v102[15];
        if (v104 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v103 == v105) {
          goto LABEL_38;
        }
        char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v106) {
          goto LABEL_51;
        }
        v102[14] = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v102[15] = v107;
        swift_bridgeObjectRelease();
        v102[12] = sub_1001AC4FC();
        v102[13] = v108;
        swift_bridgeObjectRelease();
        uint64_t v77 = v175;
        uint64_t v109 = swift_allocObject();
        *(void *)(v109 + 16) = v77;
        *(void *)(v109 + 24) = v102;
        unint64_t v182 = nullsub_1;
        uint64_t v183 = v109;
        aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
        aBlock._object = (void *)1107296256;
        long long v79 = &unk_10028D010;
        goto LABEL_50;
      }
      if (*(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v102 = *(void **)(v101 + 32);
        swift_retain();
        goto LABEL_58;
      }
      __break(1u);
      goto LABEL_82;
    }
    v165 = v34;
    swift_bridgeObjectRelease();
    uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v163 = v141;
    uint64_t v164 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v162 = v142;
    uint64_t v143 = v177;
    uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v160 = v144;
    uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v146 = v145;
    uint64_t v147 = v91;
    uint64_t v148 = v91 + v143[11];
    uint64_t v149 = type metadata accessor for Date();
    uint64_t v150 = *(void *)(v149 - 8);
    uint64_t v151 = (uint64_t)v174;
    (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v174, v148, v149);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v150 + 56))(v151, 0, 1, v149);
    uint64_t v152 = *(int *)(v147 + v92);
    type metadata accessor for FTMAllMetricsModel();
    swift_allocObject();
    unint64_t v101 = (unint64_t)sub_1001AC174(v95, (uint64_t)v94, v167, v163, v164, v162, v161, v160, v166, v146, v151, v152, 1);
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v97 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v97 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_79:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      uint64_t v153 = v175;
      uint64_t v154 = swift_allocObject();
      *(void *)(v154 + 16) = v153;
      *(void *)(v154 + 24) = v101;
      unint64_t v182 = nullsub_1;
      uint64_t v183 = v154;
      aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
      aBlock._object = (void *)1107296256;
      uint64_t v180 = sub_1001E0068;
      uint64_t v181 = &unk_10028D060;
      uint64_t v136 = _Block_copy(&aBlock);
      id v155 = v153;
      swift_retain();
      goto LABEL_69;
    }
LABEL_82:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_79;
  }
  return result;
}

uint64_t sub_1001A3080(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Metric(0);
  __chkstk_darwin(v8);
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  char v11 = (char *)v21 - v10;
  uint64_t v12 = (void *)*a1;
  if (v12[2] == a2 && v12[3] == a3)
  {
    sub_1001A5530(a4, (uint64_t)v21 - v10, type metadata accessor for Metric);
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1001A5530(a4, (uint64_t)v11, type metadata accessor for Metric);
    char v15 = 0;
    if ((v14 & 1) == 0) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = v12[8];
  uint64_t v16 = v12[9];
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v18) {
    char v15 = 1;
  }
  else {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
LABEL_15:
  sub_100196C78((uint64_t)v11);
  return v15 & 1;
}

void sub_1001A31EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    if (qword_1002D7A98 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100267EF0;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_100181588();
    *(void *)(v5 + 32) = a1;
    *(void *)(v5 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    id v6 = [self generalPasteboard];
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 setString:v7];
  }
}

id sub_1001A3358()
{
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsGraphArray] = _swiftEmptyArrayStorage;
  uint64_t v6 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock;
  id v7 = objc_allocWithZone((Class)NSLock);
  uint64_t v8 = v0;
  *(void *)&v0[v6] = [v7 init];
  *(void *)&v8[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricSheetData] = 0;
  uint64_t v9 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject;
  *(void *)&v8[v9] = sub_1001E006C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&v8[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_currentSelectedSubsId] = 0;
  uint64_t v13 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_queueMetricGraph;
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  static DispatchQoS.background.getter();
  uint64_t v16 = _swiftEmptyArrayStorage;
  sub_1001A5358(&qword_1002D9EB0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100157064(&qword_1002D9EB8);
  sub_1001A53A0((unint64_t *)&unk_1002D9EC0, &qword_1002D9EB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
  *(void *)&v8[v13] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  unint64_t v10 = (objc_class *)type metadata accessor for FTMCellMonitorSharedClass();
  v15.receiver = v8;
  v15.super_class = v10;
  return [super init];
}

id sub_1001A3670()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FTMCellMonitorSharedClass();
  [super dealloc];
}

uint64_t type metadata accessor for FTMCellMonitorSharedClass()
{
  return self;
}

uint64_t sub_1001A3754@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for FTMCellMonitorSharedClass();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001A3790(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v48 = &v46[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = &v46[-v9];
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = &v46[-v12];
  __chkstk_darwin(v11);
  objc_super v15 = &v46[-v14];
  id v16 = [self decimalDigitCharacterSet];
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  CharacterSet.inverted.getter();
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  uint64_t v50 = v5 + 8;
  uint64_t v51 = v5;
  uint64_t v49 = v17;
  v17(v13, v4);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10019E674(a1, a2);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  if (v20)
  {
    if (v18 == 45 && v20 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRetain();
      sub_1001A4FF4(1uLL, a1, a2);
      swift_bridgeObjectRelease();
      a1 = static String._fromSubstring(_:)();
      a2 = v22;
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRetain();
LABEL_8:
  uint64_t v56 = a1;
  unint64_t v57 = a2;
  uint64_t v54 = 46;
  unint64_t v55 = 0xE100000000000000;
  uint64_t v52 = 0;
  unint64_t v53 = 0xE000000000000000;
  sub_1001571E0();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v23 = String.count.getter();
  uint64_t v24 = String.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v26 = __OFSUB__(v23, v24);
  uint64_t v27 = v23 - v24;
  if (v26)
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t result = String.count.getter();
  if (!result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v27 != 0x8000000000000000 || result != -1)
  {
    if (v27 / result == 1)
    {
      uint64_t v56 = a1;
      unint64_t v57 = a2;
      uint64_t v54 = 46;
      unint64_t v55 = 0xE100000000000000;
      uint64_t v28 = StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v28 + 16);
      uint64_t v30 = v29 != 0;
      if (!v29)
      {
        swift_bridgeObjectRelease();
LABEL_28:
        v49(v15, v4);
        return v30;
      }
      unsigned int v47 = 1;
      uint64_t v31 = v15;
      uint64_t v32 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v51 + 16);
      v51 += 16;
      id v48 = (unsigned char *)v28;
      uint64_t v33 = (unint64_t *)(v28 + 40);
      while (1)
      {
        uint64_t v34 = *(v33 - 1);
        unint64_t v35 = *v33;
        uint64_t v36 = (*v33 & 0x2000000000000000) != 0 ? HIBYTE(*v33) & 0xF : v34 & 0xFFFFFFFFFFFFLL;
        v32(v10, v31, v4);
        if (!v36) {
          break;
        }
        uint64_t v56 = v34;
        unint64_t v57 = v35;
        swift_bridgeObjectRetain();
        StringProtocol.rangeOfCharacter(from:options:range:)();
        char v38 = v37;
        v49(v10, v4);
        swift_bridgeObjectRelease();
        if ((v38 & 1) == 0) {
          goto LABEL_31;
        }
        v33 += 2;
        if (!--v29)
        {
          swift_bridgeObjectRelease();
          objc_super v15 = v31;
          uint64_t v30 = v47;
          goto LABEL_28;
        }
      }
      v49(v10, v4);
LABEL_31:
      swift_bridgeObjectRelease();
      v49(v31, v4);
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0) {
        uint64_t v39 = HIBYTE(a2) & 0xF;
      }
      else {
        uint64_t v39 = a1 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v40 = v48;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v51 + 16))(v48, v15, v4);
      if (v39)
      {
        uint64_t v56 = a1;
        unint64_t v57 = a2;
        StringProtocol.rangeOfCharacter(from:options:range:)();
        uint64_t v30 = v41 & 1;
        uint64_t v42 = v40;
        uint64_t v43 = v49;
        v49(v42, v4);
        v43(v15, v4);
        swift_bridgeObjectRelease();
        return v30;
      }
      swift_bridgeObjectRelease();
      char v44 = v40;
      uint64_t v45 = v49;
      v49(v44, v4);
      v45(v15, v4);
    }
    return 0;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001A3D08()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1001A3D7C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13FTMInternal_421FTMMetricDetailsClass__items;
  uint64_t v2 = sub_100157064(&qword_1002D9EA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_1001A3E20()
{
  return type metadata accessor for FTMMetricDetailsClass();
}

uint64_t type metadata accessor for FTMMetricDetailsClass()
{
  uint64_t result = qword_1002D9DE0;
  if (!qword_1002D9DE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001A3E74()
{
  sub_1001A3F04();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001A3F04()
{
  if (!qword_1002D9DF0)
  {
    sub_100157104(&qword_1002D93F0);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002D9DF0);
    }
  }
}

uint64_t sub_1001A3F60@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for FTMMetricDetailsClass();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001A3FA0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1001A4020()
{
  return static Published.subscript.setter();
}

uint64_t sub_1001A409C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1001A4124(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a5 + 56);
    uint64_t v8 = *(void *)(*(void *)(a5 + 48) + 8 * a2);
    uint64_t v9 = type metadata accessor for STransferMetrics();
    sub_1001A5530(v7 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v6, (uint64_t (*)(void))type metadata accessor for STransferMetrics);
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_1001A41DC(uint64_t a1)
{
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 126;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v16 = a1;
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  if (qword_1002D7B20 != -1) {
LABEL_25:
  }
    swift_once();
  unint64_t v4 = *(void *)(qword_1002E31D0 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsGraphArray);
  if (v4 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_4:
      unint64_t v6 = 0;
      unint64_t v7 = v4 & 0xC000000000000001;
      uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
      uint64_t v14 = v5;
      unint64_t v15 = v4;
      do
      {
        if (v7)
        {
          uint64_t v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v10 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
LABEL_22:
            __break(1u);
            break;
          }
        }
        else
        {
          if (v6 >= *(void *)(v8 + 16))
          {
            __break(1u);
            goto LABEL_25;
          }
          uint64_t v9 = *(void **)(v4 + 8 * v6 + 32);
          swift_retain();
          unint64_t v10 = v6 + 1;
          if (__OFADD__(v6, 1)) {
            goto LABEL_22;
          }
        }
        BOOL v11 = v9[2] == v17 && v9[3] == v18;
        if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && *((unsigned char *)v9 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible) == 1
          && (v9[6] == *(void *)(v16 + 48) && v9[7] == *(void *)(v16 + 56)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v5 = v14;
          unint64_t v4 = v15;
        }
        else
        {
          swift_release();
        }
        ++v6;
      }
      while (v10 != v5);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
    || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v13) {
      return _swiftEmptyArrayStorage;
    }
    goto LABEL_30;
  }
  if (!_swiftEmptyArrayStorage[2]) {
LABEL_30:
  }
    swift_release();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001A44C8(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v25 = v2;
  uint64_t v26 = v3;
  __chkstk_darwin(v2);
  uint64_t v24 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v10 - 8);
  uint64_t v23 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  static DispatchQoS.background.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001A5358(&qword_1002D9EB0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100157064(&qword_1002D9EB8);
  sub_1001A53A0((unint64_t *)&unk_1002D9EC0, &qword_1002D9EB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v5);
  uint64_t v13 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v21;
  *(void *)(v14 + 16) = v20;
  *(void *)(v14 + 24) = v15;
  aBlock[4] = sub_1001A5528;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028D1F0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1001A5358((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  uint64_t v18 = v24;
  uint64_t v17 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v23);
  return swift_release();
}

uint64_t sub_1001A492C(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        if (v6 == a2) {
          return v5;
        }
      }
      else if (*(void *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (++v5 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1001A4A1C(unint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001A492C(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    unint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_54;
    }
    if (*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 != v22) {
        goto LABEL_6;
      }
    }
    else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v6 + 5; ; ++i)
      {
        unint64_t v11 = i - 4;
        unint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0) {
          break;
        }
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v11 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_45;
        }
        if (*(void *)(v12 + 8 * i) != a2) {
          goto LABEL_11;
        }
LABEL_31:
        unint64_t v9 = i - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_46;
        }
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v18 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v18) {
          return v6;
        }
      }
      uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_unknownObjectRelease();
      if (v19 == a2) {
        goto LABEL_31;
      }
LABEL_11:
      if (v11 == v6)
      {
LABEL_30:
        if (__OFADD__(v6++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_31;
      }
      unint64_t v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          uint64_t v14 = *(void *)(v9 + 8 * i);
          swift_retain();
          goto LABEL_19;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        uint64_t v13 = *(void *)(v9 + 8 * v6 + 32);
        swift_retain();
        if ((v9 & 0xC000000000000001) == 0) {
          goto LABEL_16;
        }
      }
      uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v9 = *a1;
LABEL_19:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v9 & 0x8000000000000000) != 0
        || (v9 & 0x4000000000000000) != 0)
      {
        unint64_t v9 = sub_1001B4A00(v9);
        *a1 = v9;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v14;
      swift_release();
      specialized Array._endMutation()();
      unint64_t v9 = *a1;
      int v16 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!v16 || (v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
      {
        unint64_t v9 = sub_1001B4A00(v9);
        *a1 = v9;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v13;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_30;
    }
    return v6;
  }
  unint64_t v20 = *a1;
  if (!(v20 >> 62)) {
    return *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1001A4D38(char a1)
{
  uint64_t v2 = (uint64_t *)&unk_100289130;
  if ((a1 & 1) == 0) {
    uint64_t v2 = (uint64_t *)&unk_100289190;
  }
  uint64_t v3 = *v2;
  if (*v2)
  {
    if (a1) {
      uint64_t v4 = &off_100289120;
    }
    else {
      uint64_t v4 = &off_100289180;
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    char v7 = v4 + 5;
    while (1)
    {
      uint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      Swift::String v9 = String.lowercased()();
      Swift::String v10 = String.lowercased()();
      if (v9._countAndFlagsBits == v10._countAndFlagsBits && v9._object == v10._object)
      {
        uint64_t v16 = 5521746;
        swift_bridgeObjectRelease_n();
        goto LABEL_36;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v12)
      {
        uint64_t v16 = 5521746;
        goto LABEL_36;
      }
      ++v6;
      v7 += 2;
      if (v8 == v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    uint64_t v13 = 5521746;
    swift_bridgeObjectRelease();
    if (a1)
    {
      uint64_t v14 = 12;
      uint64_t v15 = &off_100289068;
      uint64_t v16 = 18229;
      while (1)
      {
        Swift::String v17 = String.lowercased()();
        Swift::String v18 = String.lowercased()();
        if (v17._countAndFlagsBits == v18._countAndFlagsBits && v17._object == v18._object) {
          break;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v20) {
          return 18229;
        }
        v15 += 2;
        if (!--v14) {
          return v13;
        }
      }
    }
    else
    {
      uint64_t v21 = 15;
      uint64_t v22 = &off_100288F58;
      uint64_t v16 = 4543564;
      while (1)
      {
        Swift::String v23 = String.lowercased()();
        Swift::String v24 = String.lowercased()();
        if (v23._countAndFlagsBits == v24._countAndFlagsBits && v23._object == v24._object) {
          break;
        }
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v26) {
          return 4543564;
        }
        v22 += 2;
        if (!--v21) {
          return v13;
        }
      }
    }
LABEL_36:
    swift_bridgeObjectRelease_n();
    return v16;
  }
  return result;
}

unint64_t sub_1001A4FF4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    uint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

uint64_t sub_1001A50AC()
{
  unint64_t v1 = (int *)(type metadata accessor for Metric(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  uint64_t v8 = v6 + v1[13];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1001A5250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Metric(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1001A52B4()
{
  uint64_t v1 = *(void *)(type metadata accessor for Metric(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1001A1AE4(v0 + v2, v3);
}

uint64_t sub_1001A5340(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001A5350()
{
  return swift_release();
}

uint64_t sub_1001A5358(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001A53A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100157104(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001A53F8(void *a1)
{
  return sub_1001A3080(a1, v1[2], v1[3], v1[4]) & 1;
}

uint64_t sub_1001A5424()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A5464()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001A54A4()
{
  return sub_1001A0330(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001A54B0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A54E8()
{
  return sub_10019F2A0(*(void *)(v0 + 16));
}

uint64_t sub_1001A54F0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001A5528()
{
  sub_1001A31EC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001A5530(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001A55D0(void *a1)
{
  return sub_1001A53F8(a1) & 1;
}

id sub_1001A55EC()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal____lazy_storage___tableView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal____lazy_storage___tableView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal____lazy_storage___tableView);
  }
  else
  {
    id v4 = sub_1001A5650(v0);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1001A5650(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)UITableView) initWithFrame:0 style:0.0];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self colorNamed:v3];

  [v2 setBackgroundColor:v4];
  type metadata accessor for MultiSelectionModalCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v6];

  [v2 setDelegate:a1];
  [v2 setDataSource:a1];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v2;
}

id sub_1001A57B4()
{
  id v0 = [objc_allocWithZone((Class)UIButton) init];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self systemImageNamed:v1];

  [v0 setImage:v2 forState:0];
  id v3 = [v0 titleLabel];
  if (v3)
  {
    id v4 = v3;
    id v5 = [self systemFontOfSize:50.0 weight:UIFontWeightBold];
    [v4 setFont:v5];
  }
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [self colorNamed:v6];

  [v0 setTintColor:v7];
  sub_100157064(&qword_1002D9F18);
  [v0 addTarget:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() action:@"didTapDismiss:" forControlEvents:64];
  swift_unknownObjectRelease();
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v0;
}

id sub_1001A59AC@<X0>(id *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  id v6 = *a1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v6;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_1001A6950;
  *(void *)(v4 + 24) = v3;
  *a2 = sub_1001A69C0;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v4;

  return v6;
}

void sub_1001A5B4C()
{
  id v1 = [v0 view];
  if (!v1)
  {
    __break(1u);
    goto LABEL_14;
  }
  id v2 = v1;
  id v3 = sub_1001A55EC();
  [v2 addSubview:v3];

  id v4 = [v0 view];
  if (!v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id v5 = v4;
  id v6 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal_dismissButton];
  [v4 addSubview:v6];

  id v7 = [v0 view];
  if (!v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v7;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [self colorNamed:v9];

  [v8 setBackgroundColor:v10];
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1002693F0;
  id v12 = sub_1001A55EC();
  id v13 = [v12 leftAnchor];

  id v14 = [v0 view];
  if (!v14)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v15 = v14;
  id v16 = [v14 safeAreaLayoutGuide];

  id v17 = [v16 leftAnchor];
  id v18 = [v13 constraintEqualToSystemSpacingAfterAnchor:v17 multiplier:0.7];

  *(void *)(v11 + 32) = v18;
  id v19 = sub_1001A55EC();
  id v20 = [v19 rightAnchor];

  id v21 = [v0 view];
  if (!v21)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v22 = v21;
  id v23 = [v21 safeAreaLayoutGuide];

  id v24 = [v23 rightAnchor];
  id v25 = [v20 constraintEqualToSystemSpacingAfterAnchor:v24 multiplier:0.7];

  *(void *)(v11 + 40) = v25;
  id v26 = sub_1001A55EC();
  id v27 = [v26 bottomAnchor];

  id v28 = [v0 view];
  if (!v28)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v29 = v28;
  id v30 = [v28 safeAreaLayoutGuide];

  id v31 = [v30 bottomAnchor];
  id v32 = [v27 constraintEqualToAnchor:v31];

  *(void *)(v11 + 48) = v32;
  id v33 = sub_1001A55EC();
  id v34 = [v33 topAnchor];

  id v35 = [v0 view];
  if (!v35)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v36 = v35;
  id v37 = [v35 safeAreaLayoutGuide];

  id v38 = [v37 topAnchor];
  id v39 = [v34 constraintEqualToAnchor:v38];

  *(void *)(v11 + 56) = v39;
  id v40 = [v6 topAnchor];
  id v41 = [v0 view];
  if (!v41)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v42 = v41;
  id v43 = [v41 safeAreaLayoutGuide];

  id v44 = [v43 topAnchor];
  id v45 = [v40 constraintEqualToAnchor:v44];

  *(void *)(v11 + 64) = v45;
  id v46 = [v6 rightAnchor];
  id v47 = [v0 view];
  if (!v47)
  {
LABEL_21:
    __break(1u);
    return;
  }
  id v48 = v47;
  uint64_t v49 = self;
  id v50 = [v48 safeAreaLayoutGuide];

  id v51 = [v50 rightAnchor];
  id v52 = [v46 constraintEqualToAnchor:v51 constant:-15.0];

  *(void *)(v11 + 72) = v52;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v49 activateConstraints:isa];
}

id sub_1001A61E8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MultiChoiceSelectionModal();
  return [super dealloc];
}

uint64_t type metadata accessor for MultiChoiceSelectionModal()
{
  return self;
}

void sub_1001A6380(void *a1)
{
  objc_super v2 = v1;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v18 = [a1 cellForRowAtIndexPath:isa];

  if (v18)
  {
    type metadata accessor for MultiSelectionModalCell();
    if (swift_dynamicCastClass())
    {
      id v5 = sub_1001799FC();
      id v6 = [v5 text];

      if (v6)
      {
        uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v9 = v8;

        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          uint64_t v11 = (uint64_t *)(Strong
                          + OBJC_IVAR____TtC13FTMInternal_429CellularLoggingViewController_currentLogConfiguration);
          *uint64_t v11 = v7;
          v11[1] = v9;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v12 = *v11;
          id v13 = (void *)v11[1];
          id v14 = self;
          swift_bridgeObjectRetain();
          id v15 = [v14 grayColor];
          id v16 = sub_100209A9C(0xD000000000000013, 0x800000010023CC40, v12, v13, (uint64_t)v15);
          swift_bridgeObjectRelease();

          id v17 = sub_100203718();
          [v17 setAttributedTitle:v16 forState:0];
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      [v2 dismissViewControllerAnimated:1 completion:0];
    }
  }
}

unint64_t sub_1001A6690(void *a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v6 = [a1 dequeueReusableCellWithIdentifier:v4 forIndexPath:isa];

  type metadata accessor for MultiSelectionModalCell();
  uint64_t v7 = swift_dynamicCastClass();
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = sub_1001799FC();
    unint64_t result = IndexPath.row.getter();
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(void *)(*(void *)(v2 {
                                             + OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal_tableViewData)
    }
                                 + 16))
    {
      swift_bridgeObjectRetain();
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v9 setText:v11];

      return v8;
    }
    __break(1u);
  }
  else
  {

    id v12 = objc_allocWithZone((Class)UITableViewCell);
    return (unint64_t)[v12 init];
  }
  return result;
}

uint64_t sub_1001A6918()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1001A6950()
{
  id v1 = [*(id *)(v0 + 16) self];

  return v1;
}

uint64_t sub_1001A6988()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A69C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

id sub_1001A6C98()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return [super dealloc];
}

id sub_1001A6D18()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for SPCarrierBundleViewModel());

  return [v0 init];
}

id sub_1001A6D50@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_1001A6D18;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  objc_super v2 = (int *)type metadata accessor for FTMInternal_4();
  id v3 = (uint64_t *)(a1 + v2[5]);
  *id v3 = swift_getKeyPath();
  sub_100157064(&qword_1002D9FC0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AppDelegate();
  UIApplicationDelegateAdaptor.init(_:)();
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1002E31C8;
  *(void *)(a1 + v2[7]) = qword_1002E31C8;
  id v5 = self;
  swift_retain_n();
  id result = [v5 sharedInstance];
  if (result)
  {
    uint64_t v7 = result;
    id v8 = objc_allocWithZone((Class)type metadata accessor for PersistanceStore());
    id result = sub_1001DDF54(v4, v7);
    *(void *)(a1 + v2[8]) = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A6E90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v2 = type metadata accessor for ScenePhase();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v30 = (uint64_t)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for FTMInternal_4();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100157064(&qword_1002DA088);
  uint64_t v31 = *(void *)(v8 - 8);
  uint64_t v32 = v8;
  __chkstk_darwin(v8);
  id v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100157064(&qword_1002DA090);
  uint64_t v11 = __chkstk_darwin(v29);
  id v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v15 = (char *)&v28 - v14;
  sub_1001A8F38(v1, (uint64_t)v7);
  unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1001A8FA0((uint64_t)v7, v17 + v16);
  sub_100157064(&qword_1002DA098);
  sub_1001A9074();
  WindowGroup.init(id:title:lazyContent:)();
  uint64_t v18 = v28;
  uint64_t v19 = v30;
  sub_1001A8B90(&qword_1002D9FC0, (uint64_t (*)(void))&type metadata accessor for ScenePhase, 0x616850656E656353, 0xEA00000000006573, v30);
  sub_1001A8F38(v18, (uint64_t)v7);
  uint64_t v20 = swift_allocObject();
  sub_1001A8FA0((uint64_t)v7, v20 + v16);
  id v21 = &v13[*(int *)(v29 + 36)];
  uint64_t v23 = v33;
  uint64_t v22 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v21, v19, v34);
  id v24 = (void (**)(uint64_t))&v21[*(int *)(sub_100157064(&qword_1002DA0C0) + 36)];
  char *v24 = sub_1001A92F8;
  v24[1] = (void (*)(uint64_t))v20;
  uint64_t v26 = v31;
  uint64_t v25 = v32;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v13, v10, v32);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v19, v22);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v25);
  sub_1001A935C((uint64_t)v13, (uint64_t)v15);
  sub_1001A93C4();
  static SceneBuilder.buildBlock<A>(_:)();
  return sub_10015D658((uint64_t)v15, &qword_1002DA090);
}

uint64_t sub_1001A72B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FTMInternal_4();
  uint64_t v5 = *(void **)(a1 + *(int *)(v4 + 32));
  uint64_t v6 = *(void *)(a1 + *(int *)(v4 + 28));
  type metadata accessor for MainWindowViewModel();
  swift_allocObject();
  id v7 = v5;
  swift_retain();
  uint64_t v8 = sub_100181298(v7, v6);
  type metadata accessor for SPCarrierBundleViewModel();
  sub_1001A9BA4((unint64_t *)&unk_1002DA0E0, (void (*)(uint64_t))type metadata accessor for SPCarrierBundleViewModel);
  uint64_t v9 = EnvironmentObject.init()();
  uint64_t v11 = v10;
  uint64_t v12 = *(void **)(v8 + 16);
  type metadata accessor for AllMetricsViewModel();
  swift_allocObject();
  id v13 = v12;
  uint64_t v14 = sub_1001B59B0(v13);

  uint64_t v15 = StateObject.wrappedValue.getter();
  uint64_t result = static ObservableObject.environmentStore.getter();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = sub_10017C824;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = result;
  *(void *)(a2 + 64) = v15;
  return result;
}

void sub_1001A7418(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ScenePhase();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for ScenePhase.background(_:))
  {
    if (qword_1002D7A98 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    id v7 = [self sharedInstance];
    if (v7)
    {
LABEL_10:
      uint64_t v8 = v7;
      NSString v9 = String._bridgeToObjectiveC()();
      [v8 removeAWDConfigForAppid:v9];

      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();

      return;
    }
    goto LABEL_28;
  }
  if (v6 == enum case for ScenePhase.inactive(_:))
  {
    if (qword_1002D7A98 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    id v7 = [self sharedInstance];
    if (v7) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
  if (v6 == enum case for ScenePhase.active(_:))
  {
    if (qword_1002D7A98 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    type metadata accessor for SPCarrierBundleViewModel();
    sub_1001A9BA4((unint64_t *)&unk_1002DA0E0, (void (*)(uint64_t))type metadata accessor for SPCarrierBundleViewModel);
    uint64_t v10 = (void *)StateObject.wrappedValue.getter();
    sub_1001AA850();

    id v11 = [self sharedInstance];
    if (!v11)
    {
LABEL_28:
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      return;
    }
    uint64_t v12 = v11;
    id v13 = [self mainBundle];
    if (qword_1002D7B18 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v13 pathForResource:v14 ofType:v15];

    if (v16)
    {
      NSString v17 = String._bridgeToObjectiveC()();
      unsigned int v18 = [v12 addAWDConfigForAppId:v17 andProtofFilePath:v16];

      if (!v18)
      {
LABEL_33:

        return;
      }
      [v12 listen];
      NSString v19 = String._bridgeToObjectiveC()();
      [v12 querySpecificMetric:v19 triggerRef:9999 triggerType:0 triggerID:*(unsigned int *)(qword_1002E31C8 + 184) profileID:0 metricID:0];

      if (qword_1002D7A88 != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
    }
    else
    {
      if (qword_1002D7A88 != -1) {
        swift_once();
      }
      static os_log_type_t.error.getter();
    }
    os_log(_:dso:log:type:_:)();
    goto LABEL_33;
  }
  if (qword_1002D7B40 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1001A9488(v20, (uint64_t)qword_1002E3208);
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unknown ScenePhase. Ignoring", v23, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

uint64_t type metadata accessor for FTMInternal_4()
{
  uint64_t result = qword_1002DA030;
  if (!qword_1002DA030) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for AppDelegate()
{
  return self;
}

unint64_t sub_1001A7CB8(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    sub_10017FE20(*(void *)a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a3[5];
    id v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_100157064(&qword_1002D9FC0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ScenePhase();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *id v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    uint64_t v18 = sub_100157064(&qword_1002D9FC8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = a3[8];
    *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
    uint64_t v20 = *(void **)(a2 + v19);
    *(void *)(a1 + v19) = v20;
    swift_retain();
    id v21 = v20;
  }
  return a1;
}

void sub_1001A7E5C(uint64_t a1, int *a2)
{
  sub_10017FE80(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v4 = a1 + a2[5];
  sub_100157064(&qword_1002D9FC0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ScenePhase();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = sub_100157064(&qword_1002D9FC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  uint64_t v8 = *(void **)(a1 + a2[8]);
}

uint64_t sub_1001A7F6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_10017FE20(*(void *)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  id v11 = (void *)(a2 + v9);
  sub_100157064(&qword_1002D9FC0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ScenePhase();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    *uint64_t v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_100157064(&qword_1002D9FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v18 = *(void **)(a2 + v17);
  *(void *)(a1 + v17) = v18;
  swift_retain();
  id v19 = v18;
  return a1;
}

uint64_t sub_1001A80C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_10017FE20(*(void *)a2, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10017FE80(v9, v10, v11);
  if (a1 != a2)
  {
    uint64_t v12 = a3[5];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (void *)(a2 + v12);
    sub_10015D658(a1 + v12, &qword_1002D9FC0);
    sub_100157064(&qword_1002D9FC0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for ScenePhase();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      void *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v16 = a3[6];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_100157064(&qword_1002D9FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  uint64_t v20 = a3[8];
  id v21 = *(void **)(a2 + v20);
  os_log_type_t v22 = *(void **)(a1 + v20);
  *(void *)(a1 + v20) = v21;
  id v23 = v21;

  return a1;
}

uint64_t sub_1001A8250(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100157064(&qword_1002D9FC0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ScenePhase();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_100157064(&qword_1002D9FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  return a1;
}

uint64_t sub_1001A839C(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10017FE80(v7, v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (const void *)(a2 + v10);
    sub_10015D658(a1 + v10, &qword_1002D9FC0);
    uint64_t v13 = sub_100157064(&qword_1002D9FC0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for ScenePhase();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_100157064(&qword_1002D9FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  uint64_t v19 = a3[8];
  uint64_t v20 = *(void **)(a1 + v19);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);

  return a1;
}

uint64_t sub_1001A8524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A8538);
}

uint64_t sub_1001A8538(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100157064(&qword_1002D9FD0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_100157064(&qword_1002D9FC8);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[7]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_1001A8650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A8664);
}

uint64_t sub_1001A8664(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100157064(&qword_1002D9FD0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = sub_100157064(&qword_1002D9FC8);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[7]) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

void sub_1001A8778()
{
  sub_1001A88CC(319, &qword_1002DA040, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v1 <= 0x3F)
  {
    sub_1001A88CC(319, (unint64_t *)&unk_1002DA048, v0, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for UIApplicationDelegateAdaptor);
    if (v2 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1001A88CC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_1001A8930()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001A894C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001A8B90(&qword_1002D7FA0, (uint64_t (*)(void))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_1001A898C(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  unint64_t v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_1001AB860(1819242306, 0xE400000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_100169A90(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

uint64_t sub_1001A8B90@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100157064(a1);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015D5F4(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    id v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      unint64_t v25 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = a5;
      id v23 = (uint8_t *)v22;
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)id v23 = 136315138;
      uint64_t v28 = sub_1001AB860(v27, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1001A8E48()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_1001A8E6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ScenePhase();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.scenePhase.setter();
}

uint64_t sub_1001A8F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FTMInternal_4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A8FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FTMInternal_4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A9004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for FTMInternal_4() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1001A72B0(v4, a1);
}

unint64_t sub_1001A9074()
{
  unint64_t result = qword_1002DA0A0;
  if (!qword_1002DA0A0)
  {
    sub_100157104(&qword_1002DA098);
    sub_1001A9114();
    sub_10015D788(&qword_1002DA0B0, &qword_1002DA0B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DA0A0);
  }
  return result;
}

unint64_t sub_1001A9114()
{
  unint64_t result = qword_1002DA0A8;
  if (!qword_1002DA0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DA0A8);
  }
  return result;
}

uint64_t sub_1001A916C()
{
  uint64_t v1 = (int *)type metadata accessor for FTMInternal_4();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  sub_10017FE80(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8), *(unsigned char *)(v0 + v3 + 16));
  uint64_t v6 = v0 + v3 + v1[5];
  sub_100157064(&qword_1002D9FC0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ScenePhase();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v2 | 7;
  uint64_t v9 = v3 + v4;
  uint64_t v10 = v5 + v1[6];
  uint64_t v11 = sub_100157064(&qword_1002D9FC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_release();

  return _swift_deallocObject(v0, v9, v8);
}

void sub_1001A92F8(uint64_t a1)
{
}

uint64_t sub_1001A935C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002DA090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001A93C4()
{
  unint64_t result = qword_1002DA0C8;
  if (!qword_1002DA0C8)
  {
    sub_100157104(&qword_1002DA090);
    sub_10015D788(&qword_1002DA0D0, &qword_1002DA088);
    sub_10015D788(&qword_1002DA0D8, &qword_1002DA0C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DA0C8);
  }
  return result;
}

uint64_t sub_1001A9488(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1001A94C0()
{
  if (qword_1002D7A98 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  sub_1001E0528((uint64_t)_swiftEmptyArrayStorage);
  NSString v0 = String._bridgeToObjectiveC()();
  sub_1001A9BEC();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  AnalyticsSendEvent();
  swift_bridgeObjectRelease();

  return 1;
}

uint64_t sub_1001A9BA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001A9BEC()
{
  unint64_t result = qword_1002DA0F0;
  if (!qword_1002DA0F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002DA0F0);
  }
  return result;
}

unint64_t sub_1001A9C30(double a1, double a2, double a3, double a4)
{
  v31.receiver = v4;
  v31.super_class = (Class)type metadata accessor for TopHeaderCustomFlowLayout();
  [super layoutAttributesForElementsInRect:a1, a2, a3, a4];
  if (v9)
  {
    uint64_t v10 = v9;
    sub_1001AA084();
    unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v11 = 0;
  }
  id v12 = [v4 collectionView];
  if (!v12)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = v12;
  [v12 frame];
  double Width = CGRectGetWidth(v32);
  if (![v13 presentationSectionIndexForDataSourceSectionIndex:0] || !v11)
  {

    return v11;
  }
  if (v11 >> 62) {
    goto LABEL_33;
  }
  uint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v15) {
    goto LABEL_34;
  }
  do
  {
    uint64_t v30 = v13;
    uint64_t v16 = 4;
    uint64_t v17 = 0;
    if ((v11 & 0xC000000000000001) != 0)
    {
LABEL_10:
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_12;
    }
    while (1)
    {
      id v18 = *(id *)(v11 + 8 * v16);
LABEL_12:
      uint64_t v19 = v18;
      uint64_t v13 = (void *)(v17 + 1);
      if (__OFADD__(v17, 1)) {
        break;
      }
      id v20 = [v18 representedElementKind];
      if (!v20)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_22:

        swift_bridgeObjectRelease();
        if (v13 == (void *)v15) {
          goto LABEL_31;
        }
        goto LABEL_27;
      }
      id v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (!v24) {
        goto LABEL_22;
      }
      if (v22 == v25 && v24 == v26)
      {
        swift_bridgeObjectRelease_n();
LABEL_25:
        [v19 frame];
        [v19 setFrame:CGRectMake(0.0, 0.0, Width, CGRectGetHeight(v33))];
        goto LABEL_26;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v28) {
        goto LABEL_25;
      }
LABEL_26:

      if (v13 == (void *)v15)
      {
LABEL_31:

        goto LABEL_35;
      }
LABEL_27:
      uint64_t v17 = ++v16 - 4;
      if ((v11 & 0xC000000000000001) != 0) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain_n();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  }
  while (v15);
LABEL_34:

LABEL_35:
  swift_bridgeObjectRelease_n();
  return v11;
}

id sub_1001AA02C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TopHeaderCustomFlowLayout();
  return [super dealloc];
}

uint64_t type metadata accessor for TopHeaderCustomFlowLayout()
{
  return self;
}

unint64_t sub_1001AA084()
{
  unint64_t result = qword_1002DA120;
  if (!qword_1002DA120)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002DA120);
  }
  return result;
}

unint64_t sub_1001AA0C4()
{
  unint64_t result = sub_1001E0188((uint64_t)&off_100288D70);
  qword_1002E31D8 = result;
  return result;
}

uint64_t MetricGroupV2.tech.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricGroupV2.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricGroupV2.abmId.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t MetricGroupV2.className.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricGroupV2.deviceType.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricGroupV2.deviceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*MetricGroupV2.deviceType.modify())()
{
  return nullsub_1;
}

_UNKNOWN **static MetricGroupV2.metricGroupData()()
{
  return &off_1002891D0;
}

uint64_t destroy for MetricGroupV2()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricGroupV2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MetricGroupV2(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for MetricGroupV2(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for MetricGroupV2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricGroupV2(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricGroupV2(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricGroupV2()
{
  return &type metadata for MetricGroupV2;
}

uint64_t sub_1001AA4C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = 58;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  if (qword_1002D7B28 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1002E31D8;
  if (*(void *)(qword_1002E31D8 + 16) && (unint64_t v9 = sub_1001EB868(a1, a2), (v10 & 1) != 0))
  {
    unint64_t v11 = (uint64_t *)(*(void *)(v8 + 56) + 16 * v9);
    uint64_t v13 = *v11;
    id v12 = (void *)v11[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v13 == a3 && v12 == a4) {
      char v15 = 1;
    }
    else {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v15 = 0;
  }
  swift_bridgeObjectRelease();
  return v15 & 1;
}

id sub_1001AA7D0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RootViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for RootViewController()
{
  return self;
}

uint64_t sub_1001AA828()
{
  return sub_1001AAFD0();
}

uint64_t sub_1001AA83C()
{
  return sub_1001AAFD0();
}

void sub_1001AA850()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel_service];
  [v1 isDualSimON];
  swift_getKeyPath();
  swift_getKeyPath();
  objc_super v2 = v0;
  static Published.subscript.setter();
  [v1 isSlicingSetup];
  swift_getKeyPath();
  swift_getKeyPath();
  long long v3 = v2;
  static Published.subscript.setter();
  [v1 isSlicingTestApplicationEnabled];
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v4 = v3;
  static Published.subscript.setter();
  unsigned __int8 v5 = [v1 isLLPHSApplicationEnabled];
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v34) = v5;
  Swift::String v6 = v4;
  static Published.subscript.setter();
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1002E31C8;
  if (*(unsigned char *)(qword_1002E31C8 + 24) == 1)
  {
    id v8 = [v1 getCarrierBundleIdentifier];
    if (v8)
    {
      unint64_t v9 = v8;
      char v10 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      char v10 = _swiftEmptyArrayStorage;
    }
    *(void *)(v7 + 128) = v10;
    swift_bridgeObjectRelease();
    id v11 = [v1 getCarrierBundleVersion];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
    }
    *(void *)(v7 + 120) = v13;
    swift_bridgeObjectRelease();
  }
  if (qword_1002D7B48 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_1001A9488(v14, (uint64_t)qword_1002E3220);
  char v15 = v6;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)id v18 = 136315138;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v33) {
      uint64_t v19 = 0x64656C62616E45;
    }
    else {
      uint64_t v19 = 0x64656C6261736944;
    }
    if (v33) {
      unint64_t v20 = 0xE700000000000000;
    }
    else {
      unint64_t v20 = 0xE800000000000000;
    }
    char v33 = sub_1001AB860(v19, v20, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "DSDS state: %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v21 = v15;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v33) {
      uint64_t v25 = 0x64656C62616E45;
    }
    else {
      uint64_t v25 = 0x64656C6261736944;
    }
    if (v33) {
      unint64_t v26 = 0xE700000000000000;
    }
    else {
      unint64_t v26 = 0xE800000000000000;
    }
    char v33 = sub_1001AB860(v25, v26, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "NRSlicing state: %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v27 = v21;
  char v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315138;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v33) {
      uint64_t v31 = 0x64656C62616E45;
    }
    else {
      uint64_t v31 = 0x64656C6261736944;
    }
    if (v33) {
      unint64_t v32 = 0xE700000000000000;
    }
    else {
      unint64_t v32 = 0xE800000000000000;
    }
    sub_1001AB860(v31, v32, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "NRSlicing Test module state: %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1001AAFA8()
{
  return sub_1001AAFD0();
}

uint64_t sub_1001AAFBC()
{
  return sub_1001AAFD0();
}

uint64_t sub_1001AAFD0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1001AB03C@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001AB638(a1);
}

uint64_t sub_1001AB050(uint64_t a1, void **a2)
{
  return sub_1001AB6B4(a1, a2);
}

uint64_t sub_1001AB064@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001AB638(a1);
}

uint64_t sub_1001AB078(uint64_t a1, void **a2)
{
  return sub_1001AB6B4(a1, a2);
}

char *sub_1001AB08C()
{
  unsigned __int8 v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = sub_100157064((uint64_t *)&unk_1002DA220);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel_service;
  id v8 = objc_allocWithZone((Class)SPCarrierBundleAdapter);
  unint64_t v9 = v1;
  *(void *)&v1[v7] = [v8 init];
  char v10 = &v9[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel__dualSim];
  char v21 = 0;
  Published.init(initialValue:)();
  id v11 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v11(v10, v6, v3);
  id v12 = &v9[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel__slicingSetup];
  char v21 = 0;
  Published.init(initialValue:)();
  v11(v12, v6, v3);
  uint64_t v13 = &v9[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel__slicingTestApp];
  char v21 = 0;
  Published.init(initialValue:)();
  v11(v13, v6, v3);
  uint64_t v14 = &v9[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel__llphsTestApp];
  char v21 = 0;
  Published.init(initialValue:)();
  v11(v14, v6, v3);

  v20.receiver = v9;
  v20.super_class = ObjectType;
  char v15 = [super init];
  uint64_t v16 = *(void **)&v15[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel_service];
  os_log_type_t v17 = v15;
  [v16 setDelegate:v17];
  sub_1001AA850();

  return v17;
}

uint64_t sub_1001AB3E4()
{
  return type metadata accessor for SPCarrierBundleViewModel();
}

uint64_t type metadata accessor for SPCarrierBundleViewModel()
{
  uint64_t result = qword_1002DA1A0;
  if (!qword_1002DA1A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001AB438()
{
  sub_1001AB4DC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001AB4DC()
{
  if (!qword_1002DA1B0)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002DA1B0);
    }
  }
}

uint64_t sub_1001AB638@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1001AB6B4(uint64_t a1, void **a2)
{
  objc_super v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_1001AB720@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001AB638(a1);
}

uint64_t sub_1001AB748(uint64_t a1, void **a2)
{
  return sub_1001AB6B4(a1, a2);
}

uint64_t sub_1001AB770@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001AB638(a1);
}

uint64_t sub_1001AB798(uint64_t a1, void **a2)
{
  return sub_1001AB6B4(a1, a2);
}

uint64_t sub_1001AB7C0@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001AB638(a1);
}

uint64_t sub_1001AB7E8(uint64_t a1, void **a2)
{
  return sub_1001AB6B4(a1, a2);
}

uint64_t sub_1001AB810@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001AB638(a1);
}

uint64_t sub_1001AB838(uint64_t a1, void **a2)
{
  return sub_1001AB6B4(a1, a2);
}

uint64_t sub_1001AB860(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1001AB934(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100196D64((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100196D64((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100157190((uint64_t)v12);
  return v7;
}

uint64_t sub_1001AB934(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1001ABAF0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1001ABAF0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1001ABB88(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001ABDE4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1001ABDE4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1001ABB88(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1001ABD00(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1001ABD00(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100157064(&qword_1002DA218);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1001ABD68(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1001ABDE4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100157064(&qword_1002DA218);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1001ABF38()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (!v1)
  {
    id v2 = [self processInfo];
    id v1 = [v2 processName];
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  qword_1002E31E0 = v3;
  *(void *)algn_1002E31E8 = v5;
}

uint64_t sub_1001AC000(uint64_t a1)
{
  return sub_1001AC030(a1, qword_1002E31F0);
}

uint64_t sub_1001AC010(uint64_t a1)
{
  return sub_1001AC030(a1, qword_1002E3208);
}

uint64_t sub_1001AC020(uint64_t a1)
{
  return sub_1001AC030(a1, qword_1002E3220);
}

uint64_t sub_1001AC030(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_1001AC110(v3, a2);
  sub_1001A9488(v3, (uint64_t)a2);
  if (qword_1002D7B30 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1001AC0DC()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for SLogger()
{
  return self;
}

uint64_t *sub_1001AC110(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void *sub_1001AC174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  v13[2] = 0;
  v13[3] = 0xE000000000000000;
  v13[4] = 0;
  v13[5] = 0xE000000000000000;
  v13[6] = 0;
  v13[7] = 0xE000000000000000;
  v13[8] = 0;
  v13[9] = 0xE000000000000000;
  v13[10] = 0;
  v13[11] = 0xE000000000000000;
  v13[12] = 0;
  v13[13] = 0xE000000000000000;
  v13[14] = 0;
  v13[15] = 0xE000000000000000;
  uint64_t v19 = (uint64_t)v13 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_subsId;
  *(void *)((char *)v13 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_subsId) = 0;
  uint64_t v22 = OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible;
  *((unsigned char *)v13 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible) = 1;
  v13[2] = a1;
  v13[3] = a2;
  swift_bridgeObjectRelease();
  v13[4] = a3;
  v13[5] = a4;
  swift_bridgeObjectRelease();
  v13[8] = a5;
  v13[9] = a6;
  swift_bridgeObjectRelease();
  v13[6] = sub_1001AC338();
  v13[7] = v23;
  swift_bridgeObjectRelease();
  v13[14] = a7;
  v13[15] = a8;
  swift_bridgeObjectRelease();
  v13[12] = sub_1001AC4FC();
  v13[13] = v24;
  swift_bridgeObjectRelease();
  v13[10] = a9;
  v13[11] = a10;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10016DC94(a11, v19);
  swift_endAccess();
  *(void *)((char *)v13 + v21) = a12;
  *((unsigned char *)v13 + v22) = a13;
  return v13;
}

uint64_t sub_1001AC338()
{
  uint64_t v1 = v0;
  String.lowercased()();
  sub_1001571E0();
  char v2 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v2 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v3 = (void *)StringProtocol.components<A>(separatedBy:)();
  if (!v3[2])
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v8 = *(void *)(v1 + 64);
    int64_t v9 = *(void **)(v1 + 72);
    uint64_t v10 = self;
    swift_bridgeObjectRetain();
    id v11 = [v10 mainBundle];
    v16._object = v9;
    v12._uint64_t countAndFlagsBits = v8;
    v12._object = v9;
    v13.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v13.value._object = (void *)0xEB00000000656C62;
    v14._uint64_t countAndFlagsBits = v8;
    v14._object = v9;
    v16._uint64_t countAndFlagsBits = v8;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v16)._countAndFlagsBits;
    swift_bridgeObjectRelease();

    return countAndFlagsBits;
  }
  uint64_t v4 = v3[4];
  uint64_t v5 = (void *)v3[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 0x20646E6142;
}

uint64_t sub_1001AC4FC()
{
  uint64_t v1 = v0;
  Swift::String v72 = String.lowercased()();
  strcpy((char *)v71, "-section-dl_bw");
  HIBYTE(v71[1]) = -18;
  sub_1001571E0();
  char v2 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v2 & 1) == 0) {
    goto LABEL_57;
  }
  uint64_t v3 = v1[14];
  unint64_t v4 = v1[15];
  uint64_t v5 = HIBYTE(v4) & 0xF;
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  if (!((v4 & 0x2000000000000000) != 0 ? HIBYTE(v4) & 0xF : v3 & 0xFFFFFFFFFFFFLL)) {
    goto LABEL_57;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = (uint64_t)sub_1001D230C(v3, v4, 10);
    char v29 = v28;
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_57;
  }
  if ((v4 & 0x2000000000000000) != 0)
  {
    v72._char countAndFlagsBits = v1[14];
    v72._object = (void *)(v4 & 0xFFFFFFFFFFFFFFLL);
    if (v3 == 43)
    {
      if (!v5) {
        goto LABEL_129;
      }
      if (v5 != 1 && (BYTE1(v3) - 48) <= 9u)
      {
        uint64_t v11 = (BYTE1(v3) - 48);
        if (v5 == 2) {
          goto LABEL_35;
        }
        if ((BYTE2(v3) - 48) <= 9u)
        {
          uint64_t v11 = 10 * (BYTE1(v3) - 48) + (BYTE2(v3) - 48);
          uint64_t v13 = v5 - 3;
          if (v13)
          {
            Swift::String v14 = (unsigned __int8 *)&v72._countAndFlagsBits + 3;
            while (1)
            {
              unsigned int v15 = *v14 - 48;
              if (v15 > 9) {
                goto LABEL_33;
              }
              uint64_t v16 = 10 * v11;
              if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63) {
                goto LABEL_33;
              }
              uint64_t v11 = v16 + v15;
              if (__OFADD__(v16, v15)) {
                goto LABEL_33;
              }
              char v12 = 0;
              ++v14;
              if (!--v13) {
                goto LABEL_36;
              }
            }
          }
          goto LABEL_35;
        }
      }
    }
    else
    {
      if (v3 == 45)
      {
        if (v5)
        {
          if (v5 == 1 || (BYTE1(v3) - 48) > 9u) {
            goto LABEL_33;
          }
          if (v5 == 2)
          {
            char v12 = 0;
            uint64_t v11 = -(uint64_t)(BYTE1(v3) - 48);
            goto LABEL_36;
          }
          if ((BYTE2(v3) - 48) > 9u) {
            goto LABEL_33;
          }
          uint64_t v11 = -10 * (BYTE1(v3) - 48) - (BYTE2(v3) - 48);
          uint64_t v24 = v5 - 3;
          if (v24)
          {
            uint64_t v25 = (unsigned __int8 *)&v72._countAndFlagsBits + 3;
            while (1)
            {
              unsigned int v26 = *v25 - 48;
              if (v26 > 9) {
                goto LABEL_33;
              }
              uint64_t v27 = 10 * v11;
              if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63) {
                goto LABEL_33;
              }
              uint64_t v11 = v27 - v26;
              if (__OFSUB__(v27, v26)) {
                goto LABEL_33;
              }
              char v12 = 0;
              ++v25;
              if (!--v24) {
                goto LABEL_36;
              }
            }
          }
LABEL_35:
          char v12 = 0;
LABEL_36:
          if ((v12 & 1) == 0) {
            goto LABEL_37;
          }
          goto LABEL_57;
        }
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      if (v5 && (v3 - 48) <= 9u)
      {
        uint64_t v11 = (v3 - 48);
        if (v5 == 1) {
          goto LABEL_35;
        }
        if ((BYTE1(v3) - 48) <= 9u)
        {
          uint64_t v11 = 10 * (v3 - 48) + (BYTE1(v3) - 48);
          uint64_t v20 = v5 - 2;
          if (v20)
          {
            uint64_t v21 = (unsigned __int8 *)&v72._countAndFlagsBits + 2;
            while (1)
            {
              unsigned int v22 = *v21 - 48;
              if (v22 > 9) {
                goto LABEL_33;
              }
              uint64_t v23 = 10 * v11;
              if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63) {
                goto LABEL_33;
              }
              uint64_t v11 = v23 + v22;
              if (__OFADD__(v23, v22)) {
                goto LABEL_33;
              }
              char v12 = 0;
              ++v21;
              if (!--v20) {
                goto LABEL_36;
              }
            }
          }
          goto LABEL_35;
        }
      }
    }
LABEL_33:
    uint64_t v11 = 0;
    char v12 = 1;
    goto LABEL_36;
  }
  if ((v3 & 0x1000000000000000) != 0) {
    uint64_t v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  int64_t v9 = sub_1001D22F4(v8, v6, 10);
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = (uint64_t)v9;
LABEL_37:
    uint64_t v17 = v11 / 5;
LABEL_38:
    *(void *)&v71[0] = v17;
    v72._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v72._object = v18;
LABEL_39:
    uint64_t v19 = 2051558688;
LABEL_74:
    unint64_t v43 = 0xE400000000000000;
LABEL_75:
    String.append(_:)(*(Swift::String *)&v19);
    return v72._countAndFlagsBits;
  }
LABEL_57:
  uint64_t v30 = v1[6];
  uint64_t v31 = v1[7];
  BOOL v32 = v30 == 0x696C696261706143 && v31 == 0xEC00000073656974;
  if (!v32 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v30 == 1347572562 && v31 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v42 = (void *)v1[15];
      v72._char countAndFlagsBits = v1[14];
      v72._object = v42;
      swift_bridgeObjectRetain();
      uint64_t v19 = 1833067552;
      goto LABEL_74;
    }
    if (v30 == 1364349778 && v31 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_100;
    }
    if (v30 == 0x30524E4953 && v31 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v45 = v1[14];
      unint64_t v46 = v1[15];
      swift_bridgeObjectRetain();
      LOBYTE(v45) = sub_1001A3790(v45, v46);
      uint64_t v47 = swift_bridgeObjectRelease();
      if (v45)
      {
        uint64_t v49 = v1[14];
        uint64_t v48 = v1[15];
        v71[0] = 0.0;
        uint64_t v50 = __chkstk_darwin(v47);
        if ((v48 & 0x1000000000000000) == 0 && v48 & 0x2000000000000000 | v49 & 0x1000000000000000)
        {
          __chkstk_darwin(v50);
          if ((v48 & 0x2000000000000000) == 0)
          {
            if ((v49 & 0x1000000000000000) != 0)
            {
              uint64_t v51 = (v48 & 0xFFFFFFFFFFFFFFFLL) + 32;
              uint64_t v52 = v49 & 0xFFFFFFFFFFFFLL;
LABEL_99:
              swift_bridgeObjectRetain();
              char countAndFlagsBits = sub_1001AD28C(v51, v52, (void (*)(uint64_t *__return_ptr))sub_1001AD348);
              swift_bridgeObjectRelease();
LABEL_107:
              if (countAndFlagsBits) {
                double v60 = v71[0] / 10.0;
              }
              else {
                double v60 = 0.0;
              }
              sub_100157064((uint64_t *)&unk_1002D97F0);
              uint64_t v61 = swift_allocObject();
              *(_OWORD *)(v61 + 16) = xmmword_100267EF0;
              *(void *)(v61 + 56) = &type metadata for Double;
              *(void *)(v61 + 64) = &protocol witness table for Double;
              *(double *)(v61 + 32) = v60;
              return String.init(format:_:)();
            }
            goto LABEL_136;
          }
          goto LABEL_101;
        }
        goto LABEL_135;
      }
      goto LABEL_100;
    }
    if (v30 == 0x31524E4953 && v31 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v53 = v1[14];
      unint64_t v54 = v1[15];
      swift_bridgeObjectRetain();
      LOBYTE(v53) = sub_1001A3790(v53, v54);
      uint64_t v55 = swift_bridgeObjectRelease();
      if (v53)
      {
        uint64_t v49 = v1[14];
        uint64_t v48 = v1[15];
        v71[0] = 0.0;
        uint64_t v56 = __chkstk_darwin(v55);
        if ((v48 & 0x1000000000000000) == 0 && v48 & 0x2000000000000000 | v49 & 0x1000000000000000)
        {
          __chkstk_darwin(v56);
          if ((v48 & 0x2000000000000000) == 0)
          {
            if ((v49 & 0x1000000000000000) != 0)
            {
              uint64_t v51 = (v48 & 0xFFFFFFFFFFFFFFFLL) + 32;
              uint64_t v52 = v49 & 0xFFFFFFFFFFFFLL;
              goto LABEL_99;
            }
LABEL_136:
            uint64_t v51 = _StringObject.sharedUTF8.getter();
            uint64_t v52 = v70;
            goto LABEL_99;
          }
LABEL_101:
          v72._char countAndFlagsBits = v49;
          v72._object = (void *)(v48 & 0xFFFFFFFFFFFFFFLL);
          swift_bridgeObjectRetain();
          char countAndFlagsBits = (v49 >= 0x21u || ((0x100003E01uLL >> v49) & 1) == 0)
                           && (char v59 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
                           && *v59 == 0;
          swift_bridgeObjectRelease();
          goto LABEL_107;
        }
LABEL_135:
        swift_bridgeObjectRetain();
        _StringGuts._slowWithCString<A>(_:)();
        swift_bridgeObjectRelease();
        char countAndFlagsBits = v72._countAndFlagsBits;
        goto LABEL_107;
      }
LABEL_100:
      uint64_t v58 = (void *)v1[15];
      v72._char countAndFlagsBits = v1[14];
      v72._object = v58;
      swift_bridgeObjectRetain();
      uint64_t v19 = 4351008;
      unint64_t v43 = 0xE300000000000000;
      goto LABEL_75;
    }
    if (v30 == 1684955458 && v31 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (v1[4] == 18229 && v1[5] == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v72._char countAndFlagsBits = 110;
        v72._object = (void *)0xE100000000000000;
        uint64_t v63 = v1[14];
        unint64_t v62 = (void *)v1[15];
        swift_bridgeObjectRetain();
        v64._char countAndFlagsBits = v63;
        v64._object = v62;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        return v72._countAndFlagsBits;
      }
LABEL_126:
      uint64_t v41 = v1[14];
      swift_bridgeObjectRetain();
      return v41;
    }
    if ((v30 != 0x74646977646E6142 || v31 != 0xE900000000000068)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_126;
    }
    if (v1[4] == 18229 && v1[5] == 0xE200000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (uint64_t v65 = (void *)v1[9],
          v72._char countAndFlagsBits = v1[8],
          v72._object = v65,
          v71[0] = -2.31584178e77,
          *(void *)&v71[1] = 0x8000000100239990,
          StringProtocol.caseInsensitiveCompare<A>(_:)()))
    {
      uint64_t v66 = (void *)v1[15];
      v72._char countAndFlagsBits = v1[14];
      v72._object = v66;
      swift_bridgeObjectRetain();
      goto LABEL_39;
    }
LABEL_130:
    uint64_t v68 = v1[14];
    unint64_t v67 = v1[15];
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_1001CC1AC(v68, v67) / 5;
    if (v69) {
      uint64_t v17 = 0;
    }
    goto LABEL_38;
  }
  uint64_t v33 = v1[14];
  unint64_t v34 = v1[15];
  swift_bridgeObjectRetain();
  char v35 = sub_1001A3790(v33, v34);
  swift_bridgeObjectRelease();
  uint64_t v37 = v1[14];
  uint64_t v36 = (void *)v1[15];
  if (v35)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_1001CC1AC(v37, (unint64_t)v36);
    if (v39) {
      uint64_t v38 = 0;
    }
    return sub_1001AD414(v38);
  }
  v72._char countAndFlagsBits = v37;
  v72._object = v36;
  v71[0] = -2.31584178e77;
  *(void *)&v71[1] = 0x800000010023C300;
  if (StringProtocol.caseInsensitiveCompare<A>(_:)()) {
    return 0;
  }
  else {
    return 16723;
  }
}

uint64_t sub_1001ACFF8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10016D930(v0 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp);
  return v0;
}

uint64_t sub_1001AD058()
{
  sub_1001ACFF8();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1001AD0B0()
{
  return type metadata accessor for FTMAllMetricsModel();
}

uint64_t type metadata accessor for FTMAllMetricsModel()
{
  uint64_t result = qword_1002DA300;
  if (!qword_1002DA300) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001AD104()
{
  sub_10016CAE0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void *sub_1001AD1C4()
{
  return &protocol witness table for String;
}

uint64_t sub_1001AD1D0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for FTMAllMetricsModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001AD210@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *a1 = *(void *)(*(void *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

unsigned char *sub_1001AD220@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1001AD28C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

void *sub_1001AD2EC@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

unsigned char *sub_1001AD330@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1001AD360(a1, a2);
}

void *sub_1001AD348@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001AD3D0(a1);
}

unsigned char *sub_1001AD360@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_1001AD3D0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_1001AD414(uint64_t a1)
{
  uint64_t result = 4543564;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 4:
    case 5:
      uint64_t result = 0x41534E204735;
      break;
    case 2:
      uint64_t result = 16723;
      break;
    case 3:
    case 6:
    case 7:
      uint64_t result = 0x41534E2B4153;
      break;
    default:
      uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
      break;
  }
  return result;
}

double apmView()@<D0>(uint64_t a1@<X8>)
{
  return sub_1001AD544(a1);
}

double noSimView()@<D0>(uint64_t a1@<X8>)
{
  return sub_1001AD544(a1);
}

double sub_1001AD544@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static HorizontalAlignment.center.getter();
  sub_1001AD6AC((uint64_t)v8);
  *(_OWORD *)&v10[103] = v8[6];
  *(_OWORD *)&v10[87] = v8[5];
  *(_OWORD *)&v10[39] = v8[2];
  *(_OWORD *)&v10[23] = v8[1];
  *(_OWORD *)&v10[119] = v8[7];
  v10[135] = v9;
  *(_OWORD *)&v10[55] = v8[3];
  *(_OWORD *)&v10[71] = v8[4];
  *(_OWORD *)&v10[7] = v8[0];
  long long v3 = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = *(_OWORD *)&v10[80];
  long long v4 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v4;
  long long v5 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v10[16];
  double result = *(double *)&v10[32];
  long long v7 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_OWORD *)(a1 + 65) = v7;
  *(_OWORD *)(a1 + 81) = v3;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 145) = *(void *)&v10[128];
  *(_OWORD *)(a1 + 17) = v5;
  return result;
}

uint64_t sub_1001AD64C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001AD6AC(a1);
}

uint64_t sub_1001AD67C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001AD6AC(a1);
}

uint64_t sub_1001AD6AC@<X0>(uint64_t a1@<X8>)
{
  Image.init(systemName:)();
  uint64_t v2 = Text.init(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Color.blue.getter();
  uint64_t v7 = Text.foregroundColor(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_10015D6C4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.headline.getter();
  uint64_t v12 = Text.font(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  swift_release();
  sub_10015D6C4(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  uint64_t v17 = Text.bold()();
  uint64_t v35 = v18;
  uint64_t v36 = v17;
  uint64_t v37 = v19;
  char v34 = v20 & 1;
  sub_10015D6C4(v12, v14, v16 & 1);
  swift_bridgeObjectRelease();
  char v33 = static Edge.Set.vertical.getter();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v23 = v22;
  LOBYTE(v12) = v24 & 1;
  static Font.subheadline.getter();
  uint64_t v25 = Text.font(_:)();
  uint64_t v27 = v26;
  LOBYTE(v2) = v28;
  uint64_t v30 = v29;
  swift_release();
  sub_10015D6C4(v21, v23, v12);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a1 = v36;
  *(void *)(a1 + 8) = v35;
  *(unsigned char *)(a1 + 16) = v34;
  *(void *)(a1 + 24) = v37;
  *(unsigned char *)(a1 + 32) = v33;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v27;
  *(unsigned char *)(a1 + 96) = v2 & 1;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = KeyPath;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 1;
  sub_10015D6B4(v36, v35, v34);
  swift_bridgeObjectRetain();
  sub_10015D6B4(v25, v27, v2 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10015D6C4(v25, v27, v2 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10015D6C4(v36, v35, v34);

  return swift_bridgeObjectRelease();
}

unint64_t sub_1001AD964()
{
  unint64_t result = qword_1002D91D8;
  if (!qword_1002D91D8)
  {
    sub_100157104(&qword_1002D91D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D91D8);
  }
  return result;
}

uint64_t sub_1001AD9C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1001AD9F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1001ADA28()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1001ADA58()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1001ADAE4()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v1 - 8);
  uint64_t v30 = v1;
  __chkstk_darwin(v1);
  uint64_t v26 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  __chkstk_darwin(v3);
  char v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = (objc_class *)type metadata accessor for RootNavigationController();
  v32.receiver = v0;
  v32.super_class = v13;
  [super viewDidLoad];
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(qword_1002E31C8 + 26) == 1)
  {
    if (qword_1002D7A88 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_100267EF0;
    int v15 = *(unsigned __int8 *)(*(void *)(*(void *)&v0[OBJC_IVAR____TtC13FTMInternal_424RootNavigationController_persistanceStore]
                                         + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_hardwareManager)
                             + 28);
    unint64_t v16 = sub_100181588();
    uint64_t v17 = 7758189;
    if (v15) {
      uint64_t v17 = 6644585;
    }
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = v16;
    *(void *)(v14 + 32) = v17;
    *(void *)(v14 + 40) = 0xE300000000000000;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  sub_1001AE450();
  uint64_t v18 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v25(v10, v6);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v0;
  aBlock[4] = sub_1001AE4C8;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028D370;
  char v20 = _Block_copy(aBlock);
  uint64_t v21 = v0;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100195820();
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001AE4E8();
  uint64_t v22 = v26;
  uint64_t v23 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v22, v23);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v28);
  return ((uint64_t (*)(char *, uint64_t))v25)(v12, v6);
}

void sub_1001ADF9C(uint64_t a1)
{
  id v1 = objc_retain(*(id *)(*(void *)(a1 + OBJC_IVAR____TtC13FTMInternal_424RootNavigationController_persistanceStore)
                         + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_aBMWrapper));
  NSString v2 = String._bridgeToObjectiveC()();
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  [v1 querySpecificMetric:triggerRef:triggerType:triggerID:profileID:metricID:];
}

void sub_1001AE0C8()
{
  id v1 = objc_retain(*(id *)(*(void *)(v0 + OBJC_IVAR____TtC13FTMInternal_424RootNavigationController_persistanceStore)
                         + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_aBMWrapper));
  NSString v2 = String._bridgeToObjectiveC()();
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  [v1 querySpecificMetric:v2 v3 v4 v5 v6 v7];
}

id sub_1001AE1F4()
{
  if (qword_1002D7A80 != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RootNavigationController();
  return [super dealloc];
}

uint64_t type metadata accessor for RootNavigationController()
{
  return self;
}

unint64_t sub_1001AE450()
{
  unint64_t result = qword_1002D95F0;
  if (!qword_1002D95F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002D95F0);
  }
  return result;
}

uint64_t sub_1001AE490()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001AE4C8()
{
  sub_1001ADF9C(*(void *)(v0 + 16));
}

uint64_t sub_1001AE4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001AE4E0()
{
  return swift_release();
}

unint64_t sub_1001AE4E8()
{
  unint64_t result = qword_1002DA570;
  if (!qword_1002DA570)
  {
    sub_100157104((uint64_t *)&unk_1002D9600);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DA570);
  }
  return result;
}

id sub_1001AE5CC()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController____lazy_storage___tableView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController____lazy_storage___tableView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController____lazy_storage___tableView);
  }
  else
  {
    id v4 = sub_1001AE630(v0);
    char v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1001AE630(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)UITableView) initWithFrame:0.0 style:0.0];
  type metadata accessor for FavoritesTableCellV2();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v4];

  [v2 setSeparatorStyle:0];
  id v5 = v2;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [self colorNamed:v6];

  [v5 setBackgroundColor:v7];
  [v5 setDataSource:a1];
  [v5 setDelegate:a1];
  [v5 setAlwaysBounceVertical:1];
  [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v5;
}

id sub_1001AE7C0()
{
  id v0 = [objc_allocWithZone((Class)UIButton) init];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self systemImageNamed:v1];

  [v0 setImage:v2 forState:0];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self colorNamed:v3];

  [v0 setTintColor:v4];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 setEnabled:1];
  return v0;
}

void sub_1001AE8F8()
{
  NSString v1 = v0;
  v43.receiver = v0;
  v43.super_class = (Class)type metadata accessor for ManageDashboardViewController();
  [super viewDidLoad];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setTitle:v2];

  NSString v3 = *(void **)&v1[OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dismissButton];
  id v4 = [objc_allocWithZone((Class)UIBarButtonItem) initWithCustomView:v3];
  [v3 addTarget:v1 action:"didTapDismissWithSender:" forControlEvents:64];
  id v5 = [v1 navigationItem];
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002693E0;
  *(void *)(v6 + 32) = v4;
  specialized Array._endMutation()();
  sub_100167598(0, &qword_1002DA588);
  id v7 = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 setRightBarButtonItems:isa animated:1];

  id v9 = [v1 view];
  if (!v9)
  {
    __break(1u);
    goto LABEL_8;
  }
  char v10 = v9;
  id v11 = sub_1001AE5CC();
  [v10 addSubview:v11];

  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100268000;
  id v13 = sub_1001AE5CC();
  id v14 = [v13 topAnchor];

  id v15 = [v1 view];
  if (!v15)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v16 = v15;
  id v17 = [v15 safeAreaLayoutGuide];

  id v18 = [v17 topAnchor];
  id v19 = [v14 constraintEqualToAnchor:v18];

  *(void *)(v12 + 32) = v19;
  id v20 = sub_1001AE5CC();
  id v21 = [v20 leadingAnchor];

  id v22 = [v1 view];
  if (!v22)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v23 = v22;
  id v24 = [v22 safeAreaLayoutGuide];

  id v25 = [v24 leadingAnchor];
  id v26 = [v21 constraintEqualToAnchor:v25];

  *(void *)(v12 + 40) = v26;
  id v27 = sub_1001AE5CC();
  id v28 = [v27 trailingAnchor];

  id v29 = [v1 view];
  if (!v29)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v30 = v29;
  id v31 = [v29 safeAreaLayoutGuide];

  id v32 = [v31 trailingAnchor];
  id v33 = [v28 constraintEqualToAnchor:v32];

  *(void *)(v12 + 48) = v33;
  id v34 = sub_1001AE5CC();
  id v35 = [v34 bottomAnchor];

  id v36 = [v1 view];
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = self;
    id v39 = [v37 safeAreaLayoutGuide];

    id v40 = [v39 bottomAnchor];
    id v41 = [v35 constraintEqualToAnchor:v40];

    *(void *)(v12 + 56) = v41;
    specialized Array._endMutation()();
    sub_100167598(0, (unint64_t *)&qword_1002D9800);
    Class v42 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v38 activateConstraints:v42];

    return;
  }
LABEL_11:
  __break(1u);
}

void sub_1001AEE88()
{
  swift_bridgeObjectRelease();

  NSString v1 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dismissButton);
}

id sub_1001AEEE8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ManageDashboardViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for ManageDashboardViewController()
{
  return self;
}

id sub_1001AF134(void *a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v6 = [a1 dequeueReusableCellWithIdentifier:v4 forIndexPath:isa];

  type metadata accessor for FavoritesTableCellV2();
  uint64_t v7 = swift_dynamicCastClass();
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = IndexPath.row.getter();
    uint64_t v10 = v2 + OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dashboardList;
    id result = (id)swift_beginAccess();
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v9 < *(void *)(*(void *)v10 + 16))
    {
      uint64_t v12 = *(void *)v10 + 40 * v9;
      id v13 = *(void **)(v12 + 40);
      id v14 = *(void **)(v12 + 48);
      id v15 = *(void **)(v12 + 56);
      id v16 = *(id *)(v12 + 32);
      id v17 = v13;
      id v18 = v14;
      id v19 = v15;
      id v20 = sub_1001779FC();
      [v20 setText:v18];

      id v21 = sub_100177A14();
      [v21 setText:v19];

      id v22 = sub_100177AB0();
      [v22 setHidden:1];

      return (id)v8;
    }
    __break(1u);
  }
  else
  {

    id v23 = objc_allocWithZone((Class)UITableViewCell);
    return [v23 init];
  }
  return result;
}

uint64_t sub_1001AF434(void *a1, uint64_t a2, uint64_t a3)
{
  NSString v4 = v3;
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == 1)
  {
    unint64_t v13 = IndexPath.row.getter();
    id v14 = &v4[OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dashboardList];
    uint64_t result = swift_beginAccess();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < *(void *)(*(void *)v14 + 16))
    {
      uint64_t v15 = *(void *)v14 + 40 * v13;
      id v33 = a1;
      id v17 = *(void **)(v15 + 32);
      id v16 = *(void **)(v15 + 40);
      id v19 = *(void **)(v15 + 48);
      id v18 = *(void **)(v15 + 56);
      LODWORD(v15) = *(_DWORD *)(v15 + 64);
      v36[0] = v17;
      v36[1] = v16;
      v36[2] = v19;
      v36[3] = v18;
      int v37 = v15;
      uint64_t v20 = *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_persistanceStore];
      id v34 = v18;
      uint64_t v35 = v20;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v8);
      unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      unint64_t v22 = (v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v4;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v23 + v21, v12, v8);
      id v24 = v33;
      *(void *)(v23 + v22) = v33;
      id v25 = v17;
      id v26 = v16;
      id v27 = v19;
      id v28 = v34;
      id v29 = v4;
      id v30 = v24;
      sub_1001DDCAC();
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = sub_1001AFF34;
      *(void *)(v31 + 24) = v23;
      swift_retain();
      sub_1001E158C((uint64_t)v36, (uint64_t)sub_1001B001C, v31);
      swift_release();

      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  return result;
}

void sub_1001AF6B0(char a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    unint64_t v17 = IndexPath.row.getter();
    swift_beginAccess();
    sub_1001CC3FC(v17, (uint64_t)&aBlock);
    id v18 = aBlock;
    id v19 = (void *)v34;
    uint64_t v20 = v35;
    unint64_t v21 = v36;
    swift_endAccess();

    sub_100157064((uint64_t *)&unk_1002DA578);
    uint64_t v22 = type metadata accessor for IndexPath();
    uint64_t v23 = *(void *)(v22 - 8);
    unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_100267EF0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 16))(v25 + v24, a4, v22);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [a5 deleteRowsAtIndexPaths:isa withRowAnimation:0];

    id v27 = [self defaultCenter];
    if (qword_1002D7AF8 != -1) {
      swift_once();
    }
    [v27 postNotificationName:static NSNotificationName.dashboardMetricUpdate object:0 userInfo:0];
  }
  else
  {
    uint64_t v32 = v10;
    if (qword_1002D7AA0 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)();
    sub_100167598(0, (unint64_t *)&qword_1002D95F0);
    id v28 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = a3;
    int v37 = sub_1001B005C;
    uint64_t v38 = v29;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v34 = 1107296256;
    uint64_t v35 = sub_1001E0068;
    id v36 = &unk_10028D410;
    id v30 = _Block_copy(&aBlock);
    id v31 = a3;
    swift_release();
    static DispatchQoS.unspecified.getter();
    Swift::String aBlock = (void **)_swiftEmptyArrayStorage;
    sub_100195820();
    sub_100157064((uint64_t *)&unk_1002D9600);
    sub_1001AE4E8();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v30);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

void sub_1001AFB6C(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self alertControllerWithTitle:v2 message:v3 preferredStyle:1];

  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [self actionWithTitle:v5 style:0 handler:0];

  [v4 addAction:v6];
  [a1 presentViewController:v4 animated:1 completion:0];
}

uint64_t sub_1001AFE4C()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1001AFF34(char a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for IndexPath() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void **)(v2 + 16);
  uint64_t v8 = *(void **)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1001AF6B0(a1, a2, v7, v2 + v6, v8);
}

uint64_t sub_1001AFFE4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B001C(char a1, uint64_t a2)
{
  return sub_1001DF6B8(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1001B0024()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001B005C()
{
  sub_1001AFB6C(*(void **)(v0 + 16));
}

uint64_t sub_1001B0064(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001B0074()
{
  return swift_release();
}

uint64_t sub_1001B007C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    if (qword_1002D7B18 != -1) {
      uint64_t result = swift_once();
    }
    if ((*(unsigned char *)(qword_1002E31C8 + 152) & 1) == 0)
    {
      v15[0] = v4;
      int v12 = *(_DWORD *)(qword_1002E31C8 + 148);
      if (qword_1002D7AA8 != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = a2;
      *(_DWORD *)(v13 + 24) = v12;
      *(void *)(v13 + 32) = nullsub_1;
      *(void *)(v13 + 40) = 0;
      aBlock[4] = sub_1001B6178;
      aBlock[5] = v13;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001E0068;
      aBlock[3] = &unk_10028D580;
      uint64_t v14 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v15[1] = _swiftEmptyArrayStorage;
      sub_1001B6714((unint64_t *)&qword_1002DA560, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100157064((uint64_t *)&unk_1002D9600);
      sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v14);
      (*(void (**)(char *, uint64_t))(v15[0] + 8))(v6, v3);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1001B03FC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    if (qword_1002D7AA8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    return sub_1001B06FC((uint64_t)sub_1001B13E0, 0);
  }
  return result;
}

uint64_t sub_1001B04AC()
{
  uint64_t v1 = self;
  id v2 = [v1 defaultCenter];
  if (qword_1002D7AE8 != -1) {
    swift_once();
  }
  [v2 removeObserver:v0 name:static NSNotificationName.subsIdSelectionChange object:0];

  id v3 = [v1 defaultCenter];
  if (qword_1002D7AD0 != -1) {
    swift_once();
  }
  [v3 removeObserver:v0 name:static NSNotificationName.NewABMMetric object:0];

  id v4 = [v1 defaultCenter];
  if (qword_1002D7AD8 != -1) {
    swift_once();
  }
  [v4 removeObserver:v0 name:static NSNotificationName.NewCTMetric object:0];

  id v5 = [v1 defaultCenter];
  if (qword_1002D7B00 != -1) {
    swift_once();
  }
  [v5 removeObserver:v0 name:static NSNotificationName.isAirPlaneModeEnabled object:0];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10015E120(v0 + 64);

  return v0;
}

uint64_t sub_1001B06C8()
{
  sub_1001B04AC();

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t sub_1001B06FC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002D7B18 != -1) {
    uint64_t result = swift_once();
  }
  if ((*(unsigned char *)(qword_1002E31C8 + 152) & 1) == 0)
  {
    v17[0] = v6;
    int v14 = *(_DWORD *)(qword_1002E31C8 + 148);
    if (qword_1002D7AA8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v2;
    *(_DWORD *)(v15 + 24) = v14;
    *(void *)(v15 + 32) = a1;
    *(void *)(v15 + 40) = a2;
    aBlock[4] = sub_1001B73E0;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001E0068;
    aBlock[3] = &unk_10028D670;
    id v16 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v17[1] = _swiftEmptyArrayStorage;
    sub_1001B6714((unint64_t *)&qword_1002DA560, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100157064((uint64_t *)&unk_1002D9600);
    sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v17[0] + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001B0A70(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(a1 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  *(void *)(v9 + 32) = a1;
  *(_DWORD *)(v9 + 40) = a2;
  id v10 = v8;
  swift_retain();
  swift_retain();
  sub_1001DDCAC();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1001B61C8;
  *(void *)(v11 + 24) = v9;
  swift_retain();
  sub_1001E1250(a2, (uint64_t)sub_1001B6210, v11);

  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1001B0B74(uint64_t a1, uint64_t a2, uint64_t (*a3)(BOOL), uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v62 = a4;
  uint64_t v63 = a3;
  uint64_t v77 = type metadata accessor for MetricList(0);
  uint64_t v66 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v11 = (uint64_t *)((char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for AllMetricsRowItem();
  uint64_t v75 = *(void *)(v12 - 8);
  uint64_t v76 = v12;
  __chkstk_darwin(v12);
  int v14 = (uint64_t *)((char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    uint64_t v15 = sub_1001B6264(a1, a6);
    id v16 = *(void **)(a5 + 48);
    long long v79 = v16;
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      sub_1001B681C(0, v16[2]);
      unint64_t v17 = v79;
    }
    else
    {
      unint64_t v17 = sub_1001B34B0(0, v16[3] >> 1);
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = type metadata accessor for AllMetricsViewModel();
    uint64_t v23 = sub_1001B6714(&qword_1002D91C0, v22, (void (*)(uint64_t))type metadata accessor for AllMetricsViewModel);
    uint64_t v70 = v21;
    uint64_t v69 = v23;
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    swift_release();
    *(void *)(a5 + 48) = v17;
    swift_bridgeObjectRelease();
    uint64_t v68 = v15[2];
    if (v68)
    {
      unint64_t v24 = 0;
      unint64_t v67 = v15 + 4;
      uint64_t v65 = a5;
      Swift::String v64 = v15;
      uint64_t v25 = v77;
      while (v24 < v15[2])
      {
        unint64_t v73 = v24;
        id v26 = &v67[3 * v24];
        uint64_t v27 = v26[1];
        uint64_t v72 = *v26;
        uint64_t v28 = v26[2];
        int64_t v29 = *(void *)(v28 + 16);
        uint64_t v74 = v27;
        if (v29)
        {
          long long v79 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          sub_1001B2390(0, v29, 0);
          uint64_t v30 = *(unsigned __int8 *)(v66 + 80);
          uint64_t v71 = v28;
          uint64_t v31 = v28 + ((v30 + 32) & ~v30);
          *(void *)&long long v78 = *(void *)(v66 + 72);
          do
          {
            sub_1001B7310(v31, (uint64_t)v11, type metadata accessor for MetricList);
            uint64_t v33 = *v11;
            uint64_t v32 = v11[1];
            uint64_t v34 = (char *)v11 + *(int *)(v25 + 20);
            uint64_t v35 = v76;
            id v36 = (char *)v14 + *(int *)(v76 + 20);
            uint64_t v37 = type metadata accessor for Date();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v36, v34, v37);
            uint64_t v38 = *(int *)((char *)v11 + *(int *)(v25 + 24));
            *int v14 = v33;
            v14[1] = v32;
            *(void *)((char *)v14 + *(int *)(v35 + 24)) = v38;
            swift_bridgeObjectRetain();
            sub_1001B675C((uint64_t)v11);
            id v39 = v79;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1001B2390(0, v39[2] + 1, 1);
              id v39 = v79;
            }
            unint64_t v41 = v39[2];
            unint64_t v40 = v39[3];
            if (v41 >= v40 >> 1)
            {
              sub_1001B2390(v40 > 1, v41 + 1, 1);
              id v39 = v79;
            }
            v39[2] = v41 + 1;
            sub_1001B67B8((uint64_t)v14, (uint64_t)v39+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(void *)(v75 + 72) * v41);
            v31 += v78;
            --v29;
          }
          while (v29);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a5 = v65;
          uint64_t v15 = v64;
        }
        else
        {
          swift_bridgeObjectRetain();
          id v39 = _swiftEmptyArrayStorage;
        }
        Class v42 = *(void **)(a5 + 48);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Class v42 = sub_1001EAF40(0, v42[2] + 1, 1, v42);
        }
        unint64_t v44 = v42[2];
        unint64_t v43 = v42[3];
        if (v44 >= v43 >> 1) {
          Class v42 = sub_1001EAF40((void *)(v43 > 1), v44 + 1, 1, v42);
        }
        uint64_t v45 = v72;
        unint64_t v46 = v73 + 1;
        v42[2] = v44 + 1;
        uint64_t v47 = &v42[3 * v44];
        uint64_t v48 = v74;
        v47[4] = v45;
        v47[5] = v48;
        v47[6] = v39;
        ObservableObject<>.objectWillChange.getter();
        ObservableObjectPublisher.send()();
        swift_release();
        *(void *)(a5 + 48) = v42;
        unint64_t v24 = v46;
        swift_bridgeObjectRelease();
        if (v46 == v68) {
          goto LABEL_26;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_26:
      swift_bridgeObjectRelease();
      if (qword_1002D7B18 == -1)
      {
LABEL_27:
        if (*(unsigned char *)(qword_1002E31C8 + 26))
        {
          if (qword_1002D7AA8 != -1) {
            swift_once();
          }
          static os_log_type_t.default.getter();
          sub_100157064((uint64_t *)&unk_1002D97F0);
          uint64_t v49 = swift_allocObject();
          *(_OWORD *)(v49 + 16) = xmmword_100267EF0;
          uint64_t v50 = *(void *)(*(void *)(a5 + 48) + 16);
          *(void *)(v49 + 56) = &type metadata for Int;
          *(void *)(v49 + 64) = &protocol witness table for Int;
          *(void *)(v49 + 32) = v50;
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          if (qword_1002D7AA8 != -1) {
            swift_once();
          }
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();
        }
        sub_1001B1824(*(void *)(*(void *)(a5 + 48) + 16), 0);
        BOOL v51 = *(void *)(*(void *)(a5 + 48) + 16) > 1uLL;
        return v63(v51);
      }
    }
    swift_once();
    goto LABEL_27;
  }
  if (qword_1002D7AA8 != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v18 = swift_allocObject();
  long long v78 = xmmword_100267EF0;
  *(_OWORD *)(v18 + 16) = xmmword_100267EF0;
  if (a2)
  {
    swift_getErrorValue();
    uint64_t v19 = Error.localizedDescription.getter();
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  long long v79 = (void *)v19;
  uint64_t v80 = v20;
  sub_100157064((uint64_t *)&unk_1002D9650);
  uint64_t v52 = String.init<A>(describing:)();
  uint64_t v54 = v53;
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t v55 = sub_100181588();
  *(void *)(v18 + 64) = v55;
  *(void *)(v18 + 32) = v52;
  *(void *)(v18 + 40) = v54;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = v78;
  if (a2)
  {
    swift_getErrorValue();
    uint64_t v57 = Error.localizedDescription.getter();
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v58 = 0;
  }
  long long v79 = (void *)v57;
  uint64_t v80 = v58;
  uint64_t v59 = String.init<A>(describing:)();
  *(void *)(v56 + 56) = &type metadata for String;
  *(void *)(v56 + 64) = v55;
  *(void *)(v56 + 32) = v59;
  *(void *)(v56 + 40) = v60;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  BOOL v51 = 0;
  return v63(v51);
}

uint64_t sub_1001B13E0(uint64_t result)
{
  if (result)
  {
    if (qword_1002D7AA8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    return os_log(_:dso:log:type:_:)();
  }
  return result;
}

uint64_t sub_1001B1478(uint64_t a1)
{
  sub_100157064(&qword_1002D9670);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100269B50;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 32) = 0xD000000000000018;
  *(void *)(v2 + 40) = 0x800000010023D990;
  *(void *)(v2 + 88) = &type metadata for Int32;
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a1 <= 0x7FFFFFFF)
  {
    *(_DWORD *)(v2 + 64) = a1;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    if (qword_1002D7B20 == -1) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  __break(1u);
LABEL_12:
  swift_once();
LABEL_4:
  *(void *)(qword_1002E31D0 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_currentSelectedSubsId) = a1;
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  id v3 = (unsigned char *)qword_1002E31C8;
  *(_DWORD *)(qword_1002E31C8 + 148) = a1;
  v3[152] = 0;
  sub_10019D82C();
  swift_beginAccess();
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v4 = *((void *)v3 + 10);
  if (*(void *)(v4 + 16) <= (unint64_t)a1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v5 = v4 + 88 * a1;
  uint64_t v6 = *(void *)(v5 + 40);
  *((void *)v3 + 8) = *(void *)(v5 + 32);
  *((void *)v3 + 9) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = qword_1002D7A98;
  id v3 = (id)qword_1002E31D0;
  if (v7 != -1) {
LABEL_15:
  }
    swift_once();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  unint64_t v8 = sub_1001E006C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = (unint64_t *)&v3[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject];
  swift_beginAccess();
  *uint64_t v9 = v8;

  swift_bridgeObjectRelease();
  return sub_1001B06FC((uint64_t)nullsub_1, 0);
}

uint64_t type metadata accessor for AllMetricsViewModel()
{
  return self;
}

uint64_t sub_1001B1824(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  uint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v2;
  *(void *)(v13 + 24) = a1;
  *(unsigned char *)(v13 + 32) = a2 & 1;
  aBlock[4] = sub_1001B6CC4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028D620;
  int v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001B6714((unint64_t *)&qword_1002DA560, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v17);
}

uint64_t destroy for AllMetricsDataSource()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s13FTMInternal_420AllMetricsDataSourceVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AllMetricsDataSource(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AllMetricsDataSource(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AllMetricsDataSource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AllMetricsDataSource(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AllMetricsDataSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AllMetricsDataSource()
{
  return &type metadata for AllMetricsDataSource;
}

uint64_t sub_1001B1CE4(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v5 = result;
  if (qword_1002D7B18 != -1) {
    __n128 result = swift_once();
  }
  if (*(unsigned char *)(qword_1002E31C8 + 146))
  {
    char v6 = 1;
LABEL_10:
    type metadata accessor for AllMetricsViewModel();
    sub_1001B6714(&qword_1002D91C0, v7, (void (*)(uint64_t))type metadata accessor for AllMetricsViewModel);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    __n128 result = swift_release();
    *(unsigned char *)(v5 + 56) = v6;
    return result;
  }
  if (*(uint64_t *)(qword_1002E31C8 + 160) < 1)
  {
    char v6 = 2;
    goto LABEL_10;
  }
  if ((a3 & 1) == 0 && a2 >= 1)
  {
    char v6 = 0;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1001B1DE0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AllMetricsViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

Swift::Int sub_1001B1E1C(void **a1)
{
  unint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = (void *)sub_1001B54E0(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_1001B3908(v5);
  *a1 = v2;
  return result;
}

void *sub_1001B1E88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100157064(&qword_1002D97E0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1001B4B08((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1001B6994();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1001B1F70(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100157064((uint64_t *)&unk_1002D8290);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_100209104((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_1001B2068(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100157064(&qword_1002DA758);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_1001B4D08((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1001B6994();
  if (v5 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1001B2160(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100157064(&qword_1002DA858);
  uint64_t v3 = *(void *)(sub_100157064(&qword_1002D8A80) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  Swift::Int result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      _OWORD v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = *(void *)(sub_100157064(&qword_1002D8A80) - 8);
      uint64_t v10 = sub_1001B5174(&v11, (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v1, a1);
      swift_bridgeObjectRetain();
      sub_1001B6994();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B22F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B2504(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001B2314(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B31DC(a1, a2, a3, (void *)*v3, &qword_1002DA860, (uint64_t (*)(void))type metadata accessor for STransferMetrics);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001B2350(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B2654(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001B2370(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B27C0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001B2390(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B31DC(a1, a2, a3, (void *)*v3, &qword_1002DA738, (uint64_t (*)(void))type metadata accessor for AllMetricsRowItem);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001B23CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B2F9C(a1, a2, a3, (void *)*v3, &qword_1002DA848, &qword_1002DA850);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001B23FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B2AF0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001B241C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B2C98(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001B243C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B31DC(a1, a2, a3, (void *)*v3, &qword_1002DA788, type metadata accessor for Metric);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001B2478(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B2E24(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001B2498(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B2F9C(a1, a2, a3, (void *)*v3, &qword_1002DA768, &qword_1002DA770);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001B24C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001B31DC(a1, a2, a3, (void *)*v3, &qword_1002DA778, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1001B2504(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100157064(&qword_1002DA218);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B2654(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100157064(&qword_1002D97E0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B27C0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100157064(&qword_1002DA7A8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[88 * v8] || v12 >= &v13[88 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B2948(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100157064(&qword_1002DA758);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_100157064(&qword_1002DA750);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B2AF0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100157064(&qword_1002DA7A0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    sub_100157064(&qword_1002D96A8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B2C98(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100157064(&qword_1002DA798);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100157064((uint64_t *)&unk_1002D9650);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B2E24(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100157064(&qword_1002DA780);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B2F9C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100157064(a5);
  uint64_t v13 = *(void *)(sub_100157064(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_100157064(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B31DC(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100157064(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001B3424(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_100157064(&qword_1002DA7A8);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 88);
  return v4;
}

void *sub_1001B34B0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_100157064(&qword_1002DA740);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  return v4;
}

void *sub_1001B3538(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = a1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  return v4;
}

char *sub_1001B35B4(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  int64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    int64_t v5 = sub_1001EACD4(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  uint64_t v14 = (uint64_t)&v5[11 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 88);
    uint64_t v19 = (char *)&v5[11 * a2 + 4];
    if ((char *)(v14 + 88) != v19 || result >= &v19[88 * v18]) {
      uint64_t result = (char *)memmove(result, v19, 88 * v18);
    }
    uint64_t v20 = v5[2];
    BOOL v17 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v17)
    {
      uint64_t v5[2] = v21;
LABEL_20:
      long long v22 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v14 + 48) = v22;
      *(_OWORD *)(v14 + 64) = *(_OWORD *)(a3 + 64);
      *(void *)(v14 + 80) = *(void *)(a3 + 80);
      long long v23 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v23;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001B375C(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  int64_t v7 = *(void **)v5;
  int64_t v8 = *(void *)(*(void *)v5 + 16);
  if (v8 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v12 > v7[3] >> 1)
  {
    if (v8 <= v12) {
      int64_t v16 = v8 + v11;
    }
    else {
      int64_t v16 = v8;
    }
    int64_t v7 = sub_1001EAF20(isUniquelyReferenced_nonNull_native, v16, 1, v7);
  }
  BOOL v17 = v7 + 4;
  uint64_t v18 = &v7[3 * a1 + 4];
  sub_100157064(&qword_1002DA750);
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v20 = v7[2];
  BOOL v21 = __OFSUB__(v20, a2);
  uint64_t v22 = v20 - a2;
  if (v21) {
    goto LABEL_26;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v18 + 3);
    long long v23 = (char *)&v17[3 * a2];
    if (v18 + 3 != (void *)v23 || result >= &v23[24 * v22]) {
      uint64_t result = (char *)memmove(result, v23, 24 * v22);
    }
    uint64_t v24 = v7[2];
    BOOL v21 = __OFADD__(v24, v11);
    uint64_t v25 = v24 + v11;
    if (!v21)
    {
      _OWORD v7[2] = v25;
LABEL_20:
      *uint64_t v18 = a3;
      v18[1] = a4;
      v17[3 * a1 + 2] = a5;
      *(void *)uint64_t v5 = v7;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1001B3908(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_1001B4030(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v106 = result;
  uint64_t v103 = a1;
  if (v3 < 2)
  {
    int64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      BOOL v94 = v11;
      uint64_t v105 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v103;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_1001B4118((char *)(v95 + 24 * v98), (char *)(v95 + 24 * *(void *)&v94[16 * v12 + 16]), v95 + 24 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_1001B49EC((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          unint64_t v100 = &v97[16 * v96 + 32];
          *(void *)unint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          BOOL v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v105[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v105 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_100157064(&qword_1002DA750);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v105 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v104 = *a1 + 8;
  uint64_t v102 = *a1 - 24;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v107 = v3;
  uint64_t v108 = v10;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 24 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    BOOL v17 = (void *)(v10 + 24 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    BOOL v21 = (void *)(v104 + 24 * v20);
    do
    {
      long long v23 = (void *)(v10 + 24 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 3;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 24 * v20;
        uint64_t v26 = 24 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v26;
            uint64_t v30 = v10 + v25;
            uint64_t v31 = *(void *)(v10 + v26);
            long long v32 = *(_OWORD *)(v10 + v26 + 8);
            long long v33 = *(_OWORD *)(v10 + v25 - 24);
            *(void *)(v29 + 16) = *(void *)(v10 + v25 - 8);
            *(_OWORD *)uint64_t v29 = v33;
            *(void *)(v30 - 24) = v31;
            *(_OWORD *)(v30 - 16) = v32;
          }
          ++v28;
          v25 -= 24;
          v26 += 24;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v106) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1001B43F0(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v45 = *((void *)v11 + 2);
    unint64_t v44 = *((void *)v11 + 3);
    unint64_t v12 = v45 + 1;
    if (v45 >= v44 >> 1) {
      uint64_t v11 = sub_1001B43F0((char *)(v44 > 1), v45 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    unint64_t v46 = v11 + 32;
    uint64_t v47 = &v11[16 * v45 + 32];
    *(void *)uint64_t v47 = v13;
    *((void *)v47 + 1) = v9;
    if (v45)
    {
      uint64_t v10 = v108;
      while (1)
      {
        unint64_t v48 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v53 = &v46[16 * v12];
          uint64_t v54 = *((void *)v53 - 8);
          uint64_t v55 = *((void *)v53 - 7);
          BOOL v59 = __OFSUB__(v55, v54);
          uint64_t v56 = v55 - v54;
          if (v59) {
            goto LABEL_135;
          }
          uint64_t v58 = *((void *)v53 - 6);
          uint64_t v57 = *((void *)v53 - 5);
          BOOL v59 = __OFSUB__(v57, v58);
          uint64_t v51 = v57 - v58;
          char v52 = v59;
          if (v59) {
            goto LABEL_136;
          }
          unint64_t v60 = v12 - 2;
          uint64_t v61 = &v46[16 * v12 - 32];
          uint64_t v63 = *(void *)v61;
          uint64_t v62 = *((void *)v61 + 1);
          BOOL v59 = __OFSUB__(v62, v63);
          uint64_t v64 = v62 - v63;
          if (v59) {
            goto LABEL_138;
          }
          BOOL v59 = __OFADD__(v51, v64);
          uint64_t v65 = v51 + v64;
          if (v59) {
            goto LABEL_141;
          }
          if (v65 >= v56)
          {
            uint64_t v83 = &v46[16 * v48];
            uint64_t v85 = *(void *)v83;
            uint64_t v84 = *((void *)v83 + 1);
            BOOL v59 = __OFSUB__(v84, v85);
            uint64_t v86 = v84 - v85;
            if (v59) {
              goto LABEL_145;
            }
            BOOL v76 = v51 < v86;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v77 = *((void *)v11 + 4);
            uint64_t v78 = *((void *)v11 + 5);
            BOOL v59 = __OFSUB__(v78, v77);
            uint64_t v70 = v78 - v77;
            char v71 = v59;
            goto LABEL_99;
          }
          uint64_t v50 = *((void *)v11 + 4);
          uint64_t v49 = *((void *)v11 + 5);
          BOOL v59 = __OFSUB__(v49, v50);
          uint64_t v51 = v49 - v50;
          char v52 = v59;
        }
        if (v52) {
          goto LABEL_137;
        }
        unint64_t v60 = v12 - 2;
        uint64_t v66 = &v46[16 * v12 - 32];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v69 = __OFSUB__(v67, v68);
        uint64_t v70 = v67 - v68;
        char v71 = v69;
        if (v69) {
          goto LABEL_140;
        }
        uint64_t v72 = &v46[16 * v48];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v59 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v59) {
          goto LABEL_143;
        }
        if (__OFADD__(v70, v75)) {
          goto LABEL_144;
        }
        if (v70 + v75 >= v51)
        {
          BOOL v76 = v51 < v75;
LABEL_105:
          if (v76) {
            unint64_t v48 = v60;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v71) {
          goto LABEL_139;
        }
        long long v79 = &v46[16 * v48];
        uint64_t v81 = *(void *)v79;
        uint64_t v80 = *((void *)v79 + 1);
        BOOL v59 = __OFSUB__(v80, v81);
        uint64_t v82 = v80 - v81;
        if (v59) {
          goto LABEL_142;
        }
        if (v82 < v70) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v87 = v48 - 1;
        if (v48 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v88 = v10;
        unint64_t v89 = &v46[16 * v87];
        uint64_t v90 = *(void *)v89;
        uint64_t v91 = &v46[16 * v48];
        uint64_t v92 = *((void *)v91 + 1);
        sub_1001B4118((char *)(v88 + 24 * *(void *)v89), (char *)(v88 + 24 * *(void *)v91), v88 + 24 * v92, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v92 < v90) {
          goto LABEL_132;
        }
        if (v48 > *((void *)v11 + 2)) {
          goto LABEL_133;
        }
        *(void *)unint64_t v89 = v90;
        *(void *)&v46[16 * v87 + 8] = v92;
        unint64_t v93 = *((void *)v11 + 2);
        if (v48 >= v93) {
          goto LABEL_134;
        }
        unint64_t v12 = v93 - 1;
        memmove(&v46[16 * v48], v91 + 16, 16 * (v93 - 1 - v48));
        *((void *)v11 + 2) = v93 - 1;
        BOOL v76 = v93 > 2;
        uint64_t v10 = v108;
        if (!v76) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
    uint64_t v10 = v108;
LABEL_15:
    Swift::Int v3 = v107;
    if (v9 >= v107)
    {
      int64_t v8 = v105;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v106)) {
    goto LABEL_153;
  }
  if (v13 + v106 >= v3) {
    Swift::Int v34 = v3;
  }
  else {
    Swift::Int v34 = v13 + v106;
  }
  if (v34 >= v13)
  {
    if (v9 != v34)
    {
      uint64_t v35 = v102 + 24 * v9;
      do
      {
        id v36 = (uint64_t *)(v10 + 24 * v9);
        uint64_t v37 = *v36;
        uint64_t v38 = v36[1];
        Swift::Int v39 = v13;
        uint64_t v40 = v35;
        do
        {
          BOOL v41 = v37 == *(void *)v40 && v38 == *(void *)(v40 + 8);
          if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          long long v42 = *(_OWORD *)(v40 + 32);
          uint64_t v43 = *(void *)(v40 + 16);
          uint64_t v37 = *(void *)(v40 + 24);
          *(_OWORD *)(v40 + 24) = *(_OWORD *)v40;
          *(void *)(v40 + 40) = v43;
          *(void *)uint64_t v40 = v37;
          *(_OWORD *)(v40 + 8) = v42;
          uint64_t v38 = v42;
          v40 -= 24;
          ++v39;
        }
        while (v9 != v39);
        ++v9;
        v35 += 24;
      }
      while (v9 != v34);
      Swift::Int v9 = v34;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B4030(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 24 * a3 - 24;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 24 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    while (1)
    {
      BOOL v13 = result == *(void *)v12 && v10 == *(void *)(v12 + 8);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 24;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      long long v14 = *(_OWORD *)(v12 + 32);
      uint64_t v15 = *(void *)(v12 + 16);
      Swift::Int result = *(void *)(v12 + 24);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
      *(void *)(v12 + 40) = v15;
      *(void *)uint64_t v12 = result;
      *(_OWORD *)(v12 + 8) = v14;
      uint64_t v10 = v14;
      v12 -= 24;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B4118(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v29 = __src;
  Swift::Int v28 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      BOOL v17 = &v4[24 * v11];
      Swift::Int v27 = v17;
      uint64_t v29 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v18 = a3 - 24;
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = (char *)(v18 + 24);
          uint64_t v21 = *((void *)v19 - 3);
          uint64_t v22 = *((void *)v19 - 2);
          v19 -= 24;
          BOOL v23 = *((void *)v17 - 3) == v21 && *((void *)v17 - 2) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            Swift::Int v27 = v17 - 24;
            if (v20 < v17 || v18 >= (unint64_t)v17 || v20 != v17)
            {
              long long v25 = *(_OWORD *)(v17 - 24);
              *(void *)(v18 + 16) = *((void *)v17 - 1);
              *(_OWORD *)unint64_t v18 = v25;
            }
            int v19 = v6;
            v17 -= 24;
            if (v6 <= v7) {
              goto LABEL_46;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= (unint64_t)v6)
            {
              long long v24 = *(_OWORD *)v19;
              *(void *)(v18 + 16) = *((void *)v19 + 2);
              *(_OWORD *)unint64_t v18 = v24;
            }
            uint64_t v29 = v19;
            if (v19 <= v7) {
              goto LABEL_46;
            }
          }
          v18 -= 24;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_46;
          }
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    Swift::Int v27 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        BOOL v13 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            long long v16 = *(_OWORD *)v4;
            *((void *)v7 + 2) = *((void *)v4 + 2);
            *(_OWORD *)uint64_t v7 = v16;
          }
          v4 += 24;
          Swift::Int v28 = v4;
          long long v14 = v6;
        }
        else
        {
          long long v14 = v6 + 24;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
          {
            long long v15 = *(_OWORD *)v6;
            *((void *)v7 + 2) = *((void *)v6 + 2);
            *(_OWORD *)uint64_t v7 = v15;
          }
        }
        v7 += 24;
        if (v4 >= v12) {
          break;
        }
        uint64_t v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      uint64_t v29 = v7;
    }
LABEL_46:
    sub_1001B4664((void **)&v29, (const void **)&v28, &v27);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001B43F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100157064(&qword_1002DA760);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  BOOL v13 = v10 + 32;
  long long v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1001B44EC(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1001B45A8(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1001B4664(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
    {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }
  return result;
}

uint64_t sub_1001B4734(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001B4764(a1, a2, a3, type metadata accessor for MetricSectional);
}

uint64_t sub_1001B474C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001B4764(a1, a2, a3, type metadata accessor for Metric);
}

uint64_t sub_1001B4764(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_1001B48A8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = sub_100157064(&qword_1002D8A80);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1001B49EC(uint64_t a1)
{
  return sub_1001B43F0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001B4A00(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *sub_1001B4A7C(void *a1)
{
  return sub_1001EACD4(0, a1[2], 0, a1);
}

void *sub_1001B4A90(void *a1)
{
  return sub_1001EAE00(0, a1[2], 0, a1);
}

void *sub_1001B4AA4(void *a1)
{
  return sub_1001EAF20(0, a1[2], 0, a1);
}

void *sub_1001B4AB8(void *a1)
{
  return sub_1001EB1C0(0, a1[2], 0, a1);
}

uint64_t sub_1001B4ACC(unint64_t a1)
{
  return sub_1001EB3F8(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001B4AE0(unint64_t a1)
{
  return sub_1001EAB90(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001B4AF4(unint64_t a1)
{
  return sub_1001EB42C(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001B4B08(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    Swift::Int v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *int64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001B4D08(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v23 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    Swift::Int v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *int64_t v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v23;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_1001B4F24(void *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v12 = 0;
LABEL_37:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v12;
  }
  if (!a3)
  {
    int64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_37;
  }
  if (a3 < 0) {
    goto LABEL_39;
  }
  uint64_t v10 = a2;
  uint64_t v23 = -1 << *(unsigned char *)(a4 + 32);
  long long v24 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    unint64_t v18 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_100196D64(*(void *)(a4 + 56) + 32 * v14, (uint64_t)&v27);
    *(void *)&long long v26 = v20;
    *((void *)&v26 + 1) = v19;
    long long v22 = v27;
    long long v21 = v28;
    long long v30 = v27;
    long long v31 = v28;
    long long v29 = v26;
    *uint64_t v10 = v26;
    v10[1] = v22;
    v10[2] = v21;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = a3;
      goto LABEL_36;
    }
    v10 += 3;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v15 >= v25) {
      goto LABEL_35;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    if (!v16)
    {
      int64_t v17 = v11 + 2;
      ++v11;
      if (v15 + 1 >= v25) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v11 = v15 + 1;
      if (v15 + 2 >= v25) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * (v15 + 2));
      if (v16)
      {
        v15 += 2;
      }
      else
      {
        int64_t v11 = v15 + 2;
        if (v15 + 3 >= v25) {
          goto LABEL_35;
        }
        unint64_t v16 = *(void *)(v5 + 8 * (v15 + 3));
        if (!v16)
        {
          int64_t v17 = v15 + 4;
          int64_t v11 = v15 + 3;
          if (v15 + 4 < v25)
          {
            unint64_t v16 = *(void *)(v5 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v15 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_40;
                }
                if (v15 >= v25)
                {
                  int64_t v11 = v25 - 1;
                  goto LABEL_35;
                }
                unint64_t v16 = *(void *)(v5 + 8 * v15);
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v15 = v17;
            goto LABEL_21;
          }
LABEL_35:
          unint64_t v8 = 0;
LABEL_36:
          uint64_t v6 = v23;
          uint64_t result = v24;
          goto LABEL_37;
        }
        v15 += 3;
      }
    }
LABEL_21:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v11 = v15;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1001B5174(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100157064(&qword_1002D8A80);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  int64_t v11 = (int64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v34 = a4 + 64;
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  if (-v32 < 64) {
    uint64_t v16 = ~(-1 << -(char)v32);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v28 = ~v32;
    uint64_t v29 = v34;
    *a1 = a4;
    a1[1] = v29;
    a1[2] = v28;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  long long v31 = a1;
  int64_t v18 = 0;
  uint64_t v19 = 0;
  int64_t v33 = (unint64_t)(63 - v32) >> 6;
  int64_t v30 = v33 - 1;
  uint64_t v35 = a3;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    ++v19;
    uint64_t v25 = *(void *)(a4 + 56);
    uint64_t v26 = *(void *)(*(void *)(a4 + 48) + 8 * v21);
    uint64_t v27 = type metadata accessor for STransferMetrics();
    sub_1001B7310(v25 + *(void *)(*(void *)(v27 - 8) + 72) * v21, (uint64_t)v11 + *(int *)(v37 + 48), (uint64_t (*)(void))type metadata accessor for STransferMetrics);
    *int64_t v11 = v26;
    sub_1001B7378((uint64_t)v11, (uint64_t)v14);
    uint64_t result = sub_1001B7378((uint64_t)v14, a2);
    a3 = v35;
    if (v19 == v35) {
      goto LABEL_37;
    }
    a2 += *(void *)(v36 + 72);
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v22 >= v33) {
      goto LABEL_32;
    }
    unint64_t v23 = *(void *)(v34 + 8 * v22);
    if (!v23) {
      break;
    }
LABEL_18:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  v18 += 2;
  if (v22 + 1 >= v33)
  {
    unint64_t v17 = 0;
    int64_t v18 = v22;
    goto LABEL_36;
  }
  unint64_t v23 = *(void *)(v34 + 8 * v18);
  if (v23) {
    goto LABEL_14;
  }
  int64_t v24 = v22 + 2;
  if (v22 + 2 >= v33) {
    goto LABEL_32;
  }
  unint64_t v23 = *(void *)(v34 + 8 * v24);
  if (v23) {
    goto LABEL_17;
  }
  int64_t v18 = v22 + 3;
  if (v22 + 3 >= v33)
  {
    unint64_t v17 = 0;
    int64_t v18 = v22 + 2;
    goto LABEL_36;
  }
  unint64_t v23 = *(void *)(v34 + 8 * v18);
  if (v23)
  {
LABEL_14:
    int64_t v22 = v18;
    goto LABEL_18;
  }
  int64_t v24 = v22 + 4;
  if (v22 + 4 >= v33)
  {
LABEL_32:
    unint64_t v17 = 0;
LABEL_36:
    a3 = v19;
LABEL_37:
    a1 = v31;
    goto LABEL_38;
  }
  unint64_t v23 = *(void *)(v34 + 8 * v24);
  if (v23)
  {
LABEL_17:
    int64_t v22 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v22 >= v33)
    {
      unint64_t v17 = 0;
      int64_t v18 = v30;
      goto LABEL_36;
    }
    unint64_t v23 = *(void *)(v34 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001B54B8(uint64_t a1)
{
  return sub_1001B2654(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001B54CC(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001B54E0(void *a1)
{
  return sub_1001B2948(0, a1[2], 0, a1);
}

uint64_t sub_1001B54F4(void *a1)
{
  return sub_1001B2F9C(0, a1[2], 0, a1, &qword_1002DA858, &qword_1002D8A80);
}

uint64_t sub_1001B552C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  uint64_t v13 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for FTMAllMetricsModel();
  swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v16 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v16[8 * v15]) {
          memmove(v13, v16, 8 * v15);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v18 = v17 + v5;
          if (!__OFADD__(v17, v5))
          {
LABEL_23:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1001B5838(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1001EACD4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[11 * a2 + 4];
    if (a1 != a2 || &v4[11 * a1 + 4] >= (void *)&v16[88 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[11 * a1 + 4], v16, 88 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B59B0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v38 = a1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v12 = sub_100180E94();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(void *)(v2 + 24) = v12;
  *(void *)(v2 + 32) = v14;
  *(unsigned char *)(v2 + 40) = 1;
  *(void *)(v2 + 48) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v2 + 56) = 0;
  *(void *)(v2 + 72) = 0;
  swift_unknownObjectWeakInit();
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  static DispatchQoS.background.getter();
  Swift::String aBlock = (void **)_swiftEmptyArrayStorage;
  sub_1001B6714(&qword_1002D9EB0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100157064(&qword_1002D9EB8);
  sub_1001A53A0((unint64_t *)&unk_1002D9EC0, &qword_1002D9EB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v37);
  *(void *)(v2 + 80) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v15 = v38;
  *(void *)(v2 + 16) = v38;
  uint64_t v16 = self;
  id v17 = v15;
  id v18 = [v16 defaultCenter];
  if (qword_1002D7AE8 != -1) {
    swift_once();
  }
  uint64_t v19 = static NSNotificationName.subsIdSelectionChange;
  uint64_t v43 = sub_1001B6128;
  uint64_t v44 = v2;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  BOOL v41 = sub_1001DD9E8;
  long long v42 = &unk_10028D4B8;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v21 = [v18 addObserverForName:v19 object:0 queue:0 usingBlock:v20];
  _Block_release(v20);
  swift_unknownObjectRelease();

  id v22 = [v16 defaultCenter];
  if (qword_1002D7AD0 != -1) {
    swift_once();
  }
  uint64_t v23 = static NSNotificationName.NewABMMetric;
  uint64_t v43 = sub_1001B6148;
  uint64_t v44 = v2;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  BOOL v41 = sub_1001DD9E8;
  long long v42 = &unk_10028D4E0;
  int64_t v24 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v25 = [v22 addObserverForName:v23 object:0 queue:0 usingBlock:v24];
  _Block_release(v24);
  swift_unknownObjectRelease();

  id v26 = [v16 defaultCenter];
  if (qword_1002D7AD8 != -1) {
    swift_once();
  }
  uint64_t v27 = static NSNotificationName.NewCTMetric;
  uint64_t v43 = sub_1001B6148;
  uint64_t v44 = v2;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  BOOL v41 = sub_1001DD9E8;
  long long v42 = &unk_10028D508;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v29 = [v26 addObserverForName:v27 object:0 queue:0 usingBlock:v28];
  _Block_release(v28);
  swift_unknownObjectRelease();

  id v30 = [v16 defaultCenter];
  if (qword_1002D7B00 != -1) {
    swift_once();
  }
  uint64_t v31 = static NSNotificationName.isAirPlaneModeEnabled;
  uint64_t v43 = sub_1001B6164;
  uint64_t v44 = v2;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  BOOL v41 = sub_1001DD9E8;
  long long v42 = &unk_10028D530;
  uint64_t v32 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v33 = [v30 addObserverForName:v31 object:0 queue:0 usingBlock:v32];
  _Block_release(v32);
  swift_unknownObjectRelease();

  sub_1001B06FC((uint64_t)nullsub_1, 0);
  return v2;
}

uint64_t sub_1001B6128(uint64_t a1)
{
  return sub_1001B007C(a1, v1);
}

uint64_t sub_1001B6130(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001B6140()
{
  return swift_release();
}

uint64_t sub_1001B6148(uint64_t a1)
{
  return sub_1001B03FC(a1, v1);
}

uint64_t sub_1001B6164()
{
  return sub_1001B1824(*(void *)(*(void *)(v0 + 48) + 16), 0);
}

uint64_t sub_1001B6178()
{
  return sub_1001B0A70(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001B6188()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 44, 7);
}

uint64_t sub_1001B61C8(uint64_t a1, uint64_t a2)
{
  return sub_1001B0B74(a1, a2, *(uint64_t (**)(BOOL))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(_DWORD *)(v2 + 40));
}

uint64_t sub_1001B61D8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B6210(uint64_t a1, uint64_t a2)
{
  return sub_1001DF3CC(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t type metadata accessor for AllMetricsRowItem()
{
  uint64_t result = qword_1002DA808;
  if (!qword_1002DA808) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_1001B6264(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  __chkstk_darwin(v3);
  uint64_t v34 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_1001B2068(v5);
  swift_bridgeObjectRelease();
  uint64_t v37 = v6;
  sub_1001B1E1C(&v37);
  uint64_t v7 = v37[2];
  if (v7)
  {
    LODWORD(v33) = v2;
    uint64_t v8 = v37 + 4;
    unint64_t v9 = 0;
    uint64_t v32 = swift_retain();
    uint64_t v10 = (void *)v32;
    while (1)
    {
      int64_t v11 = &v8[3 * v9];
      BOOL v12 = *v11 == 5521746 && v11[1] == 0xE300000000000000;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_1001B4AA4(v10);
        }
        unint64_t v13 = v10[2];
        if (v9 >= v13)
        {
          __break(1u);
          goto LABEL_21;
        }
        unint64_t v14 = v13 - 1;
        uint64_t v15 = v13 - 1 - v9;
        if (v15 < 0)
        {
          _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          uint64_t result = (void *)swift_release();
          __break(1u);
          return result;
        }
        uint64_t v16 = &v10[3 * v9];
        uint64_t v2 = (void (*)(char *, char *, uint64_t))v16[5];
        memmove(v16 + 4, v16 + 7, 24 * v15);
        v10[2] = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v37 = v10;
      }
      if (++v9 == v7)
      {
        swift_release();
        LODWORD(v2) = v33;
        break;
      }
    }
  }
  if (qword_1002D7B18 != -1) {
LABEL_21:
  }
    swift_once();
  int v17 = *(unsigned __int8 *)(qword_1002E31C8 + 26);
  sub_100157064(&qword_1002DA748);
  uint64_t v18 = type metadata accessor for MetricList(0);
  uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 72);
  unint64_t v20 = (*(unsigned __int8 *)(*(void *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80);
  if (v17 == 1)
  {
    uint64_t v33 = 2 * v19;
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100269950;
    id v22 = (char *)(v21 + v20);
    uint64_t v23 = v34;
    Date.init()();
    *(void *)id v22 = 0xD000000000000011;
    *((void *)v22 + 1) = 0x800000010023A600;
    uint64_t v24 = v36;
    int v25 = (int)v2;
    uint64_t v2 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v2(&v22[*(int *)(v18 + 20)], v23, v36);
    id v26 = (int *)(v18 + 24);
    *(_DWORD *)&v22[*(int *)(v18 + 24)] = v25;
    uint64_t v27 = &v22[v19];
    Date.init()();
    strcpy(v27, "Active Bands");
    v27[13] = 0;
    *((_WORD *)v27 + 7) = -5120;
    v2(&v27[*(int *)(v18 + 20)], v23, v24);
    *(_DWORD *)&v27[*(int *)(v18 + 24)] = v25;
    uint64_t v28 = &v22[v33];
    Date.init()();
    *(void *)uint64_t v28 = 0x6574726F70707553;
    *((void *)v28 + 1) = 0xEF73646E61422064;
    v2(&v28[*(int *)(v18 + 20)], v23, v24);
    LODWORD(v2) = v25;
  }
  else
  {
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100267EF0;
    uint64_t v28 = (char *)(v21 + v20);
    id v29 = v34;
    Date.init()();
    *(void *)uint64_t v28 = 0xD000000000000011;
    *((void *)v28 + 1) = 0x800000010023A600;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v28[*(int *)(v18 + 20)], v29, v36);
    id v26 = (int *)(v18 + 24);
  }
  *(_DWORD *)&v28[*v26] = v2;
  sub_1001B375C(0, 0, 5521746, 0xE300000000000000, v21);
  return v37;
}

uint64_t sub_1001B6714(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001B675C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricList(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001B67B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AllMetricsRowItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B681C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1001EAF40(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (void *)&v16[24 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[3 * a1 + 4], v16, 24 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B6994()
{
  return swift_release();
}

uint64_t sub_1001B699C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_100167598(0, (unint64_t *)&qword_1002DC1D0);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        BOOL v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1001B6C8C()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1001B6CC4()
{
  return sub_1001B1CE4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t *sub_1001B6CD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_1001B6DD8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1001B6E50(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1001B6F04(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1001B6FB4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1001B704C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1001B70EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B7100);
}

uint64_t sub_1001B7100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001B71B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B71C4);
}

uint64_t sub_1001B71C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001B726C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001B7310(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001B7378(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D8A80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001B7418()
{
  unint64_t result = qword_1002DA868;
  if (!qword_1002DA868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DA868);
  }
  return result;
}

BOOL sub_1001B746C(char *a1, char *a2)
{
  return qword_10026A6A8[*a1] == qword_10026A6A8[*a2];
}

Swift::Int sub_1001B7490()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10026A6A8[v1]);
  return Hasher._finalize()();
}

void sub_1001B74E0()
{
  Hasher._combine(_:)(qword_10026A6A8[*v0]);
}

Swift::Int sub_1001B7518()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10026A6A8[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001B7564@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001B7A6C(*a1);
  *a2 = result;
  return result;
}

void sub_1001B7590(void *a1@<X8>)
{
  *a1 = qword_10026A6A8[*v1];
}

void sub_1001B75A8(void *a1@<X8>)
{
  *a1 = &off_10028A900;
}

uint64_t sub_1001B75B8(char a1)
{
  uint64_t result = 0x47206E6F69746341;
  switch(a1)
  {
    case 1:
      return 0x7275746E65766441;
    case 2:
      return 0x4720656461637241;
    case 3:
      uint64_t v3 = 0x206472616F42;
      goto LABEL_13;
    case 4:
      unsigned int v4 = 1685217603;
      goto LABEL_11;
    case 5:
      return 0x47206F6E69736143;
    case 6:
      unsigned int v4 = 1701013828;
      goto LABEL_11;
    case 7:
      return 0xD000000000000011;
    case 8:
      return 0x4720796C696D6146;
    case 9:
      unsigned int v4 = 1935960395;
LABEL_11:
      uint64_t result = v4 | 0x6D61472000000000;
      break;
    case 10:
      uint64_t v3 = 0x20636973754DLL;
LABEL_13:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6147000000000000;
      break;
    case 11:
      uint64_t result = 0x4720656C7A7A7550;
      break;
    case 12:
      uint64_t result = 0x4720676E69636152;
      break;
    case 13:
      uint64_t result = 0xD000000000000012;
      break;
    case 14:
      uint64_t result = 0xD000000000000010;
      break;
    case 15:
      uint64_t result = 0x47207374726F7053;
      break;
    case 16:
      uint64_t result = 0x7967657461727453;
      break;
    case 17:
      uint64_t result = 0x4720616976697254;
      break;
    case 18:
      uint64_t result = 0x6D61472064726F57;
      break;
    case 19:
      uint64_t result = 0x6E776F6E6B6E55;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001B780C()
{
  return sub_1001B75B8(*v0);
}

void sub_1001B7814(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t sub_1001B7824()
{
  unint64_t result = qword_1002DA870;
  if (!qword_1002DA870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DA870);
  }
  return result;
}

unint64_t sub_1001B787C()
{
  unint64_t result = qword_1002DA878;
  if (!qword_1002DA878)
  {
    sub_100157104((uint64_t *)&unk_1002DA880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DA878);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SPApplicationSubCategories(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SPApplicationSubCategories(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *unint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B7A34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPApplicationSubCategories()
{
  return &type metadata for SPApplicationSubCategories;
}

uint64_t sub_1001B7A6C(uint64_t a1)
{
  if ((unint64_t)(a1 - 7001) >= 0x13) {
    return 19;
  }
  else {
    return a1 - 7001;
  }
}

uint64_t sub_1001B7A84(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int v25 = a1;
  uint64_t v26 = a2;
  uint64_t v6 = sub_100157064(&qword_1002DA850);
  uint64_t v24 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (!v9) {
    return (uint64_t)v10;
  }
  id v29 = _swiftEmptyArrayStorage;
  sub_1001B23CC(0, v9, 0);
  uint64_t v10 = v29;
  uint64_t result = sub_1001BEF48(a3);
  int64_t v12 = result;
  int v14 = v13;
  char v16 = v15 & 1;
  uint64_t v22 = a3;
  uint64_t v23 = a3 + 56;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(unsigned char *)(a3 + 32))
  {
    if (((*(void *)(v23 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a3 + 36) != v14) {
      goto LABEL_16;
    }
    char v28 = *(unsigned char *)(*(void *)(a3 + 48) + v12);
    v25(&v28);
    if (v4)
    {
      swift_release();
      return (uint64_t)v10;
    }
    uint64_t v27 = 0;
    id v29 = v10;
    unint64_t v18 = v10[2];
    unint64_t v17 = v10[3];
    if (v18 >= v17 >> 1)
    {
      sub_1001B23CC(v17 > 1, v18 + 1, 1);
      uint64_t v10 = v29;
    }
    v10[2] = v18 + 1;
    sub_1001BFFDC((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v18);
    a3 = v22;
    uint64_t result = sub_1001BEFE8(v12, v14, v16 & 1, v22);
    int64_t v12 = result;
    int v14 = v19;
    char v16 = v20 & 1;
    --v9;
    uint64_t v4 = v27;
    if (!v9)
    {
      sub_1001C0068(result, v19, v20 & 1);
      return (uint64_t)v10;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1001B7CC8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1001B7D3C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1001B7F1C()
{
  return type metadata accessor for SURLSessionRunningViewModel();
}

uint64_t type metadata accessor for SURLSessionRunningViewModel()
{
  uint64_t result = qword_1002DA8F8;
  if (!qword_1002DA8F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001B7F70()
{
  sub_1001B807C();
  if (v0 <= 0x3F)
  {
    sub_1001B80D4();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1001B807C()
{
  if (!qword_1002DA908)
  {
    type metadata accessor for STransferMetricsStore();
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002DA908);
    }
  }
}

void sub_1001B80D4()
{
  if (!qword_1002DA910)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002DA910);
    }
  }
}

uint64_t sub_1001B812C()
{
  uint64_t v1 = v0;
  id v2 = [self sharedApplication];
  [v2 setIdleTimerDisabled:1];

  if (qword_1002D7B38 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1001A9488(v3, (uint64_t)qword_1002E31F0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_1001AB860(0x7261657070416E6FLL, 0xEA00000000002928, (uint64_t *)&v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_getKeyPath();
  swift_getKeyPath();
  long long v9 = xmmword_10026A760;
  id v7 = v1;
  return static Published.subscript.setter();
}

uint64_t sub_1001B8328()
{
  uint64_t v1 = v0;
  if (qword_1002D7B38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001A9488(v2, (uint64_t)qword_1002E31F0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "onDisappear(): invoked", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = [self sharedApplication];
  [v6 setIdleTimerDisabled:0];

  unint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks);
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_7;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_7:
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  for (uint64_t i = 0; i != v8; ++i)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v7 + 8 * i + 32);
    }
    int64_t v12 = v11;
    if ([v11 state])
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_28;
  }
LABEL_20:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    uint64_t v13 = _swiftEmptyArrayStorage[2];
    uint64_t result = swift_retain();
    if (!v13) {
      return swift_release_n();
    }
    goto LABEL_22;
  }
LABEL_28:
  swift_retain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v13 = result;
  if (!result) {
    return swift_release_n();
  }
LABEL_22:
  if (v13 >= 1)
  {
    for (uint64_t j = 0; j != v13; ++j)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v15 = (id)_swiftEmptyArrayStorage[j + 4];
      }
      char v16 = v15;
      [v15 cancel];
    }
    return swift_release_n();
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1001B85F4()
{
  v1[10] = v0;
  uint64_t v2 = sub_100157064(&qword_1002DA850);
  v1[11] = v2;
  v1[12] = *(void *)(v2 - 8);
  v1[13] = swift_task_alloc();
  sub_100157064(&qword_1002DA9A0);
  v1[14] = swift_task_alloc();
  uint64_t v3 = sub_100157064(&qword_1002DA9A8);
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v1[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[19] = v5;
  v1[20] = *(void *)(v5 + 64);
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[23] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[24] = v7;
  v1[25] = v6;
  return _swift_task_switch(sub_1001B87F0, v7, v6);
}

uint64_t sub_1001B87F0()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = (void *)v0[10];
  swift_getKeyPath();
  swift_getKeyPath();
  v0[2] = 0xD000000000000015;
  v0[3] = 0x800000010023DBF0;
  v2;
  static Published.subscript.setter();
  sub_1001B9868(v1);
  uint64_t v3 = v0[10];
  v0[26] = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[19];
  uint64_t v14 = v0[22];
  uint64_t v15 = v0[20];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v16 = v0[16];
  uint64_t v17 = v0[15];
  v0[8] = *(void *)(v3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_subject);
  sub_100157064(&qword_1002DA988);
  sub_10015D788(&qword_1002DA9B0, &qword_1002DA988);
  Publisher.collect(_:)();
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v14, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v4, v7);
  *(void *)(v10 + ((v15 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v8;
  sub_10015D788(&qword_1002DA9B8, &qword_1002DA9A8);
  uint64_t v11 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v6, v17);
  *(void *)(v3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_cancellable) = v11;
  swift_release();
  int64_t v12 = (void *)swift_task_alloc();
  v0[27] = v12;
  *int64_t v12 = v0;
  v12[1] = sub_1001B8B84;
  return static Task<>.sleep(nanoseconds:)(2000000000);
}

uint64_t sub_1001B8B84()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v2 + 192);
    uint64_t v4 = *(void *)(v2 + 200);
    uint64_t v5 = sub_1001B9288;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 192);
    uint64_t v4 = *(void *)(v2 + 200);
    uint64_t v5 = sub_1001B8CAC;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1001B8CAC()
{
  uint64_t v52 = v0;
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t result = swift_release();
  unint64_t v48 = (unint64_t)_swiftEmptyArrayStorage;
  double v5 = *(double *)(v3 + v2 + 40);
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v43 = (uint64_t)v5;
  if ((uint64_t)v5 < 1)
  {
LABEL_47:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v42 = v6;
  uint64_t v8 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  uint64_t v47 = *(void *)(v0 + 88);
  uint64_t v44 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks;
  uint64_t v45 = *(void *)(v0 + 80);
  uint64_t v9 = 1;
  while (1)
  {
    uint64_t v10 = *(void **)(v0 + 80);
    uint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    uint64_t v49 = (void *)0xD000000000000013;
    unint64_t v50 = 0x800000010023DC10;
    uint64_t v46 = v9;
    *(void *)(v0 + 72) = v9;
    v11._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    int64_t v12 = v49;
    unint64_t v13 = v50;
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)(v0 + 32) = v12;
    *(void *)(v0 + 40) = v13;
    id v14 = v10;
    static Published.subscript.setter();
    uint64_t v15 = sub_1001B9C6C();
    if (v1) {
      goto LABEL_37;
    }
    uint64_t v51 = 1;
    uint64_t v49 = _swiftEmptyArrayStorage;
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      uint64_t v17 = v15 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
      swift_bridgeObjectRetain();
      uint64_t v18 = *(void *)(v42 + 72);
      while (1)
      {
        uint64_t v19 = *(void *)(v0 + 112);
        uint64_t v20 = *(void *)(v0 + 88);
        sub_10015D5F4(v17, v19, &qword_1002DA850);
        uint64_t v21 = *v7;
        (*v7)(v19, 0, 1, v20);
        if ((*v8)(v19, 1, v20) == 1) {
          break;
        }
        uint64_t v22 = *(void *)(v0 + 176);
        uint64_t v23 = *(void *)(v0 + 104);
        uint64_t v24 = *(void *)(v0 + 80);
        sub_1001BFFDC(*(void *)(v0 + 112), v23);
        int v25 = sub_1001BA250(v23, v23 + *(int *)(v47 + 48), v24, &v48, v22, &v51);
        sub_10015D658(v23, &qword_1002DA850);
        sub_100202738((unint64_t)v25);
        v17 += v18;
        if (!--v16) {
          goto LABEL_13;
        }
      }
    }
    else
    {
      uint64_t v21 = *v7;
      swift_bridgeObjectRetain();
LABEL_13:
      v21(*(void *)(v0 + 112), 1, 1, *(void *)(v0 + 88));
    }
    swift_bridgeObjectRelease_n();
    unint64_t v26 = (unint64_t)v49;
    *(void *)(v45 + v44) = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v27 = result;
    }
    else
    {
      uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    if (v27)
    {
      if (v27 < 1)
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      for (uint64_t i = 0; i != v27; ++i)
      {
        if ((v26 & 0xC000000000000001) != 0) {
          id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v29 = *(id *)(v26 + 8 * i + 32);
        }
        id v30 = v29;
        [v29 resume];
      }
    }
    swift_bridgeObjectRelease_n();
    unint64_t v31 = v48;
    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v32 = result;
      if (!result) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v32 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v32) {
        goto LABEL_33;
      }
    }
    if (v32 < 1) {
      goto LABEL_43;
    }
    for (uint64_t j = 0; j != v32; ++j)
    {
      if ((v31 & 0xC000000000000001) != 0) {
        id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v34 = *(id *)(v31 + 8 * j + 32);
      }
      uint64_t v35 = v34;
      [v34 finishTasksAndInvalidate];
    }
LABEL_33:
    swift_bridgeObjectRelease();
    if (v46 == v43) {
      break;
    }
    uint64_t v1 = 0;
    uint64_t v9 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
LABEL_37:
      (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 144));
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_39;
    }
  }
  uint64_t v37 = *(void *)(v0 + 176);
  uint64_t v38 = *(void *)(v0 + 144);
  uint64_t v39 = *(void *)(v0 + 152);
  uint64_t v40 = *(void **)(v0 + 80);
  swift_getKeyPath();
  swift_getKeyPath();
  *(_OWORD *)(v0 + 48) = xmmword_10026A770;
  id v41 = v40;
  static Published.subscript.setter();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
LABEL_39:
  return v36();
}

uint64_t sub_1001B9288()
{
  uint64_t v52 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t result = swift_release();
  unint64_t v48 = (unint64_t)_swiftEmptyArrayStorage;
  double v4 = *(double *)(v2 + v1 + 40);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v43 = (uint64_t)v4;
  if ((uint64_t)v4 < 1)
  {
LABEL_45:
    __break(1u);
    return result;
  }
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56);
  uint64_t v42 = v5;
  uint64_t v7 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v47 = *(void *)(v0 + 88);
  uint64_t v44 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks;
  uint64_t v45 = *(void *)(v0 + 80);
  uint64_t v8 = 1;
  while (1)
  {
    uint64_t v9 = *(void **)(v0 + 80);
    uint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    uint64_t v49 = (void *)0xD000000000000013;
    unint64_t v50 = 0x800000010023DC10;
    *(void *)(v0 + 72) = v8;
    v10._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    Swift::String v11 = v49;
    unint64_t v12 = v50;
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)(v0 + 32) = v11;
    *(void *)(v0 + 40) = v12;
    v9;
    static Published.subscript.setter();
    uint64_t v13 = sub_1001B9C6C();
    uint64_t v46 = v8;
    uint64_t v51 = 1;
    uint64_t v49 = _swiftEmptyArrayStorage;
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v15 = v13 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
      swift_bridgeObjectRetain();
      uint64_t v16 = *(void *)(v42 + 72);
      while (1)
      {
        uint64_t v17 = *(void *)(v0 + 112);
        uint64_t v18 = *(void *)(v0 + 88);
        sub_10015D5F4(v15, v17, &qword_1002DA850);
        uint64_t v19 = *v6;
        (*v6)(v17, 0, 1, v18);
        if ((*v7)(v17, 1, v18) == 1) {
          break;
        }
        uint64_t v20 = *(void *)(v0 + 176);
        uint64_t v21 = *(void *)(v0 + 104);
        uint64_t v22 = *(void *)(v0 + 80);
        sub_1001BFFDC(*(void *)(v0 + 112), v21);
        uint64_t v23 = sub_1001BA250(v21, v21 + *(int *)(v47 + 48), v22, &v48, v20, &v51);
        sub_10015D658(v21, &qword_1002DA850);
        sub_100202738((unint64_t)v23);
        v15 += v16;
        if (!--v14) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t v19 = *v6;
      swift_bridgeObjectRetain();
LABEL_12:
      v19(*(void *)(v0 + 112), 1, 1, *(void *)(v0 + 88));
    }
    swift_bridgeObjectRelease_n();
    unint64_t v24 = (unint64_t)v49;
    *(void *)(v45 + v44) = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v25 = result;
    }
    else
    {
      uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    if (v25)
    {
      if (v25 < 1)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      for (uint64_t i = 0; i != v25; ++i)
      {
        if ((v24 & 0xC000000000000001) != 0) {
          id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v27 = *(id *)(v24 + 8 * i + 32);
        }
        char v28 = v27;
        [v27 resume];
      }
    }
    swift_bridgeObjectRelease_n();
    unint64_t v29 = v48;
    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v30 = result;
      uint64_t v31 = v46;
      if (!result) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v30 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v31 = v46;
      if (!v30) {
        goto LABEL_32;
      }
    }
    if (v30 < 1) {
      goto LABEL_41;
    }
    for (uint64_t j = 0; j != v30; ++j)
    {
      if ((v29 & 0xC000000000000001) != 0) {
        id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v33 = *(id *)(v29 + 8 * j + 32);
      }
      id v34 = v33;
      [v33 finishTasksAndInvalidate];
    }
LABEL_32:
    swift_bridgeObjectRelease();
    if (v31 == v43) {
      break;
    }
    BOOL v35 = __OFADD__(v31, 1);
    uint64_t v8 = v31 + 1;
    if (v35)
    {
      __break(1u);
      (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 144));
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_37;
    }
  }
  uint64_t v37 = *(void *)(v0 + 176);
  uint64_t v38 = *(void *)(v0 + 144);
  uint64_t v39 = *(void *)(v0 + 152);
  uint64_t v40 = *(void **)(v0 + 80);
  swift_getKeyPath();
  swift_getKeyPath();
  *(_OWORD *)(v0 + 48) = xmmword_10026A770;
  id v41 = v40;
  static Published.subscript.setter();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
LABEL_37:
  return v36();
}

void sub_1001B9868(uint64_t a1@<X8>)
{
  uint64_t v28 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v25 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v1;
  swift_retain();
  UUID.init()();
  uint64_t v8 = (void *)UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = a1;
  unint64_t v12 = v29;
  sub_1001558A8(v8, v10, 7235938, 0xE300000000000000, a1);
  if (v12)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v13 = v26;
    uint64_t v14 = v28;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v15 = *(void *)(v27 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 56);
    int v16 = *(unsigned __int8 *)(v27 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 64);
    swift_retain();
    sub_100155D54(v11, v15, v16);
    swift_release();
    uint64_t v17 = v14;
    uint64_t v18 = v13;
    if (qword_1002D7B38 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_1001A9488(v19, (uint64_t)qword_1002E31F0);
    uint64_t v20 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v25, v11, v17);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      unint64_t v29 = v23 + 4;
      Swift::String v24 = URL.path(percentEncoded:)(1);
      uint64_t v30 = sub_1001AB860(v24._countAndFlagsBits, (unint64_t)v24._object, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v28);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "created temporary file %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v17);
    }
  }
}

uint64_t sub_1001B9C6C()
{
  uint64_t v2 = type metadata accessor for URLRequest();
  uint64_t v57 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v47 - v6;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v47 - v12;
  sub_1001BC700(1);
  sub_1001BCA34((uint64_t)v13);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    uint64_t v55 = v5;
    uint64_t v56 = v7;
    uint64_t v14 = v13;
    sub_1001BCA34((uint64_t)v11);
    uint64_t v16 = v0;
    uint64_t v53 = v11;
    uint64_t v17 = *(void *)(v0 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 32);
    uint64_t v18 = qword_1002D7B38;
    swift_bridgeObjectRetain();
    uint64_t v54 = v8;
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_1001A9488(v19, (uint64_t)qword_1002E31F0);
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    int v22 = v21;
    BOOL v23 = os_log_type_enabled(v20, v21);
    uint64_t v52 = v2;
    uint64_t v24 = (uint64_t)v14;
    uint64_t v25 = (uint64_t)v56;
    if (v23)
    {
      os_log_t v49 = v20;
      uint64_t v26 = swift_slowAlloc();
      int v51 = v22;
      uint64_t v27 = (uint8_t *)v26;
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446210;
      unint64_t v50 = v27 + 4;
      sub_10017FC24();
      swift_bridgeObjectRetain();
      uint64_t v28 = Set.description.getter();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      uint64_t v59 = sub_1001AB860(v28, v30, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_t v31 = v49;
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v51, "Generating uplink/downlink requests pair for %{public}s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v25 = (uint64_t)v56;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v32 = swift_bridgeObjectRelease_n();
    }
    uint64_t v33 = v57;
    uint64_t v34 = (uint64_t)v55;
    if (*(void *)(v17 + 16))
    {
      __chkstk_darwin(v32);
      uint64_t v35 = (uint64_t)v53;
      *(&v47 - 4) = v16;
      *(&v47 - 3) = v35;
      *(&v47 - 2) = v24;
      uint64_t v0 = sub_1001B7A84((void (*)(char *))sub_1001C0044, (uint64_t)(&v47 - 6), v17);
      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      uint64_t v37 = v54;
      v36(v35, v54);
      v36(v24, v37);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v38 = v24;
      uint64_t v48 = v24;
      uint64_t v39 = (uint64_t)v53;
      sub_1001BD25C((uint64_t)v53, 9, v25);
      sub_1001BD540(v38, 9, v34);
      sub_100157064(&qword_1002DA848);
      uint64_t v40 = v34;
      id v41 = (int *)(sub_100157064(&qword_1002DA850) - 8);
      unint64_t v42 = (*(unsigned __int8 *)(*(void *)v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v41 + 80);
      uint64_t v0 = swift_allocObject();
      *(_OWORD *)(v0 + 16) = xmmword_100267EF0;
      unint64_t v43 = v0 + v42 + v41[14];
      uint64_t v44 = v52;
      (*(void (**)(void))(v33 + 16))();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v33 + 32))(v43, v40, v44);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v25, v44);
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      uint64_t v46 = v54;
      v45(v39, v54);
      v45(v48, v46);
    }
  }
  return v0;
}

void *sub_1001BA250(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9 = a3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  if (*(unsigned char *)(a3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 48) == 1)
  {
    id v10 = *(id *)(a3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue);
    uint64_t v11 = sub_1001BA664((uint64_t)v10, 0, 0);

    uint64_t v12 = v11;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    URL._bridgeToObjectiveC()(v14);
    uint64_t v16 = v15;
    id v17 = [v12 uploadTaskWithRequest:isa fromFile:v15];

    LODWORD(v18) = 1.0;
    [v17 setPriority:v18];
    uint64_t v31 = *a6;
    id v19 = v17;
    dispatch thunk of CustomStringConvertible.description.getter();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v19 setTaskDescription:v20, v31];

    if (__OFADD__(*a6, 1))
    {
      __break(1u);
    }
    else
    {
      ++*a6;
      id v19 = v19;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_6:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        goto LABEL_7;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_6;
  }
LABEL_7:
  if (*(unsigned char *)(v9 + 49) == 1)
  {
    id v21 = *(id *)(a3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue);
    int v22 = sub_1001BA664((uint64_t)v21, 0, 0);

    BOOL v23 = v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    Class v24 = URLRequest._bridgeToObjectiveC()().super.isa;
    id v25 = [v23 downloadTaskWithRequest:v24];

    LODWORD(v26) = 1.0;
    [v25 setPriority:v26];
    id v27 = v25;
    id v32 = [v27 taskIdentifier];
    dispatch thunk of CustomStringConvertible.description.getter();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v27 setTaskDescription:v28, v32];

    uint64_t v33 = *a6;
    dispatch thunk of CustomStringConvertible.description.getter();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v27 setTaskDescription:v29, v33];

    if (__OFADD__(*a6, 1))
    {
      __break(1u);
    }
    else
    {
      ++*a6;
      a6 = (uint64_t *)v27;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_12:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        return _swiftEmptyArrayStorage;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_12;
  }
  return _swiftEmptyArrayStorage;
}

NSObject *sub_1001BA664(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = [self ephemeralSessionConfiguration];
  if (!*(void *)(*(void *)(v3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 32)
                  + 16))
  {
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 setSharedContainerIdentifier:v9];
  }
  p_name = &MetricDetailViewModel.name;
  if (a3)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    [v8 set_sourceApplicationSecondaryIdentifier:v11];

    if (qword_1002D7B38 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_1001A9488(v12, (uint64_t)qword_1002E31F0);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136380675;
      swift_bridgeObjectRetain();
      sub_1001AB860(a2, a3, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "made session with identifier =%{private}s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      p_name = (char **)(&MetricDetailViewModel + 24);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  [v8 setAllowsCellularAccess:1];
  [v8 setAllowsExpensiveNetworkAccess:1];
  [v8 setAllowsConstrainedNetworkAccess:1];
  [v8 setDiscretionary:0];
  [v8 setSessionSendsLaunchEvents:1];
  [v8 setWaitsForConnectivity:1];
  id v16 = [self sessionWithConfiguration:v8 delegate:v4 delegateQueue:a1];
  if (p_name[359] != (char *)-1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_1001A9488(v17, (uint64_t)qword_1002E31F0);
  double v18 = v16;
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc();
    int v22 = (void *)swift_slowAlloc();
    *(_DWORD *)id v21 = 138543362;
    uint64_t v26 = (uint64_t)v18;
    BOOL v23 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v22 = v18;

    _os_log_impl((void *)&_mh_execute_header, v19, v20, "made url session=%{public}@", v21, 0xCu);
    sub_100157064((uint64_t *)&unk_1002DA9C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    Class v24 = v8;
  }
  else
  {

    Class v24 = v18;
    id v19 = v8;
  }

  return v18;
}

uint64_t sub_1001BAACC()
{
  v1[12] = v0;
  uint64_t v2 = sub_100157064(&qword_1002DA850);
  v1[13] = v2;
  v1[14] = *(void *)(v2 - 8);
  v1[15] = swift_task_alloc();
  sub_100157064(&qword_1002DA9A0);
  v1[16] = swift_task_alloc();
  uint64_t v3 = sub_100157064(&qword_1002DA9A8);
  v1[17] = v3;
  v1[18] = *(void *)(v3 - 8);
  v1[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v1[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[21] = v5;
  v1[22] = *(void *)(v5 + 64);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[25] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[26] = v7;
  v1[27] = v6;
  return _swift_task_switch(sub_1001BACC8, v7, v6);
}

uint64_t sub_1001BACC8()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = (void *)v0[12];
  swift_getKeyPath();
  swift_getKeyPath();
  v0[2] = 0xD000000000000015;
  v0[3] = 0x800000010023DBF0;
  v2;
  static Published.subscript.setter();
  sub_1001B9868(v1);
  uint64_t v3 = v0[12];
  v0[10] = _swiftEmptyArrayStorage;
  v0[8] = 1;
  uint64_t v4 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  v0[28] = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  v0[29] = qword_10026A8F0[*(char *)(v3 + v4 + 26)];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[21];
  uint64_t v15 = v0[24];
  uint64_t v16 = v0[22];
  uint64_t v7 = v0[19];
  uint64_t v8 = v0[20];
  uint64_t v17 = v0[18];
  uint64_t v18 = v0[17];
  v0[11] = *(void *)(v3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_subject);
  sub_100157064(&qword_1002DA988);
  sub_10015D788(&qword_1002DA9B0, &qword_1002DA988);
  Publisher.collect(_:)();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v15, v8);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v11 + v10, v5, v8);
  *(void *)(v11 + ((v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = v9;
  sub_10015D788(&qword_1002DA9B8, &qword_1002DA9A8);
  uint64_t v12 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v7, v18);
  *(void *)(v3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_cancellable) = v12;
  swift_release();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[30] = v13;
  void *v13 = v0;
  v13[1] = sub_1001BB070;
  return static Task<>.sleep(nanoseconds:)(2000000000);
}

uint64_t sub_1001BB070()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v2 + 208);
    uint64_t v4 = *(void *)(v2 + 216);
    uint64_t v5 = sub_1001BB770;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 208);
    uint64_t v4 = *(void *)(v2 + 216);
    uint64_t v5 = sub_1001BB198;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1001BB198()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t result = swift_release();
  double v5 = *(double *)(v3 + v2 + 40);
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v40 = (uint64_t)v5;
  if ((uint64_t)v5 < 1)
  {
LABEL_47:
    __break(1u);
    return result;
  }
  uint64_t v46 = (uint64_t *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v44 = *(void *)(v0 + 104);
  uint64_t v39 = v6;
  uint64_t v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  uint64_t v41 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks;
  uint64_t v42 = *(void *)(v0 + 96);
  uint64_t v8 = 1;
  while (1)
  {
    uint64_t v9 = *(void **)(v0 + 96);
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 72) = v8;
    v10._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)(v0 + 32) = 0xD000000000000013;
    *(void *)(v0 + 40) = 0x800000010023DC10;
    id v11 = v9;
    static Published.subscript.setter();
    uint64_t v12 = sub_1001B9C6C();
    if (v1) {
      goto LABEL_37;
    }
    uint64_t v43 = v8;
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v14 = v12 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
      swift_bridgeObjectRetain();
      uint64_t v15 = *(void *)(v39 + 72);
      while (1)
      {
        uint64_t v16 = *(void *)(v0 + 128);
        uint64_t v17 = *(void *)(v0 + 104);
        sub_10015D5F4(v14, v16, &qword_1002DA850);
        uint64_t v18 = *v7;
        (*v7)(v16, 0, 1, v17);
        if ((*v45)(v16, 1, v17) == 1) {
          break;
        }
        uint64_t v19 = *(void *)(v0 + 232);
        uint64_t v20 = *(void *)(v0 + 192);
        uint64_t v21 = *(void *)(v0 + 120);
        int v22 = *(NSObject **)(v0 + 96);
        sub_1001BFFDC(*(void *)(v0 + 128), v21);
        BOOL v23 = sub_1001BBD48(v21, (void *)(v21 + *(int *)(v44 + 48)), v19, v22, v46, v20, (void *)(v0 + 64));
        sub_10015D658(v21, &qword_1002DA850);
        sub_100202738((unint64_t)v23);
        v14 += v15;
        if (!--v13) {
          goto LABEL_13;
        }
      }
    }
    else
    {
      uint64_t v18 = *v7;
      swift_bridgeObjectRetain();
LABEL_13:
      v18(*(void *)(v0 + 128), 1, 1, *(void *)(v0 + 104));
    }
    swift_bridgeObjectRelease_n();
    *(void *)(v42 + v41) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v24 = result;
    }
    else
    {
      uint64_t v24 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    if (v24)
    {
      if (v24 < 1)
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
          id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v26 = (id)_swiftEmptyArrayStorage[i + 4];
        }
        id v27 = v26;
        [v26 resume:v39];
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v28 = *v46;
    if ((unint64_t)*v46 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v29 = result;
      if (!result) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v29) {
        goto LABEL_33;
      }
    }
    if (v29 < 1) {
      goto LABEL_43;
    }
    for (uint64_t j = 0; j != v29; ++j)
    {
      if ((v28 & 0xC000000000000001) != 0) {
        id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v31 = *(id *)(v28 + 8 * j + 32);
      }
      id v32 = v31;
      [v31 finishTasksAndInvalidate:v39];
    }
LABEL_33:
    swift_bridgeObjectRelease();
    if (v43 == v40) {
      break;
    }
    uint64_t v1 = 0;
    uint64_t v8 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
LABEL_37:
      (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 160));
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_39;
    }
  }
  uint64_t v34 = *(void *)(v0 + 192);
  uint64_t v36 = *(void *)(v0 + 160);
  uint64_t v35 = *(void *)(v0 + 168);
  uint64_t v37 = *(void **)(v0 + 96);
  swift_getKeyPath();
  swift_getKeyPath();
  *(_OWORD *)(v0 + 48) = xmmword_10026A770;
  id v38 = v37;
  static Published.subscript.setter();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
LABEL_39:
  return v33();
}

uint64_t sub_1001BB770()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t result = swift_release();
  double v4 = *(double *)(v2 + v1 + 40);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v38 = (uint64_t)v4;
  if ((uint64_t)v4 < 1)
  {
LABEL_45:
    __break(1u);
    return result;
  }
  uint64_t v44 = (uint64_t *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56);
  uint64_t v42 = *(void *)(v0 + 104);
  uint64_t v37 = v5;
  uint64_t v43 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v39 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks;
  uint64_t v40 = *(void *)(v0 + 96);
  uint64_t v7 = 1;
  while (1)
  {
    uint64_t v8 = *(void **)(v0 + 96);
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 72) = v7;
    v9._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)(v0 + 32) = 0xD000000000000013;
    *(void *)(v0 + 40) = 0x800000010023DC10;
    v8;
    static Published.subscript.setter();
    uint64_t v10 = sub_1001B9C6C();
    uint64_t v41 = v7;
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v12 = v10 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
      swift_bridgeObjectRetain();
      uint64_t v13 = *(void *)(v37 + 72);
      while (1)
      {
        uint64_t v14 = *(void *)(v0 + 128);
        uint64_t v15 = *(void *)(v0 + 104);
        sub_10015D5F4(v12, v14, &qword_1002DA850);
        uint64_t v16 = *v6;
        (*v6)(v14, 0, 1, v15);
        if ((*v43)(v14, 1, v15) == 1) {
          break;
        }
        uint64_t v17 = *(void *)(v0 + 232);
        uint64_t v18 = *(void *)(v0 + 192);
        uint64_t v19 = *(void *)(v0 + 120);
        uint64_t v20 = *(NSObject **)(v0 + 96);
        sub_1001BFFDC(*(void *)(v0 + 128), v19);
        uint64_t v21 = sub_1001BBD48(v19, (void *)(v19 + *(int *)(v42 + 48)), v17, v20, v44, v18, (void *)(v0 + 64));
        sub_10015D658(v19, &qword_1002DA850);
        sub_100202738((unint64_t)v21);
        v12 += v13;
        if (!--v11) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t v16 = *v6;
      swift_bridgeObjectRetain();
LABEL_12:
      v16(*(void *)(v0 + 128), 1, 1, *(void *)(v0 + 104));
    }
    swift_bridgeObjectRelease_n();
    *(void *)(v40 + v39) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v22 = result;
    }
    else
    {
      uint64_t v22 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    if (v22)
    {
      if (v22 < 1)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
          id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v24 = (id)_swiftEmptyArrayStorage[i + 4];
        }
        id v25 = v24;
        [v24 resume:v37];
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v26 = *v44;
    if ((unint64_t)*v44 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v27 = result;
      if (!result) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v27) {
        goto LABEL_32;
      }
    }
    if (v27 < 1) {
      goto LABEL_41;
    }
    for (uint64_t j = 0; j != v27; ++j)
    {
      if ((v26 & 0xC000000000000001) != 0) {
        id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v29 = *(id *)(v26 + 8 * j + 32);
      }
      unint64_t v30 = v29;
      [v29 finishTasksAndInvalidate:v37];
    }
LABEL_32:
    swift_bridgeObjectRelease();
    if (v41 == v38) {
      break;
    }
    uint64_t v7 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
      __break(1u);
      (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 160));
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v31 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_37;
    }
  }
  uint64_t v32 = *(void *)(v0 + 192);
  uint64_t v34 = *(void *)(v0 + 160);
  uint64_t v33 = *(void *)(v0 + 168);
  uint64_t v35 = *(void **)(v0 + 96);
  swift_getKeyPath();
  swift_getKeyPath();
  *(_OWORD *)(v0 + 48) = xmmword_10026A770;
  id v36 = v35;
  static Published.subscript.setter();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v31 = *(uint64_t (**)(void))(v0 + 8);
LABEL_37:
  return v31();
}

void *sub_1001BBD48(uint64_t a1, void *a2, uint64_t a3, NSObject *a4, void *a5, uint64_t a6, void *a7)
{
  v10._char countAndFlagsBits = 0xD000000000000020;
  v10._object = (void *)0x800000010023DC30;
  String.append(_:)(v10);
  v11._char countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = (char *)a4 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  if (*((unsigned char *)&a4[6].isa + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration) == 1)
  {
    if (URLRequest.networkServiceType.getter() < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v40 = a7;
      v15._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._char countAndFlagsBits = 46;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      id v18 = objc_retain(*(id *)((char *)&a4->isa
                              + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue));
      uint64_t v19 = sub_1001BA664((uint64_t)v18, 0xD000000000000021, 0x800000010023DC60);

      swift_bridgeObjectRelease();
      object = v19;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_4;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_4:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    URL._bridgeToObjectiveC()(v21);
    BOOL v23 = v22;
    id v24 = [object uploadTaskWithRequest:isa fromFile:v22];

    LODWORD(v25) = 1.0;
    [v24 setPriority:v25];
    a7 = v40;
    id v26 = v24;
    dispatch thunk of CustomStringConvertible.description.getter();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 setTaskDescription:v27];

    if (__OFADD__(*v40, 1))
    {
      __break(1u);
    }
    else
    {
      ++*v40;
      id v26 = v26;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_6:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        goto LABEL_7;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_6;
  }
LABEL_7:
  if (v14[49] == 1)
  {
    id v28 = a2;
    if (URLRequest.networkServiceType.getter() < 0)
    {
      __break(1u);
    }
    else
    {
      v29._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._char countAndFlagsBits = 46;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      v31._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      id v32 = objc_retain(*(id *)((char *)&a4->isa
                              + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue));
      uint64_t v33 = sub_1001BA664((uint64_t)v32, 0xD000000000000021, 0x800000010023DC60);

      swift_bridgeObjectRelease();
      a4 = v33;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_10;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_10:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    Class v34 = URLRequest._bridgeToObjectiveC()().super.isa;
    id v35 = [a4 downloadTaskWithRequest:v34];

    LODWORD(v36) = 1.0;
    [v35 setPriority:v36];
    id v37 = v35;
    dispatch thunk of CustomStringConvertible.description.getter();
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v37 setTaskDescription:v38];

    if (__OFADD__(*a7, 1))
    {
      __break(1u);
    }
    else
    {
      ++*a7;
      id v28 = v37;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_12:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        return _swiftEmptyArrayStorage;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_12;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001BC2D8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *a1;
  if (qword_1002D7B38 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_1001A9488(v11, (uint64_t)qword_1002E31F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  Swift::String v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  unint64_t v27 = v10;
  if (v14)
  {
    Swift::String v15 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    v26[2] = a3 + 16;
    *(_DWORD *)Swift::String v15 = 136315138;
    v26[1] = v15 + 4;
    sub_1001C0074(&qword_1002DA9F8, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = sub_1001AB860(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Deleting temporary file %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v10 = v27;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  swift_retain();

  sub_10015647C();
  swift_release();
  if (!(v10 >> 62))
  {
    uint64_t v19 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_8;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v19 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_8:
  if (v19 >= 1)
  {
    uint64_t v21 = 0;
    unint64_t v22 = v10 & 0xC000000000000001;
    do
    {
      if (v22) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v23 = *(id *)(v10 + 8 * v21 + 32);
      }
      id v24 = v23;
      ++v21;
      aBlock[4] = (uint64_t)nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1001E0068;
      aBlock[3] = (uint64_t)&unk_10028D928;
      double v25 = _Block_copy(aBlock);
      [v24 flushWithCompletionHandler:v25];
      _Block_release(v25);
      [v24 invalidateAndCancel];

      unint64_t v10 = v27;
    }
    while (v19 != v21);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BC700(char a1)
{
  uint64_t v3 = sub_10016E23C(*(void *)(v1 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 72), *(unsigned char *)(v1 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 80));
  if ((a1 & 1) == 0)
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
    goto LABEL_7;
  }
  double v4 = (double)v3 * 0.0009765625 * 0.0009765625;
  sub_100157064(&qword_1002DAA10);
  type metadata accessor for URLQueryItem();
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_100267EF0;
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v6 = (void *)result;
  uint64_t v14 = (uint64_t)v4;
  dispatch thunk of CustomStringConvertible.description.getter();
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
LABEL_7:
  if (qword_1002D7B38 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1001A9488(v7, (uint64_t)qword_1002E31F0);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136315138;
    type metadata accessor for URLQueryItem();
    swift_bridgeObjectRetain();
    uint64_t v11 = Array.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    sub_1001AB860(v11, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "made url query items %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (uint64_t)v6;
}

uint64_t sub_1001BCA34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v1 = type metadata accessor for URLError.Code();
  __chkstk_darwin(v1 - 8);
  id v37 = (char *)v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URLError();
  NSString v38 = *(char **)(v3 - 8);
  uint64_t v39 = (void (*)(void, void, void))v3;
  __chkstk_darwin(v3);
  double v36 = (uint8_t *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100157064((uint64_t *)&unk_1002DA9E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v35 - v13;
  uint64_t v15 = type metadata accessor for URLComponents();
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v42 = v15;
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  swift_bridgeObjectRetain();
  URLComponents.host.setter();
  URLComponents.port.setter();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  URLComponents.queryItems.setter();
  URLComponents.url.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10015D658((uint64_t)v7, (uint64_t *)&unk_1002DA9E0);
    if (qword_1002D7B38 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1001A9488(v18, (uint64_t)qword_1002E31F0);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = v42;
    if (v21)
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)id v23 = 136315138;
      swift_beginAccess();
      sub_1001C0074(&qword_1002DA9F0, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = sub_1001AB860(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to composed the URL %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    static URLError.Code.badURL.getter();
    sub_1001BEC50((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C0074(&qword_1002D7C70, (void (*)(uint64_t))&type metadata accessor for URLError);
    id v26 = v36;
    unint64_t v27 = v39;
    _BridgedStoredNSError.init(_:userInfo:)();
    URLError._nsError.getter();
    (*((void (**)(uint8_t *, void (*)(void, void, void)))v38 + 1))(v26, v27);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v17, v22);
  }
  else
  {
    uint64_t v39 = *(void (**)(void, void, void))(v9 + 32);
    v39(v14, v7, v8);
    if (qword_1002D7B38 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_1001A9488(v29, (uint64_t)qword_1002E31F0);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    Swift::String v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      id v37 = (char *)swift_slowAlloc();
      uint64_t v44 = v37;
      NSString v38 = v14;
      *(_DWORD *)id v32 = 136446210;
      v35[1] = v32 + 4;
      double v36 = v32;
      sub_1001C0074(&qword_1002DA9F8, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v45 = sub_1001AB860(v33, v34, (uint64_t *)&v44);
      uint64_t v14 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "made url=%{public}s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }

    v39(v40, v14, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v17, v42);
  }
}

uint64_t sub_1001BD1DC@<X0>(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v6 = *a1;
  sub_1001BD25C(a2, *a1, a4);
  uint64_t v7 = sub_100157064(&qword_1002DA850);
  return sub_1001BD540(a3, v6, a4 + *(int *)(v7 + 48));
}

uint64_t sub_1001BD25C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URLRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001BD540(a1, a2, (uint64_t)v9);
  URLRequest.httpMethod.setter();
  if (qword_1002D7B38 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_1001A9488(v10, (uint64_t)qword_1002E31F0);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    v18[0] = a3;
    v19[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_beginAccess();
    sub_1001C0074(&qword_1002DA9D8, (void (*)(uint64_t))&type metadata accessor for URLRequest);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v18[1] = sub_1001AB860(v15, v16, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "made upload url request=%s", v13, 0xCu);
    swift_arrayDestroy();
    a3 = v18[0];
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(a3, v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1001BD540@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URLRequest();
  uint64_t v30 = *(void *)(v13 - 8);
  uint64_t v31 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  switch(a2)
  {
    case 9:
      break;
    default:
      URLRequest.networkServiceType.setter();
      break;
  }
  URLRequest.allowsCellularAccess.setter();
  URLRequest.allowsExpensiveNetworkAccess.setter();
  URLRequest.allowsConstrainedNetworkAccess.setter();
  UUID.init()();
  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19._object = (void *)0x800000010023DC90;
  v20._char countAndFlagsBits = v16;
  v20._object = v18;
  v19._char countAndFlagsBits = 0xD000000000000011;
  URLRequest.addValue(_:forHTTPHeaderField:)(v20, v19);
  swift_bridgeObjectRelease();
  if (qword_1002D7B38 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_1001A9488(v21, (uint64_t)qword_1002E31F0);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136446210;
    swift_beginAccess();
    sub_1001C0074(&qword_1002DA9D8, (void (*)(uint64_t))&type metadata accessor for URLRequest);
    uint64_t v25 = v31;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = sub_1001AB860(v26, v27, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "made url request=%{public}s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v25 = v31;
  }
  swift_beginAccess();
  uint64_t v28 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v32, v15, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v15, v25);
}

uint64_t sub_1001BDBA8(uint64_t a1, void *a2)
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  type metadata accessor for SURLSessionRunningViewModel();
  sub_1001C0074((unint64_t *)&qword_1002DC2B0, (void (*)(uint64_t))type metadata accessor for SURLSessionRunningViewModel);
  ObservableObject<>.objectWillChange.getter();

  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v4 = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_coreTelephonyService];
  if (!v6)
  {

    goto LABEL_8;
  }
  id v7 = v6;

  id v8 = [v7 getPDPInfo];
  if (!v8)
  {
LABEL_8:
    uint64_t v9 = 0;
    unint64_t v11 = 0xE000000000000000;
    goto LABEL_9;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)aPdpIp0;
    unint64_t v11 = unk_1002DA2D0;
    swift_bridgeObjectRetain();
  }
LABEL_9:
  uint64_t v13 = (void *)swift_unknownObjectUnownedLoadStrong();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v14 = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v15 = *(void *)&v14[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 32];
  swift_bridgeObjectRetain();

  uint64_t v16 = *(void *)(v15 + 16);
  swift_bridgeObjectRelease();
  sub_1001729AC(a2, v16 == 0, v9, v11);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001BDEE4(uint64_t a1, void *a2)
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  type metadata accessor for SURLSessionRunningViewModel();
  sub_1001C0074((unint64_t *)&qword_1002DC2B0, (void (*)(uint64_t))type metadata accessor for SURLSessionRunningViewModel);
  ObservableObject<>.objectWillChange.getter();

  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v4 = (char *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_coreTelephonyService];
  if (!v6)
  {

    goto LABEL_8;
  }
  id v7 = v6;

  id v8 = [v7 getPDPInfo];
  if (!v8)
  {
LABEL_8:
    uint64_t v9 = 0;
    unint64_t v11 = 0xE000000000000000;
    goto LABEL_9;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)aPdpIp0;
    unint64_t v11 = unk_1002DA2D0;
    swift_bridgeObjectRetain();
  }
LABEL_9:
  uint64_t v13 = (void *)swift_unknownObjectUnownedLoadStrong();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  sub_10017319C(a2, v9, v11);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001BE1DC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  __chkstk_darwin(v6);
  uint64_t v32 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002D7B38 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = sub_1001A9488(v10, (uint64_t)qword_1002E31F0);
  id v12 = a2;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v30 = (void *)v11;
    double v36 = (void *)sub_1001AB860(0xD000000000000028, 0x800000010023DB50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2048;
    double v36 = [v12 taskIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s task.id=%ld", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!a3) {
      goto LABEL_10;
    }
  }
  else
  {

    if (!a3) {
      goto LABEL_10;
    }
  }
  swift_errorRetain();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v30 = a1;
    double v36 = (void *)sub_1001AB860(0xD000000000000028, 0x800000010023DB50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v19 = Error.localizedDescription.getter();
    double v36 = (void *)sub_1001AB860(v19, v20, aBlock);
    a1 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: terminated with error: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_10:
  sub_1001AE450();
  uint64_t v21 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v22 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  os_log_type_t v23 = (void *)swift_allocObject();
  v23[2] = v22;
  v23[3] = v12;
  v23[4] = a3;
  v23[5] = a1;
  aBlock[4] = (uint64_t)sub_1001BFEDC;
  aBlock[5] = (uint64_t)v23;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001E0068;
  aBlock[3] = (uint64_t)&unk_10028D798;
  uint64_t v24 = _Block_copy(aBlock);
  id v25 = v12;
  swift_errorRetain();
  swift_retain();
  id v26 = a1;
  static DispatchQoS.unspecified.getter();
  double v36 = _swiftEmptyArrayStorage;
  sub_1001C0074((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  unint64_t v27 = v32;
  uint64_t v28 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v28);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v33);
  swift_release();
  return swift_release();
}

uint64_t sub_1001BE864(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  type metadata accessor for SURLSessionRunningViewModel();
  sub_1001C0074((unint64_t *)&qword_1002DC2B0, (void (*)(uint64_t))type metadata accessor for SURLSessionRunningViewModel);
  ObservableObject<>.objectWillChange.getter();

  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v6 = (void *)swift_unknownObjectUnownedLoadStrong();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  sub_100173A68(a2, a3);

  uint64_t v7 = (void *)swift_unknownObjectUnownedLoadStrong();
  swift_retain();

  PassthroughSubject.send(_:)();
  return swift_release();
}

double sub_1001BEA58@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1001BEAD8(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1001C00BC(v2, v3);
  id v5 = v4;
  return static Published.subscript.setter();
}

uint64_t sub_1001BEB5C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1001BEBDC(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = v2;
  id v5 = v3;
  return static Published.subscript.setter();
}

unint64_t sub_1001BEC50(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100157064((uint64_t *)&unk_1002DAA00);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10015D5F4(v6, (uint64_t)&v15, &qword_1002D96A8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1001BED88(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100197FC0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001BED88(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1001BEE00(a1, a2, v4);
}

unint64_t sub_1001BEE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1001BEF48(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_1001BEFE8(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

id sub_1001BF0CC(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v30 = a2;
  uint64_t v31 = a5;
  uint64_t v29 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = sub_100157064(&qword_1002DA980);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_coreTelephonyService;
  *(void *)&v6[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_coreTelephonyService] = 0;
  uint64_t v14 = &v6[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel__viewState];
  long long v36 = xmmword_10026A780;
  uint64_t v15 = v6;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v12, v9);
  uint64_t v16 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_dataGenerator;
  type metadata accessor for SDataGenerator();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = [self defaultManager];
  *(void *)&v15[v16] = v17;
  *(void *)&v15[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_cancellable] = 0;
  uint64_t v18 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_subject;
  sub_100157064(&qword_1002DA988);
  swift_allocObject();
  *(void *)&v15[v18] = PassthroughSubject.init()();
  *(void *)&v15[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks] = &_swiftEmptyArrayStorage;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  id v34 = v29;
  uint64_t v35 = v30;
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v19 = &v15[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration];
  long long v20 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v19 + 2) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v19 + 3) = v20;
  *((_OWORD *)v19 + 4) = *(_OWORD *)(a3 + 64);
  *((_WORD *)v19 + 40) = *(_WORD *)(a3 + 80);
  long long v21 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)a3;
  *((_OWORD *)v19 + 1) = v21;
  *(void *)&v15[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue] = a4;
  id v22 = objc_allocWithZone((Class)type metadata accessor for STransferMetricsStore());
  id v23 = a4;
  id v24 = [v22 init];
  swift_beginAccess();
  id v34 = v24;
  Published.init(initialValue:)();
  swift_endAccess();
  id v25 = *(void **)&v6[v13];
  id v26 = v31;
  *(void *)&v6[v13] = v31;
  id v27 = v26;

  v33.receiver = v15;
  v33.super_class = ObjectType;
  return [super init];
}

uint64_t sub_1001BF3C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for STransferMetrics();
  if (*(void *)(a1 + *(int *)(v2 + 64)))
  {
    sub_10016CF9C();
    swift_errorRetain();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v3._char countAndFlagsBits = 8229;
    v3._object = (void *)0xE200000000000000;
    String.append(_:)(v3);
    swift_getErrorValue();
    v4._char countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    if (*(unsigned char *)(a1 + *(int *)(v2 + 68))) {
      return 0x6D6F632025303031;
    }
    sub_10016CF9C();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v6._char countAndFlagsBits = 37;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
  }
  return v7;
}

uint64_t sub_1001BF4E4(uint64_t a1, char a2)
{
  double v2 = (double)sub_10016E23C(a1, a2) * 0.0009765625;
  if (v2 < 1024.0 || (double v2 = v2 * 0.0009765625, v2 < 999.0))
  {
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_100267EF0;
    *(void *)(v3 + 56) = &type metadata for Double;
    *(void *)(v3 + 64) = &protocol witness table for Double;
    *(double *)(v3 + 32) = v2;
  }
  else
  {
    double v4 = v2 * 0.0009765625;
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100267EF0;
    *(void *)(v5 + 56) = &type metadata for Double;
    *(void *)(v5 + 64) = &protocol witness table for Double;
    if (v4 >= 999.0) {
      *(double *)(v5 + 32) = v4 * 0.0009765625;
    }
    else {
      *(double *)(v5 + 32) = v4;
    }
  }

  return String.init(format:_:)();
}

uint64_t sub_1001BF698(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001AE450();
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = v18;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = v19;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  id v15 = a1;
  static DispatchQoS.unspecified.getter();
  id v22 = _swiftEmptyArrayStorage;
  sub_1001C0074((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_1001BF998(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001AE450();
  uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  uint64_t v12[3] = a1;
  v12[4] = a2;
  aBlock[4] = sub_1001BFF50;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028D7E8;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  id v14 = a1;
  id v15 = a2;
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_1001C0074((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_10015D788((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  swift_release();
  return swift_release();
}

uint64_t sub_1001BFE54()
{
  swift_unknownObjectUnownedDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001BFE8C()
{
  swift_release();

  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001BFEDC()
{
  return sub_1001BE864(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001BFEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001BFEF8()
{
  return swift_release();
}

uint64_t sub_1001BFF08()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001BFF50()
{
  return sub_1001BDEE4(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001BFF60()
{
  return sub_1001BDEE4(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001BFF84()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001BFFC4()
{
  return sub_1001BDBA8(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001BFFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002DA850);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C0044@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001BD1DC(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_1001C0068(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001C0074(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001C00BC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001C00D4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001C0178(unint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1001BC2D8(a1, v1 + v4, v5);
}

id sub_1001C0240()
{
  id v0 = [objc_allocWithZone((Class)UICollectionViewFlowLayout) init];
  id v1 = [objc_allocWithZone((Class)UICollectionView) initWithFrame:v0 collectionViewLayout:0.0, 0.0, 0.0, 0.0];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self colorNamed:v2];

  [v1 setBackgroundColor:v3];
  type metadata accessor for SecondVCCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 registerClass:ObjCClassFromMetadata forCellWithReuseIdentifier:v5];

  type metadata accessor for CollectionHeaderSuplementaryCell();
  uint64_t v6 = swift_getObjCClassFromMetadata();
  uint64_t v7 = UICollectionElementKindSectionHeader;
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 registerClass:v6 forSupplementaryViewOfKind:v7 withReuseIdentifier:v8];

  return v1;
}

void sub_1001C03F8()
{
  v31.receiver = v0;
  v31.super_class = (Class)type metadata accessor for CoreTelephonyMetricDetails();
  [super viewDidLoad];
  id v1 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_collectionView];
  [v1 setDataSource:v0];
  [v1 setDelegate:v0];
  [v1 setAlwaysBounceVertical:1];
  id v2 = [v0 view];
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  id v3 = v2;
  [v2 addSubview:v1];

  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100268000;
  id v5 = [v1 topAnchor];
  id v6 = [v0 view];
  if (!v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v7 = v6;
  id v8 = [v6 safeAreaLayoutGuide];

  id v9 = [v8 topAnchor];
  id v10 = [v5 constraintEqualToAnchor:v9];

  *(void *)(v4 + 32) = v10;
  id v11 = [v1 leadingAnchor];
  id v12 = [v0 view];
  if (!v12)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v13 = v12;
  id v14 = [v12 safeAreaLayoutGuide];

  id v15 = [v14 leadingAnchor];
  id v16 = [v11 constraintEqualToAnchor:v15];

  *(void *)(v4 + 40) = v16;
  id v17 = [v1 trailingAnchor];
  id v18 = [v0 view];
  if (!v18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v19 = v18;
  id v20 = [v18 safeAreaLayoutGuide];

  id v21 = [v20 trailingAnchor];
  id v22 = [v17 constraintEqualToAnchor:v21];

  *(void *)(v4 + 48) = v22;
  id v23 = [v1 bottomAnchor];
  id v24 = [v0 view];
  if (v24)
  {
    id v25 = v24;
    id v26 = self;
    id v27 = [v25 safeAreaLayoutGuide];

    id v28 = [v27 bottomAnchor];
    id v29 = [v23 constraintEqualToAnchor:v28];

    *(void *)(v4 + 56) = v29;
    specialized Array._endMutation()();
    sub_10015DDE4();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v26 activateConstraints:isa];

    return;
  }
LABEL_11:
  __break(1u);
}

id sub_1001C0834(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_bandItems] = _swiftEmptyArrayStorage;
  id v6 = &v3[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_sectionTitle];
  *(void *)id v6 = 0;
  *((void *)v6 + 1) = 0xE000000000000000;
  uint64_t v7 = OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_collectionView;
  id v8 = v3;
  *(void *)&v3[v7] = sub_1001C0240();

  if (a2)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v9 = 0;
  }
  v12.receiver = v8;
  v12.super_class = (Class)type metadata accessor for CoreTelephonyMetricDetails();
  [super initWithNibName:v9 bundle:a3];

  return v10;
}

id sub_1001C096C(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_bandItems] = _swiftEmptyArrayStorage;
  id v3 = &v1[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_sectionTitle];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0xE000000000000000;
  uint64_t v4 = OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_collectionView;
  id v5 = v1;
  *(void *)&v1[v4] = sub_1001C0240();

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for CoreTelephonyMetricDetails();
  [super initWithCoder:a1];

  return v6;
}

void sub_1001C0A30()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_collectionView);
}

id sub_1001C0A84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreTelephonyMetricDetails();
  return [super dealloc];
}

uint64_t type metadata accessor for CoreTelephonyMetricDetails()
{
  return self;
}

unint64_t sub_1001C0B58(void *a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v6 = [a1 dequeueReusableCellWithReuseIdentifier:v4 forIndexPath:isa];

  type metadata accessor for SecondVCCell();
  uint64_t v7 = swift_dynamicCastClass();
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = sub_10017A3DC();
    unint64_t result = IndexPath.item.getter();
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v11 = result;
      uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_bandItems);
      if (result < *(void *)(v12 + 16))
      {
        uint64_t v13 = type metadata accessor for Metric(0);
        id v14 = objc_retain(*(id *)(v12
                                + ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80))
                                + *(void *)(*(void *)(v13 - 8) + 72) * v11
                                + *(int *)(v13 + 36)));
        id v15 = [v14 description];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v9 setText:v16];

        id v17 = sub_10017A458();
        NSString v18 = String._bridgeToObjectiveC()();
        [v17 setText:v18];

        id v19 = sub_10017A5BC();
        id v20 = sub_10017A3DC();
        id v21 = [v20 text];

        if (v21)
        {

          id v22 = sub_10017A3DC();
          id v23 = [v22 text];

          if (v23)
          {
            uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v26 = v25;

            if (v24 || v26 != 0xE000000000000000)
            {
              char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              char v27 = 1;
            }
          }
          else
          {
            char v27 = 0;
          }
        }
        else
        {
          char v27 = 1;
        }
        [v19 setHidden:v27 & 1];

        return v8;
      }
    }
    __break(1u);
    return result;
  }

  id v28 = objc_allocWithZone((Class)UICollectionViewCell);

  return (unint64_t)[v28 init];
}

id sub_1001C0F80(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)UICollectionReusableView) init];
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v7 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      return v6;
    }
  }
  IndexPath.section.getter();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v13 = [a1 dequeueReusableSupplementaryViewOfKind:v10 withReuseIdentifier:v11 forIndexPath:isa];

  type metadata accessor for CollectionHeaderSuplementaryCell();
  uint64_t v14 = swift_dynamicCastClass();
  if (v14)
  {
    id v15 = (id)v14;
    id v16 = sub_100177378();
    swift_bridgeObjectRetain();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 setText:v17];
  }
  else
  {

    id v15 = [objc_allocWithZone((Class)UICollectionViewCell) init];
  }

  return v15;
}

uint64_t sub_1001C13F8(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

id sub_1001C144C(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_animationDuration] = 0x3FE0000000000000;
  NSString v10 = &v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_cellId];
  strcpy(&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_cellId], "MenuBarCellId");
  *((_WORD *)v10 + 7) = -4864;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_menuImageNames] = &off_10028A938;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_numberOfSegments] = 2;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalViewBarHeight] = 0x4008000000000000;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_segmentWidthMultiplier] = 0x4000000000000000;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar____lazy_storage___collectionView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalBarLeftAnchorConstraint] = 0;
  v12.receiver = v4;
  v12.super_class = ObjectType;
  return [super initWithFrame:a1, a2, a3, a4];
}

uint64_t type metadata accessor for MenuBar()
{
  return self;
}

unint64_t sub_1001C1674(void *a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v5 = [a1 dequeueReusableCellWithReuseIdentifier:v3 forIndexPath:isa];

  type metadata accessor for MenuCell();
  uint64_t v6 = swift_dynamicCastClass();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    id v8 = *(id *)(v6 + OBJC_IVAR____TtC13FTMInternal_48MenuCell_menuIconImageView);
    unint64_t result = IndexPath.item.getter();
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(void *)(*(void *)(v1 + OBJC_IVAR____TtC13FTMInternal_47MenuBar_menuImageNames) + 16))
    {
      swift_bridgeObjectRetain();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v11 = [self systemImageNamed:v10];

      [v8 setImage:v11];
      id v12 = v5;
      NSString v13 = String._bridgeToObjectiveC()();
      id v14 = [self colorNamed:v13];

      [v7 setTintColor:v14];
      return (unint64_t)v7;
    }
    __break(1u);
  }
  else
  {

    id v15 = objc_allocWithZone((Class)UICollectionViewCell);
    return (unint64_t)[v15 init];
  }
  return result;
}

uint64_t sub_1001C1988(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = a2 + OBJC_IVAR____TtC13FTMInternal_47MenuBar_delegate;
    unint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v5 = IndexPath.item.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v5, ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

id sub_1001C1C70()
{
  id v0 = [objc_allocWithZone((Class)UIImageView) init];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self systemImageNamed:v1];

  [v0 setImage:v2];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self colorNamed:v3];

  [v0 setTintColor:v4];
  return v0;
}

void sub_1001C1E1C()
{
  NSString v1 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_48MenuCell_menuIconImageView];
  [v0 isSelected];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self colorNamed:v2];

  [v1 setTintColor:v3];
}

void sub_1001C2040()
{
  NSString v1 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_48MenuCell_menuIconImageView];
  [v0 addSubview:v1];
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  NSString v2 = self;
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100269400;
  id v4 = [v1 heightAnchor];
  double v5 = *(double *)&v0[OBJC_IVAR____TtC13FTMInternal_48MenuCell_menuCellSize];
  id v6 = [v4 constraintEqualToConstant:v5];

  *(void *)(v3 + 32) = v6;
  id v7 = [v1 widthAnchor];
  id v8 = [v7 constraintEqualToConstant:v5];

  *(void *)(v3 + 40) = v8;
  id v9 = [v1 centerXAnchor];
  id v10 = [v0 centerXAnchor];
  id v11 = [v9 constraintEqualToAnchor:v10];

  *(void *)(v3 + 48) = v11;
  specialized Array._endMutation()();
  sub_10015DDE4();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

id sub_1001C2230()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MenuCell();
  return [super dealloc];
}

uint64_t type metadata accessor for MenuCell()
{
  return self;
}

void sub_1001C2298()
{
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_animationDuration] = 0x3FE0000000000000;
  NSString v1 = &v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_cellId];
  strcpy(&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_cellId], "MenuBarCellId");
  *((_WORD *)v1 + 7) = -4864;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_menuImageNames] = &off_10028A978;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_numberOfSegments] = 2;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalViewBarHeight] = 0x4008000000000000;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_segmentWidthMultiplier] = 0x4000000000000000;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar____lazy_storage___collectionView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalBarLeftAnchorConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1001C23AC(uint64_t a1)
{
  objc_super v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = IndexPath.item.getter();
  [v2 frame];
  double Width = CGRectGetWidth(v25);
  id v9 = *(void **)&v2[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalBarLeftAnchorConstraint];
  if (v9) {
    [v9 setConstant:Width * (double)v7 / *(double *)&v2[OBJC_IVAR____TtC13FTMInternal_47MenuBar_segmentWidthMultiplier]];
  }
  id v18 = self;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v2;
  id v23 = sub_1001C26A4;
  uint64_t v24 = v10;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  id v21 = (uint64_t (*)(uint64_t, uint64_t))sub_1001E0068;
  id v22 = &unk_10028D9A0;
  id v11 = _Block_copy(&aBlock);
  id v12 = v2;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v14 + v13, (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  id v23 = sub_1001C2798;
  uint64_t v24 = v14;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  id v21 = sub_1001C13F8;
  id v22 = &unk_10028D9F0;
  id v15 = _Block_copy(&aBlock);
  id v16 = v12;
  swift_release();
  [v18 animateWithDuration:0x20000 delay:v11 usingSpringWithDamping:v15 initialSpringVelocity:0.5 options:0.0 animations:1.0 completion:1.0];
  _Block_release(v15);
  _Block_release(v11);
}

uint64_t sub_1001C266C()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1001C26A4()
{
  return [*(id *)(v0 + 16) layoutIfNeeded];
}

uint64_t sub_1001C26B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001C26C4()
{
  return swift_release();
}

uint64_t sub_1001C26CC()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001C2798(uint64_t a1)
{
  type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v1 + 16);

  return sub_1001C1988(a1, v3);
}

unint64_t sub_1001C2818()
{
  unint64_t result = qword_1002DAC88;
  if (!qword_1002DAC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DAC88);
  }
  return result;
}

unint64_t sub_1001C286C(char a1)
{
  unint64_t result = 0x63696E756D6D6F43;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E696D6165727453;
      break;
    case 2:
      unint64_t result = 0x7373656E69737542;
      break;
    case 3:
      unint64_t result = 0x72656874616557;
      break;
    case 4:
      unint64_t result = 0x656974696C697455;
      break;
    case 5:
      unint64_t result = 0x6C6576617254;
      break;
    case 6:
      unint64_t result = 0x7374726F7053;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0x636E657265666552;
      break;
    case 9:
      unint64_t result = 0x69746375646F7250;
      break;
    case 10:
      unint64_t result = 0x2026206F746F6850;
      break;
    case 11:
      unint64_t result = 1937204558;
      break;
    case 12:
      unint64_t result = 0x697461676976614ELL;
      break;
    case 13:
      unint64_t result = 0x636973754DLL;
      break;
    case 14:
      unint64_t result = 0x6C7974736566694CLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000014;
      break;
    case 16:
      unint64_t result = 0x73656D6147;
      break;
    case 17:
      unint64_t result = 0x65636E616E6946;
      break;
    case 18:
      unint64_t result = 0x6961747265746E45;
      break;
    case 19:
      unint64_t result = 0x6F69746163756445;
      break;
    case 20:
      unint64_t result = 0x736B6F6F42;
      break;
    case 21:
      unint64_t result = 7104878;
      break;
    case 22:
      unint64_t result = 0x6C61636964654DLL;
      break;
    case 23:
      unint64_t result = 0x6E776F6E6B6E55;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001C2B60@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001C2FB0(*a1);
  *a2 = result;
  return result;
}

void sub_1001C2B8C(void *a1@<X8>)
{
  *a1 = qword_10026ABB8[*v1];
}

void sub_1001C2BA4(void *a1@<X8>)
{
  *a1 = &off_10028A9B8;
}

unint64_t sub_1001C2BB4()
{
  return sub_1001C286C(*v0);
}

BOOL sub_1001C2BBC(char *a1, char *a2)
{
  return qword_10026ABB8[*a1] == qword_10026ABB8[*a2];
}

uint64_t sub_1001C2BE0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001C2C40()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_1001C2C90()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10026ABB8[v1]);
  return Hasher._finalize()();
}

void sub_1001C2CE0()
{
  Hasher._combine(_:)(qword_10026ABB8[*v0]);
}

Swift::Int sub_1001C2D18()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10026ABB8[v1]);
  return Hasher._finalize()();
}

unint64_t sub_1001C2D6C()
{
  unint64_t result = qword_1002DAC90;
  if (!qword_1002DAC90)
  {
    sub_100157104(&qword_1002D7EC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DAC90);
  }
  return result;
}

unint64_t sub_1001C2DC8()
{
  unint64_t result = qword_1002DAC98;
  if (!qword_1002DAC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DAC98);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SPApplicationCategories(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE9) {
    goto LABEL_17;
  }
  if (a2 + 23 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 23) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 23;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 23;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 23;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x18;
  int v8 = v6 - 24;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SPApplicationCategories(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE8)
  {
    unsigned int v6 = ((a2 - 233) >> 8) + 1;
    *unint64_t result = a2 + 23;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C2F78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 23;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPApplicationCategories()
{
  return &type metadata for SPApplicationCategories;
}

uint64_t sub_1001C2FB0(uint64_t a1)
{
  switch(a1)
  {
    case 6000:
      uint64_t result = 2;
      break;
    case 6001:
      uint64_t result = 3;
      break;
    case 6002:
      uint64_t result = 4;
      break;
    case 6003:
      uint64_t result = 5;
      break;
    case 6004:
      uint64_t result = 6;
      break;
    case 6005:
      uint64_t result = 7;
      break;
    case 6006:
      uint64_t result = 8;
      break;
    case 6007:
      uint64_t result = 9;
      break;
    case 6008:
      uint64_t result = 10;
      break;
    case 6009:
      uint64_t result = 11;
      break;
    case 6010:
      uint64_t result = 12;
      break;
    case 6011:
      uint64_t result = 13;
      break;
    case 6012:
      uint64_t result = 14;
      break;
    case 6013:
      uint64_t result = 15;
      break;
    case 6014:
      uint64_t result = 16;
      break;
    case 6015:
      uint64_t result = 17;
      break;
    case 6016:
      uint64_t result = 18;
      break;
    case 6017:
      uint64_t result = 19;
      break;
    case 6018:
      uint64_t result = 20;
      break;
    case 6019:
      uint64_t result = 21;
      break;
    case 6020:
      uint64_t result = 22;
      break;
    default:
      if (a1 == 9001) {
        unsigned int v2 = 1;
      }
      else {
        unsigned int v2 = 23;
      }
      if (a1 == 9000) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v2;
      }
      break;
  }
  return result;
}

uint64_t *sub_1001C3100(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    id v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymbolRenderingMode();
    id v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    id v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1001C3210(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void *sub_1001C32A0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  id v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1001C3360(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1001C3430(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1001C34C8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001C3578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C358C);
}

uint64_t sub_1001C358C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SymbolRenderingMode();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001C363C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C3650);
}

uint64_t sub_1001C3650(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymbolRenderingMode();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SSFImage()
{
  uint64_t result = qword_1002DACF8;
  if (!qword_1002DACF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001C3744()
{
  uint64_t result = type metadata accessor for SymbolRenderingMode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001C37E4()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1001C3800@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100157064(&qword_1002DAD38);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SSFImage();
  uint64_t v7 = (uint64_t *)(v1 + *(int *)(v6 + 24));
  uint64_t v8 = v7[1];
  if (v8)
  {
    uint64_t v9 = *v7;
    uint64_t v10 = static HorizontalAlignment.center.getter();
    sub_1001C3A20(v1, v9, v8, (uint64_t)v27);
    uint64_t v22 = v10;
    long long v23 = xmmword_10026A780;
    *(void *)&v24[0] = *(void *)v27;
    *(_OWORD *)((char *)v24 + 8) = *(_OWORD *)&v27[8];
    *((void *)&v24[1] + 1) = v27[24];
    uint64_t v25 = v28;
    char v26 = 0;
  }
  else
  {
    uint64_t v11 = v6;
    swift_bridgeObjectRetain();
    Image.init(systemName:)();
    uint64_t v12 = v1 + *(int *)(v11 + 20);
    uint64_t v13 = type metadata accessor for SymbolRenderingMode();
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
    uint64_t v15 = Image.symbolRenderingMode(_:)();
    swift_release();
    sub_1001C3C04((uint64_t)v5);
    uint64_t v22 = v15;
    long long v23 = 0u;
    memset(v24, 0, sizeof(v24));
    uint64_t v25 = 0;
    char v26 = 1;
  }
  sub_100157064(&qword_1002DAD40);
  sub_1001C3C64();
  _ConditionalContent<>.init(storage:)();
  double result = *(double *)v27;
  long long v17 = *(_OWORD *)&v27[16];
  long long v18 = v28;
  long long v19 = v29;
  char v20 = v30;
  *(_OWORD *)a1 = *(_OWORD *)v27;
  *(_OWORD *)(a1 + 16) = v17;
  *(_OWORD *)(a1 + 32) = v18;
  *(_OWORD *)(a1 + 48) = v19;
  *(unsigned char *)(a1 + 64) = v20;
  return result;
}

uint64_t sub_1001C3A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100157064(&qword_1002DAD38);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Image.init(systemName:)();
  uint64_t v11 = a1 + *(int *)(type metadata accessor for SSFImage() + 20);
  uint64_t v12 = type metadata accessor for SymbolRenderingMode();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  uint64_t v14 = Image.symbolRenderingMode(_:)();
  swift_release();
  sub_1001C3C04((uint64_t)v10);
  v22[0] = a2;
  v22[1] = a3;
  sub_1001571E0();
  swift_bridgeObjectRetain();
  uint64_t v15 = Text.init<A>(_:)();
  uint64_t v17 = v16;
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v15;
  char v19 = v18 & 1;
  *(void *)(a4 + 16) = v16;
  *(unsigned char *)(a4 + 24) = v18 & 1;
  *(void *)(a4 + 32) = v20;
  swift_retain();
  sub_10015D6B4(v15, v17, v19);
  swift_bridgeObjectRetain();
  sub_10015D6C4(v15, v17, v19);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C3C04(uint64_t a1)
{
  uint64_t v2 = sub_100157064(&qword_1002DAD38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001C3C64()
{
  unint64_t result = qword_1002DAD48;
  if (!qword_1002DAD48)
  {
    sub_100157104(&qword_1002DAD40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DAD48);
  }
  return result;
}

unint64_t sub_1001C3CC4()
{
  unint64_t result = qword_1002DAD50;
  if (!qword_1002DAD50)
  {
    sub_100157104(&qword_1002DAD58);
    sub_1001C3C64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DAD50);
  }
  return result;
}

uint64_t sub_1001C3D40(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C3E08(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C3E6C()
{
  int64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  int64_t v3 = v2;
  if (!v1)
  {
    int64_t v6 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      goto LABEL_26;
    }
    int64_t v7 = (unint64_t)(v0[2] + 64) >> 6;
    if (v6 < v7)
    {
      uint64_t v8 = v0[1];
      uint64_t v9 = *(void *)(v8 + 8 * v6);
      if (v9)
      {
LABEL_8:
        uint64_t v4 = (v9 - 1) & v9;
        int64_t v3 = v6;
        goto LABEL_3;
      }
      int64_t v10 = v2 + 2;
      int64_t v3 = v2 + 1;
      if (v2 + 2 < v7)
      {
        uint64_t v9 = *(void *)(v8 + 8 * v10);
        if (v9)
        {
LABEL_11:
          int64_t v6 = v10;
          goto LABEL_8;
        }
        int64_t v3 = v2 + 2;
        if (v2 + 3 < v7)
        {
          uint64_t v9 = *(void *)(v8 + 8 * (v2 + 3));
          if (v9)
          {
            int64_t v6 = v2 + 3;
            goto LABEL_8;
          }
          int64_t v10 = v2 + 4;
          int64_t v3 = v2 + 3;
          if (v2 + 4 < v7)
          {
            uint64_t v9 = *(void *)(v8 + 8 * v10);
            if (v9) {
              goto LABEL_11;
            }
            int64_t v6 = v2 + 5;
            int64_t v3 = v2 + 4;
            if (v2 + 5 < v7)
            {
              uint64_t v9 = *(void *)(v8 + 8 * v6);
              if (v9) {
                goto LABEL_8;
              }
              int64_t v3 = v7 - 1;
              int64_t v11 = v2 + 6;
              while (v7 != v11)
              {
                uint64_t v9 = *(void *)(v8 + 8 * v11++);
                if (v9)
                {
                  int64_t v6 = v11 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v5 = 0;
    v0[3] = v3;
    v0[4] = 0;
    return v5;
  }
  uint64_t v4 = (v1 - 1) & v1;
LABEL_3:
  v0[3] = v3;
  v0[4] = v4;
  uint64_t v5 = v0[5];
  if (!__OFADD__(v5, 1))
  {
    v0[5] = v5 + 1;
    swift_bridgeObjectRetain();
    return v5;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void sub_1001C3FDC()
{
  qword_1002E3258 = (uint64_t)&off_10028A9E0;
}

char *sub_1001C3FF0(void *a1, void *a2)
{
  uint64_t v5 = &v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_metricIDKey];
  strcpy(&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_metricIDKey], "kKeyMetricID");
  v5[13] = 0;
  *((_WORD *)v5 + 7) = -5120;
  int64_t v6 = &v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey];
  *(void *)int64_t v6 = 0x6C79615079654B6BLL;
  *((void *)v6 + 1) = 0xEB0000000064616FLL;
  int64_t v7 = &v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_profileIDKey];
  strcpy(&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_profileIDKey], "kKeyProfileID");
  *((_WORD *)v7 + 7) = -4864;
  *(void *)&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_edgeCaseIceMetrics] = &off_100288A98;
  uint64_t v8 = OBJC_IVAR____TtC13FTMInternal_413MetricService_dlbwlookup;
  *(void *)&v2[v8] = sub_1001EF68C((uint64_t)&off_100288B38);
  *(void *)&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_newMetricHexIds] = &off_100288BB8;
  *(void *)&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_persistanceStore] = a1;
  *(void *)&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_aBMShared] = a2;
  id v9 = a1;
  id v10 = a2;
  [v10 listen];
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for MetricService();
  int64_t v11 = [(char *)[super init]];
  BOOL v12 = *(void **)&v11[OBJC_IVAR____TtC13FTMInternal_413MetricService_aBMShared];
  uint64_t v13 = v11;
  [v12 setDelegate:v13];
  if (qword_1002D7AB0 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return v13;
}

void sub_1001C41D8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v91 = type metadata accessor for Date();
  uint64_t v4 = *(void **)(v91 - 8);
  uint64_t v5 = __chkstk_darwin(v91);
  int64_t v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v78 - v8;
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC13FTMInternal_413MetricService_metricIDKey);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC13FTMInternal_413MetricService_metricIDKey + 8);
  *(void *)&long long v110 = v10;
  *((void *)&v110 + 1) = v11;
  swift_bridgeObjectRetain_n();
  uint64_t v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  uint64_t v92 = a1;
  id v13 = [a1 __swift_objectForKeyedSubscript:v12];
  swift_unknownObjectRelease();
  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v110 = 0u;
    long long v111 = 0u;
  }
  sub_10015D474((uint64_t)&v110, (uint64_t)&v105, (uint64_t *)&unk_1002D9680);
  if (!v106._object)
  {
    swift_bridgeObjectRelease();
    sub_10015D658((uint64_t)&v105, (uint64_t *)&unk_1002D9680);
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    if (qword_1002D7A88 != -1) {
      goto LABEL_77;
    }
    goto LABEL_15;
  }
  v94._object = v4;
  uint64_t v14 = v101;
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_100167598(0, (unint64_t *)&unk_1002DAE40);
  uint64_t v16 = NSString.init(stringLiteral:)();
  uint64_t v90 = sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v17 = swift_allocObject();
  long long v88 = xmmword_100267EF0;
  *(_OWORD *)(v17 + 16) = xmmword_100267EF0;
  *(void *)(v17 + 56) = &type metadata for Int;
  *(void *)(v17 + 64) = &protocol witness table for Int;
  *(void *)(v17 + 32) = v14;
  char v18 = NSString.init(format:_:)();

  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  int v19 = *(unsigned __int8 *)(qword_1002E31C8 + 24);
  id v84 = v18;
  uint64_t v85 = v2;
  uint64_t v20 = v9;
  if (v19 == 1)
  {
    if (qword_1002D7A88 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100269B50;
    *(void *)(v21 + 56) = v15;
    *(void *)(v21 + 64) = sub_100196D14(&qword_1002D9660, (unint64_t *)&unk_1002DAE40);
    id v22 = v84;
    *(void *)(v21 + 32) = v84;
    *(void *)(v21 + 96) = sub_100167598(0, &qword_1002DAEC8);
    *(void *)(v21 + 104) = sub_100196D14(&qword_1002DAED0, &qword_1002DAEC8);
    long long v23 = v92;
    *(void *)(v21 + 72) = v92;
    id v24 = v22;
    id v25 = v23;
    os_log(_:dso:log:type:_:)();
    uint64_t v2 = v85;
  }
  else
  {
    if (qword_1002D7A88 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v88;
    *(void *)(v26 + 56) = v15;
    *(void *)(v26 + 64) = sub_100196D14(&qword_1002D9660, (unint64_t *)&unk_1002DAE40);
    id v27 = v84;
    *(void *)(v26 + 32) = v84;
    id v28 = v27;
    os_log(_:dso:log:type:_:)();
  }
  swift_bridgeObjectRelease();
  long long v29 = &unk_100289000;
  uint64_t v89 = 82;
  uint64_t v30 = (uint64_t)v20;
  uint64_t v81 = v7;
  unint64_t v31 = 0;
  uint64_t v83 = (void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
  uint64_t v79 = OBJC_IVAR____TtC13FTMInternal_413MetricService_edgeCaseIceMetrics;
  uint64_t v86 = (void (**)(uint64_t, uint64_t))((char *)v94._object + 8);
  uint64_t v82 = (char *)&type metadata for Any + 8;
  uint64_t v80 = 0x800000010023E430;
  uint64_t v32 = 82;
  uint64_t v87 = v30;
  while (1)
  {
    if (v31 >= v29[60])
    {
      __break(1u);
      goto LABEL_76;
    }
    uint64_t v35 = &off_1002891D0 + 9 * v31;
    long long v36 = *((_OWORD *)v35 + 5);
    long long v107 = *((_OWORD *)v35 + 4);
    long long v108 = v36;
    uint64_t v109 = v35[12];
    Swift::String v37 = (Swift::String)*((_OWORD *)v35 + 3);
    long long v105 = *((_OWORD *)v35 + 2);
    Swift::String v106 = v37;
    if ((void)v107 != v14) {
      goto LABEL_21;
    }
    uint64_t v38 = *((void *)&v105 + 1);
    Swift::String v94 = v106;
    unint64_t v93 = v105;
    sub_1001CBEC8((uint64_t)&v105);
    if (qword_1002D7B50 != -1) {
      swift_once();
    }
    uint64_t v39 = *(void *)(qword_1002E3258 + 16);
    if (v39)
    {
      if (*(void *)(qword_1002E3258 + 32) == v14) {
        goto LABEL_28;
      }
      if (v39 != 1)
      {
        if (*(void *)(qword_1002E3258 + 40) == v14)
        {
LABEL_28:
          uint64_t v40 = sub_1001C7BFC(v14, v92);
          if (!v40)
          {

            sub_1001CBF20((uint64_t)&v105);
            return;
          }
          uint64_t v41 = v40;
          sub_1001C9774(v40, v30);
          unint64_t v98 = sub_1001E02AC((uint64_t)_swiftEmptyArrayStorage);
          sub_1001CAE54(v41, (uint64_t *)&v98);
          swift_bridgeObjectRelease();
          sub_1001C993C(v98, &v105, v30);
          swift_bridgeObjectRelease();
          if (*(unsigned char *)(qword_1002E31C8 + 152))
          {
            (*v86)(v30, v91);
            sub_1001CBF20((uint64_t)&v105);
          }
          else
          {
            int v33 = *(_DWORD *)(qword_1002E31C8 + 148);
            swift_bridgeObjectRetain();
            object = v94._object;
            swift_bridgeObjectRetain();
            sub_1001CBF20((uint64_t)&v105);
            *(void *)&long long v110 = v93;
            *((void *)&v110 + 1) = v38;
            *(void *)&long long v111 = v94._countAndFlagsBits;
            *((void *)&v111 + 1) = object;
            int v112 = v33;
            sub_1001CB944(&v110);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*v86)(v30, v91);
          }
          goto LABEL_21;
        }
        if (v39 != 2) {
          break;
        }
      }
    }
LABEL_32:
    uint64_t v43 = *((void *)&v107 + 1);
    uint64_t v42 = v108;
    uint64_t v44 = (NSString *)String._bridgeToObjectiveC()();
    Class v45 = NSClassFromString(v44);

    if (!v45 || (swift_getObjCClassMetadata(), sub_100167598(0, &qword_1002DAEB8), !swift_dynamicCastMetatype()))
    {
LABEL_56:
      sub_1001CBF20((uint64_t)&v105);
      if (qword_1002D7AB0 != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      uint64_t v60 = swift_allocObject();
      *(_OWORD *)(v60 + 16) = v88;
      *(void *)(v60 + 56) = &type metadata for Int;
      *(void *)(v60 + 64) = &protocol witness table for Int;
      *(void *)(v60 + 32) = v14;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      uint64_t v30 = v87;
      long long v29 = (void *)&unk_100289000;
      uint64_t v32 = v89;
      goto LABEL_21;
    }
    uint64_t v46 = v83[1];
    v97[0] = *v83;
    v97[1] = v46;
    swift_bridgeObjectRetain_n();
    id v47 = [v92 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v47)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v97, 0, 32);
    }
    sub_10015D474((uint64_t)v97, (uint64_t)&v98, (uint64_t *)&unk_1002D9680);
    uint64_t v50 = v85;
    if (v100)
    {
      if (swift_dynamicCast())
      {
        uint64_t v51 = v95;
        unint64_t v52 = v96;
        swift_bridgeObjectRelease();
        id v53 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        v54.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v55 = v51;
        uint64_t v50 = v85;
        sub_100156FB8(v55, v52);
        goto LABEL_50;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10015D658((uint64_t)&v98, (uint64_t *)&unk_1002D9680);
    }
    id v53 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    v54.super.Class isa = 0;
LABEL_50:
    id v56 = [v53 initWithData:v54.super.isa];

    if (!v56) {
      goto LABEL_56;
    }
    id v57 = [v56 dictionaryRepresentation];

    if (!v57) {
      goto LABEL_56;
    }
    uint64_t v58 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(unsigned char *)(qword_1002E31C8 + 24) == 1)
    {
      if (qword_1002D7AB0 != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = v88;
      *(void *)(v59 + 56) = &type metadata for String;
      *(void *)(v59 + 64) = sub_100181588();
      *(void *)(v59 + 32) = v43;
      *(void *)(v59 + 40) = v42;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      uint64_t v50 = v85;
    }
    else
    {
      if (qword_1002D7AB0 != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
    }
    uint64_t v32 = v89;
    if (!*(void *)(v58 + 16))
    {
      swift_bridgeObjectRelease();
      sub_1001CBF20((uint64_t)&v105);
      if (qword_1002D7AB0 != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = v88;
      unint64_t v98 = v14;
      LOBYTE(v99) = 0;
      sub_100157064(&qword_1002DAEC0);
      uint64_t v75 = String.init<A>(describing:)();
      uint64_t v77 = v76;
      *(void *)(v74 + 56) = &type metadata for String;
      *(void *)(v74 + 64) = sub_100181588();
      *(void *)(v74 + 32) = v75;
      *(void *)(v74 + 40) = v77;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
LABEL_74:

      return;
    }
    unint64_t v98 = v93;
    uint64_t v99 = v38;
    swift_bridgeObjectRetain();
    String.append(_:)(v94);
    sub_10018C780(0xD00000000000002BLL, v80, v98, v99);
    swift_bridgeObjectRelease();
    unint64_t v98 = sub_1001E02AC((uint64_t)_swiftEmptyArrayStorage);
    sub_1001CAE54(v58, (uint64_t *)&v98);
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1001CBADC((uint64_t)&v98, v61, v62);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(qword_1002E31C8 + 28) == 1)
    {
      uint64_t v63 = *(void **)(v50 + v79);
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      LOBYTE(v63) = sub_1001C3D40(v64, v65, v63);
      swift_bridgeObjectRelease();
      if (v63)
      {
        unint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v68 = v67;
        BOOL v69 = (void *)v98;
        swift_bridgeObjectRetain();
        uint64_t v70 = sub_1001C5024(v66, v68, v69);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        unint64_t v98 = (unint64_t)v70;
      }
    }
    uint64_t v71 = (uint64_t)v81;
    sub_1001C9774(v58, (uint64_t)v81);
    swift_bridgeObjectRelease();
    sub_1001C993C(v98, &v105, v71);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(qword_1002E31C8 + 152) == 1)
    {
      (*v86)(v71, v91);
      sub_1001CBF20((uint64_t)&v105);
    }
    else
    {
      int v72 = *(_DWORD *)(qword_1002E31C8 + 148);
      swift_bridgeObjectRetain();
      uint64_t v73 = v94._object;
      swift_bridgeObjectRetain();
      sub_1001CBF20((uint64_t)&v105);
      *(void *)&long long v101 = v93;
      *((void *)&v101 + 1) = v38;
      uint64_t countAndFlagsBits = v94._countAndFlagsBits;
      uint64_t v103 = v73;
      int v104 = v72;
      sub_1001CB944(&v101);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v86)(v71, v91);
    }
    uint64_t v30 = v87;
    long long v29 = (void *)&unk_100289000;
LABEL_21:
    if (++v31 == v32) {
      goto LABEL_74;
    }
  }
  uint64_t v48 = 6;
  while (1)
  {
    uint64_t v49 = v48 - 3;
    if (__OFADD__(v48 - 4, 1)) {
      break;
    }
    if (*(void *)(qword_1002E3258 + 8 * v48) == v14) {
      goto LABEL_28;
    }
    ++v48;
    if (v49 == v39) {
      goto LABEL_32;
    }
  }
LABEL_76:
  __break(1u);
LABEL_77:
  swift_once();
LABEL_15:
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
}

void *sub_1001C5024(unint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  id v9 = (void *)sub_1001E02AC((uint64_t)_swiftEmptyArrayStorage);
  if (qword_1002D7AB0 != -1) {
    goto LABEL_307;
  }
  while (1)
  {
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100267EF0;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_100181588();
    *(void *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    if (a1 == 0x443035444333 && a2 == 0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      *(void *)&long long v210 = 0x635F726572616562;
      *((void *)&v210 + 1) = 0xEF73747865746E6FLL;
      AnyHashable.init<A>(_:)();
      if (a3[2] && (unint64_t v11 = sub_1001EB8E0((uint64_t)&v207), (v12 & 1) != 0))
      {
        sub_100196D64(a3[7] + 32 * v11, (uint64_t)&v205);
      }
      else
      {
        long long v205 = 0u;
        v206[0] = 0u;
      }
      sub_10019816C((uint64_t)&v207);
      if (!*((void *)&v206[0] + 1))
      {
        sub_10015D658((uint64_t)&v205, (uint64_t *)&unk_1002D9680);
        goto LABEL_207;
      }
      sub_100157064(&qword_1002DAE88);
      if (swift_dynamicCast())
      {
        uint64_t v13 = v210;
        sub_100157064((uint64_t *)&unk_1002DAEA8);
        a2 = swift_allocObject();
        *(_OWORD *)(a2 + 16) = xmmword_100267EF0;
        uint64_t v14 = sub_100195900(0);
        *(void *)(a2 + 32) = sub_1001E03F0((uint64_t)v14);
        *(void *)&long long v207 = a2;
        uint64_t v15 = sub_1001E0060(v13);
        if (v15 < 0) {
          goto LABEL_341;
        }
        uint64_t v16 = v15;
        if (v15)
        {
          sub_1001CADAC();
          sub_1001CADAC();
          uint64_t v17 = 0;
          do
          {
            uint64_t v18 = *(void *)(v13 + 8 * v17 + 32);
            swift_bridgeObjectRetain();
            sub_1001CADAC();
            a2 = v207;
            unint64_t v20 = *(void *)(v207 + 16);
            unint64_t v19 = *(void *)(v207 + 24);
            if (v20 >= v19 >> 1)
            {
              a2 = (unint64_t)sub_1001EB1C0((void *)(v19 > 1), v20 + 1, 1, (void *)v207);
              *(void *)&long long v207 = a2;
            }
            ++v17;
            *(void *)(a2 + 16) = v20 + 1;
            *(void *)(a2 + 8 * v20 + 32) = v18;
          }
          while (v16 != v17);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        *(void *)&long long v205 = sub_10019590C(0);
        uint64_t v26 = *(void *)(a2 + 16);
        if (v26)
        {
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v26; ++i)
          {
            uint64_t v28 = swift_bridgeObjectRetain();
            sub_100202750(v28);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        long long v29 = sub_1001C76EC(v205);
        swift_bridgeObjectRelease();
        if (sub_1001F15B8((uint64_t)v29))
        {
          sub_100157064((uint64_t *)&unk_1002DAA00);
          uint64_t v30 = (void *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          uint64_t v30 = &_swiftEmptyDictionarySingleton;
        }
        *(void *)&long long v205 = v30;
        sub_1001CBBD0((uint64_t)v29, 1, &v205);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v40 = v205;
        goto LABEL_85;
      }
LABEL_207:
      strcpy((char *)&v210, "subs_id");
      *((void *)&v210 + 1) = 0xE700000000000000;
      AnyHashable.init<A>(_:)();
      if (a3[2] && (unint64_t v117 = sub_1001EB8E0((uint64_t)&v207), (v118 & 1) != 0))
      {
        sub_100196D64(a3[7] + 32 * v117, (uint64_t)&v205);
      }
      else
      {
        long long v205 = 0u;
        v206[0] = 0u;
      }
      sub_10019816C((uint64_t)&v207);
      if (*((void *)&v206[0] + 1))
      {
        if (swift_dynamicCast())
        {
          int v119 = v210;
          *(void *)&long long v205 = 0x64695F73627573;
          *((void *)&v205 + 1) = 0xE700000000000000;
          AnyHashable.init<A>(_:)();
          *((void *)&v206[0] + 1) = &type metadata for Int32;
          LODWORD(v205) = v119;
          sub_100197FC0(&v205, &v210);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v212 = v9;
          sub_1001ED71C(&v210, (uint64_t)&v207, isUniquelyReferenced_nonNull_native);
          id v9 = v212;
          swift_bridgeObjectRelease();
          sub_10019816C((uint64_t)&v207);
        }
      }
      else
      {
        sub_10015D658((uint64_t)&v205, (uint64_t *)&unk_1002D9680);
      }
      return v9;
    }
    if ((a1 != 0x333133444333 || a2 != 0xE600000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      break;
    }
    sub_100157064((uint64_t *)&unk_1002DAEA8);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100267EF0;
    id v22 = sub_100195900(0);
    *(void *)(v21 + 32) = sub_1001E03F0((uint64_t)v22);
    long long v23 = (void *)v21;
    uint64_t v212 = (void *)v21;
    strcpy((char *)&v210, "scc_list");
    BYTE9(v210) = 0;
    WORD5(v210) = 0;
    HIDWORD(v210) = -402653184;
    AnyHashable.init<A>(_:)();
    if (a3[2] && (a1 = (unint64_t)a3, unint64_t v24 = sub_1001EB8E0((uint64_t)&v207), (v25 & 1) != 0))
    {
      sub_100196D64(a3[7] + 32 * v24, (uint64_t)&v205);
    }
    else
    {
      long long v205 = 0u;
      v206[0] = 0u;
    }
    sub_10019816C((uint64_t)&v207);
    if (!*((void *)&v206[0] + 1)) {
      goto LABEL_205;
    }
    sub_100157064(&qword_1002DAE88);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_206;
    }
    unint64_t v31 = v210;
    uint64_t v32 = sub_1001E0060(v210);
    if (v32 < 0) {
      goto LABEL_366;
    }
    uint64_t v33 = v32;
    uint64_t v198 = (uint64_t)a3;
    v199 = (void *)v31;
    if (!v32)
    {
      Swift::String v37 = v23;
      unint64_t v39 = v23[2];
      if (!v39) {
        goto LABEL_161;
      }
LABEL_104:
      unint64_t v52 = v37;
      swift_bridgeObjectRetain();
      id v53 = v52;
      unint64_t v54 = 0;
      do
      {
        if (!*(void *)(v53[v54 + 4] + 16))
        {
          sub_1001CC4FC(v54);
          swift_bridgeObjectRelease();
          id v53 = v52;
        }
        ++v54;
      }
      while (v39 != v54);
      swift_bridgeObjectRelease();
      Swift::String v37 = v212;
      uint64_t v195 = v212[2];
      if (v195)
      {
        v194 = v212 + 4;
        Swift::Int v196 = v212;
        swift_bridgeObjectRetain();
        unint64_t v55 = 0;
        while (v196[2] > v55)
        {
          a3 = (void *)v194[v55];
          unint64_t v197 = v55 + 1;
          swift_bridgeObjectRetain();
          id v56 = sub_100195900(0);
          id v57 = (void *)sub_1001E03F0((uint64_t)v56);
          int64_t v204 = 0;
          Swift::Int v200 = (char *)(a3 + 8);
          uint64_t v58 = 1 << *((unsigned char *)a3 + 32);
          if (v58 < 64) {
            uint64_t v59 = ~(-1 << v58);
          }
          else {
            uint64_t v59 = -1;
          }
          unint64_t v31 = v59 & a3[8];
          int64_t v201 = (unint64_t)(v58 + 63) >> 6;
          while (1)
          {
            if (v31)
            {
              unint64_t v61 = __clz(__rbit64(v31));
              v31 &= v31 - 1;
              unint64_t v62 = v61 | (v204 << 6);
              goto LABEL_119;
            }
            int64_t v66 = v204 + 1;
            if (__OFADD__(v204, 1))
            {
              __break(1u);
              goto LABEL_233;
            }
            if (v66 >= v201) {
              goto LABEL_137;
            }
            unint64_t v67 = *(void *)&v200[8 * v66];
            if (v67) {
              goto LABEL_123;
            }
            int64_t v68 = v204 + 2;
            ++v204;
            if (v66 + 1 >= v201) {
              goto LABEL_137;
            }
            unint64_t v67 = *(void *)&v200[8 * v68];
            if (v67)
            {
LABEL_126:
              int64_t v66 = v68;
              goto LABEL_123;
            }
            int64_t v204 = v66 + 1;
            if (v66 + 2 >= v201) {
              goto LABEL_137;
            }
            unint64_t v67 = *(void *)&v200[8 * v66 + 16];
            if (v67)
            {
              v66 += 2;
LABEL_123:
              unint64_t v31 = (v67 - 1) & v67;
              unint64_t v62 = __clz(__rbit64(v67)) + (v66 << 6);
              int64_t v204 = v66;
LABEL_119:
              uint64_t v63 = a3[7];
              uint64_t v64 = (void *)(a3[6] + 16 * v62);
              uint64_t v65 = v64[1];
              *(void *)&long long v205 = *v64;
              *((void *)&v205 + 1) = v65;
              sub_100196D64(v63 + 32 * v62, (uint64_t)v206);
              swift_bridgeObjectRetain();
              goto LABEL_138;
            }
            int64_t v68 = v66 + 3;
            int64_t v204 = v66 + 2;
            if (v66 + 3 >= v201) {
              goto LABEL_137;
            }
            unint64_t v67 = *(void *)&v200[8 * v68];
            if (v67) {
              goto LABEL_126;
            }
            while (1)
            {
              int64_t v66 = v68 + 1;
              if (__OFADD__(v68, 1))
              {
                __break(1u);
                goto LABEL_364;
              }
              if (v66 >= v201) {
                break;
              }
              unint64_t v67 = *(void *)&v200[8 * v66];
              ++v68;
              if (v67) {
                goto LABEL_123;
              }
            }
            int64_t v204 = v201 - 1;
LABEL_137:
            unint64_t v31 = 0;
            memset(v206, 0, sizeof(v206));
            long long v205 = 0u;
LABEL_138:
            sub_10015D474((uint64_t)&v205, (uint64_t)&v207, &qword_1002D96A0);
            BOOL v69 = (void *)*((void *)&v207 + 1);
            if (!*((void *)&v207 + 1)) {
              break;
            }
            uint64_t v70 = v207;
            sub_100197FC0(&v208, &v205);
            unint64_t v71 = v55;
            *(void *)&long long v210 = v55;
            *(void *)&long long v210 = dispatch thunk of CustomStringConvertible.description.getter();
            *((void *)&v210 + 1) = v72;
            swift_bridgeObjectRetain();
            v73._uint64_t countAndFlagsBits = 45;
            v73._object = (void *)0xE100000000000000;
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v74._uint64_t countAndFlagsBits = 0x6E6F6974636573;
            v74._object = (void *)0xE700000000000000;
            String.append(_:)(v74);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v75._uint64_t countAndFlagsBits = 45;
            v75._object = (void *)0xE100000000000000;
            String.append(_:)(v75);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v76._uint64_t countAndFlagsBits = v70;
            v76._object = v69;
            String.append(_:)(v76);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v77 = v210;
            sub_100196D64((uint64_t)&v205, (uint64_t)&v210);
            char v78 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v209 = v57;
            unint64_t v80 = sub_1001EB868(v77, *((uint64_t *)&v77 + 1));
            uint64_t v81 = v57[2];
            BOOL v82 = (v79 & 1) == 0;
            uint64_t v83 = v81 + v82;
            if (__OFADD__(v81, v82))
            {
              __break(1u);
              goto LABEL_217;
            }
            uint64_t v4 = v79;
            if (v57[3] >= v83)
            {
              if (v78)
              {
                id v57 = v209;
                if ((v79 & 1) == 0) {
                  goto LABEL_146;
                }
              }
              else
              {
                sub_1001EE344();
                id v57 = v209;
                if ((v4 & 1) == 0) {
                  goto LABEL_146;
                }
              }
LABEL_115:
              uint64_t v60 = (_OWORD *)(v57[7] + 32 * v80);
              sub_100157190((uint64_t)v60);
              sub_100197FC0(&v210, v60);
              goto LABEL_116;
            }
            sub_1001EBFC8(v83, v78);
            unint64_t v84 = sub_1001EB868(v77, *((uint64_t *)&v77 + 1));
            if ((v4 & 1) != (v85 & 1)) {
              goto LABEL_386;
            }
            unint64_t v80 = v84;
            id v57 = v209;
            if (v4) {
              goto LABEL_115;
            }
LABEL_146:
            v57[(v80 >> 6) + 8] |= 1 << v80;
            *(_OWORD *)(v57[6] + 16 * v80) = v77;
            sub_100197FC0(&v210, (_OWORD *)(v57[7] + 32 * v80));
            uint64_t v86 = v57[2];
            BOOL v87 = __OFADD__(v86, 1);
            uint64_t v88 = v86 + 1;
            if (v87)
            {
              __break(1u);
              goto LABEL_226;
            }
            v57[2] = v88;
            swift_bridgeObjectRetain();
LABEL_116:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_100157190((uint64_t)&v205);
            unint64_t v55 = v71;
          }
          swift_release();
          uint64_t v89 = v212;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v89 = sub_1001B4AB8(v89);
            uint64_t v212 = v89;
          }
          if (v89[2] <= v55) {
            goto LABEL_330;
          }
          v89[v55 + 4] = v57;
          swift_bridgeObjectRelease();
          unint64_t v55 = v197;
          if (v197 == v195)
          {
            swift_bridgeObjectRelease();
            Swift::String v37 = v212;
            goto LABEL_161;
          }
        }
        __break(1u);
LABEL_330:
        __break(1u);
        goto LABEL_331;
      }
LABEL_161:
      unint64_t v93 = v37;
      swift_bridgeObjectRetain();
      *(void *)&long long v207 = sub_10019590C(0);
      uint64_t v94 = v93[2];
      a3 = (void *)v198;
      if (v94)
      {
        swift_bridgeObjectRetain();
        for (uint64_t j = 0; j != v94; ++j)
        {
          uint64_t v96 = swift_bridgeObjectRetain();
          sub_100202750(v96);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      a2 = (unint64_t)sub_1001C76EC(v207);
      swift_bridgeObjectRelease();
      if (!sub_1001F15B8(a2))
      {
        uint64_t v97 = &_swiftEmptyDictionarySingleton;
        goto LABEL_168;
      }
LABEL_166:
      sub_100157064((uint64_t *)&unk_1002DAA00);
      uint64_t v97 = (void *)static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_168;
    }
    a2 = 0;
    uint64_t v202 = v5;
    uint64_t v203 = OBJC_IVAR____TtC13FTMInternal_413MetricService_dlbwlookup;
    uint64_t v4 = 32;
    a3 = &type metadata for Int;
    uint64_t v5 = (char *)&type metadata for Float;
    id v9 = &unk_1002D9680;
    while (1)
    {
      *(void *)&long long v205 = 0x6D617473656D6974;
      *((void *)&v205 + 1) = 0xE900000000000070;
      AnyHashable.init<A>(_:)();
      sub_1001DD928((uint64_t)&v207, v198, &v210);
      sub_10019816C((uint64_t)&v207);
      if (v211)
      {
        sub_100197FC0(&v210, &v205);
        sub_100196D64((uint64_t)&v205, (uint64_t)&v207);
        id v34 = v199;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v34 = sub_1001B4AB8(v199);
        }
        if (v34[2] <= a2)
        {
          __break(1u);
LABEL_315:
          sub_10015D658((uint64_t)&v205, (uint64_t *)&unk_1002D9680);
          goto LABEL_206;
        }
        a1 = (unint64_t)v34 + v4;
        sub_10018DC74((uint64_t)&v207, 0x6D617473656D6974, 0xE900000000000070);
        sub_100157190((uint64_t)&v205);
      }
      else
      {
        sub_10015D658((uint64_t)&v210, (uint64_t *)&unk_1002D9680);
        id v34 = v199;
      }
      if (v34[2] <= a2) {
        break;
      }
      a1 = *(void *)((char *)v34 + v4);
      swift_bridgeObjectRetain();
      sub_1001DD8C4(1886548850, 0xE400000000000000, a1, &v207);
      swift_bridgeObjectRelease();
      if (*((void *)&v208 + 1))
      {
        if (swift_dynamicCast())
        {
          *((void *)&v208 + 1) = &type metadata for Int;
          *(void *)&long long v207 = (uint64_t)v205 / 100;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v34 = sub_1001B4AB8(v34);
          }
          if (v34[2] <= a2)
          {
            __break(1u);
LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            uint64_t v97 = &_swiftEmptyDictionarySingleton;
LABEL_168:
            *(void *)&long long v207 = v97;
            sub_1001CBBD0(a2, 1, &v207);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v98 = v207;
            swift_bridgeObjectRelease();
            id v9 = (void *)sub_1001C7834(v98);
            swift_bridgeObjectRelease();
LABEL_86:
            swift_release();
            goto LABEL_207;
          }
          a1 = (unint64_t)v34 + v4;
          sub_10018DC74((uint64_t)&v207, 1886548850, 0xE400000000000000);
        }
      }
      else
      {
        sub_10015D658((uint64_t)&v207, (uint64_t *)&unk_1002D9680);
      }
      if (v34[2] <= a2) {
        goto LABEL_303;
      }
      a1 = *(void *)((char *)v34 + v4);
      swift_bridgeObjectRetain();
      sub_1001DD8C4(1903326066, 0xE400000000000000, a1, &v207);
      swift_bridgeObjectRelease();
      if (*((void *)&v208 + 1))
      {
        if (swift_dynamicCast())
        {
          *((void *)&v208 + 1) = &type metadata for Float;
          *(float *)&long long v207 = *(float *)&v205 / 100.0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v34 = sub_1001B4AB8(v34);
          }
          if (v34[2] <= a2) {
            goto LABEL_338;
          }
          a1 = (unint64_t)v34 + v4;
          sub_10018DC74((uint64_t)&v207, 1903326066, 0xE400000000000000);
        }
      }
      else
      {
        sub_10015D658((uint64_t)&v207, (uint64_t *)&unk_1002D9680);
      }
      if (v34[2] <= a2) {
        goto LABEL_304;
      }
      a1 = *(void *)((char *)v34 + v4);
      swift_bridgeObjectRetain();
      sub_1001DD8C4(1769173874, 0xE400000000000000, a1, &v207);
      swift_bridgeObjectRelease();
      if (*((void *)&v208 + 1))
      {
        if (swift_dynamicCast())
        {
          *((void *)&v208 + 1) = &type metadata for Int;
          *(void *)&long long v207 = (uint64_t)v205 / 100;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v34 = sub_1001B4AB8(v34);
          }
          if (v34[2] <= a2) {
            goto LABEL_339;
          }
          a1 = (unint64_t)v34 + v4;
          sub_10018DC74((uint64_t)&v207, 1769173874, 0xE400000000000000);
        }
      }
      else
      {
        sub_10015D658((uint64_t)&v207, (uint64_t *)&unk_1002D9680);
      }
      if (v34[2] <= a2) {
        goto LABEL_305;
      }
      a1 = *(void *)((char *)v34 + v4);
      swift_bridgeObjectRetain();
      sub_1001DD8C4(0x77646E61625F6C64, 0xEC00000068746469, a1, &v207);
      swift_bridgeObjectRelease();
      if (*((void *)&v208 + 1))
      {
        if (swift_dynamicCast())
        {
          unint64_t v35 = sub_1001DD98C(v205, *(void *)&v202[v203]);
          if ((v35 & 0x100000000) != 0)
          {
            long long v207 = 0u;
            long long v208 = 0u;
          }
          else
          {
            *((void *)&v208 + 1) = &type metadata for Float;
            LODWORD(v207) = v35;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v34 = sub_1001B4AB8(v34);
          }
          if (v34[2] <= a2) {
            goto LABEL_340;
          }
          a1 = (unint64_t)v34 + v4;
          sub_10018DC74((uint64_t)&v207, 0x77646E61625F6C64, 0xEC00000068746469);
        }
      }
      else
      {
        sub_10015D658((uint64_t)&v207, (uint64_t *)&unk_1002D9680);
      }
      if (v34[2] <= a2) {
        goto LABEL_306;
      }
      v199 = v34;
      uint64_t v36 = *(void *)((char *)v34 + v4);
      swift_bridgeObjectRetain();
      sub_1001CADAC();
      Swift::String v37 = v212;
      a1 = v212[2];
      unint64_t v38 = v212[3];
      unint64_t v39 = a1 + 1;
      if (a1 >= v38 >> 1)
      {
        Swift::String v37 = sub_1001EB1C0((void *)(v38 > 1), a1 + 1, 1, v212);
        uint64_t v212 = v37;
      }
      ++a2;
      v37[2] = v39;
      v37[a1 + 4] = v36;
      v4 += 8;
      if (v33 == a2) {
        goto LABEL_104;
      }
    }
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    swift_once();
  }
  if (a1 == 0x423033444333 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_100157064((uint64_t *)&unk_1002DAEA8);
    uint64_t v41 = (void *)swift_allocObject();
    *((_OWORD *)v41 + 1) = xmmword_100267EF0;
    uint64_t v42 = sub_100195900(0);
    v41[4] = sub_1001E03F0((uint64_t)v42);
    uint64_t v212 = v41;
    strcpy((char *)&v210, "carrier_info");
    BYTE13(v210) = 0;
    HIWORD(v210) = -5120;
    AnyHashable.init<A>(_:)();
    if (a3[2] && (unint64_t v43 = sub_1001EB8E0((uint64_t)&v207), (v44 & 1) != 0))
    {
      sub_100196D64(a3[7] + 32 * v43, (uint64_t)&v205);
    }
    else
    {
      long long v205 = 0u;
      v206[0] = 0u;
    }
    sub_10019816C((uint64_t)&v207);
    if (*((void *)&v206[0] + 1))
    {
      sub_100157064(&qword_1002DAE88);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_206;
      }
      uint64_t v45 = v210;
      uint64_t v46 = sub_1001E0060(v210);
      if ((v46 & 0x8000000000000000) == 0)
      {
        uint64_t v47 = v46;
        if (v46)
        {
          sub_1001CADAC();
          sub_1001CADAC();
          uint64_t v48 = 0;
          do
          {
            uint64_t v49 = *(void *)(v45 + 8 * v48 + 32);
            swift_bridgeObjectRetain();
            sub_1001CADAC();
            uint64_t v41 = v212;
            unint64_t v51 = v212[2];
            unint64_t v50 = v212[3];
            if (v51 >= v50 >> 1)
            {
              uint64_t v41 = sub_1001EB1C0((void *)(v50 > 1), v51 + 1, 1, v212);
              uint64_t v212 = v41;
            }
            ++v48;
            v41[2] = v51 + 1;
            v41[v51 + 4] = v49;
          }
          while (v47 != v48);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        *(void *)&long long v207 = sub_10019590C(0);
        uint64_t v99 = v41[2];
        if (!v99) {
          goto LABEL_173;
        }
        swift_bridgeObjectRetain();
        for (uint64_t k = 0; k != v99; ++k)
        {
          uint64_t v101 = swift_bridgeObjectRetain();
          sub_100202750(v101);
        }
LABEL_172:
        swift_bridgeObjectRelease();
        goto LABEL_173;
      }
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
LABEL_379:
      __break(1u);
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
LABEL_382:
      __break(1u);
LABEL_383:
      __break(1u);
LABEL_384:
      __break(1u);
LABEL_385:
      __break(1u);
LABEL_386:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      swift_bridgeObjectRelease();
      swift_release();
      __break(1u);
      while (1)
      {
        swift_bridgeObjectRelease();
        swift_release();
        __break(1u);
      }
    }
    goto LABEL_356;
  }
  if (a1 == 0x393030444333 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_100157064((uint64_t *)&unk_1002DAEA8);
    id v57 = (void *)swift_allocObject();
    *((_OWORD *)v57 + 1) = xmmword_100267EF0;
    uint64_t v90 = sub_100195900(0);
    v57[4] = sub_1001E03F0((uint64_t)v90);
    uint64_t v212 = v57;
    strcpy((char *)&v210, "gsm_ncell_meas");
    HIBYTE(v210) = -18;
    AnyHashable.init<A>(_:)();
    if (a3[2] && (unint64_t v91 = sub_1001EB8E0((uint64_t)&v207), (v92 & 1) != 0))
    {
      sub_100196D64(a3[7] + 32 * v91, (uint64_t)&v205);
    }
    else
    {
      long long v205 = 0u;
      v206[0] = 0u;
    }
    sub_10019816C((uint64_t)&v207);
    if (!*((void *)&v206[0] + 1))
    {
LABEL_205:
      sub_10015D658((uint64_t)&v205, (uint64_t *)&unk_1002D9680);
      goto LABEL_206;
    }
    sub_100157064(&qword_1002DAE88);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_206;
    }
    unint64_t v31 = v210;
    uint64_t v104 = sub_1001E0060(v210);
    if (v104 < 0) {
      goto LABEL_378;
    }
    uint64_t v105 = v104;
    if (!v104) {
      goto LABEL_226;
    }
    unint64_t v106 = 0;
    while (2)
    {
      if (*(void *)(v31 + 16) <= v106)
      {
LABEL_364:
        __break(1u);
LABEL_365:
        __break(1u);
LABEL_366:
        __break(1u);
LABEL_367:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        *(void *)&long long v207 = sub_10019590C(0);
        uint64_t v191 = *(void *)(v31 + 16);
        if (v191)
        {
          swift_bridgeObjectRetain();
          for (uint64_t m = 0; m != v191; ++m)
          {
            uint64_t v193 = swift_bridgeObjectRetain();
            sub_100202750(v193);
          }
          goto LABEL_172;
        }
LABEL_173:
        swift_bridgeObjectRelease();
LABEL_174:
        uint64_t v102 = v207;
        goto LABEL_175;
      }
      uint64_t v107 = *(void *)(v31 + 8 * v106 + 32);
      if (*(void *)(v107 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v108 = sub_1001EB868(0x76656C7872, 0xE500000000000000);
        if (v109)
        {
          sub_100196D64(*(void *)(v107 + 56) + 32 * v108, (uint64_t)&v207);
        }
        else
        {
          long long v207 = 0u;
          long long v208 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v208 + 1))
        {
          if ((swift_dynamicCast() & 1) == 0)
          {
LABEL_199:
            if (*(void *)(v31 + 16) <= v106) {
              goto LABEL_365;
            }
            uint64_t v113 = a3;
            uint64_t v114 = *(void *)(v31 + 8 * v106 + 32);
            swift_bridgeObjectRetain();
            sub_1001CADAC();
            id v57 = v212;
            unint64_t v116 = v212[2];
            unint64_t v115 = v212[3];
            if (v116 >= v115 >> 1)
            {
              id v57 = sub_1001EB1C0((void *)(v115 > 1), v116 + 1, 1, v212);
              uint64_t v212 = v57;
            }
            ++v106;
            v57[2] = v116 + 1;
            v57[v116 + 4] = v114;
            a3 = v113;
            if (v106 == v105)
            {
LABEL_226:
              swift_bridgeObjectRetain();
              *(void *)&long long v207 = sub_10019590C(0);
              uint64_t v125 = v57[2];
              if (v125)
              {
                swift_bridgeObjectRetain();
                for (uint64_t n = 0; n != v125; ++n)
                {
                  uint64_t v127 = swift_bridgeObjectRetain();
                  sub_100202750(v127);
                }
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              uint64_t v128 = sub_1001C76EC(v207);
              swift_bridgeObjectRelease();
              if (sub_1001F15B8((uint64_t)v128))
              {
                sub_100157064((uint64_t *)&unk_1002DAA00);
                uint64_t v129 = (void *)static _DictionaryStorage.allocate(capacity:)();
              }
              else
              {
                uint64_t v129 = &_swiftEmptyDictionarySingleton;
              }
              *(void *)&long long v207 = v129;
              sub_1001CBBD0((uint64_t)v128, 1, &v207);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v143 = v207;
              swift_bridgeObjectRelease();
              id v9 = (void *)sub_1001C7834(v143);
              swift_bridgeObjectRelease();
              goto LABEL_86;
            }
            continue;
          }
          if (__OFSUB__((void)v205, 110)) {
            goto LABEL_373;
          }
          *((void *)&v208 + 1) = &type metadata for Int;
          *(void *)&long long v207 = v205 - 110;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v31 = (unint64_t)sub_1001B4AB8((void *)v31);
          }
          if (*(void *)(v31 + 16) <= v106) {
            goto LABEL_374;
          }
          long long v110 = (void *)(v31 + 8 * v106 + 32);
          if (*((void *)&v208 + 1))
          {
            sub_100197FC0(&v207, &v205);
            char v111 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v210 = *v110;
            *long long v110 = 0x8000000000000000;
            sub_1001ED5C8(&v205, 0x76656C7872, 0xE500000000000000, v111);
            *long long v110 = v210;
            swift_bridgeObjectRelease();
            goto LABEL_199;
          }
          sub_10015D658((uint64_t)&v207, (uint64_t *)&unk_1002D9680);
          sub_100195A04(0x76656C7872, 0xE500000000000000, &v205);
          int v112 = &v205;
LABEL_198:
          sub_10015D658((uint64_t)v112, (uint64_t *)&unk_1002D9680);
          goto LABEL_199;
        }
      }
      else
      {
        long long v207 = 0u;
        long long v208 = 0u;
      }
      break;
    }
    int v112 = &v207;
    goto LABEL_198;
  }
  if (a1 == 0x323031444333 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_100157064((uint64_t *)&unk_1002DAEA8);
    unint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_100267EF0;
    uint64_t v122 = sub_100195900(0);
    *(void *)(v31 + 32) = sub_1001E03F0((uint64_t)v122);
    uint64_t v212 = (void *)v31;
    strcpy((char *)&v210, "rx_info");
    *((void *)&v210 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)();
    if (a3[2] && (unint64_t v123 = sub_1001EB8E0((uint64_t)&v207), (v124 & 1) != 0))
    {
      sub_100196D64(a3[7] + 32 * v123, (uint64_t)&v205);
    }
    else
    {
LABEL_233:
      long long v205 = 0u;
      v206[0] = 0u;
    }
    sub_10019816C((uint64_t)&v207);
    if (!*((void *)&v206[0] + 1))
    {
      sub_10015D658((uint64_t)&v205, (uint64_t *)&unk_1002D9680);
      goto LABEL_309;
    }
    sub_100157064(&qword_1002DAE88);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_309;
    }
    uint64_t v130 = v210;
    uint64_t v131 = sub_1001E0060(v210);
    if (v131 < 0) {
      goto LABEL_379;
    }
    uint64_t v132 = v131;
    if (v131)
    {
      unint64_t v133 = 0;
      while (1)
      {
        unint64_t v134 = a3;
        uint64_t v135 = *(void *)(v130 + 32 + 8 * v133);
        swift_bridgeObjectRetain();
        sub_1001CADAC();
        uint64_t v136 = v212;
        unint64_t v138 = v212[2];
        unint64_t v137 = v212[3];
        if (v138 >= v137 >> 1)
        {
          uint64_t v136 = sub_1001EB1C0((void *)(v137 > 1), v138 + 1, 1, v212);
          uint64_t v212 = v136;
        }
        v136[2] = v138 + 1;
        v136[v138 + 4] = v135;
        strcpy((char *)&v205, "connected_mode");
        HIBYTE(v205) = -18;
        AnyHashable.init<A>(_:)();
        a3 = v134;
        if (v134[2] && (unint64_t v139 = sub_1001EB8E0((uint64_t)&v207), (v140 & 1) != 0))
        {
          sub_100196D64(v134[7] + 32 * v139, (uint64_t)&v205);
        }
        else
        {
          long long v205 = 0u;
          v206[0] = 0u;
        }
        sub_10019816C((uint64_t)&v207);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v136 = sub_1001B4AB8(v136);
          uint64_t v212 = v136;
        }
        if (v136[2] <= v133) {
          break;
        }
        uint64_t v141 = &v136[v133 + 4];
        if (*((void *)&v206[0] + 1))
        {
          sub_100197FC0(&v205, &v210);
          char v142 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v209 = (void *)*v141;
          *uint64_t v141 = 0x8000000000000000;
          sub_1001ED5C8(&v210, 0x657463656E6E6F63, 0xEE0065646F6D5F64, v142);
          *uint64_t v141 = v209;
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_10015D658((uint64_t)&v205, (uint64_t *)&unk_1002D9680);
          sub_100195A04(0x657463656E6E6F63, 0xEE0065646F6D5F64, &v210);
          sub_10015D658((uint64_t)&v210, (uint64_t *)&unk_1002D9680);
        }
        if (++v133 == v132)
        {
          swift_bridgeObjectRelease();
          unint64_t v31 = (unint64_t)v212;
          goto LABEL_309;
        }
      }
      __break(1u);
      goto LABEL_372;
    }
    swift_bridgeObjectRelease();
LABEL_309:
    swift_bridgeObjectRetain();
    uint64_t v164 = sub_10019590C(0);
    *(void *)&long long v207 = v164;
    uint64_t v165 = *(void *)(v31 + 16);
    if (v165)
    {
      swift_bridgeObjectRetain();
      for (iuint64_t i = 0; ii != v165; ++ii)
      {
        uint64_t v167 = swift_bridgeObjectRetain();
        sub_100202750(v167);
      }
      swift_bridgeObjectRelease_n();
      goto LABEL_174;
    }
    uint64_t v102 = (uint64_t)v164;
    swift_bridgeObjectRelease();
LABEL_175:
    id v57 = sub_1001C76EC(v102);
    swift_bridgeObjectRelease();
    if (sub_1001F15B8((uint64_t)v57))
    {
      sub_100157064((uint64_t *)&unk_1002DAA00);
      uint64_t v103 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
LABEL_217:
      uint64_t v103 = &_swiftEmptyDictionarySingleton;
    }
    *(void *)&long long v207 = v103;
    sub_1001CBBD0((uint64_t)v57, 1, &v207);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = v207;
LABEL_85:
    swift_bridgeObjectRelease();
    id v9 = (void *)sub_1001C7834(v40);
    goto LABEL_86;
  }
  if (a1 == 0x353031444333 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_100157064((uint64_t *)&unk_1002DAEA8);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_100267EF0;
    uint64_t v144 = sub_100195900(0);
    *(void *)(v4 + 32) = sub_1001E03F0((uint64_t)v144);
    uint64_t v212 = (void *)v4;
    *(void *)&long long v210 = 0xD000000000000010;
    *((void *)&v210 + 1) = 0x800000010023E2E0;
    AnyHashable.init<A>(_:)();
    sub_1001DD928((uint64_t)&v207, (uint64_t)a3, &v205);
    sub_10019816C((uint64_t)&v207);
    if (!*((void *)&v206[0] + 1)) {
      goto LABEL_315;
    }
    sub_100157064(&qword_1002DAE88);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_206:
      swift_bridgeObjectRelease();
      goto LABEL_207;
    }
    uint64_t v145 = (void *)v210;
    uint64_t v146 = sub_1001E0060(v210);
    if (v146 < 0) {
      goto LABEL_383;
    }
    uint64_t v147 = v146;
    uint64_t v198 = (uint64_t)a3;
    if (!v146)
    {
LABEL_331:
      swift_bridgeObjectRetain();
      *(void *)&long long v207 = sub_10019590C(0);
      uint64_t v177 = *(void *)(v4 + 16);
      a3 = (void *)v198;
      if (v177)
      {
        swift_bridgeObjectRetain();
        for (juint64_t j = 0; jj != v177; ++jj)
        {
          uint64_t v179 = swift_bridgeObjectRetain();
          sub_100202750(v179);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      a2 = (unint64_t)sub_1001C76EC(v207);
      swift_bridgeObjectRelease();
      if (!sub_1001F15B8(a2)) {
        goto LABEL_342;
      }
      goto LABEL_166;
    }
    unint64_t v148 = 0;
    while (2)
    {
      if (v145[2] <= v148) {
        goto LABEL_375;
      }
      uint64_t v149 = v145[v148 + 4];
      if (*(void *)(v149 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v150 = sub_1001EB868(1885565810, 0xE400000000000000);
        if (v151)
        {
          sub_100196D64(*(void *)(v149 + 56) + 32 * v150, (uint64_t)&v207);
        }
        else
        {
          long long v207 = 0u;
          long long v208 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v208 + 1))
        {
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_279;
          }
          if (__OFSUB__((void)v205, 116)) {
            goto LABEL_380;
          }
          *((void *)&v208 + 1) = &type metadata for Int;
          *(void *)&long long v207 = v205 - 116;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v145 = sub_1001B4AB8(v145);
          }
          if (v145[2] <= v148) {
            goto LABEL_381;
          }
          uint64_t v152 = &v145[v148 + 4];
          if (*((void *)&v208 + 1))
          {
            sub_100197FC0(&v207, &v205);
            char v153 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v210 = *v152;
            void *v152 = 0x8000000000000000;
            sub_1001ED5C8(&v205, 1885565810, 0xE400000000000000, v153);
            void *v152 = v210;
            swift_bridgeObjectRelease();
            goto LABEL_279;
          }
          sub_10015D658((uint64_t)&v207, (uint64_t *)&unk_1002D9680);
          sub_100195A04(1885565810, 0xE400000000000000, &v205);
          uint64_t v154 = &v205;
LABEL_278:
          sub_10015D658((uint64_t)v154, (uint64_t *)&unk_1002D9680);
LABEL_279:
          if (v145[2] <= v148) {
            goto LABEL_376;
          }
          uint64_t v155 = v145[v148 + 4];
          if (*(void *)(v155 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v156 = sub_1001EB868(1869505381, 0xE400000000000000);
            if (v157)
            {
              sub_100196D64(*(void *)(v155 + 56) + 32 * v156, (uint64_t)&v207);
            }
            else
            {
              long long v207 = 0u;
              long long v208 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v208 + 1))
            {
              if ((swift_dynamicCast() & 1) == 0) {
                goto LABEL_294;
              }
              *((void *)&v208 + 1) = &type metadata for Float;
              *(float *)&long long v207 = (float)(*(float *)&v205 * 0.5) + -24.5;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v145 = sub_1001B4AB8(v145);
              }
              if (v145[2] <= v148) {
                goto LABEL_382;
              }
              v158 = &v145[v148 + 4];
              if (*((void *)&v208 + 1))
              {
                sub_100197FC0(&v207, &v205);
                char v159 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)&long long v210 = *v158;
                void *v158 = 0x8000000000000000;
                sub_1001ED5C8(&v205, 1869505381, 0xE400000000000000, v159);
                void *v158 = v210;
                swift_bridgeObjectRelease();
                goto LABEL_294;
              }
              sub_10015D658((uint64_t)&v207, (uint64_t *)&unk_1002D9680);
              sub_100195A04(1869505381, 0xE400000000000000, &v205);
              uint64_t v160 = &v205;
LABEL_293:
              sub_10015D658((uint64_t)v160, (uint64_t *)&unk_1002D9680);
LABEL_294:
              if (v145[2] <= v148) {
                goto LABEL_377;
              }
              uint64_t v161 = v145[v148 + 4];
              swift_bridgeObjectRetain();
              sub_1001CADAC();
              uint64_t v4 = (uint64_t)v212;
              unint64_t v163 = v212[2];
              unint64_t v162 = v212[3];
              if (v163 >= v162 >> 1)
              {
                uint64_t v4 = (uint64_t)sub_1001EB1C0((void *)(v162 > 1), v163 + 1, 1, v212);
                uint64_t v212 = (void *)v4;
              }
              ++v148;
              *(void *)(v4 + 16) = v163 + 1;
              *(void *)(v4 + 8 * v163 + 32) = v161;
              if (v148 == v147) {
                goto LABEL_331;
              }
              continue;
            }
          }
          else
          {
            long long v207 = 0u;
            long long v208 = 0u;
          }
          uint64_t v160 = &v207;
          goto LABEL_293;
        }
      }
      else
      {
        long long v207 = 0u;
        long long v208 = 0u;
      }
      break;
    }
    uint64_t v154 = &v207;
    goto LABEL_278;
  }
  if (a1 == 0x333130304333 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_100157064((uint64_t *)&unk_1002DAEA8);
    uint64_t v168 = (void *)swift_allocObject();
    *((_OWORD *)v168 + 1) = xmmword_100267EF0;
    uint64_t v169 = sub_100195900(0);
    v168[4] = sub_1001E03F0((uint64_t)v169);
    uint64_t v212 = v168;
    *(void *)&long long v210 = 26213;
    *((void *)&v210 + 1) = 0xE200000000000000;
    AnyHashable.init<A>(_:)();
    sub_1001DD928((uint64_t)&v207, (uint64_t)a3, &v205);
    sub_10019816C((uint64_t)&v207);
    if (*((void *)&v206[0] + 1))
    {
      sub_100157064(&qword_1002DAE88);
      if (swift_dynamicCast())
      {
        uint64_t v170 = v210;
        uint64_t v171 = sub_1001E0060(v210);
        if (v171 < 0) {
          goto LABEL_384;
        }
        uint64_t v172 = v171;
        if (v171)
        {
          sub_1001CADAC();
          sub_1001CADAC();
          uint64_t v173 = 0;
          do
          {
            uint64_t v174 = *(void *)(v170 + 8 * v173 + 32);
            swift_bridgeObjectRetain();
            sub_1001CADAC();
            uint64_t v168 = v212;
            unint64_t v176 = v212[2];
            unint64_t v175 = v212[3];
            if (v176 >= v175 >> 1)
            {
              uint64_t v168 = sub_1001EB1C0((void *)(v175 > 1), v176 + 1, 1, v212);
              uint64_t v212 = v168;
            }
            ++v173;
            v168[2] = v176 + 1;
            v168[v176 + 4] = v174;
          }
          while (v172 != v173);
        }
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_10015D658((uint64_t)&v205, (uint64_t *)&unk_1002D9680);
    }
    swift_bridgeObjectRetain();
    *(void *)&long long v207 = sub_10019590C(0);
    uint64_t v188 = v168[2];
    if (!v188) {
      goto LABEL_173;
    }
    swift_bridgeObjectRetain();
    for (kuint64_t k = 0; kk != v188; ++kk)
    {
      uint64_t v190 = swift_bridgeObjectRetain();
      sub_100202750(v190);
    }
    goto LABEL_172;
  }
  if (a1 == 0x323033444333 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_100157064((uint64_t *)&unk_1002DAEA8);
    unint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_100267EF0;
    uint64_t v180 = sub_100195900(0);
    *(void *)(v31 + 32) = sub_1001E03F0((uint64_t)v180);
    uint64_t v212 = (void *)v31;
    strcpy((char *)&v210, "tx_power_info");
    HIWORD(v210) = -4864;
    AnyHashable.init<A>(_:)();
    sub_1001DD928((uint64_t)&v207, (uint64_t)a3, &v205);
    sub_10019816C((uint64_t)&v207);
    if (*((void *)&v206[0] + 1))
    {
      sub_100157064(&qword_1002DAE88);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_206;
      }
      uint64_t v181 = v210;
      uint64_t v182 = sub_1001E0060(v210);
      if ((v182 & 0x8000000000000000) == 0)
      {
        uint64_t v183 = v182;
        if (v182)
        {
          sub_1001CADAC();
          sub_1001CADAC();
          uint64_t v184 = 0;
          do
          {
            uint64_t v185 = *(void *)(v181 + 8 * v184 + 32);
            swift_bridgeObjectRetain();
            sub_1001CADAC();
            unint64_t v31 = (unint64_t)v212;
            unint64_t v187 = v212[2];
            unint64_t v186 = v212[3];
            if (v187 >= v186 >> 1)
            {
              unint64_t v31 = (unint64_t)sub_1001EB1C0((void *)(v186 > 1), v187 + 1, 1, v212);
              uint64_t v212 = (void *)v31;
            }
            ++v184;
            *(void *)(v31 + 16) = v187 + 1;
            *(void *)(v31 + 8 * v187 + 32) = v185;
          }
          while (v183 != v184);
        }
        goto LABEL_367;
      }
      goto LABEL_385;
    }
LABEL_356:
    sub_10015D658((uint64_t)&v205, (uint64_t *)&unk_1002D9680);
    goto LABEL_206;
  }
  return v9;
}

void *sub_1001C76EC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    sub_1001B23FC(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_10015D5F4(v4, (uint64_t)v11, (uint64_t *)&unk_1002D96B0);
      sub_100157064((uint64_t *)&unk_1002D96B0);
      sub_100157064(&qword_1002D96A8);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001B23FC(0, v2[2] + 1, 1);
        uint64_t v2 = v15;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1001B23FC(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v15;
      }
      v2[2] = v6 + 1;
      int64_t v7 = &v2[6 * v6];
      long long v8 = v12;
      long long v9 = v14;
      v7[3] = v13;
      v7[4] = v9;
      _OWORD v7[2] = v8;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1001C7834(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100157064((uint64_t *)&unk_1002DAE90);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_100196D64(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100197FC0(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_100197FC0(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_100197FC0(v36, v37);
    sub_100197FC0(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_100197FC0(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1001B6994();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001C7BFC(uint64_t a1, void *a2)
{
  if (qword_1002D7AB0 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v5 = swift_allocObject();
  unint64_t v6 = &type metadata for Int;
  long long v131 = xmmword_100267EF0;
  *(_OWORD *)(v5 + 16) = xmmword_100267EF0;
  int64_t v7 = &protocol witness table for Int;
  *(void *)(v5 + 56) = &type metadata for Int;
  *(void *)(v5 + 64) = &protocol witness table for Int;
  *(void *)(v5 + 32) = a1;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if (a1 > 806912)
  {
    if (a1 != 806913)
    {
      if (a1 != 827650)
      {
        if (a1 == 827746)
        {
          uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
          *(void *)&long long v138 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
          *((void *)&v138 + 1) = v8;
          swift_bridgeObjectRetain_n();
          id v9 = [a2 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
          swift_unknownObjectRelease();
          if (v9)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v138 = 0u;
            long long v139 = 0u;
          }
          sub_10015D474((uint64_t)&v138, (uint64_t)&v132, (uint64_t *)&unk_1002D9680);
          if (*((void *)&v133 + 1))
          {
            if (swift_dynamicCast())
            {
              long long v25 = v137[0];
              swift_bridgeObjectRelease();
              v26.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
              sub_100156FB8(v25, *((unint64_t *)&v25 + 1));
              goto LABEL_66;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            sub_10015D658((uint64_t)&v132, (uint64_t *)&unk_1002D9680);
          }
          v26.super.Class isa = 0;
LABEL_66:
          id v41 = [objc_allocWithZone((Class)CellularRatLacSrvInfo) initWithData:v26.super.isa];

          if (v41)
          {
            id v42 = [v41 dictionaryRepresentation];

            if (!v42) {
              return 0;
            }
LABEL_84:
            uint64_t v32 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            return (uint64_t)v32;
          }
          goto LABEL_186;
        }
LABEL_19:
        if (qword_1002D7A88 != -1) {
          goto LABEL_182;
        }
        goto LABEL_20;
      }
      uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
      *(void *)&long long v138 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
      *((void *)&v138 + 1) = v14;
      swift_bridgeObjectRetain_n();
      id v15 = [a2 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v15)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v138 = 0u;
        long long v139 = 0u;
      }
      sub_10015D474((uint64_t)&v138, (uint64_t)&v132, (uint64_t *)&unk_1002D9680);
      if (*((void *)&v133 + 1))
      {
        if (swift_dynamicCast())
        {
          long long v23 = v137[0];
          swift_bridgeObjectRelease();
          v24.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100156FB8(v23, *((unint64_t *)&v23 + 1));
          goto LABEL_54;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_10015D658((uint64_t)&v132, (uint64_t *)&unk_1002D9680);
      }
      v24.super.Class isa = 0;
LABEL_54:
      id v34 = [objc_allocWithZone((Class)CellularRegisteredPlmnStatus) initWithData:v24.super.isa];

      if (v34)
      {
        id v35 = [v34 dictionaryRepresentation];

        if (!v35) {
          return 0;
        }
        uint64_t v32 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        char v140 = v32;
        *(void *)&long long v138 = 0x6C5F6E6D6C706865;
        *((void *)&v138 + 1) = 0xEB00000000747369;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        if (v32[2] && (unint64_t v36 = sub_1001EB8E0((uint64_t)&v132), (v37 & 1) != 0))
        {
          sub_100196D64(v32[7] + 32 * v36, (uint64_t)&v138);
        }
        else
        {
          long long v138 = 0u;
          long long v139 = 0u;
        }
        sub_10019816C((uint64_t)&v132);
        uint64_t v38 = *((void *)&v139 + 1);
        sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
        if (!v38) {
          goto LABEL_111;
        }
        *(void *)&v137[0] = 0x6C5F6E6D6C706865;
        *((void *)&v137[0] + 1) = 0xEB00000000747369;
        AnyHashable.init<A>(_:)();
        if (v32[2] && (unint64_t v39 = sub_1001EB8E0((uint64_t)&v132), (v40 & 1) != 0))
        {
          sub_100196D64(v32[7] + 32 * v39, (uint64_t)&v138);
        }
        else
        {
          long long v138 = 0u;
          long long v139 = 0u;
        }
        swift_bridgeObjectRelease();
        sub_10019816C((uint64_t)&v132);
        if (!*((void *)&v139 + 1))
        {
          sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
          return (uint64_t)v32;
        }
        sub_100157064(&qword_1002DAE78);
        if ((swift_dynamicCast() & 1) == 0) {
          return (uint64_t)v32;
        }
        uint64_t v51 = *(void *)(*(void *)&v137[0] + 16);
        if (!v51)
        {
LABEL_111:
          swift_bridgeObjectRelease();
          return (uint64_t)v32;
        }
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = *(void *)&v137[0] + 32;
        int v55 = 1;
        int v56 = 1;
        while (1)
        {
          sub_100196D64(v54, (uint64_t)&v132);
          sub_100157064(&qword_1002DAE80);
          if (swift_dynamicCast()) {
            break;
          }
LABEL_93:
          v54 += 32;
          if (!--v51)
          {
            swift_bridgeObjectRelease();
            if (((v56 | v55) & 1) == 0)
            {
              *(void *)&long long v138 = 1313688656;
              *((void *)&v138 + 1) = 0xE400000000000000;
              AnyHashable.init<A>(_:)();
              *(void *)&long long v138 = v53;
              *(void *)&long long v138 = dispatch thunk of CustomStringConvertible.description.getter();
              *((void *)&v138 + 1) = v74;
              swift_bridgeObjectRetain();
              v75._uint64_t countAndFlagsBits = 32;
              v75._object = (void *)0xE100000000000000;
              String.append(_:)(v75);
              swift_bridgeObjectRelease();
              long long v76 = v138;
              *(void *)&long long v138 = v52;
              uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v79 = v78;
              long long v138 = v76;
              swift_bridgeObjectRetain();
              v80._uint64_t countAndFlagsBits = v77;
              v80._object = v79;
              String.append(_:)(v80);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *((void *)&v139 + 1) = &type metadata for String;
              sub_100197FC0(&v138, v137);
              uint64_t v81 = (uint64_t)v140;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v136 = v81;
              sub_1001ED71C(v137, (uint64_t)&v132, isUniquelyReferenced_nonNull_native);
              char v140 = (void *)v136;
              swift_bridgeObjectRelease();
              sub_10019816C((uint64_t)&v132);
              *(void *)&long long v138 = 0x6C5F6E6D6C706865;
              *((void *)&v138 + 1) = 0xEB00000000747369;
              AnyHashable.init<A>(_:)();
              sub_100195B08((uint64_t)&v132, &v138);
              sub_10019816C((uint64_t)&v132);
LABEL_51:
              sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
              return (uint64_t)v140;
            }
            return (uint64_t)v32;
          }
        }
        uint64_t v57 = v138;
        if (*(void *)(v138 + 16) && (unint64_t v58 = sub_1001EB868(4408141, 0xE300000000000000), (v59 & 1) != 0))
        {
          sub_100196D64(*(void *)(v57 + 56) + 32 * v58, (uint64_t)&v132);
          int v60 = swift_dynamicCast();
          if (v60) {
            uint64_t v53 = v138;
          }
          else {
            uint64_t v53 = 0;
          }
          int v56 = v60 ^ 1;
          if (!*(void *)(v57 + 16)) {
            goto LABEL_105;
          }
        }
        else
        {
          uint64_t v53 = 0;
          int v56 = 1;
          if (!*(void *)(v57 + 16)) {
            goto LABEL_105;
          }
        }
        unint64_t v61 = sub_1001EB868(4410957, 0xE300000000000000);
        if (v62)
        {
          sub_100196D64(*(void *)(v57 + 56) + 32 * v61, (uint64_t)&v132);
          goto LABEL_106;
        }
LABEL_105:
        long long v132 = 0u;
        long long v133 = 0u;
LABEL_106:
        swift_bridgeObjectRelease();
        if (*((void *)&v133 + 1))
        {
          int v63 = swift_dynamicCast();
          if (v63) {
            uint64_t v52 = v138;
          }
          else {
            uint64_t v52 = 0;
          }
          int v55 = v63 ^ 1;
        }
        else
        {
          sub_10015D658((uint64_t)&v132, (uint64_t *)&unk_1002D9680);
          uint64_t v52 = 0;
          int v55 = 1;
        }
        goto LABEL_93;
      }
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
    uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
    *(void *)&long long v138 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
    *((void *)&v138 + 1) = v12;
    swift_bridgeObjectRetain_n();
    id v13 = [a2 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v13)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v138 = 0u;
      long long v139 = 0u;
    }
    sub_10015D474((uint64_t)&v138, (uint64_t)&v132, (uint64_t *)&unk_1002D9680);
    if (*((void *)&v133 + 1))
    {
      if (swift_dynamicCast())
      {
        long long v21 = v137[0];
        swift_bridgeObjectRelease();
        v22.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100156FB8(v21, *((unint64_t *)&v21 + 1));
        goto LABEL_48;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10015D658((uint64_t)&v132, (uint64_t *)&unk_1002D9680);
    }
    v22.super.Class isa = 0;
LABEL_48:
    id v31 = [objc_allocWithZone((Class)CellularNrOtaMsg) initWithData:v22.super.isa];

    if (v31)
    {
      uint64_t v32 = [v31 dictionaryRepresentation];

      if (v32)
      {
        uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        char v140 = (void *)v33;
        *(void *)&long long v138 = 0x6E61725F71657266;
        *((void *)&v138 + 1) = 0xEA00000000006567;
        AnyHashable.init<A>(_:)();
        sub_100195B08((uint64_t)&v132, &v138);
        sub_10019816C((uint64_t)&v132);
        sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
        *(void *)&long long v138 = 0x6C6C65635F796870;
        *((void *)&v138 + 1) = 0xEB0000000064695FLL;
        AnyHashable.init<A>(_:)();
        sub_100195B08((uint64_t)&v132, &v138);
        sub_10019816C((uint64_t)&v132);
        sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
        *(void *)&long long v138 = 0x77625F6C64;
        *((void *)&v138 + 1) = 0xE500000000000000;
        AnyHashable.init<A>(_:)();
        sub_100195B08((uint64_t)&v132, &v138);
        sub_10019816C((uint64_t)&v132);
        sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
        strcpy((char *)&v138, "freq_band_ind");
        HIWORD(v138) = -4864;
        AnyHashable.init<A>(_:)();
        sub_100195B08((uint64_t)&v132, &v138);
        sub_10019816C((uint64_t)&v132);
        sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
        *(void *)&long long v138 = 0x77625F6C64;
        *((void *)&v138 + 1) = 0xE500000000000000;
        AnyHashable.init<A>(_:)();
        sub_100195B08((uint64_t)&v132, &v138);
        sub_10019816C((uint64_t)&v132);
        goto LABEL_51;
      }
      return (uint64_t)v32;
    }
    goto LABEL_184;
  }
  if (a1 != 806480)
  {
    if (a1 != 806743) {
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
    *(void *)&long long v138 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
    *((void *)&v138 + 1) = v10;
    swift_bridgeObjectRetain_n();
    id v11 = [a2 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v138 = 0u;
      long long v139 = 0u;
    }
    sub_10015D474((uint64_t)&v138, (uint64_t)&v132, (uint64_t *)&unk_1002D9680);
    if (*((void *)&v133 + 1))
    {
      if (swift_dynamicCast())
      {
        long long v29 = v137[0];
        swift_bridgeObjectRelease();
        v30.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100156FB8(v29, *((unint64_t *)&v29 + 1));
        goto LABEL_82;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10015D658((uint64_t)&v132, (uint64_t *)&unk_1002D9680);
    }
    v30.super.Class isa = 0;
LABEL_82:
    id v49 = [objc_allocWithZone((Class)CellularLteConnectionStats) initWithData:v30.super.isa];

    if (v49)
    {
      id v42 = [v49 dictionaryRepresentation];

      if (!v42) {
        return 0;
      }
      goto LABEL_84;
    }
    goto LABEL_188;
  }
  unint64_t v16 = sub_1001E03F0((uint64_t)_swiftEmptyArrayStorage);
  char v140 = (void *)v16;
  uint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
  uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
  *(void *)&long long v138 = v17;
  *((void *)&v138 + 1) = v18;
  swift_bridgeObjectRetain_n();
  id v19 = [a2 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v138 = 0u;
    long long v139 = 0u;
  }
  sub_10015D474((uint64_t)&v138, (uint64_t)&v132, (uint64_t *)&unk_1002D9680);
  if (*((void *)&v133 + 1))
  {
    if (swift_dynamicCast())
    {
      long long v27 = v137[0];
      swift_bridgeObjectRelease();
      v28.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100156FB8(v27, *((unint64_t *)&v27 + 1));
      goto LABEL_71;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10015D658((uint64_t)&v132, (uint64_t *)&unk_1002D9680);
  }
  v28.super.Class isa = 0;
LABEL_71:
  id v43 = [objc_allocWithZone((Class)CellularLteCellMetric) initWithData:v28.super.isa];

  if (v43)
  {
    id v44 = [v43 dictionaryRepresentation];

    if (!v44) {
      goto LABEL_79;
    }
    uint64_t v45 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v138 = 0x64695F73627573;
    *((void *)&v138 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v45 + 16) && (unint64_t v46 = sub_1001EB8E0((uint64_t)&v132), (v47 & 1) != 0))
    {
      sub_100196D64(*(void *)(v45 + 56) + 32 * v46, (uint64_t)&v138);
    }
    else
    {
      long long v138 = 0u;
      long long v139 = 0u;
    }
    sub_10019816C((uint64_t)&v132);
    if (*((void *)&v139 + 1))
    {
      sub_100197FC0(&v138, v137);
      char v48 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v136 = v16;
      sub_1001ED5C8(v137, 0x64695F73627573, 0xE700000000000000, v48);
      char v140 = (void *)v136;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
      sub_100195A04(0x64695F73627573, 0xE700000000000000, v137);
      sub_10015D658((uint64_t)v137, (uint64_t *)&unk_1002D9680);
    }
    *(void *)&long long v138 = 0x6D617473656D6974;
    *((void *)&v138 + 1) = 0xE900000000000070;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v45 + 16) && (unint64_t v64 = sub_1001EB8E0((uint64_t)&v132), (v65 & 1) != 0))
    {
      sub_100196D64(*(void *)(v45 + 56) + 32 * v64, (uint64_t)&v138);
    }
    else
    {
      long long v138 = 0u;
      long long v139 = 0u;
    }
    sub_10019816C((uint64_t)&v132);
    if (*((void *)&v139 + 1))
    {
      sub_100197FC0(&v138, v137);
      uint64_t v66 = (uint64_t)v140;
      char v67 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v136 = v66;
      sub_1001ED5C8(v137, 0x6D617473656D6974, 0xE900000000000070, v67);
      char v140 = (void *)v136;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
      sub_100195A04(0x6D617473656D6974, 0xE900000000000070, v137);
      sub_10015D658((uint64_t)v137, (uint64_t *)&unk_1002D9680);
    }
    unint64_t v68 = sub_1001C93A0(v45);
    swift_bridgeObjectRelease();
    if (!v68) {
      goto LABEL_178;
    }
    if (*(void *)(v68 + 16) && (unint64_t v69 = sub_1001EB868(0x7274656D5F65746CLL, 0xEB00000000736369), (v70 & 1) != 0))
    {
      sub_100196D64(*(void *)(v68 + 56) + 32 * v69, (uint64_t)&v132);
    }
    else
    {
      long long v132 = 0u;
      long long v133 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v133 + 1))
    {
      sub_100157064(&qword_1002DAE88);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_178;
      }
      if (*(void *)(v138 + 16))
      {
        uint64_t v71 = *(void *)(v138 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (*(void *)(v71 + 16) && (unint64_t v72 = sub_1001EB868(1819043171, 0xE400000000000000), (v73 & 1) != 0))
        {
          sub_100196D64(*(void *)(v71 + 56) + 32 * v72, (uint64_t)&v132);
        }
        else
        {
          long long v132 = 0u;
          long long v133 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v133 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v83 = v138;
            uint64_t v130 = *(void *)(v138 + 16);
            if (v130)
            {
              unint64_t v84 = 0;
              uint64_t v129 = v138 + 32;
              uint64_t v128 = v138;
              while (1)
              {
                if (v84 >= *(void *)(v83 + 16))
                {
                  __break(1u);
LABEL_184:
                  __break(1u);
                  goto LABEL_185;
                }
                uint64_t v85 = *(void *)(v129 + 8 * v84);
                uint64_t v86 = *(void *)(v85 + 16);
                swift_bridgeObjectRetain();
                *(void *)&long long v131 = v84;
                if (v86
                  && (unint64_t v87 = sub_1001EB868(1684955490, 0xE400000000000000), (v88 & 1) != 0)
                  && (sub_100196D64(*(void *)(v85 + 56) + 32 * v87, (uint64_t)&v132), swift_dynamicCast()))
                {
                  uint64_t v89 = v138;
                }
                else
                {
                  uint64_t v89 = 0;
                }
                uint64_t v90 = -1 << *(unsigned char *)(v85 + 32);
                uint64_t v91 = *(void *)(v85 + 64);
                uint64_t v92 = ~v90;
                uint64_t v93 = -v90;
                *(void *)&long long v132 = v85;
                *((void *)&v132 + 1) = v85 + 64;
                uint64_t v94 = v93 < 64 ? ~(-1 << v93) : -1;
                long long v133 = (unint64_t)v92;
                uint64_t v134 = v94 & v91;
                uint64_t v135 = 0;
                swift_bridgeObjectRetain();
                sub_1001C3E6C();
                if (v96) {
                  break;
                }
LABEL_139:
                unint64_t v84 = v131 + 1;
                sub_1001B6994();
                swift_bridgeObjectRelease();
                uint64_t v83 = v128;
                if ((void)v131 + 1 == v130) {
                  goto LABEL_179;
                }
              }
              uint64_t v97 = v95;
              uint64_t v98 = v96;
              while (1)
              {
                *(void *)&long long v138 = v89;
                *(void *)&long long v138 = dispatch thunk of CustomStringConvertible.description.getter();
                *((void *)&v138 + 1) = v102;
                swift_bridgeObjectRetain();
                v103._uint64_t countAndFlagsBits = 45;
                v103._object = (void *)0xE100000000000000;
                String.append(_:)(v103);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v104._uint64_t countAndFlagsBits = 0x6E6F6974636573;
                v104._object = (void *)0xE700000000000000;
                String.append(_:)(v104);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v105._uint64_t countAndFlagsBits = 45;
                v105._object = (void *)0xE100000000000000;
                String.append(_:)(v105);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v106._uint64_t countAndFlagsBits = v97;
                v106._object = v98;
                String.append(_:)(v106);
                swift_bridgeObjectRelease();
                unint64_t v6 = (void *)*((void *)&v138 + 1);
                int64_t v7 = (void *)v138;
                if (*(void *)(v85 + 16) && (unint64_t v107 = sub_1001EB868(v97, (uint64_t)v98), (v108 & 1) != 0))
                {
                  sub_100196D64(*(void *)(v85 + 56) + 32 * v107, (uint64_t)&v138);
                }
                else
                {
                  long long v138 = 0u;
                  long long v139 = 0u;
                }
                swift_bridgeObjectRelease();
                if (!*((void *)&v139 + 1))
                {
                  sub_10015D658((uint64_t)&v138, (uint64_t *)&unk_1002D9680);
                  uint64_t v119 = (uint64_t)v140;
                  swift_bridgeObjectRetain();
                  unint64_t v120 = sub_1001EB868((uint64_t)v7, (uint64_t)v6);
                  char v122 = v121;
                  swift_bridgeObjectRelease();
                  if (v122)
                  {
                    char v123 = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v136 = v119;
                    if ((v123 & 1) == 0)
                    {
                      sub_1001EE344();
                      uint64_t v119 = v136;
                    }
                    swift_bridgeObjectRelease();
                    sub_100197FC0((_OWORD *)(*(void *)(v119 + 56) + 32 * v120), v137);
                    sub_1001FB424(v120, v119);
                    char v140 = (void *)v119;
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    memset(v137, 0, sizeof(v137));
                  }
                  swift_bridgeObjectRelease();
                  sub_10015D658((uint64_t)v137, (uint64_t *)&unk_1002D9680);
                  goto LABEL_153;
                }
                sub_100197FC0(&v138, v137);
                uint64_t v109 = (uint64_t)v140;
                a1 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v136 = v109;
                unint64_t v111 = sub_1001EB868((uint64_t)v7, (uint64_t)v6);
                uint64_t v112 = *(void *)(v109 + 16);
                BOOL v113 = (v110 & 1) == 0;
                uint64_t v114 = v112 + v113;
                if (__OFADD__(v112, v113))
                {
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  swift_once();
LABEL_20:
                  static os_log_type_t.default.getter();
                  uint64_t v20 = swift_allocObject();
                  *(_OWORD *)(v20 + 16) = v131;
                  *(void *)(v20 + 56) = v6;
                  *(void *)(v20 + 64) = v7;
                  *(void *)(v20 + 32) = a1;
                  os_log(_:dso:log:type:_:)();
LABEL_79:
                  swift_bridgeObjectRelease();
                  return 0;
                }
                char v115 = v110;
                if (*(void *)(v109 + 24) >= v114)
                {
                  if (a1)
                  {
                    char v118 = (void *)v136;
                    if ((v110 & 1) == 0) {
                      goto LABEL_170;
                    }
                  }
                  else
                  {
                    sub_1001EE344();
                    char v118 = (void *)v136;
                    if ((v115 & 1) == 0) {
                      goto LABEL_170;
                    }
                  }
                }
                else
                {
                  sub_1001EBFC8(v114, a1);
                  unint64_t v116 = sub_1001EB868((uint64_t)v7, (uint64_t)v6);
                  if ((v115 & 1) != (v117 & 1)) {
                    goto LABEL_189;
                  }
                  unint64_t v111 = v116;
                  char v118 = (void *)v136;
                  if ((v115 & 1) == 0)
                  {
LABEL_170:
                    v118[(v111 >> 6) + 8] |= 1 << v111;
                    char v124 = (void *)(v118[6] + 16 * v111);
                    *char v124 = v7;
                    v124[1] = v6;
                    sub_100197FC0(v137, (_OWORD *)(v118[7] + 32 * v111));
                    uint64_t v125 = v118[2];
                    BOOL v126 = __OFADD__(v125, 1);
                    uint64_t v127 = v125 + 1;
                    if (v126) {
                      goto LABEL_181;
                    }
                    v118[2] = v127;
                    swift_bridgeObjectRetain();
                    goto LABEL_152;
                  }
                }
                uint64_t v99 = (_OWORD *)(v118[7] + 32 * v111);
                sub_100157190((uint64_t)v99);
                sub_100197FC0(v137, v99);
LABEL_152:
                char v140 = v118;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_153:
                sub_1001C3E6C();
                uint64_t v97 = v100;
                uint64_t v98 = v101;
                if (!v101) {
                  goto LABEL_139;
                }
              }
            }
LABEL_179:
            swift_bridgeObjectRelease();
          }
LABEL_178:
          uint64_t v32 = (void *)sub_1001C7834((uint64_t)v140);
          swift_bridgeObjectRelease();
          return (uint64_t)v32;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        long long v132 = 0u;
        long long v133 = 0u;
      }
    }
    sub_10015D658((uint64_t)&v132, (uint64_t *)&unk_1002D9680);
    goto LABEL_178;
  }
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_1001C93A0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100157064((uint64_t *)&unk_1002DAA00);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        sub_1001B6994();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_1001CADF8(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    sub_100196D64(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    sub_1001CADF8((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      sub_10015D658((uint64_t)v30, &qword_1002DAEA0);
      swift_bridgeObjectRelease();
      sub_1001B6994();
      swift_release();
      return 0;
    }
    sub_100196D64((uint64_t)v31 + 8, (uint64_t)v25);
    sub_10015D658((uint64_t)v30, &qword_1002DAEA0);
    sub_100197FC0(v25, v26);
    long long v27 = v24;
    sub_100197FC0(v26, v28);
    long long v16 = v27;
    sub_100197FC0(v28, v29);
    sub_100197FC0(v29, &v27);
    unint64_t result = sub_1001EB868(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      uint64_t v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v8 = v16;
      id v9 = (_OWORD *)(v2[7] + 32 * v17);
      sub_100157190((uint64_t)v9);
      unint64_t result = (unint64_t)sub_100197FC0(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)sub_100197FC0(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1001C9774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  v11[1] = 0x6D617473656D6974;
  v11[2] = 0xE900000000000070;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v8 = sub_1001EB8E0((uint64_t)v12), (v9 & 1) != 0))
  {
    sub_100196D64(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v13);
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
  }
  sub_10019816C((uint64_t)v12);
  if (!*((void *)&v14 + 1)) {
    return sub_10015D658((uint64_t)&v13, (uint64_t *)&unk_1002D9680);
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    Date.init(timeIntervalSince1970:)();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  }
  return result;
}

uint64_t sub_1001C993C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v137 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(char **)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for UUID();
  char v9 = *(unsigned char **)(v125 - 8);
  __chkstk_darwin(v125);
  unint64_t v11 = (const mach_header_64 *)((char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v124 = (int *)type metadata accessor for Metric(0);
  uint64_t v12 = __chkstk_darwin(v124);
  uint64_t v123 = (uint64_t)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v141 = (uint64_t)&v108 - v14;
  *(void *)&v153[0] = 0x64695F73627573;
  *((void *)&v153[0] + 1) = 0xE700000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    unint64_t v15 = sub_1001EB8E0((uint64_t)v162);
    if (v16)
    {
      sub_100196D64(*(void *)(a1 + 56) + 32 * v15, (uint64_t)&v159);
    }
    else
    {
      long long v159 = 0u;
      long long v160 = 0u;
    }
  }
  else
  {
    long long v159 = 0u;
    long long v160 = 0u;
  }
  sub_10019816C((uint64_t)v162);
  if (!*((void *)&v160 + 1)) {
    return sub_10015D658((uint64_t)&v159, (uint64_t *)&unk_1002D9680);
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    BOOL v126 = a2;
    uint64_t v119 = v5;
    int v18 = v153[0];
    if (qword_1002D7AB0 != -1) {
      goto LABEL_96;
    }
LABEL_9:
    static os_log_type_t.default.getter();
    uint64_t v146 = sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v19 = swift_allocObject();
    long long v108 = xmmword_100267EF0;
    *(_OWORD *)(v19 + 16) = xmmword_100267EF0;
    *(void *)(v19 + 56) = &type metadata for Int32;
    *(void *)(v19 + 64) = &protocol witness table for Int32;
    int v142 = v18;
    *(_DWORD *)(v19 + 32) = v18;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(a1 + 64);
    uint64_t v120 = a1 + 64;
    uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = -1;
    if (v21 < 64) {
      uint64_t v22 = ~(-1 << v21);
    }
    uint64_t v145 = v22 & v20;
    int64_t v121 = (unint64_t)(v21 + 63) >> 6;
    unint64_t v116 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    char v117 = v126 + 1;
    BOOL v113 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v114 = (void (**)(uint64_t, const mach_header_64 *, uint64_t))(v9 + 16);
    uint64_t v112 = (void (**)(const mach_header_64 *, uint64_t))(v9 + 8);
    swift_bridgeObjectRetain();
    int64_t v23 = 0;
    char v122 = (char *)&type metadata for Any + 8;
    uint64_t v6 = (char *)&type metadata for Int;
    long long v110 = xmmword_10026AD10;
    long long v111 = xmmword_100269B60;
    long long v139 = xmmword_100269B50;
    long long v109 = xmmword_100269950;
    char v9 = v158;
    char v118 = v8;
    uint64_t v144 = v11;
    unint64_t v11 = &_mh_execute_header;
    unint64_t v8 = (char *)&type metadata for String;
    uint64_t v115 = a1;
    unint64_t v24 = v145;
    if (!v145)
    {
LABEL_15:
      int64_t v26 = v23 + 1;
      int v18 = v146;
      if (__OFADD__(v23, 1)) {
        goto LABEL_95;
      }
      if (v26 >= v121) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v120 + 8 * v26);
      ++v23;
      if (v27) {
        goto LABEL_32;
      }
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v121) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v120 + 8 * v23);
      if (v27) {
        goto LABEL_32;
      }
      int64_t v23 = v26 + 2;
      if (v26 + 2 >= v121) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v120 + 8 * v23);
      if (v27) {
        goto LABEL_32;
      }
      int64_t v23 = v26 + 3;
      if (v26 + 3 >= v121) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v120 + 8 * v23);
      if (v27) {
        goto LABEL_32;
      }
      int64_t v23 = v26 + 4;
      if (v26 + 4 >= v121) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v120 + 8 * v23);
      if (v27)
      {
LABEL_32:
        uint64_t v145 = (v27 - 1) & v27;
        unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
        goto LABEL_33;
      }
      int64_t v28 = v26 + 5;
      if (v28 >= v121) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v120 + 8 * v28);
      if (v27)
      {
        int64_t v23 = v28;
        goto LABEL_32;
      }
      while (1)
      {
        int64_t v23 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          break;
        }
        if (v23 >= v121) {
          return swift_release();
        }
        unint64_t v27 = *(void *)(v120 + 8 * v23);
        ++v28;
        if (v27) {
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    while (1)
    {
      uint64_t v145 = (v24 - 1) & v24;
      unint64_t v25 = __clz(__rbit64(v24)) | (v23 << 6);
      int v18 = v146;
LABEL_33:
      sub_1001CADF8(*(void *)(a1 + 48) + 40 * v25, (uint64_t)v162);
      long long v159 = v162[0];
      long long v160 = v162[1];
      uint64_t v161 = v163;
      if (*(void *)(a1 + 16) && (unint64_t v29 = sub_1001EB8E0((uint64_t)&v159), (v30 & 1) != 0)) {
        sub_100196D64(*(void *)(a1 + 56) + 32 * v29, (uint64_t)v158);
      }
      else {
        memset(v158, 0, sizeof(v158));
      }
      sub_10015D5F4((uint64_t)v158, (uint64_t)v157, (uint64_t *)&unk_1002D9680);
      if (!v157[3]) {
        goto LABEL_85;
      }
      sub_10015D5F4((uint64_t)v157, (uint64_t)v156, (uint64_t *)&unk_1002D9680);
      int v31 = swift_dynamicCast();
      int64_t v140 = v23;
      if (v31)
      {
        *(void *)&unsigned long long v147 = *(void *)&v153[0];
        uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_42:
        uint64_t v34 = v32;
        unint64_t v35 = v33;
        unint64_t v36 = 0xE300000000000000;
        uint64_t v143 = 5525065;
LABEL_43:
        char v37 = &unk_1002E3000;
        goto LABEL_44;
      }
      if (swift_dynamicCast())
      {
        uint64_t v32 = Float.description.getter();
        goto LABEL_42;
      }
      if (swift_dynamicCast())
      {
        unint64_t v35 = *((void *)&v153[0] + 1);
        uint64_t v83 = *(void *)&v153[0];
        unsigned long long v147 = v153[0];
        *(void *)&long long v151 = 47;
        *((void *)&v151 + 1) = 0xE100000000000000;
        sub_1001571E0();
        char v84 = StringProtocol.contains<A>(_:)();
        uint64_t v138 = v83;
        if (v84)
        {
          unint64_t v36 = 0xE400000000000000;
          uint64_t v143 = 1163149636;
        }
        else
        {
          unsigned long long v147 = __PAIR128__(v35, v83);
          *(void *)&long long v151 = 58;
          *((void *)&v151 + 1) = 0xE100000000000000;
          char v88 = StringProtocol.contains<A>(_:)();
          uint64_t v89 = 1163149636;
          if ((v88 & 1) == 0) {
            uint64_t v89 = 0x474E49525453;
          }
          uint64_t v143 = v89;
          if (v88) {
            unint64_t v36 = 0xE400000000000000;
          }
          else {
            unint64_t v36 = 0xE600000000000000;
          }
        }
        char v37 = (void *)&unk_1002E3000;
        uint64_t v34 = v138;
LABEL_44:
        sub_100157190((uint64_t)v156);
        sub_10015D658((uint64_t)v157, (uint64_t *)&unk_1002D9680);
        v38.Class isa = AnyHashable._bridgeToObjectiveC()().isa;
        self;
        uint64_t v138 = swift_dynamicCastObjCClassUnconditional();
        uint64_t v39 = HIBYTE(v35) & 0xF;
        if ((v35 & 0x2000000000000000) == 0) {
          uint64_t v39 = v34 & 0xFFFFFFFFFFFFLL;
        }
        if (!v39 || (v36 & 0xF00000000000000) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)();

          sub_10015D658((uint64_t)v158, (uint64_t *)&unk_1002D9680);
          sub_10019816C((uint64_t)&v159);
          return swift_release();
        }
        if (qword_1002D7B18 != -1) {
          swift_once();
        }
        Class isa = v38.isa;
        int v40 = *(unsigned __int8 *)(qword_1002E31C8 + 24);
        NSString v136 = (NSString)v37[44];
        LODWORD(v135) = static os_log_type_t.default.getter();
        uint64_t v41 = swift_allocObject();
        if (v40 == 1)
        {
          *(_OWORD *)(v41 + 16) = v110;
          id v42 = v126;
          long long v165 = *v126;
          *(void *)(v41 + 56) = &type metadata for String;
          unint64_t v43 = sub_100181588();
          *(void *)(v41 + 64) = v43;
          *(_OWORD *)(v41 + 32) = *v42;
          long long v164 = *v117;
          long long v44 = v164;
          *(void *)(v41 + 96) = &type metadata for String;
          *(void *)(v41 + 104) = v43;
          *(_OWORD *)(v41 + 72) = v44;
          sub_10015D380((uint64_t)&v165);
          sub_10015D380((uint64_t)&v164);
          uint64_t v45 = AnyHashable.description.getter();
          *(void *)(v41 + 136) = &type metadata for String;
          *(void *)(v41 + 144) = v43;
          *(void *)(v41 + 112) = v45;
          *(void *)(v41 + 120) = v46;
          *(void *)(v41 + 176) = &type metadata for String;
          *(void *)(v41 + 184) = v43;
          *(void *)(v41 + 152) = v34;
          *(void *)(v41 + 160) = v35;
          *(void *)(v41 + 216) = &type metadata for String;
          *(void *)(v41 + 224) = v43;
          *(void *)(v41 + 192) = v143;
          *(void *)(v41 + 200) = v36;
          LODWORD(v153[0]) = v142;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v41 + 256) = &type metadata for String;
          *(void *)(v41 + 264) = v43;
          *(void *)(v41 + 232) = v47;
          *(void *)(v41 + 240) = v48;
        }
        else
        {
          *(_OWORD *)(v41 + 16) = v109;
          id v42 = v126;
          long long v167 = *v126;
          *(void *)(v41 + 56) = &type metadata for String;
          unint64_t v49 = sub_100181588();
          *(void *)(v41 + 64) = v49;
          *(_OWORD *)(v41 + 32) = *v42;
          long long v166 = *v117;
          long long v50 = v166;
          *(void *)(v41 + 96) = &type metadata for String;
          *(void *)(v41 + 104) = v49;
          *(_OWORD *)(v41 + 72) = v50;
          sub_10015D380((uint64_t)&v167);
          sub_10015D380((uint64_t)&v166);
          uint64_t v51 = AnyHashable.description.getter();
          *(void *)(v41 + 136) = &type metadata for String;
          *(void *)(v41 + 144) = v49;
          *(void *)(v41 + 112) = v51;
          *(void *)(v41 + 120) = v52;
        }
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        UUID.init()();
        uint64_t v143 = (uint64_t)String._bridgeToObjectiveC()();
        uint64_t v53 = *((void *)v42 + 2);
        uint64_t v54 = *((void *)v42 + 3);
        int v55 = v42;
        NSString v136 = String._bridgeToObjectiveC()();
        NSString v135 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v132 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v57 = v118;
        uint64_t v56 = v119;
        long long v133 = *v116;
        v133(v118, v137, v119);
        id v58 = [objc_allocWithZone((Class)NSNumber) initWithInteger:*((void *)v55 + 4)];
        id v59 = [v58 stringValue];

        if (!v59) {
          goto LABEL_98;
        }
        uint64_t v60 = v138;
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        int v129 = sub_1001AA4C8(v53, v54, v61, v62);
        swift_bridgeObjectRelease();
        unint64_t v64 = v124;
        uint64_t v63 = v125;
        uint64_t v65 = v124[15];
        uint64_t v127 = v124[14];
        uint64_t v128 = v65;
        uint64_t v66 = v141;
        char v67 = (void *)(v141 + v124[16]);
        *char v67 = 0;
        v67[1] = 0;
        (*v114)(v66, v144, v63);
        uint64_t v130 = v64[5];
        *(void *)(v66 + v130) = v143;
        uint64_t v131 = v64[6];
        *(void *)(v66 + v131) = v136;
        *(void *)(v66 + v64[7]) = v60;
        *(void *)(v66 + v64[8]) = v60;
        *(void *)(v66 + v64[9]) = v135;
        *(void *)(v66 + v64[10]) = v132;
        v133((char *)(v66 + v64[11]), (uint64_t)v57, v56);
        *(void *)(v66 + v64[12]) = v59;
        *(_DWORD *)(v66 + v64[13]) = v142;
        *(unsigned char *)(v66 + v127) = v129 & 1;
        *(unsigned char *)(v66 + v128) = 0;
        unint64_t v68 = *v113;
        uint64_t v143 = isa;
        v68(v57, v56);
        (*v112)(v144, v63);
        swift_bridgeObjectRelease();
        *(_OWORD *)char v67 = v111;
        static os_log_type_t.default.getter();
        uint64_t v69 = swift_allocObject();
        *(_OWORD *)(v69 + 16) = v139;
        char v70 = *(void **)(v66 + v130);
        uint64_t v71 = sub_100167598(0, (unint64_t *)&unk_1002DAE40);
        *(void *)(v69 + 56) = v71;
        uint64_t v72 = sub_100196D14(&qword_1002D9660, (unint64_t *)&unk_1002DAE40);
        *(void *)(v69 + 32) = v70;
        char v73 = *(void **)(v66 + v131);
        *(void *)(v69 + 96) = v71;
        *(void *)(v69 + 104) = v72;
        *(void *)(v69 + 64) = v72;
        *(void *)(v69 + 72) = v73;
        id v74 = v70;
        id v75 = v73;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        uint64_t v76 = v123;
        sub_1001CB884(v66, v123);
        if (qword_1002D7B20 != -1) {
          swift_once();
        }
        id v77 = (id)qword_1002E31D0;
        sub_1001A1330(v66);

        static os_log_type_t.default.getter();
        uint64_t v78 = swift_allocObject();
        *(_OWORD *)(v78 + 16) = v139;
        uint64_t v79 = *(void **)(v76 + v64[5]);
        *(void *)(v78 + 56) = v71;
        *(void *)(v78 + 64) = v72;
        *(void *)(v78 + 32) = v79;
        Swift::String v80 = *(void **)(v76 + v64[6]);
        *(void *)(v78 + 96) = v71;
        *(void *)(v78 + 104) = v72;
        *(void *)(v78 + 72) = v80;
        id v81 = v79;
        id v82 = v80;
        unint64_t v11 = &_mh_execute_header;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
        sub_100196C78(v76);

        sub_100196C78(v141);
        sub_10015D658((uint64_t)v158, (uint64_t *)&unk_1002D9680);
        sub_10019816C((uint64_t)&v159);
        a1 = v115;
        char v9 = v158;
        unint64_t v8 = (char *)&type metadata for String;
        uint64_t v6 = (char *)&type metadata for Int;
        int64_t v23 = v140;
        unint64_t v24 = v145;
        if (!v145) {
          goto LABEL_15;
        }
      }
      else
      {
        sub_100157064(&qword_1002DAE30);
        if (swift_dynamicCast())
        {
          uint64_t v85 = *(char **)&v150[0];
          *(void *)&unsigned long long v147 = 0x64695F73627573;
          *((void *)&v147 + 1) = 0xE700000000000000;
          AnyHashable.init<A>(_:)();
          unint64_t v148 = &type metadata for Int32;
          LODWORD(v147) = v142;
          sub_100197FC0(&v147, &v151);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v155 = v85;
          sub_1001ED71C(&v151, (uint64_t)v153, isUniquelyReferenced_nonNull_native);
          unint64_t v87 = v155;
          swift_bridgeObjectRelease();
          sub_10019816C((uint64_t)v153);
          sub_1001C993C(v87, v126, v137);
          swift_bridgeObjectRelease();
          uint64_t v143 = 0;
          uint64_t v34 = 0;
          unint64_t v36 = 0xE000000000000000;
          unint64_t v35 = 0xE000000000000000;
          goto LABEL_43;
        }
        sub_100157064(&qword_1002DAE38);
        if (swift_dynamicCast())
        {
          uint64_t v6 = v155;
          unint64_t v8 = (char *)*((void *)v155 + 2);
          int v90 = v142;
          if (!v8)
          {
LABEL_89:
            swift_bridgeObjectRelease();
            uint64_t v143 = 0;
            uint64_t v34 = 0;
            unint64_t v36 = 0xE000000000000000;
            unint64_t v35 = 0xE000000000000000;
            char v37 = (void *)&unk_1002E3000;
            goto LABEL_44;
          }
          unint64_t v11 = (const mach_header_64 *)(v155 + 32);
          while (2)
          {
            uint64_t v154 = &_swiftEmptyDictionarySingleton;
            uint64_t v91 = swift_bridgeObjectRetain();
            sub_1001CAE54(v91, (uint64_t *)&v154);
            swift_bridgeObjectRelease();
            *(void *)&unsigned long long v147 = 0x64695F73627573;
            *((void *)&v147 + 1) = 0xE700000000000000;
            AnyHashable.init<A>(_:)();
            uint64_t v152 = &type metadata for Int32;
            LODWORD(v151) = v90;
            sub_100197FC0(&v151, v150);
            uint64_t v92 = v154;
            char v93 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v149 = v92;
            unint64_t v95 = sub_1001EB8E0((uint64_t)v153);
            uint64_t v96 = v92[2];
            BOOL v97 = (v94 & 1) == 0;
            uint64_t v98 = v96 + v97;
            if (__OFADD__(v96, v97))
            {
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              swift_once();
              goto LABEL_9;
            }
            char v9 = v94;
            if (v92[3] >= v98)
            {
              if (v93)
              {
                uint64_t v101 = v149;
                if (v94) {
                  goto LABEL_81;
                }
              }
              else
              {
                sub_1001EE52C();
                uint64_t v101 = v149;
                if (v9) {
                  goto LABEL_81;
                }
              }
            }
            else
            {
              sub_1001EC2C8(v98, v93);
              unint64_t v99 = sub_1001EB8E0((uint64_t)v153);
              if ((v9 & 1) != (v100 & 1)) {
                goto LABEL_99;
              }
              unint64_t v95 = v99;
              uint64_t v101 = v149;
              if (v9)
              {
LABEL_81:
                uint64_t v102 = (_OWORD *)(v101[7] + 32 * v95);
                sub_100157190((uint64_t)v102);
                sub_100197FC0(v150, v102);
LABEL_73:
                swift_bridgeObjectRelease();
                sub_10019816C((uint64_t)v153);
                sub_1001C993C(v101, v126, v137);
                swift_bridgeObjectRelease();
                unint64_t v11 = (const mach_header_64 *)((char *)v11 + 8);
                --v8;
                int v90 = v142;
                if (!v8) {
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          sub_1001CADF8((uint64_t)v153, (uint64_t)&v147);
          sub_1001EDC50(v95, (uint64_t)&v147, v150, v101);
          goto LABEL_73;
        }
        sub_100157190((uint64_t)v156);
LABEL_85:
        if (qword_1002D7B18 != -1) {
          swift_once();
        }
        if (*(unsigned char *)(qword_1002E31C8 + 24) == 1)
        {
          static os_log_type_t.error.getter();
          int64_t v103 = v23;
          uint64_t v104 = swift_allocObject();
          *(_OWORD *)(v104 + 16) = v108;
          sub_10015D5F4((uint64_t)v158, (uint64_t)v153, (uint64_t *)&unk_1002D9680);
          sub_100157064((uint64_t *)&unk_1002D9680);
          uint64_t v105 = String.init<A>(describing:)();
          uint64_t v107 = v106;
          *(void *)(v104 + 56) = &type metadata for String;
          *(void *)(v104 + 64) = sub_100181588();
          *(void *)(v104 + 32) = v105;
          *(void *)(v104 + 40) = v107;
          char v9 = v158;
          uint64_t v6 = (char *)&type metadata for Int;
          os_log(_:dso:log:type:_:)();
          int64_t v23 = v103;
          swift_bridgeObjectRelease();
        }
        sub_10015D658((uint64_t)v158, (uint64_t *)&unk_1002D9680);
        sub_10019816C((uint64_t)&v159);
        sub_10015D658((uint64_t)v157, (uint64_t *)&unk_1002D9680);
        unint64_t v24 = v145;
        if (!v145) {
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

id sub_1001CABDC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MetricService();
  return [super dealloc];
}

uint64_t type metadata accessor for MetricService()
{
  return self;
}

void *sub_1001CADAC()
{
  int64_t v1 = *v0;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!result)
  {
    uint64_t result = sub_1001EB1C0(result, v1[2] + 1, 1, v1);
    *uint64_t v0 = result;
  }
  return result;
}

uint64_t sub_1001CADF8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001CAE54(uint64_t a1, uint64_t *a2)
{
  if (qword_1002D7AB0 == -1) {
    goto LABEL_2;
  }
LABEL_106:
  swift_once();
LABEL_2:
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v67 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v68 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v69 = a1;
  swift_bridgeObjectRetain();
  int64_t v71 = 0;
LABEL_9:
  if (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v71 << 6);
    goto LABEL_11;
  }
  int64_t v10 = v71 + 1;
  if (__OFADD__(v71, 1)) {
    goto LABEL_103;
  }
  if (v10 >= v68) {
    goto LABEL_29;
  }
  unint64_t v11 = *(void *)(v67 + 8 * v10);
  if (v11) {
    goto LABEL_15;
  }
  int64_t v12 = v71 + 2;
  ++v71;
  if (v10 + 1 >= v68) {
    goto LABEL_29;
  }
  unint64_t v11 = *(void *)(v67 + 8 * v12);
  if (v11) {
    goto LABEL_18;
  }
  int64_t v71 = v10 + 1;
  if (v10 + 2 >= v68) {
    goto LABEL_29;
  }
  unint64_t v11 = *(void *)(v67 + 8 * (v10 + 2));
  if (v11)
  {
    v10 += 2;
LABEL_15:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    int64_t v71 = v10;
LABEL_11:
    sub_1001CADF8(*(void *)(v69 + 48) + 40 * v9, (uint64_t)&v84);
    sub_100196D64(*(void *)(v69 + 56) + 32 * v9, (uint64_t)&v86 + 8);
    goto LABEL_30;
  }
  int64_t v12 = v10 + 3;
  int64_t v71 = v10 + 2;
  if (v10 + 3 >= v68) {
    goto LABEL_29;
  }
  unint64_t v11 = *(void *)(v67 + 8 * v12);
  if (v11)
  {
LABEL_18:
    int64_t v10 = v12;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v10 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v10 >= v68)
    {
      int64_t v71 = v68 - 1;
LABEL_29:
      unint64_t v6 = 0;
      char v88 = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      unsigned long long v84 = 0u;
      long long v85 = 0u;
LABEL_30:
      sub_10015D474((uint64_t)&v84, (uint64_t)&v89, &qword_1002DAE58);
      if (!*((void *)&v90 + 1)) {
        return swift_release();
      }
      v82[0] = v89;
      v82[1] = v90;
      uint64_t v83 = v91;
      sub_100197FC0(v92, v81);
      sub_100196D64((uint64_t)v81, (uint64_t)v80);
      sub_100157064(&qword_1002DAE60);
      if (swift_dynamicCast())
      {
        unint64_t v70 = v6;
        a1 = v79;
        uint64_t v13 = v79 + 64;
        uint64_t v14 = 1 << *(unsigned char *)(v79 + 32);
        if (v14 < 64) {
          uint64_t v15 = ~(-1 << v14);
        }
        else {
          uint64_t v15 = -1;
        }
        unint64_t v16 = v15 & *(void *)(v79 + 64);
        int64_t v17 = (unint64_t)(v14 + 63) >> 6;
        swift_bridgeObjectRetain();
        int64_t v18 = 0;
        uint64_t v72 = _swiftEmptyArrayStorage;
        if (v16)
        {
LABEL_36:
          unint64_t v19 = __clz(__rbit64(v16));
          v16 &= v16 - 1;
          unint64_t v20 = v19 | (v18 << 6);
          goto LABEL_37;
        }
        while (2)
        {
          int64_t v24 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
            goto LABEL_102;
          }
          if (v24 >= v17) {
            goto LABEL_68;
          }
          unint64_t v25 = *(void *)(v13 + 8 * v24);
          ++v18;
          if (v25) {
            goto LABEL_62;
          }
          int64_t v18 = v24 + 1;
          if (v24 + 1 >= v17) {
            goto LABEL_68;
          }
          unint64_t v25 = *(void *)(v13 + 8 * v18);
          if (v25) {
            goto LABEL_62;
          }
          int64_t v18 = v24 + 2;
          if (v24 + 2 >= v17) {
            goto LABEL_68;
          }
          unint64_t v25 = *(void *)(v13 + 8 * v18);
          if (v25) {
            goto LABEL_62;
          }
          int64_t v18 = v24 + 3;
          if (v24 + 3 >= v17) {
            goto LABEL_68;
          }
          unint64_t v25 = *(void *)(v13 + 8 * v18);
          if (v25) {
            goto LABEL_62;
          }
          int64_t v18 = v24 + 4;
          if (v24 + 4 >= v17) {
            goto LABEL_68;
          }
          unint64_t v25 = *(void *)(v13 + 8 * v18);
          if (v25)
          {
LABEL_62:
            unint64_t v16 = (v25 - 1) & v25;
            unint64_t v20 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_37:
            uint64_t v21 = (void *)(*(void *)(a1 + 48) + 16 * v20);
            uint64_t v22 = v21[1];
            uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8 * v20);
            *(void *)&unsigned long long v74 = *v21;
            *((void *)&v74 + 1) = v22;
            swift_bridgeObjectRetain_n();
            AnyHashable.init<A>(_:)();
            char v88 = &type metadata for Int;
            *((void *)&v86 + 1) = v23;
            swift_bridgeObjectRelease();
            if (*((void *)&v85 + 1))
            {
              long long v76 = v86;
              long long v77 = v87;
              uint64_t v78 = v88;
              unsigned long long v74 = v84;
              long long v75 = v85;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v72 = sub_1001EB094(0, v72[2] + 1, 1, v72);
              }
              unint64_t v28 = v72[2];
              unint64_t v27 = v72[3];
              if (v28 >= v27 >> 1) {
                uint64_t v72 = sub_1001EB094((void *)(v27 > 1), v28 + 1, 1, v72);
              }
              v72[2] = v28 + 1;
              unint64_t v29 = &v72[9 * v28];
              *((_OWORD *)v29 + 2) = v74;
              long long v30 = v75;
              long long v31 = v76;
              long long v32 = v77;
              v29[12] = v78;
              *((_OWORD *)v29 + 4) = v31;
              *((_OWORD *)v29 + 5) = v32;
              *((_OWORD *)v29 + 3) = v30;
              if (v16) {
                goto LABEL_36;
              }
            }
            else
            {
              sub_10015D658((uint64_t)&v84, &qword_1002DAE58);
              if (v16) {
                goto LABEL_36;
              }
            }
            continue;
          }
          break;
        }
        int64_t v26 = v24 + 5;
        if (v26 >= v17)
        {
LABEL_68:
          swift_release();
          swift_bridgeObjectRelease();
          if (qword_1002D7B18 != -1) {
            swift_once();
          }
          int v42 = *(unsigned __int8 *)(qword_1002E31C8 + 24);
          a1 = static os_log_type_t.default.getter();
          if (v42 == 1)
          {
            sub_100157064((uint64_t *)&unk_1002D97F0);
            uint64_t v43 = swift_allocObject();
            *(_OWORD *)(v43 + 16) = xmmword_100267EF0;
            *(void *)(v43 + 56) = sub_100157064(&qword_1002DAE68);
            *(void *)(v43 + 64) = sub_1001CB8E8();
            *(void *)(v43 + 32) = v72;
            swift_bridgeObjectRetain();
            os_log(_:dso:log:type:_:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            os_log(_:dso:log:type:_:)();
          }
          uint64_t v47 = v72[2];
          if (v47)
          {
            swift_bridgeObjectRetain();
            uint64_t v48 = (uint64_t)(v72 + 9);
            do
            {
              sub_1001CADF8((uint64_t)v82, (uint64_t)&v84);
              if (swift_dynamicCast())
              {
                unint64_t v49 = *((void *)&v74 + 1);
                a1 = v74;
                sub_1001CADF8(v48 - 40, (uint64_t)&v84);
                if (swift_dynamicCast())
                {
                  uint64_t v51 = (void *)*((void *)&v74 + 1);
                  uint64_t v50 = v74;
                  unsigned long long v84 = __PAIR128__(v49, a1);
                  swift_bridgeObjectRetain();
                  v52._uint64_t countAndFlagsBits = 95;
                  v52._object = (void *)0xE100000000000000;
                  String.append(_:)(v52);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v53._uint64_t countAndFlagsBits = v50;
                  v53._object = v51;
                  String.append(_:)(v53);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unsigned long long v74 = v84;
                  AnyHashable.init<A>(_:)();
                  sub_100196D64(v48, (uint64_t)&v74);
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  a1 = *a2;
                  char v73 = (void *)*a2;
                  *a2 = 0x8000000000000000;
                  unint64_t v56 = sub_1001EB8E0((uint64_t)&v84);
                  uint64_t v57 = *(void *)(a1 + 16);
                  BOOL v58 = (v55 & 1) == 0;
                  uint64_t v59 = v57 + v58;
                  if (__OFADD__(v57, v58)) {
                    goto LABEL_100;
                  }
                  char v60 = v55;
                  if (*(void *)(a1 + 24) >= v59)
                  {
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                      sub_1001EE52C();
                    }
                  }
                  else
                  {
                    sub_1001EC2C8(v59, isUniquelyReferenced_nonNull_native);
                    unint64_t v61 = sub_1001EB8E0((uint64_t)&v84);
                    if ((v60 & 1) != (v62 & 1)) {
                      goto LABEL_108;
                    }
                    unint64_t v56 = v61;
                  }
                  a1 = (uint64_t)v73;
                  if (v60)
                  {
                    uint64_t v63 = (_OWORD *)(v73[7] + 32 * v56);
                    sub_100157190((uint64_t)v63);
                    sub_100197FC0(&v74, v63);
                  }
                  else
                  {
                    v73[(v56 >> 6) + 8] |= 1 << v56;
                    sub_1001CADF8((uint64_t)&v84, v73[6] + 40 * v56);
                    sub_100197FC0(&v74, (_OWORD *)(v73[7] + 32 * v56));
                    uint64_t v64 = v73[2];
                    BOOL v45 = __OFADD__(v64, 1);
                    uint64_t v65 = v64 + 1;
                    if (v45) {
                      goto LABEL_101;
                    }
                    v73[2] = v65;
                  }
                  *a2 = (uint64_t)v73;
                  swift_bridgeObjectRelease();
                  sub_10019816C((uint64_t)&v84);
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
              }
              v48 += 72;
              --v47;
            }
            while (v47);
            swift_bridgeObjectRelease();
          }
          sub_100157190((uint64_t)v81);
          sub_10019816C((uint64_t)v82);
          swift_bridgeObjectRelease();
          unint64_t v6 = v70;
          goto LABEL_8;
        }
        unint64_t v25 = *(void *)(v13 + 8 * v26);
        if (v25)
        {
          int64_t v18 = v26;
          goto LABEL_62;
        }
        while (1)
        {
          int64_t v18 = v26 + 1;
          if (__OFADD__(v26, 1)) {
            break;
          }
          if (v18 >= v17) {
            goto LABEL_68;
          }
          unint64_t v25 = *(void *)(v13 + 8 * v18);
          ++v26;
          if (v25) {
            goto LABEL_62;
          }
        }
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
      sub_1001CADF8((uint64_t)v82, (uint64_t)&v84);
      sub_100196D64((uint64_t)v81, (uint64_t)&v74);
      char v33 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v79 = *a2;
      a1 = v79;
      *a2 = 0x8000000000000000;
      unint64_t v35 = sub_1001EB8E0((uint64_t)&v84);
      uint64_t v36 = *(void *)(a1 + 16);
      BOOL v37 = (v34 & 1) == 0;
      uint64_t v38 = v36 + v37;
      if (__OFADD__(v36, v37))
      {
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
        goto LABEL_104;
      }
      char v39 = v34;
      if (*(void *)(a1 + 24) >= v38)
      {
        if (v33)
        {
          a1 = v79;
          if ((v34 & 1) == 0) {
            goto LABEL_74;
          }
        }
        else
        {
          sub_1001EE52C();
          a1 = v79;
          if ((v39 & 1) == 0) {
            goto LABEL_74;
          }
        }
      }
      else
      {
        sub_1001EC2C8(v38, v33);
        unint64_t v40 = sub_1001EB8E0((uint64_t)&v84);
        if ((v39 & 1) != (v41 & 1)) {
          goto LABEL_108;
        }
        unint64_t v35 = v40;
        a1 = v79;
        if ((v39 & 1) == 0)
        {
LABEL_74:
          *(void *)(a1 + 8 * (v35 >> 6) + 64) |= 1 << v35;
          sub_1001CADF8((uint64_t)&v84, *(void *)(a1 + 48) + 40 * v35);
          sub_100197FC0(&v74, (_OWORD *)(*(void *)(a1 + 56) + 32 * v35));
          uint64_t v44 = *(void *)(a1 + 16);
          BOOL v45 = __OFADD__(v44, 1);
          uint64_t v46 = v44 + 1;
          if (v45) {
            goto LABEL_105;
          }
          *(void *)(a1 + 16) = v46;
          goto LABEL_7;
        }
      }
      uint64_t v7 = (_OWORD *)(*(void *)(a1 + 56) + 32 * v35);
      sub_100157190((uint64_t)v7);
      sub_100197FC0(&v74, v7);
LABEL_7:
      *a2 = a1;
      swift_bridgeObjectRelease();
      sub_10019816C((uint64_t)&v84);
      sub_100157190((uint64_t)v81);
      sub_10019816C((uint64_t)v82);
LABEL_8:
      sub_100157190((uint64_t)v80);
      goto LABEL_9;
    }
    unint64_t v11 = *(void *)(v67 + 8 * v10);
    ++v12;
    if (v11) {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_108:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CB884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Metric(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001CB8E8()
{
  unint64_t result = qword_1002DAE70;
  if (!qword_1002DAE70)
  {
    sub_100157104(&qword_1002DAE68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DAE70);
  }
  return result;
}

void sub_1001CB944(long long *a1)
{
  id v2 = [self defaultCenter];
  if (qword_1002D7AD0 != -1) {
    swift_once();
  }
  uint64_t v3 = static NSNotificationName.NewABMMetric;
  sub_100157064(&qword_1002D9618);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100267EF0;
  strcpy((char *)&v10, "metricObject");
  BYTE13(v10) = 0;
  HIWORD(v10) = -5120;
  AnyHashable.init<A>(_:)();
  long long v5 = *a1;
  long long v9 = a1[1];
  long long v10 = v5;
  *(void *)(inited + 96) = &type metadata for MetricNotificationObject;
  uint64_t v6 = swift_allocObject();
  *(void *)(inited + 72) = v6;
  *(_DWORD *)(v6 + 48) = *((_DWORD *)a1 + 8);
  long long v7 = a1[1];
  *(_OWORD *)(v6 + 16) = *a1;
  *(_OWORD *)(v6 + 32) = v7;
  sub_10015D380((uint64_t)&v10);
  sub_10015D380((uint64_t)&v9);
  sub_1001E02AC(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 postNotificationName:v3 object:0 userInfo:isa];
}

uint64_t sub_1001CBADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = a2 == 0x3243303443 && a3 == 0xE500000000000000;
  if (v3 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    AnyHashable.init<A>(_:)();
    long long v5 = 0u;
    long long v6 = 0u;
    sub_10018DD4C((uint64_t)&v5, (uint64_t)v7);
    *(void *)&long long v5 = 0x77625F6C75;
    *((void *)&v5 + 1) = 0xE500000000000000;
    AnyHashable.init<A>(_:)();
    long long v5 = 0u;
    long long v6 = 0u;
    return sub_10018DD4C((uint64_t)&v5, (uint64_t)v7);
  }
  return result;
}

uint64_t sub_1001CBBD0(uint64_t result, char a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = result + 32;
    uint64_t v49 = result;
    swift_bridgeObjectRetain();
    sub_10015D5F4(v6, (uint64_t)&v46, &qword_1002D96A8);
    uint64_t v8 = v46;
    uint64_t v7 = v47;
    sub_100197FC0(v48, v45);
    long long v9 = (void *)*a3;
    unint64_t v11 = sub_1001EB868(v8, v7);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    char v15 = v10;
    if (v9[3] < v14)
    {
      sub_1001EBFC8(v14, a2 & 1);
      unint64_t v16 = sub_1001EB868(v8, v7);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_28:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v11 = v16;
      if ((v15 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      int64_t v18 = (void *)*a3;
      sub_100197FC0(v45, v44);
      swift_bridgeObjectRelease();
      unint64_t v19 = (_OWORD *)(v18[7] + 32 * v11);
      sub_100157190((uint64_t)v19);
      sub_100197FC0(v44, v19);
      uint64_t v20 = v3 - 1;
      if (v3 == 1) {
        return swift_bridgeObjectRelease();
      }
LABEL_16:
      for (uint64_t i = v49 + 80; ; i += 48)
      {
        sub_10015D5F4(i, (uint64_t)&v46, &qword_1002D96A8);
        uint64_t v30 = v46;
        uint64_t v29 = v47;
        sub_100197FC0(v48, v45);
        long long v31 = (void *)*a3;
        unint64_t v33 = sub_1001EB868(v30, v29);
        uint64_t v34 = v31[2];
        BOOL v35 = (v32 & 1) == 0;
        uint64_t v36 = v34 + v35;
        if (__OFADD__(v34, v35)) {
          break;
        }
        char v37 = v32;
        if (v31[3] < v36)
        {
          sub_1001EBFC8(v36, 1);
          unint64_t v38 = sub_1001EB868(v30, v29);
          if ((v37 & 1) != (v39 & 1)) {
            goto LABEL_28;
          }
          unint64_t v33 = v38;
        }
        if (v37)
        {
          unint64_t v27 = (void *)*a3;
          sub_100197FC0(v45, v44);
          swift_bridgeObjectRelease();
          unint64_t v28 = (_OWORD *)(v27[7] + 32 * v33);
          sub_100157190((uint64_t)v28);
          sub_100197FC0(v44, v28);
        }
        else
        {
          unint64_t v40 = (void *)*a3;
          *(void *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
          char v41 = (uint64_t *)(v40[6] + 16 * v33);
          *char v41 = v30;
          v41[1] = v29;
          sub_100197FC0(v45, (_OWORD *)(v40[7] + 32 * v33));
          uint64_t v42 = v40[2];
          BOOL v24 = __OFADD__(v42, 1);
          uint64_t v43 = v42 + 1;
          if (v24) {
            goto LABEL_27;
          }
          _OWORD v40[2] = v43;
        }
        if (!--v20) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_26;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_1001EE344();
      if (v15) {
        goto LABEL_9;
      }
    }
LABEL_12:
    uint64_t v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v22 = (uint64_t *)(v21[6] + 16 * v11);
    *uint64_t v22 = v8;
    v22[1] = v7;
    sub_100197FC0(v45, (_OWORD *)(v21[7] + 32 * v11));
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    void v21[2] = v25;
    uint64_t v20 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1001CBEC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001CBF20(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001CBF78()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 52, 7);
}

uint64_t sub_1001CBFB8(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  long long v9 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v8 << 6))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v13 = v12[1];
    if (v13)
    {
      uint64_t v20 = *v12;
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1001EABC4(0, v9[2] + 1, 1, v9);
        long long v9 = (void *)result;
      }
      unint64_t v18 = v9[2];
      unint64_t v17 = v9[3];
      if (v18 >= v17 >> 1)
      {
        uint64_t result = (uint64_t)sub_1001EABC4((void *)(v17 > 1), v18 + 1, 1, v9);
        long long v9 = (void *)result;
      }
      _OWORD v9[2] = v18 + 1;
      unint64_t v19 = &v9[2 * v18];
      v19[4] = v20;
      v19[5] = v13;
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v14 >= v6) {
      goto LABEL_29;
    }
    unint64_t v15 = *(void *)(v2 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v2 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v15 = *(void *)(v2 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v15 = *(void *)(v2 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v15 = *(void *)(v2 + 8 * v16);
  if (v15)
  {
    int64_t v8 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v15 = *(void *)(v2 + 8 * v8);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1001CC1AC(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        int64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        int64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_1001D23F4(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        unint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              unint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        unint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = (uint64_t)sub_1001D230C(result, a2, 10);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_1001CC3FC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1001B4A90(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      char v9 = &v5[5 * a1];
      long long v10 = v9[2];
      v9 += 2;
      int v11 = *((_DWORD *)v9 + 8);
      long long v13 = v9[1];
      uint64_t result = (uint64_t)memmove(v9, (char *)v9 + 40, 40 * v8);
      uint64_t v5[2] = v7;
      *uint64_t v2 = v5;
      *(_OWORD *)a2 = v10;
      *(_OWORD *)(a2 + 16) = v13;
      *(_DWORD *)(a2 + 32) = v11;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CC4FC(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1001B4AB8(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      unint64_t v7 = &v3[a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 5, 8 * v6);
      v3[2] = v5;
      void *v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CC5D0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_1001B4AE0(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(type metadata accessor for Metric(0) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  uint64_t result = sub_1001D5AB4(v10, a2, type metadata accessor for Metric);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_1001CC758()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner);
}

uint64_t sub_1001CC768()
{
  id v1 = [self defaultCenter];
  if (qword_1002D7B00 != -1) {
    swift_once();
  }
  [v1 removeObserver:v0 name:static NSNotificationName.isAirPlaneModeEnabled object:0];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = v0 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn;
  uint64_t v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t sub_1001CC880()
{
  sub_1001CC768();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1001CC8D8()
{
  return type metadata accessor for MetricDetailViewModel();
}

uint64_t type metadata accessor for MetricDetailViewModel()
{
  uint64_t result = qword_1002DAF00;
  if (!qword_1002DAF00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001CC92C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Metric(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v87 = (uint64_t)v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100157064(&qword_1002DB170);
  unint64_t v84 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v82 = (char *)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100157064(&qword_1002DB178);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  long long v85 = (char *)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v13 = (void *)((char *)v75 - v12);
  uint64_t v14 = sub_100157064(&qword_1002D8210);
  __chkstk_darwin(v14 - 8);
  unsigned int v16 = (char *)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  long long v77 = (void (*)(char *, uint64_t))((char *)v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v78 = (char *)v75 - v22;
  __chkstk_darwin(v21);
  uint64_t v83 = (char *)v75 - v23;
  uint64_t v24 = type metadata accessor for MetricDetailViewModel();
  uint64_t v79 = sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
  uint64_t v80 = v24;
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  *(void *)(v2 + 16) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  long long v90 = (char *)a1;
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v88 = v4;
  uint64_t v86 = v5;
  uint64_t v81 = v2;
  if (v25)
  {
    uint64_t v26 = a1 + *(int *)(v4 + 44);
    unint64_t v76 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
    v27(v16, v26 + v76, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      v75[0] = v27;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v83, v16, v17);
      v75[1] = a1;
      swift_bridgeObjectRetain();
      unint64_t v28 = v78;
      Date.init()();
      uint64_t v29 = (char *)v77;
      sub_10018CF4C((uint64_t)v77);
      uint64_t v30 = *(void (**)(char *, uint64_t))(v18 + 8);
      v30(v28, v17);
      char v31 = static Date.< infix(_:_:)();
      long long v77 = v30;
      v30(v29, v17);
      char v32 = (void (**)(uint64_t, char *, uint64_t))(v18 + 40);
      if (v31)
      {
        unint64_t v33 = v83;
        ((void (*)(char *, char *, uint64_t))v75[0])(v28, v83, v17);
        uint64_t v34 = v81;
        ObservableObject<>.objectWillChange.getter();
        ObservableObjectPublisher.send()();
        swift_release();
        uint64_t v35 = v34 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn;
        swift_beginAccess();
        (*v32)(v35, v28, v17);
        swift_endAccess();
        v77(v33, v17);
      }
      else
      {
        Date.init()();
        uint64_t v38 = v81;
        ObservableObject<>.objectWillChange.getter();
        ObservableObjectPublisher.send()();
        swift_release();
        uint64_t v39 = v38 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn;
        swift_beginAccess();
        (*v32)(v39, v28, v17);
        swift_endAccess();
        v77(v83, v17);
      }
      uint64_t v36 = v88;
      unint64_t v37 = v84;
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  swift_bridgeObjectRetain();
  sub_10015D658((uint64_t)v16, &qword_1002D8210);
  uint64_t v36 = v88;
  unint64_t v37 = v84;
  if (v25)
  {
LABEL_10:
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1001CD470((uint64_t *)&v90, v40, v41);
    swift_bridgeObjectRelease();
  }
  unint64_t v42 = *((void *)v90 + 2);
  uint64_t v83 = v90;
  unint64_t v84 = v42;
  uint64_t v43 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v37 + 56);
  uint64_t v44 = (unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v37 + 48);
  swift_bridgeObjectRetain();
  unint64_t v45 = 0;
  while (1)
  {
    if (v45 == v84)
    {
      uint64_t v46 = 1;
      unint64_t v45 = v84;
      uint64_t v47 = (unint64_t *)v85;
    }
    else
    {
      uint64_t v47 = (unint64_t *)v85;
      if (v45 >= *((void *)v83 + 2))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      uint64_t v48 = (uint64_t)&v82[*(int *)(v7 + 48)];
      sub_1001D5A4C((uint64_t)&v83[((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v45], v48, type metadata accessor for Metric);
      uint64_t v49 = (uint64_t)v47 + *(int *)(v7 + 48);
      *uint64_t v47 = v45;
      sub_1001D5AB4(v48, v49, type metadata accessor for Metric);
      uint64_t v46 = 0;
      ++v45;
    }
    (*v43)(v47, v46, 1, v7);
    sub_10015D474((uint64_t)v47, (uint64_t)v13, &qword_1002DB178);
    if ((*v44)(v13, 1, v7) == 1) {
      break;
    }
    unint64_t v50 = *v13;
    uint64_t v51 = (uint64_t)v13 + *(int *)(v7 + 48);
    sub_100167598(0, (unint64_t *)&unk_1002DAE40);
    id v52 = *(id *)(v51 + *(int *)(v36 + 28));
    sub_1001D5B1C(v51, type metadata accessor for Metric);
    Swift::String v53 = NSString.init(stringLiteral:)();
    char v54 = static NSObject.== infix(_:_:)();

    if (v54)
    {
      unint64_t v55 = (unint64_t)v90;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        unint64_t v55 = sub_1001B4AE0(v55);
        long long v90 = (char *)v55;
      }
      unint64_t v56 = *(void *)(v55 + 16);
      if (v50 >= v56) {
        goto LABEL_53;
      }
      unint64_t v57 = v56 - 1;
      uint64_t v58 = *(void *)(v86 + 72);
      unint64_t v59 = v55
          + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))
          + v58 * v50;
      sub_1001D5B1C(v59, type metadata accessor for Metric);
      if ((uint64_t)(v57 - v50) < 0) {
        goto LABEL_54;
      }
      if (v58 > 0 || v59 >= v59 + v58 + v58 * (v57 - v50))
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v58)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      *(void *)(v55 + 16) = v57;
      long long v90 = (char *)v55;
      uint64_t v36 = v88;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v60 = v81;
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  *(unsigned char *)(v60 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
  uint64_t v61 = *((void *)v90 + 2);
  if (v61)
  {
    uint64_t v62 = (uint64_t)&v90[(*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80)];
    uint64_t v63 = *(void *)(v86 + 72);
    uint64_t v86 = (uint64_t)v90;
    swift_bridgeObjectRetain_n();
    uint64_t v64 = v87;
    while (1)
    {
      sub_1001D5A4C(v62, v64, type metadata accessor for Metric);
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 4543564 && v66 == 0xE300000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v68 & 1) == 0) {
          goto LABEL_34;
        }
      }
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 0x207942206C6C6543
        && v69 == 0xEC000000646E6142)
      {
        swift_bridgeObjectRelease();
LABEL_31:
        if (qword_1002D7B20 != -1) {
          swift_once();
        }
        id v65 = (id)qword_1002E31D0;
        sub_1001A1330(v87);

        goto LABEL_34;
      }
      char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v71) {
        goto LABEL_31;
      }
LABEL_34:
      uint64_t v64 = v87;
      sub_1001D5B1C(v87, type metadata accessor for Metric);
      v62 += v63;
      if (!--v61)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v60 = v81;
        break;
      }
    }
  }
  uint64_t v72 = (uint64_t)v90;
  if (*(void *)(*(void *)(v60 + 24) + 16))
  {
    swift_bridgeObjectRelease();
    return sub_1001D1D3C(*(void *)(*(void *)(v60 + 24) + 16));
  }
  else
  {
    sub_1001D1D3C(*((void *)v90 + 2));
    uint64_t v89 = *(void *)(v60 + 16);
    swift_bridgeObjectRetain();
    sub_10020242C(v72);
    uint64_t v74 = v89;
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    swift_release();
    *(void *)(v60 + 16) = v74;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001CD470(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v244 = a3;
  uint64_t v239 = type metadata accessor for MetricSectional(0);
  uint64_t v238 = *(void *)(v239 - 8);
  uint64_t v7 = __chkstk_darwin(v239);
  v230 = (char *)&v230 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (unint64_t)&v230 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v235 = (uint64_t)&v230 - v13;
  __chkstk_darwin(v12);
  uint64_t v234 = (uint64_t)&v230 - v14;
  uint64_t v257 = type metadata accessor for Date();
  uint64_t v232 = *(void *)(v257 - 8);
  __chkstk_darwin(v257);
  v256 = (char *)&v230 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = (int *)type metadata accessor for Metric(0);
  uint64_t v250 = *((void *)v262 - 1);
  uint64_t v16 = __chkstk_darwin(v262);
  v242 = (char *)&v230 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  v260 = (unint64_t *)((char *)&v230 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  v261 = (void (**)(unint64_t *, uint64_t, uint64_t, unint64_t))((char *)&v230 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v245 = (uint64_t)&v230 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v231 = (unint64_t)&v230 - v25;
  __chkstk_darwin(v24);
  v258 = (void (**)(char *, uint64_t, uint64_t))((char *)&v230 - v26);
  unint64_t v27 = sub_100157064(&qword_1002DB170);
  unint64_t v233 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  v255 = (char *)&v230 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100157064(&qword_1002DB178);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  v237 = (unint64_t *)((char *)&v230 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = __chkstk_darwin(v30);
  v236 = (unint64_t *)((char *)&v230 - v33);
  uint64_t v34 = __chkstk_darwin(v32);
  v251 = (char *)&v230 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v249 = (char *)&v230 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v241 = (char *)&v230 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v240 = (unint64_t *)((char *)&v230 - v41);
  uint64_t v42 = __chkstk_darwin(v40);
  v259 = (void (*)(unint64_t *, uint64_t, uint64_t, unint64_t))((char *)&v230 - v43);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (unint64_t *)((char *)&v230 - v45);
  uint64_t v47 = __chkstk_darwin(v44);
  v247 = (char *)&v230 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v246 = (unint64_t *)((char *)&v230 - v50);
  uint64_t v51 = __chkstk_darwin(v49);
  v253 = (char *)&v230 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  unint64_t v252 = (unint64_t)&v230 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  unint64_t v57 = (unint64_t *)((char *)&v230 - v56);
  uint64_t result = __chkstk_darwin(v55);
  unint64_t v60 = (unint64_t)&v230 - v59;
  v248 = (unint64_t *)a1;
  uint64_t v61 = *(void *)(*a1 + 16);
  if (!v61) {
    return result;
  }
  uint64_t v254 = *a1;
  if (a2 == 0xD000000000000011 && v244 == 0x800000010023A600
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    unint64_t v62 = v233;
    v260 = (unint64_t *)(v233 + 48);
    v261 = (void (**)(unint64_t *, uint64_t, uint64_t, unint64_t))(v233 + 56);
    swift_bridgeObjectRetain();
    unint64_t v244 = 0;
    unint64_t v63 = 0;
    unint64_t v64 = 0;
    v251 = "kCTCellMonitorTAC";
    v249 = (char *)0x8000000100239DB0;
    v243 = "avg_values_phy_cell_id";
    v242 = (char *)0x8000000100239D70;
    while (1)
    {
      uint64_t v65 = v254;
      while (1)
      {
        if (v64 == v61)
        {
          v259 = *v261;
          v259(v57, 1, 1, v27);
          unint64_t v64 = v61;
        }
        else
        {
          if (v64 >= *(void *)(v65 + 16))
          {
            __break(1u);
            goto LABEL_214;
          }
          uint64_t v3 = (uint64_t)&v255[*(int *)(v27 + 48)];
          unint64_t v62 = (unint64_t)type metadata accessor for Metric;
          sub_1001D5A4C(v65+ ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80))+ *(void *)(v250 + 72) * v64, v3, type metadata accessor for Metric);
          uint64_t v68 = (uint64_t)v57 + *(int *)(v27 + 48);
          *unint64_t v57 = v64;
          sub_1001D5AB4(v3, v68, type metadata accessor for Metric);
          v259 = *v261;
          v259(v57, 0, 1, v27);
          ++v64;
        }
        sub_10015D474((uint64_t)v57, v60, &qword_1002DB178);
        unint64_t v11 = *v260;
        if (((unsigned int (*)(unint64_t, uint64_t, unint64_t))*v260)(v60, 1, v27) == 1)
        {
          swift_bridgeObjectRelease();
          unint64_t v4 = v244;
          if ((v244 & 0x8000000000000000) != 0) {
            goto LABEL_222;
          }
          unint64_t v60 = *v248;
          if (v244 >= *(void *)(*v248 + 16)) {
            goto LABEL_223;
          }
          unint64_t v62 = (*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80);
          unint64_t v64 = v60 + v62;
          v251 = *(char **)(v250 + 72);
          uint64_t v3 = (void)v251 * v244;
          uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v77 = sub_1001CC1AC(v75, v76);
          if (v78) {
            goto LABEL_35;
          }
          uint64_t v61 = v77;
          if (v77 < 0) {
            goto LABEL_35;
          }
          if ((v63 & 0x8000000000000000) != 0) {
            goto LABEL_232;
          }
          if (v63 >= *(void *)(v60 + 16)) {
            goto LABEL_233;
          }
          uint64_t v79 = v64 + (void)v251 * v63;
          unint64_t v64 = v231;
          sub_1001D5A4C(v79, v231, type metadata accessor for Metric);
          uint64_t v61 = (uint64_t)sub_1001D5B7C(v61);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_234;
          }
          while (1)
          {
            if (v4 >= *(void *)(v60 + 16))
            {
              __break(1u);
LABEL_236:
              __break(1u);
LABEL_237:
              uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            unint64_t v80 = v60 + v62 + v3;
            uint64_t v81 = v262;
            uint64_t v82 = v262[9];
            uint64_t v83 = *(void **)(v80 + v82);
            *(void *)(v80 + v82) = v61;

            unint64_t *v248 = v60;
            unint64_t v84 = *(void **)(v64 + v81[9]);
            sub_100167598(0, (unint64_t *)&unk_1002DAE40);
            id v85 = v84;
            uint64_t v86 = NSString.init(stringLiteral:)();
            uint64_t v61 = static NSObject.== infix(_:_:)();

            if ((v61 & 1) == 0)
            {
              uint64_t v87 = v245;
              uint64_t v61 = (uint64_t)v248;
              sub_1001CC5D0(v4, v245);
              sub_1001D5B1C(v87, type metadata accessor for Metric);
            }
            sub_1001D5B1C(v64, type metadata accessor for Metric);
LABEL_35:
            unint64_t v60 = (unint64_t)v248;
            sub_1001CFC10((uint64_t *)v248, type metadata accessor for Metric, (uint64_t (*)(uint64_t))sub_1001B4AE0, sub_1001D3720);
            v243 = 0;
            v265 = (void *)sub_1001E0644((uint64_t)_swiftEmptyArrayStorage);
            uint64_t v88 = *(void *)v60;
            uint64_t v3 = *(void *)(*(void *)v60 + 16);
            unint64_t v244 = v62;
            v249 = (char *)(v88 + v62);
            v258 = (void (**)(char *, uint64_t, uint64_t))(v232 + 16);
            uint64_t v254 = v232 + 8;
            uint64_t v250 = v88;
            swift_bridgeObjectRetain();
            unint64_t v4 = 0;
            unint64_t v64 = (unint64_t)v253;
            while (1)
            {
              if (v4 == v3)
              {
                v259((unint64_t *)v64, 1, 1, v27);
                unint64_t v4 = v3;
              }
              else
              {
                if (v4 >= *(void *)(v250 + 16))
                {
LABEL_214:
                  __break(1u);
LABEL_215:
                  __break(1u);
                  goto LABEL_216;
                }
                uint64_t v89 = (uint64_t)&v255[*(int *)(v27 + 48)];
                sub_1001D5A4C((uint64_t)&v249[v4 * (void)v251], v89, type metadata accessor for Metric);
                uint64_t v90 = v64 + *(int *)(v27 + 48);
                *(void *)unint64_t v64 = v4;
                sub_1001D5AB4(v89, v90, type metadata accessor for Metric);
                v259((unint64_t *)v64, 0, 1, v27);
                ++v4;
              }
              uint64_t v61 = v252;
              sub_10015D474(v64, v252, &qword_1002DB178);
              if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v11)(v61, 1, v27) == 1) {
                break;
              }
              uint64_t v91 = v61 + *(int *)(v27 + 48);
              uint64_t v92 = v257;
              char v93 = v256;
              (*v258)(v256, v91 + v262[11], v257);
              sub_1001D5B1C(v91, type metadata accessor for Metric);
              unint64_t v62 = sub_10018BB68();
              uint64_t v95 = v94;
              (*(void (**)(char *, uint64_t))v254)(v93, v92);
              uint64_t v61 = (uint64_t)v265;
              if (!v265[2]
                || (swift_bridgeObjectRetain(),
                    sub_1001EB868(v62, v95),
                    char v97 = v96,
                    swift_bridgeObjectRelease(),
                    uint64_t v61 = (uint64_t)v265,
                    (v97 & 1) == 0))
              {
                unint64_t v64 = (unint64_t)v253;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v263 = v61;
                v265 = (void *)0x8000000000000000;
                uint64_t v103 = 1;
                goto LABEL_49;
              }
              unint64_t v64 = (unint64_t)v253;
              if (v265[2])
              {
                swift_bridgeObjectRetain();
                unint64_t v98 = sub_1001EB868(v62, v95);
                if (v99)
                {
                  uint64_t v61 = *(void *)(*(void *)(v61 + 56) + 8 * v98);
                  swift_bridgeObjectRelease();
                  uint64_t v100 = v61 + 1;
                  if (__OFADD__(v61, 1)) {
                    goto LABEL_219;
                  }
                  uint64_t v101 = v265;
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v263 = (uint64_t)v101;
                  v265 = (void *)0x8000000000000000;
                  uint64_t v103 = v100;
LABEL_49:
                  sub_1001ED868(v103, v62, v95, isUniquelyReferenced_nonNull_native);
                  uint64_t v61 = (uint64_t)v265;
                  v265 = (void *)v263;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  swift_bridgeObjectRelease_n();
                }
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            swift_bridgeObjectRelease();
            unint64_t v62 = (unint64_t)v265;
            if (v265[2] < 2uLL) {
              return swift_bridgeObjectRelease();
            }
            uint64_t v104 = v265 + 8;
            uint64_t v105 = 1 << *((unsigned char *)v265 + 32);
            uint64_t v106 = -1;
            if (v105 < 64) {
              uint64_t v106 = ~(-1 << v105);
            }
            uint64_t v3 = v106 & v265[8];
            int64_t v107 = (unint64_t)(v105 + 63) >> 6;
            swift_bridgeObjectRetain();
            unint64_t v64 = 0;
            uint64_t v108 = 0;
            unint64_t v4 = 0;
            unint64_t v60 = 0xE000000000000000;
            if (v3)
            {
LABEL_55:
              unint64_t v109 = __clz(__rbit64(v3));
              v3 &= v3 - 1;
              unint64_t v110 = v109 | (v4 << 6);
              goto LABEL_56;
            }
            while (1)
            {
              int64_t v111 = v4 + 1;
              if (__OFADD__(v4, 1)) {
                break;
              }
              if (v111 >= v107) {
                goto LABEL_74;
              }
              unint64_t v112 = v104[v111];
              ++v4;
              if (!v112)
              {
                unint64_t v4 = v111 + 1;
                if (v111 + 1 >= v107) {
                  goto LABEL_74;
                }
                unint64_t v112 = v104[v4];
                if (!v112)
                {
                  unint64_t v4 = v111 + 2;
                  if (v111 + 2 >= v107) {
                    goto LABEL_74;
                  }
                  unint64_t v112 = v104[v4];
                  if (!v112)
                  {
                    int64_t v113 = v111 + 3;
                    if (v113 >= v107)
                    {
LABEL_74:
                      swift_release();
                      uint64_t v61 = (uint64_t)&v265;
                      sub_100195C04(v64, v60);
                      swift_bridgeObjectRelease();
                      uint64_t v115 = *v248;
                      unint64_t v60 = *(void *)(*v248 + 16);
                      unint64_t v252 = *v248 + v244;
                      v253 = (char *)v115;
                      swift_bridgeObjectRetain();
                      unint64_t v116 = 0;
                      uint64_t v117 = v257;
                      while (1)
                      {
                        unint64_t v64 = (unint64_t)v247;
                        if (v116 == v60)
                        {
                          v259((unint64_t *)v247, 1, 1, v27);
                          unint64_t v116 = v60;
                        }
                        else
                        {
                          if (v116 >= *((void *)v253 + 2)) {
                            goto LABEL_217;
                          }
                          uint64_t v118 = (uint64_t)&v255[*(int *)(v27 + 48)];
                          sub_1001D5A4C(v252 + v116 * (void)v251, v118, type metadata accessor for Metric);
                          uint64_t v119 = v64 + *(int *)(v27 + 48);
                          *(void *)unint64_t v64 = v116;
                          sub_1001D5AB4(v118, v119, type metadata accessor for Metric);
                          v259((unint64_t *)v64, 0, 1, v27);
                          ++v116;
                        }
                        uint64_t v120 = v246;
                        sub_10015D474(v64, (uint64_t)v246, &qword_1002DB178);
                        if (((unsigned int (*)(unint64_t *, uint64_t, unint64_t))v11)(v120, 1, v27) == 1)break; {
                        unint64_t v62 = *v120;
                        }
                        uint64_t v121 = (uint64_t)v120 + *(int *)(v27 + 48);
                        char v122 = v256;
                        (*v258)(v256, v121 + v262[11], v117);
                        sub_1001D5B1C(v121, type metadata accessor for Metric);
                        uint64_t v3 = sub_10018BB68();
                        unint64_t v4 = v123;
                        (*(void (**)(char *, uint64_t))v254)(v122, v117);
                        uint64_t v61 = (uint64_t)v265;
                        if (v265[2])
                        {
                          sub_1001EB868(v3, v4);
                          uint64_t v61 = v124;
                          swift_bridgeObjectRelease();
                          if ((v61 & 1) != 0
                            && (v62 & 0x8000000000000000) == 0
                            && (int64_t)v62 < *(void *)(*v248 + 16))
                          {
                            uint64_t v3 = v245;
                            uint64_t v61 = (uint64_t)v248;
                            sub_1001CC5D0(v62, v245);
                            sub_1001D5B1C(v3, type metadata accessor for Metric);
                          }
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                        }
                      }
                      swift_bridgeObjectRelease();
                      return swift_bridgeObjectRelease();
                    }
                    unint64_t v112 = v104[v113];
                    if (!v112)
                    {
                      while (1)
                      {
                        unint64_t v4 = v113 + 1;
                        if (__OFADD__(v113, 1)) {
                          goto LABEL_220;
                        }
                        if ((uint64_t)v4 >= v107) {
                          goto LABEL_74;
                        }
                        unint64_t v112 = v104[v4];
                        ++v113;
                        if (v112) {
                          goto LABEL_71;
                        }
                      }
                    }
                    unint64_t v4 = v113;
                  }
                }
              }
LABEL_71:
              uint64_t v3 = (v112 - 1) & v112;
              unint64_t v110 = __clz(__rbit64(v112)) + (v4 << 6);
LABEL_56:
              uint64_t v61 = *(void *)(*(void *)(v62 + 56) + 8 * v110);
              if (v108 < v61)
              {
                unint64_t v114 = *(void *)(*(void *)(v62 + 48) + 16 * v110 + 8);
                v253 = *(char **)(*(void *)(v62 + 48) + 16 * v110);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                unint64_t v60 = v114;
                unint64_t v64 = (unint64_t)v253;
                uint64_t v108 = v61;
                if (v3) {
                  goto LABEL_55;
                }
              }
              else if (v3)
              {
                goto LABEL_55;
              }
            }
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            unint64_t v60 = sub_1001B4AE0(v60);
          }
        }
        unint64_t v11 = *(void *)v60;
        unint64_t v4 = v27;
        uint64_t v69 = v258;
        sub_1001D5AB4(v60 + *(int *)(v27 + 48), (uint64_t)v258, type metadata accessor for Metric);
        unint64_t v62 = *(unint64_t *)((char *)v69 + v262[8]);
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v3 = (uint64_t)v71;
        if (v70 != 0xD000000000000027 || v71 != v249) {
          break;
        }
        swift_bridgeObjectRelease();
LABEL_8:
        sub_1001D5B1C((uint64_t)v258, type metadata accessor for Metric);
        unint64_t v63 = v11;
        uint64_t v65 = v254;
        unint64_t v27 = v4;
      }
      unint64_t v66 = v63;
      char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v67) {
        goto LABEL_8;
      }
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v3 = (uint64_t)v73;
      if (v72 == 0xD00000000000001CLL && v73 == v242)
      {
        swift_bridgeObjectRelease();
        sub_1001D5B1C((uint64_t)v258, type metadata accessor for Metric);
        unint64_t v244 = v11;
      }
      else
      {
        unint64_t v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        sub_1001D5B1C((uint64_t)v258, type metadata accessor for Metric);
        unint64_t v74 = v244;
        if (v62) {
          unint64_t v74 = v11;
        }
        unint64_t v244 = v74;
      }
      unint64_t v63 = v66;
      unint64_t v27 = v4;
    }
  }
  unint64_t v64 = (unint64_t)v243;
  if (a2 == 0x7574617453204143 && v244 == 0xE900000000000073
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v125 = type metadata accessor for MetricDetailViewModel();
    uint64_t v126 = sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
    v256 = (char *)v125;
    v253 = (char *)v126;
    uint64_t v61 = ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    swift_release();
    *(void *)(v64 + 24) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    unint64_t v11 = *(void *)(v254 + 16);
    unint64_t v62 = v233;
    uint64_t v257 = v233 + 48;
    v258 = (void (**)(char *, uint64_t, uint64_t))(v233 + 56);
    swift_bridgeObjectRetain();
    unint64_t v60 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v3 = (uint64_t)&type metadata for String;
        while (1)
        {
          unint64_t v4 = (unint64_t)v259;
          if (v60 == v11)
          {
            uint64_t v127 = 1;
            unint64_t v60 = v11;
          }
          else
          {
            if (v60 >= *(void *)(v254 + 16)) {
              goto LABEL_218;
            }
            uint64_t v128 = (uint64_t)&v255[*(int *)(v27 + 48)];
            unint64_t v64 = (unint64_t)type metadata accessor for Metric;
            sub_1001D5A4C(v254+ ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80))+ *(void *)(v250 + 72) * v60, v128, type metadata accessor for Metric);
            uint64_t v129 = v4 + *(int *)(v27 + 48);
            *(void *)unint64_t v4 = v60;
            sub_1001D5AB4(v128, v129, type metadata accessor for Metric);
            uint64_t v127 = 0;
            ++v60;
          }
          ((void (*)(unint64_t, uint64_t, uint64_t, unint64_t))*v258)(v4, v127, 1, v27);
          sub_10015D474(v4, (uint64_t)v46, &qword_1002DB178);
          if ((*(unsigned int (**)(unint64_t *, uint64_t, unint64_t))v257)(v46, 1, v27) == 1) {
            goto LABEL_109;
          }
          unint64_t v4 = *v46;
          uint64_t v130 = (uint64_t)v46 + *(int *)(v27 + 48);
          id v131 = *(id *)(v130 + v262[7]);
          sub_1001D5B1C(v130, type metadata accessor for Metric);
          unint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v133 = v132;

          v265 = (void *)v64;
          unint64_t v266 = v133;
          uint64_t v263 = 0x2D6E6F6974636573;
          unint64_t v264 = 0xE800000000000000;
          unint64_t v62 = sub_1001571E0();
          uint64_t v61 = (uint64_t)&v265;
          if (StringProtocol.contains<A>(_:)()) {
            break;
          }
          swift_bridgeObjectRelease();
        }
        v265 = (void *)v64;
        unint64_t v266 = v133;
        uint64_t v263 = 45;
        unint64_t v264 = 0xE100000000000000;
        uint64_t v134 = (void *)StringProtocol.components<A>(separatedBy:)();
        unint64_t v64 = (unint64_t)v134;
        if (v134[2]) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      unint64_t v62 = v134[4];
      uint64_t v61 = v134[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v135 = *v248;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_108;
        }
      }
      else
      {
        unint64_t v135 = sub_1001B4AE0(v135);
        if ((v4 & 0x8000000000000000) != 0)
        {
LABEL_108:
          __break(1u);
LABEL_109:
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v137 = *v248;
          uint64_t v138 = *(void *)(*v248 + 16);
          unint64_t v62 = (unint64_t)_swiftEmptyArrayStorage;
          if (!v138) {
            return result;
          }
          v259 = (void (*)(unint64_t *, uint64_t, uint64_t, unint64_t))((*(unsigned __int8 *)(v250 + 80)
                                                                                              + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80));
          uint64_t v139 = *(void *)(v250 + 72);
          int64_t v140 = (uint64_t *)((char *)v259 + v137 + v139 * (v138 - 1) + v262[16]);
          unint64_t v60 = v140[1];
          if (!v60) {
            return result;
          }
          uint64_t v61 = *v140;
          swift_bridgeObjectRetain();
          uint64_t result = sub_1001CC1AC(v61, v60);
          if (v141) {
            return result;
          }
          int v142 = (char *)result;
          if (result < 0) {
            goto LABEL_236;
          }
          if (!result) {
            return result;
          }
          uint64_t v3 = 0;
          unint64_t v4 = (unint64_t)&protocol witness table for Int;
          v255 = (char *)result;
          while (2)
          {
            if ((char *)v3 == v142) {
              goto LABEL_229;
            }
            v265 = (void *)v3;
            uint64_t v61 = (uint64_t)&v265;
            unint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v144 = v143;
            unint64_t v11 = *v248;
            v265 = _swiftEmptyArrayStorage;
            unint64_t v60 = *(void *)(v11 + 16);
            swift_bridgeObjectRetain();
            if (!v60)
            {
              uint64_t v152 = _swiftEmptyArrayStorage;
              goto LABEL_137;
            }
            uint64_t v257 = v144;
            v258 = (void (**)(char *, uint64_t, uint64_t))v64;
            unint64_t v27 = 0;
            uint64_t v145 = (uint64_t)v259 + v11;
LABEL_121:
            if (v27 >= *(void *)(v11 + 16)) {
              goto LABEL_215;
            }
            uint64_t v146 = v261;
            sub_1001D5A4C(v145, (uint64_t)v261, type metadata accessor for Metric);
            unsigned long long v147 = (void *)((char *)v146 + v262[16]);
            unint64_t v62 = *v147;
            unint64_t v64 = v147[1];
            uint64_t v263 = v3;
            swift_bridgeObjectRetain();
            uint64_t v148 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v61 = v149;
            if (v64)
            {
              if (v62 == v148 && v64 == v149)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_130;
              }
              unint64_t v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v62)
              {
LABEL_130:
                sub_1001D5AB4((uint64_t)v261, (uint64_t)v260, type metadata accessor for Metric);
                uint64_t v61 = (uint64_t)v265;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_1001B243C(0, *(void *)(v61 + 16) + 1, 1);
                  uint64_t v61 = (uint64_t)v265;
                }
                unint64_t v62 = *(void *)(v61 + 16);
                unint64_t v151 = *(void *)(v61 + 24);
                unint64_t v64 = v62 + 1;
                if (v62 >= v151 >> 1)
                {
                  sub_1001B243C(v151 > 1, v62 + 1, 1);
                  uint64_t v61 = (uint64_t)v265;
                }
                *(void *)(v61 + 16) = v64;
                sub_1001D5AB4((uint64_t)v260, (uint64_t)v259 + v61 + v62 * v139, type metadata accessor for Metric);
LABEL_120:
                ++v27;
                v145 += v139;
                if (v60 == v27)
                {
                  uint64_t v152 = v265;
                  unint64_t v62 = (unint64_t)_swiftEmptyArrayStorage;
                  int v142 = v255;
                  uint64_t v144 = v257;
                  unint64_t v64 = (unint64_t)v258;
LABEL_137:
                  swift_bridgeObjectRelease();
                  uint64_t v153 = v234;
                  UUID.init()();
                  uint64_t v154 = v239;
                  uint64_t v155 = (unint64_t *)(v153 + *(int *)(v239 + 20));
                  *uint64_t v155 = v64;
                  v155[1] = v144;
                  *(void *)(v153 + *(int *)(v154 + 24)) = v152;
                  sub_1001D5A4C(v153, v235, type metadata accessor for MetricSectional);
                  unint64_t v27 = (unint64_t)v243;
                  unint64_t v60 = *((void *)v243 + 3);
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    unint64_t v60 = sub_1001EB3F8(0, *(void *)(v60 + 16) + 1, 1, v60);
                  }
                  unint64_t v157 = *(void *)(v60 + 16);
                  unint64_t v156 = *(void *)(v60 + 24);
                  if (v157 >= v156 >> 1) {
                    unint64_t v60 = sub_1001EB3F8(v156 > 1, v157 + 1, 1, v60);
                  }
                  ++v3;
                  *(void *)(v60 + 16) = v157 + 1;
                  uint64_t v158 = v60
                       + ((*(unsigned __int8 *)(v238 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80))
                       + *(void *)(v238 + 72) * v157;
                  unint64_t v64 = (unint64_t)type metadata accessor for MetricSectional;
                  sub_1001D5AB4(v235, v158, type metadata accessor for MetricSectional);
                  uint64_t v61 = ObservableObject<>.objectWillChange.getter();
                  ObservableObjectPublisher.send()();
                  swift_release();
                  *(void *)(v27 + 24) = v60;
                  swift_bridgeObjectRelease();
                  uint64_t result = sub_1001D5B1C(v234, type metadata accessor for MetricSectional);
                  if ((char *)v3 == v142) {
                    return result;
                  }
                  continue;
                }
                goto LABEL_121;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            break;
          }
          sub_1001D5B1C((uint64_t)v261, type metadata accessor for Metric);
          goto LABEL_120;
        }
      }
      if (v4 >= *(void *)(v135 + 16)) {
        goto LABEL_221;
      }
      NSString v136 = (unint64_t *)(v135
                                + ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80))
                                + *(void *)(v250 + 72) * v4
                                + v262[16]);
      unint64_t *v136 = v62;
      v136[1] = v61;
      swift_bridgeObjectRelease();
      unint64_t *v248 = v135;
    }
  }
  uint64_t v159 = v254;
  if (a2 != 0x207942206C6C6543 || v244 != 0xEC000000646E6142)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v159 = v254;
    if ((result & 1) == 0) {
      return result;
    }
  }
  unint64_t v252 = v11;
  uint64_t v160 = type metadata accessor for MetricDetailViewModel();
  v258 = (void (**)(char *, uint64_t, uint64_t))sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
  v259 = (void (*)(unint64_t *, uint64_t, uint64_t, unint64_t))v160;
  uint64_t v161 = v243;
  uint64_t v61 = ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  *((void *)v161 + 3) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  unint64_t v11 = *(void *)(v159 + 16);
  v260 = (unint64_t *)(v233 + 48);
  v261 = (void (**)(unint64_t *, uint64_t, uint64_t, unint64_t))(v233 + 56);
  swift_bridgeObjectRetain();
  unint64_t v162 = 0;
  unint64_t v60 = (unint64_t)&type metadata for String;
  uint64_t v3 = (uint64_t)v242;
LABEL_148:
  unint64_t v62 = (unint64_t)v241;
  while (1)
  {
    uint64_t v163 = (unint64_t *)v251;
    if (v162 == v11)
    {
      long long v164 = *v261;
      (*v261)((unint64_t *)v62, 1, 1, v27);
      unint64_t v162 = v11;
    }
    else
    {
      if (v162 >= *(void *)(v254 + 16)) {
        goto LABEL_224;
      }
      uint64_t v165 = (uint64_t)&v255[*(int *)(v27 + 48)];
      sub_1001D5A4C(v254+ ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80))+ *(void *)(v250 + 72) * v162, v165, type metadata accessor for Metric);
      uint64_t v166 = v62 + *(int *)(v27 + 48);
      *(void *)unint64_t v62 = v162;
      sub_1001D5AB4(v165, v166, type metadata accessor for Metric);
      long long v164 = *v261;
      (*v261)((unint64_t *)v62, 0, 1, v27);
      ++v162;
      uint64_t v3 = (uint64_t)v242;
    }
    long long v167 = v240;
    sub_10015D474(v62, (uint64_t)v240, &qword_1002DB178);
    unint64_t v4 = *v260;
    if (((unsigned int (*)(unint64_t *, uint64_t, unint64_t))*v260)(v167, 1, v27) == 1) {
      break;
    }
    unint64_t v168 = *v167;
    uint64_t v169 = (uint64_t)v167 + *(int *)(v27 + 48);
    id v170 = *(id *)(v169 + v262[7]);
    sub_1001D5B1C(v169, type metadata accessor for Metric);
    uint64_t v171 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v64 = v172;

    v265 = v171;
    unint64_t v266 = v64;
    uint64_t v263 = 0x2D6E6F6974636573;
    unint64_t v264 = 0xE800000000000000;
    unint64_t v4 = sub_1001571E0();
    uint64_t v61 = (uint64_t)&v265;
    if ((StringProtocol.contains<A>(_:)() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_148;
    }
    v265 = v171;
    unint64_t v266 = v64;
    uint64_t v263 = 45;
    unint64_t v264 = 0xE100000000000000;
    uint64_t v173 = (void *)StringProtocol.components<A>(separatedBy:)();
    if (!v173[2])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_148;
    }
    unint64_t v4 = v173[4];
    uint64_t v61 = v173[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v64 = *v248;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v64 = sub_1001B4AE0(v64);
    }
    unint64_t v62 = (unint64_t)v241;
    if ((v168 & 0x8000000000000000) != 0) {
      goto LABEL_230;
    }
    if (v168 >= *(void *)(v64 + 16)) {
      goto LABEL_231;
    }
    uint64_t v174 = (unint64_t *)(v64
                              + ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80))
                              + *(void *)(v250 + 72) * v168
                              + v262[16]);
    unint64_t *v174 = v4;
    v174[1] = v61;
    swift_bridgeObjectRelease();
    unint64_t *v248 = v64;
  }
  v253 = (char *)v164;
  swift_bridgeObjectRelease();
  uint64_t v175 = *v248;
  unint64_t v64 = *(void *)(*v248 + 16);
  v247 = &v243[OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn];
  v246 = (unint64_t *)(v232 + 16);
  unint64_t v244 = v232 + 40;
  uint64_t v254 = v175;
  swift_bridgeObjectRetain();
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v61 = (uint64_t)v249;
    if (v11 == v64)
    {
      ((void (*)(unint64_t *, uint64_t, uint64_t, unint64_t))v253)(v163, 1, 1, v27);
      unint64_t v11 = v64;
    }
    else
    {
      if (v11 >= *(void *)(v254 + 16)) {
        goto LABEL_225;
      }
      uint64_t v176 = (uint64_t)&v255[*(int *)(v27 + 48)];
      sub_1001D5A4C(v254+ ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80))+ *(void *)(v250 + 72) * v11, v176, type metadata accessor for Metric);
      uint64_t v177 = (uint64_t)v163 + *(int *)(v27 + 48);
      *uint64_t v163 = v11;
      uint64_t v178 = v176;
      uint64_t v61 = (uint64_t)v249;
      sub_1001D5AB4(v178, v177, type metadata accessor for Metric);
      ((void (*)(unint64_t *, void, uint64_t, unint64_t))v253)(v163, 0, 1, v27);
      ++v11;
    }
    sub_10015D474((uint64_t)v163, v61, &qword_1002DB178);
    if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v4)(v61, 1, v27) == 1) {
      break;
    }
    unint64_t v60 = *(void *)v61;
    sub_1001D5AB4(v61 + *(int *)(v27 + 48), v3, type metadata accessor for Metric);
    sub_100167598(0, (unint64_t *)&unk_1002DAE40);
    id v179 = *(id *)(v3 + v262[7]);
    unint64_t v62 = NSString.init(stringLiteral:)();
    char v180 = static NSObject.== infix(_:_:)();

    if (v180)
    {
      uint64_t v181 = v3 + v262[11];
      unint64_t v62 = (unint64_t)v256;
      uint64_t v182 = v257;
      ((void (*)(char *, uint64_t, uint64_t))*v246)(v256, v181, v257);
      ObservableObject<>.objectWillChange.getter();
      ObservableObjectPublisher.send()();
      swift_release();
      uint64_t v183 = v247;
      swift_beginAccess();
      (*(void (**)(const char *, unint64_t, uint64_t))v244)(v183, v62, v182);
      swift_endAccess();
      uint64_t v184 = (uint64_t *)v248;
      uint64_t v61 = *v248;
      char v185 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v184 = v61;
      if ((v185 & 1) == 0)
      {
        uint64_t v61 = sub_1001B4AE0(v61);
        unint64_t *v248 = v61;
      }
      unint64_t v186 = *(void *)(v61 + 16);
      uint64_t v3 = (uint64_t)v242;
      if (v60 >= v186) {
        goto LABEL_227;
      }
      unint64_t v62 = v186 - 1;
      uint64_t v187 = *(void *)(v250 + 72);
      unint64_t v188 = v61
           + ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80))
           + v187 * v60;
      sub_1001D5B1C(v188, type metadata accessor for Metric);
      if ((uint64_t)(v62 - v60) < 0) {
        goto LABEL_237;
      }
      if (v187 > 0 || v188 >= v188 + v187 + v187 * (v62 - v60))
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v187)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      *(void *)(v61 + 16) = v62;
      unint64_t *v248 = v61;
      uint64_t v163 = (unint64_t *)v251;
    }
    sub_1001D5B1C(v3, type metadata accessor for Metric);
  }
  swift_bridgeObjectRelease();
  unint64_t v60 = *(void *)(*v248 + 16);
  uint64_t v257 = *v248;
  swift_bridgeObjectRetain();
  unint64_t v62 = 0;
  v256 = 0;
  unint64_t v64 = (unint64_t)v253;
  while (1)
  {
    if (v62 == v60)
    {
      unint64_t v189 = v237;
      ((void (*)(unint64_t *, uint64_t, uint64_t, unint64_t))v64)(v237, 1, 1, v27);
      unint64_t v62 = v60;
    }
    else
    {
      unint64_t v189 = v237;
      if (v62 >= *(void *)(v257 + 16)) {
        goto LABEL_226;
      }
      uint64_t v3 = v62 + 1;
      uint64_t v190 = (uint64_t)&v255[*(int *)(v27 + 48)];
      sub_1001D5A4C(v257+ ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80))+ *(void *)(v250 + 72) * v62, v190, type metadata accessor for Metric);
      uint64_t v191 = (uint64_t)v189 + *(int *)(v27 + 48);
      *unint64_t v189 = v62;
      sub_1001D5AB4(v190, v191, type metadata accessor for Metric);
      ((void (*)(unint64_t *, void, uint64_t, unint64_t))v64)(v189, 0, 1, v27);
      ++v62;
    }
    uint64_t v192 = v236;
    sub_10015D474((uint64_t)v189, (uint64_t)v236, &qword_1002DB178);
    if (((unsigned int (*)(unint64_t *, uint64_t, unint64_t))v4)(v192, 1, v27) == 1) {
      break;
    }
    unint64_t v193 = *v192;
    uint64_t v194 = (uint64_t)v192 + *(int *)(v27 + 48);
    sub_100167598(0, (unint64_t *)&unk_1002DAE40);
    id v195 = *(id *)(v194 + v262[7]);
    sub_1001D5B1C(v194, type metadata accessor for Metric);
    unint64_t v11 = NSString.init(stringLiteral:)();
    uint64_t v61 = static NSObject.== infix(_:_:)();

    if (v61)
    {
      uint64_t v3 = (uint64_t)v248;
      uint64_t v61 = *v248;
      char v196 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v3 = v61;
      if ((v196 & 1) == 0)
      {
        uint64_t v61 = sub_1001B4AE0(v61);
        unint64_t *v248 = v61;
      }
      unint64_t v197 = *(void *)(v61 + 16);
      if (v193 >= v197) {
        goto LABEL_228;
      }
      unint64_t v198 = v197 - 1;
      uint64_t v3 = *(void *)(v250 + 72);
      unint64_t v11 = v61
          + ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80))
          + v3 * v193;
      sub_1001D5B1C(v11, type metadata accessor for Metric);
      if ((uint64_t)(v198 - v193) < 0) {
        goto LABEL_237;
      }
      if (v3 > 0 || v11 >= v11 + v3 + v3 * (v198 - v193))
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v3)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      *(void *)(v61 + 16) = v198;
      unint64_t *v248 = v61;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v199 = *v248;
  int64_t v200 = *(void *)(*v248 + 16);
  int64_t v201 = _swiftEmptyArrayStorage;
  if (v200)
  {
    v265 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001B241C(0, v200, 0);
    uint64_t v202 = v199 + ((*(unsigned __int8 *)(v250 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v250 + 80));
    uint64_t v203 = *(void *)(v250 + 72);
    int64_t v201 = v265;
    do
    {
      uint64_t v204 = v245;
      sub_1001D5A4C(v202, v245, type metadata accessor for Metric);
      long long v205 = (uint64_t *)(v204 + v262[16]);
      uint64_t v207 = *v205;
      uint64_t v206 = v205[1];
      swift_bridgeObjectRetain();
      sub_1001D5B1C(v204, type metadata accessor for Metric);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001B241C(0, v201[2] + 1, 1);
        int64_t v201 = v265;
      }
      unint64_t v209 = v201[2];
      unint64_t v208 = v201[3];
      if (v209 >= v208 >> 1)
      {
        sub_1001B241C(v208 > 1, v209 + 1, 1);
        int64_t v201 = v265;
      }
      v201[2] = v209 + 1;
      long long v210 = &v201[2 * v209];
      v210[4] = v207;
      v210[5] = v206;
      v202 += v203;
      --v200;
    }
    while (v200);
    swift_bridgeObjectRelease();
  }
  uint64_t v211 = sub_10017FD10((uint64_t)v201);
  swift_bridgeObjectRelease();
  uint64_t v212 = sub_1001CBFB8(v211);
  swift_bridgeObjectRelease();
  uint64_t v213 = *(void *)(v212 + 16);
  sub_100157064(&qword_1002D9670);
  uint64_t v214 = swift_allocObject();
  *(_OWORD *)(v214 + 16) = xmmword_100267EF0;
  *(void *)(v214 + 56) = &type metadata for Int;
  *(void *)(v214 + 32) = v213;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v215 = *(void *)(v212 + 16);
  v216 = v243;
  v262 = (int *)v212;
  if (v215)
  {
    v217 = (uint64_t *)(v212 + 40);
    uint64_t v218 = (uint64_t)v230;
    uint64_t v219 = v252;
    do
    {
      uint64_t v220 = *(v217 - 1);
      uint64_t v221 = *v217;
      swift_bridgeObjectRetain_n();
      uint64_t v222 = swift_bridgeObjectRetain();
      v223 = sub_1001D57CC(v222, v220, v221);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      UUID.init()();
      uint64_t v224 = v239;
      v225 = (uint64_t *)(v219 + *(int *)(v239 + 20));
      uint64_t *v225 = v220;
      v225[1] = v221;
      *(void *)(v219 + *(int *)(v224 + 24)) = v223;
      sub_1001D5A4C(v219, v218, type metadata accessor for MetricSectional);
      unint64_t v226 = *((void *)v216 + 3);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v226 = sub_1001EB3F8(0, *(void *)(v226 + 16) + 1, 1, v226);
      }
      unint64_t v228 = *(void *)(v226 + 16);
      unint64_t v227 = *(void *)(v226 + 24);
      if (v228 >= v227 >> 1) {
        unint64_t v226 = sub_1001EB3F8(v227 > 1, v228 + 1, 1, v226);
      }
      v217 += 2;
      *(void *)(v226 + 16) = v228 + 1;
      sub_1001D5AB4(v218, v226+ ((*(unsigned __int8 *)(v238 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80))+ *(void *)(v238 + 72) * v228, type metadata accessor for MetricSectional);
      ObservableObject<>.objectWillChange.getter();
      ObservableObjectPublisher.send()();
      swift_release();
      *((void *)v216 + 3) = v226;
      swift_bridgeObjectRelease();
      uint64_t v219 = v252;
      sub_1001D5B1C(v252, type metadata accessor for MetricSectional);
      --v215;
    }
    while (v215);
  }
  swift_bridgeObjectRelease();
  v265 = (void *)*((void *)v216 + 3);
  swift_bridgeObjectRetain();
  sub_1001CFC10((uint64_t *)&v265, type metadata accessor for MetricSectional, (uint64_t (*)(uint64_t))sub_1001B4ACC, sub_1001D2B5C);
  v229 = v265;
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  *((void *)v216 + 3) = v229;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001CFC10(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *))
{
  uint64_t v7 = *(void *)(a2(0) - 8);
  uint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = a3(v8);
  }
  uint64_t v9 = *(void *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  uint64_t result = a4(v11);
  *a1 = v8;
  return result;
}

uint64_t sub_1001CFCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = v5;
  LODWORD(v63) = a5;
  uint64_t v62 = a4;
  uint64_t v61 = a3;
  uint64_t v74 = a2;
  uint64_t v60 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v79 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v77 = v10;
  uint64_t v78 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16) = _swiftEmptyArrayStorage;
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.background(_:), v14);
  uint64_t v67 = v18;
  uint64_t v19 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  id v85 = sub_1001D5618;
  uint64_t v86 = v6;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v82 = 1107296256;
  uint64_t v83 = sub_1001E0068;
  unint64_t v84 = &unk_10028DB80;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v80 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_1001D22AC((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100157064((uint64_t *)&unk_1002D9600);
  unint64_t v23 = sub_1001AE4E8();
  uint64_t v68 = v22;
  unint64_t v65 = v23;
  uint64_t v69 = v21;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v70 = v19;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  uint64_t v24 = v78;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v79 + 8);
  uint64_t v72 = v9;
  uint64_t v73 = v7;
  v79 += 8;
  unint64_t v66 = v25;
  v25(v9, v7);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v24 + 8);
  char v71 = v13;
  uint64_t v78 = v24 + 8;
  unint64_t v64 = v26;
  v26(v13, v77);
  swift_release();
  dispatch_group_t v75 = (dispatch_group_t)v6[8];
  dispatch_group_enter(v75);
  uint64_t v27 = swift_allocObject();
  swift_weakInit();
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v76;
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = v29;
  uint64_t v30 = (void *)v6[5];
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_1001D5698;
  *(void *)(v31 + 24) = v28;
  swift_retain();
  uint64_t v32 = v6;
  swift_retain();
  id v33 = v30;
  swift_retain();
  sub_1001DDCAC();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = sub_1001D56D8;
  *(void *)(v34 + 24) = v31;
  swift_retain();
  uint64_t v35 = v60;
  uint64_t v36 = v61;
  uint64_t v37 = v62;
  sub_1001E0F10(v60, v74, v61, v62, (int)v63, 0, 0xE000000000000000, (uint64_t)sub_10015E118, v34);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  uint64_t v38 = v36;
  swift_release();
  dispatch_group_enter(v75);
  uint64_t v39 = (char *)v32[5];
  uint64_t v40 = swift_allocObject();
  unint64_t v63 = v32;
  swift_weakInit();
  uint64_t v41 = (void *)swift_allocObject();
  v41[2] = v40;
  v41[3] = v35;
  uint64_t v42 = v74;
  v41[4] = v74;
  v41[5] = v38;
  uint64_t v43 = v59;
  v41[6] = v37;
  v41[7] = v43;
  uint64_t v44 = *(void *)&v39[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_hardwareManager];
  if (*(unsigned char *)(v44 + 152))
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v45 = v39;
    sub_1001D5434(0, v40, v35, v42, v38, v37, v43);
  }
  else
  {
    int v46 = *(_DWORD *)(v44 + 148);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v47 = v39;
    sub_1001DDCAC();
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = sub_1001D5758;
    *(void *)(v48 + 24) = v41;
    swift_retain();
    sub_1001E1278(v46, (uint64_t)sub_10015E118, v48);
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v50 = swift_allocObject();
  swift_weakInit();
  uint64_t v51 = (void *)swift_allocObject();
  uint64_t v52 = v76;
  v51[2] = v43;
  v51[3] = v52;
  v51[4] = v50;
  id v85 = sub_1001D57B0;
  uint64_t v86 = v51;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v82 = 1107296256;
  uint64_t v83 = sub_1001E0068;
  unint64_t v84 = &unk_10028DC98;
  uint64_t v53 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v54 = v71;
  static DispatchQoS.unspecified.getter();
  unint64_t v80 = _swiftEmptyArrayStorage;
  uint64_t v55 = v72;
  uint64_t v56 = v73;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v53);

  v66(v55, v56);
  v64(v54, v77);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1001D05B8(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v4 - 8);
  uint64_t v22 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v19 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v18 - v12;
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, v7);
  aBlock[4] = sub_1001D57C4;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028DD10;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001D22AC((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001AE4E8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v19);
}

uint64_t sub_1001D0944(uint64_t a1)
{
  type metadata accessor for MetricDetailViewModel();
  sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  uint64_t result = swift_release();
  *(unsigned char *)(a1 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
  return result;
}

void sub_1001D09D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = Strong;
    type metadata accessor for MetricDetailViewModel();
    sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    swift_release();
    *(unsigned char *)(v8 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
    swift_release();
  }
  if (a1)
  {
    swift_beginAccess();
    *(void *)(a4 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1002D7A88 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100267EF0;
    if (a2)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    sub_100157064((uint64_t *)&unk_1002D9650);
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_100181588();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v13 = swift_weakLoadStrong();
  if (v13)
  {
    uint64_t v14 = *(id *)(v13 + 64);
    swift_release();
    dispatch_group_leave(v14);
  }
}

uint64_t sub_1001D0C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = a3;
  uint64_t v76 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v73 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for DispatchQoS();
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  char v71 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DispatchTime();
  uint64_t v69 = *(void *)(v70 - 8);
  uint64_t v7 = __chkstk_darwin(v70);
  unint64_t v66 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v68 = (char *)&v64 - v9;
  swift_beginAccess();
  uint64_t v10 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)sub_1001E0188((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = *(char **)(v10 + 16);
  if (v12)
  {
    uint64_t v65 = a2;
    id v77 = self;
    swift_bridgeObjectRetain();
    uint64_t v64 = v10;
    uint64_t v13 = (id *)(v10 + 56);
    while (1)
    {
      uint64_t v81 = v12;
      uint64_t v15 = *(v13 - 3);
      uint64_t v16 = *(v13 - 2);
      uint64_t v17 = *(v13 - 1);
      id v18 = *v13;
      id v80 = v15;
      id v79 = v16;
      id v78 = v17;
      Swift::String v19 = String.init(_:)(v18);
      id v20 = v77;
      id v21 = [v77 mainBundle];
      v22.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v22.value._object = (void *)0xEB00000000656C62;
      Swift::String v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v22, (NSBundle)v21, v19, v19);
      swift_bridgeObjectRelease();

      id v24 = v18;
      Swift::String v25 = String.init(_:)(v24);
      id v26 = [v20 mainBundle];
      v27.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      Swift::String v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v27, (NSBundle)v26, v25, v25);
      swift_bridgeObjectRelease();

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v11;
      unint64_t v31 = sub_1001EB868(v23._countAndFlagsBits, (uint64_t)v23._object);
      uint64_t v32 = v11[2];
      BOOL v33 = (v30 & 1) == 0;
      uint64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      char v35 = v30;
      if (v11[3] >= v34)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v11 = (void *)aBlock[0];
          if ((v30 & 1) == 0) {
            goto LABEL_12;
          }
        }
        else
        {
          sub_1001EE8C4();
          uint64_t v11 = (void *)aBlock[0];
          if ((v35 & 1) == 0) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_1001EC8EC(v34, isUniquelyReferenced_nonNull_native);
        unint64_t v36 = sub_1001EB868(v23._countAndFlagsBits, (uint64_t)v23._object);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_35;
        }
        unint64_t v31 = v36;
        uint64_t v11 = (void *)aBlock[0];
        if ((v35 & 1) == 0)
        {
LABEL_12:
          v11[(v31 >> 6) + 8] |= 1 << v31;
          *(Swift::String *)(v11[6] + 16 * v31) = v23;
          *(Swift::String *)(v11[7] + 16 * v31) = v28;
          uint64_t v38 = v11[2];
          BOOL v39 = __OFADD__(v38, 1);
          uint64_t v40 = v38 + 1;
          if (v39) {
            goto LABEL_33;
          }
          void v11[2] = v40;
          swift_bridgeObjectRetain();
          goto LABEL_4;
        }
      }
      uint64_t v14 = (Swift::String *)(v11[7] + 16 * v31);
      swift_bridgeObjectRelease();
      *uint64_t v14 = v28;
LABEL_4:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 += 5;
      uint64_t v12 = v81 - 1;
      if (v81 == (char *)1)
      {
        swift_bridgeObjectRelease();
        a2 = v65;
        break;
      }
    }
  }
  uint64_t v41 = (unint64_t *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v42 = *(void *)(*(void *)(a2 + 16) + 16);
  if (v42)
  {
    swift_beginAccess();
    unint64_t v43 = 0;
    while (v43 < *(void *)(*v41 + 16))
    {
      uint64_t v44 = type metadata accessor for Metric(0);
      unint64_t v45 = (*(unsigned __int8 *)(*(void *)(v44 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v44 - 8) + 80);
      uint64_t v46 = *(void *)(*(void *)(v44 - 8) + 72) * v43;
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v11[2])
      {
        sub_1001EB868(v47, v48);
        char v50 = v49;
        swift_bridgeObjectRelease();
        if (v50)
        {
          swift_beginAccess();
          unint64_t v51 = *v41;
          char v52 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v41 = v51;
          if ((v52 & 1) == 0)
          {
            unint64_t v51 = sub_1001B4AE0(v51);
            *uint64_t v41 = v51;
          }
          if (v43 >= *(void *)(v51 + 16)) {
            goto LABEL_34;
          }
          *(unsigned char *)(v51 + v45 + v46 + *(int *)(v44 + 60)) = 1;
          swift_endAccess();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (v42 == ++v43) {
        goto LABEL_28;
      }
    }
    goto LABEL_32;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t v53 = v67;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_beginAccess();
    uint64_t v54 = swift_bridgeObjectRetain();
    sub_1001CC92C(v54);
    swift_release();
    swift_bridgeObjectRelease();
  }
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  uint64_t v55 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v56 = v66;
  static DispatchTime.now()();
  unint64_t v57 = v68;
  + infix(_:_:)();
  uint64_t v81 = *(char **)(v69 + 8);
  uint64_t v58 = v70;
  ((void (*)(char *, uint64_t))v81)(v56, v70);
  aBlock[4] = sub_1001D57BC;
  aBlock[5] = v53;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028DCE8;
  uint64_t v59 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v60 = v71;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001D22AC((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001AE4E8();
  uint64_t v61 = v73;
  uint64_t v62 = v76;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v59);

  (*(void (**)(char *, uint64_t))(v75 + 8))(v61, v62);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v60, v74);
  return ((uint64_t (*)(char *, uint64_t))v81)(v57, v58);
}

uint64_t sub_1001D1570()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    type metadata accessor for MetricDetailViewModel();
    sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    swift_release();
    *(unsigned char *)(v1 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    type metadata accessor for MetricDetailViewModel();
    sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    swift_release();
    *(unsigned char *)(v3 + 33) = 0;
    return swift_release();
  }
  return result;
}

uint64_t sub_1001D16C8(unint64_t a1, int a2, unint64_t a3, char a4)
{
  int v40 = a2;
  uint64_t v8 = (int *)type metadata accessor for Metric(0);
  uint64_t v9 = *((void *)v8 - 1);
  __chkstk_darwin(v8);
  uint64_t v41 = &v39[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100157064((uint64_t *)&unk_1002D8B00);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = &v39[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = &v39[-v16];
  __chkstk_darwin(v15);
  id v18 = *(void (**)(void))(v9 + 56);
  uint64_t v42 = &v39[-v19];
  v18();
  if (a4) {
    goto LABEL_7;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v20 = v4[3];
  if (*(void *)(v20 + 16) <= a3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v21 = type metadata accessor for MetricSectional(0);
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v22 = *(void *)(v20
                  + ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80))
                  + *(void *)(*(void *)(v21 - 8) + 72) * a3
                  + *(int *)(v21 + 24));
  if (*(void *)(v22 + 16) > a1) {
    goto LABEL_9;
  }
  __break(1u);
LABEL_7:
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v22 = v4[2];
  if (*(void *)(v22 + 16) <= a1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_9:
  sub_1001D5A4C(v22+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * a1, (uint64_t)v17, type metadata accessor for Metric);
  Swift::String v23 = v42;
  sub_10015D658((uint64_t)v42, (uint64_t *)&unk_1002D8B00);
  ((void (*)(unsigned char *, void, uint64_t, int *))v18)(v17, 0, 1, v8);
  sub_10015D474((uint64_t)v17, (uint64_t)v23, (uint64_t *)&unk_1002D8B00);
  sub_1001754F4((uint64_t)v23, (uint64_t)v14);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_10015D658((uint64_t)v14, (uint64_t *)&unk_1002D8B00);
    if (qword_1002D7AC0 == -1)
    {
LABEL_11:
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      return sub_10015D658((uint64_t)v42, (uint64_t *)&unk_1002D8B00);
    }
LABEL_22:
    swift_once();
    goto LABEL_11;
  }
  uint64_t v24 = (uint64_t)v14;
  Swift::String v25 = v41;
  sub_1001D5AB4(v24, (uint64_t)v41, type metadata accessor for Metric);
  id v26 = *(void **)&v25[v8[12]];
  Swift::String_optional v27 = *(void **)&v25[v8[6]];
  Swift::String v28 = *(void **)&v25[v8[8]];
  int v29 = *(_DWORD *)&v25[v8[13]];
  v43[0] = *(id *)&v25[v8[5]];
  v43[1] = v26;
  v43[2] = v27;
  v43[3] = v28;
  int v44 = v29;
  char v30 = (void *)v4[5];
  id v31 = v43[0];
  id v32 = v26;
  id v33 = v27;
  id v34 = v28;
  id v35 = v30;
  sub_1001DDCAC();
  if (v40)
  {
    uint64_t v36 = sub_1001EF4E4(v31, v34);
    sub_1001E18AC(v36, v37, (uint64_t)sub_1001DF6F4, 0);

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001E158C((uint64_t)v43, (uint64_t)sub_1001DF68C, 0);

    swift_release();
  }
  sub_1001D5B1C((uint64_t)v41, type metadata accessor for Metric);
  return sub_10015D658((uint64_t)v42, (uint64_t *)&unk_1002D8B00);
}

uint64_t sub_1001D1C50()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_1001D1D3C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_1001D228C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028DB08;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001D22AC((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001AE4E8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void *sub_1001D2000()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_1001D200C(uint64_t a1, uint64_t a2)
{
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(qword_1002E31C8 + 146) == 1)
  {
    type metadata accessor for MetricDetailViewModel();
    sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = swift_release();
    char v5 = 1;
  }
  else if (*(uint64_t *)(qword_1002E31C8 + 160) <= 0)
  {
    type metadata accessor for MetricDetailViewModel();
    sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = swift_release();
    char v5 = 2;
  }
  else
  {
    type metadata accessor for MetricDetailViewModel();
    sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = swift_release();
    if (a2 >= 1)
    {
      *(unsigned char *)(a1 + 32) = 0;
      return result;
    }
    char v5 = 3;
  }
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1001D21D0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for MetricDetailViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001D2210@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for MetricDetailViewModel();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001D2254()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D228C()
{
  return sub_1001D200C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001D2294(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001D22A4()
{
  return swift_release();
}

uint64_t sub_1001D22AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned __int8 *sub_1001D22F4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001D23F4(a1, a2, a3);
}

unsigned __int8 *sub_1001D230C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_1001D2670();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_1001D23F4(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1001D23F4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  id v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1001D2670()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_1001D26F0(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1001D26F0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1001D2848(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_1001ABD00(v9, 0),
          unint64_t v12 = sub_1001D2948((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1001D2848(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_1001ABD68(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_1001ABD68(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_1001D2948(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    _OWORD v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1001ABD68(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_1001ABD68(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

Swift::Int sub_1001D2B5C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v159 = type metadata accessor for MetricSectional(0);
  uint64_t v154 = *(void *)(v159 - 8);
  uint64_t v4 = __chkstk_darwin(v159);
  uint64_t v149 = (uint64_t)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v160 = (uint64_t)&v140 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v140 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v140 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v152 = (uint64_t)&v140 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v151 = (uint64_t)&v140 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v146 = (uint64_t)&v140 - v19;
  __chkstk_darwin(v18);
  uint64_t v145 = (uint64_t)&v140 - v20;
  uint64_t v161 = a1;
  Swift::Int v21 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v21);
  if (result >= v21)
  {
    if (v21 < 0) {
      goto LABEL_154;
    }
    if (v21) {
      return sub_1001D41B4(0, v21, 1, v161);
    }
    return result;
  }
  if (v21 >= 0) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v21 + 1;
  }
  if (v21 < -1) {
    goto LABEL_162;
  }
  uint64_t v155 = v10;
  Swift::Int v142 = result;
  if (v21 < 2)
  {
    unint64_t v27 = (char *)_swiftEmptyArrayStorage;
    unint64_t v153 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80));
    char v141 = _swiftEmptyArrayStorage;
    if (v21 != 1)
    {
      unint64_t v29 = _swiftEmptyArrayStorage[2];
LABEL_120:
      unint64_t v133 = v27;
      if (v29 >= 2)
      {
        uint64_t v134 = *v161;
        do
        {
          unint64_t v135 = v29 - 2;
          if (v29 < 2) {
            goto LABEL_149;
          }
          if (!v134) {
            goto LABEL_161;
          }
          uint64_t v136 = *(void *)&v133[16 * v135 + 32];
          uint64_t v137 = *(void *)&v133[16 * v29 + 24];
          sub_1001D4758(v134 + *(void *)(v154 + 72) * v136, v134 + *(void *)(v154 + 72) * *(void *)&v133[16 * v29 + 16], v134 + *(void *)(v154 + 72) * v137, v153);
          if (v2) {
            break;
          }
          if (v137 < v136) {
            goto LABEL_150;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v133 = sub_1001B49EC((uint64_t)v133);
          }
          if (v135 >= *((void *)v133 + 2)) {
            goto LABEL_151;
          }
          uint64_t v138 = &v133[16 * v135 + 32];
          *(void *)uint64_t v138 = v136;
          *((void *)v138 + 1) = v137;
          unint64_t v139 = *((void *)v133 + 2);
          if (v29 > v139) {
            goto LABEL_152;
          }
          memmove(&v133[16 * v29 + 16], &v133[16 * v29 + 32], 16 * (v139 - v29));
          *((void *)v133 + 2) = v139 - 1;
          unint64_t v29 = v139 - 1;
        }
        while (v139 > 2);
      }
LABEL_131:
      swift_bridgeObjectRelease();
      v141[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v24 = v23 >> 1;
    uint64_t v25 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v25 + 16) = v24;
    uint64_t v26 = *(unsigned __int8 *)(v154 + 80);
    char v141 = (void *)v25;
    unint64_t v153 = v25 + ((v26 + 32) & ~v26);
  }
  Swift::Int v28 = 0;
  unint64_t v27 = (char *)_swiftEmptyArrayStorage;
  uint64_t v144 = v13;
  while (1)
  {
    Swift::Int v30 = v28;
    Swift::Int v31 = v28 + 1;
    Swift::Int v150 = v28;
    if (v28 + 1 >= v21)
    {
      Swift::Int v42 = v28;
    }
    else
    {
      uint64_t v32 = *v161;
      Swift::Int v33 = *(void *)(v154 + 72);
      Swift::Int v156 = v28 + 1;
      uint64_t v34 = v145;
      sub_1001D5A4C(v32 + v33 * v31, v145, type metadata accessor for MetricSectional);
      uint64_t v147 = v32;
      Swift::Int v158 = v33;
      uint64_t v35 = v32 + v33 * v30;
      uint64_t v36 = v146;
      sub_1001D5A4C(v35, v146, type metadata accessor for MetricSectional);
      uint64_t v37 = *(int *)(v159 + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v34 + v37 + 8);
      int v40 = (void *)(v36 + v37);
      if (*v40 == v38 && v40[1] == v39) {
        LODWORD(v157) = 0;
      }
      else {
        LODWORD(v157) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      sub_1001D5B1C(v146, type metadata accessor for MetricSectional);
      sub_1001D5B1C(v145, type metadata accessor for MetricSectional);
      Swift::Int v31 = v150 + 2;
      if (v150 + 2 < v21)
      {
        uint64_t v143 = v27;
        v156 *= v158;
        uint64_t v43 = v147;
        Swift::Int v44 = v158 * v31;
        while (1)
        {
          Swift::Int v45 = v21;
          Swift::Int v46 = v31;
          uint64_t v47 = v151;
          sub_1001D5A4C(v43 + v44, v151, type metadata accessor for MetricSectional);
          uint64_t v48 = v152;
          sub_1001D5A4C(v43 + v156, v152, type metadata accessor for MetricSectional);
          uint64_t v49 = *(int *)(v159 + 20);
          uint64_t v50 = *(void *)(v47 + v49);
          uint64_t v51 = *(void *)(v47 + v49 + 8);
          char v52 = (void *)(v48 + v49);
          BOOL v53 = *v52 == v50 && v52[1] == v51;
          int v54 = v53 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_1001D5B1C(v152, type metadata accessor for MetricSectional);
          sub_1001D5B1C(v151, type metadata accessor for MetricSectional);
          Swift::Int v21 = v45;
          if ((v157 ^ v54)) {
            break;
          }
          Swift::Int v31 = v46 + 1;
          v43 += v158;
          if (v45 == v46 + 1)
          {
            Swift::Int v31 = v45;
            unint64_t v27 = v143;
            goto LABEL_35;
          }
        }
        unint64_t v27 = v143;
        Swift::Int v31 = v46;
      }
LABEL_35:
      Swift::Int v42 = v150;
      if (v157)
      {
        if (v31 < v150) {
          goto LABEL_155;
        }
        if (v150 < v31)
        {
          Swift::Int v157 = v21;
          uint64_t v143 = v27;
          uint64_t v55 = 0;
          uint64_t v56 = v158 * (v31 - 1);
          Swift::Int v57 = v31 * v158;
          Swift::Int v58 = v150;
          uint64_t v59 = v150 * v158;
          do
          {
            if (v58 != v31 + v55 - 1)
            {
              uint64_t v148 = v2;
              uint64_t v60 = v147;
              if (!v147) {
                goto LABEL_160;
              }
              unint64_t v61 = v147 + v59;
              sub_1001D5AB4(v147 + v59, v149, type metadata accessor for MetricSectional);
              if (v59 < v56 || v61 >= v60 + v57)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v59 != v56)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              sub_1001D5AB4(v149, v60 + v56, type metadata accessor for MetricSectional);
              uint64_t v2 = v148;
            }
            ++v58;
            --v55;
            v56 -= v158;
            v57 -= v158;
            v59 += v158;
          }
          while (v58 < v31 + v55);
          unint64_t v27 = v143;
          uint64_t v13 = v144;
          Swift::Int v42 = v150;
          Swift::Int v21 = v157;
        }
      }
    }
    if (v31 < v21)
    {
      if (__OFSUB__(v31, v42)) {
        goto LABEL_153;
      }
      if (v31 - v42 < v142) {
        break;
      }
    }
LABEL_72:
    if (v31 < v42) {
      goto LABEL_148;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v158 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v27 = sub_1001B43F0(0, *((void *)v27 + 2) + 1, 1, v27);
    }
    unint64_t v83 = *((void *)v27 + 2);
    unint64_t v82 = *((void *)v27 + 3);
    unint64_t v29 = v83 + 1;
    if (v83 >= v82 >> 1) {
      unint64_t v27 = sub_1001B43F0((char *)(v82 > 1), v83 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v29;
    unint64_t v84 = v27 + 32;
    id v85 = &v27[16 * v83 + 32];
    Swift::Int v86 = v158;
    *(void *)id v85 = v42;
    *((void *)v85 + 1) = v86;
    if (v83)
    {
      while (1)
      {
        unint64_t v87 = v29 - 1;
        if (v29 >= 4)
        {
          uint64_t v92 = &v84[16 * v29];
          uint64_t v93 = *((void *)v92 - 8);
          uint64_t v94 = *((void *)v92 - 7);
          BOOL v98 = __OFSUB__(v94, v93);
          uint64_t v95 = v94 - v93;
          if (v98) {
            goto LABEL_137;
          }
          uint64_t v97 = *((void *)v92 - 6);
          uint64_t v96 = *((void *)v92 - 5);
          BOOL v98 = __OFSUB__(v96, v97);
          uint64_t v90 = v96 - v97;
          char v91 = v98;
          if (v98) {
            goto LABEL_138;
          }
          unint64_t v99 = v29 - 2;
          uint64_t v100 = &v84[16 * v29 - 32];
          uint64_t v102 = *(void *)v100;
          uint64_t v101 = *((void *)v100 + 1);
          BOOL v98 = __OFSUB__(v101, v102);
          uint64_t v103 = v101 - v102;
          if (v98) {
            goto LABEL_140;
          }
          BOOL v98 = __OFADD__(v90, v103);
          uint64_t v104 = v90 + v103;
          if (v98) {
            goto LABEL_143;
          }
          if (v104 >= v95)
          {
            char v122 = &v84[16 * v87];
            uint64_t v124 = *(void *)v122;
            uint64_t v123 = *((void *)v122 + 1);
            BOOL v98 = __OFSUB__(v123, v124);
            uint64_t v125 = v123 - v124;
            if (v98) {
              goto LABEL_147;
            }
            BOOL v115 = v90 < v125;
            goto LABEL_109;
          }
        }
        else
        {
          if (v29 != 3)
          {
            uint64_t v116 = *((void *)v27 + 4);
            uint64_t v117 = *((void *)v27 + 5);
            BOOL v98 = __OFSUB__(v117, v116);
            uint64_t v109 = v117 - v116;
            char v110 = v98;
            goto LABEL_103;
          }
          uint64_t v89 = *((void *)v27 + 4);
          uint64_t v88 = *((void *)v27 + 5);
          BOOL v98 = __OFSUB__(v88, v89);
          uint64_t v90 = v88 - v89;
          char v91 = v98;
        }
        if (v91) {
          goto LABEL_139;
        }
        unint64_t v99 = v29 - 2;
        uint64_t v105 = &v84[16 * v29 - 32];
        uint64_t v107 = *(void *)v105;
        uint64_t v106 = *((void *)v105 + 1);
        BOOL v108 = __OFSUB__(v106, v107);
        uint64_t v109 = v106 - v107;
        char v110 = v108;
        if (v108) {
          goto LABEL_142;
        }
        int64_t v111 = &v84[16 * v87];
        uint64_t v113 = *(void *)v111;
        uint64_t v112 = *((void *)v111 + 1);
        BOOL v98 = __OFSUB__(v112, v113);
        uint64_t v114 = v112 - v113;
        if (v98) {
          goto LABEL_145;
        }
        if (__OFADD__(v109, v114)) {
          goto LABEL_146;
        }
        if (v109 + v114 >= v90)
        {
          BOOL v115 = v90 < v114;
LABEL_109:
          if (v115) {
            unint64_t v87 = v99;
          }
          goto LABEL_111;
        }
LABEL_103:
        if (v110) {
          goto LABEL_141;
        }
        uint64_t v118 = &v84[16 * v87];
        uint64_t v120 = *(void *)v118;
        uint64_t v119 = *((void *)v118 + 1);
        BOOL v98 = __OFSUB__(v119, v120);
        uint64_t v121 = v119 - v120;
        if (v98) {
          goto LABEL_144;
        }
        if (v121 < v109) {
          goto LABEL_14;
        }
LABEL_111:
        unint64_t v126 = v87 - 1;
        if (v87 - 1 >= v29)
        {
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
          goto LABEL_157;
        }
        if (!*v161) {
          goto LABEL_159;
        }
        uint64_t v127 = v27;
        uint64_t v128 = &v84[16 * v126];
        uint64_t v129 = *(void *)v128;
        uint64_t v130 = &v84[16 * v87];
        uint64_t v131 = *((void *)v130 + 1);
        sub_1001D4758(*v161 + *(void *)(v154 + 72) * *(void *)v128, *v161 + *(void *)(v154 + 72) * *(void *)v130, *v161 + *(void *)(v154 + 72) * v131, v153);
        if (v2) {
          goto LABEL_131;
        }
        if (v131 < v129) {
          goto LABEL_134;
        }
        if (v87 > *((void *)v127 + 2)) {
          goto LABEL_135;
        }
        *(void *)uint64_t v128 = v129;
        *(void *)&v84[16 * v126 + 8] = v131;
        unint64_t v132 = *((void *)v127 + 2);
        if (v87 >= v132) {
          goto LABEL_136;
        }
        unint64_t v27 = v127;
        unint64_t v29 = v132 - 1;
        memmove(&v84[16 * v87], v130 + 16, 16 * (v132 - 1 - v87));
        *((void *)v127 + 2) = v132 - 1;
        if (v132 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v29 = 1;
LABEL_14:
    Swift::Int v21 = v161[1];
    Swift::Int v28 = v158;
    uint64_t v13 = v144;
    if (v158 >= v21) {
      goto LABEL_120;
    }
  }
  if (__OFADD__(v42, v142)) {
    goto LABEL_156;
  }
  if (v42 + v142 >= v21) {
    Swift::Int v62 = v21;
  }
  else {
    Swift::Int v62 = v42 + v142;
  }
  if (v62 >= v42)
  {
    if (v31 != v62)
    {
      uint64_t v143 = v27;
      uint64_t v147 = v62;
      uint64_t v148 = v2;
      Swift::Int v63 = *(void *)(v154 + 72);
      uint64_t v64 = v63 * (v31 - 1);
      Swift::Int v156 = v63;
      Swift::Int v65 = v31 * v63;
      do
      {
        uint64_t v67 = 0;
        Swift::Int v157 = v65;
        Swift::Int v158 = v31;
        while (1)
        {
          uint64_t v68 = *v161;
          sub_1001D5A4C(v65 + v67 + *v161, (uint64_t)v13, type metadata accessor for MetricSectional);
          uint64_t v69 = v64;
          uint64_t v70 = v64 + v67 + v68;
          uint64_t v71 = (uint64_t)v13;
          uint64_t v72 = (uint64_t)v155;
          sub_1001D5A4C(v70, (uint64_t)v155, type metadata accessor for MetricSectional);
          uint64_t v73 = *(int *)(v159 + 20);
          uint64_t v74 = *(void *)(v71 + v73);
          uint64_t v75 = *(void *)(v71 + v73 + 8);
          uint64_t v76 = (void *)(v72 + v73);
          if (*v76 == v74 && v76[1] == v75) {
            break;
          }
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_1001D5B1C(v72, type metadata accessor for MetricSectional);
          sub_1001D5B1C(v71, type metadata accessor for MetricSectional);
          uint64_t v13 = (char *)v71;
          if ((v78 & 1) == 0) {
            goto LABEL_60;
          }
          uint64_t v79 = *v161;
          if (!*v161) {
            goto LABEL_158;
          }
          uint64_t v64 = v69;
          Swift::Int v65 = v157;
          uint64_t v80 = v79 + v64 + v67;
          sub_1001D5AB4(v79 + v157 + v67, v160, type metadata accessor for MetricSectional);
          swift_arrayInitWithTakeFrontToBack();
          sub_1001D5AB4(v160, v80, type metadata accessor for MetricSectional);
          v67 -= v156;
          ++v42;
          Swift::Int v66 = v158;
          if (v158 == v42) {
            goto LABEL_61;
          }
        }
        sub_1001D5B1C(v72, type metadata accessor for MetricSectional);
        sub_1001D5B1C(v71, type metadata accessor for MetricSectional);
        uint64_t v13 = (char *)v71;
LABEL_60:
        uint64_t v64 = v69;
        Swift::Int v65 = v157;
        Swift::Int v66 = v158;
LABEL_61:
        Swift::Int v31 = v66 + 1;
        v64 += v156;
        v65 += v156;
        Swift::Int v42 = v150;
      }
      while (v31 != v147);
      Swift::Int v31 = v147;
      uint64_t v2 = v148;
      unint64_t v27 = v143;
    }
    goto LABEL_72;
  }
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1001D3720(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v135 = type metadata accessor for Metric(0);
  uint64_t v128 = *(void *)(v135 - 8);
  uint64_t v4 = __chkstk_darwin(v135);
  uint64_t v125 = (uint64_t)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v136 = (uint64_t)&v119 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v132 = (uint64_t)&v119 - v9;
  __chkstk_darwin(v8);
  uint64_t v131 = (uint64_t)&v119 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_1001D44A8(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v121 = result;
  if (v11 < 2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v127 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v120 = v17;
      if (v20 >= 2)
      {
        uint64_t v111 = *a1;
        do
        {
          unint64_t v112 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v111) {
            goto LABEL_149;
          }
          uint64_t v113 = v19;
          uint64_t v114 = v19 + 32;
          uint64_t v115 = *(void *)&v19[16 * v112 + 32];
          uint64_t v116 = *(void *)&v19[16 * v20 + 24];
          sub_1001D4CF8(v111 + *(void *)(v128 + 72) * v115, v111 + *(void *)(v128 + 72) * *(void *)&v114[16 * v20 - 16], v111 + *(void *)(v128 + 72) * v116, v127);
          if (v2) {
            break;
          }
          if (v116 < v115) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v113 = sub_1001B49EC((uint64_t)v113);
          }
          if (v112 >= *((void *)v113 + 2)) {
            goto LABEL_139;
          }
          uint64_t v117 = &v113[16 * v112 + 32];
          *(void *)uint64_t v117 = v115;
          *((void *)v117 + 1) = v116;
          unint64_t v118 = *((void *)v113 + 2);
          if (v20 > v118) {
            goto LABEL_140;
          }
          uint64_t v19 = v113;
          memmove(&v113[16 * v20 + 16], &v113[16 * v20 + 32], 16 * (v118 - v20));
          *((void *)v113 + 2) = v118 - 1;
          unint64_t v20 = v118 - 1;
        }
        while (v118 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v120[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v120 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v128 + 80);
    uint64_t v120 = (void *)v15;
    unint64_t v127 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v134 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v126 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v35 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v123 = v2;
    Swift::Int v23 = *a1;
    Swift::Int v24 = *(void *)(v128 + 72);
    uint64_t v25 = v131;
    sub_1001D5A4C(*a1 + v24 * v22, v131, type metadata accessor for Metric);
    uint64_t v26 = v132;
    sub_1001D5A4C(v23 + v24 * v21, v132, type metadata accessor for Metric);
    LODWORD(v133) = static Date.> infix(_:_:)();
    sub_1001D5B1C(v26, type metadata accessor for Metric);
    sub_1001D5B1C(v25, type metadata accessor for Metric);
    Swift::Int v130 = v23;
    Swift::Int v137 = v24;
    if (v21 + 2 >= v11)
    {
      Swift::Int v29 = v21 + 2;
    }
    else
    {
      char v122 = v19;
      uint64_t v27 = v24 * v22;
      Swift::Int v28 = v23;
      Swift::Int v29 = v21 + 2;
      uint64_t v30 = v24 * (v21 + 2);
      while (1)
      {
        Swift::Int v31 = v11;
        uint64_t v32 = v131;
        sub_1001D5A4C(v28 + v30, v131, type metadata accessor for Metric);
        uint64_t v33 = v132;
        sub_1001D5A4C(v28 + v27, v132, type metadata accessor for Metric);
        int v34 = static Date.> infix(_:_:)();
        sub_1001D5B1C(v33, type metadata accessor for Metric);
        sub_1001D5B1C(v32, type metadata accessor for Metric);
        if ((v133 ^ v34)) {
          break;
        }
        v28 += v137;
        ++v29;
        Swift::Int v11 = v31;
        if (v31 == v29)
        {
          Swift::Int v29 = v31;
          uint64_t v19 = v122;
          Swift::Int v21 = v126;
          goto LABEL_25;
        }
      }
      uint64_t v19 = v122;
      Swift::Int v21 = v126;
      Swift::Int v11 = v31;
    }
LABEL_25:
    a1 = v134;
    if ((v133 & 1) == 0)
    {
      Swift::Int v35 = v29;
      goto LABEL_39;
    }
    if (v29 < v21) {
      goto LABEL_143;
    }
    Swift::Int v35 = v29;
    if (v21 < v29) {
      break;
    }
LABEL_39:
    uint64_t v2 = v123;
    if (v35 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v35 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v133 = v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_1001B43F0(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v60 = *((void *)v19 + 2);
    unint64_t v59 = *((void *)v19 + 3);
    unint64_t v20 = v60 + 1;
    if (v60 >= v59 >> 1) {
      uint64_t v19 = sub_1001B43F0((char *)(v59 > 1), v60 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    unint64_t v61 = v19 + 32;
    Swift::Int v62 = &v19[16 * v60 + 32];
    Swift::Int v63 = v133;
    *(void *)Swift::Int v62 = v21;
    *((void *)v62 + 1) = v63;
    if (v60)
    {
      while (1)
      {
        unint64_t v64 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v69 = &v61[16 * v20];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_125;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_126;
          }
          unint64_t v76 = v20 - 2;
          id v77 = &v61[16 * v20 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_128;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_131;
          }
          if (v81 >= v72)
          {
            unint64_t v99 = &v61[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_135;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v93 = *((void *)v19 + 4);
            uint64_t v94 = *((void *)v19 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_90;
          }
          uint64_t v66 = *((void *)v19 + 4);
          uint64_t v65 = *((void *)v19 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }
        if (v68) {
          goto LABEL_127;
        }
        unint64_t v76 = v20 - 2;
        unint64_t v82 = &v61[16 * v20 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_130;
        }
        uint64_t v88 = &v61[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_133;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_134;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_96:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v87) {
          goto LABEL_129;
        }
        uint64_t v95 = &v61[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_132;
        }
        if (v98 < v86) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v103 = v64 - 1;
        if (v64 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        uint64_t v104 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        uint64_t v105 = v19;
        uint64_t v106 = &v61[16 * v103];
        uint64_t v107 = *(void *)v106;
        BOOL v108 = &v61[16 * v64];
        uint64_t v109 = *((void *)v108 + 1);
        sub_1001D4CF8(v104 + *(void *)(v128 + 72) * *(void *)v106, v104 + *(void *)(v128 + 72) * *(void *)v108, v104 + *(void *)(v128 + 72) * v109, v127);
        if (v2) {
          goto LABEL_118;
        }
        if (v109 < v107) {
          goto LABEL_122;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v106 = v107;
        *(void *)&v61[16 * v103 + 8] = v109;
        unint64_t v110 = *((void *)v105 + 2);
        if (v64 >= v110) {
          goto LABEL_124;
        }
        uint64_t v19 = v105;
        unint64_t v20 = v110 - 1;
        memmove(&v61[16 * v64], v108 + 16, 16 * (v110 - 1 - v64));
        *((void *)v105 + 2) = v110 - 1;
        a1 = v134;
        if (v110 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v133;
    if (v133 >= v11)
    {
      uint64_t v17 = v120;
      goto LABEL_107;
    }
  }
  Swift::Int v133 = v11;
  char v122 = v19;
  uint64_t v36 = 0;
  Swift::Int v37 = v137;
  uint64_t v38 = v137 * (v29 - 1);
  Swift::Int v39 = v29 * v137;
  Swift::Int v40 = v21;
  uint64_t v41 = v21 * v137;
  do
  {
    if (v40 != v35 + v36 - 1)
    {
      Swift::Int v42 = v130;
      if (!v130) {
        goto LABEL_148;
      }
      unint64_t v43 = v130 + v41;
      sub_1001D5AB4(v130 + v41, v125, type metadata accessor for Metric);
      if (v41 < v38 || v43 >= v42 + v39)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v41 != v38)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      sub_1001D5AB4(v125, v42 + v38, type metadata accessor for Metric);
      a1 = v134;
      Swift::Int v35 = v29;
      Swift::Int v37 = v137;
    }
    ++v40;
    --v36;
    v38 -= v37;
    v39 -= v37;
    v41 += v37;
  }
  while (v40 < v35 + v36);
  uint64_t v19 = v122;
  uint64_t v2 = v123;
  Swift::Int v21 = v126;
  Swift::Int v11 = v133;
  if (v35 >= v133) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v35, v21)) {
    goto LABEL_141;
  }
  if (v35 - v21 >= v121) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v121)) {
    goto LABEL_144;
  }
  if (v21 + v121 >= v11) {
    Swift::Int v44 = v11;
  }
  else {
    Swift::Int v44 = v21 + v121;
  }
  if (v44 >= v21)
  {
    if (v35 != v44)
    {
      char v122 = v19;
      uint64_t v123 = v2;
      uint64_t v45 = *(void *)(v128 + 72);
      uint64_t v46 = v45 * (v35 - 1);
      uint64_t v129 = v45;
      Swift::Int v47 = v35 * v45;
      Swift::Int v124 = v44;
      do
      {
        uint64_t v49 = 0;
        Swift::Int v133 = v35;
        Swift::Int v130 = v47;
        while (1)
        {
          Swift::Int v137 = v21;
          uint64_t v50 = *a1;
          uint64_t v51 = v131;
          sub_1001D5A4C(v47 + v49 + *a1, v131, type metadata accessor for Metric);
          uint64_t v52 = v46;
          uint64_t v53 = v46 + v49 + v50;
          int v54 = a1;
          uint64_t v55 = v132;
          sub_1001D5A4C(v53, v132, type metadata accessor for Metric);
          LOBYTE(v50) = static Date.> infix(_:_:)();
          sub_1001D5B1C(v55, type metadata accessor for Metric);
          sub_1001D5B1C(v51, type metadata accessor for Metric);
          if ((v50 & 1) == 0) {
            break;
          }
          uint64_t v56 = *v54;
          if (!*v54) {
            goto LABEL_146;
          }
          Swift::Int v47 = v130;
          uint64_t v46 = v52;
          uint64_t v57 = v56 + v52 + v49;
          sub_1001D5AB4(v56 + v130 + v49, v136, type metadata accessor for Metric);
          swift_arrayInitWithTakeFrontToBack();
          sub_1001D5AB4(v136, v57, type metadata accessor for Metric);
          v49 -= v129;
          Swift::Int v21 = v137 + 1;
          Swift::Int v48 = v133;
          a1 = v134;
          if (v133 == v137 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v48 = v133;
        a1 = v54;
        uint64_t v46 = v52;
        Swift::Int v47 = v130;
LABEL_52:
        Swift::Int v35 = v48 + 1;
        v46 += v129;
        v47 += v129;
        Swift::Int v21 = v126;
      }
      while (v35 != v124);
      Swift::Int v35 = v124;
      uint64_t v19 = v122;
      uint64_t v2 = v123;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D41B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  Swift::Int v35 = a4;
  uint64_t v30 = a1;
  uint64_t v33 = type metadata accessor for MetricSectional(0);
  uint64_t v6 = __chkstk_darwin(v33);
  uint64_t v34 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v32 = a3;
  uint64_t v29 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v36 = v15 * (v32 - 1);
    uint64_t v31 = v15;
    uint64_t v16 = v15 * v32;
LABEL_6:
    uint64_t v17 = 0;
    uint64_t v18 = v30;
    while (1)
    {
      uint64_t v19 = *v35;
      sub_1001D5A4C(v16 + v17 + *v35, (uint64_t)v14, type metadata accessor for MetricSectional);
      sub_1001D5A4C(v36 + v17 + v19, (uint64_t)v10, type metadata accessor for MetricSectional);
      uint64_t v20 = *(int *)(v33 + 20);
      uint64_t v21 = *(void *)&v14[v20];
      uint64_t v22 = *(void *)&v14[v20 + 8];
      Swift::Int v23 = &v10[v20];
      if (*(void *)v23 == v21 && *((void *)v23 + 1) == v22)
      {
        sub_1001D5B1C((uint64_t)v10, type metadata accessor for MetricSectional);
        uint64_t result = sub_1001D5B1C((uint64_t)v14, type metadata accessor for MetricSectional);
LABEL_5:
        v36 += v31;
        v16 += v31;
        if (++v32 == v29) {
          return result;
        }
        goto LABEL_6;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_1001D5B1C((uint64_t)v10, type metadata accessor for MetricSectional);
      uint64_t result = sub_1001D5B1C((uint64_t)v14, type metadata accessor for MetricSectional);
      if ((v25 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v26 = *v35;
      if (!*v35) {
        break;
      }
      uint64_t v27 = v26 + v36 + v17;
      sub_1001D5AB4(v26 + v16 + v17, v34, type metadata accessor for MetricSectional);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1001D5AB4(v34, v27, type metadata accessor for MetricSectional);
      v17 -= v31;
      if (v32 == ++v18) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D44A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v25 = a1;
  uint64_t v28 = type metadata accessor for Metric(0);
  uint64_t v7 = __chkstk_darwin(v28);
  uint64_t v29 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v11 = (char *)&v23 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v27 = a3;
  uint64_t v24 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v31 = v16 * (v27 - 1);
    uint64_t v26 = v16;
    uint64_t v30 = v16 * v27;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v25;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = a4;
      sub_1001D5A4C(v30 + v17 + *a4, (uint64_t)v15, type metadata accessor for Metric);
      sub_1001D5A4C(v31 + v17 + v19, (uint64_t)v11, type metadata accessor for Metric);
      LOBYTE(v19) = static Date.> infix(_:_:)();
      sub_1001D5B1C((uint64_t)v11, type metadata accessor for Metric);
      uint64_t result = sub_1001D5B1C((uint64_t)v15, type metadata accessor for Metric);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v31 += v26;
        v30 += v26;
        if (++v27 == v24) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v21 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v22 = v21 + v31 + v17;
      sub_1001D5AB4(v21 + v30 + v17, v29, type metadata accessor for Metric);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1001D5AB4(v29, v22, type metadata accessor for Metric);
      v17 -= v26;
      ++v18;
      a4 = v20;
      if (v27 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D4758(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v54 = type metadata accessor for MetricSectional(0);
  uint64_t v8 = __chkstk_darwin(v54);
  uint64_t v53 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v51 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v51 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v51 - v16;
  uint64_t v19 = *(void *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  unint64_t v20 = a1;
  if (a2 - a1 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_72;
  }
  int64_t v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_73;
  }
  uint64_t v22 = (uint64_t)(a2 - a1) / v19;
  unint64_t v57 = a1;
  unint64_t v56 = a4;
  uint64_t v23 = v21 / v19;
  if (v22 >= v21 / v19)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      unint64_t v52 = a1;
      uint64_t v25 = v23 * v19;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v37 = a4 + v25;
      unint64_t v55 = a4 + v25;
      unint64_t v57 = a2;
      if (v25 >= 1 && v52 < a2)
      {
        uint64_t v39 = -v19;
        do
        {
          sub_1001D5A4C(v37 + v39, (uint64_t)v12, type metadata accessor for MetricSectional);
          unint64_t v40 = a2 + v39;
          uint64_t v41 = v53;
          sub_1001D5A4C(a2 + v39, v53, type metadata accessor for MetricSectional);
          uint64_t v42 = *(int *)(v54 + 20);
          uint64_t v43 = *(void *)&v12[v42];
          uint64_t v44 = *(void *)&v12[v42 + 8];
          uint64_t v45 = (void *)(v41 + v42);
          if (*v45 == v43 && v45[1] == v44) {
            char v47 = 0;
          }
          else {
            char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          unint64_t v48 = a3 + v39;
          sub_1001D5B1C(v53, type metadata accessor for MetricSectional);
          sub_1001D5B1C((uint64_t)v12, type metadata accessor for MetricSectional);
          if (v47)
          {
            if (a3 < a2 || v48 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v57 += v39;
          }
          else
          {
            unint64_t v49 = v55;
            v55 += v39;
            if (a3 < v49 || v48 >= v49)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v49)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v40 = a2;
          }
          unint64_t v37 = v55;
          if (v55 <= a4) {
            break;
          }
          a2 = v40;
          a3 += v39;
        }
        while (v40 > v52);
      }
LABEL_70:
      sub_1001B4734(&v57, &v56, (uint64_t *)&v55);
      return 1;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = v22 * v19;
    if (a4 < v20 || v20 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != v20)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v26 = a4 + v24;
    unint64_t v55 = a4 + v24;
    if (v24 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_1001D5A4C(a2, (uint64_t)v17, type metadata accessor for MetricSectional);
        sub_1001D5A4C(a4, (uint64_t)v15, type metadata accessor for MetricSectional);
        uint64_t v28 = *(int *)(v54 + 20);
        uint64_t v29 = *(void *)&v17[v28];
        uint64_t v30 = *(void *)&v17[v28 + 8];
        uint64_t v31 = &v15[v28];
        if (*(void *)v31 == v29 && *((void *)v31 + 1) == v30) {
          break;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_1001D5B1C((uint64_t)v15, type metadata accessor for MetricSectional);
        sub_1001D5B1C((uint64_t)v17, type metadata accessor for MetricSectional);
        if ((v33 & 1) == 0) {
          goto LABEL_32;
        }
        unint64_t v34 = v57;
        unint64_t v35 = a2 + v19;
        if (v57 < a2 || v57 >= v35)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v57 == a2)
        {
          unint64_t v34 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_38:
        unint64_t v57 = v34 + v19;
        a4 = v56;
        if (v56 < v26)
        {
          a2 = v35;
          if (v35 < a3) {
            continue;
          }
        }
        goto LABEL_70;
      }
      sub_1001D5B1C((uint64_t)v15, type metadata accessor for MetricSectional);
      sub_1001D5B1C((uint64_t)v17, type metadata accessor for MetricSectional);
LABEL_32:
      unint64_t v34 = v57;
      unint64_t v36 = v56 + v19;
      if (v57 < v56 || v57 >= v36)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v57 != v56)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v56 = v36;
      unint64_t v35 = a2;
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_74:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D4CF8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v45 = type metadata accessor for Metric(0);
  uint64_t v8 = __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v48 = a1;
  unint64_t v47 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v46 = a4 + v18;
      unint64_t v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v28 = -v13;
        unint64_t v42 = a4;
        unint64_t v43 = a1;
        do
        {
          unint64_t v29 = a3 + v28;
          sub_1001D5A4C(v26 + v28, (uint64_t)v11, type metadata accessor for Metric);
          unint64_t v30 = a2 + v28;
          unint64_t v31 = a3;
          uint64_t v32 = (uint64_t)v11;
          uint64_t v33 = v44;
          sub_1001D5A4C(a2 + v28, v44, type metadata accessor for Metric);
          char v34 = static Date.> infix(_:_:)();
          uint64_t v35 = v33;
          uint64_t v11 = (char *)v32;
          sub_1001D5B1C(v35, type metadata accessor for Metric);
          sub_1001D5B1C(v32, type metadata accessor for Metric);
          if (v34)
          {
            if (v31 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v37 = v42;
              unint64_t v38 = v43;
            }
            else
            {
              BOOL v36 = v31 == a2;
              unint64_t v37 = v42;
              unint64_t v38 = v43;
              if (!v36) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v48 += v28;
          }
          else
          {
            unint64_t v39 = v46;
            v46 += v28;
            if (v31 < v39 || v29 >= v39)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v30 = a2;
              unint64_t v37 = v42;
              unint64_t v38 = v43;
            }
            else
            {
              unint64_t v38 = v43;
              if (v31 != v39) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v30 = a2;
              unint64_t v37 = v42;
            }
          }
          unint64_t v26 = v46;
          if (v46 <= v37) {
            break;
          }
          a2 = v30;
          a3 = v29;
        }
        while (v30 > v38);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_1001D5A4C(a2, (uint64_t)v11, type metadata accessor for Metric);
        uint64_t v21 = v44;
        sub_1001D5A4C(a4, v44, type metadata accessor for Metric);
        char v22 = static Date.> infix(_:_:)();
        sub_1001D5B1C(v21, type metadata accessor for Metric);
        sub_1001D5B1C((uint64_t)v11, type metadata accessor for Metric);
        unint64_t v23 = v48;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v48 < a2 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v47 + v13;
          if (v48 < v47 || v48 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v47 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v48 = v23 + v13;
        a4 = v47;
        if (v47 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_1001B474C(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1001D51EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return;
  }
  uint64_t v7 = a2;
  unint64_t v8 = 0;
  uint64_t v9 = a1 + 64;
  uint64_t v37 = -(uint64_t)v5;
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v33 = a1 + 64;
  unint64_t v34 = *(void *)(a1 + 16);
  do
  {
    uint64_t v35 = v10;
    if (v8 <= v5) {
      unint64_t v11 = v5;
    }
    else {
      unint64_t v11 = v8;
    }
    uint64_t v40 = -(uint64_t)v11;
    for (unint64_t i = (_DWORD *)(v9 + 40 * v8++); ; i += 10)
    {
      if (v40 + v8 == 1)
      {
        __break(1u);
        return;
      }
      uint64_t v15 = (void *)*((void *)i - 4);
      int64_t v14 = (void *)*((void *)i - 3);
      uint64_t v17 = (void *)*((void *)i - 2);
      uint64_t v16 = (void *)*((void *)i - 1);
      int v39 = *i;
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v7 && v18 == a3)
      {
        id v25 = v15;
        id v26 = v14;
        id v27 = v17;
        id v28 = v16;
        swift_bridgeObjectRelease();
      }
      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        id v21 = v15;
        id v22 = v14;
        id v23 = v17;
        id v24 = v16;
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0) {
          goto LABEL_8;
        }
      }
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a4 && v29 == a5) {
        break;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_20;
      }
LABEL_8:

      ++v8;
      uint64_t v7 = a2;
      if (v37 + v8 == 1) {
        return;
      }
    }
    swift_bridgeObjectRelease();
LABEL_20:
    uint64_t v10 = v35;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1001B2478(0, v35[2] + 1, 1);
      uint64_t v10 = v35;
    }
    uint64_t v9 = v33;
    unint64_t v5 = v34;
    unint64_t v31 = v10[2];
    unint64_t v30 = v10[3];
    if (v31 >= v30 >> 1)
    {
      sub_1001B2478(v30 > 1, v31 + 1, 1);
      uint64_t v9 = v33;
      unint64_t v5 = v34;
      uint64_t v10 = v35;
    }
    v10[2] = v31 + 1;
    uint64_t v32 = &v10[5 * v31];
    v32[4] = v15;
    v32[5] = v14;
    v32[6] = v17;
    v32[7] = v16;
    *((_DWORD *)v32 + 16) = v39;
    uint64_t v7 = a2;
  }
  while (v37 + v8);
}

void sub_1001D5434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = swift_bridgeObjectRetain();
    sub_1001D51EC(v12, a3, a4, a5, a6);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(a7 + 16) = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v16 = Strong;
      type metadata accessor for MetricDetailViewModel();
      sub_1001D22AC(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
      ObservableObject<>.objectWillChange.getter();
      ObservableObjectPublisher.send()();
      swift_release();
      *(unsigned char *)(v16 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
      swift_release();
    }
  }
  swift_beginAccess();
  uint64_t v17 = swift_weakLoadStrong();
  if (v17)
  {
    uint64_t v18 = *(id *)(v17 + 64);
    swift_release();
    dispatch_group_leave(v18);
  }
}

uint64_t sub_1001D55E0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D5618()
{
  return sub_1001D05B8(v0);
}

uint64_t sub_1001D5620()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D5658()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001D5698(uint64_t a1, uint64_t a2)
{
  sub_1001D09D0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001D56A0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D56D8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001D5708()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1001D5758(uint64_t a1)
{
  sub_1001D5434(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1001D5768()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D57B0()
{
  return sub_1001D0C2C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001D57BC()
{
  return sub_1001D1570();
}

uint64_t sub_1001D57C4()
{
  return sub_1001D0944(v0);
}

void *sub_1001D57CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Metric(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v26 = v3;
    uint64_t v16 = *(void *)(v11 + 72);
    unint64_t v28 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = a1 + v28;
    uint64_t v18 = _swiftEmptyArrayStorage;
    uint64_t v29 = v7;
    uint64_t v27 = v16;
    do
    {
      sub_1001D5A4C(v17, (uint64_t)v13, type metadata accessor for Metric);
      unint64_t v19 = &v13[*(int *)(v7 + 64)];
      uint64_t v20 = *((void *)v19 + 1);
      if (v20
        && (*(void *)v19 == a2 ? (BOOL v21 = v20 == a3) : (BOOL v21 = 0),
            v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t v22 = a2;
        uint64_t v23 = a3;
        sub_1001D5AB4((uint64_t)v13, (uint64_t)v10, type metadata accessor for Metric);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1001B243C(0, v18[2] + 1, 1);
        }
        uint64_t v18 = v30;
        unint64_t v25 = v30[2];
        unint64_t v24 = v30[3];
        if (v25 >= v24 >> 1)
        {
          sub_1001B243C(v24 > 1, v25 + 1, 1);
          uint64_t v18 = v30;
        }
        void v18[2] = v25 + 1;
        uint64_t v16 = v27;
        sub_1001D5AB4((uint64_t)v10, (uint64_t)v18 + v28 + v25 * v27, type metadata accessor for Metric);
        a3 = v23;
        a2 = v22;
        uint64_t v7 = v29;
      }
      else
      {
        sub_1001D5B1C((uint64_t)v13, type metadata accessor for Metric);
      }
      v17 += v16;
      --v15;
    }
    while (v15);
    return v30;
  }
  return result;
}

uint64_t sub_1001D5A4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001D5AB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001D5B1C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

NSString sub_1001D5B7C(uint64_t a1)
{
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v1);
      swift_bridgeObjectRelease();
      v2._uint64_t countAndFlagsBits = 41;
      v2._object = (void *)0xE100000000000000;
      String.append(_:)(v2);
      break;
    default:
      dispatch thunk of CustomStringConvertible.description.getter();
      break;
  }
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1001D5D88()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Swift::String v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  if (*(unsigned char *)(v0 + 32)) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 32)) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 40;
}

uint64_t sub_1001D5E90()
{
  id v1 = [self defaultCenter];
  if (qword_1002D7AF0 != -1) {
    swift_once();
  }
  [v1 removeObserver:v0 name:static NSNotificationName.numberOfSubsChanged object:0];

  swift_bridgeObjectRelease();
  uint64_t v2 = v0 + OBJC_IVAR____TtC13FTMInternal_423CarrierSegmentViewModel_id;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001D5F98()
{
  sub_1001D5E90();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1001D5FF0()
{
  return type metadata accessor for CarrierSegmentViewModel();
}

uint64_t type metadata accessor for CarrierSegmentViewModel()
{
  uint64_t result = qword_1002DB1A8;
  if (!qword_1002DB1A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D6044()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001D6108@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CarrierSegmentViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001D6148()
{
  return sub_1001D5D88();
}

uint64_t sub_1001D616C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC13FTMInternal_423CarrierSegmentViewModel_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

void *sub_1001D61E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = (void *)a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    uint64_t v7 = a2[6];
    uint64_t v8 = *(int *)(a3 + 28);
    Swift::String v9 = (void *)(a1 + v8);
    Swift::String v10 = (uint64_t *)((char *)a2 + v8);
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v7;
    id v11 = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100157064(&qword_1002D7FA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
    }
    else
    {
      *Swift::String v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t sub_1001D633C(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  sub_100157064(&qword_1002D7FA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_1001D640C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  Swift::String v9 = (void *)(a2 + v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  id v10 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100157064(&qword_1002D7FA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1001D650C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  id v8 = v6;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 28);
    id v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_10015D658(a1 + v9, &qword_1002D7FA0);
    sub_100157064(&qword_1002D7FA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *id v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1001D665C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_100157064(&qword_1002D7FA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1001D6740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 28);
    id v10 = (void *)(a1 + v9);
    uint64_t v11 = (const void *)(a2 + v9);
    sub_10015D658(a1 + v9, &qword_1002D7FA0);
    uint64_t v12 = sub_100157064(&qword_1002D7FA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001D6874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D6888);
}

uint64_t sub_1001D6888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100157064(&qword_1002D7FA8);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001D693C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D6950);
}

uint64_t sub_1001D6950(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100157064(&qword_1002D7FA8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SURLSessionRunningView()
{
  uint64_t result = qword_1002DB368;
  if (!qword_1002DB368) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001D6A48()
{
  sub_10015E934();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1001D6AF4()
{
  return swift_getOpaqueTypeConformance2();
}

Swift::Int sub_1001D6B10(void **a1)
{
  uint64_t v2 = *(void *)(sub_100157064(&qword_1002D8A80) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1001B54F4(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1001DC390(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1001D6BBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v67 = a1;
  uint64_t v2 = type metadata accessor for SURLSessionRunningView();
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v63 = *(void *)(v64 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v62 = (uint64_t)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v65 = *(void *)(v4 - 8);
  uint64_t v66 = v4;
  __chkstk_darwin(v4);
  unint64_t v61 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100157064(&qword_1002DB3A8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100157064(&qword_1002DB3B0);
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100157064(&qword_1002DB3B8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v53 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_100157064(&qword_1002DB3C0) - 8;
  __chkstk_darwin(v58);
  uint64_t v56 = (uint64_t)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100157064(&qword_1002DB3C8);
  __chkstk_darwin(v69);
  char v68 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = static HorizontalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  v10[16] = 1;
  uint64_t v18 = (uint64_t)&v10[*(int *)(sub_100157064(&qword_1002DB3D0) + 44)];
  uint64_t v52 = v1;
  sub_1001D73F4(v1, v18);
  LocalizedStringKey.init(stringLiteral:)();
  sub_10015D788(&qword_1002DB3D8, &qword_1002DB3A8);
  View.navigationTitle(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10015D658((uint64_t)v10, &qword_1002DB3A8);
  unint64_t v19 = *(void **)(v1 + 8);
  uint64_t v20 = self;
  id v21 = v19;
  id v22 = [v20 defaultCenter];
  uint64_t v23 = v54;
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v21;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_1001DB958;
  *(void *)(v25 + 24) = v24;
  uint64_t v26 = v55;
  uint64_t v27 = (uint64_t)v53;
  uint64_t v28 = v57;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v53, v12, v57);
  uint64_t v30 = v59;
  uint64_t v29 = v60;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v27 + *(int *)(v14 + 60), v23, v60);
  unint64_t v31 = (uint64_t (**)(uint64_t))(v27 + *(int *)(v14 + 64));
  char *v31 = sub_1001DB998;
  v31[1] = (uint64_t (*)(uint64_t))v25;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v30 + 8);
  id v33 = v21;
  v32(v23, v29);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v28);
  uint64_t v34 = v52;
  uint64_t v35 = *(void **)(v52 + 8);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v35;
  uint64_t v37 = v56;
  sub_10015D5F4(v27, v56, &qword_1002DB3B8);
  unint64_t v38 = (void *)(v37 + *(int *)(v58 + 44));
  void *v38 = 0;
  v38[1] = 0;
  _OWORD v38[2] = sub_1001DB9A0;
  v38[3] = v36;
  id v39 = v35;
  sub_10015D658(v27, &qword_1002DB3B8);
  uint64_t v40 = v61;
  static TaskPriority.userInitiated.getter();
  uint64_t v41 = v62;
  sub_1001DB9C4(v34, v62);
  unint64_t v42 = (*(unsigned __int8 *)(v64 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
  uint64_t v43 = swift_allocObject();
  sub_1001DBA2C(v41, v43 + v42);
  uint64_t v44 = (uint64_t)v68;
  uint64_t v45 = &v68[*(int *)(v69 + 36)];
  uint64_t v46 = type metadata accessor for _TaskModifier();
  uint64_t v48 = v65;
  uint64_t v47 = v66;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(&v45[*(int *)(v46 + 20)], v40, v66);
  *(void *)uint64_t v45 = &unk_1002DB3E8;
  *((void *)v45 + 1) = v43;
  sub_10015D5F4(v37, v44, &qword_1002DB3C0);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v40, v47);
  sub_10015D658(v37, &qword_1002DB3C0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v49 = *(void *)(v34 + 24);
  char v71 = *(unsigned char *)(v34 + 16);
  uint64_t v72 = v49;
  sub_100157064(&qword_1002D7D78);
  State.projectedValue.getter();
  uint64_t v70 = v34;
  sub_100157064(&qword_1002D7D38);
  sub_1001DBB64();
  sub_10015D788(&qword_1002D7D48, &qword_1002D7D38);
  uint64_t v50 = (uint64_t)v68;
  View.alert<A>(_:isPresented:actions:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return sub_10015D658(v50, &qword_1002DB3C8);
}

uint64_t sub_1001D73F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v33 = sub_100157064(&qword_1002DB410);
  __chkstk_darwin(v33);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100157064(&qword_1002DB418);
  __chkstk_darwin(v32);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100157064(&qword_1002DB420);
  __chkstk_darwin(v40);
  uint64_t v34 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100157064(&qword_1002DB428);
  __chkstk_darwin(v37);
  uint64_t v36 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100157064(&qword_1002DB430);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100157064(&qword_1002DB438);
  __chkstk_darwin(v39);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100157064(&qword_1002DB440);
  uint64_t v35 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1;
  uint64_t v17 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v18 = v17;
  static Published.subscript.getter();

  swift_release();
  uint64_t v19 = swift_release();
  uint64_t v21 = v42;
  unint64_t v20 = v43;
  switch(v43)
  {
    case 0uLL:
    case 3uLL:
      sub_1001DBD80(v42, v43);
      *(void *)uint64_t v4 = static HorizontalAlignment.center.getter();
      *((void *)v4 + 1) = 0;
      v4[16] = 1;
      uint64_t v22 = sub_100157064(&qword_1002DB448);
      sub_1001D8A18(v16, (uint64_t)&v4[*(int *)(v22 + 44)]);
      sub_10015D5F4((uint64_t)v4, (uint64_t)v6, &qword_1002DB410);
      swift_storeEnumTagMultiPayload();
      sub_10015D788(&qword_1002DB450, &qword_1002DB440);
      sub_10015D788(&qword_1002DB458, &qword_1002DB410);
      uint64_t v23 = (uint64_t)v34;
      _ConditionalContent<>.init(storage:)();
      sub_10015D5F4(v23, v36, &qword_1002DB420);
      swift_storeEnumTagMultiPayload();
      sub_1001DBD94();
      sub_1001DBE2C();
      _ConditionalContent<>.init(storage:)();
      sub_10015D658(v23, &qword_1002DB420);
      uint64_t result = sub_10015D658((uint64_t)v4, &qword_1002DB410);
      break;
    case 1uLL:
      ProgressView<>.init(label:)();
      uint64_t v27 = v35;
      uint64_t v28 = v38;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v11, v15, v38);
      swift_storeEnumTagMultiPayload();
      sub_10015D788(&qword_1002DB450, &qword_1002DB440);
      _ConditionalContent<>.init(storage:)();
      sub_10015D5F4((uint64_t)v13, v36, &qword_1002DB438);
      swift_storeEnumTagMultiPayload();
      sub_1001DBD94();
      sub_1001DBE2C();
      _ConditionalContent<>.init(storage:)();
      sub_10015D658((uint64_t)v13, &qword_1002DB438);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v28);
      break;
    case 2uLL:
      ProgressView<>.init(label:)();
      uint64_t v29 = v35;
      uint64_t v30 = v38;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v6, v15, v38);
      swift_storeEnumTagMultiPayload();
      sub_10015D788(&qword_1002DB450, &qword_1002DB440);
      sub_10015D788(&qword_1002DB458, &qword_1002DB410);
      uint64_t v31 = (uint64_t)v34;
      _ConditionalContent<>.init(storage:)();
      sub_10015D5F4(v31, v36, &qword_1002DB420);
      swift_storeEnumTagMultiPayload();
      sub_1001DBD94();
      sub_1001DBE2C();
      _ConditionalContent<>.init(storage:)();
      sub_10015D658(v31, &qword_1002DB420);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v15, v30);
      break;
    default:
      __chkstk_darwin(v19);
      *(&v32 - 2) = v21;
      *(&v32 - 1) = v20;
      ProgressView<>.init(label:)();
      uint64_t v25 = v35;
      uint64_t v26 = v38;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v11, v15, v38);
      swift_storeEnumTagMultiPayload();
      sub_10015D788(&qword_1002DB450, &qword_1002DB440);
      _ConditionalContent<>.init(storage:)();
      sub_10015D5F4((uint64_t)v13, v36, &qword_1002DB438);
      swift_storeEnumTagMultiPayload();
      sub_1001DBD94();
      sub_1001DBE2C();
      _ConditionalContent<>.init(storage:)();
      sub_1001DBD80(v21, v20);
      sub_10015D658((uint64_t)v13, &qword_1002DB438);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v15, v26);
      break;
  }
  return result;
}

uint64_t sub_1001D7C3C@<X0>(uint64_t a1@<X8>)
{
  return sub_10015B2FC(a1);
}

uint64_t sub_1001D7C5C@<X0>(uint64_t a1@<X8>)
{
  return sub_10015B2FC(a1);
}

void sub_1001D7C80()
{
  unint64_t v0 = self;
  id v1 = [v0 sharedApplication];
  unsigned int v2 = [v1 isIdleTimerDisabled];

  if (v2)
  {
    id v3 = [v0 sharedApplication];
    [v3 setIdleTimerDisabled:0];
  }
}

uint64_t sub_1001D7D3C(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = type metadata accessor for Notification();
  v7[3] = v4;
  uint64_t v5 = sub_1001DBD14(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v5, a1, v4);
  a2(v7);
  return sub_10015D658((uint64_t)v7, (uint64_t *)&unk_1002D9680);
}

uint64_t sub_1001D7DD8(uint64_t a1)
{
  v1[14] = a1;
  type metadata accessor for MainActor();
  v1[15] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[16] = v3;
  v1[17] = v2;
  return _swift_task_switch(sub_1001D7E70, v3, v2);
}

uint64_t sub_1001D7E70()
{
  id v1 = *(void **)(v0[14] + 8);
  v0[18] = v1;
  id v2 = v1;
  sub_1001B812C();

  if (*((unsigned char *)v2 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 81) == 1)
  {
    v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[19] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001D7FB0;
    return sub_1001BAACC();
  }
  else
  {
    v2;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[21] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1001D812C;
    return sub_1001B85F4();
  }
}

uint64_t sub_1001D7FB0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = sub_1001D8248;
  }
  else
  {

    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = sub_1001D80CC;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1001D80CC()
{
  swift_release();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D812C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = sub_1001D84E8;
  }
  else
  {

    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = sub_1001DD8C0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1001D8248()
{
  id v1 = *(void **)(v0 + 144);
  swift_release();

  if (qword_1002D7B38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001A9488(v2, (uint64_t)qword_1002E31F0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 104) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "There was an error running the tasks: %@", v5, 0xCu);
    sub_100157064((uint64_t *)&unk_1002DA9C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = *(void *)(v0 + 112);
  swift_getErrorValue();
  uint64_t v9 = Error.localizedDescription.getter();
  uint64_t v10 = *(void *)(v8 + 48);
  *(_OWORD *)(v0 + 40) = *(_OWORD *)(v8 + 32);
  *(void *)(v0 + 56) = v10;
  *(void *)(v0 + 64) = v9;
  *(void *)(v0 + 72) = v11;
  sub_100157064(&qword_1002D7DB8);
  State.wrappedValue.setter();
  uint64_t v12 = *(void *)(v8 + 24);
  *(unsigned char *)(v0 + 80) = *(unsigned char *)(v8 + 16);
  *(void *)(v0 + 88) = v12;
  *(unsigned char *)(v0 + 184) = 1;
  swift_retain();
  sub_100157064(&qword_1002D7D78);
  State.wrappedValue.setter();
  swift_errorRelease();
  swift_release();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1001D84E8()
{
  id v1 = *(void **)(v0 + 144);
  swift_release();

  if (qword_1002D7B38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1001A9488(v2, (uint64_t)qword_1002E31F0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 104) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "There was an error running the tasks: %@", v5, 0xCu);
    sub_100157064((uint64_t *)&unk_1002DA9C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = *(void *)(v0 + 112);
  swift_getErrorValue();
  uint64_t v9 = Error.localizedDescription.getter();
  uint64_t v10 = *(void *)(v8 + 48);
  *(_OWORD *)(v0 + 40) = *(_OWORD *)(v8 + 32);
  *(void *)(v0 + 56) = v10;
  *(void *)(v0 + 64) = v9;
  *(void *)(v0 + 72) = v11;
  sub_100157064(&qword_1002D7DB8);
  State.wrappedValue.setter();
  uint64_t v12 = *(void *)(v8 + 24);
  *(unsigned char *)(v0 + 80) = *(unsigned char *)(v8 + 16);
  *(void *)(v0 + 88) = v12;
  *(unsigned char *)(v0 + 184) = 1;
  swift_retain();
  sub_100157064(&qword_1002D7D78);
  State.wrappedValue.setter();
  swift_errorRelease();
  swift_release();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1001D8788(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SURLSessionRunningView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  LocalizedStringKey.init(stringLiteral:)();
  sub_1001DB9C4(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_1001DBA2C((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5);
  return Button<>.init(_:action:)();
}

uint64_t sub_1001D88D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DismissAction();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 24);
  LOBYTE(v10) = *(unsigned char *)(a1 + 16);
  *((void *)&v10 + 1) = v6;
  LOBYTE(v9[0]) = 0;
  sub_100157064(&qword_1002D7D78);
  State.wrappedValue.setter();
  uint64_t v7 = *(void *)(a1 + 48);
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = v7;
  v9[0] = 0;
  v9[1] = 0;
  sub_100157064(&qword_1002D7DB8);
  State.wrappedValue.setter();
  type metadata accessor for SURLSessionRunningView();
  sub_1001A894C((uint64_t)v5);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001D8A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v3 = type metadata accessor for GroupedListStyle();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  uint64_t v53 = v4;
  __chkstk_darwin(v3);
  uint64_t v47 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100157064(&qword_1002DB470);
  uint64_t v51 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100157064(&qword_1002DB478);
  uint64_t v48 = *(void *)(v50 - 8);
  uint64_t v7 = __chkstk_darwin(v50);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v46 = (char *)&v43 - v10;
  uint64_t v11 = sub_100157064(&qword_1002DB480);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100157064(&qword_1002DB488);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100157064(&qword_1002DB490);
  uint64_t v19 = v18 - 8;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v44 = (uint64_t)&v43 - v23;
  *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
  *((void *)v13 + 1) = 0x4008000000000000;
  v13[16] = 0;
  uint64_t v24 = sub_100157064(&qword_1002DB498);
  sub_1001D8F94(a1, (uint64_t)&v13[*(int *)(v24 + 44)]);
  uint64_t v25 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10015D5F4((uint64_t)v13, (uint64_t)v17, &qword_1002DB480);
  uint64_t v27 = (uint64_t *)&v17[*(int *)(v15 + 44)];
  *uint64_t v27 = KeyPath;
  v27[1] = v25;
  sub_10015D658((uint64_t)v13, &qword_1002DB480);
  LOBYTE(KeyPath) = static Edge.Set.horizontal.getter();
  sub_10015D5F4((uint64_t)v17, (uint64_t)v22, &qword_1002DB488);
  uint64_t v28 = &v22[*(int *)(v19 + 44)];
  char *v28 = KeyPath;
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  v28[40] = 1;
  sub_10015D658((uint64_t)v17, &qword_1002DB488);
  uint64_t v29 = v44;
  sub_10015D474((uint64_t)v22, v44, &qword_1002DB490);
  uint64_t v55 = a1;
  sub_100157064(&qword_1002DB4A0);
  sub_1001DBFB0();
  uint64_t v30 = v45;
  List<>.init(content:)();
  uint64_t v31 = v47;
  GroupedListStyle.init()();
  sub_10015D788(&qword_1002DB4C0, &qword_1002DB470);
  uint64_t v32 = v49;
  uint64_t v33 = v52;
  View.listStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v33);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v32);
  uint64_t v34 = v48;
  uint64_t v35 = v46;
  uint64_t v36 = v50;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v9, v50);
  sub_10015D5F4(v29, (uint64_t)v22, &qword_1002DB490);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  uint64_t v38 = v36;
  v37(v9, v35, v36);
  uint64_t v39 = v54;
  sub_10015D5F4((uint64_t)v22, v54, &qword_1002DB490);
  uint64_t v40 = sub_100157064(&qword_1002DB4C8);
  v37((char *)(v39 + *(int *)(v40 + 48)), v9, v38);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v34 + 8);
  v41(v35, v38);
  sub_10015D658(v29, &qword_1002DB490);
  v41(v9, v38);
  return sub_10015D658((uint64_t)v22, &qword_1002DB490);
}

void *sub_1001D8F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v108 = type metadata accessor for Divider();
  uint64_t v110 = *(void *)(v108 - 8);
  uint64_t v3 = __chkstk_darwin(v108);
  uint64_t v107 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v106 = (char *)&v82 - v5;
  uint64_t v109 = a1;
  if (*(unsigned char *)(*(void *)(a1 + 8) + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 48) == 1)
  {
    unint64_t v100 = static VerticalAlignment.center.getter();
    uint64_t v6 = v109;
    sub_1001D9A88(v109, (double (*)(uint64_t))sub_10017201C, (uint64_t)&v174);
    uint64_t v84 = v174;
    uint64_t v7 = v175;
    int v8 = v176;
    uint64_t v99 = v178;
    unsigned __int8 v9 = v179;
    LODWORD(v93) = v179;
    uint64_t v10 = v180;
    uint64_t v91 = v180;
    uint64_t v92 = v175;
    uint64_t v11 = v181;
    uint64_t v88 = v181;
    uint64_t v89 = v177;
    int v12 = v182;
    uint64_t v86 = v183;
    uint64_t v98 = static VerticalAlignment.center.getter();
    sub_1001D9C90(v6, (uint64_t (*)(uint64_t))sub_10017246C, (uint64_t)&v174);
    uint64_t v104 = v175;
    uint64_t v105 = v174;
    uint64_t v97 = v178;
    LODWORD(v94) = v179;
    uint64_t v102 = v180;
    uint64_t v103 = v177;
    uint64_t v101 = v181;
    LOBYTE(v6) = v182;
    uint64_t v83 = v183;
    LOBYTE(v124) = 1;
    char v13 = v8;
    LODWORD(v90) = v8;
    LOBYTE(v123[0]) = v8;
    LOBYTE(v122[0]) = v9;
    int v87 = v12;
    LOBYTE(v121[0]) = v12;
    v120[0] = 1;
    v119[0] = v176;
    int v14 = v176;
    char v118 = v179;
    unsigned __int8 v117 = v182;
    LODWORD(v95) = v182;
    uint64_t v15 = v84;
    sub_10015D6B4(v84, v7, v13);
    swift_bridgeObjectRetain();
    sub_10015D6B4(v10, v11, v12);
    swift_bridgeObjectRetain();
    uint64_t v17 = v104;
    uint64_t v16 = v105;
    int v85 = v14;
    sub_10015D6B4(v105, v104, v14);
    swift_bridgeObjectRetain();
    uint64_t v18 = v101;
    uint64_t v19 = v102;
    sub_10015D6B4(v102, v101, v6);
    uint64_t v20 = v83;
    swift_bridgeObjectRetain();
    sub_10015D6C4(v16, v17, v14);
    swift_bridgeObjectRelease();
    sub_10015D6C4(v19, v18, v6);
    swift_bridgeObjectRelease();
    uint64_t v21 = v92;
    LOBYTE(v14) = v90;
    sub_10015D6C4(v15, v92, v90);
    uint64_t v22 = v89;
    swift_bridgeObjectRelease();
    uint64_t v23 = v91;
    uint64_t v24 = v88;
    LOBYTE(v19) = v87;
    sub_10015D6C4(v91, v88, v87);
    uint64_t v25 = v86;
    swift_bridgeObjectRelease();
    long long v149 = v100;
    unsigned __int8 v150 = 1;
    uint64_t v151 = v15;
    uint64_t v152 = v21;
    unsigned __int8 v153 = v14;
    uint64_t v154 = v22;
    uint64_t v155 = v99;
    unsigned __int8 v156 = v93;
    uint64_t v157 = v23;
    uint64_t v158 = v24;
    char v159 = v19;
    uint64_t v160 = v25;
    uint64_t v161 = v98;
    uint64_t v162 = 0;
    char v163 = 1;
    uint64_t v164 = v105;
    uint64_t v165 = v104;
    char v166 = v85;
    uint64_t v167 = v103;
    uint64_t v168 = v97;
    char v169 = v94;
    uint64_t v170 = v102;
    uint64_t v171 = v101;
    char v172 = v95;
    uint64_t v173 = v20;
    nullsub_1(&v149);
  }
  else
  {
    sub_1001DD5A4(&v149);
  }
  sub_10015D474((uint64_t)&v149, (uint64_t)&v174, &qword_1002DB540);
  if (*(unsigned char *)(*(void *)(v109 + 8) + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 49) == 1)
  {
    unint64_t v100 = static VerticalAlignment.center.getter();
    uint64_t v26 = v109;
    sub_1001D9A88(v109, (double (*)(uint64_t))sub_100172034, (uint64_t)&v149);
    uint64_t v27 = *((void *)&v149 + 1);
    uint64_t v84 = v149;
    int v28 = v150;
    uint64_t v99 = v152;
    unsigned __int8 v29 = v153;
    LODWORD(v93) = v153;
    uint64_t v30 = v154;
    uint64_t v91 = v154;
    uint64_t v92 = *((void *)&v149 + 1);
    uint64_t v31 = v155;
    uint64_t v88 = v155;
    uint64_t v89 = v151;
    int v32 = v156;
    uint64_t v86 = v157;
    uint64_t v98 = static VerticalAlignment.center.getter();
    sub_1001D9C90(v26, (uint64_t (*)(uint64_t))sub_10017270C, (uint64_t)&v149);
    uint64_t v104 = *((void *)&v149 + 1);
    uint64_t v105 = v149;
    uint64_t v97 = v152;
    LODWORD(v94) = v153;
    uint64_t v102 = v154;
    uint64_t v103 = v151;
    uint64_t v101 = v155;
    LOBYTE(v26) = v156;
    uint64_t v83 = v157;
    LOBYTE(v123[0]) = 1;
    char v33 = v28;
    LODWORD(v90) = v28;
    LOBYTE(v122[0]) = v28;
    LOBYTE(v121[0]) = v29;
    int v87 = v32;
    v120[0] = v32;
    v119[0] = 1;
    char v118 = v150;
    int v34 = v150;
    unsigned __int8 v117 = v153;
    unsigned __int8 v116 = v156;
    LODWORD(v95) = v156;
    uint64_t v35 = v84;
    sub_10015D6B4(v84, v27, v33);
    swift_bridgeObjectRetain();
    sub_10015D6B4(v30, v31, v32);
    swift_bridgeObjectRetain();
    uint64_t v37 = v104;
    uint64_t v36 = v105;
    int v85 = v34;
    sub_10015D6B4(v105, v104, v34);
    swift_bridgeObjectRetain();
    uint64_t v38 = v101;
    uint64_t v39 = v102;
    sub_10015D6B4(v102, v101, v26);
    uint64_t v40 = v83;
    swift_bridgeObjectRetain();
    sub_10015D6C4(v36, v37, v34);
    swift_bridgeObjectRelease();
    sub_10015D6C4(v39, v38, v26);
    swift_bridgeObjectRelease();
    uint64_t v41 = v92;
    LOBYTE(v34) = v90;
    sub_10015D6C4(v35, v92, v90);
    uint64_t v42 = v89;
    swift_bridgeObjectRelease();
    uint64_t v43 = v91;
    uint64_t v44 = v88;
    LOBYTE(v39) = v87;
    sub_10015D6C4(v91, v88, v87);
    uint64_t v45 = v86;
    swift_bridgeObjectRelease();
    long long v124 = v100;
    unsigned __int8 v125 = 1;
    uint64_t v126 = v35;
    uint64_t v127 = v41;
    unsigned __int8 v128 = v34;
    uint64_t v129 = v42;
    uint64_t v130 = v99;
    unsigned __int8 v131 = v93;
    uint64_t v132 = v43;
    uint64_t v133 = v44;
    char v134 = v39;
    uint64_t v135 = v45;
    uint64_t v136 = v98;
    uint64_t v137 = 0;
    char v138 = 1;
    uint64_t v139 = v105;
    uint64_t v140 = v104;
    char v141 = v85;
    uint64_t v142 = v103;
    uint64_t v143 = v97;
    char v144 = v94;
    uint64_t v145 = v102;
    uint64_t v146 = v101;
    char v147 = v95;
    uint64_t v148 = v40;
    nullsub_1(&v124);
  }
  else
  {
    sub_1001DD5A4(&v124);
  }
  sub_10015D474((uint64_t)&v124, (uint64_t)&v149, &qword_1002DB540);
  uint64_t v46 = v106;
  Divider.init()();
  uint64_t v95 = static VerticalAlignment.center.getter();
  uint64_t v47 = v109;
  sub_1001D9E54(v109, (uint64_t)&v124);
  uint64_t v97 = *((void *)&v124 + 1);
  uint64_t v98 = v124;
  LODWORD(v89) = v125;
  uint64_t v93 = v127;
  LODWORD(v88) = v128;
  uint64_t v99 = v126;
  unint64_t v100 = v130;
  unsigned __int8 v48 = v131;
  uint64_t v101 = v129;
  uint64_t v102 = v132;
  uint64_t v94 = static VerticalAlignment.center.getter();
  sub_1001DA0D8(v47, (uint64_t)&v124);
  uint64_t v90 = *((void *)&v124 + 1);
  uint64_t v91 = v124;
  unsigned __int8 v49 = v125;
  uint64_t v92 = v127;
  unsigned __int8 v50 = v128;
  uint64_t v103 = v126;
  uint64_t v104 = v129;
  uint64_t v105 = v130;
  unsigned __int8 v51 = v131;
  uint64_t v109 = v132;
  sub_10015D474((uint64_t)&v174, (uint64_t)v120, &qword_1002DB540);
  sub_10015D474((uint64_t)&v149, (uint64_t)v119, &qword_1002DB540);
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  uint64_t v54 = v107;
  uint64_t v53 = v108;
  v52(v107, v46, v108);
  char v118 = 1;
  unsigned __int8 v117 = v89;
  unsigned __int8 v116 = v88;
  unsigned __int8 v115 = v48;
  char v114 = 1;
  unsigned __int8 v113 = v49;
  unsigned __int8 v112 = v50;
  unsigned __int8 v111 = v51;
  sub_10015D474((uint64_t)v120, (uint64_t)v121, &qword_1002DB540);
  uint64_t v55 = v96;
  sub_10015D474((uint64_t)v121, v96, &qword_1002DB540);
  sub_10015D474((uint64_t)v119, (uint64_t)v122, &qword_1002DB540);
  sub_10015D474((uint64_t)v122, v55 + 208, &qword_1002DB540);
  uint64_t v56 = (int *)sub_100157064(&qword_1002DB548);
  v52((char *)(v55 + v56[16]), v54, v53);
  uint64_t v57 = v55 + v56[20];
  char v58 = v118;
  unsigned __int8 v59 = v117;
  LODWORD(v88) = v117;
  unsigned __int8 v60 = v116;
  unsigned __int8 v61 = v115;
  LODWORD(v89) = v115;
  *(void *)uint64_t v57 = v95;
  *(void *)(v57 + 8) = 0;
  *(unsigned char *)(v57 + 16) = v58;
  uint64_t v62 = v97;
  uint64_t v63 = v98;
  *(void *)(v57 + 24) = v98;
  *(void *)(v57 + 32) = v62;
  *(unsigned char *)(v57 + 40) = v59;
  uint64_t v64 = v100;
  uint64_t v65 = v93;
  uint64_t v66 = v94;
  *(void *)(v57 + 48) = v99;
  *(void *)(v57 + 56) = v65;
  *(unsigned char *)(v57 + 64) = v60;
  uint64_t v68 = v101;
  uint64_t v67 = v102;
  *(void *)(v57 + 72) = v101;
  *(void *)(v57 + 80) = v64;
  *(unsigned char *)(v57 + 88) = v61;
  *(void *)(v57 + 96) = v67;
  uint64_t v69 = v55 + v56[24];
  LOBYTE(v65) = v114;
  unsigned __int8 v70 = v113;
  LODWORD(v95) = v113;
  unsigned __int8 v71 = v112;
  unsigned __int8 v72 = v111;
  LODWORD(v96) = v111;
  *(void *)uint64_t v69 = v66;
  *(void *)(v69 + 8) = 0;
  *(unsigned char *)(v69 + 16) = v65;
  uint64_t v74 = v90;
  uint64_t v73 = v91;
  *(void *)(v69 + 24) = v91;
  *(void *)(v69 + 32) = v74;
  *(unsigned char *)(v69 + 40) = v70;
  *(void *)(v69 + 48) = v103;
  *(void *)(v69 + 56) = v92;
  *(unsigned char *)(v69 + 64) = v71;
  uint64_t v75 = v105;
  *(void *)(v69 + 72) = v104;
  *(void *)(v69 + 80) = v75;
  *(unsigned char *)(v69 + 88) = v72;
  *(void *)(v69 + 96) = v109;
  sub_1001DD6B4(v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1001DD5C8);
  sub_1001DD6B4(v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1001DD5C8);
  sub_10015D6B4(v63, v62, v88);
  swift_bridgeObjectRetain();
  sub_10015D6B4(v68, v64, v89);
  swift_bridgeObjectRetain();
  uint64_t v76 = v73;
  sub_10015D6B4(v73, v74, v95);
  swift_bridgeObjectRetain();
  uint64_t v78 = v104;
  uint64_t v77 = v105;
  sub_10015D6B4(v104, v105, v96);
  uint64_t v79 = *(void (**)(char *, uint64_t))(v110 + 8);
  v110 += 8;
  swift_bridgeObjectRetain();
  uint64_t v80 = v108;
  v79(v106, v108);
  LOBYTE(v62) = v111;
  sub_10015D6C4(v76, v74, v113);
  swift_bridgeObjectRelease();
  sub_10015D6C4(v78, v77, v62);
  swift_bridgeObjectRelease();
  LOBYTE(v62) = v115;
  sub_10015D6C4(v98, v97, v117);
  swift_bridgeObjectRelease();
  sub_10015D6C4(v101, v100, v62);
  swift_bridgeObjectRelease();
  v79(v107, v80);
  sub_10015D474((uint64_t)v119, (uint64_t)v123, &qword_1002DB540);
  sub_1001DD6B4(v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1001DD728);
  sub_10015D474((uint64_t)v120, (uint64_t)&v124, &qword_1002DB540);
  return sub_1001DD6B4(&v124, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1001DD728);
}

uint64_t sub_1001D9A88@<X0>(uint64_t a1@<X0>, double (*a2)(uint64_t)@<X2>, uint64_t a3@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100267EF0;
  int v14 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v15 = v14;
  static Published.subscript.getter();

  swift_release();
  uint64_t v16 = swift_release();
  double v17 = a2(v16);

  *(void *)(v13 + 56) = &type metadata for Double;
  *(void *)(v13 + 64) = &protocol witness table for Double;
  *(double *)(v13 + 32) = v17;
  String.init(format:_:)();
  sub_1001571E0();
  uint64_t v18 = Text.init<A>(_:)();
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 1;
  *(void *)(a3 + 48) = v18;
  *(void *)(a3 + 56) = v19;
  *(unsigned char *)(a3 + 64) = v21 & 1;
  *(void *)(a3 + 72) = v23;
  sub_10015D6B4(v6, v8, v12);
  swift_bridgeObjectRetain();
  sub_10015D6B4(v18, v20, v22);
  swift_bridgeObjectRetain();
  sub_10015D6C4(v18, v20, v22);
  swift_bridgeObjectRelease();
  sub_10015D6C4(v6, v8, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D9C90@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  uint64_t v13 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v14 = v13;
  static Published.subscript.getter();

  swift_release();
  uint64_t v15 = swift_release();
  uint64_t v16 = a2(v15);
  char v18 = v17;

  sub_1001BF4E4(v16, v18);
  sub_1001571E0();
  uint64_t v19 = Text.init<A>(_:)();
  uint64_t v21 = v20;
  LOBYTE(v14) = v22 & 1;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 1;
  *(void *)(a3 + 48) = v19;
  *(void *)(a3 + 56) = v20;
  *(unsigned char *)(a3 + 64) = v22 & 1;
  *(void *)(a3 + 72) = v23;
  sub_10015D6B4(v6, v8, v12);
  swift_bridgeObjectRetain();
  sub_10015D6B4(v19, v21, (char)v14);
  swift_bridgeObjectRetain();
  sub_10015D6C4(v19, v21, (char)v14);
  swift_bridgeObjectRelease();
  sub_10015D6C4(v6, v8, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D9E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v5 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t v11 = v10;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
  uint64_t v13 = *(void *)(a1 + 8) + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  v14._uint64_t countAndFlagsBits = sub_1001C286C(*(unsigned char *)(v13 + 26));
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 10272;
  v15._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
  uint64_t v16 = qword_10026B180[*(char *)(v13 + 26)];
  LOBYTE(a1) = v9 & 1;
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100267EF0;
  *(void *)(v17 + 56) = &type metadata for Int;
  *(void *)(v17 + 64) = &protocol witness table for Int;
  *(void *)(v17 + 32) = v16;
  v18._uint64_t countAndFlagsBits = String.init(format:_:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v19);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21;
  LOBYTE(v16) = v23 & 1;
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = a1;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v21;
  *(unsigned char *)(a2 + 64) = v23 & 1;
  *(void *)(a2 + 72) = v24;
  sub_10015D6B4(v5, v7, a1);
  swift_bridgeObjectRetain();
  sub_10015D6B4(v20, v22, v16);
  swift_bridgeObjectRetain();
  sub_10015D6C4(v20, v22, v16);
  swift_bridgeObjectRelease();
  sub_10015D6C4(v5, v7, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DA0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100157064(&qword_1002DB550);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  Swift::String v14 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v15 = v14;
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v16 = v31;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  sub_10019E6BC((uint64_t)v31, v6);
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_100157064(&qword_1002D8A80);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v6, 1, v17) == 1)
  {
    sub_10015D658((uint64_t)v6, &qword_1002DB550);
    uint64_t v19 = *(void *)aPdpIp0;
    uint64_t v18 = unk_1002DA2D0;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v20 = (uint64_t)v6 + *(int *)(v17 + 48);
    uint64_t v21 = (uint64_t *)(v20 + *(int *)(type metadata accessor for STransferMetrics() + 40));
    uint64_t v19 = *v21;
    uint64_t v18 = v21[1];
    swift_bridgeObjectRetain();
    sub_10016DC38(v20);
  }
  char v22 = v11 & 1;
  uint64_t v31 = (void *)v19;
  uint64_t v32 = v18;
  sub_1001571E0();
  uint64_t v23 = Text.init<A>(_:)();
  uint64_t v25 = v24;
  LOBYTE(v31) = v22;
  char v27 = v26 & 1;
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v22;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v23;
  *(void *)(a2 + 56) = v24;
  *(unsigned char *)(a2 + 64) = v26 & 1;
  *(void *)(a2 + 72) = v28;
  sub_10015D6B4(v7, v9, v22);
  swift_bridgeObjectRetain();
  sub_10015D6B4(v23, v25, v27);
  swift_bridgeObjectRetain();
  sub_10015D6C4(v23, v25, v27);
  swift_bridgeObjectRelease();
  sub_10015D6C4(v7, v9, (char)v31);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DA3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for SURLSessionRunningView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = sub_100157064(&qword_1002DB4A0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v11 = v10;
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v12 = v21;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v13 = swift_bridgeObjectRetain();
  Swift::String v14 = sub_1001B2160(v13);
  swift_bridgeObjectRelease();
  uint64_t v21 = v14;
  sub_1001D6B10(&v21);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  sub_1001DB9C4(a1, (uint64_t)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = swift_allocObject();
  sub_1001DBA2C((uint64_t)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1001DC18C;
  *(void *)(v17 + 24) = v16;
  sub_100157064(&qword_1002DB4D0);
  sub_100157064(&qword_1002DB4B8);
  sub_10015D788(&qword_1002DB4D8, &qword_1002DB4D0);
  sub_10015D788(&qword_1002DB4B0, &qword_1002DB4B8);
  ForEach<>.init(_:id:content:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v20, v9, v6);
}

int *sub_1001DA740@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = static HorizontalAlignment.center.getter();
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t v6 = sub_100157064(&qword_1002DB4E0);
  return sub_1001DA7A0(a1, a2, a3 + *(int *)(v6 + 44));
}

int *sub_1001DA7A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v5 = type metadata accessor for LinearProgressViewStyle();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100157064(&qword_1002DB4E8);
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  __chkstk_darwin(v8);
  char v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100157064(&qword_1002DB4F0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100157064(&qword_1002DB4F8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (int *)type metadata accessor for STransferMetrics();
  uint64_t v19 = *(void *)(a1 + result[15]);
  uint64_t v20 = *(void *)(a1 + result[14]);
  BOOL v21 = __OFADD__(v19, v20);
  uint64_t v22 = v19 + v20;
  if (v21)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v23 = result;
  uint64_t v47 = v11;
  uint64_t v48 = a3;
  uint64_t v45 = v14;
  uint64_t v46 = v12;
  uint64_t v43 = v15;
  uint64_t v44 = v17;
  if (!v22)
  {
    double v27 = 0.0;
    goto LABEL_6;
  }
  uint64_t v24 = *(void *)(a1 + result[13]);
  uint64_t v25 = *(void *)(a1 + result[12]);
  BOOL v21 = __OFADD__(v24, v25);
  uint64_t v26 = v24 + v25;
  if (v21)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  double v27 = (double)v26 / (double)v22;
LABEL_6:
  v42[1] = v42;
  double v55 = v27;
  char v56 = 0;
  uint64_t v28 = __chkstk_darwin(result);
  __chkstk_darwin(v28);
  uint64_t v54 = 0x3FF0000000000000;
  sub_100157064(&qword_1002DB500);
  sub_100157064(&qword_1002DB508);
  sub_1001DC284();
  sub_10015D788(&qword_1002DB528, &qword_1002DB508);
  sub_10015D5A0();
  ProgressView.init<A>(value:total:label:currentValueLabel:)();
  LinearProgressViewStyle.init()();
  sub_10015D788(&qword_1002DB530, &qword_1002DB4E8);
  sub_1001DC348(&qword_1002DB538, (void (*)(uint64_t))&type metadata accessor for LinearProgressViewStyle);
  unsigned __int8 v29 = v45;
  uint64_t v30 = v51;
  uint64_t v31 = v53;
  View.progressViewStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v31);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v30);
  if (*(void *)(a1 + v23[16]))
  {
    uint64_t v32 = static Color.red.getter();
    uint64_t v34 = v46;
    uint64_t v33 = v47;
    uint64_t v36 = v43;
    uint64_t v35 = (uint64_t)v44;
  }
  else
  {
    int v37 = *(unsigned __int8 *)(a1 + v23[17]);
    uint64_t v34 = v46;
    uint64_t v33 = v47;
    uint64_t v36 = v43;
    uint64_t v35 = (uint64_t)v44;
    if (v37 == 1) {
      uint64_t v38 = static Color.green.getter();
    }
    else {
      uint64_t v38 = static Color.blue.getter();
    }
    uint64_t v32 = v38;
  }
  uint64_t KeyPath = swift_getKeyPath();
  double v55 = *(double *)&v32;
  swift_retain();
  uint64_t v40 = AnyShapeStyle.init<A>(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v35, v29, v33);
  swift_release();
  uint64_t v41 = (uint64_t *)(v35 + *(int *)(v36 + 36));
  *uint64_t v41 = KeyPath;
  v41[1] = v40;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v33);
  return (int *)sub_10015D474(v35, v48, &qword_1002DB4F8);
}

uint64_t sub_1001DACD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = static VerticalAlignment.center.getter();
  sub_1001DADA4(a1, (uint64_t)v17);
  uint64_t v4 = v17[0];
  uint64_t v5 = v17[1];
  char v6 = v18;
  uint64_t v7 = v19;
  uint64_t v8 = v20;
  char v9 = v21;
  uint64_t v11 = v22;
  uint64_t v10 = v23;
  char v15 = v24;
  uint64_t v14 = v25;
  uint64_t v12 = static Font.caption.getter();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v16;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  *(unsigned char *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v8;
  *(unsigned char *)(a2 + 64) = v9;
  *(void *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v10;
  *(unsigned char *)(a2 + 88) = v15;
  *(void *)(a2 + 96) = v14;
  *(void *)(a2 + 104) = result;
  *(void *)(a2 + 112) = v12;
  return result;
}

uint64_t sub_1001DADA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  __chkstk_darwin(v5);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._uint64_t countAndFlagsBits = 0x203A7373616C63;
  v6._object = (void *)0xE700000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v6);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for STransferMetrics() + 36)))
  {
    unint64_t v7 = 0xE100000000000000;
    uint64_t v8 = 42;
  }
  else
  {
    unint64_t v7 = 0xE700000000000000;
    uint64_t v8 = 0x746C7561666564;
    switch(*(unsigned char *)(a1 + 9))
    {
      case 1:
        unint64_t v7 = 0xE400000000000000;
        uint64_t v8 = 1885958006;
        break;
      case 2:
        unint64_t v7 = 0xE500000000000000;
        uint64_t v8 = 0x6F65646976;
        break;
      case 3:
        unint64_t v7 = 0xEA0000000000646ELL;
        uint64_t v8 = 0x756F72676B636162;
        break;
      case 4:
        unint64_t v7 = 0xE500000000000000;
        uint64_t v8 = 0x6563696F76;
        break;
      case 5:
        unint64_t v7 = 0xEE00617461446576;
        goto LABEL_18;
      case 6:
        unint64_t v7 = 0xEB00000000676E69;
        uint64_t v8 = 0x6D61657274537661;
        break;
      case 7:
        unint64_t v7 = 0xEC00000056416576;
LABEL_18:
        uint64_t v8 = 0x69736E6F70736572;
        break;
      case 8:
        unint64_t v7 = 0xED0000676E696C61;
        uint64_t v8 = 0x6E6769536C6C6163;
        break;
      default:
        break;
    }
  }
  unint64_t v9 = v7;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v10);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v19 = 0x4B4E494C4E574F44;
  }
  else {
    uint64_t v19 = 0x4B4E494C5055;
  }
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v20 = 0xE800000000000000;
  }
  else {
    unint64_t v20 = 0xE600000000000000;
  }
  unint64_t v21 = v20;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v22);
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v23);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v24 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v26 = v25;
  char v28 = v27 & 1;
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(unsigned char *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v24;
  *(void *)(a2 + 56) = v25;
  *(unsigned char *)(a2 + 64) = v27 & 1;
  *(void *)(a2 + 72) = v29;
  sub_10015D6B4(v11, v13, v17);
  swift_bridgeObjectRetain();
  sub_10015D6B4(v24, v26, v28);
  swift_bridgeObjectRetain();
  sub_10015D6C4(v24, v26, v28);
  swift_bridgeObjectRelease();
  sub_10015D6C4(v11, v13, v17);
  return swift_bridgeObjectRelease();
}

double sub_1001DB198@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.center.getter();
  sub_1001DB2A0(a1, (uint64_t)v12);
  *(_OWORD *)&v13[135] = v12[8];
  *(_OWORD *)&v13[151] = v12[9];
  *(_OWORD *)&v13[167] = v12[10];
  *(_OWORD *)&v13[183] = v12[11];
  *(_OWORD *)&v13[71] = v12[4];
  *(_OWORD *)&v13[87] = v12[5];
  *(_OWORD *)&v13[103] = v12[6];
  *(_OWORD *)&v13[119] = v12[7];
  *(_OWORD *)&v13[7] = v12[0];
  *(_OWORD *)&v13[23] = v12[1];
  *(_OWORD *)&v13[39] = v12[2];
  *(_OWORD *)&v13[55] = v12[3];
  long long v5 = *(_OWORD *)&v13[128];
  *(_OWORD *)(a2 + 161) = *(_OWORD *)&v13[144];
  long long v6 = *(_OWORD *)&v13[176];
  *(_OWORD *)(a2 + 177) = *(_OWORD *)&v13[160];
  *(_OWORD *)(a2 + 193) = v6;
  long long v7 = *(_OWORD *)&v13[64];
  *(_OWORD *)(a2 + 97) = *(_OWORD *)&v13[80];
  long long v8 = *(_OWORD *)&v13[112];
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v13[96];
  *(_OWORD *)(a2 + 129) = v8;
  *(_OWORD *)(a2 + 145) = v5;
  long long v9 = *(_OWORD *)v13;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)&v13[16];
  double result = *(double *)&v13[32];
  long long v11 = *(_OWORD *)&v13[48];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v13[32];
  *(_OWORD *)(a2 + 65) = v11;
  *(_OWORD *)(a2 + 81) = v7;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 208) = *(void *)&v13[191];
  *(_OWORD *)(a2 + 17) = v9;
  return result;
}

uint64_t sub_1001DB2A0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v23 = static VerticalAlignment.center.getter();
  sub_1001DB4AC(a1, (uint64_t)&v26);
  uint64_t v24 = v27;
  uint64_t v25 = v26;
  char v4 = v28;
  uint64_t v5 = v29;
  uint64_t v19 = v31;
  uint64_t v20 = v30;
  char v6 = v33;
  uint64_t v7 = v35;
  uint64_t v21 = v34;
  uint64_t v22 = v32;
  char v8 = v36;
  uint64_t v9 = v37;
  uint64_t v18 = static VerticalAlignment.center.getter();
  sub_1001DB71C((uint64_t)&v26);
  uint64_t v10 = v26;
  char v11 = v27;
  uint64_t v12 = v28;
  uint64_t v13 = v29;
  char v14 = v30;
  uint64_t v15 = v31;
  LOBYTE(v26) = 1;
  char v43 = v4;
  char v42 = v6;
  char v41 = v8;
  char v40 = 1;
  char v39 = v27;
  char v38 = v30;
  *(void *)a2 = v23;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = v25;
  *(void *)(a2 + 32) = v24;
  *(unsigned char *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v20;
  *(void *)(a2 + 64) = v19;
  *(void *)(a2 + 72) = v22;
  *(unsigned char *)(a2 + 80) = v6;
  *(void *)(a2 + 88) = v21;
  *(void *)(a2 + 96) = v7;
  *(unsigned char *)(a2 + 104) = v8;
  *(void *)(a2 + 112) = v9;
  *(void *)(a2 + 120) = v18;
  *(void *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 136) = 1;
  *(void *)(a2 + 144) = v10;
  *(unsigned char *)(a2 + 152) = v11;
  uint64_t v16 = v12;
  *(void *)(a2 + 160) = v12;
  *(void *)(a2 + 168) = v13;
  *(unsigned char *)(a2 + 176) = v14;
  *(void *)(a2 + 184) = v15;
  sub_10015D6B4(v25, v24, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10015D6B4(v21, v7, v8);
  swift_bridgeObjectRetain();
  sub_10015D6B4(v16, v13, v14);
  swift_bridgeObjectRetain();
  sub_10015D6C4(v16, v13, v14);
  swift_bridgeObjectRelease();
  sub_10015D6C4(v25, v24, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10015D6C4(v21, v7, v8);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DB4AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_1001BF3C0(a1);
  sub_1001571E0();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v28 = v9;
  uint64_t v10 = (int *)type metadata accessor for STransferMetrics();
  if (*(void *)(a1 + v10[16])) {
    static Color.red.getter();
  }
  else {
    static Color.primary.getter();
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = AnyShapeStyle.init<A>(_:)();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_100267EF0;
  uint64_t v14 = *(void *)(a1 + v10[13]);
  uint64_t v15 = *(void *)(a1 + v10[12]);
  BOOL v16 = __OFADD__(v14, v15);
  uint64_t v17 = v14 + v15;
  if (v16)
  {
    __break(1u);
  }
  else if ((unint64_t)(v17 - 0x1000000000000000) >> 61 == 7)
  {
    uint64_t v18 = result;
    double v19 = (double)(8 * v17);
    double v20 = sub_10016CDC0();
    *(void *)(v18 + 56) = &type metadata for Double;
    *(void *)(v18 + 64) = &protocol witness table for Double;
    *(double *)(v18 + 32) = v19 / v20 / 1000000.0;
    String.init(format:_:)();
    uint64_t v21 = Text.init<A>(_:)();
    uint64_t v23 = v22;
    uint64_t v24 = v21;
    char v26 = v25 & 1;
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 16) = v8 & 1;
    *(void *)(a2 + 24) = v28;
    *(void *)(a2 + 32) = KeyPath;
    *(void *)(a2 + 40) = v12;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a2 + 56) = 1;
    *(void *)(a2 + 64) = v21;
    *(void *)(a2 + 72) = v22;
    *(unsigned char *)(a2 + 80) = v25 & 1;
    *(void *)(a2 + 88) = v27;
    sub_10015D6B4(v4, v6, v8 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10015D6B4(v24, v23, v26);
    swift_bridgeObjectRetain();
    sub_10015D6C4(v24, v23, v26);
    swift_bridgeObjectRelease();
    sub_10015D6C4(v4, v6, v8 & 1);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1001DB71C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v3);
  double v4 = sub_10016CDC0();
  if (qword_1002D7A58 != -1) {
    swift_once();
  }
  id v5 = [(id)qword_1002D8780 stringFromTimeInterval:v4];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    Double.write<A>(to:)();
    uint64_t v7 = 0;
    uint64_t v9 = (void *)0xE000000000000000;
  }
  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x64657370616C6520;
  v11._object = (void *)0xE800000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v11);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  char v16 = v15 & 1;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v13;
  *(unsigned char *)(a1 + 32) = v15 & 1;
  *(void *)(a1 + 40) = v17;
  sub_10015D6B4(v12, v13, v15 & 1);
  swift_bridgeObjectRetain();
  sub_10015D6C4(v12, v14, v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DB920()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001DB958()
{
}

uint64_t sub_1001DB960()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DB998(uint64_t a1)
{
  return sub_1001D7D3C(a1, *(void (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_1001DB9A0()
{
  return sub_1001B8328();
}

uint64_t sub_1001DB9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SURLSessionRunningView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DBA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SURLSessionRunningView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DBA90()
{
  uint64_t v2 = *(void *)(type metadata accessor for SURLSessionRunningView() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10018047C;
  return sub_1001D7DD8(v3);
}

uint64_t sub_1001DBB5C()
{
  return sub_1001D8788(*(void *)(v0 + 16));
}

unint64_t sub_1001DBB64()
{
  unint64_t result = qword_1002DB3F0;
  if (!qword_1002DB3F0)
  {
    sub_100157104(&qword_1002DB3C8);
    sub_1001DBC10();
    sub_1001DC348(&qword_1002DB408, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB3F0);
  }
  return result;
}

unint64_t sub_1001DBC10()
{
  unint64_t result = qword_1002DB3F8;
  if (!qword_1002DB3F8)
  {
    sub_100157104(&qword_1002DB3C0);
    sub_10015D788(&qword_1002DB400, &qword_1002DB3B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB3F8);
  }
  return result;
}

uint64_t sub_1001DBCB4()
{
  uint64_t v1 = *(void *)(type metadata accessor for SURLSessionRunningView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1001D88D4(v2);
}

uint64_t *sub_1001DBD14(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1001DBD80(uint64_t a1, unint64_t a2)
{
  if (a2 >= 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1001DBD94()
{
  unint64_t result = qword_1002DB460;
  if (!qword_1002DB460)
  {
    sub_100157104(&qword_1002DB438);
    sub_10015D788(&qword_1002DB450, &qword_1002DB440);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB460);
  }
  return result;
}

unint64_t sub_1001DBE2C()
{
  unint64_t result = qword_1002DB468;
  if (!qword_1002DB468)
  {
    sub_100157104(&qword_1002DB420);
    sub_10015D788(&qword_1002DB450, &qword_1002DB440);
    sub_10015D788(&qword_1002DB458, &qword_1002DB410);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB468);
  }
  return result;
}

uint64_t sub_1001DBEF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100168D8C(a1);
}

uint64_t sub_1001DBEF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001DBF24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001DBF50()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_1001DBF7C()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_1001DBFA8@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DA3D4(*(void *)(v1 + 16), a1);
}

unint64_t sub_1001DBFB0()
{
  unint64_t result = qword_1002DB4A8;
  if (!qword_1002DB4A8)
  {
    sub_100157104(&qword_1002DB4A0);
    sub_10015D788(&qword_1002DB4B0, &qword_1002DB4B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB4A8);
  }
  return result;
}

uint64_t sub_1001DC05C()
{
  uint64_t v1 = (int *)(type metadata accessor for SURLSessionRunningView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3 + v1[9];
  sub_100157064(&qword_1002D7FA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

int *sub_1001DC18C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SURLSessionRunningView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1001DA740(a1, v6, a2);
}

uint64_t sub_1001DC214(char *a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = sub_100157064(&qword_1002D8A80);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

uint64_t sub_1001DC274@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DACD4(*(void *)(v1 + 16), a1);
}

double sub_1001DC27C@<D0>(uint64_t a1@<X8>)
{
  return sub_1001DB198(*(void *)(v1 + 24), a1);
}

unint64_t sub_1001DC284()
{
  unint64_t result = qword_1002DB510;
  if (!qword_1002DB510)
  {
    sub_100157104(&qword_1002DB500);
    sub_10015D788(&qword_1002DB518, &qword_1002DB520);
    sub_10015D788(&qword_1002D84F8, &qword_1002D8500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB510);
  }
  return result;
}

uint64_t sub_1001DC348(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_1001DC390(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v134 = sub_100157064(&qword_1002D8A80);
  uint64_t v4 = *(void *)(v134 - 8);
  uint64_t v5 = __chkstk_darwin(v134);
  uint64_t v7 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v140 = (uint64_t)&v124 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t *)((char *)&v124 - v11);
  __chkstk_darwin(v10);
  uint64_t v136 = (uint64_t *)((char *)&v124 - v12);
  Swift::Int v13 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v13);
  if (result >= v13)
  {
    if (v13 < 0) {
      goto LABEL_142;
    }
    if (v13) {
      return sub_1001DCDFC(0, v13, 1, a1);
    }
    return result;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_150;
  }
  uint64_t v133 = v4;
  Swift::Int v126 = result;
  if (v13 < 2)
  {
    double v19 = (char *)_swiftEmptyArrayStorage;
    unint64_t v132 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    unsigned __int8 v125 = _swiftEmptyArrayStorage;
    if (v13 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
LABEL_108:
      if (v21 >= 2)
      {
        uint64_t v118 = *a1;
        do
        {
          unint64_t v119 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_137;
          }
          if (!v118) {
            goto LABEL_149;
          }
          uint64_t v120 = *(void *)&v19[16 * v119 + 32];
          uint64_t v121 = *(void *)&v19[16 * v21 + 24];
          sub_1001DD08C(v118 + *(void *)(v133 + 72) * v120, v118 + *(void *)(v133 + 72) * *(void *)&v19[16 * v21 + 16], v118 + *(void *)(v133 + 72) * v121, v132);
          if (v2) {
            break;
          }
          if (v121 < v120) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v19 = sub_1001B49EC((uint64_t)v19);
          }
          if (v119 >= *((void *)v19 + 2)) {
            goto LABEL_139;
          }
          char v122 = &v19[16 * v119 + 32];
          *(void *)char v122 = v120;
          *((void *)v122 + 1) = v121;
          unint64_t v123 = *((void *)v19 + 2);
          if (v21 > v123) {
            goto LABEL_140;
          }
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v123 - v21));
          *((void *)v19 + 2) = v123 - 1;
          unint64_t v21 = v123 - 1;
        }
        while (v123 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      v125[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v130 = v7;
  }
  else
  {
    uint64_t v130 = v7;
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v17 + 16) = v16;
    uint64_t v18 = *(unsigned __int8 *)(v4 + 80);
    unsigned __int8 v125 = (void *)v17;
    unint64_t v132 = v17 + ((v18 + 32) & ~v18);
  }
  Swift::Int v20 = 0;
  double v19 = (char *)_swiftEmptyArrayStorage;
  char v138 = a1;
  while (1)
  {
    unsigned __int8 v128 = v19;
    Swift::Int v22 = v20;
    Swift::Int v23 = v20 + 1;
    Swift::Int v131 = v20;
    if (v20 + 1 >= v13)
    {
      uint64_t v39 = v20 + 1;
      double v19 = v128;
      goto LABEL_59;
    }
    uint64_t v24 = *a1;
    uint64_t v25 = *(void *)(v133 + 72);
    char v26 = v136;
    sub_10015D5F4(*a1 + v25 * v23, (uint64_t)v136, &qword_1002D8A80);
    Swift::Int v141 = v13;
    uint64_t v27 = v137;
    sub_10015D5F4(v24 + v25 * v22, (uint64_t)v137, &qword_1002D8A80);
    uint64_t v28 = *v26;
    uint64_t v135 = *v27;
    uint64_t v29 = (uint64_t)v27;
    Swift::Int v30 = v141;
    sub_10015D658(v29, &qword_1002D8A80);
    sub_10015D658((uint64_t)v26, &qword_1002D8A80);
    uint64_t v129 = v24;
    uint64_t v142 = v25;
    Swift::Int v139 = v22 + 2;
    if (v22 + 2 >= v30)
    {
      uint64_t v34 = v28;
    }
    else
    {
      uint64_t v127 = v2;
      uint64_t v31 = v25 * v23;
      uint64_t v32 = v24;
      uint64_t v33 = v25 * (v22 + 2);
      uint64_t v34 = v28;
      while (1)
      {
        uint64_t v35 = v136;
        int v36 = v34 < v135;
        sub_10015D5F4(v32 + v33, (uint64_t)v136, &qword_1002D8A80);
        uint64_t v37 = v137;
        sub_10015D5F4(v32 + v31, (uint64_t)v137, &qword_1002D8A80);
        int v38 = *v35 >= *v37;
        sub_10015D658((uint64_t)v37, &qword_1002D8A80);
        sub_10015D658((uint64_t)v35, &qword_1002D8A80);
        if (v36 == v38) {
          break;
        }
        v32 += v142;
        if (v141 == ++v139)
        {
          Swift::Int v30 = v141;
          Swift::Int v139 = v141;
          a1 = v138;
          uint64_t v2 = v127;
          Swift::Int v22 = v131;
          goto LABEL_25;
        }
      }
      a1 = v138;
      uint64_t v2 = v127;
      Swift::Int v22 = v131;
      Swift::Int v30 = v141;
    }
LABEL_25:
    double v19 = v128;
    if (v34 >= v135) {
      break;
    }
    uint64_t v39 = v139;
    if (v139 < v22) {
      goto LABEL_143;
    }
    if (v22 >= v139) {
      goto LABEL_39;
    }
    uint64_t v127 = v2;
    uint64_t v40 = 0;
    uint64_t v41 = v142;
    uint64_t v42 = v142 * (v139 - 1);
    Swift::Int v43 = v22;
    uint64_t v44 = v139 * v142;
    Swift::Int v45 = v43;
    uint64_t v46 = v43 * v142;
    uint64_t v47 = v129;
    do
    {
      if (v45 != v39 + v40 - 1)
      {
        if (!v47) {
          goto LABEL_148;
        }
        unint64_t v48 = v47 + v46;
        uint64_t v49 = v47;
        uint64_t v50 = v47 + v42;
        sub_10015D474(v47 + v46, (uint64_t)v130, &qword_1002D8A80);
        if (v46 < v42 || v48 >= v49 + v44)
        {
          swift_arrayInitWithTakeFrontToBack();
          uint64_t v41 = v142;
        }
        else
        {
          uint64_t v41 = v142;
          if (v46 != v42) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        sub_10015D474((uint64_t)v130, v50, &qword_1002D8A80);
        uint64_t v39 = v139;
        uint64_t v47 = v129;
      }
      ++v45;
      --v40;
      v42 -= v41;
      v44 -= v41;
      v46 += v41;
    }
    while (v45 < v39 + v40);
    uint64_t v2 = v127;
    double v19 = v128;
    Swift::Int v22 = v131;
    Swift::Int v30 = v141;
    if (v39 < v141) {
      goto LABEL_40;
    }
LABEL_59:
    if (v39 < v22) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      double v19 = sub_1001B43F0(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v67 = *((void *)v19 + 2);
    unint64_t v66 = *((void *)v19 + 3);
    unint64_t v21 = v67 + 1;
    if (v67 >= v66 >> 1) {
      double v19 = sub_1001B43F0((char *)(v66 > 1), v67 + 1, 1, v19);
    }
    uint64_t v68 = v2;
    *((void *)v19 + 2) = v21;
    uint64_t v69 = v19 + 32;
    unsigned __int8 v70 = &v19[16 * v67 + 32];
    Swift::Int v71 = v139;
    *(void *)unsigned __int8 v70 = v131;
    *((void *)v70 + 1) = v71;
    if (v67)
    {
      while (1)
      {
        unint64_t v72 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v77 = &v69[16 * v21];
          uint64_t v78 = *((void *)v77 - 8);
          uint64_t v79 = *((void *)v77 - 7);
          BOOL v83 = __OFSUB__(v79, v78);
          uint64_t v80 = v79 - v78;
          if (v83) {
            goto LABEL_125;
          }
          uint64_t v82 = *((void *)v77 - 6);
          uint64_t v81 = *((void *)v77 - 5);
          BOOL v83 = __OFSUB__(v81, v82);
          uint64_t v75 = v81 - v82;
          char v76 = v83;
          if (v83) {
            goto LABEL_126;
          }
          unint64_t v84 = v21 - 2;
          int v85 = &v69[16 * v21 - 32];
          uint64_t v87 = *(void *)v85;
          uint64_t v86 = *((void *)v85 + 1);
          BOOL v83 = __OFSUB__(v86, v87);
          uint64_t v88 = v86 - v87;
          if (v83) {
            goto LABEL_128;
          }
          BOOL v83 = __OFADD__(v75, v88);
          uint64_t v89 = v75 + v88;
          if (v83) {
            goto LABEL_131;
          }
          if (v89 >= v80)
          {
            uint64_t v107 = &v69[16 * v72];
            uint64_t v109 = *(void *)v107;
            uint64_t v108 = *((void *)v107 + 1);
            BOOL v83 = __OFSUB__(v108, v109);
            uint64_t v110 = v108 - v109;
            if (v83) {
              goto LABEL_135;
            }
            BOOL v100 = v75 < v110;
            goto LABEL_96;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v101 = *((void *)v19 + 4);
            uint64_t v102 = *((void *)v19 + 5);
            BOOL v83 = __OFSUB__(v102, v101);
            uint64_t v94 = v102 - v101;
            char v95 = v83;
            goto LABEL_90;
          }
          uint64_t v74 = *((void *)v19 + 4);
          uint64_t v73 = *((void *)v19 + 5);
          BOOL v83 = __OFSUB__(v73, v74);
          uint64_t v75 = v73 - v74;
          char v76 = v83;
        }
        if (v76) {
          goto LABEL_127;
        }
        unint64_t v84 = v21 - 2;
        uint64_t v90 = &v69[16 * v21 - 32];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v93 = __OFSUB__(v91, v92);
        uint64_t v94 = v91 - v92;
        char v95 = v93;
        if (v93) {
          goto LABEL_130;
        }
        uint64_t v96 = &v69[16 * v72];
        uint64_t v98 = *(void *)v96;
        uint64_t v97 = *((void *)v96 + 1);
        BOOL v83 = __OFSUB__(v97, v98);
        uint64_t v99 = v97 - v98;
        if (v83) {
          goto LABEL_133;
        }
        if (__OFADD__(v94, v99)) {
          goto LABEL_134;
        }
        if (v94 + v99 >= v75)
        {
          BOOL v100 = v75 < v99;
LABEL_96:
          if (v100) {
            unint64_t v72 = v84;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v95) {
          goto LABEL_129;
        }
        uint64_t v103 = &v69[16 * v72];
        uint64_t v105 = *(void *)v103;
        uint64_t v104 = *((void *)v103 + 1);
        BOOL v83 = __OFSUB__(v104, v105);
        uint64_t v106 = v104 - v105;
        if (v83) {
          goto LABEL_132;
        }
        if (v106 < v94) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v111 = v72 - 1;
        if (v72 - 1 >= v21)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        uint64_t v112 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        unsigned __int8 v113 = &v69[16 * v111];
        uint64_t v114 = *(void *)v113;
        unsigned __int8 v115 = &v69[16 * v72];
        uint64_t v116 = *((void *)v115 + 1);
        sub_1001DD08C(v112 + *(void *)(v133 + 72) * *(void *)v113, v112 + *(void *)(v133 + 72) * *(void *)v115, v112 + *(void *)(v133 + 72) * v116, v132);
        if (v68) {
          goto LABEL_119;
        }
        if (v116 < v114) {
          goto LABEL_122;
        }
        if (v72 > *((void *)v19 + 2)) {
          goto LABEL_123;
        }
        *(void *)unsigned __int8 v113 = v114;
        *(void *)&v69[16 * v111 + 8] = v116;
        unint64_t v117 = *((void *)v19 + 2);
        if (v72 >= v117) {
          goto LABEL_124;
        }
        unint64_t v21 = v117 - 1;
        memmove(&v69[16 * v72], v115 + 16, 16 * (v117 - 1 - v72));
        *((void *)v19 + 2) = v117 - 1;
        a1 = v138;
        if (v117 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v21 = 1;
LABEL_15:
    Swift::Int v20 = v139;
    uint64_t v2 = v68;
    Swift::Int v13 = a1[1];
    if (v139 >= v13) {
      goto LABEL_108;
    }
  }
  uint64_t v39 = v139;
LABEL_39:
  if (v39 >= v30) {
    goto LABEL_59;
  }
LABEL_40:
  if (__OFSUB__(v39, v22)) {
    goto LABEL_141;
  }
  if (v39 - v22 >= v126) {
    goto LABEL_59;
  }
  if (__OFADD__(v22, v126)) {
    goto LABEL_144;
  }
  if (v22 + v126 >= v30) {
    uint64_t v51 = v30;
  }
  else {
    uint64_t v51 = v22 + v126;
  }
  if (v51 >= v22)
  {
    if (v39 != v51)
    {
      uint64_t v127 = v2;
      uint64_t v52 = *(void *)(v133 + 72);
      uint64_t v142 = v52 * (v39 - 1);
      uint64_t v135 = v52;
      uint64_t v53 = v39 * v52;
      uint64_t v129 = v51;
      do
      {
        uint64_t v55 = 0;
        Swift::Int v56 = v131;
        Swift::Int v139 = v39;
        while (1)
        {
          uint64_t v57 = *a1;
          uint64_t v58 = v53;
          uint64_t v59 = v53 + v55 + *a1;
          unsigned __int8 v60 = v136;
          sub_10015D5F4(v59, (uint64_t)v136, &qword_1002D8A80);
          unsigned __int8 v61 = v137;
          sub_10015D5F4(v142 + v55 + v57, (uint64_t)v137, &qword_1002D8A80);
          Swift::Int v141 = *v60;
          Swift::Int v62 = *v61;
          sub_10015D658((uint64_t)v61, &qword_1002D8A80);
          sub_10015D658((uint64_t)v60, &qword_1002D8A80);
          if (v141 >= v62) {
            break;
          }
          uint64_t v63 = *a1;
          if (!*a1) {
            goto LABEL_146;
          }
          uint64_t v53 = v58;
          uint64_t v64 = v63 + v142 + v55;
          sub_10015D474(v63 + v58 + v55, v140, &qword_1002D8A80);
          swift_arrayInitWithTakeFrontToBack();
          sub_10015D474(v140, v64, &qword_1002D8A80);
          v55 -= v135;
          ++v56;
          a1 = v138;
          Swift::Int v54 = v139;
          if (v139 == v56) {
            goto LABEL_50;
          }
        }
        Swift::Int v54 = v139;
        uint64_t v53 = v58;
LABEL_50:
        uint64_t v39 = v54 + 1;
        v142 += v135;
        v53 += v135;
      }
      while (v39 != v129);
      uint64_t v39 = v129;
      uint64_t v2 = v127;
      double v19 = v128;
      Swift::Int v22 = v131;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DCDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v36 = a1;
  uint64_t v37 = sub_100157064(&qword_1002D8A80);
  uint64_t v7 = __chkstk_darwin(v37);
  uint64_t v43 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v39 = (uint64_t *)((char *)&v34 - v10);
  uint64_t result = __chkstk_darwin(v9);
  int v38 = (uint64_t *)((char *)&v34 - v13);
  uint64_t v42 = a3;
  uint64_t v35 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v15 = v14 * (v42 - 1);
    uint64_t v40 = v14;
    uint64_t v16 = v14 * v42;
    uint64_t v17 = &qword_1002D8A80;
    Swift::Int v45 = a4;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v19 = v36;
    uint64_t v41 = v16;
    while (1)
    {
      uint64_t v21 = *v45;
      uint64_t v22 = v16 + v18 + *v45;
      Swift::Int v23 = v38;
      sub_10015D5F4(v22, (uint64_t)v38, v17);
      uint64_t v24 = v15 + v18 + v21;
      uint64_t v25 = v15;
      char v26 = v39;
      sub_10015D5F4(v24, (uint64_t)v39, v17);
      uint64_t v44 = *v23;
      uint64_t v27 = v17;
      uint64_t v28 = *v26;
      uint64_t v29 = (uint64_t)v26;
      uint64_t v15 = v25;
      sub_10015D658(v29, v27);
      uint64_t v30 = (uint64_t)v23;
      uint64_t v16 = v41;
      uint64_t result = sub_10015D658(v30, v27);
      BOOL v31 = v44 < v28;
      uint64_t v17 = v27;
      if (!v31)
      {
LABEL_4:
        uint64_t v15 = v25 + v40;
        v16 += v40;
        if (++v42 == v35) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v32 = *v45;
      if (!*v45) {
        break;
      }
      uint64_t v33 = v32 + v25 + v18;
      sub_10015D474(v32 + v16 + v18, v43, v27);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t v20 = v33;
      uint64_t v17 = v27;
      uint64_t result = sub_10015D474(v43, v20, v27);
      v18 -= v40;
      if (v42 == ++v19) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DD08C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v48 = sub_100157064(&qword_1002D8A80);
  uint64_t v8 = __chkstk_darwin(v48);
  uint64_t v50 = (uint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v45 - v10);
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_70;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_71;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v53 = a1;
  unint64_t v52 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v29 = a4 + v18;
      unint64_t v51 = a4 + v18;
      unint64_t v53 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v31 = -v13;
        unint64_t v46 = a1;
        unint64_t v47 = a4;
        do
        {
          unint64_t v49 = a3 + v31;
          sub_10015D5F4(v29 + v31, (uint64_t)v11, &qword_1002D8A80);
          unint64_t v32 = a2 + v31;
          unint64_t v33 = a3;
          uint64_t v34 = v11;
          uint64_t v35 = v50;
          sub_10015D5F4(a2 + v31, (uint64_t)v50, &qword_1002D8A80);
          uint64_t v36 = *v34;
          uint64_t v37 = *v35;
          uint64_t v38 = (uint64_t)v35;
          uint64_t v11 = v34;
          sub_10015D658(v38, &qword_1002D8A80);
          sub_10015D658((uint64_t)v34, &qword_1002D8A80);
          if (v36 >= v37)
          {
            unint64_t v42 = v51;
            v51 += v31;
            a3 = v49;
            if (v33 < v42 || v49 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v33 != v42)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v32 = a2;
            unint64_t v41 = v46;
            unint64_t v40 = v47;
          }
          else
          {
            a3 = v49;
            if (v33 < a2 || v49 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v41 = v46;
              unint64_t v40 = v47;
            }
            else
            {
              BOOL v39 = v33 == a2;
              unint64_t v41 = v46;
              unint64_t v40 = v47;
              if (!v39) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v53 += v31;
          }
          unint64_t v29 = v51;
          if (v51 <= v40) {
            break;
          }
          a2 = v32;
        }
        while (v32 > v41);
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v49 = a4 + v17;
    unint64_t v51 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_10015D5F4(a2, (uint64_t)v11, &qword_1002D8A80);
        uint64_t v20 = a4;
        uint64_t v21 = v50;
        sub_10015D5F4(v20, (uint64_t)v50, &qword_1002D8A80);
        uint64_t v22 = *v11;
        uint64_t v23 = *v21;
        sub_10015D658((uint64_t)v21, &qword_1002D8A80);
        sub_10015D658((uint64_t)v11, &qword_1002D8A80);
        unint64_t v24 = v53;
        if (v22 >= v23)
        {
          unint64_t v27 = v52 + v13;
          if (v53 < v52 || v53 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v53 != v52)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v52 = v27;
          unint64_t v25 = a2;
        }
        else
        {
          unint64_t v25 = a2 + v13;
          if (v53 < a2 || v53 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v53 == a2)
          {
            unint64_t v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v53 = v24 + v13;
        a4 = v52;
        if (v52 >= v49) {
          break;
        }
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_68:
    sub_1001B48A8(&v53, &v52, (uint64_t *)&v51);
    return 1;
  }
LABEL_72:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DD54C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001DD578()
{
  return EnvironmentValues.tint.setter();
}

double sub_1001DD5A4(_OWORD *a1)
{
  double result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1001DD5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a7)
  {
    sub_10015D6B4(a4, a5, a6 & 1);
    swift_bridgeObjectRetain();
    sub_10015D6B4(a10, a11, a12 & 1);
    swift_bridgeObjectRetain();
    sub_10015D6B4(a17, a18, a19 & 1);
    swift_bridgeObjectRetain();
    sub_10015D6B4(a23, a24, a25 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_1001DD6B4(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25]);
  return a1;
}

uint64_t sub_1001DD728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a7)
  {
    sub_10015D6C4(a4, a5, a6 & 1);
    swift_bridgeObjectRelease();
    sub_10015D6C4(a10, a11, a12 & 1);
    swift_bridgeObjectRelease();
    sub_10015D6C4(a17, a18, a19 & 1);
    swift_bridgeObjectRelease();
    sub_10015D6C4(a23, a24, a25 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001DD814()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1001DD8C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_1001EB868(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_100196D64(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

double sub_1001DD928@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_1001EB8E0(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    sub_100196D64(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t sub_1001DD98C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  unint64_t v4 = sub_1001EB824(a1);
  if ((v5 & 1) == 0)
  {
    uint64_t v2 = 0;
LABEL_5:
    unsigned __int8 v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  unsigned __int8 v6 = 0;
  uint64_t v2 = *(unsigned int *)(*(void *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

uint64_t sub_1001DD9E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001DDAF0()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for PersistanceStoreErrors()
{
  return sub_1001DDB08();
}

uint64_t sub_1001DDB08()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s13FTMInternal_422PersistanceStoreErrorsOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1001DDAF0();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PersistanceStoreErrors(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1001DDAF0();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1001DDB08();
  return a1;
}

uint64_t assignWithTake for PersistanceStoreErrors(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1001DDB08();
  return a1;
}

uint64_t getEnumTagSinglePayload for PersistanceStoreErrors(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PersistanceStoreErrors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001DDC88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1001DDC90(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PersistanceStoreErrors()
{
  return &type metadata for PersistanceStoreErrors;
}

uint64_t sub_1001DDCAC()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___database;
  if (*(void *)(v0 + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___database))
  {
    uint64_t v2 = *(sqlite3 **)(v0 + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___database);
LABEL_9:
    swift_retain();
    return (uint64_t)v2;
  }
  if (qword_1002D7A98 != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  if (qword_1002D7B60 != -1) {
    swift_once();
  }
  if (databasePath.value._object)
  {
    uint64_t v2 = sub_1001EEEBC();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
    goto LABEL_9;
  }
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

char *sub_1001DDE30()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService];
  if (v2)
  {
    unsigned int v3 = *(char **)&v0[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService];
  }
  else
  {
    int v4 = v0;
    id v5 = objc_allocWithZone((Class)type metadata accessor for CoreTelephonyService());
    unsigned __int8 v6 = sub_10018DE0C(v0);
    uint64_t v7 = *(void **)&v0[v1];
    *(void *)&v4[v1] = v6;
    unsigned int v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

char *sub_1001DDEA8()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService];
  if (v2)
  {
    unsigned int v3 = *(char **)&v0[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService];
LABEL_5:
    id v9 = v2;
    return v3;
  }
  int v4 = v0;
  uint64_t result = (char *)[self sharedInstance];
  if (result)
  {
    unsigned __int8 v6 = result;
    objc_allocWithZone((Class)type metadata accessor for MetricService());
    uint64_t v7 = sub_1001C3FF0(v4, v6);
    id v8 = *(void **)&v4[v1];
    *(void *)&v4[v1] = v7;
    unsigned int v3 = v7;

    uint64_t v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_1001DDF54(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___database] = 0;
  id v9 = (uint64_t *)&v2[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_recordedTime];
  uint64_t v10 = v2;
  Date.init()();
  uint64_t v11 = sub_100180E94();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *id v9 = v11;
  v9[1] = v13;
  uint64_t v14 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_group;
  *(void *)&v10[v14] = dispatch_group_create();
  uint64_t v15 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_firstTimeDashboard;
  *(void *)&v10[v15] = dispatch_group_create();
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_storeDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_hardwareManager] = a1;
  *(void *)&v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_aBMWrapper] = a2;
  swift_retain();
  id v35 = a2;

  uint64_t v16 = (objc_class *)type metadata accessor for PersistanceStore();
  v42.receiver = v10;
  v42.super_class = v16;
  id v17 = [super init];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  id v19 = v17;
  sub_1001DED2C((uint64_t)sub_1001DF9F8, v18);
  swift_release();

  uint64_t v20 = self;
  id v21 = [v20 defaultCenter];
  if (qword_1002D7AD0 != -1) {
    swift_once();
  }
  uint64_t v22 = static NSNotificationName.NewABMMetric;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v19;
  unint64_t v40 = sub_1001DFDD8;
  uint64_t v41 = v23;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v38 = sub_1001DD9E8;
  BOOL v39 = &unk_10028DF68;
  unint64_t v24 = _Block_copy(&aBlock);
  id v25 = v19;
  swift_release();
  id v26 = [v21 addObserverForName:v22 object:0 queue:0 usingBlock:v24];
  _Block_release(v24);
  swift_unknownObjectRelease();

  id v27 = [v20 defaultCenter];
  if (qword_1002D7AD8 != -1) {
    swift_once();
  }
  uint64_t v28 = static NSNotificationName.NewCTMetric;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v25;
  unint64_t v40 = sub_1001DFA18;
  uint64_t v41 = v29;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v38 = sub_1001DD9E8;
  BOOL v39 = &unk_10028DFB8;
  uint64_t v30 = _Block_copy(&aBlock);
  id v31 = v25;
  swift_release();
  id v32 = [v27 addObserverForName:v28 object:0 queue:0 usingBlock:v30];

  swift_release();
  _Block_release(v30);
  swift_unknownObjectRelease();

  return v31;
}

uint64_t sub_1001DE3C4(char a1, uint64_t a2)
{
  if (a1)
  {
    if (qword_1002D7AB8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    sub_1001DDCAC();
    sub_1001E0904((uint64_t)sub_1001DE5B4, 0);
    return swift_release();
  }
  else
  {
    if (qword_1002D7AB8 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_100267EF0;
    if (a2)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    uint64_t v5 = String.init<A>(describing:)();
    uint64_t v7 = v6;
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = sub_100181588();
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 40) = v7;
    os_log(_:dso:log:type:_:)();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001DE5B4(char a1)
{
  if (a1)
  {
    if (qword_1002D7AB8 != -1) {
      swift_once();
    }
  }
  else if (qword_1002D7AB8 != -1)
  {
    swift_once();
  }
  static os_log_type_t.default.getter();

  return os_log(_:dso:log:type:_:)();
}

void sub_1001DE69C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t *)&v1[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_recordedTime];
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10019F8B4();
  swift_bridgeObjectRelease();
  if (v7 >= 50)
  {
    Date.init()();
    uint64_t v8 = sub_100180E94();
    uint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *uint64_t v6 = v8;
    v6[1] = v10;
    swift_bridgeObjectRelease();
    if (qword_1002D7B20 != -1) {
      swift_once();
    }
    id v11 = (id)qword_1002E31D0;
    sub_10019EA64(1);

    uint64_t v12 = self;
    id v13 = [v12 sharedInstance];
    if (v13)
    {
      uint64_t v14 = v13;
      NSString v15 = String._bridgeToObjectiveC()();
      [v14 removeAWDConfigForAppid:v15];

      id v16 = [self mainBundle];
      if (qword_1002D7B18 != -1) {
        swift_once();
      }
      swift_bridgeObjectRetain();
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v18 = String._bridgeToObjectiveC()();
      id v19 = [v16 pathForResource:v17 ofType:v18];

      if (v19)
      {
        NSString v20 = String._bridgeToObjectiveC()();
        unsigned int v21 = [v14 addAWDConfigForAppId:v20 andProtofFilePath:v19];

        if (v21)
        {
          [v14 listen];
          NSString v22 = String._bridgeToObjectiveC()();
          [v14 querySpecificMetric:v22 triggerRef:9999 triggerType:0 triggerID:*(unsigned int *)(qword_1002E31C8 + 184) profileID:0 metricID:0];
        }
        id v23 = objc_allocWithZone((Class)type metadata accessor for CoreTelephonyService());
        unint64_t v24 = v1;
        id v25 = sub_10018DE0C(v24);
        id v26 = *(void **)&v24[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService];
        *(void *)&v24[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService] = v25;

        id v27 = [v12 sharedInstance];
        if (!v27)
        {
          __break(1u);
          return;
        }
        uint64_t v28 = v27;
        objc_allocWithZone((Class)type metadata accessor for MetricService());
        uint64_t v29 = v24;
        uint64_t v30 = sub_1001C3FF0(v29, v28);
        id v31 = *(void **)&v29[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService];
        *(void *)&v29[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService] = v30;

        uint64_t v14 = v31;
      }
      else
      {
        if (qword_1002D7A88 != -1) {
          swift_once();
        }
        static os_log_type_t.error.getter();
        os_log(_:dso:log:type:_:)();
      }
    }
  }
}

id sub_1001DEAF4()
{
  uint64_t v1 = self;
  id v2 = [v1 defaultCenter];
  uint64_t v3 = qword_1002D7AD0;
  id v4 = v0;
  if (v3 != -1) {
    swift_once();
  }
  [v2 removeObserver:v4 name:static NSNotificationName.NewABMMetric object:0];

  id v5 = [v1 defaultCenter];
  uint64_t v6 = qword_1002D7AD8;
  id v7 = v4;
  if (v6 != -1) {
    swift_once();
  }
  [v5 removeObserver:v7 name:static NSNotificationName.NewCTMetric object:0];

  v9.receiver = v7;
  v9.super_class = (Class)type metadata accessor for PersistanceStore();
  return [super dealloc];
}

uint64_t sub_1001DED2C(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin(v7);
  objc_super v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v21 = *(dispatch_group_t *)(v2 + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_group);
  uint64_t v10 = v21;
  dispatch_group_enter(v21);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 0;
  sub_1001DDCAC();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v13 = (void *)swift_allocObject();
  v13[2] = v11;
  v13[3] = v12;
  v13[4] = a1;
  v13[5] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1001E0BF4(0xD000000000000186, 0x800000010023E940, 0x325663697274654DLL, 0xE900000000000030, (uint64_t)sub_1001DFDEC, (uint64_t)v13);
  swift_release();
  swift_release();
  swift_release();
  dispatch_group_enter(v10);
  sub_1001DDCAC();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  NSString v15 = (void *)swift_allocObject();
  void v15[2] = v11;
  v15[3] = v14;
  v15[4] = a1;
  v15[5] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1001E0BF4(0xD0000000000001B7, 0x800000010023EAD0, 0x72616F6268736144, 0xE900000000000064, (uint64_t)sub_1001DFAD4, (uint64_t)v15);
  swift_release();
  swift_release();
  swift_release();
  sub_1001AE450();
  id v16 = (void *)static OS_dispatch_queue.main.getter();
  NSString v17 = (void *)swift_allocObject();
  void v17[2] = v11;
  v17[3] = a1;
  v17[4] = a2;
  aBlock[4] = sub_1001DFB34;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028E0A8;
  NSString v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v26 = _swiftEmptyArrayStorage;
  sub_1001DFB40((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001AE4E8();
  uint64_t v19 = v22;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v19);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  swift_release();
  return swift_release();
}

void sub_1001DF1D8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, uint64_t))
{
  if (a1)
  {
    swift_beginAccess();
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    if (a2)
    {
      swift_getErrorValue();
      uint64_t v7 = Error.localizedDescription.getter();
      unint64_t v9 = v8;
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v9 = 0xE000000000000000;
    }
    sub_1001DFB88();
    uint64_t v10 = swift_allocError();
    *(void *)uint64_t v11 = v7;
    *(void *)(v11 + 8) = v9;
    *(unsigned char *)(v11 + 16) = 1;
    a5(0, v10);
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  id v13 = (void *)Strong;
  if (Strong)
  {
    uint64_t v14 = *(id *)(Strong + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_group);

    dispatch_group_leave(v14);
  }
}

uint64_t sub_1001DF30C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  swift_beginAccess();
  if (*(unsigned char *)(a1 + 16) == 1) {
    return a2(1, 0);
  }
  sub_1001DFB88();
  uint64_t v5 = swift_allocError();
  *(_OWORD *)uint64_t v6 = xmmword_100269B60;
  *(unsigned char *)(v6 + 16) = 1;
  a2(0, v5);
  return swift_errorRelease();
}

uint64_t sub_1001DF3C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return sub_1001DF660(a1, a2, a3);
}

uint64_t sub_1001DF3CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return sub_1001DF660(a1, a2, a3);
}

uint64_t sub_1001DF3D4(uint64_t a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)(a1 + 8);
    BOOL v6 = *(void *)(result + 72) == *(void *)a1 && *(void *)(result + 80) == v5;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v9 = *(void *)(v3 + 88) == v7 && *(void *)(v3 + 96) == v8;
      if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        int v10 = *(_DWORD *)(v3 + 104);
        if (v10 == *(_DWORD *)(a1 + 32))
        {
          sub_1001CFCD8(v4, v5, v7, v8, v10);
          type metadata accessor for MetricDetailViewModel();
          sub_1001DFB40(&qword_1002DB168, (void (*)(uint64_t))type metadata accessor for MetricDetailViewModel);
          ObservableObject<>.objectWillChange.getter();
          ObservableObjectPublisher.send()();
          swift_release();
          *(unsigned char *)(v3 + 33) = 1;
        }
      }
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1001DF534()
{
  uint64_t result = Notification.userInfo.getter();
  if (result)
  {
    uint64_t v1 = result;
    strcpy((char *)&v9, "metricObject");
    BYTE13(v9) = 0;
    HIWORD(v9) = -5120;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v1 + 16) && (unint64_t v2 = sub_1001EB8E0((uint64_t)v6), (v3 & 1) != 0))
    {
      sub_100196D64(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v7);
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_10019816C((uint64_t)v6);
    if (*((void *)&v8 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        long long v9 = v4[0];
        long long v10 = v4[1];
        int v11 = v5;
        sub_1001DF3D4((uint64_t)&v9);
        v4[0] = v9;
        sub_10019CCE4((uint64_t)v4);
        v6[0] = v10;
        return sub_10019CCE4((uint64_t)v6);
      }
    }
    else
    {
      return sub_10016AC24((uint64_t)&v7);
    }
  }
  return result;
}

uint64_t sub_1001DF660(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_1001DF68C(char a1, uint64_t a2)
{
}

uint64_t sub_1001DF6B8(char a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (a1)
  {
    uint64_t v3 = 1;
    a2 = 0;
  }
  else
  {
    uint64_t v3 = 0;
  }
  return a3(v3, a2);
}

void sub_1001DF6F4(char a1, uint64_t a2)
{
}

void sub_1001DF720(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  if (a1)
  {
    if (qword_1002D7A88 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    id v5 = [self defaultCenter];
    id v12 = v5;
    if (qword_1002D7AF8 != -1)
    {
      swift_once();
      id v5 = v12;
    }
    [v5 postNotificationName:static NSNotificationName.dashboardMetricUpdate object:0 userInfo:0];
  }
  else
  {
    if (qword_1002D7A88 != -1) {
      swift_once();
    }
    a5();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100267EF0;
    if (a2)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    sub_100157064((uint64_t *)&unk_1002D9650);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_100181588();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for PersistanceStore()
{
  return self;
}

uint64_t sub_1001DF9C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DF9F8(char a1, uint64_t a2)
{
  return sub_1001DE3C4(a1, a2);
}

uint64_t sub_1001DFA00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001DFA10()
{
  return swift_release();
}

uint64_t sub_1001DFA18()
{
  return sub_1001DF534();
}

uint64_t sub_1001DFA3C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001DFA4C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DFA8C()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001DFAD4(char a1, uint64_t a2)
{
  sub_1001DF1D8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void, uint64_t))(v2 + 32));
}

uint64_t sub_1001DFAF4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001DFB34()
{
  return sub_1001DF30C(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v0 + 24));
}

uint64_t sub_1001DFB40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001DFB88()
{
  unint64_t result = qword_1002DB5C8;
  if (!qword_1002DB5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB5C8);
  }
  return result;
}

uint64_t destroy for MetricNotificationObject()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricNotificationObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MetricNotificationObject(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for DashboardTableItem(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MetricNotificationObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricNotificationObject(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricNotificationObject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricNotificationObject()
{
  return &type metadata for MetricNotificationObject;
}

unint64_t destroy for SLoadableViewState(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s13FTMInternal_418SLoadableViewStateOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for SLoadableViewState(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SLoadableViewState(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SLoadableViewState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SLoadableViewState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_1001E0018(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1001E0030(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SLoadableViewState()
{
  return &type metadata for SLoadableViewState;
}

uint64_t sub_1001E0060(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

unint64_t sub_1001E006C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100157064(&qword_1002DB878);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned int v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1001EB868(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E0188(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100157064(&qword_1002DB840);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned int v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001EB868(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (void *)(v2[7] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E02AC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100157064((uint64_t *)&unk_1002DAE90);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10015D5F4(v6, (uint64_t)v15, &qword_1002DB848);
    unint64_t result = sub_1001EB8E0((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100197FC0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E03F0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100157064((uint64_t *)&unk_1002DAA00);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10015D5F4(v6, (uint64_t)&v15, &qword_1002D96A8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1001EB868(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100197FC0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E0528(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100157064(&qword_1002DB880);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_1001EB868(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E0644(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100157064(&qword_1002DB858);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001EB868(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E0758(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100157064(&qword_1002DB7F8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001EB868(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001E0874(uint64_t a1)
{
  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

Swift::String_optional *databasePath.unsafeMutableAddressor()
{
  if (qword_1002D7B60 != -1) {
    swift_once();
  }
  return &databasePath;
}

uint64_t sub_1001E0904(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  BOOL v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(void *)(v3 + 24);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v13;
  void v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_1001EA5B8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028E460;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
  swift_release();
  return swift_release();
}

uint64_t sub_1001E0BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v24 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v6 + 24);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v17;
  v18[3] = a1;
  uint64_t v19 = v23;
  v18[4] = a2;
  v18[5] = v19;
  uint64_t v20 = v24;
  v18[6] = a6;
  v18[7] = v20;
  unsigned char v18[8] = a4;
  aBlock[4] = sub_1001F087C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028EA00;
  dispatch_group_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v28 = _swiftEmptyArrayStorage;
  sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v26);
  swift_release();
  return swift_release();
}

uint64_t sub_1001E0F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v26 = a3;
  uint64_t v27 = a6;
  int v28 = a5;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v9 + 24);
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = a1;
  uint64_t v21 = v26;
  *(void *)(v20 + 32) = a2;
  *(void *)(v20 + 40) = v21;
  uint64_t v22 = v27;
  *(void *)(v20 + 48) = a4;
  *(void *)(v20 + 56) = v22;
  *(void *)(v20 + 64) = v29;
  *(_DWORD *)(v20 + 72) = v28;
  *(void *)(v20 + 80) = v30;
  *(void *)(v20 + 88) = a9;
  aBlock[4] = sub_100198128;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028E9B0;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v32);
  swift_release();
  return swift_release();
}

uint64_t sub_1001E1250(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1001E12A0(a1, a2, a3, (uint64_t)&unk_10028E5B0, (uint64_t)sub_1001EA8C4, (uint64_t)&unk_10028E5C8);
}

uint64_t sub_1001E1278(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1001E12A0(a1, a2, a3, (uint64_t)&unk_10028E7B8, (uint64_t)sub_1001F0634, (uint64_t)&unk_10028E7D0);
}

uint64_t sub_1001E12A0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v20 = a2;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v6 + 24);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(_DWORD *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 40) = a3;
  aBlock[4] = v21;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = v22;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  swift_release();
  return swift_release();
}

uint64_t sub_1001E158C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v26[0] = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[1] = *(void *)(v3 + 24);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = *(void **)a1;
  uint64_t v14 = *(void **)(a1 + 8);
  uint64_t v15 = *(void **)(a1 + 16);
  uint64_t v16 = *(void **)(a1 + 24);
  uint64_t v17 = swift_allocObject();
  long long v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)a1;
  *(void *)(v17 + 16) = v12;
  *(_OWORD *)(v17 + 40) = v18;
  *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + 32);
  uint64_t v19 = v26[0];
  *(void *)(v17 + 64) = a2;
  *(void *)(v17 + 72) = v19;
  aBlock[4] = sub_1001F0600;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028E6E0;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = v13;
  id v22 = v14;
  id v23 = v15;
  id v24 = v16;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
  swift_release();
  return swift_release();
}

uint64_t sub_1001E18AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[0] = a3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(v4 + 24);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a1;
  uint64_t v17 = v20[0];
  v16[4] = a2;
  v16[5] = v17;
  v16[6] = a4;
  aBlock[4] = sub_1001F0920;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028EA50;
  long long v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v22 = _swiftEmptyArrayStorage;
  sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v21);
  swift_release();
  return swift_release();
}

uint64_t sub_1001E1BB0()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100157064((uint64_t *)&unk_1002DA9E0);
  sub_1001AC110(v4, qword_1002E3290);
  uint64_t v5 = sub_1001A9488(v4, (uint64_t)qword_1002E3290);
  id v6 = [self defaultManager];
  id v14 = 0;
  id v7 = [v6 URLForDirectory:9 inDomain:1 appropriateForURL:0 create:1 error:&v14];

  id v8 = v14;
  if (v7)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = v8;

    (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v3, v0);
    uint64_t v10 = 0;
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v10 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v5, v10, 1, v0);
}

uint64_t Database.rawValue.getter()
{
  return 0x615063697274656DLL;
}

BOOL Database.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10028AA28, v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

Swift::Int sub_1001E1E08()
{
  return Hasher._finalize()();
}

uint64_t sub_1001E1E68()
{
  return String.hash(into:)();
}

Swift::Int sub_1001E1E8C()
{
  return Hasher._finalize()();
}

uint64_t sub_1001E1EE8@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10028AA60, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1001E1F3C(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1001E1F64()
{
  uint64_t v0 = sub_100157064((uint64_t *)&unk_1002DA9E0);
  __chkstk_darwin(v0);
  Swift::String v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002D7B58 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1001A9488(v0, (uint64_t)qword_1002E3290);
  sub_10015D5F4(v7, (uint64_t)v2, (uint64_t *)&unk_1002DA9E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    uint64_t result = sub_10015D658((uint64_t)v2, (uint64_t *)&unk_1002DA9E0);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    URL.appendingPathComponent(_:)();
    id v11 = *(void (**)(char *, uint64_t))(v4 + 8);
    v11(v2, v3);
    uint64_t v9 = URL.relativePath.getter();
    uint64_t v10 = v12;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v6, v3);
  }
  databasePath.value._uint64_t countAndFlagsBits = v9;
  databasePath.value._object = v10;
  return result;
}

unint64_t sub_1001E215C()
{
  unint64_t result = qword_1002DB5D0;
  if (!qword_1002DB5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB5D0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Database(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001E224CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Database()
{
  return &type metadata for Database;
}

ValueMetadata *type metadata accessor for MetricKey()
{
  return &type metadata for MetricKey;
}

unint64_t sub_1001E2298(char a1)
{
  unint64_t result = 0x655463697274656DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614E63697274656DLL;
      break;
    case 2:
    case 4:
      unint64_t result = 0x7475626972747461;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x644963697274656DLL;
      break;
    case 7:
      unint64_t result = 0x657463656C6C6F63;
      break;
    case 8:
      unint64_t result = 0x644973627573;
      break;
    case 9:
      unint64_t result = 0x6C62616870617267;
      break;
    case 10:
      unint64_t result = 0x616D6B6F6F427369;
      break;
    case 11:
      unint64_t result = 0x4E6E6F6974636573;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001E2448(char a1)
{
  unint64_t result = 0x655463697274656DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614E63697274656DLL;
      break;
    case 2:
    case 4:
      unint64_t result = 0x7475626972747461;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x644963697274656DLL;
      break;
    case 7:
      unint64_t result = 0x657463656C6C6F63;
      break;
    case 8:
      unint64_t result = 0x644973627573;
      break;
    case 9:
      unint64_t result = 0x6C62616870617267;
      break;
    case 10:
      unint64_t result = 0x616D6B6F6F427369;
      break;
    case 11:
      unint64_t result = 0x4E6E6F6974636573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001E25F8(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1001E2298(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1001E2298(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1001E2684()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001E2298(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001E26E8()
{
  sub_1001E2298(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001E273C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001E2298(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1001E279C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001EFFE0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001E27CC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001E2298(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1001E27F8()
{
  return sub_1001E2448(*v0);
}

unint64_t sub_1001E2800@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001EFFE0(a1);
  *a2 = result;
  return result;
}

void sub_1001E2828(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1001E2834(uint64_t a1)
{
  unint64_t v2 = sub_1001F0418();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E2870(uint64_t a1)
{
  unint64_t v2 = sub_1001F0418();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E28AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100157064(&qword_1002DB800);
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  char v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Metric(0);
  uint64_t v10 = (int *)__chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v10[14];
  v12[v13] = 0;
  uint64_t v14 = v10[15];
  v12[v14] = 0;
  uint64_t v15 = &v12[v10[16]];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  unint64_t v49 = v15;
  uint64_t v50 = v10;
  uint64_t v16 = a1[3];
  uint64_t v48 = a1;
  sub_10015714C(a1, v16);
  sub_1001F0418();
  uint64_t v44 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    unint64_t v51 = v2;
    sub_100157190((uint64_t)v48);
    LODWORD(v50) = 0;
    return swift_bridgeObjectRelease();
  }
  uint64_t v40 = v14;
  uint64_t v41 = v13;
  unint64_t v51 = v6;
  uint64_t v17 = v43;
  UUID.init()();
  char v63 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v21 = v50;
  *(void *)&v12[v50[5]] = v20;
  char v62 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&v12[v21[6]] = v22;
  char v61 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&v12[v21[7]] = v23;
  char v60 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&v12[v21[8]] = v24;
  char v59 = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&v12[v21[9]] = v25;
  char v58 = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&v12[v21[10]] = v26;
  char v57 = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&v12[v21[12]] = v27;
  char v56 = 7;
  sub_1001F0890(&qword_1002DB810, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v28 = v51;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v12[v21[11]], v28, v47);
  char v55 = 8;
  *(_DWORD *)&v12[v21[13]] = KeyedDecodingContainer.decode(_:forKey:)();
  char v54 = 9;
  char v29 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v51 = 0;
  v12[v41] = v29 & 1;
  char v53 = 10;
  uint64_t v30 = v51;
  char v31 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v51 = v30;
  if (v30
    || (v12[v40] = v31 & 1, v52 = 11, uint64_t v32 = v51, v33 = KeyedDecodingContainer.decode(_:forKey:)(), (v51 = v32) != 0))
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v44, v45);
    id v35 = v50;
    sub_100157190((uint64_t)v48);
    LODWORD(v50) = 1;
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v12, v19);

    (*(void (**)(char *, uint64_t))(v46 + 8))(&v12[v35[11]], v47);
    if (v50) {

    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v36 = v33;
  uint64_t v37 = v34;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v44, v45);
  uint64_t v38 = v49;
  swift_bridgeObjectRelease();
  void *v38 = v36;
  v38[1] = v37;
  sub_1001F046C((uint64_t)v12, v42, type metadata accessor for Metric);
  sub_100157190((uint64_t)v48);
  return sub_1001F04D4((uint64_t)v12, type metadata accessor for Metric);
}

uint64_t sub_1001E30DC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100157064(&qword_1002DB818);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10015714C(a1, a1[3]);
  sub_1001F0418();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = type metadata accessor for Metric(0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    LOBYTE(v12) = 7;
    type metadata accessor for Date();
    sub_1001F0890(&qword_1002DB820, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 64));
    v11[15] = 11;
    sub_100157064((uint64_t *)&unk_1002D9650);
    sub_1001F0534();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_1001E350C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E28AC(a1, a2);
}

uint64_t sub_1001E3524(void *a1)
{
  return sub_1001E30DC(a1);
}

uint64_t sub_1001E353C(sqlite3 *a1)
{
  uint64_t v17 = a1;
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  uint64_t v19 = (void *)0xD00000000000001BLL;
  unint64_t v20 = 0x800000010023F350;
  UUID.init()();
  sub_1001F0890(&qword_1002DB850, (void (*)(uint64_t))&type metadata accessor for UUID);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = &_swiftEmptyArrayStorage;
  sub_1001F0890(&qword_1002D9EB0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100157064(&qword_1002D9EB8);
  sub_1001A53A0((unint64_t *)&unk_1002D9EC0, &qword_1002D9EB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v16);
  uint64_t v11 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v12 = v18;
  *(void *)(v18 + 24) = v11;
  uint64_t v13 = v17;
  *(void *)(v12 + 16) = v17;
  sqlite3_exec(v13, "PRAGMA journal_mode=WAL;", 0, 0, 0);
  return v12;
}

uint64_t sub_1001E38D4()
{
  sqlite3_close(*(sqlite3 **)(v0 + 16));

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for SQLiteDatabase()
{
  return self;
}

sqlite3_stmt *sub_1001E3938()
{
  uint64_t v9 = 0;
  uint64_t v1 = *(sqlite3 **)(v0 + 16);
  uint64_t v2 = String.utf8CString.getter();
  int v3 = sqlite3_prepare_v2(v1, (const char *)(v2 + 32), -1, &v9, 0);
  swift_release();
  if (!v3) {
    return v9;
  }
  if (sqlite3_errmsg(v1))
  {
    uint64_t v4 = String.init(cString:)();
    unint64_t v6 = v5;
  }
  else
  {
    unint64_t v6 = 0x800000010023F2D0;
    uint64_t v4 = 0xD000000000000026;
  }
  sub_1001EA9C4();
  swift_allocError();
  *(void *)uint64_t v8 = v4;
  *(void *)(v8 + 8) = v6;
  *(unsigned char *)(v8 + 16) = 1;
  return (sqlite3_stmt *)swift_willThrow();
}

uint64_t *sub_1001E3A40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    Swift::String v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *Swift::String v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001E3B28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E3BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  Swift::String v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001E3C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001E3CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_1001E3D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001E3E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E3E34);
}

uint64_t sub_1001E3E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001E3EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E3F0C);
}

uint64_t sub_1001E3F0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MetricSectional(uint64_t a1)
{
  return sub_1001EA8F4(a1, qword_1002DB6E8);
}

uint64_t sub_1001E3FEC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void destroy for DashboardTableItem(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for DashboardTableItem(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  int v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  return a1;
}

uint64_t assignWithCopy for DashboardTableItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  int v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 16);
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  uint64_t v13 = *(void **)(a2 + 24);
  uint64_t v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  id v15 = v13;

  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for DashboardTableItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  int v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DashboardTableItem(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DashboardTableItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DashboardTableItem()
{
  return &type metadata for DashboardTableItem;
}

void *sub_1001E42B4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v37 = *a2;
    *a1 = *a2;
    a1 = (void *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    id v10 = *(void **)((char *)a2 + v8);
    *(void *)((char *)a1 + v8) = v10;
    uint64_t v11 = *(void **)((char *)a2 + v9);
    *(void *)((char *)a1 + v9) = v11;
    uint64_t v12 = a3[7];
    uint64_t v13 = a3[8];
    uint64_t v14 = *(void **)((char *)a2 + v12);
    *(void *)((char *)a1 + v12) = v14;
    id v15 = *(void **)((char *)a2 + v13);
    *(void *)((char *)a1 + v13) = v15;
    uint64_t v16 = a3[9];
    uint64_t v17 = a3[10];
    uint64_t v18 = *(void **)((char *)a2 + v16);
    *(void *)((char *)a1 + v16) = v18;
    uint64_t v19 = *(void **)((char *)a2 + v17);
    *(void *)((char *)a1 + v17) = v19;
    uint64_t v20 = a3[11];
    uint64_t v40 = (char *)a2 + v20;
    uint64_t v41 = (char *)a1 + v20;
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
    id v22 = v10;
    id v23 = v11;
    id v24 = v14;
    id v25 = v15;
    id v26 = v18;
    id v27 = v19;
    v39(v41, v40, v21);
    uint64_t v28 = a3[12];
    uint64_t v29 = a3[13];
    uint64_t v30 = *(void **)((char *)a2 + v28);
    *(void *)((char *)a1 + v28) = v30;
    *(_DWORD *)((char *)a1 + v29) = *(_DWORD *)((char *)a2 + v29);
    uint64_t v31 = a3[15];
    *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    *((unsigned char *)a1 + v31) = *((unsigned char *)a2 + v31);
    uint64_t v32 = a3[16];
    uint64_t v33 = (void *)((char *)a1 + v32);
    uint64_t v34 = (void *)((char *)a2 + v32);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    id v36 = v30;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001E4480(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  uint64_t v5 = a1 + a2[11];
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E4594(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  id v10 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = *(void **)(a2 + v11);
  *(void *)(a1 + v11) = v13;
  uint64_t v14 = *(void **)(a2 + v12);
  *(void *)(a1 + v12) = v14;
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  uint64_t v18 = *(void **)(a2 + v16);
  *(void *)(a1 + v16) = v18;
  uint64_t v19 = a3[11];
  uint64_t v38 = a2 + v19;
  uint64_t v39 = a1 + v19;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
  id v21 = v9;
  id v22 = v10;
  id v23 = v13;
  id v24 = v14;
  id v25 = v17;
  id v26 = v18;
  v37(v39, v38, v20);
  uint64_t v27 = a3[12];
  uint64_t v28 = a3[13];
  uint64_t v29 = *(void **)(a2 + v27);
  *(void *)(a1 + v27) = v29;
  *(_DWORD *)(a1 + v28) = *(_DWORD *)(a2 + v28);
  uint64_t v30 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  uint64_t v31 = a3[16];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  id v35 = v29;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001E4710(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[6];
  uint64_t v12 = *(void **)(a2 + v11);
  uint64_t v13 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  id v14 = v12;

  uint64_t v15 = a3[7];
  uint64_t v16 = *(void **)(a2 + v15);
  uint64_t v17 = *(void **)(a1 + v15);
  *(void *)(a1 + v15) = v16;
  id v18 = v16;

  uint64_t v19 = a3[8];
  uint64_t v20 = *(void **)(a2 + v19);
  id v21 = *(void **)(a1 + v19);
  *(void *)(a1 + v19) = v20;
  id v22 = v20;

  uint64_t v23 = a3[9];
  id v24 = *(void **)(a2 + v23);
  id v25 = *(void **)(a1 + v23);
  *(void *)(a1 + v23) = v24;
  id v26 = v24;

  uint64_t v27 = a3[10];
  uint64_t v28 = *(void **)(a2 + v27);
  uint64_t v29 = *(void **)(a1 + v27);
  *(void *)(a1 + v27) = v28;
  id v30 = v28;

  uint64_t v31 = a3[11];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  uint64_t v34 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 24))(v32, v33, v34);
  uint64_t v35 = a3[12];
  id v36 = *(void **)(a2 + v35);
  uint64_t v37 = *(void **)(a1 + v35);
  *(void *)(a1 + v35) = v36;
  id v38 = v36;

  *(_DWORD *)(a1 + a3[13]) = *(_DWORD *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v39 = a3[16];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  *uint64_t v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001E48C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(_DWORD *)(a1 + v14) = *(_DWORD *)(a2 + v14);
  uint64_t v15 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_1001E49F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[6];
  uint64_t v10 = *(void **)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);

  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  uint64_t v13 = a3[8];
  uint64_t v14 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);

  uint64_t v15 = a3[9];
  uint64_t v16 = *(void **)(a1 + v15);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);

  uint64_t v17 = a3[10];
  id v18 = *(void **)(a1 + v17);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);

  uint64_t v19 = a3[11];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v23 = a3[12];
  id v24 = *(void **)(a1 + v23);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);

  uint64_t v25 = a3[14];
  *(_DWORD *)(a1 + a3[13]) = *(_DWORD *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  uint64_t v26 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001E4B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E4B90);
}

uint64_t sub_1001E4B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 44);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1001E4CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E4CD0);
}

uint64_t sub_1001E4CD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 44);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for Metric(uint64_t a1)
{
  return sub_1001EA8F4(a1, qword_1002DB780);
}

uint64_t sub_1001E4E1C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AttributeDetailTimeFrame(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E4FECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeDetailTimeFrame()
{
  return &type metadata for AttributeDetailTimeFrame;
}

unint64_t sub_1001E5028()
{
  unint64_t result = qword_1002DB7E8;
  if (!qword_1002DB7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB7E8);
  }
  return result;
}

uint64_t sub_1001E507C()
{
  return sub_1001F0890((unint64_t *)&qword_1002D8410, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_1001E50C4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

const char *sub_1001E50FC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    unint64_t v10 = sub_1001E3938();
    swift_release();
  }
  else
  {
    unint64_t v10 = 0;
  }
  if (sqlite3_step(v10) == 101)
  {
    if (qword_1002D7AB8 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_100267EF0;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_100181588();
    *(void *)(v11 + 32) = a6;
    *(void *)(v11 + 40) = a7;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    a4(1, 0);
    return (const char *)sqlite3_finalize(v10);
  }
  unint64_t result = sqlite3_errmsg(v10);
  if (result)
  {
    uint64_t v13 = String.init(cString:)();
    uint64_t v15 = v14;
    if (qword_1002D7AB8 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_100267EF0;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_100181588();
    *(void *)(v16 + 32) = v13;
    *(void *)(v16 + 40) = v15;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    sub_1001EA9C4();
    uint64_t v17 = swift_allocError();
    *(void *)uint64_t v18 = v13;
    *(void *)(v18 + 8) = v15;
    *(unsigned char *)(v18 + 16) = 1;
    a4(0, v17);
    swift_errorRelease();
    return (const char *)sqlite3_finalize(v10);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E54B8(uint64_t a1, int a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  uint64_t v85 = a4;
  unint64_t v84 = a3;
  uint64_t v83 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v80 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DispatchQoS();
  uint64_t v79 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v78 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  unint64_t v88 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MetricList(0);
  uint64_t v97 = *(void *)(v10 - 8);
  uint64_t v98 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v77 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v76 - v13);
  uint64_t v96 = type metadata accessor for Locale();
  uint64_t v91 = *(void (***)(char *, uint64_t))(v96 - 8);
  __chkstk_darwin(v96);
  char v95 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100157064(&qword_1002D8210);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v94 = (uint64_t)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v92 = (char *)&v76 - v20;
  __chkstk_darwin(v19);
  uint64_t v101 = (uint64_t)&v76 - v21;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1001E0758((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  Swift::String aBlock = 0;
  unint64_t v103 = 0xE000000000000000;
  _StringGuts.grow(_:)(186);
  v23._uint64_t countAndFlagsBits = 0xD00000000000006ELL;
  v23._object = (void *)0x800000010023EF40;
  String.append(_:)(v23);
  int v108 = a2;
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
  v25._object = (void *)0x800000010023EFB0;
  String.append(_:)(v25);
  uint64_t v26 = sub_1001E3938();
  uint64_t v99 = v7;
  BOOL v93 = v9;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v28 = &xmmword_100268000;
  if (sqlite3_step(v27) != 100)
  {
LABEL_25:
    sub_100167598(0, (unint64_t *)&qword_1002D95F0);
    unint64_t v66 = (void *)static OS_dispatch_queue.main.getter();
    unint64_t v67 = (void *)swift_allocObject();
    uint64_t v68 = v85;
    v67[2] = v84;
    v67[3] = v68;
    v67[4] = v22;
    uint64_t v106 = sub_1001EA9B8;
    uint64_t v107 = v67;
    Swift::String aBlock = _NSConcreteStackBlock;
    unint64_t v103 = *((void *)v28 + 127);
    uint64_t v104 = sub_1001E0068;
    uint64_t v105 = &unk_10028E690;
    uint64_t v69 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    unsigned __int8 v70 = v78;
    static DispatchQoS.unspecified.getter();
    Swift::String aBlock = (void **)_swiftEmptyArrayStorage;
    sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100157064((uint64_t *)&unk_1002D9600);
    sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
    Swift::Int v71 = v80;
    uint64_t v72 = v83;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v69);

    (*(void (**)(char *, uint64_t))(v82 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v70, v81);
    goto LABEL_27;
  }
  ++v91;
  uint64_t v90 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56);
  uint64_t v89 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  uint64_t v29 = (void (**)(char *, char *, uint64_t))(v88 + 32);
  unint64_t v88 = 0x800000010023B7B0;
  long long v86 = xmmword_100267EF0;
  BOOL v100 = v27;
  uint64_t v87 = v22;
  while (sqlite3_column_text(v27, 0) && sqlite3_column_text(v27, 1) && sqlite3_column_text(v27, 2))
  {
    uint64_t v30 = v14;
    uint64_t v31 = (void (**)(char *, uint64_t, uint64_t))v29;
    uint64_t v32 = String.init(cString:)();
    uint64_t v34 = v33;
    String.init(cString:)();
    id v35 = [objc_allocWithZone((Class)NSDateFormatter) init];
    NSString v36 = String._bridgeToObjectiveC()();
    [v35 setDateFormat:v36];

    uint64_t v37 = v95;
    static Locale.current.getter();
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    (*v91)(v37, v96);
    [v35 setLocale:isa];

    NSString v39 = String._bridgeToObjectiveC()();
    id v40 = [v35 dateFromString:v39];

    if (v40)
    {
      uint64_t v41 = v92;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v42 = 0;
      id v35 = v40;
    }
    else
    {
      uint64_t v42 = 1;
      uint64_t v41 = v92;
    }
    uint64_t v43 = v93;

    uint64_t v44 = v99;
    (*v90)(v41, v42, 1, v99);
    uint64_t v45 = (uint64_t)v41;
    uint64_t v46 = v101;
    sub_1001EAA18(v45, v101);
    swift_bridgeObjectRelease();
    uint64_t v47 = String.init(cString:)();
    uint64_t v49 = v48;
    uint64_t v50 = v94;
    sub_10015D5F4(v46, v94, &qword_1002D8210);
    if ((*v89)(v50, 1, v44) == 1)
    {
      Date.init()();
      sub_10015D658(v50, &qword_1002D8210);
      uint64_t v29 = (void (**)(char *, char *, uint64_t))v31;
    }
    else
    {
      uint64_t v29 = (void (**)(char *, char *, uint64_t))v31;
      (*v31)(v43, v50, v44);
    }
    int v51 = sqlite3_column_int(v100, 3);
    uint64_t v14 = v30;
    *uint64_t v30 = v47;
    v30[1] = v49;
    uint64_t v52 = v98;
    (*v29)((char *)v30 + *(int *)(v98 + 20), v43, v44);
    *(_DWORD *)((char *)v30 + *(int *)(v52 + 24)) = v51;
    uint64_t v22 = v87;
    uint64_t v53 = v32;
    if (*(void *)(*(void *)(v87 + 16) + 16))
    {
      swift_bridgeObjectRetain();
      sub_1001EB868(v32, v34);
      char v55 = v54;
      swift_bridgeObjectRelease();
      if (v55)
      {
        uint64_t v56 = *(void *)(v22 + 16);
        if (*(void *)(v56 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v57 = sub_1001EB868(v32, v34);
          if (v58)
          {
            uint64_t v59 = *(void *)(*(void *)(v56 + 56) + 8 * v57);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_1001F046C((uint64_t)v14, v77, type metadata accessor for MetricList);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v59 = sub_1001EB5A4(0, *(void *)(v59 + 16) + 1, 1, v59, &qword_1002DA748, type metadata accessor for MetricList, type metadata accessor for MetricList);
            }
            uint64_t v27 = v100;
            unint64_t v61 = *(void *)(v59 + 16);
            unint64_t v60 = *(void *)(v59 + 24);
            if (v61 >= v60 >> 1) {
              uint64_t v59 = sub_1001EB5A4(v60 > 1, v61 + 1, 1, v59, &qword_1002DA748, type metadata accessor for MetricList, type metadata accessor for MetricList);
            }
            *(void *)(v59 + 16) = v61 + 1;
            sub_1001F076C(v77, v59+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(void *)(v97 + 72) * v61, type metadata accessor for MetricList);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            Swift::String aBlock = *(void ***)(v22 + 16);
            *(void *)(v22 + 16) = 0x8000000000000000;
            sub_1001ED9CC(v59, v53, v34, isUniquelyReferenced_nonNull_native);
            *(void *)(v22 + 16) = aBlock;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_24;
          }
          swift_bridgeObjectRelease();
        }
      }
    }
    sub_100157064(&qword_1002DA748);
    unint64_t v63 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
    uint64_t v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = v86;
    sub_1001F046C((uint64_t)v14, v64 + v63, type metadata accessor for MetricList);
    char v65 = swift_isUniquelyReferenced_nonNull_native();
    Swift::String aBlock = *(void ***)(v22 + 16);
    *(void *)(v22 + 16) = 0x8000000000000000;
    sub_1001ED9CC(v64, v32, v34, v65);
    *(void *)(v22 + 16) = aBlock;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = v100;
LABEL_24:
    sub_1001F04D4((uint64_t)v14, type metadata accessor for MetricList);
    sub_10015D658(v101, &qword_1002D8210);
    uint64_t v28 = &xmmword_100268000;
    if (sqlite3_step(v27) != 100) {
      goto LABEL_25;
    }
  }
  sub_1001EA9C4();
  uint64_t v73 = swift_allocError();
  *(void *)uint64_t v74 = 0;
  *(void *)(v74 + 8) = 0;
  *(unsigned char *)(v74 + 16) = 4;
  v84(0, v73);
  swift_errorRelease();
LABEL_27:
  sqlite3_finalize(v27);
  return swift_release();
}

uint64_t sub_1001E63D8(void (*a1)(uint64_t, void))
{
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  a1(v2, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E6444(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7, uint64_t a8, void (*a9)(void, uint64_t), uint64_t a10)
{
  uint64_t v113 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for DispatchQoS();
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  int v108 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for UUID();
  uint64_t v130 = *(void **)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v136 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = (int *)type metadata accessor for Metric(0);
  uint64_t v106 = *((void *)v107 - 1);
  uint64_t v19 = __chkstk_darwin(v107);
  uint64_t v133 = (uint64_t)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v132 = (uint64_t)&v95 - v21;
  uint64_t v137 = type metadata accessor for Date();
  uint64_t v129 = *(void (***)(void, void))(v137 - 8);
  uint64_t v22 = __chkstk_darwin(v137);
  Swift::Int v131 = (char *)&v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  Swift::String v25 = (char *)&v95 - v24;
  uint64_t v26 = sub_100157064(&qword_1002D8210);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v114 = (uint64_t)&v95 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v135 = (uint64_t)&v95 - v29;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v31 = Strong;
    uint64_t v116 = a10;
    unsigned __int8 v115 = a9;
    uint64_t v32 = swift_allocObject();
    uint64_t v96 = v32;
    *(void *)(v32 + 16) = 0;
    uint64_t v33 = (sqlite3_stmt **)(v32 + 16);
    sub_1001F002C(a2, a3, a4, a5, a6, a7);
    uint64_t v34 = sub_1001E3938();
    uint64_t v105 = 0;
    id v35 = v34;
    swift_bridgeObjectRelease();
    *uint64_t v33 = v35;
    NSString v36 = v33;
    int v37 = sqlite3_step(v35);
    id v38 = _swiftEmptyArrayStorage;
    unsigned __int8 v128 = v33;
    if (v37 == 100)
    {
      uint64_t v104 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 6);
      uint64_t v101 = (void (**)(char *, uint64_t, uint64_t))(v129 + 4);
      BOOL v100 = (void (**)(char *, char *, uint64_t))(v129 + 2);
      uint64_t v99 = (void (**)(uint64_t, char *, uint64_t))(v130 + 2);
      ++v129;
      uint64_t v98 = (void (**)(char *, uint64_t))(v130 + 1);
      long long v97 = xmmword_100269B60;
      uint64_t v103 = v31;
      uint64_t v102 = v25;
      while (1)
      {
        uint64_t v130 = v38;
        sqlite3_column_int(*v36, 0);
        if (!sqlite3_column_text(*v36, 1)
          || !sqlite3_column_text(*v36, 2)
          || !sqlite3_column_text(*v36, 3)
          || !sqlite3_column_text(*v36, 4)
          || !sqlite3_column_text(*v36, 5)
          || !sqlite3_column_text(*v36, 7)
          || !sqlite3_column_text(*v36, 9))
        {
          swift_bridgeObjectRelease();
          sub_100167598(0, (unint64_t *)&qword_1002D95F0);
          uint64_t v85 = (void *)static OS_dispatch_queue.main.getter();
          uint64_t v86 = swift_allocObject();
          uint64_t v87 = v116;
          *(void *)(v86 + 16) = v115;
          *(void *)(v86 + 24) = v87;
          uint64_t v145 = sub_1001F0764;
          uint64_t v146 = (void *)v86;
          aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
          aBlock._object = (void *)1107296256;
          uint64_t v143 = sub_1001E0068;
          char v144 = &unk_10028E960;
          unint64_t v88 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          uint64_t v89 = v108;
          static DispatchQoS.unspecified.getter();
          aBlock._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
          sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_100157064((uint64_t *)&unk_1002D9600);
          sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
          uint64_t v90 = v109;
          uint64_t v91 = v113;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v88);

          (*(void (**)(char *, uint64_t))(v112 + 8))(v90, v91);
          (*(void (**)(char *, uint64_t))(v110 + 8))(v89, v111);
          goto LABEL_28;
        }
        String.init(cString:)();
        NSString v39 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v40 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v41 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v42 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        LODWORD(v126) = sqlite3_column_int(*v36, 6);
        String.init(cString:)();
        id v127 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        uint64_t v44 = v135;
        sub_100180728(v135);
        swift_bridgeObjectRelease();
        int v125 = sqlite3_column_int(*v36, 8);
        uint64_t v45 = v114;
        sub_10015D5F4(v44, v114, &qword_1002D8210);
        uint64_t v46 = v137;
        if ((*v104)(v45, 1, v137) == 1) {
          break;
        }
        NSString v122 = v43;
        NSString v123 = v40;
        (*v101)(v25, v45, v46);
        UUID.init()();
        NSString v120 = v41;
        Swift::String v47 = String.init(_:)(v120);
        id v48 = [self mainBundle];
        v49.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
        v49.value._object = (void *)0xEB00000000656C62;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v47, v49, (NSBundle)v48, v47, v47);
        swift_bridgeObjectRelease();

        NSString v119 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v121 = v42;
        Swift::String v50 = String.init(_:)(v121);
        if (qword_1002D7A68 != -1) {
          swift_once();
        }
        NSString v124 = v39;
        uint64_t v51 = qword_1002E3120;
        uint64_t v52 = *(void *)(qword_1002E3120 + 16);
        if (v52)
        {
          swift_bridgeObjectRetain();
          sub_1001571E0();
          uint64_t v53 = (uint64_t *)(v51 + 40);
          while (1)
          {
            uint64_t v55 = *(v53 - 1);
            uint64_t v54 = *v53;
            Swift::String aBlock = v50;
            uint64_t v140 = v55;
            uint64_t v141 = v54;
            swift_bridgeObjectRetain();
            if (StringProtocol.contains<A>(_:)()) {
              break;
            }
            v53 += 2;
            swift_bridgeObjectRelease();
            if (!--v52)
            {
              uint64_t v56 = v25;
              swift_bridgeObjectRelease();
              goto LABEL_21;
            }
          }
          uint64_t v56 = v25;
          swift_bridgeObjectRelease();
          Swift::String aBlock = v50;
          uint64_t v140 = v55;
          uint64_t v141 = v54;
          uint64_t v138 = 0;
          unint64_t v139 = 0xE000000000000000;
          StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v56 = v25;
        }
LABEL_21:
        NSString v57 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v58 = *v100;
        uint64_t v59 = v131;
        (*v100)(v131, v56, v137);
        LODWORD(v126) = v126 == 1;
        unint64_t v60 = v107;
        uint64_t v117 = v107[14];
        uint64_t v118 = v107[15];
        uint64_t v61 = v132;
        char v62 = (void *)(v132 + v107[16]);
        *char v62 = 0;
        v62[1] = 0;
        (*v99)(v61, v136, v134);
        unint64_t v63 = v124;
        *(void *)(v61 + v60[5]) = v124;
        uint64_t v64 = v123;
        *(void *)(v61 + v60[6]) = v123;
        *(void *)(v61 + v60[7]) = v119;
        NSString v65 = v120;
        *(void *)(v61 + v60[8]) = v120;
        *(void *)(v61 + v60[9]) = v57;
        unint64_t v66 = v122;
        *(void *)(v61 + v60[10]) = v122;
        unint64_t v67 = v59;
        uint64_t v68 = v137;
        v58((char *)(v61 + v60[11]), v67, v137);
        id v69 = v127;
        *(void *)(v61 + v60[12]) = v127;
        *(_DWORD *)(v61 + v60[13]) = v125;
        *(unsigned char *)(v61 + v117) = (_BYTE)v126;
        *(unsigned char *)(v61 + v118) = 0;
        unsigned __int8 v70 = (void (*)(char *, uint64_t))*v129;
        id v126 = v65;
        id v71 = v63;
        id v72 = v64;
        id v73 = v66;
        id v74 = v69;
        v70(v131, v68);
        (*v98)(v136, v134);
        swift_bridgeObjectRelease();
        *(_OWORD *)char v62 = v97;
        sub_1001F046C(v61, v133, type metadata accessor for Metric);
        id v38 = v130;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v38 = (void *)sub_1001EB5A4(0, v38[2] + 1, 1, (unint64_t)v38, &qword_1002DA788, type metadata accessor for Metric, type metadata accessor for Metric);
        }
        NSString v36 = v128;
        unint64_t v76 = v38[2];
        unint64_t v75 = v38[3];
        Swift::String v25 = v102;
        if (v76 >= v75 >> 1) {
          id v38 = (void *)sub_1001EB5A4(v75 > 1, v76 + 1, 1, (unint64_t)v38, &qword_1002DA788, type metadata accessor for Metric, type metadata accessor for Metric);
        }
        _OWORD v38[2] = v76 + 1;
        sub_1001F076C(v133, (uint64_t)v38+ ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))+ *(void *)(v106 + 72) * v76, type metadata accessor for Metric);

        sub_1001F04D4(v132, type metadata accessor for Metric);
        v70(v25, v137);
        sub_10015D658(v135, &qword_1002D8210);
        if (sqlite3_step(*v36) != 100) {
          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
      sub_10015D658(v45, &qword_1002D8210);
      sub_1001EA9C4();
      uint64_t v93 = swift_allocError();
      *(void *)uint64_t v94 = 0;
      *(void *)(v94 + 8) = 0;
      *(unsigned char *)(v94 + 16) = 4;
      v115(0, v93);
      swift_errorRelease();

      sub_10015D658(v135, &qword_1002D8210);
LABEL_28:
      uint64_t v80 = v96;
    }
    else
    {
LABEL_26:
      sub_100167598(0, (unint64_t *)&qword_1002D95F0);
      uint64_t v77 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v78 = (void *)swift_allocObject();
      uint64_t v79 = v115;
      _OWORD v78[2] = v38;
      v78[3] = v79;
      uint64_t v80 = v96;
      v78[4] = v116;
      v78[5] = v80;
      uint64_t v145 = sub_1001F06E8;
      uint64_t v146 = v78;
      aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
      aBlock._object = (void *)1107296256;
      uint64_t v143 = sub_1001E0068;
      char v144 = &unk_10028E910;
      uint64_t v81 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      uint64_t v82 = v108;
      static DispatchQoS.unspecified.getter();
      aBlock._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100157064((uint64_t *)&unk_1002D9600);
      sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
      uint64_t v83 = v109;
      uint64_t v84 = v113;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v81);

      (*(void (**)(char *, uint64_t))(v112 + 8))(v83, v84);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v82, v111);
    }
    swift_beginAccess();
    sqlite3_finalize(*(sqlite3_stmt **)(v80 + 16));
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001E782C(void (*a1)(void, uint64_t))
{
  sub_1001EA9C4();
  uint64_t v2 = swift_allocError();
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 16) = 4;
  a1(0, v2);

  return swift_errorRelease();
}

uint64_t sub_1001E78A8(uint64_t a1, uint64_t a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  uint64_t v84 = a4;
  uint64_t v83 = a3;
  uint64_t v73 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  unsigned __int8 v70 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for DispatchQoS();
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v68 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v99 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = (int *)type metadata accessor for Metric(0);
  uint64_t v86 = *((void *)v87 - 1);
  uint64_t v8 = __chkstk_darwin(v87);
  uint64_t v98 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v97 = (uint64_t)&v67 - v10;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v85 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v96 = (char *)&v67 - v15;
  uint64_t v16 = sub_100157064(&qword_1002D8210);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v100 = (uint64_t)&v67 - v20;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v22 = Strong;
    uint64_t v23 = sub_1001E3938();
    uint64_t v67 = v22;
    uint64_t v89 = v19;
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    Swift::String v25 = &_swiftEmptyArrayStorage;
    if (sqlite3_step(v24) == 100)
    {
      uint64_t v82 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
      uint64_t v80 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
      uint64_t v79 = (void (**)(char *, char *, uint64_t))(v12 + 16);
      uint64_t v78 = (void (**)(uint64_t, char *, uint64_t))(v6 + 16);
      unint64_t v76 = (void (**)(char *, uint64_t))(v6 + 8);
      long long v75 = xmmword_100269B60;
      uint64_t v81 = v24;
      uint64_t v77 = (void (**)(char *, uint64_t))(v12 + 8);
      uint64_t v74 = v11;
      while (1)
      {
        if (!sqlite3_column_text(v24, 0)
          || !sqlite3_column_text(v24, 1)
          || !sqlite3_column_text(v24, 2)
          || !sqlite3_column_text(v24, 3)
          || !sqlite3_column_text(v24, 5)
          || !sqlite3_column_text(v24, 6))
        {
          swift_bridgeObjectRelease();
          sub_1001EA9C4();
          uint64_t v63 = swift_allocError();
          *(void *)uint64_t v64 = 0;
          *(void *)(v64 + 8) = 0;
          *(unsigned char *)(v64 + 16) = 4;
          v83(0, v63);
          swift_release();
          return swift_errorRelease();
        }
        uint64_t v95 = v25;
        String.init(cString:)();
        NSString v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v28 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        int v94 = sqlite3_column_int(v24, 4);
        String.init(cString:)();
        NSString v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        uint64_t v31 = v100;
        sub_100180728(v100);
        swift_bridgeObjectRelease();
        uint64_t v32 = (uint64_t)v89;
        sub_10015D5F4(v31, (uint64_t)v89, &qword_1002D8210);
        if ((*v82)(v32, 1, v11) == 1) {
          break;
        }
        uint64_t v33 = v96;
        (*v80)(v96, v32, v11);
        uint64_t v34 = v99;
        UUID.init()();
        id v103 = v26;
        id v102 = v27;
        id v35 = v28;
        Swift::String v36 = String.init(_:)(v35);
        id v37 = [self mainBundle];
        v38.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
        v38.value._object = (void *)0xEB00000000656C62;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v36, v38, (NSBundle)v37, v36, v36);
        swift_bridgeObjectRelease();

        id v93 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        sub_100167598(0, (unint64_t *)&unk_1002DAE40);
        id v101 = v35;
        id v39 = v29;
        uint64_t v90 = NSString.init(stringLiteral:)();
        NSString v40 = *v79;
        NSString v41 = v85;
        uint64_t v42 = v74;
        (*v79)(v85, v33, v74);
        NSString v43 = v87;
        uint64_t v92 = v87[14];
        uint64_t v91 = v87[15];
        uint64_t v44 = v30;
        uint64_t v45 = v97;
        uint64_t v46 = (void *)(v97 + v87[16]);
        *uint64_t v46 = 0;
        v46[1] = 0;
        Swift::String v47 = v34;
        uint64_t v11 = v42;
        uint64_t v48 = v88;
        (*v78)(v45, v47, v88);
        *(void *)(v45 + v43[5]) = v103;
        *(void *)(v45 + v43[6]) = v102;
        *(void *)(v45 + v43[7]) = v93;
        *(void *)(v45 + v43[8]) = v101;
        uint64_t v49 = v43[9];
        id v93 = v39;
        *(void *)(v45 + v49) = v39;
        *(void *)(v45 + v43[10]) = v90;
        v40((char *)(v45 + v43[11]), v41, v11);
        *(void *)(v45 + v43[12]) = v44;
        *(_DWORD *)(v45 + v43[13]) = v94;
        *(unsigned char *)(v45 + v92) = 0;
        *(unsigned char *)(v45 + v91) = 0;
        Swift::String v50 = *v77;
        id v51 = v44;
        v50(v41, v11);
        (*v76)(v99, v48);
        swift_bridgeObjectRelease();
        *(_OWORD *)uint64_t v46 = v75;
        sub_1001F046C(v45, v98, type metadata accessor for Metric);
        Swift::String v25 = v95;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v25 = (void *)sub_1001EB5A4(0, v25[2] + 1, 1, (unint64_t)v25, &qword_1002DA788, type metadata accessor for Metric, type metadata accessor for Metric);
        }
        unint64_t v53 = v25[2];
        unint64_t v52 = v25[3];
        if (v53 >= v52 >> 1) {
          Swift::String v25 = (void *)sub_1001EB5A4(v52 > 1, v53 + 1, 1, (unint64_t)v25, &qword_1002DA788, type metadata accessor for Metric, type metadata accessor for Metric);
        }
        uint64_t v54 = v103;
        _OWORD v25[2] = v53 + 1;
        sub_1001F076C(v98, (uint64_t)v25+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v53, type metadata accessor for Metric);

        sub_1001F04D4(v97, type metadata accessor for Metric);
        v50(v96, v11);
        sub_10015D658(v100, &qword_1002D8210);
        uint64_t v24 = v81;
        if (sqlite3_step(v81) != 100) {
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease();
      sub_10015D658(v32, &qword_1002D8210);
      sub_1001EA9C4();
      uint64_t v65 = swift_allocError();
      *(void *)uint64_t v66 = 0;
      *(void *)(v66 + 8) = 0;
      *(unsigned char *)(v66 + 16) = 4;
      v83(0, v65);
      swift_errorRelease();

      swift_release();
      return sub_10015D658(v100, &qword_1002D8210);
    }
    else
    {
LABEL_16:
      sub_100167598(0, (unint64_t *)&qword_1002D95F0);
      uint64_t v55 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v56 = (void *)swift_allocObject();
      uint64_t v57 = v84;
      v56[2] = v83;
      v56[3] = v57;
      _DWORD v56[4] = v25;
      aBlock[4] = sub_1001F0698;
      aBlock[5] = v56;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001E0068;
      aBlock[3] = &unk_10028EBE0;
      char v58 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      uint64_t v59 = v68;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = &_swiftEmptyArrayStorage;
      sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100157064((uint64_t *)&unk_1002D9600);
      sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
      unint64_t v60 = v70;
      uint64_t v61 = v73;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      swift_release();
      _Block_release(v58);

      (*(void (**)(char *, uint64_t))(v72 + 8))(v60, v61);
      return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v59, v71);
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001E88B8(void (*a1)(void, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001EA9C4();
  uint64_t v7 = swift_allocError();
  *(void *)uint64_t v8 = a3;
  *(void *)(v8 + 8) = a4;
  *(unsigned char *)(v8 + 16) = 1;
  swift_bridgeObjectRetain();
  a1(0, v7);

  return swift_errorRelease();
}

const char *sub_1001E8950(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t), uint64_t a5)
{
  NSString v27 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  uint64_t v13 = (sqlite3_stmt **)(v12 + 16);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v14 = sub_1001E3938();
    swift_release();
  }
  else
  {
    uint64_t v14 = 0;
  }
  void *v13 = v14;
  swift_beginAccess();
  if (sqlite3_step(*v13) == 101)
  {
    sub_100167598(0, (unint64_t *)&qword_1002D95F0);
    uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v27;
    *(void *)(v16 + 24) = a5;
    aBlock[4] = sub_1001F09B0;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001E0068;
    aBlock[3] = &unk_10028EAF0;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100157064((uint64_t *)&unk_1002D9600);
    sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v25);
LABEL_8:
    sqlite3_finalize(*(sqlite3_stmt **)(v12 + 16));
    return (const char *)swift_release();
  }
  uint64_t result = sqlite3_errmsg(*v13);
  if (result)
  {
    uint64_t v19 = String.init(cString:)();
    uint64_t v21 = v20;
    sub_1001EA9C4();
    uint64_t v22 = swift_allocError();
    *(void *)uint64_t v23 = v19;
    *(void *)(v23 + 8) = v21;
    *(unsigned char *)(v23 + 16) = 1;
    v27(0, v22);
    swift_errorRelease();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E8F30(uint64_t a1, void **a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  NSString v29 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v27 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  uint64_t v26 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = 0;
    sub_1001F028C(*a2, a2[3]);
    uint64_t v13 = sub_1001E3938();
    swift_bridgeObjectRelease();
    *(void *)(v12 + 16) = v13;
    swift_beginAccess();
    if (sqlite3_step(*(sqlite3_stmt **)(v12 + 16)) == 101)
    {
      sub_100167598(0, (unint64_t *)&qword_1002D95F0);
      uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v29;
      *(void *)(v15 + 24) = a4;
      aBlock[4] = sub_1001F0628;
      aBlock[5] = v15;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001E0068;
      aBlock[3] = &unk_10028E780;
      uint64_t v16 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100157064((uint64_t *)&unk_1002D9600);
      sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
      uint64_t v17 = v27;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v16);

      (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v17, v6);
      (*(void (**)(unsigned char *, uint64_t))(v26 + 8))(v11, v25);
LABEL_6:
      sqlite3_finalize(*(sqlite3_stmt **)(v12 + 16));
      swift_release();
      return swift_release();
    }
    if (sqlite3_errmsg(*(sqlite3 **)(v12 + 16)))
    {
      uint64_t v18 = String.init(cString:)();
      uint64_t v20 = v19;
      sub_1001EA9C4();
      uint64_t v21 = swift_allocError();
      *(void *)uint64_t v22 = v18;
      *(void *)(v22 + 8) = v20;
      *(unsigned char *)(v22 + 16) = 1;
      v29(0, v21);
      swift_errorRelease();
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

const char *sub_1001E9590(uint64_t a1, void (*a2)(void, uint64_t))
{
  swift_beginAccess();
  uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a1 + 16));
  if (result)
  {
    uint64_t v5 = String.init(cString:)();
    uint64_t v7 = v6;
    sub_1001EA9C4();
    uint64_t v8 = swift_allocError();
    *(void *)uint64_t v9 = v5;
    *(void *)(v9 + 8) = v7;
    *(unsigned char *)(v9 + 16) = 1;
    a2(0, v8);
    return (const char *)swift_errorRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001E9644(uint64_t (*a1)(uint64_t, void))
{
  if (qword_1002D7AB8 != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  return a1(1, 0);
}

uint64_t sub_1001E96E8(uint64_t a1, int a2, void (*a3)(void, uint64_t), uint64_t a4)
{
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v41 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v39 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    Swift::String aBlock = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v9._uint64_t countAndFlagsBits = 0xD000000000000029;
    v9._object = (void *)0x800000010023F140;
    String.append(_:)(v9);
    int v50 = a2;
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._object = (void *)0x800000010023F170;
    v11._uint64_t countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v11);
    uint64_t v12 = sub_1001E3938();
    uint64_t v13 = &xmmword_100268000;
    uint64_t v37 = v5;
    uint64_t v14 = v12;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v15 = _swiftEmptyArrayStorage;
    if (sqlite3_step(v14) == 100)
    {
      while (sqlite3_column_text(v14, 0)
           && sqlite3_column_text(v14, 1)
           && sqlite3_column_text(v14, 2)
           && sqlite3_column_text(v14, 3))
      {
        String.init(cString:)();
        NSString v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v17 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v18 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        String.init(cString:)();
        NSString v19 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        int v20 = sqlite3_column_int(v14, 4);
        id v21 = v16;
        id v22 = v17;
        id v23 = v18;
        id v24 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v15 = sub_1001EAE00(0, v15[2] + 1, 1, v15);
        }
        unint64_t v26 = v15[2];
        unint64_t v25 = v15[3];
        if (v26 >= v25 >> 1) {
          uint64_t v15 = sub_1001EAE00((void *)(v25 > 1), v26 + 1, 1, v15);
        }
        _OWORD v15[2] = v26 + 1;
        NSString v27 = &v15[5 * v26];
        v27[4] = v21;
        v27[5] = v22;
        v27[6] = v23;
        v27[7] = v24;
        *((_DWORD *)v27 + 16) = v20;

        uint64_t v13 = &xmmword_100268000;
        if (sqlite3_step(v14) != 100) {
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRelease();
      sub_1001EA9C4();
      uint64_t v34 = swift_allocError();
      *(void *)uint64_t v35 = 0;
      *(void *)(v35 + 8) = 0;
      *(unsigned char *)(v35 + 16) = 4;
      v42(0, v34);
      swift_errorRelease();
    }
    else
    {
LABEL_12:
      sub_100167598(0, (unint64_t *)&qword_1002D95F0);
      uint64_t v28 = (void *)static OS_dispatch_queue.main.getter();
      NSString v29 = (void *)swift_allocObject();
      uint64_t v30 = v43;
      _OWORD v29[2] = v42;
      void v29[3] = v30;
      v29[4] = v15;
      uint64_t v48 = sub_1001F0698;
      uint64_t v49 = v29;
      Swift::String aBlock = _NSConcreteStackBlock;
      unint64_t v45 = *((void *)v13 + 127);
      uint64_t v46 = sub_1001E0068;
      Swift::String v47 = &unk_10028E870;
      uint64_t v31 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      Swift::String aBlock = (void **)_swiftEmptyArrayStorage;
      sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100157064((uint64_t *)&unk_1002D9600);
      sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
      uint64_t v32 = v39;
      uint64_t v33 = v37;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v31);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v33);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v40);
    }
    return sqlite3_finalize(v14);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001E9EE8(void (*a1)(void, uint64_t))
{
  swift_getErrorValue();
  uint64_t v2 = Error.localizedDescription.getter();
  uint64_t v4 = v3;
  sub_1001EA9C4();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 16) = 1;
  a1(0, v5);
  return swift_errorRelease();
}

uint64_t sub_1001E9F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v8 - 8);
  uint64_t v20 = v8;
  __chkstk_darwin(v8);
  Swift::String v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v12 = sub_1001E3938();
    swift_release();
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(void *)(v11 + 16) = v12;
  int v13 = sqlite3_step(v12);
  sub_100167598(0, (unint64_t *)&qword_1002D95F0);
  uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v15 = (void *)swift_allocObject();
  if (v13 == 101)
  {
    _OWORD v15[2] = a2;
    v15[3] = a3;
    unint64_t v26 = sub_1001EA894;
    NSString v27 = v15;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v23 = 1107296256;
    id v24 = sub_1001E0068;
    unint64_t v25 = &unk_10028E578;
    NSString v16 = _Block_copy(&aBlock);
  }
  else
  {
    _OWORD v15[2] = v11;
    v15[3] = a2;
    v15[4] = a3;
    unint64_t v26 = sub_1001EA888;
    NSString v27 = v15;
    Swift::String aBlock = _NSConcreteStackBlock;
    uint64_t v23 = 1107296256;
    id v24 = sub_1001E0068;
    unint64_t v25 = &unk_10028E528;
    NSString v16 = _Block_copy(&aBlock);
    swift_retain();
  }
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  Swift::String aBlock = (void **)_swiftEmptyArrayStorage;
  sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v20);
  swift_beginAccess();
  sqlite3_finalize(*(sqlite3_stmt **)(v11 + 16));
  return swift_release();
}

uint64_t sub_1001EA5A0()
{
  return sub_1001F0948((void (*)(void))&_swift_release);
}

uint64_t sub_1001EA5B8()
{
  return sub_1001E9F94(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001EA5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001EA5D4()
{
  return swift_release();
}

uint64_t sub_1001EA5DC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001EA5EC(uint64_t a1, uint64_t (*a2)(void))
{
  if (qword_1002D7AB8 != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100267EF0;
  swift_getErrorValue();
  uint64_t v4 = Error.localizedDescription.getter();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_100181588();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return a2(0);
}

uint64_t sub_1001EA718()
{
  return sub_1001F0948((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001EA730()
{
  return sub_1001EA5EC(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

const char *sub_1001EA73C(uint64_t a1, uint64_t (*a2)(void))
{
  swift_beginAccess();
  uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a1 + 16));
  if (result)
  {
    uint64_t v5 = String.init(cString:)();
    uint64_t v7 = v6;
    if (qword_1002D7AB8 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100267EF0;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_100181588();
    *(void *)(v8 + 32) = v5;
    *(void *)(v8 + 40) = v7;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    return (const char *)a2(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EA870()
{
  return sub_1001F0948((void (*)(void))&_swift_release);
}

const char *sub_1001EA888()
{
  return sub_1001EA73C(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1001EA894()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_1001EA8C4()
{
  return sub_1001E54B8(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24), *(void (**)(void, uint64_t))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t type metadata accessor for MetricList(uint64_t a1)
{
  return sub_1001EA8F4(a1, qword_1002DB8E0);
}

uint64_t sub_1001EA8F4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001EA92C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001EA964()
{
  return sub_1001F0AD4((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001EA97C()
{
  return sub_1001E9EE8(*(void (**)(void, uint64_t))(v0 + 16));
}

uint64_t sub_1001EA9A0()
{
  return sub_1001F0AD4((void (*)(void))&_swift_release);
}

uint64_t sub_1001EA9B8()
{
  return sub_1001E63D8(*(void (**)(uint64_t, void))(v0 + 16));
}

unint64_t sub_1001EA9C4()
{
  unint64_t result = qword_1002DB7F0;
  if (!qword_1002DB7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB7F0);
  }
  return result;
}

uint64_t sub_1001EAA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002D8210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_1001EAA80(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100157064(&qword_1002DB940);
      Swift::String v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      int v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (char *)&_swiftEmptyArrayStorage;
      int v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 32]) {
          memmove(v13, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1001EF304(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001EAB90(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001EB5A4(a1, a2, a3, a4, &qword_1002DA788, type metadata accessor for Metric, type metadata accessor for Metric);
}

void *sub_1001EABC4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100157064(&qword_1002D97E0);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      int v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = _swiftEmptyArrayStorage;
      int v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001EF3F0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001EACD4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100157064(&qword_1002DA7A8);
      Swift::String v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001EF764(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001EAE00(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100157064(&qword_1002DA780);
      Swift::String v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001EF968(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001EAF20(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001EAF60(a1, a2, a3, a4, &qword_1002DA758, (void (*)(void, int64_t, void *, void *))sub_1001EFB6C);
}

void *sub_1001EAF40(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001EAF60(a1, a2, a3, a4, &qword_1002DA740, (void (*)(void, int64_t, void *, void *))sub_1001EFC7C);
}

void *sub_1001EAF60(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      sub_100157064(a5);
      int v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[3 * v11 + 4]) {
          memmove(v15, a4 + 4, 24 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int v13 = _swiftEmptyArrayStorage;
      uint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    a6(0, v11, v15, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_1001EB094(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100157064(&qword_1002DB860);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001EFD74(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001EB1C0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100157064((uint64_t *)&unk_1002DAEA8);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      int v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      int v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001EFA60(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001EB2D0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100157064(&qword_1002DB868);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001EF858(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001EB3F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001EB5A4(a1, a2, a3, a4, &qword_1002DA790, type metadata accessor for MetricSectional, type metadata accessor for MetricSectional);
}

uint64_t sub_1001EB42C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001EB5A4(a1, a2, a3, a4, &qword_1002DA778, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
}

void *sub_1001EB460(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100157064(&qword_1002D97E8);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      int v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      int v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001EF304(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001EB570(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001EB5A4(a1, a2, a3, a4, &qword_1002DB938, (uint64_t (*)(void))type metadata accessor for FTMCellMonitorHardwareDetailModel, (uint64_t (*)(void))type metadata accessor for FTMCellMonitorHardwareDetailModel);
}

uint64_t sub_1001EB5A4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100157064(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001EFE84(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

unint64_t sub_1001EB824(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1001EDCCC(a1, v2);
}

unint64_t sub_1001EB868(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1001EDD68(a1, a2, v4);
}

unint64_t sub_1001EB8E0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1001EDE4C(a1, v4);
}

uint64_t sub_1001EB924(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for STransferMetrics();
  uint64_t v38 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100157064(&qword_1002DB870);
  char v9 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v35 = v3;
    int64_t v12 = 0;
    uint64_t v13 = *(void *)(v8 + 64);
    uint64_t v37 = (void *)(v8 + 64);
    uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v13;
    int64_t v36 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        unint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v12 << 6);
      }
      else
      {
        int64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v37;
        if (v21 >= v36) {
          goto LABEL_34;
        }
        unint64_t v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          int64_t v12 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v22 = v37[v12];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              if ((v9 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v35;
                goto LABEL_41;
              }
              uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v37 = -1 << v34;
              }
              uint64_t v3 = v35;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v12 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v12 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v22 = v37[v12];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v12 = v23;
          }
        }
LABEL_21:
        unint64_t v16 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = *(void *)(v38 + 72);
      uint64_t v26 = *(void *)(v8 + 56) + v25 * v20;
      if (v9) {
        sub_1001F076C(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for STransferMetrics);
      }
      else {
        sub_1001F046C(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for STransferMetrics);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v27 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v11 + 48) + 8 * v18) = v24;
      uint64_t result = sub_1001F076C((uint64_t)v7, *(void *)(v11 + 56) + v25 * v18, (uint64_t (*)(void))type metadata accessor for STransferMetrics);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_1001EBCB0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100157064(&qword_1002DB878);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001EBFC8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100157064((uint64_t *)&unk_1002DAA00);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_100197FC0(v24, v35);
      }
      else
      {
        sub_100196D64((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_100197FC0(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001EC2C8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100157064((uint64_t *)&unk_1002DAE90);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_100197FC0((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_1001CADF8(v25, (uint64_t)&v38);
      sub_100196D64(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_100197FC0(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001EC5E0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100157064(&qword_1002DB858);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    long long v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *long long v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001EC8EC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100157064(&qword_1002DB840);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  long long v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    int64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001ECC14(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100157064(&qword_1002DB7F8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001ECF2C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DashboardViewModelObject();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100157064(&qword_1002DB830);
  int v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  long long v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      sub_1001F076C(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
    }
    else
    {
      sub_1001F046C(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v28;
    v19[1] = v27;
    uint64_t result = sub_1001F076C((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_1001ED30C(uint64_t a1, uint64_t a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1001EB824(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001EDF14();
      goto LABEL_7;
    }
    sub_1001EB924(v13, a3 & 1);
    unint64_t v20 = sub_1001EB824(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = v17 + *(void *)(*(void *)(type metadata accessor for STransferMetrics() - 8) + 72) * v10;
    return sub_1001F09E0(a1, v18);
  }
LABEL_13:

  return sub_1001EDB3C(v10, a2, a1, v16);
}

uint64_t sub_1001ED458(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001EB868(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001EE18C();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001EBCB0(v15, a4 & 1);
  unint64_t v21 = sub_1001EB868(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_1001ED5C8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1001EB868(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001EE344();
      goto LABEL_7;
    }
    sub_1001EBFC8(v15, a4 & 1);
    unint64_t v21 = sub_1001EB868(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_100157190((uint64_t)v19);
    return sub_100197FC0(a1, v19);
  }
LABEL_13:
  sub_1001EDBE4(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_1001ED71C(_OWORD *a1, uint64_t a2, char a3)
{
  Swift::Int v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1001EB8E0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001EE52C();
      goto LABEL_7;
    }
    sub_1001EC2C8(v13, a3 & 1);
    unint64_t v19 = sub_1001EB8E0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_1001CADF8(a2, (uint64_t)v21);
      return sub_1001EDC50(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_100157190((uint64_t)v17);

  return sub_100197FC0(a1, v17);
}

uint64_t sub_1001ED868(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001EB868(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001EE714();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001EC5E0(result, a4 & 1);
  uint64_t result = sub_1001EB868(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  char v20 = (uint64_t *)(v18[6] + 16 * v12);
  *char v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001ED9CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001EB868(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001EEA80();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001ECC14(v15, a4 & 1);
  unint64_t v21 = sub_1001EB868(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001EDB3C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for STransferMetrics();
  uint64_t result = sub_1001F076C(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for STransferMetrics);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

_OWORD *sub_1001EDBE4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100197FC0(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_1001EDC50(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100197FC0(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t sub_1001EDCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1001EDD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1001EDE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1001CADF8(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10019816C((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void *sub_1001EDF14()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for STransferMetrics();
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100157064(&qword_1002DB870);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  uint64_t v24 = v1;
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v25 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
    unint64_t v19 = *(void *)(v26 + 72) * v16;
    sub_1001F046C(*(void *)(v5 + 56) + v19, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for STransferMetrics);
    *(void *)(*(void *)(v7 + 48) + v17) = v18;
    unint64_t result = (void *)sub_1001F076C((uint64_t)v4, *(void *)(v7 + 56) + v19, (uint64_t (*)(void))type metadata accessor for STransferMetrics);
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001EE18C()
{
  uint64_t v1 = v0;
  sub_100157064(&qword_1002DB878);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001EE344()
{
  uint64_t v1 = v0;
  sub_100157064((uint64_t *)&unk_1002DAA00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100196D64(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_100197FC0(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001EE52C()
{
  uint64_t v1 = v0;
  sub_100157064((uint64_t *)&unk_1002DAE90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_1001CADF8(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_100196D64(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    unint64_t result = sub_100197FC0(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001EE714()
{
  uint64_t v1 = v0;
  sub_100157064(&qword_1002DB858);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001EE8C4()
{
  uint64_t v1 = v0;
  sub_100157064(&qword_1002DB840);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    void *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001EEA80()
{
  uint64_t v1 = v0;
  sub_100157064(&qword_1002DB7F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001EEC38()
{
  uint64_t v1 = type metadata accessor for DashboardViewModelObject();
  uint64_t v27 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100157064(&qword_1002DB830);
  int64_t v24 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t *v24 = v6;
    return result;
  }
  unint64_t result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  uint64_t v25 = v4 + 64;
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v4 + 64);
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v14 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_9:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    unint64_t v19 = *(void *)(v27 + 72) * v14;
    sub_1001F046C(*(void *)(v4 + 56) + v19, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
    uint64_t v20 = (void *)(*(void *)(v6 + 48) + v15);
    *uint64_t v20 = v17;
    v20[1] = v18;
    sub_1001F076C((uint64_t)v3, *(void *)(v6 + 56) + v19, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

sqlite3 *sub_1001EEEBC()
{
  unint64_t v8 = 0;
  uint64_t v0 = String.utf8CString.getter();
  int v1 = sqlite3_open_v2((const char *)(v0 + 32), &v8, 65542, 0);
  swift_release();
  uint64_t v2 = v8;
  if (v1)
  {
    if (sqlite3_errmsg(v8))
    {
      uint64_t v3 = String.init(cString:)();
      uint64_t v5 = v4;
      sub_1001EA9C4();
      swift_allocError();
      *(void *)uint64_t v6 = v3;
      *(void *)(v6 + 8) = v5;
    }
    else
    {
      sub_1001EA9C4();
      swift_allocError();
      *(void *)uint64_t v6 = 0xD000000000000026;
      *(void *)(v6 + 8) = 0x800000010023F2D0;
    }
    *(unsigned char *)(v6 + 16) = 0;
    swift_willThrow();
    unint64_t result = v8;
    if (v8) {
      return (sqlite3 *)sqlite3_close(v8);
    }
  }
  else
  {
    type metadata accessor for SQLiteDatabase();
    swift_allocObject();
    return (sqlite3 *)sub_1001E353C(v2);
  }
  return result;
}

uint64_t sub_1001EF00C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(v4 + 24);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(unsigned char *)(v16 + 24) = a1;
  *(void *)(v16 + 32) = a2;
  *(void *)(v16 + 40) = a3;
  aBlock[4] = sub_1001F0A48;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E0068;
  aBlock[3] = &unk_10028EB40;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  int64_t v21 = &_swiftEmptyArrayStorage;
  sub_1001F0890((unint64_t *)&qword_1002DA560, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100157064((uint64_t *)&unk_1002D9600);
  sub_1001A53A0((unint64_t *)&qword_1002DA570, (uint64_t *)&unk_1002D9600);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  swift_release();
  return swift_release();
}

char *sub_1001EF304(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EF3F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EF4E4(void *a1, void *a2)
{
  _StringGuts.grow(_:)(283);
  v4._uint64_t countAndFlagsBits = 0xD0000000000000C6;
  v4._object = (void *)0x800000010023F390;
  String.append(_:)(v4);
  id v5 = a1;
  id v6 = [v5 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0xD000000000000019;
  v11._object = (void *)0x800000010023F100;
  String.append(_:)(v11);
  id v12 = a2;
  id v13 = [v12 description];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);

  swift_bridgeObjectRelease();
  v18._object = (void *)0x800000010023F460;
  v18._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0xD000000000000024;
  v20._object = (void *)0x800000010023F480;
  String.append(_:)(v20);
  return 0;
}

unint64_t sub_1001EF68C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100157064(&qword_1002DB838);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (_DWORD *)(a1 + 40); ; i += 4)
    {
      uint64_t v5 = *((void *)i - 1);
      int v6 = *i;
      unint64_t result = sub_1001EB824(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_DWORD *)(v3[7] + 4 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_1001EF764(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EF858(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_100157064((uint64_t *)&unk_1002D96B0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EF968(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFA60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100157064(&qword_1002DAE80);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFB6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100157064(&qword_1002DA750);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFC7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFD74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      sub_100157064(&qword_1002DAEA0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFE84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_1001EFFE0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10028AA98, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001F002C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    _StringGuts.grow(_:)(152);
    v13._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v13._object = (void *)0x800000010023F190;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = a1;
    v14._object = a2;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = 0xD000000000000016;
    v15._object = (void *)0x800000010023F1C0;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = a3;
    v16._object = a4;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 0xD000000000000019;
    v17._object = (void *)0x800000010023F100;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = a5;
    v18._object = (void *)a6;
    String.append(_:)(v18);
    v19._object = (void *)0x800000010023F1E0;
    v19._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD000000000000024;
    unint64_t v22 = "\" ORDER BY collected_on DESC LIMIT 1";
  }
  else
  {
    _StringGuts.grow(_:)(194);
    v23._uint64_t countAndFlagsBits = 0xD00000000000004BLL;
    v23._object = (void *)0x800000010023F230;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = a1;
    v24._object = a2;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = 0xD000000000000016;
    v25._object = (void *)0x800000010023F1C0;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = a3;
    v26._object = a4;
    String.append(_:)(v26);
    v27._object = (void *)0x800000010023F1E0;
    v27._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v27);
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD000000000000049;
    unint64_t v22 = "\"\n    ORDER BY collected_on DESC\n   ) AS sub\n    GROUP BY attribute_name";
  }
  unint64_t v29 = (unint64_t)(v22 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v21);
  return 0;
}

uint64_t sub_1001F028C(void *a1, void *a2)
{
  _StringGuts.grow(_:)(92);
  v4._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v4._object = (void *)0x800000010023F0D0;
  String.append(_:)(v4);
  id v5 = a1;
  id v6 = [v5 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0xD000000000000019;
  v11._object = (void *)0x800000010023F100;
  String.append(_:)(v11);
  id v12 = a2;
  id v13 = [v12 description];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v16 = v15;

  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);

  swift_bridgeObjectRelease();
  v18._object = (void *)0x800000010023F120;
  v18._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1001F0418()
{
  unint64_t result = qword_1002DB808;
  if (!qword_1002DB808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB808);
  }
  return result;
}

uint64_t sub_1001F046C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001F04D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1001F0534()
{
  unint64_t result = qword_1002DB828;
  if (!qword_1002DB828)
  {
    sub_100157104((uint64_t *)&unk_1002D9650);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB828);
  }
  return result;
}

uint64_t sub_1001F05A0()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001F0600()
{
  return sub_1001E8F30(*(void *)(v0 + 16), (void **)(v0 + 24), *(void (**)(void, uint64_t))(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_1001F0610()
{
  return sub_1001F0948((void (*)(void))&_swift_release);
}

uint64_t sub_1001F0628()
{
  return sub_1001E9644(*(uint64_t (**)(uint64_t, void))(v0 + 16));
}

uint64_t sub_1001F0634()
{
  return sub_1001E96E8(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24), *(void (**)(void, uint64_t))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001F0644()
{
  return sub_1001F0AD4((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001F065C()
{
  return sub_1001E9EE8(*(void (**)(void, uint64_t))(v0 + 16));
}

uint64_t sub_1001F0680()
{
  return sub_1001F0AD4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001F06A0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001F06E8()
{
  if (*(void *)(*(void *)(v0 + 16) + 16)) {
    uint64_t v1 = *(void **)(v0 + 16);
  }
  else {
    uint64_t v1 = &_swiftEmptyArrayStorage;
  }
  return (*(uint64_t (**)(void *, void))(v0 + 24))(v1, 0);
}

uint64_t sub_1001F072C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F0764()
{
  return sub_1001E782C(*(void (**)(void, uint64_t))(v0 + 16));
}

uint64_t sub_1001F076C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001F07D4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1001F082C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

const char *sub_1001F087C()
{
  return sub_1001E50FC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(uint64_t, uint64_t))(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_1001F0890(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001F08D8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

const char *sub_1001F0920()
{
  return sub_1001E8950(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void, uint64_t))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1001F0930()
{
  return sub_1001F0948((void (*)(void))&_swift_release);
}

uint64_t sub_1001F0948(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 40, 7);
}

const char *sub_1001F0990()
{
  return sub_1001E9590(*(void *)(v0 + 16), *(void (**)(void, uint64_t))(v0 + 24));
}

uint64_t sub_1001F09B0()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 16))(1, 0);
}

uint64_t sub_1001F09E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for STransferMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F0A48()
{
  return sub_1001E78A8(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void (**)(void, uint64_t))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001F0A5C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001F0A9C()
{
  return sub_1001E88B8(*(void (**)(void, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001F0ABC()
{
  return sub_1001F0AD4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001F0AD4(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1001F0B24()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), 0);
}

uint64_t getEnumTagSinglePayload for Metric.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Metric.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F0CB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Metric.CodingKeys()
{
  return &type metadata for Metric.CodingKeys;
}

uint64_t sub_1001F0CF0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SQLiteError(uint64_t a1)
{
  return sub_1001F0D18(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1001F0D18(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s13FTMInternal_411SQLiteErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1001F0CF0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SQLiteError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1001F0CF0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1001F0D18(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SQLiteError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1001F0D18(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001F0EA8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_1001F0EC0(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteError()
{
  return &type metadata for SQLiteError;
}

uint64_t *sub_1001F0EE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    Swift::String v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    id v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *(_DWORD *)((char *)v4 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

void *sub_1001F0FEC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1001F10A0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1001F1150(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1001F11E8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1001F1288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F129C);
}

uint64_t sub_1001F129C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001F134C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F1360);
}

uint64_t sub_1001F1360(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001F1408()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1001F14B0()
{
  unint64_t result = qword_1002DB920;
  if (!qword_1002DB920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB920);
  }
  return result;
}

unint64_t sub_1001F1508()
{
  unint64_t result = qword_1002DB928;
  if (!qword_1002DB928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB928);
  }
  return result;
}

unint64_t sub_1001F1560()
{
  unint64_t result = qword_1002DB930;
  if (!qword_1002DB930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB930);
  }
  return result;
}

id sub_1001F1684()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_420ExportViewController____lazy_storage___exportOptionsLabel;
  int v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_420ExportViewController____lazy_storage___exportOptionsLabel);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_420ExportViewController____lazy_storage___exportOptionsLabel);
  }
  else
  {
    id v4 = sub_1001F16E4();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    int v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1001F16E4()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setText:v1];

  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self colorNamed:v2];

  [v0 setTextColor:v3];
  [v0 setTextAlignment:1];
  [v0 setLineBreakMode:0];
  [v0 setNumberOfLines:2];
  id v4 = [self systemFontOfSize:30.0 weight:UIFontWeightMedium];
  [v0 setFont:v4];

  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v0;
}

id sub_1001F1858()
{
  id v0 = [objc_allocWithZone((Class)UIButton) init];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self systemImageNamed:v1];

  [v0 setImage:v2 forState:0];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self colorNamed:v3];

  [v0 setTintColor:v4];
  sub_100157064(&qword_1002DB998);
  [v0 addTarget:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() action:@"didTapDismissWithSender:" forControlEvents:64];
  swift_unknownObjectRelease();
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v0;
}

id sub_1001F19DC@<X0>(id *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  id v6 = *a1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v6;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_1001A6950;
  *(void *)(v4 + 24) = v3;
  *a2 = sub_1001A69C0;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v4;

  return v6;
}

id sub_1001F1A7C()
{
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_420ExportViewController____lazy_storage___loadingView;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_420ExportViewController____lazy_storage___loadingView];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC13FTMInternal_420ExportViewController____lazy_storage___loadingView];
  }
  else
  {
    id v4 = sub_1001F1AE0(v0);
    uint64_t v5 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1001F1AE0(char *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for LoadingView());
  id v3 = sub_100198918(0xD00000000000001FLL, 0x800000010023AE70, 0.0, 0.0, 0.0, 0.0);
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  id result = [a1 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = result;
  [result addSubview:v3];

  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100268000;
  id v7 = [v3 topAnchor];
  id v8 = [*(id *)&a1[OBJC_IVAR____TtC13FTMInternal_420ExportViewController_dismissButton] safeAreaLayoutGuide];
  id v9 = [v8 bottomAnchor];

  id v10 = [v7 constraintEqualToAnchor:v9];
  *(void *)(v6 + 32) = v10;
  id v11 = [v3 leadingAnchor];
  id result = [a1 view];
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  id v12 = result;
  id v13 = [result safeAreaLayoutGuide];

  id v14 = [v13 leadingAnchor];
  id v15 = [v11 constraintEqualToAnchor:v14];

  *(void *)(v6 + 40) = v15;
  id v16 = [v3 trailingAnchor];
  id result = [a1 view];
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  Swift::String v17 = result;
  id v18 = [result safeAreaLayoutGuide];

  id v19 = [v18 trailingAnchor];
  id v20 = [v16 constraintEqualToAnchor:v19];

  *(void *)(v6 + 48) = v20;
  id v21 = [v3 bottomAnchor];
  id result = [a1 view];
  if (result)
  {
    unint64_t v22 = result;
    Swift::String v23 = self;
    id v24 = [v22 safeAreaLayoutGuide];

    id v25 = [v24 bottomAnchor];
    id v26 = [v21 constraintEqualToAnchor:v25];

    *(void *)(v6 + 56) = v26;
    specialized Array._endMutation()();
    sub_10015DDE4();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v23 activateConstraints:isa];

    return v3;
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_1001F1EB0()
{
  uint64_t v1 = v0;
  v131.receiver = v0;
  v131.super_class = (Class)type metadata accessor for ExportViewController();
  [super viewDidLoad];
  id v2 = [v0 view];
  if (!v2)
  {
    __break(1u);
    goto LABEL_13;
  }
  id v3 = v2;
  id v4 = sub_1001F1684();
  [v3 addSubview:v4];

  id v5 = [v1 view];
  if (!v5)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = v5;
  id v7 = *(void **)&v1[OBJC_IVAR____TtC13FTMInternal_420ExportViewController_dismissButton];
  [v5 addSubview:v7];

  id v8 = [v1 view];
  if (!v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id v9 = v8;
  id v10 = *(void **)&v1[OBJC_IVAR____TtC13FTMInternal_420ExportViewController_containerView];
  [v8 addSubview:v10];

  [v10 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100157064((uint64_t *)&unk_1002D8290);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10026B7D0;
  id v12 = [v7 topAnchor];
  id v13 = [v1 view];
  if (!v13)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v14 = v13;
  id v15 = [v13 safeAreaLayoutGuide];

  id v16 = [v15 topAnchor];
  id v17 = [v12 constraintEqualToAnchor:v16 constant:25.0];

  *(void *)(v11 + 32) = v17;
  id v18 = [v7 rightAnchor];
  id v19 = [v1 view];
  if (!v19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v20 = v19;
  id v21 = [v19 safeAreaLayoutGuide];

  id v22 = [v21 rightAnchor];
  id v23 = [v18 constraintEqualToAnchor:v22 constant:-10.0];

  *(void *)(v11 + 40) = v23;
  id v24 = [v7 heightAnchor];
  id v25 = [v24 constraintEqualToConstant:30.0];

  *(void *)(v11 + 48) = v25;
  id v26 = [v7 widthAnchor];
  id v27 = [v26 constraintEqualToConstant:30.0];

  *(void *)(v11 + 56) = v27;
  id v28 = sub_1001F1684();
  id v29 = [v28 topAnchor];

  id v30 = [v7 safeAreaLayoutGuide];
  id v31 = [v30 bottomAnchor];

  id v32 = [v29 constraintEqualToAnchor:v31 constant:10.0];
  *(void *)(v11 + 64) = v32;
  id v33 = sub_1001F1684();
  id v34 = [v33 rightAnchor];

  id v35 = [v1 view];
  if (!v35)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  BOOL v36 = v35;
  id v37 = [v35 safeAreaLayoutGuide];

  id v38 = [v37 rightAnchor];
  id v39 = [v34 constraintEqualToAnchor:v38 constant:-10.0];

  *(void *)(v11 + 72) = v39;
  id v40 = sub_1001F1684();
  id v41 = [v40 leftAnchor];

  id v42 = [v1 view];
  if (!v42)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  int v43 = v42;
  id v44 = [v42 safeAreaLayoutGuide];

  id v45 = [v44 leftAnchor];
  id v46 = [v41 constraintEqualToAnchor:v45 constant:10.0];

  *(void *)(v11 + 80) = v46;
  id v47 = [v10 topAnchor];
  id v48 = sub_1001F1684();
  id v49 = [v48 bottomAnchor];

  id v50 = [v47 constraintEqualToAnchor:v49];
  *(void *)(v11 + 88) = v50;
  id v51 = [v10 rightAnchor];
  id v52 = [v1 view];
  if (!v52)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v53 = v52;
  id v54 = [v52 safeAreaLayoutGuide];

  id v55 = [v54 rightAnchor];
  id v56 = [v51 constraintEqualToAnchor:v55 constant:-10.0];

  *(void *)(v11 + 96) = v56;
  id v57 = [v10 leftAnchor];
  id v58 = [v1 view];
  if (!v58)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v59 = v58;
  id v60 = [v58 safeAreaLayoutGuide];

  id v61 = [v60 leftAnchor];
  id v62 = [v57 constraintEqualToAnchor:v61 constant:10.0];

  *(void *)(v11 + 104) = v62;
  id v63 = [v10 bottomAnchor];
  id v64 = [v1 view];
  id v125 = v10;
  if (v64)
  {
    uint64_t v65 = v64;
    id v124 = self;
    id v66 = [v65 safeAreaLayoutGuide];

    id v67 = [v66 bottomAnchor];
    id v68 = [v63 constraintEqualToAnchor:v67 constant:-10.0];

    *(void *)(v11 + 112) = v68;
    uint64_t v130 = v11;
    specialized Array._endMutation()();
    sub_10015DDE4();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v124 activateConstraints:isa];

    unsigned __int8 v70 = (objc_class *)type metadata accessor for ExportView();
    uint64_t v71 = (char *)objc_allocWithZone(v70);
    uint64_t v72 = OBJC_IVAR____TtC13FTMInternal_410ExportView_label;
    id v73 = objc_allocWithZone((Class)UILabel);
    uint64_t v74 = v71;
    *(void *)&v71[v72] = [v73 initWithFrame:0.0, 0.0, 0.0, 0.0];
    *(void *)&v74[OBJC_IVAR____TtC13FTMInternal_410ExportView_delegate + 8] = 0;
    swift_unknownObjectWeakInit();
    v74[OBJC_IVAR____TtC13FTMInternal_410ExportView_timeFrame] = 0;
    long long v75 = &v74[OBJC_IVAR____TtC13FTMInternal_410ExportView_labelText];
    *(void *)long long v75 = 0x796C696144;
    *((void *)v75 + 1) = 0xE500000000000000;

    v129.receiver = v74;
    v129.super_class = v70;
    id v126 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
    sub_10015D7DC();
    *(void *)&v126[OBJC_IVAR____TtC13FTMInternal_410ExportView_delegate + 8] = &off_10028ED28;
    swift_unknownObjectWeakAssign();
    unint64_t v76 = (char *)objc_allocWithZone(v70);
    uint64_t v77 = OBJC_IVAR____TtC13FTMInternal_410ExportView_label;
    id v78 = objc_allocWithZone((Class)UILabel);
    uint64_t v79 = v76;
    *(void *)&v76[v77] = [v78 initWithFrame:0.0, 0.0, 0.0, 0.0];
    *(void *)&v79[OBJC_IVAR____TtC13FTMInternal_410ExportView_delegate + 8] = 0;
    swift_unknownObjectWeakInit();
    v79[OBJC_IVAR____TtC13FTMInternal_410ExportView_timeFrame] = 1;
    uint64_t v80 = &v79[OBJC_IVAR____TtC13FTMInternal_410ExportView_labelText];
    *(void *)uint64_t v80 = 0x796C6B656557;
    *((void *)v80 + 1) = 0xE600000000000000;

    v128.receiver = v79;
    v128.super_class = v70;
    uint64_t v81 = (char *)objc_msgSendSuper2(&v128, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    sub_10015D7DC();
    *(void *)&v81[OBJC_IVAR____TtC13FTMInternal_410ExportView_delegate + 8] = &off_10028ED28;
    swift_unknownObjectWeakAssign();
    uint64_t v82 = (char *)objc_allocWithZone(v70);
    uint64_t v83 = OBJC_IVAR____TtC13FTMInternal_410ExportView_label;
    id v84 = objc_allocWithZone((Class)UILabel);
    uint64_t v85 = v82;
    *(void *)&v82[v83] = [v84 initWithFrame:0.0, 0.0, 0.0, 0.0];
    *(void *)&v85[OBJC_IVAR____TtC13FTMInternal_410ExportView_delegate + 8] = 0;
    swift_unknownObjectWeakInit();
    v85[OBJC_IVAR____TtC13FTMInternal_410ExportView_timeFrame] = 2;
    uint64_t v86 = &v85[OBJC_IVAR____TtC13FTMInternal_410ExportView_labelText];
    *(void *)uint64_t v86 = 0x796C68746E6F4DLL;
    *((void *)v86 + 1) = 0xE700000000000000;

    v127.receiver = v85;
    v127.super_class = v70;
    uint64_t v87 = (char *)[super initWithFrame:0.0, 0.0, 0.0, 0.0];
    sub_10015D7DC();
    NSString v123 = v87;
    *(void *)&v87[OBJC_IVAR____TtC13FTMInternal_410ExportView_delegate + 8] = &off_10028ED28;
    swift_unknownObjectWeakAssign();
    [v125 addSubview:v126];
    [v125 addSubview:v81];
    [v125 addSubview:v87];
    uint64_t v88 = swift_allocObject();
    *(_OWORD *)(v88 + 16) = xmmword_10026B7E0;
    id v89 = [v126 topAnchor];
    id v90 = [v125 topAnchor];
    id v91 = [v89 constraintEqualToAnchor:v90 constant:10.0];

    *(void *)(v88 + 32) = v91;
    id v92 = [v126 rightAnchor];
    id v93 = [v125 rightAnchor];
    id v94 = [v92 constraintEqualToAnchor:v93 constant:-10.0];

    *(void *)(v88 + 40) = v94;
    id v95 = [v126 leftAnchor];
    id v96 = [v125 leftAnchor];
    id v97 = [v95 constraintEqualToAnchor:v96 constant:10.0];

    *(void *)(v88 + 48) = v97;
    id v98 = [v126 heightAnchor];
    id v99 = [v98 constraintEqualToConstant:150.0];

    *(void *)(v88 + 56) = v99;
    id v100 = [v81 topAnchor];
    id v101 = [v126 bottomAnchor];
    id v102 = [v100 constraintEqualToAnchor:v101 constant:10.0];

    *(void *)(v88 + 64) = v102;
    id v103 = [v81 rightAnchor];
    id v104 = [v125 rightAnchor];
    id v105 = [v103 constraintEqualToAnchor:v104 constant:-10.0];

    *(void *)(v88 + 72) = v105;
    id v106 = [v81 leftAnchor];
    id v107 = [v125 leftAnchor];
    id v108 = [v106 constraintEqualToAnchor:v107 constant:10.0];

    *(void *)(v88 + 80) = v108;
    id v109 = [v81 heightAnchor];
    id v110 = [v109 constraintEqualToConstant:150.0];

    *(void *)(v88 + 88) = v110;
    id v111 = [v123 topAnchor];
    id v112 = [v81 bottomAnchor];
    id v113 = [v111 constraintEqualToAnchor:v112 constant:10.0];

    *(void *)(v88 + 96) = v113;
    id v114 = [v123 rightAnchor];
    id v115 = [v125 rightAnchor];
    id v116 = [v114 constraintEqualToAnchor:v115 constant:-10.0];

    *(void *)(v88 + 104) = v116;
    id v117 = [v123 leftAnchor];
    id v118 = [v125 leftAnchor];
    id v119 = [v117 constraintEqualToAnchor:v118 constant:10.0];

    *(void *)(v88 + 112) = v119;
    id v120 = [v123 heightAnchor];
    id v121 = [v120 constraintEqualToConstant:150.0];

    *(void *)(v88 + 120) = v121;
    uint64_t v130 = v88;
    specialized Array._endMutation()();
    Class v122 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v124 activateConstraints:v122];

    return;
  }
LABEL_21:
  __break(1u);
}

void sub_1001F2F44()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_420ExportViewController_persistanceStore);
}

id sub_1001F2FB4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExportViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for ExportViewController()
{
  return self;
}

void sub_1001F3088(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Metric(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (qword_1002D7A98 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_100267EF0;
    swift_getErrorValue();
    uint64_t v43 = Error.localizedDescription.getter();
    unint64_t v44 = v12;
    sub_100157064((uint64_t *)&unk_1002D9650);
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v15 = v14;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_100181588();
    *(void *)(v11 + 32) = v13;
    *(void *)(v11 + 40) = v15;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v42 = v8;
    id v16 = sub_1001F1A7C();
    uint64_t v17 = OBJC_IVAR____TtC13FTMInternal_411LoadingView_shouldHideLoadingView;
    v16[OBJC_IVAR____TtC13FTMInternal_411LoadingView_shouldHideLoadingView] = 1;
    id v18 = sub_100198638();
    [v18 setHidden:v16[v17]];

    id v19 = sub_100198740();
    [v19 setHidden:v16[v17]];

    id v20 = sub_100198638();
    [v20 stopAnimating];

    [v16 setHidden:1];
    if (a1)
    {
      int64_t v21 = *(void *)(a1 + 16);
      id v22 = &_swiftEmptyArrayStorage;
      if (v21)
      {
        id v41 = a3;
        id v45 = &_swiftEmptyArrayStorage;
        sub_1001B2350(0, v21, 0);
        uint64_t v23 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
        uint64_t v24 = *(void *)(v7 + 72);
        do
        {
          sub_1001CB884(v23, (uint64_t)v10);
          uint64_t v43 = 0;
          unint64_t v44 = 0xE000000000000000;
          _print_unlocked<A, B>(_:_:)();
          uint64_t v25 = v43;
          unint64_t v26 = v44;
          sub_100196C78((uint64_t)v10);
          id v22 = v45;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001B2350(0, v22[2] + 1, 1);
            id v22 = v45;
          }
          unint64_t v28 = v22[2];
          unint64_t v27 = v22[3];
          if (v28 >= v27 >> 1)
          {
            sub_1001B2350(v27 > 1, v28 + 1, 1);
            id v22 = v45;
          }
          void v22[2] = v28 + 1;
          id v29 = (char *)&v22[2 * v28];
          *((void *)v29 + 4) = v25;
          *((void *)v29 + 5) = v26;
          v23 += v24;
          --v21;
        }
        while (v21);
        a3 = v41;
      }
      uint64_t v43 = (uint64_t)v22;
      sub_100157064(&qword_1002D9640);
      sub_1001F365C();
      uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v32 = v31;
      swift_bridgeObjectRelease();
      sub_100157064(&qword_1002D9670);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_100267EF0;
      *(void *)(v33 + 56) = &type metadata for String;
      *(void *)(v33 + 32) = v30;
      *(void *)(v33 + 40) = v32;
      id v34 = objc_allocWithZone((Class)UIActivityViewController);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v36 = [v34 initWithActivityItems:isa applicationActivities:0];

      [v36 setModalPresentationStyle:7];
      id v37 = [v36 popoverPresentationController];
      if (v37)
      {
        id v38 = v37;
        id v39 = [a3 view];
        [v38 setSourceView:v39];

        [v38 setPermittedArrowDirections:0];
      }
      [a3 presentViewController:v36 animated:1 completion:0];
    }
  }
}

void sub_1001F353C()
{
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_420ExportViewController____lazy_storage___exportOptionsLabel] = 0;
  uint64_t v1 = OBJC_IVAR____TtC13FTMInternal_420ExportViewController_dismissButton;
  *(void *)&v0[v1] = sub_1001F1858();
  *(void *)&v0[OBJC_IVAR____TtC13FTMInternal_420ExportViewController____lazy_storage___loadingView] = 0;
  uint64_t v2 = OBJC_IVAR____TtC13FTMInternal_420ExportViewController_containerView;
  *(void *)&v0[v2] = [objc_allocWithZone((Class)UIView) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1001F35EC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F3624()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1001F365C()
{
  unint64_t result = qword_1002D9648;
  if (!qword_1002D9648)
  {
    sub_100157104(&qword_1002D9640);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002D9648);
  }
  return result;
}

unint64_t sub_1001F36BC()
{
  unint64_t result = qword_1002DB9A0;
  if (!qword_1002DB9A0)
  {
    sub_100157104(&qword_1002DB9A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB9A0);
  }
  return result;
}

uint64_t sub_1001F3718(char a1)
{
  return qword_10026C170[a1];
}

uint64_t sub_1001F372C(char a1)
{
  uint64_t result = 0x746C7561666564;
  switch(a1)
  {
    case 1:
      uint64_t result = 1885958006;
      break;
    case 2:
      uint64_t result = 0x6F65646976;
      break;
    case 3:
      uint64_t result = 0x756F72676B636162;
      break;
    case 4:
      uint64_t result = 0x6563696F76;
      break;
    case 5:
    case 7:
      uint64_t result = 0x69736E6F70736572;
      break;
    case 6:
      uint64_t result = 0x6D61657274537661;
      break;
    case 8:
      uint64_t result = 0x6E6769536C6C6163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F3858(char a1)
{
  uint64_t result = 0x746C7561666564;
  switch(a1)
  {
    case 1:
      uint64_t result = 1885958006;
      break;
    case 2:
      uint64_t result = 0x6F65646976;
      break;
    case 3:
      uint64_t result = 0x756F72676B636162;
      break;
    case 4:
      uint64_t result = 0x6563696F76;
      break;
    case 5:
    case 7:
      uint64_t result = 0x69736E6F70736572;
      break;
    case 6:
      uint64_t result = 0x6D61657274537661;
      break;
    case 8:
      uint64_t result = 0x6E6769536C6C6163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F3984(void *a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v3 = sub_100157064(&qword_1002DBA58);
  uint64_t v53 = *(void *)(v3 - 8);
  uint64_t v54 = v3;
  __chkstk_darwin(v3);
  id v52 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100157064(&qword_1002DBA60);
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  __chkstk_darwin(v5);
  id v49 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100157064(&qword_1002DBA68);
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  __chkstk_darwin(v7);
  id v46 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100157064(&qword_1002DBA70);
  uint64_t v44 = *(void *)(v9 - 8);
  uint64_t v45 = v9;
  __chkstk_darwin(v9);
  uint64_t v43 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100157064(&qword_1002DBA78);
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  __chkstk_darwin(v11);
  uint64_t v40 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100157064(&qword_1002DBA80);
  uint64_t v38 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  id v37 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100157064(&qword_1002DBA88);
  uint64_t v35 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100157064(&qword_1002DBA90);
  uint64_t v34 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100157064(&qword_1002DBA98);
  uint64_t v33 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  int64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100157064(&qword_1002DBAA0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v56 = v22;
  uint64_t v57 = v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015714C(a1, a1[3]);
  sub_1001F573C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v55)
  {
    case 1:
      char v59 = 1;
      sub_1001F59DC();
      uint64_t v28 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v16);
      goto LABEL_12;
    case 2:
      char v60 = 2;
      sub_1001F5988();
      uint64_t v28 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v36);
      goto LABEL_12;
    case 3:
      char v61 = 3;
      sub_1001F5934();
      id v29 = v37;
      uint64_t v28 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v39);
      goto LABEL_12;
    case 4:
      char v62 = 4;
      sub_1001F58E0();
      uint64_t v30 = v40;
      uint64_t v28 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v32 = v41;
      uint64_t v31 = v42;
      goto LABEL_11;
    case 5:
      char v63 = 5;
      sub_1001F588C();
      uint64_t v30 = v43;
      uint64_t v28 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v32 = v44;
      uint64_t v31 = v45;
      goto LABEL_11;
    case 6:
      char v64 = 6;
      sub_1001F5838();
      uint64_t v30 = v46;
      uint64_t v28 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v32 = v47;
      uint64_t v31 = v48;
      goto LABEL_11;
    case 7:
      char v65 = 7;
      sub_1001F57E4();
      uint64_t v30 = v49;
      uint64_t v28 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v32 = v50;
      uint64_t v31 = v51;
      goto LABEL_11;
    case 8:
      char v66 = 8;
      sub_1001F5790();
      uint64_t v30 = v52;
      uint64_t v28 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v32 = v53;
      uint64_t v31 = v54;
LABEL_11:
      (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
LABEL_12:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v25, v28);
      break;
    default:
      char v58 = 0;
      sub_1001F5A30();
      uint64_t v26 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v19);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v25, v26);
      break;
  }
  return result;
}

uint64_t sub_1001F4208(uint64_t a1)
{
  unint64_t v2 = sub_1001F5838();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F4244(uint64_t a1)
{
  unint64_t v2 = sub_1001F5838();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F4280(uint64_t a1)
{
  unint64_t v2 = sub_1001F5934();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F42BC(uint64_t a1)
{
  unint64_t v2 = sub_1001F5934();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F42F8(uint64_t a1)
{
  unint64_t v2 = sub_1001F5790();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F4334(uint64_t a1)
{
  unint64_t v2 = sub_1001F5790();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F4370()
{
  return sub_1001F3858(*v0);
}

uint64_t sub_1001F4378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001F4880(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001F43A0(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1001F43AC(uint64_t a1)
{
  unint64_t v2 = sub_1001F573C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F43E8(uint64_t a1)
{
  unint64_t v2 = sub_1001F573C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F4424(uint64_t a1)
{
  unint64_t v2 = sub_1001F5A30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F4460(uint64_t a1)
{
  unint64_t v2 = sub_1001F5A30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F449C(uint64_t a1)
{
  unint64_t v2 = sub_1001F57E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F44D8(uint64_t a1)
{
  unint64_t v2 = sub_1001F57E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F4514(uint64_t a1)
{
  unint64_t v2 = sub_1001F588C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F4550(uint64_t a1)
{
  unint64_t v2 = sub_1001F588C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F458C(uint64_t a1)
{
  unint64_t v2 = sub_1001F5988();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F45C8(uint64_t a1)
{
  unint64_t v2 = sub_1001F5988();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F4604(uint64_t a1)
{
  unint64_t v2 = sub_1001F58E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F4640(uint64_t a1)
{
  unint64_t v2 = sub_1001F58E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F467C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1001F46AC(uint64_t a1)
{
  unint64_t v2 = sub_1001F59DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F46E8(uint64_t a1)
{
  unint64_t v2 = sub_1001F59DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F4724@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001F4860(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001F4750@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001F3718(*v1);
  *a1 = result;
  return result;
}

char *sub_1001F477C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001F4C8C(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_1001F47A8(void *a1)
{
  return sub_1001F3984(a1, *v1);
}

BOOL sub_1001F47C4(char *a1, char *a2)
{
  return sub_10017C5A4(*a1, *a2);
}

Swift::Int sub_1001F47D0()
{
  return sub_10017C730(0, *v0);
}

void sub_1001F47DC(uint64_t a1)
{
  sub_10017C6FC(a1, *v1);
}

Swift::Int sub_1001F47E4(uint64_t a1)
{
  return sub_10017C730(a1, *v1);
}

uint64_t sub_1001F47EC()
{
  return sub_1001F372C(*v0);
}

void sub_1001F47F4(void *a1@<X8>)
{
  *a1 = &off_100288898;
}

unint64_t sub_1001F480C()
{
  unint64_t result = qword_1002DB9B0;
  if (!qword_1002DB9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DB9B0);
  }
  return result;
}

uint64_t sub_1001F4860(unint64_t a1)
{
  if (a1 > 0xB) {
    return 9;
  }
  else {
    return byte_10026C1B8[a1];
  }
}

uint64_t sub_1001F4880(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746C7561666564 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1885958006 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F65646976 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756F72676B636162 && a2 == 0xEA0000000000646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6563696F76 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x69736E6F70736572 && a2 == 0xEE00617461446576 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6D61657274537661 && a2 == 0xEB00000000676E69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x69736E6F70736572 && a2 == 0xEC00000056416576 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E6769536C6C6163 && a2 == 0xED0000676E696C61)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

char *sub_1001F4C8C(void *a1)
{
  uint64_t v2 = sub_100157064(&qword_1002DB9B8);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  __chkstk_darwin(v2);
  uint64_t v69 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100157064(&qword_1002DB9C0);
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v63 = v4;
  __chkstk_darwin(v4);
  uint64_t v72 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100157064(&qword_1002DB9C8);
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  __chkstk_darwin(v6);
  id v68 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100157064(&qword_1002DB9D0);
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100157064(&qword_1002DB9D8);
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v57 = v10;
  __chkstk_darwin(v10);
  unsigned __int8 v70 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100157064(&qword_1002DB9E0);
  uint64_t v55 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  id v67 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100157064(&qword_1002DB9E8);
  uint64_t v53 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  char v66 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_100157064(&qword_1002DB9F0);
  uint64_t v51 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100157064(&qword_1002DB9F8);
  uint64_t v49 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100157064(&qword_1002DBA00);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1[3];
  id v73 = a1;
  sub_10015714C(a1, v23);
  sub_1001F573C();
  uint64_t v24 = v74;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    uint64_t v48 = v18;
    uint64_t v47 = v16;
    uint64_t v26 = v70;
    uint64_t v25 = v71;
    unint64_t v27 = v72;
    uint64_t v74 = v20;
    uint64_t v28 = v22;
    uint64_t v29 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v29 + 16) == 1)
    {
      uint64_t v22 = (char *)*(unsigned __int8 *)(v29 + 32);
      switch(*(unsigned char *)(v29 + 32))
      {
        case 1:
          uint64_t v30 = v74;
          char v76 = 1;
          sub_1001F59DC();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v32 = *(void (**)(char *, uint64_t))(v51 + 8);
          uint64_t v33 = v15;
          uint64_t v34 = &v86;
          goto LABEL_9;
        case 2:
          uint64_t v30 = v74;
          char v77 = 2;
          sub_1001F5988();
          uint64_t v39 = v66;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v32 = *(void (**)(char *, uint64_t))(v53 + 8);
          uint64_t v33 = v39;
          uint64_t v34 = &v87;
          goto LABEL_9;
        case 3:
          uint64_t v30 = v74;
          char v78 = 3;
          sub_1001F5934();
          uint64_t v40 = v67;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v32 = *(void (**)(char *, uint64_t))(v55 + 8);
          uint64_t v33 = v40;
          uint64_t v34 = &v85;
          goto LABEL_9;
        case 4:
          uint64_t v30 = v74;
          char v79 = 4;
          sub_1001F58E0();
          uint64_t v25 = v26;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v42 = v56;
          uint64_t v41 = v57;
          goto LABEL_16;
        case 5:
          uint64_t v30 = v74;
          char v80 = 5;
          sub_1001F588C();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v42 = v58;
          uint64_t v41 = v59;
          goto LABEL_16;
        case 6:
          uint64_t v30 = v74;
          char v81 = 6;
          sub_1001F5838();
          uint64_t v25 = v68;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v42 = v60;
          uint64_t v41 = v61;
LABEL_16:
          uint64_t v32 = *(void (**)(char *, uint64_t))(v42 + 8);
          uint64_t v33 = v25;
          goto LABEL_17;
        case 7:
          uint64_t v44 = v74;
          char v82 = 7;
          sub_1001F57E4();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v62 + 8))(v27, v63);
          swift_bridgeObjectRelease();
          uint64_t v30 = v44;
          goto LABEL_18;
        case 8:
          uint64_t v45 = v74;
          char v83 = 8;
          sub_1001F5790();
          id v46 = v69;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v64 + 8))(v46, v65);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v19);
          break;
        default:
          uint64_t v30 = v74;
          char v75 = 0;
          sub_1001F5A30();
          uint64_t v31 = v48;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v32 = *(void (**)(char *, uint64_t))(v49 + 8);
          uint64_t v33 = v31;
          uint64_t v34 = &v84;
LABEL_9:
          uint64_t v41 = *(v34 - 32);
LABEL_17:
          v32(v33, v41);
          swift_bridgeObjectRelease();
LABEL_18:
          (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v19);
          break;
      }
    }
    else
    {
      uint64_t v35 = v19;
      uint64_t v36 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v38 = v37;
      sub_100157064(&qword_1002D8918);
      void *v38 = &type metadata for SURLSessionTrafficClass;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, enum case for DecodingError.typeMismatch(_:), v36);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v22, v35);
    }
  }
  sub_100157190((uint64_t)v73);
  return v22;
}

unint64_t sub_1001F573C()
{
  unint64_t result = qword_1002DBA08;
  if (!qword_1002DBA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA08);
  }
  return result;
}

unint64_t sub_1001F5790()
{
  unint64_t result = qword_1002DBA10;
  if (!qword_1002DBA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA10);
  }
  return result;
}

unint64_t sub_1001F57E4()
{
  unint64_t result = qword_1002DBA18;
  if (!qword_1002DBA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA18);
  }
  return result;
}

unint64_t sub_1001F5838()
{
  unint64_t result = qword_1002DBA20;
  if (!qword_1002DBA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA20);
  }
  return result;
}

unint64_t sub_1001F588C()
{
  unint64_t result = qword_1002DBA28;
  if (!qword_1002DBA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA28);
  }
  return result;
}

unint64_t sub_1001F58E0()
{
  unint64_t result = qword_1002DBA30;
  if (!qword_1002DBA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA30);
  }
  return result;
}

unint64_t sub_1001F5934()
{
  unint64_t result = qword_1002DBA38;
  if (!qword_1002DBA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA38);
  }
  return result;
}

unint64_t sub_1001F5988()
{
  unint64_t result = qword_1002DBA40;
  if (!qword_1002DBA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA40);
  }
  return result;
}

unint64_t sub_1001F59DC()
{
  unint64_t result = qword_1002DBA48;
  if (!qword_1002DBA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA48);
  }
  return result;
}

unint64_t sub_1001F5A30()
{
  unint64_t result = qword_1002DBA50;
  if (!qword_1002DBA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBA50);
  }
  return result;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.CodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.CodingKeys;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.DefaultCodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.DefaultCodingKeys;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.VoipCodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.VoipCodingKeys;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.VideoCodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.VideoCodingKeys;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.BackgroundCodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.BackgroundCodingKeys;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.VoiceCodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.VoiceCodingKeys;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.ResponsiveDataCodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.ResponsiveDataCodingKeys;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.AvStreamingCodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.AvStreamingCodingKeys;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.ResponsiveAVCodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.ResponsiveAVCodingKeys;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass.CallSignalingCodingKeys()
{
  return &type metadata for SURLSessionTrafficClass.CallSignalingCodingKeys;
}

uint64_t _s13FTMInternal_423SURLSessionTrafficClassOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s13FTMInternal_423SURLSessionTrafficClassOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F5C88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SURLSessionTrafficClass()
{
  return &type metadata for SURLSessionTrafficClass;
}

unint64_t sub_1001F5CC4()
{
  unint64_t result = qword_1002DBAA8;
  if (!qword_1002DBAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAA8);
  }
  return result;
}

unint64_t sub_1001F5D1C()
{
  unint64_t result = qword_1002DBAB0;
  if (!qword_1002DBAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAB0);
  }
  return result;
}

unint64_t sub_1001F5D74()
{
  unint64_t result = qword_1002DBAB8;
  if (!qword_1002DBAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAB8);
  }
  return result;
}

unint64_t sub_1001F5DCC()
{
  unint64_t result = qword_1002DBAC0;
  if (!qword_1002DBAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAC0);
  }
  return result;
}

unint64_t sub_1001F5E24()
{
  unint64_t result = qword_1002DBAC8;
  if (!qword_1002DBAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAC8);
  }
  return result;
}

unint64_t sub_1001F5E7C()
{
  unint64_t result = qword_1002DBAD0;
  if (!qword_1002DBAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAD0);
  }
  return result;
}

unint64_t sub_1001F5ED4()
{
  unint64_t result = qword_1002DBAD8;
  if (!qword_1002DBAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAD8);
  }
  return result;
}

unint64_t sub_1001F5F2C()
{
  unint64_t result = qword_1002DBAE0;
  if (!qword_1002DBAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAE0);
  }
  return result;
}

unint64_t sub_1001F5F84()
{
  unint64_t result = qword_1002DBAE8;
  if (!qword_1002DBAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAE8);
  }
  return result;
}

unint64_t sub_1001F5FDC()
{
  unint64_t result = qword_1002DBAF0;
  if (!qword_1002DBAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAF0);
  }
  return result;
}

unint64_t sub_1001F6034()
{
  unint64_t result = qword_1002DBAF8;
  if (!qword_1002DBAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBAF8);
  }
  return result;
}

unint64_t sub_1001F608C()
{
  unint64_t result = qword_1002DBB00;
  if (!qword_1002DBB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB00);
  }
  return result;
}

unint64_t sub_1001F60E4()
{
  unint64_t result = qword_1002DBB08;
  if (!qword_1002DBB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB08);
  }
  return result;
}

unint64_t sub_1001F613C()
{
  unint64_t result = qword_1002DBB10;
  if (!qword_1002DBB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB10);
  }
  return result;
}

unint64_t sub_1001F6194()
{
  unint64_t result = qword_1002DBB18;
  if (!qword_1002DBB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB18);
  }
  return result;
}

unint64_t sub_1001F61EC()
{
  unint64_t result = qword_1002DBB20;
  if (!qword_1002DBB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB20);
  }
  return result;
}

unint64_t sub_1001F6244()
{
  unint64_t result = qword_1002DBB28;
  if (!qword_1002DBB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB28);
  }
  return result;
}

unint64_t sub_1001F629C()
{
  unint64_t result = qword_1002DBB30;
  if (!qword_1002DBB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB30);
  }
  return result;
}

unint64_t sub_1001F62F4()
{
  unint64_t result = qword_1002DBB38;
  if (!qword_1002DBB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB38);
  }
  return result;
}

unint64_t sub_1001F634C()
{
  unint64_t result = qword_1002DBB40;
  if (!qword_1002DBB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB40);
  }
  return result;
}

unint64_t sub_1001F63A4()
{
  unint64_t result = qword_1002DBB48;
  if (!qword_1002DBB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002DBB48);
  }
  return result;
}

uint64_t sub_1001F63FC()
{
  uint64_t v1 = self;
  id v2 = [v1 defaultCenter];
  if (qword_1002D7AE8 != -1) {
    swift_once();
  }
  [v2 removeObserver:v0 name:static NSNotificationName.subsIdSelectionChange object:0];

  id v3 = [v1 defaultCenter];
  if (qword_1002D7AF8 != -1) {
    swift_once();
  }
  [v3 removeObserver:v0 name:static NSNotificationName.dashboardMetricUpdate object:0];

  id v4 = [v1 defaultCenter];
  if (qword_1002D7AF0 != -1) {
    swift_once();
  }
  [v4 removeObserver:v0 name:static NSNotificationName.numberOfSubsChanged object:0];

  id v5 = [v1 defaultCenter];
  if (qword_1002D7AD0 != -1) {
    swift_once();
  }
  [v5 removeObserver:v0 name:static NSNotificationName.NewABMMetric object:0];

  id v6 = [v1 defaultCenter];
  if (qword_1002D7AD8 != -1) {
    swift_once();
  }
  [v6 removeObserver:v0 name:static NSNotificationName.NewCTMetric object:0];

  id v7 = [v1 defaultCenter];
  if (qword_1002D7B00 != -1) {
    swift_once();
  }
  [v7 removeObserver:v0 name:static NSNotificationName.isAirPlaneModeEnabled object:0];

  sub_10015E120(v0 + 24);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001F66E8()
{
  sub_1001F63FC();

  return _swift_deallocClassInstance(v0, 65, 7);
}

uint64_t sub_1001F671C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  uint64_t v82 = a5;
  id v73 = a3;
  uint64_t v81 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  char v80 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  char v78 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (uint64_t v12 = *(void *)(a1 + 16)) != 0)
  {
    uint64_t v95 = v82 + 16;
    uint64_t v13 = a1;
    uint64_t v14 = qword_1002D7B18;
    uint64_t v72 = v13;
    swift_bridgeObjectRetain();
    if (v14 != -1) {
      swift_once();
    }
    BOOL v15 = *(unsigned char *)(qword_1002E31C8 + 26) == 1;
    uint64_t v71 = a4;
    uint64_t v70 = a2;
    if (v15)
    {
      if (qword_1002D7AA0 != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      sub_100157064((uint64_t *)&unk_1002D97F0);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_100267EF0;
      *(void *)(v16 + 56) = &type metadata for Int;
      *(void *)(v16 + 64) = &protocol witness table for Int;
      *(void *)(v16 + 32) = v12;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1002D7AA0 != -1) {
        swift_once();
      }
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
    }
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = _swiftEmptyArrayStorage;
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v74 = &v100;
    char v75 = (void (**)(char *, uint64_t))(v8 + 8);
    char v76 = (void (**)(char *, uint64_t))(v10 + 8);
    id v18 = (void **)(v72 + 56);
    do
    {
      uint64_t v19 = *(v18 - 3);
      uint64_t v20 = *(v18 - 2);
      uint64_t v22 = *(v18 - 1);
      uint64_t v21 = *v18;
      uint64_t Strong = swift_weakLoadStrong();
      id v96 = v21;
      if (Strong)
      {
        uint64_t v24 = *(void **)(Strong + 48);
        id v25 = v19;
        id v26 = v20;
        id v27 = v22;
        id v28 = v21;
        uint64_t v29 = v24;
        swift_release();
        dispatch_group_enter(v29);
      }
      else
      {
        id v30 = v19;
        id v31 = v20;
        id v32 = v22;
        id v33 = v21;
      }
      int v34 = *(_DWORD *)(qword_1002E31C8 + 148);
      int v35 = *(unsigned __int8 *)(qword_1002E31C8 + 152);
      uint64_t v36 = swift_weakLoadStrong();
      if (v35 == 1)
      {
        if (v36)
        {
          id v37 = *(id *)(v36 + 48);
          swift_release();
          dispatch_group_leave(v37);
        }
      }
      else if (v36)
      {
        id v91 = *(id *)(v36 + 16);
        swift_release();
        uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v94 = v38;
        uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v84 = v39;
        uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v40;
        uint64_t v42 = swift_allocObject();
        uint64_t v43 = v82;
        *(void *)(v42 + 16) = v77;
        *(void *)(v42 + 24) = v43;
        swift_retain();
        swift_retain();
        uint64_t v44 = sub_1001DDCAC();
        uint64_t v90 = v44;
        uint64_t v45 = swift_allocObject();
        id v92 = v20;
        uint64_t v46 = v45;
        *(void *)(v45 + 16) = sub_1001FB18C;
        *(void *)(v45 + 24) = v42;
        uint64_t v87 = v42;
        uint64_t v89 = *(void *)(v44 + 24);
        uint64_t v47 = swift_allocObject();
        swift_weakInit();
        uint64_t v48 = swift_allocObject();
        uint64_t v88 = v47;
        uint64_t v49 = v93;
        *(void *)(v48 + 16) = v47;
        *(void *)(v48 + 24) = v49;
        uint64_t v50 = v85;
        *(void *)(v48 + 32) = v94;
        *(void *)(v48 + 40) = v50;
        uint64_t v51 = v83;
        *(void *)(v48 + 48) = v84;
        *(void *)(v48 + 56) = v51;
        uint64_t v86 = v41;
        *(void *)(v48 + 64) = v41;
        *(_DWORD *)(v48 + 72) = v34;
        *(void *)(v48 + 80) = sub_10015E118;
        *(void *)(v48 + 88) = v46;
        id v102 = sub_100198128;
        id v103 = (void *)v48;
        Swift::String aBlock = _NSConcreteStackBlock;
        uint64_t v99 = 1107296256;
        id v100 = sub_1001E0068;
        id v101 = &unk_10028F1C8;
        uint64_t v85 = (uint64_t)_Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v93 = (uint64_t)v19;
        uint64_t v52 = v78;
        static DispatchQoS.unspecified.getter();
        id v104 = _swiftEmptyArrayStorage;
        sub_1001FB104((unint64_t *)&qword_1002DA560, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100157064((uint64_t *)&unk_1002D9600);
        sub_1001AE4E8();
        uint64_t v53 = v80;
        uint64_t v54 = v22;
        uint64_t v55 = v81;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v56 = (const void *)v85;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v56);
        uint64_t v57 = v55;
        uint64_t v22 = v54;
        (*v75)(v53, v57);
        uint64_t v58 = v52;
        uint64_t v19 = (void *)v93;
        (*v76)(v58, v79);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v20 = v92;
        swift_release();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      v18 += 5;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v59 = swift_weakLoadStrong();
    if (v59)
    {
      id v60 = *(id *)(v59 + 48);
      swift_release();
      sub_1001AE450();
      uint64_t v61 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v62 = (void *)swift_allocObject();
      uint64_t v63 = v73;
      v62[2] = v70;
      v62[3] = v63;
      uint64_t v64 = v82;
      v62[4] = v71;
      v62[5] = v64;
      v62[6] = v77;
      id v102 = sub_1001FB0DC;
      id v103 = v62;
      Swift::String aBlock = _NSConcreteStackBlock;
      uint64_t v99 = 1107296256;
      id v100 = sub_1001E0068;
      id v101 = &unk_10028F100;
      uint64_t v65 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_errorRetain();
      swift_retain();
      char v66 = v78;
      static DispatchQoS.unspecified.getter();
      id v97 = _swiftEmptyArrayStorage;
      sub_1001FB104((unint64_t *)&qword_1002DA560, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100157064((uint64_t *)&unk_1002D9600);
      sub_1001AE4E8();
      id v67 = v80;
      uint64_t v68 = v81;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_group.notify(qos:flags:queue:execute:)();
      _Block_release(v65);

      (*v75)(v67, v68);
      (*v76)(v66, v79);
      swift_release();
    }
    return swift_release();
  }
  else
  {
    if (qword_1002D7AA0 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    return v73(0, a2);
  }
}

void sub_1001F7250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Metric(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && *(void *)(a1 + 16))
  {
    uint64_t v9 = (unint64_t *)(a3 + 16);
    unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    sub_1001FC108(a1 + v10, (uint64_t)v8, type metadata accessor for Metric);
    swift_beginAccess();
    unint64_t v11 = *v9;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v11 = sub_1001EAB90(0, *(void *)(v11 + 16) + 1, 1, v11);
      *uint64_t v9 = v11;
    }
    unint64_t v14 = *(void *)(v11 + 16);
    unint64_t v13 = *(void *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      unint64_t v11 = sub_1001EAB90(v13 > 1, v14 + 1, 1, v11);
      *uint64_t v9 = v11;
    }
    *(void *)(v11 + 16) = v14 + 1;
    sub_1001FB1EC((uint64_t)v8, v11 + v10 + *(void *)(v6 + 72) * v14, type metadata accessor for Metric);
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v16 = *(id *)(Strong + 48);
    swift_release();
    dispatch_group_leave(v16);
  }
}

uint64_t sub_1001F7440(uint64_t a1, uint64_t (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    a2(0, a1);
  }
  else
  {
    uint64_t v6 = a5 + 16;
    swift_beginAccess();
    if (!*(void *)(*(void *)v6 + 16)) {
      return a2(_swiftEmptyArrayStorage, 0);
    }
    sub_100157064(&qword_1002D9670);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100267EF0;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 32) = 0xD000000000000014;
    *(void *)(v7 + 40) = 0x800000010023FA10;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v8 = swift_bridgeObjectRetain();
    a2((void *)v8, 0);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v12 = *(void *)(v10 + 32);
    uint64_t result = swift_release();
    if (Strong)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v12 + 32))(ObjectType, v12);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1001F75E0(uint64_t a1)
{
  uint64_t v177 = a1;
  uint64_t v2 = sub_100157064(&qword_1002D8210);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v172 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100157064(&qword_1002DBDA0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (unint64_t)&v172 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (uint64_t *)((char *)&v172 - v13);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v181 = (char *)&v172 - v16;
  __chkstk_darwin(v15);
  uint64_t v191 = (uint64_t)&v172 - v17;
  uint64_t v195 = sub_100157064(&qword_1002DBDA8);
  uint64_t v175 = *(void *)(v195 - 8);
  __chkstk_darwin(v195);
  uint64_t v183 = (char *)&v172 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100157064(&qword_1002DBDB0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  unint64_t v209 = (uint64_t *)((char *)&v172 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  uint64_t v194 = (unint64_t *)((char *)&v172 - v22);
  uint64_t v23 = sub_100157064(&qword_1002DA770);
  unint64_t v174 = *(void *)(v23 - 8);
  __chkstk_darwin(v23 - 8);
  id v25 = (Swift::String *)((char *)&v172 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v178 = *(void *)(v26 - 8);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v173 = (char *)&v172 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  unint64_t v208 = (char *)&v172 - v29;
  uint64_t v207 = type metadata accessor for Metric(0);
  uint64_t v176 = *(void *)(v207 - 8);
  __chkstk_darwin(v207);
  uint64_t v213 = (unint64_t *)((char *)&v172 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = type metadata accessor for DashboardViewModelObject();
  uint64_t v214 = *(void *)(v31 - 8);
  unint64_t v215 = v31;
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v193 = (uint64_t)&v172 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v192 = (uint64_t)&v172 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v212 = (uint64_t *)((char *)&v172 - v37);
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v172 - v38;
  if (qword_1002D7AA0 != -1) {
    goto LABEL_144;
  }
  while (2)
  {
    static os_log_type_t.default.getter();
    uint64_t result = os_log(_:dso:log:type:_:)();
    if (*(unsigned char *)(v1 + 40)) {
      return result;
    }
    unsigned __int8 v179 = v4;
    uint64_t v41 = v177;
    int64_t v42 = *(void *)(v177 + 16);
    uint64_t v43 = _swiftEmptyArrayStorage;
    long long v210 = (char *)v1;
    unsigned __int8 v182 = (uint64_t *)v8;
    unint64_t v172 = v11;
    uint64_t v180 = v14;
    uint64_t v189 = v26;
    unint64_t v211 = v42;
    if (v42)
    {
      uint64_t v221 = _swiftEmptyArrayStorage;
      sub_1001B24C8(0, v42, 0);
      uint64_t v44 = 0;
      unint64_t v187 = v41 + ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80));
      unint64_t v186 = *(void *)(v176 + 72);
      char v185 = (void (**)(char *, uint64_t, uint64_t))(v178 + 16);
      uint64_t v184 = (void (**)(char *, char *, uint64_t))(v178 + 32);
      *(void *)&long long v188 = v25;
      while (1)
      {
        uint64_t v206 = v44;
        uint64_t v45 = v213;
        sub_1001FC108(v187 + v186 * (void)v44, (uint64_t)v213, type metadata accessor for Metric);
        uint64_t v46 = v207;
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v204 = v48;
        long long v205 = (char *)v47;
        uint64_t v203 = (void (**)(char *, uint64_t, uint64_t, uint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v202 = v49;
        int64_t v201 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        int64_t v200 = v50;
        uint64_t v51 = *(void (***)(char *, uint64_t))((char *)v45 + *(int *)(v46 + 32));
        uint64_t v199 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v198 = v52;
        unint64_t v197 = (void (**)(char *, uint64_t, uint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)();
        char v196 = v53;
        Swift::String v54 = String.init(_:)(*(id *)((char *)v45 + *(int *)(v46 + 36)));
        uint64_t countAndFlagsBits = v54._countAndFlagsBits;
        object = v54._object;
        if (qword_1002D7A68 != -1) {
          swift_once();
        }
        uint64_t v57 = qword_1002E3120;
        uint64_t v58 = *(void *)(qword_1002E3120 + 16);
        if (v58)
        {
          uint64_t v190 = v51;
          swift_bridgeObjectRetain();
          sub_1001571E0();
          uint64_t v59 = (unint64_t *)(v57 + 40);
          while (1)
          {
            uint64_t v61 = *(v59 - 1);
            unint64_t v60 = *v59;
            Swift::String v220 = v54;
            uint64_t v218 = v61;
            unint64_t v219 = v60;
            swift_bridgeObjectRetain();
            if (StringProtocol.contains<A>(_:)()) {
              break;
            }
            v59 += 2;
            swift_bridgeObjectRelease();
            if (!--v58)
            {
              swift_bridgeObjectRelease();
              goto LABEL_13;
            }
          }
          swift_bridgeObjectRelease();
          Swift::String v220 = v54;
          uint64_t v218 = v61;
          unint64_t v219 = v60;
          uint64_t v216 = 0;
          unint64_t v217 = 0xE000000000000000;
          uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v63 = v62;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          object = v63;
LABEL_13:
          uint64_t v26 = v189;
        }
        int v64 = *(_DWORD *)((char *)v213 + *(int *)(v207 + 52));
        (*v185)(v208, (uint64_t)v213 + *(int *)(v207 + 44), v26);
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v67 = v66;
        v220._uint64_t countAndFlagsBits = v65;
        v220._object = v66;
        uint64_t v218 = 0x2D6E6F6974636573;
        unint64_t v219 = 0xE800000000000000;
        sub_1001571E0();
        if ((StringProtocol.contains<A>(_:)() & 1) == 0) {
          goto LABEL_19;
        }
        v220._uint64_t countAndFlagsBits = v65;
        v220._object = v67;
        uint64_t v218 = 45;
        unint64_t v219 = 0xE100000000000000;
        uint64_t v68 = (void *)StringProtocol.components<A>(separatedBy:)();
        if (!v68[2]) {
          break;
        }
        uint64_t v70 = v68[4];
        uint64_t v69 = v68[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_20:
        int64_t v42 = v211;
        uint64_t v71 = v204;
        *(void *)uint64_t v39 = v205;
        *((void *)v39 + 1) = v71;
        uint64_t v72 = v202;
        *((void *)v39 + 2) = v203;
        *((void *)v39 + 3) = v72;
        id v73 = v200;
        *((void *)v39 + 4) = v201;
        *((void *)v39 + 5) = v73;
        uint64_t v74 = v198;
        *((void *)v39 + 6) = v199;
        *((void *)v39 + 7) = v74;
        char v75 = v196;
        *((void *)v39 + 8) = v197;
        *((void *)v39 + 9) = v75;
        *((void *)v39 + 10) = countAndFlagsBits;
        *((void *)v39 + 11) = object;
        *((_DWORD *)v39 + 24) = v64;
        unint64_t v76 = v215;
        (*v184)(&v39[*(int *)(v215 + 44)], v208, v26);
        uint64_t v77 = &v39[*(int *)(v76 + 48)];
        *(void *)uint64_t v77 = v70;
        *((void *)v77 + 1) = v69;
        sub_1001FC170((uint64_t)v213, type metadata accessor for Metric);
        uint64_t v43 = v221;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001B24C8(0, v43[2] + 1, 1);
          uint64_t v43 = v221;
        }
        id v25 = (Swift::String *)v188;
        char v78 = v206;
        unint64_t v11 = v43[2];
        unint64_t v79 = v43[3];
        if (v11 >= v79 >> 1)
        {
          sub_1001B24C8(v79 > 1, v11 + 1, 1);
          uint64_t v43 = v221;
        }
        uint64_t v44 = (unsigned int (**)(unint64_t *, uint64_t, uint64_t))((char *)v78 + 1);
        v43[2] = v11 + 1;
        sub_1001FB1EC((uint64_t)v39, (uint64_t)v43+ ((*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80))+ *(void *)(v214 + 72) * v11, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
        if (v44 == (unsigned int (**)(unint64_t *, uint64_t, uint64_t))v42) {
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      uint64_t v70 = 0;
      uint64_t v69 = 0;
      goto LABEL_20;
    }
LABEL_25:
    uint64_t v80 = type metadata accessor for DashboardViewModel();
    uint64_t v82 = sub_1001FB104(&qword_1002DBD98, v81, (void (*)(uint64_t))type metadata accessor for DashboardViewModel);
    unint64_t v198 = (char *)v80;
    unint64_t v208 = (char *)v82;
    uint64_t v83 = v210;
    unint64_t v1 = ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    swift_release();
    *((void *)v83 + 7) = v43;
    swift_bridgeObjectRelease();
    uint64_t v84 = _swiftEmptyArrayStorage;
    uint64_t v39 = v181;
    if (v42)
    {
      v220._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      sub_1001B2498(0, v42, 0);
      uint64_t v84 = (void *)v220._countAndFlagsBits;
      uint64_t v85 = v177 + ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80));
      unint64_t v11 = *(void *)(v176 + 72);
      unint64_t v1 = v174;
      do
      {
        sub_1001F9390(v85, v25);
        v220._uint64_t countAndFlagsBits = (uint64_t)v84;
        unint64_t v87 = v84[2];
        unint64_t v86 = v84[3];
        if (v87 >= v86 >> 1)
        {
          sub_1001B2498(v86 > 1, v87 + 1, 1);
          unint64_t v1 = v174;
          uint64_t v84 = (void *)v220._countAndFlagsBits;
        }
        v84[2] = v87 + 1;
        sub_10015D474((uint64_t)v25, (uint64_t)v84+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(void *)(v1 + 72) * v87, &qword_1002DA770);
        v85 += v11;
        --v211;
      }
      while (v211);
    }
    uint64_t v88 = v195;
    if (v84[2])
    {
      unint64_t v1 = sub_100157064(&qword_1002DB830);
      uint64_t v89 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v89 = &_swiftEmptyDictionarySingleton;
    }
    uint64_t v90 = v210;
    v220._uint64_t countAndFlagsBits = (uint64_t)v89;
    uint64_t v91 = swift_bridgeObjectRetain();
    sub_1001FBBB0(v91, 1, &v220);
    swift_bridgeObjectRelease();
    id v4 = (char *)v220._countAndFlagsBits;
    uint64_t v92 = *((void *)v90 + 7);
    uint64_t v206 = (unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v175 + 48);
    uint64_t v207 = v175 + 56;
    id v25 = (Swift::String *)(v214 + 56);
    uint64_t v213 = (void *)(v214 + 48);
    uint64_t v203 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v178 + 56);
    int64_t v200 = (void (**)(char *, uint64_t, uint64_t))(v178 + 16);
    uint64_t v8 = *(char **)(v92 + 16);
    uint64_t v199 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v178 + 48);
    unint64_t v197 = (void (**)(char *, uint64_t, uint64_t))(v178 + 32);
    char v196 = (void (**)(unint64_t, char *, uint64_t))(v178 + 24);
    uint64_t v190 = (void (**)(char *, uint64_t))(v178 + 8);
    uint64_t v204 = v92;
    swift_bridgeObjectRetain();
    uint64_t v26 = 0;
    long long v188 = xmmword_100267EF0;
    int64_t v201 = _swiftEmptyArrayStorage;
    unint64_t v14 = v209;
    long long v205 = v8;
    while (1)
    {
      if ((char *)v26 == v8)
      {
        uint64_t v93 = 1;
        uint64_t v26 = (uint64_t)v8;
      }
      else
      {
        if ((unint64_t)v26 >= *(void *)(v204 + 16)) {
          goto LABEL_143;
        }
        uint64_t v94 = (uint64_t)&v183[*(int *)(v88 + 48)];
        unint64_t v1 = (unint64_t)type metadata accessor for DashboardViewModelObject;
        sub_1001FC108(v204+ ((*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80))+ *(void *)(v214 + 72) * v26, v94, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
        uint64_t v95 = (uint64_t)v14 + *(int *)(v88 + 48);
        *unint64_t v14 = v26;
        sub_1001FB1EC(v94, v95, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
        uint64_t v93 = 0;
        ++v26;
      }
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))v207)(v14, v93, 1, v88);
      id v96 = v194;
      sub_10015D474((uint64_t)v14, (uint64_t)v194, &qword_1002DBDB0);
      if ((*v206)(v96, 1, v88) == 1) {
        break;
      }
      unint64_t v211 = *v96;
      id v97 = v212;
      sub_1001FB1EC((uint64_t)v96 + *(int *)(v88 + 48), (uint64_t)v212, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      id v98 = (void *)v97[5];
      v220._uint64_t countAndFlagsBits = v97[4];
      v220._object = v98;
      swift_bridgeObjectRetain();
      uint64_t v99 = String.init<A>(_:)();
      id v101 = v100;
      id v102 = (void *)v97[9];
      v220._uint64_t countAndFlagsBits = v97[8];
      v220._object = v102;
      swift_bridgeObjectRetain();
      uint64_t v103 = String.init<A>(_:)();
      id v105 = v104;
      v220._uint64_t countAndFlagsBits = v99;
      v220._object = v101;
      swift_bridgeObjectRetain();
      v106._uint64_t countAndFlagsBits = v103;
      v106._object = v105;
      String.append(_:)(v106);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v11 = (unint64_t)v220._object;
      if (!*((void *)v4 + 2))
      {
        uint64_t v109 = v191;
        ((void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v25->_countAndFlagsBits)(v191, 1, 1, v215);
        goto LABEL_63;
      }
      uint64_t v107 = v220._countAndFlagsBits;
      swift_bridgeObjectRetain();
      unint64_t v108 = sub_1001EB868(v107, v11);
      uint64_t v109 = v191;
      if (v110)
      {
        uint64_t v111 = v214;
        sub_1001FC108(*((void *)v4 + 7) + *(void *)(v214 + 72) * v108, v191, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
        id v112 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v111 + 56);
        uint64_t v113 = v109;
        uint64_t v114 = 0;
      }
      else
      {
        id v112 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v25->_countAndFlagsBits;
        uint64_t v113 = v191;
        uint64_t v114 = 1;
      }
      unint64_t v1 = v215;
      v112(v113, v114, 1, v215);
      swift_bridgeObjectRelease();
      id v115 = (unsigned int (*)(uint64_t, uint64_t, unint64_t))*v213;
      if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))*v213)(v109, 1, v1) == 1)
      {
LABEL_63:
        swift_bridgeObjectRelease();
        sub_10015D658(v109, &qword_1002DBDA0);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v201 = sub_1001EB460(0, v201[2] + 1, 1, v201);
        }
        unint64_t v14 = v209;
        uint64_t v8 = v205;
        unint64_t v1 = v201[2];
        unint64_t v128 = v201[3];
        if (v1 >= v128 >> 1) {
          int64_t v201 = sub_1001EB460((void *)(v128 > 1), v1 + 1, 1, v201);
        }
        uint64_t v88 = v195;
        objc_super v129 = v201;
        v201[2] = v1 + 1;
        uint64_t v130 = (uint64_t)v212;
        v129[v1 + 4] = v211;
        sub_1001FC170(v130, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      }
      else
      {
        sub_10015D658(v109, &qword_1002DBDA0);
        if (*((void *)v4 + 2))
        {
          swift_bridgeObjectRetain();
          unint64_t v116 = sub_1001EB868(v107, v11);
          unint64_t v14 = v209;
          if (v117)
          {
            sub_1001FC108(*((void *)v4 + 7) + *(void *)(v214 + 72) * v116, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
            id v118 = v39;
            uint64_t v119 = 0;
          }
          else
          {
            id v118 = v39;
            uint64_t v119 = 1;
          }
          unint64_t v1 = v215;
          v112((uint64_t)v118, v119, 1, v215);
          swift_bridgeObjectRelease();
        }
        else
        {
          v112((uint64_t)v39, 1, 1, v1);
          unint64_t v14 = v209;
        }
        if (v115((uint64_t)v39, 1, v1))
        {
          swift_bridgeObjectRelease();
          sub_10015D658((uint64_t)v39, &qword_1002DBDA0);
          sub_1001FC170((uint64_t)v212, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
          uint64_t v88 = v195;
          uint64_t v8 = v205;
        }
        else
        {
          uint64_t v120 = *((void *)v39 + 11);
          uint64_t v202 = *((void *)v39 + 10);
          swift_bridgeObjectRetain();
          sub_10015D658((uint64_t)v39, &qword_1002DBDA0);
          if (*((void *)v4 + 2))
          {
            swift_bridgeObjectRetain();
            unint64_t v121 = sub_1001EB868(v107, v11);
            uint64_t v123 = (uint64_t)v180;
            if (v122)
            {
              sub_1001FC108(*((void *)v4 + 7) + *(void *)(v214 + 72) * v121, (uint64_t)v180, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
              uint64_t v124 = v123;
              uint64_t v125 = 0;
            }
            else
            {
              uint64_t v124 = (uint64_t)v180;
              uint64_t v125 = 1;
            }
            unint64_t v1 = v215;
            v112(v124, v125, 1, v215);
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v123 = (uint64_t)v180;
            v112((uint64_t)v180, 1, 1, v1);
          }
          if (v115(v123, 1, v1))
          {
            sub_10015D658(v123, &qword_1002DBDA0);
            uint64_t v126 = (uint64_t)v179;
            (*v203)(v179, 1, 1, v189);
            goto LABEL_61;
          }
          uint64_t v127 = v123 + *(int *)(v1 + 44);
          uint64_t v126 = (uint64_t)v179;
          unint64_t v1 = v189;
          (*v200)(v179, v127, v189);
          sub_10015D658(v123, &qword_1002DBDA0);
          (*v203)((char *)v126, 0, 1, v1);
          if ((*v199)(v126, 1, v1) == 1)
          {
LABEL_61:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1001FC170((uint64_t)v212, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
            sub_10015D658(v126, &qword_1002D8210);
            uint64_t v39 = v181;
            uint64_t v88 = v195;
            unint64_t v14 = v209;
            uint64_t v8 = v205;
          }
          else
          {
            (*v197)(v173, v126, v189);
            unint64_t v131 = *((void *)v210 + 7);
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v39 = v181;
            if (isUniquelyReferenced_nonNull_native)
            {
              unint64_t v133 = v211;
              if ((v211 & 0x8000000000000000) != 0) {
                goto LABEL_146;
              }
            }
            else
            {
              unint64_t v131 = sub_1001B4AF4(v131);
              unint64_t v133 = v211;
              if ((v211 & 0x8000000000000000) != 0) {
                goto LABEL_146;
              }
            }
            if (v133 >= *(void *)(v131 + 16)) {
              goto LABEL_147;
            }
            unint64_t v187 = (*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80);
            char v185 = *(void (***)(char *, uint64_t, uint64_t))(v214 + 72);
            unint64_t v186 = (void)v185 * v133;
            unint64_t v134 = v131 + v187 + (void)v185 * v133;
            *(void *)(v134 + 80) = v202;
            *(void *)(v134 + 88) = v120;
            swift_bridgeObjectRelease();
            uint64_t v135 = v210;
            ObservableObject<>.objectWillChange.getter();
            ObservableObjectPublisher.send()();
            swift_release();
            *((void *)v135 + 7) = v131;
            swift_bridgeObjectRelease();
            unint64_t v136 = *((void *)v135 + 7);
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v136 = sub_1001B4AF4(v136);
            }
            if (v211 >= *(void *)(v136 + 16)) {
              goto LABEL_148;
            }
            (*v196)(v136 + v187 + *(int *)(v215 + 44) + v186, v173, v189);
            uint64_t v137 = v210;
            ObservableObject<>.objectWillChange.getter();
            ObservableObjectPublisher.send()();
            swift_release();
            *((void *)v137 + 7) = v136;
            swift_bridgeObjectRelease();
            if (qword_1002D7B18 != -1) {
              swift_once();
            }
            unint64_t v14 = v209;
            if (*(unsigned char *)(qword_1002E31C8 + 26) == 1)
            {
              if (qword_1002D7A98 != -1) {
                swift_once();
              }
              unint64_t v211 = qword_1002E3148;
              LODWORD(v202) = static os_log_type_t.default.getter();
              sub_100157064((uint64_t *)&unk_1002D97F0);
              uint64_t v138 = swift_allocObject();
              *(_OWORD *)(v138 + 16) = v188;
              v220._uint64_t countAndFlagsBits = v107;
              v220._object = (void *)v11;
              swift_bridgeObjectRetain();
              uint64_t v139 = String.init<A>(_:)();
              uint64_t v141 = v140;
              *(void *)(v138 + 56) = &type metadata for String;
              *(void *)(v138 + 64) = sub_100181588();
              *(void *)(v138 + 32) = v139;
              *(void *)(v138 + 40) = v141;
              os_log(_:dso:log:type:_:)();
              swift_bridgeObjectRelease();
              unint64_t v14 = v209;
            }
            else
            {
              if (qword_1002D7A98 != -1) {
                swift_once();
              }
              static os_log_type_t.default.getter();
              os_log(_:dso:log:type:_:)();
            }
            swift_bridgeObjectRetain();
            unint64_t v142 = sub_1001EB868(v107, v11);
            char v144 = v143;
            swift_bridgeObjectRelease();
            if (v144)
            {
              char v145 = swift_isUniquelyReferenced_nonNull_native();
              v220._uint64_t countAndFlagsBits = (uint64_t)v4;
              uint64_t v88 = v195;
              if ((v145 & 1) == 0)
              {
                sub_1001EEC38();
                id v4 = (char *)v220._countAndFlagsBits;
              }
              swift_bridgeObjectRelease();
              unint64_t v1 = v172;
              sub_1001FB1EC(*((void *)v4 + 7) + v142 * (void)v185, v172, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
              sub_1001FB9A0(v142, (uint64_t)v4);
              swift_bridgeObjectRelease();
              uint64_t v146 = 0;
              unint64_t v147 = v215;
            }
            else
            {
              uint64_t v146 = 1;
              unint64_t v147 = v215;
              unint64_t v1 = v172;
              uint64_t v88 = v195;
            }
            v112(v1, v146, 1, v147);
            swift_bridgeObjectRelease();
            sub_10015D658(v1, &qword_1002DBDA0);
            (*v190)(v173, v189);
            sub_1001FC170((uint64_t)v212, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
            uint64_t v8 = v205;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v11 = v201[2];
    uint64_t v8 = v210;
    uint64_t v39 = v198;
    if (v11)
    {
      unint64_t v14 = v201 + 4;
      while (1)
      {
        unint64_t v149 = *v14++;
        unint64_t v148 = v149;
        unint64_t v150 = *((void *)v8 + 7);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v150 = sub_1001B4AF4(v150);
        }
        unint64_t v151 = *(void *)(v150 + 16);
        if (v148 >= v151) {
          break;
        }
        unint64_t v152 = v151 - 1;
        uint64_t v26 = *(void *)(v214 + 72);
        unint64_t v153 = v150
             + ((*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80))
             + v26 * v148;
        sub_1001FC170(v153, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
        if ((uint64_t)(v152 - v148) < 0) {
          goto LABEL_149;
        }
        if (v26 > 0 || v153 >= v153 + v26 + v26 * (v152 - v148))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v26)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(void *)(v150 + 16) = v152;
        uint64_t v8 = v210;
        unint64_t v1 = ObservableObject<>.objectWillChange.getter();
        ObservableObjectPublisher.send()();
        swift_release();
        *((void *)v8 + 7) = v150;
        swift_bridgeObjectRelease();
        if (!--v11) {
          goto LABEL_103;
        }
      }
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      swift_once();
      continue;
    }
    break;
  }
LABEL_103:
  swift_bridgeObjectRelease();
  uint64_t v8 = v4 + 64;
  uint64_t v154 = 1 << v4[32];
  uint64_t v155 = -1;
  if (v154 < 64) {
    uint64_t v155 = ~(-1 << v154);
  }
  unint64_t v156 = v155 & *((void *)v4 + 8);
  int64_t v157 = (unint64_t)(v154 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v26 = 0;
  unint64_t v14 = v182;
  unint64_t v1 = v215;
  uint64_t v212 = (uint64_t *)v157;
  if (!v156) {
    goto LABEL_111;
  }
  while (2)
  {
    unint64_t v158 = __clz(__rbit64(v156));
    v156 &= v156 - 1;
    unint64_t v159 = v158 | (v26 << 6);
    if (!*((void *)v4 + 2))
    {
LABEL_107:
      ((void (*)(uint64_t *, uint64_t, uint64_t, unint64_t))v25->_countAndFlagsBits)(v14, 1, 1, v1);
      goto LABEL_108;
    }
LABEL_129:
    char v163 = (uint64_t *)(*((void *)v4 + 6) + 16 * v159);
    uint64_t v164 = *v163;
    unint64_t v11 = v163[1];
    swift_bridgeObjectRetain();
    unint64_t v165 = sub_1001EB868(v164, v11);
    if (v166)
    {
      sub_1001FC108(*((void *)v4 + 7) + *(void *)(v214 + 72) * v165, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      uint64_t v167 = 0;
    }
    else
    {
      uint64_t v167 = 1;
    }
    unint64_t v1 = v215;
    ((void (*)(uint64_t *, uint64_t, uint64_t, unint64_t))v25->_countAndFlagsBits)(v14, v167, 1, v215);
    swift_bridgeObjectRelease();
    if (((unsigned int (*)(uint64_t *, uint64_t, unint64_t))*v213)(v14, 1, v1) == 1)
    {
LABEL_108:
      sub_10015D658((uint64_t)v14, &qword_1002DBDA0);
      if (v156) {
        continue;
      }
    }
    else
    {
      uint64_t v168 = v192;
      sub_1001FB1EC((uint64_t)v14, v192, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      sub_1001FC108(v168, v193, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      unint64_t v11 = *((void *)v210 + 7);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = sub_1001EB42C(0, *(void *)(v11 + 16) + 1, 1, v11);
      }
      unint64_t v170 = *(void *)(v11 + 16);
      unint64_t v169 = *(void *)(v11 + 24);
      if (v170 >= v169 >> 1) {
        unint64_t v11 = sub_1001EB42C(v169 > 1, v170 + 1, 1, v11);
      }
      *(void *)(v11 + 16) = v170 + 1;
      sub_1001FB1EC(v193, v11+ ((*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80))+ *(void *)(v214 + 72) * v170, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      uint64_t v171 = v210;
      ObservableObject<>.objectWillChange.getter();
      ObservableObjectPublisher.send()();
      swift_release();
      *((void *)v171 + 7) = v11;
      swift_bridgeObjectRelease();
      sub_1001FC170(v192, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      unint64_t v14 = v182;
      unint64_t v1 = v215;
      int64_t v157 = (int64_t)v212;
      if (v156) {
        continue;
      }
    }
    break;
  }
LABEL_111:
  int64_t v160 = v26 + 1;
  if (__OFADD__(v26, 1)) {
    goto LABEL_142;
  }
  if (v160 >= v157) {
    goto LABEL_139;
  }
  unint64_t v161 = *(void *)&v8[8 * v160];
  ++v26;
  if (v161) {
    goto LABEL_128;
  }
  uint64_t v26 = v160 + 1;
  if (v160 + 1 >= v157) {
    goto LABEL_139;
  }
  unint64_t v161 = *(void *)&v8[8 * v26];
  if (v161) {
    goto LABEL_128;
  }
  uint64_t v26 = v160 + 2;
  if (v160 + 2 >= v157) {
    goto LABEL_139;
  }
  unint64_t v161 = *(void *)&v8[8 * v26];
  if (v161) {
    goto LABEL_128;
  }
  uint64_t v26 = v160 + 3;
  if (v160 + 3 >= v157) {
    goto LABEL_139;
  }
  unint64_t v161 = *(void *)&v8[8 * v26];
  if (v161) {
    goto LABEL_128;
  }
  uint64_t v26 = v160 + 4;
  if (v160 + 4 >= v157) {
    goto LABEL_139;
  }
  unint64_t v161 = *(void *)&v8[8 * v26];
  if (v161)
  {
LABEL_128:
    unint64_t v156 = (v161 - 1) & v161;
    unint64_t v159 = __clz(__rbit64(v161)) + (v26 << 6);
    if (!*((void *)v4 + 2)) {
      goto LABEL_107;
    }
    goto LABEL_129;
  }
  int64_t v162 = v160 + 5;
  if (v162 >= v157) {
    goto LABEL_139;
  }
  unint64_t v161 = *(void *)&v8[8 * v162];
  if (v161)
  {
    uint64_t v26 = v162;
    goto LABEL_128;
  }
  while (1)
  {
    uint64_t v26 = v162 + 1;
    if (__OFADD__(v162, 1)) {
      break;
    }
    if (v26 >= v157)
    {
LABEL_139:
      swift_release();
      sub_1001FA330(*(void *)(*((void *)v210 + 7) + 16), 0);
      return swift_bridgeObjectRelease();
    }
    unint64_t v161 = *(void *)&v8[8 * v26];
    ++v162;
    if (v161) {
      goto LABEL_128;
    }
  }
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1001F9390@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  id v4 = (int *)type metadata accessor for Metric(0);
  Swift::String v5 = String.init(_:)(*(id *)(a1 + v4[6]));
  Swift::String v6 = String.init(_:)(*(id *)(a1 + v4[7]));
  swift_bridgeObjectRetain();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v8;
  uint64_t v46 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v10;
  uint64_t v44 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v12;
  uint64_t v42 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v14;
  uint64_t v40 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v16;
  uint64_t v38 = v15;
  uint64_t v47 = v4;
  uint64_t v48 = a1;
  Swift::String v17 = String.init(_:)(*(id *)(a1 + v4[9]));
  uint64_t countAndFlagsBits = v17._countAndFlagsBits;
  object = v17._object;
  if (qword_1002D7A68 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1002E3120;
  uint64_t v21 = *(void *)(qword_1002E3120 + 16);
  if (v21)
  {
    uint64_t v36 = a2;
    swift_bridgeObjectRetain();
    sub_1001571E0();
    uint64_t v22 = v20 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      if (StringProtocol.contains<A>(_:)()) {
        break;
      }
      v22 += 16;
      swift_bridgeObjectRelease();
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    object = v24;
LABEL_9:
    a2 = v36;
  }
  id v25 = (char *)a2 + *(int *)(sub_100157064(&qword_1002DA770) + 48);
  int v26 = *(_DWORD *)(v48 + v47[13]);
  uint64_t v27 = v48 + v47[11];
  uint64_t v28 = type metadata accessor for DashboardViewModelObject();
  uint64_t v29 = &v25[*(int *)(v28 + 44)];
  uint64_t v30 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v29, v27, v30);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = sub_10018D93C();
  uint64_t v33 = v32;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)id v25 = v46;
  *((void *)v25 + 1) = v45;
  *((void *)v25 + 2) = v44;
  *((void *)v25 + 3) = v43;
  *((void *)v25 + 4) = v42;
  *((void *)v25 + 5) = v41;
  *((void *)v25 + 6) = v40;
  *((void *)v25 + 7) = v39;
  *((void *)v25 + 8) = v38;
  *((void *)v25 + 9) = v37;
  *((void *)v25 + 10) = countAndFlagsBits;
  *((void *)v25 + 11) = object;
  *((_DWORD *)v25 + 24) = v26;
  uint64_t v35 = (uint64_t *)&v25[*(int *)(v28 + 48)];
  *uint64_t v35 = v31;
  v35[1] = v33;
  return result;
}

void sub_1001F96D8()
{
  if ((*(unsigned char *)(v0 + 40) & 1) == 0)
  {
    if (qword_1002D7AA0 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    uint64_t v1 = swift_allocObject();
    swift_weakInit();
    swift_retain_n();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    uint64_t v2 = *(char **)(v0 + 16);
    uint64_t v3 = swift_allocObject();
    swift_weakInit();
    id v4 = (void *)swift_allocObject();
    _OWORD v4[2] = sub_1001FB000;
    v4[3] = v1;
    v4[4] = v3;
    uint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_hardwareManager];
    if (*(unsigned char *)(v5 + 152))
    {
      swift_retain_n();
      swift_retain_n();
      Swift::String v6 = v2;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      sub_1001F9B80(0, 0);
    }
    else
    {
      int v7 = *(_DWORD *)(v5 + 148);
      swift_retain_n();
      swift_retain_n();
      uint64_t v8 = v2;
      sub_1001DDCAC();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = sub_1001FB048;
      *(void *)(v9 + 24) = v4;
      swift_retain();
      sub_1001E1278(v7, (uint64_t)sub_10015E118, v9);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    swift_release_n();

    swift_release_n();
  }
}

uint64_t type metadata accessor for DashboardViewModel()
{
  return self;
}

uint64_t sub_1001F9B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_1002D7AA0 != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1001F75E0(a1);
      swift_release();
    }
    Date.init()();
    uint64_t v8 = sub_10018C314();
    uint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (!Strong) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v12 = Strong;
    uint64_t v13 = swift_unknownObjectWeakLoadStrong();
    uint64_t v14 = *(void *)(v12 + 32);
    swift_release();
    if (!v13) {
      return swift_bridgeObjectRelease();
    }
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 16))(v8, v10, ObjectType, v14);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1001F75E0((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
  }
  if (qword_1002D7AA0 != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  sub_100157064((uint64_t *)&unk_1002D97F0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100267EF0;
  if (a2)
  {
    swift_getErrorValue();
    uint64_t v18 = Error.localizedDescription.getter();
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  v27[4] = v18;
  v27[5] = v19;
  sub_100157064((uint64_t *)&unk_1002D9650);
  uint64_t v20 = String.init<A>(describing:)();
  uint64_t v22 = v21;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_100181588();
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 40) = v22;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v23 = result;
    uint64_t v24 = swift_unknownObjectWeakLoadStrong();
    uint64_t v25 = *(void *)(v23 + 32);
    uint64_t result = swift_release();
    if (v24)
    {
      uint64_t v26 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v25 + 32))(v26, v25);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1001F9F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(unsigned char *)(v4 + 40) = 1;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  NSString v11 = String._bridgeToObjectiveC()();
  int v12 = *(_DWORD *)(a1 + 96);
  v19[0] = v8;
  v19[1] = v9;
  void v19[2] = v10;
  uint64_t v19[3] = v11;
  int v20 = v12;
  uint64_t v13 = *(void **)(v4 + 16);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = v14;
  v15[3] = a2;
  v15[4] = a3;
  id v16 = v13;
  swift_retain();
  swift_retain();
  sub_1001DDCAC();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1001FAFBC;
  *(void *)(v17 + 24) = v15;
  swift_retain();
  sub_1001E158C((uint64_t)v19, (uint64_t)sub_1001B001C, v17);

  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void sub_1001FA0DC(char a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (a1)
  {
    id v5 = [self defaultCenter];
    if (qword_1002D7AF8 != -1) {
      swift_once();
    }
    [v5 postNotificationName:static NSNotificationName.dashboardMetricUpdate object:0 userInfo:0];
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      *(unsigned char *)(Strong + 40) = 0;
      swift_release();
    }
    a4(1, 0);
  }
  else
  {
    if (qword_1002D7AA0 != -1) {
      swift_once();
    }
    static os_log_type_t.error.getter();
    sub_100157064((uint64_t *)&unk_1002D97F0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100267EF0;
    if (a2)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    uint64_t v9 = String.init<A>(_:)();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_100181588();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v12 = swift_weakLoadStrong();
    if (v12)
    {
      *(unsigned char *)(v12 + 40) = 0;
      swift_release();
    }
    a4(0, a2);
  }
}

uint64_t sub_1001FA330(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (qword_1002D7B18 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(qword_1002E31C8 + 146) == 1)
  {
    type metadata accessor for DashboardViewModel();
    sub_1001FB104(&qword_1002DBD98, v6, (void (*)(uint64_t))type metadata accessor for DashboardViewModel);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = swift_release();
    *(unsigned char *)(v3 + 64) = 2;
  }
  else if (*(uint64_t *)(qword_1002E31C8 + 160) <= 0)
  {
    type metadata accessor for DashboardViewModel();
    sub_1001FB104(&qword_1002DBD98, v10, (void (*)(uint64_t))type metadata accessor for DashboardViewModel);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = swift_release();
    *(unsigned char *)(v3 + 64) = 3;
  }
  else
  {
    sub_100157064(&qword_1002D9670);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100267EF0;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 32) = 0xD000000000000012;
    if ((a2 & 1) != 0 || a1 < 1)
    {
      *(void *)(v8 + 40) = 0x800000010023F8A0;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      type metadata accessor for DashboardViewModel();
      sub_1001FB104(&qword_1002DBD98, v11, (void (*)(uint64_t))type metadata accessor for DashboardViewModel);
      ObservableObject<>.objectWillChange.getter();
      ObservableObjectPublisher.send()();
      uint64_t result = swift_release();
      *(unsigned char *)(v3 + 64) = 0;
    }
    else
    {
      *(void *)(v8 + 40) = 0x800000010023F8C0;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      type metadata accessor for DashboardViewModel();
      sub_1001FB104(&qword_1002DBD98, v9, (void (*)(uint64_t))type metadata accessor for DashboardViewModel);
      ObservableObject<>.objectWillChange.getter();
      ObservableObjectPublisher.send()();
      uint64_t result = swift_release();
      *(unsigned char *)(v3 + 64) = 1;
    }
  }
  return result;
}

void *sub_1001FA5FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v11;
    uint64_t v12 = a2[10];
    uint64_t v13 = a2[11];
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    uint64_t v14 = *(int *)(a3 + 44);
    uint64_t v23 = (uint64_t)a2 + v14;
    uint64_t v24 = a1 + v14;
    *(void *)(a1 + 80) = v12;
    *(void *)(a1 + 88) = v13;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(v24, v23, v15);
    uint64_t v16 = *(int *)(a3 + 48);
    uint64_t v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1001FA770(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001FA828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v20 = a2 + v12;
  uint64_t v21 = a1 + v12;
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v21, v20, v13);
  uint64_t v14 = *(int *)(a3 + 48);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001FA954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001FAACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(_OWORD *)(a1 + *(int *)(a3 + 48)) = *(_OWORD *)(a2 + *(int *)(a3 + 48));
  return a1;
}

uint64_t sub_1001FAB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 48);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001FAC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FAC98);
}

uint64_t sub_1001FAC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001FAD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FAD5C);
}

uint64_t sub_1001FAD5C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for DashboardViewModelObject()
{
  uint64_t result = qword_1002DBD40;
  if (!qword_1002DBD40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001FAE50()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001FAF08@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for DashboardViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001FAF44()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001FAF7C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001FAFBC(char a1, uint64_t a2)
{
  sub_1001FA0DC(a1, a2, *(void *)(v2 + 16), *(void (**)(uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_1001FAFC8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001FB000(uint64_t a1, uint64_t a2)
{
  return sub_1001F9B80(a1, a2);
}

uint64_t sub_1001FB008()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001FB048(uint64_t a1, uint64_t a2)
{
  return sub_1001F671C(a1, a2, *(uint64_t (**)(void, void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1001FB054()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001FB08C()
{
  swift_errorRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001FB0DC()
{
  return sub_1001F7440(*(void *)(v0 + 16), *(uint64_t (**)(void *, uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1001FB0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001FB0FC()
{
  return swift_release();
}

uint64_t sub_1001FB104(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FB14C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001FB18C(uint64_t a1, uint64_t a2)
{
  sub_1001F7250(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001FB194()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1001FB1EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1001FB254(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        uint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          *uint64_t v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(type metadata accessor for STransferMetrics() - 8) + 72);
        int64_t v17 = v16 * v3;
        uint64_t result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        unint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001FB424(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          int64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *int64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001FB5FC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1001CADF8(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        uint64_t result = sub_10019816C((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *BOOL v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001FB7C8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    long long v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *long long v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001FB9A0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for DashboardViewModelObject() - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1001FBBB0(uint64_t a1, char a2, void *a3)
{
  uint64_t v7 = type metadata accessor for DashboardViewModelObject();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  unint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100157064(&qword_1002DA770);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v61 = a1;
  uint64_t v62 = v8;
  char v17 = a2;
  uint64_t v59 = v3;
  uint64_t v60 = v16;
  uint64_t v18 = (uint64_t)v15 + *(int *)(v12 + 48);
  unint64_t v58 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = a1 + v58;
  uint64_t v64 = *(void *)(v13 + 72);
  swift_bridgeObjectRetain();
  sub_1001FC1D0(v19, (uint64_t)v15);
  uint64_t v20 = v15[1];
  uint64_t v67 = *v15;
  uint64_t v21 = v67;
  uint64_t v68 = v20;
  uint64_t v63 = v18;
  sub_1001FB1EC(v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
  uint64_t v22 = (void *)*a3;
  unint64_t v24 = sub_1001EB868(v21, v20);
  uint64_t v25 = v22[2];
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26)) {
    goto LABEL_23;
  }
  char v28 = v23;
  if (v22[3] >= v27)
  {
    if (v17)
    {
      if (v23) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1001EEC38();
      if (v28) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v33 = (void *)*a3;
    *(void *)(*a3 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    uint64_t v34 = (uint64_t *)(v33[6] + 16 * v24);
    *uint64_t v34 = v21;
    v34[1] = v20;
    uint64_t v35 = v33[7];
    uint64_t v62 = *(void *)(v62 + 72);
    sub_1001FB1EC((uint64_t)v10, v35 + v62 * v24, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
    uint64_t v36 = v33[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    _OWORD v33[2] = v38;
    uint64_t v39 = v60 - 1;
    if (v60 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v40 = v61 + v64 + v58;
    while (1)
    {
      sub_1001FC1D0(v40, (uint64_t)v15);
      uint64_t v42 = v15[1];
      uint64_t v67 = *v15;
      uint64_t v41 = v67;
      uint64_t v68 = v42;
      sub_1001FB1EC(v63, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      uint64_t v43 = (void *)*a3;
      unint64_t v44 = sub_1001EB868(v41, v42);
      uint64_t v46 = v43[2];
      BOOL v47 = (v45 & 1) == 0;
      BOOL v37 = __OFADD__(v46, v47);
      uint64_t v48 = v46 + v47;
      if (v37) {
        break;
      }
      char v49 = v45;
      if (v43[3] < v48)
      {
        sub_1001ECF2C(v48, 1);
        unint64_t v44 = sub_1001EB868(v41, v42);
        if ((v49 & 1) != (v50 & 1)) {
          goto LABEL_25;
        }
      }
      if (v49) {
        goto LABEL_10;
      }
      uint64_t v51 = (void *)*a3;
      *(void *)(*a3 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      uint64_t v52 = (uint64_t *)(v51[6] + 16 * v44);
      *uint64_t v52 = v41;
      v52[1] = v42;
      sub_1001FB1EC((uint64_t)v10, v51[7] + v62 * v44, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      uint64_t v53 = v51[2];
      BOOL v37 = __OFADD__(v53, 1);
      uint64_t v54 = v53 + 1;
      if (v37) {
        goto LABEL_24;
      }
      v51[2] = v54;
      v40 += v64;
      if (!--v39) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1001ECF2C(v27, v17 & 1);
  unint64_t v29 = sub_1001EB868(v21, v20);
  if ((v28 & 1) == (v30 & 1))
  {
    unint64_t v24 = v29;
    if ((v28 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v32 = swift_allocError();
    swift_willThrow();
    uint64_t v69 = v32;
    swift_errorRetain();
    sub_100157064(&qword_1002DBDB8);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1001FC170((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for DashboardViewModelObject);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  uint64_t v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v55._object = (void *)0x800000010023FBA0;
  v55._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v55);
  _print_unlocked<A, B>(_:_:)();
  v56._uint64_t countAndFlagsBits = 39;
  v56._object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001FC108(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001FC170(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001FC1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100157064(&qword_1002DA770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for FTMCellMonitorHardwareRowCellView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for FTMCellMonitorHardwareRowCellView()
{
  return swift_release();
}

void *assignWithCopy for FTMCellMonitorHardwareRowCellView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for FTMCellMonitorHardwareRowCellView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for FTMCellMonitorHardwareRowCellView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}