void sub_1001E8668(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  char v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __CVBuffer *v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  void *v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  __CVBuffer *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  uint64_t v53;
  CVPixelBufferRef v54;
  uint8_t *v55;
  double v56;
  double v57;
  double Width;
  double Height;
  double v60;
  double v61;
  double v62;
  double v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  double v69;
  CGFloat v70;
  double v71;
  double v72;
  uint64_t v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  CGFloat v78;
  CGFloat v79;
  uint64_t v80;
  uint64_t v81;
  CVPixelBufferRef v82;
  uint64_t v83;
  uint64_t v84;
  void v85[4];
  char v86;
  void v87[4];
  char v88;
  id v89;
  __CVBuffer *v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;

  v84 = a6;
  v11 = *(void *)(a4 - 8);
  v12 = __chkstk_darwin(a1);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, double))(v15 + 32))(v16, v15, v12);
  v19 = v17;
  if (v18)
  {
    sub_1000ACF28(v17, v18);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, a4);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v22 = 134217984;
      v87[0] = sub_10030CA28(a4, a5);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a4);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No pixelbuffer in frame %f", v22, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a4);
    }
LABEL_9:
    v27 = 1;
    v28 = 0.0;
    v29 = 0.0;
    v30 = 0.0;
    v31 = 0.0;
LABEL_10:
    v32 = v84;
    goto LABEL_11;
  }
  v23 = (void *)a1[4];
  if (v23 == (void *)2)
  {
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Cannot satisfy full buffer requirement", v26, 2u);
      swift_slowDealloc();
    }

    sub_1000ACF28(v19, 0);
    goto LABEL_9;
  }
  v82 = (CVPixelBufferRef)v17;
  v34 = *a1;
  v33 = a1[1];
  v35 = a1[3];
  v83 = a1[2];
  sub_10000FC34((uint64_t)(a1 + 5), (uint64_t)&v89, &qword_100524E48);
  sub_10000FC34((uint64_t)&v89, (uint64_t)&v90, &qword_100524E48);
  v36 = v90;
  if (v90)
  {
    sub_100107B18(&v89);
    v37 = v34;
    v80 = v34;
    v38 = v83;
    sub_10020F1A8(v37, v33, v83, v35, v23);
    v81 = v35;
    *((void *)&v39 + 1) = v35 & 1;
    *(void *)&v39 = v38;
    v40 = a4;
    v41 = v23;
    sub_10020F498(v39 >> 32, a2, a3 | ((HIDWORD(a3) & 1) << 32), v40, a5);
    v43 = v42;
    v44 = v80;
    v45 = *(double *)&v23;
    v46 = v82;
    sub_10020F520(v82, v80, v33, v45, (uint64_t)v85, v42);
    v28 = *(double *)v85;
    v29 = *(double *)&v85[1];
    v30 = *(double *)&v85[2];
    v31 = *(double *)&v85[3];
    v27 = v86;
    sub_1001CA388(v46, v36, (uint64_t)v85, v43);
    sub_10000FC34((uint64_t)v85, (uint64_t)v87, (uint64_t *)&unk_100518AE0);
    if (v88)
    {
      sub_100107B44(&v89);
      sub_10020F474(v44, v33, v83, v81, v41);
      sub_1000ACF28(v46, 0);
    }
    else
    {
      v57 = *(double *)v87;
      v56 = *(double *)&v87[1];
      v79 = *(double *)&v87[2];
      v78 = *(double *)&v87[3];
      Width = (double)(uint64_t)CVPixelBufferGetWidth(v46);
      Height = (double)(uint64_t)CVPixelBufferGetHeight(v46);
      v60 = sub_10020F6D8(Width);
      v61 = sub_10020F6D8(Height);
      v62 = sub_10020F6D8(Width * 0.0);
      v63 = sub_10020F6D8(Height * 0.0);
      v64 = v60 - v62;
      v65 = v61 - v63;
      v74 = v65;
      v76 = v57;
      v91.origin.x = v62;
      v91.origin.y = v63;
      v91.size.width = v64;
      v91.size.height = v65;
      v66 = CGRectGetWidth(v91);
      v77 = v56;
      v28 = (v57 - v62) / v66;
      v92.origin.x = v62;
      v92.origin.y = v63;
      v92.size.width = v64;
      v75 = v64;
      v92.size.height = v65;
      v29 = (v56 - v63) / CGRectGetHeight(v92);
      v93.origin.x = v57;
      v93.origin.y = v56;
      v67 = v79;
      v93.size.width = v79;
      v68 = v78;
      v93.size.height = v78;
      v69 = CGRectGetWidth(v93);
      v94.origin.x = v62;
      v94.origin.y = v63;
      v94.size.width = v64;
      v70 = v74;
      v94.size.height = v74;
      v30 = v69 / CGRectGetWidth(v94);
      v95.origin.x = v76;
      v95.origin.y = v77;
      v95.size.width = v67;
      v95.size.height = v68;
      v71 = CGRectGetHeight(v95);
      v96.origin.x = v62;
      v96.origin.y = v63;
      v96.size.width = v75;
      v96.size.height = v70;
      v72 = CGRectGetHeight(v96);
      sub_100107B44(&v89);
      sub_10020F474(v44, v33, v83, v81, v41);
      sub_1000ACF28(v46, 0);
      v27 = 0;
      v31 = v71 / v72;
    }
    goto LABEL_10;
  }
  v47 = v33;
  v48 = v35;
  v49 = v23;
  sub_10020F1BC(v23);
  v50 = Logger.logObject.getter();
  v51 = static os_log_type_t.error.getter();
  v52 = os_log_type_enabled(v50, v51);
  v32 = v84;
  v53 = v83;
  v54 = v82;
  if (v52)
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "No pixelbuffer in storage!", v55, 2u);
    swift_slowDealloc();
  }
  sub_10020F474(v34, v47, v53, v48, v49);

  sub_1000ACF28(v54, 0);
  v27 = 1;
  v28 = 0.0;
  v29 = 0.0;
  v30 = 0.0;
  v31 = 0.0;
LABEL_11:
  *(double *)v32 = v28;
  *(double *)(v32 + 8) = v29;
  *(double *)(v32 + 16) = v30;
  *(double *)(v32 + 24) = v31;
  *(unsigned char *)(v32 + 32) = v27;
}

uint64_t sub_1001E8D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7, uint64_t a8)
{
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 80) = a6;
  *(void *)(v8 + 88) = a8;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 72) = a5;
  long long v9 = a7[1];
  *(_OWORD *)(v8 + 112) = *a7;
  *(_OWORD *)(v8 + 128) = v9;
  *(_OWORD *)(v8 + 144) = a7[2];
  return _swift_task_switch(sub_1001E8D54, 0, 0);
}

uint64_t sub_1001E8D54()
{
  long long v1 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 112);
  long long v2 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v0 + 48) = v2;
  swift_bridgeObjectRetain();
  v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(v0 + 168) = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)(v0 + 176) = AssociatedConformanceWitness;
  void *v3 = v0;
  v3[1] = sub_1001E8E80;
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 72);
  return sub_1001CE29C(v8, v6, v0 + 16, v7, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_1001E8E80(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v1;
  swift_task_dealloc();
  if (v1)
  {
    v4 = sub_1001E90D8;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = sub_1001E8F9C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001E8F9C()
{
  if (*(void *)(v0[23] + 16) && (uint64_t Strong = swift_weakLoadStrong(), (v0[25] = Strong) != 0))
  {
    return _swift_task_switch(sub_1001E9058, Strong, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_1001E9058()
{
  sub_1003AD064(v0[23], v0[9], v0[21], v0[22]);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001E90D8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001E9140(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, CGFloat *a4@<X8>, CGFloat a5@<D0>, CGFloat a6@<D1>, CGFloat a7@<D2>, CGFloat a8@<D3>)
{
  CGFloat MinX = CGRectGetMinX(*(CGRect *)&a5);
  v59.origin.double x = a5;
  v59.origin.double y = a6;
  v59.size.CGFloat width = a7;
  v59.size.CGFloat height = a8;
  CGFloat MinY = CGRectGetMinY(v59);
  v60.origin.double x = a5;
  v60.origin.double y = a6;
  v60.size.CGFloat width = a7;
  v60.size.CGFloat height = a8;
  CGFloat MaxX = CGRectGetMaxX(v60);
  v61.origin.double x = a5;
  v61.origin.double y = a6;
  v61.size.CGFloat width = a7;
  v61.size.CGFloat height = a8;
  CGFloat v16 = CGRectGetMinY(v61);
  v62.origin.double x = a5;
  v62.origin.double y = a6;
  v62.size.CGFloat width = a7;
  v62.size.CGFloat height = a8;
  CGFloat v17 = CGRectGetMinX(v62);
  v63.origin.double x = a5;
  v63.origin.double y = a6;
  v63.size.CGFloat width = a7;
  v63.size.CGFloat height = a8;
  CGFloat MaxY = CGRectGetMaxY(v63);
  v64.origin.double x = a5;
  v64.origin.double y = a6;
  v64.size.CGFloat width = a7;
  v64.size.CGFloat height = a8;
  CGFloat v19 = CGRectGetMaxX(v64);
  v65.origin.double x = a5;
  v65.origin.double y = a6;
  v65.size.CGFloat width = a7;
  v65.size.CGFloat height = a8;
  CGFloat v51 = MinX;
  CGFloat v52 = MinY;
  CGFloat v53 = MaxX;
  CGFloat v54 = v16;
  CGFloat v55 = v17;
  CGFloat v56 = MaxY;
  CGFloat v57 = v19;
  CGFloat v58 = CGRectGetMaxY(v65);
  double v20 = sub_10030CA60(a2, a3);
  sub_1003FF210((uint64_t)v48, v20, 0.0);
  double v21 = sub_1003FD844();
  double v23 = v22;
  CGFloat v25 = v24;
  double v27 = v26;
  sub_10000FC34(a1, (uint64_t)&v49, (uint64_t *)&unk_100518AE0);
  if ((v50 & 1) == 0)
  {
    double x = v49.origin.x;
    double y = v49.origin.y;
    CGFloat width = v49.size.width;
    CGFloat height = v49.size.height;
    double v46 = x + v21 * CGRectGetWidth(v49);
    v66.origin.double x = x;
    v66.origin.double y = y;
    v66.size.CGFloat width = width;
    v66.size.CGFloat height = height;
    double v43 = y + v23 * CGRectGetHeight(v66);
    v67.origin.double x = v21;
    v67.origin.double y = v23;
    v67.size.CGFloat width = v25;
    v67.size.CGFloat height = v27;
    double v39 = CGRectGetWidth(v67);
    v68.origin.double x = x;
    v68.origin.double y = y;
    v68.size.CGFloat width = width;
    v68.size.CGFloat height = height;
    CGFloat v40 = v39 * CGRectGetWidth(v68);
    v69.origin.double x = v21;
    v69.origin.double y = v23;
    v69.size.CGFloat width = v25;
    v69.size.CGFloat height = v27;
    double v32 = CGRectGetHeight(v69);
    v70.origin.double x = x;
    v70.origin.double y = y;
    v70.size.CGFloat width = width;
    v70.size.CGFloat height = height;
    double v27 = v32 * CGRectGetHeight(v70);
    CGFloat v25 = v40;
    double v23 = v43;
    double v21 = v46;
  }
  v71.origin.double x = v21;
  v71.origin.double y = v23;
  v71.size.CGFloat width = v25;
  v71.size.CGFloat height = v27;
  CGFloat v47 = CGRectGetMinX(v71);
  v72.origin.double x = v21;
  v72.origin.double y = v23;
  v72.size.CGFloat width = v25;
  v72.size.CGFloat height = v27;
  CGFloat v44 = CGRectGetMinY(v72);
  v73.origin.double x = v21;
  v73.origin.double y = v23;
  v73.size.CGFloat width = v25;
  v73.size.CGFloat height = v27;
  CGFloat v41 = CGRectGetMaxX(v73);
  v74.origin.double x = v21;
  v74.origin.double y = v23;
  v74.size.CGFloat width = v25;
  v74.size.CGFloat height = v27;
  CGFloat v33 = CGRectGetMinY(v74);
  v75.origin.double x = v21;
  v75.origin.double y = v23;
  v75.size.CGFloat width = v25;
  v75.size.CGFloat height = v27;
  CGFloat v34 = CGRectGetMinX(v75);
  v76.origin.double x = v21;
  v76.origin.double y = v23;
  v76.size.CGFloat width = v25;
  v76.size.CGFloat height = v27;
  CGFloat v35 = CGRectGetMaxY(v76);
  v77.origin.double x = v21;
  v77.origin.double y = v23;
  v77.size.CGFloat width = v25;
  v77.size.CGFloat height = v27;
  CGFloat v36 = CGRectGetMaxX(v77);
  v78.origin.double x = v21;
  v78.origin.double y = v23;
  v78.size.CGFloat width = v25;
  v78.size.CGFloat height = v27;
  CGFloat v37 = CGRectGetMaxY(v78);
  *a4 = v47;
  a4[1] = v44;
  a4[2] = v41;
  a4[3] = v33;
  a4[4] = v34;
  a4[5] = v35;
  a4[6] = v36;
  a4[7] = v37;
}

uint64_t sub_1001E9464(double a1)
{
  if (a1 == 0.0) {
    return 1;
  }
  uint64_t result = 3;
  if (a1 != 3.14159265 && a1 != -3.14159265)
  {
    uint64_t result = 6;
    if (a1 != 1.57079633 && a1 != -1.57079633)
    {
      if (a1 == -4.71238898 || a1 == 4.71238898) {
        return 8;
      }
      else {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1001E94E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  return _swift_task_switch(sub_1001E9508, 0, 0);
}

uint64_t sub_1001E9508()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  swift_beginAccess();
  v0[10] = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1001E9590, v2, 0);
}

uint64_t sub_1001E9590()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1003AD064(v1, v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001E966C()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1001E96A4()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(*(void *)(v0 + 24) + 16);
}

uint64_t sub_1001E96B4()
{
  return swift_deallocObject();
}

uint64_t sub_1001E96C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001E96D4()
{
  return swift_release();
}

uint64_t sub_1001E96DC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_1001E97C4(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = v1[6];
  uint64_t v8 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  long long v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *long long v9 = v2;
  v9[5] = v4;
  v9[6] = v5;
  v9[3] = v7;
  v9[4] = v8;
  v9[1] = sub_10000F878;
  v9[2] = a1;
  return _swift_task_switch(sub_1001E3F08, 0, 0);
}

uint64_t sub_1001E98E0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001E9908(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t sub_1001E9960()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(void *)(v0 + v4 + 8) >= 5uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_1001E9A44(uint64_t a1)
{
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  uint64_t v7 = (uint64_t)v1 + v3;
  uint64_t v8 = (char *)v1 + ((*(void *)(*(void *)(v1[4] - 8) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *((void *)v8 + 1);
  char v11 = v8[16];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_10000F878;
  return sub_1001E40BC(a1, v4, v5, v6, v7, v9, v10, v11);
}

void *sub_1001E9B94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    if (v5 <= 0)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v11 = a2 + (a3 << 6);
        if (v11 < (unint64_t)&v8[8 * v5 + 4] && (unint64_t)(v8 + 4) < v11 + (v5 << 6)) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return v8;
      }
    }
    else
    {
      sub_10000F214(&qword_100529A30);
      uint64_t v8 = (void *)swift_allocObject();
      int64_t v9 = j__malloc_size_0(v8);
      uint64_t v10 = v9 - 32;
      if (v9 < 32) {
        uint64_t v10 = v9 + 31;
      }
      v8[2] = v5;
      v8[3] = 2 * (v10 >> 6);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

int64_t *sub_1001E9D0C(int64_t *result, int64_t a2)
{
  int64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_10000F214(&qword_100525080);
      uint64_t v5 = (int64_t *)swift_allocObject();
      int64_t v6 = j__malloc_size_0(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    uint64_t result = sub_10020ABF8(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

void *sub_1001E9DD4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_21;
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  if (v5 <= 0)
  {
    unint64_t v11 = _swiftEmptyArrayStorage;
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(type metadata accessor for ActionBarItem(0) - 8);
      uint64_t v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v16 = *(void *)(v14 + 72);
      unint64_t v17 = a2 + v16 * a3;
      uint64_t v18 = v16 * v5;
      CGFloat v19 = &v15[v18];
      unint64_t v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20) {
        goto LABEL_24;
      }
      swift_arrayInitWithCopy();
      return v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_10000F214(&qword_100525590);
  uint64_t v8 = *(void *)(type metadata accessor for ActionBarItem(0) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v11 = (void *)swift_allocObject();
  size_t v12 = j__malloc_size_0(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1) {
      goto LABEL_23;
    }
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001EA014(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000F214(&qword_100529640);
  uint64_t v3 = *(void *)(type metadata accessor for DetectionRequest(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  int64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size_0(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      sub_10020B04C(&v11, (uint64_t)v6 + v5, v1, a1, type metadata accessor for DetectionRequest, type metadata accessor for DetectionRequest, type metadata accessor for DetectionRequest);
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      sub_10014AAB4();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1001EA1A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    if (v5 <= 0)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        unint64_t v10 = a2 + 40 * a3;
        if (v10 < (unint64_t)&v8[5 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 40 * v5) {
          goto LABEL_17;
        }
        swift_arrayInitWithCopy();
        return v8;
      }
    }
    else
    {
      sub_10000F214(&qword_10051A170);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = j__malloc_size_0(v8);
      v8[2] = v5;
      int64_t v8[3] = 2 * ((uint64_t)(v9 - 32) / 40);
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001EA334(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000F214(&qword_100525100);
  uint64_t v3 = *(void *)(type metadata accessor for CVDetection() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  int64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size_0(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      sub_10020AD28(&v11, (uint64_t)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      sub_10014AAB4();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1001EA488(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000F214(&qword_10051A190);
  uint64_t v3 = *(void *)(type metadata accessor for BundleClassification.ClassificationType(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  int64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size_0(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      sub_10020B04C(&v11, (uint64_t)v6 + v5, v1, a1, type metadata accessor for BundleClassification.ClassificationType, type metadata accessor for BundleClassification.ClassificationType, type metadata accessor for BundleClassification.ClassificationType);
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      sub_10014AAB4();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int sub_1001EA618(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100045FC8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1001EA684(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1001EA684(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v80 = 0;
      uint64_t v81 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v83 = *(double *)(v81 + 8 * i);
        uint64_t v84 = v80;
        do
        {
          uint64_t v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85) {
            break;
          }
          if (!v81) {
            goto LABEL_140;
          }
          *(void *)(v85 + 8) = *(void *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v97 = result;
  Swift::Int v98 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        uint64_t v86 = *v2;
        do
        {
          unint64_t v87 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_131;
          }
          if (!v86) {
            goto LABEL_144;
          }
          v88 = v11;
          v89 = v11 + 32;
          uint64_t v90 = *(void *)&v11[16 * v87 + 32];
          uint64_t v91 = *(void *)&v11[16 * v12 + 24];
          sub_1001EAD18((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(void *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1) {
            break;
          }
          if (v91 < v90) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v88 = sub_100045F20((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_133;
          }
          v92 = &v88[16 * v87 + 32];
          *(void *)v92 = v90;
          *((void *)v92 + 1) = v91;
          unint64_t v93 = *((void *)v88 + 2);
          if (v12 > v93) {
            goto LABEL_134;
          }
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          uint64_t v11 = v88;
          *((void *)v88 + 2) = v93 - 1;
          unint64_t v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      v96[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v98;
    v96 = (void *)v7;
    __dst = (double *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  v94 = v2;
  uint64_t v95 = *v2 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v99 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      double v14 = *(double *)(v10 + 8 * v9);
      double v15 = *(double *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        double v16 = v14;
        while (1)
        {
          double v17 = v16;
          double v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17) {
            break;
          }
          if (v3 == ++v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_137;
        }
        if (v13 < v9)
        {
          uint64_t v18 = (uint64_t *)(v95 + 8 * v9);
          Swift::Int v19 = v9;
          Swift::Int v20 = v13;
          double v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_143;
              }
              uint64_t v22 = *v21;
              *double v21 = *v18;
              *uint64_t v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_135;
    }
    if (v9 - v13 >= v97) {
      goto LABEL_46;
    }
    Swift::Int v23 = v13 + v97;
    if (__OFADD__(v13, v97)) {
      goto LABEL_138;
    }
    if (v23 >= v3) {
      Swift::Int v23 = v3;
    }
    if (v23 < v13) {
      break;
    }
    if (v9 != v23)
    {
      double v24 = (double *)(v95 + 8 * v9);
      do
      {
        double v25 = *(double *)(v10 + 8 * v9);
        Swift::Int v26 = v13;
        double v27 = v24;
        do
        {
          double v28 = *v27;
          if (v25 >= *v27) {
            break;
          }
          if (!v10) {
            goto LABEL_141;
          }
          *double v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      Swift::Int v9 = v23;
    }
LABEL_46:
    if (v9 < v13) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1000456E8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v30 = *((void *)v11 + 2);
    unint64_t v29 = *((void *)v11 + 3);
    unint64_t v12 = v30 + 1;
    uint64_t v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_1000456E8((char *)(v29 > 1), v30 + 1, 1, v11);
      uint64_t v10 = v99;
      uint64_t v11 = v79;
    }
    *((void *)v11 + 2) = v12;
    v31 = v11 + 32;
    double v32 = &v11[16 * v30 + 32];
    *(void *)double v32 = v13;
    *((void *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        unint64_t v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          uint64_t v39 = *((void *)v38 - 8);
          uint64_t v40 = *((void *)v38 - 7);
          BOOL v44 = __OFSUB__(v40, v39);
          uint64_t v41 = v40 - v39;
          if (v44) {
            goto LABEL_119;
          }
          uint64_t v43 = *((void *)v38 - 6);
          uint64_t v42 = *((void *)v38 - 5);
          BOOL v44 = __OFSUB__(v42, v43);
          uint64_t v36 = v42 - v43;
          char v37 = v44;
          if (v44) {
            goto LABEL_120;
          }
          unint64_t v45 = v12 - 2;
          double v46 = &v31[16 * v12 - 32];
          uint64_t v48 = *(void *)v46;
          uint64_t v47 = *((void *)v46 + 1);
          BOOL v44 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          if (v44) {
            goto LABEL_122;
          }
          BOOL v44 = __OFADD__(v36, v49);
          uint64_t v50 = v36 + v49;
          if (v44) {
            goto LABEL_125;
          }
          if (v50 >= v41)
          {
            CGRect v68 = &v31[16 * v33];
            uint64_t v70 = *(void *)v68;
            uint64_t v69 = *((void *)v68 + 1);
            BOOL v44 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v44) {
              goto LABEL_129;
            }
            BOOL v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v62 = *((void *)v11 + 4);
            uint64_t v63 = *((void *)v11 + 5);
            BOOL v44 = __OFSUB__(v63, v62);
            uint64_t v55 = v63 - v62;
            char v56 = v44;
            goto LABEL_77;
          }
          uint64_t v35 = *((void *)v11 + 4);
          uint64_t v34 = *((void *)v11 + 5);
          BOOL v44 = __OFSUB__(v34, v35);
          uint64_t v36 = v34 - v35;
          char v37 = v44;
        }
        if (v37) {
          goto LABEL_121;
        }
        unint64_t v45 = v12 - 2;
        CGFloat v51 = &v31[16 * v12 - 32];
        uint64_t v53 = *(void *)v51;
        uint64_t v52 = *((void *)v51 + 1);
        BOOL v54 = __OFSUB__(v52, v53);
        uint64_t v55 = v52 - v53;
        char v56 = v54;
        if (v54) {
          goto LABEL_124;
        }
        CGFloat v57 = &v31[16 * v33];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v44 = __OFSUB__(v58, v59);
        uint64_t v60 = v58 - v59;
        if (v44) {
          goto LABEL_127;
        }
        if (__OFADD__(v55, v60)) {
          goto LABEL_128;
        }
        if (v55 + v60 >= v36)
        {
          BOOL v61 = v36 < v60;
LABEL_83:
          if (v61) {
            unint64_t v33 = v45;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v56) {
          goto LABEL_123;
        }
        CGRect v64 = &v31[16 * v33];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v44 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v44) {
          goto LABEL_126;
        }
        if (v67 < v55) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10) {
          goto LABEL_142;
        }
        CGRect v73 = &v31[16 * v72];
        uint64_t v74 = *(void *)v73;
        CGRect v75 = v31;
        CGRect v76 = &v31[16 * v33];
        uint64_t v77 = *((void *)v76 + 1);
        sub_1001EAD18((double *)(v10 + 8 * *(void *)v73), (double *)(v10 + 8 * *(void *)v76), v10 + 8 * v77, __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v77 < v74) {
          goto LABEL_116;
        }
        if (v33 > *((void *)v11 + 2)) {
          goto LABEL_117;
        }
        *(void *)CGRect v73 = v74;
        *(void *)&v75[16 * v72 + 8] = v77;
        unint64_t v78 = *((void *)v11 + 2);
        if (v33 >= v78) {
          goto LABEL_118;
        }
        unint64_t v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((void *)v11 + 2) = v78 - 1;
        uint64_t v10 = v99;
        if (v78 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v98;
    if (v9 >= v98)
    {
      uint64_t v8 = v96;
      uint64_t v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EAD18(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  double v24 = __src;
  Swift::Int v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      double v16 = &v4[v13];
      uint64_t v22 = v16;
      double v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        double v17 = (double *)(a3 - 8);
        while (1)
        {
          uint64_t v18 = v17 + 1;
          Swift::Int v19 = v6 - 1;
          double v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *double v17 = *(v16 - 1);
            }
            --v16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *double v17 = v20;
            }
            double v24 = --v6;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    double v14 = &v4[v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *uint64_t v7 = *v4;
          }
          Swift::Int v23 = ++v4;
          double v15 = v6;
        }
        else
        {
          double v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *uint64_t v7 = *v6;
          }
        }
        ++v7;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      double v24 = v7;
    }
LABEL_42:
    sub_100045AFC((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EAF88(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214((uint64_t *)&unk_100529800);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          Swift::Int v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    double v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::Int v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001EB298(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v71 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v72 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v70 = (uint64_t)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v69 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v68 = (uint64_t)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CVDetection();
  uint64_t v76 = *(void *)(v15 - 8);
  uint64_t v77 = v15;
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)&v66 - v19;
  uint64_t v21 = *v2;
  sub_10000F214((uint64_t *)&unk_100529A70);
  int v78 = a2;
  uint64_t v22 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v81 = v21;
  if (!*(void *)(v21 + 16)) {
    goto LABEL_50;
  }
  uint64_t v80 = v20;
  uint64_t v67 = v2;
  uint64_t v23 = 1 << *(unsigned char *)(v81 + 32);
  uint64_t v24 = *(void *)(v81 + 64);
  uint64_t v74 = (void *)(v81 + 64);
  if (v23 < 64) {
    uint64_t v25 = ~(-1 << v23);
  }
  else {
    uint64_t v25 = -1;
  }
  unint64_t v26 = v25 & v24;
  int64_t v73 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v27 = v22 + 64;
  swift_retain();
  int64_t v28 = 0;
  CGRect v75 = v17;
LABEL_8:
  if (v26)
  {
    unint64_t v31 = __clz(__rbit64(v26));
    v26 &= v26 - 1;
    unint64_t v32 = v31 | (v28 << 6);
    goto LABEL_22;
  }
  int64_t v33 = v28 + 1;
  if (__OFADD__(v28, 1)) {
    goto LABEL_51;
  }
  if (v33 >= v73)
  {
    swift_release();
    Swift::Int v3 = v67;
    uint64_t v34 = v74;
    if ((v78 & 1) == 0) {
      goto LABEL_50;
    }
LABEL_44:
    uint64_t v64 = 1 << *(unsigned char *)(v81 + 32);
    if (v64 >= 64) {
      bzero(v34, ((unint64_t)(v64 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *uint64_t v34 = -1 << v64;
    }
    *(void *)(v81 + 16) = 0;
  }
  else
  {
    uint64_t v34 = v74;
    unint64_t v35 = v74[v33];
    ++v28;
    if (v35) {
      goto LABEL_21;
    }
    int64_t v28 = v33 + 1;
    if (v33 + 1 >= v73) {
      goto LABEL_43;
    }
    unint64_t v35 = v74[v28];
    if (v35)
    {
LABEL_21:
      unint64_t v26 = (v35 - 1) & v35;
      unint64_t v32 = __clz(__rbit64(v35)) + (v28 << 6);
LABEL_22:
      uint64_t v37 = *(void *)(v76 + 72);
      uint64_t v38 = *(void *)(v81 + 48) + v37 * v32;
      uint64_t v39 = (uint64_t)v80;
      if (v78) {
        sub_10020F140(v38, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      else {
        sub_10020F0D8(v38, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      uint64_t v40 = *(void *)(v81 + 56) + 24 * v32;
      char v41 = *(unsigned char *)(v40 + 16);
      uint64_t v42 = *(void *)v40;
      uint64_t v43 = *(void *)(v40 + 8);
      Hasher.init(_seed:)();
      sub_10020F0D8(v39, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v79 = v42;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          uint64_t v48 = (uint64_t)v17;
          uint64_t v46 = v69;
          sub_10020F140(v48, v69, type metadata accessor for ParseDetectorResult);
          Hasher._combine(_:)(1uLL);
          sub_1003E7010((uint64_t)v82);
          uint64_t v47 = type metadata accessor for ParseDetectorResult;
          break;
        case 2:
          uint64_t v49 = v70;
          sub_10020F140((uint64_t)v17, v70, type metadata accessor for TextDetectorResult);
          Hasher._combine(_:)(2uLL);
          sub_10032169C((uint64_t)v82);
          uint64_t v50 = type metadata accessor for TextDetectorResult;
          uint64_t v51 = v49;
          goto LABEL_34;
        case 3:
          uint64_t v52 = (uint64_t)v17;
          uint64_t v46 = v72;
          sub_10020F140(v52, v72, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v53 = 3;
          goto LABEL_31;
        case 4:
          uint64_t v54 = (uint64_t)v17;
          uint64_t v46 = v72;
          sub_10020F140(v54, v72, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v53 = 4;
LABEL_31:
          Hasher._combine(_:)(v53);
          sub_100165074();
          uint64_t v47 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5:
          uint64_t v55 = (uint64_t)v17;
          uint64_t v46 = v71;
          sub_10020F140(v55, v71, type metadata accessor for StreamingTextDetectorResult);
          Hasher._combine(_:)(5uLL);
          sub_1001665AC();
          uint64_t v47 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          uint64_t v45 = (uint64_t)v17;
          uint64_t v46 = v68;
          sub_10020F140(v45, v68, type metadata accessor for ObjectDetectorResult);
          Hasher._combine(_:)(0);
          sub_10031E668();
          uint64_t v47 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      uint64_t v50 = v47;
      uint64_t v51 = v46;
      unint64_t v17 = v75;
LABEL_34:
      sub_1001D430C(v51, v50);
      Swift::Int v56 = Hasher._finalize()();
      uint64_t v57 = -1 << *(unsigned char *)(v22 + 32);
      unint64_t v58 = v56 & ~v57;
      unint64_t v59 = v58 >> 6;
      if (((-1 << v58) & ~*(void *)(v27 + 8 * (v58 >> 6))) != 0)
      {
        unint64_t v29 = __clz(__rbit64((-1 << v58) & ~*(void *)(v27 + 8 * (v58 >> 6)))) | v58 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      char v60 = 0;
      unint64_t v61 = (unint64_t)(63 - v57) >> 6;
      while (++v59 != v61 || (v60 & 1) == 0)
      {
        BOOL v62 = v59 == v61;
        if (v59 == v61) {
          unint64_t v59 = 0;
        }
        v60 |= v62;
        uint64_t v63 = *(void *)(v27 + 8 * v59);
        if (v63 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v63)) + (v59 << 6);
LABEL_7:
          *(void *)(v27 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
          sub_10020F140((uint64_t)v80, *(void *)(v22 + 48) + v37 * v29, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v30 = *(void *)(v22 + 56) + 24 * v29;
          *(void *)uint64_t v30 = v79;
          *(void *)(v30 + 8) = v43;
          *(unsigned char *)(v30 + 16) = v41;
          ++*(void *)(v22 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      JUMPOUT(0x1001EBA74);
    }
    int64_t v36 = v33 + 2;
    if (v36 < v73)
    {
      unint64_t v35 = v74[v36];
      if (!v35)
      {
        while (1)
        {
          int64_t v28 = v36 + 1;
          if (__OFADD__(v36, 1)) {
            goto LABEL_52;
          }
          if (v28 >= v73) {
            goto LABEL_43;
          }
          unint64_t v35 = v74[v28];
          ++v36;
          if (v35) {
            goto LABEL_21;
          }
        }
      }
      int64_t v28 = v36;
      goto LABEL_21;
    }
LABEL_43:
    swift_release();
    Swift::Int v3 = v67;
    if (v78) {
      goto LABEL_44;
    }
  }
LABEL_50:
  uint64_t result = swift_release();
  uint64_t *v3 = v22;
  return result;
}

uint64_t sub_1001EBA8C(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214(&qword_100529A40);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v20);
    uint64_t v30 = *(void *)(v5 + 56) + 24 * v20;
    uint64_t v31 = *(void *)v30;
    uint64_t v32 = *(void *)(v30 + 8);
    char v33 = *(unsigned char *)(v30 + 16);
    if ((v38 & 1) == 0) {
      id v34 = v29;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v29;
    uint64_t v18 = *(void *)(v7 + 56) + 24 * v17;
    *(void *)uint64_t v18 = v31;
    *(void *)(v18 + 8) = v32;
    *(unsigned char *)(v18 + 16) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001EBD94(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214((uint64_t *)&unk_1005251F0);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          Swift::Int v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    int v33 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::Int v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001EC09C(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v66 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v68 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v65 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v64 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v63 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CVDetection();
  uint64_t v72 = *(void *)(v15 - 8);
  uint64_t v73 = v15;
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)&v61 - v19;
  uint64_t v21 = *v2;
  sub_10000F214(&qword_100525200);
  int v74 = a2;
  uint64_t v22 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v23 = v22;
  if (!*(void *)(v21 + 16)) {
    goto LABEL_49;
  }
  BOOL v62 = v2;
  uint64_t v24 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v25 = *(void *)(v21 + 64);
  uint64_t v70 = (void *)(v21 + 64);
  if (v24 < 64) {
    uint64_t v26 = ~(-1 << v24);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v27 = v26 & v25;
  int64_t v69 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v28 = v22 + 64;
  swift_retain();
  int64_t v29 = 0;
  uint64_t v67 = v21;
  uint64_t v71 = v17;
  while (1)
  {
    if (v27)
    {
      unint64_t v31 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v32 = v31 | (v29 << 6);
      goto LABEL_22;
    }
    int64_t v33 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      goto LABEL_50;
    }
    if (v33 >= v69) {
      break;
    }
    unint64_t v34 = v70[v33];
    ++v29;
    if (!v34)
    {
      int64_t v29 = v33 + 1;
      if (v33 + 1 >= v69) {
        break;
      }
      unint64_t v34 = v70[v29];
      if (!v34)
      {
        int64_t v35 = v33 + 2;
        if (v35 >= v69) {
          break;
        }
        unint64_t v34 = v70[v35];
        if (!v34)
        {
          while (1)
          {
            int64_t v29 = v35 + 1;
            if (__OFADD__(v35, 1)) {
              goto LABEL_51;
            }
            if (v29 >= v69) {
              goto LABEL_44;
            }
            unint64_t v34 = v70[v29];
            ++v35;
            if (v34) {
              goto LABEL_21;
            }
          }
        }
        int64_t v29 = v35;
      }
    }
LABEL_21:
    unint64_t v27 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v29 << 6);
LABEL_22:
    uint64_t v36 = *(void *)(v72 + 72);
    uint64_t v37 = *(void *)(v21 + 48) + v36 * v32;
    if (v74)
    {
      sub_10020F140(v37, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v38 = *(void *)(*(void *)(v21 + 56) + 8 * v32);
    }
    else
    {
      sub_10020F0D8(v37, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v38 = *(void *)(*(void *)(v21 + 56) + 8 * v32);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    sub_10020F0D8((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v42 = (uint64_t)v17;
        uint64_t v40 = v64;
        sub_10020F140(v42, v64, type metadata accessor for ParseDetectorResult);
        Hasher._combine(_:)(1uLL);
        sub_1003E7010((uint64_t)v75);
        char v41 = type metadata accessor for ParseDetectorResult;
        goto LABEL_32;
      case 2u:
        uint64_t v43 = v65;
        sub_10020F140((uint64_t)v17, v65, type metadata accessor for TextDetectorResult);
        Hasher._combine(_:)(2uLL);
        sub_10032169C((uint64_t)v75);
        BOOL v44 = type metadata accessor for TextDetectorResult;
        uint64_t v45 = v43;
        goto LABEL_34;
      case 3u:
        uint64_t v46 = (uint64_t)v17;
        uint64_t v40 = v68;
        sub_10020F140(v46, v68, type metadata accessor for StreamingBarcodeDetectorResult);
        Swift::UInt v47 = 3;
        goto LABEL_31;
      case 4u:
        uint64_t v48 = (uint64_t)v17;
        uint64_t v40 = v68;
        sub_10020F140(v48, v68, type metadata accessor for StreamingBarcodeDetectorResult);
        Swift::UInt v47 = 4;
LABEL_31:
        Hasher._combine(_:)(v47);
        sub_100165074();
        char v41 = type metadata accessor for StreamingBarcodeDetectorResult;
        goto LABEL_32;
      case 5u:
        uint64_t v49 = (uint64_t)v17;
        uint64_t v50 = v66;
        sub_10020F140(v49, v66, type metadata accessor for StreamingTextDetectorResult);
        Hasher._combine(_:)(5uLL);
        sub_1001665AC();
        BOOL v44 = type metadata accessor for StreamingTextDetectorResult;
        uint64_t v45 = v50;
        unint64_t v17 = v71;
LABEL_34:
        uint64_t v21 = v67;
        goto LABEL_35;
      default:
        uint64_t v39 = (uint64_t)v17;
        uint64_t v40 = v63;
        sub_10020F140(v39, v63, type metadata accessor for ObjectDetectorResult);
        Hasher._combine(_:)(0);
        sub_10031E668();
        char v41 = type metadata accessor for ObjectDetectorResult;
LABEL_32:
        BOOL v44 = v41;
        uint64_t v45 = v40;
        unint64_t v17 = v71;
LABEL_35:
        sub_1001D430C(v45, v44);
        Swift::Int v51 = Hasher._finalize()();
        uint64_t v52 = -1 << *(unsigned char *)(v23 + 32);
        unint64_t v53 = v51 & ~v52;
        unint64_t v54 = v53 >> 6;
        if (((-1 << v53) & ~*(void *)(v28 + 8 * (v53 >> 6))) != 0)
        {
          unint64_t v30 = __clz(__rbit64((-1 << v53) & ~*(void *)(v28 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_7;
        }
        char v55 = 0;
        unint64_t v56 = (unint64_t)(63 - v52) >> 6;
        break;
    }
    do
    {
      if (++v54 == v56 && (v55 & 1) != 0)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        JUMPOUT(0x1001EC82CLL);
      }
      BOOL v57 = v54 == v56;
      if (v54 == v56) {
        unint64_t v54 = 0;
      }
      v55 |= v57;
      uint64_t v58 = *(void *)(v28 + 8 * v54);
    }
    while (v58 == -1);
    unint64_t v30 = __clz(__rbit64(~v58)) + (v54 << 6);
LABEL_7:
    *(void *)(v28 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    sub_10020F140((uint64_t)v20, *(void *)(v23 + 48) + v36 * v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(void *)(*(void *)(v23 + 56) + 8 * v30) = v38;
    ++*(void *)(v23 + 16);
  }
LABEL_44:
  swift_release();
  Swift::Int v3 = v62;
  if (v74)
  {
    uint64_t v59 = 1 << *(unsigned char *)(v21 + 32);
    if (v59 >= 64) {
      bzero(v70, ((unint64_t)(v59 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *uint64_t v70 = -1 << v59;
    }
    *(void *)(v21 + 16) = 0;
  }
LABEL_49:
  uint64_t result = swift_release();
  uint64_t *v3 = v23;
  return result;
}

uint64_t sub_1001EC844(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214(&qword_100524EE8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    unint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              Swift::Int v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001ECAEC(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000F214(&qword_100521010);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          Swift::Int v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  Swift::Int v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v12;
  return result;
}

uint64_t sub_1001ECF10(uint64_t a1, int a2)
{
  return sub_1001F256C(a1, a2, (uint64_t *)&unk_100521050, &qword_100525140);
}

uint64_t sub_1001ECF24(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214(&qword_1005251E0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          Swift::Int v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_retain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::Int v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001ED1FC(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000F214(&qword_1005251E8);
  int v42 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    int64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v15 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v16 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    while (1)
    {
      if (v14)
      {
        unint64_t v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v39) {
          goto LABEL_34;
        }
        unint64_t v23 = v40[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v23 = v40[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_34:
              swift_release();
              Swift::Int v3 = v38;
              if (v42)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v37;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v23 = v40[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v14 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      int64_t v25 = *(void **)(*(void *)(v8 + 48) + 8 * v21);
      uint64_t v26 = v5;
      uint64_t v27 = *(void *)(v5 + 72);
      unint64_t v28 = *(void *)(v8 + 56) + v27 * v21;
      if (v42)
      {
        (*v15)(v7, v28, v43);
      }
      else
      {
        (*v41)(v7, v28, v43);
        id v29 = v25;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
      uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v16 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v19 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(void *)(*(void *)(v10 + 48) + 8 * v19) = v25;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v15)(*(void *)(v10 + 56) + v27 * v19, v7, v43);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v26;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

uint64_t sub_1001ED5B0(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000F214((uint64_t *)&unk_100529660);
  int v53 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v58 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v50 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v48 = v2;
  int64_t v49 = (unint64_t)(v12 + 63) >> 6;
  Swift::Int v51 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  unint64_t v54 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v23 = v22 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v49) {
      break;
    }
    int64_t v25 = v50;
    unint64_t v26 = v50[v24];
    ++v18;
    if (!v26)
    {
      int64_t v18 = v24 + 1;
      if (v24 + 1 >= v49) {
        goto LABEL_34;
      }
      unint64_t v26 = v50[v18];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v49)
        {
LABEL_34:
          swift_release();
          Swift::Int v3 = v48;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v50[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v18 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v49) {
              goto LABEL_34;
            }
            unint64_t v26 = v50[v18];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v27;
      }
    }
LABEL_21:
    unint64_t v15 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v18 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v9 + 48) + v28 * v23;
    if (v53) {
      (*v54)(v8, v29, v58);
    }
    else {
      (*v51)(v8, v29, v58);
    }
    uint64_t v30 = (uint64_t *)(*(void *)(v9 + 56) + 88 * v23);
    uint64_t v31 = v30[10];
    uint64_t v56 = v30[9];
    uint64_t v57 = v31;
    uint64_t v32 = v30[7];
    uint64_t v55 = v30[8];
    uint64_t v34 = v30[5];
    uint64_t v33 = v30[6];
    uint64_t v36 = v30[3];
    uint64_t v35 = v30[4];
    uint64_t v38 = v30[1];
    uint64_t v37 = v30[2];
    uint64_t v39 = *v30;
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v40 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v41 = result & ~v40;
    unint64_t v42 = v41 >> 6;
    if (((-1 << v41) & ~*(void *)(v16 + 8 * (v41 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v41) & ~*(void *)(v16 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v43 = 0;
      unint64_t v44 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v45 = v42 == v44;
        if (v42 == v44) {
          unint64_t v42 = 0;
        }
        v43 |= v45;
        uint64_t v46 = *(void *)(v16 + 8 * v42);
      }
      while (v46 == -1);
      unint64_t v19 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v54)(*(void *)(v11 + 48) + v28 * v19, v8, v58);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 88 * v19);
    *unint64_t v20 = v39;
    v20[1] = v38;
    v20[2] = v37;
    v20[3] = v36;
    v20[4] = v35;
    v20[5] = v34;
    v20[6] = v33;
    v20[7] = v32;
    uint64_t v21 = v56;
    v20[8] = v55;
    v20[9] = v21;
    v20[10] = v57;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  Swift::Int v3 = v48;
  int64_t v25 = v50;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v47 = 1 << *(unsigned char *)(v9 + 32);
  if (v47 >= 64) {
    bzero(v25, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v47;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

uint64_t sub_1001EDA58(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214(&qword_1005250B0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  char v33 = a2;
  uint64_t v34 = v2;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  swift_retain();
  int64_t v13 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v19 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v20 = v19 | (v13 << 6);
LABEL_31:
    char v29 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v25 = 0;
    unint64_t v26 = (unint64_t)(63 - v15) >> 6;
    while (++v17 != v26 || (v25 & 1) == 0)
    {
      BOOL v27 = v17 == v26;
      if (v17 == v26) {
        unint64_t v17 = 0;
      }
      v25 |= v27;
      uint64_t v28 = *(void *)(v12 + 8 * v17);
      if (v28 != -1)
      {
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
LABEL_8:
        *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        *(unsigned char *)(*(void *)(v7 + 48) + v18) = v29;
        *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
        ++*(void *)(v7 + 16);
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    JUMPOUT(0x1001EDF20);
  }
  int64_t v21 = v13 + 1;
  if (__OFADD__(v13, 1)) {
    goto LABEL_40;
  }
  if (v21 >= v11)
  {
    swift_release();
    Swift::Int v3 = v34;
    unint64_t v22 = (void *)(v5 + 64);
    if (v33)
    {
LABEL_35:
      uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
      if (v31 >= 64) {
        bzero(v22, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v22 = -1 << v31;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (v23) {
      goto LABEL_30;
    }
    int64_t v13 = v21 + 1;
    if (v21 + 1 >= v11) {
      goto LABEL_32;
    }
    unint64_t v23 = *(void *)(v35 + 8 * v13);
    if (v23)
    {
LABEL_30:
      unint64_t v10 = (v23 - 1) & v23;
      unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
      goto LABEL_31;
    }
    int64_t v24 = v21 + 2;
    if (v24 < v11)
    {
      unint64_t v23 = *(void *)(v35 + 8 * v24);
      if (!v23)
      {
        while (1)
        {
          int64_t v13 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_41;
          }
          if (v13 >= v11) {
            goto LABEL_32;
          }
          unint64_t v23 = *(void *)(v35 + 8 * v13);
          ++v24;
          if (v23) {
            goto LABEL_30;
          }
        }
      }
      int64_t v13 = v24;
      goto LABEL_30;
    }
LABEL_32:
    swift_release();
    Swift::Int v3 = v34;
    if (v33) {
      goto LABEL_35;
    }
  }
LABEL_39:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001EDF5C(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214(&qword_1005255C0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              Swift::Int v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      char v22 = *(unsigned char *)(*(void *)(v5 + 56) + v17);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(unsigned char *)(*(void *)(v7 + 56) + v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001EE1FC(uint64_t a1, int a2)
{
  return sub_1001F256C(a1, a2, &qword_1005242C8, (uint64_t *)&unk_1005251D0);
}

uint64_t sub_1001EE210(uint64_t a1, int a2)
{
  return sub_1001F2130(a1, a2, &qword_1005251B8);
}

uint64_t sub_1001EE21C(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000F214(&qword_1005251B0);
  int v43 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = result;
  if (*(void *)(v9 + 16))
  {
    int64_t v13 = 0;
    uint64_t v14 = *(void *)(v9 + 64);
    uint64_t v40 = (void *)(v9 + 64);
    uint64_t v15 = 1 << *(unsigned char *)(v9 + 32);
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & v14;
    uint64_t v38 = v3;
    int64_t v39 = (unint64_t)(v15 + 63) >> 6;
    unint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v42 = v6;
    int64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v19 = result + 64;
    uint64_t v20 = v11;
    while (1)
    {
      if (v17)
      {
        unint64_t v22 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v23 = v22 | (v13 << 6);
      }
      else
      {
        int64_t v24 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v40;
        if (v24 >= v39) {
          goto LABEL_34;
        }
        unint64_t v25 = v40[v24];
        ++v13;
        if (!v25)
        {
          int64_t v13 = v24 + 1;
          if (v24 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v25 = v40[v13];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v39)
            {
LABEL_34:
              if ((v43 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v3 = v38;
                goto LABEL_41;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v11 + 32);
              if (v36 >= 64) {
                bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v40 = -1 << v36;
              }
              Swift::Int v3 = v38;
              *(void *)(v11 + 16) = 0;
              break;
            }
            unint64_t v25 = v40[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v13 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_43;
                }
                if (v13 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v25 = v40[v13];
                ++v26;
                if (v25) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v26;
          }
        }
LABEL_21:
        unint64_t v17 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v13 << 6);
      }
      uint64_t v27 = *(void *)(v42 + 72);
      unint64_t v28 = *(void *)(v11 + 56) + v27 * v23;
      if (v43) {
        (*v18)(v8, v28, v5);
      }
      else {
        (*v41)(v8, v28, v5);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v19 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v30) & ~*(void *)(v19 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v11 = v20;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        uint64_t v11 = v20;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v19 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v21 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v19 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v12 + 56) + v27 * v21, v8, v5);
      ++*(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v3 = v12;
  return result;
}

uint64_t sub_1001EE5D0(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214((uint64_t *)&unk_1005251C0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v29 = -1 << v28;
              }
              Swift::Int v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001EE890(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000F214(&qword_100525090);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v40 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v42 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v41 = (unint64_t)(v12 + 63) >> 6;
    int v43 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    BOOL v45 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v46 = v5;
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    while (1)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v41) {
          goto LABEL_34;
        }
        unint64_t v23 = v42[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v23 = v42[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v41)
            {
LABEL_34:
              swift_release();
              Swift::Int v3 = v40;
              if (v44)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v9 + 32);
                if (v38 >= 64) {
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v42 = -1 << v38;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v42[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v23 = v42[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = v9;
      uint64_t v26 = *(void *)(v9 + 48);
      uint64_t v27 = v6;
      uint64_t v28 = *(void *)(v6 + 72);
      uint64_t v29 = v26 + v28 * v21;
      if (v44) {
        (*v45)(v8, v29, v46);
      }
      else {
        (*v43)(v8, v29, v46);
      }
      uint64_t v30 = *(void *)(*(void *)(v25 + 56) + 8 * v21);
      sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v31 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v32 = result & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v36 = v33 == v35;
          if (v33 == v35) {
            unint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v16 + 8 * v33);
        }
        while (v37 == -1);
        unint64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v45)(*(void *)(v11 + 48) + v28 * v19, v8, v46);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v30;
      ++*(void *)(v11 + 16);
      uint64_t v6 = v27;
      uint64_t v9 = v25;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

uint64_t sub_1001EECB8(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000F214(&qword_100525088);
  int v48 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v42 = v2;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  int v44 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  int64_t v43 = (unint64_t)(v12 + 63) >> 6;
  BOOL v45 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v50 = v8;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v46 = v9;
  uint64_t v47 = v6;
  uint64_t v51 = v5;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v43) {
      break;
    }
    int64_t v24 = v44;
    unint64_t v25 = v44[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v25 = v44[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_34:
          swift_release();
          Swift::Int v3 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v43) {
              goto LABEL_34;
            }
            unint64_t v25 = v44[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v48)
    {
      (*v49)(v50, v28, v51);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 24 * v22);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = v29[2];
    }
    else
    {
      (*v45)(v50, v28, v51);
      unint64_t v33 = (uint64_t *)(*(void *)(v9 + 56) + 24 * v22);
      uint64_t v30 = *v33;
      uint64_t v31 = v33[1];
      uint64_t v32 = v33[2];
      swift_bridgeObjectRetain();
      swift_errorRetain();
    }
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v47;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      uint64_t v6 = v47;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v16 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v19 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v49)(*(void *)(v11 + 48) + v27 * v19, v50, v51);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 24 * v19);
    *unint64_t v20 = v30;
    v20[1] = v31;
    v20[2] = v32;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v46;
  }
  swift_release();
  Swift::Int v3 = v42;
  int64_t v24 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v9 + 32);
  if (v41 >= 64) {
    bzero(v24, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v41;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

uint64_t sub_1001EF124(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214(&qword_100525120);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v36 = a2;
    unint64_t v35 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = -1 << v10;
    uint64_t v34 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v3 = v35;
                goto LABEL_38;
              }
              if (v34 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v33;
              }
              Swift::Int v3 = v35;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      uint64_t v23 = *(void *)(v5 + 56) + 32 * v18;
      uint64_t v24 = *(void *)(v23 + 24);
      long long v37 = *(_OWORD *)(v23 + 8);
      uint64_t v25 = *(void *)v23;
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
      uint64_t v16 = *(void *)(v7 + 56) + 32 * v15;
      *(void *)uint64_t v16 = v25;
      *(_OWORD *)(v16 + 8) = v37;
      *(void *)(v16 + 24) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001EF3E8(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214((uint64_t *)&unk_100524EC0);
  char v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    long long v37 = v3;
    int64_t v8 = 0;
    BOOL v39 = (void *)(v5 + 64);
    uint64_t v40 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v20 >= v38) {
          goto LABEL_33;
        }
        unint64_t v21 = v39[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v38) {
            goto LABEL_33;
          }
          unint64_t v21 = v39[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v38)
            {
LABEL_33:
              if ((v41 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v3 = v37;
                goto LABEL_40;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v39 = -1 << v36;
              }
              Swift::Int v3 = v37;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v39[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v38) {
                  goto LABEL_33;
                }
                unint64_t v21 = v39[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(v5 + 56);
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      char v29 = (uint64_t *)(v27 + 48 * v19);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = v29[2];
      uint64_t v33 = v29[3];
      unint64_t v34 = v29[4];
      int v35 = *((_DWORD *)v29 + 10);
      char v42 = *((unsigned char *)v29 + 44);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000A7588(v33, v34);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v28;
      uint64_t v17 = *(void *)(v7 + 56) + 48 * v16;
      *(void *)uint64_t v17 = v30;
      *(void *)(v17 + 8) = v31;
      *(void *)(v17 + 16) = v32;
      *(void *)(v17 + 24) = v33;
      *(void *)(v17 + 32) = v34;
      *(_DWORD *)(v17 + 40) = v35;
      *(unsigned char *)(v17 + 44) = v42;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001EF714(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v58 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v59 = (uint64_t)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v57 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v56 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v55 = (uint64_t)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CVDetection();
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v63 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  int64_t v20 = (char *)&v53 - v19;
  uint64_t v21 = *v2;
  sub_10000F214(&qword_100524EA8);
  int v64 = a2;
  uint64_t v22 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v23 = v22;
  if (!*(void *)(v21 + 16)) {
    goto LABEL_49;
  }
  unint64_t v54 = v2;
  uint64_t v24 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v25 = *(void *)(v21 + 64);
  uint64_t v61 = (void *)(v21 + 64);
  if (v24 < 64) {
    uint64_t v26 = ~(-1 << v24);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v27 = v26 & v25;
  int64_t v60 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v28 = v22 + 64;
  swift_retain();
  int64_t v29 = 0;
LABEL_8:
  if (v27)
  {
    unint64_t v31 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    unint64_t v32 = v31 | (v29 << 6);
    goto LABEL_22;
  }
  int64_t v33 = v29 + 1;
  if (__OFADD__(v29, 1)) {
    goto LABEL_50;
  }
  if (v33 >= v60)
  {
    swift_release();
    Swift::Int v3 = v54;
    unint64_t v34 = v61;
    if (v64)
    {
LABEL_45:
      uint64_t v51 = 1 << *(unsigned char *)(v21 + 32);
      if (v51 >= 64) {
        bzero(v34, ((unint64_t)(v51 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v34 = -1 << v51;
      }
      *(void *)(v21 + 16) = 0;
    }
  }
  else
  {
    unint64_t v34 = v61;
    unint64_t v35 = v61[v33];
    ++v29;
    if (v35) {
      goto LABEL_21;
    }
    int64_t v29 = v33 + 1;
    if (v33 + 1 >= v60) {
      goto LABEL_42;
    }
    unint64_t v35 = v61[v29];
    if (v35)
    {
LABEL_21:
      unint64_t v27 = (v35 - 1) & v35;
      unint64_t v32 = __clz(__rbit64(v35)) + (v29 << 6);
LABEL_22:
      uint64_t v37 = *(void *)(v62 + 72);
      uint64_t v38 = *(void *)(v21 + 48) + v37 * v32;
      if (v64) {
        sub_10020F140(v38, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      else {
        sub_10020F0D8(v38, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      int v39 = *(_DWORD *)(*(void *)(v21 + 56) + 4 * v32);
      Hasher.init(_seed:)();
      sub_10020F0D8((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v40 = v56;
          sub_10020F140((uint64_t)v17, v56, type metadata accessor for ParseDetectorResult);
          Hasher._combine(_:)(1uLL);
          sub_1003E7010((uint64_t)v65);
          char v41 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          uint64_t v40 = v57;
          sub_10020F140((uint64_t)v17, v57, type metadata accessor for TextDetectorResult);
          Hasher._combine(_:)(2uLL);
          sub_10032169C((uint64_t)v65);
          char v41 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
          uint64_t v40 = v59;
          sub_10020F140((uint64_t)v17, v59, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v42 = 3;
          goto LABEL_31;
        case 4u:
          uint64_t v40 = v59;
          sub_10020F140((uint64_t)v17, v59, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v42 = 4;
LABEL_31:
          Hasher._combine(_:)(v42);
          sub_100165074();
          char v41 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          uint64_t v40 = v58;
          sub_10020F140((uint64_t)v17, v58, type metadata accessor for StreamingTextDetectorResult);
          Hasher._combine(_:)(5uLL);
          sub_1001665AC();
          char v41 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          uint64_t v40 = v55;
          sub_10020F140((uint64_t)v17, v55, type metadata accessor for ObjectDetectorResult);
          Hasher._combine(_:)(0);
          sub_10031E668();
          char v41 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      sub_1001D430C(v40, v41);
      Swift::Int v43 = Hasher._finalize()();
      uint64_t v44 = -1 << *(unsigned char *)(v23 + 32);
      unint64_t v45 = v43 & ~v44;
      unint64_t v46 = v45 >> 6;
      if (((-1 << v45) & ~*(void *)(v28 + 8 * (v45 >> 6))) != 0)
      {
        unint64_t v30 = __clz(__rbit64((-1 << v45) & ~*(void *)(v28 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      char v47 = 0;
      unint64_t v48 = (unint64_t)(63 - v44) >> 6;
      while (++v46 != v48 || (v47 & 1) == 0)
      {
        BOOL v49 = v46 == v48;
        if (v46 == v48) {
          unint64_t v46 = 0;
        }
        v47 |= v49;
        uint64_t v50 = *(void *)(v28 + 8 * v46);
        if (v50 != -1)
        {
          unint64_t v30 = __clz(__rbit64(~v50)) + (v46 << 6);
LABEL_7:
          *(void *)(v28 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
          sub_10020F140((uint64_t)v20, *(void *)(v23 + 48) + v37 * v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
          *(_DWORD *)(*(void *)(v23 + 56) + 4 * v30) = v39;
          ++*(void *)(v23 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      JUMPOUT(0x1001EFE94);
    }
    int64_t v36 = v33 + 2;
    if (v36 < v60)
    {
      unint64_t v35 = v61[v36];
      if (!v35)
      {
        while (1)
        {
          int64_t v29 = v36 + 1;
          if (__OFADD__(v36, 1)) {
            goto LABEL_51;
          }
          if (v29 >= v60) {
            goto LABEL_42;
          }
          unint64_t v35 = v61[v29];
          ++v36;
          if (v35) {
            goto LABEL_21;
          }
        }
      }
      int64_t v29 = v36;
      goto LABEL_21;
    }
LABEL_42:
    swift_release();
    Swift::Int v3 = v54;
    if (v64) {
      goto LABEL_45;
    }
  }
LABEL_49:
  uint64_t result = swift_release();
  uint64_t *v3 = v23;
  return result;
}

uint64_t sub_1001EFEAC(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v58 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v59 = (uint64_t)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v57 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v56 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v55 = (uint64_t)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CVDetection();
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v63 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  int64_t v20 = (char *)&v53 - v19;
  uint64_t v21 = *v2;
  sub_10000F214(&qword_100524EB8);
  int v64 = a2;
  uint64_t v22 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v23 = v22;
  if (!*(void *)(v21 + 16)) {
    goto LABEL_49;
  }
  unint64_t v54 = v2;
  uint64_t v24 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v25 = *(void *)(v21 + 64);
  uint64_t v61 = (void *)(v21 + 64);
  if (v24 < 64) {
    uint64_t v26 = ~(-1 << v24);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v27 = v26 & v25;
  int64_t v60 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v28 = v22 + 64;
  swift_retain();
  int64_t v29 = 0;
LABEL_8:
  if (v27)
  {
    unint64_t v31 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    unint64_t v32 = v31 | (v29 << 6);
    goto LABEL_22;
  }
  int64_t v33 = v29 + 1;
  if (__OFADD__(v29, 1)) {
    goto LABEL_50;
  }
  if (v33 >= v60)
  {
    swift_release();
    Swift::Int v3 = v54;
    unint64_t v34 = v61;
    if (v64)
    {
LABEL_45:
      uint64_t v51 = 1 << *(unsigned char *)(v21 + 32);
      if (v51 >= 64) {
        bzero(v34, ((unint64_t)(v51 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v34 = -1 << v51;
      }
      *(void *)(v21 + 16) = 0;
    }
  }
  else
  {
    unint64_t v34 = v61;
    unint64_t v35 = v61[v33];
    ++v29;
    if (v35) {
      goto LABEL_21;
    }
    int64_t v29 = v33 + 1;
    if (v33 + 1 >= v60) {
      goto LABEL_42;
    }
    unint64_t v35 = v61[v29];
    if (v35)
    {
LABEL_21:
      unint64_t v27 = (v35 - 1) & v35;
      unint64_t v32 = __clz(__rbit64(v35)) + (v29 << 6);
LABEL_22:
      uint64_t v37 = *(void *)(v62 + 72);
      uint64_t v38 = *(void *)(v21 + 48) + v37 * v32;
      if (v64) {
        sub_10020F140(v38, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      else {
        sub_10020F0D8(v38, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      uint64_t v39 = *(void *)(*(void *)(v21 + 56) + 8 * v32);
      Hasher.init(_seed:)();
      sub_10020F0D8((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v40 = v56;
          sub_10020F140((uint64_t)v17, v56, type metadata accessor for ParseDetectorResult);
          Hasher._combine(_:)(1uLL);
          sub_1003E7010((uint64_t)v65);
          char v41 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          uint64_t v40 = v57;
          sub_10020F140((uint64_t)v17, v57, type metadata accessor for TextDetectorResult);
          Hasher._combine(_:)(2uLL);
          sub_10032169C((uint64_t)v65);
          char v41 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
          uint64_t v40 = v59;
          sub_10020F140((uint64_t)v17, v59, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v42 = 3;
          goto LABEL_31;
        case 4u:
          uint64_t v40 = v59;
          sub_10020F140((uint64_t)v17, v59, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v42 = 4;
LABEL_31:
          Hasher._combine(_:)(v42);
          sub_100165074();
          char v41 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          uint64_t v40 = v58;
          sub_10020F140((uint64_t)v17, v58, type metadata accessor for StreamingTextDetectorResult);
          Hasher._combine(_:)(5uLL);
          sub_1001665AC();
          char v41 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          uint64_t v40 = v55;
          sub_10020F140((uint64_t)v17, v55, type metadata accessor for ObjectDetectorResult);
          Hasher._combine(_:)(0);
          sub_10031E668();
          char v41 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      sub_1001D430C(v40, v41);
      Swift::Int v43 = Hasher._finalize()();
      uint64_t v44 = -1 << *(unsigned char *)(v23 + 32);
      unint64_t v45 = v43 & ~v44;
      unint64_t v46 = v45 >> 6;
      if (((-1 << v45) & ~*(void *)(v28 + 8 * (v45 >> 6))) != 0)
      {
        unint64_t v30 = __clz(__rbit64((-1 << v45) & ~*(void *)(v28 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      char v47 = 0;
      unint64_t v48 = (unint64_t)(63 - v44) >> 6;
      while (++v46 != v48 || (v47 & 1) == 0)
      {
        BOOL v49 = v46 == v48;
        if (v46 == v48) {
          unint64_t v46 = 0;
        }
        v47 |= v49;
        uint64_t v50 = *(void *)(v28 + 8 * v46);
        if (v50 != -1)
        {
          unint64_t v30 = __clz(__rbit64(~v50)) + (v46 << 6);
LABEL_7:
          *(void *)(v28 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
          sub_10020F140((uint64_t)v20, *(void *)(v23 + 48) + v37 * v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
          *(void *)(*(void *)(v23 + 56) + 8 * v30) = v39;
          ++*(void *)(v23 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      JUMPOUT(0x1001F062CLL);
    }
    int64_t v36 = v33 + 2;
    if (v36 < v60)
    {
      unint64_t v35 = v61[v36];
      if (!v35)
      {
        while (1)
        {
          int64_t v29 = v36 + 1;
          if (__OFADD__(v36, 1)) {
            goto LABEL_51;
          }
          if (v29 >= v60) {
            goto LABEL_42;
          }
          unint64_t v35 = v61[v29];
          ++v36;
          if (v35) {
            goto LABEL_21;
          }
        }
      }
      int64_t v29 = v36;
      goto LABEL_21;
    }
LABEL_42:
    swift_release();
    Swift::Int v3 = v54;
    if (v64) {
      goto LABEL_45;
    }
  }
LABEL_49:
  uint64_t result = swift_release();
  uint64_t *v3 = v23;
  return result;
}

uint64_t sub_1001F0644(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v79 = (uint64_t)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v81 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v78 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v77 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v76 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CVDetection();
  uint64_t v85 = *(void *)(v15 - 8);
  uint64_t v86 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v92 = (uint64_t)&v75 - v19;
  uint64_t v20 = *v2;
  sub_10000F214(&qword_100525280);
  int v87 = a2;
  uint64_t v21 = v20;
  uint64_t v22 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v23 = v22;
  if (!*(void *)(v20 + 16)) {
    goto LABEL_51;
  }
  CGRect v75 = v2;
  uint64_t v24 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v25 = *(void *)(v20 + 64);
  double v83 = (void *)(v20 + 64);
  if (v24 < 64) {
    uint64_t v26 = ~(-1 << v24);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v27 = v26 & v25;
  int64_t v82 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v28 = v22 + 64;
  swift_retain();
  int64_t v29 = 0;
  uint64_t v80 = v21;
  uint64_t v84 = v17;
LABEL_8:
  if (v27)
  {
    unint64_t v34 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    unint64_t v35 = v34 | (v29 << 6);
    uint64_t v36 = v92;
    goto LABEL_22;
  }
  int64_t v37 = v29 + 1;
  uint64_t v36 = v92;
  if (__OFADD__(v29, 1)) {
    goto LABEL_52;
  }
  if (v37 >= v82)
  {
    swift_release();
    Swift::Int v3 = v75;
    uint64_t v38 = v83;
    if (v87)
    {
LABEL_47:
      uint64_t v73 = 1 << *(unsigned char *)(v21 + 32);
      if (v73 >= 64) {
        bzero(v38, ((unint64_t)(v73 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        void *v38 = -1 << v73;
      }
      *(void *)(v21 + 16) = 0;
    }
  }
  else
  {
    uint64_t v38 = v83;
    unint64_t v39 = v83[v37];
    ++v29;
    if (v39) {
      goto LABEL_21;
    }
    int64_t v29 = v37 + 1;
    if (v37 + 1 >= v82) {
      goto LABEL_44;
    }
    unint64_t v39 = v83[v29];
    if (v39)
    {
LABEL_21:
      unint64_t v27 = (v39 - 1) & v39;
      unint64_t v35 = __clz(__rbit64(v39)) + (v29 << 6);
LABEL_22:
      uint64_t v41 = *(void *)(v85 + 72);
      uint64_t v42 = *(void *)(v21 + 48) + v41 * v35;
      if (v87)
      {
        sub_10020F140(v42, v36, (uint64_t (*)(void))type metadata accessor for CVDetection);
        Swift::Int v43 = (uint64_t *)(*(void *)(v21 + 56) + 48 * v35);
        uint64_t v44 = *v43;
        uint64_t v90 = v43[1];
        uint64_t v91 = v44;
        uint64_t v45 = v43[2];
        unint64_t v46 = (void *)v43[4];
        uint64_t v88 = v43[3];
        uint64_t v89 = v45;
        char v47 = (void *)v43[5];
      }
      else
      {
        sub_10020F0D8(v42, v36, (uint64_t (*)(void))type metadata accessor for CVDetection);
        unint64_t v48 = (uint64_t *)(*(void *)(v21 + 56) + 48 * v35);
        uint64_t v49 = *v48;
        uint64_t v50 = v48[2];
        uint64_t v51 = v48[3];
        unint64_t v46 = (void *)v48[4];
        char v47 = (void *)v48[5];
        uint64_t v90 = v48[1];
        uint64_t v91 = v49;
        uint64_t v88 = v51;
        uint64_t v89 = v50;
        sub_10020F1A8(v49, v90, v50, v51, v46);
        id v52 = v47;
      }
      Hasher.init(_seed:)();
      sub_10020F0D8(v36, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v56 = (uint64_t)v17;
          uint64_t v54 = v77;
          sub_10020F140(v56, v77, type metadata accessor for ParseDetectorResult);
          Hasher._combine(_:)(1uLL);
          sub_1003E7010((uint64_t)v93);
          uint64_t v55 = type metadata accessor for ParseDetectorResult;
          goto LABEL_32;
        case 2u:
          uint64_t v57 = v78;
          sub_10020F140((uint64_t)v17, v78, type metadata accessor for TextDetectorResult);
          Hasher._combine(_:)(2uLL);
          sub_10032169C((uint64_t)v93);
          uint64_t v58 = type metadata accessor for TextDetectorResult;
          uint64_t v59 = v57;
          goto LABEL_34;
        case 3u:
          uint64_t v60 = (uint64_t)v17;
          uint64_t v54 = v81;
          sub_10020F140(v60, v81, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v61 = 3;
          goto LABEL_31;
        case 4u:
          uint64_t v62 = (uint64_t)v17;
          uint64_t v54 = v81;
          sub_10020F140(v62, v81, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v61 = 4;
LABEL_31:
          Hasher._combine(_:)(v61);
          sub_100165074();
          uint64_t v55 = type metadata accessor for StreamingBarcodeDetectorResult;
          goto LABEL_32;
        case 5u:
          uint64_t v63 = (uint64_t)v17;
          uint64_t v64 = v79;
          sub_10020F140(v63, v79, type metadata accessor for StreamingTextDetectorResult);
          Hasher._combine(_:)(5uLL);
          sub_1001665AC();
          uint64_t v58 = type metadata accessor for StreamingTextDetectorResult;
          uint64_t v59 = v64;
          uint64_t v17 = v84;
LABEL_34:
          uint64_t v21 = v80;
          goto LABEL_35;
        default:
          uint64_t v53 = (uint64_t)v17;
          uint64_t v54 = v76;
          sub_10020F140(v53, v76, type metadata accessor for ObjectDetectorResult);
          Hasher._combine(_:)(0);
          sub_10031E668();
          uint64_t v55 = type metadata accessor for ObjectDetectorResult;
LABEL_32:
          uint64_t v58 = v55;
          uint64_t v59 = v54;
          uint64_t v17 = v84;
LABEL_35:
          sub_1001D430C(v59, v58);
          Swift::Int v65 = Hasher._finalize()();
          uint64_t v66 = -1 << *(unsigned char *)(v23 + 32);
          unint64_t v67 = v65 & ~v66;
          unint64_t v68 = v67 >> 6;
          if (((-1 << v67) & ~*(void *)(v28 + 8 * (v67 >> 6))) != 0)
          {
            unint64_t v30 = __clz(__rbit64((-1 << v67) & ~*(void *)(v28 + 8 * (v67 >> 6)))) | v67 & 0x7FFFFFFFFFFFFFC0;
            goto LABEL_7;
          }
          char v69 = 0;
          unint64_t v70 = (unint64_t)(63 - v66) >> 6;
          break;
      }
      while (++v68 != v70 || (v69 & 1) == 0)
      {
        BOOL v71 = v68 == v70;
        if (v68 == v70) {
          unint64_t v68 = 0;
        }
        v69 |= v71;
        uint64_t v72 = *(void *)(v28 + 8 * v68);
        if (v72 != -1)
        {
          unint64_t v30 = __clz(__rbit64(~v72)) + (v68 << 6);
LABEL_7:
          *(void *)(v28 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
          sub_10020F140(v92, *(void *)(v23 + 48) + v41 * v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
          unint64_t v31 = (uint64_t *)(*(void *)(v23 + 56) + 48 * v30);
          uint64_t v32 = v90;
          uint64_t *v31 = v91;
          v31[1] = v32;
          uint64_t v33 = v88;
          v31[2] = v89;
          v31[3] = v33;
          v31[4] = (uint64_t)v46;
          v31[5] = (uint64_t)v47;
          ++*(void *)(v23 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      JUMPOUT(0x1001F0E80);
    }
    int64_t v40 = v37 + 2;
    if (v40 < v82)
    {
      unint64_t v39 = v83[v40];
      if (!v39)
      {
        while (1)
        {
          int64_t v29 = v40 + 1;
          if (__OFADD__(v40, 1)) {
            goto LABEL_53;
          }
          if (v29 >= v82) {
            goto LABEL_44;
          }
          unint64_t v39 = v83[v29];
          ++v40;
          if (v39) {
            goto LABEL_21;
          }
        }
      }
      int64_t v29 = v40;
      goto LABEL_21;
    }
LABEL_44:
    swift_release();
    Swift::Int v3 = v75;
    if (v87) {
      goto LABEL_47;
    }
  }
LABEL_51:
  uint64_t result = swift_release();
  uint64_t *v3 = v23;
  return result;
}

uint64_t sub_1001F0E98(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v67 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v69 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v66 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v65 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v64 = (uint64_t)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CVDetection();
  uint64_t v73 = *(void *)(v15 - 8);
  uint64_t v74 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v62 - v19;
  uint64_t v21 = *v2;
  sub_10000F214(&qword_100525118);
  int v75 = a2;
  uint64_t v22 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v23 = v22;
  if (!*(void *)(v21 + 16)) {
    goto LABEL_51;
  }
  uint64_t v63 = v2;
  uint64_t v24 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v25 = *(void *)(v21 + 64);
  BOOL v71 = (void *)(v21 + 64);
  if (v24 < 64) {
    uint64_t v26 = ~(-1 << v24);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v27 = v26 & v25;
  int64_t v70 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v28 = v22 + 64;
  swift_retain();
  int64_t v29 = 0;
  uint64_t v68 = v21;
  uint64_t v72 = v17;
LABEL_8:
  if (v27)
  {
    unint64_t v31 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    unint64_t v32 = v31 | (v29 << 6);
    goto LABEL_22;
  }
  int64_t v33 = v29 + 1;
  if (__OFADD__(v29, 1)) {
    goto LABEL_52;
  }
  if (v33 >= v70)
  {
    swift_release();
    Swift::Int v3 = v63;
    unint64_t v34 = v71;
    if (v75)
    {
LABEL_47:
      uint64_t v60 = 1 << *(unsigned char *)(v21 + 32);
      if (v60 >= 64) {
        bzero(v34, ((unint64_t)(v60 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v34 = -1 << v60;
      }
      *(void *)(v21 + 16) = 0;
    }
  }
  else
  {
    unint64_t v34 = v71;
    unint64_t v35 = v71[v33];
    ++v29;
    if (v35) {
      goto LABEL_21;
    }
    int64_t v29 = v33 + 1;
    if (v33 + 1 >= v70) {
      goto LABEL_44;
    }
    unint64_t v35 = v71[v29];
    if (v35)
    {
LABEL_21:
      unint64_t v27 = (v35 - 1) & v35;
      unint64_t v32 = __clz(__rbit64(v35)) + (v29 << 6);
LABEL_22:
      uint64_t v37 = *(void *)(v73 + 72);
      uint64_t v38 = *(void *)(v21 + 48) + v37 * v32;
      if (v75) {
        sub_10020F140(v38, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      else {
        sub_10020F0D8(v38, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      char v39 = *(unsigned char *)(*(void *)(v21 + 56) + v32);
      Hasher.init(_seed:)();
      sub_10020F0D8((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v43 = (uint64_t)v17;
          uint64_t v41 = v65;
          sub_10020F140(v43, v65, type metadata accessor for ParseDetectorResult);
          Hasher._combine(_:)(1uLL);
          sub_1003E7010((uint64_t)v76);
          uint64_t v42 = type metadata accessor for ParseDetectorResult;
          goto LABEL_32;
        case 2u:
          uint64_t v44 = v66;
          sub_10020F140((uint64_t)v17, v66, type metadata accessor for TextDetectorResult);
          Hasher._combine(_:)(2uLL);
          sub_10032169C((uint64_t)v76);
          uint64_t v45 = type metadata accessor for TextDetectorResult;
          uint64_t v46 = v44;
          goto LABEL_34;
        case 3u:
          uint64_t v47 = (uint64_t)v17;
          uint64_t v41 = v69;
          sub_10020F140(v47, v69, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v48 = 3;
          goto LABEL_31;
        case 4u:
          uint64_t v49 = (uint64_t)v17;
          uint64_t v41 = v69;
          sub_10020F140(v49, v69, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v48 = 4;
LABEL_31:
          Hasher._combine(_:)(v48);
          sub_100165074();
          uint64_t v42 = type metadata accessor for StreamingBarcodeDetectorResult;
          goto LABEL_32;
        case 5u:
          uint64_t v50 = (uint64_t)v17;
          uint64_t v51 = v67;
          sub_10020F140(v50, v67, type metadata accessor for StreamingTextDetectorResult);
          Hasher._combine(_:)(5uLL);
          sub_1001665AC();
          uint64_t v45 = type metadata accessor for StreamingTextDetectorResult;
          uint64_t v46 = v51;
          uint64_t v17 = v72;
LABEL_34:
          uint64_t v21 = v68;
          goto LABEL_35;
        default:
          uint64_t v40 = (uint64_t)v17;
          uint64_t v41 = v64;
          sub_10020F140(v40, v64, type metadata accessor for ObjectDetectorResult);
          Hasher._combine(_:)(0);
          sub_10031E668();
          uint64_t v42 = type metadata accessor for ObjectDetectorResult;
LABEL_32:
          uint64_t v45 = v42;
          uint64_t v46 = v41;
          uint64_t v17 = v72;
LABEL_35:
          sub_1001D430C(v46, v45);
          Swift::Int v52 = Hasher._finalize()();
          uint64_t v53 = -1 << *(unsigned char *)(v23 + 32);
          unint64_t v54 = v52 & ~v53;
          unint64_t v55 = v54 >> 6;
          if (((-1 << v54) & ~*(void *)(v28 + 8 * (v54 >> 6))) != 0)
          {
            unint64_t v30 = __clz(__rbit64((-1 << v54) & ~*(void *)(v28 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
            goto LABEL_7;
          }
          char v56 = 0;
          unint64_t v57 = (unint64_t)(63 - v53) >> 6;
          break;
      }
      while (++v55 != v57 || (v56 & 1) == 0)
      {
        BOOL v58 = v55 == v57;
        if (v55 == v57) {
          unint64_t v55 = 0;
        }
        v56 |= v58;
        uint64_t v59 = *(void *)(v28 + 8 * v55);
        if (v59 != -1)
        {
          unint64_t v30 = __clz(__rbit64(~v59)) + (v55 << 6);
LABEL_7:
          *(void *)(v28 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
          sub_10020F140((uint64_t)v20, *(void *)(v23 + 48) + v37 * v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
          *(unsigned char *)(*(void *)(v23 + 56) + v30) = v39;
          ++*(void *)(v23 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      JUMPOUT(0x1001F1634);
    }
    int64_t v36 = v33 + 2;
    if (v36 < v70)
    {
      unint64_t v35 = v71[v36];
      if (!v35)
      {
        while (1)
        {
          int64_t v29 = v36 + 1;
          if (__OFADD__(v36, 1)) {
            goto LABEL_53;
          }
          if (v29 >= v70) {
            goto LABEL_44;
          }
          unint64_t v35 = v71[v29];
          ++v36;
          if (v35) {
            goto LABEL_21;
          }
        }
      }
      int64_t v29 = v36;
      goto LABEL_21;
    }
LABEL_44:
    swift_release();
    Swift::Int v3 = v63;
    if (v75) {
      goto LABEL_47;
    }
  }
LABEL_51:
  uint64_t result = swift_release();
  uint64_t *v3 = v23;
  return result;
}

void sub_1001F164C(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  sub_10000F214(&qword_100524E70);
  char v27 = a2;
  uint64_t v28 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v4 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v26 = (void *)(v4 + 64);
    uint64_t v6 = -1;
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    unint64_t v7 = v6 & *(void *)(v4 + 64);
    int64_t v25 = (unint64_t)(v5 + 63) >> 6;
    swift_retain();
    int64_t v8 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v9 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v10 = v9 | (v8 << 6);
      }
      else
      {
        int64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v11 >= v25) {
          goto LABEL_22;
        }
        unint64_t v12 = v26[v11];
        ++v8;
        if (!v12)
        {
          int64_t v8 = v11 + 1;
          if (v11 + 1 >= v25) {
            goto LABEL_22;
          }
          unint64_t v12 = v26[v8];
          if (!v12)
          {
            int64_t v13 = v11 + 2;
            if (v13 >= v25)
            {
LABEL_22:
              swift_release();
              if (v27)
              {
                uint64_t v23 = 1 << *(unsigned char *)(v4 + 32);
                if (v23 > 63) {
                  bzero(v26, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v26 = -1 << v23;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            unint64_t v12 = v26[v13];
            if (!v12)
            {
              while (1)
              {
                int64_t v8 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_29;
                }
                if (v8 >= v25) {
                  goto LABEL_22;
                }
                unint64_t v12 = v26[v8];
                ++v13;
                if (v12) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v8 = v13;
          }
        }
LABEL_19:
        unint64_t v7 = (v12 - 1) & v12;
        unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
      }
      uint64_t v14 = *(void *)(v4 + 48) + 48 * v10;
      Swift::UInt v15 = *(void *)v14;
      Swift::UInt v16 = *(void *)(v14 + 8);
      Swift::UInt v18 = *(void *)(v14 + 16);
      Swift::UInt v17 = *(void *)(v14 + 24);
      Swift::UInt v20 = *(void *)(v14 + 32);
      uint64_t v19 = *(void **)(v14 + 40);
      uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v10);
      if ((v27 & 1) == 0)
      {
        sub_10020F1A8(*(void *)v14, *(void *)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24), *(void **)(v14 + 32));
        id v22 = v19;
        swift_bridgeObjectRetain();
      }
      v29[0] = v15;
      v29[1] = v16;
      v29[2] = v18;
      v29[3] = v17;
      v29[4] = v20;
      v29[5] = (Swift::UInt)v19;
      sub_1001F3E9C(v29, v21, v28);
    }
  }
  swift_release();
  *uint64_t v24 = v28;
}

uint64_t sub_1001F188C(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214(&qword_100525128);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v31 = v2;
  uint64_t v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v32 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v32 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          Swift::Int v3 = v31;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v32 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v32 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
    long long v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0) {
      swift_retain();
    }
    Hasher.init(_seed:)();
    Color.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v29;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::Int v3 = v31;
  id v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v22, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v22 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001F1B78(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214((uint64_t *)&unk_100525130);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v32 = v3;
    long long v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v21 >= v12) {
          goto LABEL_33;
        }
        unint64_t v22 = v33[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v22 = v33[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v3 = v32;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *long long v33 = -1 << v31;
              }
              Swift::Int v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v33[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v22 = v33[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_unknownObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001F1E38(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214(&qword_100525110);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v21 >= v12) {
          goto LABEL_33;
        }
        unint64_t v22 = v31[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v22 = v31[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v31, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v31 = -1 << v30;
              }
              Swift::Int v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v31[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v22 = v31[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      long long v32 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v28 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0) {
        id v29 = v28;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v32);
      Hasher._combine(_:)(*((Swift::UInt *)&v32 + 1));
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        long long v18 = v32;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        long long v18 = v32;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v17) = v18;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1001F2124(uint64_t a1, int a2)
{
  return sub_1001F2130(a1, a2, &qword_1005250C8);
}

uint64_t sub_1001F2130(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_10000F214(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    uint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_retain();
    }
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  uint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t sub_1001F2558(uint64_t a1, int a2)
{
  return sub_1001F256C(a1, a2, &qword_1005250D0, &qword_1005250D8);
}

uint64_t sub_1001F256C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v56 = sub_10000F214(a3);
  uint64_t v8 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  unint64_t v55 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v4;
  sub_10000F214(a4);
  int v53 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v47 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = v8 + 16;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v51 = v8;
  uint64_t v52 = v11;
  int64_t v21 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  unint64_t v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v22 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v46) {
      break;
    }
    int64_t v29 = v47;
    unint64_t v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v30 = v47[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v46) {
              goto LABEL_34;
            }
            unint64_t v30 = v47[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v52 + 72);
    unint64_t v33 = *(void *)(v14 + 48) + v32 * v27;
    if (v53)
    {
      (*v21)(v13, v33, v10);
      uint64_t v34 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 32))(v55, v34 + v35 * v27, v56);
    }
    else
    {
      (*v49)(v13, v33, v10);
      uint64_t v36 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v55, v36 + v35 * v27, v56);
    }
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v21)((char *)(*(void *)(v16 + 48) + v32 * v25), (unint64_t)v13, v10);
    uint64_t result = (*v54)(*(void *)(v16 + 56) + v35 * v25, v55, v56);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v6 = v45;
  int64_t v29 = v47;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v14 + 32);
  if (v44 >= 64) {
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v29 = -1 << v44;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v16;
  return result;
}

uint64_t sub_1001F2A68(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v65 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v66 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v64 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v63 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v62 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_1005250E0);
  uint64_t v72 = *(void *)(v15 - 8);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for CVDetection();
  uint64_t v73 = *(void *)(v18 - 8);
  uint64_t v74 = v18;
  __chkstk_darwin(v18);
  BOOL v71 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v60 - v21;
  uint64_t v23 = *v2;
  sub_10000F214(&qword_1005250E8);
  int v75 = a2;
  uint64_t v24 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v25 = v24;
  if (!*(void *)(v23 + 16)) {
    goto LABEL_50;
  }
  Swift::UInt v61 = v2;
  uint64_t v26 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v27 = *(void *)(v23 + 64);
  uint64_t v68 = (void *)(v23 + 64);
  if (v26 < 64) {
    uint64_t v28 = ~(-1 << v26);
  }
  else {
    uint64_t v28 = -1;
  }
  unint64_t v29 = v28 & v27;
  int64_t v67 = (unint64_t)(v26 + 63) >> 6;
  uint64_t v30 = v24 + 64;
  swift_retain();
  int64_t v31 = 0;
  uint64_t v69 = v23;
  int64_t v70 = v17;
  while (1)
  {
    if (v29)
    {
      unint64_t v33 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      unint64_t v34 = v33 | (v31 << 6);
      goto LABEL_22;
    }
    int64_t v35 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_51;
    }
    if (v35 >= v67) {
      break;
    }
    unint64_t v36 = v68[v35];
    ++v31;
    if (!v36)
    {
      int64_t v31 = v35 + 1;
      if (v35 + 1 >= v67) {
        break;
      }
      unint64_t v36 = v68[v31];
      if (!v36)
      {
        int64_t v37 = v35 + 2;
        if (v37 >= v67) {
          break;
        }
        unint64_t v36 = v68[v37];
        if (!v36)
        {
          while (1)
          {
            int64_t v31 = v37 + 1;
            if (__OFADD__(v37, 1)) {
              goto LABEL_52;
            }
            if (v31 >= v67) {
              goto LABEL_45;
            }
            unint64_t v36 = v68[v31];
            ++v37;
            if (v36) {
              goto LABEL_21;
            }
          }
        }
        int64_t v31 = v37;
      }
    }
LABEL_21:
    unint64_t v29 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v31 << 6);
LABEL_22:
    uint64_t v38 = *(void *)(v73 + 72);
    uint64_t v39 = *(void *)(v23 + 48) + v38 * v34;
    if (v75)
    {
      sub_10020F140(v39, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v40 = *(void *)(v72 + 72);
      sub_10000FC34(*(void *)(v23 + 56) + v40 * v34, (uint64_t)v17, &qword_1005250E0);
    }
    else
    {
      sub_10020F0D8(v39, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v40 = *(void *)(v72 + 72);
      sub_10000FB74(*(void *)(v23 + 56) + v40 * v34, (uint64_t)v17, &qword_1005250E0);
    }
    uint64_t v41 = (uint64_t)v71;
    Hasher.init(_seed:)();
    sub_10020F0D8((uint64_t)v22, v41, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v44 = v63;
        sub_10020F140(v41, v63, type metadata accessor for ParseDetectorResult);
        Hasher._combine(_:)(1uLL);
        sub_1003E7010((uint64_t)v76);
        uint64_t v45 = type metadata accessor for ParseDetectorResult;
        goto LABEL_29;
      case 2u:
        uint64_t v44 = v64;
        sub_10020F140(v41, v64, type metadata accessor for TextDetectorResult);
        Hasher._combine(_:)(2uLL);
        sub_10032169C((uint64_t)v76);
        uint64_t v45 = type metadata accessor for TextDetectorResult;
LABEL_29:
        int64_t v46 = v45;
        uint64_t v47 = v44;
        goto LABEL_35;
      case 3u:
        uint64_t v42 = v66;
        sub_10020F140(v41, v66, type metadata accessor for StreamingBarcodeDetectorResult);
        Swift::UInt v48 = 3;
        goto LABEL_32;
      case 4u:
        uint64_t v42 = v66;
        sub_10020F140(v41, v66, type metadata accessor for StreamingBarcodeDetectorResult);
        Swift::UInt v48 = 4;
LABEL_32:
        Hasher._combine(_:)(v48);
        sub_100165074();
        uint64_t v43 = type metadata accessor for StreamingBarcodeDetectorResult;
        goto LABEL_33;
      case 5u:
        uint64_t v49 = v65;
        sub_10020F140(v41, v65, type metadata accessor for StreamingTextDetectorResult);
        Hasher._combine(_:)(5uLL);
        sub_1001665AC();
        int64_t v46 = type metadata accessor for StreamingTextDetectorResult;
        uint64_t v47 = v49;
        uint64_t v17 = v70;
LABEL_35:
        uint64_t v23 = v69;
        goto LABEL_36;
      default:
        uint64_t v42 = v62;
        sub_10020F140(v41, v62, type metadata accessor for ObjectDetectorResult);
        Hasher._combine(_:)(0);
        sub_10031E668();
        uint64_t v43 = type metadata accessor for ObjectDetectorResult;
LABEL_33:
        int64_t v46 = v43;
        uint64_t v47 = v42;
        uint64_t v17 = v70;
LABEL_36:
        sub_1001D430C(v47, v46);
        Swift::Int v50 = Hasher._finalize()();
        uint64_t v51 = -1 << *(unsigned char *)(v25 + 32);
        unint64_t v52 = v50 & ~v51;
        unint64_t v53 = v52 >> 6;
        if (((-1 << v52) & ~*(void *)(v30 + 8 * (v52 >> 6))) != 0)
        {
          unint64_t v32 = __clz(__rbit64((-1 << v52) & ~*(void *)(v30 + 8 * (v52 >> 6)))) | v52 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_7;
        }
        char v54 = 0;
        unint64_t v55 = (unint64_t)(63 - v51) >> 6;
        break;
    }
    do
    {
      if (++v53 == v55 && (v54 & 1) != 0)
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        JUMPOUT(0x1001F32B8);
      }
      BOOL v56 = v53 == v55;
      if (v53 == v55) {
        unint64_t v53 = 0;
      }
      v54 |= v56;
      uint64_t v57 = *(void *)(v30 + 8 * v53);
    }
    while (v57 == -1);
    unint64_t v32 = __clz(__rbit64(~v57)) + (v53 << 6);
LABEL_7:
    *(void *)(v30 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    sub_10020F140((uint64_t)v22, *(void *)(v25 + 48) + v38 * v32, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10000FC34((uint64_t)v17, *(void *)(v25 + 56) + v40 * v32, &qword_1005250E0);
    ++*(void *)(v25 + 16);
  }
LABEL_45:
  swift_release();
  Swift::Int v3 = v61;
  if (v75)
  {
    uint64_t v58 = 1 << *(unsigned char *)(v23 + 32);
    if (v58 >= 64) {
      bzero(v68, ((unint64_t)(v58 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *uint64_t v68 = -1 << v58;
    }
    *(void *)(v23 + 16) = 0;
  }
LABEL_50:
  uint64_t result = swift_release();
  uint64_t *v3 = v25;
  return result;
}

uint64_t sub_1001F32D0(uint64_t a1, int a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v66 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v67 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v65 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v64 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v63 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v73 = *(void *)(v15 - 8);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for CVDetection();
  uint64_t v74 = *(void *)(v18 - 8);
  uint64_t v75 = v18;
  __chkstk_darwin(v18);
  uint64_t v72 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v61 - v21;
  uint64_t v23 = *v2;
  sub_10000F214(&qword_100525108);
  int v76 = a2;
  uint64_t v24 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v25 = v24;
  if (!*(void *)(v23 + 16)) {
    goto LABEL_52;
  }
  uint64_t v62 = v2;
  uint64_t v26 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v27 = *(void *)(v23 + 64);
  uint64_t v69 = (void *)(v23 + 64);
  if (v26 < 64) {
    uint64_t v28 = ~(-1 << v26);
  }
  else {
    uint64_t v28 = -1;
  }
  unint64_t v29 = v28 & v27;
  int64_t v68 = (unint64_t)(v26 + 63) >> 6;
  uint64_t v30 = v24 + 64;
  swift_retain();
  int64_t v31 = 0;
  uint64_t v70 = v23;
  BOOL v71 = v17;
LABEL_8:
  if (v29)
  {
    unint64_t v33 = __clz(__rbit64(v29));
    v29 &= v29 - 1;
    unint64_t v34 = v33 | (v31 << 6);
    goto LABEL_22;
  }
  int64_t v35 = v31 + 1;
  if (__OFADD__(v31, 1)) {
    goto LABEL_53;
  }
  if (v35 >= v68)
  {
    swift_release();
    Swift::Int v3 = v62;
    unint64_t v36 = v69;
    if (v76)
    {
LABEL_48:
      uint64_t v59 = 1 << *(unsigned char *)(v23 + 32);
      if (v59 >= 64) {
        bzero(v36, ((unint64_t)(v59 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v36 = -1 << v59;
      }
      *(void *)(v23 + 16) = 0;
    }
  }
  else
  {
    unint64_t v36 = v69;
    unint64_t v37 = v69[v35];
    ++v31;
    if (v37) {
      goto LABEL_21;
    }
    int64_t v31 = v35 + 1;
    if (v35 + 1 >= v68) {
      goto LABEL_45;
    }
    unint64_t v37 = v69[v31];
    if (v37)
    {
LABEL_21:
      unint64_t v29 = (v37 - 1) & v37;
      unint64_t v34 = __clz(__rbit64(v37)) + (v31 << 6);
LABEL_22:
      uint64_t v39 = *(void *)(v74 + 72);
      uint64_t v40 = *(void *)(v23 + 48) + v39 * v34;
      if (v76)
      {
        sub_10020F140(v40, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v41 = *(void *)(v73 + 72);
        sub_10020F140(*(void *)(v23 + 56) + v41 * v34, (uint64_t)v17, type metadata accessor for CVTrackSnapshot);
      }
      else
      {
        sub_10020F0D8(v40, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v41 = *(void *)(v73 + 72);
        sub_10020F0D8(*(void *)(v23 + 56) + v41 * v34, (uint64_t)v17, type metadata accessor for CVTrackSnapshot);
      }
      uint64_t v42 = (uint64_t)v72;
      Hasher.init(_seed:)();
      sub_10020F0D8((uint64_t)v22, v42, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v45 = v64;
          sub_10020F140(v42, v64, type metadata accessor for ParseDetectorResult);
          Hasher._combine(_:)(1uLL);
          sub_1003E7010((uint64_t)v77);
          int64_t v46 = type metadata accessor for ParseDetectorResult;
          goto LABEL_29;
        case 2u:
          uint64_t v45 = v65;
          sub_10020F140(v42, v65, type metadata accessor for TextDetectorResult);
          Hasher._combine(_:)(2uLL);
          sub_10032169C((uint64_t)v77);
          int64_t v46 = type metadata accessor for TextDetectorResult;
LABEL_29:
          uint64_t v47 = v46;
          uint64_t v48 = v45;
          goto LABEL_35;
        case 3u:
          uint64_t v43 = v67;
          sub_10020F140(v42, v67, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v49 = 3;
          goto LABEL_32;
        case 4u:
          uint64_t v43 = v67;
          sub_10020F140(v42, v67, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v49 = 4;
LABEL_32:
          Hasher._combine(_:)(v49);
          sub_100165074();
          uint64_t v44 = type metadata accessor for StreamingBarcodeDetectorResult;
          goto LABEL_33;
        case 5u:
          uint64_t v50 = v66;
          sub_10020F140(v42, v66, type metadata accessor for StreamingTextDetectorResult);
          Hasher._combine(_:)(5uLL);
          sub_1001665AC();
          uint64_t v47 = type metadata accessor for StreamingTextDetectorResult;
          uint64_t v48 = v50;
          uint64_t v17 = v71;
LABEL_35:
          uint64_t v23 = v70;
          goto LABEL_36;
        default:
          uint64_t v43 = v63;
          sub_10020F140(v42, v63, type metadata accessor for ObjectDetectorResult);
          Hasher._combine(_:)(0);
          sub_10031E668();
          uint64_t v44 = type metadata accessor for ObjectDetectorResult;
LABEL_33:
          uint64_t v47 = v44;
          uint64_t v48 = v43;
          uint64_t v17 = v71;
LABEL_36:
          sub_1001D430C(v48, v47);
          Swift::Int v51 = Hasher._finalize()();
          uint64_t v52 = -1 << *(unsigned char *)(v25 + 32);
          unint64_t v53 = v51 & ~v52;
          unint64_t v54 = v53 >> 6;
          if (((-1 << v53) & ~*(void *)(v30 + 8 * (v53 >> 6))) != 0)
          {
            unint64_t v32 = __clz(__rbit64((-1 << v53) & ~*(void *)(v30 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
            goto LABEL_7;
          }
          char v55 = 0;
          unint64_t v56 = (unint64_t)(63 - v52) >> 6;
          break;
      }
      while (++v54 != v56 || (v55 & 1) == 0)
      {
        BOOL v57 = v54 == v56;
        if (v54 == v56) {
          unint64_t v54 = 0;
        }
        v55 |= v57;
        uint64_t v58 = *(void *)(v30 + 8 * v54);
        if (v58 != -1)
        {
          unint64_t v32 = __clz(__rbit64(~v58)) + (v54 << 6);
LABEL_7:
          *(void *)(v30 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
          sub_10020F140((uint64_t)v22, *(void *)(v25 + 48) + v39 * v32, (uint64_t (*)(void))type metadata accessor for CVDetection);
          sub_10020F140((uint64_t)v17, *(void *)(v25 + 56) + v41 * v32, type metadata accessor for CVTrackSnapshot);
          ++*(void *)(v25 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      JUMPOUT(0x1001F3B5CLL);
    }
    int64_t v38 = v35 + 2;
    if (v38 < v68)
    {
      unint64_t v37 = v69[v38];
      if (!v37)
      {
        while (1)
        {
          int64_t v31 = v38 + 1;
          if (__OFADD__(v38, 1)) {
            goto LABEL_54;
          }
          if (v31 >= v68) {
            goto LABEL_45;
          }
          unint64_t v37 = v69[v31];
          ++v38;
          if (v37) {
            goto LABEL_21;
          }
        }
      }
      int64_t v31 = v38;
      goto LABEL_21;
    }
LABEL_45:
    swift_release();
    Swift::Int v3 = v62;
    if (v76) {
      goto LABEL_48;
    }
  }
LABEL_52:
  uint64_t result = swift_release();
  uint64_t *v3 = v25;
  return result;
}

uint64_t sub_1001F3B74(uint64_t a1, char a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000F214(&qword_100525098);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          Swift::Int v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    int64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::Int v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

__n128 sub_1001F3E9C(Swift::UInt *a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  uint64_t v6 = (void *)a1[4];
  if (v6 == (void *)2) {
    goto LABEL_12;
  }
  Swift::UInt v7 = *a1;
  Swift::UInt v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if ((v10 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(HIDWORD(v9));
    if (v6) {
      goto LABEL_4;
    }
LABEL_12:
    Swift::UInt v11 = 0;
LABEL_13:
    Hasher._combine(_:)(v11);
    int64_t v13 = (void *)a1[5];
    if (v13) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  if (HIDWORD(v9)) {
    Swift::UInt v12 = 2;
  }
  else {
    Swift::UInt v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if (!v6) {
    goto LABEL_12;
  }
LABEL_4:
  if (v6 == (void *)1)
  {
    Swift::UInt v11 = 1;
    goto LABEL_13;
  }
  Hasher._combine(_:)(2uLL);
  sub_10020F1BC(v6);
  type metadata accessor for CGColor(0);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  _CFObject.hash(into:)();
  sub_10020F474(v7, v8, v9, v10, v6);
  int64_t v13 = (void *)a1[5];
  if (v13)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    type metadata accessor for CVBuffer(0);
    sub_1001E227C((unint64_t *)&unk_100524E80, type metadata accessor for CVBuffer);
    id v14 = v13;
    _CFObject.hash(into:)();

    goto LABEL_15;
  }
LABEL_9:
  Hasher._combine(_:)(0);
LABEL_15:
  Hasher._finalize()();
  unint64_t v15 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v15;
  uint64_t v16 = a3[6] + 48 * v15;
  long long v17 = *((_OWORD *)a1 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)a1;
  *(_OWORD *)(v16 + 16) = v17;
  __n128 result = *((__n128 *)a1 + 2);
  *(__n128 *)(v16 + 32) = result;
  *(void *)(a3[7] + 8 * v15) = a2;
  ++a3[2];
  return result;
}

unint64_t sub_1001F4118(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_1001F4160(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v12 = a6[6];
  uint64_t v13 = type metadata accessor for CVDetection();
  uint64_t result = sub_10020F140(a2, v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v15 = a6[7] + 24 * a1;
  *(void *)uint64_t v15 = a3;
  *(void *)(v15 + 8) = a4;
  *(unsigned char *)(v15 + 16) = a5;
  uint64_t v16 = a6[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a6[2] = v18;
  }
  return result;
}

uint64_t sub_1001F4230(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CVDetection();
  uint64_t result = sub_10020F140(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_1001F42E4(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

uint64_t sub_1001F432C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1001F4850(a1, a2, a3, a4, (uint64_t *)&unk_100521050);
}

uint64_t sub_1001F4338(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_1001F43E4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v11 = a4[7] + 88 * a1;
  long long v12 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 80) = *(void *)(a3 + 80);
  long long v13 = *(_OWORD *)(a3 + 64);
  long long v14 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v11 + 64) = v13;
  *(_OWORD *)(v11 + 32) = v14;
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

unint64_t sub_1001F44C0(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_1001F4504(unint64_t result, uint64_t a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(unsigned char *)(a4[7] + result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_1001F4548(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1001F4850(a1, a2, a3, a4, &qword_1005242C8);
}

uint64_t sub_1001F4554(unint64_t a1, uint64_t a2, void *a3, double a4)
{
  a3[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a3[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(double *)(a3[7] + 8 * a1) = a4;
  uint64_t v11 = a3[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a3[2] = v13;
  }
  return result;
}

uint64_t sub_1001F460C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, double a6)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v12 = a5[6];
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a2, v13);
  uint64_t v15 = a5[7] + 24 * a1;
  *(void *)uint64_t v15 = a3;
  *(void *)(v15 + 8) = a4;
  *(double *)(v15 + 16) = a6;
  uint64_t v16 = a5[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a5[2] = v18;
  }
  return result;
}

unint64_t sub_1001F46E0(unint64_t result, _OWORD *a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(double *)(a3[6] + 8 * result) = a4;
  uint64_t v4 = (_OWORD *)(a3[7] + 48 * result);
  long long v5 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 29) = *(_OWORD *)((char *)a2 + 29);
  uint64_t v6 = a3[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a3[2] = v8;
  }
  return result;
}

uint64_t sub_1001F4738(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CVDetection();
  uint64_t result = sub_10020F140(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v11 = (_OWORD *)(a4[7] + 48 * a1);
  long long v12 = a3[2];
  long long v13 = *a3;
  v11[1] = a3[1];
  v11[2] = v12;
  *uint64_t v11 = v13;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

unint64_t sub_1001F4800(unint64_t result, uint64_t a2, void *a3, __n128 a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(void *)(a3[6] + 8 * result) = a2;
  *(__n128 *)(a3[7] + 16 * result) = a4;
  uint64_t v4 = a3[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a3[2] = v6;
  }
  return result;
}

uint64_t sub_1001F4844(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1001F4850(a1, a2, a3, a4, &qword_1005250D0);
}

uint64_t sub_1001F4850(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = sub_10000F214(a5);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a3, v13);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

uint64_t sub_1001F4948(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CVDetection();
  sub_10020F140(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_10000F214(&qword_1005250E0);
  uint64_t result = sub_10000FC34(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, &qword_1005250E0);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

id sub_1001F4A2C()
{
  uint64_t v1 = v0;
  sub_10000F214((uint64_t *)&unk_100529800);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F4BE0()
{
  uint64_t v1 = type metadata accessor for CVDetection();
  uint64_t v28 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214((uint64_t *)&unk_100529A70);
  unint64_t v25 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v25 = v6;
    return result;
  }
  id result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v4 + 64);
  uint64_t v26 = v4 + 64;
  int64_t v27 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v14 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_9:
    unint64_t v15 = *(void *)(v28 + 72) * v14;
    sub_10020F0D8(*(void *)(v4 + 48) + v15, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v16 = 24 * v14;
    uint64_t v17 = *(void *)(v4 + 56) + v16;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    id result = (void *)sub_10020F140((uint64_t)v3, *(void *)(v6 + 48) + v15, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v21 = *(void *)(v6 + 56) + v16;
    *(void *)uint64_t v21 = v18;
    *(void *)(v21 + 8) = v19;
    *(unsigned char *)(v21 + 16) = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v27) {
    goto LABEL_23;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_1001F4E74()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_100529A40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    LOBYTE(v19) = *(unsigned char *)(v19 + 16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v22 = v20;
    *(void *)(v22 + 8) = v21;
    *(unsigned char *)(v22 + 16) = v19;
    id result = v17;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F5038()
{
  uint64_t v1 = v0;
  sub_10000F214((uint64_t *)&unk_1005251F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 4 * v15;
    int v20 = *(_DWORD *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v19) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F51E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CVDetection();
  uint64_t v25 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100525200);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  int64_t v24 = v1;
  id result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v25 + 72) * v17;
    sub_10020F0D8(*(void *)(v5 + 48) + v18, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    sub_10020F140((uint64_t)v4, *(void *)(v7 + 48) + v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(void *)(*(void *)(v7 + 56) + v19) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F5470()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_100524EE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001F5600()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100521010);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    int64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1001F5898()
{
  return sub_1001F8474((uint64_t *)&unk_100521050, &qword_100525140);
}

void *sub_1001F58AC()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_1005251E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001F5A58()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_1005251E8);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1001F5CEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214((uint64_t *)&unk_100529660);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  BOOL v29 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v30 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v31 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v32 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v26 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v26);
    ++v11;
    if (!v27)
    {
      int64_t v11 = v26 + 1;
      if (v26 + 1 >= v31) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v30 + 8 * v11);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v27 - 1) & v27;
    unint64_t v16 = __clz(__rbit64(v27)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 88 * v16;
    uint64_t v19 = *(void *)(v6 + 56) + v18;
    long long v20 = *(_OWORD *)v19;
    uint64_t v21 = *(void *)(v19 + 16);
    unint64_t v22 = *(void *)(v8 + 48) + v17;
    int64_t v23 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
    long long v36 = *(_OWORD *)(v19 + 24);
    long long v37 = v20;
    long long v24 = *(_OWORD *)(v19 + 40);
    long long v34 = *(_OWORD *)(v19 + 56);
    long long v35 = v24;
    long long v33 = *(_OWORD *)(v19 + 72);
    id result = (void *)v23(v22, v5, v2);
    uint64_t v25 = *(void *)(v8 + 56) + v18;
    *(_OWORD *)uint64_t v25 = v37;
    *(void *)(v25 + 16) = v21;
    *(_OWORD *)(v25 + 24) = v36;
    *(_OWORD *)(v25 + 40) = v35;
    *(_OWORD *)(v25 + 56) = v34;
    *(_OWORD *)(v25 + 72) = v33;
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v31)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v29;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v30 + 8 * v28);
  if (v27)
  {
    int64_t v11 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v11);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F5FE0()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_1005250B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F6170()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_1005255C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F6300()
{
  return sub_1001F8474(&qword_1005242C8, (uint64_t *)&unk_1005251D0);
}

void *sub_1001F6314()
{
  return sub_1001F81CC(&qword_1005251B8);
}

void *sub_1001F6320()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_1005251B0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v23 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  uint64_t v25 = v8;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v15) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 56) + v18, v2);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v25 + 56) + v18, v5, v2);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v15)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v23;
    uint64_t v8 = v25;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F65A0()
{
  uint64_t v1 = v0;
  sub_10000F214((uint64_t *)&unk_1005251C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v13) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v18 = v16 + 2;
  if (v18 >= v13) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F6738()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100525090);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v23 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v26 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v25) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v6 + 56) + v18);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    *(void *)(*(void *)(v8 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v25)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

char *sub_1001F69D8()
{
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100525088);
  long long v34 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v42 = v4;
  if (!v5)
  {
    id result = (char *)swift_release();
    uint64_t v32 = v42;
    int64_t v31 = v34;
LABEL_25:
    uint64_t *v31 = v32;
    return result;
  }
  uint64_t v6 = v4;
  id result = (char *)(v4 + 64);
  uint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  uint64_t v35 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    id result = (char *)memmove(result, v8, 8 * v9);
    uint64_t v6 = v42;
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v41 = v3;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v38 = v1 + 16;
  int64_t v36 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v37 = v1 + 32;
  unint64_t v15 = v39;
  uint64_t v14 = v40;
  uint64_t v16 = v42;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v10 << 6);
      uint64_t v19 = v41;
      goto LABEL_9;
    }
    int64_t v28 = v10 + 1;
    uint64_t v19 = v41;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v10;
    if (!v29)
    {
      int64_t v10 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v10);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v29 - 1) & v29;
    unint64_t v18 = __clz(__rbit64(v29)) + (v10 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v22 = 24 * v18;
    int64_t v23 = (uint64_t *)(v21 + 24 * v18);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v26 = v23[2];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v15, v14);
    unint64_t v27 = (void *)(*(void *)(v16 + 56) + v22);
    *unint64_t v27 = v24;
    v27[1] = v25;
    v27[2] = v26;
    swift_bridgeObjectRetain();
    id result = (char *)swift_errorRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_23:
    id result = (char *)swift_release();
    int64_t v31 = v34;
    uint64_t v32 = v42;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v10 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v10 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v10);
    ++v30;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F6CCC()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_100525120);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v26 = __clz(__rbit64(v24));
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = v26 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    uint64_t v19 = (long long *)(*(void *)(v2 + 56) + v18);
    long long v20 = *v19;
    long long v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (_OWORD *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F6E68()
{
  uint64_t v1 = v0;
  sub_10000F214((uint64_t *)&unk_100524EC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 48 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v19 + 24);
    unint64_t v24 = *(void *)(v19 + 32);
    int v25 = *(_DWORD *)(v19 + 40);
    LOBYTE(v19) = *(unsigned char *)(v19 + 44);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v26 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v26 = v20;
    *(void *)(v26 + 8) = v21;
    *(void *)(v26 + 16) = v22;
    *(void *)(v26 + 24) = v23;
    *(void *)(v26 + 32) = v24;
    *(_DWORD *)(v26 + 40) = v25;
    *(unsigned char *)(v26 + 44) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)sub_1000A7588(v23, v24);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F7058()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CVDetection();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100524EA8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v26 = v1;
  id result = (void *)(v7 + 64);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v16) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v10 + 8 * v12);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    sub_10020F0D8(*(void *)(v6 + 48) + v19, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v20 = 4 * v18;
    int v21 = *(_DWORD *)(*(void *)(v6 + 56) + v20);
    id result = (void *)sub_10020F140((uint64_t)v5, *(void *)(v8 + 48) + v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(_DWORD *)(*(void *)(v8 + 56) + v20) = v21;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v26;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v10 + 8 * v24);
  if (v23)
  {
    int64_t v12 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F72DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CVDetection();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100524EB8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v26 = v1;
  id result = (void *)(v7 + 64);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v16) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v10 + 8 * v12);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    sub_10020F0D8(*(void *)(v6 + 48) + v19, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v6 + 56) + v20);
    id result = (void *)sub_10020F140((uint64_t)v5, *(void *)(v8 + 48) + v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(void *)(*(void *)(v8 + 56) + v20) = v21;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v26;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v10 + 8 * v24);
  if (v23)
  {
    int64_t v12 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

char *sub_1001F7560()
{
  uint64_t v1 = type metadata accessor for CVDetection();
  uint64_t v39 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v38 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100525280);
  uint64_t v35 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v41 = v4;
  if (!v5)
  {
    id result = (char *)swift_release();
    uint64_t v33 = v41;
    uint64_t v32 = v35;
LABEL_25:
    *uint64_t v32 = v33;
    return result;
  }
  uint64_t v6 = v4;
  id result = (char *)(v4 + 64);
  uint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  uint64_t v36 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    id result = (char *)memmove(result, v8, 8 * v9);
    uint64_t v6 = v41;
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v40 = v3;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = (uint64_t)v38;
  uint64_t v15 = v41;
  while (1)
  {
    if (v13)
    {
      uint64_t v42 = (v13 - 1) & v13;
      int64_t v43 = v10;
      unint64_t v16 = __clz(__rbit64(v13)) | (v10 << 6);
      uint64_t v17 = v40;
      goto LABEL_9;
    }
    int64_t v28 = v10 + 1;
    uint64_t v17 = v40;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v37) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v36 + 8 * v28);
    int64_t v30 = v10 + 1;
    if (!v29)
    {
      int64_t v30 = v10 + 2;
      if (v10 + 2 >= v37) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v36 + 8 * v30);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    uint64_t v42 = (v29 - 1) & v29;
    int64_t v43 = v30;
    unint64_t v16 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v39 + 72) * v16;
    sub_10020F0D8(*(void *)(v17 + 48) + v18, v14, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v19 = 48 * v16;
    uint64_t v20 = (uint64_t *)(*(void *)(v17 + 56) + 48 * v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = v20[2];
    uint64_t v24 = v20[3];
    uint64_t v25 = (void *)v20[4];
    uint64_t v26 = (void *)v20[5];
    sub_10020F140(v14, *(void *)(v15 + 48) + v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
    int64_t v27 = (uint64_t *)(*(void *)(v15 + 56) + v19);
    *int64_t v27 = v21;
    v27[1] = v22;
    v27[2] = v23;
    v27[3] = v24;
    v27[4] = (uint64_t)v25;
    v27[5] = (uint64_t)v26;
    sub_10020F1A8(v21, v22, v23, v24, v25);
    id result = v26;
    unint64_t v13 = v42;
    int64_t v10 = v43;
  }
  uint64_t v31 = v10 + 3;
  if (v10 + 3 >= v37)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v32 = v35;
    uint64_t v33 = v41;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v36 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v10 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v37) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v36 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F7868()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CVDetection();
  uint64_t v24 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100525118);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v23 = v1;
  id result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v15) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v9 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v9 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v24 + 72) * v17;
    sub_10020F0D8(*(void *)(v5 + 48) + v18, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
    char v19 = *(unsigned char *)(*(void *)(v5 + 56) + v17);
    id result = (void *)sub_10020F140((uint64_t)v4, *(void *)(v7 + 48) + v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v15)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v9 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v9 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F7AE4()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_100524E70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = 8 * v15;
    uint64_t v23 = *(void *)(*(void *)(v2 + 56) + v22);
    uint64_t v24 = *(void *)(v4 + 48) + v16;
    long long v29 = *(_OWORD *)(v17 + 32);
    *(void *)uint64_t v24 = *(void *)v17;
    *(void *)(v24 + 8) = v19;
    *(void *)(v24 + 16) = v20;
    *(void *)(v24 + 24) = v21;
    *(_OWORD *)(v24 + 32) = v29;
    *(void *)(*(void *)(v4 + 56) + v22) = v23;
    sub_10020F1A8(v18, v19, v20, v21, (void *)v29);
    id v25 = *((id *)&v29 + 1);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F7CCC()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_100525128);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F7E74()
{
  uint64_t v1 = v0;
  sub_10000F214((uint64_t *)&unk_100525130);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001F8018()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_100525110);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 8 * v15;
    int64_t v18 = *(void **)(*(void *)(v2 + 56) + v17);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F81C0()
{
  return sub_1001F81CC(&qword_1005250C8);
}

void *sub_1001F81CC(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(a1);
  int64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *int64_t v26 = v9;
    return result;
  }
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F8460()
{
  return sub_1001F8474(&qword_1005250D0, &qword_1005250D8);
}

void *sub_1001F8474(uint64_t *a1, uint64_t *a2)
{
  uint64_t v45 = sub_10000F214(a1);
  uint64_t v48 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(a2);
  uint64_t v35 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v49 = v7;
  if (!v8)
  {
    id result = (void *)swift_release();
    uint64_t v34 = v49;
    uint64_t v33 = v35;
LABEL_25:
    *uint64_t v33 = v34;
    return result;
  }
  uint64_t v9 = v7;
  id result = (void *)(v7 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
  {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v11);
    uint64_t v9 = v49;
  }
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  uint64_t v46 = v6;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  uint64_t v36 = v6 + 64;
  int64_t v37 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = v48;
  uint64_t v17 = v47;
  uint64_t v40 = v48 + 16;
  uint64_t v41 = v47 + 16;
  uint64_t v38 = v48 + 32;
  uint64_t v39 = v47 + 32;
  unint64_t v18 = v42;
  uint64_t v19 = v43;
  uint64_t v20 = v45;
  uint64_t v21 = v49;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v50 = v12;
      unint64_t v23 = v22 | (v12 << 6);
      uint64_t v24 = v46;
      goto LABEL_9;
    }
    int64_t v29 = v12 + 1;
    uint64_t v24 = v46;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v29);
    int64_t v31 = v12 + 1;
    if (!v30)
    {
      int64_t v31 = v29 + 1;
      if (v29 + 1 >= v37) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (!v30) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v30 - 1) & v30;
    int64_t v50 = v31;
    unint64_t v23 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_9:
    unint64_t v25 = *(void *)(v17 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v18, *(void *)(v24 + 48) + v25, v19);
    unint64_t v26 = *(void *)(v16 + 72) * v23;
    unint64_t v27 = *(void *)(v24 + 56) + v26;
    int64_t v28 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v44, v27, v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v21 + 48) + v25, v18, v19);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v21 + 56) + v26, v28, v20);
    int64_t v12 = v50;
  }
  int64_t v32 = v29 + 2;
  if (v32 >= v37)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v33 = v35;
    uint64_t v34 = v49;
    goto LABEL_25;
  }
  unint64_t v30 = *(void *)(v36 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v31 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F8818()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_1005250E0);
  uint64_t v28 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVDetection();
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_1005250E8);
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v10;
    return result;
  }
  unint64_t v25 = v1;
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v26 = v8 + 64;
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v17) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v17) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v27 + 72) * v19;
    sub_10020F0D8(*(void *)(v8 + 48) + v20, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
    unint64_t v21 = *(void *)(v28 + 72) * v19;
    sub_10000FB74(*(void *)(v8 + 56) + v21, (uint64_t)v4, &qword_1005250E0);
    sub_10020F140((uint64_t)v7, *(void *)(v10 + 48) + v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
    id result = (void *)sub_10000FC34((uint64_t)v4, *(void *)(v10 + 56) + v21, &qword_1005250E0);
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v17)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F8B3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVDetection();
  uint64_t v28 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100525108);
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v10;
    return result;
  }
  uint64_t v27 = v1;
  id result = (void *)(v9 + 64);
  uint64_t v12 = v8 + 64;
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v12 + 8 * v13) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v18) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v12 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v18) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v12 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_9:
    unint64_t v21 = *(void *)(v28 + 72) * v20;
    sub_10020F0D8(*(void *)(v8 + 48) + v21, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
    unint64_t v22 = *(void *)(v29 + 72) * v20;
    sub_10020F0D8(*(void *)(v8 + 56) + v22, (uint64_t)v4, type metadata accessor for CVTrackSnapshot);
    sub_10020F140((uint64_t)v7, *(void *)(v10 + 48) + v21, (uint64_t (*)(void))type metadata accessor for CVDetection);
    id result = (void *)sub_10020F140((uint64_t)v4, *(void *)(v10 + 56) + v22, type metadata accessor for CVTrackSnapshot);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v18)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v12 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v12 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F8E6C()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_100525098);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *unint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001F9028(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for VisualDomain();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1001E227C((unint64_t *)&unk_100525040, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1001E227C((unint64_t *)&qword_100519868, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1001FE9B8((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1001F934C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1001FEC74(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1001F94FC(unsigned char *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  sub_100062F74(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_52:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1001FEE10(a2, v7, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v21;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_56;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0xEC00000070756B6FLL;
    unint64_t v10 = 0x6F4C6C6175736956;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v9 = 0xEA00000000007075;
        unint64_t v10 = 0x6B6F6F4C7370614DLL;
        break;
      case 2:
        unint64_t v10 = 0x697463417370614DLL;
        unint64_t v9 = 0xEA00000000006E6FLL;
        break;
      case 3:
        unint64_t v9 = 0xE600000000000000;
        unint64_t v10 = 0x65646F435251;
        break;
      case 4:
        unint64_t v10 = 0x4370696C43707041;
        uint64_t v11 = 6644847;
        goto LABEL_19;
      case 5:
        unint64_t v10 = 0x6574654461746144;
        unint64_t v9 = 0xEC000000726F7463;
        break;
      case 6:
        unint64_t v10 = 0x7A6972616D6D7553;
        goto LABEL_16;
      case 7:
        unint64_t v9 = 0xE900000000000064;
        unint64_t v10 = 0x756F6C4164616552;
        break;
      case 8:
        unint64_t v10 = 0x7261646E656C6143;
        unint64_t v9 = 0xED0000746E657645;
        break;
      case 9:
        unint64_t v9 = 0x8000000100424480;
        unint64_t v10 = 0xD000000000000014;
        break;
      case 0xA:
        unint64_t v9 = 0xE300000000000000;
        unint64_t v10 = 7041857;
        break;
      case 0xB:
        unint64_t v10 = 0x6165536567616D49;
        uint64_t v11 = 6841202;
        goto LABEL_19;
      case 0xC:
        unint64_t v10 = 0x74616C736E617254;
LABEL_16:
        unint64_t v9 = 0xE900000000000065;
        break;
      case 0xD:
        unint64_t v10 = 0x4E72657474756853;
        unint64_t v9 = 0xEF6E6F697463416FLL;
        break;
      case 0xE:
        unint64_t v10 = 0x6669636570736E55;
        uint64_t v11 = 6579561;
LABEL_19:
        unint64_t v9 = v11 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        break;
      default:
        break;
    }
    uint64_t v12 = 0x6F4C6C6175736956;
    unint64_t v13 = 0xEC00000070756B6FLL;
    switch((char)a2)
    {
      case 1:
        unint64_t v13 = 0xEA00000000007075;
        if (v10 == 0x6B6F6F4C7370614DLL) {
          goto LABEL_45;
        }
        goto LABEL_46;
      case 2:
        unint64_t v13 = 0xEA00000000006E6FLL;
        if (v10 != 0x697463417370614DLL) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 3:
        unint64_t v13 = 0xE600000000000000;
        if (v10 != 0x65646F435251) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 4:
        uint64_t v14 = 0x4370696C43707041;
        uint64_t v15 = 6644847;
        goto LABEL_50;
      case 5:
        unint64_t v13 = 0xEC000000726F7463;
        if (v10 != 0x6574654461746144) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 6:
        uint64_t v16 = 0x7A6972616D6D7553;
        goto LABEL_41;
      case 7:
        unint64_t v13 = 0xE900000000000064;
        if (v10 != 0x756F6C4164616552) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 8:
        unint64_t v13 = 0xED0000746E657645;
        if (v10 != 0x7261646E656C6143) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 9:
        unint64_t v13 = 0x8000000100424480;
        if (v10 != 0xD000000000000014) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 10:
        unint64_t v13 = 0xE300000000000000;
        if (v10 != 7041857) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 11:
        uint64_t v14 = 0x6165536567616D49;
        uint64_t v15 = 6841202;
        goto LABEL_50;
      case 12:
        uint64_t v16 = 0x74616C736E617254;
LABEL_41:
        unint64_t v13 = 0xE900000000000065;
        if (v10 != v16) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 13:
        uint64_t v12 = 0x4E72657474756853;
        unint64_t v13 = 0xEF6E6F697463416FLL;
        goto LABEL_44;
      case 14:
        uint64_t v14 = 0x6669636570736E55;
        uint64_t v15 = 6579561;
LABEL_50:
        unint64_t v13 = v15 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        if (v10 != v14) {
          goto LABEL_46;
        }
        goto LABEL_45;
      default:
LABEL_44:
        if (v10 != v12) {
          goto LABEL_46;
        }
LABEL_45:
        if (v9 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_55;
        }
LABEL_46:
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_52;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_55:
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
LABEL_56:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t sub_1001F9AFC(double *a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1001FF420(v9, isUniquelyReferenced_nonNull_native, a2);
    uint64_t *v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  double v11 = *(double *)(v10 + 8 * v9);
  if (v11 != a2)
  {
    uint64_t v13 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v13;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_8;
      }
      double v11 = *(double *)(v10 + 8 * v9);
    }
    while (v11 != a2);
  }
  uint64_t result = 0;
  a2 = v11;
LABEL_9:
  *a1 = a2;
  return result;
}

uint64_t sub_1001F9C0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1001FF554(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1001F9D08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CVDetection();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v20[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_1003FFF94((uint64_t)v20);
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v19 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_10020F0D8(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
      char v16 = sub_100402834((uint64_t)v9, a2);
      sub_1001D430C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (v16) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_1001D430C(a2, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10020F0D8(*(void *)(*v3 + 48) + v15 * v13, v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10020F0D8(a2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
    v20[0] = *v3;
    void *v3 = 0x8000000000000000;
    sub_1001FF678((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    void *v3 = v20[0];
    swift_bridgeObjectRelease();
    sub_10020F140(a2, a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return 1;
  }
}

uint64_t sub_1001F9F8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for CVTrackedDetection(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v16 = sub_1003BEF8C(v7, result + 1);
    Swift::Int v22 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_1001FD5E4();
      uint64_t v17 = v22;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_1001FE738(a2, v17);
    uint64_t *v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      swift_retain();
      char v13 = static UUID.== infix(_:_:)();
      swift_release();
      if (v13)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        swift_retain();
        char v15 = static UUID.== infix(_:_:)();
        swift_release();
        if (v15) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    Swift::Int v19 = swift_retain();
    sub_1001FFC38(v19, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v23;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_1001FA2B4(uint64_t a1, long long *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_10004E0E4();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_66:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v45 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100050964((uint64_t)a2, (void (*)(void, void, void, void, void))sub_10004E998);
    sub_1001FFE44(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v45;
    swift_bridgeObjectRelease();
    sub_10004ECF4(a2, a1);
    return 1;
  }
  uint64_t v42 = v2;
  uint64_t v43 = ~v8;
  uint64_t v44 = *(void *)(v6 + 48);
  while (2)
  {
    uint64_t v14 = (uint64_t *)(v44 + 40 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v18 = v14[2];
    uint64_t v17 = v14[3];
    switch(*((unsigned char *)v14 + 32))
    {
      case 1:
        sub_10004ECF4(a2, (uint64_t)v54);
        if (v55 != 1) {
          goto LABEL_7;
        }
        uint64_t v20 = v54[0];
        uint64_t v21 = v54[1];
        uint64_t v23 = v54[2];
        uint64_t v22 = v54[3];
        goto LABEL_19;
      case 2:
        sub_10004ECF4(a2, (uint64_t)v56);
        if (v57 != 2) {
          goto LABEL_7;
        }
        uint64_t v20 = v56[0];
        uint64_t v21 = v56[1];
        uint64_t v23 = v56[2];
        uint64_t v22 = v56[3];
LABEL_19:
        BOOL v24 = v15 == v20 && v16 == v21;
        if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_7;
        }
        if (v18 != v23 || v17 != v22) {
          goto LABEL_28;
        }
        goto LABEL_67;
      case 3:
        if (v18 | v16 | v15 | v17)
        {
          uint64_t v26 = v18 | v16 | v17;
          if (v15 == 1 && v26 == 0)
          {
            sub_10004ECF4(a2, (uint64_t)v50);
            if (v51 == 3 && v50[0] == 1)
            {
              uint64_t v32 = v50[2];
              uint64_t v31 = v50[3];
              uint64_t v33 = v50[1];
              goto LABEL_62;
            }
          }
          else if (v15 == 2 && v26 == 0)
          {
            sub_10004ECF4(a2, (uint64_t)v58);
            if (v59 == 3 && v58[0] == 2)
            {
              uint64_t v32 = v58[2];
              uint64_t v31 = v58[3];
              uint64_t v33 = v58[1];
              goto LABEL_62;
            }
          }
          else if (v15 == 3 && v26 == 0)
          {
            sub_10004ECF4(a2, (uint64_t)v60);
            if (v61 == 3 && v60[0] == 3)
            {
              uint64_t v32 = v60[2];
              uint64_t v31 = v60[3];
              uint64_t v33 = v60[1];
              goto LABEL_62;
            }
          }
          else if (v15 == 4 && v26 == 0)
          {
            sub_10004ECF4(a2, (uint64_t)v62);
            if (v63 == 3 && v62[0] == 4)
            {
              uint64_t v32 = v62[2];
              uint64_t v31 = v62[3];
              uint64_t v33 = v62[1];
LABEL_62:
              if (!(v32 | v31 | v33)) {
                goto LABEL_63;
              }
            }
          }
          else
          {
            sub_10004ECF4(a2, (uint64_t)v46);
            if (v47 == 3 && v46[0] == 5)
            {
              uint64_t v32 = v46[2];
              uint64_t v31 = v46[3];
              uint64_t v33 = v46[1];
              goto LABEL_62;
            }
          }
LABEL_7:
          unint64_t v9 = (v9 + 1) & v43;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v3 = v42;
            goto LABEL_66;
          }
          continue;
        }
        sub_10004ECF4(a2, (uint64_t)v48);
        int8x16_t v11 = vorrq_s8(v48[0], v48[1]);
        int8x8_t v12 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
        if (v49 != 3 || *(void *)&v12 != 0) {
          goto LABEL_7;
        }
LABEL_63:
        swift_bridgeObjectRelease();
LABEL_68:
        uint64_t v36 = *(void *)(*v42 + 48) + 40 * v9;
        uint64_t v37 = *(void *)v36;
        uint64_t v38 = *(void *)(v36 + 8);
        uint64_t v39 = *(void *)(v36 + 16);
        uint64_t v40 = *(void *)(v36 + 24);
        unsigned __int8 v41 = *(unsigned char *)(v36 + 32);
        *(void *)a1 = *(void *)v36;
        *(void *)(a1 + 8) = v38;
        *(void *)(a1 + 16) = v39;
        *(void *)(a1 + 24) = v40;
        *(unsigned char *)(a1 + 32) = v41;
        sub_10004E998(v37, v38, v39, v40, v41);
        return 0;
      default:
        sub_10004ECF4(a2, (uint64_t)v52);
        if (v53) {
          goto LABEL_7;
        }
        if (v15 == v52[0] && v16 == v52[1]) {
          goto LABEL_67;
        }
LABEL_28:
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_7;
        }
LABEL_67:
        swift_bridgeObjectRelease();
        sub_100050964((uint64_t)a2, (void (*)(void, void, void, void, void))sub_10004EA10);
        goto LABEL_68;
    }
  }
}

uint64_t sub_1001FA6F8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1001E227C(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    BOOL v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100200218((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1001FAA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (int *)type metadata accessor for CVTrackSnapshot(0);
  uint64_t v27 = *((void *)v6 - 1);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v13 = a2 + v6[5];
  sub_1003FFF94((uint64_t)v32);
  uint64_t v31 = a2 + v6[6];
  sub_1003FFF94((uint64_t)v32);
  uint64_t v30 = v6[7];
  Hasher._combine(_:)(*(unsigned __int8 *)(a2 + v30));
  uint64_t v29 = v6[8];
  if ((*(void *)(a2 + v29) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = *(void *)(a2 + v29);
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  uint64_t v28 = v6[9];
  if ((*(_DWORD *)(a2 + v28) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v15 = *(_DWORD *)(a2 + v28);
  }
  else {
    Swift::UInt32 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v18 = v16 & ~v17;
  if ((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
  {
    BOOL v24 = v11;
    int64_t v25 = v2;
    uint64_t v26 = a1;
    uint64_t v19 = ~v17;
    uint64_t v20 = *(void *)(v27 + 72);
    do
    {
      sub_10020F0D8(*(void *)(v12 + 48) + v20 * v18, (uint64_t)v8, type metadata accessor for CVTrackSnapshot);
      if ((static UUID.== infix(_:_:)() & 1) != 0
        && (sub_100402834((uint64_t)&v8[v6[5]], v13) & 1) != 0
        && (sub_100402834((uint64_t)&v8[v6[6]], v31) & 1) != 0
        && v8[v6[7]] == *(unsigned char *)(a2 + v30)
        && *(double *)&v8[v6[8]] == *(double *)(a2 + v29)
        && *(float *)&v8[v6[9]] == *(float *)(a2 + v28))
      {
        sub_1001D430C((uint64_t)v8, type metadata accessor for CVTrackSnapshot);
        swift_bridgeObjectRelease();
        sub_1001D430C(a2, type metadata accessor for CVTrackSnapshot);
        sub_10020F0D8(*(void *)(*v25 + 48) + v20 * v18, v26, type metadata accessor for CVTrackSnapshot);
        return 0;
      }
      sub_1001D430C((uint64_t)v8, type metadata accessor for CVTrackSnapshot);
      unint64_t v18 = (v18 + 1) & v19;
    }
    while (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
    swift_bridgeObjectRelease();
    uint64_t v3 = v25;
    a1 = v26;
    uint64_t v11 = v24;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10020F0D8(a2, (uint64_t)v11, type metadata accessor for CVTrackSnapshot);
  v32[0] = *v3;
  void *v3 = 0x8000000000000000;
  sub_1002004D4((uint64_t)v11, v18, isUniquelyReferenced_nonNull_native);
  void *v3 = v32[0];
  swift_bridgeObjectRelease();
  sub_10020F140(a2, a1, type metadata accessor for CVTrackSnapshot);
  return 1;
}

uint64_t sub_1001FAE08(uint64_t a1, uint64_t a2)
{
  uint64_t v71 = a1;
  uint64_t v4 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v67 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v79 = (uint64_t)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v82 = (uint64_t)&v61 - v7;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v66 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000F214(&qword_100525598);
  __chkstk_darwin(v72);
  uint64_t v76 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v12 - 8);
  Swift::UInt64 v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v74 = (uint64_t)&v61 - v16;
  uint64_t v87 = sub_10000F214((uint64_t *)&unk_1005255A0);
  __chkstk_darwin(v87);
  unint64_t v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for BundleClassification.ClassificationType(0);
  uint64_t v19 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v78 = (uint64_t)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v75 = (uint64_t *)((char *)&v61 - v22);
  __chkstk_darwin(v23);
  int64_t v25 = (char *)&v61 - v24;
  __chkstk_darwin(v26);
  uint64_t v69 = (uint64_t)&v61 - v27;
  uint64_t v70 = v2;
  uint64_t v28 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_10038C3B4((uint64_t)v89);
  Swift::Int v29 = Hasher._finalize()();
  uint64_t v30 = -1 << *(unsigned char *)(v28 + 32);
  unint64_t v31 = v29 & ~v30;
  uint64_t v86 = v28 + 56;
  if (((*(void *)(v28 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    char v57 = v70;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v59 = v69;
    sub_10020F0D8(a2, v69, type metadata accessor for BundleClassification.ClassificationType);
    v89[0] = *v57;
    *char v57 = 0x8000000000000000;
    sub_100200890(v59, v31, isUniquelyReferenced_nonNull_native);
    *char v57 = v89[0];
    swift_bridgeObjectRelease();
    sub_10020F140(a2, v71, type metadata accessor for BundleClassification.ClassificationType);
    return 1;
  }
  uint64_t v83 = ~v30;
  uint64_t v73 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v85 = *(void *)(v19 + 72);
  uint64_t v64 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  char v63 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  uint64_t v68 = v8;
  uint64_t v65 = v14;
  uint64_t v84 = v28;
  while (2)
  {
    uint64_t v32 = *(void *)(v28 + 48);
    unint64_t v33 = v85 * v31;
    sub_10020F0D8(v32 + v85 * v31, (uint64_t)v25, type metadata accessor for BundleClassification.ClassificationType);
    uint64_t v34 = (uint64_t *)&v18[*(int *)(v87 + 48)];
    sub_10020F0D8((uint64_t)v25, (uint64_t)v18, type metadata accessor for BundleClassification.ClassificationType);
    sub_10020F0D8(a2, (uint64_t)v34, type metadata accessor for BundleClassification.ClassificationType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v37 = v78;
        sub_10020F0D8((uint64_t)v18, v78, type metadata accessor for BundleClassification.ClassificationType);
        uint64_t v38 = *(int *)(sub_10000F214(&qword_1005297C0) + 48);
        uint64_t v39 = *(void *)(v37 + v38);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          swift_bridgeObjectRelease();
          sub_1001D430C(v37, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
LABEL_17:
          sub_10000FBD8((uint64_t)v18, (uint64_t *)&unk_1005255A0);
LABEL_18:
          uint64_t v28 = v84;
LABEL_19:
          sub_1001D430C((uint64_t)v25, type metadata accessor for BundleClassification.ClassificationType);
          unint64_t v31 = (v31 + 1) & v83;
          if (((*(void *)(v86 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
            goto LABEL_44;
          }
          continue;
        }
        uint64_t v40 = *(uint64_t *)((char *)v34 + v38);
        uint64_t v80 = v39;
        uint64_t v81 = v40;
        uint64_t v41 = v74;
        sub_10020F140((uint64_t)v34, v74, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        uint64_t v42 = v76;
        uint64_t v43 = v76 + *(int *)(v72 + 48);
        sub_10020F0D8(v37, v76, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        uint64_t v44 = v68;
        sub_10020F0D8(v41, v43, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        uint64_t v45 = *v73;
        switch((*v73)(v42, 3, v44))
        {
          case 1u:
            if (v45(v43, 3, v44) != 1) {
              goto LABEL_28;
            }
            goto LABEL_31;
          case 2u:
            if (v45(v43, 3, v44) == 2) {
              goto LABEL_31;
            }
            goto LABEL_28;
          case 3u:
            if (v45(v43, 3, v44) != 3) {
              goto LABEL_28;
            }
            goto LABEL_31;
          default:
            uint64_t v46 = (uint64_t)v65;
            sub_10020F0D8(v76, (uint64_t)v65, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
            if (v45(v43, 3, v44))
            {
              (*v64)(v46, v44);
LABEL_28:
              sub_10000FBD8(v76, &qword_100525598);
              goto LABEL_29;
            }
            uint64_t v48 = v66;
            (*v63)(v66, v43, v44);
            LODWORD(v77) = static UUID.== infix(_:_:)();
            char v49 = *v64;
            (*v64)((uint64_t)v48, v44);
            v49(v46, v44);
            if ((v77 & 1) == 0)
            {
              sub_1001D430C(v76, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
LABEL_29:
              uint64_t v28 = v84;
              sub_1001D430C(v78, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
              sub_1001D430C(v74, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1001D430C((uint64_t)v18, type metadata accessor for BundleClassification.ClassificationType);
              goto LABEL_19;
            }
LABEL_31:
            sub_1001D430C(v76, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
            sub_1001D430C(v78, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
            uint64_t v50 = *(void *)(v80 + 16);
            if (v50 != *(void *)(v81 + 16))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_41:
              sub_1001D430C(v74, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
LABEL_42:
              sub_1001D430C((uint64_t)v18, type metadata accessor for BundleClassification.ClassificationType);
              goto LABEL_18;
            }
            if (v50)
            {
              if (v80 == v81)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_45;
              }
              uint64_t v62 = a2;
              unint64_t v51 = 0;
              unint64_t v52 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
              uint64_t v77 = *(void *)(v67 + 72);
              uint64_t v53 = v82;
              while (1)
              {
                sub_10020F0D8(v80 + v52, v53, type metadata accessor for VisualIntelligenceLookupResult);
                if (v51 >= *(void *)(v81 + 16))
                {
                  __break(1u);
                  JUMPOUT(0x1001FBA18);
                }
                uint64_t v54 = v79;
                sub_10020F0D8(v81 + v52, v79, type metadata accessor for VisualIntelligenceLookupResult);
                char v55 = sub_1003F5DBC(v82, v54);
                uint64_t v56 = v54;
                uint64_t v53 = v82;
                sub_1001D430C(v56, type metadata accessor for VisualIntelligenceLookupResult);
                sub_1001D430C(v53, type metadata accessor for VisualIntelligenceLookupResult);
                if ((v55 & 1) == 0) {
                  break;
                }
                ++v51;
                v52 += v77;
                if (v50 == v51)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  a2 = v62;
                  goto LABEL_45;
                }
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a2 = v62;
              goto LABEL_41;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_45:
            sub_1001D430C(v74, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
LABEL_46:
            sub_1001D430C((uint64_t)v18, type metadata accessor for BundleClassification.ClassificationType);
            sub_1001D430C((uint64_t)v25, type metadata accessor for BundleClassification.ClassificationType);
            swift_bridgeObjectRelease();
            sub_1001D430C(a2, type metadata accessor for BundleClassification.ClassificationType);
            sub_10020F0D8(*(void *)(*v70 + 48) + v33, v71, type metadata accessor for BundleClassification.ClassificationType);
            return 0;
        }
      case 2u:
        if (swift_getEnumCaseMultiPayload() == 2) {
          goto LABEL_46;
        }
        goto LABEL_17;
      case 3u:
        if (swift_getEnumCaseMultiPayload() == 3) {
          goto LABEL_46;
        }
        goto LABEL_17;
      case 4u:
        if (swift_getEnumCaseMultiPayload() == 4) {
          goto LABEL_46;
        }
        goto LABEL_17;
      default:
        uint64_t v35 = v75;
        sub_10020F0D8((uint64_t)v18, (uint64_t)v75, type metadata accessor for BundleClassification.ClassificationType);
        uint64_t v36 = *v35;
        if (swift_getEnumCaseMultiPayload())
        {
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        char v47 = sub_1003E1FA0(v36, *v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v47) {
          goto LABEL_46;
        }
        goto LABEL_42;
    }
  }
}

uint64_t sub_1001FBA3C()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for VisualDomain();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000F214(&qword_100525050);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    Swift::UInt64 v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1001E227C((unint64_t *)&unk_100525040, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_1001FBE38()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214(&qword_100524EF8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1001FC118()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214((uint64_t *)&unk_1005250A0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = v6[v19];
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = v6[v11];
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = v6[v11];
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = v6[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_40;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = v6[v11];
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x1001FC5B4);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1001FC5F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214(&qword_100525208);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v27 = v1;
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1001FC888()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214(&qword_1005255C8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1001FCB0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v56 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v58 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v55 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v54 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v10 - 8);
  uint64_t v53 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CVDetection();
  uint64_t v61 = *(void *)(v12 - 8);
  uint64_t v62 = v12;
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  int64_t v17 = (char *)&v51 - v16;
  uint64_t v18 = *v0;
  sub_10000F214(&qword_1005250F8);
  uint64_t v19 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v20 = v19;
  if (!*(void *)(v18 + 16)) {
    goto LABEL_47;
  }
  unint64_t v52 = v0;
  uint64_t v21 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v22 = *(void *)(v18 + 56);
  uint64_t v60 = (void *)(v18 + 56);
  if (v21 < 64) {
    uint64_t v23 = ~(-1 << v21);
  }
  else {
    uint64_t v23 = -1;
  }
  unint64_t v24 = v23 & v22;
  int64_t v59 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v25 = v19 + 56;
  swift_retain();
  int64_t v26 = 0;
  uint64_t v57 = v18;
  while (1)
  {
    if (v24)
    {
      unint64_t v28 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v29 = v28 | (v26 << 6);
      goto LABEL_24;
    }
    int64_t v30 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      goto LABEL_48;
    }
    if (v30 >= v59) {
      break;
    }
    unint64_t v31 = v60[v30];
    ++v26;
    if (!v31)
    {
      int64_t v26 = v30 + 1;
      if (v30 + 1 >= v59) {
        break;
      }
      unint64_t v31 = v60[v26];
      if (!v31)
      {
        int64_t v26 = v30 + 2;
        if (v30 + 2 >= v59) {
          break;
        }
        unint64_t v31 = v60[v26];
        if (!v31)
        {
          int64_t v32 = v30 + 3;
          if (v32 >= v59) {
            break;
          }
          unint64_t v31 = v60[v32];
          if (!v31)
          {
            while (1)
            {
              int64_t v26 = v32 + 1;
              if (__OFADD__(v32, 1)) {
                goto LABEL_49;
              }
              if (v26 >= v59) {
                goto LABEL_43;
              }
              unint64_t v31 = v60[v26];
              ++v32;
              if (v31) {
                goto LABEL_23;
              }
            }
          }
          int64_t v26 = v32;
        }
      }
    }
LABEL_23:
    unint64_t v24 = (v31 - 1) & v31;
    unint64_t v29 = __clz(__rbit64(v31)) + (v26 << 6);
LABEL_24:
    uint64_t v33 = *(void *)(v61 + 72);
    sub_10020F140(*(void *)(v18 + 48) + v33 * v29, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
    Hasher.init(_seed:)();
    sub_10020F0D8((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v34 = v54;
        sub_10020F140((uint64_t)v14, v54, type metadata accessor for ParseDetectorResult);
        Hasher._combine(_:)(1uLL);
        sub_1003E7010((uint64_t)v63);
        uint64_t v35 = type metadata accessor for ParseDetectorResult;
        goto LABEL_31;
      case 2u:
        uint64_t v36 = v55;
        sub_10020F140((uint64_t)v14, v55, type metadata accessor for TextDetectorResult);
        Hasher._combine(_:)(2uLL);
        sub_10032169C((uint64_t)v63);
        uint64_t v37 = type metadata accessor for TextDetectorResult;
        uint64_t v38 = v36;
        goto LABEL_33;
      case 3u:
        uint64_t v34 = v58;
        sub_10020F140((uint64_t)v14, v58, type metadata accessor for StreamingBarcodeDetectorResult);
        Swift::UInt v39 = 3;
        goto LABEL_30;
      case 4u:
        uint64_t v34 = v58;
        sub_10020F140((uint64_t)v14, v58, type metadata accessor for StreamingBarcodeDetectorResult);
        Swift::UInt v39 = 4;
LABEL_30:
        Hasher._combine(_:)(v39);
        sub_100165074();
        uint64_t v35 = type metadata accessor for StreamingBarcodeDetectorResult;
        goto LABEL_31;
      case 5u:
        uint64_t v40 = v56;
        sub_10020F140((uint64_t)v14, v56, type metadata accessor for StreamingTextDetectorResult);
        Hasher._combine(_:)(5uLL);
        sub_1001665AC();
        uint64_t v37 = type metadata accessor for StreamingTextDetectorResult;
        uint64_t v38 = v40;
LABEL_33:
        uint64_t v18 = v57;
        goto LABEL_34;
      default:
        uint64_t v34 = v53;
        sub_10020F140((uint64_t)v14, v53, type metadata accessor for ObjectDetectorResult);
        Hasher._combine(_:)(0);
        sub_10031E668();
        uint64_t v35 = type metadata accessor for ObjectDetectorResult;
LABEL_31:
        uint64_t v37 = v35;
        uint64_t v38 = v34;
LABEL_34:
        sub_1001D430C(v38, v37);
        Swift::Int v41 = Hasher._finalize()();
        uint64_t v42 = -1 << *(unsigned char *)(v20 + 32);
        unint64_t v43 = v41 & ~v42;
        unint64_t v44 = v43 >> 6;
        if (((-1 << v43) & ~*(void *)(v25 + 8 * (v43 >> 6))) != 0)
        {
          unint64_t v27 = __clz(__rbit64((-1 << v43) & ~*(void *)(v25 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_7;
        }
        char v45 = 0;
        unint64_t v46 = (unint64_t)(63 - v42) >> 6;
        break;
    }
    do
    {
      if (++v44 == v46 && (v45 & 1) != 0)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        JUMPOUT(0x1001FD264);
      }
      BOOL v47 = v44 == v46;
      if (v44 == v46) {
        unint64_t v44 = 0;
      }
      v45 |= v47;
      uint64_t v48 = *(void *)(v25 + 8 * v44);
    }
    while (v48 == -1);
    unint64_t v27 = __clz(__rbit64(~v48)) + (v44 << 6);
LABEL_7:
    *(void *)(v25 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    sub_10020F140((uint64_t)v17, *(void *)(v20 + 48) + v27 * v33, (uint64_t (*)(void))type metadata accessor for CVDetection);
    ++*(void *)(v20 + 16);
  }
LABEL_43:
  swift_release();
  uint64_t v1 = v52;
  uint64_t v49 = 1 << *(unsigned char *)(v18 + 32);
  if (v49 > 63) {
    bzero(v60, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v60 = -1 << v49;
  }
  *(void *)(v18 + 16) = 0;
LABEL_47:
  uint64_t result = swift_release();
  *uint64_t v1 = v20;
  return result;
}

uint64_t sub_1001FD27C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DetectionRequest(0);
  uint64_t v28 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10000F214(&qword_100524E30);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v25 = v0;
    int64_t v26 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    int64_t v27 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v20 >= v27) {
          goto LABEL_26;
        }
        unint64_t v21 = v26[v20];
        ++v14;
        if (!v21)
        {
          int64_t v14 = v20 + 1;
          if (v20 + 1 >= v27) {
            goto LABEL_26;
          }
          unint64_t v21 = v26[v14];
          if (!v21)
          {
            int64_t v14 = v20 + 2;
            if (v20 + 2 >= v27) {
              goto LABEL_26;
            }
            unint64_t v21 = v26[v14];
            if (!v21)
            {
              int64_t v22 = v20 + 3;
              if (v22 >= v27)
              {
LABEL_26:
                swift_release();
                uint64_t v23 = 1 << *(unsigned char *)(v5 + 32);
                if (v23 > 63) {
                  bzero(v26, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v26 = -1 << v23;
                }
                uint64_t v1 = v25;
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v26[v22];
              if (!v21)
              {
                while (1)
                {
                  int64_t v14 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_32;
                  }
                  if (v14 >= v27) {
                    goto LABEL_26;
                  }
                  unint64_t v21 = v26[v14];
                  ++v22;
                  if (v21) {
                    goto LABEL_25;
                  }
                }
              }
              int64_t v14 = v22;
            }
          }
        }
LABEL_25:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v16 = __clz(__rbit64(v21)) + (v14 << 6);
      }
      uint64_t v17 = *(void *)(v28 + 72);
      sub_10020F140(*(void *)(v5 + 48) + v17 * v16, (uint64_t)v4, type metadata accessor for DetectionRequest);
      Hasher.init(_seed:)();
      sub_1003FFF94((uint64_t)v29);
      sub_1001C2DBC((uint64_t)v29);
      sub_10020B90C(*(double *)&v4[*(int *)(v2 + 24)], *(double *)&v4[*(int *)(v2 + 24) + 8], *(double *)&v4[*(int *)(v2 + 24) + 16], *(double *)&v4[*(int *)(v2 + 24) + 24]);
      if ((*(void *)&v4[*(int *)(v2 + 28)] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v18 = *(void *)&v4[*(int *)(v2 + 28)];
      }
      else {
        Swift::UInt64 v18 = 0;
      }
      Hasher._combine(_:)(v18);
      Hasher._finalize()();
      unint64_t v19 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v12 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = sub_10020F140((uint64_t)v4, *(void *)(v7 + 48) + v19 * v17, type metadata accessor for DetectionRequest);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_1001FD5E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214(&qword_1005250C0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v27[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v27[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v27 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v27[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1001FD90C()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  Swift::Int v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000F214(&qword_100524EE0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_1001FDD08()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214(&qword_1005254B0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_66;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  Swift::Int v41 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v40 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  swift_retain();
  int64_t v9 = 0;
  for (i = v2; ; uint64_t v2 = i)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_67;
    }
    if (v14 >= v40) {
      break;
    }
    unint64_t v15 = v41[v14];
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v40) {
        break;
      }
      unint64_t v15 = v41[v9];
      if (!v15)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v40) {
          break;
        }
        unint64_t v15 = v41[v9];
        if (!v15)
        {
          int64_t v16 = v14 + 3;
          if (v16 >= v40) {
            break;
          }
          unint64_t v15 = v41[v16];
          if (!v15)
          {
            while (1)
            {
              int64_t v9 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_68;
              }
              if (v9 >= v40) {
                goto LABEL_62;
              }
              unint64_t v15 = v41[v9];
              ++v16;
              if (v15) {
                goto LABEL_23;
              }
            }
          }
          int64_t v9 = v16;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v13;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(unsigned __int8 *)(v17 + 32);
    Hasher.init(_seed:)();
    switch(v22)
    {
      case 1:
        Swift::UInt v23 = 3;
        goto LABEL_28;
      case 2:
        Swift::UInt v23 = 4;
LABEL_28:
        Hasher._combine(_:)(v23);
        String.hash(into:)();
        String.hash(into:)();
        break;
      case 3:
        if (v20 | v19 | v18 | v21)
        {
          uint64_t v24 = v20 | v19 | v21;
          if (v18 == 1 && v24 == 0)
          {
            Swift::UInt v29 = 1;
          }
          else if (v18 == 2 && v24 == 0)
          {
            Swift::UInt v29 = 5;
          }
          else if (v18 == 3 && v24 == 0)
          {
            Swift::UInt v29 = 6;
          }
          else if (v18 == 4 && v24 == 0)
          {
            Swift::UInt v29 = 7;
          }
          else
          {
            Swift::UInt v29 = 8;
          }
        }
        else
        {
          Swift::UInt v29 = 0;
        }
        Hasher._combine(_:)(v29);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        String.hash(into:)();
        break;
    }
    Swift::Int v30 = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v32 = v30 & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v8 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v32) & ~*(void *)(v8 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v34 = 0;
    unint64_t v35 = (unint64_t)(63 - v31) >> 6;
    do
    {
      if (++v33 == v35 && (v34 & 1) != 0)
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        JUMPOUT(0x1001FE11CLL);
      }
      BOOL v36 = v33 == v35;
      if (v33 == v35) {
        unint64_t v33 = 0;
      }
      v34 |= v36;
      uint64_t v37 = *(void *)(v8 + 8 * v33);
    }
    while (v37 == -1);
    unint64_t v10 = __clz(__rbit64(~v37)) + (v33 << 6);
LABEL_7:
    *(void *)(v8 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v4 + 48) + 40 * v10;
    *(void *)uint64_t v11 = v18;
    *(void *)(v11 + 8) = v19;
    *(void *)(v11 + 16) = v20;
    *(void *)(v11 + 24) = v21;
    *(unsigned char *)(v11 + 32) = v22;
    ++*(void *)(v4 + 16);
  }
LABEL_62:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v38 = 1 << *(unsigned char *)(v2 + 32);
  if (v38 > 63) {
    bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *Swift::Int v41 = -1 << v38;
  }
  *(void *)(v2 + 16) = 0;
LABEL_66:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1001FE12C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000F214(&qword_1005250F0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v6 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
    int64_t v9 = (void *)(v6 + 56);
    uint64_t v10 = -1;
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    unint64_t v11 = v10 & *(void *)(v6 + 56);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v14 << 6);
      }
      else
      {
        int64_t v17 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        if (v17 >= v12) {
          goto LABEL_22;
        }
        unint64_t v18 = v9[v17];
        ++v14;
        if (!v18)
        {
          int64_t v14 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_22;
          }
          unint64_t v18 = v9[v14];
          if (!v18)
          {
            int64_t v14 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_22;
            }
            unint64_t v18 = v9[v14];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_22:
                swift_release();
                uint64_t v20 = 1 << *(unsigned char *)(v6 + 32);
                if (v20 > 63) {
                  bzero((void *)(v6 + 56), ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v9 = -1 << v20;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v18 = v9[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v14 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_28;
                  }
                  if (v14 >= v12) {
                    goto LABEL_22;
                  }
                  unint64_t v18 = v9[v14];
                  ++v19;
                  if (v18) {
                    goto LABEL_21;
                  }
                }
              }
              int64_t v14 = v19;
            }
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
      }
      sub_10020F140(*(void *)(v6 + 48) + *(void *)(v3 + 72) * v16, (uint64_t)v5, type metadata accessor for CVTrackSnapshot);
      uint64_t result = sub_1001FE830((uint64_t)v5, v7);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_1001FE39C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BundleClassification.ClassificationType(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000F214((uint64_t *)&unk_1005255B0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    unint64_t v33 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    uint64_t v31 = v0;
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v32) {
          goto LABEL_33;
        }
        unint64_t v20 = v33[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v20 = v33[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v32) {
              goto LABEL_33;
            }
            unint64_t v20 = v33[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v31;
                uint64_t v30 = 1 << *(unsigned char *)(v6 + 32);
                if (v30 > 63) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v33 = -1 << v30;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v20 = v33[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v33[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      uint64_t v22 = *(void *)(v3 + 72);
      sub_10020F140(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5, type metadata accessor for BundleClassification.ClassificationType);
      Hasher.init(_seed:)();
      sub_10038C3B4((uint64_t)v34);
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = sub_10020F140((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22, type metadata accessor for BundleClassification.ClassificationType);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v8;
  return result;
}

unint64_t sub_1001FE738(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_1001FE830(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (int *)type metadata accessor for CVTrackSnapshot(0);
  sub_1003FFF94((uint64_t)v9);
  sub_1003FFF94((uint64_t)v9);
  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + v4[7]));
  if ((*(void *)(a1 + v4[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(a1 + v4[8]);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((*(_DWORD *)(a1 + v4[9]) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v6 = *(_DWORD *)(a1 + v4[9]);
  }
  else {
    Swift::UInt32 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  Hasher._finalize()();
  unint64_t v7 = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
  uint64_t result = sub_10020F140(a1, *(void *)(a2 + 48) + *(void *)(*((void *)v4 - 1) + 72) * v7, type metadata accessor for CVTrackSnapshot);
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_1001FE9B8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for VisualDomain();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1001FBA3C();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100201CE4((uint64_t (*)(void))&type metadata accessor for VisualDomain, &qword_100525050);
      goto LABEL_12;
    }
    sub_1002023D4();
  }
  uint64_t v13 = *v3;
  sub_1001E227C((unint64_t *)&unk_100525040, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    unint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    unint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_1001E227C((unint64_t *)&qword_100519868, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_1001FEC74(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::UInt64 v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1001FBE38();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1002014C0();
      goto LABEL_22;
    }
    sub_100202784();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_1001FEE10(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1001FC118();
    }
    else
    {
      if (v7 > v6)
      {
        uint64_t result = (Swift::Int)sub_100201674();
        goto LABEL_58;
      }
      sub_100202A34();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    sub_100062F74(v5);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v10 = ~v9;
      while (2)
      {
        unint64_t v11 = 0xEC00000070756B6FLL;
        unint64_t v12 = 0x6F4C6C6175736956;
        switch(*(unsigned char *)(*(void *)(v8 + 48) + a2))
        {
          case 1:
            unint64_t v11 = 0xEA00000000007075;
            unint64_t v12 = 0x6B6F6F4C7370614DLL;
            break;
          case 2:
            unint64_t v12 = 0x697463417370614DLL;
            unint64_t v11 = 0xEA00000000006E6FLL;
            break;
          case 3:
            unint64_t v11 = 0xE600000000000000;
            unint64_t v12 = 0x65646F435251;
            break;
          case 4:
            unint64_t v12 = 0x4370696C43707041;
            unint64_t v11 = 0xEB0000000065646FLL;
            break;
          case 5:
            unint64_t v12 = 0x6574654461746144;
            unint64_t v11 = 0xEC000000726F7463;
            break;
          case 6:
            unint64_t v12 = 0x7A6972616D6D7553;
            goto LABEL_22;
          case 7:
            unint64_t v11 = 0xE900000000000064;
            unint64_t v12 = 0x756F6C4164616552;
            break;
          case 8:
            unint64_t v12 = 0x7261646E656C6143;
            unint64_t v11 = 0xED0000746E657645;
            break;
          case 9:
            unint64_t v11 = 0x8000000100424480;
            unint64_t v12 = 0xD000000000000014;
            break;
          case 0xA:
            unint64_t v11 = 0xE300000000000000;
            unint64_t v12 = 7041857;
            break;
          case 0xB:
            unint64_t v12 = 0x6165536567616D49;
            unint64_t v11 = 0xEB00000000686372;
            break;
          case 0xC:
            unint64_t v12 = 0x74616C736E617254;
LABEL_22:
            unint64_t v11 = 0xE900000000000065;
            break;
          case 0xD:
            unint64_t v12 = 0x4E72657474756853;
            unint64_t v11 = 0xEF6E6F697463416FLL;
            break;
          case 0xE:
            unint64_t v12 = 0x6669636570736E55;
            unint64_t v11 = 0xEB00000000646569;
            break;
          default:
            break;
        }
        uint64_t v13 = 0x6F4C6C6175736956;
        unint64_t v14 = 0xEC00000070756B6FLL;
        switch(v5)
        {
          case 1:
            unint64_t v14 = 0xEA00000000007075;
            if (v12 != 0x6B6F6F4C7370614DLL) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 2:
            unint64_t v14 = 0xEA00000000006E6FLL;
            if (v12 != 0x697463417370614DLL) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 3:
            unint64_t v14 = 0xE600000000000000;
            if (v12 != 0x65646F435251) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 4:
            uint64_t v15 = 0x4370696C43707041;
            uint64_t v16 = 6644847;
            goto LABEL_32;
          case 5:
            unint64_t v14 = 0xEC000000726F7463;
            if (v12 != 0x6574654461746144) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 6:
            uint64_t v17 = 0x7A6972616D6D7553;
            goto LABEL_46;
          case 7:
            unint64_t v14 = 0xE900000000000064;
            if (v12 != 0x756F6C4164616552) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 8:
            uint64_t v13 = 0x7261646E656C6143;
            unint64_t v14 = 0xED0000746E657645;
            goto LABEL_51;
          case 9:
            unint64_t v14 = 0x8000000100424480;
            if (v12 != 0xD000000000000014) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 10:
            unint64_t v14 = 0xE300000000000000;
            if (v12 != 7041857) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 11:
            uint64_t v15 = 0x6165536567616D49;
            uint64_t v16 = 6841202;
            goto LABEL_32;
          case 12:
            uint64_t v17 = 0x74616C736E617254;
LABEL_46:
            unint64_t v14 = 0xE900000000000065;
            if (v12 != v17) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 13:
            unint64_t v14 = 0xEF6E6F697463416FLL;
            if (v12 != 0x4E72657474756853) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 14:
            uint64_t v15 = 0x6669636570736E55;
            uint64_t v16 = 6579561;
LABEL_32:
            unint64_t v14 = v16 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
            if (v12 != v15) {
              goto LABEL_53;
            }
            goto LABEL_52;
          default:
LABEL_51:
            if (v12 != v13) {
              goto LABEL_53;
            }
LABEL_52:
            if (v11 == v14) {
              goto LABEL_61;
            }
LABEL_53:
            char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v18) {
              goto LABEL_62;
            }
            a2 = (a2 + 1) & v10;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_58:
  uint64_t v19 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v19 + 48) + a2) = v5;
  uint64_t v20 = *(void *)(v19 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease_n();
LABEL_62:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x1001FF3A8);
  }
  *(void *)(v19 + 16) = v22;
  return result;
}

uint64_t sub_1001FF420(uint64_t result, char a2, double a3)
{
  unint64_t v4 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0) {
    goto LABEL_14;
  }
  if (a2)
  {
    sub_1001FC5F0();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100201808();
      goto LABEL_14;
    }
    sub_100202ED8();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v4 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(double *)(v10 + 8 * v4) == a3)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        unint64_t v4 = (v4 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
          break;
        }
        if (*(double *)(v10 + 8 * v4) == a3) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(double *)(*(void *)(v12 + 48) + 8 * v4) = a3;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_1001FF554(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1001FC888();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1002019A0();
      goto LABEL_14;
    }
    sub_10020314C();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_1001FF678(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CVDetection();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v14 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1001FCB0C();
    goto LABEL_8;
  }
  if (v13 <= v12)
  {
    sub_1002033B0();
LABEL_8:
    uint64_t v15 = *v4;
    Hasher.init(_seed:)();
    sub_1003FFF94((uint64_t)v27);
    Swift::Int v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
    a2 = v16 & ~v17;
    if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v26 = v8;
      uint64_t v18 = ~v17;
      uint64_t v14 = v9;
      uint64_t v19 = *(void *)(v9 + 72);
      while (1)
      {
        sub_10020F0D8(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CVDetection);
        char v20 = sub_100402834((uint64_t)v11, a1);
        sub_1001D430C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CVDetection);
        if (v20) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v18;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = v9;
  sub_10020215C((uint64_t (*)(void))type metadata accessor for CVDetection, &qword_1005250F8, (uint64_t (*)(void))type metadata accessor for CVDetection, (uint64_t (*)(void))type metadata accessor for CVDetection);
LABEL_14:
  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10020F140(a1, *(void *)(v21 + 48) + *(void *)(v14 + 72) * a2, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001FF90C(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v7 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v27 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_19;
  }
  if (a3)
  {
    sub_1001FD27C();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10020215C(type metadata accessor for DetectionRequest, &qword_100524E30, type metadata accessor for DetectionRequest, type metadata accessor for DetectionRequest);
      goto LABEL_19;
    }
    sub_100203AD8();
  }
  uint64_t v12 = *v3;
  Hasher.init(_seed:)();
  sub_1003FFF94((uint64_t)v28);
  uint64_t v13 = a1 + v7[5];
  sub_1001C2DBC((uint64_t)v28);
  uint64_t v14 = (CGRect *)(a1 + v7[6]);
  sub_10020B90C(v14->origin.x, v14->origin.y, v14->size.width, v14->size.height);
  uint64_t v25 = v7[7];
  if ((*(void *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = *(void *)(a1 + v25);
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v16 & ~v17;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v27 + 72);
    while (1)
    {
      sub_10020F0D8(*(void *)(v12 + 48) + v19 * a2, (uint64_t)v9, type metadata accessor for DetectionRequest);
      if ((sub_100402834((uint64_t)v9, a1) & 1) != 0
        && (sub_10020BB18((uint64_t)&v9[v7[5]], v13) & 1) != 0
        && CGRectEqualToRect(*(CGRect *)&v9[v7[6]], *v14)
        && *(double *)&v9[v7[7]] == *(double *)(a1 + v25))
      {
        break;
      }
      sub_1001D430C((uint64_t)v9, type metadata accessor for DetectionRequest);
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_19;
      }
    }
    sub_1001D430C((uint64_t)v9, type metadata accessor for DetectionRequest);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_19:
  uint64_t v20 = *v26;
  *(void *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10020F140(a1, *(void *)(v20 + 48) + *(void *)(v27 + 72) * a2, type metadata accessor for DetectionRequest);
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_1001FFC38(Swift::Int result, unint64_t a2, char a3)
{
  unint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1001FD5E4();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_100201B38();
      goto LABEL_14;
    }
    sub_100203E10();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for CVTrackedDetection(0);
    swift_retain();
    char v11 = static UUID.== infix(_:_:)();
    uint64_t result = swift_release();
    if (v11)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        swift_retain();
        char v13 = static UUID.== infix(_:_:)();
        uint64_t result = swift_release();
        if (v13) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

uint64_t sub_1001FFE44(long long *a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1001FDD08();
    }
    else
    {
      if (v7 > v6)
      {
        sub_100201F94();
        goto LABEL_71;
      }
      sub_1002044D4();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    sub_10004E0E4();
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
    a2 = v9 & ~v10;
    uint64_t v11 = v8 + 56;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v42 = ~v10;
      uint64_t v12 = *(void *)(v8 + 48);
      while (1)
      {
        BOOL v16 = (uint64_t *)(v12 + 40 * a2);
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        uint64_t v20 = v16[2];
        uint64_t v19 = v16[3];
        switch(*((unsigned char *)v16 + 32))
        {
          case 1:
            sub_10004ECF4(a1, (uint64_t)v51);
            if (v52 != 1) {
              goto LABEL_14;
            }
            uint64_t v22 = v51[0];
            uint64_t v23 = v51[1];
            uint64_t v24 = v51[2];
            uint64_t v25 = v51[3];
            goto LABEL_46;
          case 2:
            sub_10004ECF4(a1, (uint64_t)v53);
            if (v54 != 2) {
              goto LABEL_14;
            }
            uint64_t v22 = v53[0];
            uint64_t v23 = v53[1];
            uint64_t v24 = v53[2];
            uint64_t v25 = v53[3];
LABEL_46:
            BOOL v34 = v17 == v22 && v18 == v23;
            if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_14;
            }
            if (v20 != v24 || v19 != v25) {
              goto LABEL_55;
            }
            goto LABEL_70;
          case 3:
            if (v20 | v18 | v17 | v19)
            {
              uint64_t v26 = v20 | v18 | v19;
              if (v17 == 1 && v26 == 0)
              {
                sub_10004ECF4(a1, (uint64_t)v47);
                if (v48 != 3 || v47[0] != 1) {
                  goto LABEL_14;
                }
                uint64_t v32 = v47[2];
                uint64_t v31 = v47[3];
                uint64_t v33 = v47[1];
              }
              else if (v17 == 2 && v26 == 0)
              {
                sub_10004ECF4(a1, (uint64_t)v55);
                if (v56 != 3 || v55[0] != 2) {
                  goto LABEL_14;
                }
                uint64_t v32 = v55[2];
                uint64_t v31 = v55[3];
                uint64_t v33 = v55[1];
              }
              else if (v17 == 3 && v26 == 0)
              {
                sub_10004ECF4(a1, (uint64_t)v57);
                if (v58 != 3 || v57[0] != 3) {
                  goto LABEL_14;
                }
                uint64_t v32 = v57[2];
                uint64_t v31 = v57[3];
                uint64_t v33 = v57[1];
              }
              else if (v17 == 4 && v26 == 0)
              {
                sub_10004ECF4(a1, (uint64_t)v59);
                if (v60 != 3 || v59[0] != 4) {
                  goto LABEL_14;
                }
                uint64_t v32 = v59[2];
                uint64_t v31 = v59[3];
                uint64_t v33 = v59[1];
              }
              else
              {
                sub_10004ECF4(a1, (uint64_t)v43);
                if (v44 != 3 || v43[0] != 5) {
                  goto LABEL_14;
                }
                uint64_t v32 = v43[2];
                uint64_t v31 = v43[3];
                uint64_t v33 = v43[1];
              }
              if (!(v32 | v31 | v33)) {
                goto LABEL_70;
              }
            }
            else
            {
              sub_10004ECF4(a1, (uint64_t)v45);
              int8x16_t v13 = vorrq_s8(v45[0], v45[1]);
              int8x8_t v14 = vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
              if (v46 == 3 && *(void *)&v14 == 0)
              {
LABEL_70:
                ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                goto LABEL_71;
              }
            }
LABEL_14:
            a2 = (a2 + 1) & v42;
            if (((*(void *)(v11 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              goto LABEL_71;
            }
            break;
          default:
            sub_10004ECF4(a1, (uint64_t)v49);
            if (v50) {
              goto LABEL_14;
            }
            if (v17 == v49[0] && v18 == v49[1]) {
              goto LABEL_70;
            }
LABEL_55:
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              goto LABEL_70;
            }
            goto LABEL_14;
        }
      }
    }
  }
LABEL_71:
  uint64_t v36 = *v41;
  *(void *)(*v41 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10004ECF4(a1, *(void *)(v36 + 48) + 40 * a2);
  uint64_t v38 = *(void *)(v36 + 16);
  BOOL v39 = __OFADD__(v38, 1);
  uint64_t v40 = v38 + 1;
  if (v39)
  {
    __break(1u);
    JUMPOUT(0x100200208);
  }
  *(void *)(v36 + 16) = v40;
  return result;
}

uint64_t sub_100200218(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1001FD90C();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100201CE4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_100524EE0);
      goto LABEL_12;
    }
    sub_100204124();
  }
  uint64_t v13 = *v3;
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_1001E227C(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002004D4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = (int *)type metadata accessor for CVTrackSnapshot(0);
  uint64_t v30 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_24;
  }
  if (a3)
  {
    sub_1001FE12C();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10020215C(type metadata accessor for CVTrackSnapshot, &qword_1005250F0, type metadata accessor for CVTrackSnapshot, type metadata accessor for CVTrackSnapshot);
      goto LABEL_24;
    }
    sub_1002048D8();
  }
  uint64_t v12 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v13 = a1 + v7[5];
  sub_1003FFF94((uint64_t)v31);
  uint64_t v14 = a1 + v7[6];
  sub_1003FFF94((uint64_t)v31);
  uint64_t v28 = v7[7];
  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + v28));
  uint64_t v27 = v7[8];
  if ((*(void *)(a1 + v27) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = *(void *)(a1 + v27);
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  uint64_t v26 = v7[9];
  if ((*(_DWORD *)(a1 + v26) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v16 = *(_DWORD *)(a1 + v26);
  }
  else {
    Swift::UInt32 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  Swift::Int v17 = Hasher._finalize()();
  uint64_t v18 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v17 & ~v18;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v19 = ~v18;
    uint64_t v20 = *(void *)(v30 + 72);
    while (1)
    {
      sub_10020F0D8(*(void *)(v12 + 48) + v20 * a2, (uint64_t)v9, type metadata accessor for CVTrackSnapshot);
      if ((static UUID.== infix(_:_:)() & 1) != 0
        && (sub_100402834((uint64_t)&v9[v7[5]], v13) & 1) != 0
        && (sub_100402834((uint64_t)&v9[v7[6]], v14) & 1) != 0
        && v9[v7[7]] == *(unsigned char *)(a1 + v28)
        && *(double *)&v9[v7[8]] == *(double *)(a1 + v27)
        && *(float *)&v9[v7[9]] == *(float *)(a1 + v26))
      {
        break;
      }
      sub_1001D430C((uint64_t)v9, type metadata accessor for CVTrackSnapshot);
      a2 = (a2 + 1) & v19;
      if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_24;
      }
    }
    sub_1001D430C((uint64_t)v9, type metadata accessor for CVTrackSnapshot);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_24:
  uint64_t v21 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10020F140(a1, *(void *)(v21 + 48) + *(void *)(v30 + 72) * a2, type metadata accessor for CVTrackSnapshot);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
  return result;
}

uint64_t sub_100200890(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v74 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v84 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v67 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v73 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000F214(&qword_100525598);
  __chkstk_darwin(v76);
  uint64_t v82 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v17 - 8);
  uint64_t v77 = (uint64_t)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v80 = (uint64_t)&v67 - v20;
  uint64_t v90 = sub_10000F214((uint64_t *)&unk_1005255A0);
  __chkstk_darwin(v90);
  char v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for BundleClassification.ClassificationType(0);
  uint64_t v23 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  __chkstk_darwin(v24);
  uint64_t v81 = (uint64_t *)((char *)&v67 - v25);
  __chkstk_darwin(v26);
  uint64_t v91 = (uint64_t)&v67 - v28;
  unint64_t v29 = *(void *)(*v4 + 16);
  unint64_t v30 = *(void *)(*v4 + 24);
  uint64_t v78 = v23;
  if (v30 <= v29 || (a3 & 1) == 0)
  {
    uint64_t v83 = v27;
    if (a3)
    {
      sub_1001FE39C();
    }
    else
    {
      if (v30 > v29)
      {
        sub_10020215C(type metadata accessor for BundleClassification.ClassificationType, (uint64_t *)&unk_1005255B0, type metadata accessor for BundleClassification.ClassificationType, type metadata accessor for BundleClassification.ClassificationType);
        goto LABEL_47;
      }
      sub_100204B14();
    }
    uint64_t v31 = *v4;
    Hasher.init(_seed:)();
    sub_10038C3B4((uint64_t)v93);
    Swift::Int v32 = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    a2 = v32 & ~v33;
    uint64_t v89 = v31 + 56;
    if ((*(void *)(v31 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v87 = ~v33;
      uint64_t v75 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      uint64_t v88 = *(void *)(v23 + 72);
      uint64_t v71 = (void (**)(uint64_t, uint64_t))(v14 + 8);
      uint64_t v68 = (void (**)(char *, uint64_t, uint64_t))(v14 + 32);
      uint64_t v34 = v91;
      uint64_t v72 = v13;
      uint64_t v79 = v31;
LABEL_13:
      sub_10020F0D8(*(void *)(v31 + 48) + v88 * a2, v34, type metadata accessor for BundleClassification.ClassificationType);
      unint64_t v35 = (uint64_t *)&v22[*(int *)(v90 + 48)];
      sub_10020F0D8(v34, (uint64_t)v22, type metadata accessor for BundleClassification.ClassificationType);
      sub_10020F0D8(a1, (uint64_t)v35, type metadata accessor for BundleClassification.ClassificationType);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v38 = v83;
          sub_10020F0D8((uint64_t)v22, v83, type metadata accessor for BundleClassification.ClassificationType);
          uint64_t v39 = *(int *)(sub_10000F214(&qword_1005297C0) + 48);
          uint64_t v40 = *(void *)(v38 + v39);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            swift_bridgeObjectRelease();
            sub_1001D430C(v38, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
            uint64_t v31 = v79;
LABEL_11:
            sub_10000FBD8((uint64_t)v22, (uint64_t *)&unk_1005255A0);
            goto LABEL_12;
          }
          break;
        case 2u:
          if (swift_getEnumCaseMultiPayload() == 2) {
            goto LABEL_53;
          }
          goto LABEL_11;
        case 3u:
          if (swift_getEnumCaseMultiPayload() == 3) {
            goto LABEL_53;
          }
          goto LABEL_11;
        case 4u:
          if (swift_getEnumCaseMultiPayload() != 4) {
            goto LABEL_11;
          }
          goto LABEL_53;
        default:
          uint64_t v36 = v81;
          sub_10020F0D8((uint64_t)v22, (uint64_t)v81, type metadata accessor for BundleClassification.ClassificationType);
          uint64_t v37 = *v36;
          if (swift_getEnumCaseMultiPayload())
          {
            swift_bridgeObjectRelease();
            goto LABEL_11;
          }
          char v48 = sub_1003E1FA0(v37, *v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1001D430C((uint64_t)v22, type metadata accessor for BundleClassification.ClassificationType);
          if (v48) {
            goto LABEL_54;
          }
          goto LABEL_12;
      }
      uint64_t v85 = *(uint64_t *)((char *)v35 + v39);
      uint64_t v86 = v40;
      uint64_t v41 = v80;
      sub_10020F140((uint64_t)v35, v80, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      uint64_t v42 = v82;
      uint64_t v43 = v82 + *(int *)(v76 + 48);
      sub_10020F0D8(v38, v82, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      uint64_t v44 = v72;
      sub_10020F0D8(v41, v43, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      char v45 = *v75;
      unsigned int v46 = (*v75)(v42, 3, v44);
      uint64_t v47 = v77;
      uint64_t v31 = v79;
      switch(v46)
      {
        case 1u:
          if (v45(v43, 3, v44) != 1) {
            goto LABEL_32;
          }
          goto LABEL_35;
        case 2u:
          if (v45(v43, 3, v44) == 2) {
            goto LABEL_35;
          }
          goto LABEL_32;
        case 3u:
          if (v45(v43, 3, v44) == 3) {
            goto LABEL_35;
          }
          goto LABEL_32;
        default:
          sub_10020F0D8(v82, v77, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          if (v45(v43, 3, v44))
          {
            (*v71)(v47, v44);
LABEL_32:
            sub_10000FBD8(v82, &qword_100525598);
            goto LABEL_33;
          }
          uint64_t v49 = v73;
          (*v68)(v73, v43, v44);
          LODWORD(v70) = static UUID.== infix(_:_:)();
          char v50 = *v71;
          (*v71)((uint64_t)v49, v44);
          v50(v77, v44);
          if ((v70 & 1) == 0)
          {
            sub_1001D430C(v82, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
LABEL_33:
            sub_1001D430C(v83, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
            sub_1001D430C(v80, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1001D430C((uint64_t)v22, type metadata accessor for BundleClassification.ClassificationType);
            goto LABEL_12;
          }
LABEL_35:
          sub_1001D430C(v82, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          sub_1001D430C(v83, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          uint64_t v52 = v85;
          uint64_t v51 = v86;
          uint64_t v53 = *(void *)(v86 + 16);
          if (v53 != *(void *)(v85 + 16))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
          if (!v53) {
            goto LABEL_51;
          }
          uint64_t v69 = v4;
          uint64_t v70 = a1;
          if (v86 == v85) {
            goto LABEL_55;
          }
          unint64_t v54 = 0;
          unint64_t v55 = (*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
          uint64_t v56 = *(void *)(v74 + 72);
          while (1)
          {
            sub_10020F0D8(v51 + v55, (uint64_t)v12, type metadata accessor for VisualIntelligenceLookupResult);
            if (v54 >= *(void *)(v52 + 16)) {
              break;
            }
            uint64_t v57 = v52 + v55;
            uint64_t v58 = (uint64_t)v12;
            uint64_t v59 = v84;
            sub_10020F0D8(v57, v84, type metadata accessor for VisualIntelligenceLookupResult);
            char v60 = sub_1003F5DBC(v58, v59);
            uint64_t v61 = v59;
            uint64_t v12 = (char *)v58;
            sub_1001D430C(v61, type metadata accessor for VisualIntelligenceLookupResult);
            sub_1001D430C(v58, type metadata accessor for VisualIntelligenceLookupResult);
            if ((v60 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a1 = v70;
              unint64_t v4 = v69;
LABEL_45:
              sub_1001D430C(v80, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
              sub_1001D430C((uint64_t)v22, type metadata accessor for BundleClassification.ClassificationType);
              uint64_t v31 = v79;
LABEL_12:
              uint64_t v34 = v91;
              sub_1001D430C(v91, type metadata accessor for BundleClassification.ClassificationType);
              a2 = (a2 + 1) & v87;
              if ((*(void *)(v89 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2)) {
                goto LABEL_13;
              }
              goto LABEL_47;
            }
            ++v54;
            v55 += v56;
            uint64_t v52 = v85;
            uint64_t v51 = v86;
            if (v53 == v54) {
              goto LABEL_51;
            }
          }
          __break(1u);
          break;
      }
LABEL_50:
      __break(1u);
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      while (1)
      {
        sub_1001D430C(v80, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
LABEL_53:
        sub_1001D430C((uint64_t)v22, type metadata accessor for BundleClassification.ClassificationType);
LABEL_54:
        sub_1001D430C(v91, type metadata accessor for BundleClassification.ClassificationType);
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_55:
        swift_bridgeObjectRelease_n();
      }
    }
  }
LABEL_47:
  uint64_t v62 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10020F140(a1, *(void *)(v62 + 48) + *(void *)(v78 + 72) * a2, type metadata accessor for BundleClassification.ClassificationType);
  uint64_t v64 = *(void *)(v62 + 16);
  BOOL v65 = __OFADD__(v64, 1);
  uint64_t v66 = v64 + 1;
  if (v65) {
    goto LABEL_50;
  }
  *(void *)(v62 + 16) = v66;
  return result;
}

void *sub_1002014C0()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_100524EF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100201674()
{
  uint64_t v1 = v0;
  sub_10000F214((uint64_t *)&unk_1005250A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100201808()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_100525208);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002019A0()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_1005255C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100201B38()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_1005250C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100201CE4(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - v7;
  sub_10000F214(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  uint64_t result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  uint64_t v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    uint64_t result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100201F94()
{
  uint64_t v1 = v0;
  sub_10000F214(&qword_1005254B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25)
      {
        int64_t v9 = v24 + 2;
        if (v24 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v6 + 8 * v9);
        if (!v25) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    unsigned __int8 v23 = *(unsigned char *)(v17 + 32);
    *(void *)uint64_t v22 = *(void *)v17;
    *(void *)(v22 + 8) = v19;
    *(void *)(v22 + 16) = v20;
    *(void *)(v22 + 24) = v21;
    *(unsigned char *)(v22 + 32) = v23;
    uint64_t result = (void *)sub_10004E998(v18, v19, v20, v21, v23);
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v13) {
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10020215C(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v8 = v4;
  uint64_t v9 = a1(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  unint64_t v12 = (char *)&v30 - v11;
  sub_10000F214(a2);
  uint64_t v13 = *v4;
  uint64_t v14 = static _SetStorage.copy(original:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v8 = v15;
    return result;
  }
  uint64_t result = (void *)(v14 + 56);
  unint64_t v17 = (unint64_t)((1 << *(unsigned char *)(v15 + 32)) + 63) >> 6;
  unint64_t v30 = v8;
  uint64_t v31 = (const void *)(v13 + 56);
  if (v15 != v13 || (unint64_t)result >= v13 + 56 + 8 * v17) {
    uint64_t result = memmove(result, v31, 8 * v17);
  }
  int64_t v19 = 0;
  *(void *)(v15 + 16) = *(void *)(v13 + 16);
  uint64_t v20 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & *(void *)(v13 + 56);
  int64_t v23 = (unint64_t)(v20 + 63) >> 6;
  while (1)
  {
    if (v22)
    {
      unint64_t v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v25 = v24 | (v19 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v27 >= v23) {
      goto LABEL_28;
    }
    unint64_t v28 = *((void *)v31 + v27);
    ++v19;
    if (!v28)
    {
      int64_t v19 = v27 + 1;
      if (v27 + 1 >= v23) {
        goto LABEL_28;
      }
      unint64_t v28 = *((void *)v31 + v19);
      if (!v28)
      {
        int64_t v19 = v27 + 2;
        if (v27 + 2 >= v23) {
          goto LABEL_28;
        }
        unint64_t v28 = *((void *)v31 + v19);
        if (!v28) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_12:
    unint64_t v26 = *(void *)(v10 + 72) * v25;
    sub_10020F0D8(*(void *)(v13 + 48) + v26, (uint64_t)v12, a3);
    uint64_t result = (void *)sub_10020F140((uint64_t)v12, *(void *)(v15 + 48) + v26, a4);
  }
  int64_t v29 = v27 + 3;
  if (v29 >= v23)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v8 = v30;
    goto LABEL_30;
  }
  unint64_t v28 = *((void *)v31 + v29);
  if (v28)
  {
    int64_t v19 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v19 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v19 >= v23) {
      goto LABEL_28;
    }
    unint64_t v28 = *((void *)v31 + v19);
    ++v29;
    if (v28) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1002023D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for VisualDomain();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000F214(&qword_100525050);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  uint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1001E227C((unint64_t *)&unk_100525040, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100202784()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214(&qword_100524EF8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100202A34()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214((uint64_t *)&unk_1005250A0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v11);
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = *(void *)(v6 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_38;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = *(void *)(v6 + 8 * v11);
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x100202E9CLL);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_36:
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100202ED8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214(&qword_100525208);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  char v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10020314C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214(&qword_1005255C8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  char v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1002033B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v55 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v54 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v53 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v52 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CVDetection();
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  __chkstk_darwin(v13);
  int64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v51 - v17;
  uint64_t v19 = *v0;
  sub_10000F214(&qword_1005250F8);
  uint64_t v20 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v21 = v20;
  if (!*(void *)(v19 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_45;
  }
  uint64_t v51 = v0;
  uint64_t v22 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v23 = *(void *)(v19 + 56);
  uint64_t v57 = v19 + 56;
  if (v22 < 64) {
    uint64_t v24 = ~(-1 << v22);
  }
  else {
    uint64_t v24 = -1;
  }
  unint64_t v25 = v24 & v23;
  int64_t v58 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v26 = v20 + 56;
  swift_retain();
  int64_t v27 = 0;
  uint64_t v56 = v19;
  while (1)
  {
    if (v25)
    {
      unint64_t v29 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v30 = v29 | (v27 << 6);
      goto LABEL_24;
    }
    int64_t v31 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      goto LABEL_46;
    }
    if (v31 >= v58) {
      break;
    }
    unint64_t v32 = *(void *)(v57 + 8 * v31);
    ++v27;
    if (!v32)
    {
      int64_t v27 = v31 + 1;
      if (v31 + 1 >= v58) {
        break;
      }
      unint64_t v32 = *(void *)(v57 + 8 * v27);
      if (!v32)
      {
        int64_t v27 = v31 + 2;
        if (v31 + 2 >= v58) {
          break;
        }
        unint64_t v32 = *(void *)(v57 + 8 * v27);
        if (!v32)
        {
          int64_t v33 = v31 + 3;
          if (v33 >= v58) {
            break;
          }
          unint64_t v32 = *(void *)(v57 + 8 * v33);
          if (!v32)
          {
            while (1)
            {
              int64_t v27 = v33 + 1;
              if (__OFADD__(v33, 1)) {
                goto LABEL_47;
              }
              if (v27 >= v58) {
                goto LABEL_43;
              }
              unint64_t v32 = *(void *)(v57 + 8 * v27);
              ++v33;
              if (v32) {
                goto LABEL_23;
              }
            }
          }
          int64_t v27 = v33;
        }
      }
    }
LABEL_23:
    unint64_t v25 = (v32 - 1) & v32;
    unint64_t v30 = __clz(__rbit64(v32)) + (v27 << 6);
LABEL_24:
    uint64_t v34 = *(void *)(v59 + 72);
    sub_10020F0D8(*(void *)(v19 + 48) + v34 * v30, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
    Hasher.init(_seed:)();
    sub_10020F0D8((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v35 = v53;
        sub_10020F140((uint64_t)v15, v53, type metadata accessor for ParseDetectorResult);
        Hasher._combine(_:)(1uLL);
        sub_1003E7010((uint64_t)v61);
        int64_t v36 = type metadata accessor for ParseDetectorResult;
        goto LABEL_28;
      case 2u:
        uint64_t v35 = v54;
        sub_10020F140((uint64_t)v15, v54, type metadata accessor for TextDetectorResult);
        Hasher._combine(_:)(2uLL);
        sub_10032169C((uint64_t)v61);
        int64_t v36 = type metadata accessor for TextDetectorResult;
        goto LABEL_28;
      case 3u:
        sub_10020F140((uint64_t)v15, (uint64_t)v6, type metadata accessor for StreamingBarcodeDetectorResult);
        Swift::UInt v39 = 3;
        goto LABEL_31;
      case 4u:
        sub_10020F140((uint64_t)v15, (uint64_t)v6, type metadata accessor for StreamingBarcodeDetectorResult);
        Swift::UInt v39 = 4;
LABEL_31:
        Hasher._combine(_:)(v39);
        sub_100165074();
        uint64_t v37 = type metadata accessor for StreamingBarcodeDetectorResult;
        uint64_t v38 = (uint64_t)v6;
        goto LABEL_34;
      case 5u:
        uint64_t v40 = v6;
        uint64_t v41 = v55;
        sub_10020F140((uint64_t)v15, v55, type metadata accessor for StreamingTextDetectorResult);
        Hasher._combine(_:)(5uLL);
        sub_1001665AC();
        uint64_t v37 = type metadata accessor for StreamingTextDetectorResult;
        uint64_t v38 = v41;
        uint64_t v6 = v40;
        goto LABEL_33;
      default:
        uint64_t v35 = v52;
        sub_10020F140((uint64_t)v15, v52, type metadata accessor for ObjectDetectorResult);
        Hasher._combine(_:)(0);
        sub_10031E668();
        int64_t v36 = type metadata accessor for ObjectDetectorResult;
LABEL_28:
        uint64_t v37 = v36;
        uint64_t v38 = v35;
LABEL_33:
        uint64_t v19 = v56;
LABEL_34:
        sub_1001D430C(v38, v37);
        Swift::Int v42 = Hasher._finalize()();
        uint64_t v43 = -1 << *(unsigned char *)(v21 + 32);
        unint64_t v44 = v42 & ~v43;
        unint64_t v45 = v44 >> 6;
        if (((-1 << v44) & ~*(void *)(v26 + 8 * (v44 >> 6))) != 0)
        {
          unint64_t v28 = __clz(__rbit64((-1 << v44) & ~*(void *)(v26 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_7;
        }
        char v46 = 0;
        unint64_t v47 = (unint64_t)(63 - v43) >> 6;
        break;
    }
    do
    {
      if (++v45 == v47 && (v46 & 1) != 0)
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        JUMPOUT(0x100203AC0);
      }
      BOOL v48 = v45 == v47;
      if (v45 == v47) {
        unint64_t v45 = 0;
      }
      v46 |= v48;
      uint64_t v49 = *(void *)(v26 + 8 * v45);
    }
    while (v49 == -1);
    unint64_t v28 = __clz(__rbit64(~v49)) + (v45 << 6);
LABEL_7:
    *(void *)(v26 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    sub_10020F140((uint64_t)v18, *(void *)(v21 + 48) + v28 * v34, (uint64_t (*)(void))type metadata accessor for CVDetection);
    ++*(void *)(v21 + 16);
  }
LABEL_43:
  uint64_t result = swift_release_n();
  uint64_t v1 = v51;
LABEL_45:
  *uint64_t v1 = v21;
  return result;
}

uint64_t sub_100203AD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DetectionRequest(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000F214(&qword_100524E30);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v24 = v0;
  uint64_t v25 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v26 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v15 << 6);
      goto LABEL_7;
    }
    int64_t v21 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v26) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v15;
    if (!v22)
    {
      int64_t v15 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v15);
      if (!v22)
      {
        int64_t v15 = v21 + 2;
        if (v21 + 2 >= v26) {
          goto LABEL_26;
        }
        unint64_t v22 = *(void *)(v25 + 8 * v15);
        if (!v22) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v15 << 6);
LABEL_7:
    uint64_t v18 = *(void *)(v3 + 72);
    sub_10020F0D8(*(void *)(v6 + 48) + v18 * v17, (uint64_t)v5, type metadata accessor for DetectionRequest);
    Hasher.init(_seed:)();
    sub_1003FFF94((uint64_t)v27);
    sub_1001C2DBC((uint64_t)v27);
    sub_10020B90C(*(double *)&v5[*(int *)(v2 + 24)], *(double *)&v5[*(int *)(v2 + 24) + 8], *(double *)&v5[*(int *)(v2 + 24) + 16], *(double *)&v5[*(int *)(v2 + 24) + 24]);
    if ((*(void *)&v5[*(int *)(v2 + 28)] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v19 = *(void *)&v5[*(int *)(v2 + 28)];
    }
    else {
      Swift::UInt64 v19 = 0;
    }
    Hasher._combine(_:)(v19);
    Hasher._finalize()();
    unint64_t v20 = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v13 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = sub_10020F140((uint64_t)v5, *(void *)(v8 + 48) + v20 * v18, type metadata accessor for DetectionRequest);
    ++*(void *)(v8 + 16);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v26)
  {
LABEL_26:
    uint64_t result = swift_release_n();
    uint64_t v1 = v24;
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v15 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v15);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100203E10()
{
  uint64_t v1 = *v0;
  sub_10000F214(&qword_1005250C0);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v24 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v25) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v25) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v9);
        if (!v14) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v12);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      unint64_t v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(void *)(*(void *)(v3 + 48) + 8 * v10) = v16;
    ++*(void *)(v3 + 16);
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
    int64_t v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v25) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100204124()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000F214(&qword_100524EE0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1002044D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000F214(&qword_1005254B0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_64;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v39 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v40 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  swift_retain();
  int64_t v9 = 0;
  for (i = v2; ; uint64_t v2 = i)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_65;
    }
    if (v14 >= v40) {
      break;
    }
    unint64_t v15 = *(void *)(v39 + 8 * v14);
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v40) {
        break;
      }
      unint64_t v15 = *(void *)(v39 + 8 * v9);
      if (!v15)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v40) {
          break;
        }
        unint64_t v15 = *(void *)(v39 + 8 * v9);
        if (!v15)
        {
          int64_t v16 = v14 + 3;
          if (v16 >= v40) {
            break;
          }
          unint64_t v15 = *(void *)(v39 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              int64_t v9 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_66;
              }
              if (v9 >= v40) {
                goto LABEL_62;
              }
              unint64_t v15 = *(void *)(v39 + 8 * v9);
              ++v16;
              if (v15) {
                goto LABEL_23;
              }
            }
          }
          int64_t v9 = v16;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v13;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(unsigned __int8 *)(v17 + 32);
    Hasher.init(_seed:)();
    switch(v22)
    {
      case 1:
        Swift::UInt v23 = 3;
        goto LABEL_28;
      case 2:
        Swift::UInt v23 = 4;
LABEL_28:
        Hasher._combine(_:)(v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        String.hash(into:)();
        break;
      case 3:
        if (v20 | v19 | v18 | v21)
        {
          uint64_t v24 = v20 | v19 | v21;
          if (v18 == 1 && v24 == 0)
          {
            Swift::UInt v29 = 1;
          }
          else if (v18 == 2 && v24 == 0)
          {
            Swift::UInt v29 = 5;
          }
          else if (v18 == 3 && v24 == 0)
          {
            Swift::UInt v29 = 6;
          }
          else if (v18 == 4 && v24 == 0)
          {
            Swift::UInt v29 = 7;
          }
          else
          {
            Swift::UInt v29 = 8;
          }
        }
        else
        {
          Swift::UInt v29 = 0;
        }
        Hasher._combine(_:)(v29);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        break;
    }
    Swift::Int v30 = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v32 = v30 & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v8 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v32) & ~*(void *)(v8 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v34 = 0;
    unint64_t v35 = (unint64_t)(63 - v31) >> 6;
    do
    {
      if (++v33 == v35 && (v34 & 1) != 0)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        JUMPOUT(0x1002048C8);
      }
      BOOL v36 = v33 == v35;
      if (v33 == v35) {
        unint64_t v33 = 0;
      }
      v34 |= v36;
      uint64_t v37 = *(void *)(v8 + 8 * v33);
    }
    while (v37 == -1);
    unint64_t v10 = __clz(__rbit64(~v37)) + (v33 << 6);
LABEL_7:
    *(void *)(v8 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v4 + 48) + 40 * v10;
    *(void *)uint64_t v11 = v18;
    *(void *)(v11 + 8) = v19;
    *(void *)(v11 + 16) = v20;
    *(void *)(v11 + 24) = v21;
    *(unsigned char *)(v11 + 32) = v22;
    ++*(void *)(v4 + 16);
  }
LABEL_62:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_64:
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1002048D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000F214(&qword_1005250F0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_24:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = v6 + 56;
  uint64_t v10 = -1;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  unint64_t v11 = v10 & *(void *)(v6 + 56);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_6;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v12) {
      goto LABEL_22;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_22;
      }
      unint64_t v18 = *(void *)(v9 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_22;
        }
        unint64_t v18 = *(void *)(v9 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_6:
    sub_10020F0D8(*(void *)(v6 + 48) + *(void *)(v3 + 72) * v16, (uint64_t)v5, type metadata accessor for CVTrackSnapshot);
    uint64_t result = sub_1001FE830((uint64_t)v5, v7);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_22:
    uint64_t result = swift_release_n();
    goto LABEL_24;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_22;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100204B14()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BundleClassification.ClassificationType(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000F214((uint64_t *)&unk_1005255B0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  Swift::Int v30 = v0;
  uint64_t v31 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v32 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v32) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v31 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v32) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v31 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v32) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v31 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(v3 + 72);
    sub_10020F0D8(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5, type metadata accessor for BundleClassification.ClassificationType);
    Hasher.init(_seed:)();
    sub_10038C3B4((uint64_t)v33);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    uint64_t result = sub_10020F140((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22, type metadata accessor for BundleClassification.ClassificationType);
    ++*(void *)(v8 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v32) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v31 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t *sub_100204E78(uint64_t isStackAllocationSafe, double a2)
{
  uint64_t v4 = (unint64_t *)isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = sub_100204FE4((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, (uint64_t)v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    uint64_t v4 = sub_100204FE4((unint64_t *)v9, v6, (uint64_t)v4, a2);
    swift_slowDealloc();
  }
  return v4;
}

unint64_t *sub_100204FE4(unint64_t *result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      return (unint64_t *)sub_1002057E0(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return (unint64_t *)sub_1002057E0(result, a2, v5, a3);
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return (unint64_t *)sub_1002057E0(result, a2, v5, a3);
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    if (*(double *)(*(void *)(a3 + 48) + 8 * v13) > a4)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1002057E0(result, a2, v5, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    return (unint64_t *)sub_1002057E0(result, a2, v5, a3);
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)sub_1002057E0(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100205134(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10000F214((uint64_t *)&unk_1005251F0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v31) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v31) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v31) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v31) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v31) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int v20 = *(_DWORD *)(*(void *)(v4 + 56) + 4 * v13);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = (void *)(*(void *)(v8 + 48) + 16 * v24);
    *uint64_t v29 = v19;
    v29[1] = v18;
    *(_DWORD *)(*(void *)(v8 + 56) + 4 * v24) = v20;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1002053E4(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v46 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  char v50 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v45 = (char *)&v40 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_10000F214(&qword_100525088);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v43 = a4;
  uint64_t v44 = v46 + 16;
  uint64_t v49 = v46 + 32;
  uint64_t v15 = result + 64;
  uint64_t v16 = v51;
  while (1)
  {
    if (v13)
    {
      uint64_t v47 = (v13 - 1) & v13;
      uint64_t v48 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v42) {
        return v12;
      }
      unint64_t v19 = v41[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v42) {
          return v12;
        }
        unint64_t v19 = v41[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v42) {
            return v12;
          }
          unint64_t v19 = v41[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v42) {
              return v12;
            }
            unint64_t v19 = v41[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v42) {
                  return v12;
                }
                unint64_t v19 = v41[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v47 = (v19 - 1) & v19;
      uint64_t v48 = v20;
      unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    unint64_t v22 = v45;
    uint64_t v23 = v46;
    uint64_t v24 = *(void *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v45, a4[6] + v24 * v17, v16);
    char v25 = (uint64_t *)(a4[7] + 24 * v17);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v29(v50, v22, v16);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v33 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v36 = v32 == v35;
        if (v32 == v35) {
          unint64_t v32 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v32);
      }
      while (v37 == -1);
      unint64_t v33 = __clz(__rbit64(~v37)) + (v32 << 6);
    }
    *(void *)(v15 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v29)(*(void *)(v12 + 48) + v33 * v24, v50, v51);
    uint64_t v38 = (void *)(*(void *)(v12 + 56) + 24 * v33);
    void *v38 = v27;
    v38[1] = v26;
    v38[2] = v28;
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v43;
    unint64_t v13 = v47;
    uint64_t v14 = v48;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1002057E0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10000F214((uint64_t *)&unk_100524EC0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  uint64_t v39 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v40 = v10;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v37) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v37) {
          return v8;
        }
        unint64_t v15 = a1[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v37) {
            return v8;
          }
          unint64_t v15 = a1[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v37) {
              return v8;
            }
            unint64_t v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v37) {
                  return v8;
                }
                unint64_t v15 = a1[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      uint64_t v40 = v16;
      unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v13);
    uint64_t v19 = *(void *)(v4 + 56) + 48 * v13;
    uint64_t v21 = *(void *)v19;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v19 + 24);
    unint64_t v24 = *(void *)(v19 + 32);
    int v25 = *(_DWORD *)(v19 + 40);
    char v26 = *(unsigned char *)(v19 + 44);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v27 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v11 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v11 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    *(void *)(*(void *)(v8 + 48) + 8 * v30) = v18;
    uint64_t v35 = *(void *)(v8 + 56) + 48 * v30;
    *(void *)uint64_t v35 = v21;
    *(void *)(v35 + 8) = v20;
    *(void *)(v35 + 16) = v22;
    *(void *)(v35 + 24) = v23;
    *(void *)(v35 + 32) = v24;
    *(_DWORD *)(v35 + 40) = v25;
    *(unsigned char *)(v35 + 44) = v26;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = sub_1000A7588(v23, v24);
    uint64_t v4 = v39;
    uint64_t v10 = v40;
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100205ACC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002019A0();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_100206328(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100205BD8()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_100206120();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_12;
  }
  swift_retain();
  char v7 = static UUID.== infix(_:_:)();
  swift_release();
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_12;
      }
      swift_retain();
      char v9 = static UUID.== infix(_:_:)();
      swift_release();
    }
    while ((v9 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v0;
  uint64_t v13 = *v0;
  *uint64_t v0 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100201B38();
    uint64_t v11 = v13;
  }
  uint64_t v3 = *(void *)(*(void *)(v11 + 48) + 8 * v6);
  sub_1002064B0(v6);
  *uint64_t v0 = v13;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100205E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    char v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_1001E227C(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100201CE4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_100524EE0);
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_1002066D0(v12);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_100206120()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  Swift::Int v3 = sub_1003BEF8C(v2, v1);
  Swift::Int v12 = v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    swift_retain();
    char v7 = static UUID.== infix(_:_:)();
    swift_release();
    if (v7)
    {
LABEL_6:
      swift_release();
      uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
      sub_1002064B0(v6);
      if (static UUID.== infix(_:_:)())
      {
        *uint64_t v0 = v12;
        return v10;
      }
      __break(1u);
    }
    else
    {
      uint64_t v8 = ~v5;
      while (1)
      {
        unint64_t v6 = (v6 + 1) & v8;
        if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        swift_retain();
        char v9 = static UUID.== infix(_:_:)();
        swift_release();
        if (v9) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_100206328(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1002064B0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_retain();
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_release();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          uint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1002066D0(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      uint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      BOOL v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

void sub_1002069EC(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for DetectionRequest(0);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v24 = v4;
    int64_t v25 = v1;
    uint64_t v11 = ~v9;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    uint64_t v26 = v8;
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      uint64_t v14 = *(void *)(v24 + 72);
      while (1)
      {
        int64_t v15 = v14 * v10;
        sub_10020F0D8(*(void *)(v7 + 48) + v14 * v10, (uint64_t)v6, type metadata accessor for DetectionRequest);
        Hasher.init(_seed:)();
        sub_1003FFF94((uint64_t)v27);
        sub_1001C2DBC((uint64_t)v27);
        sub_10020B90C(*(double *)&v6[*(int *)(v3 + 24)], *(double *)&v6[*(int *)(v3 + 24) + 8], *(double *)&v6[*(int *)(v3 + 24) + 16], *(double *)&v6[*(int *)(v3 + 24) + 24]);
        Swift::UInt64 v16 = (*(void *)&v6[*(int *)(v3 + 28)] & 0x7FFFFFFFFFFFFFFFLL) != 0 ? *(void *)&v6[*(int *)(v3 + 28)] : 0;
        Hasher._combine(_:)(v16);
        Swift::Int v17 = Hasher._finalize()();
        sub_1001D430C((uint64_t)v6, type metadata accessor for DetectionRequest);
        unint64_t v18 = v17 & v11;
        if ((uint64_t)a1 >= (uint64_t)v13) {
          break;
        }
        if (v18 < v13) {
          goto LABEL_14;
        }
LABEL_15:
        unint64_t v19 = v14 * a1;
        if ((uint64_t)(v14 * a1) < v15 || *(void *)(v7 + 48) + v14 * a1 >= *(void *)(v7 + 48) + v15 + v14)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v19 == v15) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        if (((*(void *)(v26 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_19;
        }
      }
      if (v18 < v13) {
        goto LABEL_6;
      }
LABEL_14:
      if ((uint64_t)a1 < (uint64_t)v18) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_19:
    *(void *)(v26 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    uint64_t v1 = v25;
  }
  else
  {
    *(void *)(v8 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v20 = *v1;
  uint64_t v21 = *(void *)(*v1 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v20 + 16) = v23;
    ++*(_DWORD *)(v20 + 36);
  }
}

uint64_t sub_100206CD4(uint64_t a1)
{
  if ((*(void *)v1 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    if (!result) {
      return result;
    }
LABEL_5:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for CVTrackedDetection(0);
      sub_1001E227C(&qword_1005250B8, (void (*)(uint64_t))type metadata accessor for CVTrackedDetection);
      uint64_t result = Set.Iterator.init(_cocoa:)();
      a1 = v20;
      uint64_t v18 = v21;
      uint64_t v4 = v22;
      uint64_t v5 = v23;
      unint64_t v6 = v24;
    }
    else
    {
      uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v18 = a1 + 56;
      uint64_t v4 = ~v7;
      uint64_t v8 = -v7;
      if (v8 < 64) {
        uint64_t v9 = ~(-1 << v8);
      }
      else {
        uint64_t v9 = -1;
      }
      unint64_t v6 = v9 & *(void *)(a1 + 56);
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v5 = 0;
    }
    int64_t v10 = (unint64_t)(v4 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_14;
    }
    while (1)
    {
      if (v6)
      {
        uint64_t v11 = (v6 - 1) & v6;
        unint64_t v12 = __clz(__rbit64(v6)) | (v5 << 6);
        uint64_t v13 = v5;
      }
      else
      {
        int64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          return result;
        }
        if (v14 >= v10) {
          return sub_10014AAB4();
        }
        unint64_t v15 = *(void *)(v18 + 8 * v14);
        uint64_t v13 = v5 + 1;
        if (!v15)
        {
          uint64_t v13 = v5 + 2;
          if (v5 + 2 >= v10) {
            return sub_10014AAB4();
          }
          unint64_t v15 = *(void *)(v18 + 8 * v13);
          if (!v15)
          {
            uint64_t v13 = v5 + 3;
            if (v5 + 3 >= v10) {
              return sub_10014AAB4();
            }
            unint64_t v15 = *(void *)(v18 + 8 * v13);
            if (!v15)
            {
              uint64_t v13 = v5 + 4;
              if (v5 + 4 >= v10) {
                return sub_10014AAB4();
              }
              unint64_t v15 = *(void *)(v18 + 8 * v13);
              if (!v15)
              {
                uint64_t v13 = v5 + 5;
                if (v5 + 5 >= v10) {
                  return sub_10014AAB4();
                }
                unint64_t v15 = *(void *)(v18 + 8 * v13);
                if (!v15)
                {
                  uint64_t v16 = v5 + 6;
                  while (v10 != v16)
                  {
                    unint64_t v15 = *(void *)(v18 + 8 * v16++);
                    if (v15)
                    {
                      uint64_t v13 = v16 - 1;
                      goto LABEL_32;
                    }
                  }
                  return sub_10014AAB4();
                }
              }
            }
          }
        }
LABEL_32:
        uint64_t v11 = (v15 - 1) & v15;
        unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8 * v12);
      swift_retain();
      if (!v17) {
        return sub_10014AAB4();
      }
      while (1)
      {
        sub_100205BD8();
        swift_release();
        uint64_t result = swift_release();
        uint64_t v5 = v13;
        unint64_t v6 = v11;
        if ((a1 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_14:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for CVTrackedDetection(0);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          swift_unknownObjectRelease();
          uint64_t v13 = v5;
          uint64_t v11 = v6;
          if (v19) {
            continue;
          }
        }
        return sub_10014AAB4();
      }
    }
  }
  uint64_t result = *(void *)(*(void *)v1 + 16);
  if (result) {
    goto LABEL_5;
  }
  return result;
}

void sub_100206FD0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v23 - v11;
  if (!*(void *)(*(void *)v1 + 16)) {
    return;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v23 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v26 = v4 + 16;
  uint64_t v27 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  int64_t v24 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v25 = v4 + 48;
  uint64_t v28 = a1;
  swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v16) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v12, *(void *)(v28 + 48) + *(void *)(v4 + 72) * i, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1) {
      goto LABEL_26;
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    sub_100205E24((uint64_t)v6, (uint64_t)v9);
    sub_10000FBD8((uint64_t)v9, (uint64_t *)&unk_100524ED0);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v16) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v24) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v23 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v23 + 8 * v17);
        if (!v21)
        {
          int64_t v17 = v20 + 3;
          if (v20 + 3 >= v24) {
            goto LABEL_25;
          }
          unint64_t v21 = *(void *)(v23 + 8 * v17);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v16 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v24)
  {
LABEL_25:
    (*v27)(v12, 1, 1, v3);
LABEL_26:
    swift_release();
    return;
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v24) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
}

void sub_100207358(uint64_t a1)
{
  int64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_100524E28);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v7 = *((void *)v52 - 1);
  __chkstk_darwin(v52);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v41 - v11;
  __chkstk_darwin(v13);
  uint64_t v48 = (uint64_t)&v41 - v14;
  if (!*(void *)(*v2 + 16)) {
    return;
  }
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v41 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v42 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v43 = (void (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56);
  swift_bridgeObjectRetain();
  int64_t v19 = 0;
  uint64_t v44 = v6;
  unint64_t v45 = v2;
  uint64_t v46 = v7;
  uint64_t v47 = a1;
  while (1)
  {
    if (v18)
    {
      uint64_t v49 = (v18 - 1) & v18;
      int64_t v50 = v19;
      unint64_t v21 = __clz(__rbit64(v18)) | (v19 << 6);
      goto LABEL_26;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v22 >= v42) {
      goto LABEL_39;
    }
    unint64_t v23 = *(void *)(v41 + 8 * v22);
    int64_t v24 = v19 + 1;
    if (!v23)
    {
      int64_t v24 = v19 + 2;
      if (v19 + 2 >= v42) {
        goto LABEL_39;
      }
      unint64_t v23 = *(void *)(v41 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v19 + 3;
        if (v19 + 3 >= v42) {
          goto LABEL_39;
        }
        unint64_t v23 = *(void *)(v41 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v19 + 4;
          if (v19 + 4 >= v42) {
            goto LABEL_39;
          }
          unint64_t v23 = *(void *)(v41 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_25:
    uint64_t v49 = (v23 - 1) & v23;
    int64_t v50 = v24;
    unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_26:
    uint64_t v26 = *(void *)(v7 + 72);
    uint64_t v27 = *(void *)(a1 + 48) + v26 * v21;
    uint64_t v28 = v48;
    sub_10020F0D8(v27, v48, type metadata accessor for DetectionRequest);
    sub_10020F140(v28, (uint64_t)v12, type metadata accessor for DetectionRequest);
    uint64_t v29 = *v2;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    sub_1003FFF94((uint64_t)v53);
    uint64_t v30 = v52;
    uint64_t v31 = (uint64_t)&v12[v52[5]];
    sub_1001C2DBC((uint64_t)v53);
    uint64_t v32 = (CGRect *)&v12[v30[6]];
    sub_10020B90C(v32->origin.x, v32->origin.y, v32->size.width, v32->size.height);
    uint64_t v51 = v30[7];
    if ((*(void *)&v12[v51] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v33 = *(void *)&v12[v51];
    }
    else {
      Swift::UInt64 v33 = 0;
    }
    Hasher._combine(_:)(v33);
    Swift::Int v34 = Hasher._finalize()();
    uint64_t v35 = -1 << *(unsigned char *)(v29 + 32);
    unint64_t v36 = v34 & ~v35;
    if ((*(void *)(v29 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36))
    {
      uint64_t v37 = ~v35;
      while (1)
      {
        sub_10020F0D8(*(void *)(v29 + 48) + v36 * v26, (uint64_t)v9, type metadata accessor for DetectionRequest);
        if ((sub_100402834((uint64_t)v9, (uint64_t)v12) & 1) != 0
          && (sub_10020BB18((uint64_t)&v9[v52[5]], v31) & 1) != 0
          && CGRectEqualToRect(*(CGRect *)&v9[v52[6]], *v32)
          && *(double *)&v9[v52[7]] == *(double *)&v12[v51])
        {
          break;
        }
        sub_1001D430C((uint64_t)v9, type metadata accessor for DetectionRequest);
        unint64_t v36 = (v36 + 1) & v37;
        if (((*(void *)(v29 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
          goto LABEL_6;
        }
      }
      sub_1001D430C((uint64_t)v9, type metadata accessor for DetectionRequest);
      swift_bridgeObjectRelease();
      int64_t v2 = v45;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v39 = *v2;
      v53[0] = *v2;
      *int64_t v2 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10020215C(type metadata accessor for DetectionRequest, &qword_100524E30, type metadata accessor for DetectionRequest, type metadata accessor for DetectionRequest);
        uint64_t v39 = v53[0];
      }
      uint64_t v40 = *(void *)(v39 + 48) + v36 * v26;
      uint64_t v20 = (uint64_t)v44;
      sub_10020F140(v40, (uint64_t)v44, type metadata accessor for DetectionRequest);
      sub_1002069EC(v36);
      *int64_t v2 = v53[0];
      swift_bridgeObjectRelease();
      (*v43)(v20, 0, 1, v52);
    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease();
      uint64_t v20 = (uint64_t)v44;
      (*v43)((uint64_t)v44, 1, 1, v52);
      int64_t v2 = v45;
    }
    unint64_t v18 = v49;
    sub_10000FBD8(v20, &qword_100524E28);
    sub_1001D430C((uint64_t)v12, type metadata accessor for DetectionRequest);
    uint64_t v7 = v46;
    a1 = v47;
    int64_t v19 = v50;
  }
  uint64_t v25 = v19 + 5;
  if (v19 + 5 >= v42)
  {
LABEL_39:
    swift_release();
    return;
  }
  unint64_t v23 = *(void *)(v41 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v19 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v42) {
      goto LABEL_39;
    }
    unint64_t v23 = *(void *)(v41 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_42:
  __break(1u);
}

unint64_t *sub_100207934(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CVTrackedDetection(0);
    sub_1001E227C(&qword_1005250B8, (void (*)(uint64_t))type metadata accessor for CVTrackedDetection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v40;
    uint64_t v4 = v41;
    uint64_t v6 = v42;
    int64_t v5 = v43;
    unint64_t v7 = v44;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v4 = a1 + 56;
    uint64_t v6 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v35 = v3;
  uint64_t v36 = v4;
  uint64_t v37 = v6;
  int64_t v38 = v5;
  unint64_t v39 = v7;
  uint64_t v11 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        uint64_t v12 = (v7 - 1) & v7;
        unint64_t v13 = __clz(__rbit64(v7)) | (v5 << 6);
LABEL_14:
        uint64_t v14 = *(void *)(*(void *)(v3 + 48) + 8 * v13);
        swift_retain();
        goto LABEL_15;
      }
      int64_t v22 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        __break(1u);
      }
      int64_t v23 = (unint64_t)(v6 + 64) >> 6;
      if (v22 >= v23)
      {
        uint64_t v14 = 0;
        uint64_t v12 = 0;
        goto LABEL_15;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v22);
      if (v24)
      {
LABEL_28:
        uint64_t v12 = (v24 - 1) & v24;
        unint64_t v13 = __clz(__rbit64(v24)) + (v22 << 6);
        int64_t v5 = v22;
        goto LABEL_14;
      }
      int64_t v25 = v5 + 2;
      if (v5 + 2 >= v23) {
        goto LABEL_44;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v25);
      if (v24)
      {
LABEL_32:
        int64_t v22 = v25;
        goto LABEL_28;
      }
      if (v5 + 3 < v23)
      {
        unint64_t v24 = *(void *)(v36 + 8 * (v5 + 3));
        if (v24)
        {
          int64_t v22 = v5 + 3;
          goto LABEL_28;
        }
        int64_t v25 = v5 + 4;
        if (v5 + 4 >= v23)
        {
          uint64_t v14 = 0;
          uint64_t v12 = 0;
          v5 += 3;
LABEL_15:
          int64_t v38 = v5;
          unint64_t v39 = v12;
          if (!v14) {
            goto LABEL_53;
          }
          goto LABEL_19;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (v24) {
          goto LABEL_32;
        }
        int64_t v22 = v5 + 5;
        if (v5 + 5 < v23)
        {
          unint64_t v24 = *(void *)(v36 + 8 * v22);
          if (v24) {
            goto LABEL_28;
          }
          int64_t v22 = v23 - 1;
          int64_t v26 = v5 + 6;
          while (v23 != v26)
          {
            unint64_t v24 = *(void *)(v36 + 8 * v26++);
            if (v24)
            {
              int64_t v22 = v26 - 1;
              goto LABEL_28;
            }
          }
LABEL_44:
          uint64_t v14 = 0;
          uint64_t v12 = 0;
          int64_t v5 = v22;
          goto LABEL_15;
        }
      }
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      int64_t v5 = v25;
      goto LABEL_15;
    }
    uint64_t v15 = __CocoaSet.Iterator.next()();
    if (!v15
      || (v34[1] = v15,
          type metadata accessor for CVTrackedDetection(0),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          swift_unknownObjectRelease(),
          !v34[3]))
    {
LABEL_53:
      sub_10014AAB4();
      return (unint64_t *)v2;
    }
LABEL_19:
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v18 = v16 & ~v17;
    if (((*(void *)(v11 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      goto LABEL_10;
    }
    swift_retain();
    char v19 = static UUID.== infix(_:_:)();
    swift_release();
    if (v19) {
      break;
    }
    uint64_t v20 = ~v17;
    while (1)
    {
      unint64_t v18 = (v18 + 1) & v20;
      if (((*(void *)(v11 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
        break;
      }
      swift_retain();
      char v21 = static UUID.== infix(_:_:)();
      swift_release();
      if (v21) {
        goto LABEL_47;
      }
    }
LABEL_10:
    swift_release();
    uint64_t v3 = v35;
    uint64_t v6 = v37;
    int64_t v5 = v38;
    unint64_t v7 = v39;
  }
LABEL_47:
  uint64_t isStackAllocationSafe = swift_release();
  char v28 = *(unsigned char *)(v2 + 32);
  unint64_t v29 = (unint64_t)((1 << v28) + 63) >> 6;
  size_t v30 = 8 * v29;
  if ((v28 & 0x3Fu) < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)v34 - ((v30 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v30);
    uint64_t v31 = sub_100208D68((void *)((char *)v34 - ((v30 + 15) & 0x3FFFFFFFFFFFFFF0)), v29, v2, v18, &v35);
    swift_release();
    sub_10014AAB4();
  }
  else
  {
    uint64_t v32 = (void *)swift_slowAlloc();
    memcpy(v32, (const void *)(v2 + 56), v30);
    uint64_t v31 = sub_100208D68((unint64_t *)v32, v29, v2, v18, &v35);
    swift_release();
    sub_10014AAB4();
    swift_slowDealloc();
  }
  return v31;
}

void *sub_100207F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v61 = (char *)&v51 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v62 = a1;
  uint64_t v63 = a1 + 56;
  uint64_t v56 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v57 = v6;
  uint64_t v64 = v14;
  uint64_t v65 = 0;
  unint64_t v66 = v18;
  uint64_t v55 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v59 = v8 + 16;
  uint64_t v60 = (char *)(a2 + 56);
  char v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v58 = v8;
  uint64_t v54 = a2;
  uint64_t v52 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  int64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v57;
  v25(v57, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v56)(v26, v27, 1, v7);
    uint64_t v62 = a1;
    uint64_t v63 = v15;
    uint64_t v64 = v14;
    uint64_t v65 = v23;
    unint64_t v66 = v21;
    if ((*v55)(v26, 1, v7) == 1)
    {
      sub_10014AAB4();
      sub_10000FBD8(v26, (uint64_t *)&unk_100524ED0);
      return (void *)v54;
    }
    (*v53)(v61, v26, v7);
    uint64_t v31 = v54;
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    uint64_t v40 = *v19;
    uint64_t v8 = v58;
LABEL_35:
    v40(v61, v7);
    int64_t v20 = v65;
    unint64_t v18 = v66;
    a1 = v62;
    uint64_t v15 = v63;
    uint64_t v14 = v64;
    uint64_t v52 = v65;
    if (v66) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v52 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v57;
  }
  uint64_t v52 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v58 + 72);
  int64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
  while (1)
  {
    v38(v10, *(void *)(v35 + 48) + v37 * v34, v7);
    sub_1001E227C(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *v19;
    (*v19)(v10, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v58;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v61, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v60, v44);
    sub_100209160((unint64_t *)((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v62);
    uint64_t v46 = v45;
    swift_release();
    sub_10014AAB4();
    return (void *)v46;
  }
  else
  {
    uint64_t v48 = (void *)swift_slowAlloc();
    memcpy(v48, v60, v44);
    sub_100209160((unint64_t *)v48, v43, v35, v34, &v62);
    uint64_t v50 = v49;
    swift_release();
    sub_10014AAB4();
    swift_slowDealloc();
    return (void *)v50;
  }
}

void *sub_1002085C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100524E28);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for DetectionRequest(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v44 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = -1 << *(unsigned char *)(a1 + 32);
  if (-v15 < 64) {
    uint64_t v16 = ~(-1 << -(char)v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  uint64_t v54 = a1 + 56;
  uint64_t v53 = ~v15;
  uint64_t v62 = ~v15;
  int64_t v63 = 0;
  uint64_t v64 = v16 & v14;
  uint64_t v52 = (void (**)(char *, uint64_t, uint64_t, int *))(v11 + 56);
  uint64_t v55 = v11;
  uint64_t v51 = (unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
  uint64_t v18 = a2 + 56;
  unint64_t v19 = (unint64_t)(63 - v15) >> 6;
  unint64_t v45 = v19 - 1;
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  int64_t v48 = v19;
  unint64_t v47 = v19 - 6;
  uint64_t v46 = a1 + 104;
  uint64_t v50 = a1;
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v17)
    {
      uint64_t v57 = (v17 - 1) & v17;
      unint64_t v21 = __clz(__rbit64(v17)) | (v20 << 6);
      int64_t v22 = v20;
LABEL_9:
      sub_10020F0D8(*(void *)(a1 + 48) + *(void *)(v55 + 72) * v21, (uint64_t)v6, type metadata accessor for DetectionRequest);
      uint64_t v23 = 0;
      goto LABEL_10;
    }
    int64_t v22 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    if (v22 >= v48)
    {
      uint64_t v57 = 0;
      uint64_t v23 = 1;
      int64_t v22 = v20;
      goto LABEL_10;
    }
    unint64_t v32 = *(void *)(v54 + 8 * v22);
    if (v32) {
      goto LABEL_25;
    }
    int64_t v33 = v20 + 2;
    if (v20 + 2 >= v48)
    {
      uint64_t v57 = 0;
      uint64_t v23 = 1;
      goto LABEL_10;
    }
    unint64_t v32 = *(void *)(v54 + 8 * v33);
    if (v32) {
      goto LABEL_29;
    }
    if (v20 + 3 >= v48)
    {
LABEL_42:
      uint64_t v57 = 0;
      uint64_t v23 = 1;
      int64_t v22 = v33;
      goto LABEL_10;
    }
    unint64_t v32 = *(void *)(v54 + 8 * (v20 + 3));
    if (v32)
    {
      int64_t v22 = v20 + 3;
      goto LABEL_25;
    }
    int64_t v33 = v20 + 4;
    if (v20 + 4 >= v48)
    {
      uint64_t v57 = 0;
      uint64_t v23 = 1;
      int64_t v22 = v20 + 3;
    }
    else
    {
      unint64_t v32 = *(void *)(v54 + 8 * v33);
      if (v32)
      {
LABEL_29:
        int64_t v22 = v33;
LABEL_25:
        uint64_t v57 = (v32 - 1) & v32;
        unint64_t v21 = __clz(__rbit64(v32)) + (v22 << 6);
        goto LABEL_9;
      }
      int64_t v22 = v20 + 5;
      if (v20 + 5 >= v48) {
        goto LABEL_42;
      }
      unint64_t v32 = *(void *)(v54 + 8 * v22);
      if (v32) {
        goto LABEL_25;
      }
      uint64_t v34 = v20;
      while (v47 != v34)
      {
        unint64_t v32 = *(void *)(v46 + 8 * v34++);
        if (v32)
        {
          int64_t v22 = v34 + 5;
          goto LABEL_25;
        }
      }
      uint64_t v57 = 0;
      uint64_t v23 = 1;
      int64_t v22 = v45;
    }
LABEL_10:
    (*v52)(v6, v23, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v54;
    uint64_t v62 = v53;
    int64_t v63 = v22;
    uint64_t v64 = v57;
    if ((*v51)(v6, 1, v7) == 1)
    {
      sub_10014AAB4();
      sub_10000FBD8((uint64_t)v6, &qword_100524E28);
      return (void *)a2;
    }
    int64_t v56 = v22;
    sub_10020F140((uint64_t)v6, (uint64_t)v13, type metadata accessor for DetectionRequest);
    Hasher.init(_seed:)();
    sub_1003FFF94((uint64_t)v59);
    uint64_t v24 = (uint64_t)&v13[v7[5]];
    sub_1001C2DBC((uint64_t)v59);
    int64_t v25 = (CGRect *)&v13[v7[6]];
    sub_10020B90C(v25->origin.x, v25->origin.y, v25->size.width, v25->size.height);
    uint64_t v58 = v7[7];
    Swift::UInt64 v26 = (*(void *)&v13[v58] & 0x7FFFFFFFFFFFFFFFLL) != 0 ? *(void *)&v13[v58] : 0;
    Hasher._combine(_:)(v26);
    Swift::Int v27 = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if ((*(void *)(v18 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29)) {
      break;
    }
LABEL_6:
    sub_1001D430C((uint64_t)v13, type metadata accessor for DetectionRequest);
    int64_t v20 = v56;
    unint64_t v17 = v57;
    a1 = v50;
  }
  uint64_t v30 = ~v28;
  uint64_t v31 = *(void *)(v55 + 72);
  while (1)
  {
    sub_10020F0D8(*(void *)(a2 + 48) + v31 * v29, (uint64_t)v9, type metadata accessor for DetectionRequest);
    if ((sub_100402834((uint64_t)v9, (uint64_t)v13) & 1) != 0
      && (sub_10020BB18((uint64_t)&v9[v7[5]], v24) & 1) != 0
      && CGRectEqualToRect(*(CGRect *)&v9[v7[6]], *v25)
      && *(double *)&v9[v7[7]] == *(double *)&v13[v58])
    {
      break;
    }
    sub_1001D430C((uint64_t)v9, type metadata accessor for DetectionRequest);
    unint64_t v29 = (v29 + 1) & v30;
    if (((*(void *)(v18 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
      goto LABEL_6;
    }
  }
  sub_1001D430C((uint64_t)v9, type metadata accessor for DetectionRequest);
  uint64_t isStackAllocationSafe = sub_1001D430C((uint64_t)v13, type metadata accessor for DetectionRequest);
  char v36 = *(unsigned char *)(a2 + 32);
  unint64_t v37 = (unint64_t)((1 << v36) + 63) >> 6;
  size_t v38 = 8 * v37;
  if ((v36 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v44 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(a2 + 56), v38);
    sub_1002096BC((unint64_t *)((char *)&v44 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0)), v37, a2, v29, &v60);
    uint64_t v40 = v39;
    swift_release();
    sub_10014AAB4();
  }
  else
  {
    uint64_t v41 = (void *)swift_slowAlloc();
    memcpy(v41, (const void *)(a2 + 56), v38);
    sub_1002096BC((unint64_t *)v41, v37, a2, v29, &v60);
    uint64_t v40 = v42;
    swift_release();
    sub_10014AAB4();
    swift_slowDealloc();
  }
  return (void *)v40;
}

unint64_t *sub_100208D68(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  int64_t v33 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v35 = a3 + 56;
  while (2)
  {
    uint64_t v32 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            uint64_t v13 = *(void *)(*(void *)(*v5 + 48) + 8 * v12);
            swift_retain();
            goto LABEL_8;
          }
          int64_t v24 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            goto LABEL_47;
          }
          int64_t v25 = (unint64_t)(v5[2] + 64) >> 6;
          if (v24 >= v25)
          {
            uint64_t v13 = 0;
            uint64_t v11 = 0;
            goto LABEL_8;
          }
          uint64_t v26 = v5[1];
          unint64_t v27 = *(void *)(v26 + 8 * v24);
          if (v27)
          {
LABEL_22:
            uint64_t v11 = (v27 - 1) & v27;
            unint64_t v12 = __clz(__rbit64(v27)) + (v24 << 6);
            int64_t v10 = v24;
            goto LABEL_7;
          }
          if (v10 + 2 < v25)
          {
            unint64_t v27 = *(void *)(v26 + 8 * (v10 + 2));
            if (v27)
            {
              int64_t v24 = v10 + 2;
              goto LABEL_22;
            }
            if (v10 + 3 >= v25)
            {
              uint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 2;
              goto LABEL_8;
            }
            unint64_t v27 = *(void *)(v26 + 8 * (v10 + 3));
            if (v27)
            {
              int64_t v24 = v10 + 3;
              goto LABEL_22;
            }
            int64_t v24 = v10 + 4;
            if (v10 + 4 >= v25)
            {
              uint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 3;
LABEL_8:
              v5[3] = v10;
              v5[4] = v11;
              if (!v13) {
                goto LABEL_45;
              }
              goto LABEL_12;
            }
            unint64_t v27 = *(void *)(v26 + 8 * v24);
            if (v27) {
              goto LABEL_22;
            }
            int64_t v24 = v25 - 1;
            int64_t v30 = v10 + 5;
            while (v25 != v30)
            {
              unint64_t v27 = *(void *)(v26 + 8 * v30++);
              if (v27)
              {
                int64_t v24 = v30 - 1;
                goto LABEL_22;
              }
            }
          }
          uint64_t v13 = 0;
          uint64_t v11 = 0;
          int64_t v10 = v24;
          goto LABEL_8;
        }
        if (!__CocoaSet.Iterator.next()()
          || (type metadata accessor for CVTrackedDetection(0),
              swift_unknownObjectRetain(),
              swift_dynamicCast(),
              swift_unknownObjectRelease(),
              !v36))
        {
LABEL_45:
          swift_retain();
          return (unint64_t *)sub_100209C50(v33, a2, v32, a3);
        }
LABEL_12:
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v14 = Hasher._finalize()();
        uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v16 = v14 & ~v15;
        uint64_t v17 = v16 >> 6;
        uint64_t v18 = 1 << v16;
        if (((1 << v16) & *(void *)(v35 + 8 * (v16 >> 6))) == 0) {
          goto LABEL_3;
        }
        swift_retain();
        char v19 = static UUID.== infix(_:_:)();
        swift_release();
        if (v19) {
          break;
        }
        uint64_t v20 = ~v15;
        for (unint64_t i = v16 + 1; ; unint64_t i = v22 + 1)
        {
          unint64_t v22 = i & v20;
          if (((*(void *)(v35 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0) {
            break;
          }
          swift_retain();
          char v23 = static UUID.== infix(_:_:)();
          swift_release();
          if (v23)
          {
            uint64_t result = (unint64_t *)swift_release();
            uint64_t v17 = v22 >> 6;
            uint64_t v18 = 1 << v22;
            goto LABEL_25;
          }
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_release();
        uint64_t v5 = a5;
      }
      uint64_t result = (unint64_t *)swift_release();
LABEL_25:
      uint64_t v28 = v17;
      uint64_t v5 = a5;
      unint64_t v29 = v33[v28];
      v33[v28] = v29 & ~v18;
    }
    while ((v18 & v29) == 0);
    uint64_t v8 = v32 - 1;
    if (__OFSUB__(v32, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v32 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

void sub_100209160(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v49 = a2;
  uint64_t v9 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  __chkstk_darwin(v12);
  Swift::Int v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = __chkstk_darwin(v15);
  int64_t v63 = (char *)&v48 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v51 = a1;
  uint64_t v52 = v21;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v61 = v21 + 16;
  uint64_t v62 = a3;
  int64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v57 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v54 = a5;
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v60 = a3 + 56;
  int64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v53 = v11;
  while (2)
  {
    uint64_t v50 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v28 = a5[2];
        int64_t v29 = a5[3];
        unint64_t v30 = a5[4];
        uint64_t v59 = v28;
        if (v30)
        {
          uint64_t v58 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v29 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t, __n128))(v22 + 16))(v11, *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31, v12, v16);
          uint64_t v32 = 0;
          goto LABEL_8;
        }
        int64_t v41 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        int64_t v42 = (unint64_t)(v28 + 64) >> 6;
        if (v41 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * v41);
        if (v43) {
          goto LABEL_17;
        }
        if (v29 + 2 >= v42) {
          goto LABEL_34;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 2));
        if (v43)
        {
          int64_t v41 = v29 + 2;
LABEL_17:
          uint64_t v58 = (v43 - 1) & v43;
          unint64_t v31 = __clz(__rbit64(v43)) + (v41 << 6);
          int64_t v29 = v41;
          goto LABEL_7;
        }
        if (v29 + 3 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          v29 += 2;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 3));
        if (v43)
        {
          int64_t v41 = v29 + 3;
          goto LABEL_17;
        }
        int64_t v41 = v29 + 4;
        if (v29 + 4 < v42)
        {
          unint64_t v43 = *(void *)(v27 + 8 * v41);
          if (v43) {
            goto LABEL_17;
          }
          int64_t v41 = v42 - 1;
          int64_t v46 = v29 + 5;
          while (v42 != v46)
          {
            unint64_t v43 = *(void *)(v27 + 8 * v46++);
            if (v43)
            {
              int64_t v41 = v46 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          int64_t v29 = v41;
          goto LABEL_8;
        }
        uint64_t v58 = 0;
        uint64_t v32 = 1;
        v29 += 3;
LABEL_8:
        (*v57)(v11, v32, 1, v12);
        *a5 = v26;
        a5[1] = v27;
        a5[2] = v59;
        a5[3] = v29;
        a5[4] = v58;
        if ((*v56)(v11, 1, v12) == 1)
        {
          sub_10000FBD8((uint64_t)v11, (uint64_t *)&unk_100524ED0);
          uint64_t v47 = v62;
          swift_retain();
          sub_100209F20(v51, v49, v50, v47);
          return;
        }
        (*v55)(v63, v11, v12);
        uint64_t v33 = v62;
        sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v34 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v35 = -1 << *(unsigned char *)(v33 + 32);
        unint64_t v36 = v34 & ~v35;
        if ((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36)) {
          break;
        }
        int64_t v25 = *v24;
LABEL_4:
        v25(v63, v12);
      }
      uint64_t v59 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v37 = ~v35;
      uint64_t v38 = *(void *)(v22 + 72);
      uint64_t v39 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
      while (1)
      {
        v39(v14, *(void *)(v62 + 48) + v38 * v36, v12);
        sub_1001E227C(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        int64_t v25 = *v24;
        (*v24)(v14, v12);
        if (v40) {
          break;
        }
        unint64_t v36 = (v36 + 1) & v37;
        if (((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
        {
          uint64_t v11 = v53;
          a5 = v54;
          uint64_t v22 = v52;
          goto LABEL_4;
        }
      }
      v25(v63, v12);
      uint64_t v44 = (v36 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v22 = v52;
      uint64_t v45 = *(unint64_t *)((char *)v51 + v44);
      *(unint64_t *)((char *)v51 + v44) = v45 & ~(1 << v36);
      uint64_t v11 = v53;
      a5 = v54;
    }
    while ((v45 & (1 << v36)) == 0);
    uint64_t v23 = v50 - 1;
    if (__OFSUB__(v50, 1))
    {
LABEL_41:
      __break(1u);
      return;
    }
    if (v50 != 1) {
      continue;
    }
    break;
  }
}

void sub_1002096BC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = sub_10000F214(&qword_100524E28);
  __chkstk_darwin(v9 - 8);
  uint64_t v56 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)type metadata accessor for DetectionRequest(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  __n128 v16 = (char *)&v51 - v15;
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v19 = *(unint64_t *)((char *)a1 + v18) & ((-1 << a4) - 1);
  uint64_t v54 = a1;
  uint64_t v55 = a5;
  *(unint64_t *)((char *)a1 + v18) = v19;
  uint64_t v20 = v17 - 1;
  uint64_t v58 = (void (**)(uint64_t, uint64_t, uint64_t, int *))(v21 + 56);
  uint64_t v59 = v21;
  uint64_t v57 = (unsigned int (**)(uint64_t, uint64_t, int *))(v21 + 48);
  uint64_t v63 = a3;
  uint64_t v22 = a3 + 56;
  uint64_t v23 = a5;
  while (2)
  {
    uint64_t v53 = v20;
    do
    {
      while (1)
      {
        uint64_t v25 = *v23;
        uint64_t v24 = v23[1];
        uint64_t v26 = v23[2];
        int64_t v27 = v23[3];
        unint64_t v28 = v23[4];
        uint64_t v60 = v26;
        uint64_t v61 = v24;
        if (v28)
        {
          uint64_t v29 = (v28 - 1) & v28;
          unint64_t v30 = __clz(__rbit64(v28)) | (v27 << 6);
LABEL_6:
          uint64_t v31 = v56;
          sub_10020F0D8(*(void *)(v25 + 48) + *(void *)(v59 + 72) * v30, v56, type metadata accessor for DetectionRequest);
          uint64_t v32 = 0;
          goto LABEL_7;
        }
        int64_t v45 = v27 + 1;
        if (__OFADD__(v27, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        int64_t v46 = (unint64_t)(v26 + 64) >> 6;
        if (v45 >= v46)
        {
          uint64_t v29 = 0;
          uint64_t v32 = 1;
          uint64_t v31 = v56;
          goto LABEL_7;
        }
        unint64_t v47 = *(void *)(v24 + 8 * v45);
        if (v47) {
          goto LABEL_23;
        }
        int64_t v48 = v27 + 2;
        if (v27 + 2 >= v46) {
          goto LABEL_39;
        }
        unint64_t v47 = *(void *)(v24 + 8 * v48);
        if (v47) {
          goto LABEL_27;
        }
        if (v27 + 3 >= v46) {
          goto LABEL_40;
        }
        unint64_t v47 = *(void *)(v24 + 8 * (v27 + 3));
        if (v47)
        {
          int64_t v45 = v27 + 3;
          goto LABEL_23;
        }
        int64_t v48 = v27 + 4;
        if (v27 + 4 < v46)
        {
          unint64_t v47 = *(void *)(v24 + 8 * v48);
          if (v47)
          {
LABEL_27:
            int64_t v45 = v48;
LABEL_23:
            uint64_t v29 = (v47 - 1) & v47;
            unint64_t v30 = __clz(__rbit64(v47)) + (v45 << 6);
            int64_t v27 = v45;
            goto LABEL_6;
          }
          int64_t v45 = v27 + 5;
          if (v27 + 5 < v46)
          {
            unint64_t v47 = *(void *)(v24 + 8 * v45);
            if (v47) {
              goto LABEL_23;
            }
            int64_t v45 = v46 - 1;
            int64_t v49 = v27 + 6;
            while (v46 != v49)
            {
              unint64_t v47 = *(void *)(v24 + 8 * v49++);
              if (v47)
              {
                int64_t v45 = v49 - 1;
                goto LABEL_23;
              }
            }
LABEL_39:
            uint64_t v29 = 0;
            uint64_t v32 = 1;
            int64_t v27 = v45;
            uint64_t v31 = v56;
            goto LABEL_7;
          }
LABEL_40:
          uint64_t v29 = 0;
          uint64_t v32 = 1;
          int64_t v27 = v48;
          uint64_t v31 = v56;
          goto LABEL_7;
        }
        uint64_t v29 = 0;
        uint64_t v32 = 1;
        v27 += 3;
        uint64_t v31 = v56;
LABEL_7:
        (*v58)(v31, v32, 1, v11);
        uint64_t v33 = v61;
        *uint64_t v23 = v25;
        v23[1] = v33;
        v23[2] = v60;
        v23[3] = v27;
        v23[4] = v29;
        if ((*v57)(v31, 1, v11) == 1)
        {
          sub_10000FBD8(v31, &qword_100524E28);
          uint64_t v50 = v63;
          swift_retain();
          sub_10020A2AC(v54, v52, v53, v50);
          return;
        }
        sub_10020F140(v31, (uint64_t)v16, type metadata accessor for DetectionRequest);
        uint64_t v34 = v63;
        Hasher.init(_seed:)();
        sub_1003FFF94((uint64_t)v62);
        uint64_t v35 = (uint64_t)&v16[v11[5]];
        sub_1001C2DBC((uint64_t)v62);
        unint64_t v36 = (CGRect *)&v16[v11[6]];
        sub_10020B90C(v36->origin.x, v36->origin.y, v36->size.width, v36->size.height);
        uint64_t v61 = v11[7];
        Swift::UInt64 v37 = (*(void *)&v16[v61] & 0x7FFFFFFFFFFFFFFFLL) != 0 ? *(void *)&v16[v61] : 0;
        Hasher._combine(_:)(v37);
        Swift::Int v38 = Hasher._finalize()();
        uint64_t v39 = -1 << *(unsigned char *)(v34 + 32);
        unint64_t v40 = v38 & ~v39;
        if ((*(void *)(v22 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40)) {
          break;
        }
LABEL_3:
        sub_1001D430C((uint64_t)v16, type metadata accessor for DetectionRequest);
        uint64_t v23 = v55;
      }
      uint64_t v41 = ~v39;
      uint64_t v42 = *(void *)(v59 + 72);
      while (1)
      {
        sub_10020F0D8(*(void *)(v63 + 48) + v42 * v40, (uint64_t)v13, type metadata accessor for DetectionRequest);
        if ((sub_100402834((uint64_t)v13, (uint64_t)v16) & 1) != 0
          && (sub_10020BB18((uint64_t)&v13[v11[5]], v35) & 1) != 0
          && CGRectEqualToRect(*(CGRect *)&v13[v11[6]], *v36)
          && *(double *)&v13[v11[7]] == *(double *)&v16[v61])
        {
          break;
        }
        sub_1001D430C((uint64_t)v13, type metadata accessor for DetectionRequest);
        unint64_t v40 = (v40 + 1) & v41;
        if (((*(void *)(v22 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40) & 1) == 0) {
          goto LABEL_3;
        }
      }
      sub_1001D430C((uint64_t)v13, type metadata accessor for DetectionRequest);
      sub_1001D430C((uint64_t)v16, type metadata accessor for DetectionRequest);
      uint64_t v43 = (v40 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v23 = v55;
      uint64_t v44 = *(unint64_t *)((char *)v54 + v43);
      *(unint64_t *)((char *)v54 + v43) = v44 & ~(1 << v40);
    }
    while ((v44 & (1 << v40)) == 0);
    uint64_t v20 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_47:
      __break(1u);
      return;
    }
    if (v53 != 1) {
      continue;
    }
    break;
  }
}

uint64_t sub_100209C50(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000F214(&qword_1005250C0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (unsigned char *)result;
  unint64_t v28 = a1;
  uint64_t v29 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= v29) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= v29) {
        goto LABEL_36;
      }
      unint64_t v16 = v28[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_36;
        }
        unint64_t v16 = v28[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*((void *)v9 + 6) + 8 * v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v29) {
    goto LABEL_36;
  }
  unint64_t v16 = v28[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100209F20(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10000F214(&qword_100524EE0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

char *sub_10020A2AC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for DetectionRequest(0);
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return (char *)a4;
  }
  sub_10000F214(&qword_100524E30);
  uint64_t result = (char *)static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v24 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v25;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_33;
      }
      if (v17 >= v24)
      {
LABEL_30:
        swift_release();
        return v10;
      }
      unint64_t v18 = v25[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v24) {
          goto LABEL_30;
        }
        unint64_t v18 = v25[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v24) {
            goto LABEL_30;
          }
          unint64_t v18 = v25[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v24) {
              goto LABEL_30;
            }
            unint64_t v18 = v25[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_34;
                }
                if (v13 >= v24) {
                  goto LABEL_30;
                }
                unint64_t v18 = v25[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = *(void *)(v26 + 72);
    sub_10020F0D8(*(void *)(a4 + 48) + v20 * v16, (uint64_t)v9, type metadata accessor for DetectionRequest);
    Hasher.init(_seed:)();
    sub_1003FFF94((uint64_t)v27);
    sub_1001C2DBC((uint64_t)v27);
    sub_10020B90C(*(double *)&v9[*(int *)(v7 + 24)], *(double *)&v9[*(int *)(v7 + 24) + 8], *(double *)&v9[*(int *)(v7 + 24) + 16], *(double *)&v9[*(int *)(v7 + 24) + 24]);
    Swift::UInt64 v21 = (*(void *)&v9[*(int *)(v7 + 28)] & 0x7FFFFFFFFFFFFFFFLL) != 0 ? *(void *)&v9[*(int *)(v7 + 28)] : 0;
    Hasher._combine(_:)(v21);
    Hasher._finalize()();
    unint64_t v22 = _HashTable.nextHole(atOrAfter:)();
    *(void *)&v14[(v22 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v22;
    uint64_t result = (char *)sub_10020F140((uint64_t)v9, *((void *)v10 + 6) + v22 * v20, type metadata accessor for DetectionRequest);
    ++*((void *)v10 + 2);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    if (!a3) {
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void sub_10020A5BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_1005254A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    *a1 = a4;
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 0;
    return;
  }
  if (!a3)
  {
    unint64_t v33 = 0;
    uint64_t v19 = 0;
    unint64_t v18 = 0;
LABEL_26:
    *a1 = a4;
    a1[1] = v18;
LABEL_27:
    a1[2] = v19;
    a1[3] = v33;
    return;
  }
  if (a3 < 0) {
    goto LABEL_32;
  }
  uint64_t v36 = v17;
  uint64_t v37 = a3;
  uint64_t v41 = v13;
  uint64_t v34 = a1;
  uint64_t v35 = v15;
  unint64_t v18 = 0;
  uint64_t v43 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  Swift::UInt64 v21 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v38 = v15 + 48;
LABEL_7:
  unint64_t v23 = *(void *)(a4 + 16);
  if (v18 == v23)
  {
    unint64_t v42 = v20;
LABEL_23:
    uint64_t v27 = (uint64_t)v41;
    (*v21)(v41, 1, 1, v14);
LABEL_24:
    a1 = v34;
    sub_10000FBD8(v27, (uint64_t *)&unk_1005254A0);
    *a1 = a4;
    a1[1] = v18;
    unint64_t v33 = v42;
    goto LABEL_27;
  }
  if (v18 >= v23)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  while (1)
  {
    uint64_t v19 = *(void *)(a4 + 32 + 8 * v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_12;
    }
    unint64_t v22 = *(void *)(v19 + 16);
    if (v22) {
      break;
    }
    (*v21)(v10, 1, 1, v14);
    sub_10000FBD8((uint64_t)v10, (uint64_t *)&unk_1005254A0);
LABEL_12:
    unint64_t v24 = *(void *)(a4 + 16);
    BOOL v25 = v18 + 1 >= v24;
    if (v18 + 1 == v24)
    {
      unint64_t v42 = 0;
      ++v18;
      goto LABEL_23;
    }
    ++v18;
    if (v25) {
      goto LABEL_30;
    }
  }
  unint64_t v20 = 0;
  ++v18;
  while (v20 < v22)
  {
    uint64_t v26 = v19 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v39 = *(void *)(v15 + 72);
    uint64_t v40 = a2;
    sub_10020F0D8(v26 + v39 * v20, (uint64_t)v10, type metadata accessor for CVTrackSnapshot);
    unint64_t v42 = v20 + 1;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
    uint64_t v27 = (uint64_t)v41;
    sub_10000FC34((uint64_t)v10, (uint64_t)v41, (uint64_t *)&unk_1005254A0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v27, 1, v14) == 1) {
      goto LABEL_24;
    }
    uint64_t v28 = v43 + 1;
    uint64_t v29 = v27;
    uint64_t v30 = (uint64_t)v36;
    sub_10020F140(v29, (uint64_t)v36, type metadata accessor for CVTrackSnapshot);
    uint64_t v31 = v30;
    uint64_t v32 = v40;
    sub_10020F140(v31, v40, type metadata accessor for CVTrackSnapshot);
    uint64_t v43 = v28;
    if (v28 == v37)
    {
      a1 = v34;
      unint64_t v33 = v42;
      goto LABEL_26;
    }
    a2 = v32 + v39;
    uint64_t v15 = v35;
    unint64_t v20 = v42;
    unint64_t v22 = *(void *)(v19 + 16);
    if (v42 == v22)
    {
      (*v21)(v10, 1, 1, v14);
      sub_10000FBD8((uint64_t)v10, (uint64_t *)&unk_1005254A0);
      goto LABEL_7;
    }
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
}

void sub_10020A9A0(void *a1, void *a2, unint64_t a3)
{
  uint64_t v7 = (os_unfair_lock_s *)(v3[4] + 16);
  swift_retain();
  os_unfair_lock_lock(v7);
  os_unfair_lock_unlock(v7);
  swift_release();
  if (!a2)
  {
    unint64_t v9 = 0;
    goto LABEL_22;
  }
  if (!a3)
  {
LABEL_21:
    unint64_t v9 = a3;
    goto LABEL_22;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    swift_beginAccess();
    uint64_t v8 = (os_unfair_lock_s *)(v3[4] + 16);
    os_unfair_lock_lock(v8);
    unint64_t v9 = *(void *)(v3[2] + 16);
    os_unfair_lock_unlock(v8);
    if (v9)
    {
      unint64_t v9 = 0;
      while (1)
      {
        os_unfair_lock_lock(v8);
        uint64_t v10 = v3[2];
        unint64_t v11 = *(void *)(v10 + 16);
        uint64_t v12 = v3[5];
        if (v11 == v12)
        {
          uint64_t v13 = v3[3];
          BOOL v14 = __OFADD__(v13, 1);
          uint64_t v15 = v13 + 1;
          if (v14) {
            goto LABEL_27;
          }
          if (!v11) {
            goto LABEL_28;
          }
          uint64_t v16 = v15 % (uint64_t)v11;
        }
        else
        {
          uint64_t v16 = 0;
        }
        BOOL v14 = __OFADD__(v16, v9);
        uint64_t v17 = v16 + v9;
        if (v14) {
          break;
        }
        if (!v12) {
          goto LABEL_24;
        }
        if (v12 == -1 && v17 == 0x8000000000000000) {
          goto LABEL_29;
        }
        unint64_t v18 = v17 % v12;
        if (v18 >= v11) {
          goto LABEL_25;
        }
        uint64_t v19 = (void *)(v10 + 88 * v18);
        uint64_t v20 = v19[4];
        uint64_t v21 = v19[5];
        uint64_t v22 = v19[6];
        uint64_t v23 = v19[7];
        uint64_t v24 = v19[8];
        uint64_t v25 = v19[9];
        uint64_t v26 = v19[10];
        uint64_t v27 = v19[11];
        uint64_t v31 = v19[13];
        uint64_t v32 = v19[12];
        uint64_t v30 = v19[14];
        os_unfair_lock_unlock(v8);
        swift_retain();
        os_unfair_lock_lock(v8);
        os_unfair_lock_unlock(v8);
        os_unfair_lock_lock(v8);
        unint64_t v28 = *(void *)(v3[2] + 16);
        os_unfair_lock_unlock(v8);
        swift_release();
        if (v9 >= v28) {
          goto LABEL_26;
        }
        *a2 = v20;
        a2[1] = v21;
        a2[2] = v22;
        a2[3] = v23;
        a2[4] = v24;
        a2[5] = v25;
        a2[6] = v26;
        a2[7] = v27;
        a2[8] = v32;
        a2[9] = v31;
        a2[10] = v30;
        if (a3 - 1 == v9) {
          goto LABEL_21;
        }
        uint64_t v8 = (os_unfair_lock_s *)(v3[4] + 16);
        os_unfair_lock_lock(v8);
        uint64_t v29 = *(void *)(v3[2] + 16);
        os_unfair_lock_unlock(v8);
        ++v9;
        a2 += 11;
        if (v9 == v29) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_22:
    *a1 = v3;
    a1[1] = v9;
    return;
  }
LABEL_30:
  __break(1u);
}

int64_t *sub_10020ABF8(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  if (a5 > a4)
  {
    unint64_t v5 = a4 + 1;
    *a2 = a4;
    unint64_t v6 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_7;
    }
    unint64_t v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5)) {
      unint64_t v7 = ~a4 + a5;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 > 4)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      uint64_t v9 = v8 - v11 + 1;
      unint64_t v13 = v5 + v12;
      uint64_t v10 = &a2[v12];
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_10043ED80);
      uint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *uint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      unint64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 1;
      uint64_t v10 = a2;
    }
    uint64_t v17 = v10 + 1;
    int64_t v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        unint64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5) {
        goto LABEL_30;
      }
      ++v9;
      unint64_t v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10020AD28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CVDetection();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int64x2_t v14 = (char *)&v28 - v13;
  uint64_t v33 = a4;
  uint64_t v16 = a4 + 64;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v30 = -1 << *(unsigned char *)(a4 + 32);
  if (-v30 < 64) {
    uint64_t v17 = ~(-1 << -(char)v30);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
LABEL_34:
    uint64_t v27 = ~v30;
    *a1 = v33;
    a1[1] = v16;
    a1[2] = v27;
    a1[3] = v19;
    a1[4] = v18;
    return;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_34;
  }
  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v29 = a1;
  int64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v31 = v16;
  int64_t v32 = (unint64_t)(63 - v30) >> 6;
  int64_t v28 = v32 - 1;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v22 = v21 | (v19 << 6);
  while (1)
  {
    ++v20;
    uint64_t v26 = *(void *)(v9 + 72);
    sub_10020F0D8(*(void *)(v33 + 48) + v26 * v22, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10020F140((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10020F140((uint64_t)v14, a2, (uint64_t (*)(void))type metadata accessor for CVDetection);
    if (v20 == a3) {
      goto LABEL_33;
    }
    a2 += v26;
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v23 >= v32)
    {
      unint64_t v18 = 0;
LABEL_33:
      a1 = v29;
      uint64_t v16 = v31;
      goto LABEL_34;
    }
    uint64_t v16 = v31;
    unint64_t v24 = *(void *)(v31 + 8 * v23);
    if (!v24) {
      break;
    }
LABEL_18:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v19 = v23;
  }
  v19 += 2;
  if (v23 + 1 >= v32)
  {
    unint64_t v18 = 0;
    int64_t v19 = v23;
LABEL_39:
    a1 = v29;
    goto LABEL_34;
  }
  unint64_t v24 = *(void *)(v31 + 8 * v19);
  if (v24) {
    goto LABEL_14;
  }
  int64_t v25 = v23 + 2;
  if (v23 + 2 >= v32) {
    goto LABEL_36;
  }
  unint64_t v24 = *(void *)(v31 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v19 = v23 + 3;
  if (v23 + 3 >= v32)
  {
    unint64_t v18 = 0;
    int64_t v19 = v23 + 2;
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v31 + 8 * v19);
  if (v24)
  {
LABEL_14:
    int64_t v23 = v19;
    goto LABEL_18;
  }
  int64_t v25 = v23 + 4;
  if (v23 + 4 >= v32)
  {
LABEL_36:
    unint64_t v18 = 0;
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v31 + 8 * v25);
  if (v24)
  {
LABEL_17:
    int64_t v23 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v23 >= v32)
    {
      unint64_t v18 = 0;
      int64_t v19 = v28;
      goto LABEL_39;
    }
    unint64_t v24 = *(void *)(v31 + 8 * v23);
    ++v25;
    if (v24) {
      goto LABEL_18;
    }
  }
LABEL_42:
  __break(1u);
}

void sub_10020B04C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v38 = a6;
  uint64_t v12 = a5(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)&v32 - v17;
  uint64_t v39 = a4;
  uint64_t v20 = a4 + 56;
  uint64_t v19 = *(void *)(a4 + 56);
  uint64_t v35 = -1 << *(unsigned char *)(a4 + 32);
  if (-v35 < 64) {
    uint64_t v21 = ~(-1 << -(char)v35);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v19;
  if (!a2)
  {
    int64_t v23 = 0;
LABEL_34:
    uint64_t v31 = ~v35;
    *a1 = v39;
    a1[1] = v20;
    a1[2] = v31;
    a1[3] = v23;
    a1[4] = v22;
    return;
  }
  if (!a3)
  {
    int64_t v23 = 0;
    goto LABEL_34;
  }
  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v34 = a1;
  int64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v36 = v20;
  int64_t v37 = (unint64_t)(63 - v35) >> 6;
  int64_t v33 = v37 - 1;
  if (!v22) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  unint64_t v26 = v25 | (v23 << 6);
  while (1)
  {
    ++v24;
    uint64_t v30 = *(void *)(v13 + 72);
    sub_10020F0D8(*(void *)(v39 + 48) + v30 * v26, (uint64_t)v15, v38);
    sub_10020F140((uint64_t)v15, (uint64_t)v18, a7);
    sub_10020F140((uint64_t)v18, a2, a7);
    if (v24 == a3) {
      goto LABEL_33;
    }
    a2 += v30;
    if (v22) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v27 >= v37)
    {
      unint64_t v22 = 0;
LABEL_33:
      a1 = v34;
      uint64_t v20 = v36;
      goto LABEL_34;
    }
    uint64_t v20 = v36;
    unint64_t v28 = *(void *)(v36 + 8 * v27);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v23 = v27;
  }
  v23 += 2;
  if (v27 + 1 >= v37)
  {
    unint64_t v22 = 0;
    int64_t v23 = v27;
LABEL_39:
    a1 = v34;
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v36 + 8 * v23);
  if (v28) {
    goto LABEL_14;
  }
  int64_t v29 = v27 + 2;
  if (v27 + 2 >= v37) {
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v36 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v23 = v27 + 3;
  if (v27 + 3 >= v37)
  {
    unint64_t v22 = 0;
    int64_t v23 = v27 + 2;
    goto LABEL_39;
  }
  unint64_t v28 = *(void *)(v36 + 8 * v23);
  if (v28)
  {
LABEL_14:
    int64_t v27 = v23;
    goto LABEL_18;
  }
  int64_t v29 = v27 + 4;
  if (v27 + 4 >= v37)
  {
LABEL_36:
    unint64_t v22 = 0;
    goto LABEL_39;
  }
  unint64_t v28 = *(void *)(v36 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v27 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v37)
    {
      unint64_t v22 = 0;
      int64_t v23 = v33;
      goto LABEL_39;
    }
    unint64_t v28 = *(void *)(v36 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_42:
  __break(1u);
}

uint64_t (*sub_10020B354(void (**a1)(id *), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10020B4D8(v6, a2, a3);
  return sub_10020B3BC;
}

uint64_t (*sub_10020B3C0(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10020B558(v6, a2, a3);
  return sub_10020B3BC;
}

uint64_t (*sub_10020B428(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10020B5D8(v6, a2, a3);
  return sub_10020B3BC;
}

void sub_10020B490(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_10020B4D8(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return j__s6Tamale22FrameConsumerContainerC13ExecutionModeOwxx;
  }
  __break(1u);
  return result;
}

void (*sub_10020B558(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for FrameConsumerContainer.ExecutionMode;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_10020B5D8(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    uint64_t *v3 = v4;
    return destroy for CameraPreviewViewRepresentable;
  }
  __break(1u);
  return result;
}

uint64_t sub_10020B658()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_10020B690()
{
  sub_1001E4EC0(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10020B69C()
{
  return swift_deallocObject();
}

uint64_t sub_10020B6AC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10020B6E4()
{
  return sub_1001E506C(*(void **)(v0 + 16), *(uint64_t **)(v0 + 32), *(double *)(v0 + 24), *(void *)(v0 + 40), *(void *)(v0 + 48), *(uint64_t **)(v0 + 56));
}

uint64_t sub_10020B6F8()
{
  return swift_deallocObject();
}

uint64_t sub_10020B708()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_10020B7F8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_10000FC9C;
  *(void *)(v6 + 64) = v2;
  *(void *)(v6 + 72) = v3;
  *(void *)(v6 + 56) = v5;
  *(_OWORD *)(v6 + 40) = v7;
  return _swift_task_switch(sub_1001E9508, 0, 0);
}

void sub_10020B90C(double a1, double a2, double a3, double a4)
{
  CGRect v11 = CGRectStandardize(*(CGRect *)&a1);
  CGFloat y = v11.origin.y;
  CGFloat width = v11.size.width;
  CGFloat height = v11.size.height;
  if ((*(void *)&v11.origin.x & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    CGFloat x = v11.origin.x;
  }
  else {
    CGFloat x = 0.0;
  }
  Hasher._combine(_:)(*(Swift::UInt64 *)&x);
  if ((*(void *)&y & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)&y;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((*(void *)&width & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)&width;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((*(void *)&height & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)&height;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
}

uint64_t sub_10020B990(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  Swift::UInt64 v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_10020BA34(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10020BB18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v42 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v41 = (uint64_t)&v40 - v7;
  uint64_t v8 = type metadata accessor for DetectionRequest.Originator(0);
  __chkstk_darwin(v8);
  unint64_t v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v40 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (double *)((char *)&v40 - v15);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = sub_10000F214(&qword_100524E38);
  __chkstk_darwin(v20 - 8);
  unint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t)&v22[*(int *)(v23 + 56)];
  sub_10020F0D8(a1, (uint64_t)v22, type metadata accessor for DetectionRequest.Originator);
  sub_10020F0D8(a2, v24, type metadata accessor for DetectionRequest.Originator);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10020F0D8((uint64_t)v22, (uint64_t)v16, type metadata accessor for DetectionRequest.Originator);
      uint64_t v25 = *(void *)v16;
      double v26 = v16[1];
      unsigned int v27 = *((unsigned __int8 *)v16 + 16);
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_21;
      }
      uint64_t v28 = *(void *)v24;
      double v29 = *(double *)(v24 + 8);
      unsigned int v30 = *(unsigned __int8 *)(v24 + 16);
      switch(v27 >> 5)
      {
        case 1u:
          if ((v30 & 0xE0) != 0x20) {
            goto LABEL_36;
          }
          goto LABEL_30;
        case 2u:
          if ((v30 & 0xE0) != 0x40) {
            goto LABEL_36;
          }
          char v32 = 0;
          if (((v28 ^ v25) & 1) == 0 && *((float *)&v25 + 1) == *((float *)&v28 + 1)) {
            char v32 = *(float *)&v26 == *(float *)&v29;
          }
          break;
        case 3u:
          if ((v30 & 0xE0) != 0x60) {
            goto LABEL_36;
          }
LABEL_30:
          if (*(float *)&v25 == *(float *)&v28) {
LABEL_38:
          }
            char v32 = 1;
          else {
LABEL_36:
          }
            char v32 = 0;
          break;
        case 4u:
          uint64_t v37 = *(void *)&v29 | v28;
          BOOL v38 = (v30 & 0xE0) == 0x80 && v37 == 0;
          if (v38 && v30 == 128) {
            goto LABEL_38;
          }
          goto LABEL_36;
        default:
          if (v30 >= 0x20) {
            goto LABEL_36;
          }
          BOOL v31 = *(float *)&v25 == *(float *)&v28;
          if (v26 != v29) {
            BOOL v31 = 0;
          }
          char v32 = ((v30 ^ v27) & 1) == 0 && v31;
          break;
      }
      goto LABEL_39;
    case 2u:
      sub_10020F0D8((uint64_t)v22, (uint64_t)v13, type metadata accessor for DetectionRequest.Originator);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v33 = v41;
        sub_10020F140((uint64_t)v13, v41, type metadata accessor for CVTrackSnapshot);
        uint64_t v34 = v42;
        sub_10020F140(v24, v42, type metadata accessor for CVTrackSnapshot);
        char v32 = static UUID.== infix(_:_:)();
        sub_1001D430C(v34, type metadata accessor for CVTrackSnapshot);
        sub_1001D430C(v33, type metadata accessor for CVTrackSnapshot);
        goto LABEL_39;
      }
      sub_1001D430C((uint64_t)v13, type metadata accessor for CVTrackSnapshot);
      goto LABEL_21;
    case 3u:
      sub_10020F0D8((uint64_t)v22, (uint64_t)v10, type metadata accessor for DetectionRequest.Originator);
      uint64_t v35 = *v10;
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        if (*(void *)(v35 + 16) == *(void *)(*(void *)v24 + 16))
        {
          char v36 = sub_1001C17DC(v35, *(void *)v24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v32 = v36 ^ 1;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v32 = 0;
        }
LABEL_39:
        sub_1001D430C((uint64_t)v22, type metadata accessor for DetectionRequest.Originator);
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_21:
        sub_10000FBD8((uint64_t)v22, &qword_100524E38);
        char v32 = 0;
      }
      return v32 & 1;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_18;
      }
      goto LABEL_21;
    default:
      sub_10020F0D8((uint64_t)v22, (uint64_t)v19, type metadata accessor for DetectionRequest.Originator);
      sub_100038B34(*(void *)v19, *((void *)v19 + 1));
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_21;
      }
      sub_100038B34(*(void *)v24, *(void *)(v24 + 8));
LABEL_18:
      sub_1001D430C((uint64_t)v22, type metadata accessor for DetectionRequest.Originator);
      char v32 = 1;
      return v32 & 1;
  }
}

uint64_t sub_10020C0B0(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  switch(a3 >> 5)
  {
    case 1:
      if ((a6 & 0xE0) == 0x20) {
        goto LABEL_21;
      }
      goto LABEL_22;
    case 2:
      if ((a6 & 0xE0) != 0x40) {
        goto LABEL_22;
      }
      BOOL v8 = *(float *)&a2 == *(float *)&a5;
      if (*((float *)&a1 + 1) != *((float *)&a4 + 1)) {
        BOOL v8 = 0;
      }
      uint64_t result = ((a4 ^ a1) & 1) == 0 && v8;
      break;
    case 3:
      if ((a6 & 0xE0) != 0x60) {
        goto LABEL_22;
      }
LABEL_21:
      uint64_t result = *(float *)&a1 == *(float *)&a4;
      break;
    case 4:
      if ((a6 & 0xE0) != 0x80 || a5 | a4 || a6 != 128) {
        goto LABEL_22;
      }
      uint64_t result = 1;
      break;
    default:
      if (a6 >= 0x20u)
      {
LABEL_22:
        uint64_t result = 0;
      }
      else
      {
        BOOL v6 = *(float *)&a1 == *(float *)&a4;
        if (*(double *)&a2 != *(double *)&a5) {
          BOOL v6 = 0;
        }
        uint64_t result = ((a6 ^ a3) & 1) == 0 && v6;
      }
      break;
  }
  return result;
}

uint64_t sub_10020C1CC(uint64_t a1, uint64_t a2)
{
  sub_1000321A8((long long *)a1, (uint64_t)v13);
  sub_1000321A8((long long *)a2, (uint64_t)v12);
  sub_1000321A8(v13, (uint64_t)v14);
  if (v15 == 2)
  {
    sub_1000321A8(v12, (uint64_t)&v21);
    if (v23 == 2) {
      goto LABEL_3;
    }
    return 0;
  }
  long long v16 = v14[0];
  long long v17 = v14[1];
  uint64_t v18 = v15;
  sub_1000321A8(v12, (uint64_t)v19);
  if (v20 == 2) {
    return 0;
  }
  long long v21 = v19[0];
  long long v22 = v19[1];
  uint64_t v23 = v20;
  if (v16 != v19[0] || v17 != v22) {
    return 0;
  }
  sub_10020F6E0((int *)&v17 + 1, (uint64_t)&v27);
  sub_10020F6E0((int *)&v22 + 1, (uint64_t)&v25);
  sub_10020F6E0(&v27, (uint64_t)&v28);
  int v9 = v28;
  if (v29 == 1)
  {
    if (v28)
    {
      sub_10020F6E0(&v25, (uint64_t)&v31);
      uint64_t result = 0;
      if (v32 != 1 || !v31) {
        return result;
      }
LABEL_24:
      sub_100210218(&v18, &v26);
      sub_100210218(&v23, &v24);
      sub_100210218(&v26, &v30);
      if (v30 == 1)
      {
        sub_100210218(&v24, &v33);
        if (v33 != 1) {
          return 0;
        }
      }
      else if (v30)
      {
        sub_100210218(&v24, &v33);
        if (v33 < 2) {
          return 0;
        }
        type metadata accessor for CGColor(0);
        sub_100210C2C(v13, (void (*)(void, void, void, void, void))sub_10020F1A8);
        sub_100210C2C(v12, (void (*)(void, void, void, void, void))sub_10020F1A8);
        sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
        char v11 = static _CFObject.== infix(_:_:)();
        sub_100210C2C(v12, (void (*)(void, void, void, void, void))sub_10020F474);
        sub_100210C2C(v13, (void (*)(void, void, void, void, void))sub_10020F474);
        if ((v11 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        sub_100210218(&v24, &v33);
        if (v33) {
          return 0;
        }
      }
LABEL_3:
      uint64_t v4 = *(void **)(a1 + 40);
      uint64_t v5 = *(void **)(a2 + 40);
      if (v4)
      {
        if (v5)
        {
          type metadata accessor for CVBuffer(0);
          sub_1001E227C((unint64_t *)&unk_100524E80, type metadata accessor for CVBuffer);
          id v6 = v5;
          id v7 = v4;
          char v8 = static _CFObject.== infix(_:_:)();

          if (v8) {
            return 1;
          }
        }
      }
      else if (!v5)
      {
        return 1;
      }
      return 0;
    }
    sub_10020F6E0(&v25, (uint64_t)&v31);
    uint64_t result = 0;
    if (v32 == 1 && !v31) {
      goto LABEL_24;
    }
  }
  else
  {
    sub_10020F6E0(&v25, (uint64_t)&v31);
    uint64_t result = 0;
    if ((v32 & 1) == 0 && v9 == v31) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_10020C53C(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = type metadata accessor for CVDetection();
  uint64_t v46 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v41 - v7;
  __chkstk_darwin(v9);
  uint64_t v45 = (uint64_t)&v41 - v10;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v15 = (void *)(a2 + 160);
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v47 = a1;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v48)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v48 = i;
      unint64_t v18 = v17 | (i << 6);
    }
    else
    {
      int64_t v19 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_38;
      }
      if (v19 >= v44) {
        return swift_release();
      }
      unint64_t v20 = *(void *)(v43 + 8 * v19);
      int64_t v21 = i + 1;
      if (!v20)
      {
        int64_t v21 = i + 2;
        if (i + 2 >= v44) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v43 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = i + 3;
          if (i + 3 >= v44) {
            return swift_release();
          }
          unint64_t v20 = *(void *)(v43 + 8 * v21);
          if (!v20)
          {
            int64_t v21 = i + 4;
            if (i + 4 >= v44) {
              return swift_release();
            }
            unint64_t v20 = *(void *)(v43 + 8 * v21);
            if (!v20)
            {
              uint64_t v22 = i + 5;
              if (i + 5 >= v44) {
                return swift_release();
              }
              unint64_t v20 = *(void *)(v43 + 8 * v22);
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v44) {
                    return swift_release();
                  }
                  unint64_t v20 = *(void *)(v43 + 8 * v21);
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = i + 5;
            }
          }
        }
      }
LABEL_23:
      unint64_t v14 = (v20 - 1) & v20;
      int64_t v48 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v23 = *(void *)(v46 + 72);
    uint64_t v24 = v45;
    sub_10020F0D8(*(void *)(v47 + 48) + v23 * v18, v45, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10020F140(v24, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v25 = (uint64_t)v8;
    sub_10020F0D8((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
    swift_beginAccess();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v49 = (void *)*v15;
    int v27 = v49;
    *uint64_t v15 = 0x8000000000000000;
    unint64_t v29 = sub_10032AF9C((uint64_t)v5);
    uint64_t v30 = v27[2];
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    char v33 = v28;
    if (v27[3] >= v32)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        char v36 = v49;
        if (v28) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_1001F7058();
        char v36 = v49;
        if (v33) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_1001EF714(v32, isUniquelyReferenced_nonNull_native);
      unint64_t v34 = sub_10032AF9C((uint64_t)v5);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_40;
      }
      unint64_t v29 = v34;
      char v36 = v49;
      if (v33)
      {
LABEL_4:
        *(_DWORD *)(v36[7] + 4 * v29) = 0;
        goto LABEL_5;
      }
    }
    v36[(v29 >> 6) + 8] |= 1 << v29;
    sub_10020F0D8((uint64_t)v5, v36[6] + v29 * v23, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(_DWORD *)(v36[7] + 4 * v29) = 0;
    uint64_t v37 = v36[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_37;
    }
    v36[2] = v39;
LABEL_5:
    *uint64_t v15 = v36;
    swift_bridgeObjectRelease();
    sub_1001D430C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
    swift_endAccess();
    char v8 = (char *)v25;
    sub_1001D430C(v25, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10020C984(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = type metadata accessor for CVDetection();
  uint64_t v46 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v41 - v7;
  __chkstk_darwin(v9);
  uint64_t v45 = (uint64_t)&v41 - v10;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v15 = (void *)(a2 + 152);
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v47 = a1;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v48)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v48 = i;
      unint64_t v18 = v17 | (i << 6);
    }
    else
    {
      int64_t v19 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_38;
      }
      if (v19 >= v44) {
        return swift_release();
      }
      unint64_t v20 = *(void *)(v43 + 8 * v19);
      int64_t v21 = i + 1;
      if (!v20)
      {
        int64_t v21 = i + 2;
        if (i + 2 >= v44) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v43 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = i + 3;
          if (i + 3 >= v44) {
            return swift_release();
          }
          unint64_t v20 = *(void *)(v43 + 8 * v21);
          if (!v20)
          {
            int64_t v21 = i + 4;
            if (i + 4 >= v44) {
              return swift_release();
            }
            unint64_t v20 = *(void *)(v43 + 8 * v21);
            if (!v20)
            {
              uint64_t v22 = i + 5;
              if (i + 5 >= v44) {
                return swift_release();
              }
              unint64_t v20 = *(void *)(v43 + 8 * v22);
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v44) {
                    return swift_release();
                  }
                  unint64_t v20 = *(void *)(v43 + 8 * v21);
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = i + 5;
            }
          }
        }
      }
LABEL_23:
      unint64_t v14 = (v20 - 1) & v20;
      int64_t v48 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v23 = *(void *)(v46 + 72);
    uint64_t v24 = v45;
    sub_10020F0D8(*(void *)(v47 + 48) + v23 * v18, v45, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10020F140(v24, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v25 = (uint64_t)v8;
    sub_10020F0D8((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
    swift_beginAccess();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v49 = (void *)*v15;
    int v27 = v49;
    *uint64_t v15 = 0x8000000000000000;
    unint64_t v29 = sub_10032AF9C((uint64_t)v5);
    uint64_t v30 = v27[2];
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    char v33 = v28;
    if (v27[3] >= v32)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        char v36 = v49;
        if (v28) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_1001F72DC();
        char v36 = v49;
        if (v33) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_1001EFEAC(v32, isUniquelyReferenced_nonNull_native);
      unint64_t v34 = sub_10032AF9C((uint64_t)v5);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_40;
      }
      unint64_t v29 = v34;
      char v36 = v49;
      if (v33)
      {
LABEL_4:
        *(void *)(v36[7] + 8 * v29) = 0xFFF0000000000000;
        goto LABEL_5;
      }
    }
    v36[(v29 >> 6) + 8] |= 1 << v29;
    sub_10020F0D8((uint64_t)v5, v36[6] + v29 * v23, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(void *)(v36[7] + 8 * v29) = 0xFFF0000000000000;
    uint64_t v37 = v36[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_37;
    }
    v36[2] = v39;
LABEL_5:
    *uint64_t v15 = v36;
    swift_bridgeObjectRelease();
    sub_1001D430C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
    swift_endAccess();
    char v8 = (char *)v25;
    sub_1001D430C(v25, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10020CDD4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v7 = type metadata accessor for DetectionRequest(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v26 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v27 = (unint64_t)(v15 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (v17)
  {
    unint64_t v20 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v21 = v20 | (v19 << 6);
LABEL_5:
    sub_10020F0D8(*(void *)(a1 + 48) + *(void *)(v8 + 72) * v21, (uint64_t)v13, type metadata accessor for DetectionRequest);
    sub_10020F140((uint64_t)v13, (uint64_t)v10, type metadata accessor for DetectionRequest);
    sub_1001E827C((uint64_t)v10, a2, a3);
    uint64_t result = sub_1001D430C((uint64_t)v10, type metadata accessor for DetectionRequest);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v19++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v19 >= v27) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v26 + 8 * v19);
  if (v23)
  {
LABEL_19:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_5;
  }
  int64_t v24 = v19 + 1;
  if (v19 + 1 >= v27) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v19 + 2;
  if (v19 + 2 >= v27) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v19 + 3;
  if (v19 + 3 >= v27) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v19 + 4;
  if (v19 + 4 >= v27) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
LABEL_18:
    int64_t v19 = v24;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v27) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v26 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10020D080(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000001004296E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D69676572 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6B63617274 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73756F69726176 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E696D6165727473 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10020D298(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F69746365746564 && a2 == 0xED0000657079546ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616E696769726FLL && a2 == 0xEA0000000000726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100429700 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10020D488(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74736575716572 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746C75736572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10020D57C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x45676E696461656CLL && a2 == 0xEB00000000656764;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E65646163 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100429800 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646E616D65446E6FLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646E616D65446E6FLL && a2 == 0xEF65636E65646143)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10020D7C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7954657461647075 && a2 == 0xEA00000000006570;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100429820 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xEB000000007A4879)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_10020D93C(void *a1)
{
  uint64_t v47 = sub_10000F214(&qword_100525390);
  uint64_t v41 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  int64_t v49 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000F214(&qword_100525398);
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000F214(&qword_1005253A0);
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v51 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000F214(&qword_1005253A8);
  uint64_t v45 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  char v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_1005253B0);
  uint64_t v43 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_1005253B8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (unint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v53 = a1;
  sub_10000F3B0(a1, v14);
  sub_1002121B0();
  uint64_t v15 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    goto LABEL_10;
  }
  uint64_t v39 = v7;
  uint64_t v40 = v9;
  uint64_t v16 = v50;
  unint64_t v17 = v51;
  unint64_t v18 = v52;
  uint64_t v54 = v11;
  uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v20 = v10;
  if (*(void *)(v19 + 16) != 1)
  {
    unint64_t v23 = v13;
    unint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v25 = v24;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v25 = &type metadata for CVCoordinationRegime;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, unint64_t))(*(void *)(v13 - 8) + 104))(v25, enum case for DecodingError.typeMismatch(_:), v13);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v54 + 8))(v23, v20);
LABEL_10:
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v53);
    return v13;
  }
  switch(*(unsigned char *)(v19 + 32))
  {
    case 1:
      LOBYTE(v55) = 1;
      sub_100212354();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedDecodingContainer.decode(_:forKey:)();
      unsigned int v27 = v26;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v6, v16);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v54 + 8))(v13, v10);
      unint64_t v13 = v27;
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v53);
      break;
    case 2:
      uint64_t v52 = (char *)v19;
      LOBYTE(v55) = 2;
      sub_1002122AC();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v56 = 0;
      sub_100212300();
      uint64_t v28 = v44;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      unint64_t v32 = v13;
      uint64_t v33 = v55;
      char v56 = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      unsigned int v37 = v36;
      char v56 = 2;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v38 = v54;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v28);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v38 + 8))(v32, v20);
      unint64_t v13 = v33 | ((unint64_t)v37 << 32);
      goto LABEL_10;
    case 3:
      LOBYTE(v55) = 3;
      sub_100212258();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v48);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v54 + 8))(v13, v10);
      unint64_t v13 = 0;
      goto LABEL_10;
    case 4:
      LOBYTE(v55) = 4;
      sub_100212204();
      unint64_t v29 = v49;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v30 = v47;
      KeyedDecodingContainer.decode(_:forKey:)();
      unsigned int v35 = v34;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v30);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v54 + 8))(v13, v10);
      unint64_t v13 = v35;
      goto LABEL_10;
    default:
      LOBYTE(v55) = 0;
      sub_1002123A8();
      unint64_t v21 = v40;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1000A74E0();
      uint64_t v22 = v39;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v21, v22);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v54 + 8))(v13, v10);
      unint64_t v13 = v55;
      goto LABEL_10;
  }
  return v13;
}

uint64_t sub_10020E2E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5379726F74636166 && a2 == 0xEF73676E69747465;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100429840 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6C4170696B73 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10020E45C(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_100525440);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  unint64_t v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_100525448);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100525450);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100525458);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F3B0(a1, a1[3]);
  sub_100212450();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  unint64_t v13 = v29;
  uint64_t v30 = a1;
  uint64_t v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v18;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v11 = &type metadata for CVCoordinatorConfiguration.Preset;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
    return v11;
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_1002124F8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_1002124A4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_10021254C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v30);
  return v11;
}

uint64_t sub_10020E9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for VisionProcessor(0);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10020EA98;
  return sub_10031D9A4(a1, a2, a3, a4);
}

uint64_t sub_10020EA98(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

char *sub_10020EB98(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a2;
  uint64_t v38 = a1;
  uint64_t v6 = type metadata accessor for DetectionRequest(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a3 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(a3 + 56);
  uint64_t v14 = (uint64_t *)(a4 + OBJC_IVAR____TtC6Tamale13CVCoordinator_inputStorage);
  uint64_t result = (char *)swift_beginAccess();
  int64_t v16 = 0;
  int64_t v17 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v44 = v7;
  uint64_t v45 = a3;
  uint64_t v42 = a3 + 56;
  uint64_t v43 = v9;
  uint64_t v41 = v14;
  uint64_t v39 = 0;
  int64_t v40 = v17;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      int64_t v46 = v16;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_22;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v20 >= v17) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v20);
    int64_t v22 = v16 + 1;
    if (!v21)
    {
      int64_t v22 = v16 + 2;
      if (v16 + 2 >= v17) {
        goto LABEL_29;
      }
      unint64_t v21 = *(void *)(v10 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v16 + 3;
        if (v16 + 3 >= v17) {
          goto LABEL_29;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v22);
        if (!v21) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v13 = (v21 - 1) & v21;
    int64_t v46 = v22;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_22:
    sub_10020F0D8(*(void *)(a3 + 48) + *(void *)(v7 + 72) * v19, (uint64_t)v9, type metadata accessor for DetectionRequest);
    uint64_t v24 = *v14;
    if (!*(void *)(*v14 + 16)) {
      goto LABEL_5;
    }
    swift_bridgeObjectRetain();
    unint64_t v25 = sub_10032AF9C((uint64_t)v9);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t v27 = (uint64_t *)(*(void *)(v24 + 56) + 48 * v25);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v30 = v27[2];
    uint64_t v31 = v27[3];
    char v33 = (void *)v27[4];
    char v32 = (void *)v27[5];
    id v34 = v32;
    sub_10020F1A8(v29, v28, v30, v31, v33);
    swift_bridgeObjectRelease();
    sub_10020F1A8(v29, v28, v30, v31, v33);
    sub_10020F724(v29, v28, v30, v31, v33, v32);
    if (v33 == (void *)2)
    {
      uint64_t v9 = v43;
      uint64_t result = (char *)sub_1001D430C((uint64_t)v43, type metadata accessor for DetectionRequest);
      *(unint64_t *)((char *)v38 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      int64_t v17 = v40;
      BOOL v35 = __OFADD__(v39++, 1);
      uint64_t v7 = v44;
      a3 = v45;
      uint64_t v14 = v41;
      uint64_t v10 = v42;
      int64_t v16 = v46;
      if (v35)
      {
        __break(1u);
LABEL_29:
        swift_retain();
        return sub_10020A2AC(v38, v37, v39, a3);
      }
    }
    else
    {
      sub_10020F474(v29, v28, v30, v31, v33);
      uint64_t v7 = v44;
      a3 = v45;
      uint64_t v10 = v42;
      uint64_t v9 = v43;
      int64_t v17 = v40;
      uint64_t v14 = v41;
LABEL_5:
      uint64_t result = (char *)sub_1001D430C((uint64_t)v9, type metadata accessor for DetectionRequest);
      int64_t v16 = v46;
    }
  }
  uint64_t v23 = v16 + 4;
  if (v16 + 4 >= v17) {
    goto LABEL_29;
  }
  unint64_t v21 = *(void *)(v10 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v16 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v22 >= v17) {
      goto LABEL_29;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

char *sub_10020EF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    uint64_t v11 = sub_10020EB98((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    swift_release();
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    uint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    uint64_t v11 = sub_10020EB98((unint64_t *)v12, v8, a1, a2);
    swift_release();
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v11;
}

uint64_t sub_10020F0D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10020F140(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_10020F1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 != (void *)2) {
    sub_10020F1BC(a5);
  }
}

id sub_10020F1BC(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

uint64_t sub_10020F1CC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(v0 + v4 + 32);
  if ((unint64_t)v5 >= 3) {

  }
  return swift_deallocObject();
}

uint64_t sub_10020F2FC()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v0[6];
  size_t v9 = (char *)v0 + v5;
  uint64_t v10 = *(void *)((char *)v0 + v6);
  uint64_t v11 = (_OWORD *)((char *)v0 + v7);
  uint64_t v12 = (char *)v0 + ((v7 + 55) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = swift_task_alloc();
  *(void *)(v1 + 16) = v13;
  *(void *)uint64_t v13 = v1;
  *(void *)(v13 + 8) = sub_10000FC9C;
  *(void *)(v13 + 96) = v2;
  *(void *)(v13 + 104) = v3;
  *(void *)(v13 + 80) = v10;
  *(void *)(v13 + 88) = v12;
  *(void *)(v13 + 64) = v8;
  *(void *)(v13 + 72) = v9;
  long long v14 = v11[1];
  *(_OWORD *)(v13 + 112) = *v11;
  *(_OWORD *)(v13 + 128) = v14;
  *(_OWORD *)(v13 + 144) = v11[2];
  return _swift_task_switch(sub_1001E8D54, 0, 0);
}

void sub_10020F474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 != (void *)2) {
    sub_10020F488(a5);
  }
}

void sub_10020F488(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

void sub_10020F498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a1 & 0x100000000) != 0)
  {
    if (a1)
    {
      sub_10000F214(&qword_10051CAD8);
      if ((a3 & 0x100000000) == 0 && (a3 - 1) >= 8)
      {
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
      }
    }
  }
  else if (a1 == 1)
  {
    sub_10030CA60(a4, a5);
  }
}

void sub_10020F520(CVPixelBufferRef pixelBuffer@<X3>, unint64_t a2@<X0>, unint64_t a3@<X1>, double a4@<X2>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (a4 == 0.0)
  {
    char v7 = 1;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
LABEL_16:
    *(double *)a5 = a4;
    *(double *)(a5 + 8) = v8;
    *(double *)(a5 + 16) = v9;
    *(double *)(a5 + 24) = v10;
    *(unsigned char *)(a5 + 32) = v7;
    return;
  }
  if (*(void *)&a4 == 1)
  {
    double v12 = a6 * 180.0 / 3.14159265;
    BOOL v13 = v12 == 90.0;
    if (v12 == 270.0) {
      BOOL v13 = 1;
    }
    BOOL v14 = !v13;
    if (v13) {
      unint64_t v15 = a3;
    }
    else {
      unint64_t v15 = a2;
    }
    if (v14) {
      unint64_t v16 = a3;
    }
    else {
      unint64_t v16 = a2;
    }
    double v17 = (double)v15 / (double)v16;
    double Width = (double)(uint64_t)CVPixelBufferGetWidth(pixelBuffer);
    double Height = (double)(uint64_t)CVPixelBufferGetHeight(pixelBuffer);
    double v20 = sub_10020F6D8(Width);
    double v21 = sub_10020F6D8(Height);
    double v22 = sub_10020F6D8(Width * 0.0);
    double v23 = sub_10020F6D8(Height * 0.0);
    char v7 = 0;
    double v24 = (v20 - v22) / (v21 - v23);
    BOOL v25 = v24 < v17;
    double v26 = v17 * (v20 - v22) / v24;
    double v27 = (v21 - v23) * v24 / v17;
    if (v25) {
      double v26 = v20 - v22;
    }
    else {
      double v27 = v21 - v23;
    }
    a4 = v22 + (v20 - v22 - v26) * 0.5;
    double v8 = v23 + (v21 - v23 - v27) * 0.5;
    double v9 = v26;
    double v10 = v27;
    goto LABEL_16;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double sub_10020F6D8(double a1)
{
  return round(a1);
}

uint64_t sub_10020F6E0(int *a1, uint64_t a2)
{
  int v2 = *a1;
  *(unsigned char *)(a2 + 4) = *((unsigned char *)a1 + 4);
  *(_DWORD *)a2 = v2;
  return a2;
}

uint64_t sub_10020F6F8(uint64_t a1)
{
  return a1;
}

void sub_10020F724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  if (a6 != (void *)1)
  {
    sub_10020F474(a1, a2, a3, a4, a5);
  }
}

uint64_t sub_10020F768(uint64_t a1)
{
  return sub_1001E6FB8(a1, *(void *)(v1 + 16), *(float *)(v1 + 32), *(double *)(v1 + 40)) & 1;
}

void sub_10020F790(uint64_t a1)
{
  int v2 = (int *)type metadata accessor for DetectionRequest(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v26 = (uint64_t)&v25 - v6;
  __chkstk_darwin(v7);
  double v10 = (char *)&v25 - v9;
  uint64_t v28 = *(void *)(a1 + 16);
  if (v28)
  {
    uint64_t v11 = 0;
    uint64_t v27 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v12 = *(void *)(v8 + 72);
    do
    {
      sub_10020F0D8(v27 + v12 * v11, (uint64_t)v10, type metadata accessor for DetectionRequest);
      uint64_t v13 = *v29;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      sub_1003FFF94((uint64_t)v32);
      uint64_t v14 = (uint64_t)&v10[v2[5]];
      sub_1001C2DBC((uint64_t)v32);
      unint64_t v15 = (CGRect *)&v10[v2[6]];
      sub_10020B90C(v15->origin.x, v15->origin.y, v15->size.width, v15->size.height);
      uint64_t v31 = v2[7];
      if ((*(void *)&v10[v31] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v16 = *(void *)&v10[v31];
      }
      else {
        Swift::UInt64 v16 = 0;
      }
      Hasher._combine(_:)(v16);
      Swift::Int v17 = Hasher._finalize()();
      uint64_t v18 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v19 = v17 & ~v18;
      uint64_t v20 = *(void *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19;
      uint64_t v30 = v11;
      if (v20)
      {
        uint64_t v21 = ~v18;
        while (1)
        {
          sub_10020F0D8(*(void *)(v13 + 48) + v19 * v12, (uint64_t)v4, type metadata accessor for DetectionRequest);
          if ((sub_100402834((uint64_t)v4, (uint64_t)v10) & 1) != 0
            && (sub_10020BB18((uint64_t)&v4[v2[5]], v14) & 1) != 0
            && CGRectEqualToRect(*(CGRect *)&v4[v2[6]], *v15)
            && *(double *)&v4[v2[7]] == *(double *)&v10[v31])
          {
            break;
          }
          sub_1001D430C((uint64_t)v4, type metadata accessor for DetectionRequest);
          unint64_t v19 = (v19 + 1) & v21;
          if (((*(void *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
            goto LABEL_14;
          }
        }
        sub_1001D430C((uint64_t)v4, type metadata accessor for DetectionRequest);
      }
      else
      {
LABEL_14:
        swift_bridgeObjectRelease();
        double v22 = v29;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v24 = v26;
        sub_10020F0D8((uint64_t)v10, v26, type metadata accessor for DetectionRequest);
        v32[0] = *v22;
        *double v22 = 0x8000000000000000;
        sub_1001FF90C(v24, v19, isUniquelyReferenced_nonNull_native);
        *double v22 = v32[0];
      }
      swift_bridgeObjectRelease();
      uint64_t v11 = v30 + 1;
      sub_1001D430C((uint64_t)v10, type metadata accessor for DetectionRequest);
    }
    while (v11 != v28);
  }
}

uint64_t sub_10020FB08(uint64_t a1)
{
  return a1;
}

uint64_t sub_10020FB48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100094760(a4, a5);
  }
  return result;
}

uint64_t sub_10020FBA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v28 = (char *)&v22 - v6;
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100524ED0);
  v8.n128_f64[0] = __chkstk_darwin(v7 - 8);
  double v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
    uint64_t v12 = v3 + 16;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v15 = *(void *)(v12 + 56);
    unint64_t v16 = v12 + 40;
    uint64_t v25 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v26 = v13;
    double v23 = (void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v24 = v15;
    uint64_t v27 = v12;
    Swift::Int v17 = (void (**)(uint64_t, uint64_t))(v12 - 8);
    unint64_t v22 = v16 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v19 = (uint64_t)v28;
    uint64_t v18 = v29;
    while (1)
    {
      v26(v10, v14, v2, v8);
      uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v16;
      (*(void (**)(char *, void, uint64_t, uint64_t))v16)(v10, 0, 1, v2);
      uint64_t result = (*v25)(v10, 1, v2);
      if (result == 1) {
        break;
      }
      (*v23)(v18, v10, v2);
      sub_1001FA6F8(v19, v18);
      (*v17)(v19, v2);
      v14 += v24;
      if (!--v11) {
        return v20(v10, 1, 1, v2);
      }
    }
  }
  else
  {
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    return v20(v10, 1, 1, v2);
  }
  return result;
}

unint64_t sub_10020FDFC()
{
  unint64_t result = qword_100524F08;
  if (!qword_100524F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524F08);
  }
  return result;
}

uint64_t sub_10020FE50(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_100524F18);
    sub_1001E227C(a2, (void (*)(uint64_t))type metadata accessor for CVDetection);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10020FEE4()
{
  unint64_t result = qword_100524F80;
  if (!qword_100524F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524F80);
  }
  return result;
}

unint64_t sub_10020FF38()
{
  unint64_t result = qword_100524F90;
  if (!qword_100524F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524F90);
  }
  return result;
}

unint64_t sub_10020FF8C()
{
  unint64_t result = qword_100524F98;
  if (!qword_100524F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524F98);
  }
  return result;
}

uint64_t sub_10020FFE0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_100524FA0);
    sub_1001E227C(a2, (void (*)(uint64_t))type metadata accessor for DetectionRequest.Originator);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100210074()
{
  unint64_t result = qword_100524FB8;
  if (!qword_100524FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524FB8);
  }
  return result;
}

unint64_t sub_1002100C8()
{
  unint64_t result = qword_100524FC8;
  if (!qword_100524FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524FC8);
  }
  return result;
}

unint64_t sub_10021011C()
{
  unint64_t result = qword_100524FD0;
  if (!qword_100524FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524FD0);
  }
  return result;
}

unint64_t sub_100210170()
{
  unint64_t result = qword_100524FD8;
  if (!qword_100524FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524FD8);
  }
  return result;
}

unint64_t sub_1002101C4()
{
  unint64_t result = qword_100525030;
  if (!qword_100525030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525030);
  }
  return result;
}

void *sub_100210218(void *a1, void *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t sub_100210228()
{
  unint64_t result = qword_100525060;
  if (!qword_100525060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525060);
  }
  return result;
}

unint64_t sub_10021027C()
{
  unint64_t result = qword_100529680;
  if (!qword_100529680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529680);
  }
  return result;
}

uint64_t sub_1002102D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[4];
  uint64_t v6 = v2[5];
  uint64_t v7 = v2[6];
  uint64_t v8 = v2[7];
  uint64_t v10 = v2[8];
  uint64_t v9 = v2[9];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_10000FC9C;
  return sub_1001CECF4(a1, a2, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1002103C0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 48);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v4;
  uint64_t v6 = *(void **)(v0 + v4 + 40);
  if (v6 != (void *)1)
  {
    uint64_t v7 = *(void **)(v5 + 32);
    if ((unint64_t)v7 >= 3)
    {

      uint64_t v6 = *(void **)(v5 + 40);
    }
  }

  return swift_deallocObject();
}

uint64_t sub_1002104E0(uint64_t a1)
{
  long long v15 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = v1 + 48;
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v15 - 8) + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80);
  unint64_t v6 = (*(void *)(*(void *)(v15 - 8) + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v1 + 88);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = v1 + v7;
  uint64_t v12 = v1 + ((v7 + 55) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *(void *)uint64_t v13 = v2;
  *(void *)(v13 + 8) = sub_10000FC9C;
  *(_OWORD *)(v13 + 160) = v15;
  *(void *)(v13 + 144) = v11;
  *(void *)(v13 + 152) = v12;
  *(void *)(v13 + 128) = v9;
  *(void *)(v13 + 136) = v10;
  *(void *)(v13 + 112) = v4;
  *(void *)(v13 + 120) = v8;
  *(void *)(v13 + 104) = a1;
  return _swift_task_switch(sub_1001CF4D8, 0, 0);
}

uint64_t sub_100210640(uint64_t a1)
{
  return a1;
}

id sub_100210678(id result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  if (a6 != (void *)1)
  {
    sub_10020F1A8((uint64_t)result, a2, a3, a4, a5);
    return a6;
  }
  return result;
}

uint64_t sub_1002106BC()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002106F4()
{
  return sub_1001CE240();
}

uint64_t sub_1002106FC()
{
  return sub_1001CDE6C();
}

uint64_t sub_100210704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100525188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10021076C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002107B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_1001CAC50(a1, v4, v5, v7, v6);
}

uint64_t sub_100210874@<X0>(uint64_t a1@<X8>)
{
  return sub_1001CAA18(v1, a1);
}

void sub_100210890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100094760(a5, a6);
  }
}

uint64_t sub_1002108F0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 64);
  if (v1 >> 60 != 15) {
    sub_100038B34(*(void *)(v0 + 56), v1);
  }

  return swift_deallocObject();
}

uint64_t sub_100210950()
{
  return sub_1001CB40C(*(void *)(v0 + 16), (_OWORD *)(v0 + 32), *(double *)(v0 + 24));
}

void sub_100210960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000A7588(a5, a6);
  }
}

uint64_t sub_1002109C0()
{
  return swift_deallocObject();
}

uint64_t sub_1002109D0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100210A20(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000FC9C;
  return sub_1001CC330(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100210AE8()
{
  return sub_1001CDDF0();
}

uint64_t sub_100210AF0(uint64_t a1)
{
  return sub_1001E6B1C(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100210B10()
{
  swift_unknownObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 32);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100210B60()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 72);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10000FC9C;
  *(_OWORD *)(v2 + 64) = v3;
  *(void *)(v2 + 56) = v0 + 32;
  return _swift_task_switch(sub_1001CD988, 0, 0);
}

BOOL sub_100210C14(uint64_t a1, long long *a2)
{
  return sub_1001CD6A8(a1, a2, *(long long **)(v2 + 16));
}

void sub_100210C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 != (void *)3) {
    sub_10020F1A8(a1, a2, a3, a4, a5);
  }
}

void *sub_100210C2C(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

void sub_100210C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5 != (void *)3) {
    sub_10020F474(a1, a2, a3, a4, a5);
  }
}

unsigned char *storeEnumTagSinglePayload for DetectionRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100210D44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectionRequest.CodingKeys()
{
  return &type metadata for DetectionRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectionRequest.Originator.CodingKeys()
{
  return &type metadata for DetectionRequest.Originator.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectionRequest.Originator.VisualIntelligenceDetectionCodingKeys()
{
  return &type metadata for DetectionRequest.Originator.VisualIntelligenceDetectionCodingKeys;
}

ValueMetadata *type metadata accessor for DetectionRequest.Originator.RegimeCodingKeys()
{
  return &type metadata for DetectionRequest.Originator.RegimeCodingKeys;
}

ValueMetadata *type metadata accessor for DetectionRequest.Originator.TrackCodingKeys()
{
  return &type metadata for DetectionRequest.Originator.TrackCodingKeys;
}

ValueMetadata *type metadata accessor for DetectionRequest.Originator.VariousCodingKeys()
{
  return &type metadata for DetectionRequest.Originator.VariousCodingKeys;
}

ValueMetadata *type metadata accessor for DetectionRequest.Originator.StreamingCodingKeys()
{
  return &type metadata for DetectionRequest.Originator.StreamingCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DetectionResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100210EB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectionResult.CodingKeys()
{
  return &type metadata for DetectionResult.CodingKeys;
}

uint64_t sub_100210EF0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for CVError(uint64_t a1)
{
  return sub_100210F18(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_100210F18(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s6Tamale7CVErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_100210EF0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CVError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_100210EF0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100210F18(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CVError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100210F18(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for CVError()
{
  return &type metadata for CVError;
}

void destroy for CVProcessorInputRequirement(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  int v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF) {
    int v2 = (int)v1;
  }
  if (v2 - 2 < 0 && (unint64_t)v1 >= 2) {
}
  }

uint64_t initializeWithCopy for CVProcessorInputRequirement(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)(a2 + 32);
  LODWORD(v4) = -1;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 32);
  }
  if ((int)v4 - 2 < 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    int v6 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = v6;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    if ((unint64_t)v3 >= 2) {
      id v7 = v3;
    }
    *(void *)(a1 + 32) = v3;
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for CVProcessorInputRequirement(uint64_t a1, long long *a2)
{
  uint64_t v4 = (void *)(a1 + 32);
  long long v5 = *(void **)(a1 + 32);
  LODWORD(v6) = -1;
  if ((unint64_t)v5 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  else {
    uint64_t v7 = *(void *)(a1 + 32);
  }
  int v8 = v7 - 2;
  if (*((void *)a2 + 4) < 0xFFFFFFFFuLL) {
    uint64_t v6 = *((void *)a2 + 4);
  }
  int v9 = v6 - 2;
  if ((v8 & 0x80000000) == 0)
  {
    if (v9 < 0)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
      int v10 = *((_DWORD *)a2 + 5);
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      *(_DWORD *)(a1 + 20) = v10;
      uint64_t v11 = (void *)*((void *)a2 + 4);
      if ((unint64_t)v11 >= 2) {
        id v12 = v11;
      }
      *uint64_t v4 = v11;
      return a1;
    }
LABEL_14:
    long long v13 = *a2;
    long long v14 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v14;
    return a1;
  }
  if ((v9 & 0x80000000) == 0)
  {
    if ((unint64_t)v5 >= 2) {

    }
    goto LABEL_14;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  int v16 = *((_DWORD *)a2 + 5);
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(_DWORD *)(a1 + 20) = v16;
  Swift::Int v17 = (void *)*((void *)a2 + 4);
  if ((unint64_t)v5 >= 2)
  {
    if ((unint64_t)v17 >= 2)
    {
      *uint64_t v4 = v17;
      id v19 = v17;
    }
    else
    {
      sub_10000FBD8(a1 + 32, &qword_100524D10);
      *uint64_t v4 = *((void *)a2 + 4);
    }
  }
  else
  {
    *uint64_t v4 = v17;
    if ((unint64_t)v17 >= 2) {
      id v18 = v17;
    }
  }
  return a1;
}

uint64_t assignWithTake for CVProcessorInputRequirement(uint64_t a1, uint64_t a2)
{
  long long v5 = (unint64_t *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 32);
  LODWORD(v6) = -1;
  if ((unint64_t)v4 < 0xFFFFFFFF) {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  if ((int)v6 - 2 >= 0) {
    goto LABEL_4;
  }
  unint64_t v9 = *(void *)(a2 + 32);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF) {
    uint64_t v10 = *(void *)(a2 + 32);
  }
  if ((int)v10 - 2 >= 0)
  {
    if ((unint64_t)v4 >= 2) {

    }
LABEL_4:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v11;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  if ((unint64_t)v4 >= 2)
  {
    if (v9 >= 2)
    {
      *long long v5 = v9;

      return a1;
    }
    sub_10000FBD8(a1 + 32, &qword_100524D10);
  }
  *long long v5 = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for CVProcessorInputRequirement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CVProcessorInputRequirement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_10021139C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 2;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

double sub_1002113C0(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7FFFFFFD)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 - 2147483646;
  }
  else if (a2)
  {
    *(void *)(a1 + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CVProcessorInputRequirement()
{
  return &type metadata for CVProcessorInputRequirement;
}

void *initializeBufferWithCopyOfBuffer for CVProcessorInputConfiguration.ContentMode(void *a1, void **a2)
{
  unint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for CVProcessorInputConfiguration.ContentMode(void **a1)
{
  unint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for CVProcessorInputConfiguration.ContentMode(void **a1, void **a2)
{
  unint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for CVProcessorInputConfiguration.ContentMode(void **a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for CVProcessorInputConfiguration.ContentMode(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CVProcessorInputConfiguration.ContentMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)double result = 0;
    *(_DWORD *)double result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)double result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVProcessorInputConfiguration.ContentMode()
{
  return &type metadata for CVProcessorInputConfiguration.ContentMode;
}

uint64_t initializeBufferWithCopyOfBuffer for CVProcessorInputConfiguration.Orientation(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)double result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CVProcessorInputConfiguration.Orientation(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CVProcessorInputConfiguration.Orientation(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)double result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_100211660(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10021167C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)double result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CVProcessorInputConfiguration.Orientation()
{
  return &type metadata for CVProcessorInputConfiguration.Orientation;
}

uint64_t getEnumTagSinglePayload for CVCoordinationRegime(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7C && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CVCoordinationRegime(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = a2 - 124;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)double result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_100211754(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 5;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_100211774(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t sub_100211784(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | (32 * a2);
  }
  else
  {
    *(void *)double result = a2 - 4;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for CVCoordinationRegime()
{
  return &type metadata for CVCoordinationRegime;
}

ValueMetadata *type metadata accessor for CVCoordinatorConfiguration.Preset()
{
  return &type metadata for CVCoordinatorConfiguration.Preset;
}

uint64_t sub_1002117D0()
{
  return sub_100013AA8(&qword_1005252A0, &qword_1005252A8);
}

unint64_t sub_100211810()
{
  unint64_t result = qword_1005252B0;
  if (!qword_1005252B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252B0);
  }
  return result;
}

unint64_t sub_100211868()
{
  unint64_t result = qword_1005252B8;
  if (!qword_1005252B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252B8);
  }
  return result;
}

unint64_t sub_1002118C0()
{
  unint64_t result = qword_1005252C0;
  if (!qword_1005252C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252C0);
  }
  return result;
}

unint64_t sub_100211918()
{
  unint64_t result = qword_1005252C8;
  if (!qword_1005252C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252C8);
  }
  return result;
}

unint64_t sub_100211970()
{
  unint64_t result = qword_1005252D0;
  if (!qword_1005252D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252D0);
  }
  return result;
}

unint64_t sub_1002119CC()
{
  unint64_t result = qword_1005252D8;
  if (!qword_1005252D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252D8);
  }
  return result;
}

unint64_t sub_100211A24()
{
  unint64_t result = qword_1005252E0;
  if (!qword_1005252E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252E0);
  }
  return result;
}

unint64_t sub_100211A7C()
{
  unint64_t result = qword_1005252E8;
  if (!qword_1005252E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252E8);
  }
  return result;
}

unint64_t sub_100211AD4()
{
  unint64_t result = qword_1005252F0;
  if (!qword_1005252F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252F0);
  }
  return result;
}

unint64_t sub_100211B2C()
{
  unint64_t result = qword_1005252F8;
  if (!qword_1005252F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005252F8);
  }
  return result;
}

unint64_t sub_100211B84()
{
  unint64_t result = qword_100525300;
  if (!qword_100525300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525300);
  }
  return result;
}

unint64_t sub_100211BDC()
{
  unint64_t result = qword_100525308;
  if (!qword_100525308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525308);
  }
  return result;
}

unint64_t sub_100211C34()
{
  unint64_t result = qword_100525310;
  if (!qword_100525310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525310);
  }
  return result;
}

unint64_t sub_100211C8C()
{
  unint64_t result = qword_100525318;
  if (!qword_100525318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525318);
  }
  return result;
}

unint64_t sub_100211CE4()
{
  unint64_t result = qword_100525320;
  if (!qword_100525320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525320);
  }
  return result;
}

unint64_t sub_100211D3C()
{
  unint64_t result = qword_100525328;
  if (!qword_100525328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525328);
  }
  return result;
}

unint64_t sub_100211D94()
{
  unint64_t result = qword_100525330;
  if (!qword_100525330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525330);
  }
  return result;
}

unint64_t sub_100211DEC()
{
  unint64_t result = qword_100525338;
  if (!qword_100525338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525338);
  }
  return result;
}

unint64_t sub_100211E44()
{
  unint64_t result = qword_100525340;
  if (!qword_100525340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525340);
  }
  return result;
}

unint64_t sub_100211E9C()
{
  unint64_t result = qword_100525348;
  if (!qword_100525348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525348);
  }
  return result;
}

unint64_t sub_100211EF4()
{
  unint64_t result = qword_100525350;
  if (!qword_100525350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525350);
  }
  return result;
}

unint64_t sub_100211F4C()
{
  unint64_t result = qword_100525358;
  if (!qword_100525358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525358);
  }
  return result;
}

unint64_t sub_100211FA4()
{
  unint64_t result = qword_100525360;
  if (!qword_100525360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525360);
  }
  return result;
}

unint64_t sub_100211FFC()
{
  unint64_t result = qword_100525368;
  if (!qword_100525368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525368);
  }
  return result;
}

unint64_t sub_100212054()
{
  unint64_t result = qword_100525370;
  if (!qword_100525370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525370);
  }
  return result;
}

unint64_t sub_1002120AC()
{
  unint64_t result = qword_100525378;
  if (!qword_100525378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525378);
  }
  return result;
}

unint64_t sub_100212104()
{
  unint64_t result = qword_100525380;
  if (!qword_100525380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525380);
  }
  return result;
}

unint64_t sub_10021215C()
{
  unint64_t result = qword_100525388;
  if (!qword_100525388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525388);
  }
  return result;
}

unint64_t sub_1002121B0()
{
  unint64_t result = qword_1005253C0;
  if (!qword_1005253C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005253C0);
  }
  return result;
}

unint64_t sub_100212204()
{
  unint64_t result = qword_1005253C8;
  if (!qword_1005253C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005253C8);
  }
  return result;
}

unint64_t sub_100212258()
{
  unint64_t result = qword_1005253D0;
  if (!qword_1005253D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005253D0);
  }
  return result;
}

unint64_t sub_1002122AC()
{
  unint64_t result = qword_1005253D8;
  if (!qword_1005253D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005253D8);
  }
  return result;
}

unint64_t sub_100212300()
{
  unint64_t result = qword_1005253E0;
  if (!qword_1005253E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005253E0);
  }
  return result;
}

unint64_t sub_100212354()
{
  unint64_t result = qword_1005253E8;
  if (!qword_1005253E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005253E8);
  }
  return result;
}

unint64_t sub_1002123A8()
{
  unint64_t result = qword_1005253F0;
  if (!qword_1005253F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005253F0);
  }
  return result;
}

unint64_t sub_1002123FC()
{
  unint64_t result = qword_100525430;
  if (!qword_100525430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525430);
  }
  return result;
}

unint64_t sub_100212450()
{
  unint64_t result = qword_100525460;
  if (!qword_100525460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525460);
  }
  return result;
}

unint64_t sub_1002124A4()
{
  unint64_t result = qword_100525468;
  if (!qword_100525468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525468);
  }
  return result;
}

unint64_t sub_1002124F8()
{
  unint64_t result = qword_100525470;
  if (!qword_100525470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525470);
  }
  return result;
}

unint64_t sub_10021254C()
{
  unint64_t result = qword_100525478;
  if (!qword_100525478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525478);
  }
  return result;
}

ValueMetadata *type metadata accessor for CVCoordinatorConfiguration.Preset.CodingKeys()
{
  return &type metadata for CVCoordinatorConfiguration.Preset.CodingKeys;
}

ValueMetadata *type metadata accessor for CVCoordinatorConfiguration.Preset.FactorySettingsCodingKeys()
{
  return &type metadata for CVCoordinatorConfiguration.Preset.FactorySettingsCodingKeys;
}

ValueMetadata *type metadata accessor for CVCoordinatorConfiguration.Preset.DetectUnusedDomainsCodingKeys()
{
  return &type metadata for CVCoordinatorConfiguration.Preset.DetectUnusedDomainsCodingKeys;
}

ValueMetadata *type metadata accessor for CVCoordinatorConfiguration.Preset.SkipAllCodingKeys()
{
  return &type metadata for CVCoordinatorConfiguration.Preset.SkipAllCodingKeys;
}

unsigned char *_s6Tamale16DetectionRequestV10OriginatorO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002126ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVCoordinationRegime.CodingKeys()
{
  return &type metadata for CVCoordinationRegime.CodingKeys;
}

ValueMetadata *type metadata accessor for CVCoordinationRegime.LeadingEdgeCodingKeys()
{
  return &type metadata for CVCoordinationRegime.LeadingEdgeCodingKeys;
}

ValueMetadata *type metadata accessor for CVCoordinationRegime.CadenceCodingKeys()
{
  return &type metadata for CVCoordinationRegime.CadenceCodingKeys;
}

unsigned char *_s6Tamale26CVCoordinatorConfigurationV6PresetOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002127D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVCoordinationRegime.ThresholdCadenceCodingKeys()
{
  return &type metadata for CVCoordinationRegime.ThresholdCadenceCodingKeys;
}

ValueMetadata *type metadata accessor for CVCoordinationRegime.OnDemandCodingKeys()
{
  return &type metadata for CVCoordinationRegime.OnDemandCodingKeys;
}

unsigned char *_s6Tamale16DetectionRequestV10OriginatorO37VisualIntelligenceDetectionCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002128B4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CVCoordinationRegime.OnDemandCadenceCodingKeys()
{
  return &type metadata for CVCoordinationRegime.OnDemandCadenceCodingKeys;
}

unint64_t sub_1002128F0()
{
  unint64_t result = qword_1005254B8;
  if (!qword_1005254B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005254B8);
  }
  return result;
}

unint64_t sub_100212948()
{
  unint64_t result = qword_1005254C0;
  if (!qword_1005254C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005254C0);
  }
  return result;
}

unint64_t sub_1002129A0()
{
  unint64_t result = qword_1005254C8;
  if (!qword_1005254C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005254C8);
  }
  return result;
}

unint64_t sub_1002129F8()
{
  unint64_t result = qword_1005254D0;
  if (!qword_1005254D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005254D0);
  }
  return result;
}

unint64_t sub_100212A50()
{
  unint64_t result = qword_1005254D8;
  if (!qword_1005254D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005254D8);
  }
  return result;
}

unint64_t sub_100212AA8()
{
  unint64_t result = qword_1005254E0;
  if (!qword_1005254E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005254E0);
  }
  return result;
}

unint64_t sub_100212B00()
{
  unint64_t result = qword_1005254E8;
  if (!qword_1005254E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005254E8);
  }
  return result;
}

unint64_t sub_100212B58()
{
  unint64_t result = qword_1005254F0;
  if (!qword_1005254F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005254F0);
  }
  return result;
}

unint64_t sub_100212BB0()
{
  unint64_t result = qword_1005254F8;
  if (!qword_1005254F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005254F8);
  }
  return result;
}

unint64_t sub_100212C08()
{
  unint64_t result = qword_100525500;
  if (!qword_100525500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525500);
  }
  return result;
}

unint64_t sub_100212C60()
{
  unint64_t result = qword_100525508;
  if (!qword_100525508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525508);
  }
  return result;
}

unint64_t sub_100212CB8()
{
  unint64_t result = qword_100525510;
  if (!qword_100525510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525510);
  }
  return result;
}

unint64_t sub_100212D10()
{
  unint64_t result = qword_100525518;
  if (!qword_100525518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525518);
  }
  return result;
}

unint64_t sub_100212D68()
{
  unint64_t result = qword_100525520;
  if (!qword_100525520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525520);
  }
  return result;
}

unint64_t sub_100212DC0()
{
  unint64_t result = qword_100525528;
  if (!qword_100525528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525528);
  }
  return result;
}

unint64_t sub_100212E18()
{
  unint64_t result = qword_100525530;
  if (!qword_100525530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525530);
  }
  return result;
}

unint64_t sub_100212E70()
{
  unint64_t result = qword_100525538;
  if (!qword_100525538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525538);
  }
  return result;
}

unint64_t sub_100212EC8()
{
  unint64_t result = qword_100525540;
  if (!qword_100525540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525540);
  }
  return result;
}

unint64_t sub_100212F20()
{
  unint64_t result = qword_100525548;
  if (!qword_100525548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525548);
  }
  return result;
}

unint64_t sub_100212F78()
{
  unint64_t result = qword_100525550;
  if (!qword_100525550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525550);
  }
  return result;
}

unint64_t sub_100212FD0()
{
  unint64_t result = qword_100525558;
  if (!qword_100525558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525558);
  }
  return result;
}

unint64_t sub_100213028()
{
  unint64_t result = qword_100525560;
  if (!qword_100525560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525560);
  }
  return result;
}

unint64_t sub_100213080()
{
  unint64_t result = qword_100525568;
  if (!qword_100525568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525568);
  }
  return result;
}

unint64_t sub_1002130D8()
{
  unint64_t result = qword_100525570;
  if (!qword_100525570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525570);
  }
  return result;
}

unint64_t sub_100213130()
{
  unint64_t result = qword_100525578;
  if (!qword_100525578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525578);
  }
  return result;
}

unint64_t sub_100213188()
{
  unint64_t result = qword_100525580;
  if (!qword_100525580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525580);
  }
  return result;
}

uint64_t sub_1002131DC(uint64_t a1)
{
  return sub_100210AF0(a1) & 1;
}

uint64_t sub_100213238()
{
  uint64_t result = os_variant_has_internal_content();
  byte_10055E408 = result;
  return result;
}

uint64_t sub_100213260(uint64_t a1)
{
  sub_100050794(a1, (uint64_t)&v15);
  unsigned int v1 = v16;
  if (!v16) {
    return 0xD00000000000001ELL;
  }
  uint64_t v2 = v15;
  uint64_t v3 = v17;
  unsigned int v4 = v18;
  uint64_t v5 = v19;
  unsigned int v6 = v20;
  _StringGuts.grow(_:)(56);
  v7._countAndFlagsBits = 0xD000000000000018;
  v7._object = (void *)0x8000000100429890;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v2;
  v8._object = v1;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x203A7478657420;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v3;
  v10._object = v4;
  String.append(_:)(v10);
  v11._object = (void *)0x80000001004298B0;
  v11._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v5;
  v12._object = v6;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  return 0x756F6C4164616552;
}

void sub_1002133BC()
{
  qword_1005255D0 = 0x4034000000000000;
}

void sub_1002133CC()
{
  qword_1005255D8 = 0x4030000000000000;
}

void sub_1002133DC()
{
  qword_1005255E0 = 0x4024000000000000;
}

uint64_t sub_1002133EC(uint64_t a1, uint64_t a2)
{
  sub_100050794(a1, (uint64_t)v4);
  sub_100050794(a2, (uint64_t)v5);
  return sub_100216E5C((uint64_t)v4, (uint64_t)v5) & 1;
}

Swift::Int sub_100213438()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void **)(v0 + 48);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    id v3 = v2;
    String.hash(into:)();
    String.hash(into:)();
    String.hash(into:)();
    type metadata accessor for CGImage(0);
    sub_1002193AC(&qword_1005255E8, type metadata accessor for CGImage);
    _CFObject.hash(into:)();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_10021355C()
{
  if (*(void *)(v0 + 8))
  {
    uint64_t v1 = *(void **)(v0 + 48);
    Hasher._combine(_:)(1uLL);
    id v2 = v1;
    String.hash(into:)();
    String.hash(into:)();
    String.hash(into:)();
    type metadata accessor for CGImage(0);
    sub_1002193AC(&qword_1005255E8, type metadata accessor for CGImage);
    _CFObject.hash(into:)();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1002136AC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  id v2 = *(void **)(v0 + 48);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    id v3 = v2;
    String.hash(into:)();
    String.hash(into:)();
    String.hash(into:)();
    type metadata accessor for CGImage(0);
    sub_1002193AC(&qword_1005255E8, type metadata accessor for CGImage);
    _CFObject.hash(into:)();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1002137CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v123 = a1;
  uint64_t AloudResultView = type metadata accessor for ReadAloudResultView();
  uint64_t v3 = AloudResultView - 8;
  uint64_t v100 = *(void *)(AloudResultView - 8);
  __chkstk_darwin(AloudResultView);
  uint64_t v101 = v4;
  uint64_t v109 = (uint64_t)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_1005256A0);
  __chkstk_darwin(v5 - 8);
  v103 = (uint64_t *)((char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v102 = sub_10000F214(&qword_1005256A8);
  __chkstk_darwin(v102);
  uint64_t v105 = (uint64_t)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_10000F214(&qword_1005256B0);
  __chkstk_darwin(v104);
  uint64_t v107 = (uint64_t)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_10000F214(&qword_1005256B8);
  __chkstk_darwin(v119);
  uint64_t v106 = (uint64_t)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v108 = (uint64_t)&v96 - v11;
  uint64_t v116 = sub_10000F214(&qword_1005256C0);
  __chkstk_darwin(v116);
  uint64_t v118 = (uint64_t)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Locale();
  __chkstk_darwin(v13 - 8);
  v112 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v15 - 8);
  v111 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for EmptyResultsView();
  __chkstk_darwin(v115);
  id v18 = (uint64_t *)((char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v113 = (char *)&v96 - v20;
  uint64_t v122 = sub_10000F214(&qword_1005256C8);
  __chkstk_darwin(v122);
  v117 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000F214(&qword_1005256D0);
  __chkstk_darwin(v121);
  double v23 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for LatencyTextStyle();
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v96 - v28;
  uint64_t v30 = sub_10000F214(&qword_1005256D8);
  __chkstk_darwin(v30);
  char v32 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000F214(&qword_1005256E0);
  __chkstk_darwin(v33);
  BOOL v35 = (char *)&v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v96 - v37;
  uint64_t v39 = *(int *)(v3 + 28);
  uint64_t v114 = v1;
  int64_t v40 = (char **)(v1 + v39);
  uint64_t v41 = v40[1];
  uint64_t v120 = v42;
  if (v41)
  {
    v110 = v23;
    uint64_t v44 = v40[7];
    unint64_t v43 = (unint64_t)v40[8];
    uint64_t v45 = v40[6];
    uint64_t v46 = HIBYTE(v43) & 0xF;
    if ((v43 & 0x2000000000000000) == 0) {
      uint64_t v46 = (unint64_t)v44 & 0xFFFFFFFFFFFFLL;
    }
    if (v46)
    {
      uint64_t v47 = v45;
      swift_bridgeObjectRetain();
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v48 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v50 = v49;
      *id v18 = swift_getKeyPath();
      sub_10000F214(&qword_100522BF0);
      swift_storeEnumTagMultiPayload();
      uint64_t v51 = v115;
      uint64_t v52 = (uint64_t *)((char *)v18 + *(int *)(v115 + 20));
      *uint64_t v52 = v48;
      v52[1] = v50;
      uint64_t v53 = (char **)((char *)v18 + *(int *)(v51 + 24));
      *uint64_t v53 = v44;
      v53[1] = (char *)v43;
      uint64_t v54 = (uint64_t)v113;
      sub_1002188B4((uint64_t)v18, (uint64_t)v113, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
      sub_10021891C(v54, v118, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
      swift_storeEnumTagMultiPayload();
      sub_1002193AC(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
      sub_100218248();
      uint64_t v55 = (uint64_t)v117;
      _ConditionalContent<>.init(storage:)();
      sub_100218984(v54, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
    }
    else
    {
      v112 = *v40;
      uint64_t v63 = v40[5];
      uint64_t v99 = v40[4];
      v96 = v63;
      uint64_t v64 = v40[3];
      v111 = v40[2];
      Swift::Int v98 = v64;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Swift::Int v97 = v45;
      uint64_t v65 = static HorizontalAlignment.center.getter();
      uint64_t v66 = (uint64_t)v103;
      uint64_t *v103 = v65;
      *(void *)(v66 + 8) = 0;
      *(unsigned char *)(v66 + 16) = 0;
      uint64_t v67 = sub_10000F214(&qword_100525728);
      uint64_t v68 = v114;
      sub_100214450(v114, v66 + *(int *)(v67 + 44));
      uint64_t v69 = v68;
      uint64_t v70 = v109;
      sub_10021891C(v69, v109, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
      uint64_t v71 = *(unsigned __int8 *)(v100 + 80);
      uint64_t v72 = (v71 + 16) & ~v71;
      v101 += v72;
      uint64_t v100 = v71 | 7;
      unint64_t v73 = (v101 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8;
      v113 = v45;
      unint64_t v75 = (v74 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v76 = swift_allocObject();
      sub_1002188B4(v70, v76 + v72, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
      uint64_t v77 = (char **)(v76 + v73);
      uint64_t v78 = v96;
      *uint64_t v77 = v99;
      v77[1] = v78;
      uint64_t v79 = (void *)(v76 + v74);
      uint64_t v80 = v98;
      void *v79 = v111;
      v79[1] = v80;
      uint64_t v81 = (void *)(v76 + v75);
      *uint64_t v81 = v112;
      v81[1] = v41;
      uint64_t v82 = v97;
      *(void *)(v76 + ((v75 + 23) & 0xFFFFFFFFFFFFFFF8)) = v97;
      uint64_t v83 = v105;
      sub_10000FB74(v66, v105, &qword_1005256A0);
      uint64_t v84 = (uint64_t (**)())(v83 + *(int *)(v102 + 36));
      *uint64_t v84 = sub_100218768;
      v84[1] = (uint64_t (*)())v76;
      v84[2] = 0;
      v84[3] = 0;
      uint64_t v85 = v82;
      sub_10000FBD8(v66, &qword_1005256A0);
      uint64_t v86 = v114;
      sub_10021891C(v114, v70, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
      uint64_t v87 = swift_allocObject();
      sub_1002188B4(v70, v87 + v72, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
      uint64_t v88 = v107;
      sub_10000FB74(v83, v107, &qword_1005256A8);
      uint64_t v89 = (void *)(v88 + *(int *)(v104 + 36));
      void *v89 = 0;
      v89[1] = 0;
      v89[2] = sub_100218828;
      v89[3] = v87;
      sub_10000FBD8(v83, &qword_1005256A8);
      sub_10021891C(v86, v70, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
      uint64_t v90 = swift_allocObject();
      sub_1002188B4(v70, v90 + v72, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
      uint64_t v91 = v106;
      sub_10000FB74(v88, v106, &qword_1005256B0);
      uint64_t v92 = (uint64_t (**)(uint64_t))(v91 + *(int *)(v119 + 36));
      char *v92 = sub_100218844;
      v92[1] = (uint64_t (*)(uint64_t))v90;
      sub_10000FBD8(v88, &qword_1005256B0);
      uint64_t v93 = v108;
      sub_10000FC34(v91, v108, &qword_1005256B8);
      sub_10000FB74(v93, v118, &qword_1005256B8);
      swift_storeEnumTagMultiPayload();
      sub_1002193AC(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
      sub_100218248();
      uint64_t v55 = (uint64_t)v117;
      _ConditionalContent<>.init(storage:)();
      uint64_t v94 = v93;
      uint64_t v45 = v113;
      sub_10000FBD8(v94, &qword_1005256B8);
    }
    uint64_t v61 = &qword_1005256C8;
    sub_10000FB74(v55, (uint64_t)v110, &qword_1005256C8);
    swift_storeEnumTagMultiPayload();
    sub_100218390();
    sub_1002184E8();
    _ConditionalContent<>.init(storage:)();

    uint64_t v62 = v55;
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v56 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v58 = v57;
    LODWORD(v118) = v59;
    uint64_t v119 = v60;
    *uint64_t v26 = swift_getKeyPath();
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    sub_1002188B4((uint64_t)v26, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
    sub_10021891C((uint64_t)v29, (uint64_t)&v32[*(int *)(v30 + 36)], (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
    *(void *)char v32 = v56;
    *((void *)v32 + 1) = v58;
    v32[16] = v118 & 1;
    *((void *)v32 + 3) = v119;
    sub_100218984((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
    sub_10021843C();
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8((uint64_t)v32, &qword_1005256D8);
    uint64_t v61 = &qword_1005256E0;
    sub_10000FC34((uint64_t)v35, (uint64_t)v38, &qword_1005256E0);
    sub_10000FB74((uint64_t)v38, (uint64_t)v23, &qword_1005256E0);
    swift_storeEnumTagMultiPayload();
    sub_100218390();
    sub_1002184E8();
    _ConditionalContent<>.init(storage:)();
    uint64_t v62 = (uint64_t)v38;
  }
  return sub_10000FBD8(v62, v61);
}

uint64_t sub_100214450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v104 = a1;
  uint64_t v110 = a2;
  uint64_t v2 = type metadata accessor for ColorScheme();
  uint64_t v108 = *(void *)(v2 - 8);
  uint64_t v109 = v2;
  __chkstk_darwin(v2);
  uint64_t v105 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v107 = (char *)&v91 - v5;
  uint64_t v6 = sub_10000F214(&qword_100525730);
  __chkstk_darwin(v6 - 8);
  uint64_t v92 = (uint64_t *)((char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v91 = sub_10000F214(&qword_100525738);
  __chkstk_darwin(v91);
  uint64_t v93 = (uint64_t)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100525740);
  __chkstk_darwin(v9 - 8);
  uint64_t v95 = (uint64_t)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000F214(&qword_100525748);
  __chkstk_darwin(v94);
  uint64_t v101 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000F214(&qword_100525750);
  __chkstk_darwin(v98);
  uint64_t v100 = (uint64_t)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000F214(&qword_100525758);
  __chkstk_darwin(v97);
  uint64_t v106 = (uint64_t)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v96 = (uint64_t)&v91 - v15;
  __chkstk_darwin(v16);
  uint64_t v103 = (uint64_t)&v91 - v17;
  uint64_t v18 = sub_10000F214(&qword_100525760);
  __chkstk_darwin(v18 - 8);
  uint64_t v102 = (uint64_t)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v99 = (char *)&v91 - v21;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v22 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  LODWORD(v111) = static HierarchicalShapeStyle.primary.getter();
  uint64_t v27 = Text.foregroundStyle<A>(_:)();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  sub_100012FAC(v22, v24, v26);
  swift_bridgeObjectRelease();
  static Font.headline.getter();
  uint64_t v32 = Text.font(_:)();
  uint64_t v34 = v33;
  LOBYTE(v24) = v35;
  uint64_t v37 = v36;
  swift_release();
  sub_100012FAC(v27, v29, v31);
  swift_bridgeObjectRelease();
  uint64_t v38 = static Alignment.leading.getter();
  sub_10022551C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v111, 0.0, 1, 0.0, 1, v38, v39, v32, v34, v24 & 1, v37);
  sub_100012FAC(v32, v34, v24 & 1);
  swift_bridgeObjectRelease();
  long long v141 = v117;
  long long v142 = v118;
  long long v143 = v119;
  long long v137 = v113;
  long long v138 = v114;
  long long v139 = v115;
  long long v140 = v116;
  long long v135 = v111;
  long long v136 = v112;
  char v40 = static Edge.Set.horizontal.getter();
  if (qword_100517F68 != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  long long v152 = v141;
  long long v153 = v142;
  long long v154 = v143;
  long long v148 = v137;
  long long v149 = v138;
  long long v150 = v139;
  long long v151 = v140;
  long long v146 = v135;
  long long v147 = v136;
  char v144 = 0;
  char v49 = static Edge.Set.vertical.getter();
  if (qword_100517F70 != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  long long v117 = v152;
  long long v118 = v153;
  long long v119 = v154;
  long long v113 = v148;
  long long v114 = v149;
  long long v115 = v150;
  long long v116 = v151;
  long long v111 = v146;
  long long v112 = v147;
  *(_DWORD *)uint64_t v121 = *(_DWORD *)v145;
  *(_DWORD *)&v121[3] = *(_DWORD *)&v145[3];
  char v155 = 0;
  char v120 = v40;
  uint64_t v122 = v42;
  uint64_t v123 = v44;
  uint64_t v124 = v46;
  uint64_t v125 = v48;
  char v126 = v144;
  *(_DWORD *)v127 = v157[0];
  *(_DWORD *)&v127[3] = *(_DWORD *)((char *)v157 + 3);
  char v128 = v49;
  *(_DWORD *)&v129[3] = *(_DWORD *)&v156[3];
  *(_DWORD *)v129 = *(_DWORD *)v156;
  uint64_t v130 = v50;
  uint64_t v131 = v51;
  uint64_t v132 = v52;
  uint64_t v133 = v53;
  char v134 = 0;
  sub_10000F214(&qword_100525768);
  sub_100218B8C(&qword_100525770, &qword_100525768, (void (*)(void))sub_100218C08);
  uint64_t v54 = (uint64_t)v99;
  View.accessibilityIdentifier(_:)();
  sub_1000813C8((uint64_t)&v135);
  uint64_t v55 = static VerticalAlignment.center.getter();
  uint64_t v56 = (uint64_t)v92;
  uint64_t *v92 = v55;
  *(void *)(v56 + 8) = 0;
  *(unsigned char *)(v56 + 16) = 0;
  uint64_t v57 = sub_10000F214(&qword_100525788);
  sub_100214E94(v104, (void *)(v56 + *(int *)(v57 + 44)));
  int v58 = static HierarchicalShapeStyle.primary.getter();
  uint64_t v59 = v93;
  sub_10000FB74(v56, v93, &qword_100525730);
  *(_DWORD *)(v59 + *(int *)(v91 + 36)) = v58;
  sub_10000FBD8(v56, &qword_100525730);
  uint64_t v60 = static Alignment.center.getter();
  uint64_t v61 = v95;
  sub_100226B6C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v95, 0.0, 1, 0.0, 1, v60, v62);
  sub_10000FBD8(v59, &qword_100525738);
  uint64_t v64 = (uint64_t)v107;
  uint64_t v63 = v108;
  uint64_t v65 = (uint64_t)v101;
  if (qword_100517F60 != -1) {
    swift_once();
  }
  char v66 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  uint64_t v72 = v71;
  uint64_t v74 = v73;
  sub_10000FB74(v61, v65, &qword_100525740);
  uint64_t v75 = v65 + *(int *)(v94 + 36);
  *(unsigned char *)uint64_t v75 = v66;
  *(void *)(v75 + 8) = v68;
  *(void *)(v75 + 16) = v70;
  *(void *)(v75 + 24) = v72;
  *(void *)(v75 + 32) = v74;
  *(unsigned char *)(v75 + 40) = 0;
  sub_10000FBD8(v61, &qword_100525740);
  sub_10027CA80(v64);
  uint64_t v76 = v105;
  uint64_t v77 = v109;
  (*(void (**)(char *, void, uint64_t))(v63 + 104))(v105, enum case for ColorScheme.light(_:), v109);
  char v78 = static ColorScheme.== infix(_:_:)();
  uint64_t v79 = *(void (**)(void, void))(v63 + 8);
  v79(v76, v77);
  if (v78) {
    static Color.black.getter();
  }
  else {
    static Color.white.getter();
  }
  uint64_t v80 = Color.opacity(_:)();
  swift_release();
  v79(v64, v77);
  char v81 = static Edge.Set.all.getter();
  uint64_t v82 = v100;
  sub_10000FB74(v65, v100, &qword_100525748);
  uint64_t v83 = v82 + *(int *)(v98 + 36);
  *(void *)uint64_t v83 = v80;
  *(unsigned char *)(v83 + 8) = v81;
  sub_10000FBD8(v65, &qword_100525748);
  uint64_t v84 = v96;
  sub_10000FB74(v82, v96, &qword_100525750);
  *(_WORD *)(v84 + *(int *)(v97 + 36)) = 256;
  sub_10000FBD8(v82, &qword_100525750);
  uint64_t v85 = v103;
  sub_10000FC34(v84, v103, &qword_100525758);
  uint64_t v86 = v102;
  sub_10000FB74(v54, v102, &qword_100525760);
  uint64_t v87 = v106;
  sub_10000FB74(v85, v106, &qword_100525758);
  uint64_t v88 = v110;
  sub_10000FB74(v86, v110, &qword_100525760);
  uint64_t v89 = sub_10000F214(&qword_100525790);
  sub_10000FB74(v87, v88 + *(int *)(v89 + 48), &qword_100525758);
  sub_10000FBD8(v85, &qword_100525758);
  sub_10000FBD8(v54, &qword_100525760);
  sub_10000FBD8(v87, &qword_100525758);
  return sub_10000FBD8(v86, &qword_100525760);
}

uint64_t sub_100214E94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v95 = a2;
  uint64_t v93 = sub_10000F214(&qword_100525798);
  uint64_t v94 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v88 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_1005257A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v87 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_10000F214(&qword_1005257A8);
  __chkstk_darwin(v90);
  uint64_t v89 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000F214(&qword_1005257B0);
  uint64_t v108 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v102 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v103 = (char *)&v73 - v9;
  uint64_t AloudResultView = type metadata accessor for ReadAloudResultView();
  uint64_t v11 = *(void *)(AloudResultView - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(AloudResultView - 8);
  uint64_t v13 = sub_10000F214(&qword_1005257B8);
  uint64_t v105 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_1005257C0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_10000F214(&qword_1005257C8);
  __chkstk_darwin(v96);
  uint64_t v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_10000F214(&qword_1005257D0);
  uint64_t v106 = *(void **)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v91 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v100 = (char *)&v73 - v23;
  __chkstk_darwin(v24);
  uint64_t v104 = (char *)&v73 - v25;
  __chkstk_darwin(v26);
  uint64_t v107 = (char *)&v73 - v27;
  uint64_t v74 = a1;
  uint64_t v76 = (uint64_t)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10021891C(a1, v76, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
  uint64_t v28 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v29 = (v28 + 16) & ~v28;
  uint64_t v99 = v29 + v12;
  uint64_t v98 = v28 | 7;
  uint64_t v30 = swift_allocObject();
  uint64_t v75 = v29;
  sub_1002188B4((uint64_t)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v30 + v29, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
  uint64_t v111 = a1;
  uint64_t v86 = sub_10000F214(&qword_1005257D8);
  unint64_t v85 = sub_100218C5C();
  char v78 = v15;
  Button.init(action:label:)();
  uint64_t v84 = sub_100013AA8(&qword_1005257F8, &qword_1005257B8);
  uint64_t v31 = (uint64_t)v18;
  uint64_t v77 = v18;
  uint64_t v82 = v13;
  View.accessibilityIdentifier(_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v105 + 8);
  v105 += 8;
  uint64_t v83 = v32;
  v32(v15, v13);
  uint64_t v33 = static Font.title.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74(v31, (uint64_t)v20, &qword_1005257C0);
  char v35 = (uint64_t *)&v20[*(int *)(v96 + 36)];
  *char v35 = KeyPath;
  v35[1] = v33;
  sub_10000FBD8(v31, &qword_1005257C0);
  unint64_t v81 = sub_100218D04();
  unint64_t v97 = sub_100218E90();
  uint64_t v36 = v104;
  View.buttonStyle<A>(_:)();
  sub_10000FBD8((uint64_t)v20, &qword_1005257C8);
  uint64_t v37 = (void (*)(char *, char *, uint64_t))v106[4];
  uint64_t v79 = v106 + 4;
  uint64_t v80 = v37;
  v37(v107, v36, v101);
  uint64_t v38 = v74;
  uint64_t v39 = v76;
  sub_10021891C(v74, v76, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
  uint64_t v40 = swift_allocObject();
  sub_1002188B4(v39, v40 + v29, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
  uint64_t v110 = v38;
  uint64_t v41 = v88;
  Button.init(action:label:)();
  sub_100013AA8(&qword_100525818, &qword_100525798);
  uint64_t v42 = (uint64_t)v87;
  uint64_t v43 = v93;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v41, v43);
  uint64_t v44 = static Font.largeTitle.getter();
  uint64_t v45 = swift_getKeyPath();
  uint64_t v46 = v89;
  sub_10000FB74(v42, v89, &qword_1005257A0);
  uint64_t v47 = (uint64_t *)(v46 + *(int *)(v90 + 36));
  *uint64_t v47 = v45;
  v47[1] = v44;
  sub_10000FBD8(v42, &qword_1005257A0);
  sub_100218F74();
  uint64_t v48 = v102;
  View.buttonStyle<A>(_:)();
  sub_10000FBD8(v46, &qword_1005257A8);
  char v49 = v103;
  uint64_t v50 = v92;
  (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v103, v48, v92);
  sub_10021891C(v38, v39, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
  uint64_t v51 = swift_allocObject();
  sub_1002188B4(v39, v51 + v75, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
  uint64_t v109 = v38;
  uint64_t v52 = v78;
  Button.init(action:label:)();
  uint64_t v53 = (uint64_t)v77;
  uint64_t v54 = v82;
  View.accessibilityIdentifier(_:)();
  v83(v52, v54);
  uint64_t v55 = static Font.title.getter();
  uint64_t v56 = swift_getKeyPath();
  sub_10000FB74(v53, (uint64_t)v20, &qword_1005257C0);
  uint64_t v57 = (uint64_t *)&v20[*(int *)(v96 + 36)];
  *uint64_t v57 = v56;
  v57[1] = v55;
  sub_10000FBD8(v53, &qword_1005257C0);
  int v58 = v100;
  View.buttonStyle<A>(_:)();
  sub_10000FBD8((uint64_t)v20, &qword_1005257C8);
  uint64_t v59 = v104;
  uint64_t v60 = v101;
  v80(v104, v58, v101);
  uint64_t v61 = (void (*)(char *, char *, uint64_t))v106[2];
  uint64_t v62 = v60;
  v61(v58, v107, v60);
  uint64_t v105 = *(void *)(v108 + 16);
  ((void (*)(char *, char *, uint64_t))v105)(v48, v49, v50);
  uint64_t v63 = v91;
  v61(v91, v59, v60);
  uint64_t v64 = v95;
  *uint64_t v95 = 0;
  *((unsigned char *)v64 + 8) = 1;
  uint64_t v65 = (int *)sub_10000F214(&qword_100525830);
  v61((char *)v64 + v65[12], v58, v62);
  char v66 = (char *)v64 + v65[16];
  *(void *)char v66 = 0;
  v66[8] = 1;
  uint64_t v67 = v102;
  ((void (*)(char *, char *, uint64_t))v105)((char *)v64 + v65[20], v102, v50);
  uint64_t v68 = (char *)v64 + v65[24];
  *(void *)uint64_t v68 = 0;
  v68[8] = 1;
  v61((char *)v64 + v65[28], v63, v62);
  uint64_t v69 = (char *)v64 + v65[32];
  *(void *)uint64_t v69 = 0;
  v69[8] = 1;
  uint64_t v70 = (void (*)(char *, uint64_t))v106[1];
  v70(v104, v62);
  uint64_t v71 = *(void (**)(char *, uint64_t))(v108 + 8);
  v71(v103, v50);
  v70(v107, v62);
  v70(v63, v62);
  v71(v67, v50);
  return ((uint64_t (*)(char *, uint64_t))v70)(v100, v62);
}

uint64_t sub_100215ADC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for ReadAloudResultView() + 24));
  swift_getKeyPath();
  sub_1002193AC(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  [*(id *)(v1 + 40) sendCommand:18 options:0 completion:0];
  sub_10018EFD0();
  swift_retain();
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  State.wrappedValue.setter();
  return swift_release();
}

uint64_t sub_100215C24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = sub_10000F214(&qword_1005257F0);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SymbolEffectOptions();
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RotateSymbolEffect();
  uint64_t v23 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Image.init(_internalSystemName:)();
  RotateSymbolEffect.init()();
  static SymbolEffectOptions.speed(_:)();
  uint64_t v14 = (char *)(a1 + *(int *)(type metadata accessor for ReadAloudResultView() + 28));
  char v15 = *v14;
  uint64_t v16 = *((void *)v14 + 1);
  char v25 = v15;
  uint64_t v26 = v16;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  char v17 = v27;
  sub_1002193AC(&qword_100525838, (void (*)(uint64_t))&type metadata accessor for RotateSymbolEffect);
  dispatch thunk of SymbolEffect.configuration.getter();
  uint64_t v18 = v22;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v6[*(int *)(v4 + 44)], v9, v22);
  v6[*(int *)(v4 + 48)] = v17;
  uint64_t v19 = sub_10000F214(&qword_1005257D8);
  uint64_t v20 = v24;
  sub_10000FB74((uint64_t)v6, (uint64_t)v24 + *(int *)(v19 + 36), &qword_1005257F0);
  *uint64_t v20 = v13;
  swift_retain();
  sub_10000FBD8((uint64_t)v6, &qword_1005257F0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
  return swift_release();
}

uint64_t sub_100215F14@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ReadAloudResultView();
  swift_getKeyPath();
  sub_1002193AC(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = Image.init(_internalSystemName:)();
  *a1 = result;
  return result;
}

uint64_t sub_10021600C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for ReadAloudResultView() + 24));
  swift_getKeyPath();
  sub_1002193AC(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  [*(id *)(v1 + 40) sendCommand:17 options:0 completion:0];
  sub_10018EFD0();
  swift_retain();
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  State.wrappedValue.setter();
  return swift_release();
}

uint64_t sub_100216154@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = sub_10000F214(&qword_1005257F0);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SymbolEffectOptions();
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RotateSymbolEffect();
  uint64_t v23 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Image.init(_internalSystemName:)();
  RotateSymbolEffect.init()();
  static SymbolEffectOptions.speed(_:)();
  uint64_t v14 = (char *)(a1 + *(int *)(type metadata accessor for ReadAloudResultView() + 32));
  char v15 = *v14;
  uint64_t v16 = *((void *)v14 + 1);
  char v25 = v15;
  uint64_t v26 = v16;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  char v17 = v27;
  sub_1002193AC(&qword_100525838, (void (*)(uint64_t))&type metadata accessor for RotateSymbolEffect);
  dispatch thunk of SymbolEffect.configuration.getter();
  uint64_t v18 = v22;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v6[*(int *)(v4 + 44)], v9, v22);
  v6[*(int *)(v4 + 48)] = v17;
  uint64_t v19 = sub_10000F214(&qword_1005257D8);
  uint64_t v20 = v24;
  sub_10000FB74((uint64_t)v6, (uint64_t)v24 + *(int *)(v19 + 36), &qword_1005257F0);
  *uint64_t v20 = v13;
  swift_retain();
  sub_10000FBD8((uint64_t)v6, &qword_1005257F0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
  return swift_release();
}

uint64_t sub_100216444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v12 = *(void *)(a1 + *(int *)(type metadata accessor for ReadAloudResultView() + 24));
  swift_getKeyPath();
  v31[0] = v12;
  sub_1002193AC(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if ((*(unsigned char *)(v12 + 16) & 1) == 0)
  {
    if (qword_100517D90 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_10021681C();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if (qword_100517E78 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10000F378(v17, (uint64_t)qword_10055E280);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v29 = a4;
      uint64_t v20 = swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134218242;
      uint64_t v27 = a7;
      uint64_t v28 = v14;
      sub_100335A80();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      if (v16) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 0x3E656E6F6E3CLL;
      }
      if (v16) {
        unint64_t v22 = v16;
      }
      else {
        unint64_t v22 = 0xE600000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v23 = v21;
      a7 = v27;
      sub_1003806B0(v23, v22, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v14 = v28;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Preparing to read %ld token long text with detected best locale: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v29;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v24 = 0x53552D6E65;
    if (v16)
    {
      uint64_t v24 = v14;
      uint64_t v25 = v16;
    }
    else
    {
      uint64_t v25 = 0xE500000000000000;
    }
    v31[0] = a6;
    v31[1] = a7;
    v31[2] = a4;
    v31[3] = a5;
    v31[4] = v24;
    v31[5] = v25;
    v31[6] = (uint64_t)a8;
    swift_bridgeObjectRetain();
    id v26 = a8;
    swift_bridgeObjectRetain();
    sub_10018E4CC((uint64_t)v31);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10021681C()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = (void *)sub_1002189EC(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = v1[2];
  if (!v2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v3 = static Locale.preferredLanguages.getter();
  uint64_t v17 = *(void *)(v3 + 16);
  if (v17)
  {
    uint64_t v4 = 0;
    uint64_t v18 = v3 + 32;
    uint64_t v5 = v1[4];
    uint64_t v6 = v1[5];
    while (1)
    {
      uint64_t v7 = (uint64_t *)(v18 + 16 * v4);
      uint64_t v9 = *v7;
      uint64_t v8 = v7[1];
      if (v5 == *v7 && v6 == v8) {
        goto LABEL_28;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_27;
      }
      if (v2 != 1)
      {
        BOOL v11 = v1[6] == v9 && v1[7] == v8;
        if (v11 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_27:
          uint64_t v5 = v9;
LABEL_28:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
        if (v2 != 2) {
          break;
        }
      }
LABEL_4:
      if (++v4 == v17) {
        goto LABEL_29;
      }
    }
    uint64_t v13 = v1 + 9;
    uint64_t v14 = 2;
    while (1)
    {
      uint64_t v15 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        break;
      }
      if (*(v13 - 1) == v9 && *v13 == v8) {
        goto LABEL_27;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_27;
      }
      v13 += 2;
      ++v14;
      if (v15 == v2) {
        goto LABEL_4;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
LABEL_29:
  uint64_t result = swift_bridgeObjectRelease();
  if (v1[2])
  {
    uint64_t v5 = v1[4];
    swift_bridgeObjectRetain();
LABEL_31:
    swift_bridgeObjectRelease();
    return v5;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1002169FC(uint64_t result)
{
  if ((_BYTE)result)
  {
    if (result != 1)
    {
      type metadata accessor for ReadAloudResultView();
      return sub_10018EFD0();
    }
  }
  else
  {
    type metadata accessor for ReadAloudResultView();
    return sub_10018F994();
  }
  return result;
}

uint64_t sub_100216A5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v1 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051C1F0);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051C1F8);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000F214(&qword_10051C200) - 8;
  __chkstk_darwin(v39);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000F214(&qword_10051C208) - 8;
  __chkstk_darwin(v41);
  uint64_t v40 = (uint64_t)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  char v16 = static Edge.Set.all.getter();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v8, v4, v1);
  uint64_t v17 = &v8[*(int *)(v6 + 44)];
  *uint64_t v17 = v16;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  v17[40] = 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  static Color.black.getter();
  ButtonStyleConfiguration.isPressed.getter();
  uint64_t v18 = Color.opacity(_:)();
  swift_release();
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v19 = 1.1;
  }
  else {
    double v19 = 0.7;
  }
  static UnitPoint.center.getter();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v24 = static Alignment.center.getter();
  uint64_t v26 = v25;
  sub_10000FB74((uint64_t)v8, (uint64_t)v12, &qword_10051C1F0);
  uint64_t v27 = &v12[*(int *)(v10 + 44)];
  *(void *)uint64_t v27 = v18;
  *((_WORD *)v27 + 4) = 256;
  *((double *)v27 + 2) = v19;
  *((double *)v27 + 3) = v19;
  *((void *)v27 + 4) = v21;
  *((void *)v27 + 5) = v23;
  *((void *)v27 + 6) = v24;
  *((void *)v27 + 7) = v26;
  sub_10000FBD8((uint64_t)v8, &qword_10051C1F0);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v28 = 0.8;
  }
  else {
    double v28 = 1.0;
  }
  static UnitPoint.center.getter();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  sub_10000FB74((uint64_t)v12, (uint64_t)v14, &qword_10051C1F8);
  uint64_t v33 = &v14[*(int *)(v39 + 44)];
  *(double *)uint64_t v33 = v28;
  *((double *)v33 + 1) = v28;
  *((void *)v33 + 2) = v30;
  *((void *)v33 + 3) = v32;
  sub_10000FBD8((uint64_t)v12, &qword_10051C1F8);
  uint64_t v34 = static Animation.spring(response:dampingFraction:blendDuration:)();
  char v35 = ButtonStyleConfiguration.isPressed.getter();
  uint64_t v36 = v40;
  sub_10000FB74((uint64_t)v14, v40, &qword_10051C200);
  uint64_t v37 = v36 + *(int *)(v41 + 44);
  *(void *)uint64_t v37 = v34;
  *(unsigned char *)(v37 + 8) = v35 & 1;
  sub_10000FBD8((uint64_t)v14, &qword_10051C200);
  return sub_10000FC34(v36, v42, &qword_10051C208);
}

uint64_t sub_100216E5C(uint64_t a1, uint64_t a2)
{
  sub_100050794(a1, (uint64_t)&v35);
  uint64_t v3 = v36;
  if (!v36)
  {
    sub_100050794(a2, (uint64_t)&v26);
    char v16 = v27 == 0;
    return v16 & 1;
  }
  uint64_t v4 = v35;
  uint64_t v5 = v37;
  uint64_t v6 = v38;
  uint64_t v7 = v39;
  uint64_t v8 = v40;
  uint64_t v10 = v41;
  uint64_t v9 = v42;
  uint64_t v11 = v43;
  sub_100050794(a2, (uint64_t)&v26);
  if (!v27) {
    goto LABEL_18;
  }
  uint64_t v25 = v10;
  uint64_t v22 = v11;
  uint64_t v23 = v9;
  uint64_t v13 = v28;
  uint64_t v12 = v29;
  uint64_t v14 = v30;
  uint64_t v15 = v31;
  uint64_t v24 = v32;
  uint64_t v20 = v34;
  uint64_t v21 = v33;
  if (v4 == v26 && v3 == v27 || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v5 == v13 && v6 == v12 || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (v7 == v14 && v8 == v15 || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        type metadata accessor for CGImage(0);
        sub_1002193AC(&qword_1005255E8, type metadata accessor for CGImage);
        id v17 = v25;
        id v18 = v24;
        if (static _CFObject.== infix(_:_:)())
        {
          if (v23 == v21 && v22 == v20)
          {

            char v16 = 1;
          }
          else
          {
            char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          return v16 & 1;
        }

LABEL_18:
        char v16 = 0;
      }
    }
  }
  return v16 & 1;
}

unint64_t destroy for ReadAloudState(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ReadAloudState(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v5;
    uint64_t v7 = *(void **)(a2 + 48);
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v8 = v7;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ReadAloudState(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = a2[3];
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = a2[5];
      id v8 = (void *)a2[6];
      *(void *)(a1 + 48) = v8;
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v9 = v8;
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v10 = *((_OWORD *)a2 + 1);
    long long v11 = *((_OWORD *)a2 + 2);
    long long v12 = *((_OWORD *)a2 + 3);
    *(void *)(a1 + 64) = a2[8];
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 16) = v10;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)a2[6];
  uint64_t v6 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v5;
  id v7 = v5;

  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ReadAloudState(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_5:
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReadAloudState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ReadAloudState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

double sub_1002174B0(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReadAloudState()
{
  return &type metadata for ReadAloudState;
}

unint64_t sub_1002174F8()
{
  unint64_t result = qword_1005255F0;
  if (!qword_1005255F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005255F0);
  }
  return result;
}

uint64_t *sub_10021754C(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    unint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *unint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    long long v10 = (uint64_t *)((char *)v4 + v9);
    long long v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    if (v12)
    {
      *long long v10 = *v11;
      v10[1] = v12;
      uint64_t v13 = v11[3];
      v10[2] = v11[2];
      v10[3] = v13;
      uint64_t v14 = v11[5];
      v10[4] = v11[4];
      v10[5] = v14;
      char v16 = (void *)v11[6];
      uint64_t v15 = v11[7];
      v10[6] = v16;
      v10[7] = v15;
      v10[8] = v11[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v17 = v16;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v18 = *((_OWORD *)v11 + 3);
      *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
      *((_OWORD *)v10 + 3) = v18;
      v10[8] = v11[8];
      long long v19 = *((_OWORD *)v11 + 1);
      *(_OWORD *)long long v10 = *(_OWORD *)v11;
      *((_OWORD *)v10 + 1) = v19;
    }
    uint64_t v20 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    *uint64_t v21 = *v22;
    *((void *)v21 + 1) = *((void *)v22 + 1);
    uint64_t v23 = a3[8];
    uint64_t v24 = (char *)v4 + v23;
    uint64_t v25 = (char *)a2 + v23;
    *uint64_t v24 = *v25;
    *((void *)v24 + 1) = *((void *)v25 + 1);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100217734(uint64_t a1, uint64_t a2)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (*(void *)(v5 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_release();
}

void *sub_100217830(void *a1, void *a2, int *a3)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  if (v10)
  {
    *uint64_t v8 = *v9;
    v8[1] = v10;
    uint64_t v11 = v9[3];
    v8[2] = v9[2];
    int64_t v8[3] = v11;
    uint64_t v12 = v9[5];
    v8[4] = v9[4];
    v8[5] = v12;
    uint64_t v14 = (void *)v9[6];
    uint64_t v13 = v9[7];
    v8[6] = v14;
    v8[7] = v13;
    v8[8] = v9[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *((_OWORD *)v9 + 3);
    *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
    *((_OWORD *)v8 + 3) = v16;
    v8[8] = v9[8];
    long long v17 = *((_OWORD *)v9 + 1);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v17;
  }
  uint64_t v18 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  long long v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *long long v19 = *v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  uint64_t v21 = a3[8];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  *uint64_t v22 = *v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1002179CC(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = *(void *)((char *)a1 + v7 + 8);
  uint64_t v11 = *(void *)((char *)a2 + v7 + 8);
  if (v10)
  {
    if (v11)
    {
      *uint64_t v8 = *v9;
      v8[1] = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8[2] = v9[2];
      int64_t v8[3] = v9[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8[4] = v9[4];
      v8[5] = v9[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v12 = (void *)v9[6];
      uint64_t v13 = (void *)v8[6];
      v8[6] = v12;
      id v14 = v12;

      v8[7] = v9[7];
      v8[8] = v9[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10000FBD8((uint64_t)v8, &qword_1005255F8);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      long long v18 = *((_OWORD *)v9 + 2);
      long long v17 = *((_OWORD *)v9 + 3);
      long long v19 = *((_OWORD *)v9 + 1);
      v8[8] = v9[8];
      *((_OWORD *)v8 + 2) = v18;
      *((_OWORD *)v8 + 3) = v17;
      *((_OWORD *)v8 + 1) = v19;
    }
  }
  else if (v11)
  {
    *uint64_t v8 = *v9;
    v8[1] = v9[1];
    v8[2] = v9[2];
    int64_t v8[3] = v9[3];
    v8[4] = v9[4];
    v8[5] = v9[5];
    id v15 = (void *)v9[6];
    v8[6] = v15;
    v8[7] = v9[7];
    v8[8] = v9[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v15;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    long long v20 = *((_OWORD *)v9 + 1);
    long long v21 = *((_OWORD *)v9 + 2);
    long long v22 = *((_OWORD *)v9 + 3);
    v8[8] = v9[8];
    *((_OWORD *)v8 + 2) = v21;
    *((_OWORD *)v8 + 3) = v22;
    *((_OWORD *)v8 + 1) = v20;
  }
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v23 = a3[7];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  *uint64_t v24 = *v25;
  *((void *)v24 + 1) = *((void *)v25 + 1);
  swift_retain();
  swift_release();
  uint64_t v26 = a3[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  *uint64_t v27 = *v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_100217C9C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *((void *)v10 + 8) = *((void *)v11 + 8);
  long long v12 = *((_OWORD *)v11 + 3);
  *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
  *((_OWORD *)v10 + 3) = v12;
  long long v13 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v13;
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v14 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  return a1;
}

char *sub_100217DA4(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v6 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = (uint64_t)&a1[v8];
  uint64_t v10 = &a2[v8];
  if (!*(void *)&a1[v8 + 8]) {
    goto LABEL_9;
  }
  uint64_t v11 = *((void *)v10 + 1);
  if (!v11)
  {
    sub_10000FBD8(v9, &qword_1005255F8);
LABEL_9:
    long long v16 = *((_OWORD *)v10 + 3);
    *(_OWORD *)(v9 + 32) = *((_OWORD *)v10 + 2);
    *(_OWORD *)(v9 + 48) = v16;
    *(void *)(v9 + 64) = *((void *)v10 + 8);
    long long v17 = *((_OWORD *)v10 + 1);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v17;
    goto LABEL_10;
  }
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *((void *)v10 + 3);
  *(void *)(v9 + 16) = *((void *)v10 + 2);
  *(void *)(v9 + 24) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v10 + 5);
  *(void *)(v9 + 32) = *((void *)v10 + 4);
  *(void *)(v9 + 40) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void **)(v9 + 48);
  *(void *)(v9 + 48) = *((void *)v10 + 6);

  uint64_t v15 = *((void *)v10 + 8);
  *(void *)(v9 + 56) = *((void *)v10 + 7);
  *(void *)(v9 + 64) = v15;
  swift_bridgeObjectRelease();
LABEL_10:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[7];
  long long v19 = &a1[v18];
  long long v20 = &a2[v18];
  *long long v19 = *v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_release();
  uint64_t v21 = a3[8];
  long long v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *long long v22 = *v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_release();
  return a1;
}

uint64_t sub_100217F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100217F90);
}

uint64_t sub_100217F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100218054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100218068);
}

uint64_t sub_100218068(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214(&qword_100522CF0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ReadAloudResultView()
{
  uint64_t result = qword_100525658;
  if (!qword_100525658) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100218174()
{
  sub_100027A88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100218224()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100218248()
{
  unint64_t result = qword_1005256E8;
  if (!qword_1005256E8)
  {
    sub_10000F69C(&qword_1005256B8);
    sub_100218B8C(&qword_1005256F0, &qword_1005256B0, (void (*)(void))sub_1002182F0);
    sub_1000805F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005256E8);
  }
  return result;
}

unint64_t sub_1002182F0()
{
  unint64_t result = qword_1005256F8;
  if (!qword_1005256F8)
  {
    sub_10000F69C(&qword_1005256A8);
    sub_100013AA8(&qword_100525700, &qword_1005256A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005256F8);
  }
  return result;
}

unint64_t sub_100218390()
{
  unint64_t result = qword_100525708;
  if (!qword_100525708)
  {
    sub_10000F69C(&qword_1005256E0);
    sub_10021843C();
    sub_1002193AC((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525708);
  }
  return result;
}

unint64_t sub_10021843C()
{
  unint64_t result = qword_100525710;
  if (!qword_100525710)
  {
    sub_10000F69C(&qword_1005256D8);
    sub_1002193AC(&qword_100525718, (void (*)(uint64_t))type metadata accessor for LatencyTextStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525710);
  }
  return result;
}

unint64_t sub_1002184E8()
{
  unint64_t result = qword_100525720;
  if (!qword_100525720)
  {
    sub_10000F69C(&qword_1005256C8);
    sub_1002193AC(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    sub_100218248();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525720);
  }
  return result;
}

uint64_t sub_100218594()
{
  uint64_t AloudResultView = type metadata accessor for ReadAloudResultView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(AloudResultView - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AloudResultView - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(AloudResultView - 8) + 64);
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v0 + v2, v4);
  }
  else
  {
    swift_release();
  }
  unint64_t v5 = v0 + v2 + *(int *)(AloudResultView + 20);
  if (*(void *)(v5 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_release(*(id *)(v0
                     + ((((((((v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                       + 23) & 0xFFFFFFFFFFFFFFF8)));

  return swift_deallocObject();
}

uint64_t sub_100218768()
{
  uint64_t v1 = *(void *)(type metadata accessor for ReadAloudResultView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v3 + 8);
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + v4 + 8);
  uint64_t v10 = *(void *)(v0 + v5);
  uint64_t v11 = *(void *)(v0 + v5 + 8);
  uint64_t v12 = *(void **)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_100216444(v0 + v2, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_100218828()
{
  return sub_100218F00(sub_10018ECAC);
}

uint64_t sub_100218844(uint64_t a1)
{
  type metadata accessor for ReadAloudResultView();

  return sub_1002169FC(a1);
}

uint64_t sub_1002188B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10021891C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100218984(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002189EC(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = result + 40;
    uint64_t v4 = -(uint64_t)v1;
    uint64_t v13 = result + 40;
    unint64_t v14 = *(void *)(result + 16);
    do
    {
      if (v2 <= v1) {
        unint64_t v5 = v1;
      }
      else {
        unint64_t v5 = v2;
      }
      uint64_t v6 = -(uint64_t)v5;
      for (int64_t i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
      {
        if (v6 + v2 == 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v8 = *(i - 1);
        uint64_t v9 = *i;
        sub_100094A28();
        sub_100094A7C();
        swift_bridgeObjectRetain();
        if (BidirectionalCollection<>.starts<A>(with:)()) {
          break;
        }
        unint64_t result = swift_bridgeObjectRelease();
        ++v2;
        if (v4 + v2 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
      }
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        unint64_t result = sub_1000407B0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      uint64_t v3 = v13;
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        unint64_t result = sub_1000407B0(v10 > 1, v11 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v8;
      v12[5] = v9;
      unint64_t v1 = v14;
    }
    while (v4 + v2);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_100218B8C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100218C08()
{
  return sub_100218B8C(&qword_100525778, &qword_100525780, (void (*)(void))sub_100127C3C);
}

uint64_t sub_100218C3C()
{
  return sub_1002191CC(sub_100215ADC);
}

uint64_t sub_100218C54@<X0>(uint64_t *a1@<X8>)
{
  return sub_100215C24(*(void *)(v1 + 16), a1);
}

unint64_t sub_100218C5C()
{
  unint64_t result = qword_1005257E0;
  if (!qword_1005257E0)
  {
    sub_10000F69C(&qword_1005257D8);
    sub_100013AA8(&qword_1005257E8, &qword_1005257F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005257E0);
  }
  return result;
}

unint64_t sub_100218D04()
{
  unint64_t result = qword_100525800;
  if (!qword_100525800)
  {
    sub_10000F69C(&qword_1005257C8);
    sub_100218DC4(&qword_100525808, &qword_1005257C0, &qword_1005257F8, &qword_1005257B8);
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525800);
  }
  return result;
}

uint64_t sub_100218DC4(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    sub_100013AA8(a3, a4);
    sub_1002193AC((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100218E90()
{
  unint64_t result = qword_100525810;
  if (!qword_100525810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525810);
  }
  return result;
}

uint64_t sub_100218EE8()
{
  return sub_100218F00((uint64_t (*)(void))sub_10018E2F8);
}

uint64_t sub_100218F00(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100218F6C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100215F14(a1);
}

unint64_t sub_100218F74()
{
  unint64_t result = qword_100525820;
  if (!qword_100525820)
  {
    sub_10000F69C(&qword_1005257A8);
    sub_100218DC4(&qword_100525828, &qword_1005257A0, &qword_100525818, &qword_100525798);
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525820);
  }
  return result;
}

uint64_t sub_100219038()
{
  uint64_t AloudResultView = type metadata accessor for ReadAloudResultView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(AloudResultView - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AloudResultView - 8) + 80);
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  unint64_t v4 = v0 + v2 + *(int *)(AloudResultView + 20);
  if (*(void *)(v4 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002191B4()
{
  return sub_1002191CC(sub_10021600C);
}

uint64_t sub_1002191CC(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for ReadAloudResultView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_100219240@<X0>(uint64_t *a1@<X8>)
{
  return sub_100216154(*(void *)(v1 + 16), a1);
}

ValueMetadata *type metadata accessor for ReadAloudButtonStyle()
{
  return &type metadata for ReadAloudButtonStyle;
}

unint64_t sub_100219264()
{
  unint64_t result = qword_100525840;
  if (!qword_100525840)
  {
    sub_10000F69C(&qword_100525848);
    sub_100218390();
    sub_1002184E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525840);
  }
  return result;
}

uint64_t sub_1002192E0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100219300()
{
  unint64_t result = qword_10051C228;
  if (!qword_10051C228)
  {
    sub_10000F69C(&qword_10051C1F0);
    sub_1002193AC((unint64_t *)&qword_10051BE38, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C228);
  }
  return result;
}

uint64_t sub_1002193AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002193F4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100219468()
{
  uint64_t v1 = v0;
  uint64_t v70 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
  uint64_t v69 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo();
  uint64_t v68 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  char v66 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason();
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v75 = v4;
  __chkstk_darwin(v4);
  uint64_t v71 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo();
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for GenerativeModelsAvailability.Availability();
  uint64_t v79 = *(void *)(v9 - 8);
  uint64_t v80 = v9;
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  uint64_t v78 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for GenerativeModelsAvailability();
  uint64_t v77 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  long long v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager_callManager + 24);
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager_callManager + 32);
  sub_10000F3B0((void *)(v0 + OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager_callManager), v18);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v19 + 8))(&v81, v18, v19);
  if (v82)
  {
    sub_1000321A8(&v81, (uint64_t)v83);
    uint64_t v20 = v84;
    uint64_t v21 = v85;
    sub_10000F3B0(v83, v84);
    LOBYTE(v20) = sub_1003FA3D8(v20, v21);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v83);
    if ((v20 & 1) == 0) {
      return 8;
    }
  }
  else
  {
    sub_10021A29C((uint64_t)&v81);
  }
  uint64_t v23 = OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager_montaraMDMRestricted;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager_montaraMDMRestricted)) {
    return 0;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (LOBYTE(v83[0]) == 1 && *(unsigned char *)(v1 + v23) != 1) {
    return 1;
  }
  id v24 = [self sharedPreferences];
  unsigned int v25 = [v24 assistantIsEnabled];

  if (!v25) {
    return 2;
  }
  type metadata accessor for UserDefaultsUtility();
  uint64_t v26 = swift_allocObject();
  ObservationRegistrar.init()();
  id v27 = [self standardUserDefaults];
  NSString v28 = String._bridgeToObjectiveC()();
  unsigned int v29 = [v27 BOOLForKey:v28];

  swift_setDeallocating();
  uint64_t v30 = v26 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
  uint64_t v31 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);
  swift_deallocClassInstance();
  if (!v29) {
    return 6;
  }
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifiers:)();
  static GenerativeModelsAvailability.current(parameters:)();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v14, v12);
  GenerativeModelsAvailability.availability.getter();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v17, v15);
  uint64_t v33 = v79;
  uint64_t v32 = v80;
  int v34 = (*(uint64_t (**)(char *, uint64_t))(v79 + 88))(v11, v80);
  if (v34 == enum case for GenerativeModelsAvailability.Availability.restricted(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v11, v32);
    uint64_t v36 = v72;
    uint64_t v35 = v73;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v8, v11, v73);
    uint64_t v37 = GenerativeModelsAvailability.Availability.RestrictedInfo.reasons.getter();
    uint64_t v39 = v74;
    uint64_t v38 = v75;
    uint64_t v40 = *(void (**)(char *, void, uint64_t))(v74 + 104);
    uint64_t v41 = (uint64_t)v71;
    v40(v71, enum case for GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason.siriAssetIsNotReady(_:), v75);
    char v42 = sub_1003DFF1C(v41, v37);
    uint64_t v43 = v41;
    swift_bridgeObjectRelease();
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v44(v43, v38);
    if (v42)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v35);
      return 4;
    }
    uint64_t v54 = v43;
    uint64_t v55 = GenerativeModelsAvailability.Availability.RestrictedInfo.reasons.getter();
    v40((char *)v54, enum case for GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason.assetIsNotReady(_:), v38);
    char v56 = sub_1003DFF1C(v54, v55);
    swift_bridgeObjectRelease();
    v44(v54, v38);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v35);
    BOOL v57 = (v56 & 1) == 0;
  }
  else
  {
    if (v34 != enum case for GenerativeModelsAvailability.Availability.unavailable(_:))
    {
      if (v34 != enum case for GenerativeModelsAvailability.Availability.available(_:))
      {
        if (qword_100517E00 != -1) {
          swift_once();
        }
        uint64_t v58 = type metadata accessor for Logger();
        sub_10000F378(v58, (uint64_t)qword_10055E118);
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "Unknown response from GMS availability", v61, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v32);
      }
      type metadata accessor for GenerativeAssistantSettingsUserDefaults();
      BOOL v57 = (static GenerativeAssistantSettingsUserDefaults.isEnabled()() & 1) == 0;
      unsigned int v62 = 7;
      unsigned int v63 = 9;
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v33 + 96))(v11, v32);
    uint64_t v45 = v68;
    uint64_t v46 = v66;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v66, v11, v76);
    uint64_t v47 = GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter();
    uint64_t v48 = v69;
    char v49 = *(void (**)(char *, void, uint64_t))(v69 + 104);
    uint64_t v50 = (uint64_t)v67;
    uint64_t v51 = v70;
    v49(v67, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.siriAssetIsNotReady(_:), v70);
    char v52 = sub_1003E0130(v50, v47);
    swift_bridgeObjectRelease();
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v53(v50, v51);
    if (v52)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v76);
      return 4;
    }
    uint64_t v64 = GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter();
    v49((char *)v50, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.assetIsNotReady(_:), v51);
    char v65 = sub_1003E0130(v50, v64);
    swift_bridgeObjectRelease();
    v53(v50, v51);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v76);
    BOOL v57 = (v65 & 1) == 0;
  }
  unsigned int v62 = 3;
  unsigned int v63 = 5;
LABEL_31:
  if (v57) {
    return v62;
  }
  else {
    return v63;
  }
}

uint64_t sub_100219EC8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager__montaraRestricted;
  uint64_t v2 = sub_10000F214(&qword_1005259A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10021A3F8(v0 + OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager_callManager);

  return swift_deallocClassInstance();
}

uint64_t sub_100219F7C()
{
  return type metadata accessor for AskAcmeRequirementManager();
}

uint64_t type metadata accessor for AskAcmeRequirementManager()
{
  uint64_t result = qword_100525890;
  if (!qword_100525890) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100219FD0()
{
  sub_10021A074();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10021A074()
{
  if (!qword_1005258A0)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005258A0);
    }
  }
}

id sub_10021A0CC()
{
  uint64_t v1 = sub_10000F214(&qword_1005259A0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = v0 + OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager__montaraRestricted;
  v12[15] = AFMontaraRestricted();
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v2 + 32))(v5, v4, v1);
  id result = [self sharedConnection];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager_montaraMDMRestricted;
    unsigned __int8 v9 = [result isExternalIntelligenceAllowed];

    *(unsigned char *)(v0 + v8) = v9 ^ 1;
    uint64_t v10 = (void *)(v0 + OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager_callManager);
    id v11 = [self sharedInstance];
    v10[3] = sub_10021A44C();
    v10[4] = &off_1004E8058;
    *uint64_t v10 = v11;
    return (id)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10021A25C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AskAcmeRequirementManager();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10021A29C(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100525998);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10021A2FC@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10021A380()
{
  return static Published.subscript.setter();
}

uint64_t sub_10021A3F8(uint64_t a1)
{
  return a1;
}

unint64_t sub_10021A44C()
{
  unint64_t result = qword_1005259A8;
  if (!qword_1005259A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005259A8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TamaleVisualEffect(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AskAcmeRequirement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10021A5E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AskAcmeRequirement()
{
  return &type metadata for AskAcmeRequirement;
}

unint64_t sub_10021A624()
{
  unint64_t result = qword_1005259B0;
  if (!qword_1005259B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005259B0);
  }
  return result;
}

uint64_t sub_10021A678()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_10021A69C()
{
  return 0x74706D6F7270;
}

uint64_t sub_10021A6B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x74706D6F7270 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10021A740(uint64_t a1)
{
  unint64_t v2 = sub_10021CC58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10021A77C(uint64_t a1)
{
  unint64_t v2 = sub_10021CC58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10021A7B8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_100525A28);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10021CC58();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_10021A930(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_100525A38);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10021CC58();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10021AA68(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_10021AA98@<X0>(uint64_t a1@<X8>)
{
  sub_10000F214(&qword_100525A58);
  Binding.projectedValue.getter();
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  uint64_t v2 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PromptEdit() + 20));
  *uint64_t v2 = swift_getKeyPath();
  sub_10000F214((uint64_t *)&unk_1005197E0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10021AB2C@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10021ABA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  sub_10000F214(&qword_100525A40);
  long long v5 = *((_OWORD *)v1 + 2);
  long long v9 = *((_OWORD *)v1 + 1);
  uint64_t v10 = v4;
  long long v11 = v5;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  long long v7 = *((_OWORD *)v1 + 2);
  *(_OWORD *)(v6 + 32) = *((_OWORD *)v1 + 1);
  *(_OWORD *)(v6 + 48) = v7;
  sub_100062328((uint64_t)&v10);
  swift_retain();
  sub_100110F38((uint64_t)&v9);
  sub_100110F38((uint64_t)&v11);
  sub_10000F214(&qword_100525A48);
  sub_100013AA8(&qword_100525A50, &qword_100525A48);
  return NavigationLink.init(destination:label:)();
}

uint64_t sub_10021ACD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  long long v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void (*)(void))__chkstk_darwin(v7);
  uint64_t v12 = (char *)&v15 - v11;
  v10();
  sub_100224E4C(v9, a3, a4);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, a3);
  sub_100224E4C(v12, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, a3);
}

uint64_t sub_10021AE0C(uint64_t a1)
{
  return sub_10021ACD8(*v1, v1[1], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_10021AE1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = static Overrides.tamaleAppDebugPromptOverridePath.getter();
  if (v6)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    URL.init(string:)();
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9) == 1)
    {
      sub_10000FBD8((uint64_t)v4, &qword_10051E070);
      if (qword_100517E70 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10000F378(v11, (uint64_t)qword_10055E268);
      swift_bridgeObjectRetain();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v24 = a1;
        uint64_t v15 = (uint8_t *)v14;
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_1003806B0(v7, v8, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error creating URL for %s", v15, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a1 = v24;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, 1, 1, v9);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v4, v9);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
  }
  else
  {
    if (qword_100517E70 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10000F378(v16, (uint64_t)qword_10055E268);
    long long v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No path set for tamaleAppDebugPromptOverridePath", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v20 = type metadata accessor for URL();
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
    return v21(a1, 1, 1, v20);
  }
}

uint64_t sub_10021B214()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DismissAction();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v32 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  os_log_type_t v13 = (char *)v30 - v12;
  if (qword_100517E70 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000F378(v14, (uint64_t)qword_10055E268);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    long long v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Writing File", v17, 2u);
    swift_slowDealloc();
  }

  sub_10021AE1C((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_10051E070);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v7, v8);
  sub_1003CFD10((uint64_t)v13);
  sub_1003D00D0((uint64_t)v13);
  uint64_t v19 = *((void *)v1 + 2);
  uint64_t v20 = *((void *)v1 + 3);
  long long v35 = *v1;
  uint64_t v36 = v19;
  uint64_t v37 = v20;
  sub_10000F214(&qword_100525A58);
  Binding.wrappedValue.getter();
  unsigned __int8 v21 = sub_1003D04E4();
  swift_bridgeObjectRelease();
  long long v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 67109120;
    LODWORD(v35) = v21 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "File created successfully: %{BOOL}d", v24, 8u);
    swift_slowDealloc();
  }

  if (v21)
  {
    uint64_t v25 = v32;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v32, v13, v8);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      NSString v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(void *)&long long v35 = v31;
      *(_DWORD *)NSString v28 = 136315138;
      v30[1] = v28 + 4;
      Swift::String v29 = URL.path(percentEncoded:)(1);
      uint64_t v38 = sub_1003806B0(v29._countAndFlagsBits, (unint64_t)v29._object, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v32, v8);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Saved edited prompt to %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v25, v8);
    }
  }
  type metadata accessor for PromptEdit();
  sub_10027D098((uint64_t)v4);
  DismissAction.callAsFunction()();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

uint64_t sub_10021B77C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10021AE1C((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return sub_10000FBD8((uint64_t)v4, &qword_10051E070);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  id v10 = [self defaultManager];
  URL.path(percentEncoded:)(1);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v12 = [v10 fileExistsAtPath:v11];

  if (v12)
  {
    sub_1003CFD10((uint64_t)v8);
    uint64_t v24 = sub_10021DAE4();
    uint64_t v14 = v13;
    uint64_t v15 = *v1;
    uint64_t v16 = v1[1];
    uint64_t v18 = v1[2];
    uint64_t v17 = v1[3];
    uint64_t v27 = v15;
    uint64_t v28 = v16;
    uint64_t v29 = v18;
    uint64_t v30 = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10000F214(&qword_100525A58);
    Binding.wrappedValue.getter();
    swift_bridgeObjectRelease();
    uint64_t v27 = v15;
    uint64_t v28 = v16;
    uint64_t v29 = v18;
    uint64_t v30 = v17;
    uint64_t v25 = v24;
    uint64_t v26 = v14;
    Binding.wrappedValue.setter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if (qword_100517E70 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10000F378(v19, (uint64_t)qword_10055E268);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      long long v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Reset prompt", v22, 2u);
      swift_slowDealloc();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10021BAB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v2 = type metadata accessor for PromptEdit();
  uint64_t v26 = *(void *)(v2 - 8);
  uint64_t v25 = *(void *)(v26 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v24 = (uint64_t)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_100525B98);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000F214(&qword_100525BA0);
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_100525BA8);
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unsigned int v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  sub_10000F214(&qword_100525BB0);
  sub_10021BEA0();
  uint64_t v13 = sub_100013AA8(&qword_100525BB8, &qword_100525B98);
  View.navigationBarBackButtonHidden(_:)();
  sub_10000FBD8((uint64_t)v6, &qword_100525B98);
  uint64_t v28 = v1;
  sub_10000F214(&qword_100525BC0);
  uint64_t v29 = v4;
  uint64_t v30 = v13;
  swift_getOpaqueTypeConformance2();
  sub_100013AA8(&qword_100525BC8, &qword_100525BC0);
  uint64_t v14 = v22;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v14);
  uint64_t v15 = v24;
  sub_10021D9B8(v1, v24);
  unint64_t v16 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v17 = swift_allocObject();
  sub_10021DA20(v15, v17 + v16);
  uint64_t v18 = v27;
  uint64_t v19 = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v27, v12, v23);
  uint64_t v20 = (uint64_t (**)())(v18 + *(int *)(sub_10000F214(&qword_100525BD0) + 36));
  *uint64_t v20 = sub_10021DA84;
  v20[1] = (uint64_t (*)())v17;
  v20[2] = 0;
  v20[3] = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v19);
}

uint64_t sub_10021BEA0()
{
  return TextField<>.init(_:text:axis:)();
}

uint64_t sub_10021BFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v19 = sub_10000F214(&qword_100525BE0);
  __chkstk_darwin(v19);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_100525BE8);
  uint64_t v5 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v8 - 8);
  uint64_t v17 = sub_10000F214(&qword_100525BF0);
  uint64_t v9 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.topBarLeading.getter();
  uint64_t v22 = a1;
  sub_10000F214(&qword_100525BF8);
  sub_100013AA8(&qword_100525C00, &qword_100525BF8);
  ToolbarItem<>.init(placement:content:)();
  static ToolbarItemPlacement.topBarTrailing.getter();
  uint64_t v21 = a1;
  sub_10000F214(&qword_10051EB90);
  sub_100013AA8(&qword_100521430, &qword_10051EB90);
  ToolbarItem<>.init(placement:content:)();
  unsigned int v12 = &v4[*(int *)(v19 + 48)];
  uint64_t v13 = v17;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v4, v11, v17);
  uint64_t v14 = v12;
  uint64_t v15 = v18;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v14, v7, v18);
  TupleToolbarContent.init(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v13);
}

uint64_t sub_10021C2F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PromptEdit();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  sub_10021D9B8(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_10021DA20((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5);
  sub_10000F214(&qword_100525C08);
  sub_100013AA8(&qword_100525C10, &qword_100525C08);
  return Button.init(action:label:)();
}

uint64_t sub_10021C450@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_10051E360);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v6 = a1 + *(int *)(sub_10000F214(&qword_100525C18) + 44);
  LocalizedStringKey.init(stringLiteral:)();
  Label<>.init(_:systemImage:)();
  uint64_t v7 = static Color.blue.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v6, v5, v2);
  *(void *)(v6 + *(int *)(sub_10000F214(&qword_100525C20) + 36)) = v7;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10021C5AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PromptEdit();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  LocalizedStringKey.init(stringLiteral:)();
  sub_10021D9B8(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_10021DA20((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5);
  return Button<>.init(_:action:)();
}

uint64_t sub_10021C6F4()
{
  return swift_release();
}

uint64_t sub_10021C7C4(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)CIContext) init];
  id v5 = [objc_allocWithZone((Class)CIImage) initWithCGImage:a1];
  id v6 = [v5 imageByApplyingCGOrientation:a2];

  uint64_t v7 = [v6 colorSpace];
  if (!v7)
  {
    uint64_t v7 = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
    if (!v7)
    {
      if (qword_100517E00 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10000F378(v11, (uint64_t)qword_10055E118);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v12, "Error setting the colorSpace for image", v13, 2u);
        swift_slowDealloc();
      }
      goto LABEL_9;
    }
  }
  sub_10031C3E0((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for CIImageRepresentationOption(0);
  sub_10021C9F4();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v4 JPEGRepresentationOfImage:v6 colorSpace:v7 options:isa];

  if (!v9)
  {
LABEL_9:

    return 0;
  }
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

unint64_t sub_10021C9F4()
{
  unint64_t result = qword_1005185F8;
  if (!qword_1005185F8)
  {
    type metadata accessor for CIImageRepresentationOption(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005185F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MontaraPromptConfiguration()
{
  return &type metadata for MontaraPromptConfiguration;
}

unint64_t sub_10021CA60()
{
  unint64_t result = qword_1005259B8;
  if (!qword_1005259B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005259B8);
  }
  return result;
}

unint64_t sub_10021CAB4(uint64_t a1)
{
  unint64_t result = sub_10021CADC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10021CADC()
{
  unint64_t result = qword_1005259E8;
  if (!qword_1005259E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005259E8);
  }
  return result;
}

unint64_t sub_10021CB34(uint64_t a1)
{
  unint64_t result = sub_10021CB5C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10021CB5C()
{
  unint64_t result = qword_100525A18;
  if (!qword_100525A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525A18);
  }
  return result;
}

uint64_t sub_10021CBB0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10021CBCC(void *a1)
{
  a1[1] = sub_1000171CC();
  a1[2] = sub_10001756C();
  unint64_t result = sub_10021CC04();
  a1[3] = result;
  return result;
}

unint64_t sub_10021CC04()
{
  unint64_t result = qword_100525A20;
  if (!qword_100525A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525A20);
  }
  return result;
}

unint64_t sub_10021CC58()
{
  unint64_t result = qword_100525A30;
  if (!qword_100525A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525A30);
  }
  return result;
}

uint64_t sub_10021CCAC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10021CCFC@<X0>(uint64_t a1@<X8>)
{
  return sub_10021AA98(a1);
}

uint64_t type metadata accessor for PromptEdit()
{
  uint64_t result = qword_100525AB8;
  if (!qword_100525AB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10021CD50()
{
  return EnvironmentValues.dismiss.getter();
}

unsigned char *storeEnumTagSinglePayload for MontaraPromptConfiguration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10021CE10);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MontaraPromptConfiguration.CodingKeys()
{
  return &type metadata for MontaraPromptConfiguration.CodingKeys;
}

uint64_t *sub_10021CE48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    id v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10000F214((uint64_t *)&unk_1005197E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10021CF88(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_10000F214((uint64_t *)&unk_1005197E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *sub_10021D050(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F214((uint64_t *)&unk_1005197E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10021D138(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_10000FBD8((uint64_t)a1 + v6, (uint64_t *)&unk_1005197E0);
    sub_10000F214((uint64_t *)&unk_1005197E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_10021D264(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_1005197E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for DismissAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

void *sub_10021D338(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    sub_10000FBD8((uint64_t)a1 + v7, (uint64_t *)&unk_1005197E0);
    uint64_t v10 = sub_10000F214((uint64_t *)&unk_1005197E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for DismissAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10021D454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10021D468);
}

uint64_t sub_10021D468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000F214(&qword_10051D238);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10021D51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10021D530);
}

uint64_t sub_10021D530(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_10051D238);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10021D5DC()
{
  sub_1000B051C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for NavigationLazyView()
{
  return sub_1000684BC();
}

uint64_t destroy for MontaraPromptConfigurationForm()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MontaraPromptConfigurationForm(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MontaraPromptConfigurationForm(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MontaraPromptConfigurationForm(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MontaraPromptConfigurationForm()
{
  return &type metadata for MontaraPromptConfigurationForm;
}

uint64_t sub_10021D848()
{
  return sub_100013AA8(&qword_100525B70, &qword_100525B78);
}

uint64_t sub_10021D884()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10021D8A4()
{
  unint64_t result = qword_100525B80;
  if (!qword_100525B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525B80);
  }
  return result;
}

uint64_t sub_10021D8F8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

unint64_t sub_10021D904()
{
  unint64_t result = qword_100525B88;
  if (!qword_100525B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525B88);
  }
  return result;
}

unint64_t sub_10021D95C()
{
  unint64_t result = qword_100525B90;
  if (!qword_100525B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525B90);
  }
  return result;
}

uint64_t sub_10021D9B0@<X0>(uint64_t a1@<X8>)
{
  return sub_10021BFB4(*(void *)(v1 + 16), a1);
}

uint64_t sub_10021D9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PromptEdit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10021DA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PromptEdit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10021DA84()
{
  type metadata accessor for PromptEdit();

  return sub_10021C6F4();
}

uint64_t sub_10021DAE4()
{
  uint64_t v0 = sub_10000F214(&qword_100525BD8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v10[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for DefaultPromptFactory();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static DefaultPromptFactory.instance.getter();
  uint64_t v7 = type metadata accessor for GATInteractionMode();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  uint64_t v8 = DefaultPromptFactory.createPrompt(appBundleID:interactionMode:)();
  sub_10000FBD8((uint64_t)v2, &qword_100525BD8);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  return v8;
}

uint64_t sub_10021DD88()
{
  return sub_10021C2F4(*(void *)(v0 + 16));
}

uint64_t sub_10021DD90()
{
  return sub_10021C5AC(*(void *)(v0 + 16));
}

uint64_t sub_10021DD9C()
{
  return sub_10021DEF8(sub_10021B77C);
}

uint64_t sub_10021DDB8()
{
  uint64_t v1 = (int *)(type metadata accessor for PromptEdit() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + v1[7];
  sub_10000F214((uint64_t *)&unk_1005197E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10021DEE0()
{
  return sub_10021DEF8(sub_10021B214);
}

uint64_t sub_10021DEF8(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_10021DF60()
{
  unint64_t result = qword_100525C28;
  if (!qword_100525C28)
  {
    sub_10000F69C(&qword_100525BD0);
    sub_10000F69C(&qword_100525BA0);
    sub_10000F69C(&qword_100525BC0);
    sub_10000F69C(&qword_100525B98);
    sub_100013AA8(&qword_100525BB8, &qword_100525B98);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100525BC8, &qword_100525BC0);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525C28);
  }
  return result;
}

uint64_t *sub_10021E0B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_10000F214(&qword_10051A428);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v35 = v8;
      uint64_t v11 = (int *)type metadata accessor for EventLookupItem(0);
      uint64_t v12 = v11[5];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for Date();
      unint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      v16((char *)a1 + v11[6], (char *)a2 + v11[6], v15);
      uint64_t v17 = v11[7];
      uint64_t v18 = (uint64_t *)((char *)a1 + v17);
      uint64_t v19 = (uint64_t *)((char *)a2 + v17);
      uint64_t v20 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v20;
      uint64_t v21 = v11[8];
      uint64_t v22 = (uint64_t *)((char *)a1 + v21);
      uint64_t v23 = (uint64_t *)((char *)a2 + v21);
      uint64_t v24 = v23[1];
      *uint64_t v22 = *v23;
      v22[1] = v24;
      *((unsigned char *)a1 + v11[9]) = *((unsigned char *)a2 + v11[9]);
      uint64_t v25 = *(int *)(v7 + 48);
      uint64_t v26 = (uint64_t *)((char *)a1 + v25);
      uint64_t v27 = (uint64_t *)((char *)a2 + v25);
      uint64_t v28 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = *(int *)(v7 + 64);
      uint64_t v30 = (uint64_t *)((char *)a1 + v29);
      uint64_t v31 = (uint64_t *)((char *)a2 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v35 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t type metadata accessor for EventLookupItem(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100525D08);
}

uint64_t sub_10021E324(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A428);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = type metadata accessor for EventLookupItem(0);
    uint64_t v5 = a1 + *(int *)(v4 + 20);
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(v5, v6);
    v7(a1 + *(int *)(v4 + 24), v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_10021E478(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    uint64_t v33 = v7;
    uint64_t v9 = (int *)type metadata accessor for EventLookupItem(0);
    uint64_t v10 = v9[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    v14((char *)a1 + v9[6], (char *)a2 + v9[6], v13);
    uint64_t v15 = v9[7];
    unint64_t v16 = (void *)((char *)a1 + v15);
    uint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *unint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v9[8];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    *((unsigned char *)a1 + v9[9]) = *((unsigned char *)a2 + v9[9]);
    uint64_t v23 = *(int *)(v6 + 48);
    uint64_t v24 = (void *)((char *)a1 + v23);
    uint64_t v25 = (void *)((char *)a2 + v23);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = *(int *)(v6 + 64);
    uint64_t v28 = (void *)((char *)a1 + v27);
    uint64_t v29 = (void *)((char *)a2 + v27);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = *(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_10021E688(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v30 = (int *)type metadata accessor for EventLookupItem(0);
      uint64_t v31 = v30[5];
      uint64_t v32 = &a1[v31];
      uint64_t v33 = &a2[v31];
      uint64_t v34 = type metadata accessor for Date();
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24);
      v35(v32, v33, v34);
      v35(&a1[v30[6]], &a2[v30[6]], v34);
      uint64_t v36 = v30[7];
      uint64_t v37 = &a1[v36];
      uint64_t v38 = &a2[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      *((void *)v37 + 1) = *((void *)v38 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v39 = v30[8];
      uint64_t v40 = &a1[v39];
      uint64_t v41 = &a2[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      *((void *)v40 + 1) = *((void *)v41 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[v30[9]] = a2[v30[9]];
      uint64_t v42 = *(int *)(v6 + 48);
      uint64_t v43 = &a1[v42];
      uint64_t v44 = &a2[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(int *)(v6 + 64);
      uint64_t v46 = &a1[v45];
      uint64_t v47 = &a2[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = *((void *)v47 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10000FBD8((uint64_t)a1, &qword_10051A428);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  uint64_t v11 = (int *)type metadata accessor for EventLookupItem(0);
  uint64_t v12 = v11[5];
  uint64_t v48 = &a1[v12];
  uint64_t v13 = &a2[v12];
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v48, v13, v14);
  v15(&a1[v11[6]], &a2[v11[6]], v14);
  uint64_t v16 = v11[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  uint64_t v19 = v11[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = *((void *)v21 + 1);
  a1[v11[9]] = a2[v11[9]];
  uint64_t v22 = *(int *)(v6 + 48);
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = *((void *)v24 + 1);
  uint64_t v25 = *(int *)(v6 + 64);
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = *((void *)v27 + 1);
  uint64_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28(a1, 0, 1, v6);
  return a1;
}

_OWORD *sub_10021EA44(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v8 = (int *)type metadata accessor for EventLookupItem(0);
    uint64_t v9 = v8[5];
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
    v13(v10, v11, v12);
    v13((char *)a1 + v8[6], (char *)a2 + v8[6], v12);
    *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
    *(_OWORD *)((char *)a1 + v8[8]) = *(_OWORD *)((char *)a2 + v8[8]);
    *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 48));
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 64));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_10021EC00(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = (int *)type metadata accessor for EventLookupItem(0);
      uint64_t v20 = v19[5];
      uint64_t v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      uint64_t v23 = type metadata accessor for Date();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40);
      v24(v21, v22, v23);
      v24(&a1[v19[6]], &a2[v19[6]], v23);
      uint64_t v25 = v19[7];
      uint64_t v26 = &a1[v25];
      uint64_t v27 = (uint64_t *)&a2[v25];
      uint64_t v29 = *v27;
      uint64_t v28 = v27[1];
      *(void *)uint64_t v26 = v29;
      *((void *)v26 + 1) = v28;
      swift_bridgeObjectRelease();
      uint64_t v30 = v19[8];
      uint64_t v31 = &a1[v30];
      uint64_t v32 = (uint64_t *)&a2[v30];
      uint64_t v34 = *v32;
      uint64_t v33 = v32[1];
      *(void *)uint64_t v31 = v34;
      *((void *)v31 + 1) = v33;
      swift_bridgeObjectRelease();
      a1[v19[9]] = a2[v19[9]];
      uint64_t v35 = *(int *)(v6 + 48);
      uint64_t v36 = &a1[v35];
      uint64_t v37 = (uint64_t *)&a2[v35];
      uint64_t v39 = *v37;
      uint64_t v38 = v37[1];
      *(void *)uint64_t v36 = v39;
      *((void *)v36 + 1) = v38;
      swift_bridgeObjectRelease();
      uint64_t v40 = *(int *)(v6 + 64);
      uint64_t v41 = &a1[v40];
      uint64_t v42 = (uint64_t *)&a2[v40];
      uint64_t v44 = *v42;
      uint64_t v43 = v42[1];
      *(void *)uint64_t v41 = v44;
      *((void *)v41 + 1) = v43;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10000FBD8((uint64_t)a1, &qword_10051A428);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v11 = (int *)type metadata accessor for EventLookupItem(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v16(&a1[v11[6]], &a2[v11[6]], v15);
  *(_OWORD *)&a1[v11[7]] = *(_OWORD *)&a2[v11[7]];
  *(_OWORD *)&a1[v11[8]] = *(_OWORD *)&a2[v11[8]];
  a1[v11[9]] = a2[v11[9]];
  *(_OWORD *)&a1[*(int *)(v6 + 48)] = *(_OWORD *)&a2[*(int *)(v6 + 48)];
  *(_OWORD *)&a1[*(int *)(v6 + 64)] = *(_OWORD *)&a2[*(int *)(v6 + 64)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10021EEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10021EF08);
}

uint64_t sub_10021EF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A428);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10021EF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10021EF8C);
}

uint64_t sub_10021EF8C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_10021F010(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A428);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_10021F07C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A428);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t type metadata accessor for EventLookupState(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100525CA0);
}

uint64_t sub_10021F110()
{
  uint64_t result = type metadata accessor for EventLookupItem(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

char *sub_10021F1A8(char *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (char *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v7;
    uint64_t v8 = a3[5];
    int v9 = &a1[v8];
    int v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v12(&v4[a3[6]], &a2[a3[6]], v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = &v4[v13];
    uint64_t v16 = &a2[v13];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = &v4[v14];
    uint64_t v19 = &a2[v14];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    v4[a3[9]] = a2[a3[9]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10021F2F8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 24), v5);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_10021F3BC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  int v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v11(&a1[a3[6]], &a2[a3[6]], v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = &a1[v13];
  uint64_t v18 = &a2[v13];
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = v19;
  a1[a3[9]] = a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10021F4BC(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[8];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_10021F5EC(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_10021F6C0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v11(&a1[a3[6]], &a2[a3[6]], v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (uint64_t *)&a2[v12];
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = (uint64_t *)&a2[v17];
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t sub_10021F7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10021F7D4);
}

uint64_t sub_10021F7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10021F884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10021F898);
}

uint64_t sub_10021F898(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10021F940()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10021F9F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventLookupItem(0);
  __chkstk_darwin(v2);
  unint64_t v4 = (uint64_t *)((char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for EventLookupState(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002246B4(a1, (uint64_t)v7, type metadata accessor for EventLookupState);
  uint64_t v8 = sub_10000F214(&qword_10051A428);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) == 1) {
    return 0xD000000000000021;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10022464C((uint64_t)v7, (uint64_t)v4, type metadata accessor for EventLookupItem);
  uint64_t v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(74);
  v10._countAndFlagsBits = 0xD000000000000017;
  v10._object = (void *)0x8000000100429B00;
  String.append(_:)(v10);
  uint64_t v11 = *v4;
  uint64_t v12 = (void *)v4[1];
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x6F697461636F6C20;
  v14._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v14);
  uint64_t v15 = (uint64_t *)((char *)v4 + *(int *)(v2 + 28));
  uint64_t v16 = v15[1];
  uint64_t v29 = *v15;
  uint64_t v30 = v16;
  swift_bridgeObjectRetain();
  sub_10000F214(&qword_10051D468);
  v17._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x6144747261747320;
  v18._object = (void *)0xEC000000203A6574;
  String.append(_:)(v18);
  type metadata accessor for Date();
  sub_100222738(&qword_100525DB0, (void (*)(uint64_t))&type metadata accessor for Date);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x65746144646E6520;
  v20._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x203A7365746F6E20;
  v22._object = (void *)0xE800000000000000;
  String.append(_:)(v22);
  uint64_t v23 = (uint64_t *)((char *)v4 + *(int *)(v2 + 32));
  uint64_t v24 = v23[1];
  uint64_t v29 = *v23;
  uint64_t v30 = v24;
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = v31;
  uint64_t v27 = (void *)v32;
  uint64_t v31 = 0xD000000000000011;
  unint64_t v32 = 0x8000000100429AE0;
  v26._object = v27;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  uint64_t v9 = v31;
  sub_100222D00((uint64_t)v4, type metadata accessor for EventLookupItem);
  return v9;
}

void sub_10021FDA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for EventLookupItem(0);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for EventLookupState(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002246B4(v1, (uint64_t)v7, type metadata accessor for EventLookupState);
  uint64_t v8 = sub_10000F214(&qword_10051A428);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_10022464C((uint64_t)v7, (uint64_t)v4, type metadata accessor for EventLookupItem);
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    type metadata accessor for Date();
    sub_100222738(&qword_100525D68, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    if (*(void *)&v4[v2[7] + 8])
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    if (*(void *)&v4[v2[8] + 8])
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Hasher._combine(_:)(v4[v2[9]]);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    sub_100222D00((uint64_t)v4, type metadata accessor for EventLookupItem);
    swift_bridgeObjectRelease();
  }
}

Swift::Int sub_1002200D8(uint64_t a1, uint64_t a2)
{
  return sub_1002225FC(a1, a2, (void (*)(unsigned char *))sub_10021FDA8);
}

Swift::Int sub_1002200F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100222660(a1, a2, a3, (void (*)(unsigned char *))sub_10021FDA8);
}

uint64_t sub_10022010C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v141 = a1;
  uint64_t v121 = type metadata accessor for Date();
  uint64_t v120 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v123 = (char *)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v122 = (char *)&v111 - v5;
  uint64_t v6 = sub_10000F214(&qword_100525E50);
  __chkstk_darwin(v6);
  uint64_t v124 = (uint64_t)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8);
  long long v116 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  long long v115 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = type metadata accessor for SafetyInterstitial();
  __chkstk_darwin(v133);
  long long v117 = (uint64_t *)((char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  uint64_t v118 = (uint64_t)&v111 - v14;
  uint64_t v119 = type metadata accessor for EventLookupResultView(0);
  uint64_t v112 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v114 = (uint64_t)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = v15;
  __chkstk_darwin(v16);
  uint64_t v125 = (uint64_t)&v111 - v17;
  uint64_t v134 = sub_10000F214(&qword_100525E58);
  __chkstk_darwin(v134);
  uint64_t v136 = (uint64_t)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000F214(&qword_100525E60);
  __chkstk_darwin(v129);
  uint64_t v131 = (uint64_t)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_10000F214(&qword_100525E68);
  __chkstk_darwin(v135);
  uint64_t v132 = (char *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = type metadata accessor for EmptyResultsView();
  __chkstk_darwin(v130);
  Swift::String v22 = (uint64_t *)((char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23);
  uint64_t v127 = (uint64_t)&v111 - v24;
  uint64_t v142 = sub_10000F214(&qword_100525E70);
  __chkstk_darwin(v142);
  long long v137 = (char *)&v111 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v128 = (int *)type metadata accessor for EventLookupItem(0);
  __chkstk_darwin(v128);
  uint64_t v27 = (uint64_t *)((char *)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v144 = sub_10000F214(&qword_100525E78);
  __chkstk_darwin(v144);
  uint64_t v145 = (uint64_t)&v111 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for LatencyTextStyle();
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (uint64_t *)((char *)&v111 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v111 - v33;
  uint64_t v35 = sub_10000F214(&qword_1005256D8);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v111 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000F214(&qword_100525E80);
  __chkstk_darwin(v139);
  uint64_t v39 = (char *)&v111 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000F214(&qword_100525E88);
  __chkstk_darwin(v143);
  long long v138 = (char *)&v111 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  uint64_t v140 = (uint64_t)&v111 - v42;
  uint64_t v43 = type metadata accessor for EventLookupState(0);
  __chkstk_darwin(v43 - 8);
  uint64_t v45 = (char *)&v111 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = v2;
  sub_1002246B4(v2, (uint64_t)v45, type metadata accessor for EventLookupState);
  uint64_t v46 = sub_10000F214(&qword_10051A428);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v45, 1, v46) == 1)
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v47 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v49 = v48;
    char v51 = v50;
    uint64_t v53 = v52;
    uint64_t *v31 = swift_getKeyPath();
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    sub_10022464C((uint64_t)v31, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
    sub_1002246B4((uint64_t)v34, (uint64_t)&v37[*(int *)(v35 + 36)], (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
    *(void *)uint64_t v37 = v47;
    *((void *)v37 + 1) = v49;
    v37[16] = v51 & 1;
    *((void *)v37 + 3) = v53;
    sub_100222D00((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
    static AnyTransition.opacity.getter();
    static AnyTransition.blur(radius:)();
    AnyTransition.combined(with:)();
    swift_release();
    swift_release();
    static Animation.easeInOut.getter();
    AnyTransition.animation(_:)();
    swift_release();
    swift_release();
    static AnyTransition.opacity.getter();
    static AnyTransition.blur(radius:)();
    AnyTransition.combined(with:)();
    swift_release();
    swift_release();
    static Animation.easeInOut(duration:)();
    AnyTransition.animation(_:)();
    swift_release();
    swift_release();
    uint64_t v54 = static AnyTransition.asymmetric(insertion:removal:)();
    swift_release();
    swift_release();
    sub_10000FB74((uint64_t)v37, (uint64_t)v39, &qword_1005256D8);
    *(void *)&v39[*(int *)(v139 + 36)] = v54;
    sub_10000FBD8((uint64_t)v37, &qword_1005256D8);
    sub_100224980();
    uint64_t v55 = (uint64_t)v138;
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8((uint64_t)v39, &qword_100525E80);
    uint64_t v56 = v140;
    sub_100224CF0(v55, v140);
    sub_10000FB74(v56, v145, &qword_100525E88);
    swift_storeEnumTagMultiPayload();
    sub_1002248D4();
    sub_100224A58();
    _ConditionalContent<>.init(storage:)();
    return sub_10000FBD8(v56, &qword_100525E88);
  }
  uint64_t v140 = v6;
  uint64_t v58 = &v45[*(int *)(v46 + 48)];
  uint64_t v60 = *(void *)v58;
  unint64_t v59 = *((void *)v58 + 1);
  uint64_t v61 = &v45[*(int *)(v46 + 64)];
  uint64_t v63 = *(void *)v61;
  uint64_t v62 = *((void *)v61 + 1);
  sub_10022464C((uint64_t)v45, (uint64_t)v27, type metadata accessor for EventLookupItem);
  uint64_t v64 = HIBYTE(v59) & 0xF;
  if ((v59 & 0x2000000000000000) == 0) {
    uint64_t v64 = v60 & 0xFFFFFFFFFFFFLL;
  }
  char v65 = v27;
  if (!v64)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v73 = *((unsigned __int8 *)v27 + v128[9]);
    uint64_t v74 = v126;
    uint64_t v75 = v125;
    sub_1002246B4(v126, v125, type metadata accessor for EventLookupResultView);
    if (v73 == 1)
    {
      uint64_t v76 = v75 + *(int *)(v119 + 24);
      char v77 = *(unsigned char *)v76;
      uint64_t v78 = *(void *)(v76 + 8);
      LOBYTE(v147) = v77;
      *((void *)&v147 + 1) = v78;
      sub_10000F214(&qword_100522EA0);
      State.wrappedValue.getter();
      sub_100222D00(v75, type metadata accessor for EventLookupResultView);
      if ((v146 & 1) == 0)
      {
        uint64_t v79 = v74;
        uint64_t v80 = v114;
        sub_1002246B4(v79, v114, type metadata accessor for EventLookupResultView);
        unint64_t v81 = (*(unsigned __int8 *)(v112 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
        uint64_t v82 = swift_allocObject();
        sub_10022464C(v80, v82 + v81, type metadata accessor for EventLookupResultView);
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        uint64_t v83 = String.init(localized:table:bundle:locale:comment:)();
        uint64_t v85 = v84;
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t v87 = (uint64_t)v117;
        uint64_t *v117 = KeyPath;
        sub_10000F214(&qword_100522BF0);
        swift_storeEnumTagMultiPayload();
        uint64_t v88 = v133;
        uint64_t v89 = (uint64_t *)(v87 + *(int *)(v133 + 20));
        uint64_t *v89 = v83;
        v89[1] = v85;
        uint64_t v90 = (uint64_t (**)())(v87 + *(int *)(v88 + 24));
        *uint64_t v90 = sub_100224C90;
        v90[1] = (uint64_t (*)())v82;
        uint64_t v69 = v118;
        sub_10022464C(v87, v118, (uint64_t (*)(void))type metadata accessor for SafetyInterstitial);
        sub_1002246B4(v69, v131, (uint64_t (*)(void))type metadata accessor for SafetyInterstitial);
        swift_storeEnumTagMultiPayload();
        sub_100222738(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
        sub_100222738(&qword_100525E90, (void (*)(uint64_t))type metadata accessor for SafetyInterstitial);
        uint64_t v91 = (uint64_t)v132;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v91, v136, &qword_100525E68);
        swift_storeEnumTagMultiPayload();
        sub_10022471C();
        sub_1002247F8();
        uint64_t v71 = (uint64_t)v137;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v91, &qword_100525E68);
        uint64_t v72 = type metadata accessor for SafetyInterstitial;
        goto LABEL_7;
      }
    }
    else
    {
      sub_100222D00(v75, type metadata accessor for EventLookupResultView);
    }
    uint64_t v92 = v27[1];
    uint64_t v139 = *v27;
    uint64_t v93 = v128;
    uint64_t v94 = (uint64_t *)((char *)v27 + v128[7]);
    uint64_t v95 = *v94;
    uint64_t v96 = v94[1];
    unint64_t v97 = (char *)v27 + v128[5];
    uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v120 + 16);
    uint64_t v99 = (uint64_t)v122;
    uint64_t v100 = v121;
    v98(v122, v97, v121);
    uint64_t v101 = (uint64_t)v123;
    v98(v123, (char *)v65 + v93[6], v100);
    uint64_t v27 = v65;
    uint64_t v102 = (uint64_t *)((char *)v65 + v93[8]);
    uint64_t v103 = *v102;
    uint64_t v104 = v102[1];
    uint64_t v149 = 0;
    long long v147 = 0u;
    long long v148 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BYTE2(v110) = 0;
    LOWORD(v110) = 0;
    uint64_t v105 = v124;
    sub_1002B4944(v139, v92, v95, v96, v99, v101, v103, v104, v124, v110, (uint64_t)&v147);
    static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    *(void *)&long long v147 = v106;
    *((void *)&v147 + 1) = v107;
    *(void *)&long long v148 = v108;
    *((void *)&v148 + 1) = v109;
    LOBYTE(v149) = 0;
    SafeAreaPaddingModifier.init(edges:insets:)();
    sub_10000FB74(v105, v136, &qword_100525E50);
    swift_storeEnumTagMultiPayload();
    sub_10022471C();
    sub_1002247F8();
    uint64_t v71 = (uint64_t)v137;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v105, &qword_100525E50);
    goto LABEL_13;
  }
  *Swift::String v22 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v66 = v130;
  uint64_t v67 = (uint64_t *)((char *)v22 + *(int *)(v130 + 20));
  *uint64_t v67 = v60;
  v67[1] = v59;
  uint64_t v68 = (uint64_t *)((char *)v22 + *(int *)(v66 + 24));
  *uint64_t v68 = v63;
  v68[1] = v62;
  uint64_t v69 = v127;
  sub_10022464C((uint64_t)v22, v127, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
  sub_1002246B4(v69, v131, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
  swift_storeEnumTagMultiPayload();
  sub_100222738(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
  sub_100222738(&qword_100525E90, (void (*)(uint64_t))type metadata accessor for SafetyInterstitial);
  uint64_t v70 = (uint64_t)v132;
  _ConditionalContent<>.init(storage:)();
  sub_10000FB74(v70, v136, &qword_100525E68);
  swift_storeEnumTagMultiPayload();
  sub_10022471C();
  sub_1002247F8();
  uint64_t v71 = (uint64_t)v137;
  _ConditionalContent<>.init(storage:)();
  sub_10000FBD8(v70, &qword_100525E68);
  uint64_t v72 = type metadata accessor for EmptyResultsView;
LABEL_7:
  sub_100222D00(v69, (uint64_t (*)(void))v72);
LABEL_13:
  sub_10000FB74(v71, v145, &qword_100525E70);
  swift_storeEnumTagMultiPayload();
  sub_1002248D4();
  sub_100224A58();
  _ConditionalContent<>.init(storage:)();
  sub_10000FBD8(v71, &qword_100525E70);
  return sub_100222D00((uint64_t)v27, type metadata accessor for EventLookupItem);
}

uint64_t sub_100221318()
{
  return swift_release();
}

uint64_t sub_100221384()
{
  return State.wrappedValue.setter();
}

unint64_t sub_1002213F8(char a1)
{
  unint64_t result = 1701667182;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7461447472617473;
      break;
    case 2:
      unint64_t result = 0x65746144646E65;
      break;
    case 3:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 4:
      unint64_t result = 0x7365746F6ELL;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0x4965746144646E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100221514()
{
  return sub_1002213F8(*v0);
}

uint64_t sub_10022151C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100223050(a1, a2);
  *a3 = result;
  return result;
}

void sub_100221544(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100221550(uint64_t a1)
{
  unint64_t v2 = sub_100222D60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10022158C(uint64_t a1)
{
  unint64_t v2 = sub_100222D60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002215C8(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_100525D70);
  __chkstk_darwin(v2 - 8);
  uint64_t v109 = (char *)v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v114 = (char *)v87 - v5;
  uint64_t v116 = type metadata accessor for TimeZone();
  uint64_t v126 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v108 = (char *)v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v113 = (char *)v87 - v8;
  uint64_t v9 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v129 = v9;
  uint64_t v130 = v10;
  __chkstk_darwin(v9);
  uint64_t v107 = (char *)v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v112 = (void (*)(char *, uint64_t))((char *)v87 - v13);
  uint64_t v117 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  uint64_t v125 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v106 = (char *)v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v111 = (char *)v87 - v16;
  uint64_t v118 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  uint64_t v124 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  long long v115 = (char *)v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v123 = (void (*)(char *, uint64_t))((char *)v87 - v19);
  uint64_t v131 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  uint64_t v128 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v105 = (char *)v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v119 = (char *)v87 - v22;
  __chkstk_darwin(v23);
  uint64_t v122 = (char *)v87 - v24;
  uint64_t v25 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v120 = v25;
  uint64_t v121 = v26;
  __chkstk_darwin(v25);
  uint64_t v103 = (char *)v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v104 = (char *)v87 - v29;
  __chkstk_darwin(v30);
  uint64_t v110 = (char *)v87 - v31;
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)v87 - v33;
  uint64_t v132 = type metadata accessor for Date();
  uint64_t v127 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v36 = (char *)v87 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)v87 - v38;
  uint64_t v40 = sub_10000F214(&qword_100525D78);
  uint64_t v41 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)v87 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100222D60();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v44 = v134;
  uint64_t v45 = v133;
  LOBYTE(v135) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v44) {
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v43, v40);
  }
  uint64_t v102 = v39;
  uint64_t v101 = v34;
  uint64_t v100 = v36;
  uint64_t v134 = v41;
  uint64_t v47 = (int *)type metadata accessor for EventLookupItem(0);
  uint64_t v48 = v45 + v47[5];
  LOBYTE(v135) = 1;
  sub_100222738(&qword_100525D88, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v49 = v43;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v99 = v48;
  uint64_t v50 = v45 + v47[6];
  LOBYTE(v135) = 2;
  uint64_t v51 = v132;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v98 = v50;
  if (*(void *)(v45 + v47[7] + 8))
  {
    LOBYTE(v135) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  uint64_t v52 = v130;
  if (*(void *)(v45 + v47[8] + 8))
  {
    LOBYTE(v135) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  LOBYTE(v135) = 5;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v95 = v49;
  uint64_t v96 = v40;
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 16);
  uint64_t v94 = v127 + 16;
  uint64_t v93 = v53;
  v53(v102, v99, v51);
  uint64_t v54 = *(void (**)(void))(v128 + 104);
  LODWORD(v99) = enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:);
  uint64_t v133 = v128 + 104;
  unint64_t v97 = (void (*)(char *, void, uint64_t))v54;
  v54(v122);
  uint64_t v55 = *(void (**)(void))(v124 + 104);
  unsigned int v136 = enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:);
  v124 += 104;
  uint64_t v92 = (void (*)(char *, void, uint64_t))v55;
  v55(v123);
  uint64_t v56 = *(void (**)(void))(v125 + 104);
  unsigned int v91 = enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:);
  v125 += 104;
  uint64_t v90 = (void (*)(char *, void, uint64_t))v56;
  v56(v111);
  BOOL v57 = *(void (**)(void))(v52 + 104);
  unsigned int v89 = enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:);
  uint64_t v130 = v52 + 104;
  uint64_t v88 = (void (*)(char *, void, uint64_t))v57;
  v57(v112);
  uint64_t v58 = v114;
  TimeZone.init(secondsFromGMT:)();
  uint64_t v59 = v126;
  uint64_t v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v126 + 48);
  uint64_t v61 = v116;
  v87[1] = v126 + 48;
  v87[0] = v60;
  uint64_t result = v60(v58, 1, v116);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v62 = *(char **)(v59 + 32);
    uint64_t v126 = v59 + 32;
    uint64_t v114 = v62;
    ((void (*)(char *, char *, uint64_t))v62)(v113, v58, v61);
    uint64_t v63 = v110;
    Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
    uint64_t v64 = v119;
    uint64_t v65 = v131;
    v97(v119, v99, v131);
    uint64_t v66 = v101;
    Date.ISO8601FormatStyle.dateSeparator(_:)();
    uint64_t v67 = v128 + 8;
    uint64_t v122 = *(char **)(v128 + 8);
    ((void (*)(char *, uint64_t))v122)(v64, v65);
    uint64_t v68 = v120;
    uint64_t v70 = v121 + 8;
    uint64_t v69 = *(void (**)(char *, uint64_t))(v121 + 8);
    v69(v63, v120);
    uint64_t v113 = (char *)sub_100222738(&qword_100525D90, (void (*)(uint64_t))&type metadata accessor for Date.ISO8601FormatStyle);
    uint64_t v71 = v102;
    Date.formatted<A>(_:)();
    uint64_t v123 = v69;
    v69(v66, v68);
    uint64_t v72 = v127 + 8;
    int v73 = *(void (**)(char *, uint64_t))(v127 + 8);
    v73(v71, v132);
    char v137 = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v74 = v67;
    uint64_t v75 = v115;
    uint64_t v112 = v73;
    uint64_t v127 = v72;
    uint64_t v128 = v74;
    uint64_t v121 = v70;
    swift_bridgeObjectRelease();
    uint64_t v76 = v100;
    v93(v100, v98, v132);
    v97(v105, v99, v131);
    v92(v75, v136, v118);
    v90(v106, v91, v117);
    v88(v107, v89, v129);
    char v77 = v109;
    TimeZone.init(secondsFromGMT:)();
    uint64_t v78 = v116;
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v87[0])(v77, 1, v116);
    if (result != 1)
    {
      ((void (*)(char *, char *, uint64_t))v114)(v108, v77, v78);
      uint64_t v79 = v103;
      Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
      uint64_t v80 = v119;
      uint64_t v81 = v131;
      v97(v119, v99, v131);
      uint64_t v82 = v104;
      Date.ISO8601FormatStyle.dateSeparator(_:)();
      ((void (*)(char *, uint64_t))v122)(v80, v81);
      uint64_t v83 = v120;
      uint64_t v84 = v123;
      v123(v79, v120);
      Date.formatted<A>(_:)();
      v84(v82, v83);
      v112(v76, v132);
      char v137 = 7;
      uint64_t v85 = v96;
      uint64_t v86 = v95;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v134 + 8))(v86, v85);
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

void sub_100222440()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = (int *)type metadata accessor for EventLookupItem(0);
  type metadata accessor for Date();
  sub_100222738(&qword_100525D68, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  if (*(void *)(v0 + v1[7] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)(v0 + v1[8] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + v1[9]));
}

uint64_t sub_1002225CC(void *a1)
{
  return sub_1002215C8(a1);
}

Swift::Int sub_1002225E4(uint64_t a1, uint64_t a2)
{
  return sub_1002225FC(a1, a2, (void (*)(unsigned char *))sub_100222440);
}

Swift::Int sub_1002225FC(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_100222648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100222660(a1, a2, a3, (void (*)(unsigned char *))sub_100222440);
}

Swift::Int sub_100222660(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_1002226A8()
{
  return sub_100222738(&qword_100525D50, (void (*)(uint64_t))type metadata accessor for EventLookupItem);
}

uint64_t sub_1002226F0()
{
  return sub_100222738(&qword_100525D58, (void (*)(uint64_t))type metadata accessor for EventLookupState);
}

uint64_t sub_100222738(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100222780(void *a1, void *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1])
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    if ((v5 & 1) == 0) {
      return v6 & 1;
    }
  }
  uint64_t v7 = (int *)type metadata accessor for EventLookupItem(0);
  if ((static Date.== infix(_:_:)() & 1) == 0 || (static Date.== infix(_:_:)() & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v8 = v7[7];
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = *(void *)((char *)a1 + v8 + 8);
  uint64_t v11 = (void *)((char *)a2 + v8);
  uint64_t v12 = v11[1];
  if (v10)
  {
    if (!v12) {
      goto LABEL_26;
    }
    if (*v9 != *v11 || v10 != v12)
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v6 = 0;
      if ((v14 & 1) == 0) {
        return v6 & 1;
      }
    }
  }
  else if (v12)
  {
    goto LABEL_26;
  }
  uint64_t v15 = v7[8];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = *(void *)((char *)a1 + v15 + 8);
  uint64_t v18 = (void *)((char *)a2 + v15);
  uint64_t v19 = v18[1];
  if (!v17)
  {
    if (!v19)
    {
LABEL_28:
      char v6 = *((unsigned char *)a1 + v7[9]) ^ *((unsigned char *)a2 + v7[9]) ^ 1;
      return v6 & 1;
    }
    goto LABEL_26;
  }
  if (!v19)
  {
LABEL_26:
    char v6 = 0;
    return v6 & 1;
  }
  if (*v16 == *v18 && v17 == v19) {
    goto LABEL_28;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v6 = 0;
  if (v21) {
    goto LABEL_28;
  }
  return v6 & 1;
}

uint64_t sub_1002228C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventLookupItem(0);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EventLookupState(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000F214(&qword_100525D60);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t)&v12[*(int *)(v13 + 56)];
  sub_1002246B4(a1, (uint64_t)v12, type metadata accessor for EventLookupState);
  sub_1002246B4(a2, v14, type metadata accessor for EventLookupState);
  uint64_t v15 = sub_10000F214(&qword_10051A428);
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  if (v16((uint64_t)v12, 1, v15) == 1)
  {
    if (v16(v14, 1, v15) == 1) {
      goto LABEL_3;
    }
    goto LABEL_6;
  }
  uint64_t v38 = v6;
  sub_1002246B4((uint64_t)v12, (uint64_t)v9, type metadata accessor for EventLookupState);
  uint64_t v18 = *(int *)(v15 + 48);
  uint64_t v19 = *(void *)((char *)v9 + v18);
  uint64_t v20 = *(void *)((char *)v9 + v18 + 8);
  uint64_t v21 = *(int *)(v15 + 64);
  uint64_t v22 = *(void *)((char *)v9 + v21 + 8);
  uint64_t v36 = *(void *)((char *)v9 + v21);
  uint64_t v37 = v19;
  if (v16(v14, 1, v15) != 1)
  {
    uint64_t v23 = v20;
    uint64_t v24 = *(void *)(v14 + v18);
    uint64_t v25 = *(void *)(v14 + v18 + 8);
    uint64_t v26 = v14 + v21;
    uint64_t v28 = *(void *)(v14 + v21);
    uint64_t v27 = *(void *)(v26 + 8);
    uint64_t v29 = v38;
    sub_10022464C(v14, (uint64_t)v38, type metadata accessor for EventLookupItem);
    char v30 = sub_100222780(v9, v29);
    sub_100222D00((uint64_t)v9, type metadata accessor for EventLookupItem);
    if (v30)
    {
      if (v37 == v24 && v23 == v25)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0)
        {
          sub_100222D00((uint64_t)v29, type metadata accessor for EventLookupItem);
LABEL_15:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_16:
          sub_100222D00((uint64_t)v12, type metadata accessor for EventLookupState);
          return 0;
        }
      }
      if (v36 == v28 && v22 == v27)
      {
        swift_bridgeObjectRelease_n();
        sub_100222D00((uint64_t)v29, type metadata accessor for EventLookupItem);
        goto LABEL_3;
      }
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100222D00((uint64_t)v29, type metadata accessor for EventLookupItem);
      if (v34)
      {
LABEL_3:
        sub_100222D00((uint64_t)v12, type metadata accessor for EventLookupState);
        return 1;
      }
      goto LABEL_16;
    }
    sub_100222D00((uint64_t)v29, type metadata accessor for EventLookupItem);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100222D00((uint64_t)v9, type metadata accessor for EventLookupItem);
LABEL_6:
  sub_10000FBD8((uint64_t)v12, &qword_100525D60);
  return 0;
}

uint64_t sub_100222D00(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100222D60()
{
  unint64_t result = qword_100525D80;
  if (!qword_100525D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525D80);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EventLookupItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EventLookupItem.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100222F10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventLookupItem.CodingKeys()
{
  return &type metadata for EventLookupItem.CodingKeys;
}

unint64_t sub_100222F4C()
{
  unint64_t result = qword_100525D98;
  if (!qword_100525D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525D98);
  }
  return result;
}

unint64_t sub_100222FA4()
{
  unint64_t result = qword_100525DA0;
  if (!qword_100525DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525DA0);
  }
  return result;
}

unint64_t sub_100222FFC()
{
  unint64_t result = qword_100525DA8;
  if (!qword_100525DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525DA8);
  }
  return result;
}

uint64_t sub_100223050(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65746144646E65 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7365746F6ELL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100425DB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100429B50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4965746144646E65 && a2 == 0xEE00313036384F53)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t *sub_1002233A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_10051A428);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = type metadata accessor for EventLookupState(0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v45 = v8;
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      uint64_t v12 = (int *)type metadata accessor for EventLookupItem(0);
      uint64_t v13 = v12[5];
      uint64_t v44 = (char *)a1 + v13;
      uint64_t v14 = (char *)a2 + v13;
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v44, v14, v15);
      v16((char *)a1 + v12[6], (char *)a2 + v12[6], v15);
      uint64_t v17 = v12[7];
      uint64_t v18 = (uint64_t *)((char *)a1 + v17);
      uint64_t v19 = (uint64_t *)((char *)a2 + v17);
      uint64_t v20 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v20;
      uint64_t v21 = v12[8];
      uint64_t v22 = (uint64_t *)((char *)a1 + v21);
      uint64_t v23 = (uint64_t *)((char *)a2 + v21);
      uint64_t v24 = v23[1];
      *uint64_t v22 = *v23;
      v22[1] = v24;
      *((unsigned char *)a1 + v12[9]) = *((unsigned char *)a2 + v12[9]);
      uint64_t v25 = *(int *)(v7 + 48);
      uint64_t v26 = (uint64_t *)((char *)a1 + v25);
      uint64_t v27 = (uint64_t *)((char *)a2 + v25);
      uint64_t v28 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = *(int *)(v7 + 64);
      char v30 = (uint64_t *)((char *)a1 + v29);
      uint64_t v31 = (uint64_t *)((char *)a2 + v29);
      uint64_t v32 = v31[1];
      *char v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v45 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33(a1, 0, 1, v7);
    }
    uint64_t v34 = a3[5];
    uint64_t v35 = a3[6];
    uint64_t v36 = (char *)a1 + v34;
    uint64_t v37 = (char *)a2 + v34;
    *uint64_t v36 = *v37;
    *((void *)v36 + 1) = *((void *)v37 + 1);
    uint64_t v38 = (char *)a1 + v35;
    uint64_t v39 = (char *)a2 + v35;
    char *v38 = *v39;
    *((void *)v38 + 1) = *((void *)v39 + 1);
    uint64_t v40 = a3[7];
    uint64_t v41 = *(void **)((char *)a2 + v40);
    *(uint64_t *)((char *)a1 + v40) = (uint64_t)v41;
    swift_retain();
    swift_retain();
    id v42 = v41;
  }
  return a1;
}

void sub_100223664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A428);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for EventLookupItem(0);
    uint64_t v6 = a1 + *(int *)(v5 + 20);
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v6, v7);
    v8(a1 + *(int *)(v5 + 24), v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  uint64_t v9 = *(void **)(a1 + *(int *)(a2 + 28));
}

void *sub_1002237D0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = type metadata accessor for EventLookupState(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v43 = v7;
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    uint64_t v10 = (int *)type metadata accessor for EventLookupItem(0);
    uint64_t v11 = v10[5];
    id v42 = (char *)a1 + v11;
    uint64_t v12 = (char *)a2 + v11;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v42, v12, v13);
    v14((char *)a1 + v10[6], (char *)a2 + v10[6], v13);
    uint64_t v15 = v10[7];
    uint64_t v16 = (void *)((char *)a1 + v15);
    uint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v10[8];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    *((unsigned char *)a1 + v10[9]) = *((unsigned char *)a2 + v10[9]);
    uint64_t v23 = *(int *)(v6 + 48);
    uint64_t v24 = (void *)((char *)a1 + v23);
    uint64_t v25 = (void *)((char *)a2 + v23);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = *(int *)(v6 + 64);
    uint64_t v28 = (void *)((char *)a1 + v27);
    uint64_t v29 = (void *)((char *)a2 + v27);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = *(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(a1, 0, 1, v6);
  }
  uint64_t v32 = a3[5];
  uint64_t v33 = a3[6];
  uint64_t v34 = (char *)a1 + v32;
  uint64_t v35 = (char *)a2 + v32;
  *uint64_t v34 = *v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  uint64_t v36 = (char *)a1 + v33;
  uint64_t v37 = (char *)a2 + v33;
  *uint64_t v36 = *v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  uint64_t v38 = a3[7];
  uint64_t v39 = *(void **)((char *)a2 + v38);
  *(void *)((char *)a1 + v38) = v39;
  swift_retain();
  swift_retain();
  id v40 = v39;
  return a1;
}

char *sub_100223A3C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v40 = (int *)type metadata accessor for EventLookupItem(0);
      uint64_t v41 = v40[5];
      id v42 = &a1[v41];
      uint64_t v43 = &a2[v41];
      uint64_t v44 = type metadata accessor for Date();
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 24);
      v45(v42, v43, v44);
      v45(&a1[v40[6]], &a2[v40[6]], v44);
      uint64_t v46 = v40[7];
      uint64_t v47 = &a1[v46];
      uint64_t v48 = &a2[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      *((void *)v47 + 1) = *((void *)v48 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v49 = v40[8];
      uint64_t v50 = &a1[v49];
      uint64_t v51 = &a2[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = *((void *)v51 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[v40[9]] = a2[v40[9]];
      uint64_t v52 = *(int *)(v6 + 48);
      uint64_t v53 = &a1[v52];
      uint64_t v54 = &a2[v52];
      *(void *)uint64_t v53 = *(void *)v54;
      *((void *)v53 + 1) = *((void *)v54 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v55 = *(int *)(v6 + 64);
      uint64_t v56 = &a1[v55];
      BOOL v57 = &a2[v55];
      *(void *)uint64_t v56 = *(void *)v57;
      *((void *)v56 + 1) = *((void *)v57 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_10000FBD8((uint64_t)a1, &qword_10051A428);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v28 = type metadata accessor for EventLookupState(0);
    memcpy(a1, a2, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  uint64_t v11 = (int *)type metadata accessor for EventLookupItem(0);
  uint64_t v12 = v11[5];
  uint64_t v58 = &a2[v12];
  uint64_t v59 = &a1[v12];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v59, v58, v13);
  v14(&a1[v11[6]], &a2[v11[6]], v13);
  uint64_t v15 = v11[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  uint64_t v18 = v11[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  a1[v11[9]] = a2[v11[9]];
  uint64_t v21 = *(int *)(v6 + 48);
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  uint64_t v24 = *(int *)(v6 + 64);
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(a1, 0, 1, v6);
LABEL_7:
  uint64_t v29 = a3[5];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  *uint64_t v30 = *v31;
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_retain();
  swift_release();
  uint64_t v32 = a3[6];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  *uint64_t v33 = *v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  swift_retain();
  swift_release();
  uint64_t v35 = a3[7];
  uint64_t v36 = *(void **)&a2[v35];
  uint64_t v37 = *(void **)&a1[v35];
  *(void *)&a1[v35] = v36;
  id v38 = v36;

  return a1;
}

_OWORD *sub_100223E6C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = type metadata accessor for EventLookupState(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    int v9 = (int *)type metadata accessor for EventLookupItem(0);
    uint64_t v10 = v9[5];
    uint64_t v16 = (char *)a1 + v10;
    uint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
    v13(v16, v11, v12);
    v13((char *)a1 + v9[6], (char *)a2 + v9[6], v12);
    *(_OWORD *)((char *)a1 + v9[7]) = *(_OWORD *)((char *)a2 + v9[7]);
    *(_OWORD *)((char *)a1 + v9[8]) = *(_OWORD *)((char *)a2 + v9[8]);
    *((unsigned char *)a1 + v9[9]) = *((unsigned char *)a2 + v9[9]);
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 48));
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 64));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v14 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

char *sub_10022405C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v26 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v26;
      swift_bridgeObjectRelease();
      uint64_t v27 = (int *)type metadata accessor for EventLookupItem(0);
      uint64_t v28 = v27[5];
      uint64_t v29 = &a1[v28];
      uint64_t v30 = &a2[v28];
      uint64_t v31 = type metadata accessor for Date();
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40);
      v32(v29, v30, v31);
      v32(&a1[v27[6]], &a2[v27[6]], v31);
      uint64_t v33 = v27[7];
      uint64_t v34 = &a1[v33];
      uint64_t v35 = (uint64_t *)&a2[v33];
      uint64_t v37 = *v35;
      uint64_t v36 = v35[1];
      *(void *)uint64_t v34 = v37;
      *((void *)v34 + 1) = v36;
      swift_bridgeObjectRelease();
      uint64_t v38 = v27[8];
      uint64_t v39 = &a1[v38];
      id v40 = (uint64_t *)&a2[v38];
      uint64_t v42 = *v40;
      uint64_t v41 = v40[1];
      *(void *)uint64_t v39 = v42;
      *((void *)v39 + 1) = v41;
      swift_bridgeObjectRelease();
      a1[v27[9]] = a2[v27[9]];
      uint64_t v43 = *(int *)(v6 + 48);
      uint64_t v44 = &a1[v43];
      uint64_t v45 = (uint64_t *)&a2[v43];
      uint64_t v47 = *v45;
      uint64_t v46 = v45[1];
      *(void *)uint64_t v44 = v47;
      *((void *)v44 + 1) = v46;
      swift_bridgeObjectRelease();
      uint64_t v48 = *(int *)(v6 + 64);
      uint64_t v49 = &a1[v48];
      uint64_t v50 = (uint64_t *)&a2[v48];
      uint64_t v52 = *v50;
      uint64_t v51 = v50[1];
      *(void *)uint64_t v49 = v52;
      *((void *)v49 + 1) = v51;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_10000FBD8((uint64_t)a1, &qword_10051A428);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v16 = type metadata accessor for EventLookupState(0);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v11 = (int *)type metadata accessor for EventLookupItem(0);
  uint64_t v12 = v11[5];
  uint64_t v53 = &a1[v12];
  uint64_t v13 = &a2[v12];
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v53, v13, v14);
  v15(&a1[v11[6]], &a2[v11[6]], v14);
  *(_OWORD *)&a1[v11[7]] = *(_OWORD *)&a2[v11[7]];
  *(_OWORD *)&a1[v11[8]] = *(_OWORD *)&a2[v11[8]];
  a1[v11[9]] = a2[v11[9]];
  *(_OWORD *)&a1[*(int *)(v6 + 48)] = *(_OWORD *)&a2[*(int *)(v6 + 48)];
  *(_OWORD *)&a1[*(int *)(v6 + 64)] = *(_OWORD *)&a2[*(int *)(v6 + 64)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v17 = a3[5];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *uint64_t v18 = *v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  swift_release();
  uint64_t v20 = a3[6];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *uint64_t v21 = *v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_release();
  uint64_t v23 = a3[7];
  uint64_t v24 = *(void **)&a1[v23];
  *(void *)&a1[v23] = *(void *)&a2[v23];

  return a1;
}

uint64_t sub_1002243C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002243D4);
}

uint64_t sub_1002243D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for EventLookupState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100224494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002244A8);
}

uint64_t sub_1002244A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for EventLookupState(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for EventLookupResultView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100525E10);
}

uint64_t sub_100224584()
{
  uint64_t result = type metadata accessor for EventLookupState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100224628()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10022464C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002246B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10022471C()
{
  unint64_t result = qword_100525E98;
  if (!qword_100525E98)
  {
    sub_10000F69C(&qword_100525E68);
    sub_100222738(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    sub_100222738(&qword_100525E90, (void (*)(uint64_t))type metadata accessor for SafetyInterstitial);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525E98);
  }
  return result;
}

unint64_t sub_1002247F8()
{
  unint64_t result = qword_100525EA0;
  if (!qword_100525EA0)
  {
    sub_10000F69C(&qword_100525E50);
    sub_100222738(&qword_100525EA8, (void (*)(uint64_t))type metadata accessor for EventResultView);
    sub_100222738(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525EA0);
  }
  return result;
}

unint64_t sub_1002248D4()
{
  unint64_t result = qword_100525EB0;
  if (!qword_100525EB0)
  {
    sub_10000F69C(&qword_100525E88);
    sub_100224980();
    sub_100222738((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525EB0);
  }
  return result;
}

unint64_t sub_100224980()
{
  unint64_t result = qword_100525EB8;
  if (!qword_100525EB8)
  {
    sub_10000F69C(&qword_100525E80);
    sub_10021843C();
    sub_1002249FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525EB8);
  }
  return result;
}

unint64_t sub_1002249FC()
{
  unint64_t result = qword_100519930;
  if (!qword_100519930)
  {
    sub_10000F69C((uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519930);
  }
  return result;
}

uint64_t sub_100224A58()
{
  return sub_100224DC4(&qword_100525EC0, &qword_100525E70, (void (*)(void))sub_10022471C, (void (*)(void))sub_1002247F8);
}

uint64_t sub_100224A94()
{
  uint64_t v1 = type metadata accessor for EventLookupResultView(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = sub_10000F214(&qword_10051A428);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = type metadata accessor for EventLookupItem(0);
    uint64_t v5 = v2 + *(int *)(v4 + 20);
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(v5, v6);
    v7(v2 + *(int *)(v4 + 24), v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100224C90()
{
  type metadata accessor for EventLookupResultView(0);

  return sub_100221318();
}

uint64_t sub_100224CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100525E88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100224D58()
{
  return sub_100221384();
}

uint64_t sub_100224D74()
{
  return sub_100224DC4(&qword_100525EC8, &qword_100525ED0, (void (*)(void))sub_1002248D4, (void (*)(void))sub_100224A58);
}

uint64_t sub_100224DC4(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100224E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

double sub_100224E88@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100518B00, &qword_100518B08).n128_u64[0];
  return result;
}

double sub_100224EE4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1002262B4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100519750, &qword_100519758).n128_u64[0];
  return result;
}

uint64_t sub_100224F40@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[1];
  long long v36 = *v13;
  long long v37 = v24;
  sub_1002B4600((uint64_t)&v36, (uint64_t)v39);
  uint64_t v38 = *((void *)&v37 + 1);
  uint64_t v34 = *((void *)v13 + 4);
  char v35 = *((unsigned char *)v13 + 40);
  long long v25 = v13[1];
  *a9 = *v13;
  a9[1] = v25;
  *(_OWORD *)((char *)a9 + 25) = *(long long *)((char *)v13 + 25);
  a9[8] = v32;
  a9[9] = v33;
  a9[3] = v27;
  a9[4] = v28;
  a9[6] = v30;
  a9[7] = v31;
  a9[5] = v29;
  sub_1002B465C((uint64_t)v39);
  sub_1000B4980((uint64_t)&v38);
  return sub_100062328((uint64_t)&v34);
}

double sub_10022511C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1002262B4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100519C90, &qword_100519C98).n128_u64[0];
  return result;
}

uint64_t sub_100225178@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[1];
  long long v37 = *v13;
  long long v38 = v24;
  sub_1002B4600((uint64_t)&v37, (uint64_t)v40);
  long long v26 = v13[1];
  long long v35 = v13[2];
  long long v25 = v35;
  *(_OWORD *)a9 = *v13;
  *(_OWORD *)(a9 + 16) = v26;
  *(_OWORD *)(a9 + 32) = v25;
  *(_OWORD *)(a9 + 152) = v34;
  *(_OWORD *)(a9 + 136) = v33;
  *(_OWORD *)(a9 + 120) = v32;
  *(_OWORD *)(a9 + 104) = v31;
  *(_OWORD *)(a9 + 56) = v28;
  uint64_t v39 = *((void *)&v38 + 1);
  char v36 = *((unsigned char *)v13 + 48);
  *(unsigned char *)(a9 + 48) = v36;
  *(_OWORD *)(a9 + 72) = v29;
  *(_OWORD *)(a9 + 88) = v30;
  sub_1002B465C((uint64_t)v40);
  sub_1000B4980((uint64_t)&v39);
  return sub_100062328((uint64_t)&v35);
}

uint64_t sub_100225360@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  memcpy(a9, v13, 0x130uLL);
  a9[23] = v29;
  a9[24] = v30;
  a9[25] = v31;
  a9[19] = v25;
  a9[20] = v26;
  a9[21] = v27;
  a9[22] = v28;

  return sub_10008068C((uint64_t)v13);
}

uint64_t sub_10022551C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20 = a19;
  char v21 = a18;
  uint64_t v22 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v31 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    char v21 = a18;
    uint64_t v20 = a19;
    uint64_t v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = v22;
  *(unsigned char *)(a9 + 16) = v21 & 1;
  *(void *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 80) = v36;
  sub_1000807A8(a16, v22, v21 & 1);

  return swift_bridgeObjectRetain();
}

double sub_100225710@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10051BA60, &qword_10051BA68).n128_u64[0];
  return result;
}

__n128 sub_10022576C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_10000FB74(v17, a9, a16);
  long long v29 = (_OWORD *)(a9 + *(int *)(sub_10000F214(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  Swift::UInt v29[6] = v37;
  *long long v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  v29[2] = v33;
  v29[3] = v34;
  return result;
}

uint64_t sub_10022593C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[3];
  a9[2] = v13[2];
  a9[3] = v24;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v13 + 57);
  long long v25 = v13[1];
  *a9 = *v13;
  a9[1] = v25;
  a9[9] = v31;
  a9[10] = v32;
  a9[11] = v33;
  a9[5] = v27;
  a9[6] = v28;
  a9[7] = v29;
  a9[8] = v30;

  return sub_100081470((uint64_t)v13);
}

double sub_100225AFC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10051B8D8, &qword_10051B8E0).n128_u64[0];
  return result;
}

uint64_t sub_100225B58@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 88) = v27;
  *(_OWORD *)(a9 + 104) = v28;
  *(void *)(a9 + 80) = *(void *)(v13 + 80);
  *(_OWORD *)(a9 + 120) = v29;

  return sub_1002B4690(v13);
}

double sub_100225D2C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10051BE50, &qword_10051BE58).n128_u64[0];
  return result;
}

double sub_100225D88@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10051BE60, &qword_10051BE68).n128_u64[0];
  return result;
}

double sub_100225DE4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10051BEE0, &qword_10051BEE8).n128_u64[0];
  return result;
}

double sub_100225E40@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10051ED88, &qword_10051ED90).n128_u64[0];
  return result;
}

__n128 sub_100225E9C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v24 = type metadata accessor for ButtonStyleConfiguration.Label();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a9, v13, v24);
  long long v25 = (_OWORD *)(a9 + *(int *)(sub_10000F214(&qword_1005204B0) + 36));
  v25[4] = v31;
  v25[5] = v32;
  v25[6] = v33;
  *long long v25 = v27;
  v25[1] = v28;
  __n128 result = v30;
  v25[2] = v29;
  v25[3] = v30;
  return result;
}

uint64_t sub_100226084@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(void *)(a9 + 96) = *(void *)(v13 + 96);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  long long v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 104) = v28;
  *(_OWORD *)(a9 + 120) = v29;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 200) = v34;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 152) = v31;

  return sub_1002B4708(v13);
}

double sub_100226258@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1002262B4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1005227A0, &qword_1005227A8).n128_u64[0];
  return result;
}

__n128 sub_1002262B4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a16;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v29 = sub_10000F214(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(a9, v17, v29);
  long long v30 = (_OWORD *)(a9 + *(int *)(sub_10000F214(a17) + 36));
  v30[4] = v36;
  v30[5] = v37;
  v30[6] = v38;
  *long long v30 = v32;
  v30[1] = v33;
  __n128 result = v35;
  void v30[2] = v34;
  v30[3] = v35;
  return result;
}

double sub_1002264B0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100522EA8, &qword_100522EB0).n128_u64[0];
  return result;
}

double sub_10022650C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100522FA0, &qword_100522FA8).n128_u64[0];
  return result;
}

double sub_100226568@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100522DB0, &qword_100522DB8).n128_u64[0];
  return result;
}

double sub_1002265C4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100518BD0, &qword_100522E20).n128_u64[0];
  return result;
}

uint64_t sub_100226620@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[11];
  a9[10] = v13[10];
  a9[11] = v24;
  a9[12] = v13[12];
  *(_OWORD *)((char *)a9 + 201) = *(_OWORD *)((char *)v13 + 201);
  long long v25 = v13[7];
  a9[6] = v13[6];
  a9[7] = v25;
  long long v26 = v13[9];
  a9[8] = v13[8];
  a9[9] = v26;
  long long v27 = v13[3];
  a9[2] = v13[2];
  a9[3] = v27;
  long long v28 = v13[5];
  a9[4] = v13[4];
  a9[5] = v28;
  long long v29 = v13[1];
  *a9 = *v13;
  a9[1] = v29;
  a9[18] = v35;
  a9[19] = v36;
  a9[20] = v37;
  a9[14] = v31;
  a9[15] = v32;
  a9[16] = v33;
  a9[17] = v34;

  return sub_1002B4764((uint64_t)v13);
}

uint64_t sub_100226808@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = a18;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a18;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 72) = v33;
  *(_OWORD *)(a9 + 88) = v34;
  *(_OWORD *)(a9 + 104) = v35;
  *(_OWORD *)(a9 + 120) = v36;
  *(_OWORD *)(a9 + 24) = v30;
  *(_OWORD *)(a9 + 40) = v31;
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = a17;
  *(void *)(a9 + 16) = v19;
  *(_OWORD *)(a9 + 56) = v32;

  return swift_retain();
}

__n128 sub_1002269E0@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v22 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  a9[4] = v28;
  a9[5] = v29;
  a9[6] = v30;
  *a9 = v24;
  a9[1] = v25;
  __n128 result = v27;
  a9[2] = v26;
  a9[3] = v27;
  return result;
}

double sub_100226B6C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100525738, &qword_100525740).n128_u64[0];
  return result;
}

__n128 sub_100226BC8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  char v18 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    __n128 v27 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    char v18 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(unsigned char *)(a9 + 8) = v18 & 1;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  __n128 result = v32;
  *(_OWORD *)(a9 + 48) = v31;
  *(__n128 *)(a9 + 64) = v32;
  return result;
}

double sub_100226D74@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1005272D0, &qword_1005272D8).n128_u64[0];
  return result;
}

double sub_100226DD0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100527270, &qword_100527278).n128_u64[0];
  return result;
}

double sub_100226E2C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1005272C0, &qword_1005272C8).n128_u64[0];
  return result;
}

uint64_t sub_100226E88@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;

  return swift_bridgeObjectRetain();
}

double sub_100227044@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100527240, &qword_100527248).n128_u64[0];
  return result;
}

double sub_1002270A0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100527260, &qword_100527268).n128_u64[0];
  return result;
}

double sub_1002270FC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100527250, &qword_100527258).n128_u64[0];
  return result;
}

double sub_100227158@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1005272B0, &qword_1005272B8).n128_u64[0];
  return result;
}

double sub_1002271B4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1005272A0, &qword_1005272A8).n128_u64[0];
  return result;
}

uint64_t sub_100227210@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;

  return swift_retain();
}

double sub_1002273CC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100527230, &qword_100527238).n128_u64[0];
  return result;
}

double sub_100227428@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100527280, &qword_100527288).n128_u64[0];
  return result;
}

double sub_100227484@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10022576C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100527290, &qword_100527298).n128_u64[0];
  return result;
}

void *sub_1002274E0(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v13 = v8;
      char v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if (v11)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100227608(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVDetection();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v21 - v14;
  sub_10004ECF4(v2, (uint64_t)&v22);
  uint64_t result = 1;
  switch(v26)
  {
    case 1:
      sub_10000FB74(a1, (uint64_t)v6, &qword_10051B768);
      uint64_t v17 = type metadata accessor for CVBundle(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v6, 1, v17) == 1)
      {
        sub_10000FBD8((uint64_t)v6, &qword_10051B768);
        uint64_t result = 3;
      }
      else
      {
        sub_10019D408((uint64_t)v12);
        sub_1002ADE8C((uint64_t)v6, type metadata accessor for CVBundle);
        sub_1002AA830((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1002AA830((uint64_t)v15, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 3)
        {
          sub_1002ADE8C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t result = 3;
        }
        else if (EnumCaseMultiPayload == 4)
        {
          sub_1002ADE8C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t result = 4;
        }
        else
        {
          sub_1002ADE8C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t result = 14;
        }
      }
      break;
    case 2:
      uint64_t result = 5;
      break;
    case 3:
      if (v24 | v25 | v22 | v23)
      {
        uint64_t v18 = v24 | v25 | v23;
        if (v22 != 1 || v18)
        {
          if (v22 != 2 || v18)
          {
            if (v22 != 3 || v18)
            {
              if (v18) {
                BOOL v20 = 0;
              }
              else {
                BOOL v20 = v22 == 4;
              }
              if (v20) {
                uint64_t result = 8;
              }
              else {
                uint64_t result = 10;
              }
            }
            else
            {
              uint64_t result = 7;
            }
          }
          else
          {
            uint64_t result = 6;
          }
        }
        else
        {
          uint64_t result = 14;
        }
      }
      else
      {
        uint64_t result = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100227934@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100525F08);
  __chkstk_darwin(v2 - 8);
  long long v148 = (char *)&v142 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for UUID();
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v145 = (char *)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v144 = (char *)&v142 - v6;
  uint64_t v143 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v143);
  uint64_t v142 = (uint64_t)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v142 - v9;
  uint64_t v11 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v142 - v18;
  *(void *)a1 = swift_getKeyPath();
  *(unsigned char *)(a1 + 8) = 0;
  type metadata accessor for LaunchOptions();
  sub_1002AB13C((unint64_t *)&qword_100519238, (void (*)(uint64_t))type metadata accessor for LaunchOptions);
  *(void *)(a1 + 16) = Environment.init<A>(_:)();
  *(unsigned char *)(a1 + 24) = v20 & 1;
  type metadata accessor for SiriRequestStateResponder();
  sub_1002AB13C((unint64_t *)&qword_10051B278, (void (*)(uint64_t))type metadata accessor for SiriRequestStateResponder);
  *(void *)(a1 + 32) = Environment.init<A>(_:)();
  *(unsigned char *)(a1 + 40) = v21 & 1;
  type metadata accessor for SessionAnalytics();
  sub_1002AB13C(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  *(void *)(a1 + 48) = Environment.init<A>(_:)();
  *(unsigned char *)(a1 + 56) = v22 & 1;
  *(void *)(a1 + 64) = swift_getKeyPath();
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  uint64_t v23 = (int *)type metadata accessor for ContentView();
  uint64_t v24 = (uint64_t *)(a1 + v23[9]);
  *uint64_t v24 = swift_getKeyPath();
  sub_10000F214(&qword_100525F10);
  swift_storeEnumTagMultiPayload();
  if (qword_100517F80 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_10000F378(v14, (uint64_t)qword_100525EF0);
  sub_1002ADE24(v25, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  sub_1002ADE24((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  State.init(wrappedValue:)();
  sub_1002ADE8C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  char v26 = (void *)(a1 + v23[11]);
  sub_1002ADE24(v25 + *(int *)(v14 + 20), (uint64_t)v13, type metadata accessor for CameraControllerConfiguration);
  type metadata accessor for CameraController();
  swift_allocObject();
  *(void *)&long long v149 = sub_1004112E8((uint64_t)v13);
  State.init(wrappedValue:)();
  uint64_t v27 = *((void *)&v155 + 1);
  *char v26 = v155;
  v26[1] = v27;
  uint64_t v28 = type metadata accessor for ResultLookupState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v10, 1, 1, v28);
  sub_10000FB74((uint64_t)v10, v142, &qword_10051A308);
  State.init(wrappedValue:)();
  sub_10000FBD8((uint64_t)v10, &qword_10051A308);
  uint64_t v29 = a1 + v23[13];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v30 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v29 = v155;
  *(void *)(v29 + 8) = v30;
  uint64_t v31 = a1 + v23[14];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v32 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v31 = v155;
  *(void *)(v31 + 8) = v32;
  long long v33 = v144;
  UUID.init()();
  uint64_t v34 = v146;
  uint64_t v35 = v147;
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v145, v33, v147);
  State.init(wrappedValue:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
  uint64_t v36 = a1 + v23[16];
  *(void *)&long long v149 = 0;
  *((void *)&v149 + 1) = 0xE000000000000000;
  State.init(wrappedValue:)();
  uint64_t v37 = v156;
  *(_OWORD *)uint64_t v36 = v155;
  *(void *)(v36 + 16) = v37;
  uint64_t v38 = a1 + v23[17];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v39 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v38 = v155;
  *(void *)(v38 + 8) = v39;
  uint64_t v40 = a1 + v23[18];
  *(unsigned char *)uint64_t v40 = FocusState.init<>()() & 1;
  *(void *)(v40 + 8) = v41;
  *(unsigned char *)(v40 + 16) = v42 & 1;
  uint64_t v43 = a1 + v23[19];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v44 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v43 = v155;
  *(void *)(v43 + 8) = v44;
  uint64_t v45 = a1 + v23[20];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v46 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v45 = v155;
  *(void *)(v45 + 8) = v46;
  uint64_t v47 = a1 + v23[21];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v48 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v47 = v155;
  *(void *)(v47 + 8) = v48;
  uint64_t v49 = (void *)(a1 + v23[22]);
  type metadata accessor for AskAcmeRequirementManager();
  swift_allocObject();
  *(void *)&long long v149 = sub_10021A0CC();
  State.init(wrappedValue:)();
  uint64_t v50 = *((void *)&v155 + 1);
  *uint64_t v49 = v155;
  v49[1] = v50;
  uint64_t v51 = a1 + v23[23];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v52 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v51 = v155;
  *(void *)(v51 + 8) = v52;
  uint64_t v53 = (void *)(a1 + v23[24]);
  type metadata accessor for ScanwaveViewControllerLink();
  uint64_t v54 = swift_allocObject();
  LOBYTE(v155) = 1;
  sub_10000F214((uint64_t *)&unk_10051CF60);
  Published.init(initialValue:)();
  *(void *)&long long v149 = v54;
  State.init(wrappedValue:)();
  uint64_t v55 = *((void *)&v155 + 1);
  *uint64_t v53 = v155;
  v53[1] = v55;
  uint64_t v56 = a1 + v23[25];
  long long v149 = xmmword_100446C90;
  LOBYTE(v150) = 2;
  State.init(wrappedValue:)();
  char v57 = v156;
  uint64_t v58 = *((void *)&v156 + 1);
  *(_OWORD *)uint64_t v56 = v155;
  *(unsigned char *)(v56 + 16) = v57;
  *(void *)(v56 + 24) = v58;
  uint64_t v59 = v23[26];
  *(void *)&long long v149 = 0xF000000000000007;
  sub_10000F214(&qword_100525F18);
  State.init(wrappedValue:)();
  *(_OWORD *)(a1 + v59) = v155;
  uint64_t v60 = v23[27];
  *(void *)&long long v149 = 0;
  sub_10000F214(&qword_100525F20);
  State.init(wrappedValue:)();
  *(_OWORD *)(a1 + v60) = v155;
  uint64_t v61 = (void *)(a1 + v23[28]);
  type metadata accessor for SubjectLiftViewModel();
  swift_allocObject();
  *(void *)&long long v149 = sub_1001BEFB4();
  State.init(wrappedValue:)();
  uint64_t v62 = *((void *)&v155 + 1);
  *uint64_t v61 = v155;
  v61[1] = v62;
  uint64_t v63 = (void *)(a1 + v23[29]);
  type metadata accessor for LiveTextViewModel();
  uint64_t v64 = swift_allocObject();
  type metadata accessor for HitTestUIView();
  *(void *)(v64 + 16) = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  *(void *)(v64 + 24) = [objc_allocWithZone((Class)type metadata accessor for LiveTextImageAnalysisViewDelegate()) init];
  *(void *)(v64 + 32) = [objc_allocWithZone((Class)VKCImageAnalysisInteraction) init];
  *(_OWORD *)(v64 + 40) = 0u;
  *(_OWORD *)(v64 + 56) = 0u;
  *(_OWORD *)(v64 + 72) = 0u;
  *(void *)&long long v149 = v64;
  State.init(wrappedValue:)();
  uint64_t v65 = *((void *)&v155 + 1);
  *uint64_t v63 = v155;
  v63[1] = v65;
  long long v157 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  sub_10000FB74((uint64_t)&v155, (uint64_t)&v149, &qword_100518A70);
  sub_10000F214(&qword_100518A70);
  State.init(wrappedValue:)();
  sub_10000FBD8((uint64_t)&v155, &qword_100518A70);
  uint64_t v66 = a1 + v23[31];
  *(void *)&long long v149 = 0x3FF0000000000000;
  GestureState.init(wrappedValue:)();
  uint64_t v67 = *((void *)&v155 + 1);
  long long v68 = v156;
  *(void *)uint64_t v66 = v155;
  *(void *)(v66 + 8) = v67;
  *(_OWORD *)(v66 + 16) = v68;
  uint64_t v69 = (void *)(a1 + v23[32]);
  *(void *)&long long v149 = 0x3FF0000000000000;
  State.init(wrappedValue:)();
  uint64_t v70 = *((void *)&v155 + 1);
  *uint64_t v69 = v155;
  v69[1] = v70;
  uint64_t v71 = a1 + v23[33];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v72 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v71 = v155;
  *(void *)(v71 + 8) = v72;
  int v73 = (void *)(a1 + v23[34]);
  *(void *)&long long v149 = &_swiftEmptySetSingleton;
  sub_10000F214(&qword_100525F28);
  State.init(wrappedValue:)();
  uint64_t v74 = *((void *)&v155 + 1);
  *int v73 = v155;
  v73[1] = v74;
  uint64_t v75 = a1 + v23[35];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v76 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v75 = v155;
  *(void *)(v75 + 8) = v76;
  uint64_t v77 = a1 + v23[36];
  long long v149 = 0uLL;
  sub_10000F214(&qword_10051D468);
  State.init(wrappedValue:)();
  uint64_t v78 = v156;
  *(_OWORD *)uint64_t v77 = v155;
  *(void *)(v77 + 16) = v78;
  uint64_t v79 = a1 + v23[37];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v80 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v79 = v155;
  *(void *)(v79 + 8) = v80;
  uint64_t v81 = a1 + v23[38];
  LOBYTE(v149) = 1;
  State.init(wrappedValue:)();
  uint64_t v82 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v81 = v155;
  *(void *)(v81 + 8) = v82;
  uint64_t v83 = a1 + v23[39];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v84 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v83 = v155;
  *(void *)(v83 + 8) = v84;
  uint64_t v85 = a1 + v23[40];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v86 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v85 = v155;
  *(void *)(v85 + 8) = v86;
  uint64_t v87 = a1 + v23[41];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v88 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v87 = v155;
  *(void *)(v87 + 8) = v88;
  uint64_t v89 = a1 + v23[42];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v90 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v89 = v155;
  *(void *)(v89 + 8) = v90;
  uint64_t v91 = a1 + v23[43];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v92 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v91 = v155;
  *(void *)(v91 + 8) = v92;
  uint64_t v93 = (void *)(a1 + v23[44]);
  *(void *)&long long v149 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_100522A60);
  State.init(wrappedValue:)();
  uint64_t v94 = *((void *)&v155 + 1);
  *uint64_t v93 = v155;
  v93[1] = v94;
  uint64_t v95 = (void *)(a1 + v23[45]);
  *(void *)&long long v149 = _swiftEmptyArrayStorage;
  State.init(wrappedValue:)();
  uint64_t v96 = *((void *)&v155 + 1);
  *uint64_t v95 = v155;
  v95[1] = v96;
  unint64_t v97 = (void *)(a1 + v23[46]);
  *(void *)&long long v149 = _swiftEmptyArrayStorage;
  State.init(wrappedValue:)();
  uint64_t v98 = *((void *)&v155 + 1);
  *unint64_t v97 = v155;
  v97[1] = v98;
  uint64_t v99 = a1 + v23[47];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v100 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v99 = v155;
  *(void *)(v99 + 8) = v100;
  uint64_t v101 = a1 + v23[48];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v102 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v101 = v155;
  *(void *)(v101 + 8) = v102;
  uint64_t v103 = a1 + v23[49];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v104 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v103 = v155;
  *(void *)(v103 + 8) = v104;
  uint64_t v105 = a1 + v23[50];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v106 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v105 = v155;
  *(void *)(v105 + 8) = v106;
  uint64_t v107 = a1 + v23[51];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v108 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v107 = v155;
  *(void *)(v107 + 8) = v108;
  uint64_t v109 = a1 + v23[52];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v110 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v109 = v155;
  *(void *)(v109 + 8) = v110;
  uint64_t v111 = a1 + v23[53];
  LOBYTE(v149) = 1;
  State.init(wrappedValue:)();
  uint64_t v112 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v111 = v155;
  *(void *)(v111 + 8) = v112;
  uint64_t v113 = a1 + v23[54];
  LOBYTE(v149) = 0;
  State.init(wrappedValue:)();
  uint64_t v114 = *((void *)&v155 + 1);
  *(unsigned char *)uint64_t v113 = v155;
  *(void *)(v113 + 8) = v114;
  uint64_t v115 = v23[55];
  type metadata accessor for SummarizationClient();
  swift_allocObject();
  *(void *)(a1 + v115) = SummarizationClient.init()();
  uint64_t v116 = v23[56];
  *(void *)(a1 + v116) = [objc_allocWithZone((Class)VKCImageAnalyzer) init];
  uint64_t v117 = v23[57];
  if (qword_100517D90 != -1) {
    swift_once();
  }
  *(void *)(a1 + v117) = qword_10055E0A0;
  uint64_t v118 = v23[58];
  type metadata accessor for UserDefaultsUtility();
  uint64_t v119 = swift_allocObject();
  swift_retain();
  ObservationRegistrar.init()();
  *(void *)(a1 + v118) = v119;
  uint64_t v120 = v23[59];
  type metadata accessor for PromptScheduler();
  uint64_t v121 = swift_allocObject();
  *(void *)(v121 + 16) = _swiftEmptyArrayStorage;
  *(void *)(v121 + 24) = 0;
  ObservationRegistrar.init()();
  sub_1003D0F64();
  *(void *)(a1 + v120) = v121;
  uint64_t v122 = v23[60];
  if (qword_100517D50 != -1) {
    swift_once();
  }
  *(void *)(a1 + v122) = qword_10055E068;
  uint64_t v123 = v23[61];
  type metadata accessor for ImageContextCoordinator();
  uint64_t v124 = swift_allocObject();
  *(void *)(v124 + 16) = 0;
  type metadata accessor for FileWriter();
  uint64_t v125 = (uint64_t *)swift_allocObject();
  v125[2] = 0x656D617266;
  v125[3] = 0xE500000000000000;
  swift_retain();
  *(void *)(v124 + 24) = sub_10027DCE0(v125);
  *(void *)(a1 + v123) = v124;
  uint64_t v126 = (_OWORD *)(a1 + v23[62]);
  uint64_t v154 = 0;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v151 = 0u;
  long long v150 = 0u;
  long long v149 = 0u;
  sub_10000F214(&qword_100525F30);
  State.init(wrappedValue:)();
  long long v127 = v156;
  long long v128 = v157;
  long long v129 = v158;
  long long v130 = v159;
  long long v131 = v160;
  *uint64_t v126 = v155;
  v126[1] = v127;
  v126[2] = v128;
  v126[3] = v129;
  v126[4] = v130;
  v126[5] = v131;
  uint64_t v132 = v23[63];
  if (qword_100517DF0 != -1) {
    swift_once();
  }
  *(void *)(a1 + v132) = qword_10055E100;
  uint64_t v133 = (_OWORD *)(a1 + v23[64]);
  type metadata accessor for FeedbackController();
  uint64_t v134 = swift_allocObject();
  uint64_t v135 = type metadata accessor for FBKSEvaluation.Subject();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 56))(v148, 1, 1, v135);
  objc_allocWithZone((Class)type metadata accessor for FBKEvaluationController());
  swift_retain();
  *(void *)(v134 + 16) = FBKEvaluationController.init(subject:)();
  swift_weakInit();
  ObservationRegistrar.init()();
  *(void *)&long long v149 = v134;
  State.init(wrappedValue:)();
  long long v136 = v155;
  *uint64_t v133 = v155;
  AccessibilityFocusState.init<>()();
  long long v155 = v136;
  sub_10000F214(&qword_100525F38);
  State.wrappedValue.getter();
  uint64_t v137 = v149;
  uint64_t v138 = v26[1];
  *(void *)&long long v155 = *v26;
  *((void *)&v155 + 1) = v138;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v139 = v149;
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(&v142 - 2) = v137;
  *(&v142 - 1) = v139;
  *(void *)&long long v155 = v137;
  sub_1002AB13C((unint64_t *)&qword_100521388, (void (*)(uint64_t))type metadata accessor for FeedbackController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100228C8C()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_100228CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10027DC10(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(char *))&EnvironmentValues.sizeCategory.setter);
}

uint64_t sub_100228CDC@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayScale.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100228D08()
{
  return EnvironmentValues.displayScale.setter();
}

double sub_100228D30@<D0>(_OWORD *a1@<X8>)
{
  sub_10027DE88();
  EnvironmentValues.subscript.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_100228D80()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_100228DE0(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, char *))
{
  char v4 = a2;
  return a3(a1, &v4);
}

uint64_t sub_100228E18()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_1000EEA28(v0, qword_100525ED8);
  sub_10000F378(v0, (uint64_t)qword_100525ED8);
  return UUID.init()();
}

void sub_100228E64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v70 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v67 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  long long v68 = (char *)&v64 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v64 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v64 - v18;
  uint64_t v69 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v69);
  char v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002ADE24(a1, a2, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  id v22 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v23 = String._bridgeToObjectiveC()();
  id v71 = [v22 initWithSuiteName:v23];

  id v24 = v71;
  if (v71)
  {
    if (qword_100517F58 != -1)
    {
      swift_once();
      id v24 = v71;
    }
    if (byte_10055E408 == 1)
    {
      uint64_t v64 = v10;
      uint64_t v65 = a2 + *(int *)(type metadata accessor for AppConfiguration() + 20);
      sub_1002ADE24(v65, (uint64_t)v21, type metadata accessor for CameraControllerConfiguration);
      uint64_t v25 = (char *)[self defaultManager];
      NSString v26 = String._bridgeToObjectiveC()();
      id v27 = [v71 stringForKey:v26];

      if (v27)
      {
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v30 = v29;
        long long v68 = v25;
        unsigned int v31 = [v25 fileExistsAtPath:v27];

        if (!v31
          || (String.lowercased()(),
              v32._countAndFlagsBits = 1987013934,
              v32._object = (void *)0xE400000000000000,
              Swift::Bool v33 = String.hasSuffix(_:)(v32),
              swift_bridgeObjectRelease(),
              !v33))
        {
          unint64_t v72 = 0;
          unint64_t v73 = 0xE000000000000000;
          _StringGuts.grow(_:)(42);
          swift_bridgeObjectRelease();
          unint64_t v72 = 0xD000000000000013;
          unint64_t v73 = 0x8000000100429D30;
          v62._countAndFlagsBits = v28;
          v62._object = v30;
          String.append(_:)(v62);
          v63._countAndFlagsBits = 0xD000000000000015;
          v63._object = (void *)0x8000000100429D50;
          String.append(_:)(v63);
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        URL.init(fileURLWithPath:)();
        swift_bridgeObjectRelease();
        uint64_t v34 = v69;
        uint64_t v35 = (uint64_t)&v21[*(int *)(v69 + 72)];
        sub_10000FBD8(v35, &qword_10051E070);
        uint64_t v36 = v70;
        uint64_t v37 = v64;
        (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v35, v19, v64);
        uint64_t v38 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56);
        v38(v35, 0, 1, v37);
        URL.deletingPathExtension()();
        URL.appendingPathExtension(_:)();

        uint64_t v39 = *(void (**)(char *, uint64_t))(v36 + 8);
        v39(v16, v37);
        v39(v19, v37);
        v38((uint64_t)v9, 0, 1, v37);
        sub_10000F5DC((uint64_t)v9, (uint64_t)&v21[*(int *)(v34 + 40)], &qword_10051E070);
        v21[*(int *)(v34 + 64)] = 0;
        v21[29] = 1;
      }
      else
      {
        NSString v40 = String._bridgeToObjectiveC()();
        id v41 = [v71 stringForKey:v40];

        if (v41)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          char v42 = v68;
          URL.init(fileURLWithPath:)();
          swift_bridgeObjectRelease();
          uint64_t v43 = v25;
          unsigned __int8 v44 = [v25 fileExistsAtPath:v41];

          if (v44)
          {
            unint64_t v72 = 0x5F646C6F5FLL;
            unint64_t v73 = 0xE500000000000000;
            UUID.init()();
            uint64_t v45 = UUID.uuidString.getter();
            uint64_t v47 = v46;
            (*(void (**)(char *, uint64_t))(v66 + 8))(v6, v4);
            v48._countAndFlagsBits = v45;
            v48._object = v47;
            String.append(_:)(v48);
            swift_bridgeObjectRelease();
            uint64_t v49 = v67;
            URL.appendingPathExtension(_:)();
            swift_bridgeObjectRelease();
            URL._bridgeToObjectiveC()(v50);
            uint64_t v52 = v51;
            URL._bridgeToObjectiveC()(v53);
            uint64_t v55 = v54;
            unint64_t v72 = 0;
            LODWORD(v47) = [v25 moveItemAtURL:v52 toURL:v54 error:&v72];

            uint64_t v56 = v70;
            uint64_t v57 = v64;
            if (v47)
            {
              uint64_t v58 = *(void (**)(char *, uint64_t))(v70 + 8);
              id v59 = (id)v72;
              v58(v49, v57);
            }
            else
            {
              id v60 = (id)v72;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              (*(void (**)(char *, uint64_t))(v56 + 8))(v49, v57);
            }
          }
          else
          {

            uint64_t v56 = v70;
            uint64_t v57 = v64;
          }
          uint64_t v61 = (uint64_t)&v21[*(int *)(v69 + 40)];
          sub_10000FBD8(v61, &qword_10051E070);
          (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v61, v42, v57);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v61, 0, 1, v57);
        }
        else
        {
        }
      }
      sub_100016F1C((uint64_t)v21, v65);
    }
    else
    {
    }
  }
}

uint64_t sub_100229704()
{
  uint64_t v0 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EEA28(v3, qword_100525EF0);
  uint64_t v4 = sub_10000F378(v0, (uint64_t)qword_100525EF0);
  sub_100013FFC((uint64_t)v2);
  sub_100228E64((uint64_t)v2, v4);
  return sub_1002ADE8C((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
}

uint64_t sub_1002297C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - v8;
  type metadata accessor for ContentView();
  sub_10000FB74(a1, (uint64_t)v9, &qword_10051A308);
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.setter();
  State.wrappedValue.getter();
  uint64_t v10 = type metadata accessor for ResultLookupState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v6, 1, v10) == 1)
  {
    sub_10000FBD8((uint64_t)v6, &qword_10051A308);
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_1002ADE8C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    if (!EnumCaseMultiPayload)
    {
      char v12 = *(unsigned char *)(v2 + 56);
      uint64_t v13 = swift_retain();
      sub_10027D7D0(v13, v12, 0xD000000000000010, 0x800000010042A340);
      swift_release();
      sub_1003CA8AC();
      swift_release();
    }
  }
  return sub_10000FBD8(a1, &qword_10051A308);
}

uint64_t sub_10022999C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a4;
  v4[8] = type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[10] = v6;
  v4[11] = v5;
  return _swift_task_switch(sub_100229A38, v6, v5);
}

uint64_t sub_100229A38()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(v2 + 44));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *(void *)(v0 + 16) = v5;
  *(void *)(v0 + 24) = v4;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  *(void *)(v0 + 96) = *(void *)(v0 + 48);
  uint64_t v6 = (char *)(v1 + *(int *)(v2 + 148));
  char v7 = *v6;
  uint64_t v8 = *((void *)v6 + 1);
  *(unsigned char *)(v0 + 32) = v7;
  *(void *)(v0 + 40) = v8;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  *(unsigned char *)(v0 + 145) = *(unsigned char *)(v0 + 144);
  *(void *)(v0 + 104) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v0 + 112) = v10;
  *(void *)(v0 + 120) = v9;
  return _swift_task_switch(sub_100229B54, v10, v9);
}

uint64_t sub_100229B54()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 96) + 16);
  *(void *)(v0 + 128) = v1;
  return _swift_task_switch(sub_100229B78, v1, 0);
}

uint64_t sub_100229B78()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 128) + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100229C18;
  char v3 = *(unsigned char *)(v0 + 145);
  return sub_1003471B4(v3, v1);
}

uint64_t sub_100229C18()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 112);
  return _swift_task_switch(sub_100229D38, v3, v2);
}

uint64_t sub_100229D38()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  return _swift_task_switch(sub_100229DA4, v1, v2);
}

uint64_t sub_100229DA4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100229E04(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = v2 + *(int *)(v5 + 156);
  char v13 = *(unsigned char *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  v20[16] = v13;
  uint64_t v21 = v14;
  v20[15] = a1;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 1, 1, v15);
  sub_1002ADE24(v2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v16 = static MainActor.shared.getter();
  unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  *(void *)(v18 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v8, v18 + v17, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_100064D5C((uint64_t)v11, (uint64_t)&unk_1005263B8, v18);
  return swift_release();
}

uint64_t sub_10022A024()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v2);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = v1 + *(int *)(v3 + 204);
  char v11 = *(unsigned char *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  v18[8] = v11;
  uint64_t v19 = v12;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  sub_100229E04(v20);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
  sub_1002ADE24(v1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v14 = static MainActor.shared.getter();
  unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v6, v16 + v15, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_100064D5C((uint64_t)v9, (uint64_t)&unk_100526658, v16);
  return swift_release();
}

uint64_t sub_10022A23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a4;
  v4[8] = type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[10] = v6;
  v4[11] = v5;
  return _swift_task_switch(sub_10022A2D8, v6, v5);
}

uint64_t sub_10022A2D8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(v2 + 44));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *(void *)(v0 + 16) = v5;
  *(void *)(v0 + 24) = v4;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  *(void *)(v0 + 96) = *(void *)(v0 + 48);
  uint64_t v6 = (char *)(v1 + *(int *)(v2 + 196));
  char v7 = *v6;
  uint64_t v8 = *((void *)v6 + 1);
  *(unsigned char *)(v0 + 32) = v7;
  *(void *)(v0 + 40) = v8;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  *(unsigned char *)(v0 + 145) = *(unsigned char *)(v0 + 144);
  *(void *)(v0 + 104) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v0 + 112) = v10;
  *(void *)(v0 + 120) = v9;
  return _swift_task_switch(sub_10022A3F4, v10, v9);
}

uint64_t sub_10022A3F4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 96) + 16);
  *(void *)(v0 + 128) = v1;
  return _swift_task_switch(sub_10022A418, v1, 0);
}

uint64_t sub_10022A418()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 128) + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10022A4B8;
  char v3 = *(unsigned char *)(v0 + 145);
  return sub_10034736C(v3, v1);
}

uint64_t sub_10022A4B8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 112);
  return _swift_task_switch(sub_10022A5D8, v3, v2);
}

uint64_t sub_10022A5D8()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  return _swift_task_switch(sub_1002B493C, v1, v2);
}

uint64_t sub_10022A644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[28] = a5;
  v6[29] = a6;
  v6[27] = a4;
  sub_10000F214(&qword_10051A8C0);
  v6[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v6[31] = v7;
  v6[32] = *(void *)(v7 - 8);
  v6[33] = swift_task_alloc();
  v6[34] = sub_10000F214(&qword_10051E548);
  v6[35] = swift_task_alloc();
  v6[36] = swift_task_alloc();
  sub_10000F214(&qword_10051E070);
  v6[37] = swift_task_alloc();
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  v6[41] = swift_task_alloc();
  v6[42] = swift_task_alloc();
  v6[43] = swift_task_alloc();
  sub_10000F214(&qword_1005261F0);
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  v6[46] = swift_task_alloc();
  v6[47] = swift_task_alloc();
  v6[48] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CameraControllerConfiguration(0);
  v6[49] = v8;
  v6[50] = *(void *)(v8 - 8);
  v6[51] = swift_task_alloc();
  v6[52] = swift_task_alloc();
  v6[53] = swift_task_alloc();
  v6[54] = swift_task_alloc();
  v6[55] = swift_task_alloc();
  v6[56] = type metadata accessor for MainActor();
  v6[57] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[58] = v10;
  v6[59] = v9;
  return _swift_task_switch(sub_10022A924, v10, v9);
}

uint64_t sub_10022A924()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(int *)(type metadata accessor for ContentView() + 44);
  *(_DWORD *)(v0 + 544) = v2;
  uint64_t v3 = (uint64_t *)(v1 + v2);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *(void *)(v0 + 40) = *v3;
  *(void *)(v0 + 48) = v5;
  *(void *)(v0 + 480) = sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v6 = *(void *)(v0 + 144);
  swift_getKeyPath();
  *(void *)(v0 + 184) = v6;
  *(void *)(v0 + 488) = sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v1) = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  swift_release();
  if (v1 == 1)
  {
    *(void *)(v0 + 56) = v4;
    *(void *)(v0 + 64) = v5;
    State.wrappedValue.getter();
    *(void *)(v0 + 496) = *(void *)(v0 + 200);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10022B9F8;
    return sub_100417314();
  }
  uint64_t v9 = *(void *)(v0 + 392);
  uint64_t v10 = *(void *)(v0 + 400);
  uint64_t v11 = *(void *)(v0 + 384);
  sub_10000FB74(*(void *)(v0 + 224), v11, &qword_1005261F0);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v12(v11, 1, v9) == 1)
  {
    sub_10000FBD8(*(void *)(v0 + 384), &qword_1005261F0);
  }
  else
  {
    uint64_t v13 = *(char **)(v0 + 440);
    sub_1002AA830(*(void *)(v0 + 384), (uint64_t)v13, type metadata accessor for CameraControllerConfiguration);
    sub_10022D3BC(v13);
    sub_1002ADE8C((uint64_t)v13, type metadata accessor for CameraControllerConfiguration);
  }
  if (qword_100517F58 != -1) {
    swift_once();
  }
  if (byte_10055E408 != 1) {
    goto LABEL_45;
  }
  uint64_t v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12;
  uint64_t v14 = *(void *)(v0 + 432);
  uint64_t v15 = *(void *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v17 = *(void *)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 256);
  uint64_t v20 = *(void *)(v0 + 224);
  uint64_t v19 = *(void *)(v0 + 232);
  uint64_t v128 = *(void *)(v0 + 392);
  sub_10000FB74(v19 + *(int *)(v128 + 72), v16, &qword_10051E070);
  uint64_t v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v17) = v135(v16, 1, v17);
  sub_10000FBD8(v16, &qword_10051E070);
  sub_1002ADE24(v19, v14, type metadata accessor for CameraControllerConfiguration);
  sub_10000FB74(v20, v15, &qword_1005261F0);
  uint64_t v21 = *(void *)(v0 + 432);
  if (v17 != 1)
  {
    sub_10000FBD8(*(void *)(v0 + 376), &qword_1005261F0);
    sub_1002ADE8C(v21, type metadata accessor for CameraControllerConfiguration);
LABEL_22:
    uint64_t v51 = *(void *)(v0 + 360);
    uint64_t v52 = *(void *)(v0 + 224);
    sub_1002ADE24(*(void *)(v0 + 232), *(void *)(v0 + 424), type metadata accessor for CameraControllerConfiguration);
    sub_10000FB74(v52, v51, &qword_1005261F0);
LABEL_23:
    uint64_t v53 = *(void *)(v0 + 424);
    sub_10000FBD8(*(void *)(v0 + 360), &qword_1005261F0);
    sub_1002ADE8C(v53, type metadata accessor for CameraControllerConfiguration);
LABEL_24:
    sub_1002ADE24(*(void *)(v0 + 232), *(void *)(v0 + 416), type metadata accessor for CameraControllerConfiguration);
LABEL_25:
    sub_1002ADE8C(*(void *)(v0 + 416), type metadata accessor for CameraControllerConfiguration);
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v0 + 392);
  uint64_t v24 = *(void *)(v0 + 368);
  uint64_t v23 = *(void *)(v0 + 376);
  sub_10000FB74(v21 + *(int *)(v128 + 72), *(void *)(v0 + 336), &qword_10051E070);
  sub_10000FB74(v23, v24, &qword_1005261F0);
  int v25 = v132(v24, 1, v22);
  uint64_t v26 = *(void *)(v0 + 368);
  uint64_t v27 = *(void *)(v0 + 328);
  if (v25 == 1)
  {
    uint64_t v28 = *(void *)(v0 + 248);
    uint64_t v29 = *(void *)(v0 + 256);
    sub_10000FBD8(*(void *)(v0 + 368), &qword_1005261F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
  }
  else
  {
    sub_10000FB74(v26 + *(int *)(v128 + 72), *(void *)(v0 + 328), &qword_10051E070);
    sub_1002ADE8C(v26, type metadata accessor for CameraControllerConfiguration);
  }
  uint64_t v30 = *(void *)(v0 + 328);
  uint64_t v31 = *(void *)(v0 + 288);
  uint64_t v32 = *(void *)(v0 + 248);
  uint64_t v129 = *(void *)(v0 + 272);
  uint64_t v33 = v31 + *(int *)(v129 + 48);
  sub_10000FB74(*(void *)(v0 + 336), v31, &qword_10051E070);
  sub_10000FB74(v30, v33, &qword_10051E070);
  if (v135(v31, 1, v32) == 1)
  {
    uint64_t v34 = *(void *)(v0 + 432);
    uint64_t v35 = *(void *)(v0 + 376);
    uint64_t v36 = *(void *)(v0 + 336);
    uint64_t v37 = *(void *)(v0 + 248);
    sub_10000FBD8(*(void *)(v0 + 328), &qword_10051E070);
    uint64_t v38 = v135;
    sub_10000FBD8(v36, &qword_10051E070);
    sub_10000FBD8(v35, &qword_1005261F0);
    sub_1002ADE8C(v34, type metadata accessor for CameraControllerConfiguration);
    if (v135(v33, 1, v37) == 1)
    {
      uint64_t v39 = *(void *)(v0 + 424);
      uint64_t v40 = *(void *)(v0 + 360);
      uint64_t v42 = *(void *)(v0 + 224);
      uint64_t v41 = *(void *)(v0 + 232);
      sub_10000FBD8(*(void *)(v0 + 288), &qword_10051E070);
      sub_1002ADE24(v41, v39, type metadata accessor for CameraControllerConfiguration);
      sub_10000FB74(v42, v40, &qword_1005261F0);
      goto LABEL_34;
    }
    goto LABEL_21;
  }
  uint64_t v43 = *(void *)(v0 + 248);
  sub_10000FB74(*(void *)(v0 + 288), *(void *)(v0 + 320), &qword_10051E070);
  unsigned int v44 = v135(v33, 1, v43);
  uint64_t v45 = *(void *)(v0 + 432);
  if (v44 == 1)
  {
    uint64_t v46 = *(void *)(v0 + 376);
    uint64_t v47 = *(void *)(v0 + 336);
    uint64_t v48 = *(void *)(v0 + 320);
    uint64_t v49 = *(void *)(v0 + 248);
    uint64_t v50 = *(void *)(v0 + 256);
    sub_10000FBD8(*(void *)(v0 + 328), &qword_10051E070);
    sub_10000FBD8(v47, &qword_10051E070);
    sub_10000FBD8(v46, &qword_1005261F0);
    sub_1002ADE8C(v45, type metadata accessor for CameraControllerConfiguration);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
LABEL_21:
    sub_10000FBD8(*(void *)(v0 + 288), &qword_10051E548);
    goto LABEL_22;
  }
  uint64_t v126 = *(void *)(v0 + 424);
  uint64_t v127 = *(void *)(v0 + 360);
  uint64_t v64 = *(void *)(v0 + 328);
  uint64_t v63 = *(void *)(v0 + 336);
  uint64_t v65 = *(void *)(v0 + 320);
  uint64_t v122 = *(void *)(v0 + 376);
  uint64_t v123 = *(void *)(v0 + 288);
  uint64_t v67 = *(void *)(v0 + 256);
  uint64_t v66 = *(void *)(v0 + 264);
  uint64_t v68 = *(void *)(v0 + 248);
  uint64_t v124 = *(void *)(v0 + 232);
  uint64_t v125 = *(void *)(v0 + 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v66, v33, v68);
  sub_1002AB13C((unint64_t *)&unk_10051E550, (void (*)(uint64_t))&type metadata accessor for URL);
  char v121 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
  v69(v66, v68);
  uint64_t v70 = v64;
  uint64_t v38 = v135;
  sub_10000FBD8(v70, &qword_10051E070);
  sub_10000FBD8(v63, &qword_10051E070);
  sub_10000FBD8(v122, &qword_1005261F0);
  sub_1002ADE8C(v45, type metadata accessor for CameraControllerConfiguration);
  v69(v65, v68);
  sub_10000FBD8(v123, &qword_10051E070);
  sub_1002ADE24(v124, v126, type metadata accessor for CameraControllerConfiguration);
  sub_10000FB74(v125, v127, &qword_1005261F0);
  if ((v121 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_34:
  uint64_t v71 = *(void *)(v0 + 392);
  uint64_t v73 = *(void *)(v0 + 352);
  uint64_t v72 = *(void *)(v0 + 360);
  sub_10000FB74(*(void *)(v0 + 424) + *(int *)(v71 + 88), *(void *)(v0 + 312), &qword_10051E070);
  sub_10000FB74(v72, v73, &qword_1005261F0);
  int v74 = v132(v73, 1, v71);
  uint64_t v75 = *(void *)(v0 + 352);
  uint64_t v76 = *(void *)(v0 + 304);
  if (v74 == 1)
  {
    uint64_t v77 = *(void *)(v0 + 248);
    uint64_t v78 = *(void *)(v0 + 256);
    sub_10000FBD8(*(void *)(v0 + 352), &qword_1005261F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v76, 1, 1, v77);
  }
  else
  {
    sub_10000FB74(v75 + *(int *)(v71 + 88), *(void *)(v0 + 304), &qword_10051E070);
    sub_1002ADE8C(v75, type metadata accessor for CameraControllerConfiguration);
  }
  uint64_t v79 = *(void *)(v0 + 304);
  uint64_t v80 = *(void *)(v0 + 280);
  uint64_t v81 = *(void *)(v0 + 248);
  uint64_t v82 = v80 + *(int *)(v129 + 48);
  sub_10000FB74(*(void *)(v0 + 312), v80, &qword_10051E070);
  sub_10000FB74(v79, v82, &qword_10051E070);
  if (v38(v80, 1, v81) == 1)
  {
    uint64_t v83 = *(void *)(v0 + 424);
    uint64_t v84 = *(void *)(v0 + 360);
    uint64_t v85 = *(void *)(v0 + 312);
    uint64_t v136 = *(void *)(v0 + 248);
    sub_10000FBD8(*(void *)(v0 + 304), &qword_10051E070);
    sub_10000FBD8(v85, &qword_10051E070);
    sub_10000FBD8(v84, &qword_1005261F0);
    sub_1002ADE8C(v83, type metadata accessor for CameraControllerConfiguration);
    if (v38(v82, 1, v136) == 1)
    {
      uint64_t v86 = *(void *)(v0 + 416);
      uint64_t v87 = *(void *)(v0 + 232);
      sub_10000FBD8(*(void *)(v0 + 280), &qword_10051E070);
      sub_1002ADE24(v87, v86, type metadata accessor for CameraControllerConfiguration);
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  uint64_t v88 = *(void *)(v0 + 248);
  sub_10000FB74(*(void *)(v0 + 280), *(void *)(v0 + 296), &qword_10051E070);
  unsigned int v89 = v38(v82, 1, v88);
  uint64_t v90 = *(void *)(v0 + 424);
  if (v89 == 1)
  {
    uint64_t v91 = *(void *)(v0 + 360);
    uint64_t v92 = *(void *)(v0 + 312);
    uint64_t v93 = *(void *)(v0 + 296);
    uint64_t v94 = *(void *)(v0 + 248);
    uint64_t v95 = *(void *)(v0 + 256);
    sub_10000FBD8(*(void *)(v0 + 304), &qword_10051E070);
    sub_10000FBD8(v92, &qword_10051E070);
    sub_10000FBD8(v91, &qword_1005261F0);
    sub_1002ADE8C(v90, type metadata accessor for CameraControllerConfiguration);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v93, v94);
LABEL_42:
    sub_10000FBD8(*(void *)(v0 + 280), &qword_10051E548);
    goto LABEL_24;
  }
  uint64_t v137 = *(void *)(v0 + 416);
  uint64_t v96 = *(void *)(v0 + 304);
  uint64_t v130 = *(void *)(v0 + 312);
  uint64_t v131 = *(void *)(v0 + 360);
  uint64_t v97 = *(void *)(v0 + 296);
  uint64_t v99 = *(void *)(v0 + 256);
  uint64_t v98 = *(void *)(v0 + 264);
  uint64_t v100 = *(void *)(v0 + 248);
  uint64_t v133 = *(void *)(v0 + 280);
  uint64_t v134 = *(void *)(v0 + 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 32))(v98, v82, v100);
  sub_1002AB13C((unint64_t *)&unk_10051E550, (void (*)(uint64_t))&type metadata accessor for URL);
  char v101 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
  v102(v98, v100);
  sub_10000FBD8(v96, &qword_10051E070);
  sub_10000FBD8(v130, &qword_10051E070);
  sub_10000FBD8(v131, &qword_1005261F0);
  sub_1002ADE8C(v90, type metadata accessor for CameraControllerConfiguration);
  v102(v97, v100);
  sub_10000FBD8(v133, &qword_10051E070);
  sub_1002ADE24(v134, v137, type metadata accessor for CameraControllerConfiguration);
  if ((v101 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_44:
  uint64_t v103 = *(void *)(v0 + 416);
  int v104 = *(unsigned __int8 *)(v103 + *(int *)(*(void *)(v0 + 392) + 56));
  sub_1002ADE8C(v103, type metadata accessor for CameraControllerConfiguration);
  if (v104 != 1)
  {
LABEL_45:
    swift_release();
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v105 = type metadata accessor for Logger();
    sub_10000F378(v105, (uint64_t)qword_10055E2E0);
    uint64_t v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v106, v107))
    {
      uint64_t v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v108 = 0;
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "Live reconfig failed or not attempted - restarting the old way", v108, 2u);
      swift_slowDealloc();
    }
    uint64_t v109 = *(int *)(v0 + 544);
    uint64_t v110 = *(void *)(v0 + 408);
    uint64_t v111 = *(void *)(v0 + 232);
    uint64_t v112 = *(void *)(v0 + 216);

    uint64_t v113 = (void *)(v112 + v109);
    sub_1002ADE24(v111, v110, type metadata accessor for CameraControllerConfiguration);
    type metadata accessor for CameraController();
    swift_allocObject();
    uint64_t v114 = sub_1004112E8(v110);
    uint64_t v115 = v113[1];
    *(void *)(v0 + 72) = *v113;
    *(void *)(v0 + 80) = v115;
    *(void *)(v0 + 168) = v114;
    State.wrappedValue.setter();
    uint64_t v116 = (uint64_t *)(*(void *)(v0 + 216) + *(int *)(v0 + 544));
    uint64_t v118 = *v116;
    uint64_t v117 = v116[1];
    *(void *)(v0 + 120) = v118;
    *(void *)(v0 + 128) = v117;
    State.wrappedValue.getter();
    uint64_t v119 = *(void *)(v0 + 152);
    swift_getKeyPath();
    *(void *)(v0 + 136) = v119;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v119 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) != 1) {
      sub_100414568();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v120 = *(uint64_t (**)(void))(v0 + 8);
    return v120();
  }
LABEL_26:
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  *(void *)(v0 + 512) = sub_10000F378(v54, (uint64_t)qword_10055E2E0);
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Attempting reconfig for record start/stop", v57, 2u);
    swift_slowDealloc();
  }
  uint64_t v58 = *(int *)(v0 + 544);
  uint64_t v59 = *(void *)(v0 + 216);

  uint64_t v60 = *(void *)(v59 + v58 + 8);
  *(void *)(v0 + 104) = *(void *)(v59 + v58);
  *(void *)(v0 + 112) = v60;
  State.wrappedValue.getter();
  *(void *)(v0 + 520) = *(void *)(v0 + 208);
  uint64_t v61 = (void *)swift_task_alloc();
  *(void *)(v0 + 528) = v61;
  *uint64_t v61 = v0;
  v61[1] = sub_10022CA78;
  uint64_t v62 = *(void *)(v0 + 232);
  return sub_1004147CC(v62);
}

uint64_t sub_10022B9F8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 472);
  uint64_t v3 = *(void *)(v1 + 464);
  return _swift_task_switch(sub_10022BB3C, v3, v2);
}

uint64_t sub_10022BB3C()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 384);
  sub_10000FB74(*(void *)(v0 + 224), v3, &qword_1005261F0);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v4(v3, 1, v1) == 1)
  {
    sub_10000FBD8(*(void *)(v0 + 384), &qword_1005261F0);
  }
  else
  {
    uint64_t v5 = *(char **)(v0 + 440);
    sub_1002AA830(*(void *)(v0 + 384), (uint64_t)v5, type metadata accessor for CameraControllerConfiguration);
    sub_10022D3BC(v5);
    sub_1002ADE8C((uint64_t)v5, type metadata accessor for CameraControllerConfiguration);
  }
  if (qword_100517F58 != -1) {
    swift_once();
  }
  if (byte_10055E408 != 1) {
    goto LABEL_41;
  }
  uint64_t v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v4;
  uint64_t v6 = *(void *)(v0 + 432);
  uint64_t v7 = *(void *)(v0 + 376);
  uint64_t v8 = *(void *)(v0 + 344);
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v10 = *(void *)(v0 + 256);
  uint64_t v12 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v123 = *(void *)(v0 + 392);
  sub_10000FB74(v11 + *(int *)(v123 + 72), v8, &qword_10051E070);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v9) = v13(v8, 1, v9);
  sub_10000FBD8(v8, &qword_10051E070);
  sub_1002ADE24(v11, v6, type metadata accessor for CameraControllerConfiguration);
  sub_10000FB74(v12, v7, &qword_1005261F0);
  uint64_t v14 = *(void *)(v0 + 432);
  if (v9 != 1)
  {
    sub_10000FBD8(*(void *)(v0 + 376), &qword_1005261F0);
    sub_1002ADE8C(v14, type metadata accessor for CameraControllerConfiguration);
LABEL_18:
    uint64_t v44 = *(void *)(v0 + 360);
    uint64_t v45 = *(void *)(v0 + 224);
    sub_1002ADE24(*(void *)(v0 + 232), *(void *)(v0 + 424), type metadata accessor for CameraControllerConfiguration);
    sub_10000FB74(v45, v44, &qword_1005261F0);
LABEL_19:
    uint64_t v46 = *(void *)(v0 + 424);
    sub_10000FBD8(*(void *)(v0 + 360), &qword_1005261F0);
    sub_1002ADE8C(v46, type metadata accessor for CameraControllerConfiguration);
LABEL_20:
    sub_1002ADE24(*(void *)(v0 + 232), *(void *)(v0 + 416), type metadata accessor for CameraControllerConfiguration);
LABEL_21:
    sub_1002ADE8C(*(void *)(v0 + 416), type metadata accessor for CameraControllerConfiguration);
    goto LABEL_22;
  }
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v17 = *(void *)(v0 + 368);
  uint64_t v16 = *(void *)(v0 + 376);
  sub_10000FB74(v14 + *(int *)(v123 + 72), *(void *)(v0 + 336), &qword_10051E070);
  sub_10000FB74(v16, v17, &qword_1005261F0);
  int v18 = v128(v17, 1, v15);
  uint64_t v19 = *(void *)(v0 + 368);
  uint64_t v20 = *(void *)(v0 + 328);
  if (v18 == 1)
  {
    uint64_t v21 = *(void *)(v0 + 248);
    uint64_t v22 = *(void *)(v0 + 256);
    sub_10000FBD8(*(void *)(v0 + 368), &qword_1005261F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  }
  else
  {
    sub_10000FB74(v19 + *(int *)(v123 + 72), *(void *)(v0 + 328), &qword_10051E070);
    sub_1002ADE8C(v19, type metadata accessor for CameraControllerConfiguration);
  }
  uint64_t v23 = *(void *)(v0 + 328);
  uint64_t v24 = *(void *)(v0 + 288);
  uint64_t v25 = *(void *)(v0 + 272);
  uint64_t v26 = *(void *)(v0 + 248);
  uint64_t v27 = v24 + *(int *)(v25 + 48);
  sub_10000FB74(*(void *)(v0 + 336), v24, &qword_10051E070);
  sub_10000FB74(v23, v27, &qword_10051E070);
  if (v13(v24, 1, v26) == 1)
  {
    uint64_t v124 = v25;
    uint64_t v28 = *(void *)(v0 + 432);
    uint64_t v29 = *(void *)(v0 + 376);
    uint64_t v30 = *(void *)(v0 + 336);
    uint64_t v31 = *(void *)(v0 + 248);
    sub_10000FBD8(*(void *)(v0 + 328), &qword_10051E070);
    sub_10000FBD8(v30, &qword_10051E070);
    sub_10000FBD8(v29, &qword_1005261F0);
    sub_1002ADE8C(v28, type metadata accessor for CameraControllerConfiguration);
    if (v13(v27, 1, v31) == 1)
    {
      uint64_t v32 = *(void *)(v0 + 424);
      uint64_t v33 = *(void *)(v0 + 360);
      uint64_t v35 = *(void *)(v0 + 224);
      uint64_t v34 = *(void *)(v0 + 232);
      sub_10000FBD8(*(void *)(v0 + 288), &qword_10051E070);
      sub_1002ADE24(v34, v32, type metadata accessor for CameraControllerConfiguration);
      sub_10000FB74(v35, v33, &qword_1005261F0);
      goto LABEL_30;
    }
    goto LABEL_17;
  }
  uint64_t v36 = *(void *)(v0 + 248);
  sub_10000FB74(*(void *)(v0 + 288), *(void *)(v0 + 320), &qword_10051E070);
  int v37 = v13(v27, 1, v36);
  uint64_t v38 = *(void *)(v0 + 432);
  if (v37 == 1)
  {
    uint64_t v39 = *(void *)(v0 + 376);
    uint64_t v40 = *(void *)(v0 + 336);
    uint64_t v41 = *(void *)(v0 + 320);
    uint64_t v42 = *(void *)(v0 + 248);
    uint64_t v43 = *(void *)(v0 + 256);
    sub_10000FBD8(*(void *)(v0 + 328), &qword_10051E070);
    sub_10000FBD8(v40, &qword_10051E070);
    sub_10000FBD8(v39, &qword_1005261F0);
    sub_1002ADE8C(v38, type metadata accessor for CameraControllerConfiguration);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
LABEL_17:
    sub_10000FBD8(*(void *)(v0 + 288), &qword_10051E548);
    goto LABEL_18;
  }
  uint64_t v122 = *(void *)(v0 + 360);
  uint64_t v124 = v25;
  uint64_t v58 = *(void *)(v0 + 328);
  uint64_t v57 = *(void *)(v0 + 336);
  uint64_t v59 = *(void *)(v0 + 320);
  uint64_t v117 = *(void *)(v0 + 376);
  uint64_t v118 = *(void *)(v0 + 288);
  uint64_t v61 = *(void *)(v0 + 256);
  uint64_t v60 = *(void *)(v0 + 264);
  uint64_t v62 = *(void *)(v0 + 248);
  uint64_t v119 = *(void *)(v0 + 232);
  uint64_t v120 = *(void *)(v0 + 224);
  uint64_t v121 = *(void *)(v0 + 424);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v60, v27, v62);
  sub_1002AB13C((unint64_t *)&unk_10051E550, (void (*)(uint64_t))&type metadata accessor for URL);
  char v116 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v63(v60, v62);
  sub_10000FBD8(v58, &qword_10051E070);
  sub_10000FBD8(v57, &qword_10051E070);
  sub_10000FBD8(v117, &qword_1005261F0);
  sub_1002ADE8C(v38, type metadata accessor for CameraControllerConfiguration);
  v63(v59, v62);
  sub_10000FBD8(v118, &qword_10051E070);
  sub_1002ADE24(v119, v121, type metadata accessor for CameraControllerConfiguration);
  sub_10000FB74(v120, v122, &qword_1005261F0);
  if ((v116 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_30:
  uint64_t v64 = *(void *)(v0 + 392);
  uint64_t v66 = *(void *)(v0 + 352);
  uint64_t v65 = *(void *)(v0 + 360);
  sub_10000FB74(*(void *)(v0 + 424) + *(int *)(v64 + 88), *(void *)(v0 + 312), &qword_10051E070);
  sub_10000FB74(v65, v66, &qword_1005261F0);
  int v67 = v128(v66, 1, v64);
  uint64_t v68 = *(void *)(v0 + 352);
  uint64_t v69 = *(void *)(v0 + 304);
  if (v67 == 1)
  {
    uint64_t v70 = *(void *)(v0 + 248);
    uint64_t v71 = *(void *)(v0 + 256);
    sub_10000FBD8(*(void *)(v0 + 352), &qword_1005261F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v69, 1, 1, v70);
  }
  else
  {
    sub_10000FB74(v68 + *(int *)(v64 + 88), *(void *)(v0 + 304), &qword_10051E070);
    sub_1002ADE8C(v68, type metadata accessor for CameraControllerConfiguration);
  }
  uint64_t v72 = *(void *)(v0 + 304);
  uint64_t v73 = *(void *)(v0 + 280);
  uint64_t v74 = *(void *)(v0 + 248);
  uint64_t v75 = v73 + *(int *)(v124 + 48);
  sub_10000FB74(*(void *)(v0 + 312), v73, &qword_10051E070);
  sub_10000FB74(v72, v75, &qword_10051E070);
  if (v13(v73, 1, v74) == 1)
  {
    uint64_t v76 = *(void *)(v0 + 424);
    uint64_t v77 = *(void *)(v0 + 360);
    uint64_t v78 = *(void *)(v0 + 312);
    uint64_t v79 = *(void *)(v0 + 248);
    sub_10000FBD8(*(void *)(v0 + 304), &qword_10051E070);
    sub_10000FBD8(v78, &qword_10051E070);
    sub_10000FBD8(v77, &qword_1005261F0);
    sub_1002ADE8C(v76, type metadata accessor for CameraControllerConfiguration);
    if (v13(v75, 1, v79) == 1)
    {
      uint64_t v80 = *(void *)(v0 + 416);
      uint64_t v81 = *(void *)(v0 + 232);
      sub_10000FBD8(*(void *)(v0 + 280), &qword_10051E070);
      sub_1002ADE24(v81, v80, type metadata accessor for CameraControllerConfiguration);
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  uint64_t v82 = *(void *)(v0 + 248);
  sub_10000FB74(*(void *)(v0 + 280), *(void *)(v0 + 296), &qword_10051E070);
  int v83 = v13(v75, 1, v82);
  uint64_t v84 = *(void *)(v0 + 424);
  if (v83 == 1)
  {
    uint64_t v85 = *(void *)(v0 + 360);
    uint64_t v86 = *(void *)(v0 + 312);
    uint64_t v87 = *(void *)(v0 + 296);
    uint64_t v88 = *(void *)(v0 + 248);
    uint64_t v89 = *(void *)(v0 + 256);
    sub_10000FBD8(*(void *)(v0 + 304), &qword_10051E070);
    sub_10000FBD8(v86, &qword_10051E070);
    sub_10000FBD8(v85, &qword_1005261F0);
    sub_1002ADE8C(v84, type metadata accessor for CameraControllerConfiguration);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
LABEL_38:
    sub_10000FBD8(*(void *)(v0 + 280), &qword_10051E548);
    goto LABEL_20;
  }
  uint64_t v90 = *(void *)(v0 + 304);
  uint64_t v91 = *(void *)(v0 + 312);
  uint64_t v92 = *(void *)(v0 + 296);
  uint64_t v125 = *(void *)(v0 + 360);
  uint64_t v126 = *(void *)(v0 + 280);
  uint64_t v94 = *(void *)(v0 + 256);
  uint64_t v93 = *(void *)(v0 + 264);
  uint64_t v95 = *(void *)(v0 + 248);
  uint64_t v127 = *(void *)(v0 + 232);
  uint64_t v129 = *(void *)(v0 + 416);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 32))(v93, v75, v95);
  sub_1002AB13C((unint64_t *)&unk_10051E550, (void (*)(uint64_t))&type metadata accessor for URL);
  char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
  v97(v93, v95);
  sub_10000FBD8(v90, &qword_10051E070);
  sub_10000FBD8(v91, &qword_10051E070);
  sub_10000FBD8(v125, &qword_1005261F0);
  sub_1002ADE8C(v84, type metadata accessor for CameraControllerConfiguration);
  v97(v92, v95);
  sub_10000FBD8(v126, &qword_10051E070);
  sub_1002ADE24(v127, v129, type metadata accessor for CameraControllerConfiguration);
  if ((v96 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_40:
  uint64_t v98 = *(void *)(v0 + 416);
  int v99 = *(unsigned __int8 *)(v98 + *(int *)(*(void *)(v0 + 392) + 56));
  sub_1002ADE8C(v98, type metadata accessor for CameraControllerConfiguration);
  if (v99 != 1)
  {
LABEL_41:
    swift_release();
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v100 = type metadata accessor for Logger();
    sub_10000F378(v100, (uint64_t)qword_10055E2E0);
    char v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "Live reconfig failed or not attempted - restarting the old way", v103, 2u);
      swift_slowDealloc();
    }
    uint64_t v104 = *(int *)(v0 + 544);
    uint64_t v105 = *(void *)(v0 + 408);
    uint64_t v106 = *(void *)(v0 + 232);
    uint64_t v107 = *(void *)(v0 + 216);

    uint64_t v108 = (void *)(v107 + v104);
    sub_1002ADE24(v106, v105, type metadata accessor for CameraControllerConfiguration);
    type metadata accessor for CameraController();
    swift_allocObject();
    uint64_t v109 = sub_1004112E8(v105);
    uint64_t v110 = v108[1];
    *(void *)(v0 + 72) = *v108;
    *(void *)(v0 + 80) = v110;
    *(void *)(v0 + 168) = v109;
    State.wrappedValue.setter();
    uint64_t v111 = (uint64_t *)(*(void *)(v0 + 216) + *(int *)(v0 + 544));
    uint64_t v113 = *v111;
    uint64_t v112 = v111[1];
    *(void *)(v0 + 120) = v113;
    *(void *)(v0 + 128) = v112;
    State.wrappedValue.getter();
    uint64_t v114 = *(void *)(v0 + 152);
    swift_getKeyPath();
    *(void *)(v0 + 136) = v114;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v114 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) != 1) {
      sub_100414568();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v115 = *(uint64_t (**)(void))(v0 + 8);
    return v115();
  }
LABEL_22:
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  *(void *)(v0 + 512) = sub_10000F378(v47, (uint64_t)qword_10055E2E0);
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Attempting reconfig for record start/stop", v50, 2u);
    swift_slowDealloc();
  }
  uint64_t v51 = *(int *)(v0 + 544);
  uint64_t v52 = *(void *)(v0 + 216);

  uint64_t v53 = *(void *)(v52 + v51 + 8);
  *(void *)(v0 + 104) = *(void *)(v52 + v51);
  *(void *)(v0 + 112) = v53;
  State.wrappedValue.getter();
  *(void *)(v0 + 520) = *(void *)(v0 + 208);
  uint64_t v54 = (void *)swift_task_alloc();
  *(void *)(v0 + 528) = v54;
  *uint64_t v54 = v0;
  v54[1] = sub_10022CA78;
  uint64_t v55 = *(void *)(v0 + 232);
  return sub_1004147CC(v55);
}

uint64_t sub_10022CA78()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 464);
    uint64_t v4 = *(void *)(v2 + 472);
    uint64_t v5 = sub_10022CDA0;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 464);
    uint64_t v4 = *(void *)(v2 + 472);
    uint64_t v5 = sub_10022CB94;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10022CB94()
{
  swift_release();
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 216) + *(int *)(v0 + 544));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  *(void *)(v0 + 120) = v3;
  *(void *)(v0 + 128) = v2;
  State.wrappedValue.getter();
  uint64_t v4 = *(void *)(v0 + 152);
  swift_getKeyPath();
  *(void *)(v0 + 136) = v4;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) != 1) {
    sub_100414568();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10022CDA0()
{
  uint64_t v33 = v0;
  uint64_t v1 = *(void *)(v0 + 536);
  swift_release();
  swift_release();
  *(void *)(v0 + 160) = v1;
  swift_errorRetain();
  sub_10000F214(&qword_10051F3B0);
  if ((swift_dynamicCast() & 1) != 0 && (uint64_t v2 = *(void *)(v0 + 96)) != 0)
  {
    uint64_t v3 = *(void *)(v0 + 240);
    uint64_t v4 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 88);
    swift_errorRelease();
    uint64_t v6 = (void *)swift_task_alloc();
    v6[2] = v4;
    v6[3] = v5;
    v6[4] = v2;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
    uint64_t v8 = static MainActor.shared.getter();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = &protocol witness table for MainActor;
    sub_100064D5C(v3, (uint64_t)&unk_100526210, v9);
    swift_release();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      *(void *)(v0 + 192) = sub_1003806B0(v13, v14, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Reconfig failed: %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000F378(v15, (uint64_t)qword_10055E2E0);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      int v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Live reconfig failed or not attempted - restarting the old way", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v19 = *(int *)(v0 + 544);
    uint64_t v20 = *(void *)(v0 + 408);
    uint64_t v21 = *(void *)(v0 + 232);
    uint64_t v22 = *(void *)(v0 + 216);

    uint64_t v23 = (void *)(v22 + v19);
    sub_1002ADE24(v21, v20, type metadata accessor for CameraControllerConfiguration);
    type metadata accessor for CameraController();
    swift_allocObject();
    uint64_t v24 = sub_1004112E8(v20);
    uint64_t v25 = v23[1];
    *(void *)(v0 + 72) = *v23;
    *(void *)(v0 + 80) = v25;
    *(void *)(v0 + 168) = v24;
    State.wrappedValue.setter();
    uint64_t v26 = (uint64_t *)(*(void *)(v0 + 216) + *(int *)(v0 + 544));
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    *(void *)(v0 + 120) = v28;
    *(void *)(v0 + 128) = v27;
    State.wrappedValue.getter();
    uint64_t v29 = *(void *)(v0 + 152);
    swift_getKeyPath();
    *(void *)(v0 + 136) = v29;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v29 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) != 1) {
      sub_100414568();
    }
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_10022D3BC(char *a1)
{
  uint64_t v93 = a1;
  uint64_t v83 = type metadata accessor for ContentView();
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v82 = v2;
  uint64_t v87 = (uint64_t)&v79 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v86 = (uint64_t)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v84 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v88 = (char *)&v79 - v8;
  uint64_t v80 = v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v79 - v11;
  uint64_t v13 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v13 - 8);
  uint64_t v89 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  os_log_type_t v17 = (char *)&v79 - v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v79 - v19;
  uint64_t v21 = type metadata accessor for String.Encoding();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517D88 != -1) {
    swift_once();
  }
  uint64_t v85 = v1;
  uint64_t v25 = qword_10055E098;
  uint64_t v26 = *(void **)(qword_10055E098 + 112);
  if (v26)
  {
    uint64_t v90 = v12;
    uint64_t v27 = v5;
    id v28 = v26;
    static String.Encoding.utf8.getter();
    uint64_t v29 = String.data(using:allowLossyConversion:)();
    unint64_t v31 = v30;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    if (v31 >> 60 != 15)
    {
      uint64_t v32 = *(void **)(v25 + 112);
      if (v32)
      {
        id v33 = v32;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        [v33 writeData:isa];
        sub_100094760(v29, v31);
      }
      else
      {
        sub_100094760(v29, v31);
      }
    }
    [v28 closeFile];

    uint64_t v26 = *(void **)(v25 + 112);
    uint64_t v5 = v27;
    uint64_t v12 = v90;
  }
  *(void *)(v25 + 112) = 0;

  uint64_t v35 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v36 = (uint64_t)&v93[*(int *)(v35 + 88)];
  sub_10000FB74(v36, (uint64_t)v20, &qword_10051E070);
  uint64_t v91 = v5;
  int v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v38 = v92;
  int v39 = v37(v20, 1, v92);
  uint64_t result = sub_10000FBD8((uint64_t)v20, &qword_10051E070);
  if (v39 != 1)
  {
    sub_10000FB74(v36, (uint64_t)v17, &qword_10051E070);
    if (v37(v17, 1, v38) == 1)
    {
      return sub_10000FBD8((uint64_t)v17, &qword_10051E070);
    }
    else
    {
      uint64_t v41 = v38;
      uint64_t v42 = v91;
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
      v43(v12, v17, v41);
      uint64_t v44 = v89;
      sub_10000FB74((uint64_t)&v93[*(int *)(v35 + 40)], v89, &qword_10051E070);
      if (v37((char *)v44, 1, v41) == 1)
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v41);
        return sub_10000FBD8(v44, &qword_10051E070);
      }
      else
      {
        uint64_t v45 = v88;
        v43(v88, (char *)v44, v41);
        id v46 = [self defaultManager];
        URL.path(percentEncoded:)(1);
        NSString v47 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v48 = [v46 fileExistsAtPath:v47];

        if (v48)
        {
          uint64_t v90 = v12;
          uint64_t v49 = v83;
          uint64_t v50 = v85;
          uint64_t v51 = (char *)(v85 + *(int *)(v83 + 208));
          char v52 = *v51;
          uint64_t v93 = v51;
          uint64_t v53 = *((void *)v51 + 1);
          LOBYTE(v97[0]) = v52;
          *((void *)&v97[0] + 1) = v53;
          uint64_t v54 = sub_10000F214(&qword_100522EA0);
          State.wrappedValue.getter();
          uint64_t v89 = v54;
          if (v94 == 1)
          {
            sub_10000F214(&qword_100526228);
            uint64_t v55 = v91;
            uint64_t v56 = *(void *)(v91 + 72);
            unint64_t v57 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
            uint64_t v58 = swift_allocObject();
            *(_OWORD *)(v58 + 16) = xmmword_100440F30;
            unint64_t v59 = v58 + v57;
            uint64_t v60 = *(void (**)(unint64_t, char *, uint64_t))(v55 + 16);
            v60(v59, v90, v41);
            v60(v59 + v56, v88, v41);
            uint64_t v98 = 0;
            memset(v97, 0, sizeof(v97));
            uint64_t v61 = v50 + *(int *)(v49 + 212);
            char v62 = *(unsigned char *)v61;
            uint64_t v63 = *(void *)(v61 + 8);
            char v94 = v62;
            uint64_t v95 = v63;
            State.wrappedValue.getter();
            sub_100276A98(v58, (uint64_t)v97, v96);
            swift_bridgeObjectRelease();
            sub_10000FBD8((uint64_t)v97, &qword_100518A80);
          }
          uint64_t v64 = v50 + *(int *)(v49 + 204);
          uint64_t v65 = *(void *)(v64 + 8);
          LOBYTE(v97[0]) = *(unsigned char *)v64;
          *((void *)&v97[0] + 1) = v65;
          State.wrappedValue.getter();
          if (v94)
          {
            uint64_t v66 = v90;
            sub_100278208();
            uint64_t v67 = v91;
          }
          else
          {
            uint64_t v69 = type metadata accessor for TaskPriority();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v86, 1, 1, v69);
            uint64_t v70 = v50;
            uint64_t v66 = v90;
            uint64_t v67 = v91;
            uint64_t v71 = v91 + 16;
            (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v84, v90, v41);
            sub_1002ADE24(v70, v87, (uint64_t (*)(void))type metadata accessor for ContentView);
            type metadata accessor for MainActor();
            uint64_t v72 = static MainActor.shared.getter();
            unint64_t v73 = (*(unsigned __int8 *)(v71 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 64);
            unint64_t v74 = (v80 + *(unsigned __int8 *)(v81 + 80) + v73) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
            uint64_t v75 = swift_allocObject();
            *(void *)(v75 + 16) = v72;
            *(void *)(v75 + 24) = &protocol witness table for MainActor;
            v43((char *)(v75 + v73), v84, v41);
            sub_1002AA830(v87, v75 + v74, (uint64_t (*)(void))type metadata accessor for ContentView);
            sub_100064D5C(v86, (uint64_t)&unk_100526220, v75);
            swift_release();
          }
          uint64_t v76 = *(void *)(v64 + 8);
          LOBYTE(v97[0]) = *(unsigned char *)v64;
          *((void *)&v97[0] + 1) = v76;
          char v94 = 0;
          State.wrappedValue.setter();
          uint64_t v77 = *((void *)v93 + 1);
          LOBYTE(v97[0]) = *v93;
          *((void *)&v97[0] + 1) = v77;
          char v94 = 0;
          State.wrappedValue.setter();
          uint64_t v78 = *(void (**)(char *, uint64_t))(v67 + 8);
          v78(v88, v41);
          return ((uint64_t (*)(char *, uint64_t))v78)(v66, v41);
        }
        else
        {
          uint64_t v68 = *(void (**)(char *, uint64_t))(v91 + 8);
          v68(v45, v41);
          return ((uint64_t (*)(char *, uint64_t))v68)(v12, v41);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10022DCF4()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = 0x747261747365520ALL;
  v0._object = (void *)0xEF70706120676E69;
  String.append(_:)(v0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_10051D550);
  return State.wrappedValue.setter();
}

uint64_t sub_10022DDD4()
{
  uint64_t v1 = type metadata accessor for ContinuousClock();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[6] = v3;
  v0[7] = v2;
  return _swift_task_switch(sub_10022DEC4, v3, v2);
}

uint64_t sub_10022DEC4()
{
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1005282F0 + dword_1005282F0);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10022DFA0;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_10022DFA0()
{
  uint64_t v3 = (void *)*v1;
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[2];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v3[6];
    uint64_t v8 = v3[7];
    uint64_t v9 = sub_10022E144;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v3[9] = 0;
    uint64_t v9 = sub_10022E164;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v9, v7, v8);
}

uint64_t sub_10022E144()
{
  *(void *)(v0 + 72) = 0;
  return _swift_task_switch(sub_10022E164, 0, 0);
}

uint64_t sub_10022E164()
{
  *(void *)(v0 + 80) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10022E1F0, v2, v1);
}

uint64_t sub_10022E1F0()
{
  return withAnimation<A>(_:_:)();
}

void sub_10022E260()
{
}

uint64_t sub_10022E2BC@<X0>(char *a1@<X8>)
{
  long long v149 = a1;
  uint64_t v148 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v148);
  uint64_t v145 = (uint64_t)&v123 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for AppConfiguration() - 8;
  __chkstk_darwin(v142);
  uint64_t v140 = (char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v4 - 8;
  uint64_t v160 = v4 - 8;
  __chkstk_darwin(v4 - 8);
  long long v159 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v129 = (uint64_t)&v123 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v123 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v123 - v14;
  *((void *)&v150 + 1) = sub_10000F214(&qword_100526108);
  uint64_t v132 = *(void *)(*((void *)&v150 + 1) - 8);
  __chkstk_darwin(*((void *)&v150 + 1));
  *(void *)&long long v150 = (char *)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_100526110);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v133 = v17;
  uint64_t v134 = v18;
  __chkstk_darwin(v17);
  long long v152 = (char *)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = sub_10000F214(&qword_100526118);
  uint64_t v135 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  long long v151 = (char *)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000F214(&qword_100526120);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v136 = v21;
  uint64_t v137 = v22;
  __chkstk_darwin(v21);
  long long v153 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_10000F214(&qword_100526128);
  uint64_t v138 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  long long v155 = (char *)&v123 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000F214(&qword_100526130);
  uint64_t v147 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  long long v157 = (char *)&v123 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10000F214(&qword_100526138);
  uint64_t v143 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v139 = (char *)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v141 = (char *)&v123 - v28;
  uint64_t v29 = *(int *)(v7 + 148);
  uint64_t v30 = v1;
  uint64_t v131 = v1 + v29;
  uint64_t v31 = *(void *)(v1 + v29 + 8);
  LOBYTE(v184) = *(unsigned char *)(v1 + v29);
  *((void *)&v184 + 1) = v31;
  uint64_t v130 = sub_10000F214(&qword_100522EA0);
  State.projectedValue.getter();
  uint64_t v127 = *((void *)&v208 + 1);
  uint64_t OpaqueTypeConformance2 = v208;
  int v126 = v209;
  uint64_t v32 = (uint64_t)v15;
  v164 = v15;
  sub_1002ADE24(v30, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v33 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v34 = ((v33 + 16) & ~v33) + v6;
  uint64_t v35 = (v33 + 16) & ~v33;
  uint64_t v36 = v33 | 7;
  uint64_t v125 = swift_allocObject();
  sub_1002AA830(v32, v125 + v35, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1002ADE24(v30, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v124 = swift_allocObject();
  sub_1002AA830((uint64_t)v12, v124 + v35, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v37 = v129;
  sub_1002ADE24(v30, v129, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v123 = swift_allocObject();
  sub_1002AA830(v37, v123 + v35, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v163 = v30;
  uint64_t v38 = (uint64_t)v159;
  v166 = type metadata accessor for ContentView;
  sub_1002ADE24(v30, (uint64_t)v159, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v161 = v34;
  uint64_t v165 = v36;
  uint64_t v39 = swift_allocObject();
  uint64_t v162 = v35;
  long long v158 = type metadata accessor for ContentView;
  sub_1002AA830(v38, v39 + v35, (uint64_t (*)(void))type metadata accessor for ContentView);
  LOBYTE(v184) = 0;
  State.init(wrappedValue:)();
  LOBYTE(v184) = v208;
  *((void *)&v184 + 1) = *((void *)&v208 + 1);
  *(void *)&long long v185 = OpaqueTypeConformance2;
  *((void *)&v185 + 1) = v127;
  LOBYTE(v186) = v126;
  *((void *)&v186 + 1) = sub_10028E594;
  *(void *)&long long v187 = v125;
  *((void *)&v187 + 1) = sub_10028E5FC;
  *(void *)&long long v188 = v124;
  *((void *)&v188 + 1) = sub_10028E618;
  *(void *)&long long v189 = v123;
  *((void *)&v189 + 1) = sub_10028E68C;
  *(void *)&long long v190 = v39;
  uint64_t v40 = v30;
  uint64_t v41 = (uint64_t)v164;
  sub_1002ADE24(v40, (uint64_t)v164, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v42 = swift_allocObject();
  sub_1002AA830(v41, v42 + v35, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_10000F214(&qword_100526140);
  sub_100013AA8(&qword_100526148, &qword_100526140);
  View.onAppear(perform:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v200[6] = v214;
  v200[7] = v215;
  uint64_t v201 = v216;
  v200[2] = v210;
  v200[3] = v211;
  v200[4] = v212;
  v200[5] = v213;
  v200[0] = v208;
  v200[1] = v209;
  long long v174 = v214;
  long long v175 = v215;
  *(void *)&long long v176 = v216;
  long long v170 = v210;
  long long v171 = v211;
  long long v172 = v212;
  long long v173 = v213;
  long long v168 = v208;
  long long v169 = v209;
  sub_10000F214(&qword_100526150);
  sub_10028E718();
  View.onDisappear(perform:)();
  sub_10028E7B8((uint64_t)v200);
  long long v176 = v192;
  long long v177 = v193;
  *(void *)&long long v178 = v194;
  long long v172 = v188;
  long long v173 = v189;
  long long v174 = v190;
  long long v175 = v191;
  long long v168 = v184;
  long long v169 = v185;
  long long v170 = v186;
  long long v171 = v187;
  uint64_t v43 = v163;
  uint64_t v44 = v41;
  uint64_t v45 = v41;
  id v46 = v166;
  sub_1002ADE24(v163, v45, (uint64_t (*)(void))v166);
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v162;
  sub_1002AA830(v44, v47 + v162, (uint64_t (*)(void))v158);
  sub_10000F214(&qword_100526160);
  sub_10028E890(&qword_100526168, &qword_100526160, (void (*)(void))sub_10028E718);
  sub_10014F290();
  swift_release();
  v202[8] = v176;
  v202[9] = v177;
  uint64_t v203 = v178;
  v202[4] = v172;
  v202[5] = v173;
  v202[6] = v174;
  v202[7] = v175;
  v202[0] = v168;
  v202[1] = v169;
  v202[2] = v170;
  v202[3] = v171;
  sub_10028E90C(v202);
  long long v176 = v216;
  long long v177 = v217;
  long long v178 = v218;
  long long v179 = v219;
  long long v172 = v212;
  long long v173 = v213;
  long long v174 = v214;
  long long v175 = v215;
  long long v168 = v208;
  long long v169 = v209;
  long long v170 = v210;
  long long v171 = v211;
  uint64_t v49 = (uint64_t)v164;
  sub_1002ADE24(v43, (uint64_t)v164, (uint64_t (*)(void))v46);
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = v158;
  sub_1002AA830(v49, v50 + v48, (uint64_t (*)(void))v158);
  sub_10000F214(&qword_100526170);
  sub_10028EA74();
  sub_10014F2F0();
  swift_release();
  v204[8] = v176;
  v204[9] = v177;
  v204[10] = v178;
  v204[11] = v179;
  v204[4] = v172;
  v204[5] = v173;
  v204[6] = v174;
  v204[7] = v175;
  v204[0] = v168;
  v204[1] = v169;
  v204[2] = v170;
  v204[3] = v171;
  sub_10028EB40(v204);
  long long v178 = v194;
  long long v179 = v195;
  long long v180 = v196;
  *(void *)&long long v181 = v197;
  long long v174 = v190;
  long long v175 = v191;
  long long v176 = v192;
  long long v177 = v193;
  long long v170 = v186;
  long long v171 = v187;
  long long v172 = v188;
  long long v173 = v189;
  long long v168 = v184;
  long long v169 = v185;
  uint64_t v52 = v163;
  uint64_t v53 = v166;
  sub_1002ADE24(v163, v49, (uint64_t (*)(void))v166);
  uint64_t v54 = swift_allocObject();
  sub_1002AA830(v49, v54 + v48, (uint64_t (*)(void))v51);
  sub_10000F214(&qword_100526190);
  sub_10028ECB8();
  sub_10014F350();
  swift_release();
  v205[10] = v178;
  v205[11] = v179;
  v205[12] = v180;
  v205[6] = v174;
  v205[7] = v175;
  v205[8] = v176;
  v205[9] = v177;
  v205[2] = v170;
  v205[3] = v171;
  v205[4] = v172;
  v205[5] = v173;
  v205[0] = v168;
  uint64_t v206 = v181;
  v205[1] = v169;
  sub_10028ED58(v205);
  long long v180 = v220;
  long long v181 = v221;
  long long v182 = v222;
  long long v176 = v216;
  long long v177 = v217;
  long long v178 = v218;
  long long v179 = v219;
  long long v172 = v212;
  long long v173 = v213;
  long long v174 = v214;
  long long v175 = v215;
  long long v168 = v208;
  long long v169 = v209;
  long long v170 = v210;
  long long v171 = v211;
  uint64_t v55 = (uint64_t)v164;
  sub_1002ADE24(v52, (uint64_t)v164, (uint64_t (*)(void))v53);
  uint64_t v56 = swift_allocObject();
  sub_1002AA830(v55, v56 + v48, (uint64_t (*)(void))v51);
  sub_10000F214(&qword_1005261B0);
  sub_10028EE9C();
  sub_100151370();
  swift_release();
  v207[11] = v179;
  v207[12] = v180;
  v207[13] = v181;
  v207[14] = v182;
  v207[7] = v175;
  v207[8] = v176;
  v207[9] = v177;
  v207[10] = v178;
  v207[3] = v171;
  v207[4] = v172;
  v207[5] = v173;
  v207[6] = v174;
  v207[0] = v168;
  v207[1] = v169;
  v207[2] = v170;
  sub_10028EF3C(v207);
  long long v180 = v196;
  long long v181 = v197;
  long long v182 = v198;
  long long v183 = v199;
  long long v176 = v192;
  long long v177 = v193;
  long long v178 = v194;
  long long v179 = v195;
  long long v172 = v188;
  long long v173 = v189;
  long long v174 = v190;
  long long v175 = v191;
  long long v168 = v184;
  long long v169 = v185;
  long long v170 = v186;
  long long v171 = v187;
  uint64_t v57 = v163;
  LOBYTE(v12) = *(unsigned char *)(v163 + 40);
  uint64_t v58 = swift_retain();
  uint64_t v59 = sub_10027D7D0(v58, (char)v12, 0xD000000000000019, 0x800000010042A5C0);
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v208 = v59;
  sub_1002AB13C((unint64_t *)&qword_10051B278, (void (*)(uint64_t))type metadata accessor for SiriRequestStateResponder);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v55) = *(unsigned char *)(v59 + 16);
  swift_release();
  char v167 = v55;
  uint64_t v60 = (uint64_t)v164;
  sub_1002ADE24(v57, (uint64_t)v164, (uint64_t (*)(void))v166);
  uint64_t v61 = swift_allocObject();
  sub_1002AA830(v60, v61 + v48, (uint64_t (*)(void))v51);
  uint64_t v62 = sub_10000F214(&qword_1005261D0);
  unint64_t v63 = sub_10028F0B0();
  unint64_t v64 = sub_10028F12C();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  long long v220 = v180;
  long long v221 = v181;
  long long v222 = v182;
  long long v223 = v183;
  long long v216 = v176;
  long long v217 = v177;
  long long v218 = v178;
  long long v219 = v179;
  long long v212 = v172;
  long long v213 = v173;
  long long v214 = v174;
  long long v215 = v175;
  long long v208 = v168;
  long long v209 = v169;
  long long v210 = v170;
  long long v211 = v171;
  sub_10028F180(&v208);
  uint64_t v65 = v57;
  uint64_t v66 = (void *)(v57 + *(int *)(v160 + 52));
  uint64_t v67 = v66[1];
  *(void *)&long long v184 = *v66;
  *((void *)&v184 + 1) = v67;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v129 = type metadata accessor for CameraController();
  *(void *)&long long v184 = v62;
  *((void *)&v184 + 1) = &type metadata for SiriRequestStateResponder.SiriRequestState;
  *(void *)&long long v185 = v63;
  *((void *)&v185 + 1) = v64;
  long long v159 = (char *)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v68 = sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  uint64_t v69 = *((void *)&v150 + 1);
  uint64_t v70 = v150;
  View.environment<A>(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v70, v69);
  uint64_t v71 = v66[1];
  *(void *)&long long v184 = *v66;
  *((void *)&v184 + 1) = v71;
  State.wrappedValue.getter();
  uint64_t v72 = v168;
  swift_getKeyPath();
  *(void *)&long long v184 = v72;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v73 = *(void *)(v72 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v74 = *(void *)(v72 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  LOBYTE(v66) = *(unsigned char *)(v72 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v73, v74, (char)v66);
  swift_release();
  *(void *)&long long v168 = v73;
  *((void *)&v168 + 1) = v74;
  LOBYTE(v169) = (_BYTE)v66;
  uint64_t v75 = (uint64_t)v164;
  uint64_t v76 = v166;
  sub_1002ADE24(v65, (uint64_t)v164, (uint64_t (*)(void))v166);
  uint64_t v77 = swift_allocObject();
  uint64_t v78 = v158;
  sub_1002AA830(v75, v77 + v162, (uint64_t (*)(void))v158);
  *(void *)&long long v184 = *((void *)&v150 + 1);
  *((void *)&v184 + 1) = v129;
  *(void *)&long long v185 = OpaqueTypeConformance2;
  *((void *)&v185 + 1) = v68;
  *(void *)&long long v150 = swift_getOpaqueTypeConformance2();
  *((void *)&v150 + 1) = sub_1000BC2A0();
  uint64_t v79 = v133;
  uint64_t v80 = v152;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_1000BC2F4(v168, *((uint64_t *)&v168 + 1), v169);
  (*(void (**)(char *, uint64_t))(v134 + 8))(v80, v79);
  uint64_t v81 = *(void *)(v131 + 8);
  LOBYTE(v184) = *(unsigned char *)v131;
  *((void *)&v184 + 1) = v81;
  State.wrappedValue.getter();
  uint64_t v83 = v163;
  uint64_t v82 = (uint64_t)v164;
  sub_1002ADE24(v163, (uint64_t)v164, (uint64_t (*)(void))v76);
  uint64_t v84 = swift_allocObject();
  uint64_t v85 = v162;
  uint64_t v86 = v82;
  sub_1002AA830(v82, v84 + v162, (uint64_t (*)(void))v78);
  *(void *)&long long v184 = v79;
  *((void *)&v184 + 1) = &type metadata for CameraSourceRunState;
  long long v185 = v150;
  uint64_t v87 = swift_getOpaqueTypeConformance2();
  uint64_t v88 = v154;
  uint64_t v89 = v151;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v135 + 8))(v89, v88);
  LOBYTE(v72) = *(unsigned char *)(v83 + 24);
  uint64_t v90 = swift_retain();
  uint64_t v91 = sub_10027D7D0(v90, v72, 0x704F68636E75614CLL, 0xED0000736E6F6974);
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v184 = v91;
  sub_1002AB13C((unint64_t *)&qword_100519238, (void (*)(uint64_t))type metadata accessor for LaunchOptions);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v89) = *(unsigned char *)(v91 + 16);
  swift_release();
  LOBYTE(v168) = (_BYTE)v89;
  uint64_t v92 = v83;
  uint64_t v93 = v86;
  sub_1002ADE24(v92, v86, (uint64_t (*)(void))v166);
  uint64_t v94 = swift_allocObject();
  sub_1002AA830(v86, v94 + v85, (uint64_t (*)(void))v78);
  *(void *)&long long v184 = v154;
  *((void *)&v184 + 1) = &type metadata for Bool;
  *(void *)&long long v185 = v87;
  *((void *)&v185 + 1) = &protocol witness table for Bool;
  uint64_t v95 = swift_getOpaqueTypeConformance2();
  uint64_t v96 = v136;
  uint64_t v97 = v153;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v137 + 8))(v97, v96);
  uint64_t v98 = v163;
  sub_10000F214(&qword_100525F50);
  uint64_t v99 = (uint64_t)v140;
  State.wrappedValue.getter();
  uint64_t v100 = v145;
  sub_1002ADE24(v99 + *(int *)(v142 + 28), v145, type metadata accessor for CameraControllerConfiguration);
  sub_1002ADE8C(v99, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  sub_1002ADE24(v98, v93, (uint64_t (*)(void))v166);
  uint64_t v101 = swift_allocObject();
  sub_1002AA830(v93, v101 + v162, (uint64_t (*)(void))v78);
  *(void *)&long long v184 = v96;
  *((void *)&v184 + 1) = &type metadata for Bool;
  *(void *)&long long v185 = v95;
  *((void *)&v185 + 1) = &protocol witness table for Bool;
  uint64_t v102 = swift_getOpaqueTypeConformance2();
  uint64_t v103 = sub_1002AB13C(&qword_10051E168, (void (*)(uint64_t))type metadata accessor for CameraControllerConfiguration);
  uint64_t v104 = v156;
  uint64_t v105 = v100;
  uint64_t v106 = v148;
  uint64_t v107 = v155;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_1002ADE8C(v105, type metadata accessor for CameraControllerConfiguration);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v107, v104);
  uint64_t v108 = (uint64_t *)(v163 + *(int *)(v160 + 264));
  uint64_t v110 = *v108;
  uint64_t v109 = v108[1];
  *(void *)&long long v168 = v110;
  *((void *)&v168 + 1) = v109;
  sub_10000F214(&qword_100525F38);
  State.projectedValue.getter();
  long long v111 = v184;
  uint64_t v112 = v185;
  swift_getKeyPath();
  long long v184 = v111;
  *(void *)&long long v185 = v112;
  sub_10000F214(&qword_1005261E8);
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v113 = (void *)v169;
  *(void *)&long long v184 = v156;
  *((void *)&v184 + 1) = v106;
  *(void *)&long long v185 = v102;
  *((void *)&v185 + 1) = v103;
  swift_getOpaqueTypeConformance2();
  uint64_t v114 = v139;
  uint64_t v115 = v144;
  char v116 = v157;
  View.inlineFeedback(controller:completion:)();

  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v147 + 8))(v116, v115);
  uint64_t v117 = v143;
  uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
  uint64_t v119 = v141;
  uint64_t v120 = v146;
  v118(v141, v114, v146);
  uint64_t v121 = *(void (**)(char *, uint64_t))(v117 + 8);
  v121(v114, v120);
  v118(v149, v119, v120);
  return ((uint64_t (*)(char *, uint64_t))v121)(v119, v120);
}

uint64_t sub_10022FB0C@<X0>(char *a1@<X8>)
{
  uint64_t v72 = a1;
  uint64_t v100 = sub_10000F214(&qword_100527130);
  uint64_t v112 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v102 = (char *)v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v77 = (char *)v60 - v4;
  uint64_t v97 = sub_10000F214(&qword_100527138);
  uint64_t v111 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v101 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v98 = (char *)v60 - v7;
  uint64_t v95 = sub_10000F214(&qword_100527140);
  uint64_t v110 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v85 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v82 = (char *)v60 - v10;
  uint64_t v91 = sub_10000F214(&qword_100527148);
  uint64_t v109 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v83 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v80 = (char *)v60 - v13;
  uint64_t v14 = sub_10000F214(&qword_100527150);
  uint64_t v107 = *(void *)(v14 - 8);
  uint64_t v108 = v14;
  __chkstk_darwin(v14);
  uint64_t v99 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v78 = (char *)v60 - v17;
  uint64_t v93 = sub_10000F214(&qword_100527158);
  uint64_t v106 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v96 = (char *)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v79 = (char *)v60 - v20;
  uint64_t v90 = sub_10000F214(&qword_100527160);
  uint64_t v105 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v94 = (char *)v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v81 = (char *)v60 - v23;
  uint64_t v88 = sub_10000F214(&qword_100527168);
  uint64_t v104 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v92 = (char *)v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v73 = (char *)v60 - v26;
  uint64_t v86 = sub_10000F214(&qword_100527170);
  uint64_t v103 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v89 = (char *)v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v74 = (char *)v60 - v29;
  uint64_t v84 = sub_10000F214(&qword_100527178);
  uint64_t v76 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v87 = (char *)v60 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v75 = (char *)v60 - v32;
  uint64_t v122 = v1;
  long long v123 = xmmword_10044DA00;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_100527180);
  sub_100013AA8(&qword_100527188, &qword_100527180);
  Section<>.init(header:content:)();
  uint64_t v121 = v1;
  long long v123 = xmmword_10044DA10;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_100527190);
  sub_100013AA8(&qword_100527198, &qword_100527190);
  Section<>.init(header:content:)();
  uint64_t v120 = v1;
  long long v123 = xmmword_10044DA20;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_1005271A0);
  sub_100013AA8(&qword_1005271A8, &qword_1005271A0);
  Section<>.init(header:content:)();
  uint64_t v119 = v1;
  long long v123 = xmmword_10044DA30;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_1005271B0);
  sub_100013AA8(&qword_1005271B8, &qword_1005271B0);
  Section<>.init(header:content:)();
  uint64_t v118 = v1;
  long long v123 = xmmword_10044DA40;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_1005271C0);
  sub_100013AA8(&qword_1005271C8, &qword_1005271C0);
  Section<>.init(header:content:)();
  uint64_t v117 = v1;
  long long v123 = xmmword_10044DA50;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_1005271D0);
  sub_100013AA8(&qword_1005271D8, &qword_1005271D0);
  Section<>.init(header:content:)();
  uint64_t v116 = v1;
  *(void *)&long long v123 = 0xD000000000000011;
  *((void *)&v123 + 1) = 0x800000010042ABE0;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_1005271E0);
  sub_100013AA8(&qword_1005271E8, &qword_1005271E0);
  Section<>.init(header:content:)();
  uint64_t v115 = v1;
  *(void *)&long long v123 = 0xD000000000000013;
  *((void *)&v123 + 1) = 0x800000010042AC00;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_1005271F0);
  sub_100013AA8(&qword_1005271F8, &qword_1005271F0);
  Section<>.init(header:content:)();
  uint64_t v114 = v1;
  long long v123 = xmmword_10044DA60;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_100527200);
  sub_100013AA8(&qword_100527208, &qword_100527200);
  Section<>.init(header:content:)();
  uint64_t v113 = v1;
  long long v123 = xmmword_10044DA70;
  char v124 = 0;
  uint64_t v125 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_100527210);
  sub_100013AA8(&qword_100527218, &qword_100527210);
  uint64_t v33 = v77;
  Section<>.init(header:content:)();
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  v34(v87, v75, v84);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
  uint64_t v69 = v103 + 16;
  uint64_t v71 = v35;
  v35(v89, v74, v86);
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
  v60[1] = v104 + 16;
  uint64_t v68 = v36;
  v36(v92, v73, v88);
  uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
  v67(v94, v81, v90);
  uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
  v66(v96, v79, v93);
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
  v65(v99, v78, v108);
  unint64_t v64 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
  v64(v83, v80, v91);
  unint64_t v63 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v63(v85, v82, v95);
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
  v62(v101, v98, v97);
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v112 + 16);
  uint64_t v70 = v112 + 16;
  v61(v102, v33, v100);
  uint64_t v37 = v72;
  v34(v72, v87, v84);
  uint64_t v38 = (int *)sub_10000F214(&qword_100527220);
  v71(&v37[v38[12]], v89, v86);
  v68(&v37[v38[16]], v92, v88);
  v67(&v37[v38[20]], v94, v90);
  v66(&v37[v38[24]], v96, v93);
  v65(&v37[v38[28]], v99, v108);
  uint64_t v39 = v91;
  v64(&v37[v38[32]], v83, v91);
  uint64_t v40 = v95;
  v63(&v37[v38[36]], v85, v95);
  uint64_t v41 = v97;
  v62(&v37[v38[40]], v101, v97);
  uint64_t v42 = &v37[v38[44]];
  uint64_t v43 = v100;
  v61(v42, v102, v100);
  uint64_t v44 = *(char **)(v112 + 8);
  v112 += 8;
  uint64_t v72 = v44;
  ((void (*)(char *, uint64_t))v44)(v77, v43);
  uint64_t v45 = *(char **)(v111 + 8);
  v111 += 8;
  uint64_t v77 = v45;
  ((void (*)(char *, uint64_t))v45)(v98, v41);
  id v46 = *(char **)(v110 + 8);
  v110 += 8;
  uint64_t v98 = v46;
  ((void (*)(char *, uint64_t))v46)(v82, v40);
  uint64_t v47 = *(char **)(v109 + 8);
  v109 += 8;
  uint64_t v82 = v47;
  ((void (*)(char *, uint64_t))v47)(v80, v39);
  uint64_t v48 = *(char **)(v107 + 8);
  v107 += 8;
  uint64_t v80 = v48;
  ((void (*)(char *, uint64_t))v48)(v78, v108);
  uint64_t v49 = *(char **)(v106 + 8);
  v106 += 8;
  uint64_t v78 = v49;
  uint64_t v50 = v93;
  ((void (*)(char *, uint64_t))v49)(v79, v93);
  uint64_t v51 = *(char **)(v105 + 8);
  v105 += 8;
  uint64_t v79 = v51;
  uint64_t v52 = v90;
  ((void (*)(char *, uint64_t))v51)(v81, v90);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v104 + 8);
  v104 += 8;
  uint64_t v54 = v88;
  v53(v73, v88);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v103 + 8);
  v103 += 8;
  uint64_t v56 = v86;
  v55(v74, v86);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v76 + 8);
  uint64_t v58 = v84;
  v57(v75, v84);
  ((void (*)(char *, uint64_t))v72)(v102, v100);
  ((void (*)(char *, uint64_t))v77)(v101, v97);
  ((void (*)(char *, uint64_t))v98)(v85, v95);
  ((void (*)(char *, uint64_t))v82)(v83, v91);
  ((void (*)(char *, uint64_t))v80)(v99, v108);
  ((void (*)(char *, uint64_t))v78)(v96, v50);
  ((void (*)(char *, uint64_t))v79)(v94, v52);
  v53(v92, v54);
  v55(v89, v56);
  return ((uint64_t (*)(char *, uint64_t))v57)(v87, v58);
}

uint64_t sub_100230BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ContentView();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_10000F214(&qword_1005266C8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v13 = static Alignment.center.getter();
  v13[1] = v14;
  uint64_t v15 = sub_10000F214(&qword_1005266D0);
  sub_100230E58(a1, (uint64_t)v13 + *(int *)(v15 + 44));
  sub_1002ADE24(a1, (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1002AA830((uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, (uint64_t (*)(void))type metadata accessor for ContentView);
  static TaskPriority.userInitiated.getter();
  uint64_t v18 = (char *)(a2 + *(int *)(sub_10000F214(&qword_1005266E8) + 36));
  uint64_t v19 = type metadata accessor for _TaskModifier();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v18[*(int *)(v19 + 20)], v7, v4);
  *(void *)uint64_t v18 = &unk_1005266E0;
  *((void *)v18 + 1) = v17;
  sub_10000FB74((uint64_t)v13, a2, &qword_1005266C8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10000FBD8((uint64_t)v13, &qword_1005266C8);
}

uint64_t sub_100230E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v400 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051EA00);
  __chkstk_darwin(v3 - 8);
  uint64_t v401 = (uint64_t)&v317 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v419 = (uint64_t)&v317 - v6;
  uint64_t v399 = type metadata accessor for AccessibilityTraits();
  uint64_t v398 = *(void *)(v399 - 8);
  __chkstk_darwin(v399);
  v397 = (char *)&v317 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v395 = sub_10000F214(&qword_1005266F0);
  __chkstk_darwin(v395);
  uint64_t v396 = (uint64_t)&v317 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E9F8);
  __chkstk_darwin(v9 - 8);
  uint64_t v420 = (uint64_t)&v317 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v418 = (uint64_t)&v317 - v12;
  uint64_t v13 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v333 = *(void *)(v13 - 8);
  uint64_t v334 = v13;
  __chkstk_darwin(v13);
  v332 = (char *)&v317 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v321 = sub_10000F214(&qword_1005266F8);
  __chkstk_darwin(v321);
  v322 = (_DWORD *)((char *)&v317 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v324 = (uint64_t)&v317 - v17;
  uint64_t v323 = sub_10000F214(&qword_100526700);
  __chkstk_darwin(v323);
  uint64_t v326 = (uint64_t)&v317 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_100526708);
  __chkstk_darwin(v19 - 8);
  uint64_t v327 = (uint64_t)&v317 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v325 = sub_10000F214(&qword_100526710);
  __chkstk_darwin(v325);
  uint64_t v329 = (uint64_t)&v317 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v330 = sub_10000F214(&qword_100526718);
  __chkstk_darwin(v330);
  v331 = (char *)&v317 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_100526720);
  uint64_t v376 = *(void *)(v23 - 8);
  uint64_t v377 = v23;
  __chkstk_darwin(v23);
  v328 = (char *)&v317 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v394 = sub_10000F214(&qword_100526728);
  uint64_t v393 = *(void *)(v394 - 8);
  __chkstk_darwin(v394);
  v375 = (char *)&v317 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000F214(&qword_10051E9F0);
  __chkstk_darwin(v26 - 8);
  uint64_t v417 = (uint64_t)&v317 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v422 = (uint64_t)&v317 - v29;
  uint64_t v30 = type metadata accessor for ContentView();
  uint64_t v372 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v373 = v31;
  uint64_t v374 = (uint64_t)&v317 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v362 = sub_10000F214(&qword_100519590);
  __chkstk_darwin(v362);
  uint64_t v359 = (uint64_t)&v317 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v358 = (char *)&v317 - v34;
  uint64_t v380 = type metadata accessor for ImageSearchResultView();
  __chkstk_darwin(v380);
  v366 = (uint64_t *)((char *)&v317 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v367 = sub_10000F214(&qword_100526730);
  uint64_t v365 = *(void *)(v367 - 8);
  __chkstk_darwin(v367);
  v363 = (char *)&v317 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for LatencyTextStyle();
  __chkstk_darwin(v37 - 8);
  v368 = (uint64_t *)((char *)&v317 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v39);
  uint64_t v369 = (uint64_t)&v317 - v40;
  uint64_t v371 = sub_10000F214(&qword_1005256D8);
  __chkstk_darwin(v371);
  v370 = (char *)&v317 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000F214(&qword_1005256E0);
  __chkstk_darwin(v42 - 8);
  v350 = (char *)&v317 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v404 = type metadata accessor for ResultLookupState();
  uint64_t v424 = *(void *)(v404 - 8);
  __chkstk_darwin(v404);
  uint64_t v320 = (uint64_t)&v317 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v349 = sub_10000F214(&qword_100526738);
  __chkstk_darwin(v349);
  v383 = (_DWORD *)((char *)&v317 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v46);
  uint64_t v352 = (uint64_t)&v317 - v47;
  uint64_t v351 = sub_10000F214(&qword_100526740);
  __chkstk_darwin(v351);
  uint64_t v355 = (uint64_t)&v317 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000F214(&qword_100526748);
  __chkstk_darwin(v49 - 8);
  uint64_t v356 = (uint64_t)&v317 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v354 = sub_10000F214(&qword_100526750);
  __chkstk_darwin(v354);
  uint64_t v357 = (uint64_t)&v317 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v353 = sub_10000F214(&qword_100526758);
  __chkstk_darwin(v353);
  v364 = (char *)&v317 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v385 = sub_10000F214(&qword_100526760);
  uint64_t v384 = *(void *)(v385 - 8);
  __chkstk_darwin(v385);
  v361 = (char *)&v317 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  uint64_t v360 = (uint64_t)&v317 - v55;
  uint64_t v56 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v56 - 8);
  v379 = (char *)&v317 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v348 = (char *)&v317 - v59;
  __chkstk_darwin(v60);
  v388 = (uint64_t *)((char *)&v317 - v61);
  uint64_t v62 = sub_10000F214(&qword_10051E9E8);
  __chkstk_darwin(v62 - 8);
  uint64_t v416 = (uint64_t)&v317 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v64);
  uint64_t v405 = (uint64_t)&v317 - v65;
  uint64_t v66 = sub_10000F214(&qword_10051E9E0);
  __chkstk_darwin(v66 - 8);
  uint64_t v415 = (uint64_t)&v317 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68);
  v429 = (uint64_t *)((char *)&v317 - v69);
  uint64_t v70 = sub_10000F214(&qword_10051E9D8);
  __chkstk_darwin(v70 - 8);
  uint64_t v414 = (uint64_t)&v317 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v72);
  uint64_t v428 = (uint64_t)&v317 - v73;
  uint64_t v413 = sub_10000F214(&qword_10051E9D0);
  uint64_t v412 = *(void *)(v413 - 8);
  __chkstk_darwin(v413);
  v411 = (char *)&v317 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v75);
  uint64_t v427 = (uint64_t)&v317 - v76;
  uint64_t v387 = sub_10000F214(&qword_100526768);
  __chkstk_darwin(v387);
  uint64_t v386 = (uint64_t)&v317 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_10000F214(&qword_10051E9C0);
  __chkstk_darwin(v78 - 8);
  uint64_t v421 = (uint64_t)&v317 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v80);
  uint64_t v426 = (uint64_t)&v317 - v81;
  uint64_t v410 = sub_10000F214(&qword_10051E9B8);
  uint64_t v409 = *(void *)(v410 - 8);
  __chkstk_darwin(v410);
  v408 = (char *)&v317 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v83);
  uint64_t v425 = (uint64_t)&v317 - v84;
  uint64_t v85 = type metadata accessor for OpacityTransition();
  uint64_t v344 = *(void *)(v85 - 8);
  uint64_t v345 = v85;
  __chkstk_darwin(v85);
  v382 = (char *)&v317 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000F214(&qword_100524778);
  uint64_t v346 = *(void *)(v87 - 8);
  uint64_t v347 = v87;
  __chkstk_darwin(v87);
  v343 = (char *)&v317 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v89);
  v338 = (char *)&v317 - v90;
  uint64_t v91 = sub_10000F214(&qword_100526770);
  __chkstk_darwin(v91 - 8);
  v378 = (uint64_t *)((char *)&v317 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v335 = sub_10000F214(&qword_100526778);
  __chkstk_darwin(v335);
  uint64_t v336 = (uint64_t)&v317 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000F214(&qword_100526780);
  __chkstk_darwin(v94 - 8);
  uint64_t v337 = (uint64_t)&v317 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v339 = sub_10000F214(&qword_100526788);
  __chkstk_darwin(v339);
  uint64_t v340 = (uint64_t)&v317 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v342 = sub_10000F214(&qword_100526790);
  __chkstk_darwin(v342);
  uint64_t v341 = (uint64_t)&v317 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000F214(&qword_100526798);
  uint64_t v99 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v101 = (char *)&v317 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000F214(&qword_10051E9B0);
  __chkstk_darwin(v102 - 8);
  uint64_t v407 = (uint64_t)&v317 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v104);
  uint64_t v106 = (char *)&v317 - v105;
  uint64_t v406 = static Color.clear.getter();
  uint64_t v392 = static SafeAreaRegions.keyboard.getter();
  int v391 = static Edge.Set.all.getter();
  BOOL v390 = sub_100233A54();
  uint64_t v107 = a1 + *(int *)(v30 + 148);
  char v108 = *(unsigned char *)v107;
  uint64_t v109 = *(void *)(v107 + 8);
  LOBYTE(v438) = v108;
  uint64_t v439 = v109;
  uint64_t v110 = sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  int v389 = v430;
  uint64_t v111 = v30;
  uint64_t v112 = a1;
  uint64_t v113 = a1 + *(int *)(v111 + 140);
  char v114 = *(unsigned char *)v113;
  uint64_t v115 = *(void *)(v113 + 8);
  LOBYTE(v438) = v114;
  uint64_t v439 = v115;
  uint64_t v116 = v404;
  uint64_t v402 = v110;
  uint64_t v117 = v111;
  State.wrappedValue.getter();
  uint64_t v118 = 1;
  uint64_t v403 = v117;
  v423 = v106;
  if (v430 == 1)
  {
    uint64_t v119 = v378;
    v317 = v101;
    uint64_t v318 = v99;
    uint64_t v120 = v382;
    uint64_t v319 = v98;
    uint64_t v121 = *(int *)(v117 + 44);
    uint64_t v381 = v112;
    uint64_t v122 = (uint64_t *)(v112 + v121);
    uint64_t v124 = *v122;
    uint64_t v123 = v122[1];
    uint64_t v438 = v124;
    uint64_t v439 = v123;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    uint64_t v125 = v430;
    swift_getKeyPath();
    uint64_t v438 = v125;
    sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v127 = *(void *)(v125 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
    uint64_t v126 = *(void *)(v125 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
    int v128 = *(unsigned __int8 *)(v125 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
    sub_1000BBF50(v127, v126, *(unsigned char *)(v125 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
    swift_release();
    if (v128 == 1)
    {
      uint64_t v118 = 1;
      if ((_BYTE)v127)
      {
        uint64_t v129 = (uint64_t)v119;
        *uint64_t v119 = static Alignment.center.getter();
        v119[1] = v130;
        uint64_t v131 = (uint64_t)v119 + *(int *)(sub_10000F214(&qword_100526968) + 44);
        uint64_t v132 = v381;
        sub_100233EA4(v381, v131);
        uint64_t v133 = static SafeAreaRegions.all.getter();
        char v134 = static Edge.Set.all.getter();
        uint64_t v135 = v336;
        sub_10000FB74(v129, v336, &qword_100526770);
        uint64_t v136 = v135 + *(int *)(v335 + 36);
        *(void *)uint64_t v136 = v133;
        *(unsigned char *)(v136 + 8) = v134;
        sub_10000FBD8(v129, &qword_100526770);
        uint64_t v137 = static Alignment.topTrailing.getter();
        uint64_t v138 = v337;
        sub_10022576C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v337, 0.0, 1, INFINITY, 0, v137, v139, &qword_100526778, &qword_100526780);
        sub_10000FBD8(v135, &qword_100526778);
        uint64_t v140 = v120;
        OpacityTransition.init()();
        static Animation.linear.getter();
        uint64_t v141 = sub_1002AB13C(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
        uint64_t v142 = v338;
        uint64_t v143 = v345;
        Transition.animation(_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v344 + 8))(v140, v143);
        uint64_t v145 = v346;
        uint64_t v144 = v347;
        (*(void (**)(char *, char *, uint64_t))(v346 + 16))(v343, v142, v347);
        uint64_t v438 = v143;
        uint64_t v439 = v141;
        uint64_t v112 = v132;
        swift_getOpaqueTypeConformance2();
        uint64_t v146 = AnyTransition.init<A>(_:)();
        uint64_t v147 = v340;
        sub_10000FB74(v138, v340, &qword_100526780);
        *(void *)(v147 + *(int *)(v339 + 36)) = v146;
        (*(void (**)(char *, uint64_t))(v145 + 8))(v142, v144);
        sub_10000FBD8(v138, &qword_100526780);
        uint64_t v148 = v341;
        sub_10000FB74(v147, v341, &qword_100526788);
        *(unsigned char *)(v148 + *(int *)(v342 + 36)) = 0;
        sub_10000FBD8(v147, &qword_100526788);
        sub_1002A9C3C();
        uint64_t v149 = (uint64_t)v317;
        View.accessibilityIdentifier(_:)();
        sub_10000FBD8(v148, &qword_100526790);
        uint64_t v106 = v423;
        sub_10000FC34(v149, (uint64_t)v423, &qword_100526798);
        uint64_t v118 = 0;
        uint64_t v117 = v403;
LABEL_7:
        uint64_t v116 = v404;
        uint64_t v99 = v318;
        uint64_t v98 = v319;
        goto LABEL_8;
      }
    }
    else
    {
      sub_1000BC2F4(v127, v126, v128);
      uint64_t v118 = 1;
    }
    uint64_t v112 = v381;
    uint64_t v117 = v403;
    uint64_t v106 = v423;
    goto LABEL_7;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v106, v118, 1, v98);
  sub_100234380(v425);
  uint64_t v150 = v386;
  sub_1002347A8(v386);
  sub_1002A941C(&qword_1005267A0, &qword_100526768, (void (*)(void))sub_1002A8D74);
  uint64_t v151 = v421;
  View.accessibilityHidden(_:)();
  sub_10000FBD8(v150, &qword_100526768);
  sub_10000FC34(v151, v426, &qword_10051E9C0);
  sub_100235E88((uint64_t)&v438);
  sub_1002364E4(v427);
  sub_100236ACC(v428);
  uint64_t v152 = static HorizontalAlignment.center.getter();
  long long v153 = v429;
  uint64_t *v429 = v152;
  v153[1] = 0;
  *((unsigned char *)v153 + 16) = 1;
  uint64_t v154 = sub_10000F214(&qword_100526898);
  sub_1002462EC(v112, (uint64_t)v153 + *(int *)(v154 + 44));
  uint64_t v155 = *(int *)(v117 + 48);
  uint64_t v156 = v112;
  uint64_t v157 = v112 + v155;
  uint64_t v158 = sub_10000F214(&qword_100525F58);
  long long v159 = v388;
  uint64_t v386 = v158;
  uint64_t v387 = v157;
  State.wrappedValue.getter();
  uint64_t v160 = v424 + 48;
  v382 = *(char **)(v424 + 48);
  int v161 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v382)(v159, 1, v116);
  uint64_t v424 = v160;
  if (v161 == 1)
  {
    sub_10000FBD8((uint64_t)v159, &qword_10051A308);
LABEL_14:
    uint64_t v172 = 1;
    uint64_t v173 = v405;
    uint64_t v174 = v156;
    uint64_t v175 = v403;
    uint64_t v176 = (uint64_t)v423;
    uint64_t v177 = v385;
    goto LABEL_17;
  }
  if (swift_getEnumCaseMultiPayload() != 9)
  {
    sub_1002ADE8C((uint64_t)v159, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    goto LABEL_14;
  }
  uint64_t v162 = v159[1];
  v378 = (uint64_t *)*v159;
  uint64_t v346 = v159[2];
  uint64_t v347 = v162;
  uint64_t v163 = v159[3];
  uint64_t v344 = v159[4];
  uint64_t v345 = v163;
  v164 = (char *)v159[5];
  uint64_t v342 = v159[6];
  v343 = v164;
  v388 = (uint64_t *)v159[7];
  LODWORD(v341) = 2 * (v378 != 0);
  uint64_t v165 = v112 + *(int *)(v403 + 92);
  char v166 = *(unsigned char *)v165;
  uint64_t v167 = *(void *)(v165 + 8);
  LOBYTE(v430) = v166;
  uint64_t v431 = v167;
  State.wrappedValue.getter();
  char v168 = v437[0];
  uint64_t v169 = (uint64_t)v348;
  State.wrappedValue.getter();
  int v170 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v382)(v169, 1, v116);
  uint64_t v381 = v112;
  if (v170)
  {
    sub_10000FBD8(v169, &qword_10051A308);
    char v171 = 0;
  }
  else
  {
    uint64_t v178 = v320;
    sub_1002ADE24(v169, v320, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    sub_10000FBD8(v169, &qword_10051A308);
    char v179 = sub_1003188D0();
    sub_1002ADE8C(v178, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    char v171 = v179 ^ 1;
  }
  LODWORD(v348) = v378 != 0;
  long long v180 = v383;
  _DWORD *v383 = 0x10000;
  long long v181 = (int *)v349;
  long long v182 = (uint64_t *)&v180[*(int *)(v349 + 72)];
  *long long v182 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  long long v183 = &v180[v181[19]];
  LOBYTE(v437[0]) = 0;
  State.init(wrappedValue:)();
  uint64_t v184 = v431;
  *long long v183 = v430;
  *((void *)v183 + 1) = v184;
  long long v185 = &v180[v181[20]];
  LOBYTE(v437[0]) = 0;
  State.init(wrappedValue:)();
  uint64_t v186 = v431;
  *long long v185 = v430;
  *((void *)v185 + 1) = v186;
  AccessibilityFocusState.init<>()();
  v180[3] = v341;
  *long long v180 = v168;
  v180[1] = 1;
  v180[2] = v171 & 1;
  uint64_t v187 = (uint64_t)&v180[v181[16]];
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v188 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v190 = v189;
  LOBYTE(v185) = v191;
  uint64_t v193 = v192;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v195 = (uint64_t)v368;
  uint64_t *v368 = KeyPath;
  swift_storeEnumTagMultiPayload();
  uint64_t v196 = v369;
  sub_1002AA830(v195, v369, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
  uint64_t v197 = (uint64_t)v370;
  sub_1002ADE24(v196, (uint64_t)&v370[*(int *)(v371 + 36)], (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
  *(void *)uint64_t v197 = v188;
  *(void *)(v197 + 8) = v190;
  *(unsigned char *)(v197 + 16) = v185 & 1;
  *(void *)(v197 + 24) = v193;
  sub_1002ADE8C(v196, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
  sub_10021843C();
  uint64_t v198 = (uint64_t)v350;
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8(v197, &qword_1005256D8);
  sub_10000FB74(v198, v187, &qword_1005256E0);
  long long v199 = (uint64_t (**)())(v187 + *(int *)(sub_10000F214(&qword_100526938) + 36));
  *long long v199 = sub_100237C4C;
  v199[1] = 0;
  v199[2] = 0;
  v199[3] = 0;
  sub_10000FBD8(v198, &qword_1005256E0);
  v350 = (char *)v383 + v181[17];
  uint64_t v200 = swift_getKeyPath();
  uint64_t v201 = (uint64_t)v366;
  uint64_t *v366 = v200;
  *(void *)(v201 + 8) = 0;
  *(unsigned char *)(v201 + 16) = 0;
  uint64_t v202 = v380;
  uint64_t v203 = (uint64_t *)(v201 + *(int *)(v380 + 20));
  *uint64_t v203 = swift_getKeyPath();
  sub_10000F214(&qword_10051BB48);
  swift_storeEnumTagMultiPayload();
  uint64_t v204 = v201 + *(int *)(v202 + 24);
  *(void *)uint64_t v204 = swift_getKeyPath();
  *(void *)(v204 + 8) = 0;
  *(unsigned char *)(v204 + 16) = 0;
  uint64_t v205 = v202;
  uint64_t v206 = (uint64_t **)(v201 + *(int *)(v202 + 28));
  uint64_t v207 = (uint64_t)v378;
  uint64_t v208 = v346;
  uint64_t v209 = v347;
  *uint64_t v206 = v378;
  v206[1] = (uint64_t *)v209;
  uint64_t v211 = v344;
  uint64_t v210 = v345;
  v206[2] = (uint64_t *)v208;
  v206[3] = (uint64_t *)v210;
  uint64_t v213 = v342;
  long long v212 = v343;
  v206[4] = (uint64_t *)v211;
  v206[5] = (uint64_t *)v212;
  long long v214 = v388;
  v206[6] = (uint64_t *)v213;
  v206[7] = v214;
  uint64_t v349 = v201 + *(int *)(v205 + 32);
  uint64_t v215 = type metadata accessor for IdentifiableURL();
  uint64_t v216 = (uint64_t)v358;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v215 - 8) + 56))(v358, 1, 1, v215);
  sub_10000FB74(v216, v359, &qword_100519590);
  sub_1002A9A08(v207);
  State.init(wrappedValue:)();
  uint64_t v217 = sub_10000FBD8(v216, &qword_100519590);
  __chkstk_darwin(v217);
  uint64_t v174 = v381;
  sub_10000F214(&qword_100526940);
  sub_1002AB13C(&qword_100526948, (void (*)(uint64_t))type metadata accessor for ImageSearchResultView);
  sub_1002A9A7C();
  long long v218 = v363;
  View.contextMenu<A>(menuItems:)();
  sub_1002ADE8C(v201, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
  (*(void (**)(char *, char *, uint64_t))(v365 + 32))(v350, v218, v367);
  uint64_t v219 = v352;
  sub_10000FC34((uint64_t)v383, v352, &qword_100526738);
  sub_1002A976C();
  uint64_t v220 = AnyTransition.init<A>(_:)();
  uint64_t v221 = v355;
  sub_10000FB74(v219, v355, &qword_100526738);
  *(void *)(v221 + *(int *)(v351 + 36)) = v220;
  sub_10000FBD8(v219, &qword_100526738);
  uint64_t v222 = static Alignment.top.getter();
  uint64_t v223 = v356;
  sub_10022576C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v356, 0.0, 1, INFINITY, 0, v222, v224, &qword_100526740, &qword_100526748);
  sub_10000FBD8(v221, &qword_100526740);
  LOBYTE(v210) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v226 = v225;
  uint64_t v228 = v227;
  uint64_t v230 = v229;
  uint64_t v232 = v231;
  uint64_t v233 = v357;
  sub_10000FB74(v223, v357, &qword_100526748);
  uint64_t v234 = v233 + *(int *)(v354 + 36);
  *(unsigned char *)uint64_t v234 = v210;
  *(void *)(v234 + 8) = v226;
  *(void *)(v234 + 16) = v228;
  *(void *)(v234 + 24) = v230;
  *(void *)(v234 + 32) = v232;
  *(unsigned char *)(v234 + 40) = 0;
  sub_10000FBD8(v223, &qword_100526748);
  uint64_t v175 = v403;
  uint64_t v235 = (uint64_t)v364;
  sub_10000F214(&qword_10051C250);
  State.wrappedValue.getter();
  sub_10000FC34(v233, v235, &qword_100526750);
  sub_1002A9B4C((uint64_t)v378);
  uint64_t v236 = v374;
  sub_1002ADE24(v174, v374, (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v237 = (*(unsigned __int8 *)(v372 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v372 + 80);
  uint64_t v238 = swift_allocObject();
  sub_1002AA830(v236, v238 + v237, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v177 = v385;
  uint64_t v239 = (uint64_t)v361;
  uint64_t v240 = (uint64_t)&v361[*(int *)(v385 + 36)];
  swift_retain();
  sub_10008E040((char)v348, 1, (uint64_t)sub_1002A9BBC, v238, v240);
  sub_10000FB74(v235, v239, &qword_100526758);
  swift_release();
  sub_10000FBD8(v235, &qword_100526758);
  uint64_t v241 = v360;
  sub_10000FC34(v239, v360, &qword_100526760);
  uint64_t v242 = v241;
  uint64_t v173 = v405;
  sub_10000FC34(v242, v405, &qword_100526760);
  uint64_t v172 = 0;
  uint64_t v151 = v421;
  uint64_t v176 = (uint64_t)v423;
LABEL_17:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v384 + 56))(v173, v172, 1, v177);
  uint64_t v243 = v174 + *(int *)(v175 + 68);
  char v244 = *(unsigned char *)v243;
  uint64_t v245 = *(void *)(v243 + 8);
  LOBYTE(v430) = v244;
  uint64_t v431 = v245;
  State.wrappedValue.getter();
  uint64_t v246 = 1;
  if (LOBYTE(v437[0]) == 1)
  {
    uint64_t v247 = (uint64_t)v379;
    State.wrappedValue.getter();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v382)(v247, 1, v404) == 1)
    {
      sub_10000FBD8(v247, &qword_10051A308);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 10)
      {
        uint64_t v248 = v174 + *(int *)(v175 + 92);
        char v249 = *(unsigned char *)v248;
        uint64_t v250 = *(void *)(v248 + 8);
        LOBYTE(v430) = v249;
        uint64_t v431 = v250;
        State.wrappedValue.getter();
        uint64_t v381 = v174;
        char v251 = v437[0];
        v252 = (int *)v321;
        uint64_t v253 = (uint64_t)v322;
        _DWORD *v322 = 0x10000;
        v254 = (uint64_t *)(v253 + v252[18]);
        uint64_t *v254 = swift_getKeyPath();
        sub_10000F214(&qword_100522BF0);
        swift_storeEnumTagMultiPayload();
        uint64_t v255 = v253 + v252[19];
        LOBYTE(v437[0]) = 0;
        State.init(wrappedValue:)();
        uint64_t v256 = v431;
        *(unsigned char *)uint64_t v255 = v430;
        *(void *)(v255 + 8) = v256;
        uint64_t v257 = v253 + v252[20];
        LOBYTE(v437[0]) = 0;
        State.init(wrappedValue:)();
        uint64_t v258 = v431;
        *(unsigned char *)uint64_t v257 = v430;
        *(void *)(v257 + 8) = v258;
        AccessibilityFocusState.init<>()();
        *(unsigned char *)(v253 + 3) = 0;
        *(unsigned char *)uint64_t v253 = v251;
        *(_WORD *)(v253 + 1) = 257;
        LocalizedStringKey.init(stringLiteral:)();
        uint64_t v259 = Text.init(_:tableName:bundle:comment:)();
        uint64_t v261 = v260;
        LOBYTE(v252) = v262;
        uint64_t v264 = v263;
        uint64_t v265 = swift_getKeyPath();
        uint64_t v266 = (uint64_t)v368;
        uint64_t *v368 = v265;
        swift_storeEnumTagMultiPayload();
        uint64_t v267 = v369;
        sub_1002AA830(v266, v369, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
        uint64_t v268 = (uint64_t)v370;
        sub_1002ADE24(v267, (uint64_t)&v370[*(int *)(v371 + 36)], (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
        *(void *)uint64_t v268 = v259;
        *(void *)(v268 + 8) = v261;
        uint64_t v269 = v381;
        *(unsigned char *)(v268 + 16) = v252 & 1;
        *(void *)(v268 + 24) = v264;
        sub_1002ADE8C(v267, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
        sub_10021843C();
        View.accessibilityIdentifier(_:)();
        sub_10000FBD8(v268, &qword_1005256D8);
        uint64_t v270 = v324;
        sub_10000FC34(v253, v324, &qword_1005266F8);
        sub_1002A976C();
        uint64_t v271 = AnyTransition.init<A>(_:)();
        uint64_t v272 = v326;
        sub_10000FB74(v270, v326, &qword_1005266F8);
        *(void *)(v272 + *(int *)(v323 + 36)) = v271;
        sub_10000FBD8(v270, &qword_1005266F8);
        uint64_t v273 = static Alignment.top.getter();
        uint64_t v274 = v327;
        sub_10022576C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v327, 0.0, 1, INFINITY, 0, v273, v275, &qword_100526700, &qword_100526708);
        sub_10000FBD8(v272, &qword_100526700);
        LOBYTE(v268) = static Edge.Set.horizontal.getter();
        EdgeInsets.init(_all:)();
        uint64_t v277 = v276;
        uint64_t v279 = v278;
        uint64_t v281 = v280;
        uint64_t v283 = v282;
        uint64_t v284 = v329;
        sub_10000FB74(v274, v329, &qword_100526708);
        uint64_t v285 = v284 + *(int *)(v325 + 36);
        *(unsigned char *)uint64_t v285 = v268;
        *(void *)(v285 + 8) = v277;
        *(void *)(v285 + 16) = v279;
        *(void *)(v285 + 24) = v281;
        *(void *)(v285 + 32) = v283;
        *(unsigned char *)(v285 + 40) = 0;
        sub_10000FBD8(v274, &qword_100526708);
        uint64_t v286 = v374;
        sub_1002ADE24(v269, v374, (uint64_t (*)(void))type metadata accessor for ContentView);
        unint64_t v287 = (*(unsigned __int8 *)(v372 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v372 + 80);
        uint64_t v288 = swift_allocObject();
        sub_1002AA830(v286, v288 + v287, (uint64_t (*)(void))type metadata accessor for ContentView);
        uint64_t v289 = (uint64_t)v331;
        uint64_t v290 = (uint64_t)&v331[*(int *)(v330 + 36)];
        swift_retain();
        sub_10008E040(1, 1, (uint64_t)sub_1002A97C4, v288, v290);
        sub_10000FB74(v284, v289, &qword_100526710);
        swift_release();
        sub_10000FBD8(v284, &qword_100526710);
        v291 = v332;
        static AccessibilityChildBehavior.combine.getter();
        sub_1002A97D0();
        v292 = v328;
        uint64_t v176 = (uint64_t)v423;
        uint64_t v151 = v421;
        View.accessibilityElement(children:)();
        (*(void (**)(char *, uint64_t))(v333 + 8))(v291, v334);
        sub_10000FBD8(v289, &qword_100526718);
        uint64_t v294 = (uint64_t)v375;
        uint64_t v293 = v376;
        uint64_t v295 = v377;
        (*(void (**)(char *, char *, uint64_t))(v376 + 32))(v375, v292, v377);
        uint64_t v296 = 0;
LABEL_24:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v293 + 56))(v294, v296, 1, v295);
        sub_10000FC34(v294, v422, &qword_100526728);
        uint64_t v246 = 0;
        goto LABEL_25;
      }
      sub_1002ADE8C(v247, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    }
    uint64_t v296 = 1;
    uint64_t v293 = v376;
    uint64_t v295 = v377;
    uint64_t v294 = (uint64_t)v375;
    goto LABEL_24;
  }
LABEL_25:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v393 + 56))(v422, v246, 1, v394);
  uint64_t v297 = v396;
  sub_100238EF4(v396);
  v298 = v397;
  static AccessibilityTraits.isModal.getter();
  sub_1002A941C(&qword_1005268A0, &qword_1005266F0, (void (*)(void))sub_1002A9488);
  uint64_t v299 = v420;
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v398 + 8))(v298, v399);
  sub_10000FBD8(v297, &qword_1005266F0);
  sub_10000FC34(v299, v418, &qword_10051E9F8);
  sub_10023A0DC(v419);
  uint64_t v433 = v406;
  __int16 v434 = 256;
  uint64_t v435 = v392;
  char v436 = v391;
  v432[0] = v390;
  v432[1] = 1;
  v432[2] = v389;
  v437[0] = (uint64_t)&v433;
  v437[1] = (uint64_t)v432;
  uint64_t v300 = v407;
  sub_10000FB74(v176, v407, &qword_10051E9B0);
  v437[2] = v300;
  uint64_t v301 = (uint64_t)v408;
  (*(void (**)(char *, uint64_t, uint64_t))(v409 + 16))(v408, v425, v410);
  v437[3] = v301;
  sub_10000FB74(v426, v151, &qword_10051E9C0);
  v437[4] = v151;
  sub_10000FB74((uint64_t)&v438, (uint64_t)&v430, &qword_10051E9C8);
  v437[5] = (uint64_t)&v430;
  uint64_t v302 = (uint64_t)v411;
  (*(void (**)(char *, uint64_t, uint64_t))(v412 + 16))(v411, v427, v413);
  v437[6] = v302;
  uint64_t v303 = v414;
  sub_10000FB74(v428, v414, &qword_10051E9D8);
  v437[7] = v303;
  uint64_t v304 = v415;
  sub_10000FB74((uint64_t)v429, v415, &qword_10051E9E0);
  v437[8] = v304;
  uint64_t v305 = v405;
  uint64_t v306 = v416;
  sub_10000FB74(v405, v416, &qword_10051E9E8);
  v437[9] = v306;
  uint64_t v307 = v422;
  uint64_t v308 = v417;
  sub_10000FB74(v422, v417, &qword_10051E9F0);
  v437[10] = v308;
  uint64_t v309 = v418;
  sub_10000FB74(v418, v299, &qword_10051E9F8);
  v437[11] = v299;
  uint64_t v310 = v419;
  uint64_t v311 = v401;
  sub_10000FB74(v419, v401, &qword_10051EA00);
  v437[12] = v311;
  sub_1000D0974(v437, v400);
  swift_retain();
  sub_10000FBD8(v310, &qword_10051EA00);
  sub_10000FBD8(v309, &qword_10051E9F8);
  sub_10000FBD8(v307, &qword_10051E9F0);
  sub_10000FBD8(v305, &qword_10051E9E8);
  sub_10000FBD8((uint64_t)v429, &qword_10051E9E0);
  sub_10000FBD8(v428, &qword_10051E9D8);
  v312 = *(void (**)(uint64_t, uint64_t))(v412 + 8);
  uint64_t v313 = v413;
  v312(v427, v413);
  sub_10000FBD8((uint64_t)&v438, &qword_10051E9C8);
  sub_10000FBD8(v426, &qword_10051E9C0);
  v314 = *(void (**)(uint64_t, uint64_t))(v409 + 8);
  uint64_t v315 = v410;
  v314(v425, v410);
  sub_10000FBD8((uint64_t)v423, &qword_10051E9B0);
  swift_release();
  sub_10000FBD8(v311, &qword_10051EA00);
  sub_10000FBD8(v420, &qword_10051E9F8);
  sub_10000FBD8(v417, &qword_10051E9F0);
  sub_10000FBD8(v416, &qword_10051E9E8);
  sub_10000FBD8(v415, &qword_10051E9E0);
  sub_10000FBD8(v414, &qword_10051E9D8);
  v312((uint64_t)v411, v313);
  sub_10000FBD8((uint64_t)&v430, &qword_10051E9C8);
  sub_10000FBD8(v421, &qword_10051E9C0);
  v314((uint64_t)v408, v315);
  sub_10000FBD8(v407, &qword_10051E9B0);
  return swift_release();
}

BOOL sub_100233A54()
{
  uint64_t v1 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v26[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  uint64_t v11 = type metadata accessor for ResultLookupState();
  int v12 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11);
  sub_10000FBD8((uint64_t)v9, &qword_10051A308);
  uint64_t v13 = (uint64_t *)(v0 + *(int *)(v10 + 44));
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v27 = v15;
  uint64_t v28 = v14;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v16 = v29;
  swift_getKeyPath();
  uint64_t v27 = v16;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v17 = v16 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v17, (uint64_t)v3, &qword_10051B760);
  uint64_t v18 = sub_10000F214(&qword_10051A060);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v3, 1, v18))
  {
    sub_10000FBD8((uint64_t)v3, &qword_10051B760);
    uint64_t v19 = type metadata accessor for CVBundle(0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v6, 1, 1, v19);
  }
  else
  {
    sub_1002ADE24((uint64_t)v3, (uint64_t)v6, type metadata accessor for CVBundle);
    sub_10000FBD8((uint64_t)v3, &qword_10051B760);
    uint64_t v19 = type metadata accessor for CVBundle(0);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v6, 0, 1, v19);
  }
  swift_release();
  type metadata accessor for CVBundle(0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v6, 1, v19) == 1)
  {
    sub_10000FBD8((uint64_t)v6, &qword_10051B768);
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v21 = sub_1001A365C();
    __chkstk_darwin(v21);
    *(void *)&v26[-16] = v6;
    uint64_t v20 = (void *)sub_1001C1D38((uint64_t)sub_1002B48A8, (uint64_t)&v26[-32], v22);
    sub_1002ADE8C((uint64_t)v6, type metadata accessor for CVBundle);
  }
  uint64_t v23 = v20[2];
  swift_bridgeObjectRelease();
  return v12 != 1 || v23 != 0;
}

uint64_t sub_100233EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v49 = type metadata accessor for SafeAreaPaddingModifier();
  uint64_t v3 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000F214(&qword_100526998);
  __chkstk_darwin(v52);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000F214(&qword_1005269A0);
  __chkstk_darwin(v53);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000F214(&qword_1005269A8);
  __chkstk_darwin(v54);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000F214(&qword_1005269B0);
  __chkstk_darwin(v50);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *(void *)&long long v56 = v16;
  *((void *)&v56 + 1) = v15;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v17 = v55;
  swift_getKeyPath();
  *(void *)&long long v56 = v17;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = *(void *)(v17 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v19 = *(void *)(v17 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  int v20 = *(unsigned __int8 *)(v17 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v18, v19, *(unsigned char *)(v17 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  if (v20 != 1)
  {
    sub_1000BC2F4(v18, v19, v20);
    uint64_t v22 = v50;
    uint64_t v21 = v51;
    uint64_t v23 = v49;
    goto LABEL_5;
  }
  uint64_t v22 = v50;
  uint64_t v21 = v51;
  uint64_t v23 = v49;
  if ((v18 & 0xFE) == 0)
  {
LABEL_5:
    uint64_t v24 = static Color.gray.getter();
    goto LABEL_6;
  }
  uint64_t v24 = static Color.blue.getter();
LABEL_6:
  uint64_t v25 = v24;
  static Edge.Set.all.getter();
  long long v56 = 0u;
  long long v57 = 0u;
  char v58 = 1;
  SafeAreaPaddingModifier.init(edges:insets:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(&v7[*(int *)(v52 + 36)], v5, v23);
  *(void *)uint64_t v7 = 0xD000000000000018;
  *((void *)v7 + 1) = 0x800000010042A720;
  *((void *)v7 + 2) = v25;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v23);
  char v26 = static Edge.Set.trailing.getter();
  sub_1000B4F68();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  sub_10000FB74((uint64_t)v7, (uint64_t)v9, &qword_100526998);
  uint64_t v35 = &v9[*(int *)(v53 + 36)];
  *uint64_t v35 = v26;
  *((void *)v35 + 1) = v28;
  *((void *)v35 + 2) = v30;
  *((void *)v35 + 3) = v32;
  *((void *)v35 + 4) = v34;
  v35[40] = 0;
  sub_10000FBD8((uint64_t)v7, &qword_100526998);
  uint64_t v36 = static Animation.spring(response:dampingFraction:blendDuration:)();
  LOBYTE(v25) = sub_1000B4F68();
  sub_10000FB74((uint64_t)v9, (uint64_t)v11, &qword_1005269A0);
  uint64_t v37 = &v11[*(int *)(v54 + 36)];
  *(void *)uint64_t v37 = v36;
  v37[8] = v25 & 1;
  sub_10000FBD8((uint64_t)v9, &qword_1005269A0);
  LOBYTE(v36) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  sub_10000FB74((uint64_t)v11, (uint64_t)v13, &qword_1005269A8);
  uint64_t v46 = &v13[*(int *)(v22 + 36)];
  *uint64_t v46 = v36;
  *((void *)v46 + 1) = v39;
  *((void *)v46 + 2) = v41;
  *((void *)v46 + 3) = v43;
  *((void *)v46 + 4) = v45;
  v46[40] = 0;
  sub_10000FBD8((uint64_t)v11, &qword_1005269A8);
  return sub_10000FC34((uint64_t)v13, v21, &qword_1005269B0);
}

uint64_t sub_100234380@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_100527110);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100527118);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051E9B8);
  uint64_t v36 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v35 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ContentView();
  uint64_t v13 = *(void *)(v1 + *(int *)(v12 + 244));
  type metadata accessor for FileWriter();
  uint64_t v14 = (uint64_t *)swift_allocObject();
  _OWORD v14[2] = 0x656D617266;
  v14[3] = 0xE500000000000000;
  swift_retain();
  id v15 = sub_10027DCE0(v14);
  *(void *)&long long v37 = v13;
  *((void *)&v37 + 1) = v15;
  sub_1002B4188();
  View.accessibilityIdentifier(_:)();

  swift_release();
  uint64_t v16 = (long long *)(v2 + *(int *)(v12 + 248));
  long long v17 = v16[1];
  long long v37 = *v16;
  long long v18 = v16[2];
  long long v19 = v16[3];
  long long v38 = v17;
  long long v39 = v18;
  long long v20 = v16[4];
  long long v21 = v16[5];
  long long v40 = v19;
  long long v41 = v20;
  long long v42 = v21;
  sub_10000F214(&qword_100526450);
  State.wrappedValue.getter();
  uint64_t v22 = *((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    unint64_t v23 = *((void *)&v43 + 1);
    uint64_t v30 = v43;
    uint64_t v24 = v44;
    v29[2] = v45;
    uint64_t v32 = v10;
    uint64_t v31 = v7;
    v29[1] = *((void *)&v46 + 1);
    uint64_t v34 = a1;
    uint64_t v33 = v9;
    long long v37 = v43;
    long long v38 = v44;
    long long v39 = v45;
    long long v40 = v46;
    long long v41 = v47;
    *(void *)&long long v42 = v48;
    sub_100047108();
    AppEntity.fullyQualifiedIdentifier.getter();
    uint64_t v9 = v33;
    a1 = v34;
    uint64_t v10 = v32;
    sub_1002B41DC(v30, v23, v24, v22);
    uint64_t v25 = type metadata accessor for EntityIdentifier();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v6, 0, 1, v25);
  }
  else
  {
    uint64_t v26 = type metadata accessor for EntityIdentifier();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 1, 1, v26);
  }
  sub_1002B4284();
  uint64_t v27 = v35;
  View.appEntityIdentifier(_:)();
  sub_10000FBD8((uint64_t)v6, &qword_100527110);
  sub_10000FBD8((uint64_t)v9, &qword_100527118);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(a1, v27, v10);
}

uint64_t sub_1002347A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v155 = a1;
  uint64_t v140 = sub_10000F214(&qword_100527008);
  __chkstk_darwin(v140);
  uint64_t v141 = (uint64_t *)((char *)&v125 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v154 = sub_10000F214(&qword_100526820);
  __chkstk_darwin(v154);
  uint64_t v142 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v137 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000F214(&qword_100526840);
  uint64_t v128 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v143 = (uint64_t)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_10000F214(&qword_100527010);
  uint64_t v131 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v129 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000F214(&qword_100526830);
  __chkstk_darwin(v139);
  uint64_t v133 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v134 = (char *)&v125 - v10;
  __chkstk_darwin(v11);
  uint64_t v136 = (char *)&v125 - v12;
  __chkstk_darwin(v13);
  uint64_t v135 = (char *)&v125 - v14;
  __chkstk_darwin(v15);
  uint64_t v138 = (uint64_t)&v125 - v16;
  uint64_t v149 = sub_10000F214(&qword_100526800);
  __chkstk_darwin(v149);
  uint64_t v145 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_10000F214(&qword_100527018);
  __chkstk_darwin(v150);
  uint64_t v152 = (uint64_t)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_10000F214(&qword_100527020);
  __chkstk_darwin(v156);
  uint64_t v157 = (uint64_t)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_10000F214(&qword_1005267C0);
  __chkstk_darwin(v151);
  uint64_t v148 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000F214(&qword_100526768);
  __chkstk_darwin(v21 - 8);
  long long v153 = (char *)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ContentView();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(char **)(v27 + 64);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v125 - ((unint64_t)(v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_10000F214(&qword_1005267D0);
  __chkstk_darwin(v147);
  uint64_t v144 = (char *)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v146 = (uint64_t)&v125 - v32;
  uint64_t v33 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (char *)&v125 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v1;
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  uint64_t v37 = type metadata accessor for ResultLookupState();
  int v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v35, 1, v37);
  sub_10000FBD8((uint64_t)v35, &qword_10051A308);
  if (v38 != 1)
  {
    sub_1002ADE24(v36, (uint64_t)&v125 - ((unint64_t)(v28 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v52 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v53 = swift_allocObject();
    sub_1002AA830((uint64_t)v29, v53 + v52, (uint64_t (*)(void))type metadata accessor for ContentView);
    static Color.green.getter();
    sub_10000F214(&qword_100525F50);
    State.wrappedValue.getter();
    sub_1002ADE8C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    uint64_t v54 = Color.opacity(_:)();
    swift_release();
    LOBYTE(v52) = static Edge.Set.all.getter();
    char v55 = static Edge.Set.all.getter();
    *(void *)&long long v158 = sub_1002AF834;
    *((void *)&v158 + 1) = v53;
    *(void *)&long long v159 = v54;
    BYTE8(v159) = v52;
    BYTE9(v159) = v55;
    sub_10000F214(&qword_1005267E0);
    sub_10028E890(&qword_1005267D8, &qword_1005267E0, (void (*)(void))sub_1002A8F44);
    uint64_t v56 = (uint64_t)v144;
    View.accessibilityIdentifier(_:)();
    swift_release();
    swift_release();
    uint64_t v57 = v146;
    sub_10000FC34(v56, v146, &qword_1005267D0);
    sub_10000FB74(v57, v157, &qword_1005267D0);
    swift_storeEnumTagMultiPayload();
    sub_1002A8E6C();
    sub_1002A8FE4();
    uint64_t v58 = (uint64_t)v148;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v58, v152, &qword_1005267C0);
    swift_storeEnumTagMultiPayload();
    sub_1002A8DF0();
    sub_1002A90BC();
    uint64_t v59 = v153;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v58, &qword_1005267C0);
    sub_10000FBD8(v57, &qword_1005267D0);
    uint64_t v60 = sub_10000F214(&qword_1005267B0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 0, 1, v60);
    uint64_t v51 = (uint64_t)v59;
    goto LABEL_5;
  }
  uint64_t v125 = v23;
  uint64_t v126 = v25;
  uint64_t v39 = (uint64_t)v145;
  uint64_t v40 = v157;
  uint64_t v127 = v27;
  uint64_t v144 = v28;
  uint64_t v146 = (uint64_t)&v125 - ((unint64_t)(v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v36 + *(int *)(v26 + 200);
  char v42 = *(unsigned char *)v41;
  uint64_t v43 = *(void *)(v41 + 8);
  LOBYTE(v158) = v42;
  *((void *)&v158 + 1) = v43;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (LOBYTE(v168) == 1)
  {
    uint64_t v44 = v146;
    sub_1002ADE24(v36, v146, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v45 = (*(unsigned __int8 *)(v127 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
    uint64_t v46 = swift_allocObject();
    sub_1002AA830(v44, v46 + v45, (uint64_t (*)(void))type metadata accessor for ContentView);
    char v47 = static Edge.Set.all.getter();
    *(void *)&long long v158 = sub_1002AF818;
    *((void *)&v158 + 1) = v46;
    LOBYTE(v159) = v47;
    sub_10000F214(&qword_100526810);
    sub_10028E890(&qword_100526808, &qword_100526810, (void (*)(void))sub_100062574);
    View.accessibilityIdentifier(_:)();
    swift_release();
    sub_10000FB74(v39, v40, &qword_100526800);
    swift_storeEnumTagMultiPayload();
    sub_1002A8E6C();
    sub_1002A8FE4();
    uint64_t v48 = (uint64_t)v148;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v48, v152, &qword_1005267C0);
    swift_storeEnumTagMultiPayload();
    sub_1002A8DF0();
    sub_1002A90BC();
    uint64_t v49 = v153;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v48, &qword_1005267C0);
    sub_10000FBD8(v39, &qword_100526800);
    uint64_t v50 = sub_10000F214(&qword_1005267B0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 0, 1, v50);
    uint64_t v51 = (uint64_t)v49;
LABEL_5:
    uint64_t v61 = v155;
    return sub_10000FC34(v51, v61, &qword_100526768);
  }
  uint64_t v63 = (void *)(v36 + *(int *)(v26 + 44));
  uint64_t v64 = v63[1];
  *(void *)&long long v158 = *v63;
  *((void *)&v158 + 1) = v64;
  sub_10000F214(&qword_100525F40);
  uint64_t v65 = v36;
  State.wrappedValue.getter();
  double v66 = v168;
  swift_getKeyPath();
  *(double *)&long long v158 = v66;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v67 = *(void *)(*(void *)&v66 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v68 = *(void *)(*(void *)&v66 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  int v69 = *(unsigned __int8 *)(*(void *)&v66 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v67, v68, *(unsigned char *)(*(void *)&v66 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  if (v69 == 1)
  {
    uint64_t v70 = static Alignment.center.getter();
    uint64_t v72 = v71;
    static Color.purple.getter();
    uint64_t v156 = v26;
    sub_10000F214(&qword_100525F50);
    uint64_t v73 = (uint64_t)v126;
    State.wrappedValue.getter();
    sub_1002ADE8C(v73, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    uint64_t v74 = Color.opacity(_:)();
    swift_release();
    unsigned __int8 v75 = static Edge.Set.all.getter();
    char v76 = static Edge.Set.all.getter();
    uint64_t v157 = v65;
    sub_100247414(v143);
    uint64_t v77 = v63[1];
    *(void *)&long long v158 = *v63;
    *((void *)&v158 + 1) = v77;
    State.wrappedValue.getter();
    double v78 = v168;
    swift_getKeyPath();
    *(double *)&long long v158 = v78;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v79 = *(void *)(*(void *)&v78 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
    uint64_t v80 = *(void *)(*(void *)&v78 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
    int v81 = *(unsigned __int8 *)(*(void *)&v78 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
    sub_1000BBF50(v79, v80, *(unsigned char *)(*(void *)&v78 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
    swift_release();
    if (v81 != 1) {
      sub_1000BC2F4(v79, v80, v81);
    }
    *(void *)&long long v158 = v70;
    *((void *)&v158 + 1) = v72;
    *(void *)&long long v159 = 0;
    BYTE8(v159) = 1;
    *(void *)&long long v160 = v74;
    WORD4(v160) = v75;
    BYTE10(v160) = v76;
    uint64_t v82 = v133;
    if (v81 == 1) {
      static GestureMask.all.getter();
    }
    else {
      static GestureMask.subviews.getter();
    }
    uint64_t v97 = sub_10000F214(&qword_100526838);
    uint64_t v98 = sub_10028E890(&qword_100526848, &qword_100526838, (void (*)(void))sub_1002A92B8);
    uint64_t v99 = sub_100013AA8(&qword_100526880, &qword_100526840);
    uint64_t v100 = v129;
    uint64_t v101 = v143;
    uint64_t v102 = v130;
    View.gesture<A>(_:including:)();
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v101, v102);
    swift_release();
    *(void *)&long long v158 = v97;
    *((void *)&v158 + 1) = v102;
    *(void *)&long long v159 = v98;
    *((void *)&v159 + 1) = v99;
    swift_getOpaqueTypeConformance2();
    uint64_t v103 = v132;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v131 + 8))(v100, v103);
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v104 = (uint64_t)v82;
    uint64_t v105 = (uint64_t)v134;
    ModifiedContent<>.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000FBD8(v104, &qword_100526830);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v106._countAndFlagsBits = 0;
    v106._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v106);
    sub_10000F214(&qword_10051F350);
    uint64_t v107 = swift_allocObject();
    *(_OWORD *)(v107 + 16) = xmmword_10043D4F0;
    uint64_t v108 = v157;
    uint64_t v109 = (uint64_t *)(v157 + *(int *)(v156 + 128));
    uint64_t v110 = *v109;
    uint64_t v111 = v109[1];
    *(void *)&long long v158 = v110;
    *((void *)&v158 + 1) = v111;
    sub_10000F214(&qword_10051D2F0);
    State.wrappedValue.getter();
    double v112 = v168 + v168;
    *(void *)(v107 + 56) = &type metadata for Double;
    *(void *)(v107 + 64) = &protocol witness table for Double;
    *(double *)(v107 + 32) = v112;
    v113._countAndFlagsBits = String.init(format:_:)();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v113);
    swift_bridgeObjectRelease();
    v114._countAndFlagsBits = 0x5A2073656D695420;
    v114._object = (void *)0xEB000000006D6F6FLL;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v114);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v115 = (uint64_t)v136;
    ModifiedContent<>.accessibilityValue(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000FBD8(v105, &qword_100526830);
    uint64_t v116 = v146;
    sub_1002ADE24(v108, v146, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v117 = (*(unsigned __int8 *)(v127 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
    uint64_t v118 = swift_allocObject();
    sub_1002AA830(v116, v118 + v117, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v119 = (uint64_t)v135;
    ModifiedContent<>.accessibilityAdjustableAction(_:)();
    swift_release();
    sub_10000FBD8(v115, &qword_100526830);
    uint64_t v120 = v138;
    sub_10000FC34(v119, v138, &qword_100526830);
    sub_10000FB74(v120, (uint64_t)v141, &qword_100526830);
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_100526890);
    sub_1002A915C();
    sub_100013AA8(&qword_100526888, &qword_100526890);
    uint64_t v121 = (uint64_t)v142;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v121, v152, &qword_100526820);
    swift_storeEnumTagMultiPayload();
    sub_1002A8DF0();
    sub_1002A90BC();
    uint64_t v122 = v153;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v121, &qword_100526820);
    sub_10000FBD8(v120, &qword_100526830);
    uint64_t v123 = sub_10000F214(&qword_1005267B0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v122, 0, 1, v123);
    uint64_t v51 = (uint64_t)v122;
    goto LABEL_5;
  }
  sub_1000BC2F4(v67, v68, v69);
  sub_10000F214(&qword_100525F50);
  uint64_t v83 = (uint64_t)v126;
  State.wrappedValue.getter();
  int v84 = *(unsigned __int8 *)(v83 + *(int *)(v125 + 48));
  sub_1002ADE8C(v83, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v85 = v155;
  if (v84 == 1)
  {
    uint64_t v86 = static Alignment.center.getter();
    uint64_t v88 = v87;
    sub_100257F00(v36, (uint64_t)&v158);
    uint64_t v89 = v141;
    *uint64_t v141 = v86;
    v89[1] = v88;
    long long v90 = v165;
    *((_OWORD *)v89 + 7) = v164;
    *((_OWORD *)v89 + 8) = v90;
    *((_OWORD *)v89 + 9) = v166;
    v89[20] = v167;
    long long v91 = v161;
    *((_OWORD *)v89 + 3) = v160;
    *((_OWORD *)v89 + 4) = v91;
    long long v92 = v163;
    *((_OWORD *)v89 + 5) = v162;
    *((_OWORD *)v89 + 6) = v92;
    long long v93 = v159;
    *((_OWORD *)v89 + 1) = v158;
    *((_OWORD *)v89 + 2) = v93;
    swift_storeEnumTagMultiPayload();
    sub_1002AF6B8((uint64_t *)&v158);
    sub_10000F214(&qword_100526890);
    sub_1002A915C();
    sub_100013AA8(&qword_100526888, &qword_100526890);
    uint64_t v94 = (uint64_t)v142;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v94, v152, &qword_100526820);
    swift_storeEnumTagMultiPayload();
    sub_1002A8DF0();
    sub_1002A90BC();
    uint64_t v95 = v153;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v94, &qword_100526820);
    sub_1002AF758((uint64_t *)&v158);
    uint64_t v96 = sub_10000F214(&qword_1005267B0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v95, 0, 1, v96);
    uint64_t v51 = (uint64_t)v95;
    uint64_t v61 = v85;
    return sub_10000FC34(v51, v61, &qword_100526768);
  }
  uint64_t v124 = sub_10000F214(&qword_1005267B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v124 - 8) + 56))(v85, 1, 1, v124);
}

double sub_100235E88@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v56 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v56);
  uint64_t v54 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ContentView();
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v53 + 64);
  __chkstk_darwin(v8);
  uint64_t v57 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v55 = (uint64_t)&v50 - v11;
  __chkstk_darwin(v12);
  uint64_t v52 = (uint64_t)&v50 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v50 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v50 - v18;
  uint64_t v21 = (uint64_t *)(v1 + *(int *)(v20 + 44));
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v58 = v20;
  uint64_t v59 = v23;
  uint64_t v60 = v22;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v24 = v61;
  swift_getKeyPath();
  uint64_t v59 = v24;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v25 = *(void *)(v24 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v26 = *(void *)(v24 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  int v27 = *(unsigned __int8 *)(v24 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v25, v26, *(unsigned char *)(v24 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  if (v27 == 1)
  {
    sub_1002ADE24(v2, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_1002ADE8C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_1002ADE24(v2, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ContentView);
LABEL_6:
    sub_1002ADE8C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ContentView);
    goto LABEL_7;
  }
  sub_1000BC2F4(v25, v26, v27);
  sub_1002ADE24(v2, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v28 = v58;
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  sub_1002ADE8C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v29 = type metadata accessor for ResultLookupState();
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v7, 1, v29);
  sub_10000FBD8((uint64_t)v7, &qword_10051A308);
  sub_1002ADE24(v2, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v30 != 1) {
    goto LABEL_6;
  }
  uint64_t v31 = v2;
  uint64_t v32 = &v16[*(int *)(v28 + 160)];
  char v33 = *v32;
  uint64_t v34 = *((void *)v32 + 1);
  LOBYTE(v59) = v33;
  uint64_t v60 = v34;
  sub_10000F214(&qword_1005262F8);
  State.wrappedValue.getter();
  sub_1002ADE8C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v61 != 1)
  {
    uint64_t v35 = (uint64_t *)(v2 + *(int *)(v28 + 116));
    uint64_t v37 = *v35;
    uint64_t v36 = v35[1];
    uint64_t v59 = v37;
    uint64_t v60 = v36;
    sub_10000F214(&qword_100526468);
    State.wrappedValue.getter();
    uint64_t v51 = v61;
    sub_10000F214(&qword_100526328);
    State.wrappedValue.getter();
    sub_10000F214(&qword_100525F50);
    uint64_t v38 = (uint64_t)v54;
    State.wrappedValue.getter();
    LODWORD(v58) = *(unsigned __int8 *)(v38 + *(int *)(v56 + 48));
    sub_1002ADE8C(v38, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    uint64_t v39 = v2;
    uint64_t v40 = v52;
    sub_1002ADE24(v39, v52, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v41 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    uint64_t v42 = swift_allocObject();
    sub_1002AA830(v40, v42 + v41, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v43 = v55;
    sub_1002ADE24(v31, v55, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v44 = v31;
    uint64_t v45 = swift_allocObject();
    sub_1002AA830(v43, v45 + v41, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v46 = v44;
    uint64_t v47 = v57;
    sub_1002ADE24(v46, v57, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v48 = swift_allocObject();
    sub_1002AA830(v47, v48 + v41, (uint64_t (*)(void))type metadata accessor for ContentView);
    *(void *)a1 = v51;
    sub_10000FC34((uint64_t)&v59, a1 + 8, &qword_100518A70);
    *(unsigned char *)(a1 + 56) = v58;
    *(void *)(a1 + 64) = sub_1002AAAE0;
    *(void *)(a1 + 72) = v42;
    *(void *)(a1 + 80) = &unk_100526FF0;
    *(void *)(a1 + 88) = v45;
    *(void *)(a1 + 96) = sub_1002AE028;
    *(void *)(a1 + 104) = v48;
    return result;
  }
LABEL_7:
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1002364E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v50 = a1;
  uint64_t v3 = type metadata accessor for ContentView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v56 = v3 - 8;
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = sub_10000F214(&qword_100526AE0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100526AE8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100526AF0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v46 = v12;
  uint64_t v47 = v13;
  __chkstk_darwin(v12);
  uint64_t v55 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_100526AF8);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v48 = v15;
  uint64_t v49 = v16;
  __chkstk_darwin(v15);
  uint64_t v45 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  uint64_t v18 = sub_10000F214(&qword_100526B00);
  sub_1002439F0(v1, (uint64_t)&v8[*(int *)(v18 + 44)]);
  sub_10000FB74((uint64_t)v8, (uint64_t)v11, &qword_100526AE0);
  v11[*(int *)(v9 + 36)] = 1;
  sub_10000FBD8((uint64_t)v8, &qword_100526AE0);
  uint64_t v57 = sub_100245F80();
  uint64_t v54 = type metadata accessor for ContentView;
  uint64_t v51 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002ADE24(v1, v51, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v19 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v20 = (v19 + 16) & ~v19;
  uint64_t v52 = v20 + v5;
  uint64_t v53 = v19 | 7;
  uint64_t v21 = swift_allocObject();
  uint64_t v43 = type metadata accessor for ContentView;
  uint64_t v44 = v20;
  sub_1002AA830((uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v22 = sub_10000F214(&qword_100526B08);
  unint64_t v23 = sub_1002AA8A4();
  uint64_t v24 = sub_1002A941C(&qword_100526B28, &qword_100526B08, (void (*)(void))sub_1002AA998);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000FBD8((uint64_t)v11, &qword_100526AE8);
  uint64_t v25 = (uint64_t *)(v1 + *(int *)(v56 + 184));
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v57 = v27;
  uint64_t v58 = v26;
  sub_10000F214(&qword_100523BE0);
  State.wrappedValue.getter();
  uint64_t v28 = v51;
  sub_1002ADE24(v1, v51, (uint64_t (*)(void))v54);
  uint64_t v29 = swift_allocObject();
  sub_1002AA830(v28, v29 + v20, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v30 = sub_10000F214(&qword_100522A60);
  uint64_t v57 = v9;
  uint64_t v58 = v22;
  unint64_t v59 = v23;
  unint64_t v60 = v24;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v32 = sub_1002AA9D8();
  uint64_t v34 = v45;
  uint64_t v33 = v46;
  uint64_t v35 = v55;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v33);
  uint64_t v36 = v2 + *(int *)(v56 + 180);
  char v37 = *(unsigned char *)v36;
  uint64_t v38 = *(void *)(v36 + 8);
  LOBYTE(v57) = v37;
  uint64_t v58 = v38;
  sub_10000F214(&qword_100526338);
  State.wrappedValue.getter();
  uint64_t v39 = v51;
  sub_1002ADE24(v2, v51, (uint64_t (*)(void))v54);
  uint64_t v40 = swift_allocObject();
  sub_1002AA830(v39, v40 + v44, (uint64_t (*)(void))v43);
  uint64_t v57 = v33;
  uint64_t v58 = v30;
  unint64_t v59 = OpaqueTypeConformance2;
  unint64_t v60 = v32;
  swift_getOpaqueTypeConformance2();
  sub_10015A618();
  uint64_t v41 = v48;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v34, v41);
}

uint64_t sub_100236ACC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v153 = a1;
  uint64_t v3 = type metadata accessor for ContentView();
  uint64_t v135 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v163 = (uint64_t)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = v4;
  __chkstk_darwin(v5);
  uint64_t v155 = (uint64_t)&v124 - v6;
  uint64_t v162 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v162);
  uint64_t v124 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v138 = (char *)&v124 - v9;
  __chkstk_darwin(v10);
  uint64_t v158 = (uint64_t)&v124 - v11;
  uint64_t v12 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v160 = (uint64_t (*)(void))type metadata accessor for AppConfiguration();
  __chkstk_darwin(v160);
  uint64_t v137 = (char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v124 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v124 - v23;
  uint64_t v139 = sub_10000F214(&qword_100526A70);
  __chkstk_darwin(v139);
  uint64_t v134 = (uint64_t)&v124 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_10000F214(&qword_100526A78);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  long long v161 = (char *)&v124 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10000F214(&qword_100526A80);
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v143 = (char *)&v124 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_10000F214(&qword_100526A88);
  __chkstk_darwin(v142);
  uint64_t v148 = (char *)&v124 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_10000F214(&qword_100526A90);
  __chkstk_darwin(v147);
  uint64_t v149 = (uint64_t)&v124 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_10000F214(&qword_100526A98);
  __chkstk_darwin(v145);
  uint64_t v152 = (char *)&v124 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_10000F214(&qword_10051E9D8);
  __chkstk_darwin(v151);
  uint64_t v150 = (uint64_t)&v124 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v32 = (uint64_t (*)())(v1 + *(int *)(v3 + 40));
  uint64_t v33 = sub_10000F214(&qword_100525F50);
  uint64_t v132 = v24;
  uint64_t v156 = v33;
  uint64_t v157 = v32;
  State.wrappedValue.getter();
  long long v159 = (int *)v3;
  uint64_t v34 = (uint64_t *)(v2 + *(int *)(v3 + 44));
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  uint64_t v164 = v2;
  uint64_t v165 = v35;
  uint64_t v166 = v36;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v37 = v171;
  swift_getKeyPath();
  uint64_t v165 = v37;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v38 = v37 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v38, (uint64_t)v14, &qword_10051B760);
  uint64_t v39 = sub_10000F214(&qword_10051A060);
  int v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v14, 1, v39);
  uint64_t v133 = v17;
  if (v40)
  {
    sub_10000FBD8((uint64_t)v14, &qword_10051B760);
    uint64_t v41 = type metadata accessor for CVBundle(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v17, 1, 1, v41);
  }
  else
  {
    sub_1002ADE24((uint64_t)v14, (uint64_t)v17, type metadata accessor for CVBundle);
    sub_10000FBD8((uint64_t)v14, &qword_10051B760);
    uint64_t v42 = type metadata accessor for CVBundle(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v17, 0, 1, v42);
  }
  swift_release();
  uint64_t v43 = v34[1];
  uint64_t v165 = *v34;
  uint64_t v166 = v43;
  State.wrappedValue.getter();
  uint64_t v44 = v169;
  swift_getKeyPath();
  uint64_t v165 = v44;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v45 = *(void *)(v44 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v46 = *(void *)(v44 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  int v47 = *(unsigned __int8 *)(v44 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v45, v46, *(unsigned char *)(v44 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  sub_1000BC2F4(v45, v46, v47);
  uint64_t v48 = v159;
  uint64_t v49 = v164;
  uint64_t v50 = v164 + v159[12];
  uint64_t v131 = sub_10000F214(&qword_100525F58);
  uint64_t v154 = v50;
  State.wrappedValue.getter();
  State.wrappedValue.getter();
  LODWORD(v50) = v21[*((int *)v160 + 10) + 1];
  sub_1002ADE8C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v51 = v49;
  uint64_t v52 = v155;
  sub_1002ADE24(v51, v155, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v50 == 1)
  {
    uint64_t v53 = (uint64_t *)(v52 + v48[11]);
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    uint64_t v165 = v55;
    uint64_t v166 = v54;
    State.wrappedValue.getter();
    uint64_t v56 = v169;
    swift_getKeyPath();
    uint64_t v165 = v56;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v57 = *(void *)(v56 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
    uint64_t v58 = *(void *)(v56 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
    int v59 = *(unsigned __int8 *)(v56 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
    sub_1000BBF50(v57, v58, *(unsigned char *)(v56 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
    swift_release();
    if (v59 == 1)
    {
      BOOL v130 = v57 != 0;
    }
    else
    {
      sub_1000BC2F4(v57, v58, v59);
      BOOL v130 = 0;
    }
    uint64_t v52 = v155;
  }
  else
  {
    BOOL v130 = 0;
  }
  BOOL v61 = v47 == 3 && (v46 | v45) == 0;
  BOOL v129 = v61;
  sub_1002ADE8C(v52, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v62 = v159;
  uint64_t v63 = v164;
  uint64_t v64 = (char *)(v164 + v159[33]);
  char v65 = *v64;
  uint64_t v66 = *((void *)v64 + 1);
  LOBYTE(v165) = v65;
  uint64_t v166 = v66;
  uint64_t v67 = sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  int v128 = v169;
  uint64_t v68 = (uint64_t *)(v63 + v62[34]);
  uint64_t v70 = *v68;
  uint64_t v69 = v68[1];
  uint64_t v165 = v70;
  uint64_t v166 = v69;
  sub_10000F214(&qword_100526618);
  State.wrappedValue.getter();
  uint64_t v127 = v169;
  uint64_t v71 = (uint64_t *)(v63 + v62[64]);
  uint64_t v73 = *v71;
  uint64_t v72 = v71[1];
  uint64_t v165 = v73;
  uint64_t v166 = v72;
  sub_10000F214(&qword_100525F38);
  State.wrappedValue.getter();
  uint64_t v125 = v169;
  uint64_t v126 = type metadata accessor for ContentView;
  uint64_t v74 = v163;
  sub_1002ADE24(v63, v163, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v75 = *(unsigned __int8 *)(v135 + 80);
  uint64_t v76 = (v75 + 16) & ~v75;
  uint64_t v77 = v76 + v136;
  uint64_t v78 = v75 | 7;
  uint64_t v79 = swift_allocObject();
  sub_1002AA830(v74, v79 + v76, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v80 = v63 + v62[14];
  char v81 = *(unsigned char *)v80;
  uint64_t v155 = v80;
  uint64_t v82 = *(void *)(v80 + 8);
  LOBYTE(v169) = v81;
  uint64_t v170 = v82;
  long long v159 = (int *)v67;
  State.projectedValue.getter();
  uint64_t v83 = v134;
  sub_10024D844((uint64_t)v132, (uint64_t)v133, v129, v158, v130, v128, v127, v125, v134, (uint64_t)sub_1002AA47C, v79, v165, v166, v167);
  uint64_t v84 = (uint64_t)v138;
  State.wrappedValue.getter();
  sub_1002ADE24(v63, v74, (uint64_t (*)(void))v126);
  uint64_t v136 = v77;
  uint64_t v135 = v78;
  uint64_t v85 = swift_allocObject();
  uint64_t v158 = v76;
  sub_1002AA830(v74, v85 + v76, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v86 = sub_100013AA8(&qword_100526AA0, &qword_100526A70);
  unint64_t v87 = sub_1002AA5AC();
  uint64_t v88 = v139;
  uint64_t v132 = (char *)v86;
  uint64_t v133 = (char *)v87;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10000FBD8(v84, &qword_10051A308);
  sub_10000FBD8(v83, &qword_100526A70);
  uint64_t v89 = (uint64_t)v137;
  State.wrappedValue.getter();
  LODWORD(v86) = *(unsigned __int8 *)(v89 + *((int *)v160 + 8) + 1);
  sub_1002ADE8C(v89, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  char v90 = 0;
  if (v86 == 1)
  {
    uint64_t v91 = (uint64_t)v124;
    State.wrappedValue.getter();
    uint64_t v92 = type metadata accessor for ResultLookupState();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 48))(v91, 1, v92) == 1)
    {
      sub_10000FBD8(v91, &qword_10051A308);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 10)
      {
        char v90 = 0;
        goto LABEL_23;
      }
      sub_1002ADE8C(v91, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    }
    char v90 = 1;
  }
LABEL_23:
  LOBYTE(v169) = v90;
  uint64_t v93 = v163;
  uint64_t v94 = v164;
  uint64_t v157 = type metadata accessor for ContentView;
  sub_1002ADE24(v164, v163, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v95 = swift_allocObject();
  uint64_t v96 = v158;
  long long v160 = (uint64_t (*)(void))type metadata accessor for ContentView;
  sub_1002AA830(v93, v95 + v158, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v165 = v88;
  uint64_t v166 = v162;
  uint64_t v167 = (uint64_t)v132;
  uint64_t v168 = (uint64_t)v133;
  swift_getOpaqueTypeConformance2();
  uint64_t v97 = v143;
  uint64_t v98 = v141;
  uint64_t v99 = v161;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v140 + 8))(v99, v98);
  sub_1002ADE24(v94, v93, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v100 = swift_allocObject();
  uint64_t v101 = v160;
  sub_1002AA830(v93, v100 + v96, v160);
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = sub_1002AA65C;
  *(void *)(v102 + 24) = v100;
  uint64_t v103 = v144;
  uint64_t v104 = (uint64_t)v148;
  uint64_t v105 = v146;
  (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v148, v97, v146);
  Swift::String v106 = (void *)(v104 + *(int *)(v142 + 36));
  *Swift::String v106 = sub_1002AA674;
  v106[1] = v102;
  (*(void (**)(char *, uint64_t))(v103 + 8))(v97, v105);
  uint64_t v107 = v164;
  sub_1002ADE24(v164, v93, (uint64_t (*)(void))v157);
  uint64_t v108 = swift_allocObject();
  sub_1002AA830(v93, v108 + v96, v101);
  uint64_t v109 = swift_allocObject();
  *(void *)(v109 + 16) = sub_1002AA6A4;
  *(void *)(v109 + 24) = v108;
  uint64_t v110 = v149;
  sub_10000FB74(v104, v149, &qword_100526A88);
  uint64_t v111 = (uint64_t (**)(unsigned __int8 *))(v110 + *(int *)(v147 + 36));
  uint64_t *v111 = sub_1002AA6BC;
  v111[1] = (uint64_t (*)(unsigned __int8 *))v109;
  sub_10000FBD8(v104, &qword_100526A88);
  uint64_t v112 = static Alignment.top.getter();
  uint64_t v114 = v113;
  uint64_t v115 = (uint64_t)v152;
  uint64_t v116 = (uint64_t)&v152[*(int *)(v145 + 36)];
  sub_10024E704(v107, v116);
  unint64_t v117 = (uint64_t *)(v116 + *(int *)(sub_10000F214(&qword_100526AB8) + 36));
  uint64_t *v117 = v112;
  v117[1] = v114;
  sub_10000FC34(v110, v115, &qword_100526A90);
  uint64_t v118 = *(void *)(v155 + 8);
  LOBYTE(v165) = *(unsigned char *)v155;
  uint64_t v166 = v118;
  State.wrappedValue.getter();
  if (v169 == 1) {
    uint64_t v119 = static SafeAreaRegions.all.getter();
  }
  else {
    uint64_t v119 = 0;
  }
  char v120 = static Edge.Set.all.getter();
  uint64_t v121 = v150;
  sub_10000FB74(v115, v150, &qword_100526A98);
  uint64_t v122 = v121 + *(int *)(v151 + 36);
  *(void *)uint64_t v122 = v119;
  *(unsigned char *)(v122 + 8) = v120;
  sub_10000FBD8(v115, &qword_100526A98);
  return sub_10000FC34(v121, v153, &qword_10051E9D8);
}

uint64_t sub_100237C4C()
{
  uint64_t v0 = type metadata accessor for AccessibilityNotification.Announcement();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v19 = v0;
  uint64_t v20 = v1;
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_1005269D8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v19 - v12;
  AttributedString.init(stringLiteral:)();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v14 = enum case for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority.high(_:);
  uint64_t v15 = type metadata accessor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v6, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v6, 0, 1, v15);
  sub_1002AA0B4();
  AttributedString.subscript.setter();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  AccessibilityNotification.Announcement.init(_:)();
  uint64_t v17 = v19;
  _AccessibilityNotifications.post()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_100237F3C()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_100237F98()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void sub_100237FE0()
{
}

void sub_100238008()
{
}

uint64_t sub_100238024(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = sub_10000F214(&qword_100526960);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1002ADE24(a1, (uint64_t)&v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  sub_1002AA830((uint64_t)&v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], v10 + v9, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v13 = a1;
  sub_10000F214(&qword_1005269B8);
  sub_1002A9EC4();
  Button.init(action:label:)();
  sub_100013AA8(&qword_100526958, &qword_100526960);
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100238280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  sub_10000F214(&qword_10051A308);
  v4[6] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v6;
  v4[9] = v5;
  return _swift_task_switch(sub_100238348, v6, v5);
}

uint64_t sub_100238348()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 256));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  sub_10000F214(&qword_100525F38);
  State.wrappedValue.getter();
  v0[10] = v0[4];
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[11] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100238454;
  uint64_t v6 = v0[6];
  return sub_10014CD60(v6);
}

uint64_t sub_100238454()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  swift_task_dealloc();
  swift_release();
  sub_10000FBD8(v2, &qword_10051A308);
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 64);
  return _swift_task_switch(sub_1002B492C, v4, v3);
}

uint64_t sub_1002385BC(uint64_t a1)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_10051E360);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = a1;
  uint64_t v8 = a1;
  Label.init(title:icon:)();
  sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100238740@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v3 - 8);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F38);
  State.wrappedValue.getter();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_release();
  sub_1000317A0();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6 & 1;
  *(void *)(a1 + 24) = v7;
  return result;
}

uint64_t sub_1002388B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ContentView() + 256));
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v16 = v10;
  uint64_t v17 = v9;
  sub_10000F214(&qword_100525F38);
  State.wrappedValue.getter();
  uint64_t v11 = v18;
  swift_getKeyPath();
  uint64_t v16 = v11;
  sub_1002AB13C((unint64_t *)&qword_100521388, (void (*)(uint64_t))type metadata accessor for FeedbackController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = *(void **)(v11 + 16);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for FBKSEvaluation.Action.reportConcern(_:), v4);
  id v13 = v12;
  dispatch thunk of FBKEvaluationController.systemImageName(action:)();

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  uint64_t result = Image.init(_internalSystemName:)();
  *a2 = result;
  return result;
}

uint64_t sub_100238A8C()
{
  uint64_t v1 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v10 = &v21[-v9];
  uint64_t v11 = (int *)type metadata accessor for ContentView();
  uint64_t v12 = (char *)(v0 + v11[39]);
  char v13 = *v12;
  uint64_t v14 = *((void *)v12 + 1);
  char v23 = v13;
  uint64_t v24 = v14;
  char v26 = 0;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  UUID.init()();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v7, v10, v4);
  sub_10000F214(&qword_10051C250);
  State.wrappedValue.setter();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t v22 = v0;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  uint64_t v15 = (char *)(v0 + v11[18]);
  char v16 = *v15;
  uint64_t v17 = *((void *)v15 + 1);
  LOBYTE(v15) = v15[16];
  char v23 = v16;
  uint64_t v24 = v17;
  char v25 = (char)v15;
  char v26 = 0;
  sub_10000F214(&qword_100526678);
  FocusState.wrappedValue.setter();
  uint64_t v18 = type metadata accessor for ResultLookupState();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v3, 1, 1, v18);
  sub_1002297C8((uint64_t)v3);
  uint64_t v19 = *(void *)(v0 + v11[63]);
  swift_beginAccess();
  *(void *)(v19 + 16) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100238D4C(char a1, uint64_t a2, const char *a3)
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000F378(v5, (uint64_t)qword_10055E2E0);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v13 = v9;
    if (a1) {
      uint64_t v10 = 1853321060;
    }
    else {
      uint64_t v10 = 28789;
    }
    if (a1) {
      unint64_t v11 = 0xE400000000000000;
    }
    else {
      unint64_t v11 = 0xE200000000000000;
    }
    sub_1003806B0(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a3, v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return sub_100238A8C();
}

uint64_t sub_100238EF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v105 = a1;
  uint64_t v97 = type metadata accessor for ContentView();
  uint64_t v92 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v90 = (uint64_t)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = v2;
  __chkstk_darwin(v3);
  uint64_t v94 = (uint64_t)&v89 - v4;
  uint64_t v103 = type metadata accessor for OnboardingOverlay();
  __chkstk_darwin(v103);
  uint64_t v91 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_10000F214(&qword_100526A30);
  __chkstk_darwin(v101);
  uint64_t v104 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000F214(&qword_100526A38);
  __chkstk_darwin(v98);
  uint64_t v8 = (uint64_t *)((char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v102 = sub_10000F214(&qword_1005268C0);
  __chkstk_darwin(v102);
  uint64_t v99 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_1005266F0);
  __chkstk_darwin(v10 - 8);
  uint64_t v100 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OpacityTransition();
  uint64_t v95 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_100524778);
  uint64_t v96 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v89 - v19;
  uint64_t v21 = type metadata accessor for Locale();
  __chkstk_darwin(v21 - 8);
  uint64_t v22 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v22 - 8);
  uint64_t v23 = v1;
  if (sub_100248990())
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v94 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v25 = v24;
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v92 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v97 = v26;
    uint64_t v106 = 0;
    State.init(wrappedValue:)();
    uint64_t v91 = (char *)*((void *)&v115 + 1);
    uint64_t v27 = v115;
    OpacityTransition.init()();
    static Animation.linear(duration:)();
    uint64_t v28 = sub_1002AB13C(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
    Transition.animation(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v95 + 8))(v14, v12);
    uint64_t v29 = v96;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v17, v20, v15);
    *(void *)&long long v115 = v12;
    *((void *)&v115 + 1) = v28;
    swift_getOpaqueTypeConformance2();
    uint64_t v30 = AnyTransition.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v15);
    *uint64_t v8 = v94;
    v8[1] = v25;
    uint64_t v93 = v25;
    uint64_t v31 = v97;
    v8[2] = v92;
    int64_t v8[3] = v31;
    v8[4] = 0xD000000000000010;
    v8[5] = 0x800000010042A910;
    v8[6] = 0;
    v8[7] = 0;
    v8[8] = v27;
    v8[9] = v91;
    v8[10] = v30;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000F724(0);
    swift_retain();
    swift_retain();
    sub_10000F214(&qword_1005268D0);
    sub_1002A95B0();
    sub_1002AB13C(&qword_1005268E0, (void (*)(uint64_t))type metadata accessor for OnboardingOverlay);
    uint64_t v32 = (uint64_t)v99;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v32, v104, &qword_1005268C0);
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_1005268F0);
    sub_1002A9504();
    sub_1002A96A4();
    uint64_t v33 = v100;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v32, &qword_1005268C0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000F478(0);
    swift_release();
    swift_release();
    uint64_t v34 = sub_10000F214(&qword_1005268B0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 0, 1, v34);
    uint64_t v35 = (uint64_t)v33;
    return sub_10000FC34(v35, v105, &qword_1005266F0);
  }
  uint64_t v36 = v97;
  uint64_t v37 = v1 + *(int *)(v97 + 196);
  char v38 = *(unsigned char *)v37;
  uint64_t v39 = *(void *)(v37 + 8);
  LOBYTE(v115) = v38;
  *((void *)&v115 + 1) = v39;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v106 == 1)
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v40 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v42 = v41;
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v43 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v45 = v44;
    uint64_t v46 = v23;
    uint64_t v47 = v94;
    sub_1002ADE24(v46, v94, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v48 = (*(unsigned __int8 *)(v92 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
    uint64_t v49 = swift_allocObject();
    sub_1002AA830(v47, v49 + v48, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v106 = 0;
    State.init(wrappedValue:)();
    uint64_t v50 = *((void *)&v115 + 1);
    uint64_t v51 = (uint64_t)v91;
    *((void *)v91 + 6) = v115;
    *(void *)(v51 + 56) = v50;
    uint64_t v106 = 0;
    State.init(wrappedValue:)();
    uint64_t v52 = *((void *)&v115 + 1);
    *(void *)(v51 + 64) = v115;
    *(void *)(v51 + 72) = v52;
    LOBYTE(v106) = 0;
    State.init(wrappedValue:)();
    uint64_t v53 = *((void *)&v115 + 1);
    *(unsigned char *)(v51 + 80) = v115;
    *(void *)(v51 + 88) = v53;
    AccessibilityFocusState.init<>()();
    *(void *)uint64_t v51 = v40;
    *(void *)(v51 + 8) = v42;
    *(void *)(v51 + 16) = v43;
    *(void *)(v51 + 24) = v45;
    *(void *)(v51 + 32) = sub_1002AA21C;
    *(void *)(v51 + 40) = v49;
    sub_1002ADE24(v51, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OnboardingOverlay);
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_1005268D0);
    sub_1002A95B0();
    sub_1002AB13C(&qword_1005268E0, (void (*)(uint64_t))type metadata accessor for OnboardingOverlay);
    uint64_t v54 = (uint64_t)v99;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v54, v104, &qword_1005268C0);
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_1005268F0);
    sub_1002A9504();
    sub_1002A96A4();
    uint64_t v55 = v100;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v54, &qword_1005268C0);
    sub_1002ADE8C(v51, (uint64_t (*)(void))type metadata accessor for OnboardingOverlay);
    uint64_t v56 = sub_10000F214(&qword_1005268B0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 0, 1, v56);
    uint64_t v35 = (uint64_t)v55;
    return sub_10000FC34(v35, v105, &qword_1005266F0);
  }
  uint64_t v58 = v1 + *(int *)(v36 + 192);
  char v59 = *(unsigned char *)v58;
  uint64_t v60 = *(void *)(v58 + 8);
  LOBYTE(v115) = v59;
  *((void *)&v115 + 1) = v60;
  State.wrappedValue.getter();
  if (v106 == 1)
  {
    uint64_t v61 = v94;
    sub_1002ADE24(v1, v94, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v62 = (*(unsigned __int8 *)(v92 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
    uint64_t v63 = swift_allocObject();
    sub_1002AA830(v61, v63 + v62, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v64 = v90;
    sub_1002ADE24(v1, v90, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v65 = swift_allocObject();
    sub_1002AA830(v64, v65 + v62, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v106 = 0;
    State.init(wrappedValue:)();
    long long v67 = v115;
    uint64_t v106 = 0;
    State.init(wrappedValue:)();
    uint64_t v106 = KeyPath;
    long long v107 = 0uLL;
    uint64_t v108 = sub_1002AA1E4;
    uint64_t v109 = v63;
    uint64_t v68 = sub_1002AA200;
    uint64_t v110 = sub_1002AA200;
    uint64_t v111 = v65;
    long long v112 = v67;
    long long v113 = v115;
    char v114 = 0;
    sub_10000FCA0();
    swift_retain();
    sub_10000F724((uint64_t)sub_1002AA200);
    sub_1002A9718();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    uint64_t v69 = v120;
    char v70 = v121;
    long long v71 = v115;
    long long v72 = v116;
    uint64_t v73 = v104;
  }
  else
  {
    uint64_t v74 = v1 + *(int *)(v36 + 188);
    char v75 = *(unsigned char *)v74;
    uint64_t v76 = *(void *)(v74 + 8);
    LOBYTE(v115) = v75;
    *((void *)&v115 + 1) = v76;
    State.wrappedValue.getter();
    uint64_t v77 = v105;
    uint64_t v73 = v104;
    if (v106 != 1)
    {
      uint64_t v88 = sub_10000F214(&qword_1005268B0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v77, 1, 1, v88);
    }
    uint64_t v78 = v94;
    sub_1002ADE24(v1, v94, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v79 = (*(unsigned __int8 *)(v92 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
    uint64_t v80 = swift_allocObject();
    sub_1002AA830(v78, v80 + v79, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v81 = v90;
    sub_1002ADE24(v1, v90, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v82 = swift_allocObject();
    sub_1002AA830(v81, v82 + v79, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v83 = swift_getKeyPath();
    uint64_t v106 = 0;
    State.init(wrappedValue:)();
    long long v84 = v115;
    uint64_t v106 = 0;
    State.init(wrappedValue:)();
    uint64_t v106 = v83;
    long long v107 = xmmword_10044DA80;
    uint64_t v108 = sub_1002AA1AC;
    uint64_t v109 = v80;
    uint64_t v68 = sub_1002AA1C8;
    uint64_t v110 = sub_1002AA1C8;
    uint64_t v111 = v82;
    long long v112 = v84;
    long long v113 = v115;
    char v114 = 1;
    sub_10000FCA0();
    swift_retain();
    sub_10000F724((uint64_t)sub_1002AA1C8);
    sub_1002A9718();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    uint64_t v69 = v120;
    char v70 = v121;
    long long v71 = v115;
    long long v72 = v116;
  }
  *(_OWORD *)uint64_t v73 = v71;
  *(_OWORD *)(v73 + 16) = v72;
  long long v85 = v118;
  *(_OWORD *)(v73 + 32) = v117;
  *(_OWORD *)(v73 + 48) = v85;
  *(_OWORD *)(v73 + 64) = v119;
  *(void *)(v73 + 80) = v69;
  *(unsigned char *)(v73 + 88) = v70;
  swift_storeEnumTagMultiPayload();
  sub_10000F214(&qword_1005268F0);
  sub_1002A9504();
  sub_1002A96A4();
  uint64_t v86 = v105;
  _ConditionalContent<>.init(storage:)();
  sub_10000FD10();
  swift_release();
  sub_10000F478((uint64_t)v68);
  swift_release();
  swift_release();
  uint64_t v87 = sub_10000F214(&qword_1005268B0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v86, 0, 1, v87);
}

uint64_t sub_10023A0DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v1 = sub_10000F214(&qword_1005269F0);
  __chkstk_darwin(v1 - 8);
  uint64_t v56 = (uint64_t)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v51 - v4;
  uint64_t v6 = sub_10000F214(&qword_1005269F8);
  __chkstk_darwin(v6 - 8);
  uint64_t v55 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v51 - v9);
  __chkstk_darwin(v11);
  uint64_t v52 = (char *)&v51 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = sub_10000F214(&qword_100526A00);
  __chkstk_darwin(v16 - 8);
  uint64_t v53 = (uint64_t)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v58 = (uint64_t)&v51 - v19;
  uint64_t v20 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_100526A08);
  __chkstk_darwin(v23 - 8);
  uint64_t v54 = (uint64_t)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v51 - v26;
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  int v28 = v22[3];
  sub_1002ADE8C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  if (v28 == 1)
  {
    sub_1002420CC((uint64_t)v27);
    uint64_t v29 = sub_10000F214(&qword_1005262C8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v27, 0, 1, v29);
  }
  else
  {
    uint64_t v30 = sub_10000F214(&qword_1005262C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v27, 1, 1, v30);
  }
  State.wrappedValue.getter();
  int v31 = v22[5];
  sub_1002ADE8C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  if (v31)
  {
    uint64_t v32 = v58;
    sub_1002425D0(v58);
    uint64_t v33 = sub_10000F214(&qword_100526A10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 0, 1, v33);
  }
  else
  {
    uint64_t v34 = sub_10000F214(&qword_100526A10);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v58, 1, 1, v34);
  }
  if (qword_100517F58 != -1) {
    swift_once();
  }
  if (byte_10055E408 == 1)
  {
    sub_1000B350C(v10);
    uint64_t v35 = type metadata accessor for ToastView(0);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v10, 0, 1, v35);
  }
  else
  {
    uint64_t v36 = type metadata accessor for ToastView(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v10, 1, 1, v36);
  }
  uint64_t v37 = (uint64_t)v10;
  uint64_t v38 = (uint64_t)v52;
  sub_10000FC34(v37, (uint64_t)v52, &qword_1005269F8);
  sub_10000FC34(v38, (uint64_t)v15, &qword_1005269F8);
  sub_100242B38((uint64_t)v5);
  uint64_t v39 = v54;
  sub_10000FB74((uint64_t)v27, v54, &qword_100526A08);
  uint64_t v40 = v58;
  uint64_t v41 = v53;
  sub_10000FB74(v58, v53, &qword_100526A00);
  uint64_t v42 = v55;
  sub_10000FB74((uint64_t)v15, v55, &qword_1005269F8);
  uint64_t v43 = v56;
  sub_10000FB74((uint64_t)v5, v56, &qword_1005269F0);
  uint64_t v44 = (uint64_t)v15;
  uint64_t v45 = v41;
  uint64_t v46 = (uint64_t)v5;
  uint64_t v47 = v42;
  uint64_t v52 = v27;
  uint64_t v48 = v57;
  sub_10000FB74(v39, v57, &qword_100526A08);
  uint64_t v49 = (int *)sub_10000F214(&qword_100526A18);
  sub_10000FB74(v45, v48 + v49[12], &qword_100526A00);
  sub_10000FB74(v47, v48 + v49[16], &qword_1005269F8);
  sub_10000FB74(v43, v48 + v49[20], &qword_1005269F0);
  sub_10000FBD8(v46, &qword_1005269F0);
  sub_10000FBD8(v44, &qword_1005269F8);
  sub_10000FBD8(v40, &qword_100526A00);
  sub_10000FBD8((uint64_t)v52, &qword_100526A08);
  sub_10000FBD8(v43, &qword_1005269F0);
  sub_10000FBD8(v47, &qword_1005269F8);
  sub_10000FBD8(v45, &qword_100526A00);
  return sub_10000FBD8(v39, &qword_100526A08);
}

uint64_t sub_10023A764(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 48) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10023A7FC, v3, v2);
}

uint64_t sub_10023A7FC()
{
  uint64_t v1 = v0[5];
  swift_release();
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v5 = v0[4];
  swift_getKeyPath();
  v0[2] = v5;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v5 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) != 1) {
    sub_100414568();
  }
  swift_release();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10023A938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (unsigned __int8 *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  int v10 = *v9;
  int v26 = v9[1];
  int v27 = v10;
  unsigned __int8 v11 = v9[2];
  int v12 = v9[3];
  int v24 = v9[4];
  int v25 = v12;
  int v23 = v9[5];
  sub_1002ADE8C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  sub_1002ADE24(a1, (uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  sub_1002AA830((uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for CameraController();
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  uint64_t v15 = Environment.init<A>(_:)();
  LOBYTE(v13) = v16;
  char v28 = 0;
  State.init(wrappedValue:)();
  LOBYTE(v5) = v29;
  uint64_t v17 = v30;
  char v28 = 0;
  State.init(wrappedValue:)();
  char v18 = v29;
  uint64_t v19 = v30;
  uint64_t v20 = static Color.black.getter();
  uint64_t result = static Edge.Set.all.getter();
  *(void *)a2 = v15;
  *(unsigned char *)(a2 + 8) = v13 & 1;
  *(unsigned char *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v17;
  *(unsigned char *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v19;
  *(unsigned char *)(a2 + 48) = v27;
  *(unsigned char *)(a2 + 49) = v26;
  *(unsigned char *)(a2 + 50) = v11;
  *(unsigned char *)(a2 + 51) = v25;
  *(unsigned char *)(a2 + 52) = v24;
  *(unsigned char *)(a2 + 53) = v23;
  *(unsigned char *)(a2 + 54) = 1;
  *(void *)(a2 + 56) = sub_1002A8C38;
  *(void *)(a2 + 64) = v14;
  *(void *)(a2 + 72) = v20;
  *(unsigned char *)(a2 + 80) = result;
  return result;
}

uint64_t sub_10023AC0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  sub_1002ADE24(a1, (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  sub_1002AA830((uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for CameraController();
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  uint64_t result = Environment.init<A>(_:)();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v10 & 1;
  *(void *)(a2 + 16) = sub_1002A8A08;
  *(void *)(a2 + 24) = v8;
  return result;
}

uint64_t sub_10023AD88(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  char v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  switch(a1)
  {
    case 1:
    case 2:
      uint64_t result = sub_10023BC58();
      break;
    case 3:
      uint64_t v23 = type metadata accessor for TaskPriority();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v10, 1, 1, v23);
      sub_1002ADE24(a2, (uint64_t)&v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for ContentView);
      type metadata accessor for MainActor();
      uint64_t v24 = static MainActor.shared.getter();
      unint64_t v25 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v24;
      *(void *)(v21 + 24) = &protocol witness table for MainActor;
      sub_1002AA830((uint64_t)&v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v21 + v25, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v22 = &unk_100526688;
      goto LABEL_6;
    case 4:
      __chkstk_darwin(v8);
      *(void *)&v26[-16] = a2;
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      swift_release();
      uint64_t v18 = type metadata accessor for TaskPriority();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 1, 1, v18);
      sub_1002ADE24(a2, (uint64_t)&v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for ContentView);
      type metadata accessor for MainActor();
      uint64_t v19 = static MainActor.shared.getter();
      unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v19;
      *(void *)(v21 + 24) = &protocol witness table for MainActor;
      sub_1002AA830((uint64_t)&v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v21 + v20, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v22 = &unk_100526698;
LABEL_6:
      sub_100064D5C((uint64_t)v10, (uint64_t)v22, v21);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v12 = a2 + *(int *)(v4 + 208);
      char v13 = *(unsigned char *)v12;
      uint64_t v14 = *(void *)(v12 + 8);
      char v28 = v13;
      uint64_t v29 = v14;
      char v27 = 1;
      sub_10000F214(&qword_100522EA0);
      State.wrappedValue.setter();
      uint64_t v15 = a2 + *(int *)(v4 + 212);
      char v16 = *(unsigned char *)v15;
      uint64_t v17 = *(void *)(v15 + 8);
      char v28 = v16;
      uint64_t v29 = v17;
      char v27 = 0;
      uint64_t result = State.wrappedValue.setter();
      break;
  }
  return result;
}

uint64_t sub_10023B170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  v4[6] = type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v7;
  v4[9] = v6;
  return _swift_task_switch(sub_10023B268, v7, v6);
}

uint64_t sub_10023B268()
{
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1005282F0 + dword_1005282F0);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10023B344;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_10023B344()
{
  uint64_t v3 = (void *)*v1;
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[4];
  uint64_t v6 = v2[3];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v3[8];
    uint64_t v8 = v3[9];
    uint64_t v9 = sub_10023B4E8;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v3[11] = 0;
    uint64_t v9 = sub_10023B508;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v9, v7, v8);
}

uint64_t sub_10023B4E8()
{
  *(void *)(v0 + 88) = 0;
  return _swift_task_switch(sub_10023B508, 0, 0);
}

uint64_t sub_10023B508()
{
  *(void *)(v0 + 96) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10023B594, v2, v1);
}

uint64_t sub_10023B594()
{
  uint64_t v1 = v0[2];
  swift_release();
  *(void *)(swift_task_alloc() + 16) = v1;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  return _swift_task_switch(sub_1002B4928, v2, v3);
}

uint64_t sub_10023B654()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10023B700;
  return sub_10023B83C();
}

uint64_t sub_10023B700()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002B4938, v1, v0);
}

uint64_t sub_10023B83C()
{
  v1[20] = v0;
  type metadata accessor for MainActor();
  v1[21] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[22] = v3;
  v1[23] = v2;
  return _swift_task_switch(sub_10023B8D4, v3, v2);
}

uint64_t sub_10023B8D4()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[17] = v4;
  v0[18] = v3;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[24] = v0[19];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[25] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10023B9B8;
  return sub_100417A1C((uint64_t)(v0 + 7));
}

uint64_t sub_10023B9B8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v2 + 176);
    uint64_t v4 = *(void *)(v2 + 184);
    uint64_t v5 = sub_10023BBB0;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 176);
    uint64_t v4 = *(void *)(v2 + 184);
    uint64_t v5 = sub_10023BAF8;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10023BAF8()
{
  swift_release();
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  sub_10000F578(v0 + 16, v0 + 96);
  sub_100276A98((uint64_t)_swiftEmptyArrayStorage, v0 + 96, 0);
  sub_10000FBD8(v0 + 96, &qword_100518A80);
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10023BBB0()
{
  swift_release();
  *(_OWORD *)(v0 + 56) = 0u;
  uint64_t v1 = v0 + 56;
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  sub_10000FBD8(v1, &qword_100518A80);
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_10023BC58()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10023BD40()
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000F378(v0, (uint64_t)qword_10055E2E0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Launch-related: Tamale onAppear", v3, 2u);
    swift_slowDealloc();
  }

  return sub_10023BE24();
}

uint64_t sub_10023BE24()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v49 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  __chkstk_darwin(v4);
  uint64_t v44 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  __chkstk_darwin(v6);
  uint64_t v43 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ContentView();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v41 + 64);
  __chkstk_darwin(v8);
  uint64_t v50 = type metadata accessor for DispatchTime();
  uint64_t v42 = *(uint64_t (**)())(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v36 - v13;
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10000F378(v15, (uint64_t)qword_10055E2E0);
  char v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Launch-related: Bringing Tamale contents to foreground", v18, 2u);
    swift_slowDealloc();
  }

  sub_10025A748();
  uint64_t v19 = v1 + *(int *)(v8 + 164);
  char v20 = *(unsigned char *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  LOBYTE(aBlock) = v20;
  uint64_t v53 = v21;
  LOBYTE(v51) = 1;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  uint64_t v37 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  uint64_t v22 = v14;
  + infix(_:_:)();
  uint64_t v38 = (void (*)(char *, uint64_t))*((void *)v42 + 1);
  v38(v11, v50);
  uint64_t v40 = type metadata accessor for ContentView;
  sub_1002ADE24(v1, (uint64_t)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v39 = v1;
  uint64_t v23 = *(unsigned __int8 *)(v41 + 80);
  uint64_t v24 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v23 | 7;
  uint64_t v25 = swift_allocObject();
  uint64_t v42 = type metadata accessor for ContentView;
  sub_1002AA830((uint64_t)v24, v25 + ((v23 + 16) & ~v23), (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v56 = sub_1002A8858;
  uint64_t v57 = v25;
  aBlock = _NSConcreteStackBlock;
  uint64_t v53 = 1107296256;
  uint64_t v54 = sub_1002EDB98;
  uint64_t v55 = &unk_1004F1FC0;
  int v26 = _Block_copy(&aBlock);
  char v27 = v43;
  static DispatchQoS.unspecified.getter();
  uint64_t v51 = _swiftEmptyArrayStorage;
  sub_1002AB13C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  v36[1] = v9;
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  char v28 = v44;
  uint64_t v29 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v30 = (void *)v37;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v46);
  v38(v22, v50);
  swift_release();
  uint64_t v31 = type metadata accessor for TaskPriority();
  uint64_t v32 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v49, 1, 1, v31);
  sub_1002ADE24(v39, (uint64_t)v24, (uint64_t (*)(void))v40);
  type metadata accessor for MainActor();
  uint64_t v33 = static MainActor.shared.getter();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v33;
  *(void *)(v34 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v24, v34 + ((v23 + 32) & ~v23), (uint64_t (*)(void))v42);
  sub_100064D5C(v32, (uint64_t)&unk_100526668, v34);
  swift_release();
  return sub_10023CC48();
}

void sub_10023C4FC()
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000F378(v0, (uint64_t)qword_10055E2E0);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Launch-related: Tamale onDisappear", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10023C5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v6 = a1;
  v6[1] = a2;
  uint64_t v7 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  swift_bridgeObjectRetain();
  return sub_1002297C8((uint64_t)v6);
}

uint64_t sub_10023C6C8(long long *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v5 = (char *)(a2 + *(int *)(v4 + 132));
  char v6 = *v5;
  uint64_t v7 = *((void *)v5 + 1);
  LOBYTE(v12) = v6;
  uint64_t v13 = v7;
  sub_10000F214(&qword_100522EA0);
  uint64_t result = State.wrappedValue.getter();
  if (v11 == 1)
  {
    uint64_t v9 = (uint64_t *)(a2 + *(int *)(v4 + 136));
    uint64_t v10 = v9[1];
    uint64_t v12 = *v9;
    uint64_t v13 = v10;
    sub_100050964((uint64_t)a1, (void (*)(void, void, void, void, void))sub_10004E998);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10000F214(&qword_100526618);
    State.wrappedValue.getter();
    sub_1001FA2B4((uint64_t)&v12, a1);
    sub_10004EA10(v12, v13, v14, v15, v16);
    State.wrappedValue.setter();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10023C7F0(char a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      if (qword_100517E98 != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      sub_10000F378(v1, (uint64_t)qword_10055E2E0);
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Launch-related: Tamale didBecomeActive", v4, 2u);
        swift_slowDealloc();
      }

      sub_10023CC48();
    }
    else
    {
      if (qword_100517E98 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10000F378(v9, (uint64_t)qword_10055E2E0);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Launch-related: Tamale willEnterForeground", v12, 2u);
        swift_slowDealloc();
      }

      sub_10023BE24();
    }
  }
  else
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000F378(v5, (uint64_t)qword_10055E2E0);
    char v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Launch-related: Tamale didEnterBackground", v8, 2u);
      swift_slowDealloc();
    }

    sub_10023CA64();
  }
}

void sub_10023CA64()
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000F378(v0, (uint64_t)qword_10055E2E0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Launch-related: Sending Tamale contents to background", v3, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for ContentView();
  sub_1003D125C();
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  id v4 = [self standardUserDefaults];
  NSString v5 = String._bridgeToObjectiveC()();
  unsigned __int8 v6 = [v4 BOOLForKey:v5];

  if ((v6 & 1) == 0)
  {
    State.wrappedValue.setter();
    sub_10022A024();
  }
}

uint64_t sub_10023CC48()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v17 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unsigned __int8 v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ContentView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  sub_1002ADE24(v0, (uint64_t)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  sub_1002AA830((uint64_t)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (uint64_t (*)(void))type metadata accessor for ContentView);
  aBlock[4] = sub_1002A883C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004F1F70;
  uint64_t v13 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v18 = _swiftEmptyArrayStorage;
  sub_1002AB13C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v16);
  return swift_release();
}

void sub_10023CFE0(unsigned __int8 *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContentView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v13 = *a2;
  if (*a1 != v13)
  {
    if (*a2)
    {
      if (v13 == 1)
      {
        uint64_t v14 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
        sub_1002ADE24(a3, (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
        type metadata accessor for MainActor();
        uint64_t v15 = static MainActor.shared.getter();
        unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v15;
        *(void *)(v17 + 24) = &protocol witness table for MainActor;
        sub_1002AA830((uint64_t)v9, v17 + v16, (uint64_t (*)(void))type metadata accessor for ContentView);
        uint64_t v18 = &unk_100526628;
      }
      else
      {
        uint64_t v22 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 1, 1, v22);
        sub_1002ADE24(a3, (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
        type metadata accessor for MainActor();
        uint64_t v23 = static MainActor.shared.getter();
        unint64_t v24 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v23;
        *(void *)(v17 + 24) = &protocol witness table for MainActor;
        sub_1002AA830((uint64_t)v9, v17 + v24, (uint64_t (*)(void))type metadata accessor for ContentView);
        uint64_t v18 = &unk_100526648;
      }
    }
    else
    {
      uint64_t v19 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
      sub_1002ADE24(a3, (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
      type metadata accessor for MainActor();
      uint64_t v20 = static MainActor.shared.getter();
      unint64_t v21 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v20;
      *(void *)(v17 + 24) = &protocol witness table for MainActor;
      sub_1002AA830((uint64_t)v9, v17 + v21, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v18 = &unk_100526638;
    }
    sub_100064D5C((uint64_t)v12, (uint64_t)v18, v17);
    swift_release();
  }
}

uint64_t sub_10023D390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v5 = type metadata accessor for ContentView();
  uint64_t v54 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v55 = v6;
  uint64_t v57 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v56 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  __chkstk_darwin(v9);
  uint64_t v50 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v49 = v11;
  __chkstk_darwin(v11);
  int v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchTime();
  uint64_t v47 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v19 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v26 = *(void *)a2;
  uint64_t v25 = *(void *)(a2 + 8);
  int v27 = *(unsigned __int8 *)(a2 + 16);
  switch(v24)
  {
    case 1:
      switch(*(unsigned char *)(a2 + 16))
      {
        case 1:
          if (v26 != result) {
            goto LABEL_19;
          }
          break;
        case 3:
          goto LABEL_21;
        default:
          goto LABEL_25;
      }
      break;
    case 2:
      switch(*(unsigned char *)(a2 + 16))
      {
        case 1:
          goto LABEL_19;
        case 2:
          if (result != v26 || v23 != v25)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              goto LABEL_25;
            }
          }
          break;
        case 3:
          goto LABEL_21;
        default:
          goto LABEL_25;
      }
      break;
    case 3:
      if (result | v23)
      {
        switch(*(unsigned char *)(a2 + 16))
        {
          case 1:
            goto LABEL_19;
          case 3:
            if (v26 != 1 || v25) {
              goto LABEL_21;
            }
            break;
          default:
            goto LABEL_25;
        }
      }
      else
      {
        switch(*(unsigned char *)(a2 + 16))
        {
          case 1:
            goto LABEL_19;
          case 3:
            if (v25 | v26) {
              goto LABEL_21;
            }
            break;
          default:
            goto LABEL_25;
        }
      }
      break;
    default:
      switch(*(unsigned char *)(a2 + 16))
      {
        case 1:
LABEL_19:
          char v28 = (char *)(v58 + *(int *)(v5 + 160));
          char v29 = *v28;
          uint64_t v30 = *((void *)v28 + 1);
          LOBYTE(aBlock) = v29;
          uint64_t v61 = v30;
          LOBYTE(v59) = 0;
          sub_10000F214(&qword_1005262F8);
          State.wrappedValue.setter();
          goto LABEL_22;
        case 2:
          goto LABEL_25;
        case 3:
LABEL_21:
          if (!(v26 | v25)) {
            goto LABEL_25;
          }
LABEL_22:
          if (qword_100517D48 != -1) {
            swift_once();
          }
          sub_10005239C();
          break;
        default:
          if (v26 == result) {
            return result;
          }
LABEL_25:
          if (qword_100517D48 != -1) {
            swift_once();
          }
          sub_100054A5C();
          sub_10000F214(&qword_100525F50);
          State.wrappedValue.getter();
          int v31 = v21[*(int *)(v19 + 20) + 29];
          sub_1002ADE8C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
          if (v31 == 1 && v27 == 3 && !(v25 | v26))
          {
            sub_10000F734(0, (unint64_t *)&qword_10051A950);
            uint64_t v45 = static OS_dispatch_queue.main.getter();
            static DispatchTime.now()();
            + infix(_:_:)();
            uint64_t v46 = v25;
            uint64_t v47 = *(void *)(v47 + 8);
            ((void (*)(char *, uint64_t))v47)(v15, v53);
            uint64_t v64 = sub_10023DC4C;
            uint64_t v65 = 0;
            aBlock = _NSConcreteStackBlock;
            uint64_t v61 = 1107296256;
            unint64_t v62 = sub_1002EDB98;
            uint64_t v63 = &unk_1004F1670;
            uint64_t v32 = _Block_copy(&aBlock);
            static DispatchQoS.unspecified.getter();
            char v59 = _swiftEmptyArrayStorage;
            sub_1002AB13C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_10000F214(&qword_10051A960);
            sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
            uint64_t v33 = v50;
            uint64_t v34 = v52;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            uint64_t v35 = (void *)v45;
            OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
            _Block_release(v32);

            (*(void (**)(char *, uint64_t))(v51 + 8))(v33, v34);
            (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v49);
            ((void (*)(char *, uint64_t))v47)(v18, v53);
            uint64_t v25 = v46;
          }
          break;
      }
      uint64_t v36 = type metadata accessor for TaskPriority();
      uint64_t v37 = v25;
      uint64_t v38 = (uint64_t)v56;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v56, 1, 1, v36);
      uint64_t v39 = v57;
      sub_1002ADE24(v58, v57, (uint64_t (*)(void))type metadata accessor for ContentView);
      type metadata accessor for MainActor();
      sub_1000BBF50(v26, v37, v27);
      uint64_t v40 = static MainActor.shared.getter();
      unint64_t v41 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      unint64_t v42 = (v55 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = v40;
      *(void *)(v43 + 24) = &protocol witness table for MainActor;
      sub_1002AA830(v39, v43 + v41, (uint64_t (*)(void))type metadata accessor for ContentView);
      unint64_t v44 = v43 + v42;
      *(void *)unint64_t v44 = v26;
      *(void *)(v44 + 8) = v37;
      *(unsigned char *)(v44 + 16) = v27;
      sub_100064D5C(v38, (uint64_t)&unk_100526308, v43);
      uint64_t result = swift_release();
      break;
  }
  return result;
}

void sub_10023DC4C()
{
  if (qword_100517D88 != -1) {
    swift_once();
  }
  sub_10009366C();
  exit(0);
}

uint64_t sub_10023DCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v7 + 249) = a7;
  *(void *)(v7 + 112) = a5;
  *(void *)(v7 + 120) = a6;
  *(void *)(v7 + 104) = a4;
  sub_10000F214(&qword_10051A308);
  *(void *)(v7 + 128) = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  *(void *)(v7 + 136) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ContentView();
  *(void *)(v7 + 144) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 152) = v9;
  *(void *)(v7 + 160) = *(void *)(v9 + 64);
  *(void *)(v7 + 168) = swift_task_alloc();
  *(void *)(v7 + 176) = swift_task_alloc();
  *(void *)(v7 + 184) = swift_task_alloc();
  *(void *)(v7 + 192) = type metadata accessor for MainActor();
  *(void *)(v7 + 200) = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v7 + 208) = v11;
  *(void *)(v7 + 216) = v10;
  return _swift_task_switch(sub_10023DE24, v11, v10);
}

uint64_t sub_10023DE24()
{
  int v1 = *(unsigned __int8 *)(v0 + 249);
  sub_1002ADE24(*(void *)(v0 + 104), *(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 176);
    uint64_t v3 = *(void *)(v0 + 104);
    sub_1002ADE8C(*(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_1002ADE24(v3, v2, (uint64_t (*)(void))type metadata accessor for ContentView);
    BOOL v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = v5 + *(int *)(*(void *)(v0 + 144) + 76);
    char v7 = *(unsigned char *)v6;
    uint64_t v8 = *(void *)(v6 + 8);
    *(unsigned char *)(v0 + 32) = v7;
    uint64_t v9 = *(void *)(v0 + 176);
    uint64_t v10 = *(void *)(v0 + 104);
    *(void *)(v0 + 40) = v8;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.getter();
    sub_1002ADE8C(v5, (uint64_t (*)(void))type metadata accessor for ContentView);
    char v11 = *(unsigned char *)(v0 + 248);
    sub_1002ADE24(v10, v9, (uint64_t (*)(void))type metadata accessor for ContentView);
    if (v11)
    {
      BOOL v4 = 0;
    }
    else
    {
      char v12 = *(unsigned char *)(*(void *)(v0 + 176) + 40);
      uint64_t v13 = swift_retain();
      uint64_t v14 = sub_10027D7D0(v13, v12, 0xD000000000000019, 0x800000010042A5C0);
      swift_release();
      swift_getKeyPath();
      *(void *)(v0 + 96) = v14;
      sub_1002AB13C((unint64_t *)&qword_10051B278, (void (*)(uint64_t))type metadata accessor for SiriRequestStateResponder);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      int v15 = *(unsigned __int8 *)(v14 + 16);
      swift_release();
      BOOL v4 = v15 == 2;
    }
  }
  uint64_t v16 = *(void *)(v0 + 144);
  uint64_t v17 = *(void *)(v0 + 104);
  sub_1002ADE8C(*(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v18 = *(int *)(v16 + 132);
  *(_DWORD *)(v0 + 240) = v18;
  uint64_t v19 = (char *)(v17 + v18);
  char v20 = *v19;
  uint64_t v21 = *((void *)v19 + 1);
  *(unsigned char *)(v0 + 48) = v20;
  *(void *)(v0 + 56) = v21;
  *(unsigned char *)(v0 + 246) = v4;
  *(void *)(v0 + 224) = sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  uint64_t v22 = (char *)(v17 + *(int *)(v16 + 76));
  char v23 = *v22;
  uint64_t v24 = *((void *)v22 + 1);
  *(unsigned char *)(v0 + 16) = *v22;
  *(void *)(v0 + 24) = v24;
  State.wrappedValue.getter();
  if (*(unsigned char *)(v0 + 245) == 1)
  {
    int v25 = *(unsigned __int8 *)(v0 + 249);
    *(unsigned char *)(v0 + 64) = v23;
    *(void *)(v0 + 72) = v24;
    *(unsigned char *)(v0 + 247) = v25 != 1;
    State.wrappedValue.setter();
  }
  if (*(unsigned __int8 *)(v0 + 249) >= 3u && *(_OWORD *)(v0 + 112) == 0)
  {
    *(void *)(v0 + 232) = static MainActor.shared.getter();
    uint64_t v34 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10023E294, v34, v33);
  }
  else
  {
    swift_release();
    uint64_t v26 = (char *)(*(void *)(v0 + 104) + *(int *)(v0 + 240));
    char v27 = *v26;
    uint64_t v28 = *((void *)v26 + 1);
    *(unsigned char *)(v0 + 80) = v27;
    *(void *)(v0 + 88) = v28;
    State.wrappedValue.getter();
    if ((*(unsigned char *)(v0 + 244) & 1) == 0)
    {
      uint64_t v29 = *(void *)(v0 + 128);
      uint64_t v30 = type metadata accessor for ResultLookupState();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
      sub_1002297C8(v29);
      sub_10023E52C();
    }
    sub_10023E954();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
}

uint64_t sub_10023E294()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[13];
  swift_release();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  sub_1002ADE24(v4, v1, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v6 = static MainActor.shared.getter();
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = &protocol witness table for MainActor;
  sub_1002AA830(v1, v8 + v7, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_100064D5C(v3, (uint64_t)&unk_100526318, v8);
  swift_release();
  uint64_t v9 = v0[26];
  uint64_t v10 = v0[27];
  return _swift_task_switch(sub_10023E3F8, v9, v10);
}

uint64_t sub_10023E3F8()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 104) + *(int *)(v0 + 240);
  uint64_t v2 = *(void *)(v1 + 8);
  *(unsigned char *)(v0 + 80) = *(unsigned char *)v1;
  *(void *)(v0 + 88) = v2;
  State.wrappedValue.getter();
  if ((*(unsigned char *)(v0 + 244) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v4 = type metadata accessor for ResultLookupState();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
    sub_1002297C8(v3);
    sub_10023E52C();
  }
  sub_10023E954();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10023E52C()
{
  uint64_t v1 = sub_10000F214(&qword_100522468);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ContentView();
  uint64_t v4 = (void *)(v0 + *(int *)(v26 + 112));
  uint64_t v5 = v4[1];
  *(void *)&v37[0] = *v4;
  *((void *)&v37[0] + 1) = v5;
  sub_10000F214(&qword_1005263A0);
  State.wrappedValue.getter();
  uint64_t v6 = v36;
  uint64_t v7 = type metadata accessor for SubjectLiftRenderInput(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  swift_getKeyPath();
  uint64_t v34 = v6;
  uint64_t v35 = v3;
  *(void *)&v37[0] = v6;
  sub_1002AB13C(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10000FBD8((uint64_t)v3, &qword_100522468);
  swift_release();
  uint64_t v9 = *v4;
  uint64_t v8 = v4[1];
  *(void *)&v37[0] = v9;
  *((void *)&v37[0] + 1) = v8;
  State.wrappedValue.getter();
  uint64_t v10 = v36;
  swift_getKeyPath();
  uint64_t v32 = v10;
  uint64_t v33 = 0;
  *(void *)&v37[0] = v10;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  *(void *)&v37[0] = v9;
  *((void *)&v37[0] + 1) = v8;
  State.wrappedValue.getter();
  char v11 = v36;
  swift_getKeyPath();
  uint64_t v29 = v11;
  uint64_t v30 = 0;
  char v31 = 1;
  *(void *)&v37[0] = v11;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  *(void *)&v37[0] = v9;
  *((void *)&v37[0] + 1) = v8;
  State.wrappedValue.getter();
  uint64_t v12 = v36;
  swift_getKeyPath();
  char v27 = v12;
  uint64_t v28 = 0;
  *(void *)&v37[0] = v12;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  memset(v37, 0, 48);
  uint64_t v13 = v25;
  uint64_t v14 = (int *)v26;
  sub_10000FB74((uint64_t)v37, (uint64_t)&v36, &qword_100518A70);
  sub_10000F214(&qword_100526328);
  State.wrappedValue.setter();
  sub_10000FBD8((uint64_t)v37, &qword_100518A70);
  int v15 = (uint64_t *)(v13 + v14[45]);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *(void *)&v37[0] = v17;
  *((void *)&v37[0] + 1) = v16;
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_100523BE0);
  State.wrappedValue.setter();
  uint64_t v18 = (uint64_t *)(v13 + v14[46]);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *(void *)&v37[0] = v20;
  *((void *)&v37[0] + 1) = v19;
  uint64_t v36 = _swiftEmptyArrayStorage;
  State.wrappedValue.setter();
  uint64_t v21 = (uint64_t *)(v13 + v14[34]);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *(void *)&v37[0] = v23;
  *((void *)&v37[0] + 1) = v22;
  uint64_t v36 = &_swiftEmptySetSingleton;
  sub_10000F214(&qword_100526618);
  return State.wrappedValue.setter();
}

uint64_t sub_10023E954()
{
  uint64_t v1 = v0;
  uint64_t v243 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v243 - 8);
  __chkstk_darwin(v243);
  uint64_t v234 = (char *)&v208 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = (uint64_t (*)(void))sub_10000F214(&qword_100521670);
  __chkstk_darwin(v235);
  uint64_t v241 = (uint64_t (*)())((char *)&v208 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v221 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v220 = *(void *)(v221 - 8);
  __chkstk_darwin(v221);
  uint64_t v219 = (char *)&v208 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v238);
  uint64_t v239 = (char *)&v208 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v7 - 8);
  uint64_t v236 = (uint64_t)&v208 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v245 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)&v208 - v10);
  __chkstk_darwin(v11);
  uint64_t v237 = (uint64_t)&v208 - v12;
  __chkstk_darwin(v13);
  int v15 = (char *)&v208 - v14;
  uint64_t v16 = type metadata accessor for Locale();
  __chkstk_darwin(v16 - 8);
  uint64_t v222 = (char *)&v208 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v18 - 8);
  uint64_t v226 = (char *)&v208 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v230 = *((void *)v242 - 1);
  __chkstk_darwin(v242);
  *(void *)&long long v244 = (char *)&v208 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v208 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (uint64_t *)((char *)&v208 - v25);
  __chkstk_darwin(v27);
  uint64_t v215 = (char *)&v208 - v28;
  __chkstk_darwin(v29);
  uint64_t v214 = (uint64_t)&v208 - v30;
  __chkstk_darwin(v31);
  uint64_t v217 = (uint64_t *)((char *)&v208 - v32);
  __chkstk_darwin(v33);
  uint64_t v216 = (uint64_t *)((char *)&v208 - v34);
  uint64_t v35 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v35 - 8);
  uint64_t v232 = (uint64_t)&v208 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v227 = (uint64_t)&v208 - v38;
  __chkstk_darwin(v39);
  long long v218 = (char *)&v208 - v40;
  uint64_t v41 = type metadata accessor for ContentView();
  uint64_t v223 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v225 = (uint64_t)&v208 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v229 = (uint64_t)&v208 - v44;
  __chkstk_darwin(v45);
  uint64_t v228 = (uint64_t)&v208 - v46;
  __chkstk_darwin(v47);
  uint64_t v233 = (void (**)(uint64_t, uint64_t))((char *)&v208 - v48);
  __chkstk_darwin(v49);
  uint64_t v51 = (char *)&v208 - v50;
  __chkstk_darwin(v52);
  uint64_t v54 = (char *)&v208 - v53;
  uint64_t v224 = v55;
  __chkstk_darwin(v56);
  uint64_t v58 = (char *)&v208 - v57;
  uint64_t v60 = v0 + *(int *)(v59 + 164);
  char v61 = *(unsigned char *)v60;
  unint64_t v62 = *(id **)(v60 + 8);
  LOBYTE(v248) = v61;
  char v249 = v62;
  uint64_t v231 = (void (**)(char *, uint64_t, uint64_t))sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v247)
  {
    uint64_t v63 = (id **)(v0 + *(int *)(v41 + 184));
    uint64_t v65 = *v63;
    uint64_t v64 = v63[1];
    uint64_t v248 = v65;
    char v249 = v64;
    uint64_t v247 = _swiftEmptyArrayStorage;
    sub_10000F214(&qword_100523BE0);
    return State.wrappedValue.setter();
  }
  uint64_t v213 = v2;
  uint64_t v211 = v15;
  long long v67 = sub_10025B508();
  uint64_t v247 = v67;
  uint64_t v240 = (int *)v41;
  uint64_t v68 = v0 + *(int *)(v41 + 172);
  char v69 = *(unsigned char *)v68;
  char v70 = *(id **)(v68 + 8);
  LOBYTE(v248) = v69;
  char v249 = v70;
  sub_10000F214(&qword_100526338);
  State.wrappedValue.getter();
  uint64_t v210 = v26;
  uint64_t v209 = v23;
  if (!(_BYTE)v246 || v246 == 1)
  {
    uint64_t v248 = v67;
    swift_bridgeObjectRetain();
    sub_10000F214(&qword_100522A60);
    sub_100013AA8(&qword_100521810, &qword_100522A60);
    uint64_t v71 = RandomAccessCollection.stableSorted(by:)();
    swift_bridgeObjectRelease_n();
    uint64_t v247 = (void *)v71;
    long long v67 = (id *)v71;
  }
  long long v72 = v240;
  id v73 = v67[2];
  sub_1002ADE24(v1, (uint64_t)v58, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v73)
  {
    sub_1002ADE8C((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_1002ADE24(v1, (uint64_t)v54, (uint64_t (*)(void))type metadata accessor for ContentView);
LABEL_9:
    uint64_t v79 = sub_1002ADE8C((uint64_t)v54, (uint64_t (*)(void))type metadata accessor for ContentView);
LABEL_10:
    __chkstk_darwin(v79);
    *(&v208 - 2) = v1;
    *(&v208 - 1) = (uint64_t)&v247;
    static Animation.default.getter();
    goto LABEL_11;
  }
  uint64_t v74 = &v58[v72[11]];
  uint64_t v76 = *(id **)v74;
  char v75 = (id *)*((void *)v74 + 1);
  uint64_t v248 = v76;
  char v249 = v75;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v77 = (id *)v246;
  swift_getKeyPath();
  uint64_t v248 = v77;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v78 = *((unsigned __int8 *)v77 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  swift_release();
  sub_1002ADE8C((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1002ADE24(v1, (uint64_t)v54, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v78 == 1) {
    goto LABEL_9;
  }
  uint64_t v122 = &v54[v72[41]];
  char v123 = *v122;
  uint64_t v124 = (id *)*((void *)v122 + 1);
  LOBYTE(v248) = v123;
  char v249 = v124;
  State.wrappedValue.getter();
  uint64_t v79 = sub_1002ADE8C((uint64_t)v54, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v246) {
    goto LABEL_10;
  }
  __chkstk_darwin(v79);
  *(&v208 - 2) = v1;
  static Animation.default.getter();
LABEL_11:
  withAnimation<A>(_:_:)();
  uint64_t v212 = 0;
  swift_release();
  uint64_t v80 = v240;
  uint64_t v81 = (id **)(v1 + v240[11]);
  uint64_t v83 = *v81;
  uint64_t v82 = v81[1];
  uint64_t v248 = v83;
  char v249 = v82;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  long long v84 = (id *)v246;
  swift_getKeyPath();
  uint64_t v248 = v84;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v85 = *((unsigned __int8 *)v84 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  swift_release();
  sub_1002ADE24(v1, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v85 == 1)
  {
    sub_1002ADE8C((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v86 = v233;
    sub_1002ADE24(v1, (uint64_t)v233, (uint64_t (*)(void))type metadata accessor for ContentView);
LABEL_14:
    sub_1002ADE8C((uint64_t)v86, (uint64_t (*)(void))type metadata accessor for ContentView);
    goto LABEL_15;
  }
  uint64_t v87 = &v51[v80[40]];
  char v88 = *v87;
  uint64_t v89 = (id *)*((void *)v87 + 1);
  LOBYTE(v248) = v88;
  char v249 = v89;
  sub_10000F214(&qword_1005262F8);
  State.wrappedValue.getter();
  sub_1002ADE8C((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for ContentView);
  int v90 = v246;
  uint64_t v86 = v233;
  sub_1002ADE24(v1, (uint64_t)v233, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v90 == 1) {
    goto LABEL_14;
  }
  uint64_t v96 = (char *)v86 + v80[19];
  char v97 = *v96;
  uint64_t v98 = (id *)*((void *)v96 + 1);
  LOBYTE(v248) = v97;
  char v249 = v98;
  State.wrappedValue.getter();
  sub_1002ADE8C((uint64_t)v86, (uint64_t (*)(void))type metadata accessor for ContentView);
  if ((v246 & 1) == 0)
  {
    uint64_t v99 = v247[2];
    uint64_t v100 = v228;
    sub_1002ADE24(v1, v228, (uint64_t (*)(void))type metadata accessor for ContentView);
    if (v99)
    {
      sub_1002ADE8C(v100, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v101 = v229;
      sub_1002ADE24(v1, v229, (uint64_t (*)(void))type metadata accessor for ContentView);
    }
    else
    {
      sub_10000F214(&qword_100525F58);
      uint64_t v126 = (uint64_t)v218;
      State.wrappedValue.getter();
      sub_1002ADE8C(v100, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v127 = type metadata accessor for ResultLookupState();
      int v128 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 48))(v126, 1, v127);
      sub_10000FBD8(v126, &qword_10051A308);
      uint64_t v101 = v229;
      sub_1002ADE24(v1, v229, (uint64_t (*)(void))type metadata accessor for ContentView);
      if (v128 == 1)
      {
        BOOL v129 = (id **)(v101 + v80[11]);
        uint64_t v131 = *v129;
        BOOL v130 = v129[1];
        uint64_t v248 = v131;
        char v249 = v130;
        State.wrappedValue.getter();
        uint64_t v132 = (id *)v246;
        swift_getKeyPath();
        uint64_t v248 = v132;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v133 = *(uint64_t *)((char *)v132 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
        uint64_t v134 = *(uint64_t *)((char *)v132 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
        int v135 = *((unsigned __int8 *)v132 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
        sub_1000BBF50(v133, v134, *((unsigned char *)v132 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
        swift_release();
        sub_1002ADE8C(v101, (uint64_t (*)(void))type metadata accessor for ContentView);
        if (v135)
        {
          sub_1000BC2F4(v133, v134, v135);
          String.LocalizationValue.init(stringLiteral:)();
          static Locale.current.getter();
          *(void *)&long long v244 = String.init(localized:table:bundle:locale:comment:)();
          uint64_t v234 = v136;
          uint64_t v245 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v213 + 56);
          v245(v211, 1, 1, v243);
          uint64_t v137 = v225;
          uint64_t v241 = type metadata accessor for ContentView;
          sub_1002ADE24(v1, v225, (uint64_t (*)(void))type metadata accessor for ContentView);
          uint64_t v138 = *(unsigned __int8 *)(v223 + 80);
          uint64_t v139 = (v138 + 16) & ~v138;
          uint64_t v236 = v138 | 7;
          uint64_t v237 = v139 + v224;
          uint64_t v140 = v1;
          uint64_t v141 = swift_allocObject();
          uint64_t v235 = (uint64_t (*)(void))type metadata accessor for ContentView;
          sub_1002AA830(v137, v141 + v139, (uint64_t (*)(void))type metadata accessor for ContentView);
          sub_1002ADE24(v140, v137, (uint64_t (*)(void))type metadata accessor for ContentView);
          uint64_t v142 = swift_allocObject();
          sub_1002AA830(v137, v142 + v139, (uint64_t (*)(void))type metadata accessor for ContentView);
          uint64_t v143 = v216;
          uint64_t v144 = v234;
          *uint64_t v216 = v244;
          v143[1] = v144;
          v143[2] = 0x6275622E74786574;
          v143[3] = 0xEB00000000656C62;
          *((unsigned char *)v143 + 32) = 10;
          long long v244 = xmmword_100449310;
          *(_OWORD *)(v143 + 5) = xmmword_100449310;
          *((_WORD *)v143 + 28) = 1;
          uint64_t v145 = v242;
          uint64_t v146 = v242[16];
          *((unsigned char *)v143 + v242[15]) = 0;
          uint64_t v147 = (unint64_t (**)())((char *)v143 + v145[12]);
          *uint64_t v147 = sub_100297804;
          v147[1] = (unint64_t (*)())v141;
          uint64_t v148 = (uint64_t (**)())((char *)v143 + v145[13]);
          *uint64_t v148 = sub_100297868;
          v148[1] = (uint64_t (*)())v142;
          uint64_t v149 = (void *)((char *)v143 + v145[14]);
          *uint64_t v149 = 0;
          v149[1] = 0;
          *(void *)((char *)v143 + v146) = 0;
          uint64_t v150 = (uint64_t)v211;
          sub_10000FC34((uint64_t)v211, (uint64_t)v143 + v145[11], (uint64_t *)&unk_100524ED0);
          String.LocalizationValue.init(stringLiteral:)();
          static Locale.current.getter();
          uint64_t v151 = String.init(localized:table:bundle:locale:comment:)();
          uint64_t v153 = v152;
          v245((char *)v150, 1, 1, v243);
          uint64_t v154 = v140;
          sub_1002ADE24(v140, v137, (uint64_t (*)(void))v241);
          uint64_t v155 = swift_allocObject();
          sub_1002AA830(v137, v155 + v139, v235);
          uint64_t v156 = v217;
          *uint64_t v217 = v151;
          v156[1] = v153;
          v156[2] = 0xD00000000000001BLL;
          v156[3] = 0x8000000100424A10;
          *((unsigned char *)v156 + 32) = 11;
          *(_OWORD *)(v156 + 5) = v244;
          *((_WORD *)v156 + 28) = 1;
          uint64_t v157 = v145[16];
          *((unsigned char *)v156 + v145[15]) = 0;
          uint64_t v158 = (uint64_t (**)())((char *)v156 + v145[12]);
          *uint64_t v158 = sub_100048CB8;
          v158[1] = 0;
          long long v159 = (uint64_t (**)())((char *)v156 + v145[13]);
          *long long v159 = sub_100297884;
          v159[1] = (uint64_t (*)())v155;
          long long v160 = (uint64_t *)((char *)v156 + v145[14]);
          *long long v160 = 0;
          v160[1] = 0;
          *(uint64_t *)((char *)v156 + v157) = 0;
          sub_10000FC34(v150, (uint64_t)v156 + v145[11], (uint64_t *)&unk_100524ED0);
          uint64_t v161 = v214;
          sub_1002ADE24((uint64_t)v143, v214, type metadata accessor for ActionBarItem);
          unint64_t v162 = (unint64_t)v247;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v162 = sub_1003289A4(0, *(void *)(v162 + 16) + 1, 1, v162);
          }
          uint64_t v163 = (uint64_t)v215;
          unint64_t v165 = *(void *)(v162 + 16);
          unint64_t v164 = *(void *)(v162 + 24);
          uint64_t v1 = v154;
          if (v165 >= v164 >> 1) {
            unint64_t v162 = sub_1003289A4(v164 > 1, v165 + 1, 1, v162);
          }
          *(void *)(v162 + 16) = v165 + 1;
          unint64_t v166 = (*(unsigned __int8 *)(v230 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v230 + 80);
          uint64_t v167 = *(void *)(v230 + 72);
          sub_1002AA830(v161, v162 + v166 + v167 * v165, type metadata accessor for ActionBarItem);
          sub_1002ADE24((uint64_t)v217, v163, type metadata accessor for ActionBarItem);
          unint64_t v169 = *(void *)(v162 + 16);
          unint64_t v168 = *(void *)(v162 + 24);
          if (v169 >= v168 >> 1) {
            unint64_t v162 = sub_1003289A4(v168 > 1, v169 + 1, 1, v162);
          }
          *(void *)(v162 + 16) = v169 + 1;
          sub_1002AA830(v163, v162 + v166 + v169 * v167, type metadata accessor for ActionBarItem);
          uint64_t v247 = (void *)v162;
          sub_1002ADE8C((uint64_t)v217, type metadata accessor for ActionBarItem);
          sub_1002ADE8C((uint64_t)v216, type metadata accessor for ActionBarItem);
          uint64_t v80 = v240;
        }
LABEL_51:
        sub_10000F214(&qword_100525F50);
        uint64_t v170 = (uint64_t)v239;
        State.wrappedValue.getter();
        int v171 = *(unsigned __int8 *)(v170 + *(int *)(v238 + 32) + 1);
        uint64_t EnumCaseMultiPayload = sub_1002ADE8C(v170, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
        if (v171 == 1)
        {
          sub_10000F214(&qword_100525F58);
          uint64_t v173 = v227;
          State.wrappedValue.getter();
          uint64_t v174 = type metadata accessor for ResultLookupState();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 48))(v173, 1, v174) == 1)
          {
            sub_10000FBD8(v173, &qword_10051A308);
LABEL_56:
            uint64_t v175 = (id **)(v1 + v80[64]);
            uint64_t v177 = v175[1];
            uint64_t v248 = *v175;
            uint64_t v176 = v248;
            char v249 = v177;
            sub_10000F214(&qword_100525F38);
            State.wrappedValue.getter();
            String.LocalizationValue.init(stringLiteral:)();
            static Locale.current.getter();
            uint64_t v178 = String.init(localized:table:bundle:locale:comment:)();
            uint64_t v180 = v179;
            swift_release();
            uint64_t v248 = v176;
            char v249 = v177;
            State.wrappedValue.getter();
            uint64_t v181 = v246;
            swift_getKeyPath();
            uint64_t v248 = (id *)v181;
            sub_1002AB13C((unint64_t *)&qword_100521388, (void (*)(uint64_t))type metadata accessor for FeedbackController);
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            long long v182 = *(void **)(v181 + 16);
            uint64_t v183 = v220;
            uint64_t v184 = v219;
            uint64_t v185 = v221;
            (*(void (**)(char *, void, uint64_t))(v220 + 104))(v219, enum case for FBKSEvaluation.Action.reportConcern(_:), v221);
            id v186 = v182;
            uint64_t v187 = dispatch thunk of FBKEvaluationController.systemImageName(action:)();
            uint64_t v189 = v188;

            (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v185);
            swift_release();
            if (qword_100517F78 != -1) {
              swift_once();
            }
            uint64_t v190 = v243;
            uint64_t v191 = sub_10000F378(v243, (uint64_t)qword_100525ED8);
            uint64_t v192 = v213;
            uint64_t v193 = (uint64_t)v211;
            (*(void (**)(char *, uint64_t, uint64_t))(v213 + 16))(v211, v191, v190);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v192 + 56))(v193, 0, 1, v190);
            uint64_t v194 = v225;
            sub_1002ADE24(v1, v225, (uint64_t (*)(void))type metadata accessor for ContentView);
            unint64_t v195 = (*(unsigned __int8 *)(v223 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80);
            uint64_t v196 = swift_allocObject();
            sub_1002AA830(v194, v196 + v195, (uint64_t (*)(void))type metadata accessor for ContentView);
            uint64_t v197 = (uint64_t)v210;
            *uint64_t v210 = v178;
            *(void *)(v197 + 8) = v180;
            *(void *)(v197 + 16) = v187;
            *(void *)(v197 + 24) = v189;
            *(unsigned char *)(v197 + 32) = 14;
            *(_OWORD *)(v197 + 40) = xmmword_100449310;
            *(_WORD *)(v197 + 56) = 257;
            uint64_t v198 = v242;
            uint64_t v199 = v242[16];
            *(unsigned char *)(v197 + v242[15]) = 0;
            uint64_t v200 = (uint64_t (**)())(v197 + v198[12]);
            *uint64_t v200 = sub_100048CB8;
            v200[1] = 0;
            uint64_t v201 = (uint64_t (**)())(v197 + v198[13]);
            *uint64_t v201 = sub_1002977E0;
            v201[1] = (uint64_t (*)())v196;
            uint64_t v202 = (void *)(v197 + v198[14]);
            *uint64_t v202 = 0;
            v202[1] = 0;
            *(void *)(v197 + v199) = 0;
            sub_10000FC34(v193, v197 + v198[11], (uint64_t *)&unk_100524ED0);
            uint64_t v203 = (uint64_t)v209;
            sub_1002ADE24(v197, (uint64_t)v209, type metadata accessor for ActionBarItem);
            unint64_t v204 = (unint64_t)v247;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v204 = sub_1003289A4(0, *(void *)(v204 + 16) + 1, 1, v204);
            }
            uint64_t v205 = v230;
            unint64_t v207 = *(void *)(v204 + 16);
            unint64_t v206 = *(void *)(v204 + 24);
            if (v207 >= v206 >> 1) {
              unint64_t v204 = sub_1003289A4(v206 > 1, v207 + 1, 1, v204);
            }
            *(void *)(v204 + 16) = v207 + 1;
            sub_1002AA830(v203, v204+ ((*(unsigned __int8 *)(v205 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v205 + 80))+ *(void *)(v205 + 72) * v207, type metadata accessor for ActionBarItem);
            uint64_t v247 = (void *)v204;
            uint64_t EnumCaseMultiPayload = sub_1002ADE8C(v197, type metadata accessor for ActionBarItem);
            goto LABEL_63;
          }
          uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload != 10)
          {
            sub_1002ADE8C(v227, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
            goto LABEL_56;
          }
        }
LABEL_63:
        __chkstk_darwin(EnumCaseMultiPayload);
        *(&v208 - 2) = v1;
        *(&v208 - 1) = (uint64_t)&v247;
        static Animation.default.getter();
        goto LABEL_64;
      }
    }
    sub_1002ADE8C(v101, (uint64_t (*)(void))type metadata accessor for ContentView);
    goto LABEL_51;
  }
LABEL_15:
  sub_10000F214(&qword_100525F50);
  uint64_t v91 = (uint64_t)v239;
  State.wrappedValue.getter();
  int v92 = *(unsigned __int8 *)(v91 + *(int *)(v238 + 32) + 1);
  sub_1002ADE8C(v91, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v93 = v213;
  if (v92 == 1)
  {
    sub_10000F214(&qword_100525F58);
    uint64_t v94 = v232;
    State.wrappedValue.getter();
    uint64_t v95 = type metadata accessor for ResultLookupState();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 48))(v94, 1, v95) == 1)
    {
      sub_10000FBD8(v94, &qword_10051A308);
      return swift_bridgeObjectRelease();
    }
    if (swift_getEnumCaseMultiPayload() != 10)
    {
      sub_1002ADE8C(v232, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v102 = (id **)(v1 + v80[46]);
  uint64_t v104 = *v102;
  uint64_t v103 = v102[1];
  uint64_t v248 = v104;
  char v249 = v103;
  sub_10000F214(&qword_100523BE0);
  State.wrappedValue.getter();
  uint64_t v105 = *(void *)(v246 + 16);
  if (!v105)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v229 = v1;
  uint64_t v106 = v246 + ((*(unsigned __int8 *)(v230 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v230 + 80));
  uint64_t v239 = (char *)(v93 + 56);
  uint64_t v240 = (int *)(v93 + 16);
  long long v107 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  uint64_t v231 = (void (**)(char *, uint64_t, uint64_t))(v93 + 32);
  uint64_t v233 = (void (**)(uint64_t, uint64_t))(v93 + 8);
  uint64_t v238 = *(void *)(v230 + 72);
  uint64_t v230 = v246;
  swift_bridgeObjectRetain();
  uint64_t v108 = v235;
  uint64_t v109 = (uint64_t (*)(void))v241;
  uint64_t v110 = v237;
  uint64_t v111 = v243;
  while (1)
  {
    uint64_t v112 = v244;
    sub_1002ADE24(v106, v244, type metadata accessor for ActionBarItem);
    sub_10000FB74(v112 + v242[11], v110, (uint64_t *)&unk_100524ED0);
    if (qword_100517F78 != -1) {
      swift_once();
    }
    uint64_t v113 = sub_10000F378(v111, (uint64_t)qword_100525ED8);
    char v114 = v245;
    (*(void (**)(void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))v240)(v245, v113, v111);
    (*(void (**)(void, void, uint64_t, uint64_t))v239)(v114, 0, 1, v111);
    uint64_t v115 = (uint64_t)v109 + *((int *)v108 + 12);
    sub_10000FB74(v110, (uint64_t)v109, (uint64_t *)&unk_100524ED0);
    sub_10000FB74((uint64_t)v114, v115, (uint64_t *)&unk_100524ED0);
    uint64_t v116 = (uint64_t)v109;
    long long v117 = *v107;
    if ((*v107)(v116, 1, v111) == 1) {
      break;
    }
    uint64_t v118 = v236;
    sub_10000FB74(v116, v236, (uint64_t *)&unk_100524ED0);
    if (v117(v115, 1, v111) == 1)
    {
      (*v233)(v118, v111);
      uint64_t v110 = v237;
      goto LABEL_25;
    }
    long long v119 = v234;
    (*v231)(v234, v115, v111);
    sub_1002AB13C(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
    LODWORD(v232) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v120 = *v233;
    (*v233)(v118, v111);
    char v121 = v119;
    uint64_t v108 = v235;
    v120((uint64_t)v121, v111);
    sub_10000FBD8(v116, (uint64_t *)&unk_100524ED0);
    sub_10000FBD8((uint64_t)v245, (uint64_t *)&unk_100524ED0);
    uint64_t v110 = v237;
    sub_10000FBD8(v237, (uint64_t *)&unk_100524ED0);
    sub_1002ADE8C(v244, type metadata accessor for ActionBarItem);
    uint64_t v109 = (uint64_t (*)(void))v116;
    if (v232) {
      goto LABEL_40;
    }
LABEL_26:
    v106 += v238;
    if (!--v105)
    {
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
  }
  if (v117(v115, 1, v111) != 1)
  {
LABEL_25:
    uint64_t v109 = (uint64_t (*)(void))v241;
    sub_10000FBD8((uint64_t)v241, &qword_100521670);
    sub_10000FBD8((uint64_t)v245, (uint64_t *)&unk_100524ED0);
    sub_10000FBD8(v110, (uint64_t *)&unk_100524ED0);
    sub_1002ADE8C(v244, type metadata accessor for ActionBarItem);
    goto LABEL_26;
  }
  sub_10000FBD8((uint64_t)v241, (uint64_t *)&unk_100524ED0);
  sub_10000FBD8((uint64_t)v245, (uint64_t *)&unk_100524ED0);
  sub_10000FBD8(v110, (uint64_t *)&unk_100524ED0);
  sub_1002ADE8C(v244, type metadata accessor for ActionBarItem);
LABEL_40:
  uint64_t v125 = swift_bridgeObjectRelease_n();
  __chkstk_darwin(v125);
  *(&v208 - 2) = v229;
  static Animation.default.getter();
LABEL_64:
  withAnimation<A>(_:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_100240888(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a2;
  id v3 = [self standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 setBool:v2 forKey:v4];
}

void sub_100240924(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ContentView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a2 == 1)
  {
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_1002ADE24(a3, (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
    type metadata accessor for MainActor();
    uint64_t v13 = static MainActor.shared.getter();
    unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v13;
    *(void *)(v15 + 24) = &protocol witness table for MainActor;
    sub_1002AA830((uint64_t)v8, v15 + v14, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_100064D5C((uint64_t)v11, (uint64_t)&unk_1005262F0, v15);
    swift_release();
    uint64_t v16 = (uint64_t *)(a3 + *(int *)(v5 + 44));
    uint64_t v17 = v16[1];
    uint64_t v25 = *v16;
    uint64_t v26 = v17;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    uint64_t v18 = v27;
    swift_getKeyPath();
    uint64_t v25 = v18;
    sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LODWORD(v13) = *(unsigned __int8 *)(v18 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
    swift_release();
    if (v13 != 1)
    {
      uint64_t v19 = a3 + *(int *)(v5 + 160);
      char v20 = *(unsigned char *)v19;
      uint64_t v21 = *(void *)(v19 + 8);
      LOBYTE(v25) = v20;
      uint64_t v26 = v21;
      LOBYTE(v27) = 0;
      sub_10000F214(&qword_1005262F8);
      State.wrappedValue.setter();
      uint64_t v22 = v16[1];
      uint64_t v25 = *v16;
      uint64_t v26 = v22;
      State.wrappedValue.getter();
      uint64_t v23 = v27;
      swift_getKeyPath();
      uint64_t v25 = v23;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v23 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) != 1) {
        sub_100414568();
      }
      swift_release();
    }
  }
}

uint64_t sub_100240C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  v4[6] = type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v6;
  v4[9] = v5;
  return _swift_task_switch(sub_100240D28, v6, v5);
}

uint64_t sub_100240D28()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[10] = v0[4];
  v0[11] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[12] = v6;
  v0[13] = v5;
  return _swift_task_switch(sub_100240DFC, v6, v5);
}

uint64_t sub_100240DFC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 16);
  *(void *)(v0 + 112) = v1;
  return _swift_task_switch(sub_100240E20, v1, 0);
}

uint64_t sub_100240E20()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 112) + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100240EB8;
  return sub_100346F0C(v1);
}

uint64_t sub_100240EB8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return _swift_task_switch(sub_100240FD8, v3, v2);
}

uint64_t sub_100240FD8()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  return _swift_task_switch(sub_1002B4940, v1, v2);
}

uint64_t sub_100241044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  uint64_t v28 = a1;
  uint64_t v3 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v33 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v29 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContentView();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v30 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_1005261F0);
  uint64_t v27 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v27 + 64);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v26 - v16;
  sub_1002ADE24(v28, (uint64_t)&v26 - v16, type metadata accessor for CameraControllerConfiguration);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v17, 0, 1, v3);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 1, 1, v18);
  sub_1002ADE24(v31, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_10000FB74((uint64_t)v17, (uint64_t)v14, &qword_1005261F0);
  uint64_t v19 = v29;
  sub_1002ADE24(v32, v29, type metadata accessor for CameraControllerConfiguration);
  type metadata accessor for MainActor();
  uint64_t v20 = static MainActor.shared.getter();
  unint64_t v21 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  unint64_t v22 = (v7 + *(unsigned __int8 *)(v27 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  unint64_t v23 = (v13 + *(unsigned __int8 *)(v4 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v20;
  *(void *)(v24 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v8, v24 + v21, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_10000FC34((uint64_t)v14, v24 + v22, &qword_1005261F0);
  sub_1002AA830(v19, v24 + v23, type metadata accessor for CameraControllerConfiguration);
  sub_100064D5C((uint64_t)v11, (uint64_t)&unk_100526200, v24);
  swift_release();
  return sub_10000FBD8((uint64_t)v17, &qword_1005261F0);
}

uint64_t sub_100241428@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100527228);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  uint64_t result = sub_10000FBD8((uint64_t)v4, &qword_100527228);
  uint64_t v6 = v13[2];
  char v7 = v14;
  char v8 = v15;
  char v9 = v16;
  char v10 = v17;
  char v11 = v18;
  char v12 = v19;
  *(void *)a1 = v13[1];
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 17) = v8;
  *(unsigned char *)(a1 + 18) = v9;
  *(unsigned char *)(a1 + 19) = v10;
  *(unsigned char *)(a1 + 20) = v11;
  *(unsigned char *)(a1 + 21) = v12;
  *(_DWORD *)(a1 + 22) = 0;
  *(_WORD *)(a1 + 26) = 0;
  return result;
}

double sub_100241550@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100527228);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v4, &qword_100527228);
  double result = *(double *)&v8;
  uint64_t v6 = v9;
  uint64_t v7 = v10;
  *(_OWORD *)a1 = v8;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  return result;
}

uint64_t sub_100241650@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(qword_10051D090);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100527228);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v7, &qword_100527228);
  sub_10000FB74((uint64_t)v4, a1, qword_10051D090);
  uint64_t v8 = a1 + *(int *)(sub_10000F214(&qword_1005271A0) + 36);
  *(_WORD *)uint64_t v8 = 257;
  *(_OWORD *)(v8 + 8) = xmmword_10043CDE0;
  *(_DWORD *)(v8 + 24) = 1028443341;
  *(_WORD *)(v8 + 28) = 0;
  uint64_t v9 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v10 = v8 + v9[10];
  uint64_t v11 = type metadata accessor for URL();
  char v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  *(unsigned char *)(v8 + v9[11]) = 0;
  uint64_t v13 = v9[12];
  if (qword_100517DF8 != -1) {
    swift_once();
  }
  uint64_t v14 = v8 + v13;
  char v15 = byte_10055E110;
  *(void *)uint64_t v14 = qword_10055E108;
  *(unsigned char *)(v14 + 8) = v15;
  *(void *)(v8 + v9[13]) = 0x38D1B7173E19999ALL;
  *(unsigned char *)(v8 + v9[14]) = 0;
  *(unsigned char *)(v8 + v9[15]) = 1;
  *(unsigned char *)(v8 + v9[16]) = 4;
  *(unsigned char *)(v8 + v9[17]) = 0;
  v12(v8 + v9[18], 1, 1, v11);
  *(unsigned char *)(v8 + v9[19]) = 1;
  *(unsigned char *)(v8 + v9[20]) = 0;
  *(unsigned char *)(v8 + v9[21]) = 1;
  v12(v8 + v9[22], 1, 1, v11);
  return sub_10000FBD8((uint64_t)v4, qword_10051D090);
}

uint64_t sub_100241920@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100527228);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  uint64_t result = sub_10000FBD8((uint64_t)v4, &qword_100527228);
  uint64_t v6 = v9[2];
  char v7 = v10;
  char v8 = v11;
  *(void *)a1 = v9[1];
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 17) = v8;
  *(_WORD *)(a1 + 18) = 0;
  return result;
}

uint64_t sub_100241A24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100527228);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v4, &qword_100527228);
  uint64_t v5 = v12[1];
  uint64_t v6 = v12[2];
  char v7 = v13;
  char v8 = v14;
  uint64_t v9 = qword_100517FF0;
  swift_retain();
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  char v10 = byte_10055E433;
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 17) = v8;
  *(unsigned char *)(a1 + 18) = v10;
  *(unsigned char *)(a1 + 19) = 0;
  return result;
}

uint64_t sub_100241B84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100527228);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  uint64_t result = sub_10000FBD8((uint64_t)v4, &qword_100527228);
  uint64_t v6 = v8[2];
  unsigned __int8 v7 = v9;
  *(void *)a1 = v8[1];
  *(void *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = v7;
  return result;
}

double sub_100241C80@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100527228);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v4, &qword_100527228);
  v10[0] = v10[1];
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  uint64_t v7 = sub_100371C40();
  double result = *(double *)v10;
  *(_OWORD *)a1 = v10[0];
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v9;
  return result;
}

uint64_t sub_100241D88@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100527228);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  uint64_t result = sub_10000FBD8((uint64_t)v4, &qword_100527228);
  uint64_t v6 = v7[1];
  *a1 = v7[0];
  a1[1] = v6;
  return result;
}

uint64_t sub_100241E78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100527228);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v4, &qword_100527228);
  uint64_t v5 = v17;
  uint64_t v6 = v18;
  HIDWORD(v16) = v19;
  char v7 = v20;
  char v8 = v21;
  type metadata accessor for UserDefaultsUtility();
  uint64_t v9 = swift_allocObject();
  swift_retain();
  swift_retain();
  ObservationRegistrar.init()();
  id v10 = [self standardUserDefaults];
  NSString v11 = String._bridgeToObjectiveC()();
  unsigned __int8 v12 = [v10 BOOLForKey:v11];

  swift_setDeallocating();
  uint64_t v13 = v9 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
  uint64_t v14 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_deallocClassInstance();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = BYTE4(v16);
  *(unsigned char *)(a1 + 17) = v7;
  *(unsigned char *)(a1 + 18) = v8;
  *(unsigned char *)(a1 + 19) = v12;
  *(_WORD *)(a1 + 20) = 0;
  return result;
}

uint64_t sub_1002420CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v2 = sub_10000F214(&qword_1005262B8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_1005262C0);
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  char v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CVBundle(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v43 = v20;
  uint64_t v44 = v19;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v21 = v45;
  swift_getKeyPath();
  uint64_t v43 = v21;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v22 = v21 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v22, (uint64_t)v10, &qword_10051B760);
  uint64_t v23 = sub_10000F214(&qword_10051A060);
  uint64_t v24 = 1;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v10, 1, v23))
  {
    sub_1002ADE24((uint64_t)v10, (uint64_t)v13, type metadata accessor for CVBundle);
    uint64_t v24 = 0;
  }
  sub_10000FBD8((uint64_t)v10, &qword_10051B760);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v24, 1, v14);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10000FBD8((uint64_t)v13, &qword_10051B768);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v42, 1, 1, v41);
  }
  else
  {
    sub_1002AA830((uint64_t)v13, (uint64_t)v17, type metadata accessor for CVBundle);
    *(void *)uint64_t v4 = static HorizontalAlignment.center.getter();
    *((void *)v4 + 1) = 0;
    v4[16] = 1;
    uint64_t v26 = sub_10000F214(&qword_1005262D8);
    sub_10027A7E8((uint64_t)v17, 0, (uint64_t)&v4[*(int *)(v26 + 44)]);
    char v27 = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    sub_10000FB74((uint64_t)v4, (uint64_t)v7, &qword_1005262B8);
    uint64_t v36 = v41;
    uint64_t v37 = &v7[*(int *)(v41 + 36)];
    *uint64_t v37 = v27;
    *((void *)v37 + 1) = v29;
    *((void *)v37 + 2) = v31;
    *((void *)v37 + 3) = v33;
    *((void *)v37 + 4) = v35;
    v37[40] = 0;
    sub_10000FBD8((uint64_t)v4, &qword_1005262B8);
    uint64_t v38 = v42;
    sub_10000FC34((uint64_t)v7, v42, &qword_1005262C0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v38, 0, 1, v36);
    return sub_1002ADE8C((uint64_t)v17, type metadata accessor for CVBundle);
  }
}

uint64_t sub_1002425D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v2 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v2 - 8);
  uint64_t v37 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for BundleClassificationDebugOverlay();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CVBundle(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v36 = (uint64_t)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for ContentView() + 44);
  uint64_t v38 = v1;
  uint64_t v20 = (uint64_t *)(v1 + v19);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  uint64_t v45 = v22;
  uint64_t v46 = v21;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v23 = v43;
  swift_getKeyPath();
  uint64_t v45 = v23;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v24 = v23 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v24, (uint64_t)v9, &qword_10051B760);
  uint64_t v25 = sub_10000F214(&qword_10051A060);
  uint64_t v26 = 1;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v9, 1, v25))
  {
    sub_1002ADE24((uint64_t)v9, (uint64_t)v12, type metadata accessor for CVBundle);
    uint64_t v26 = 0;
  }
  sub_10000FBD8((uint64_t)v9, &qword_10051B760);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v26, 1, v13);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10000FBD8((uint64_t)v12, &qword_10051B768);
    uint64_t v27 = 1;
    uint64_t v29 = v40;
    uint64_t v28 = v41;
  }
  else
  {
    sub_1002AA830((uint64_t)v12, (uint64_t)v18, type metadata accessor for CVBundle);
    uint64_t v30 = v36;
    sub_1002ADE24((uint64_t)v18, v36, type metadata accessor for CVBundle);
    sub_10000F214(&qword_100525F50);
    uint64_t v31 = (uint64_t)v37;
    State.wrappedValue.getter();
    char v32 = *(unsigned char *)(v31 + 5);
    sub_1002ADE8C(v31, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    *uint64_t v6 = swift_getKeyPath();
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = v40;
    sub_1002AA830(v30, (uint64_t)v6 + *(int *)(v40 + 20), type metadata accessor for CVBundle);
    *((unsigned char *)v6 + *(int *)(v29 + 24)) = v32;
    uint64_t v33 = (uint64_t *)((char *)v6 + *(int *)(v29 + 28));
    uint64_t v42 = _swiftEmptyArrayStorage;
    sub_10000F214(&qword_100526A28);
    State.init(wrappedValue:)();
    uint64_t v34 = v44;
    *uint64_t v33 = v43;
    v33[1] = v34;
    sub_1002ADE8C((uint64_t)v18, type metadata accessor for CVBundle);
    uint64_t v28 = v41;
    sub_1002AA830((uint64_t)v6, v41, (uint64_t (*)(void))type metadata accessor for BundleClassificationDebugOverlay);
    uint64_t v27 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v28, v27, 1, v29);
}

uint64_t sub_100242B38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CameraErrorView();
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10000F214(&qword_100526A20);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517F58 != -1) {
    swift_once();
  }
  if (byte_10055E408 != 1) {
    goto LABEL_7;
  }
  uint64_t v10 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v23 = v12;
  uint64_t v24 = v11;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v13 = v25;
  swift_getKeyPath();
  uint64_t v23 = v13;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v14 = *(void *)(v13 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v15 = *(void *)(v13 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  int v16 = *(unsigned __int8 *)(v13 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v14, v15, *(unsigned char *)(v13 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  if (v16 != 2)
  {
    sub_1000BC2F4(v14, v15, v16);
LABEL_7:
    uint64_t v20 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, v20, 1, v6);
  }
  *uint64_t v5 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (uint64_t *)((char *)v5 + *(int *)(v3 + 20));
  *uint64_t v17 = v14;
  v17[1] = v15;
  char v18 = static Edge.Set.all.getter();
  sub_1002ADE24((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CameraErrorView);
  uint64_t v19 = &v9[*(int *)(v6 + 36)];
  *uint64_t v19 = v18;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  v19[40] = 1;
  sub_1002ADE8C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CameraErrorView);
  sub_10000FC34((uint64_t)v9, a1, &qword_100526A20);
  uint64_t v20 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, v20, 1, v6);
}

uint64_t sub_100242E44(uint64_t a1)
{
  v1[13] = a1;
  v1[14] = type metadata accessor for MainActor();
  v1[15] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[16] = v3;
  v1[17] = v2;
  return _swift_task_switch(sub_100242EE0, v3, v2);
}

uint64_t sub_100242EE0()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v3 = *v2;
  v0[18] = *v2;
  uint64_t v4 = v2[1];
  v0[19] = v4;
  v0[7] = v3;
  v0[8] = v4;
  v0[20] = sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[21] = v0[11];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[22] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100242FD4;
  return sub_100417A1C((uint64_t)(v0 + 2));
}

uint64_t sub_100242FD4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = sub_1002435FC;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = sub_100243118;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100243118()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_10000F3B0(v0 + 2, v1);
  CGImageRef v3 = sub_100398EE0(v1, v2);
  v0[23] = v3;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  if (v3)
  {
    uint64_t v4 = v0[19];
    v0[9] = v0[18];
    v0[10] = v4;
    State.wrappedValue.getter();
    v0[24] = v0[12];
    v0[25] = static MainActor.shared.getter();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    v0[26] = v6;
    v0[27] = v5;
    return _swift_task_switch(sub_10024324C, v6, v5);
  }
  else
  {
    swift_release();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7(0);
  }
}

uint64_t sub_10024324C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 192) + 16);
  *(void *)(v0 + 224) = v1;
  return _swift_task_switch(sub_100243270, v1, 0);
}

uint64_t sub_100243270()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = *(void *)(v0[28] + 112);
  CGImageRef v3 = (void *)swift_task_alloc();
  v0[29] = v3;
  void *v3 = v0;
  v3[1] = sub_100243314;
  return sub_1003460B4(v1, 1, v2);
}

uint64_t sub_100243314(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 240) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[26];
    uint64_t v6 = v4[27];
    uint64_t v7 = sub_100243518;
  }
  else
  {
    v4[31] = a1;
    uint64_t v5 = v4[26];
    uint64_t v6 = v4[27];
    uint64_t v7 = sub_10024343C;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_10024343C()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  return _swift_task_switch(sub_1002434A8, v1, v2);
}

uint64_t sub_1002434A8()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = (void *)v0[23];
  swift_release();

  CGImageRef v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v1);
}

uint64_t sub_100243518()
{
  swift_release();
  swift_errorRelease();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  return _swift_task_switch(sub_100243590, v1, v2);
}

uint64_t sub_100243590()
{
  uint64_t v1 = *(void **)(v0 + 184);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1002435FC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100243660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  sub_1002ADE24(a2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  swift_bridgeObjectRetain();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v14 = (v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v12;
  *(void *)(v15 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v7, v15 + v13, (uint64_t (*)(void))type metadata accessor for ContentView);
  *(void *)(v15 + v14) = a1;
  sub_100064D5C((uint64_t)v10, (uint64_t)&unk_100527000, v15);
  return swift_release();
}

uint64_t sub_100243858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002438F0, v7, v6);
}

uint64_t sub_1002438F0()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  swift_release();
  uint64_t v3 = type metadata accessor for ContentView();
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(v3 + 180));
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  v0[2] = v6;
  v0[3] = v5;
  v0[4] = v1;
  swift_bridgeObjectRetain();
  sub_10000F214(&qword_100523BE0);
  State.wrappedValue.setter();
  uint64_t v7 = (char *)(v2 + *(int *)(v3 + 172));
  char v8 = *v7;
  uint64_t v9 = *((void *)v7 + 1);
  *((unsigned char *)v0 + 16) = v8;
  v0[3] = v9;
  *((unsigned char *)v0 + 32) = 1;
  sub_10000F214(&qword_100526338);
  State.wrappedValue.setter();
  sub_10023E954();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1002439F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v162 = a2;
  uint64_t v3 = sub_10000F214(&qword_100526B40);
  uint64_t v163 = *(void *)(v3 - 8);
  uint64_t v164 = v3;
  __chkstk_darwin(v3);
  uint64_t v172 = (char *)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v171 = (uint64_t)&v130 - v6;
  uint64_t v7 = type metadata accessor for ContentView();
  uint64_t v158 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v159 = v8;
  uint64_t v151 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ActionBarItem(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v175 = (void (*)(char *, char *, uint64_t))((char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v130 - v13;
  uint64_t v154 = type metadata accessor for ActionBar(0);
  __chkstk_darwin(v154);
  uint64_t v152 = (uint64_t *)((char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v157 = sub_10000F214(&qword_100526B48);
  uint64_t v156 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v155 = (char *)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = sub_10000F214(&qword_100526B50);
  uint64_t v160 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v170 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v153 = (char *)&v130 - v19;
  __chkstk_darwin(v20);
  unint64_t v169 = (char *)&v130 - v21;
  uint64_t v141 = sub_10000F214(&qword_100526B58);
  uint64_t v139 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v133 = (char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_10000F214(&qword_100526B60);
  __chkstk_darwin(v138);
  uint64_t v136 = (char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_10000F214(&qword_100526B68);
  uint64_t v140 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v134 = (char *)&v130 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_10000F214(&qword_100526B70);
  __chkstk_darwin(v137);
  int v135 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_10000F214(&qword_100526B78);
  uint64_t v144 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v132 = (char *)&v130 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v27 - 8);
  uint64_t v146 = (char *)&v130 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000F214(&qword_100526B80);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v165 = v29;
  uint64_t v166 = v30;
  __chkstk_darwin(v29);
  uint64_t v143 = (uint64_t)&v130 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for ResultLookupState();
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v131 = (uint64_t)&v130 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v33 - 8);
  uint64_t v147 = (char *)&v130 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v35 - 8);
  uint64_t v37 = (char *)&v130 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v38 - 8);
  uint64_t v40 = (char *)&v130 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for CVBundle(0);
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v150 = (uint64_t)&v130 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000F214(&qword_100526B88);
  __chkstk_darwin(v44 - 8);
  uint64_t v168 = (uint64_t)&v130 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  uint64_t v173 = v7;
  uint64_t v174 = (uint64_t)&v130 - v47;
  uint64_t v48 = *(int *)(v7 + 44);
  uint64_t v167 = a1;
  uint64_t v49 = (int **)(a1 + v48);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  uint64_t v179 = v51;
  uint64_t v180 = v50;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v52 = v176;
  swift_getKeyPath();
  uint64_t v179 = v52;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v53 = (uint64_t)v52 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v53, (uint64_t)v37, &qword_10051B760);
  uint64_t v54 = sub_10000F214(&qword_10051A060);
  uint64_t v55 = 1;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v37, 1, v54))
  {
    sub_1002ADE24((uint64_t)v37, (uint64_t)v40, type metadata accessor for CVBundle);
    uint64_t v55 = 0;
  }
  sub_10000FBD8((uint64_t)v37, &qword_10051B760);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v40, v55, 1, v41);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) == 1)
  {
    sub_10000FBD8((uint64_t)v40, &qword_10051B768);
    uint64_t v56 = v167;
LABEL_5:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v166 + 56))(v174, 1, 1, v165);
    goto LABEL_14;
  }
  uint64_t v57 = v150;
  sub_1002AA830((uint64_t)v40, v150, type metadata accessor for CVBundle);
  uint64_t v56 = v167;
  sub_10000F214(&qword_100525F58);
  uint64_t v58 = (uint64_t)v147;
  State.wrappedValue.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v58, 1, v149))
  {
    sub_10000FBD8(v58, &qword_10051A308);
  }
  else
  {
    uint64_t v59 = v131;
    sub_1002ADE24(v58, v131, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    sub_10000FBD8(v58, &qword_10051A308);
    char v60 = sub_100318D58();
    sub_1002ADE8C(v59, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    if (v60)
    {
      sub_1002ADE8C(v57, type metadata accessor for CVBundle);
      goto LABEL_5;
    }
  }
  sub_10000F214(&qword_100525F50);
  uint64_t v61 = (uint64_t)v146;
  State.wrappedValue.getter();
  int v62 = *(unsigned __int8 *)(v61 + 1);
  uint64_t v63 = sub_1002ADE8C(v61, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  if (v62 == 1)
  {
    __chkstk_darwin(v63);
    *(&v130 - 2) = v57;
    uint64_t v64 = v133;
    Label.init(title:icon:)();
    uint64_t v65 = static Font.subheadline.getter();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v67 = v139;
    uint64_t v68 = (uint64_t)v136;
    uint64_t v69 = v141;
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v136, v64, v141);
    char v70 = (uint64_t *)(v68 + *(int *)(v138 + 36));
    *char v70 = KeyPath;
    v70[1] = v65;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v69);
    static Font.Weight.semibold.getter();
    sub_1002AAB58();
    uint64_t v71 = v134;
    View.fontWeight(_:)();
    sub_10000FBD8(v68, &qword_100526B60);
    uint64_t v72 = v140;
    uint64_t v73 = (uint64_t)v135;
    uint64_t v74 = v142;
    (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v135, v71, v142);
    *(unsigned char *)(v73 + *(int *)(v137 + 36)) = 0;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v74);
    sub_1002AAC1C();
    char v75 = v132;
    uint64_t v57 = v150;
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8(v73, &qword_100526B70);
    uint64_t v76 = (uint64_t)v75;
    uint64_t v77 = v143;
    sub_10000FC34(v76, v143, &qword_100526B78);
    uint64_t v78 = 0;
    uint64_t v79 = v165;
    uint64_t v80 = v145;
    uint64_t v81 = v144;
  }
  else
  {
    uint64_t v78 = 1;
    uint64_t v79 = v165;
    uint64_t v80 = v145;
    uint64_t v81 = v144;
    uint64_t v77 = v143;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v77, v78, 1, v80);
  uint64_t v82 = v77;
  uint64_t v83 = v174;
  sub_10000FC34(v82, v174, &qword_100526B80);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v166 + 56))(v83, 0, 1, v79);
  sub_1002ADE8C(v57, type metadata accessor for CVBundle);
LABEL_14:
  char v84 = sub_1002451C4();
  int v85 = (int **)(v56 + *(int *)(v173 + 184));
  uint64_t v87 = *v85;
  uint64_t v86 = (uint64_t)v85[1];
  if (v84)
  {
    uint64_t v176 = v87;
    uint64_t v177 = v86;
    sub_10000F214(&qword_100523BE0);
    State.wrappedValue.getter();
    char v88 = (void *)v178;
    uint64_t v89 = (uint64_t)v151;
LABEL_29:
    uint64_t v98 = swift_getKeyPath();
    uint64_t v99 = (uint64_t)v152;
    *uint64_t v152 = v98;
    sub_10000F214(&qword_10051BB48);
    swift_storeEnumTagMultiPayload();
    uint64_t v100 = (int *)v154;
    uint64_t v101 = v99 + *(int *)(v154 + 20);
    type metadata accessor for SessionAnalytics();
    sub_1002AB13C(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
    *(void *)uint64_t v101 = Environment.init<A>(_:)();
    *(unsigned char *)(v101 + 8) = v102 & 1;
    uint64_t v103 = (int **)(v99 + v100[6]);
    unint64_t v178 = sub_100331120((uint64_t)_swiftEmptyArrayStorage);
    sub_10000F214(&qword_100526B90);
    State.init(wrappedValue:)();
    uint64_t v104 = v177;
    id *v103 = v176;
    v103[1] = (int *)v104;
    uint64_t v105 = v99 + v100[7];
    LOBYTE(v178) = 0;
    State.init(wrappedValue:)();
    uint64_t v106 = v177;
    *(unsigned char *)uint64_t v105 = (_BYTE)v176;
    *(void *)(v105 + 8) = v106;
    *(void *)(v99 + v100[8]) = v88;
    uint64_t v107 = v173;
    sub_10000F214(&qword_100519A10);
    AccessibilityFocusState.projectedValue.getter();
    uint64_t v108 = sub_1002AB13C(&qword_100526B98, (void (*)(uint64_t))type metadata accessor for ActionBar);
    uint64_t v109 = v155;
    View.accessibilityFocused(_:)();
    swift_release();
    swift_release();
    sub_1002ADE8C(v99, type metadata accessor for ActionBar);
    uint64_t v110 = *(void *)(v56 + *(int *)(v107 + 240));
    swift_getKeyPath();
    uint64_t v176 = (int *)v110;
    sub_1002AB13C(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v178) = *(unsigned char *)(v110 + 24);
    sub_1002ADE24(v56, v89, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v111 = (*(unsigned __int8 *)(v158 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80);
    uint64_t v112 = swift_allocObject();
    sub_1002AA830(v89, v112 + v111, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v176 = v100;
    uint64_t v177 = v108;
    swift_getOpaqueTypeConformance2();
    uint64_t v113 = v153;
    uint64_t v114 = v157;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v156 + 8))(v109, v114);
    uint64_t v115 = v160;
    uint64_t v116 = v169;
    uint64_t v117 = v161;
    (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v169, v113, v161);
    uint64_t v118 = v171;
    sub_1002456D0(v171);
    uint64_t v119 = v168;
    sub_10000FB74(v174, v168, &qword_100526B88);
    uint64_t v175 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
    uint64_t v120 = v170;
    v175(v170, v116, v117);
    uint64_t v121 = v163;
    uint64_t v122 = v164;
    char v123 = *(void (**)(char *, uint64_t, uint64_t))(v163 + 16);
    v123(v172, v118, v164);
    uint64_t v124 = v162;
    sub_10000FB74(v119, v162, &qword_100526B88);
    uint64_t v125 = (int *)sub_10000F214(&qword_100526BA0);
    uint64_t v126 = v124 + v125[12];
    *(void *)uint64_t v126 = 0;
    *(unsigned char *)(v126 + 8) = 1;
    v175((char *)(v124 + v125[16]), v120, v117);
    uint64_t v127 = v172;
    v123((char *)(v124 + v125[20]), (uint64_t)v172, v122);
    int v128 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
    v128(v171, v122);
    BOOL v129 = *(void (**)(char *, uint64_t))(v115 + 8);
    v129(v169, v117);
    sub_10000FBD8(v174, &qword_100526B88);
    v128((uint64_t)v127, v122);
    v129(v170, v117);
    return sub_10000FBD8(v168, &qword_100526B88);
  }
  uint64_t v176 = v87;
  uint64_t v177 = v86;
  sub_10000F214(&qword_100523BE0);
  uint64_t result = State.wrappedValue.getter();
  unint64_t v91 = v178;
  char v88 = _swiftEmptyArrayStorage;
  uint64_t v176 = (int *)_swiftEmptyArrayStorage;
  uint64_t v92 = *(void *)(v178 + 16);
  if (!v92)
  {
LABEL_28:
    uint64_t v89 = (uint64_t)v151;
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  unint64_t v93 = 0;
  while (v93 < *(void *)(v91 + 16))
  {
    unint64_t v94 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v95 = *(void *)(v10 + 72);
    sub_1002ADE24(v91 + v94 + v95 * v93, (uint64_t)v14, type metadata accessor for ActionBarItem);
    if (v14[57] == 1)
    {
      sub_1002AA830((uint64_t)v14, (uint64_t)v175, type metadata accessor for ActionBarItem);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100040BC0(0, v88[2] + 1, 1);
      }
      char v88 = v176;
      unint64_t v97 = *((void *)v176 + 2);
      unint64_t v96 = *((void *)v176 + 3);
      if (v97 >= v96 >> 1)
      {
        sub_100040BC0(v96 > 1, v97 + 1, 1);
        char v88 = v176;
      }
      v88[2] = v97 + 1;
      uint64_t result = sub_1002AA830((uint64_t)v175, (uint64_t)v88 + v94 + v97 * v95, type metadata accessor for ActionBarItem);
    }
    else
    {
      uint64_t result = sub_1002ADE8C((uint64_t)v14, type metadata accessor for ActionBarItem);
    }
    if (v92 == ++v93)
    {
      char v88 = v176;
      uint64_t v56 = v167;
      goto LABEL_28;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100244FD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CVDetection();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10019D408((uint64_t)v8);
  sub_1003FEC34(&v22);
  uint64_t v9 = v24;
  uint64_t v10 = v25;
  sub_10000F3B0(&v22, v24);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 72))(v9, v10);
  uint64_t v13 = v12;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v22);
  sub_1002ADE8C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v22 = v11;
  uint64_t v23 = v13;
  static CharacterSet.whitespacesAndNewlines.getter();
  sub_1000317A0();
  uint64_t v14 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  uint64_t v22 = v14;
  uint64_t v23 = v16;
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 16) = v19 & 1;
  *(void *)(a1 + 24) = v20;
  return result;
}

uint64_t sub_1002451C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100261F7C()) {
    return 0;
  }
  uint64_t v15 = (int *)type metadata accessor for ContentView();
  uint64_t v16 = (uint64_t *)(v0 + v15[44]);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v38 = v18;
  uint64_t v39 = v17;
  sub_10000F214(&qword_100523BE0);
  State.wrappedValue.getter();
  uint64_t v19 = *(void *)(v40 + 16);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    uint64_t v20 = (char *)(v1 + v15[39]);
    char v21 = *v20;
    uint64_t v22 = *((void *)v20 + 1);
    LOBYTE(v38) = v21;
    uint64_t v39 = v22;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.getter();
    if (v40) {
      return 0;
    }
    sub_10000F214(&qword_100525F58);
    State.wrappedValue.getter();
    uint64_t v23 = type metadata accessor for ResultLookupState();
    int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v13, 1, v23);
    sub_10000FBD8((uint64_t)v13, &qword_10051A308);
    if (v24 != 1) {
      return 0;
    }
    uint64_t v25 = (char *)(v1 + v15[19]);
    char v26 = *v25;
    uint64_t v27 = *((void *)v25 + 1);
    LOBYTE(v38) = v26;
    uint64_t v39 = v27;
    State.wrappedValue.getter();
    if (v40) {
      return 0;
    }
    uint64_t v28 = (char *)(v1 + v15[33]);
    char v29 = *v28;
    uint64_t v30 = *((void *)v28 + 1);
    LOBYTE(v38) = v29;
    uint64_t v39 = v30;
    State.wrappedValue.getter();
    if ((v40 & 1) == 0)
    {
      uint64_t v31 = (uint64_t *)(v1 + v15[11]);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      uint64_t v38 = v33;
      uint64_t v39 = v32;
      sub_10000F214(&qword_100525F40);
      State.wrappedValue.getter();
      uint64_t v34 = v40;
      swift_getKeyPath();
      uint64_t v38 = v34;
      sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v35 = v34 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
      swift_beginAccess();
      sub_10000FB74(v35, (uint64_t)v4, &qword_10051B760);
      uint64_t v36 = sub_10000F214(&qword_10051A060);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v4, 1, v36))
      {
        sub_10000FBD8((uint64_t)v4, &qword_10051B760);
        uint64_t v37 = type metadata accessor for CVBundle(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v10, 1, 1, v37);
      }
      else
      {
        sub_1002ADE24((uint64_t)v4, (uint64_t)v10, type metadata accessor for CVBundle);
        sub_10000FBD8((uint64_t)v4, &qword_10051B760);
        uint64_t v37 = type metadata accessor for CVBundle(0);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v10, 0, 1, v37);
      }
      swift_release();
      sub_10000FB74((uint64_t)v10, (uint64_t)v7, &qword_10051B768);
      type metadata accessor for CVBundle(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v7, 1, v37) == 1)
      {
        sub_10000FBD8((uint64_t)v7, &qword_10051B768);
      }
      else
      {
        sub_1001A365C();
        swift_bridgeObjectRelease();
        sub_1002ADE8C((uint64_t)v7, type metadata accessor for CVBundle);
      }
      sub_10000FBD8((uint64_t)v10, &qword_10051B768);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1002456D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v77 = a1;
  uint64_t v3 = type metadata accessor for ContentView();
  uint64_t v4 = v3 - 8;
  uint64_t v80 = *(void *)(v3 - 8);
  uint64_t v79 = *(void *)(v80 + 64);
  __chkstk_darwin(v3);
  uint64_t v74 = (uint64_t)v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v83 = (uint64_t)v68 - v7;
  uint64_t v8 = sub_10000F214(&qword_100526BC0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100526BC8);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000F214(&qword_100526BD0);
  __chkstk_darwin(v72);
  uint64_t v16 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000F214(&qword_100526BD8);
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v18 = (char *)v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000F214(&qword_100526BE0);
  __chkstk_darwin(v70);
  uint64_t v82 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_100526BE8);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v75 = v20;
  uint64_t v76 = v21;
  __chkstk_darwin(v20);
  int v85 = (char *)v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = static HorizontalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  unsigned char v10[16] = 0;
  uint64_t v23 = sub_10000F214(&qword_100526BF0);
  sub_10024EBD8(v1, (uint64_t)&v10[*(int *)(v23 + 44)]);
  uint64_t v24 = static Animation.spring(response:dampingFraction:blendDuration:)();
  uint64_t v25 = v1 + *(int *)(v4 + 84);
  char v26 = *(unsigned char *)v25;
  uint64_t v27 = *(void *)(v25 + 8);
  LOBYTE(v86) = v26;
  uint64_t v87 = v27;
  uint64_t v84 = sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  char v28 = v90;
  sub_10000FB74((uint64_t)v10, (uint64_t)v14, &qword_100526BC0);
  char v29 = &v14[*(int *)(v12 + 44)];
  *(void *)char v29 = v24;
  v29[8] = v28;
  sub_10000FBD8((uint64_t)v10, &qword_100526BC0);
  uint64_t v30 = static Alignment.center.getter();
  sub_10022576C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v30, v31, &qword_100526BC8, &qword_100526BD0);
  sub_10000FBD8((uint64_t)v14, &qword_100526BC8);
  uint64_t v32 = v4;
  uint64_t v69 = v4;
  uint64_t v33 = v2 + *(int *)(v4 + 80);
  char v34 = *(unsigned char *)v33;
  uint64_t v35 = *(void *)(v33 + 8);
  LOBYTE(v33) = *(unsigned char *)(v33 + 16);
  LOBYTE(v86) = v34;
  uint64_t v87 = v35;
  LOBYTE(v88) = v33;
  sub_10000F214(&qword_100526678);
  FocusState.wrappedValue.getter();
  LOBYTE(v86) = v90;
  uint64_t v81 = type metadata accessor for ContentView;
  uint64_t v36 = v83;
  sub_1002ADE24(v2, v83, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v37 = *(unsigned __int8 *)(v80 + 80);
  uint64_t v38 = ((v37 + 16) & ~v37) + v79;
  uint64_t v39 = (v37 + 16) & ~v37;
  uint64_t v79 = v37 | 7;
  uint64_t v80 = v39;
  uint64_t v40 = swift_allocObject();
  uint64_t v78 = type metadata accessor for ContentView;
  uint64_t v41 = v36;
  sub_1002AA830(v36, v40 + v39, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_10028E890(&qword_100526BF8, &qword_100526BD0, (void (*)(void))sub_1002AAD7C);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10000FBD8((uint64_t)v16, &qword_100526BD0);
  uint64_t v42 = v71;
  uint64_t v43 = v82;
  uint64_t v44 = v73;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v82, v18, v73);
  uint64_t v45 = v70;
  uint64_t v46 = &v43[*(int *)(v70 + 36)];
  *(void *)uint64_t v46 = 0x6C61626F6C67;
  *((void *)v46 + 1) = 0xE600000000000000;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v44);
  uint64_t v47 = v2 + *(int *)(v32 + 88);
  char v48 = *(unsigned char *)v47;
  uint64_t v49 = *(void *)(v47 + 8);
  char v90 = v48;
  uint64_t v91 = v49;
  State.projectedValue.getter();
  uint64_t v72 = v86;
  LODWORD(v73) = v88;
  uint64_t v50 = v81;
  sub_1002ADE24(v2, v41, (uint64_t (*)(void))v81);
  v68[1] = v38;
  uint64_t v51 = swift_allocObject();
  uint64_t v52 = v80;
  uint64_t v53 = v78;
  sub_1002AA830(v41, v51 + v80, (uint64_t (*)(void))v78);
  uint64_t v54 = v74;
  sub_1002ADE24(v2, v74, (uint64_t (*)(void))v50);
  uint64_t v55 = swift_allocObject();
  sub_1002AA830(v54, v55 + v52, (uint64_t (*)(void))v53);
  uint64_t v56 = sub_10000F214(&qword_100526C10);
  unint64_t v57 = sub_1002AAEFC();
  unint64_t v58 = sub_1002AB018();
  uint64_t v59 = (uint64_t)v82;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000FBD8(v59, &qword_100526BE0);
  uint64_t v60 = v2 + *(int *)(v69 + 92);
  char v61 = *(unsigned char *)v60;
  uint64_t v62 = *(void *)(v60 + 8);
  char v90 = v61;
  uint64_t v91 = v62;
  State.projectedValue.getter();
  uint64_t v63 = v83;
  sub_1002ADE24(v2, v83, (uint64_t (*)(void))v81);
  uint64_t v64 = swift_allocObject();
  sub_1002AA830(v63, v64 + v80, (uint64_t (*)(void))v78);
  uint64_t v86 = v45;
  uint64_t v87 = v56;
  unint64_t v88 = v57;
  unint64_t v89 = v58;
  swift_getOpaqueTypeConformance2();
  sub_1000EE6C4();
  uint64_t v65 = v75;
  uint64_t v66 = v85;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v66, v65);
}

uint64_t sub_100245F80()
{
  uint64_t v1 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v18[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t v19 = v9;
  uint64_t v20 = v8;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v10 = v21;
  swift_getKeyPath();
  uint64_t v19 = v10;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v11 = v10 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v11, (uint64_t)v3, &qword_10051B760);
  uint64_t v12 = sub_10000F214(&qword_10051A060);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v3, 1, v12))
  {
    sub_10000FBD8((uint64_t)v3, &qword_10051B760);
    uint64_t v13 = type metadata accessor for CVBundle(0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  }
  else
  {
    sub_1002ADE24((uint64_t)v3, (uint64_t)v6, type metadata accessor for CVBundle);
    sub_10000FBD8((uint64_t)v3, &qword_10051B760);
    uint64_t v13 = type metadata accessor for CVBundle(0);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 0, 1, v13);
  }
  swift_release();
  type metadata accessor for CVBundle(0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v6, 1, v13) == 1)
  {
    sub_10000FBD8((uint64_t)v6, &qword_10051B768);
    return 0;
  }
  else
  {
    uint64_t v15 = sub_1001A365C();
    __chkstk_darwin(v15);
    *(void *)&v18[-16] = v6;
    uint64_t v14 = sub_1001C1D38((uint64_t)sub_1002A83B0, (uint64_t)&v18[-32], v16);
    sub_1002ADE8C((uint64_t)v6, type metadata accessor for CVBundle);
  }
  return v14;
}

uint64_t sub_1002462EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v3 = type metadata accessor for ContentView();
  uint64_t v4 = v3 - 8;
  uint64_t v55 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v55 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v54 = sub_10000F214(&qword_100526A50);
  __chkstk_darwin(v54);
  uint64_t v9 = (void *)((char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v57 = (uint64_t)v45 - v11;
  uint64_t v12 = sub_10000F214(&qword_100526A58);
  uint64_t v58 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v56 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100526A60);
  __chkstk_darwin(v14 - 8);
  uint64_t v59 = (uint64_t)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v45 - v17;
  uint64_t v19 = a1 + *(int *)(v4 + 208);
  char v20 = *(unsigned char *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  char v61 = v20;
  uint64_t v62 = v21;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  uint64_t v22 = 1;
  if (v63 == 1)
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v23 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v25 = v24;
    *uint64_t v9 = swift_getKeyPath();
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = v54;
    uint64_t v27 = (uint64_t *)((char *)v9 + *(int *)(v54 + 52));
    *uint64_t v27 = v23;
    v27[1] = v25;
    v45[3] = (char *)v9 + *(int *)(v26 + 56);
    uint64_t v51 = v9;
    int8x16_t v45[2] = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v53 = v12;
    v45[1] = v28;
    char v29 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v52 = v18;
    uint64_t v49 = type metadata accessor for ContentView;
    uint64_t v50 = a1;
    sub_1002ADE24(a1, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v30 = *(unsigned __int8 *)(v55 + 80);
    uint64_t v31 = (v30 + 16) & ~v30;
    uint64_t v46 = v31;
    uint64_t v47 = v30 | 7;
    uint64_t v55 = v31 + v5;
    uint64_t v32 = swift_allocObject();
    char v48 = type metadata accessor for ContentView;
    sub_1002AA830((uint64_t)v29, v32 + v31, (uint64_t (*)(void))type metadata accessor for ContentView);
    Button<>.init(_:action:)();
    uint64_t v33 = (char *)v9 + *(int *)(v26 + 60);
    uint64_t v54 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v18 = v52;
    sub_1002ADE24(a1, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v46;
    sub_1002AA830((uint64_t)v29, v34 + v46, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v12 = v53;
    Button<>.init(_:action:)();
    uint64_t v36 = sub_10000F214(&qword_10051EB90);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v33, 0, 1, v36);
    uint64_t v37 = v57;
    sub_10000FC34((uint64_t)v51, v57, &qword_100526A50);
    sub_1002ADE24(v50, (uint64_t)v29, (uint64_t (*)(void))v49);
    uint64_t v38 = swift_allocObject();
    sub_1002AA830((uint64_t)v29, v38 + v35, (uint64_t (*)(void))v48);
    uint64_t v39 = (uint64_t)v56;
    uint64_t v40 = (uint64_t)&v56[*(int *)(v12 + 36)];
    swift_retain();
    sub_10008E040(1, 1, (uint64_t)sub_1002AA3DC, v38, v40);
    sub_10000FB74(v37, v39, &qword_100526A50);
    swift_release();
    sub_10000FBD8(v37, &qword_100526A50);
    sub_10000FC34(v39, (uint64_t)v18, &qword_100526A58);
    uint64_t v22 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v18, v22, 1, v12);
  uint64_t v41 = v59;
  sub_10000FB74((uint64_t)v18, v59, &qword_100526A60);
  uint64_t v42 = v60;
  sub_10000FB74(v41, v60, &qword_100526A60);
  uint64_t v43 = v42 + *(int *)(sub_10000F214(&qword_100526A68) + 48);
  *(void *)uint64_t v43 = 0;
  *(unsigned char *)(v43 + 8) = 1;
  sub_10000FBD8((uint64_t)v18, &qword_100526A60);
  return sub_10000FBD8(v41, &qword_100526A60);
}

uint64_t sub_1002469A8(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000F378(v9, (uint64_t)qword_10055E2E0);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Location access button was tapped", v12, 2u);
    swift_slowDealloc();
  }

  URL.init(string:)();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FBD8((uint64_t)v4, &qword_10051E070);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v13 = *(void *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 72);
    char v15 = *(unsigned char *)(a1 + 80);
    sub_10000FCA0();
    uint64_t v16 = (void (*)(unsigned char *, char *))sub_10027C858(v13, v14, v15);
    sub_10000FD10();
    v24[0] = 1;
    v16(v8, v24);
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
  id v17 = [self standardUserDefaults];
  NSString v18 = String._bridgeToObjectiveC()();
  [v17 setBool:1 forKey:v18];

  uint64_t v19 = a1 + *(int *)(type metadata accessor for ContentView() + 200);
  char v20 = *(unsigned char *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  v24[0] = v20;
  uint64_t v25 = v21;
  v23[15] = 0;
  sub_10000F214(&qword_100522EA0);
  return State.wrappedValue.setter();
}

void sub_100246D08()
{
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setBool:1 forKey:v1];
}

void sub_100246DD4()
{
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setBool:1 forKey:v1];
}

uint64_t sub_100246EA0()
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000F378(v0, (uint64_t)qword_10055E2E0);
  NSString v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Resetting look up states due to a tap outside of an in-progress or finished result.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = sub_100246FEC();
  __chkstk_darwin(v4);
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

void *sub_100246FEC()
{
  uint64_t v0 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v0 - 8);
  os_log_type_t v2 = (char *)v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  uint64_t v3 = type metadata accessor for ResultLookupState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1) {
    return (void *)sub_10000FBD8((uint64_t)v2, &qword_10051A308);
  }
  if (swift_getEnumCaseMultiPayload() != 3) {
    return (void *)sub_1002ADE8C((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  }
  uint64_t v6 = *(void **)v2;
  uint64_t v5 = (void *)*((void *)v2 + 1);
  uint64_t v8 = *((void *)v2 + 2);
  unint64_t v7 = *((void *)v2 + 3);
  uint64_t v9 = *((void *)v2 + 5);
  uint64_t v10 = *((void *)v2 + 7);
  if (v7 >> 62 != 2) {
    return sub_10004FF38(*(void **)v2, *((void **)v2 + 1), *((void *)v2 + 2), *((void *)v2 + 3));
  }
  sub_1000506C4(*(id *)v2, *((void **)v2 + 1), *((void *)v2 + 2), *((void *)v2 + 3));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10004FFD4(v6, v5, v8, v7);
  if (*(void *)(v9 + 16) == 1)
  {
    long long v11 = *(_OWORD *)(v9 + 128);
    v18[5] = *(_OWORD *)(v9 + 112);
    v18[6] = v11;
    v18[7] = *(_OWORD *)(v9 + 144);
    uint64_t v19 = *(void *)(v9 + 160);
    long long v12 = *(_OWORD *)(v9 + 48);
    long long v13 = *(_OWORD *)(v9 + 80);
    long long v14 = *(_OWORD *)(v9 + 96);
    v18[2] = *(_OWORD *)(v9 + 64);
    v18[3] = v13;
    v18[4] = v14;
    v18[0] = *(_OWORD *)(v9 + 32);
    v18[1] = v12;
    sub_1001817B4((uint64_t)v18);
    swift_bridgeObjectRelease();
    v17[1] = [*((id *)&v18[0] + 1) muid];
    v17[0] = v10;
    dispatch thunk of CustomStringConvertible.description.getter();
    char v15 = self;
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 captureUserAction:47 target:145 value:v16];

    sub_10004FF38(v6, v5, v8, v7);
    return (void *)sub_10017FF68((uint64_t)v18);
  }
  else
  {
    sub_10041B604(v9);
    sub_10004FF38(v6, v5, v8, v7);
    return (void *)swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002472E0()
{
  uint64_t v0 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v0 - 8);
  os_log_type_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ResultLookupState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return sub_1002297C8((uint64_t)v2);
}

uint64_t sub_1002473A4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100247414@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v2);
  uint64_t v29 = type metadata accessor for MagnifyGesture();
  uint64_t v6 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000F214(&qword_100527038);
  __chkstk_darwin(v31);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MagnifyGesture.init(minimumScaleDelta:)();
  uint64_t v11 = *(int *)(v3 + 132);
  uint64_t v28 = v1;
  long long v12 = (uint64_t *)(v1 + v11);
  uint64_t v13 = v12[1];
  uint64_t v32 = *v12;
  uint64_t v33 = v13;
  long long v34 = *((_OWORD *)v12 + 1);
  sub_10000F214(&qword_100527040);
  GestureState.projectedValue.getter();
  uint64_t v14 = v35;
  uint64_t v27 = v36;
  long long v26 = v37;
  uint64_t v25 = (uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002ADE24(v1, v25, (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = swift_allocObject();
  sub_1002AA830((uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v17 = v29;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v10, v8, v29);
  uint64_t v18 = v31;
  uint64_t v19 = &v10[*(int *)(v31 + 44)];
  *(void *)uint64_t v19 = v14;
  *((void *)v19 + 1) = v27;
  *((_OWORD *)v19 + 1) = v26;
  char v20 = &v10[*(int *)(v18 + 48)];
  *(void *)char v20 = sub_1002AFA30;
  *((void *)v20 + 1) = v16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  uint64_t v21 = v25;
  sub_1002ADE24(v28, v25, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v22 = swift_allocObject();
  sub_1002AA830(v21, v22 + v15, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_100013AA8(&qword_100527048, &qword_100527038);
  Gesture.onEnded(_:)();
  swift_release();
  return sub_10000FBD8((uint64_t)v10, &qword_100527038);
}

uint64_t sub_100247798(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessibilityAdjustmentDirection();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, a1, v11, v13);
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v15, v11);
  if (v16 == enum case for AccessibilityAdjustmentDirection.increment(_:))
  {
    uint64_t v17 = (uint64_t *)(a2 + *(int *)(v4 + 128));
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v34 = *v17;
    uint64_t v35 = v19;
    sub_10000F214(&qword_10051D2F0);
    State.wrappedValue.getter();
    double v20 = v36 + 0.1;
    if (v36 + 0.1 > 1.5) {
      double v20 = 1.5;
    }
  }
  else
  {
    if (v16 != enum case for AccessibilityAdjustmentDirection.decrement(_:))
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      goto LABEL_10;
    }
    uint64_t v21 = (uint64_t *)(a2 + *(int *)(v4 + 128));
    uint64_t v18 = *v21;
    uint64_t v19 = v21[1];
    uint64_t v34 = *v21;
    uint64_t v35 = v19;
    sub_10000F214(&qword_10051D2F0);
    State.wrappedValue.getter();
    double v20 = v36 + -0.1;
    if (v36 + -0.1 <= 0.5) {
      double v20 = 0.5;
    }
  }
  uint64_t v34 = v18;
  uint64_t v35 = v19;
  double v36 = v20;
  State.wrappedValue.setter();
LABEL_10:
  uint64_t v22 = (uint64_t *)(a2 + *(int *)(v4 + 128));
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  uint64_t v34 = v23;
  uint64_t v35 = v24;
  sub_10000F214(&qword_10051D2F0);
  State.wrappedValue.getter();
  double v25 = v36;
  uint64_t v26 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v10, 1, 1, v26);
  sub_1002ADE24(a2, (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v27 = static MainActor.shared.getter();
  unint64_t v28 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v29 = (v6 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v7, v30 + v28, (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v31 = v30 + v29;
  *(double *)unint64_t v31 = v25;
  *(unsigned char *)(v31 + 8) = 0;
  sub_100064D5C((uint64_t)v10, (uint64_t)&unk_100527030, v30);
  return swift_release();
}

uint64_t sub_100247B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 220) = a6;
  *(void *)(v6 + 64) = a4;
  *(void *)(v6 + 72) = a5;
  *(void *)(v6 + 80) = type metadata accessor for MainActor();
  *(void *)(v6 + 88) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v6 + 96) = v8;
  *(void *)(v6 + 104) = v7;
  return _swift_task_switch(sub_100247C34, v8, v7);
}

uint64_t sub_100247C34()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(int *)(type metadata accessor for ContentView() + 44);
  *(_DWORD *)(v0 + 216) = v2;
  uint64_t v3 = (uint64_t *)(v1 + v2);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *(void *)(v0 + 16) = v5;
  *(void *)(v0 + 24) = v4;
  *(void *)(v0 + 112) = sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  *(void *)(v0 + 120) = *(void *)(v0 + 48);
  *(void *)(v0 + 128) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v0 + 136) = v7;
  *(void *)(v0 + 144) = v6;
  return _swift_task_switch(sub_100247D14, v7, v6);
}

uint64_t sub_100247D14()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 120) + 16);
  *(void *)(v0 + 152) = v1;
  return _swift_task_switch(sub_100247D38, v1, 0);
}

uint64_t sub_100247D38()
{
  char v1 = *(unsigned char *)(v0 + 220);
  uint64_t v2 = *(void *)(*(void *)(v0 + 152) + 112);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v3;
  void *v3 = v0;
  v3[1] = sub_100247DE0;
  uint64_t v4 = *(void *)(v0 + 72);
  return sub_100346BE4(v4, v1 & 1, v2);
}

uint64_t sub_100247DE0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 136);
  return _swift_task_switch(sub_100247F00, v3, v2);
}

uint64_t sub_100247F00()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  return _swift_task_switch(sub_100247F6C, v1, v2);
}

uint64_t sub_100247F6C()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 64) + *(int *)(v0 + 216));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v2;
  State.wrappedValue.getter();
  *(void *)(v0 + 168) = *(void *)(v0 + 56);
  *(void *)(v0 + 176) = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v0 + 184) = v5;
  *(void *)(v0 + 192) = v4;
  return _swift_task_switch(sub_100248028, v5, v4);
}

uint64_t sub_100248028()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 168) + 16);
  *(void *)(v0 + 200) = v1;
  return _swift_task_switch(sub_10024804C, v1, 0);
}

uint64_t sub_10024804C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 200) + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002480EC;
  return sub_100346BE4(0, 1, v1);
}

uint64_t sub_1002480EC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 192);
  uint64_t v3 = *(void *)(v1 + 184);
  return _swift_task_switch(sub_10024820C, v3, v2);
}

uint64_t sub_10024820C()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  return _swift_task_switch(sub_100248278, v1, v2);
}

uint64_t sub_100248278()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002482D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_1005266A8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v64 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v63 = (uint64_t)&v54 - v11;
  uint64_t v12 = sub_10000F214(&qword_1005266B0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v54 - v16;
  uint64_t v18 = (int *)type metadata accessor for ContentView();
  uint64_t v19 = (char *)(a1 + v18[40]);
  char v20 = *v19;
  uint64_t v21 = (unsigned __int8 *)*((void *)v19 + 1);
  LOBYTE(v65) = v20;
  uint64_t v66 = v21;
  sub_10000F214(&qword_1005262F8);
  State.wrappedValue.getter();
  if (v69 == 2)
  {
    uint64_t v59 = v7;
    uint64_t v60 = v6;
    uint64_t v62 = a2;
    uint64_t v22 = (unsigned __int8 **)(a1 + v18[25]);
    uint64_t v23 = *v22;
    int v24 = *((unsigned __int8 *)v22 + 16);
    double v25 = v22[3];
    uint64_t v57 = v22[1];
    uint64_t v58 = v23;
    uint64_t v65 = v23;
    uint64_t v66 = v57;
    int v56 = v24;
    LOBYTE(v67) = v24;
    uint64_t v68 = v25;
    sub_10000F214(&qword_100526428);
    State.wrappedValue.getter();
    uint64_t v26 = v69;
    uint64_t v55 = v70;
    char v27 = v71;
    uint64_t v61 = v4;
    if (v71 && v71 != 1)
    {
      switch((unint64_t)v69)
      {
        case 1uLL:
          if (qword_100517DA0 != -1) {
            swift_once();
          }
          unint64_t v28 = (void *)qword_10055E0C0;
          break;
        case 2uLL:
          if (qword_100517DA8 != -1) {
            swift_once();
          }
          unint64_t v28 = (void *)qword_10055E0C8;
          break;
        case 3uLL:
          if (qword_100517DB0 != -1) {
            swift_once();
          }
          unint64_t v28 = (void *)qword_10055E0D0;
          break;
        default:
          if (qword_100517D98 != -1) {
            swift_once();
          }
          unint64_t v28 = (void *)qword_10055E0B8;
          break;
      }
    }
    else
    {
      unint64_t v28 = v69;
    }
    unint64_t v29 = v28;
    sub_1000ACB3C(v26, v55, v27);
    uint64_t v65 = v58;
    uint64_t v66 = v57;
    LOBYTE(v67) = v56;
    uint64_t v68 = v25;
    State.wrappedValue.getter();
    uint64_t v30 = v69;
    unint64_t v31 = v70;
    char v32 = v71;
    uint64_t v33 = (unsigned __int8 *)sub_1000AB9F8(v69, v70, v71);
    sub_1000ACB3C(v30, v31, v32);
    uint64_t v34 = (unsigned __int8 **)(a1 + v18[24]);
    double v36 = *v34;
    uint64_t v35 = v34[1];
    uint64_t v65 = v36;
    uint64_t v66 = v35;
    sub_10000F214(&qword_100526430);
    State.wrappedValue.getter();
    type metadata accessor for ScanwaveViewControllerLink();
    sub_1002AB13C((unint64_t *)&qword_10051D040, (void (*)(uint64_t))type metadata accessor for ScanwaveViewControllerLink);
    uint64_t v37 = ObservedObject.init(wrappedValue:)();
    uint64_t v65 = v29;
    uint64_t v66 = v33;
    uint64_t v67 = v37;
    uint64_t v68 = v38;
    sub_1002A8C50();
    uint64_t v39 = (uint64_t)v64;
    View.accessibilityIdentifier(_:)();
    swift_release();

    uint64_t v40 = v63;
    sub_10000FC34(v39, v63, &qword_1005266A8);
    sub_10000FC34(v40, (uint64_t)v17, &qword_1005266A8);
    uint64_t v41 = 0;
    uint64_t v4 = v61;
    a2 = v62;
    uint64_t v7 = v59;
    uint64_t v6 = v60;
  }
  else
  {
    uint64_t v41 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v17, v41, 1, v7);
  uint64_t v42 = (unsigned __int8 **)(a1 + v18[11]);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  uint64_t v65 = v44;
  uint64_t v66 = v43;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v45 = v69;
  swift_getKeyPath();
  uint64_t v65 = v45;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v46 = v45[OBJC_IVAR____TtC6Tamale16CameraController__runState + 16];
  swift_release();
  if (v46 == 1)
  {
    uint64_t v47 = 0;
    char v48 = 0;
  }
  else
  {
    uint64_t v49 = (unsigned __int8 **)(a1 + v18[28]);
    uint64_t v51 = *v49;
    uint64_t v50 = v49[1];
    uint64_t v65 = v51;
    uint64_t v66 = v50;
    sub_10000F214(&qword_1005263A0);
    State.wrappedValue.getter();
    uint64_t v47 = v69;
    sub_10000F214(&qword_100525F50);
    State.wrappedValue.getter();
    char v48 = v6[*(int *)(v4 + 48) + 1];
    sub_1002ADE8C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  }
  sub_10000FB74((uint64_t)v17, (uint64_t)v14, &qword_1005266B0);
  sub_10000FB74((uint64_t)v14, a2, &qword_1005266B0);
  uint64_t v52 = a2 + *(int *)(sub_10000F214(&qword_1005266B8) + 48);
  *(void *)uint64_t v52 = v47;
  *(unsigned char *)(v52 + 8) = v48;
  swift_retain();
  sub_10000FBD8((uint64_t)v17, &qword_1005266B0);
  swift_release();
  return sub_10000FBD8((uint64_t)v14, &qword_1005266B0);
}

BOOL sub_100248990()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppConfiguration();
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  uint64_t v7 = &v5[*(int *)(v3 + 28)];
  int v8 = v7[*(int *)(type metadata accessor for CameraControllerConfiguration(0) + 64)];
  sub_1002ADE8C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  if (v8 == 4)
  {
    uint64_t v9 = (uint64_t *)(v1 + *(int *)(v6 + 44));
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    uint64_t v19 = v11;
    uint64_t v20 = v10;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    uint64_t v12 = v21;
    swift_getKeyPath();
    uint64_t v19 = v12;
    sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
    uint64_t v14 = *(void *)(v12 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
    int v15 = *(unsigned __int8 *)(v12 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
    sub_1000BBF50(v13, v14, *(unsigned char *)(v12 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
    swift_release();
    if (v15)
    {
      sub_1000BC2F4(v13, v14, v15);
      return 0;
    }
    return v13 == 1;
  }
  else
  {
    return v8 == 3;
  }
}

uint64_t sub_100248B68()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setBool:1 forKey:v1];

  if (qword_100517D48 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_10055E060;
  sub_10005239C();
  swift_getKeyPath();
  sub_1002AB13C(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t v3 = swift_release();
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC6Tamale16LocationsHandler__backgroundActivity) == 1)
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    uint64_t v3 = swift_release();
  }
  __chkstk_darwin(v3);
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t sub_100248DB8()
{
  return sub_10022A024();
}

void sub_100248E38()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setBool:1 forKey:v1];

  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  sub_100248F10();
}

void sub_100248F10()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v50 + 64);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v48 = (uint64_t *)(v0 + *(int *)(v2 + 44));
  uint64_t v8 = v48[1];
  uint64_t v52 = *v48;
  uint64_t v53 = v8;
  v47[2] = sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  sub_1004152E0();
  swift_release();
  uint64_t v49 = v2;
  uint64_t v9 = (uint64_t *)(v0 + *(int *)(v2 + 88));
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v52 = v11;
  uint64_t v53 = v10;
  sub_10000F214(&qword_1005263C8);
  State.wrappedValue.getter();
  char v12 = sub_100219468();
  swift_release();
  if (qword_100517E00 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000F378(v13, (uint64_t)qword_10055E118);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v51 = v1;
  if (v16)
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    v47[1] = v3;
    *(_DWORD *)uint64_t v17 = 136446210;
    LOBYTE(v54) = v12;
    sub_10000F214(&qword_100526410);
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v54 = sub_1003806B0(v18, v19, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Next enablement requirement: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v20 = self;
  id v21 = [v20 standardUserDefaults];
  NSString v22 = String._bridgeToObjectiveC()();
  [v21 setBool:0 forKey:v22];

  switch(v12)
  {
    case 2:
      uint64_t v26 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v7, 1, 1, v26);
      sub_1002ADE24(v51, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ContentView);
      type metadata accessor for MainActor();
      uint64_t v27 = static MainActor.shared.getter();
      unint64_t v28 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v27;
      *(void *)(v29 + 24) = &protocol witness table for MainActor;
      sub_1002AA830((uint64_t)v4, v29 + v28, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v30 = &unk_1005263F8;
      goto LABEL_16;
    case 3:
    case 4:
    case 5:
      unsigned __int8 v23 = 2;
      goto LABEL_12;
    case 6:
      uint64_t v31 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v7, 1, 1, v31);
      sub_1002ADE24(v51, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ContentView);
      type metadata accessor for MainActor();
      uint64_t v32 = static MainActor.shared.getter();
      unint64_t v33 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v32;
      *(void *)(v29 + 24) = &protocol witness table for MainActor;
      sub_1002AA830((uint64_t)v4, v29 + v33, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v30 = &unk_1005263E8;
      goto LABEL_16;
    case 7:
      uint64_t v34 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v7, 1, 1, v34);
      sub_1002ADE24(v51, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ContentView);
      type metadata accessor for MainActor();
      uint64_t v35 = static MainActor.shared.getter();
      unint64_t v36 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v35;
      *(void *)(v29 + 24) = &protocol witness table for MainActor;
      sub_1002AA830((uint64_t)v4, v29 + v36, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v30 = &unk_1005263D8;
      goto LABEL_16;
    case 8:
      unsigned __int8 v23 = 3;
LABEL_12:
      sub_10026D314(v23);
      break;
    case 9:
      uint64_t v37 = v51;
      uint64_t v38 = (char *)(v51 + *(int *)(v49 + 76));
      char v39 = *v38;
      uint64_t v40 = *((void *)v38 + 1);
      LOBYTE(v52) = v39;
      uint64_t v53 = v40;
      LOBYTE(v54) = 1;
      sub_10000F214(&qword_100522EA0);
      State.wrappedValue.setter();
      uint64_t v41 = v48[1];
      uint64_t v52 = *v48;
      uint64_t v53 = v41;
      State.wrappedValue.getter();
      uint64_t v42 = v54;
      swift_getKeyPath();
      uint64_t v52 = v42;
      sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      int v43 = *(unsigned __int8 *)(v42 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
      swift_release();
      if (v43 == 1) {
        sub_100254068();
      }
      uint64_t v44 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v7, 1, 1, v44);
      sub_1002ADE24(v37, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ContentView);
      type metadata accessor for MainActor();
      uint64_t v45 = static MainActor.shared.getter();
      unint64_t v46 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v45;
      *(void *)(v29 + 24) = &protocol witness table for MainActor;
      sub_1002AA830((uint64_t)v4, v29 + v46, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v30 = &unk_100526408;
LABEL_16:
      sub_100064D5C((uint64_t)v7, (uint64_t)v30, v29);
      swift_release();
      break;
    default:
      sub_10026D314(v12 == 1);
      id v24 = [v20 standardUserDefaults];
      NSString v25 = String._bridgeToObjectiveC()();
      [v24 setBool:1 forKey:v25];

      break;
  }
}

uint64_t sub_100249790()
{
  return sub_100229E04(0);
}

uint64_t sub_100249838(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v9 = [self standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setBool:1 forKey:v10];

  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  sub_1002ADE24(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v5, v14 + v13, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_100064D5C((uint64_t)v8, (uint64_t)&unk_100526A48, v14);
  swift_release();
  uint64_t v17 = a1;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t sub_100249ABC()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10023B700;
  return sub_100249B68();
}

uint64_t sub_100249B68()
{
  v1[28] = v0;
  type metadata accessor for Locale();
  v1[29] = swift_task_alloc();
  type metadata accessor for String.LocalizationValue();
  v1[30] = swift_task_alloc();
  sub_10000F214(&qword_100526368);
  v1[31] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Lens_Status(0);
  v1[32] = v2;
  v1[33] = *(void *)(v2 - 8);
  v1[34] = swift_task_alloc();
  sub_10000F214(&qword_100526370);
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Lens_NormalizedBox(0);
  v1[39] = v3;
  v1[40] = *(void *)(v3 - 8);
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  sub_10000F214(&qword_100526378);
  v1[45] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Lens_ExploreGrid(0);
  v1[46] = v4;
  v1[47] = *(void *)(v4 - 8);
  v1[48] = swift_task_alloc();
  sub_10000F214(&qword_100526380);
  v1[49] = swift_task_alloc();
  v1[50] = swift_task_alloc();
  v1[51] = swift_task_alloc();
  v1[52] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Lens_Result(0);
  v1[53] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[54] = v6;
  v1[55] = *(void *)(v6 + 64);
  v1[56] = swift_task_alloc();
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Lens_Object(0);
  v1[59] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[60] = v8;
  v1[61] = *(void *)(v8 + 64);
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  v1[67] = v9;
  v1[68] = *(void *)(v9 - 8);
  v1[69] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DispatchQoS();
  v1[70] = v10;
  v1[71] = *(void *)(v10 - 8);
  v1[72] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ContentView();
  v1[73] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v1[74] = v12;
  v1[75] = *(void *)(v12 + 64);
  v1[76] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for DispatchTime();
  v1[77] = v13;
  v1[78] = *(void *)(v13 - 8);
  v1[79] = swift_task_alloc();
  v1[80] = swift_task_alloc();
  v1[81] = type metadata accessor for AppConfiguration();
  v1[82] = swift_task_alloc();
  sub_10000F214(&qword_100526388);
  v1[83] = swift_task_alloc();
  v1[84] = swift_task_alloc();
  v1[85] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for ResultLookupState();
  v1[86] = v14;
  v1[87] = *(void *)(v14 - 8);
  v1[88] = swift_task_alloc();
  v1[89] = sub_10000F214(&qword_100526390);
  v1[90] = swift_task_alloc();
  sub_10000F214(&qword_10051A308);
  v1[91] = swift_task_alloc();
  v1[92] = swift_task_alloc();
  v1[93] = swift_task_alloc();
  v1[94] = swift_task_alloc();
  v1[95] = type metadata accessor for MainActor();
  v1[96] = static MainActor.shared.getter();
  uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[97] = v16;
  v1[98] = v15;
  return _swift_task_switch(sub_10024A2B0, v16, v15);
}

uint64_t sub_10024A2B0()
{
  uint64_t v1 = v0[94];
  uint64_t v2 = (_OWORD *)v0[93];
  uint64_t v3 = v0[90];
  uint64_t v4 = v0[89];
  uint64_t v5 = v0[87];
  uint64_t v6 = v0[86];
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  v2[2] = 0u;
  v2[3] = 0u;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(void (**)(_OWORD *, void, uint64_t, uint64_t))(v5 + 56);
  v0[99] = v7;
  v0[100] = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v2, 0, 1, v6);
  uint64_t v8 = v3 + *(int *)(v4 + 48);
  sub_10000FB74(v1, v3, &qword_10051A308);
  sub_10000FB74((uint64_t)v2, v8, &qword_10051A308);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v9(v3, 1, v6) == 1)
  {
    uint64_t v10 = v0[94];
    uint64_t v11 = v0[86];
    sub_10000FBD8(v0[93], &qword_10051A308);
    sub_10000FBD8(v10, &qword_10051A308);
    if (v9(v8, 1, v11) == 1)
    {
      sub_10000FBD8(v0[90], &qword_10051A308);
LABEL_13:
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v31 = (uint64_t (*)(void))v0[1];
      return v31();
    }
    goto LABEL_6;
  }
  uint64_t v12 = v0[86];
  sub_10000FB74(v0[90], v0[92], &qword_10051A308);
  unsigned int v13 = v9(v8, 1, v12);
  uint64_t v14 = v0[94];
  uint64_t v15 = v0[93];
  uint64_t v16 = v0[92];
  if (v13 == 1)
  {
    sub_10000FBD8(v0[93], &qword_10051A308);
    sub_10000FBD8(v14, &qword_10051A308);
    sub_1002ADE8C(v16, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
LABEL_6:
    sub_10000FBD8(v0[90], &qword_100526390);
    goto LABEL_8;
  }
  uint64_t v17 = v0[90];
  uint64_t v18 = (uint64_t *)v0[88];
  sub_1002AA830(v8, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  char v19 = sub_1003192A0(v16, v18);
  sub_1002ADE8C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_10000FBD8(v15, &qword_10051A308);
  sub_10000FBD8(v14, &qword_10051A308);
  sub_1002ADE8C(v16, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_10000FBD8(v17, &qword_10051A308);
  if (v19) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v20 = *(void *)(v0[28] + *(int *)(v0[73] + 240));
  swift_getKeyPath();
  v0[24] = v20;
  sub_1002AB13C(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v20 + 24) != 1)
  {
    uint64_t v34 = v0[80];
    uint64_t v21 = v0[79];
    uint64_t v22 = v0[78];
    uint64_t v23 = v0[77];
    uint64_t v24 = v0[76];
    uint64_t v25 = v0[74];
    uint64_t v33 = v0[72];
    uint64_t v39 = v0[71];
    uint64_t v40 = v0[70];
    uint64_t v36 = v0[69];
    uint64_t v38 = v0[68];
    uint64_t v37 = v0[67];
    uint64_t v26 = v0[28];
    swift_release();
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    uint64_t v35 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v27(v21, v23);
    sub_1002ADE24(v26, v24, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v28 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v29 = swift_allocObject();
    sub_1002AA830(v24, v29 + v28, (uint64_t (*)(void))type metadata accessor for ContentView);
    v0[12] = sub_100297AA4;
    v0[13] = v29;
    v0[8] = _NSConcreteStackBlock;
    v0[9] = 1107296256;
    v0[10] = sub_1002EDB98;
    v0[11] = &unk_1004F17D8;
    uint64_t v30 = _Block_copy(v0 + 8);
    static DispatchQoS.unspecified.getter();
    v0[26] = _swiftEmptyArrayStorage;
    sub_1002AB13C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v30);

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v33, v40);
    v27(v34, v23);
    goto LABEL_13;
  }
  return _swift_task_switch(sub_10024AB4C, 0, 0);
}

uint64_t sub_10024AB4C()
{
  *(void *)(v0 + 808) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10024ABD8, v2, v1);
}

uint64_t sub_10024ABD8()
{
  uint64_t v1 = *(void *)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 224);
  swift_release();
  uint64_t v3 = (char *)(v2 + *(int *)(v1 + 92));
  char v4 = *v3;
  uint64_t v5 = *((void *)v3 + 1);
  *(unsigned char *)(v0 + 160) = v4;
  *(void *)(v0 + 168) = v5;
  *(unsigned char *)(v0 + 889) = 1;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  *(void *)(swift_task_alloc() + 16) = v2;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 816) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10024AD18;
  uint64_t v7 = *(void *)(v0 + 224);
  return sub_10026F66C(v7);
}

uint64_t sub_10024AD18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 824) = a1;
  *(void *)(v4 + 832) = a2;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 784);
  uint64_t v6 = *(void *)(v3 + 776);
  return _swift_task_switch(sub_10024AE44, v6, v5);
}

uint64_t sub_10024AE44()
{
  if (v0[104] >> 60 == 15)
  {
    uint64_t v1 = (void (*)(void *, void, uint64_t, uint64_t))v0[99];
    uint64_t v2 = (void *)v0[91];
    uint64_t v3 = v0[86];
    swift_release();
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v4 = String.init(localized:table:bundle:locale:comment:)();
    *uint64_t v2 = _swiftEmptyArrayStorage;
    v2[1] = _swiftEmptyArrayStorage;
    v2[2] = 0xD000000000000016;
    v2[3] = 0x8000000100429ED0;
    v2[4] = v4;
    v2[5] = v5;
    v2[6] = 0xD000000000000017;
    v2[7] = 0x8000000100429F20;
    swift_storeEnumTagMultiPayload();
    v1(v2, 0, 1, v3);
    sub_1002297C8((uint64_t)v2);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v0[85];
    uint64_t v9 = v0[82];
    uint64_t v10 = v0[81];
    uint64_t v11 = v0[59];
    uint64_t v12 = v0[60];
    unsigned int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v0[105] = v13;
    v0[106] = (v12 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v13(v8, 1, 1, v11);
    sub_10000F214(&qword_100525F50);
    State.wrappedValue.getter();
    uint64_t v14 = (uint64_t *)(v9 + *(int *)(v10 + 28));
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    v0[107] = v16;
    swift_bridgeObjectRetain();
    sub_1002ADE8C(v9, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10052B6C8 + dword_10052B6C8);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[108] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10024B2F8;
    uint64_t v18 = v0[104];
    uint64_t v19 = v0[103];
    return v20(v19, v18, v15, v16);
  }
}

uint64_t sub_10024B2F8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[109] = a1;
  v3[110] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[98];
    uint64_t v5 = v3[97];
    uint64_t v6 = sub_10024CA28;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = v3[98];
    uint64_t v5 = v3[97];
    uint64_t v6 = sub_10024B420;
  }
  return _swift_task_switch(v6, v5, v4);
}

uint64_t sub_10024B420()
{
  unint64_t v195 = v0;
  uint64_t v1 = v0[109];
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v163 = v0[65];
    uint64_t v165 = v0[66];
    uint64_t v3 = v0[60];
    uint64_t v4 = (int *)v0[53];
    uint64_t v5 = v0[47];
    uint64_t v6 = v0[109] + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v7 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[54] + 48);
    uint64_t v180 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    unint64_t v178 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v170 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    uint64_t v166 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[40] + 48);
    uint64_t v176 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[33] + 48);
    uint64_t v193 = (int *)v0[59];
    uint64_t v177 = v0[58];
    uint64_t v158 = v0[43];
    uint64_t v160 = v0[44];
    uint64_t v154 = v0[41];
    uint64_t v156 = v0[42];
    uint64_t v174 = v0[34];
    uint64_t v190 = *(void *)(v3 + 72);
    uint64_t v192 = v7;
    long long v182 = v4;
    while (1)
    {
      uint64_t v14 = v0[66];
      uint64_t v16 = v0[52];
      uint64_t v15 = v0[53];
      sub_1002ADE24(v6, v14, type metadata accessor for Lens_Object);
      uint64_t v17 = v14 + v193[7];
      sub_10000FB74(v17, v16, &qword_100526380);
      uint64_t v18 = *v7;
      int v19 = (*v7)(v16, 1, v15);
      uint64_t v20 = (char *)v0[58];
      uint64_t v21 = v0[52];
      if (v19 == 1)
      {
        uint64_t v22 = v0[46];
        *(void *)uint64_t v20 = _swiftEmptyArrayStorage;
        *(void *)(v177 + 8) = _swiftEmptyArrayStorage;
        UnknownStorage.init()();
        (*v180)(&v20[v4[7]], 1, 1, v22);
        uint64_t v23 = &v20[v4[8]];
        uint64_t v24 = type metadata accessor for Lens_ExactMatch(0);
        uint64_t v25 = v23;
        uint64_t v7 = v192;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v25, 1, 1, v24);
        uint64_t v26 = &v20[v4[9]];
        uint64_t v27 = type metadata accessor for Lens_LlmAnswer(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
        sub_10000FBD8(v21, &qword_100526380);
      }
      else
      {
        sub_1002AA830(v0[52], v0[58], type metadata accessor for Lens_Result);
      }
      uint64_t v28 = v0[53];
      uint64_t v29 = v0[51];
      sub_10000FB74(v17, v29, &qword_100526380);
      int v30 = v18(v29, 1, v28);
      sub_10000FBD8(v29, &qword_100526380);
      if (v30 == 1) {
        break;
      }
      uint64_t v32 = v0[45];
      uint64_t v31 = v0[46];
      sub_10000FB74(v0[58] + v4[7], v32, &qword_100526378);
      int v33 = (*v178)(v32, 1, v31);
      uint64_t v34 = (void *)v0[48];
      uint64_t v35 = v0[45];
      if (v33 == 1)
      {
        *uint64_t v34 = _swiftEmptyArrayStorage;
        UnknownStorage.init()();
        sub_10000FBD8(v35, &qword_100526378);
      }
      else
      {
        sub_1002AA830(v0[45], (uint64_t)v34, type metadata accessor for Lens_ExploreGrid);
      }
      uint64_t v36 = (uint64_t *)v0[48];
      uint64_t v37 = *v36;
      swift_bridgeObjectRetain();
      sub_1002ADE8C((uint64_t)v36, type metadata accessor for Lens_ExploreGrid);
      uint64_t v38 = *(void *)(v37 + 16);
      swift_bridgeObjectRelease();
      if (!v38) {
        break;
      }
      uint64_t v39 = v0[84];
      uint64_t v40 = v0[59];
      sub_10000FB74(v0[85], v39, &qword_100526388);
      if ((*v170)(v39, 1, v40) != 1)
      {
        uint64_t v41 = (void *)v0[66];
        uint64_t v42 = (void *)v0[65];
        sub_1002AA830(v0[84], (uint64_t)v42, type metadata accessor for Lens_Object);
        unint64_t v43 = *(void *)(v165 + 8);
        if ((v43 & 0x2000000000000000) != 0) {
          uint64_t v44 = HIBYTE(v43) & 0xF;
        }
        else {
          uint64_t v44 = *v41 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v45 = *(void *)(v163 + 8);
        uint64_t v46 = *v42 & 0xFFFFFFFFFFFFLL;
        if ((v45 & 0x2000000000000000) != 0) {
          uint64_t v46 = HIBYTE(v45) & 0xF;
        }
        if (v44)
        {
          if (!v46)
          {
            uint64_t v76 = v0[58];
            sub_1002ADE8C(v0[65], type metadata accessor for Lens_Object);
            sub_1002ADE8C(v76, type metadata accessor for Lens_Result);
            uint64_t v4 = v182;
LABEL_48:
            uint64_t v105 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[105];
            uint64_t v106 = v0[85];
            uint64_t v107 = v0[66];
            uint64_t v108 = v0[59];
            sub_10000FBD8(v106, &qword_100526388);
            sub_1002AA830(v107, v106, type metadata accessor for Lens_Object);
            v105(v106, 0, 1, v108);
            goto LABEL_4;
          }
          uint64_t v48 = v0[38];
          uint64_t v47 = v0[39];
          sub_10000FB74(v0[66] + v193[6], v48, &qword_100526370);
          uint64_t v49 = *v166;
          int v50 = (*v166)(v48, 1, v47);
          uint64_t v51 = (void *)v0[44];
          uint64_t v52 = v0[38];
          uint64_t v4 = v182;
          if (v50 == 1)
          {
            *uint64_t v51 = 0;
            v51[1] = 0;
            UnknownStorage.init()();
            sub_10000FBD8(v52, &qword_100526370);
          }
          else
          {
            sub_1002AA830(v0[38], (uint64_t)v51, type metadata accessor for Lens_NormalizedBox);
          }
          uint64_t v77 = v0[65];
          uint64_t v78 = v0[39];
          uint64_t v79 = v0[37];
          float v80 = *(float *)(v160 + 8);
          float v81 = *(float *)(v160 + 12);
          sub_1002ADE8C(v0[44], type metadata accessor for Lens_NormalizedBox);
          sub_10000FB74(v77 + v193[6], v79, &qword_100526370);
          int v82 = v49(v79, 1, v78);
          uint64_t v83 = (void *)v0[43];
          uint64_t v84 = v0[37];
          if (v82 == 1)
          {
            *uint64_t v83 = 0;
            v83[1] = 0;
            UnknownStorage.init()();
            sub_10000FBD8(v84, &qword_100526370);
          }
          else
          {
            sub_1002AA830(v0[37], (uint64_t)v83, type metadata accessor for Lens_NormalizedBox);
          }
          uint64_t v85 = v0[58];
          float v86 = v80 * v81;
          uint64_t v87 = v0[43];
          sub_1002ADE8C(v0[65], type metadata accessor for Lens_Object);
          sub_1002ADE8C(v85, type metadata accessor for Lens_Result);
          uint64_t v88 = v158;
LABEL_47:
          float v104 = *(float *)(v88 + 8) * *(float *)(v88 + 12);
          sub_1002ADE8C(v87, type metadata accessor for Lens_NormalizedBox);
          if (v104 < v86) {
            goto LABEL_48;
          }
        }
        else
        {
          if (!v46)
          {
            uint64_t v89 = v0[39];
            uint64_t v90 = v0[36];
            sub_10000FB74(v0[66] + v193[6], v90, &qword_100526370);
            uint64_t v91 = *v166;
            int v92 = (*v166)(v90, 1, v89);
            unint64_t v93 = (void *)v0[42];
            uint64_t v94 = v0[36];
            if (v92 == 1)
            {
              *unint64_t v93 = 0;
              v93[1] = 0;
              UnknownStorage.init()();
              sub_10000FBD8(v94, &qword_100526370);
            }
            else
            {
              sub_1002AA830(v0[36], (uint64_t)v93, type metadata accessor for Lens_NormalizedBox);
            }
            uint64_t v4 = v182;
            uint64_t v95 = v0[65];
            uint64_t v96 = v0[39];
            uint64_t v97 = v0[35];
            float v98 = *(float *)(v156 + 8);
            float v99 = *(float *)(v156 + 12);
            sub_1002ADE8C(v0[42], type metadata accessor for Lens_NormalizedBox);
            sub_10000FB74(v95 + v193[6], v97, &qword_100526370);
            int v100 = v91(v97, 1, v96);
            uint64_t v101 = (void *)v0[41];
            uint64_t v102 = v0[35];
            if (v100 == 1)
            {
              *uint64_t v101 = 0;
              v101[1] = 0;
              UnknownStorage.init()();
              sub_10000FBD8(v102, &qword_100526370);
            }
            else
            {
              sub_1002AA830(v0[35], (uint64_t)v101, type metadata accessor for Lens_NormalizedBox);
            }
            uint64_t v103 = v0[58];
            float v86 = v98 * v99;
            uint64_t v87 = v0[41];
            sub_1002ADE8C(v0[65], type metadata accessor for Lens_Object);
            sub_1002ADE8C(v103, type metadata accessor for Lens_Result);
            uint64_t v88 = v154;
            goto LABEL_47;
          }
          uint64_t v75 = v0[58];
          sub_1002ADE8C(v0[65], type metadata accessor for Lens_Object);
          sub_1002ADE8C(v75, type metadata accessor for Lens_Result);
          uint64_t v4 = v182;
        }
        uint64_t v69 = v0[66];
LABEL_29:
        sub_1002ADE8C(v69, type metadata accessor for Lens_Object);
        goto LABEL_4;
      }
      uint64_t v8 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[105];
      uint64_t v9 = v0[85];
      uint64_t v10 = v0[84];
      uint64_t v11 = v0[66];
      uint64_t v12 = v0[59];
      sub_1002ADE8C(v0[58], type metadata accessor for Lens_Result);
      sub_10000FBD8(v9, &qword_100526388);
      sub_10000FBD8(v10, &qword_100526388);
      sub_1002AA830(v11, v9, type metadata accessor for Lens_Object);
      uint64_t v13 = v12;
      uint64_t v7 = v192;
      v8(v9, 0, 1, v13);
      uint64_t v4 = v182;
LABEL_4:
      v6 += v190;
      if (!--v2) {
        goto LABEL_50;
      }
    }
    if (qword_100517E58 != -1) {
      swift_once();
    }
    uint64_t v53 = v0[66];
    uint64_t v54 = v0[64];
    uint64_t v55 = type metadata accessor for Logger();
    sub_10000F378(v55, (uint64_t)qword_10055E220);
    sub_1002ADE24(v53, v54, type metadata accessor for Lens_Object);
    int v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v188 = v2;
      uint64_t v58 = v0[64];
      uint64_t v60 = v0[31];
      uint64_t v59 = v0[32];
      uint64_t v61 = swift_slowAlloc();
      v194[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136315138;
      sub_10000FB74(v58 + v193[8], v60, &qword_100526368);
      int v62 = (*v176)(v60, 1, v59);
      uint64_t v63 = (void *)v0[34];
      uint64_t v64 = v0[31];
      uint64_t v186 = v6;
      if (v62 == 1)
      {
        *uint64_t v63 = 0;
        uint64_t v65 = v174;
        *(unsigned char *)(v174 + 8) = 1;
        *(void *)(v174 + 16) = 0;
        *(void *)(v174 + 24) = 0xE000000000000000;
        UnknownStorage.init()();
        sub_10000FBD8(v64, &qword_100526368);
      }
      else
      {
        sub_1002AA830(v64, (uint64_t)v63, type metadata accessor for Lens_Status);
        uint64_t v65 = v174;
      }
      uint64_t v184 = v0[66];
      uint64_t v70 = v0[64];
      uint64_t v71 = v0[58];
      uint64_t v72 = v0[34];
      uint64_t v74 = *(void *)(v65 + 16);
      unint64_t v73 = *(void *)(v65 + 24);
      swift_bridgeObjectRetain();
      sub_1002ADE8C(v72, type metadata accessor for Lens_Status);
      *(void *)(v61 + 4) = sub_1003806B0(v74, v73, v194);
      swift_bridgeObjectRelease();
      sub_1002ADE8C(v70, type metadata accessor for Lens_Object);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Skipping object with status %s", (uint8_t *)v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1002ADE8C(v71, type metadata accessor for Lens_Result);
      sub_1002ADE8C(v184, type metadata accessor for Lens_Object);
      uint64_t v6 = v186;
      uint64_t v2 = v188;
      uint64_t v4 = v182;
      uint64_t v7 = v192;
      goto LABEL_4;
    }
    uint64_t v66 = v0[66];
    uint64_t v67 = v0[64];
    uint64_t v68 = v0[58];

    sub_1002ADE8C(v67, type metadata accessor for Lens_Object);
    sub_1002ADE8C(v68, type metadata accessor for Lens_Result);
    uint64_t v69 = v66;
    goto LABEL_29;
  }
LABEL_50:
  swift_bridgeObjectRelease();
  uint64_t v109 = v0[83];
  uint64_t v110 = v0[59];
  uint64_t v111 = v0[60];
  sub_10000FB74(v0[85], v109, &qword_100526388);
  int v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110);
  uint64_t v113 = v0[83];
  if (v112 == 1)
  {
    sub_10000FBD8(v113, &qword_100526388);
  }
  else
  {
    uint64_t v114 = v0[63];
    uint64_t v115 = v0[59];
    uint64_t v116 = v0[53];
    uint64_t v117 = v0[54];
    uint64_t v118 = v0[50];
    sub_1002AA830(v113, v114, type metadata accessor for Lens_Object);
    uint64_t v119 = v114 + *(int *)(v115 + 28);
    sub_10000FB74(v119, v118, &qword_100526380);
    uint64_t v120 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
    LODWORD(v116) = v120(v118, 1, v116);
    sub_10000FBD8(v118, &qword_100526380);
    if (v116 != 1)
    {
      uint64_t v125 = v0[53];
      uint64_t v126 = v0[49];
      sub_10000FB74(v119, v126, &qword_100526380);
      int v127 = v120(v126, 1, v125);
      int v128 = (char *)v0[57];
      if (v127 == 1)
      {
        BOOL v129 = (int *)v0[53];
        uint64_t v130 = v0[49];
        uint64_t v131 = v0[46];
        uint64_t v132 = v0[47];
        *(void *)int v128 = _swiftEmptyArrayStorage;
        *((void *)v128 + 1) = _swiftEmptyArrayStorage;
        UnknownStorage.init()();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v132 + 56))(&v128[v129[7]], 1, 1, v131);
        uint64_t v133 = &v128[v129[8]];
        uint64_t v134 = type metadata accessor for Lens_ExactMatch(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56))(v133, 1, 1, v134);
        int v135 = &v128[v129[9]];
        uint64_t v136 = type metadata accessor for Lens_LlmAnswer(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 56))(v135, 1, 1, v136);
        sub_10000FBD8(v130, &qword_100526380);
      }
      else
      {
        sub_1002AA830(v0[49], (uint64_t)v128, type metadata accessor for Lens_Result);
      }
      uint64_t v137 = (char *)(v0[28] + *(int *)(v0[73] + 160));
      char v138 = *v137;
      uint64_t v139 = *((void *)v137 + 1);
      *((unsigned char *)v0 + 176) = v138;
      v0[23] = v139;
      sub_10000F214(&qword_1005262F8);
      State.wrappedValue.getter();
      unint64_t v187 = v0[104];
      uint64_t v183 = v0[103];
      uint64_t v191 = v0[85];
      uint64_t v140 = v0[79];
      uint64_t v141 = v0[78];
      uint64_t v142 = v0[77];
      uint64_t v155 = v0[76];
      uint64_t v167 = v0[75];
      uint64_t v164 = v0[74];
      uint64_t v168 = v0[72];
      uint64_t v169 = v0[80];
      uint64_t v185 = v0[71];
      uint64_t v189 = v0[70];
      uint64_t v173 = v0[69];
      uint64_t v181 = v0[68];
      uint64_t v175 = v0[67];
      uint64_t v143 = v0[63];
      uint64_t v145 = v0[56];
      uint64_t v144 = v0[57];
      uint64_t v172 = v144;
      uint64_t v161 = v0[55];
      uint64_t v162 = v0[60];
      uint64_t v157 = v0[62];
      uint64_t v159 = v0[54];
      uint64_t v146 = v0[28];
      sub_10000F734(0, (unint64_t *)&qword_10051A950);
      uint64_t v171 = (void *)static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      + infix(_:_:)();
      uint64_t v179 = *(void (**)(uint64_t, uint64_t))(v141 + 8);
      v179(v140, v142);
      sub_1002ADE24(v146, v155, (uint64_t (*)(void))type metadata accessor for ContentView);
      sub_1002ADE24(v144, v145, type metadata accessor for Lens_Result);
      sub_1002ADE24(v143, v157, type metadata accessor for Lens_Object);
      unint64_t v147 = (*(unsigned __int8 *)(v164 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80);
      unint64_t v148 = (v167 + *(unsigned __int8 *)(v159 + 80) + v147) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
      unint64_t v149 = (v161 + *(unsigned __int8 *)(v162 + 80) + v148) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
      uint64_t v150 = swift_allocObject();
      sub_1002AA830(v155, v150 + v147, (uint64_t (*)(void))type metadata accessor for ContentView);
      sub_1002AA830(v145, v150 + v148, type metadata accessor for Lens_Result);
      sub_1002AA830(v157, v150 + v149, type metadata accessor for Lens_Object);
      v0[18] = sub_100299530;
      v0[19] = v150;
      v0[14] = _NSConcreteStackBlock;
      v0[15] = 1107296256;
      v0[16] = sub_1002EDB98;
      v0[17] = &unk_1004F1878;
      uint64_t v151 = _Block_copy(v0 + 14);
      static DispatchQoS.unspecified.getter();
      v0[27] = _swiftEmptyArrayStorage;
      sub_1002AB13C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000F214(&qword_10051A960);
      sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v151);

      sub_100094760(v183, v187);
      (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v173, v175);
      (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v168, v189);
      v179(v169, v142);
      sub_1002ADE8C(v172, type metadata accessor for Lens_Result);
      sub_1002ADE8C(v143, type metadata accessor for Lens_Object);
      sub_10000FBD8(v191, &qword_100526388);
      swift_release();
      goto LABEL_59;
    }
    sub_1002ADE8C(v0[63], type metadata accessor for Lens_Object);
  }
  unint64_t v121 = v0[104];
  uint64_t v122 = v0[103];
  uint64_t v123 = v0[85];
  uint64_t v124 = v0[28];
  *(void *)(swift_task_alloc() + 16) = v124;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  sub_100094760(v122, v121);
  swift_release();
  swift_task_dealloc();
  sub_10000FBD8(v123, &qword_100526388);
LABEL_59:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v152 = (uint64_t (*)(void))v0[1];
  return v152();
}

uint64_t sub_10024CA28()
{
  uint64_t v20 = v0[103];
  unint64_t v21 = v0[104];
  uint64_t v25 = v0[85];
  uint64_t v15 = v0[80];
  uint64_t v1 = v0[79];
  uint64_t v2 = v0[78];
  uint64_t v3 = v0[77];
  uint64_t v19 = v3;
  uint64_t v4 = v0[76];
  uint64_t v5 = v0[74];
  uint64_t v14 = v0[72];
  uint64_t v23 = v0[71];
  uint64_t v24 = v0[70];
  uint64_t v22 = v0[68];
  uint64_t v17 = v0[69];
  uint64_t v18 = v0[67];
  uint64_t v6 = v0[28];
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  uint64_t v16 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v1, v3);
  uint64_t v8 = v7;
  sub_1002ADE24(v6, v4, (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  sub_1002AA830(v4, v10 + v9, (uint64_t (*)(void))type metadata accessor for ContentView);
  v0[6] = sub_100297B40;
  v0[7] = v10;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1002EDB98;
  v0[5] = &unk_1004F1828;
  uint64_t v11 = _Block_copy(v0 + 2);
  static DispatchQoS.unspecified.getter();
  v0[25] = _swiftEmptyArrayStorage;
  sub_1002AB13C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  sub_100094760(v20, v21);
  _Block_release(v11);

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v17, v18);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v14, v24);
  v8(v15, v19);
  sub_10000FBD8(v25, &qword_100526388);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10024CFBC()
{
  return sub_100229E04(0);
}

uint64_t sub_10024D064(uint64_t a1, long long *a2)
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000F378(v4, (uint64_t)qword_10055E2E0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "User initiated an action via the pin container.", v7, 2u);
    swift_slowDealloc();
  }

  sub_10024D244(a2, a1, 0, 0);
  uint64_t result = sub_10004ECF4(a2, (uint64_t)v12);
  if (v12[32] != 1)
  {
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Halting camera because the user took a pin action from the pin container.", v11, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for ContentView();
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    sub_1004152E0();
    return swift_release();
  }
  return result;
}

uint64_t sub_10024D244(long long *a1, uint64_t a2, int a3, int a4)
{
  int v42 = a4;
  int v44 = a3;
  uint64_t v45 = a2;
  uint64_t v5 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v5 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for CVBundle(0);
  uint64_t v7 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v40 = v8;
  uint64_t v41 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ContentView();
  uint64_t v37 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v38 = v10;
  uint64_t v39 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000F378(v14, (uint64_t)qword_10055E2E0);
  sub_100050964((uint64_t)a1, (void (*)(void, void, void, void, void))sub_10004E998);
  sub_100050964((uint64_t)a1, (void (*)(void, void, void, void, void))sub_10004E998);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v18 = sub_1000499E0();
    uint64_t v46 = sub_1003806B0(v18, v19, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100050964((uint64_t)a1, (void (*)(void, void, void, void, void))sub_10004EA10);
    sub_100050964((uint64_t)a1, (void (*)(void, void, void, void, void))sub_10004EA10);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Handling pin action: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100050964((uint64_t)a1, (void (*)(void, void, void, void, void))sub_10004EA10);
    sub_100050964((uint64_t)a1, (void (*)(void, void, void, void, void))sub_10004EA10);
  }

  uint64_t v20 = type metadata accessor for TaskPriority();
  uint64_t v21 = (uint64_t)v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v13, 1, 1, v20);
  uint64_t v22 = v39;
  sub_1002ADE24(v43, v39, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v23 = v41;
  sub_1002ADE24(v45, v41, type metadata accessor for CVBundle);
  type metadata accessor for MainActor();
  sub_100050964((uint64_t)a1, (void (*)(void, void, void, void, void))sub_10004E998);
  uint64_t v24 = static MainActor.shared.getter();
  unint64_t v25 = (*(unsigned __int8 *)(v37 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  unint64_t v26 = (v38 + *(unsigned __int8 *)(v7 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v27 = v26 + v40;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v24;
  *(void *)(v28 + 24) = &protocol witness table for MainActor;
  sub_10004ECF4(a1, v28 + 32);
  sub_1002AA830(v22, v28 + v25, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1002AA830(v23, v28 + v26, type metadata accessor for CVBundle);
  *(unsigned char *)(v28 + v27) = v42 & 1;
  sub_100064D5C(v21, (uint64_t)&unk_100526478, v28);
  uint64_t result = swift_release();
  if (v44 != 7)
  {
    char v30 = *(unsigned char *)(v43 + 56);
    uint64_t v31 = swift_retain();
    sub_10027D7D0(v31, v30, 0xD000000000000010, 0x800000010042A340);
    swift_release();
    uint64_t v32 = v35;
    sub_1002ADE24(v45, v35, type metadata accessor for CVBundle);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v32, 0, 1, v36);
    char v33 = sub_100227608(v32);
    sub_10000FBD8(v32, &qword_10051B768);
    sub_1003CA3E8(v33, v44);
    return swift_release();
  }
  return result;
}

uint64_t sub_10024D844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_1002AA830(a1, a9, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v20 = (int *)sub_10000F214(&qword_100526A70);
  sub_10000FC34(a2, a9 + v20[11], &qword_10051B768);
  *(unsigned char *)(a9 + v20[12]) = a3;
  sub_10000FC34(a4, a9 + v20[13], &qword_10051A308);
  *(unsigned char *)(a9 + v20[14]) = a5;
  *(unsigned char *)(a9 + v20[15]) = a6;
  *(void *)(a9 + v20[16]) = a7;
  *(void *)(a9 + v20[17]) = a8;
  uint64_t v21 = (void *)(a9 + v20[18]);
  *uint64_t v21 = a10;
  v21[1] = a11;
  uint64_t v22 = a9 + v20[19];
  *(void *)uint64_t v22 = a12;
  *(void *)(v22 + 8) = a13;
  *(unsigned char *)(v22 + 16) = a14;
  uint64_t v23 = a9 + v20[20];
  *(void *)uint64_t v23 = swift_getKeyPath();
  *(void *)(v23 + 8) = 0;
  *(unsigned char *)(v23 + 16) = 0;
  uint64_t v24 = a9 + v20[21];
  *(void *)uint64_t v24 = swift_getKeyPath();
  *(void *)(v24 + 8) = 0;
  *(unsigned char *)(v24 + 16) = 0;
  unint64_t v25 = (uint64_t *)(a9 + v20[22]);
  *unint64_t v25 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  unint64_t v26 = (uint64_t *)(a9 + v20[23]);
  *unint64_t v26 = swift_getKeyPath();
  sub_10000F214(&qword_10051BB48);
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = a9 + v20[24];
  type metadata accessor for SessionAnalytics();
  sub_1002AB13C(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  *(void *)uint64_t v27 = Environment.init<A>(_:)();
  *(unsigned char *)(v27 + 8) = v28 & 1;
  uint64_t v29 = a9 + v20[25];
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v29 = v33;
  *(void *)(v29 + 8) = v34;
  return result;
}

uint64_t sub_10024DAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for ContentView();
  v28[0] = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v28[0] + 64);
  __chkstk_darwin(v4);
  uint64_t v6 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ResultLookupState();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v28 - v17;
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_10000FBD8((uint64_t)v11, &qword_10051A308);
  }
  sub_1002AA830((uint64_t)v11, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_1002ADE24((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    sub_1002ADE8C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    uint64_t v21 = (uint64_t)v15;
  }
  else
  {
    uint64_t v22 = *((void *)v15 + 1);
    __chkstk_darwin(EnumCaseMultiPayload);
    v28[-4] = a3;
    v28[-3] = v23;
    v28[-2] = v22;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v24 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v8, 1, 1, v24);
    sub_1002ADE24(a3, (uint64_t)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
    type metadata accessor for MainActor();
    uint64_t v25 = static MainActor.shared.getter();
    unint64_t v26 = (*(unsigned __int8 *)(v28[0] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28[0] + 80);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v25;
    *(void *)(v27 + 24) = &protocol witness table for MainActor;
    sub_1002AA830((uint64_t)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_100064D5C((uint64_t)v8, (uint64_t)&unk_100526AD8, v27);
    swift_release();
    uint64_t v21 = (uint64_t)v18;
  }
  return sub_1002ADE8C(v21, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
}

void sub_10024DED8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = (long long *)(a1 + *(int *)(type metadata accessor for ContentView() + 144));
  uint64_t v6 = *((void *)v5 + 2);
  long long v11 = *v5;
  uint64_t v12 = v6;
  swift_bridgeObjectRetain();
  sub_10000F214(&qword_10051D550);
  State.wrappedValue.setter();
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000F378(v7, (uint64_t)qword_10055E2E0);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    sub_1003806B0(a2, a3, (uint64_t *)&v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "currentErrorText: %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10024E0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  v4[6] = type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v7;
  v4[9] = v6;
  return _swift_task_switch(sub_10024E1D4, v7, v6);
}

uint64_t sub_10024E1D4()
{
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1005282F0 + dword_1005282F0);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10024E2B0;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_10024E2B0()
{
  uint64_t v3 = (void *)*v1;
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[4];
  uint64_t v6 = v2[3];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v3[8];
    uint64_t v8 = v3[9];
    uint64_t v9 = sub_10024E454;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v3[11] = 0;
    uint64_t v9 = sub_10024E474;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v9, v7, v8);
}

uint64_t sub_10024E454()
{
  *(void *)(v0 + 88) = 0;
  return _swift_task_switch(sub_10024E474, 0, 0);
}

uint64_t sub_10024E474()
{
  *(void *)(v0 + 96) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10024E500, v2, v1);
}

uint64_t sub_10024E500()
{
  uint64_t v1 = v0[2];
  swift_release();
  *(void *)(swift_task_alloc() + 16) = v1;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  return _swift_task_switch(sub_10024E5C0, v2, v3);
}

uint64_t sub_10024E5C0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10024E62C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10024E698()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10024E704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SwipeToDismissModifier();
  __chkstk_darwin(v4 - 8);
  uint64_t v33 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContentView();
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v32 + 64);
  __chkstk_darwin(v6);
  uint64_t v8 = sub_10000F214(&qword_100526AC0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_10000F214(&qword_100526AC8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517F58 != -1)
  {
    uint64_t v31 = v13;
    swift_once();
    uint64_t v13 = v31;
  }
  if (byte_10055E408 == 1)
  {
    uint64_t v31 = v13;
    uint64_t v16 = a1 + *(int *)(v6 + 144);
    uint64_t v17 = *(void *)(v16 + 16);
    long long v34 = *(_OWORD *)v16;
    uint64_t v35 = v17;
    sub_10000F214(&qword_10051D550);
    State.wrappedValue.getter();
    uint64_t v18 = v37;
    if (v37)
    {
      uint64_t v30 = v36;
      sub_1002ADE24(a1, (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v19 = *(unsigned __int8 *)(v32 + 80);
      uint64_t v32 = v9;
      uint64_t v20 = v12;
      uint64_t v21 = v8;
      uint64_t v22 = a2;
      uint64_t v23 = (v19 + 16) & ~v19;
      uint64_t v24 = swift_allocObject();
      uint64_t v25 = v24 + v23;
      a2 = v22;
      uint64_t v8 = v21;
      uint64_t v12 = v20;
      uint64_t v9 = v32;
      sub_1002AA830((uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v25, (uint64_t (*)(void))type metadata accessor for ContentView);
      swift_retain();
      uint64_t v26 = v33;
      sub_10008E040(1, 0, (uint64_t)sub_1002AA6EC, v24, v33);
      sub_1002ADE24(v26, (uint64_t)v11 + *(int *)(v8 + 36), (uint64_t (*)(void))type metadata accessor for SwipeToDismissModifier);
      *uint64_t v11 = v30;
      v11[1] = v18;
      swift_bridgeObjectRetain();
      sub_1002ADE8C(v26, (uint64_t (*)(void))type metadata accessor for SwipeToDismissModifier);
      swift_bridgeObjectRelease();
      swift_release();
      sub_10000FC34((uint64_t)v11, (uint64_t)v15, &qword_100526AC0);
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v15, v27, 1, v8);
    sub_10000FC34((uint64_t)v15, a2, &qword_100526AC8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(a2, 0, 1, v12);
  }
  else
  {
    char v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    return v28(a2, 1, 1, v12);
  }
}

uint64_t sub_10024EB70()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10024EBD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v3 = sub_10000F214(&qword_100526C48);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100526C50);
  __chkstk_darwin(v6 - 8);
  uint64_t v67 = (uint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100526C58);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000F214(&qword_100526C60) - 8;
  __chkstk_darwin(v70);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000F214(&qword_100526C68) - 8;
  __chkstk_darwin(v73);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v72 = (uint64_t)&v67 - v17;
  uint64_t v18 = sub_10000F214(&qword_100526C70);
  __chkstk_darwin(v18 - 8);
  uint64_t v71 = (uint64_t)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v67 - v21;
  uint64_t v23 = sub_10000F214(&qword_100526C78);
  __chkstk_darwin(v23 - 8);
  uint64_t v69 = (uint64_t)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v68 = (uint64_t)&v67 - v26;
  sub_10024F188((uint64_t)&v67 - v26);
  *(void *)uint64_t v22 = static HorizontalAlignment.center.getter();
  *((void *)v22 + 1) = 0;
  v22[16] = 1;
  uint64_t v27 = sub_10000F214(&qword_100526C80);
  sub_100255318(a1, (uint64_t)&v22[*(int *)(v27 + 44)]);
  *(void *)uint64_t v5 = static VerticalAlignment.bottom.getter();
  *((void *)v5 + 1) = 0;
  v5[16] = 0;
  sub_10000F214(&qword_100526C88);
  sub_10024FD10(a1);
  uint64_t v28 = static Alignment.center.getter();
  uint64_t v29 = v67;
  sub_10022576C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v67, 0.0, 1, 0.0, 1, v28, v30, &qword_100526C48, &qword_100526C50);
  sub_10000FBD8((uint64_t)v5, &qword_100526C48);
  char v31 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  sub_10000FB74(v29, (uint64_t)v11, &qword_100526C50);
  uint64_t v40 = &v11[*(int *)(v9 + 44)];
  *uint64_t v40 = v31;
  *((void *)v40 + 1) = v33;
  *((void *)v40 + 2) = v35;
  *((void *)v40 + 3) = v37;
  *((void *)v40 + 4) = v39;
  v40[40] = 0;
  sub_10000FBD8(v29, &qword_100526C50);
  char v41 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  sub_10000FB74((uint64_t)v11, (uint64_t)v13, &qword_100526C58);
  int v50 = &v13[*(int *)(v70 + 44)];
  *int v50 = v41;
  *((void *)v50 + 1) = v43;
  *((void *)v50 + 2) = v45;
  *((void *)v50 + 3) = v47;
  *((void *)v50 + 4) = v49;
  v50[40] = 0;
  sub_10000FBD8((uint64_t)v11, &qword_100526C58);
  LOBYTE(v11) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  sub_10000FB74((uint64_t)v13, (uint64_t)v15, &qword_100526C60);
  uint64_t v59 = &v15[*(int *)(v73 + 44)];
  *uint64_t v59 = (char)v11;
  *((void *)v59 + 1) = v52;
  *((void *)v59 + 2) = v54;
  *((void *)v59 + 3) = v56;
  *((void *)v59 + 4) = v58;
  v59[40] = 0;
  sub_10000FBD8((uint64_t)v13, &qword_100526C60);
  uint64_t v60 = v72;
  sub_10000FC34((uint64_t)v15, v72, &qword_100526C68);
  uint64_t v61 = v68;
  uint64_t v62 = v69;
  sub_10000FB74(v68, v69, &qword_100526C78);
  uint64_t v63 = v71;
  sub_10000FB74((uint64_t)v22, v71, &qword_100526C70);
  sub_10000FB74(v60, (uint64_t)v15, &qword_100526C68);
  uint64_t v64 = v74;
  sub_10000FB74(v62, v74, &qword_100526C78);
  uint64_t v65 = sub_10000F214(&qword_100526C90);
  sub_10000FB74(v63, v64 + *(int *)(v65 + 48), &qword_100526C70);
  sub_10000FB74((uint64_t)v15, v64 + *(int *)(v65 + 64), &qword_100526C68);
  sub_10000FBD8(v60, &qword_100526C68);
  sub_10000FBD8((uint64_t)v22, &qword_100526C70);
  sub_10000FBD8(v61, &qword_100526C78);
  sub_10000FBD8((uint64_t)v15, &qword_100526C68);
  sub_10000FBD8(v63, &qword_100526C70);
  return sub_10000FBD8(v62, &qword_100526C78);
}

uint64_t sub_10024F188@<X0>(uint64_t a1@<X8>)
{
  uint64_t v110 = sub_10000F214(&qword_10051CD90);
  __chkstk_darwin(v110);
  uint64_t v3 = (char *)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_10000F214(&qword_10051FC20);
  __chkstk_darwin(v104);
  uint64_t v105 = (uint64_t *)((char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Capsule();
  __chkstk_darwin(v5 - 8);
  uint64_t v106 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000F214(&qword_100526F80);
  __chkstk_darwin(v103);
  uint64_t v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_10000F214(&qword_100526F88);
  __chkstk_darwin(v109);
  uint64_t v108 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100526F90);
  __chkstk_darwin(v10);
  uint64_t v107 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v87 - v13;
  uint64_t v111 = sub_10000F214(&qword_100526F98);
  __chkstk_darwin(v111);
  uint64_t v112 = (uint64_t)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AppConfiguration();
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  uint64_t v23 = *(int *)(v20 + 28);
  uint64_t v24 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74((uint64_t)&v22[v23 + *(int *)(v24 + 72)], (uint64_t)v18, &qword_10051E070);
  sub_1002ADE8C((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v25 = type metadata accessor for URL();
  LODWORD(v22) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v18, 1, v25);
  sub_10000FBD8((uint64_t)v18, &qword_10051E070);
  if (v22 != 1) {
    goto LABEL_7;
  }
  if (qword_100517D48 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_10055E060;
  swift_getKeyPath();
  uint64_t v121 = v26;
  sub_1002AB13C(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v27 = *(void **)(v26 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation);
  if (!v27) {
    goto LABEL_7;
  }
  [v27 clientLocation];
  if (v122)
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v28 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v30 = v29;
    char v32 = v31 & 1;
    static Font.subheadline.getter();
    uint64_t v33 = Text.font(_:)();
    uint64_t v101 = a1;
    uint64_t v34 = v33;
    float v99 = v3;
    uint64_t v36 = v35;
    uint64_t v102 = v10;
    char v38 = v37;
    int v100 = v14;
    swift_release();
    sub_100012FAC(v28, v30, v32);
    swift_bridgeObjectRelease();
    static Font.Weight.medium.getter();
    uint64_t v92 = Text.fontWeight(_:)();
    uint64_t v91 = v39;
    uint64_t v93 = v40;
    LOBYTE(v28) = v41 & 1;
    sub_100012FAC(v34, v36, v38 & 1);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v90 = static Color.white.getter();
    int v88 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    int v89 = static Edge.Set.vertical.getter();
    EdgeInsets.init(_all:)();
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    uint64_t v58 = v57;
    char v120 = v28;
    LOBYTE(v34) = v28;
    char v119 = 0;
    char v116 = 0;
    char v113 = 0;
    uint64_t v59 = static Color.red.getter();
    uint64_t v60 = enum case for RoundedCornerStyle.continuous(_:);
    unsigned int v96 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v95 = type metadata accessor for RoundedCornerStyle();
    uint64_t v61 = *(void *)(v95 - 8);
    uint64_t v94 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 104);
    uint64_t v97 = v61 + 104;
    uint64_t v62 = (uint64_t)v106;
    v94(v106, v60, v95);
    uint64_t v63 = v104;
    uint64_t v64 = v105;
    uint64_t v65 = (uint64_t)v105 + *(int *)(v104 + 52);
    float v98 = &type metadata accessor for Capsule;
    sub_1002ADE24(v62, v65, (uint64_t (*)(void))&type metadata accessor for Capsule);
    *uint64_t v64 = v59;
    *(_WORD *)((char *)v64 + *(int *)(v63 + 56)) = 256;
    sub_10000FB74((uint64_t)v64, (uint64_t)&v8[*(int *)(v103 + 36)], &qword_10051FC20);
    uint64_t v66 = v92;
    uint64_t v67 = v91;
    *(void *)uint64_t v8 = v92;
    *((void *)v8 + 1) = v67;
    v8[16] = v120;
    *(_DWORD *)(v8 + 17) = v121;
    *((_DWORD *)v8 + 5) = *(_DWORD *)((char *)&v121 + 3);
    *((void *)v8 + 3) = v93;
    *((void *)v8 + 4) = KeyPath;
    *((void *)v8 + 5) = 1;
    v8[48] = v119;
    *(_DWORD *)(v8 + 49) = *(_DWORD *)v118;
    *((_DWORD *)v8 + 13) = *(_DWORD *)&v118[3];
    *((void *)v8 + 7) = v90;
    v8[64] = v88;
    *((_DWORD *)v8 + 17) = *(_DWORD *)&v117[3];
    *(_DWORD *)(v8 + 65) = *(_DWORD *)v117;
    *((void *)v8 + 9) = v44;
    *((void *)v8 + 10) = v46;
    *((void *)v8 + 11) = v48;
    *((void *)v8 + 12) = v50;
    v8[104] = v116;
    *(_DWORD *)(v8 + 105) = *(_DWORD *)v115;
    *((_DWORD *)v8 + 27) = *(_DWORD *)&v115[3];
    v8[112] = v89;
    int v68 = *(_DWORD *)v114;
    *((_DWORD *)v8 + 29) = *(_DWORD *)&v114[3];
    *(_DWORD *)(v8 + 113) = v68;
    *((void *)v8 + 15) = v52;
    *((void *)v8 + 16) = v54;
    *((void *)v8 + 17) = v56;
    *((void *)v8 + 18) = v58;
    v8[152] = v113;
    swift_retain();
    sub_1000807A8(v66, v67, v34);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10000FBD8((uint64_t)v64, &qword_10051FC20);
    sub_1002ADE8C(v62, (uint64_t (*)(void))&type metadata accessor for Capsule);
    swift_release();
    sub_100012FAC(v66, v67, v34);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v69 = static Alignment.center.getter();
    uint64_t v71 = v70;
    uint64_t v72 = (uint64_t)v108;
    uint64_t v73 = (uint64_t)&v108[*(int *)(v109 + 36)];
    v94((char *)v62, v96, v95);
    static Color.red.getter();
    uint64_t v74 = Color.opacity(_:)();
    swift_release();
    uint64_t v75 = (uint64_t)v99;
    sub_1002ADE24(v62, (uint64_t)v99, (uint64_t (*)(void))v98);
    uint64_t v76 = v75 + *(int *)(v110 + 36);
    *(void *)uint64_t v76 = v74;
    *(_OWORD *)(v76 + 8) = xmmword_100440680;
    *(void *)(v76 + 24) = 0x402E000000000000;
    sub_1002ADE8C(v62, (uint64_t (*)(void))&type metadata accessor for Capsule);
    static UnitPoint.center.getter();
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    sub_10000FB74(v75, v73, &qword_10051CD90);
    float v81 = (int64x2_t *)(v73 + *(int *)(sub_10000F214(&qword_10051CDA0) + 36));
    *float v81 = vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL);
    v81[1].i64[0] = v78;
    v81[1].i64[1] = v80;
    sub_10000FBD8(v75, &qword_10051CD90);
    int v82 = (uint64_t *)(v73 + *(int *)(sub_10000F214(&qword_10051CDA8) + 36));
    *int v82 = v69;
    v82[1] = v71;
    sub_10000FC34((uint64_t)v8, v72, &qword_100526F80);
    sub_1002ADB84();
    uint64_t v83 = v107;
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8(v72, &qword_100526F88);
    uint64_t v84 = (uint64_t)v83;
    uint64_t v85 = (uint64_t)v100;
    sub_10000FC34(v84, (uint64_t)v100, &qword_100526F90);
    sub_10000FB74(v85, v112, &qword_100526F90);
    swift_storeEnumTagMultiPayload();
    sub_1002ADAD8();
    _ConditionalContent<>.init(storage:)();
    return sub_10000FBD8(v85, &qword_100526F90);
  }
  else
  {
LABEL_7:
    swift_storeEnumTagMultiPayload();
    sub_1002ADAD8();
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t sub_10024FD10(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100526C98);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000F214(&qword_100526CA0);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = a1 + *(int *)(type metadata accessor for ContentView() + 76);
  char v9 = *(unsigned char *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  LOBYTE(v15[0]) = v9;
  v15[1] = v10;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v14 == 1)
  {
    sub_10024FFC4((uint64_t)v15);
    static AnyTransition.opacity.getter();
    uint64_t v13 = 0;
    uint64_t v14 = 0x4018000000000000;
    sub_10017183C();
    static AnyTransition.modifier<A>(active:identity:)();
    uint64_t v11 = AnyTransition.combined(with:)();
    swift_release();
    swift_release();
    memcpy(v7, v15, 0x110uLL);
    v7[34] = v11;
    v7[35] = nullsub_2;
    v7[36] = 0;
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_100526CA8);
    sub_1002AB184();
    sub_1002AB2C0(&qword_100526CE8, &qword_100526C98, &qword_100526CF0, &qword_100526CF8);
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    sub_1002502A0(a1, v4);
    sub_10000FB74((uint64_t)v4, (uint64_t)v7, &qword_100526C98);
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_100526CA8);
    sub_1002AB184();
    sub_1002AB2C0(&qword_100526CE8, &qword_100526C98, &qword_100526CF0, &qword_100526CF8);
    _ConditionalContent<>.init(storage:)();
    return sub_10000FBD8((uint64_t)v4, &qword_100526C98);
  }
}

uint64_t sub_10024FFC4@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100526D00);
  State.projectedValue.getter();
  sub_10000F214(&qword_100526678);
  FocusState.projectedValue.getter();
  uint64_t v41 = v53;
  char v40 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  char v35 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  FocusState.projectedValue.getter();
  uint64_t v37 = *((void *)&v53 + 1);
  uint64_t v38 = v53;
  char v36 = v54;
  char v39 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  long long v18 = v53;
  long long v42 = v53;
  uint64_t v19 = *((void *)&v54 + 1);
  uint64_t v20 = v54;
  long long v43 = v54;
  uint64_t v21 = *((void *)&v53 + 1);
  long long v44 = v53;
  char v22 = v54;
  LOBYTE(v45) = v54;
  long long v46 = 0uLL;
  *((void *)&v45 + 1) = nullsub_2;
  LOBYTE(v47) = v40;
  *((void *)&v47 + 1) = v3;
  *(void *)&long long v48 = v5;
  *((void *)&v48 + 1) = v7;
  *(void *)&long long v49 = v9;
  BYTE8(v49) = 0;
  LOBYTE(v50) = v35;
  *((void *)&v50 + 1) = v11;
  *(void *)uint64_t v51 = v13;
  *(void *)&v51[8] = v15;
  *(void *)&v51[16] = v17;
  v51[24] = 0;
  long long v23 = v47;
  *(_OWORD *)(a1 + 64) = 0uLL;
  *(_OWORD *)(a1 + 80) = v23;
  long long v24 = v42;
  long long v25 = v43;
  long long v26 = v45;
  *(_OWORD *)(a1 + 32) = v44;
  *(_OWORD *)(a1 + 48) = v26;
  *(_OWORD *)a1 = v24;
  *(_OWORD *)(a1 + 16) = v25;
  long long v27 = v48;
  long long v28 = v49;
  *(_OWORD *)(a1 + 153) = *(_OWORD *)&v51[9];
  long long v29 = *(_OWORD *)v51;
  *(_OWORD *)(a1 + 128) = v50;
  *(_OWORD *)(a1 + 144) = v29;
  *(_OWORD *)(a1 + 96) = v27;
  *(_OWORD *)(a1 + 112) = v28;
  char v52 = 0;
  *(void *)(a1 + 176) = v38;
  *(void *)(a1 + 184) = v37;
  *(unsigned char *)(a1 + 192) = v36;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = nullsub_2;
  *(unsigned char *)(a1 + 224) = v39;
  *(void *)(a1 + 232) = v30;
  *(void *)(a1 + 240) = v31;
  *(void *)(a1 + 248) = v32;
  *(void *)(a1 + 256) = v33;
  *(unsigned char *)(a1 + 264) = 0;
  sub_100189BFC((uint64_t)&v42);
  long long v53 = v18;
  *(void *)&long long v54 = v20;
  *((void *)&v54 + 1) = v19;
  uint64_t v55 = v41;
  uint64_t v56 = v21;
  char v57 = v22;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = nullsub_2;
  char v61 = v40;
  uint64_t v62 = v3;
  uint64_t v63 = v5;
  uint64_t v64 = v7;
  uint64_t v65 = v9;
  char v66 = 0;
  char v67 = v35;
  uint64_t v68 = v11;
  uint64_t v69 = v13;
  uint64_t v70 = v15;
  uint64_t v71 = v17;
  char v72 = 0;
  return sub_1002AB354((uint64_t)&v53);
}

uint64_t sub_1002502A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v271 = a2;
  uint64_t v242 = sub_10000F214(&qword_100526D08);
  __chkstk_darwin(v242);
  uint64_t v243 = (_OWORD *)((char *)&v200 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_10000F214(&qword_100526D10);
  uint64_t v221 = *(void *)(v4 - 8);
  uint64_t v222 = v4;
  __chkstk_darwin(v4);
  uint64_t v220 = (char *)&v200 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = sub_10000F214(&qword_100526D18);
  __chkstk_darwin(v224);
  uint64_t v225 = (char *)&v200 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100526D20);
  uint64_t v226 = *(void *)(v7 - 8);
  uint64_t v227 = v7;
  __chkstk_darwin(v7);
  uint64_t v223 = (char *)&v200 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v228 = sub_10000F214(&qword_100526D28);
  __chkstk_darwin(v228);
  uint64_t v230 = (char *)&v200 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = sub_10000F214(&qword_100526D30);
  __chkstk_darwin(v231);
  uint64_t v229 = (char *)&v200 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100526D38);
  uint64_t v234 = *(void *)(v11 - 8);
  uint64_t v235 = v11;
  __chkstk_darwin(v11);
  uint64_t v233 = (char *)&v200 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = sub_10000F214(&qword_100526D40);
  __chkstk_darwin(v239);
  uint64_t v232 = (char *)&v200 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v236 = (uint64_t)&v200 - v15;
  uint64_t v16 = sub_10000F214(&qword_100526D48);
  __chkstk_darwin(v16 - 8);
  uint64_t v241 = (uint64_t)&v200 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v200 - v19;
  uint64_t v21 = sub_10000F214(&qword_100526D50);
  __chkstk_darwin(v21 - 8);
  long long v23 = (char *)&v200 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v269 = (uint64_t)&v200 - v25;
  uint64_t v26 = sub_10000F214(&qword_100526D58);
  uint64_t v260 = *(void *)(v26 - 8);
  uint64_t v261 = v26;
  __chkstk_darwin(v26);
  uint64_t v258 = (char *)&v200 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v255 = sub_10000F214(&qword_100526D60);
  __chkstk_darwin(v255);
  uint64_t v259 = (char *)&v200 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v257 = sub_10000F214(&qword_100526D68);
  __chkstk_darwin(v257);
  uint64_t v268 = (uint64_t)&v200 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v256 = (uint64_t)&v200 - v31;
  __chkstk_darwin(v32);
  uint64_t v279 = (uint64_t)&v200 - v33;
  uint64_t v277 = sub_10000F214(&qword_100526D70);
  __chkstk_darwin(v277);
  uint64_t v278 = (_OWORD *)((char *)&v200 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = type metadata accessor for Locale();
  __chkstk_darwin(v35 - 8);
  uint64_t v238 = (char *)&v200 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v37 - 8);
  uint64_t v237 = (char *)&v200 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for ContentView();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(void *)(v40 + 64);
  __chkstk_darwin(v39);
  uint64_t v274 = (uint64_t)&v200 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000F214(&qword_100526D78);
  uint64_t v205 = *(void *)(v42 - 8);
  uint64_t v206 = v42;
  __chkstk_darwin(v42);
  long long v44 = (char *)&v200 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000F214(&qword_100526D80);
  uint64_t v207 = *(void *)(v45 - 8);
  uint64_t v208 = v45;
  __chkstk_darwin(v45);
  unint64_t v204 = (char *)&v200 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = sub_10000F214(&qword_100526D88);
  __chkstk_darwin(v209);
  uint64_t v210 = (char *)&v200 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000F214(&qword_100526D90);
  uint64_t v212 = *(void *)(v48 - 8);
  uint64_t v213 = v48;
  __chkstk_darwin(v48);
  uint64_t v211 = (char *)&v200 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = sub_10000F214(&qword_100526D98);
  __chkstk_darwin(v214);
  uint64_t v216 = (char *)&v200 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v217 = sub_10000F214(&qword_100526DA0);
  __chkstk_darwin(v217);
  uint64_t v215 = (char *)&v200 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000F214(&qword_100526DA8);
  uint64_t v245 = *(void *)(v52 - 8);
  uint64_t v246 = v52;
  __chkstk_darwin(v52);
  uint64_t v219 = (char *)&v200 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = sub_10000F214(&qword_100526DB0);
  __chkstk_darwin(v218);
  uint64_t v248 = (char *)&v200 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v244 = sub_10000F214(&qword_100526DB8);
  __chkstk_darwin(v244);
  uint64_t v249 = (uint64_t)&v200 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = sub_10000F214(&qword_100526DC0);
  __chkstk_darwin(v251);
  uint64_t v247 = (uint64_t)&v200 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  uint64_t v250 = (uint64_t)&v200 - v58;
  uint64_t v59 = sub_10000F214(&qword_100526DC8);
  __chkstk_darwin(v59 - 8);
  uint64_t v253 = (uint64_t)&v200 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v61);
  v252 = (char *)&v200 - v62;
  uint64_t v63 = sub_10000F214(&qword_100526DD0);
  __chkstk_darwin(v63 - 8);
  uint64_t v276 = (uint64_t)&v200 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  char v67 = (char *)&v200 - v66;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v267 = v289;
  int v266 = v290;
  uint64_t v265 = v291;
  int v264 = v292;
  uint64_t v262 = v294;
  uint64_t v263 = v293;
  uint64_t v273 = v39;
  uint64_t v68 = *(int *)(v39 + 152);
  uint64_t v280 = a1;
  uint64_t v69 = a1 + v68;
  LOBYTE(v68) = *(unsigned char *)(a1 + v68);
  uint64_t v254 = v69;
  uint64_t v70 = *(void *)(v69 + 8);
  LOBYTE(v281) = v68;
  *((void *)&v281 + 1) = v70;
  uint64_t v272 = sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  uint64_t v270 = v23;
  uint64_t v240 = v20;
  uint64_t v275 = v67;
  if (v301 == 1)
  {
    if (qword_100517FE0 != -1) {
      swift_once();
    }
    uint64_t v202 = v40;
    uint64_t v203 = v41;
    if (byte_10055E431 == 1)
    {
      uint64_t v200 = type metadata accessor for ContentView;
      uint64_t v201 = v44;
      uint64_t v71 = v280;
      uint64_t v72 = v274;
      sub_1002ADE24(v280, v274, (uint64_t (*)(void))type metadata accessor for ContentView);
      unint64_t v73 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v74 = swift_allocObject();
      sub_1002AA830(v72, v74 + v73, (uint64_t (*)(void))type metadata accessor for ContentView);
      sub_10000F214(&qword_100526EA8);
      sub_1002ABD54();
      Button.init(action:label:)();
      uint64_t v75 = v71;
      sub_1002ADE24(v71, v72, (uint64_t (*)(void))v200);
      uint64_t v76 = swift_allocObject();
      sub_1002AA830(v72, v76 + v73, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v77 = sub_100013AA8(&qword_100526E98, &qword_100526D78);
      uint64_t v78 = v204;
      uint64_t v79 = v206;
      uint64_t v80 = v201;
      View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v205 + 8))(v80, v79);
      *(void *)&long long v281 = v79;
      *((void *)&v281 + 1) = v77;
      swift_getOpaqueTypeConformance2();
      uint64_t v81 = (uint64_t)v210;
      uint64_t v82 = v208;
      View.accessibilityIdentifier(_:)();
      (*(void (**)(char *, uint64_t))(v207 + 8))(v78, v82);
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      *(void *)&long long v281 = String.init(localized:table:bundle:locale:comment:)();
      *((void *)&v281 + 1) = v83;
      sub_1002ABC2C();
      sub_1002AB7D4();
      uint64_t v84 = v211;
      View.buttonStyle<A>(_:)();
      swift_bridgeObjectRelease();
      sub_10000FBD8(v81, &qword_100526D88);
      uint64_t v85 = v75 + *(int *)(v273 + 168);
      char v86 = *(unsigned char *)v85;
      uint64_t v87 = *(void *)(v85 + 8);
      LOBYTE(v281) = v86;
      *((void *)&v281 + 1) = v87;
      State.wrappedValue.getter();
      LOBYTE(v80) = v301;
      uint64_t v89 = v212;
      uint64_t v88 = v213;
      uint64_t v90 = (uint64_t)v216;
      (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v216, v84, v213);
      *(unsigned char *)(v90 + *(int *)(v214 + 36)) = (_BYTE)v80;
      (*(void (**)(char *, uint64_t))(v89 + 8))(v84, v88);
      LocalizedStringKey.init(stringLiteral:)();
      sub_1002ABB64(&qword_100526E88, &qword_100526D98, &qword_100526D88, (void (*)(void))sub_1002ABC2C);
      uint64_t v91 = (uint64_t)v215;
      View.accessibilityLabel(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000FBD8(v90, &qword_100526D98);
      sub_1002ABA8C();
      uint64_t v92 = v219;
      View.accessibilityShowsLargeContentViewer()();
      sub_10000FBD8(v91, &qword_100526DA0);
      static AnyTransition.opacity.getter();
      *(void *)&long long v281 = 0x4018000000000000;
      uint64_t v301 = 0;
      sub_10017183C();
      static AnyTransition.modifier<A>(active:identity:)();
      uint64_t v93 = AnyTransition.combined(with:)();
      swift_release();
      swift_release();
      uint64_t v95 = v245;
      uint64_t v94 = v246;
      uint64_t v96 = (uint64_t)v248;
      (*(void (**)(char *, char *, uint64_t))(v245 + 16))(v248, v92, v246);
      *(void *)(v96 + *(int *)(v218 + 36)) = v93;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v94);
      LOBYTE(v92) = sub_100252914();
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v98 = swift_allocObject();
      *(unsigned char *)(v98 + 16) = v92 & 1;
      uint64_t v99 = v249;
      sub_10000FB74(v96, v249, &qword_100526DB0);
      int v100 = (uint64_t *)(v99 + *(int *)(v244 + 36));
      *int v100 = KeyPath;
      v100[1] = (uint64_t)sub_1002B4934;
      v100[2] = v98;
      sub_10000FBD8(v96, &qword_100526DB0);
      if (sub_100252914()) {
        double v101 = 0.3;
      }
      else {
        double v101 = 1.0;
      }
      uint64_t v102 = v247;
      sub_10000FB74(v99, v247, &qword_100526DB8);
      *(double *)(v102 + *(int *)(v251 + 36)) = v101;
      sub_10000FBD8(v99, &qword_100526DB8);
      uint64_t v103 = v250;
      sub_10000FC34(v102, v250, &qword_100526DC0);
      sub_10000FB74(v103, (uint64_t)v278, &qword_100526DC0);
      swift_storeEnumTagMultiPayload();
      sub_10000F214(&qword_100526E08);
      sub_10028E890(&qword_100526E68, &qword_100526DC0, (void (*)(void))sub_1002AB918);
      sub_100080F2C(&qword_100526E48, &qword_100526E08);
      uint64_t v112 = (uint64_t)v252;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v103, &qword_100526DC0);
    }
    else
    {
      uint64_t v105 = static Alignment.center.getter();
      sub_100226BC8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v281, 0.0, 1, 0.0, 1, v105, v106, 0, 1);
      long long v107 = v286;
      uint64_t v108 = v278;
      v278[4] = v285;
      v108[5] = v107;
      long long v109 = v288;
      v108[6] = v287;
      v108[7] = v109;
      long long v110 = v282;
      *uint64_t v108 = v281;
      v108[1] = v110;
      long long v111 = v284;
      v108[2] = v283;
      v108[3] = v111;
      swift_storeEnumTagMultiPayload();
      sub_10000F214(&qword_100526E08);
      sub_10028E890(&qword_100526E68, &qword_100526DC0, (void (*)(void))sub_1002AB918);
      sub_100080F2C(&qword_100526E48, &qword_100526E08);
      uint64_t v112 = (uint64_t)v252;
      _ConditionalContent<>.init(storage:)();
    }
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v278 = (_OWORD *)v295;
    char v113 = v296;
    uint64_t v114 = v297;
    char v115 = v298;
    uint64_t v116 = v299;
    uint64_t v117 = v300;
    uint64_t v118 = v253;
    sub_10000FB74(v112, v253, &qword_100526DC8);
    uint64_t v119 = v112;
    uint64_t v120 = v276;
    sub_10000FB74(v118, v276, &qword_100526DC8);
    uint64_t v121 = v120 + *(int *)(sub_10000F214(&qword_100526EA0) + 48);
    *(void *)uint64_t v121 = 0;
    *(unsigned char *)(v121 + 8) = 1;
    *(void *)(v121 + 16) = v278;
    *(unsigned char *)(v121 + 24) = v113;
    *(void *)(v121 + 32) = v114;
    *(unsigned char *)(v121 + 40) = v115;
    *(void *)(v121 + 48) = v116;
    *(void *)(v121 + 56) = v117;
    sub_10000FBD8(v119, &qword_100526DC8);
    sub_10000FBD8(v118, &qword_100526DC8);
    uint64_t v122 = sub_10000F214(&qword_100526DD8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56))(v120, 0, 1, v122);
    sub_10000FC34(v120, (uint64_t)v275, &qword_100526DD0);
    uint64_t v40 = v202;
    uint64_t v41 = v203;
  }
  else
  {
    uint64_t v104 = sub_10000F214(&qword_100526DD8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v67, 1, 1, v104);
  }
  uint64_t v123 = v274;
  sub_1002ADE24(v280, v274, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v124 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v125 = (v124 + 16) & ~v124;
  uint64_t v217 = v124 | 7;
  uint64_t v218 = v125 + v41;
  uint64_t v126 = swift_allocObject();
  uint64_t v219 = (char *)v125;
  sub_1002AA830(v123, v126 + v125, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1000BB7DC((uint64_t)sub_1002AB3C8, v126, (uint64_t)&v301);
  uint64_t v127 = v301;
  LODWORD(v249) = v302;
  uint64_t v248 = v303;
  uint64_t v278 = (_OWORD *)v304;
  LODWORD(v247) = v305;
  uint64_t v128 = v306;
  uint64_t v250 = v306;
  uint64_t v251 = v301;
  LODWORD(v246) = v307;
  BOOL v129 = v308;
  uint64_t v130 = v310;
  v252 = v308;
  uint64_t v253 = v310;
  uint64_t v244 = v311;
  uint64_t v245 = v309;
  uint64_t v277 = v312;
  static UnitPoint.center.getter();
  static AnyTransition.scale(scale:anchor:)();
  static AnyTransition.opacity.getter();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static AnyTransition.blur(radius:)();
  uint64_t v131 = AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  *(void *)&long long v281 = v127;
  BYTE8(v281) = v249;
  *(void *)&long long v282 = v248;
  *((void *)&v282 + 1) = v278;
  LOBYTE(v283) = v247;
  *((void *)&v283 + 1) = v128;
  LOBYTE(v284) = v246;
  *((void *)&v284 + 1) = v129;
  *(void *)&long long v285 = v245;
  *((void *)&v285 + 1) = v130;
  *(void *)&long long v286 = v244;
  *((void *)&v286 + 1) = v277;
  *(void *)&long long v287 = v131;
  uint64_t v132 = (uint64_t *)(v280 + *(int *)(v273 + 44));
  uint64_t v134 = *v132;
  uint64_t v133 = v132[1];
  uint64_t v313 = v134;
  uint64_t v314 = v133;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  sub_10000F214(&qword_100526DE0);
  type metadata accessor for CameraController();
  sub_1002AB464();
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  int v135 = v258;
  View.environment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(v126) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v137 = v136;
  uint64_t v139 = v138;
  uint64_t v141 = v140;
  uint64_t v143 = v142;
  uint64_t v145 = (uint64_t)v259;
  uint64_t v144 = v260;
  uint64_t v146 = v261;
  (*(void (**)(char *, char *, uint64_t))(v260 + 16))(v259, v135, v261);
  uint64_t v147 = v145 + *(int *)(v255 + 36);
  *(unsigned char *)uint64_t v147 = v126;
  *(void *)(v147 + 8) = v137;
  *(void *)(v147 + 16) = v139;
  *(void *)(v147 + 24) = v141;
  *(void *)(v147 + 32) = v143;
  *(unsigned char *)(v147 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v144 + 8))(v135, v146);
  if (sub_100254348()) {
    double v148 = 1.0;
  }
  else {
    double v148 = 0.0;
  }
  uint64_t v149 = v256;
  sub_10000FB74(v145, v256, &qword_100526D60);
  *(double *)(v149 + *(int *)(v257 + 36)) = v148;
  sub_10000FBD8(v145, &qword_100526D60);
  sub_10000FC34(v149, v279, &qword_100526D68);
  uint64_t v150 = *(void *)(v254 + 8);
  LOBYTE(v281) = *(unsigned char *)v254;
  *((void *)&v281 + 1) = v150;
  State.wrappedValue.getter();
  if (v313 == 1)
  {
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v151 = v313;
    char v152 = v314;
    uint64_t v153 = v315;
    LODWORD(v278) = v316;
    uint64_t v277 = v317;
    uint64_t v273 = v318;
    if (qword_100517FE8 != -1) {
      swift_once();
    }
    if (byte_10055E432 == 1)
    {
      uint64_t v154 = v274;
      sub_1002ADE24(v280, v274, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v155 = swift_allocObject();
      sub_1002AA830(v154, (uint64_t)&v219[v155], (uint64_t (*)(void))type metadata accessor for ContentView);
      sub_10000F214(&qword_100526E58);
      sub_10028E890(&qword_100526E60, &qword_100526E58, (void (*)(void))sub_100150EA0);
      uint64_t v156 = v220;
      Button.init(action:label:)();
      sub_100013AA8(&qword_100526E30, &qword_100526D10);
      uint64_t v157 = (uint64_t)v225;
      uint64_t v158 = v222;
      View.accessibilityIdentifier(_:)();
      (*(void (**)(char *, uint64_t))(v221 + 8))(v156, v158);
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      *(void *)&long long v281 = String.init(localized:table:bundle:locale:comment:)();
      *((void *)&v281 + 1) = v159;
      sub_1002AB704();
      sub_1002AB7D4();
      uint64_t v160 = v223;
      View.buttonStyle<A>(_:)();
      swift_bridgeObjectRelease();
      sub_10000FBD8(v157, &qword_100526D18);
      uint64_t v162 = v226;
      uint64_t v161 = v227;
      uint64_t v163 = *(void (**)(char *, char *, uint64_t))(v226 + 16);
      uint64_t v280 = v151;
      uint64_t v164 = (uint64_t)v230;
      v163(v230, v160, v227);
      uint64_t v274 = v153;
      *(unsigned char *)(v164 + *(int *)(v228 + 36)) = 0;
      (*(void (**)(char *, uint64_t))(v162 + 8))(v160, v161);
      LocalizedStringKey.init(stringLiteral:)();
      sub_1002ABB64(&qword_100526E20, &qword_100526D28, &qword_100526D18, (void (*)(void))sub_1002AB704);
      uint64_t v165 = (uint64_t)v229;
      View.accessibilityLabel(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000FBD8(v164, &qword_100526D28);
      sub_1002AB62C();
      uint64_t v166 = v233;
      View.accessibilityShowsLargeContentViewer()();
      sub_10000FBD8(v165, &qword_100526D30);
      LOBYTE(v162) = byte_10055E432;
      uint64_t v167 = swift_getKeyPath();
      uint64_t v168 = swift_allocObject();
      *(unsigned char *)(v168 + 16) = (v162 & 1) == 0;
      uint64_t v170 = v234;
      uint64_t v169 = v235;
      uint64_t v171 = (uint64_t)v232;
      (*(void (**)(char *, char *, uint64_t))(v234 + 16))(v232, v166, v235);
      uint64_t v172 = (uint64_t *)(v171 + *(int *)(v239 + 36));
      *uint64_t v172 = v167;
      v172[1] = (uint64_t)sub_1002AB900;
      v172[2] = v168;
      (*(void (**)(char *, uint64_t))(v170 + 8))(v166, v169);
      uint64_t v173 = v236;
      sub_10000FC34(v171, v236, &qword_100526D40);
      sub_10000FB74(v173, (uint64_t)v243, &qword_100526D40);
      swift_storeEnumTagMultiPayload();
      sub_10000F214(&qword_100526E08);
      sub_1002AB558();
      sub_100080F2C(&qword_100526E48, &qword_100526E08);
      uint64_t v174 = (uint64_t)v240;
      uint64_t v153 = v274;
      _ConditionalContent<>.init(storage:)();
      uint64_t v175 = v173;
      uint64_t v151 = v280;
      sub_10000FBD8(v175, &qword_100526D40);
    }
    else
    {
      uint64_t v179 = static Alignment.center.getter();
      sub_100226BC8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v281, 0.0, 1, 0.0, 1, v179, v180, 0, 1);
      long long v181 = v286;
      long long v182 = v243;
      v243[4] = v285;
      v182[5] = v181;
      long long v183 = v288;
      v182[6] = v287;
      v182[7] = v183;
      long long v184 = v282;
      *long long v182 = v281;
      v182[1] = v184;
      long long v185 = v284;
      v182[2] = v283;
      v182[3] = v185;
      swift_storeEnumTagMultiPayload();
      sub_10000F214(&qword_100526E08);
      sub_1002AB558();
      sub_100080F2C(&qword_100526E48, &qword_100526E08);
      uint64_t v174 = (uint64_t)v240;
      _ConditionalContent<>.init(storage:)();
    }
    uint64_t v186 = v241;
    sub_10000FB74(v174, v241, &qword_100526D48);
    uint64_t v178 = (uint64_t)v270;
    *uint64_t v270 = 0;
    *(unsigned char *)(v178 + 8) = 1;
    *(void *)(v178 + 16) = v151;
    *(unsigned char *)(v178 + 24) = v152;
    *(void *)(v178 + 32) = v153;
    *(unsigned char *)(v178 + 40) = (_BYTE)v278;
    uint64_t v187 = v273;
    *(void *)(v178 + 48) = v277;
    *(void *)(v178 + 56) = v187;
    uint64_t v188 = sub_10000F214(&qword_100526E50);
    sub_10000FB74(v186, v178 + *(int *)(v188 + 48), &qword_100526D48);
    sub_10000FBD8(v174, &qword_100526D48);
    sub_10000FBD8(v186, &qword_100526D48);
    uint64_t v189 = sub_10000F214(&qword_100526DF8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v189 - 8) + 56))(v178, 0, 1, v189);
    uint64_t v177 = v269;
    sub_10000FC34(v178, v269, &qword_100526D50);
  }
  else
  {
    uint64_t v176 = sub_10000F214(&qword_100526DF8);
    uint64_t v177 = v269;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v176 - 8) + 56))(v269, 1, 1, v176);
    uint64_t v178 = (uint64_t)v270;
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v280 = v281;
  LODWORD(v278) = BYTE8(v281);
  uint64_t v277 = v282;
  LODWORD(v274) = BYTE8(v282);
  uint64_t v272 = *((void *)&v283 + 1);
  uint64_t v273 = v283;
  uint64_t v190 = (uint64_t)v275;
  uint64_t v191 = v276;
  sub_10000FB74((uint64_t)v275, v276, &qword_100526DD0);
  uint64_t v192 = v279;
  uint64_t v193 = v268;
  sub_10000FB74(v279, v268, &qword_100526D68);
  sub_10000FB74(v177, v178, &qword_100526D50);
  uint64_t v194 = v271;
  *uint64_t v271 = 0;
  *((unsigned char *)v194 + 8) = 1;
  v194[2] = v267;
  *((unsigned char *)v194 + 24) = v266;
  v194[4] = v265;
  *((unsigned char *)v194 + 40) = v264;
  uint64_t v195 = v262;
  v194[6] = v263;
  v194[7] = v195;
  uint64_t v196 = (int *)sub_10000F214(&qword_100526E00);
  sub_10000FB74(v191, (uint64_t)v194 + v196[12], &qword_100526DD0);
  sub_10000FB74(v193, (uint64_t)v194 + v196[16], &qword_100526D68);
  sub_10000FB74(v178, (uint64_t)v194 + v196[20], &qword_100526D50);
  uint64_t v197 = (char *)v194 + v196[24];
  *(void *)uint64_t v197 = 0;
  v197[8] = 1;
  *((void *)v197 + 2) = v280;
  v197[24] = (char)v278;
  *((void *)v197 + 4) = v277;
  v197[40] = v274;
  uint64_t v198 = v272;
  *((void *)v197 + 6) = v273;
  *((void *)v197 + 7) = v198;
  sub_10000FBD8(v177, &qword_100526D50);
  sub_10000FBD8(v192, &qword_100526D68);
  sub_10000FBD8(v190, &qword_100526DD0);
  sub_10000FBD8(v178, &qword_100526D50);
  sub_10000FBD8(v193, &qword_100526D68);
  return sub_10000FBD8(v191, &qword_100526DD0);
}

uint64_t sub_100252510(uint64_t a1)
{
  if (qword_100517E00 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000F378(v2, (uint64_t)qword_10055E118);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ask ChatGPT selected", v5, 2u);
    swift_slowDealloc();
  }

  sub_100248F10();
  char v6 = *(unsigned char *)(a1 + 56);
  uint64_t v7 = swift_retain();
  sub_10027D7D0(v7, v6, 0xD000000000000010, 0x800000010042A340);
  swift_release();
  sub_1003CA3E8(10, 5);

  return swift_release();
}

uint64_t sub_100252654@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DynamicTypeSize();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051ED40);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = Image.init(_internalSystemName:)();
  uint64_t v11 = static Font.title3.getter();
  uint64_t KeyPath = swift_getKeyPath();
  v14[1] = v10;
  _OWORD v14[2] = KeyPath;
  v14[3] = v11;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DynamicTypeSize.large(_:), v2);
  sub_10000F214(&qword_10051C1A8);
  sub_10008D63C();
  View.dynamicTypeSize(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(a1, v9, v6);
  *(_OWORD *)(a1 + *(int *)(sub_10000F214(&qword_100526EA8) + 36)) = xmmword_10044DA90;
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1002528A8()
{
  return State.wrappedValue.setter();
}

id sub_100252914()
{
  uint64_t v5 = *(void *)(v0 + *(int *)(type metadata accessor for ContentView() + 88));
  sub_10000F214(&qword_1005263C8);
  State.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v5 != 1) {
    return 0;
  }
  id v1 = [self standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 BOOLForKey:v2];

  return v3;
}

void sub_100252A3C(int a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v4 - 8);
  uint64_t v150 = (uint64_t)&v131 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v6 - 8);
  uint64_t v151 = (uint64_t)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for CVBundle(0);
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v152 = (uint64_t)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_10000F214(&qword_100525F50);
  __chkstk_darwin(v160);
  uint64_t v137 = (uint64_t)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v147 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_1005261F0);
  uint64_t v142 = *(void *)(v12 - 8);
  __chkstk_darwin(v12 - 8);
  uint64_t v145 = (uint64_t)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = v13;
  __chkstk_darwin(v14);
  uint64_t v146 = (char *)&v131 - v15;
  uint64_t v159 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v140 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v144 = (uint64_t)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = v16;
  __chkstk_darwin(v17);
  uint64_t v155 = (uint64_t)&v131 - v18;
  uint64_t v19 = (int *)type metadata accessor for ContentView();
  uint64_t v138 = *((void *)v19 - 1);
  uint64_t v20 = *(void *)(v138 + 64);
  __chkstk_darwin(v19);
  uint64_t v156 = (uint64_t)&v131 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v139 = (uint64_t)&v131 - v22;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v131 - v24;
  uint64_t v26 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v131 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v131 - v30;
  uint64_t v158 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v158);
  uint64_t v33 = (char *)&v131 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v154 = (char *)&v131 - v35;
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v131 - v37;
  uint64_t v39 = a2 + v19[37];
  char v40 = *(unsigned char *)v39;
  uint64_t v41 = *(void *)(v39 + 8);
  LOBYTE(v164) = v40;
  uint64_t v165 = v41;
  uint64_t v153 = sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v163)
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10000F378(v42, (uint64_t)qword_10055E2E0);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Ignoring shutter button while content is blurred", v45, 2u);
      swift_slowDealloc();
    }

    return;
  }
  int v133 = a1;
  if (qword_100517F40 != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for LoggingSignposter(0);
  sub_10000F378(v46, (uint64_t)qword_10055E3E0);
  sub_10018B700("ShutterButton", 13, 2, 1);
  uint64_t v136 = a2 + v19[10];
  State.wrappedValue.getter();
  sub_10000FB74((uint64_t)&v38[*(int *)(v158 + 20) + (uint64_t)*(int *)(v159 + 72)], (uint64_t)v31, &qword_10051E070);
  sub_1002ADE8C((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v47 = type metadata accessor for URL();
  uint64_t v132 = *(void *)(v47 - 8);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
  uint64_t v135 = v47;
  uint64_t v134 = v48;
  int v49 = ((uint64_t (*)(char *, uint64_t))v48)(v31, 1);
  sub_10000FBD8((uint64_t)v31, &qword_10051E070);
  uint64_t v157 = a2;
  sub_1002ADE24(a2, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v49 == 1)
  {
    sub_1002ADE8C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for ContentView);
  }
  else
  {
    uint64_t v50 = &v25[v19[11]];
    uint64_t v52 = *(void *)v50;
    uint64_t v51 = *((void *)v50 + 1);
    uint64_t v164 = v52;
    uint64_t v165 = v51;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    uint64_t v53 = v163;
    swift_getKeyPath();
    uint64_t v164 = v53;
    sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v54 = *(unsigned __int8 *)(v53 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
    swift_release();
    sub_1002ADE8C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for ContentView);
    if (v54 != 1)
    {
      uint64_t v92 = (uint64_t)v154;
      State.wrappedValue.getter();
      uint64_t v93 = v155;
      sub_1002ADE24(v92 + *(int *)(v158 + 20), v155, type metadata accessor for CameraControllerConfiguration);
      sub_1002ADE8C(v92, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
      uint64_t v94 = v140 + 56;
      uint64_t v95 = (uint64_t)v146;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v146, 1, 1, v159);
      uint64_t v96 = type metadata accessor for TaskPriority();
      uint64_t v97 = (uint64_t)v147;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v147, 1, 1, v96);
      uint64_t v98 = v139;
      sub_1002ADE24(v157, v139, (uint64_t (*)(void))type metadata accessor for ContentView);
      uint64_t v99 = v145;
      sub_10000FB74(v95, v145, &qword_1005261F0);
      uint64_t v100 = v144;
      sub_1002ADE24(v93, v144, type metadata accessor for CameraControllerConfiguration);
      type metadata accessor for MainActor();
      uint64_t v101 = static MainActor.shared.getter();
      unint64_t v102 = (*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
      unint64_t v103 = (v20 + *(unsigned __int8 *)(v142 + 80) + v102) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
      unint64_t v104 = (v143 + *(unsigned __int8 *)(v94 + 24) + v103) & ~(unint64_t)*(unsigned __int8 *)(v94 + 24);
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = v101;
      *(void *)(v105 + 24) = &protocol witness table for MainActor;
      sub_1002AA830(v98, v105 + v102, (uint64_t (*)(void))type metadata accessor for ContentView);
      sub_10000FC34(v99, v105 + v103, &qword_1005261F0);
      sub_1002AA830(v100, v105 + v104, type metadata accessor for CameraControllerConfiguration);
      sub_100064D5C(v97, (uint64_t)&unk_100526EB8, v105);
      swift_release();
      sub_10000FBD8(v95, &qword_1005261F0);
      sub_1002ADE8C(v155, type metadata accessor for CameraControllerConfiguration);
      sub_100246FEC();
      return;
    }
  }
  uint64_t v55 = v136;
  State.wrappedValue.getter();
  sub_10000FB74((uint64_t)&v33[*(int *)(v158 + 20) + (uint64_t)*(int *)(v159 + 88)], (uint64_t)v28, &qword_10051E070);
  sub_1002ADE8C((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  int v56 = v134(v28, 1, v135);
  sub_10000FBD8((uint64_t)v28, &qword_10051E070);
  uint64_t v57 = v157;
  uint64_t v58 = v156;
  sub_1002ADE24(v157, v156, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v56 == 1)
  {
    sub_1002ADE8C(v58, (uint64_t (*)(void))type metadata accessor for ContentView);
  }
  else
  {
    uint64_t v59 = v58 + v19[52];
    char v60 = *(unsigned char *)v59;
    uint64_t v61 = *(void *)(v59 + 8);
    LOBYTE(v164) = v60;
    uint64_t v165 = v61;
    State.wrappedValue.getter();
    sub_1002ADE8C(v58, (uint64_t (*)(void))type metadata accessor for ContentView);
    if (v163)
    {
      uint64_t v62 = (uint64_t)v154;
      State.wrappedValue.getter();
      uint64_t v63 = v158;
      uint64_t v64 = v155;
      sub_1002ADE24(v62 + *(int *)(v158 + 20), v155, type metadata accessor for CameraControllerConfiguration);
      sub_1002ADE8C(v62, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
      uint64_t v65 = v64 + *(int *)(v159 + 88);
      sub_10000FBD8(v65, &qword_10051E070);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v132 + 56))(v65, 1, 1, v135);
      uint64_t v66 = v137;
      sub_10000FB74(v55, v137, &qword_100525F50);
      State.wrappedValue.getter();
      sub_1002ABEA8(v64, v62 + *(int *)(v63 + 20));
      State.wrappedValue.setter();
      sub_10000FBD8(v66, &qword_100525F50);
      sub_1002ADE8C(v64, type metadata accessor for CameraControllerConfiguration);
      return;
    }
  }
  char v67 = (uint64_t *)(v57 + v19[11]);
  uint64_t v68 = v67[1];
  uint64_t v164 = *v67;
  uint64_t v165 = v68;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v69 = v163;
  swift_getKeyPath();
  uint64_t v164 = v69;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v70 = *(void *)(v69 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v71 = *(void *)(v69 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  int v72 = *(unsigned __int8 *)(v69 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v70, v71, *(unsigned char *)(v69 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  if (v72 != 1)
  {
    sub_1000BC2F4(v70, v71, v72);
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    sub_10000F378(v86, (uint64_t)qword_10055E2E0);
    uint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v89 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Shutter button requested resume", v89, 2u);
      swift_slowDealloc();
    }

    sub_100246FEC();
    uint64_t v90 = v67[1];
    uint64_t v164 = *v67;
    uint64_t v165 = v90;
    State.wrappedValue.getter();
    uint64_t v91 = v163;
    swift_getKeyPath();
    uint64_t v164 = v91;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v91 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) != 1) {
      sub_100414568();
    }
    goto LABEL_44;
  }
  uint64_t v73 = v67[1];
  uint64_t v164 = *v67;
  uint64_t v165 = v73;
  State.wrappedValue.getter();
  uint64_t v74 = v163;
  swift_getKeyPath();
  uint64_t v164 = v74;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v75 = v74 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  uint64_t v76 = v150;
  sub_10000FB74(v75, v150, &qword_10051B760);
  uint64_t v77 = sub_10000F214(&qword_10051A060);
  uint64_t v78 = 1;
  int v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 48))(v76, 1, v77);
  uint64_t v80 = v151;
  if (!v79)
  {
    sub_1002ADE24(v76, v151, type metadata accessor for CVBundle);
    uint64_t v78 = 0;
  }
  sub_10000FBD8(v76, &qword_10051B760);
  uint64_t v81 = v148;
  uint64_t v82 = v78;
  uint64_t v83 = v149;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 56))(v80, v82, 1, v149);
  swift_release();
  int v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v80, 1, v83);
  uint64_t v85 = v152;
  if (v84 == 1)
  {
    sub_10000FBD8(v80, &qword_10051B768);
LABEL_39:
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v119 = type metadata accessor for Logger();
    sub_10000F378(v119, (uint64_t)qword_10055E2E0);
    uint64_t v120 = Logger.logObject.getter();
    os_log_type_t v121 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v120, v121))
    {
      uint64_t v122 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v122 = 0;
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "Shutter button is halting camera with no actions", v122, 2u);
      swift_slowDealloc();
    }

    uint64_t v123 = v67[1];
    uint64_t v164 = *v67;
    uint64_t v165 = v123;
    State.wrappedValue.getter();
    sub_1004152E0();
    swift_release();
    uint64_t v124 = v157;
    sub_100254068();
    LOBYTE(v124) = *(unsigned char *)(v124 + 56);
    uint64_t v125 = swift_retain();
    sub_10027D7D0(v125, v124, 0xD000000000000010, 0x800000010042A340);
    swift_release();
    sub_1003CA3E8(13, v133);
LABEL_44:
    swift_release();
    return;
  }
  sub_1002AA830(v80, v152, type metadata accessor for CVBundle);
  uint64_t v106 = sub_1001A365C();
  __chkstk_darwin(v106);
  *(&v131 - 2) = v85;
  uint64_t v108 = sub_1001C1D38((uint64_t)sub_1002ABE88, (uint64_t)(&v131 - 4), v107);
  if (!*(void *)(v108 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1002ADE8C(v85, type metadata accessor for CVBundle);
    goto LABEL_39;
  }
  sub_10004ECF4((long long *)(v108 + 32), (uint64_t)&v163);
  sub_100050964((uint64_t)&v163, (void (*)(void, void, void, void, void))sub_10004E998);
  swift_bridgeObjectRelease();
  long long v109 = sub_1001A365C();
  __chkstk_darwin(v109);
  *(&v131 - 2) = v85;
  uint64_t v111 = *(void *)(sub_1001C1D38((uint64_t)sub_1002B48A8, (uint64_t)(&v131 - 4), v110) + 16);
  swift_bridgeObjectRelease();
  if (v111 != 1)
  {
    sub_1002ADE8C(v85, type metadata accessor for CVBundle);
    sub_100050964((uint64_t)&v163, (void (*)(void, void, void, void, void))sub_10004EA10);
    goto LABEL_39;
  }
  sub_10004ECF4(&v163, (uint64_t)&v164);
  if (v166 == 1)
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v112 = type metadata accessor for Logger();
    sub_10000F378(v112, (uint64_t)qword_10055E2E0);
    char v113 = Logger.logObject.getter();
    os_log_type_t v114 = static os_log_type_t.debug.getter();
    BOOL v115 = os_log_type_enabled(v113, v114);
    int v116 = v133;
    if (v115)
    {
      uint64_t v117 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v117 = 0;
      _os_log_impl((void *)&_mh_execute_header, v113, v114, "Shutter button is taking an action without halting", v117, 2u);
      swift_slowDealloc();
    }

    uint64_t v118 = v152;
    sub_10024D244(&v163, v152, v116, 0);
    sub_100050964((uint64_t)&v163, (void (*)(void, void, void, void, void))sub_10004EA10);
    sub_1002ADE8C(v118, type metadata accessor for CVBundle);
  }
  else
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v126 = type metadata accessor for Logger();
    sub_10000F378(v126, (uint64_t)qword_10055E2E0);
    uint64_t v127 = Logger.logObject.getter();
    os_log_type_t v128 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v127, v128))
    {
      BOOL v129 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v129 = 0;
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "Shutter button is taking an action and halting", v129, 2u);
      swift_slowDealloc();
    }

    uint64_t v130 = v67[1];
    uint64_t v161 = *v67;
    uint64_t v162 = v130;
    State.wrappedValue.getter();
    sub_1004152E0();
    swift_release();
    sub_10024D244(&v163, v85, v133, 1);
    sub_100050964((uint64_t)&v163, (void (*)(void, void, void, void, void))sub_10004EA10);
    sub_100254068();
    sub_1002ADE8C(v85, type metadata accessor for CVBundle);
  }
}

uint64_t sub_100254068()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000F378(v9, (uint64_t)qword_10055E2E0);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Showing capture effects", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = v1 + *(int *)(v2 + 160);
  char v14 = *(unsigned char *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  unsigned char v21[16] = v14;
  uint64_t v22 = v15;
  v21[15] = 1;
  sub_10000F214(&qword_1005262F8);
  State.wrappedValue.setter();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
  sub_1002ADE24(v1, (uint64_t)&v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v17 = static MainActor.shared.getter();
  unint64_t v18 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v5, v19 + v18, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1000D0B80((uint64_t)v8, (uint64_t)&unk_100526420, v19);
  return swift_release();
}

uint64_t sub_100254348()
{
  uint64_t v1 = type metadata accessor for ContentView();
  __chkstk_darwin(v1);
  uint64_t v50 = (uint64_t)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v46 = (uint64_t)v41 - v4;
  uint64_t v5 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v5 - 8);
  uint64_t v45 = (uint64_t)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v41 - v8;
  uint64_t v10 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v10);
  uint64_t v43 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v14 = (char *)v41 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v41 - v16;
  uint64_t v48 = v0;
  uint64_t v49 = v1;
  uint64_t v44 = v0 + *(int *)(v1 + 40);
  uint64_t v18 = sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  uint64_t v19 = *(int *)(v10 + 20);
  uint64_t v20 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74((uint64_t)&v17[v19 + *(int *)(v20 + 72)], (uint64_t)v9, &qword_10051E070);
  sub_1002ADE8C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48);
  int v47 = v22(v9, 1, v21);
  sub_10000FBD8((uint64_t)v9, &qword_10051E070);
  v41[1] = v18;
  State.wrappedValue.getter();
  uint64_t v44 = v10;
  uint64_t v23 = *(int *)(v10 + 20);
  uint64_t v42 = v20;
  uint64_t v24 = v45;
  sub_10000FB74((uint64_t)&v14[v23 + *(int *)(v20 + 88)], v45, &qword_10051E070);
  sub_1002ADE8C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  int v25 = v22((char *)v24, 1, v21);
  sub_10000FBD8(v24, &qword_10051E070);
  if (qword_100518000 != -1) {
    swift_once();
  }
  int v26 = byte_10055E435;
  uint64_t v27 = v48;
  uint64_t v28 = v46;
  sub_1002ADE24(v48, v46, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v26 == 1)
  {
    sub_1002ADE8C(v28, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v29 = v50;
    sub_1002ADE24(v27, v50, (uint64_t (*)(void))type metadata accessor for ContentView);
    int v30 = v47;
  }
  else
  {
    uint64_t v31 = (uint64_t)v43;
    State.wrappedValue.getter();
    sub_1002ADE8C(v28, (uint64_t (*)(void))type metadata accessor for ContentView);
    int v32 = *(unsigned __int8 *)(v31 + *(int *)(v44 + 20) + *(int *)(v42 + 56));
    sub_1002ADE8C(v31, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    uint64_t v29 = v50;
    sub_1002ADE24(v27, v50, (uint64_t (*)(void))type metadata accessor for ContentView);
    int v30 = v47;
    if (v32 != 1) {
      goto LABEL_8;
    }
  }
  if (v30 == 1)
  {
    sub_1002ADE8C(v29, (uint64_t (*)(void))type metadata accessor for ContentView);
    char v33 = 0;
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v34 = v29 + *(int *)(v49 + 208);
  char v35 = *(unsigned char *)v34;
  uint64_t v36 = *(void *)(v34 + 8);
  char v51 = v35;
  uint64_t v52 = v36;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  sub_1002ADE8C(v29, (uint64_t (*)(void))type metadata accessor for ContentView);
  char v33 = v53 ^ 1;
LABEL_9:
  int v37 = byte_10055E435;
  if (v30 == 1) {
    int v37 = 0;
  }
  char v38 = v37 | v33;
  unsigned int v39 = v37 ^ 1;
  if (v38) {
    return v39;
  }
  else {
    return v25 == 1;
  }
}

uint64_t sub_100254830(uint64_t a1)
{
  type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  swift_getKeyPath();
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v2 = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  swift_release();
  if (v2 == 1) {
    sub_100254068();
  }
  State.wrappedValue.getter();
  sub_1004152E0();
  swift_release();
  sub_1002549C0();
  char v3 = *(unsigned char *)(a1 + 56);
  uint64_t v4 = swift_retain();
  sub_10027D7D0(v4, v3, 0xD000000000000010, 0x800000010042A340);
  swift_release();
  sub_1003CA3E8(11, 5);
  return swift_release();
}

uint64_t sub_1002549C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t *)(v1 + *(int *)(v3 + 52));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  v22[1] = v12;
  v22[2] = v11;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  sub_1004152E0();
  swift_release();
  id v13 = [self standardUserDefaults];
  NSString v14 = String._bridgeToObjectiveC()();
  unsigned int v15 = [v13 BOOLForKey:v14];

  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
  sub_1002ADE24(v1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v17 = static MainActor.shared.getter();
  unint64_t v18 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v6, v19 + v18, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v15) {
    uint64_t v20 = &unk_100526358;
  }
  else {
    uint64_t v20 = &unk_100526348;
  }
  sub_100064D5C((uint64_t)v9, (uint64_t)v20, v19);
  return swift_release();
}

__n128 sub_100254C94@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(_:bundle:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v6 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v7 = v16;
  char v8 = v17;
  uint64_t v9 = v18;
  char v10 = v19;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 56) = v20;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t sub_100254E34()
{
  return State.wrappedValue.setter();
}

void sub_100254EA0()
{
  type metadata accessor for ContentView();
  sub_10000F214(&qword_1005263C8);
  State.wrappedValue.getter();
  type metadata accessor for GenerativeAssistantSettingsUserDefaults();
  char v0 = static GenerativeAssistantSettingsUserDefaults.isEnabled()();
  swift_release();
  if (v0) {
    sub_100248F10();
  }
}

uint64_t sub_100254F2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RequestType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GenerativeAssistantSettingsOnboarding();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[3] = type metadata accessor for ContentView();
  v17[4] = sub_1002AB13C(&qword_100526C40, (void (*)(uint64_t))type metadata accessor for ContentView);
  uint64_t v12 = sub_100040120(v17);
  sub_1002ADE24(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ContentView);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for RequestType.visualIntelligenceCamera(_:), v4);
  GenerativeAssistantSettingsOnboarding.init(enablementDelegate:requestType:)();
  uint64_t v13 = static SafeAreaRegions.all.getter();
  LOBYTE(a1) = static Edge.Set.all.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a2, v11, v8);
  uint64_t v14 = a2 + *(int *)(sub_10000F214(&qword_100526C10) + 36);
  *(void *)uint64_t v14 = v13;
  *(unsigned char *)(v14 + 8) = a1;
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

id sub_100255164@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v8 = a1 + *(int *)(v7 + 92);
  char v9 = *(unsigned char *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v23 = v9;
  uint64_t v24 = v10;
  sub_10000F214(&qword_100522EA0);
  State.projectedValue.getter();
  uint64_t v11 = v25;
  uint64_t v12 = v26;
  char v13 = v27;
  sub_1002ADE24(a1, (uint64_t)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = swift_allocObject();
  sub_1002AA830((uint64_t)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v16 = (objc_class *)type metadata accessor for SiriSetupViewController.Delegate();
  char v17 = (char *)objc_allocWithZone(v16);
  uint64_t v18 = &v17[OBJC_IVAR____TtCV6Tamale23SiriSetupViewControllerP33_801190BADA2CE0837A9561ED0AAB3DD18Delegate__showSiriOnboarding];
  *(void *)uint64_t v18 = v11;
  *((void *)v18 + 1) = v12;
  unsigned char v18[16] = v13;
  char v19 = (uint64_t (**)())&v17[OBJC_IVAR____TtCV6Tamale23SiriSetupViewControllerP33_801190BADA2CE0837A9561ED0AAB3DD18Delegate_completion];
  *char v19 = sub_100297868;
  v19[1] = (uint64_t (*)())v15;
  v22.receiver = v17;
  v22.super_class = v16;
  id result = [super init];
  *a2 = result;
  return result;
}

uint64_t sub_100255318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v187 = a2;
  uint64_t v172 = type metadata accessor for ControlSize();
  uint64_t v171 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v168 = (char *)&v148 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_10000F214(&qword_100526EC0);
  uint64_t v164 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  long long v163 = (char *)&v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100526EC8);
  __chkstk_darwin(v5 - 8);
  char v166 = (char *)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = sub_10000F214(&qword_100526ED0);
  __chkstk_darwin(v169);
  uint64_t v170 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = sub_10000F214(&qword_100526ED8);
  uint64_t v183 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v173 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v167 = (char *)&v148 - v10;
  __chkstk_darwin(v11);
  uint64_t v188 = (char *)&v148 - v12;
  uint64_t v13 = sub_10000F214(&qword_100526EE0);
  __chkstk_darwin(v13 - 8);
  uint64_t v190 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v189 = (uint64_t)&v148 - v16;
  uint64_t v17 = sub_10000F214(&qword_100526EE8);
  __chkstk_darwin(v17 - 8);
  uint64_t v186 = (uint64_t)&v148 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v194 = (uint64_t)&v148 - v20;
  uint64_t v21 = sub_10000F214(&qword_100526EF0);
  __chkstk_darwin(v21 - 8);
  uint64_t v185 = (uint64_t)&v148 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v193 = (uint64_t)&v148 - v24;
  uint64_t v25 = type metadata accessor for ContentView();
  uint64_t v174 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v156 = (uint64_t)&v148 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v154 = (uint64_t)&v148 - v28;
  __chkstk_darwin(v29);
  uint64_t v153 = (uint64_t)&v148 - v30;
  __chkstk_darwin(v31);
  uint64_t v179 = (uint64_t)&v148 - v32;
  uint64_t v175 = v33;
  __chkstk_darwin(v34);
  uint64_t v177 = (uint64_t)&v148 - v35;
  uint64_t v36 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v36 - 8);
  uint64_t v162 = (uint64_t)&v148 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v176 = (uint64_t)&v148 - v39;
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v148 - v41;
  uint64_t v43 = type metadata accessor for AppConfiguration();
  uint64_t v192 = v43;
  __chkstk_darwin(v43);
  uint64_t v161 = (char *)&v148 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  uint64_t v155 = (char *)&v148 - v46;
  __chkstk_darwin(v47);
  uint64_t v49 = (char *)&v148 - v48;
  __chkstk_darwin(v50);
  uint64_t v52 = (char *)&v148 - v51;
  uint64_t v191 = v25;
  uint64_t v53 = *(int *)(v25 + 40);
  uint64_t v180 = a1;
  uint64_t v54 = a1 + v53;
  uint64_t v55 = sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  uint64_t v56 = *(int *)(v43 + 20);
  uint64_t v57 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74((uint64_t)&v52[v56 + *(int *)(v57 + 72)], (uint64_t)v42, &qword_10051E070);
  sub_1002ADE8C((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v58 = type metadata accessor for URL();
  uint64_t v59 = *(void *)(v58 - 8);
  char v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  uint64_t v61 = v59 + 48;
  int v178 = v60(v42, 1, v58);
  sub_10000FBD8((uint64_t)v42, &qword_10051E070);
  uint64_t v182 = v55;
  uint64_t v160 = v54;
  State.wrappedValue.getter();
  uint64_t v62 = *(int *)(v192 + 20);
  uint64_t v181 = v57;
  uint64_t v63 = (uint64_t)&v49[v62 + *(int *)(v57 + 88)];
  uint64_t v64 = v176;
  sub_10000FB74(v63, v176, &qword_10051E070);
  sub_1002ADE8C((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v159 = v58;
  uint64_t v158 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v60;
  uint64_t v157 = v61;
  int v65 = v60((char *)v64, 1, v58);
  int v66 = v65 != 1;
  sub_10000FBD8(v64, &qword_10051E070);
  if (qword_100518000 != -1) {
    swift_once();
  }
  int v67 = byte_10055E435;
  uint64_t v68 = v180;
  uint64_t v69 = v177;
  sub_1002ADE24(v180, v177, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v67 == 1)
  {
    sub_1002ADE8C(v69, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v70 = v179;
    int v71 = v178;
  }
  else
  {
    uint64_t v72 = (uint64_t)v155;
    State.wrappedValue.getter();
    sub_1002ADE8C(v69, (uint64_t (*)(void))type metadata accessor for ContentView);
    int v73 = *(unsigned __int8 *)(v72 + *(int *)(v192 + 20) + *(int *)(v181 + 56));
    sub_1002ADE8C(v72, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    BOOL v74 = v73 == 1;
    uint64_t v70 = v179;
    int v71 = v178;
    if (!v74)
    {
      sub_1002ADE24(v68, v179, (uint64_t (*)(void))type metadata accessor for ContentView);
      goto LABEL_9;
    }
  }
  sub_1002ADE24(v68, v70, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v71 == 1)
  {
    sub_1002ADE8C(v70, (uint64_t (*)(void))type metadata accessor for ContentView);
    int v75 = 1;
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v76 = v70 + *(int *)(v191 + 208);
  char v77 = *(unsigned char *)v76;
  unint64_t v78 = *(void *)(v76 + 8);
  LOBYTE(v197) = v77;
  unint64_t v198 = v78;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  sub_1002ADE8C(v70, (uint64_t (*)(void))type metadata accessor for ContentView);
  int v75 = v206;
  if (v65 == 1) {
    int v66 = 0;
  }
  else {
    int v66 = v206;
  }
LABEL_12:
  if (byte_10055E435 == 1 && v71 == 1)
  {
    if (v65 != 1)
    {
      int v79 = 0;
      goto LABEL_21;
    }
  }
  else if (v65 != 1)
  {
    int v79 = v66 ^ 1;
    if (v71 == 1) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  int v79 = 0;
  if (v71 == 1)
  {
LABEL_21:
    uint64_t v93 = (uint64_t)v190;
    uint64_t v94 = v189;
    uint64_t v96 = sub_10000F214(&qword_100526EF8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v193, 1, 1, v96);
    if (v79) {
      goto LABEL_22;
    }
LABEL_19:
    uint64_t v95 = sub_10000F214(&qword_10051C180);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v194, 1, 1, v95);
    goto LABEL_23;
  }
LABEL_18:
  LODWORD(v179) = v79;
  sub_1002569EC((uint64_t)&v206);
  unint64_t v80 = v207;
  uint64_t v155 = v206;
  uint64_t v176 = v207;
  uint64_t v81 = v209;
  uint64_t v152 = v208;
  uint64_t v177 = v209;
  uint64_t v82 = v211;
  uint64_t v151 = v210;
  int v150 = v212;
  int v178 = v75;
  uint64_t v83 = v153;
  sub_1002ADE24(v68, v153, (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v84 = (*(unsigned __int8 *)(v174 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80);
  uint64_t v149 = swift_allocObject();
  sub_1002AA830(v83, v149 + v84, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v85 = v154;
  sub_1002ADE24(v68, v154, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v86 = swift_allocObject();
  uint64_t v87 = v85;
  int v75 = v178;
  sub_1002AA830(v87, v86 + v84, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v197 = (uint64_t)v155;
  unint64_t v198 = v80;
  *(void *)&long long v199 = v152;
  *((void *)&v199 + 1) = v81;
  *(void *)&long long v200 = v151;
  *((void *)&v200 + 1) = v82;
  char v201 = v150;
  uint64_t v202 = sub_1002AC1AC;
  uint64_t v203 = v149;
  unint64_t v204 = sub_1002AC1C8;
  uint64_t v205 = v86;
  os_log_type_t v88 = (uint64_t *)(v68 + *(int *)(v191 + 44));
  uint64_t v90 = *v88;
  uint64_t v89 = v88[1];
  uint64_t v195 = v90;
  uint64_t v196 = v89;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  type metadata accessor for CameraController();
  sub_1002AC1E0();
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  uint64_t v91 = v193;
  View.environment<A>(_:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v92 = sub_10000F214(&qword_100526EF8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v91, 0, 1, v92);
  uint64_t v93 = (uint64_t)v190;
  uint64_t v94 = v189;
  if ((v179 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_22:
  uint64_t v197 = 0x6E6964726F636552;
  unint64_t v198 = 0xE900000000000067;
  long long v199 = xmmword_10044DAA0;
  long long v200 = xmmword_10044DAB0;
  char v201 = 1;
  sub_10008D4B0();
  uint64_t v97 = v194;
  View.accessibilityIdentifier(_:)();
  uint64_t v98 = sub_10000F214(&qword_10051C180);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v97, 0, 1, v98);
LABEL_23:
  if (v75)
  {
    uint64_t v99 = v156;
    sub_1002ADE24(v68, v156, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v100 = (*(unsigned __int8 *)(v174 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80);
    uint64_t v101 = swift_allocObject();
    uint64_t v102 = sub_1002AA830(v99, v101 + v100, (uint64_t (*)(void))type metadata accessor for ContentView);
    __chkstk_darwin(v102);
    sub_10000F214(&qword_100526F10);
    sub_1002ABF34();
    unint64_t v103 = v163;
    Button.init(action:label:)();
    sub_100013AA8(&qword_100526F30, &qword_100526EC0);
    uint64_t v104 = (uint64_t)v166;
    uint64_t v105 = v165;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v164 + 8))(v103, v105);
    uint64_t v106 = v171;
    uint64_t v107 = v168;
    uint64_t v108 = v172;
    (*(void (**)(char *, void, uint64_t))(v171 + 104))(v168, enum case for ControlSize.large(_:), v172);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v110 = (uint64_t)v170;
    uint64_t v111 = (uint64_t *)&v170[*(int *)(v169 + 36)];
    uint64_t v112 = sub_10000F214(&qword_100526F38);
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))((char *)v111 + *(int *)(v112 + 28), v107, v108);
    uint64_t *v111 = KeyPath;
    sub_10000FB74(v104, v110, &qword_100526EC8);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
    sub_10000FBD8(v104, &qword_100526EC8);
    char v113 = (uint64_t *)(v68 + *(int *)(v191 + 44));
    uint64_t v115 = *v113;
    unint64_t v114 = v113[1];
    uint64_t v197 = v115;
    unint64_t v198 = v114;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    type metadata accessor for CameraController();
    sub_1002AC038();
    sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    int v116 = v167;
    View.environment<A>(_:)();
    swift_release();
    sub_10000FBD8(v110, &qword_100526ED0);
    (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v188, v116, v184);
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v117 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v119 = v118;
    LODWORD(v180) = v120;
    uint64_t v191 = v121;
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v179 = v197;
    int v178 = v198;
    uint64_t v177 = v199;
    LODWORD(v176) = BYTE8(v199);
    uint64_t v174 = *((void *)&v200 + 1);
    uint64_t v175 = v200;
    uint64_t v122 = (uint64_t)v161;
    State.wrappedValue.getter();
    uint64_t v123 = v162;
    sub_10000FB74(v122 + *(int *)(v192 + 20) + (uint64_t)*(int *)(v181 + 88), v162, &qword_10051E070);
    sub_1002ADE8C(v122, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    int v124 = v158(v123, 1, v159);
    sub_10000FBD8(v123, &qword_10051E070);
    if (v124 == 1) {
      uint64_t v125 = static Color.white.getter();
    }
    else {
      uint64_t v125 = static Color.red.getter();
    }
    uint64_t v127 = v125;
    uint64_t v128 = v183;
    BOOL v129 = *(void (**)(char *, char *, uint64_t))(v183 + 16);
    uint64_t v130 = v173;
    uint64_t v131 = v184;
    v129(v173, v188, v184);
    uint64_t v132 = (uint64_t)v190;
    v129(v190, v130, v131);
    uint64_t v133 = v132 + *(int *)(sub_10000F214(&qword_100526F58) + 48);
    *(void *)uint64_t v133 = v117;
    *(void *)(v133 + 8) = v119;
    LOBYTE(v129) = v180 & 1;
    *(unsigned char *)(v133 + 16) = v180 & 1;
    uint64_t v134 = v119;
    uint64_t v135 = v179;
    *(void *)(v133 + 24) = v191;
    *(void *)(v133 + 32) = v135;
    *(unsigned char *)(v133 + 40) = v178;
    *(void *)(v133 + 48) = v177;
    *(unsigned char *)(v133 + 56) = v176;
    uint64_t v136 = v174;
    *(void *)(v133 + 64) = v175;
    *(void *)(v133 + 72) = v136;
    *(void *)(v133 + 80) = v127;
    sub_1000807A8(v117, v119, (char)v129);
    uint64_t v137 = *(void (**)(char *, uint64_t))(v128 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v137(v188, v131);
    uint64_t v93 = v132;
    sub_100012FAC(v117, v134, (char)v129);
    swift_release();
    swift_bridgeObjectRelease();
    v137(v130, v131);
    uint64_t v138 = sub_10000F214(&qword_100526F00);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v138 - 8) + 56))(v132, 0, 1, v138);
    uint64_t v94 = v189;
    sub_10000FC34(v132, v189, &qword_100526EE0);
  }
  else
  {
    uint64_t v126 = sub_10000F214(&qword_100526F00);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 56))(v94, 1, 1, v126);
  }
  uint64_t v139 = v193;
  uint64_t v140 = v185;
  sub_10000FB74(v193, v185, &qword_100526EF0);
  uint64_t v141 = v194;
  uint64_t v142 = v186;
  sub_10000FB74(v194, v186, &qword_100526EE8);
  sub_10000FB74(v94, v93, &qword_100526EE0);
  uint64_t v143 = v94;
  uint64_t v144 = v187;
  sub_10000FB74(v140, v187, &qword_100526EF0);
  uint64_t v145 = v93;
  uint64_t v146 = sub_10000F214(&qword_100526F08);
  sub_10000FB74(v142, v144 + *(int *)(v146 + 48), &qword_100526EE8);
  sub_10000FB74(v145, v144 + *(int *)(v146 + 64), &qword_100526EE0);
  sub_10000FBD8(v143, &qword_100526EE0);
  sub_10000FBD8(v141, &qword_100526EE8);
  sub_10000FBD8(v139, &qword_100526EF0);
  sub_10000FBD8(v145, &qword_100526EE0);
  sub_10000FBD8(v142, &qword_100526EE8);
  return sub_10000FBD8(v140, &qword_100526EF0);
}

uint64_t sub_1002569EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AppConfiguration();
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  uint64_t v12 = *(int *)(v8 + 28);
  uint64_t v13 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74((uint64_t)&v10[v12 + *(int *)(v13 + 40)], (uint64_t)v6, &qword_10051E070);
  sub_1002ADE8C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v14 = type metadata accessor for URL();
  char v15 = 1;
  LODWORD(v12) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v6, 1, v14);
  uint64_t result = sub_10000FBD8((uint64_t)v6, &qword_10051E070);
  if (v12 == 1)
  {
    uint64_t v17 = (uint64_t *)(v2 + *(int *)(v11 + 44));
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v27 = v19;
    uint64_t v28 = v18;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    uint64_t v20 = v29;
    swift_getKeyPath();
    uint64_t v27 = v20;
    sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v21 = *(unsigned __int8 *)(v20 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
    uint64_t result = swift_release();
    if (v21 == 1)
    {
      unint64_t v22 = 0xAC000000A680E267;
      uint64_t v23 = 0x6E6979616C706552;
      unint64_t v24 = 0xE90000000000006CLL;
      unint64_t v25 = 0x6C69662E79616C70;
    }
    else
    {
      char v15 = 0;
      unint64_t v22 = 0xE600000000000000;
      uint64_t v23 = 0x646573756150;
      unint64_t v24 = 0xEA00000000006C6CLL;
      unint64_t v25 = 0x69662E6573756170;
    }
  }
  else
  {
    unint64_t v22 = 0x800000010042AA80;
    unint64_t v24 = 0x800000010042AAA0;
    uint64_t v23 = 0x1000000000000011;
    unint64_t v25 = 0xD000000000000010;
  }
  *(void *)a1 = v23;
  *(void *)(a1 + 8) = v22;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v25;
  *(void *)(a1 + 40) = v24;
  *(unsigned char *)(a1 + 48) = v15;
  return result;
}

uint64_t sub_100256CE4(uint64_t a1)
{
  uint64_t v34 = a1;
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v44 = *(void *)(v1 - 8);
  uint64_t v43 = *(void *)(v44 + 64);
  __chkstk_darwin(v1);
  uint64_t v41 = (uint64_t)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v39 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_1005261F0);
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v40 = *(void *)(v42 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v45 = (uint64_t)&v34 - v8;
  uint64_t v36 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = *(void *)(v36 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v36);
  uint64_t v37 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = type metadata accessor for AppConfiguration();
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v34 - v19;
  sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  uint64_t v21 = (uint64_t)&v20[*(int *)(v15 + 28)];
  uint64_t v35 = v13;
  sub_1002ADE24(v21, (uint64_t)v13, type metadata accessor for CameraControllerConfiguration);
  sub_1002ADE8C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  State.wrappedValue.getter();
  uint64_t v22 = v45;
  sub_1002ADE24((uint64_t)&v17[*(int *)(v15 + 28)], v45, type metadata accessor for CameraControllerConfiguration);
  sub_1002ADE8C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v36);
  uint64_t v23 = type metadata accessor for TaskPriority();
  uint64_t v24 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v39, 1, 1, v23);
  uint64_t v25 = v41;
  sub_1002ADE24(v34, v41, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v26 = v38;
  sub_10000FB74(v22, v38, &qword_1005261F0);
  uint64_t v27 = v37;
  sub_1002ADE24((uint64_t)v13, v37, type metadata accessor for CameraControllerConfiguration);
  type metadata accessor for MainActor();
  uint64_t v28 = static MainActor.shared.getter();
  unint64_t v29 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  unint64_t v30 = (v43 + *(unsigned __int8 *)(v42 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  unint64_t v31 = (v40 + *(unsigned __int8 *)(v9 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v28;
  *(void *)(v32 + 24) = &protocol witness table for MainActor;
  sub_1002AA830(v25, v32 + v29, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_10000FC34(v26, v32 + v30, &qword_1005261F0);
  sub_1002AA830(v27, v32 + v31, type metadata accessor for CameraControllerConfiguration);
  sub_100064D5C(v24, (uint64_t)&unk_100526F68, v32);
  swift_release();
  sub_10000FBD8(v45, &qword_1005261F0);
  return sub_1002ADE8C((uint64_t)v35, type metadata accessor for CameraControllerConfiguration);
}

uint64_t sub_10025720C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppConfiguration();
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100525F50);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = type metadata accessor for ContentView();
  sub_10000FB74(a1 + *(int *)(v13 + 40), (uint64_t)v8, &qword_100525F50);
  State.wrappedValue.getter();
  uint64_t v14 = *(int *)(v3 + 28);
  uint64_t v15 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000F5DC((uint64_t)v11, (uint64_t)&v5[v14 + *(int *)(v15 + 72)], &qword_10051E070);
  State.wrappedValue.setter();
  return sub_10000FBD8((uint64_t)v8, &qword_100525F50);
}

uint64_t sub_1002573D4(uint64_t a1)
{
  uint64_t v42 = a1;
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v39 = *(void *)(v1 - 8);
  uint64_t v2 = *(void *)(v39 + 64);
  __chkstk_darwin(v1);
  uint64_t v41 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v40 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100525F50);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = type metadata accessor for AppConfiguration();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MKBGetDeviceLockState();
  if (v20 != 3 && v20)
  {
    __chkstk_darwin(v20);
    uint64_t v27 = v42;
    *(&v38 - 2) = v42;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
    uint64_t v28 = type metadata accessor for TaskPriority();
    uint64_t v29 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v40, 1, 1, v28);
    uint64_t v30 = (uint64_t)v41;
    sub_1002ADE24(v27, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for ContentView);
    type metadata accessor for MainActor();
    uint64_t v31 = static MainActor.shared.getter();
    unint64_t v32 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v31;
    *(void *)(v33 + 24) = &protocol witness table for MainActor;
    sub_1002AA830(v30, v33 + v32, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_100064D5C(v29, (uint64_t)&unk_100526F78, v33);
    return swift_release();
  }
  else
  {
    uint64_t v21 = v42 + *(int *)(v1 + 40);
    uint64_t v41 = v7;
    uint64_t v42 = v5;
    uint64_t v39 = v21;
    State.wrappedValue.getter();
    uint64_t v40 = (char *)v14;
    sub_1002ADE24((uint64_t)&v16[*(int *)(v14 + 20)], (uint64_t)v19, type metadata accessor for CameraControllerConfiguration);
    sub_1002ADE8C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    uint64_t v22 = (uint64_t)&v19[*(int *)(v17 + 88)];
    sub_10000FB74(v22, (uint64_t)v13, &qword_10051E070);
    uint64_t v23 = type metadata accessor for URL();
    uint64_t v24 = *(void *)(v23 - 8);
    int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v23);
    sub_10000FBD8((uint64_t)v13, &qword_10051E070);
    if (v25 == 1)
    {
      sub_1000929A0(6778732, (void *)0xE300000000000000, 0x6F69746365746564, 0xE90000000000006ELL, (uint64_t)v10);
      uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
      v26(v10, 0, 1, v23);
      sub_10000F5DC((uint64_t)v10, (uint64_t)&v19[*(int *)(v17 + 40)], &qword_10051E070);
      sub_1000929A0(7761773, (void *)0xE300000000000000, 0, 0xE000000000000000, (uint64_t)v10);
      v26(v10, 0, 1, v23);
      sub_10000F5DC((uint64_t)v10, v22, &qword_10051E070);
    }
    else
    {
      uint64_t v35 = (uint64_t)&v19[*(int *)(v17 + 40)];
      sub_10000FBD8(v35, &qword_10051E070);
      uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
      v36(v35, 1, 1, v23);
      sub_10000FBD8(v22, &qword_10051E070);
      v36(v22, 1, 1, v23);
    }
    uint64_t v37 = (uint64_t)v41;
    sub_10000FB74(v39, (uint64_t)v41, &qword_100525F50);
    State.wrappedValue.getter();
    sub_1002ABEA8((uint64_t)v19, (uint64_t)&v16[*((int *)v40 + 5)]);
    State.wrappedValue.setter();
    sub_10000FBD8(v37, &qword_100525F50);
    return sub_1002ADE8C((uint64_t)v19, type metadata accessor for CameraControllerConfiguration);
  }
}

uint64_t sub_100257A24()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100257AA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = type metadata accessor for Image.ResizingMode();
  uint64_t v36 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v4 - 8);
  uint64_t v41 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = type metadata accessor for AppConfiguration();
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v31 - v14;
  type metadata accessor for ContentView();
  uint64_t v39 = sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  uint64_t v16 = *(int *)(v10 + 28);
  uint64_t v38 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74((uint64_t)&v15[v16 + *(int *)(v38 + 88)], (uint64_t)v8, &qword_10051E070);
  uint64_t v37 = type metadata accessor for AppConfiguration;
  sub_1002ADE8C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v34 = v18 + 48;
  v33(v8, 1, v17);
  sub_10000FBD8((uint64_t)v8, &qword_10051E070);
  Image.init(systemName:)();
  uint64_t v19 = v36;
  uint64_t v20 = v40;
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v3, enum case for Image.ResizingMode.stretch(_:), v40);
  uint64_t v35 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v20);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v21 = v43;
  char v22 = v44;
  uint64_t v23 = v45;
  LODWORD(v40) = v46;
  uint64_t v36 = v47;
  uint64_t v32 = v48;
  State.wrappedValue.getter();
  uint64_t v24 = v41;
  sub_10000FB74((uint64_t)&v12[*(int *)(v10 + 28) + (uint64_t)*(int *)(v38 + 88)], v41, &qword_10051E070);
  sub_1002ADE8C((uint64_t)v12, (uint64_t (*)(void))v37);
  int v25 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v33)(v24, 1, v17);
  sub_10000FBD8(v24, &qword_10051E070);
  if (v25 == 1) {
    uint64_t v26 = static Color.white.getter();
  }
  else {
    uint64_t v26 = static Color.red.getter();
  }
  uint64_t v27 = v26;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v42 = v27;
  uint64_t result = AnyShapeStyle.init<A>(_:)();
  *(void *)a1 = v35;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v21;
  *(unsigned char *)(a1 + 32) = v22;
  *(void *)(a1 + 40) = v23;
  *(unsigned char *)(a1 + 48) = v40;
  uint64_t v30 = v32;
  *(void *)(a1 + 56) = v36;
  *(void *)(a1 + 64) = v30;
  *(void *)(a1 + 72) = KeyPath;
  *(void *)(a1 + 80) = result;
  return result;
}

uint64_t sub_100257F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  __chkstk_darwin(v4);
  uint64_t v51 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContentView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  *(void *)&long long v54 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v12 = type metadata accessor for AppConfiguration();
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  int v16 = v15[*(int *)(v13 + 56) + 1];
  sub_1002ADE8C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v16 == 1)
  {
    sub_1002ADE24(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v18 = swift_allocObject();
    sub_1002AA830((uint64_t)v11, v18 + v19, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v17 = sub_1002B3DEC;
  }
  uint64_t v59 = v17;
  uint64_t v60 = v18;
  uint64_t v20 = (uint64_t *)(a1 + *(int *)(v6 + 44));
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *(void *)&long long v62 = v22;
  *((void *)&v62 + 1) = v21;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v23 = v61;
  swift_getKeyPath();
  *(void *)&long long v62 = v23;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v24 = *(void *)((char *)v23 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v25 = *(void *)((char *)v23 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  int v26 = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v24, v25, *((unsigned char *)v23 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  *(void *)&long long v58 = v25;
  *((void *)&v58 + 1) = v24;
  int v56 = v26;
  sub_1000BC2F4(v24, v25, v26);
  sub_1002ADE24(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v27 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v57 = swift_allocObject();
  sub_1002AA830((uint64_t)v11, v57 + v27, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v28 = v54;
  sub_1002ADE24(a1, v54, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v55 = swift_allocObject();
  sub_1002AA830(v28, v55 + v27, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v61 = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_100527090);
  State.init(wrappedValue:)();
  long long v29 = v62;
  long long v62 = *(_OWORD *)(a1 + *(int *)(v6 + 108));
  sub_10000F214(&qword_1005264D0);
  State.wrappedValue.getter();
  uint64_t v30 = v61;
  if (v61)
  {
    [objc_allocWithZone((Class)UIImage) initWithCGImage:v61];
    Image.init(uiImage:)();
    uint64_t v32 = v51;
    uint64_t v31 = v52;
    uint64_t v33 = v53;
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for Image.ResizingMode.stretch(_:), v53);
    uint64_t v34 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v35 = v62;
    uint64_t v36 = BYTE8(v62);
    uint64_t v37 = v63;
    uint64_t v38 = v64;
    long long v54 = v65;

    long long v39 = v54;
    uint64_t v40 = v36;
    uint64_t v41 = v35;
    uint64_t v42 = v34;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v41 = 0;
    uint64_t v40 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    long long v39 = 0uLL;
  }
  LOBYTE(v61) = 0;
  BOOL v44 = v56 == 3 && v58 == 0;
  uint64_t v46 = (uint64_t)v59;
  uint64_t v45 = v60;
  *(void *)a2 = v59;
  *(void *)(a2 + 8) = v45;
  *(unsigned char *)(a2 + 16) = v44;
  uint64_t v47 = v57;
  *(void *)(a2 + 24) = &unk_100527078;
  *(void *)(a2 + 32) = v47;
  uint64_t v48 = v55;
  *(void *)(a2 + 40) = &unk_100527088;
  *(void *)(a2 + 48) = v48;
  *(void *)(a2 + 56) = sub_100395120;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 80) = v29;
  *(void *)(a2 + 96) = v42;
  *(void *)(a2 + 104) = v41;
  *(void *)(a2 + 112) = v40;
  *(void *)(a2 + 120) = v37;
  *(void *)(a2 + 128) = v38;
  *(_OWORD *)(a2 + 136) = v39;
  sub_10000F724(v46);
  swift_retain();
  swift_retain();
  sub_10002025C();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  swift_release();
  sub_100020414();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000F478(v46);
}

uint64_t sub_10025855C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v49 = *(_OWORD *)(a1 + *(int *)(type metadata accessor for ContentView() + 104));
  sub_10000F214(&qword_1005264D8);
  State.wrappedValue.getter();
  uint64_t v3 = *(void *)&v39[0];
  if ((~*(void *)&v39[0] & 0xF000000000000007) != 0)
  {
    if ((*(void *)&v39[0] & 0x8000000000000000) != 0)
    {
      CGFloat v11 = *(double *)((*(void *)&v39[0] & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
      CGFloat v12 = *(double *)((*(void *)&v39[0] & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
      CGFloat v13 = *(double *)((*(void *)&v39[0] & 0x7FFFFFFFFFFFFFFFLL) + 0x20);
      CGFloat v14 = *(double *)((*(void *)&v39[0] & 0x7FFFFFFFFFFFFFFFLL) + 0x28);
      swift_retain();
      uint64_t v25 = static Color.red.getter();
      StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
      uint64_t v15 = static Alignment.center.getter();
      uint64_t v17 = v16;
      char v18 = static Edge.Set.all.getter();
      v58.origin.CGFloat x = v11;
      v58.origin.CGFloat y = v12;
      v58.size.CGFloat width = v13;
      v58.size.CGFloat height = v14;
      CGRectGetWidth(v58);
      v59.origin.CGFloat x = v11;
      v59.origin.CGFloat y = v12;
      v59.size.CGFloat width = v13;
      v59.size.CGFloat height = v14;
      CGRectGetHeight(v59);
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      char v29 = v45;
      char v28 = v47;
      v60.origin.CGFloat x = v11;
      v60.origin.CGFloat y = v12;
      v60.size.CGFloat width = v13;
      v60.size.CGFloat height = v14;
      CGFloat MidX = CGRectGetMidX(v60);
      v61.origin.CGFloat x = v11;
      v61.origin.CGFloat y = v12;
      v61.size.CGFloat width = v13;
      v61.size.CGFloat height = v14;
      CGRectGetMidY(v61);
      v62.origin.CGFloat x = v11;
      v62.origin.CGFloat y = v12;
      v62.size.CGFloat width = v13;
      v62.size.CGFloat height = v14;
      CGRectGetMidX(v62);
      v63.origin.CGFloat x = v11;
      v63.origin.CGFloat y = v12;
      v63.size.CGFloat width = v13;
      v63.size.CGFloat height = v14;
      double MidY = CGRectGetMidY(v63);
      GeometryProxy.safeAreaInsets.getter();
      long long v30 = v41;
      long long v31 = v42;
      *(void *)&long long v32 = v43;
      *((void *)&v32 + 1) = v25;
      LOWORD(v33) = 256;
      *((void *)&v33 + 1) = v15;
      *(void *)&long long v34 = v17;
      BYTE8(v34) = v18;
      *(void *)&long long v35 = v44;
      BYTE8(v35) = v45;
      *(void *)&long long v36 = v46;
      BYTE8(v36) = v47;
      long long v37 = v48;
      *(CGFloat *)&long long v38 = MidX;
      *((double *)&v38 + 1) = MidY - v21;
      long long v56 = v48;
      long long v57 = v38;
      long long v54 = v35;
      long long v55 = v36;
      long long v52 = v33;
      long long v53 = v34;
      long long v50 = v42;
      long long v51 = v32;
      long long v49 = v41;
      sub_1002B3E90((uint64_t)&v49);
    }
    else
    {
      swift_retain();
      uint64_t v24 = static Color.red.getter();
      StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
      uint64_t v4 = static Alignment.center.getter();
      uint64_t v6 = v5;
      char v7 = static Edge.Set.all.getter();
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      char v29 = v45;
      char v28 = v47;
      uint64_t v8 = *(void *)(*(void *)&v39[0] + 16);
      double v9 = *(double *)(*(void *)&v39[0] + 24);
      GeometryProxy.safeAreaInsets.getter();
      long long v30 = v41;
      long long v31 = v42;
      *(void *)&long long v32 = v43;
      *((void *)&v32 + 1) = v24;
      LOWORD(v33) = 256;
      *((void *)&v33 + 1) = v4;
      *(void *)&long long v34 = v6;
      BYTE8(v34) = v7;
      *(void *)&long long v35 = v44;
      BYTE8(v35) = v45;
      *(void *)&long long v36 = v46;
      BYTE8(v36) = v47;
      long long v37 = v48;
      *(void *)&long long v38 = v8;
      *((double *)&v38 + 1) = v9 - v10;
      long long v56 = v48;
      long long v57 = v38;
      long long v54 = v35;
      long long v55 = v36;
      long long v52 = v33;
      long long v53 = v34;
      long long v50 = v42;
      long long v51 = v32;
      long long v49 = v41;
      sub_1002B4180((uint64_t)&v49);
    }
    sub_10000FC34((uint64_t)&v49, (uint64_t)v39, &qword_1005270A0);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000BC70C((uint64_t)&v30);
    sub_10000F214(&qword_1005270A8);
    sub_10000F214(&qword_1005270B0);
    sub_1002B3E9C();
    sub_1002B4038();
    _ConditionalContent<>.init(storage:)();
    sub_1001C0240(v3);
    sub_1001C0240(v3);
    swift_release_n();
    swift_bridgeObjectRelease_n();
    v39[6] = v26[6];
    v39[7] = v26[7];
    v39[8] = v26[8];
    char v40 = v27;
    v39[2] = v26[2];
    v39[3] = v26[3];
    v39[4] = v26[4];
    v39[5] = v26[5];
    v39[0] = v26[0];
    v39[1] = v26[1];
    nullsub_2(v26, v22);
    sub_10000FC34((uint64_t)v26, (uint64_t)&v49, &qword_100527098);
  }
  else
  {
    sub_1002B3E6C((uint64_t)v39);
    sub_10000FC34((uint64_t)v39, (uint64_t)&v49, &qword_100527098);
  }
  return sub_10000FC34((uint64_t)&v49, a2, &qword_100527098);
}

uint64_t sub_100258A44(uint64_t a1)
{
  v1[10] = a1;
  type metadata accessor for MainActor();
  v1[11] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[12] = v3;
  v1[13] = v2;
  return _swift_task_switch(sub_100258ADC, v3, v2);
}

uint64_t sub_100258ADC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[7] = v4;
  v0[8] = v3;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[14] = v0[9];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[15] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100258BC0;
  return sub_100417A1C((uint64_t)(v0 + 2));
}

uint64_t sub_100258BC0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v3 = *(void *)(v2 + 96);
    uint64_t v4 = *(void *)(v2 + 104);
    uint64_t v5 = sub_100258DA4;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 96);
    uint64_t v4 = *(void *)(v2 + 104);
    uint64_t v5 = sub_100258D04;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100258D04()
{
  swift_release();
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_10000F3B0(v0 + 2, v1);
  CGImageRef v3 = sub_100398EE0(v1, v2);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  uint64_t v4 = (uint64_t (*)(CGImageRef))v0[1];
  return v4(v3);
}

uint64_t sub_100258DA4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100258E08(uint64_t a1, uint64_t a2)
{
  v2[21] = a1;
  v2[22] = a2;
  type metadata accessor for MainActor();
  v2[23] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[24] = v4;
  v2[25] = v3;
  return _swift_task_switch(sub_100258EA0, v4, v3);
}

uint64_t sub_100258EA0()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = (int *)type metadata accessor for ContentView();
  *(_OWORD *)(v0 + 96) = *(_OWORD *)(v1 + v3[26]);
  *(void *)(v0 + 152) = v2;
  swift_retain();
  sub_10000F214(&qword_1005264D8);
  State.wrappedValue.setter();
  uint64_t v4 = (uint64_t *)(v1 + v3[29]);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  *(void *)(v0 + 112) = v6;
  *(void *)(v0 + 120) = v5;
  sub_10000F214(&qword_100526468);
  State.wrappedValue.getter();
  [*(id *)(*(void *)(v0 + 144) + 32) resetSelection];
  swift_release();
  uint64_t v7 = (uint64_t *)(v1 + v3[11]);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *(void *)(v0 + 128) = v9;
  *(void *)(v0 + 136) = v8;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  *(void *)(v0 + 208) = *(void *)(v0 + 160);
  double v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v10;
  *double v10 = v0;
  v10[1] = sub_100259020;
  return sub_100417A1C(v0 + 56);
}

uint64_t sub_100259020()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v2 + 192);
    uint64_t v4 = *(void *)(v2 + 200);
    uint64_t v5 = sub_100259390;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 192);
    uint64_t v4 = *(void *)(v2 + 200);
    uint64_t v5 = sub_100259160;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100259160()
{
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100259204;
  uint64_t v2 = *(void *)(v0 + 168);
  return sub_100259414(v0 + 16, v2);
}

uint64_t sub_100259204()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 200);
  uint64_t v3 = *(void *)(v1 + 192);
  return _swift_task_switch(sub_100259324, v3, v2);
}

uint64_t sub_100259324()
{
  swift_release();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100259390()
{
  *(_OWORD *)(v0 + 72) = 0u;
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  swift_release();
  sub_10000FBD8(v0 + 56, &qword_100518A80);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100259414(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v3[8] = type metadata accessor for AppConfiguration();
  v3[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_1002594E0, v5, v4);
}

uint64_t sub_1002594E0()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = (uint64_t *)(v3 + *(int *)(type metadata accessor for ContentView() + 112));
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  v0[2] = v6;
  v0[3] = v5;
  sub_10000F214(&qword_1005263A0);
  State.wrappedValue.getter();
  v0[13] = v0[4];
  sub_10000F214(&qword_100525F50);
  State.wrappedValue.getter();
  char v7 = *(unsigned char *)(v1 + *(int *)(v2 + 48) + 2);
  sub_1002ADE8C(v1, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
  uint64_t v8 = swift_task_alloc();
  v0[14] = v8;
  *(void *)(v8 + 16) = v3;
  uint64_t v9 = swift_task_alloc();
  v0[15] = v9;
  *(void *)(v9 + 16) = v3;
  double v10 = (void *)swift_task_alloc();
  v0[16] = v10;
  *double v10 = v0;
  v10[1] = sub_100259674;
  uint64_t v12 = v0[5];
  uint64_t v11 = v0[6];
  return sub_1001BA978(v12, v11, v7, (uint64_t)sub_10029D940, v8, (uint64_t)sub_10029D948, v9);
}

uint64_t sub_100259674()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1002597F8, v3, v2);
}

uint64_t sub_1002597F8()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100259860(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ContentView();
  uint64_t v7 = v6 - 8;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v6);
  double v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v11 - 8);
  CGFloat v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MagnifyGesture.Value.magnification.getter();
  uint64_t v15 = v14;
  *a2 = v14;
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 1, 1, v16);
  sub_1002ADE24(a4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v17 = static MainActor.shared.getter();
  unint64_t v18 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v17;
  *(void *)(v20 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v10, v20 + v18, (uint64_t (*)(void))type metadata accessor for ContentView);
  unint64_t v21 = v20 + v19;
  *(void *)unint64_t v21 = v15;
  *(unsigned char *)(v21 + 8) = 0;
  sub_100064D5C((uint64_t)v13, (uint64_t)&unk_100527068, v20);
  swift_release();
  uint64_t v22 = (uint64_t *)(a4 + *(int *)(v7 + 136));
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  v26[1] = *a2;
  void v26[2] = v23;
  v26[3] = v24;
  sub_10000F214(&qword_10051D2F0);
  return State.wrappedValue.setter();
}

uint64_t sub_100259AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 136) = a6;
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = a5;
  *(void *)(v6 + 56) = type metadata accessor for MainActor();
  *(void *)(v6 + 64) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v6 + 72) = v8;
  *(void *)(v6 + 80) = v7;
  return _swift_task_switch(sub_100259B58, v8, v7);
}

uint64_t sub_100259B58()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[11] = v0[4];
  v0[12] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[13] = v6;
  v0[14] = v5;
  return _swift_task_switch(sub_100259C30, v6, v5);
}

uint64_t sub_100259C30()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 88) + 16);
  *(void *)(v0 + 120) = v1;
  return _swift_task_switch(sub_100259C54, v1, 0);
}

uint64_t sub_100259C54()
{
  char v1 = *(unsigned char *)(v0 + 136);
  uint64_t v2 = *(void *)(*(void *)(v0 + 120) + 112);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v3;
  void *v3 = v0;
  v3[1] = sub_100259CFC;
  uint64_t v4 = *(void *)(v0 + 48);
  return sub_100346BE4(v4, v1 & 1, v2);
}

uint64_t sub_100259CFC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 112);
  uint64_t v3 = *(void *)(v1 + 104);
  return _swift_task_switch(sub_100259E1C, v3, v2);
}

uint64_t sub_100259E1C()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  return _swift_task_switch(sub_100259E88, v1, v2);
}

uint64_t sub_100259E88()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100259EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ContentView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_1002ADE24(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v11 = static MainActor.shared.getter();
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)v6, v13 + v12, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_100064D5C((uint64_t)v9, (uint64_t)&unk_100527058, v13);
  return swift_release();
}

uint64_t sub_10025A0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  v4[6] = type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v6;
  v4[9] = v5;
  return _swift_task_switch(sub_10025A158, v6, v5);
}

uint64_t sub_10025A158()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[10] = v0[4];
  v0[11] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[12] = v6;
  v0[13] = v5;
  return _swift_task_switch(sub_10025A22C, v6, v5);
}

uint64_t sub_10025A22C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 16);
  *(void *)(v0 + 112) = v1;
  return _swift_task_switch(sub_10025A250, v1, 0);
}

uint64_t sub_10025A250()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 112) + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10025A2F0;
  return sub_100346BE4(0, 1, v1);
}

uint64_t sub_10025A2F0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return _swift_task_switch(sub_10025A410, v3, v2);
}

uint64_t sub_10025A410()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  return _swift_task_switch(sub_10025A47C, v1, v2);
}

uint64_t sub_10025A47C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10025A4DC()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned int v2 = [v0 BOOLForKey:v1];

  if (v2)
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000F378(v3, (uint64_t)qword_10055E2E0);
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Not showing onboarding because the user has already onboarded.", v5, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000F378(v6, (uint64_t)qword_10055E2E0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Showing app onboarding", v9, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for ContentView();
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.setter();
    sub_10022A024();
  }
}

void sub_10025A748()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v1);
  os_log_type_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v24 - v6;
  id v8 = [self standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  unsigned __int8 v10 = [v8 BOOLForKey:v9];

  if ((v10 & 1) == 0)
  {
    if (qword_100517D48 != -1) {
      swift_once();
    }
    if ([*(id *)(qword_10055E060 + OBJC_IVAR____TtC6Tamale16LocationsHandler_manager) authorizationStatus] <= 2)
    {
      if (qword_100517EC0 != -1) {
        swift_once();
      }
      id v11 = [self sharedConfiguration];
      if (v11)
      {
        unint64_t v12 = v11;
        unsigned int v13 = [v11 currentCountrySupportsFeature:11];

        if (v13)
        {
          uint64_t v14 = *(void *)(v0 + *(int *)(v1 + 236));
          sub_1002ADE24(v0, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ContentView);
          unint64_t v15 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
          uint64_t v16 = swift_allocObject();
          sub_1002AA830((uint64_t)v7, v16 + v15, (uint64_t (*)(void))type metadata accessor for ContentView);
          sub_1002ADE24(v0, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ContentView);
          uint64_t v17 = swift_allocObject();
          sub_1002AA830((uint64_t)v4, v17 + v15, (uint64_t (*)(void))type metadata accessor for ContentView);
          swift_getKeyPath();
          uint64_t v25 = v14;
          sub_1002AB13C(&qword_100526670, (void (*)(uint64_t))type metadata accessor for PromptScheduler);
          swift_retain_n();
          swift_retain_n();
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          uint64_t v25 = v14;
          swift_getKeyPath();
          ObservationRegistrar.willSet<A, B>(_:keyPath:)();
          swift_release();
          unint64_t v18 = (void *)(v14 + 16);
          swift_beginAccess();
          unint64_t v19 = *(void **)(v14 + 16);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v14 + 16) = v19;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v19 = sub_10032A138(0, v19[2] + 1, 1, v19);
            *unint64_t v18 = v19;
          }
          unint64_t v22 = v19[2];
          unint64_t v21 = v19[3];
          if (v22 >= v21 >> 1)
          {
            unint64_t v19 = sub_10032A138((void *)(v21 > 1), v22 + 1, 1, v19);
            *unint64_t v18 = v19;
          }
          _OWORD v19[2] = v22 + 1;
          uint64_t v23 = &v19[4 * v22];
          v23[4] = sub_1002A8964;
          v23[5] = v16;
          v23[6] = sub_1002A8980;
          v23[7] = v17;
          swift_endAccess();
          uint64_t v25 = v14;
          swift_getKeyPath();
          ObservationRegistrar.didSet<A, B>(_:keyPath:)();
          swift_release_n();
          swift_release_n();
          swift_release();
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_10025ABC4()
{
  return sub_10023E954();
}

uint64_t sub_10025AC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  sub_10000F214(&qword_10051A308);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[11] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[12] = v6;
  v4[13] = v5;
  return _swift_task_switch(sub_10025AD0C, v6, v5);
}

uint64_t sub_10025AD0C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = type metadata accessor for ContentView();
  *(void *)(v0 + 112) = v2;
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  uint64_t v3 = type metadata accessor for ResultLookupState();
  uint64_t v4 = *(void *)(v3 - 8);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3);
  uint64_t v6 = *(void *)(v0 + 80);
  if (v5 == 1)
  {
    sub_10000FBD8(*(void *)(v0 + 80), &qword_10051A308);
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_1002ADE8C(v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v0 + 64) + *(int *)(v2 + 44));
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      *(void *)(v0 + 32) = v10;
      *(void *)(v0 + 40) = v9;
      sub_10000F214(&qword_100525F40);
      State.wrappedValue.getter();
      sub_10041513C(1, 4.0);
      uint64_t v11 = *(void *)(v0 + 72);
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v11, 1, 1, v3);
      sub_1002297C8(v11);
    }
  }
  *(_DWORD *)(v0 + 144) = *(_DWORD *)(v2 + 228);
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v12;
  *unint64_t v12 = v0;
  v12[1] = sub_10025AF28;
  return sub_100095164();
}

uint64_t sub_10025AF28()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return _swift_task_switch(sub_10025B05C, v3, v2);
}

uint64_t sub_10025B05C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10025B0F4;
  return sub_10009543C();
}

uint64_t sub_10025B0F4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return _swift_task_switch(sub_10025B228, v3, v2);
}

uint64_t sub_10025B228()
{
  uint64_t v1 = (uint64_t *)(v0[8] + *(int *)(v0[14] + 88));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  v0[2] = v3;
  v0[3] = v2;
  sub_10000F214(&qword_1005263C8);
  State.wrappedValue.getter();
  v0[17] = v0[6];
  return _swift_task_switch(sub_10025B2C8, 0, 0);
}

uint64_t sub_10025B2C8()
{
  char v1 = AFMontaraRestricted();
  swift_getKeyPath();
  swift_getKeyPath();
  *(unsigned char *)(v0 + 148) = v1;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v2 = (uint64_t (*)())[self sharedConnection];
  if (v2)
  {
    uint64_t v5 = v2;
    uint64_t v6 = *(void *)(v0 + 136);
    unsigned __int8 v7 = [v2 isExternalIntelligenceAllowed];

    *(unsigned char *)(v6 + OBJC_IVAR____TtC6Tamale25AskAcmeRequirementManager_montaraMDMRestricted) = v7 ^ 1;
    swift_release();
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v2 = sub_10025B3E0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10025B3E0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10025B454()
{
  if (qword_100517D48 != -1) {
    swift_once();
  }
  sub_10005239C();
}

id *sub_10025B508()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v208 = (char *)&v193 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v3 - 8);
  uint64_t v214 = (char *)&v193 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ContentView();
  uint64_t v233 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v213 = v6;
  uint64_t v229 = (uint64_t)&v193 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v7 - 8);
  uint64_t v230 = (char *)&v193 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v212 = type metadata accessor for CVDetection();
  __chkstk_darwin(v212);
  uint64_t v211 = (uint64_t)&v193 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v210 = (uint64_t)&v193 - v11;
  __chkstk_darwin(v12);
  uint64_t v209 = (uint64_t)&v193 - v13;
  uint64_t v228 = type metadata accessor for ActionBarItem(0);
  uint64_t v227 = *(void *)(v228 - 8);
  __chkstk_darwin(v228);
  uint64_t v204 = (uint64_t)&v193 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v205 = (uint64_t *)((char *)&v193 - v16);
  __chkstk_darwin(v17);
  uint64_t v206 = (uint64_t)&v193 - v18;
  __chkstk_darwin(v19);
  uint64_t v207 = (uint64_t *)((char *)&v193 - v20);
  __chkstk_darwin(v21);
  uint64_t v226 = (uint64_t)&v193 - v22;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v193 - v24;
  uint64_t v26 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v26 - 8);
  uint64_t v240 = (char *)&v193 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v28 - 8);
  uint64_t v215 = (uint64_t)&v193 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v232 = (char *)&v193 - v31;
  __chkstk_darwin(v32);
  long long v34 = (char *)&v193 - v33;
  uint64_t v35 = type metadata accessor for CVBundle(0);
  uint64_t v231 = *(void *)(v35 - 8);
  uint64_t v36 = *(void *)(v231 + 64);
  __chkstk_darwin(v35);
  __chkstk_darwin(v37);
  long long v39 = (char *)&v193 - v38;
  uint64_t v216 = v5;
  uint64_t v40 = *(int *)(v5 + 176);
  uint64_t v234 = v0;
  long long v41 = (unint64_t *)(v0 + v40);
  unint64_t v42 = *v41;
  unint64_t v43 = v41[1];
  unint64_t v250 = *v41;
  unint64_t v251 = v43;
  uint64_t v44 = sub_10000F214(&qword_100523BE0);
  State.wrappedValue.getter();
  uint64_t v45 = *(void *)(v245 + 16);
  swift_bridgeObjectRelease();
  if (v45)
  {
    unint64_t v250 = v42;
    unint64_t v251 = v43;
    State.wrappedValue.getter();
    return (id *)v245;
  }
  uint64_t v47 = (uint64_t)v240;
  uint64_t v239 = v34;
  uint64_t v222 = (uint64_t)&v193 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v225 = v36;
  uint64_t v223 = v35;
  uint64_t v224 = v39;
  uint64_t v201 = v44;
  uint64_t v48 = v234;
  uint64_t v49 = sub_100245F80();
  unint64_t v50 = v48;
  uint64_t v51 = v216;
  if (!v49)
  {
    LOBYTE(v63) = 0;
    char v64 = 0;
    long long v65 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_92;
  }
  uint64_t v200 = v49;
  long long v52 = (unint64_t *)(v48 + *(int *)(v216 + 44));
  unint64_t v54 = *v52;
  unint64_t v53 = v52[1];
  unint64_t v250 = v54;
  unint64_t v251 = v53;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  unint64_t v55 = v245;
  swift_getKeyPath();
  unint64_t v250 = v55;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v56 = v55 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v56, v47, &qword_10051B760);
  uint64_t v57 = sub_10000F214(&qword_10051A060);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48))(v47, 1, v57))
  {
    sub_10000FBD8(v47, &qword_10051B760);
    uint64_t v58 = v231;
    CGRect v59 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v231 + 56);
    uint64_t v60 = (uint64_t)v239;
    uint64_t v61 = (uint64_t)v239;
    uint64_t v62 = 1;
  }
  else
  {
    uint64_t v60 = (uint64_t)v239;
    sub_1002ADE24(v47, (uint64_t)v239, type metadata accessor for CVBundle);
    sub_10000FBD8(v47, &qword_10051B760);
    uint64_t v58 = v231;
    CGRect v59 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v231 + 56);
    uint64_t v61 = v60;
    uint64_t v62 = 0;
  }
  uint64_t v63 = v223;
  uint64_t v221 = v59;
  v59(v61, v62, 1, v223);
  uint64_t v66 = v213;
  uint64_t v67 = (uint64_t)v224;
  uint64_t v68 = (uint64_t)v232;
  swift_release();
  uint64_t v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  uint64_t v203 = v58 + 48;
  uint64_t v202 = v69;
  unsigned int v70 = v69(v60, 1, v63);
  uint64_t v51 = v216;
  uint64_t v71 = v200;
  if (v70 == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000FBD8(v60, &qword_10051B768);
    LOBYTE(v63) = 0;
    char v64 = 0;
    long long v65 = (char *)_swiftEmptyArrayStorage;
    unint64_t v50 = v234;
    goto LABEL_92;
  }
  sub_1002AA830(v60, v67, type metadata accessor for CVBundle);
  uint64_t v72 = *(void *)(v71 + 16);
  if (v72)
  {
    int v73 = (long long *)(v71 + 32);
    uint64_t v220 = v58 + 56;
    uint64_t v219 = v66 + 7;
    uint64_t v74 = v72;
    swift_bridgeObjectRetain();
    long long v65 = (char *)_swiftEmptyArrayStorage;
    unint64_t v218 = (unint64_t)"calendar.badge.plus";
    long long v217 = xmmword_100449310;
    long long v199 = "nt.of.interest.fill";
    unint64_t v198 = "pin.point.of.interest.fill";
    unint64_t v197 = (unint64_t)"ngControllerAction";
    unint64_t v195 = 0x800000010042A290;
    unint64_t v194 = 0x800000010042A2B0;
    uint64_t v196 = v74;
    while (1)
    {
      uint64_t v235 = v74;
      sub_10004ECF4(v73, (uint64_t)&v244);
      sub_100050964((uint64_t)&v244, (void (*)(void, void, void, void, void))sub_10004E998);
      uint64_t v239 = (char *)sub_1000499E0();
      uint64_t v238 = v75;
      sub_10004ECF4(&v244, (uint64_t)&v250);
      unint64_t v76 = v250;
      unint64_t v77 = 0xD00000000000001ALL;
      unint64_t v78 = v218 | 0x8000000000000000;
      switch(v254)
      {
        case 1:
        case 2:
          unint64_t v78 = v251;
          swift_bridgeObjectRetain();
          unint64_t v77 = v76;
          goto LABEL_20;
        case 3:
          if (v252 | v253 | v250 | v251)
          {
            unint64_t v79 = v252 | v253 | v251;
            if (v250 != 1 || v79)
            {
              if (v250 != 2 || v79)
              {
                if (v250 != 3 || (unint64_t v77 = 0x2E72656B61657073, v78 = 0xEE00332E65766177, v79))
                {
                  unint64_t v77 = 0xD000000000000012;
                  if (v250 == 4 && v79 == 0)
                  {
                    unint64_t v77 = 0xD000000000000013;
                    unint64_t v78 = v194;
                  }
                  else
                  {
                    unint64_t v78 = v195;
                  }
                }
              }
              else
              {
                unint64_t v78 = v197 | 0x8000000000000000;
                unint64_t v77 = 0xD000000000000013;
              }
              goto LABEL_20;
            }
            unint64_t v77 = 0xD000000000000023;
            unint64_t v80 = &v229;
          }
          else
          {
            unint64_t v77 = 0xD000000000000017;
            unint64_t v80 = (uint64_t *)&v230;
          }
          unint64_t v78 = *(v80 - 32) | 0x8000000000000000;
LABEL_20:
          unint64_t v236 = v77;
          sub_1002ADE24(v67, v68, type metadata accessor for CVBundle);
          char v81 = 1;
          v221(v68, 0, 1, v63);
          sub_10004ECF4(&v244, (uint64_t)&v245);
          unint64_t v237 = v78;
          uint64_t v240 = v65;
          switch(v249)
          {
            case 1:
              uint64_t v82 = v215;
              sub_10000FB74(v68, v215, &qword_10051B768);
              if (v202(v82, 1, v63) == 1)
              {
                sub_10000FBD8(v82, &qword_10051B768);
              }
              else
              {
                uint64_t v84 = v210;
                sub_10019D408(v210);
                sub_1002ADE8C(v82, type metadata accessor for CVBundle);
                uint64_t v85 = v84;
                uint64_t v86 = v209;
                sub_1002AA830(v85, v209, (uint64_t (*)(void))type metadata accessor for CVDetection);
                uint64_t v87 = v86;
                uint64_t v88 = v211;
                sub_1002AA830(v87, v211, (uint64_t (*)(void))type metadata accessor for CVDetection);
                int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
                if (EnumCaseMultiPayload != 3)
                {
                  if (EnumCaseMultiPayload == 4)
                  {
                    sub_1002ADE8C(v88, (uint64_t (*)(void))type metadata accessor for CVDetection);
                    char v81 = 4;
                  }
                  else
                  {
                    sub_1002ADE8C(v88, (uint64_t (*)(void))type metadata accessor for CVDetection);
                    char v81 = 14;
                  }
                  goto LABEL_40;
                }
                sub_1002ADE8C(v88, (uint64_t (*)(void))type metadata accessor for CVDetection);
              }
              char v81 = 3;
LABEL_40:
              sub_10000FBD8(v68, &qword_10051B768);
              uint64_t v90 = type metadata accessor for UUID();
              uint64_t v91 = (uint64_t)v230;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v230, 1, 1, v90);
              uint64_t v92 = v229;
              sub_1002ADE24(v234, v229, (uint64_t (*)(void))type metadata accessor for ContentView);
              uint64_t v93 = v222;
              sub_1002ADE24(v67, v222, type metadata accessor for CVBundle);
              unint64_t v94 = (*(unsigned __int8 *)(v233 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
              unint64_t v95 = (v219 + v94) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v96 = (*(unsigned __int8 *)(v231 + 80) + v95 + 33) & ~(unint64_t)*(unsigned __int8 *)(v231 + 80);
              uint64_t v97 = swift_allocObject();
              sub_1002AA830(v92, v97 + v94, (uint64_t (*)(void))type metadata accessor for ContentView);
              sub_10004ECF4(&v244, v97 + v95);
              sub_1002AA830(v93, v97 + v96, type metadata accessor for CVBundle);
              uint64_t v98 = v238;
              *(void *)uint64_t v25 = v239;
              *((void *)v25 + 1) = v98;
              unint64_t v99 = v237;
              *((void *)v25 + 2) = v236;
              *((void *)v25 + 3) = v99;
              v25[32] = v81;
              *(_OWORD *)(v25 + 40) = v217;
              *((_WORD *)v25 + 28) = 1;
              unint64_t v100 = (int *)v228;
              uint64_t v101 = *(int *)(v228 + 64);
              v25[*(int *)(v228 + 60)] = 0;
              uint64_t v102 = (uint64_t (**)())&v25[v100[12]];
              *uint64_t v102 = sub_100048CB8;
              v102[1] = 0;
              unint64_t v103 = (uint64_t (**)())&v25[v100[13]];
              char *v103 = sub_10029BB60;
              v103[1] = (uint64_t (*)())v97;
              uint64_t v104 = &v25[v100[14]];
              *(void *)uint64_t v104 = 0;
              *((void *)v104 + 1) = 0;
              *(void *)&v25[v101] = 0;
              sub_10000FC34(v91, (uint64_t)&v25[v100[11]], (uint64_t *)&unk_100524ED0);
              uint64_t v105 = v226;
              sub_1002ADE24((uint64_t)v25, v226, type metadata accessor for ActionBarItem);
              long long v65 = v240;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                long long v65 = (char *)sub_1003289A4(0, *((void *)v65 + 2) + 1, 1, (unint64_t)v65);
              }
              uint64_t v106 = v227;
              uint64_t v107 = v235;
              unint64_t v109 = *((void *)v65 + 2);
              unint64_t v108 = *((void *)v65 + 3);
              uint64_t v68 = (uint64_t)v232;
              uint64_t v63 = v223;
              if (v109 >= v108 >> 1) {
                long long v65 = (char *)sub_1003289A4(v108 > 1, v109 + 1, 1, (unint64_t)v65);
              }
              *((void *)v65 + 2) = v109 + 1;
              sub_1002AA830(v105, (uint64_t)&v65[((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))+ *(void *)(v106 + 72) * v109], type metadata accessor for ActionBarItem);
              sub_1002ADE8C((uint64_t)v25, type metadata accessor for ActionBarItem);
              int v73 = (long long *)((char *)v73 + 40);
              uint64_t v74 = v107 - 1;
              uint64_t v67 = (uint64_t)v224;
              if (!v74)
              {
                uint64_t v111 = v200;
                swift_bridgeObjectRelease();
                uint64_t v112 = (unsigned __int8 *)(v111 + 64);
                uint64_t v113 = v196;
                unint64_t v50 = v234;
                uint64_t v51 = v216;
                do
                {
                  if (*v112 >= 3u)
                  {
                    uint64_t v114 = *((void *)v112 - 1);
                    uint64_t v115 = *((void *)v112 - 4);
                    uint64_t v116 = *((void *)v112 - 2) | *((void *)v112 - 3);
                    if (v116 | v115 | v114)
                    {
                      uint64_t v117 = v116 | v114;
                      if ((v115 != 1 || v117 != 0) && v115 == 2 && v117 == 0)
                      {
                        char v64 = 1;
                        goto LABEL_75;
                      }
                    }
                  }
                  v112 += 40;
                  --v113;
                }
                while (v113);
                char v64 = 0;
                uint64_t v51 = v216;
LABEL_75:
                uint64_t v120 = 0;
                uint64_t v121 = (unsigned __int8 *)(v111 + 64);
                while (1)
                {
                  uint64_t v122 = v120 + 1;
                  if (__OFADD__(v120, 1)) {
                    break;
                  }
                  uint64_t v123 = *((void *)v121 - 4);
                  uint64_t v124 = *((void *)v121 - 1);
                  uint64_t v125 = *((void *)v121 - 2) | *((void *)v121 - 3);
                  if (*v121 >= 3u && (v125 | v123 | v124) != 0)
                  {
                    uint64_t v127 = v125 | v124;
                    BOOL v128 = (unint64_t)(v123 - 1) <= 1 && v127 == 0;
                    if (!v128 && v123 == 3 && !v127)
                    {
                      LOBYTE(v63) = 1;
                      goto LABEL_91;
                    }
                  }
                  ++v120;
                  v121 += 40;
                  if (v122 == v196)
                  {
                    LOBYTE(v63) = 0;
                    goto LABEL_91;
                  }
                }
                __break(1u);
LABEL_114:
                unint64_t v50 = sub_1003289A4(0, *(void *)(v50 + 16) + 1, 1, v50);
LABEL_96:
                unint64_t v156 = *(void *)(v50 + 16);
                unint64_t v155 = *(void *)(v50 + 24);
                uint64_t v157 = v234;
                if (v156 >= v155 >> 1) {
                  unint64_t v50 = sub_1003289A4(v155 > 1, v156 + 1, 1, v50);
                }
                uint64_t v134 = v216;
                long long v65 = (char *)v50;
                *(void *)(v50 + 16) = v156 + 1;
                sub_1002AA830(v206, v50+ ((*(unsigned __int8 *)(v227 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v227 + 80))+ *(void *)(v227 + 72) * v156, type metadata accessor for ActionBarItem);
                sub_1002ADE8C((uint64_t)v207, type metadata accessor for ActionBarItem);
                unint64_t v50 = v157;
LABEL_99:
                uint64_t v243 = (id *)&_swiftEmptySetSingleton;
                id v158 = [objc_allocWithZone((Class)NLLanguageRecognizer) init];
                NSString v159 = String._bridgeToObjectiveC()();
                [v158 processString:v159];

                id v160 = [v158 dominantLanguage];
                if (v160)
                {
                  uint64_t v161 = v160;
                  uint64_t v162 = v50;
                  Swift::Int v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v164 = v65;
                  Swift::Int v166 = v165;

                  Swift::Int v167 = v166;
                  long long v65 = v164;
                  uint64_t v134 = v216;
                  sub_1001F934C(&v241, v163, v167);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v162 = v50;
                }
                uint64_t v168 = v233;
                uint64_t v169 = sub_100335A80();
                swift_bridgeObjectRelease();
                if (v63)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v170 = swift_bridgeObjectRetain();
                  uint64_t v171 = sub_10012A6F8(v170, (uint64_t)v169);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_errorRelease();
                  if (!v171)
                  {
                    String.LocalizationValue.init(stringLiteral:)();
                    static Locale.current.getter();
                    uint64_t v172 = String.init(localized:table:bundle:locale:comment:)();
                    uint64_t v174 = v173;
                    uint64_t v175 = type metadata accessor for UUID();
                    uint64_t v176 = (uint64_t)v230;
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v175 - 8) + 56))(v230, 1, 1, v175);
                    uint64_t v177 = v229;
                    sub_1002ADE24(v162, v229, (uint64_t (*)(void))type metadata accessor for ContentView);
                    unint64_t v178 = (*(unsigned __int8 *)(v168 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80);
                    uint64_t v179 = swift_allocObject();
                    sub_1002AA830(v177, v179 + v178, (uint64_t (*)(void))type metadata accessor for ContentView);
                    uint64_t v180 = (uint64_t)v205;
                    *uint64_t v205 = v172;
                    *(void *)(v180 + 8) = v174;
                    strcpy((char *)(v180 + 16), "speaker.wave.3");
                    *(unsigned char *)(v180 + 31) = -18;
                    *(unsigned char *)(v180 + 32) = 7;
                    *(_OWORD *)(v180 + 40) = xmmword_100449310;
                    *(_WORD *)(v180 + 56) = 1;
                    uint64_t v181 = (int *)v228;
                    uint64_t v182 = *(int *)(v228 + 64);
                    *(unsigned char *)(v180 + *(int *)(v228 + 60)) = 0;
                    uint64_t v183 = (uint64_t (**)())(v180 + v181[12]);
                    *uint64_t v183 = sub_100048CB8;
                    v183[1] = 0;
                    uint64_t v184 = (uint64_t (**)())(v180 + v181[13]);
                    *uint64_t v184 = sub_10029A0C0;
                    v184[1] = (uint64_t (*)())v179;
                    uint64_t v185 = (void *)(v180 + v181[14]);
                    *uint64_t v185 = 0;
                    v185[1] = 0;
                    *(void *)(v180 + v182) = 0;
                    sub_10000FC34(v176, v180 + v181[11], (uint64_t *)&unk_100524ED0);
                    uint64_t v186 = v204;
                    sub_1002ADE24(v180, v204, type metadata accessor for ActionBarItem);
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      long long v65 = (char *)sub_1003289A4(0, *((void *)v65 + 2) + 1, 1, (unint64_t)v65);
                    }
                    uint64_t v187 = v227;
                    unint64_t v189 = *((void *)v65 + 2);
                    unint64_t v188 = *((void *)v65 + 3);
                    if (v189 >= v188 >> 1) {
                      long long v65 = (char *)sub_1003289A4(v188 > 1, v189 + 1, 1, (unint64_t)v65);
                    }
                    *((void *)v65 + 2) = v189 + 1;
                    sub_1002AA830(v186, (uint64_t)&v65[((*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80))+ *(void *)(v187 + 72) * v189], type metadata accessor for ActionBarItem);
                    sub_1002ADE8C(v180, type metadata accessor for ActionBarItem);
                  }
                }
                swift_bridgeObjectRelease();
                unint64_t v50 = v162;
                uint64_t v51 = v134;
                goto LABEL_112;
              }
              break;
            case 2:
              char v81 = 5;
              goto LABEL_40;
            case 3:
              if (v247 | v248 | v245 | v246)
              {
                uint64_t v83 = v247 | v248 | v246;
                if (v245 != 1 || v83)
                {
                  if (v245 != 2 || v83)
                  {
                    if (v245 != 3 || v83)
                    {
                      if (v83) {
                        BOOL v110 = 0;
                      }
                      else {
                        BOOL v110 = v245 == 4;
                      }
                      if (v110) {
                        char v81 = 8;
                      }
                      else {
                        char v81 = 10;
                      }
                    }
                    else
                    {
                      char v81 = 7;
                    }
                  }
                  else
                  {
                    char v81 = 6;
                  }
                }
                else
                {
                  char v81 = 14;
                }
              }
              else
              {
                char v81 = 0;
              }
              goto LABEL_40;
            default:
              goto LABEL_40;
          }
          break;
        default:
          goto LABEL_20;
      }
    }
  }
  LOBYTE(v63) = 0;
  char v64 = 0;
  long long v65 = (char *)_swiftEmptyArrayStorage;
  unint64_t v50 = v234;
LABEL_91:
  sub_1002ADE8C(v67, type metadata accessor for CVBundle);
  swift_bridgeObjectRelease();
LABEL_92:
  BOOL v129 = (Swift::Int *)(v50 + *(int *)(v51 + 116));
  Swift::Int v131 = *v129;
  Swift::Int v130 = v129[1];
  Swift::Int v241 = v131;
  Swift::Int v242 = v130;
  sub_10000F214(&qword_100526468);
  State.wrappedValue.getter();
  id v132 = [v243[4] text];
  if (v132)
  {
    uint64_t v133 = v132;
    uint64_t v134 = v51;
    uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v137 = v136;
    swift_release();

    if ((v64 & 1) == 0)
    {
      uint64_t v138 = sub_100024F64(v135, v137);
      swift_errorRelease();
      if (!v138)
      {
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        uint64_t v139 = String.init(localized:table:bundle:locale:comment:)();
        uint64_t v141 = v140;
        uint64_t v142 = type metadata accessor for UUID();
        uint64_t v143 = (uint64_t)v230;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56))(v230, 1, 1, v142);
        uint64_t v144 = v50;
        uint64_t v145 = v229;
        sub_1002ADE24(v144, v229, (uint64_t (*)(void))type metadata accessor for ContentView);
        unint64_t v146 = (*(unsigned __int8 *)(v233 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
        uint64_t v147 = swift_allocObject();
        sub_1002AA830(v145, v147 + v146, (uint64_t (*)(void))type metadata accessor for ContentView);
        uint64_t v148 = v207;
        *uint64_t v207 = v139;
        v148[1] = v141;
        uint64_t v149 = (uint64_t)v148;
        v148[2] = 0xD000000000000013;
        v148[3] = 0x800000010042A270;
        *((unsigned char *)v148 + 32) = 6;
        *(_OWORD *)(v148 + 5) = xmmword_100449310;
        *((_WORD *)v148 + 28) = 1;
        int v150 = (int *)v228;
        uint64_t v151 = *(int *)(v228 + 64);
        *(unsigned char *)(v149 + *(int *)(v228 + 60)) = 0;
        uint64_t v152 = (uint64_t (**)())(v149 + v150[12]);
        *uint64_t v152 = sub_100048CB8;
        v152[1] = 0;
        uint64_t v153 = (uint64_t (**)())(v149 + v150[13]);
        *uint64_t v153 = sub_10029A0E4;
        v153[1] = (uint64_t (*)())v147;
        uint64_t v154 = (void *)(v149 + v150[14]);
        *uint64_t v154 = 0;
        v154[1] = 0;
        *(void *)(v149 + v151) = 0;
        sub_10000FC34(v143, v149 + v150[11], (uint64_t *)&unk_100524ED0);
        sub_1002ADE24(v149, v206, type metadata accessor for ActionBarItem);
        unint64_t v50 = (unint64_t)v65;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_114;
        }
        goto LABEL_96;
      }
    }
    goto LABEL_99;
  }
  swift_release();
LABEL_112:
  uint64_t v190 = (Swift::Int *)(v50 + *(int *)(v51 + 180));
  Swift::Int v192 = *v190;
  Swift::Int v191 = v190[1];
  Swift::Int v241 = v192;
  Swift::Int v242 = v191;
  State.wrappedValue.getter();
  sub_10019FC18((uint64_t)v65);
  return v243;
}

uint64_t sub_10025CEA0(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    char v3 = 0;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v3 & 1;
}

BOOL sub_10025CEE8(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 56) < *(unsigned __int8 *)(a2 + 56);
}

uint64_t sub_10025CEFC()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10025CF6C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10025D030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ContentView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  sub_1002ADE24(a1, (uint64_t)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  sub_1002AA830((uint64_t)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_100064D5C((uint64_t)v10, a3, v14);
  return swift_release();
}

uint64_t sub_10025D200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  sub_10000F214(&qword_10051A308);
  v4[6] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v6;
  v4[9] = v5;
  return _swift_task_switch(sub_10025D2C8, v6, v5);
}

uint64_t sub_10025D2C8()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 256));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  sub_10000F214(&qword_100525F38);
  State.wrappedValue.getter();
  v0[10] = v0[4];
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[11] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10025D3D4;
  uint64_t v6 = v0[6];
  return sub_10014CD60(v6);
}

uint64_t sub_10025D3D4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  swift_task_dealloc();
  swift_release();
  sub_10000FBD8(v2, &qword_10051A308);
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 64);
  return _swift_task_switch(sub_10025D53C, v4, v3);
}

uint64_t sub_10025D53C()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10025D5A4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10025D620(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v44 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000F214(&qword_100521670);
  __chkstk_darwin(v57);
  uint64_t v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)v41 - v12;
  __chkstk_darwin(v14);
  uint64_t v47 = (uint64_t)v41 - v15;
  uint64_t v16 = type metadata accessor for ActionBarItem(0);
  uint64_t v55 = *(void *)(v16 - 8);
  uint64_t v56 = v16;
  __chkstk_darwin(v16);
  uint64_t v58 = (uint64_t)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v49 = (char *)v41 - v19;
  uint64_t v42 = a1 + *(int *)(type metadata accessor for ContentView() + 184);
  uint64_t v20 = *(void *)(v42 + 8);
  uint64_t v62 = *(void **)v42;
  uint64_t v63 = v20;
  void v41[2] = sub_10000F214(&qword_100523BE0);
  State.wrappedValue.getter();
  uint64_t result = (uint64_t)v64;
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v62 = _swiftEmptyArrayStorage;
  uint64_t v54 = v64[2];
  if (!v54)
  {
LABEL_23:
    uint64_t v39 = v42;
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void *)(v39 + 8);
    uint64_t v62 = *(void **)v39;
    uint64_t v63 = v40;
    char v64 = v22;
    return State.wrappedValue.setter();
  }
  uint64_t v61 = v7;
  uint64_t v46 = v10;
  v41[1] = v1;
  unint64_t v23 = 0;
  uint64_t v51 = (void (**)(char *, void, uint64_t, uint64_t))(v4 + 56);
  long long v52 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  unint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  uint64_t v45 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v25 = v47;
  uint64_t v26 = (uint64_t)v49;
  uint64_t v48 = v24;
  uint64_t v53 = (uint64_t)v64;
  unint64_t v50 = v13;
  while (v23 < *(void *)(result + 16))
  {
    unint64_t v27 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
    uint64_t v59 = *(void *)(v55 + 72);
    unint64_t v60 = v27;
    sub_1002ADE24(result + v27 + v59 * v23, v26, type metadata accessor for ActionBarItem);
    sub_10000FB74(v26 + *(int *)(v56 + 44), v25, (uint64_t *)&unk_100524ED0);
    if (qword_100517F78 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_10000F378(v3, (uint64_t)qword_100525ED8);
    (*v52)(v13, v28, v3);
    (*v51)(v13, 0, 1, v3);
    uint64_t v29 = (uint64_t)&v7[*(int *)(v57 + 48)];
    sub_10000FB74(v25, (uint64_t)v7, (uint64_t *)&unk_100524ED0);
    sub_10000FB74((uint64_t)v13, v29, (uint64_t *)&unk_100524ED0);
    uint64_t v30 = *v24;
    if ((*v24)(v7, 1, v3) == 1)
    {
      if (v30((char *)v29, 1, v3) != 1) {
        goto LABEL_14;
      }
      sub_10000FBD8((uint64_t)v61, (uint64_t *)&unk_100524ED0);
      unint64_t v13 = v50;
      sub_10000FBD8((uint64_t)v50, (uint64_t *)&unk_100524ED0);
      sub_10000FBD8(v25, (uint64_t *)&unk_100524ED0);
    }
    else
    {
      uint64_t v31 = (uint64_t)v46;
      sub_10000FB74((uint64_t)v7, (uint64_t)v46, (uint64_t *)&unk_100524ED0);
      if (v30((char *)v29, 1, v3) == 1)
      {
        (*v45)(v31, v3);
        uint64_t v25 = v47;
LABEL_14:
        sub_10000FBD8((uint64_t)v61, &qword_100521670);
        unint64_t v13 = v50;
        sub_10000FBD8((uint64_t)v50, (uint64_t *)&unk_100524ED0);
        sub_10000FBD8(v25, (uint64_t *)&unk_100524ED0);
LABEL_15:
        sub_1002AA830(v26, v58, type metadata accessor for ActionBarItem);
        uint64_t v32 = v62;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040BC0(0, v32[2] + 1, 1);
          uint64_t v32 = v62;
        }
        unint64_t v34 = v32[2];
        unint64_t v33 = v32[3];
        if (v34 >= v33 >> 1)
        {
          sub_100040BC0(v33 > 1, v34 + 1, 1);
          uint64_t v32 = v62;
        }
        v32[2] = v34 + 1;
        sub_1002AA830(v58, (uint64_t)v32 + v60 + v34 * v59, type metadata accessor for ActionBarItem);
        uint64_t v24 = v48;
        uint64_t v26 = (uint64_t)v49;
        goto LABEL_5;
      }
      uint64_t v35 = v44;
      (*v43)(v44, v29, v3);
      sub_1002AB13C(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v37 = *v45;
      uint64_t v38 = v35;
      uint64_t v26 = (uint64_t)v49;
      (*v45)((uint64_t)v38, v3);
      v37(v31, v3);
      uint64_t v24 = v48;
      sub_10000FBD8((uint64_t)v7, (uint64_t *)&unk_100524ED0);
      unint64_t v13 = v50;
      sub_10000FBD8((uint64_t)v50, (uint64_t *)&unk_100524ED0);
      uint64_t v25 = v47;
      sub_10000FBD8(v47, (uint64_t *)&unk_100524ED0);
      if ((v36 & 1) == 0) {
        goto LABEL_15;
      }
    }
    sub_1002ADE8C(v26, type metadata accessor for ActionBarItem);
LABEL_5:
    ++v23;
    uint64_t result = v53;
    if (v54 == v23)
    {
      uint64_t v22 = v62;
      goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10025DD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a4;
  sub_10000F214(&qword_10051A308);
  v4[11] = swift_task_alloc();
  v4[12] = type metadata accessor for MainActor();
  v4[13] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[14] = v6;
  v4[15] = v5;
  return _swift_task_switch(sub_10025DDEC, v6, v5);
}

uint64_t sub_10025DDEC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[7] = v4;
  v0[8] = v3;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[16] = v0[9];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[17] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10025DED0;
  return sub_100417A1C((uint64_t)(v0 + 2));
}

uint64_t sub_10025DED0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = *(void *)(v2 + 120);
    uint64_t v5 = sub_10025E4A8;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = *(void *)(v2 + 120);
    uint64_t v5 = sub_10025E014;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10025E014()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_10000F3B0(v0 + 2, v1);
  CGImageRef v3 = sub_100398EE0(v1, v2);
  v0[18] = v3;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  if (v3)
  {
    return _swift_task_switch(sub_10025E178, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v4 = (void *)v0[11];
    *uint64_t v4 = 0xD000000000000018;
    v4[1] = 0x800000010042A4B0;
    uint64_t v5 = type metadata accessor for ResultLookupState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
    sub_1002297C8((uint64_t)v4);
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10025E178()
{
  *(void *)(v0 + 152) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10025E204, v2, v1);
}

uint64_t sub_10025E204()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[11];
  swift_release();
  uint64_t v3 = type metadata accessor for ResultLookupState();
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  sub_1002297C8(v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[20] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10025E318;
  return sub_10025E594(v1);
}

uint64_t sub_10025E318()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 112);
  return _swift_task_switch(sub_10025E438, v3, v2);
}

uint64_t sub_10025E438()
{
  uint64_t v1 = *(void **)(v0 + 144);
  swift_release();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10025E4A8()
{
  swift_release();
  uint64_t v1 = *(void **)(v0 + 88);
  *uint64_t v1 = 0xD000000000000018;
  v1[1] = 0x800000010042A4B0;
  uint64_t v2 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_1002297C8((uint64_t)v1);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10025E594(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  sub_10000F214(&qword_100518AD8);
  v2[19] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TextDetectorResult(0);
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CVDetection();
  v2[25] = v4;
  v2[26] = *(void *)(v4 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  sub_10000F214(&qword_10051A308);
  v2[29] = swift_task_alloc();
  v2[30] = type metadata accessor for MainActor();
  v2[31] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[32] = v6;
  v2[33] = v5;
  return _swift_task_switch(sub_10025E774, v6, v5);
}

uint64_t sub_10025E774()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = type metadata accessor for ContentView();
  v0[34] = v2;
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(v2 + 44));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  v0[14] = v5;
  v0[15] = v4;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[35] = v0[16];
  v0[36] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[37] = v7;
  v0[38] = v6;
  return _swift_task_switch(sub_10025E850, v7, v6);
}

uint64_t sub_10025E850()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 280) + 16);
  *(void *)(v0 + 312) = v1;
  return _swift_task_switch(sub_10025E874, v1, 0);
}

uint64_t sub_10025E874()
{
  uint64_t v1 = *(void *)(v0[39] + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[40] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10025E918;
  uint64_t v3 = v0[17];
  return sub_1003460B4(v3, 1, v1);
}

uint64_t sub_10025E918(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 328) = a1;
  *(void *)(v4 + 336) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 304);
  uint64_t v6 = *(void *)(v3 + 296);
  if (v1) {
    uint64_t v7 = sub_10025EF8C;
  }
  else {
    uint64_t v7 = sub_10025EA5C;
  }
  return _swift_task_switch(v7, v6, v5);
}

uint64_t sub_10025EA5C()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  return _swift_task_switch(sub_10025EAC8, v1, v2);
}

uint64_t sub_10025EAC8()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[26];
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v37 = v0[21];
    uint64_t v38 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    uint64_t v5 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[27];
      uint64_t v6 = v0[28];
      sub_1002ADE24(v4, v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1002ADE24(v6, v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v9 = v0[27];
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v10 = v0[23];
        uint64_t v11 = v0[19];
        sub_1002AA830(v9, v10, type metadata accessor for TextDetectorResult);
        sub_1002AA830(v10, v11, type metadata accessor for TextDetectorResult);
        uint64_t v12 = 0;
      }
      else
      {
        sub_1002ADE8C(v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v12 = 1;
      }
      uint64_t v13 = v0[28];
      uint64_t v15 = v0[19];
      uint64_t v14 = v0[20];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v15, v12, 1, v14);
      sub_1002ADE8C(v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v15, 1, v14) == 1)
      {
        sub_10000FBD8(v0[19], &qword_100518AD8);
      }
      else
      {
        uint64_t v16 = v0[24];
        uint64_t v17 = v0[22];
        sub_1002AA830(v0[19], v16, type metadata accessor for TextDetectorResult);
        sub_1002AA830(v16, v17, type metadata accessor for TextDetectorResult);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = (void *)sub_100328970(0, v5[2] + 1, 1, (unint64_t)v5);
        }
        unint64_t v19 = v5[2];
        unint64_t v18 = v5[3];
        if (v19 >= v18 >> 1) {
          uint64_t v5 = (void *)sub_100328970(v18 > 1, v19 + 1, 1, (unint64_t)v5);
        }
        uint64_t v20 = v0[22];
        void v5[2] = v19 + 1;
        sub_1002AA830(v20, (uint64_t)v5+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v19, type metadata accessor for TextDetectorResult);
      }
      v4 += v38;
      --v2;
    }
    while (v2);
    uint64_t v21 = v0[34];
    uint64_t v22 = v0[18];
    swift_bridgeObjectRelease_n();
    id v23 = [self mainScreen];
    [v23 bounds];
    double v25 = v24;
    double v27 = v26;

    BOOL v28 = sub_1003780E4((uint64_t)v5, v25, v27, 0.0);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    v0[43] = v30;
    uint64_t v31 = *(void *)(v22 + *(int *)(v21 + 220));
    uint64_t v32 = (void *)swift_task_alloc();
    v0[44] = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_10025F13C;
    return sub_100089EBC((uint64_t)(v0 + 2), v28, v30, v31);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v34 = (void *)v0[29];
    *unint64_t v34 = 0xD000000000000017;
    v34[1] = 0x800000010042A4D0;
    uint64_t v35 = type metadata accessor for ResultLookupState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 0, 1, v35);
    sub_1002297C8((uint64_t)v34);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v36 = (uint64_t (*)(void))v0[1];
    return v36();
  }
}

uint64_t sub_10025EF8C()
{
  swift_release();
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  return _swift_task_switch(sub_10025F004, v1, v2);
}

uint64_t sub_10025F004()
{
  swift_release();
  uint64_t v1 = *(void **)(v0 + 232);
  *uint64_t v1 = 0xD000000000000017;
  v1[1] = 0x800000010042A4D0;
  uint64_t v2 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_1002297C8((uint64_t)v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10025F13C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10025F254, 0, 0);
}

uint64_t sub_10025F254()
{
  *(void *)(v0 + 360) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10025F2E0, v2, v1);
}

uint64_t sub_10025F2E0()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  *(void *)(v0 + 72) = 2;
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 80) = 0;
  *(unsigned char *)(v0 + 104) = 3;
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  char v2 = sub_100049C54(v1);
  sub_10000FBD8(v1, &qword_10051A308);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 144);
    uint64_t v4 = swift_task_alloc();
    *(void *)(v4 + 16) = v3;
    *(void *)(v4 + 24) = v0 + 16;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
    sub_1002A6A7C(v0 + 16);
    swift_task_dealloc();
  }
  else
  {
    sub_1002A6A7C(v0 + 16);
  }
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 264);
  return _swift_task_switch(sub_10025F42C, v5, v6);
}

uint64_t sub_10025F42C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10025F4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[22] = a4;
  uint64_t v5 = type metadata accessor for CVBundle(0);
  v4[23] = v5;
  v4[24] = *(void *)(v5 - 8);
  v4[25] = swift_task_alloc();
  sub_10000F214(&qword_10051A308);
  v4[26] = swift_task_alloc();
  sub_10000F214(&qword_10051B760);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  sub_10000F214(&qword_10051B768);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = type metadata accessor for MainActor();
  v4[32] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[33] = v7;
  v4[34] = v6;
  return _swift_task_switch(sub_10025F68C, v7, v6);
}

uint64_t sub_10025F68C()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(int *)(type metadata accessor for ContentView() + 44);
  *(_DWORD *)(v0 + 408) = v3;
  uint64_t v4 = (uint64_t *)(v2 + v3);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  *(void *)(v0 + 80) = v6;
  *(void *)(v0 + 88) = v5;
  *(void *)(v0 + 280) = sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v7 = *(void *)(v0 + 128);
  swift_getKeyPath();
  *(void *)(v0 + 152) = v7;
  *(void *)(v0 + 288) = sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = v7 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v8, v1, &qword_10051B760);
  uint64_t v9 = sub_10000F214(&qword_10051A060);
  *(void *)(v0 + 296) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  *(void *)(v0 + 304) = v11;
  *(void *)(v0 + 312) = (v10 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v12 = v11(v1, 1, v9);
  uint64_t v13 = *(void *)(v0 + 240);
  uint64_t v14 = *(void *)(v0 + 224);
  uint64_t v15 = *(void *)(v0 + 184);
  uint64_t v16 = *(void *)(v0 + 192);
  if (v12)
  {
    sub_10000FBD8(*(void *)(v0 + 224), &qword_10051B760);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v17(v13, 1, 1, v15);
  }
  else
  {
    sub_1002ADE24(*(void *)(v0 + 224), *(void *)(v0 + 240), type metadata accessor for CVBundle);
    sub_10000FBD8(v14, &qword_10051B760);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v17(v13, 0, 1, v15);
  }
  *(void *)(v0 + 320) = v17;
  swift_release();
  unint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v18;
  *unint64_t v18 = v0;
  v18[1] = sub_10025F908;
  uint64_t v19 = *(void *)(v0 + 240);
  return sub_100260680(v19);
}

uint64_t sub_10025F908(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 240);
  *(void *)(*v1 + 336) = a1;
  swift_task_dealloc();
  sub_10000FBD8(v3, &qword_10051B768);
  uint64_t v4 = *(void *)(v2 + 272);
  uint64_t v5 = *(void *)(v2 + 264);
  return _swift_task_switch(sub_10025FA5C, v5, v4);
}

uint64_t sub_10025FA5C()
{
  if (v0[42])
  {
    return _swift_task_switch(sub_10025FBCC, 0, 0);
  }
  else
  {
    uint64_t v1 = (void *)v0[26];
    swift_release();
    *uint64_t v1 = 0xD000000000000018;
    v1[1] = 0x800000010042A4B0;
    uint64_t v2 = type metadata accessor for ResultLookupState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
    sub_1002297C8((uint64_t)v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_10025FBCC()
{
  *(void *)(v0 + 344) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10025FC58, v2, v1);
}

uint64_t sub_10025FC58()
{
  uint64_t v1 = v0[26];
  swift_release();
  uint64_t v2 = type metadata accessor for ResultLookupState();
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(void *)(v1 + 64) = 0;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_1002297C8(v1);
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[34];
  return _swift_task_switch(sub_10025FD38, v3, v4);
}

uint64_t sub_10025FD38()
{
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = (uint64_t *)(*(void *)(v0 + 176) + *(int *)(v0 + 408));
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  *(void *)(v0 + 112) = v6;
  *(void *)(v0 + 120) = v5;
  State.wrappedValue.getter();
  uint64_t v7 = *(void *)(v0 + 136);
  swift_getKeyPath();
  *(void *)(v0 + 168) = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = v7 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v8, v3, &qword_10051B760);
  uint64_t v9 = 1;
  if (!v1(v3, 1, v2))
  {
    sub_1002ADE24(*(void *)(v0 + 216), *(void *)(v0 + 232), type metadata accessor for CVBundle);
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 320);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 184);
  uint64_t v13 = *(void *)(v0 + 192);
  sub_10000FBD8(*(void *)(v0 + 216), &qword_10051B760);
  v10(v11, v9, 1, v12);
  swift_release();
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  uint64_t v15 = *(int *)(v0 + 408);
  uint64_t v16 = *(void *)(v0 + 232);
  if (v14 == 1)
  {
    uint64_t v17 = (void *)(*(void *)(v0 + 176) + v15);
    sub_10000FBD8(v16, &qword_10051B768);
    uint64_t v18 = v17[1];
    *(void *)(v0 + 96) = *v17;
    *(void *)(v0 + 104) = v18;
    State.wrappedValue.getter();
    *(void *)(v0 + 352) = *(void *)(v0 + 144);
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_100260058;
    return sub_100416E20();
  }
  else
  {
    uint64_t v21 = (void *)(*(void *)(v0 + 176) + v15);
    sub_1002AA830(v16, *(void *)(v0 + 200), type metadata accessor for CVBundle);
    uint64_t v22 = v21[1];
    *(void *)(v0 + 64) = *v21;
    *(void *)(v0 + 72) = v22;
    State.wrappedValue.getter();
    *(void *)(v0 + 368) = *(void *)(v0 + 160);
    double v25 = (uint64_t (*)(uint64_t))((char *)&dword_1005265D0 + dword_1005265D0);
    id v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v23;
    *id v23 = v0;
    v23[1] = sub_1002601D0;
    uint64_t v24 = *(void *)(v0 + 200);
    return v25(v24);
  }
}

uint64_t sub_100260058(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    a1 = 0;
  }
  swift_release();
  v4[49] = a1;
  uint64_t v6 = v4[42];
  uint64_t v7 = (void *)swift_task_alloc();
  v4[50] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1002603EC;
  return sub_100261044(v6, a1);
}

uint64_t sub_1002601D0(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v5 = v4[33];
    uint64_t v6 = v4[34];
    uint64_t v7 = sub_1002605C4;
  }
  else
  {
    swift_release();
    v4[48] = a1;
    uint64_t v5 = v4[33];
    uint64_t v6 = v4[34];
    uint64_t v7 = sub_100260324;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_100260324()
{
  uint64_t v1 = v0[48];
  sub_1002ADE8C(v0[25], type metadata accessor for CVBundle);
  v0[49] = v1;
  uint64_t v2 = v0[42];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[50] = (uint64_t)v3;
  void *v3 = v0;
  v3[1] = sub_1002603EC;
  return sub_100261044(v2, v1);
}

uint64_t sub_1002603EC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 272);
  uint64_t v3 = *(void *)(v1 + 264);
  return _swift_task_switch(sub_10026050C, v3, v2);
}

uint64_t sub_10026050C()
{
  uint64_t v1 = (void *)v0[49];
  uint64_t v2 = (void *)v0[42];
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1002605C4()
{
  sub_1002ADE8C(v0[25], type metadata accessor for CVBundle);
  v0[49] = 0;
  uint64_t v1 = v0[42];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[50] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002603EC;
  return sub_100261044(v1, 0);
}

uint64_t sub_100260680(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  sub_10000F214(&qword_10051B768);
  v2[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CVBundle(0);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MainActor();
  v2[15] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[16] = v5;
  v2[17] = v4;
  return _swift_task_switch(sub_1002607A8, v5, v4);
}

uint64_t sub_1002607A8()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  sub_10000FB74(v0[8], v3, &qword_10051B768);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000FBD8(v0[10], &qword_10051B768);
    uint64_t v4 = v0[9];
    uint64_t v5 = (uint64_t *)(v4 + *(int *)(type metadata accessor for ContentView() + 44));
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    v0[2] = v7;
    v0[3] = v6;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    v0[26] = v0[6];
    uint64_t v8 = (void *)swift_task_alloc();
    v0[27] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100260E00;
    return sub_100416E20();
  }
  else
  {
    uint64_t v10 = v0[9];
    sub_1002AA830(v0[10], v0[13], type metadata accessor for CVBundle);
    uint64_t v11 = (uint64_t *)(v10 + *(int *)(type metadata accessor for ContentView() + 44));
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    v0[4] = v13;
    v0[5] = v12;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    v0[18] = v0[7];
    v0[19] = static MainActor.shared.getter();
    uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
    v0[20] = v15;
    v0[21] = v14;
    return _swift_task_switch(sub_100260994, v15, v14);
  }
}

uint64_t sub_100260994()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 144) + 16);
  *(void *)(v0 + 176) = v1;
  return _swift_task_switch(sub_1002609B8, v1, 0);
}

uint64_t sub_1002609B8()
{
  uint64_t v1 = *(void *)(v0[22] + 112);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005265C8 + dword_1005265C8);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[23] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100260A6C;
  uint64_t v3 = v0[13];
  return v5(v3, v1);
}

uint64_t sub_100260A6C(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 192) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[20];
    uint64_t v6 = v4[21];
    uint64_t v7 = sub_100260C9C;
  }
  else
  {
    v4[25] = a1;
    uint64_t v5 = v4[20];
    uint64_t v6 = v4[21];
    uint64_t v7 = sub_100260B94;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_100260B94()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  return _swift_task_switch(sub_100260C00, v1, v2);
}

uint64_t sub_100260C00()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[13];
  swift_release();
  sub_1002ADE8C(v2, type metadata accessor for CVBundle);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v1);
}

uint64_t sub_100260C9C()
{
  swift_release();
  swift_errorRelease();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  return _swift_task_switch(sub_100260D14, v1, v2);
}

uint64_t sub_100260D14()
{
  sub_1002ADE8C(v0[13], type metadata accessor for CVBundle);
  uint64_t v1 = v0[9];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[26] = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[27] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100260E00;
  return sub_100416E20();
}

uint64_t sub_100260E00(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v5 = v4[16];
    uint64_t v6 = v4[17];
    uint64_t v7 = sub_100260FCC;
  }
  else
  {
    v4[28] = a1;
    uint64_t v5 = v4[16];
    uint64_t v6 = v4[17];
    uint64_t v7 = sub_100260F50;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_100260F50()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100260FCC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100261044(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  sub_10000F214(&qword_10051A308);
  v3[8] = swift_task_alloc();
  sub_10000F214(&qword_100518AD8);
  v3[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TextDetectorResult(0);
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CVDetection();
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContentView();
  v3[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[20] = v7;
  v3[21] = *(void *)(v7 + 64);
  v3[22] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v3[23] = swift_task_alloc();
  v3[24] = type metadata accessor for MainActor();
  v3[25] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[26] = v9;
  v3[27] = v8;
  return _swift_task_switch(sub_1002612BC, v9, v8);
}

uint64_t sub_1002612BC()
{
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[20];
  uint64_t v19 = v0[19];
  uint64_t v5 = v0[7];
  uint64_t v6 = (void *)v0[5];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  sub_1002ADE24(v5, v2, (uint64_t (*)(void))type metadata accessor for ContentView);
  id v8 = v6;
  uint64_t v9 = static MainActor.shared.getter();
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v11 = (v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = &protocol witness table for MainActor;
  sub_1002AA830(v2, v12 + v10, (uint64_t (*)(void))type metadata accessor for ContentView);
  *(void *)(v12 + v11) = v8;
  v0[28] = sub_1000D0B80(v1, (uint64_t)&unk_1005265E8, v12);
  uint64_t v13 = (uint64_t *)(v5 + *(int *)(v19 + 44));
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  v0[2] = v15;
  v0[3] = v14;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[29] = v0[4];
  v0[30] = static MainActor.shared.getter();
  uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[31] = v17;
  v0[32] = v16;
  return _swift_task_switch(sub_1002614B0, v17, v16);
}

uint64_t sub_1002614B0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 232) + 16);
  *(void *)(v0 + 264) = v1;
  return _swift_task_switch(sub_1002614D4, v1, 0);
}

uint64_t sub_1002614D4()
{
  uint64_t v1 = *(void *)(v0[33] + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[34] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100261578;
  uint64_t v3 = v0[5];
  return sub_1003460B4(v3, 1, v1);
}

uint64_t sub_100261578(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 280) = a1;
  *(void *)(v4 + 288) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 256);
  uint64_t v6 = *(void *)(v3 + 248);
  if (v1) {
    uint64_t v7 = sub_100261B6C;
  }
  else {
    uint64_t v7 = sub_1002616BC;
  }
  return _swift_task_switch(v7, v6, v5);
}

uint64_t sub_1002616BC()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  return _swift_task_switch(sub_100261728, v1, v2);
}

uint64_t sub_100261728()
{
  uint64_t v1 = v0[35];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[16];
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v25 = v0[11];
    uint64_t v26 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    uint64_t v5 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[17];
      uint64_t v6 = v0[18];
      sub_1002ADE24(v4, v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1002ADE24(v6, v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v9 = v0[17];
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v10 = v0[13];
        uint64_t v11 = v0[9];
        sub_1002AA830(v9, v10, type metadata accessor for TextDetectorResult);
        sub_1002AA830(v10, v11, type metadata accessor for TextDetectorResult);
        uint64_t v12 = 0;
      }
      else
      {
        sub_1002ADE8C(v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v12 = 1;
      }
      uint64_t v13 = v0[18];
      uint64_t v15 = v0[9];
      uint64_t v14 = v0[10];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v15, v12, 1, v14);
      sub_1002ADE8C(v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v15, 1, v14) == 1)
      {
        sub_10000FBD8(v0[9], &qword_100518AD8);
      }
      else
      {
        uint64_t v16 = v0[14];
        uint64_t v17 = v0[12];
        sub_1002AA830(v0[9], v16, type metadata accessor for TextDetectorResult);
        sub_1002AA830(v16, v17, type metadata accessor for TextDetectorResult);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = (void *)sub_100328970(0, v5[2] + 1, 1, (unint64_t)v5);
        }
        unint64_t v19 = v5[2];
        unint64_t v18 = v5[3];
        if (v19 >= v18 >> 1) {
          uint64_t v5 = (void *)sub_100328970(v18 > 1, v19 + 1, 1, (unint64_t)v5);
        }
        uint64_t v20 = v0[12];
        void v5[2] = v19 + 1;
        sub_1002AA830(v20, (uint64_t)v5+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v19, type metadata accessor for TextDetectorResult);
      }
      v0[38] = v5;
      v4 += v26;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
    return _swift_task_switch(sub_100261D68, 0, 0);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)v0[8];
    sub_10000F214(&qword_10051F3B0);
    Task.cancel()();
    *uint64_t v21 = 0xD000000000000017;
    v21[1] = 0x800000010042A4D0;
    uint64_t v22 = type metadata accessor for ResultLookupState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 0, 1, v22);
    sub_1002297C8((uint64_t)v21);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
}

uint64_t sub_100261B6C()
{
  swift_release();
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  return _swift_task_switch(sub_100261BE4, v1, v2);
}

uint64_t sub_100261BE4()
{
  swift_release();
  uint64_t v1 = *(void **)(v0 + 64);
  sub_10000F214(&qword_10051F3B0);
  Task.cancel()();
  *uint64_t v1 = 0xD000000000000017;
  v1[1] = 0x800000010042A4D0;
  uint64_t v2 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_1002297C8((uint64_t)v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100261D68()
{
  *(void *)(v0 + 296) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100261DF4, v2, v1);
}

uint64_t sub_100261DF4()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[28];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[5];
  swift_release();
  sub_100273B90(v1, v3, v2, v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[27];
  return _swift_task_switch(sub_100261EA0, v6, v7);
}

uint64_t sub_100261EA0()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL sub_100261F7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContentView();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v12 = v0 + *(int *)(v11 + 188);
  char v13 = *(unsigned char *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  char v27 = v13;
  uint64_t v28 = v14;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  int v15 = v29;
  sub_1002ADE24(v1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v15 == 1)
  {
    sub_1002ADE8C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_1002ADE24(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ContentView);
LABEL_4:
    sub_1002ADE8C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_1002ADE24(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ContentView);
    goto LABEL_5;
  }
  uint64_t v16 = &v10[*(int *)(v2 + 192)];
  char v17 = *v16;
  uint64_t v18 = *((void *)v16 + 1);
  char v27 = v17;
  uint64_t v28 = v18;
  State.wrappedValue.getter();
  sub_1002ADE8C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ContentView);
  int v19 = v29;
  sub_1002ADE24(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ContentView);
  if (v19 == 1) {
    goto LABEL_4;
  }
  uint64_t v22 = &v7[*(int *)(v2 + 196)];
  char v23 = *v22;
  uint64_t v24 = *((void *)v22 + 1);
  char v27 = v23;
  uint64_t v28 = v24;
  State.wrappedValue.getter();
  sub_1002ADE8C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ContentView);
  unsigned __int8 v25 = v29;
  sub_1002ADE24(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ContentView);
  if ((v25 & 1) == 0)
  {
    BOOL v20 = sub_100248990();
    goto LABEL_6;
  }
LABEL_5:
  BOOL v20 = 1;
LABEL_6:
  sub_1002ADE8C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ContentView);
  return v20;
}

uint64_t sub_100262234()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1002622A0(uint64_t a1)
{
  uint64_t v94 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v94);
  uint64_t v95 = (uint64_t)&v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for VisualDomain();
  uint64_t v96 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  unint64_t v100 = (char *)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v101 = (char *)&v93 - v5;
  uint64_t v6 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v6);
  uint64_t v97 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CVDetection();
  __chkstk_darwin(v14);
  uint64_t v98 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v93 - v17;
  __chkstk_darwin(v19);
  uint64_t v99 = (uint64_t)&v93 - v20;
  uint64_t v21 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v21 - 8);
  char v23 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (int *)type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  uint64_t v25 = type metadata accessor for ResultLookupState();
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v23, 1, v25);
  sub_10000FBD8((uint64_t)v23, &qword_10051A308);
  if (v26 == 1)
  {
    char v27 = (char *)(a1 + v24[39]);
    char v28 = *v27;
    uint64_t v29 = *((void *)v27 + 1);
    LOBYTE(v103) = v28;
    uint64_t v104 = v29;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.getter();
    if ((v105 & 1) == 0)
    {
      uint64_t v30 = (char *)(a1 + v24[40]);
      char v31 = *v30;
      uint64_t v32 = *((void *)v30 + 1);
      LOBYTE(v103) = v31;
      uint64_t v104 = v32;
      sub_10000F214(&qword_1005262F8);
      State.wrappedValue.getter();
      if (!(_BYTE)v105)
      {
        unint64_t v33 = (char *)(a1 + v24[19]);
        char v34 = *v33;
        uint64_t v35 = *((void *)v33 + 1);
        LOBYTE(v103) = v34;
        uint64_t v104 = v35;
        State.wrappedValue.getter();
        if ((v105 & 1) == 0)
        {
          char v36 = (char *)(a1 + v24[33]);
          char v37 = *v36;
          uint64_t v38 = *((void *)v36 + 1);
          LOBYTE(v103) = v37;
          uint64_t v104 = v38;
          State.wrappedValue.getter();
          if ((v105 & 1) == 0 && !sub_100261F7C())
          {
            if (qword_100517D48 != -1) {
              swift_once();
            }
            if ([*(id *)(qword_10055E060 + OBJC_IVAR____TtC6Tamale16LocationsHandler_manager) authorizationStatus] >= 3)
            {
              if (qword_100517E98 != -1) {
                swift_once();
              }
              uint64_t v52 = type metadata accessor for Logger();
              sub_10000F378(v52, (uint64_t)qword_10055E2E0);
              uint64_t v40 = Logger.logObject.getter();
              os_log_type_t v41 = static os_log_type_t.info.getter();
              if (!os_log_type_enabled(v40, v41)) {
                goto LABEL_12;
              }
              uint64_t v42 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v42 = 0;
              unint64_t v43 = "Not presenting location access follow-up because access was set from elsewhere";
              goto LABEL_11;
            }
            type metadata accessor for UserDefaultsUtility();
            uint64_t v46 = swift_allocObject();
            ObservationRegistrar.init()();
            id v47 = [self standardUserDefaults];
            NSString v48 = String._bridgeToObjectiveC()();
            LODWORD(v93) = [v47 BOOLForKey:v48];

            swift_setDeallocating();
            uint64_t v49 = v46 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
            uint64_t v50 = type metadata accessor for ObservationRegistrar();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
            swift_deallocClassInstance();
            if (v93)
            {
              if (qword_100517E98 != -1) {
                swift_once();
              }
              uint64_t v51 = type metadata accessor for Logger();
              sub_10000F378(v51, (uint64_t)qword_10055E2E0);
              uint64_t v40 = Logger.logObject.getter();
              os_log_type_t v41 = static os_log_type_t.info.getter();
              if (!os_log_type_enabled(v40, v41)) {
                goto LABEL_12;
              }
              uint64_t v42 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v42 = 0;
              unint64_t v43 = "Not presenting location access follow-up because it has already been presented";
              goto LABEL_11;
            }
            uint64_t v53 = (uint64_t *)(a1 + v24[11]);
            uint64_t v55 = *v53;
            uint64_t v54 = v53[1];
            uint64_t v103 = v55;
            uint64_t v104 = v54;
            sub_10000F214(&qword_100525F40);
            State.wrappedValue.getter();
            uint64_t v56 = v105;
            swift_getKeyPath();
            uint64_t v103 = v56;
            sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            uint64_t v57 = v56 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
            swift_beginAccess();
            sub_10000FB74(v57, (uint64_t)v10, &qword_10051B760);
            uint64_t v58 = sub_10000F214(&qword_10051A060);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v10, 1, v58))
            {
              sub_10000FBD8((uint64_t)v10, &qword_10051B760);
              uint64_t v59 = type metadata accessor for CVBundle(0);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v13, 1, 1, v59);
            }
            else
            {
              sub_1002ADE24((uint64_t)v10, (uint64_t)v13, type metadata accessor for CVBundle);
              sub_10000FBD8((uint64_t)v10, &qword_10051B760);
              uint64_t v59 = type metadata accessor for CVBundle(0);
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v13, 0, 1, v59);
            }
            swift_release();
            type metadata accessor for CVBundle(0);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v13, 1, v59) == 1)
            {
              sub_10000FBD8((uint64_t)v13, &qword_10051B768);
              if (qword_100517E98 != -1) {
                swift_once();
              }
              uint64_t v60 = type metadata accessor for Logger();
              sub_10000F378(v60, (uint64_t)qword_10055E2E0);
              uint64_t v40 = Logger.logObject.getter();
              os_log_type_t v41 = static os_log_type_t.info.getter();
              if (!os_log_type_enabled(v40, v41)) {
                goto LABEL_12;
              }
              uint64_t v42 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v42 = 0;
              unint64_t v43 = "Not presenting location access follow-up because nothing is in the boresight";
              goto LABEL_11;
            }
            sub_10019D408((uint64_t)v18);
            sub_1002ADE8C((uint64_t)v13, type metadata accessor for CVBundle);
            uint64_t v61 = v99;
            sub_1002AA830((uint64_t)v18, v99, (uint64_t (*)(void))type metadata accessor for CVDetection);
            uint64_t v62 = v98;
            sub_1002ADE24(v61, (uint64_t)v98, (uint64_t (*)(void))type metadata accessor for CVDetection);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (!EnumCaseMultiPayload)
            {
              uint64_t v74 = v95;
              sub_1002AA830((uint64_t)v62, v95, type metadata accessor for ObjectDetectorResult);
              uint64_t v75 = (void *)(v74 + *(int *)(v94 + 28));
              if (*v75 == 1852270963 && v75[1] == 0xE400000000000000) {
                char v44 = 1;
              }
              else {
                char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
              }
              sub_1002ADE8C(v61, (uint64_t (*)(void))type metadata accessor for CVDetection);
              unint64_t v80 = type metadata accessor for ObjectDetectorResult;
              uint64_t v81 = v74;
              goto LABEL_70;
            }
            if (EnumCaseMultiPayload == 1)
            {
              uint64_t v64 = v97;
              sub_1002AA830((uint64_t)v62, v97, type metadata accessor for ParseDetectorResult);
              uint64_t v65 = *(void *)(v64 + *(int *)(v6 + 28));
              swift_bridgeObjectRetain();
              uint64_t v66 = v101;
              static VisualDomain.storefront.getter();
              uint64_t v95 = *(void *)(v65 + 16);
              if (!v95)
              {
                char v44 = 0;
                uint64_t v98 = *(char **)(v96 + 8);
                ((void (*)(char *, uint64_t))v98)(v66, v102);
                goto LABEL_59;
              }
              uint64_t v67 = v96;
              unint64_t v68 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
              uint64_t v69 = v100;
              uint64_t v70 = v102;
              uint64_t v94 = *(void *)(v96 + 16);
              ((void (*)(char *, unint64_t, uint64_t))v94)(v100, v65 + v68, v102);
              sub_1002AB13C((unint64_t *)&qword_100519868, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
              swift_bridgeObjectRetain();
              char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v72 = *(uint64_t **)(v67 + 8);
              uint64_t v93 = (v67 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
              uint64_t v98 = (char *)v72;
              ((void (*)(char *, uint64_t))v72)(v69, v70);
              if (v71)
              {
                swift_bridgeObjectRelease();
                char v44 = 1;
                uint64_t v73 = v102;
LABEL_58:
                ((void (*)(char *, uint64_t))v98)(v66, v73);
LABEL_59:
                swift_bridgeObjectRelease();
                if (v44)
                {
                  if (qword_100517E98 != -1) {
                    swift_once();
                  }
                  uint64_t v87 = type metadata accessor for Logger();
                  sub_10000F378(v87, (uint64_t)qword_10055E2E0);
                  uint64_t v88 = Logger.logObject.getter();
                  os_log_type_t v89 = static os_log_type_t.info.getter();
                  if (!os_log_type_enabled(v88, v89)) {
                    goto LABEL_69;
                  }
                  uint64_t v90 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v90 = 0;
                  uint64_t v91 = "Presenting location access follow-up because there is a store front";
                }
                else
                {
                  if (qword_100517E98 != -1) {
                    swift_once();
                  }
                  uint64_t v92 = type metadata accessor for Logger();
                  sub_10000F378(v92, (uint64_t)qword_10055E2E0);
                  uint64_t v88 = Logger.logObject.getter();
                  os_log_type_t v89 = static os_log_type_t.info.getter();
                  if (!os_log_type_enabled(v88, v89)) {
                    goto LABEL_69;
                  }
                  uint64_t v90 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v90 = 0;
                  uint64_t v91 = "Not presenting location access follow-up because there is no store front";
                }
                _os_log_impl((void *)&_mh_execute_header, v88, v89, v91, v90, 2u);
                swift_slowDealloc();
LABEL_69:

                sub_1002ADE8C(v97, type metadata accessor for ParseDetectorResult);
                unint64_t v80 = (uint64_t (*)(void))type metadata accessor for CVDetection;
                uint64_t v81 = v61;
LABEL_70:
                sub_1002ADE8C(v81, v80);
                return v44 & 1;
              }
              if (v95 == 1)
              {
                swift_bridgeObjectRelease();
                char v44 = 0;
                uint64_t v73 = v102;
                goto LABEL_58;
              }
              uint64_t v61 = *(void *)(v96 + 72);
              uint64_t v96 = v65;
              uint64_t v62 = (char *)(v65 + v61 + v68);
              uint64_t v82 = 1;
              uint64_t v83 = v100;
              uint64_t v84 = v102;
              while (1)
              {
                ((void (*)(char *, char *, uint64_t))v94)(v83, v62, v84);
                uint64_t v85 = v82 + 1;
                if (__OFADD__(v82, 1)) {
                  break;
                }
                char v86 = dispatch thunk of static Equatable.== infix(_:_:)();
                ((void (*)(char *, uint64_t))v98)(v83, v84);
                if (v86)
                {
                  swift_bridgeObjectRelease();
                  char v44 = 1;
                  uint64_t v61 = v99;
                  uint64_t v66 = v101;
                  uint64_t v73 = v102;
                  goto LABEL_58;
                }
                ++v82;
                v62 += v61;
                uint64_t v83 = v100;
                uint64_t v66 = v101;
                if (v85 == v95)
                {
                  swift_bridgeObjectRelease();
                  char v44 = 0;
                  uint64_t v61 = v99;
                  uint64_t v73 = v102;
                  goto LABEL_58;
                }
              }
              __break(1u);
            }
            else if (qword_100517E98 == -1)
            {
LABEL_44:
              uint64_t v76 = type metadata accessor for Logger();
              sub_10000F378(v76, (uint64_t)qword_10055E2E0);
              unint64_t v77 = Logger.logObject.getter();
              os_log_type_t v78 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v77, v78))
              {
                unint64_t v79 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v79 = 0;
                _os_log_impl((void *)&_mh_execute_header, v77, v78, "Not presenting location access follow-up because there's nothing valid in the boresight", v79, 2u);
                swift_slowDealloc();
              }

              sub_1002ADE8C(v61, (uint64_t (*)(void))type metadata accessor for CVDetection);
              sub_1002ADE8C((uint64_t)v62, (uint64_t (*)(void))type metadata accessor for CVDetection);
              goto LABEL_13;
            }
            swift_once();
            goto LABEL_44;
          }
        }
      }
    }
  }
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  sub_10000F378(v39, (uint64_t)qword_10055E2E0);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v40, v41)) {
    goto LABEL_12;
  }
  uint64_t v42 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v42 = 0;
  unint64_t v43 = "Not presenting location access follow-up because something else is showing";
LABEL_11:
  _os_log_impl((void *)&_mh_execute_header, v40, v41, v43, v42, 2u);
  swift_slowDealloc();
LABEL_12:

LABEL_13:
  char v44 = 0;
  return v44 & 1;
}

uint64_t sub_1002632B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v7 + 49) = a7;
  *(void *)(v7 + 64) = a5;
  *(void *)(v7 + 72) = a6;
  *(void *)(v7 + 56) = a4;
  type metadata accessor for MainActor();
  *(void *)(v7 + 80) = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v7 + 88) = v9;
  *(void *)(v7 + 96) = v8;
  return _swift_task_switch(sub_100263350, v9, v8);
}

uint64_t sub_100263350()
{
  sub_10004ECF4(*(long long **)(v0 + 56), v0 + 16);
  uint64_t v1 = *(void *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 48))
  {
    case 1:
      uint64_t v5 = *(void *)(v0 + 72);
      swift_release();
      sub_100268230(v5);
      uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v6();
      break;
    case 2:
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 120) = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_1002639E8;
      uint64_t v8 = *(void *)(v0 + 72);
      uint64_t result = sub_100265564(v8);
      break;
    case 3:
      uint64_t v9 = *(void *)(v0 + 24) | *(void *)(v0 + 32) | *(void *)(v0 + 40);
      if (v9 | v1)
      {
        if (v1 == 1 && v9 == 0)
        {
          uint64_t v17 = (void *)swift_task_alloc();
          *(void *)(v0 + 128) = v17;
          *uint64_t v17 = v0;
          v17[1] = sub_100263B08;
          uint64_t v18 = *(void *)(v0 + 72);
          uint64_t result = sub_100266500(v18);
        }
        else if (v1 == 2 && v9 == 0)
        {
          uint64_t v19 = (void *)swift_task_alloc();
          *(void *)(v0 + 144) = v19;
          *uint64_t v19 = v0;
          v19[1] = sub_100263DA8;
          uint64_t v20 = *(void *)(v0 + 72);
          uint64_t result = sub_1002685E0(v20);
        }
        else if (v1 != 3 || v9)
        {
          if (v1 != 4 || v9)
          {
            char v23 = (void *)swift_task_alloc();
            *(void *)(v0 + 104) = v23;
            *char v23 = v0;
            v23[1] = sub_1002637A8;
            uint64_t result = sub_10026BC4C();
          }
          else
          {
            uint64_t v21 = (void *)swift_task_alloc();
            *(void *)(v0 + 160) = v21;
            *uint64_t v21 = v0;
            v21[1] = sub_100263FE8;
            uint64_t v22 = *(void *)(v0 + 72);
            uint64_t result = sub_10026A674(v22);
          }
        }
        else
        {
          uint64_t v12 = (void *)swift_task_alloc();
          *(void *)(v0 + 152) = v12;
          *uint64_t v12 = v0;
          v12[1] = sub_100263EC8;
          uint64_t v13 = *(void *)(v0 + 72);
          uint64_t result = sub_100269878(v13);
        }
      }
      else
      {
        uint64_t v14 = (void *)swift_task_alloc();
        *(void *)(v0 + 112) = v14;
        *uint64_t v14 = v0;
        v14[1] = sub_1002638C8;
        char v15 = *(unsigned char *)(v0 + 49);
        uint64_t v16 = *(void *)(v0 + 72);
        uint64_t result = sub_100264108(v16, v15);
      }
      break;
    default:
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 136) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_100263C28;
      uint64_t v3 = *(void *)(v0 + 72);
      uint64_t result = sub_1002671CC(v3);
      break;
  }
  return result;
}

uint64_t sub_1002637A8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1002B4930, v3, v2);
}

uint64_t sub_1002638C8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1002B4930, v3, v2);
}

uint64_t sub_1002639E8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1002B4930, v3, v2);
}

uint64_t sub_100263B08()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1002B4930, v3, v2);
}

uint64_t sub_100263C28()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_100263D48, v3, v2);
}

uint64_t sub_100263D48()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100263DA8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1002B4930, v3, v2);
}

uint64_t sub_100263EC8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1002B4930, v3, v2);
}

uint64_t sub_100263FE8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1002B4930, v3, v2);
}

uint64_t sub_100264108(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 422) = a2;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v2;
  uint64_t v4 = type metadata accessor for Spring();
  *(void *)(v3 + 192) = v4;
  *(void *)(v3 + 200) = *(void *)(v4 - 8);
  *(void *)(v3 + 208) = swift_task_alloc();
  *(void *)(v3 + 216) = type metadata accessor for BundleClassification.ClassificationType(0);
  *(void *)(v3 + 224) = swift_task_alloc();
  *(void *)(v3 + 232) = *(void *)(type metadata accessor for BundleClassification(0) - 8);
  *(void *)(v3 + 240) = swift_task_alloc();
  sub_10000F214(&qword_10051A308);
  *(void *)(v3 + 248) = swift_task_alloc();
  *(void *)(v3 + 256) = type metadata accessor for CVBundle(0);
  *(void *)(v3 + 264) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContentView();
  *(void *)(v3 + 272) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 280) = v6;
  *(void *)(v3 + 288) = *(void *)(v6 + 64);
  *(void *)(v3 + 296) = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  *(void *)(v3 + 304) = swift_task_alloc();
  *(void *)(v3 + 312) = type metadata accessor for MainActor();
  *(void *)(v3 + 320) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 328) = v8;
  *(void *)(v3 + 336) = v7;
  return _swift_task_switch(sub_100264380, v8, v7);
}

uint64_t sub_100264380()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(int *)(*(void *)(v0 + 272) + 156);
  *(_DWORD *)(v0 + 416) = v2;
  uint64_t v3 = v1 + v2;
  LOBYTE(v1) = *(unsigned char *)v3;
  uint64_t v4 = *(void *)(v3 + 8);
  *(unsigned char *)(v0 + 80) = v1;
  *(void *)(v0 + 88) = v4;
  *(void *)(v0 + 344) = sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (*(unsigned char *)(v0 + 421) == 1)
  {
    swift_release();
LABEL_29:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v41 = *(uint64_t (**)(void))(v0 + 8);
    return v41();
  }
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 280);
  uint64_t v42 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 184);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
  sub_1002ADE24(v9, v6, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  sub_1002AA830(v6, v14 + v13, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_100064D5C(v5, (uint64_t)&unk_1005264C0, v14);
  swift_release();
  sub_1002ADE24(v10, v8, type metadata accessor for CVBundle);
  char v15 = (void *)(v9 + *(int *)(v42 + 44));
  uint64_t v16 = v15[1];
  *(void *)(v0 + 112) = *v15;
  *(void *)(v0 + 120) = v16;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  uint64_t v17 = *(void *)(v0 + 160);
  swift_getKeyPath();
  *(void *)(v0 + 152) = v17;
  sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = *(void *)(v17 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v19 = *(void *)(v17 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  unsigned int v20 = *(unsigned __int8 *)(v17 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v18, v19, *(unsigned char *)(v17 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  if (v20 >= 2)
  {
    if (v20 != 2)
    {
      if (!(v18 | v19) || (*(unsigned char *)(v0 + 422) & 1) != 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
    sub_1000BC2F4(v18, v19, 2);
  }
  if (*(unsigned char *)(v0 + 422) == 1)
  {
LABEL_7:
    uint64_t v21 = v15[1];
    *(void *)(v0 + 128) = *v15;
    *(void *)(v0 + 136) = v21;
    State.wrappedValue.getter();
    *(void *)(v0 + 352) = *(void *)(v0 + 144);
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1002649CC;
    return sub_100417A1C(v0 + 16);
  }
LABEL_12:
  *(void *)(v0 + 392) = 0;
  uint64_t v24 = *(void *)(*(void *)(v0 + 264) + *(int *)(*(void *)(v0 + 256) + 24));
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25) {
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)(v0 + 232);
  uint64_t v27 = v24 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  uint64_t v28 = *(void *)(v26 + 72);
  swift_bridgeObjectRetain();
  uint64_t v29 = 0;
  do
  {
    uint64_t v32 = *(void *)(v0 + 240);
    uint64_t v33 = *(void *)(v0 + 224);
    sub_1002ADE24(v27, v32, type metadata accessor for BundleClassification);
    sub_1002ADE24(v32, v33, type metadata accessor for BundleClassification.ClassificationType);
    sub_1002ADE8C(v32, type metadata accessor for BundleClassification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v35 = *(void *)(v0 + 224);
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v35 + *(int *)(sub_10000F214(&qword_1005297C0) + 48));
      if (!*(void *)(v29 + 16))
      {
        swift_bridgeObjectRelease();
        uint64_t v29 = 0;
      }
      uint64_t v31 = *(void *)(v0 + 224);
      uint64_t v30 = (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState;
    }
    else
    {
      uint64_t v30 = type metadata accessor for BundleClassification.ClassificationType;
      uint64_t v31 = *(void *)(v0 + 224);
    }
    sub_1002ADE8C(v31, v30);
    *(void *)(v0 + 408) = v29;
    v27 += v28;
    --v25;
  }
  while (v25);
  swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_24:
    swift_release();
    if (qword_100517EA0 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_10000F378(v36, (uint64_t)qword_10055E2F8);
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Asked to perform Identify on a track with no associated results", v39, 2u);
      swift_slowDealloc();
    }
    uint64_t v40 = *(void *)(v0 + 264);

    sub_1002ADE8C(v40, type metadata accessor for CVBundle);
    goto LABEL_29;
  }
  return _swift_task_switch(sub_1002652C0, 0, 0);
}

uint64_t sub_1002649CC()
{
  uint64_t v2 = (void *)*v1;
  v2[46] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v3 = v2[41];
    uint64_t v4 = v2[42];
    return _swift_task_switch(sub_100264FB0, v3, v4);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v2[47] = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_100264B5C;
    return sub_100259414((uint64_t)(v2 + 2), 0xF000000000000007);
  }
}

uint64_t sub_100264B5C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 336);
  uint64_t v3 = *(void *)(v1 + 328);
  return _swift_task_switch(sub_100264C7C, v3, v2);
}

uint64_t sub_100264C7C()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  v0[49] = v0[46];
  uint64_t v1 = *(void *)(v0[33] + *(int *)(v0[32] + 24));
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    goto LABEL_13;
  }
  uint64_t v3 = v0[29];
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  do
  {
    uint64_t v9 = v0[30];
    uint64_t v10 = v0[28];
    sub_1002ADE24(v4, v9, type metadata accessor for BundleClassification);
    sub_1002ADE24(v9, v10, type metadata accessor for BundleClassification.ClassificationType);
    sub_1002ADE8C(v9, type metadata accessor for BundleClassification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v12 = v0[28];
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(v12 + *(int *)(sub_10000F214(&qword_1005297C0) + 48));
      if (!*(void *)(v6 + 16))
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = 0;
      }
      uint64_t v8 = v0[28];
      uint64_t v7 = (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState;
    }
    else
    {
      uint64_t v7 = type metadata accessor for BundleClassification.ClassificationType;
      uint64_t v8 = v0[28];
    }
    sub_1002ADE8C(v8, v7);
    v0[51] = v6;
    v4 += v5;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  if (v6)
  {
    return _swift_task_switch(sub_1002652C0, 0, 0);
  }
  else
  {
LABEL_13:
    swift_release();
    if (qword_100517EA0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000F378(v13, (uint64_t)qword_10055E2F8);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Asked to perform Identify on a track with no associated results", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v17 = v0[33];

    sub_1002ADE8C(v17, type metadata accessor for CVBundle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_100264FB0()
{
  sub_1002ADE8C(*(void *)(v0 + 264), type metadata accessor for CVBundle);
  return _swift_task_switch(sub_10026502C, 0, 0);
}

uint64_t sub_10026502C()
{
  *(void *)(v0 + 384) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002650B8, v2, v1);
}

uint64_t sub_1002650B8()
{
  uint64_t v1 = *(int *)(v0 + 416);
  uint64_t v2 = *(uint64_t **)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 184);
  swift_release();
  uint64_t v4 = *(void *)(v3 + v1 + 8);
  *(unsigned char *)(v0 + 96) = *(unsigned char *)(v3 + v1);
  *(void *)(v0 + 104) = v4;
  *(unsigned char *)(v0 + 420) = 0;
  State.wrappedValue.setter();
  swift_getErrorValue();
  *uint64_t v2 = Error.localizedDescription.getter();
  v2[1] = v5;
  uint64_t v6 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v2, 0, 1, v6);
  sub_1002297C8((uint64_t)v2);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 336);
  return _swift_task_switch(sub_1002651FC, v7, v8);
}

uint64_t sub_1002651FC()
{
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002652C0()
{
  *(void *)(v0 + 400) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026534C, v2, v1);
}

uint64_t sub_10026534C()
{
  uint64_t v1 = v0[51];
  uint64_t v3 = v0[25];
  uint64_t v2 = v0[26];
  uint64_t v5 = v0[23];
  uint64_t v4 = v0[24];
  swift_release();
  Spring.init(response:dampingRatio:)();
  static Animation.spring(_:blendDuration:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  Animation.speed(_:)();
  swift_release();
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v1;
  withAnimation<A>(_:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v7 = v0[41];
  uint64_t v8 = v0[42];
  return _swift_task_switch(sub_10026548C, v7, v8);
}

uint64_t sub_10026548C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  swift_release();
  sub_1002ADE8C(v1, type metadata accessor for CVBundle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100265564(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  v2[19] = v3;
  v2[20] = *(void *)(v3 + 64);
  v2[21] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v2[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[23] = v4;
  v2[24] = *(void *)(v4 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  sub_10000F214(&qword_10051A308);
  v2[27] = swift_task_alloc();
  uint64_t v5 = *(void *)(type metadata accessor for TextDetectorResult.DataDetector(0) - 8);
  v2[28] = v5;
  v2[29] = *(void *)(v5 + 64);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = type metadata accessor for CVDetection();
  v2[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TextDetectorResult(0);
  v2[34] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[35] = v7;
  v2[36] = *(void *)(v7 + 64);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = type metadata accessor for MainActor();
  v2[40] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[41] = v9;
  v2[42] = v8;
  return _swift_task_switch(sub_100265840, v9, v8);
}

uint64_t sub_100265840()
{
  sub_10019D408(*(void *)(v0 + 264));
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v1 = *(void *)(v0 + 304);
    uint64_t v2 = *(void *)(v0 + 272);
    sub_1002AA830(*(void *)(v0 + 264), v1, type metadata accessor for TextDetectorResult);
    uint64_t v3 = *(void *)(v0 + 304);
    if (*(unsigned char *)(v1 + *(int *)(v2 + 56)) == 1)
    {
      uint64_t v4 = *(void *)(v3 + *(int *)(*(void *)(v0 + 272) + 48));
      if (*(void *)(v4 + 16))
      {
        uint64_t v5 = *(void *)(v0 + 248);
        int v6 = *(_DWORD *)(*(void *)(v0 + 224) + 80);
        *(_DWORD *)(v0 + 368) = v6;
        sub_1002ADE24(v4 + ((v6 + 32) & ~(unint64_t)v6), v5, type metadata accessor for TextDetectorResult.DataDetector);
        uint64_t v7 = sub_100265990;
        goto LABEL_8;
      }
    }
    uint64_t v8 = type metadata accessor for TextDetectorResult;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 264);
    uint64_t v8 = (uint64_t (*)(void))type metadata accessor for CVDetection;
  }
  sub_1002ADE8C(v3, v8);
  uint64_t v7 = sub_1002662A4;
LABEL_8:
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100265990()
{
  *(void *)(v0 + 344) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100265A1C, v2, v1);
}

uint64_t sub_100265A1C()
{
  uint64_t v1 = v0[27];
  swift_release();
  uint64_t v2 = sub_10000F214(&qword_10051A320);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 0, 1, v3);
  sub_1002297C8(v1);
  uint64_t v4 = v0[41];
  uint64_t v5 = v0[42];
  return _swift_task_switch(sub_100265B30, v4, v5);
}

uint64_t sub_100265B30()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = *(void **)(v1 + *(int *)(v0[34] + 52));
  v0[44] = v2;
  if (v2)
  {
    id v3 = v2;
    Date.init()();
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100265D54;
    uint64_t v4 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100271D4C;
    v0[13] = &unk_1004F1BC0;
    v0[14] = v4;
    [v3 createQuickActionInfosWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v5 = v0[31];
    swift_release();
    sub_1002ADE8C(v5, type metadata accessor for TextDetectorResult.DataDetector);
    sub_1002ADE8C(v1, type metadata accessor for TextDetectorResult);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100265D54()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  uint64_t v2 = *(void *)(*(void *)v0 + 328);
  return _swift_task_switch(sub_100265E5C, v2, v1);
}

uint64_t sub_100265E5C()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  swift_release();
  uint64_t v37 = *(void *)(v0 + 120);
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v5 = v4;
  os_log_type_t v38 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v38(v1, v2);
  if (qword_100517EB0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000F378(v6, (uint64_t)qword_10055E328);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    *(void *)(v0 + 128) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "VKCDataDetectorInfo createQuickActionInfos took %f seconds", v9, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v10 = *(unsigned __int8 *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 304);
  uint64_t v12 = *(void *)(v0 + 296);
  uint64_t v31 = *(void *)(v0 + 280);
  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v13 = *(void *)(v0 + 248);
  uint64_t v29 = *(void *)(v0 + 232);
  uint64_t v35 = *(void *)(v0 + 208);
  uint64_t v36 = *(void **)(v0 + 352);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v33 = v11;
  uint64_t v34 = *(void *)(v0 + 184);
  uint64_t v32 = v15;
  uint64_t v16 = *(void *)(v0 + 168);
  uint64_t v30 = *(void *)(v0 + 160);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v27 = *(void *)(v0 + 152);
  uint64_t v28 = v12;

  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v15, 1, 1, v18);
  uint64_t v19 = v13;
  sub_1002ADE24(v13, v14, type metadata accessor for TextDetectorResult.DataDetector);
  sub_1002ADE24(v17, v16, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1002ADE24(v11, v12, type metadata accessor for TextDetectorResult);
  uint64_t v20 = static MainActor.shared.getter();
  uint64_t v21 = (v10 + 40) & ~v10;
  unint64_t v22 = (v29 + v21 + *(unsigned __int8 *)(v27 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  unint64_t v23 = (v30 + *(unsigned __int8 *)(v31 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = v20;
  v24[3] = &protocol witness table for MainActor;
  v24[4] = v37;
  sub_1002AA830(v14, (uint64_t)v24 + v21, type metadata accessor for TextDetectorResult.DataDetector);
  sub_1002AA830(v16, (uint64_t)v24 + v22, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1002AA830(v28, (uint64_t)v24 + v23, type metadata accessor for TextDetectorResult);
  sub_100064D5C(v32, (uint64_t)&unk_1005264E8, (uint64_t)v24);
  swift_release();

  v38(v35, v34);
  sub_1002ADE8C(v19, type metadata accessor for TextDetectorResult.DataDetector);
  sub_1002ADE8C(v33, type metadata accessor for TextDetectorResult);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_1002662A4()
{
  *(void *)(v0 + 360) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100266330, v2, v1);
}

uint64_t sub_100266330()
{
  uint64_t v1 = (void *)v0[27];
  swift_release();
  *uint64_t v1 = 0xD000000000000028;
  v1[1] = 0x800000010042A360;
  uint64_t v2 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_1002297C8((uint64_t)v1);
  uint64_t v3 = v0[41];
  uint64_t v4 = v0[42];
  return _swift_task_switch(sub_10026641C, v3, v4);
}

uint64_t sub_10026641C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100266500(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  sub_10000F214(&qword_10051A308);
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ContentView();
  v2[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[11] = v4;
  v2[12] = *(void *)(v4 + 64);
  v2[13] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v2[14] = swift_task_alloc();
  uint64_t v5 = *(void *)(type metadata accessor for CVDetection() - 8);
  v2[15] = v5;
  v2[16] = *(void *)(v5 + 64);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = type metadata accessor for MainActor();
  v2[20] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[21] = v7;
  v2[22] = v6;
  return _swift_task_switch(sub_1002666D0, v7, v6);
}

uint64_t sub_1002666D0()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v22 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v23 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 64);
  sub_10019D408(v1);
  uint64_t v8 = type metadata accessor for TaskPriority();
  *(void *)(v0 + 184) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  *(void *)(v0 + 192) = v10;
  *(void *)(v0 + 200) = (v9 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v10(v3, 1, 1, v8);
  sub_1002ADE24(v7, v4, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1002ADE24(v1, v2, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v11 = static MainActor.shared.getter();
  int v12 = *(_DWORD *)(v6 + 80);
  *(_DWORD *)(v0 + 280) = v12;
  unint64_t v13 = (v12 + 32) & ~(unint64_t)v12;
  unint64_t v14 = (v13 + v5 + *(unsigned __int8 *)(v22 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v11;
  *(void *)(v15 + 24) = &protocol witness table for MainActor;
  sub_1002AA830(v4, v15 + v13, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1002AA830(v2, v15 + v14, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_100064D5C(v3, (uint64_t)&unk_1005264F8, v15);
  swift_release();
  uint64_t v16 = (uint64_t *)(v7 + *(int *)(v23 + 44));
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *(void *)(v0 + 16) = v18;
  *(void *)(v0 + 24) = v17;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  *(void *)(v0 + 208) = *(void *)(v0 + 32);
  *(void *)(v0 + 216) = static MainActor.shared.getter();
  uint64_t v20 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v0 + 224) = v20;
  *(void *)(v0 + 232) = v19;
  return _swift_task_switch(sub_100266930, v20, v19);
}

uint64_t sub_100266930()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 208) + 16);
  *(void *)(v0 + 240) = v1;
  return _swift_task_switch(sub_100266954, v1, 0);
}

uint64_t sub_100266954()
{
  uint64_t v1 = *(void *)(v0[30] + 112);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100526500 + dword_100526500);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[31] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100266A08;
  uint64_t v3 = v0[7];
  return v5(v3, v1);
}

uint64_t sub_100266A08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[32] = a1;
  v5[33] = a2;
  v5[34] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[29];
  uint64_t v7 = v4[28];
  if (v2) {
    uint64_t v8 = sub_100266FA4;
  }
  else {
    uint64_t v8 = sub_100266B50;
  }
  return _swift_task_switch(v8, v7, v6);
}

uint64_t sub_100266B50()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_100266BBC, v1, v2);
}

uint64_t sub_100266BBC()
{
  uint64_t v1 = (void *)v0[32];
  uint64_t v2 = (void *)v0[33];
  swift_release();
  uint64_t v3 = qword_100517D48;
  uint64_t v33 = v1;
  id v4 = v1;
  id v5 = v2;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_10055E060;
  swift_getKeyPath();
  v0[5] = v6;
  sub_1002AB13C(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = *(void **)(v6 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation);
  if (v7)
  {
    uint64_t v8 = qword_10055E060;
    swift_getKeyPath();
    v0[6] = v8;
    id v9 = v7;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v10 = *(void **)(v8 + OBJC_IVAR____TtC6Tamale16LocationsHandler__heading);
    uint64_t v31 = v9;
    uint64_t v32 = v2;
    if (v10)
    {
      id v11 = v10;
      [v11 trueHeading:v9];
      double v13 = v12 * 3.14159265 / 180.0;
      [v11 headingAccuracy];
      double v15 = v14;

      char v16 = 2;
      double v17 = v15 * 3.14159265 / 180.0;
    }
    else
    {
      char v16 = 1;
      double v13 = 0.0;
      double v17 = 0.0;
    }
    uint64_t v18 = (void *)v0[32];
    uint64_t v19 = (void *)v0[33];
    uint64_t v23 = v0[18];
    uint64_t v24 = v0[9];
    uint64_t v25 = sub_10000F214(&qword_100520120);
    uint64_t v26 = v24 + *(int *)(v25 + 48);
    uint64_t v27 = v24 + *(int *)(v25 + 64);
    sub_1002ADE24(v23, v24, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(void *)uint64_t v26 = v33;
    *(void *)(v26 + 8) = v32;
    *(void *)(v26 + 16) = 0;
    *(unsigned char *)(v26 + 24) = 0;
    *(void *)uint64_t v27 = v7;
    *(double *)(v27 + 8) = v13;
    *(double *)(v27 + 16) = v17;
    *(unsigned char *)(v27 + 24) = v16;
    type metadata accessor for GeoLocateState(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = type metadata accessor for ResultLookupState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v24, 0, 1, v28);
    id v22 = v31;
    sub_1002297C8(v24);
  }
  else
  {
    uint64_t v19 = (void *)v0[32];
    uint64_t v18 = (void *)v0[33];
    uint64_t v20 = (void *)v0[9];
    *uint64_t v20 = 0xD000000000000039;
    v20[1] = 0x800000010042A3E0;
    uint64_t v21 = type metadata accessor for ResultLookupState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
    sub_1002297C8((uint64_t)v20);

    id v22 = v18;
  }

  sub_1002ADE8C(v0[18], (uint64_t (*)(void))type metadata accessor for CVDetection);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_100266FA4()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_100267008, v1, v2);
}

uint64_t sub_100267008()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 64);
  swift_release();
  swift_release();
  uint64_t v7 = v4;
  v2(v4, 1, 1, v3);
  sub_1002ADE24(v6, v5, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = &protocol witness table for MainActor;
  sub_1002AA830(v5, v9 + ((v1 + 32) & ~v1), (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_100064D5C(v7, (uint64_t)&unk_100526510, v9);
  swift_release();
  swift_errorRelease();
  sub_1002ADE8C(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for CVDetection);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1002671CC(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  v2[11] = v3;
  v2[12] = *(void *)(v3 + 64);
  v2[13] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v2[14] = swift_task_alloc();
  v2[15] = type metadata accessor for BundleClassification.ClassificationType(0);
  v2[16] = swift_task_alloc();
  v2[17] = *(void *)(type metadata accessor for BundleClassification(0) - 8);
  v2[18] = swift_task_alloc();
  v2[19] = type metadata accessor for CVBundle(0);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MainActor();
  v2[22] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[23] = v5;
  v2[24] = v4;
  return _swift_task_switch(sub_1002673B0, v5, v4);
}

uint64_t sub_1002673B0()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  sub_1002ADE24(*(void *)(v0 + 72), v2, type metadata accessor for CVBundle);
  uint64_t v3 = *(void *)(v2 + *(int *)(v1 + 24));
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v7 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 128);
    sub_1002ADE24(v6, v9, type metadata accessor for BundleClassification);
    sub_1002AA830(v9, v10, type metadata accessor for BundleClassification.ClassificationType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v12 = *(uint64_t **)(v0 + 128);
    if (EnumCaseMultiPayload)
    {
      sub_1002ADE8C(*(void *)(v0 + 128), type metadata accessor for BundleClassification.ClassificationType);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = *v12;
    }
    *(void *)(v0 + 224) = v8;
    v6 += v7;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v17 = *(void *)(v0 + 80);
    sub_10041B60C(v8);
    uint64_t v18 = type metadata accessor for TaskPriority();
    *(void *)(v0 + 200) = v18;
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    *(void *)(v0 + 208) = v20;
    *(void *)(v0 + 216) = (v19 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v61 = v20;
    v20(v13, 1, 1, v18);
    sub_1002ADE24(v17, v14, (uint64_t (*)(void))type metadata accessor for ContentView);
    swift_bridgeObjectRetain();
    uint64_t v21 = static MainActor.shared.getter();
    int v22 = *(_DWORD *)(v16 + 80);
    *(_DWORD *)(v0 + 44) = v22;
    unint64_t v23 = (v22 + 32) & ~(unint64_t)v22;
    uint64_t v24 = v23 + v15;
    unint64_t v25 = (v23 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v21;
    *(void *)(v26 + 24) = &protocol witness table for MainActor;
    unint64_t v62 = v23;
    sub_1002AA830(v14, v26 + v23, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v60 = v25;
    *(void *)(v26 + v25) = v8;
    sub_100064D5C(v13, (uint64_t)&unk_100526540, v26);
    swift_release();
    if (qword_100517D48 != -1) {
      swift_once();
    }
    uint64_t v27 = qword_10055E060;
    swift_getKeyPath();
    *(void *)(v0 + 48) = v27;
    sub_1002AB13C(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v28 = *(void **)(v27 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation);
    *(void *)(v0 + 232) = v28;
    if (v28)
    {
      uint64_t v29 = qword_10055E060;
      swift_getKeyPath();
      *(void *)(v0 + 56) = v29;
      id v63 = v28;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v30 = *(void **)(v29 + OBJC_IVAR____TtC6Tamale16LocationsHandler__heading);
      if (v30)
      {
        id v31 = v30;
        [v31 trueHeading];
        double v33 = v32 * 3.14159265 / 180.0;
        [v31 headingAccuracy];
        double v35 = v34;

        char v36 = 2;
        double v37 = v35 * 3.14159265 / 180.0;
      }
      else
      {
        char v36 = 1;
        double v33 = 0.0;
        double v37 = 0.0;
      }
      *(unsigned char *)(v0 + 41) = v36;
      *(double *)(v0 + 240) = v33;
      *(double *)(v0 + 248) = v37;
      uint64_t v52 = *(void *)(v0 + 104);
      uint64_t v51 = *(void *)(v0 + 112);
      uint64_t v53 = *(void *)(v0 + 80);
      v61(v51, 1, 1, v18);
      sub_1002ADE24(v53, v52, (uint64_t (*)(void))type metadata accessor for ContentView);
      swift_bridgeObjectRetain();
      id v54 = v63;
      uint64_t v55 = static MainActor.shared.getter();
      unint64_t v56 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v57 = swift_allocObject();
      *(void *)(v57 + 16) = v55;
      *(void *)(v57 + 24) = &protocol witness table for MainActor;
      sub_1002AA830(v52, v57 + v62, (uint64_t (*)(void))type metadata accessor for ContentView);
      unint64_t v58 = v57 + v60;
      *(void *)unint64_t v58 = v28;
      *(double *)(v58 + 8) = v33;
      *(double *)(v58 + 16) = v37;
      *(unsigned char *)(v58 + 24) = v36;
      *(void *)(v57 + v56) = v8;
      sub_100064D5C(v51, (uint64_t)&unk_100526560, v57);
      swift_release();
      if (qword_100517EC0 != -1) {
        swift_once();
      }
      uint64_t v59 = (void *)swift_task_alloc();
      *(void *)(v0 + 256) = v59;
      *uint64_t v59 = v0;
      v59[1] = sub_100267B90;
      return sub_1000FAA70(v8);
    }
    uint64_t v42 = *(void *)(v0 + 160);
    uint64_t v47 = *(void *)(v0 + 104);
    uint64_t v46 = *(void *)(v0 + 112);
    uint64_t v48 = *(void *)(v0 + 80);
    swift_release();
    swift_bridgeObjectRelease();
    v61(v46, 1, 1, v18);
    sub_1002ADE24(v48, v47, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v49 = static MainActor.shared.getter();
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = v49;
    *(void *)(v50 + 24) = &protocol witness table for MainActor;
    sub_1002AA830(v47, v50 + v23, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_100064D5C(v46, (uint64_t)&unk_100526550, v50);
    swift_release();
  }
  else
  {
LABEL_13:
    swift_release();
    if (qword_100517E50 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_10000F378(v38, (uint64_t)qword_10055E208);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.fault.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = *(void *)(v0 + 160);
    if (v41)
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Asked to perform GeoLookup on a track with no associated results", v43, 2u);
      swift_slowDealloc();
    }
  }
  sub_1002ADE8C(v42, type metadata accessor for CVBundle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t sub_100267B90(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 264) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = v4[23];
    uint64_t v6 = v4[24];
    uint64_t v7 = sub_100267EE0;
  }
  else
  {
    v4[34] = a1;
    uint64_t v5 = v4[23];
    uint64_t v6 = v4[24];
    uint64_t v7 = sub_100267CBC;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_100267CBC()
{
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = *(void **)(v0 + 232);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 44);
  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v20 = *(void *)(v0 + 224);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v21 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v17 = v6;
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 80);
  unsigned __int8 v15 = *(unsigned char *)(v0 + 41);
  swift_release();
  v4(v7, 1, 1, v5);
  sub_1002ADE24(v8, v6, (uint64_t (*)(void))type metadata accessor for ContentView);
  sub_1000506C4(v2, v1, v18, v15);
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = (v3 + 40) & ~v3;
  id v11 = (void *)swift_allocObject();
  v11[2] = v9;
  v11[3] = &protocol witness table for MainActor;
  v11[4] = v19;
  sub_1002AA830(v17, (uint64_t)v11 + v10, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v12 = (char *)v11 + ((v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)uint64_t v12 = v2;
  *((void *)v12 + 1) = v1;
  *((void *)v12 + 2) = v18;
  v12[24] = v15;
  *(void *)((char *)v11 + ((v16 + v10 + 39) & 0xFFFFFFFFFFFFFFF8)) = v20;
  sub_100064D5C(v7, (uint64_t)&unk_100526590, (uint64_t)v11);
  swift_release();

  sub_1002ADE8C(v21, type metadata accessor for CVBundle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100267EE0()
{
  uint64_t v1 = *(void *)(v0 + 264);
  swift_release();
  *(void *)(v0 + 64) = v1;
  swift_errorRetain();
  sub_10000F214(&qword_10051F3B0);
  char v2 = swift_dynamicCast();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v22 = *(void *)(v0 + 160);
  unint64_t v23 = *(void **)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 80);
  unint64_t v8 = (*(unsigned __int8 *)(v0 + 44) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 44);
  unint64_t v21 = (v8 + *(void *)(v0 + 96) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    swift_errorRelease();
    long long v20 = *(_OWORD *)(v0 + 16);
    uint64_t v19 = *(void *)(v0 + 32);
    char v18 = *(unsigned char *)(v0 + 40);
    v3(v6, 1, 1, v4);
    sub_1002ADE24(v7, v5, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v9 = static MainActor.shared.getter();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v9;
    *(void *)(v10 + 24) = &protocol witness table for MainActor;
    sub_1002AA830(v5, v10 + v8, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v11 = v10 + v21;
    *(_OWORD *)unint64_t v11 = v20;
    *(void *)(v11 + 16) = v19;
    *(unsigned char *)(v11 + 24) = v18;
    sub_100064D5C(v6, (uint64_t)&unk_100526580, v10);
    swift_release();

    sub_1002ADE8C(v22, type metadata accessor for CVBundle);
    swift_errorRelease();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 264);
    swift_errorRelease();
    v3(v6, 1, 1, v4);
    uint64_t v13 = v5;
    sub_1002ADE24(v7, v5, (uint64_t (*)(void))type metadata accessor for ContentView);
    swift_errorRetain();
    uint64_t v14 = static MainActor.shared.getter();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v14;
    *(void *)(v15 + 24) = &protocol witness table for MainActor;
    sub_1002AA830(v13, v15 + v8, (uint64_t (*)(void))type metadata accessor for ContentView);
    *(void *)(v15 + v21) = v12;
    sub_100064D5C(v6, (uint64_t)&unk_100526570, v15);
    swift_release();
    swift_errorRelease();

    sub_1002ADE8C(v22, type metadata accessor for CVBundle);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100268230(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CVBundle(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = type metadata accessor for ContentView();
  uint64_t v7 = v6 - 8;
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v36 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1 + *(int *)(v7 + 164);
  char v13 = *(unsigned char *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  char v37 = v13;
  uint64_t v38 = v14;
  sub_10000F214(&qword_100522EA0);
  uint64_t result = State.wrappedValue.getter();
  if ((v39 & 1) == 0)
  {
    uint64_t v16 = type metadata accessor for TaskPriority();
    uint64_t v35 = v4;
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)(v16 - 8);
    double v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v33 = v18 + 56;
    v32(v11, 1, 1, v16);
    double v34 = type metadata accessor for ContentView;
    sub_1002ADE24(v1, (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentView);
    type metadata accessor for MainActor();
    uint64_t v19 = static MainActor.shared.getter();
    uint64_t v30 = a1;
    uint64_t v31 = v1;
    uint64_t v20 = v19;
    uint64_t v21 = *(unsigned __int8 *)(v36 + 80);
    uint64_t v36 = v21 | 7;
    uint64_t v22 = swift_allocObject();
    uint64_t v29 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v23 = v22;
    *(void *)(v22 + 16) = v20;
    *(void *)(v22 + 24) = &protocol witness table for MainActor;
    sub_1002AA830((uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + ((v21 + 32) & ~v21), (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_100064D5C((uint64_t)v11, (uint64_t)&unk_1005265A0, v23);
    swift_release();
    v32(v11, 1, 1, v17);
    uint64_t v24 = v29;
    sub_1002ADE24(v30, v29, type metadata accessor for CVBundle);
    sub_1002ADE24(v31, (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))v34);
    uint64_t v25 = static MainActor.shared.getter();
    unint64_t v26 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v25;
    *(void *)(v27 + 24) = &protocol witness table for MainActor;
    sub_1002AA830(v24, v27 + v26, type metadata accessor for CVBundle);
    sub_1002AA830((uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + ((v5 + v21 + v26) & ~v21), (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_100064D5C((uint64_t)v11, (uint64_t)&unk_1005265B0, v27);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002685E0(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DispatchQoS();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContentView();
  v2[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[19] = v6;
  v2[20] = *(void *)(v6 + 64);
  v2[21] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchTime();
  v2[22] = v7;
  v2[23] = *(void *)(v7 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  sub_10000F214(&qword_10051B768);
  v2[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ResultLookupState();
  v2[27] = v8;
  v2[28] = *(void *)(v8 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = sub_10000F214(&qword_100526390);
  v2[31] = swift_task_alloc();
  sub_10000F214(&qword_10051A308);
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = type metadata accessor for MainActor();
  v2[37] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[38] = v10;
  v2[39] = v9;
  return _swift_task_switch(sub_10026891C, v10, v9);
}

uint64_t sub_10026891C()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v4 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v5 = v0[27];
  uint64_t v6 = v0[28];
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  *(void *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)uint64_t v1 = 0u;
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
  v0[40] = v7;
  v0[41] = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v1, 0, 1, v5);
  uint64_t v8 = v3 + *(int *)(v4 + 48);
  sub_10000FB74(v2, v3, &qword_10051A308);
  sub_10000FB74(v1, v8, &qword_10051A308);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v9(v3, 1, v5) == 1)
  {
    uint64_t v10 = v0[35];
    uint64_t v11 = v0[27];
    sub_10000FBD8(v0[34], &qword_10051A308);
    sub_10000FBD8(v10, &qword_10051A308);
    if (v9(v8, 1, v11) == 1)
    {
      sub_10000FBD8(v0[31], &qword_10051A308);
LABEL_8:
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v20 = (uint64_t (*)(void))v0[1];
      return v20();
    }
    goto LABEL_6;
  }
  uint64_t v12 = v0[27];
  sub_10000FB74(v0[31], v0[33], &qword_10051A308);
  unsigned int v13 = v9(v8, 1, v12);
  uint64_t v15 = v0[34];
  uint64_t v14 = v0[35];
  uint64_t v16 = v0[33];
  if (v13 == 1)
  {
    sub_10000FBD8(v0[34], &qword_10051A308);
    sub_10000FBD8(v14, &qword_10051A308);
    sub_1002ADE8C(v16, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
LABEL_6:
    sub_10000FBD8(v0[31], &qword_100526390);
    goto LABEL_11;
  }
  uint64_t v17 = v0[31];
  uint64_t v18 = (uint64_t *)v0[29];
  sub_1002AA830(v8, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  char v19 = sub_1003192A0(v16, v18);
  sub_1002ADE8C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_10000FBD8(v15, &qword_10051A308);
  sub_10000FBD8(v14, &qword_10051A308);
  sub_1002ADE8C(v16, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_10000FBD8(v17, &qword_10051A308);
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  return _swift_task_switch(sub_100268CC0, 0, 0);
}

uint64_t sub_100268CC0()
{
  *(void *)(v0 + 336) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100268D4C, v2, v1);
}

uint64_t sub_100268D4C()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[40];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[27];
  swift_release();
  *(void *)(v2 + 48) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  swift_storeEnumTagMultiPayload();
  v1(v2, 0, 1, v3);
  sub_1002297C8(v2);
  uint64_t v4 = v0[38];
  uint64_t v5 = v0[39];
  return _swift_task_switch(sub_100268E0C, v4, v5);
}

uint64_t sub_100268E0C()
{
  uint64_t v1 = *(void *)(v0[11] + *(int *)(v0[18] + 240));
  swift_getKeyPath();
  v0[8] = v1;
  sub_1002AB13C(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    uint64_t v2 = v0[26];
    sub_1002ADE24(v0[10], v2, type metadata accessor for CVBundle);
    uint64_t v3 = type metadata accessor for CVBundle(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[43] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100269318;
    uint64_t v5 = v0[26];
    return sub_100260680(v5);
  }
  else
  {
    uint64_t v7 = v0[24];
    uint64_t v9 = v0[22];
    uint64_t v8 = v0[23];
    uint64_t v10 = v0[21];
    uint64_t v11 = v0[19];
    uint64_t v17 = v0[17];
    uint64_t v18 = v0[25];
    uint64_t v24 = v0[16];
    uint64_t v25 = v0[15];
    uint64_t v20 = v0[14];
    uint64_t v23 = v0[13];
    uint64_t v12 = v0[11];
    uint64_t v22 = v0[12];
    swift_release();
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    char v19 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v21(v7, v9);
    sub_1002ADE24(v12, v10, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v14 = swift_allocObject();
    sub_1002AA830(v10, v14 + v13, (uint64_t (*)(void))type metadata accessor for ContentView);
    v0[6] = sub_1002A6A64;
    v0[7] = v14;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1002EDB98;
    v0[5] = &unk_1004F1DB8;
    uint64_t v15 = _Block_copy(v0 + 2);
    static DispatchQoS.unspecified.getter();
    v0[9] = _swiftEmptyArrayStorage;
    sub_1002AB13C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v15);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v17, v25);
    v21(v18, v9);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_100269318(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  *(void *)(*v1 + 352) = a1;
  swift_task_dealloc();
  sub_10000FBD8(v3, &qword_10051B768);
  uint64_t v4 = *(void *)(v2 + 312);
  uint64_t v5 = *(void *)(v2 + 304);
  return _swift_task_switch(sub_10026946C, v5, v4);
}

uint64_t sub_10026946C()
{
  uint64_t v1 = v0[44];
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[45] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10026964C;
    return sub_10025E594(v1);
  }
  else
  {
    uint64_t v4 = (void (*)(void *, void, uint64_t, uint64_t))v0[40];
    uint64_t v5 = (void *)v0[32];
    uint64_t v6 = v0[27];
    swift_release();
    *uint64_t v5 = 0xD000000000000018;
    v5[1] = 0x800000010042A4B0;
    swift_storeEnumTagMultiPayload();
    v4(v5, 0, 1, v6);
    sub_1002297C8((uint64_t)v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10026964C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 312);
  uint64_t v3 = *(void *)(v1 + 304);
  return _swift_task_switch(sub_10026976C, v3, v2);
}

uint64_t sub_10026976C()
{
  uint64_t v1 = *(void **)(v0 + 352);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100269878(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  sub_10000F214(&qword_10051B768);
  v2[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ResultLookupState();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = sub_10000F214(&qword_100526390);
  v2[12] = swift_task_alloc();
  sub_10000F214(&qword_10051A308);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = type metadata accessor for MainActor();
  v2[18] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[19] = v5;
  v2[20] = v4;
  return _swift_task_switch(sub_100269A2C, v5, v4);
}

uint64_t sub_100269A2C()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];
  v0[21] = type metadata accessor for ContentView();
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  *(void *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
  v0[22] = v7;
  v0[23] = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v1, 0, 1, v5);
  uint64_t v8 = v3 + *(int *)(v4 + 48);
  sub_10000FB74(v2, v3, &qword_10051A308);
  sub_10000FB74(v1, v8, &qword_10051A308);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v9(v3, 1, v5) == 1)
  {
    uint64_t v10 = v0[16];
    uint64_t v11 = v0[8];
    sub_10000FBD8(v0[15], &qword_10051A308);
    sub_10000FBD8(v10, &qword_10051A308);
    if (v9(v8, 1, v11) == 1)
    {
      sub_10000FBD8(v0[12], &qword_10051A308);
LABEL_8:
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v20 = (uint64_t (*)(void))v0[1];
      return v20();
    }
    goto LABEL_6;
  }
  uint64_t v12 = v0[8];
  sub_10000FB74(v0[12], v0[14], &qword_10051A308);
  unsigned int v13 = v9(v8, 1, v12);
  uint64_t v15 = v0[15];
  uint64_t v14 = v0[16];
  uint64_t v16 = v0[14];
  if (v13 == 1)
  {
    sub_10000FBD8(v0[15], &qword_10051A308);
    sub_10000FBD8(v14, &qword_10051A308);
    sub_1002ADE8C(v16, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
LABEL_6:
    sub_10000FBD8(v0[12], &qword_100526390);
    goto LABEL_11;
  }
  uint64_t v17 = v0[12];
  uint64_t v18 = (uint64_t *)v0[10];
  sub_1002AA830(v8, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  char v19 = sub_1003192A0(v16, v18);
  sub_1002ADE8C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_10000FBD8(v15, &qword_10051A308);
  sub_10000FBD8(v14, &qword_10051A308);
  sub_1002ADE8C(v16, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_10000FBD8(v17, &qword_10051A308);
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  return _swift_task_switch(sub_100269D90, 0, 0);
}

uint64_t sub_100269D90()
{
  *(void *)(v0 + 192) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100269E1C, v2, v1);
}

uint64_t sub_100269E1C()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[22];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[8];
  swift_release();
  *(void *)(v2 + 64) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  swift_storeEnumTagMultiPayload();
  v1(v2, 0, 1, v3);
  sub_1002297C8(v2);
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[20];
  return _swift_task_switch(sub_100269EDC, v4, v5);
}

uint64_t sub_100269EDC()
{
  uint64_t v1 = v0[7];
  sub_1002ADE24(v0[5], v1, type metadata accessor for CVBundle);
  uint64_t v2 = type metadata accessor for CVBundle(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[25] = (uint64_t)v3;
  void *v3 = v0;
  v3[1] = sub_100269FD4;
  uint64_t v4 = v0[7];
  return sub_100260680(v4);
}

uint64_t sub_100269FD4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 208) = a1;
  swift_task_dealloc();
  sub_10000FBD8(v3, &qword_10051B768);
  uint64_t v4 = *(void *)(v2 + 160);
  uint64_t v5 = *(void *)(v2 + 152);
  return _swift_task_switch(sub_10026A128, v5, v4);
}

uint64_t sub_10026A128()
{
  if (v0[26])
  {
    uint64_t v1 = (uint64_t *)(v0[6] + *(int *)(v0[21] + 44));
    uint64_t v3 = *v1;
    uint64_t v2 = v1[1];
    v0[2] = v3;
    v0[3] = v2;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    v0[27] = v0[4];
    uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&dword_1005265D0 + dword_1005265D0);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[28] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10026A310;
    uint64_t v5 = v0[5];
    return v11(v5);
  }
  else
  {
    uint64_t v7 = (void (*)(void *, void, uint64_t, uint64_t))v0[22];
    uint64_t v8 = (void *)v0[13];
    uint64_t v9 = v0[8];
    swift_release();
    *uint64_t v8 = 0xD000000000000018;
    v8[1] = 0x800000010042A4B0;
    swift_storeEnumTagMultiPayload();
    v7(v8, 0, 1, v9);
    sub_1002297C8((uint64_t)v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_10026A310(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    swift_errorRelease();
    a1 = 0;
  }
  v4[29] = a1;
  uint64_t v6 = v4[26];
  uint64_t v7 = (void *)swift_task_alloc();
  v4[30] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10026A48C;
  return sub_100261044(v6, a1);
}

uint64_t sub_10026A48C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v3 = *(void *)(v1 + 152);
  return _swift_task_switch(sub_10026A5AC, v3, v2);
}

uint64_t sub_10026A5AC()
{
  uint64_t v1 = (void *)v0[29];
  uint64_t v2 = (void *)v0[26];
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10026A674(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  v2[12] = type metadata accessor for AppConfiguration();
  v2[13] = swift_task_alloc();
  type metadata accessor for EventLookupItem(0);
  v2[14] = swift_task_alloc();
  type metadata accessor for CVBundle(0);
  v2[15] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DispatchQoS();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContentView();
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  v2[24] = *(void *)(v6 + 64);
  v2[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchTime();
  v2[26] = v7;
  v2[27] = *(void *)(v7 - 8);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Spring();
  v2[30] = v8;
  v2[31] = *(void *)(v8 - 8);
  v2[32] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ResultLookupState();
  v2[33] = v9;
  v2[34] = *(void *)(v9 - 8);
  v2[35] = swift_task_alloc();
  v2[36] = sub_10000F214(&qword_100526390);
  v2[37] = swift_task_alloc();
  sub_10000F214(&qword_10051A308);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = type metadata accessor for MainActor();
  v2[42] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[43] = v11;
  v2[44] = v10;
  return _swift_task_switch(sub_10026AA58, v11, v10);
}

uint64_t sub_10026AA58()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v4 = v0[36];
  uint64_t v3 = v0[37];
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[34];
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  uint64_t v7 = sub_10000F214(&qword_10051A428);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v1, 0, 1, v5);
  uint64_t v8 = v3 + *(int *)(v4 + 48);
  sub_10000FB74(v2, v3, &qword_10051A308);
  sub_10000FB74(v1, v8, &qword_10051A308);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v9(v3, 1, v5) == 1)
  {
    uint64_t v10 = v0[40];
    uint64_t v11 = v0[33];
    sub_10000FBD8(v0[39], &qword_10051A308);
    sub_10000FBD8(v10, &qword_10051A308);
    if (v9(v8, 1, v11) == 1)
    {
      sub_10000FBD8(v0[37], &qword_10051A308);
LABEL_8:
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v20 = (uint64_t (*)(void))v0[1];
      return v20();
    }
    goto LABEL_6;
  }
  uint64_t v12 = v0[33];
  sub_10000FB74(v0[37], v0[38], &qword_10051A308);
  unsigned int v13 = v9(v8, 1, v12);
  uint64_t v15 = v0[39];
  uint64_t v14 = v0[40];
  uint64_t v16 = v0[38];
  if (v13 == 1)
  {
    sub_10000FBD8(v0[39], &qword_10051A308);
    sub_10000FBD8(v14, &qword_10051A308);
    sub_1002ADE8C(v16, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
LABEL_6:
    sub_10000FBD8(v0[37], &qword_100526390);
    goto LABEL_11;
  }
  uint64_t v17 = v0[37];
  uint64_t v18 = (uint64_t *)v0[35];
  sub_1002AA830(v8, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  char v19 = sub_1003192A0(v16, v18);
  sub_1002ADE8C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_10000FBD8(v15, &qword_10051A308);
  sub_10000FBD8(v14, &qword_10051A308);
  sub_1002ADE8C(v16, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_10000FBD8(v17, &qword_10051A308);
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  return _swift_task_switch(sub_10026AE3C, 0, 0);
}

uint64_t sub_10026AE3C()
{
  *(void *)(v0 + 360) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026AEC8, v2, v1);
}

uint64_t sub_10026AEC8()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[11];
  swift_release();
  Spring.init(response:dampingRatio:)();
  static Animation.spring(_:blendDuration:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[46] = v5;
  v0[47] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  Animation.speed(_:)();
  swift_release();
  *(void *)(swift_task_alloc() + 16) = v4;
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[44];
  return _swift_task_switch(sub_10026B008, v6, v7);
}

uint64_t sub_10026B008()
{
  uint64_t v1 = *(void *)(v0[11] + *(int *)(v0[22] + 240));
  swift_getKeyPath();
  v0[8] = v1;
  sub_1002AB13C(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v3 = v0[12];
    uint64_t v2 = v0[13];
    sub_1002ADE24(v0[10], v0[15], type metadata accessor for CVBundle);
    sub_10000F214(&qword_100525F50);
    State.wrappedValue.getter();
    char v4 = *(unsigned char *)(v2 + *(int *)(v3 + 32));
    sub_1002ADE8C(v2, (uint64_t (*)(void))type metadata accessor for AppConfiguration);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[48] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10026B534;
    uint64_t v6 = v0[14];
    uint64_t v7 = v0[15];
    return sub_1000BF00C(v6, v7, v4);
  }
  else
  {
    uint64_t v9 = v0[28];
    uint64_t v11 = v0[26];
    uint64_t v10 = v0[27];
    uint64_t v12 = v0[25];
    uint64_t v13 = v0[23];
    uint64_t v19 = v0[21];
    uint64_t v20 = v0[29];
    uint64_t v26 = v0[20];
    uint64_t v27 = v0[19];
    uint64_t v22 = v0[18];
    uint64_t v25 = v0[17];
    uint64_t v24 = v0[16];
    uint64_t v14 = v0[11];
    swift_release();
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    uint64_t v21 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v23(v9, v11);
    sub_1002ADE24(v14, v12, (uint64_t (*)(void))type metadata accessor for ContentView);
    unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v16 = swift_allocObject();
    sub_1002AA830(v12, v16 + v15, (uint64_t (*)(void))type metadata accessor for ContentView);
    v0[6] = sub_1002A8180;
    v0[7] = v16;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1002EDB98;
    v0[5] = &unk_1004F1E30;
    uint64_t v17 = _Block_copy(v0 + 2);
    static DispatchQoS.unspecified.getter();
    v0[9] = _swiftEmptyArrayStorage;
    sub_1002AB13C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v17);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v19, v27);
    v23(v20, v11);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_10026B534()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 344);
    uint64_t v4 = *(void *)(v2 + 352);
    uint64_t v5 = sub_10026B994;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10026B670;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10026B670()
{
  *(void *)(v0 + 400) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026B6FC, v2, v1);
}

uint64_t sub_10026B6FC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[46];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[11];
  swift_release();
  Spring.init(response:dampingRatio:)();
  static Animation.spring(_:blendDuration:)();
  v1(v2, v3);
  Animation.speed(_:)();
  swift_release();
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v7 = v0[43];
  uint64_t v8 = v0[44];
  return _swift_task_switch(sub_10026B838, v7, v8);
}

uint64_t sub_10026B838()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  swift_release();
  sub_1002ADE8C(v2, type metadata accessor for CVBundle);
  sub_1002ADE8C(v1, type metadata accessor for EventLookupItem);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10026B994()
{
  sub_1002ADE8C(*(void *)(v0 + 120), type metadata accessor for CVBundle);
  return _swift_task_switch(sub_10026BA10, 0, 0);
}

uint64_t sub_10026BA10()
{
  *(void *)(v0 + 408) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026BA9C, v2, v1);
}

uint64_t sub_10026BA9C()
{
  swift_release();
  sub_100274A38();
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  return _swift_task_switch(sub_10026BB20, v1, v2);
}

uint64_t sub_10026BB20()
{
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10026BC4C()
{
  v1[2] = v0;
  sub_10000F214(&qword_10051A8C0);
  v1[3] = swift_task_alloc();
  v1[4] = type metadata accessor for MainActor();
  v1[5] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[6] = v3;
  v1[7] = v2;
  return _swift_task_switch(sub_10026BD18, v3, v2);
}

uint64_t sub_10026BD18()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(swift_task_alloc() + 16) = v1;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10026BE08;
  return sub_10026CCB8();
}

uint64_t sub_10026BE08()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 48);
  return _swift_task_switch(sub_10026BF28, v3, v2);
}

uint64_t sub_10026BF28()
{
  swift_release();
  if (qword_100517E00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000F378(v1, (uint64_t)qword_10055E118);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Activating Siri", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[2];

  LOBYTE(v6) = *(unsigned char *)(v6 + 40);
  uint64_t v7 = swift_retain();
  uint64_t v8 = sub_10027D7D0(v7, v6, 0xD000000000000019, 0x800000010042A5C0);
  swift_release();
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v10;
  v11[3] = &protocol witness table for MainActor;
  v11[4] = v8;
  sub_100064D5C(v5, (uint64_t)&unk_10051B1C8, (uint64_t)v11);
  swift_release();
  swift_release();
  id v12 = [objc_allocWithZone((Class)SiriSimpleActivationSource) init];
  [v12 activateFromSource:52];
  [v12 invalidate];

  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10026C170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 48) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026C208, v6, v5);
}

uint64_t sub_10026C208()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  uint64_t v2 = type metadata accessor for ContentView();
  os_log_type_t v3 = (char *)(v1 + *(int *)(v2 + 76));
  char v4 = *v3;
  uint64_t v5 = *((void *)v3 + 1);
  *(unsigned char *)(v0 + 16) = v4;
  *(void *)(v0 + 24) = v5;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 40);
    *(void *)(swift_task_alloc() + 16) = v6;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t *)(v6 + *(int *)(v2 + 44));
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    *(void *)(v0 + 16) = v9;
    *(void *)(v0 + 24) = v8;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    uint64_t v10 = *(void *)(v0 + 32);
    swift_getKeyPath();
    *(void *)(v0 + 16) = v10;
    sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v10 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) != 1) {
      sub_100414568();
    }
    swift_release();
  }
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10026C3E4(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v2 - 8);
  char v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for ResultLookupState();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  sub_1002297C8((uint64_t)v4);
  sub_10023E52C();
  uint64_t v6 = (char *)(a1 + *(int *)(type metadata accessor for ContentView() + 76));
  char v7 = *v6;
  uint64_t v8 = *((void *)v6 + 1);
  v10[0] = v7;
  uint64_t v11 = v8;
  char v12 = 0;
  sub_10000F214(&qword_100522EA0);
  return State.wrappedValue.setter();
}

uint64_t sub_10026C4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a4;
  sub_10000F214(&qword_10051A308);
  v4[5] = swift_task_alloc();
  v4[6] = type metadata accessor for ContentView();
  v4[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[8] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026C5E8, v6, v5);
}

uint64_t sub_10026C5E8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  swift_release();
  uint64_t v4 = v3 + *(int *)(v2 + 76);
  char v5 = *(unsigned char *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  *(unsigned char *)(v0 + 16) = v5;
  *(void *)(v0 + 24) = v6;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  LOBYTE(v2) = *(unsigned char *)(v0 + 72);
  sub_1002ADE24(v3, v1, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v7 = *(void *)(v0 + 56);
  if (v2)
  {
    sub_1002ADE8C(*(void *)(v0 + 56), (uint64_t (*)(void))type metadata accessor for ContentView);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 40);
    sub_10000F214(&qword_100525F58);
    State.wrappedValue.getter();
    sub_1002ADE8C(v7, (uint64_t (*)(void))type metadata accessor for ContentView);
    uint64_t v9 = type metadata accessor for ResultLookupState();
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    sub_10000FBD8(v8, &qword_10051A308);
    if (v10 != 1)
    {
      uint64_t v11 = *(void *)(v0 + 32);
      *(void *)(swift_task_alloc() + 16) = v11;
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      swift_release();
      swift_task_dealloc();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  char v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10026C7E0()
{
  uint64_t v0 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ResultLookupState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  sub_1002297C8((uint64_t)v2);
  return sub_10023E52C();
}

uint64_t sub_10026C8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  type metadata accessor for MainActor();
  v4[12] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v6;
  v4[14] = v5;
  return _swift_task_switch(sub_10026C940, v6, v5);
}

uint64_t sub_10026C940()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = (char *)(v1 + *(int *)(v2 + 76));
  char v4 = *v3;
  uint64_t v5 = *((void *)v3 + 1);
  *(unsigned char *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = v5;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if ((*(unsigned char *)(v0 + 128) & 1) == 0)
  {
    uint64_t v6 = (void *)(*(void *)(v0 + 88) + *(int *)(v2 + 44));
    uint64_t v7 = v6[1];
    *(void *)(v0 + 16) = *v6;
    *(void *)(v0 + 24) = v7;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    uint64_t v8 = *(void *)(v0 + 64);
    swift_getKeyPath();
    *(void *)(v0 + 72) = v8;
    sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v9 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
    swift_release();
    if (v9 == 1) {
      sub_100254068();
    }
    uint64_t v10 = v6[1];
    *(void *)(v0 + 48) = *v6;
    *(void *)(v0 + 56) = v10;
    State.wrappedValue.getter();
    sub_1004152E0();
    swift_release();
  }
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10026CB38;
  return sub_10026CCB8();
}

uint64_t sub_10026CB38()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 112);
  uint64_t v3 = *(void *)(v1 + 104);
  return _swift_task_switch(sub_10026CC58, v3, v2);
}

uint64_t sub_10026CC58()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10026CCB8()
{
  v1[5] = v0;
  v1[6] = type metadata accessor for MainActor();
  v1[7] = static MainActor.shared.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  v1[8] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10026CD68;
  return sub_10026E784(v0);
}

uint64_t sub_10026CD68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v3[9] = a2;
  swift_task_dealloc();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026CEB0, v5, v4);
}

uint64_t sub_10026CEB0()
{
  unint64_t v1 = v0[9];
  swift_release();
  if (v1 >> 60 == 15)
  {
    if (qword_100517E00 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000F378(v2, (uint64_t)qword_10055E118);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "no image data", v5, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v6 = (char *)v0[9];
    uint64_t v7 = (uint8_t *)v0[3];
    sub_10026EE74(v7, v6);
    sub_100094760((uint64_t)v7, (unint64_t)v6);
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10026D004(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  sub_1002297C8((uint64_t)v4);
  uint64_t v6 = (char *)(a1 + *(int *)(type metadata accessor for ContentView() + 76));
  char v7 = *v6;
  uint64_t v8 = *((void *)v6 + 1);
  v10[0] = v7;
  uint64_t v11 = v8;
  char v12 = 1;
  sub_10000F214(&qword_100522EA0);
  return State.wrappedValue.setter();
}

uint64_t sub_10026D12C()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  unint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10026D1D8;
  return sub_10026BC4C();
}

uint64_t sub_10026D1D8()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10016AFCC, v1, v0);
}

uint64_t sub_10026D314(unsigned __int8 a1)
{
  int v1 = a1;
  uint64_t v25 = type metadata accessor for WithCurrentHostingControllerAction();
  uint64_t v2 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  os_log_type_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1 == 2)
  {
    uint64_t v8 = 0xD000000000000040;
    uint64_t v11 = (void *)0x800000010042A1D0;
    int v9 = (void *)0x800000010042A1F0;
    uint64_t v10 = 0xD00000000000001CLL;
  }
  else
  {
    unint64_t v5 = 0xD000000000000031;
    if ((v1 & 1) == 0) {
      unint64_t v5 = 0xD000000000000053;
    }
    unint64_t v6 = 0x800000010042A130;
    if ((v1 & 1) == 0) {
      unint64_t v6 = 0x800000010042A170;
    }
    BOOL v7 = v1 == 3;
    if (v1 == 3) {
      uint64_t v8 = 0xD000000000000023;
    }
    else {
      uint64_t v8 = v5;
    }
    if (v1 == 3) {
      int v9 = (void *)0x800000010042A100;
    }
    else {
      int v9 = (void *)v6;
    }
    if (v1 == 3) {
      uint64_t v10 = 0x76616E55206B7341;
    }
    else {
      uint64_t v10 = 0x74616843206B7341;
    }
    if (v7) {
      uint64_t v11 = (void *)0xEF656C62616C6961;
    }
    else {
      uint64_t v11 = (void *)0xEB00000000545047;
    }
  }
  char v12 = self;
  id v13 = [v12 mainBundle];
  v27._object = (void *)0xEB00000000656C74;
  v14._countAndFlagsBits = v10;
  v14._object = v11;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0x6954207472656C41;
  Swift::String v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v26);
  swift_bridgeObjectRelease();

  id v17 = [v12 mainBundle];
  v27._object = (void *)0xED00006567617373;
  v18._countAndFlagsBits = v8;
  v18._object = v9;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v27._countAndFlagsBits = 0x654D207472656C41;
  Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v27);
  swift_bridgeObjectRelease();

  type metadata accessor for ContentView();
  uint64_t v21 = sub_10027CAF4(&qword_100525F10, (uint64_t (*)(void))&type metadata accessor for WithCurrentHostingControllerAction, 0xD000000000000022, 0x800000010042A240, (uint64_t)v4);
  __chkstk_darwin(v21);
  *((Swift::String *)&v24 - 2) = v16;
  v27._object = (void *)v20._countAndFlagsBits;
  object = v20._object;
  WithCurrentHostingControllerAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v25);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10026D674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a4;
  v4[5] = type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  unint64_t v5 = (void *)swift_task_alloc();
  v4[7] = v5;
  *unint64_t v5 = v4;
  v5[1] = sub_10026D724;
  return sub_10026D920();
}

uint64_t sub_10026D724(char a1)
{
  *(unsigned char *)(*(void *)v1 + 65) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026D868, v3, v2);
}

uint64_t sub_10026D868()
{
  int v1 = *(unsigned __int8 *)(v0 + 65);
  swift_release();
  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v3 = (char *)(v2 + *(int *)(type metadata accessor for ContentView() + 84));
    char v4 = *v3;
    uint64_t v5 = *((void *)v3 + 1);
    *(unsigned char *)(v0 + 64) = 1;
    *(unsigned char *)(v0 + 16) = v4;
    *(void *)(v0 + 24) = v5;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.setter();
  }
  unint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10026D920()
{
  v1[2] = v0;
  v1[3] = type metadata accessor for MainActor();
  v1[4] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[5] = v3;
  v1[6] = v2;
  return _swift_task_switch(sub_10026D9BC, v3, v2);
}

uint64_t sub_10026D9BC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = static MainActor.shared.getter();
  v0[7] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[8] = v3;
  *(void *)(v3 + 16) = v1;
  char v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  *char v4 = v0;
  v4[1] = sub_10026DAC8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 11, v2, &protocol witness table for MainActor, 0xD000000000000017, 0x800000010042A070, sub_1002997DC, v3, &type metadata for Bool);
}

uint64_t sub_10026DAC8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = sub_10026DC50;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = sub_10026DBEC;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10026DBEC()
{
  swift_release();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 88);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10026DC50()
{
  swift_release();
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10026DCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v4[5] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10026DD8C;
  return sub_10026D920();
}

uint64_t sub_10026DD8C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026DED0, v3, v2);
}

uint64_t sub_10026DED0()
{
  int v1 = *(unsigned __int8 *)(v0 + 48);
  swift_release();
  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    *(void *)(swift_task_alloc() + 16) = v2;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
    swift_task_dealloc();
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10026DF9C()
{
  return sub_100229E04(1);
}

uint64_t sub_10026E048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a4;
  v4[5] = type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v4[7] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10026E0F8;
  return sub_10026D920();
}

uint64_t sub_10026E0F8(char a1)
{
  *(unsigned char *)(*(void *)v1 + 65) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026E23C, v3, v2);
}

uint64_t sub_10026E23C()
{
  int v1 = *(unsigned __int8 *)(v0 + 65);
  swift_release();
  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v3 = (char *)(v2 + *(int *)(type metadata accessor for ContentView() + 80));
    char v4 = *v3;
    uint64_t v5 = *((void *)v3 + 1);
    *(unsigned char *)(v0 + 64) = 1;
    *(unsigned char *)(v0 + 16) = v4;
    *(void *)(v0 + 24) = v5;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.setter();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10026E2F4(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_1005263C0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = __chkstk_darwin(v6);
  int v9 = (char *)aBlock - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)aBlock - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v12 + v11, v9, v2);
  int v13 = MKBGetDeviceLockState();
  if (v13 != 3 && v13)
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_100299878;
    *(void *)(v14 + 24) = v12;
    aBlock[4] = sub_10029993C;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10026E548;
    aBlock[3] = &unk_1004F1918;
    Swift::String v15 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    SBSRequestPasscodeUnlockUI();
    _Block_release(v15);
  }
  else
  {
    LOBYTE(aBlock[0]) = 1;
    CheckedContinuation.resume(returning:)();
  }
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10026E548(uint64_t a1, int a2)
{
  uint64_t v2 = *(void (**)(BOOL))(a1 + 32);
  BOOL v3 = a2 != 0;
  swift_retain();
  v2(v3);

  return swift_release();
}

void sub_10026E5A0(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [self alertControllerWithTitle:v2 message:v3 preferredStyle:1];

    id v4 = [self mainBundle];
    v11._object = (void *)0xEE006E6F74747542;
    v5._countAndFlagsBits = 0x7373696D736944;
    v5._object = (void *)0xE700000000000000;
    v6._countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v11._countAndFlagsBits = 0x207373696D736944;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v11);

    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v8 = [self actionWithTitle:v7 style:0 handler:0];

    [v9 addAction:v8];
    [v1 presentViewController:v9 animated:1 completion:0];
  }
}

uint64_t sub_10026E784(uint64_t a1)
{
  v1[19] = a1;
  type metadata accessor for MainActor();
  v1[20] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[21] = v3;
  v1[22] = v2;
  return _swift_task_switch(sub_10026E81C, v3, v2);
}

uint64_t sub_10026E81C()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(v2 + 112));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  v0[14] = v5;
  v0[15] = v4;
  sub_10000F214(&qword_1005263A0);
  State.wrappedValue.getter();
  uint64_t v6 = v0[18];
  swift_getKeyPath();
  v0[16] = v6;
  sub_1002AB13C(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  NSString v7 = *(void **)(v6 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__userSelectedSubjectImage);
  id v8 = v7;
  swift_release();
  if (v7)
  {
    swift_release();
    uint64_t v9 = sub_10021C7C4((uint64_t)v8, 1);
    uint64_t v11 = v10;

    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v12(v9, v11);
  }
  else
  {
    uint64_t v14 = (uint64_t *)(v0[19] + *(int *)(v2 + 44));
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    v0[12] = v16;
    v0[13] = v15;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    v0[23] = v0[17];
    id v17 = (void *)swift_task_alloc();
    v0[24] = v17;
    *id v17 = v0;
    v17[1] = sub_10026EA34;
    return sub_100417A1C((uint64_t)(v0 + 7));
  }
}

uint64_t sub_10026EA34()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v2 + 168);
    uint64_t v4 = *(void *)(v2 + 176);
    uint64_t v5 = sub_10026ED30;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 168);
    uint64_t v4 = *(void *)(v2 + 176);
    uint64_t v5 = sub_10026EB74;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10026EB74()
{
  swift_release();
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v1);
  CGImageRef v3 = sub_100398EE0(v1, v2);
  if (v3)
  {
    CGImageRef v4 = v3;
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    sub_10000F3B0((void *)(v0 + 16), v5);
    uint64_t v7 = sub_1003991F4(v5, v6);
    uint64_t v8 = sub_10021C7C4((uint64_t)v4, v7);
    unint64_t v10 = v9;

    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  }
  else
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
    if (qword_100517E00 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000F378(v11, (uint64_t)qword_10055E118);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "getQualityFrame failed", v14, 2u);
      swift_slowDealloc();
    }

    uint64_t v8 = 0;
    unint64_t v10 = 0xF000000000000000;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v15(v8, v10);
}

uint64_t sub_10026ED30()
{
  swift_release();
  *(_OWORD *)(v0 + 56) = 0u;
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  sub_10000FBD8(v0 + 56, &qword_100518A80);
  if (qword_100517E00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000F378(v1, (uint64_t)qword_10055E118);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    CGImageRef v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)CGImageRef v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "getQualityFrame failed", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
  return v5(0, 0xF000000000000000);
}

uint64_t sub_10026EE74(uint8_t *a1, char *a2)
{
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void (*)(char *, uint64_t))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for ContentView();
  static UTType.jpeg.getter();
  sub_1003DDD24(a1, a2, v8);
  (*(void (**)(void, uint64_t))(v6 + 8))(v8, v5);
  sub_100038528((uint64_t)a1, (unint64_t)a2);
  sub_100049104((uint64_t)a1, (unint64_t)a2, (uint64_t *)&v27);
  unint64_t v10 = (long long *)(v2 + *(int *)(v9 + 248));
  long long v11 = v10[1];
  long long v21 = *v10;
  long long v22 = v11;
  long long v12 = v10[3];
  long long v23 = v10[2];
  long long v24 = v12;
  long long v13 = v10[5];
  long long v25 = v10[4];
  long long v26 = v13;
  long long v15 = v27;
  uint64_t v16 = v28;
  long long v17 = v29;
  long long v18 = v30;
  long long v19 = v31;
  long long v20 = v32;
  sub_1000BE490((uint64_t)&v27);
  sub_10000F214(&qword_100526450);
  State.wrappedValue.setter();
  sub_1000BE2BC((uint64_t)&v27);
  return sub_100299EFC((uint64_t)&v27);
}

uint64_t sub_10026F030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v4[5] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10026F0E0;
  return sub_10026D920();
}

uint64_t sub_10026F0E0(char a1)
{
  *(unsigned char *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026F224, v3, v2);
}

uint64_t sub_10026F224()
{
  int v1 = *(unsigned __int8 *)(v0 + 48);
  swift_release();
  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    *(void *)(swift_task_alloc() + 16) = v2;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
    swift_task_dealloc();
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10026F2F0()
{
  return sub_100229E04(1);
}

uint64_t sub_10026F39C()
{
  uint64_t v0 = type metadata accessor for Locale();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v2 - 8);
  CGImageRef v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v5 = String.init(localized:table:bundle:locale:comment:)();
  *(void *)CGImageRef v4 = _swiftEmptyArrayStorage;
  *((void *)v4 + 1) = _swiftEmptyArrayStorage;
  *((void *)v4 + 2) = 0xD000000000000016;
  *((void *)v4 + 3) = 0x8000000100429ED0;
  *((void *)v4 + 4) = v5;
  *((void *)v4 + 5) = v6;
  *((_OWORD *)v4 + 3) = xmmword_10044A0D0;
  uint64_t v7 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 0, 1, v7);
  return sub_1002297C8((uint64_t)v4);
}

uint64_t sub_10026F588()
{
  uint64_t v0 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (_OWORD *)((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for ResultLookupState();
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  return sub_1002297C8((uint64_t)v2);
}

uint64_t sub_10026F66C(uint64_t a1)
{
  v1[19] = a1;
  type metadata accessor for Locale();
  v1[20] = swift_task_alloc();
  type metadata accessor for String.LocalizationValue();
  v1[21] = swift_task_alloc();
  sub_10000F214(&qword_10051A308);
  v1[22] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[23] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[24] = v3;
  v1[25] = v2;
  return _swift_task_switch(sub_10026F78C, v3, v2);
}

uint64_t sub_10026F78C()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(v2 + 112));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  v0[14] = v5;
  v0[15] = v4;
  sub_10000F214(&qword_1005263A0);
  State.wrappedValue.getter();
  uint64_t v6 = v0[18];
  swift_getKeyPath();
  v0[16] = v6;
  sub_1002AB13C(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = *(void **)(v6 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__userSelectedSubjectImage);
  id v8 = v7;
  swift_release();
  if (v7)
  {
    swift_release();
    CGColorSpaceRef v9 = sub_100380E68((uint64_t)v8, 1, 0.4);
    uint64_t v11 = v10;

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v12 = (uint64_t (*)(CGColorSpaceRef, uint64_t))v0[1];
    return v12(v9, v11);
  }
  else
  {
    uint64_t v14 = (uint64_t *)(v0[19] + *(int *)(v2 + 44));
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    v0[12] = v16;
    v0[13] = v15;
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    v0[26] = v0[17];
    long long v17 = (void *)swift_task_alloc();
    v0[27] = v17;
    *long long v17 = v0;
    v17[1] = sub_10026F9C8;
    return sub_100417A1C((uint64_t)(v0 + 7));
  }
}

uint64_t sub_10026F9C8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v2 + 192);
    uint64_t v4 = *(void *)(v2 + 200);
    uint64_t v5 = sub_10026FDE0;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 192);
    uint64_t v4 = *(void *)(v2 + 200);
    uint64_t v5 = sub_10026FB08;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10026FB08()
{
  swift_release();
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v1);
  CGImageRef v3 = sub_100398EE0(v1, v2);
  if (v3)
  {
    CGImageRef v4 = v3;
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    sub_10000F3B0((void *)(v0 + 16), v5);
    uint64_t v7 = sub_1003991F4(v5, v6);
    CGColorSpaceRef v8 = sub_100380E68((uint64_t)v4, v7, 0.4);
    unint64_t v10 = v9;

    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  }
  else
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
    if (qword_100517E58 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000F378(v11, (uint64_t)qword_10055E220);
    long long v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "getQualityFrame failed", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = *(void **)(v0 + 176);

    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v16 = String.init(localized:table:bundle:locale:comment:)();
    *uint64_t v15 = _swiftEmptyArrayStorage;
    v15[1] = _swiftEmptyArrayStorage;
    v15[2] = 0xD000000000000016;
    v15[3] = 0x8000000100429ED0;
    v15[4] = v16;
    v15[5] = v17;
    v15[6] = 0xD00000000000002ALL;
    v15[7] = 0x800000010042A000;
    uint64_t v18 = type metadata accessor for ResultLookupState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v15, 0, 1, v18);
    sub_1002297C8((uint64_t)v15);
    CGColorSpaceRef v8 = 0;
    unint64_t v10 = 0xF000000000000000;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v19 = *(uint64_t (**)(CGColorSpaceRef, unint64_t))(v0 + 8);
  return v19(v8, v10);
}

uint64_t sub_10026FDE0()
{
  swift_release();
  *(_OWORD *)(v0 + 56) = 0u;
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  sub_10000FBD8(v0 + 56, &qword_100518A80);
  if (qword_100517E58 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000F378(v1, (uint64_t)qword_10055E220);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    CGImageRef v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)CGImageRef v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "getQualityFrame failed", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void **)(v0 + 176);

  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v6 = String.init(localized:table:bundle:locale:comment:)();
  *uint64_t v5 = _swiftEmptyArrayStorage;
  v5[1] = _swiftEmptyArrayStorage;
  void v5[2] = 0xD000000000000016;
  v5[3] = 0x8000000100429ED0;
  v5[4] = v6;
  v5[5] = v7;
  v5[6] = 0xD00000000000002ALL;
  v5[7] = 0x800000010042A000;
  uint64_t v8 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 0, 1, v8);
  sub_1002297C8((uint64_t)v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
  return v9(0, 0xF000000000000000);
}

uint64_t sub_100270038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Locale();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v10 = String.init(localized:table:bundle:locale:comment:)();
  *unint64_t v9 = _swiftEmptyArrayStorage;
  v9[1] = _swiftEmptyArrayStorage;
  v9[2] = 0xD000000000000016;
  void v9[3] = 0x8000000100429ED0;
  v9[4] = v10;
  v9[5] = v11;
  v9[6] = a2;
  v9[7] = a3;
  uint64_t v12 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 0, 1, v12);
  return sub_1002297C8((uint64_t)v9);
}

uint64_t sub_10027022C()
{
  return swift_release();
}

uint64_t sub_1002702EC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v4 = sub_10000F214(&qword_100526378);
  __chkstk_darwin(v4 - 8);
  uint64_t v45 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Lens_ExploreGrid(0);
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  char v44 = (uint64_t *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for ResultLookupState();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v39 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000F214(&qword_100526390);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v14 - 8);
  uint64_t v42 = (uint64_t **)((char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v39 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (_OWORD *)((char *)&v39 - v20);
  __chkstk_darwin(v22);
  long long v24 = (char *)&v39 - v23;
  type metadata accessor for ContentView();
  uint64_t v48 = a1;
  sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  v21[2] = 0u;
  v21[3] = 0u;
  *uint64_t v21 = 0u;
  v21[1] = 0u;
  swift_storeEnumTagMultiPayload();
  os_log_type_t v40 = *(void (**)(_OWORD *, void, uint64_t, uint64_t))(v8 + 56);
  v40(v21, 0, 1, v7);
  uint64_t v25 = (uint64_t)&v13[*(int *)(v11 + 56)];
  sub_10000FB74((uint64_t)v24, (uint64_t)v13, &qword_10051A308);
  sub_10000FB74((uint64_t)v21, v25, &qword_10051A308);
  long long v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v26((uint64_t)v13, 1, v7) != 1)
  {
    sub_10000FB74((uint64_t)v13, (uint64_t)v18, &qword_10051A308);
    if (v26(v25, 1, v7) != 1)
    {
      uint64_t v28 = v39;
      sub_1002AA830(v25, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      char v29 = sub_1003192A0((uint64_t)v18, v28);
      sub_1002ADE8C((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      sub_10000FBD8((uint64_t)v21, &qword_10051A308);
      sub_10000FBD8((uint64_t)v24, &qword_10051A308);
      sub_1002ADE8C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t result = sub_10000FBD8((uint64_t)v13, &qword_10051A308);
      if ((v29 & 1) == 0) {
        return result;
      }
      goto LABEL_8;
    }
    sub_10000FBD8((uint64_t)v21, &qword_10051A308);
    sub_10000FBD8((uint64_t)v24, &qword_10051A308);
    sub_1002ADE8C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    return sub_10000FBD8((uint64_t)v13, &qword_100526390);
  }
  sub_10000FBD8((uint64_t)v21, &qword_10051A308);
  sub_10000FBD8((uint64_t)v24, &qword_10051A308);
  if (v26(v25, 1, v7) != 1) {
    return sub_10000FBD8((uint64_t)v13, &qword_100526390);
  }
  sub_10000FBD8((uint64_t)v13, &qword_10051A308);
LABEL_8:
  uint64_t v30 = type metadata accessor for Lens_Result(0);
  uint64_t v31 = v45;
  long long v32 = v46;
  sub_10000FB74((uint64_t)v46 + *(int *)(v30 + 28), v45, &qword_100526378);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v31, 1, v43) == 1)
  {
    uint64_t v33 = v44;
    *char v44 = (uint64_t)_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    sub_10000FBD8(v31, &qword_100526378);
  }
  else
  {
    uint64_t v33 = v44;
    sub_1002AA830(v31, (uint64_t)v44, type metadata accessor for Lens_ExploreGrid);
  }
  uint64_t v34 = *v33;
  swift_bridgeObjectRetain();
  sub_1002ADE8C((uint64_t)v33, type metadata accessor for Lens_ExploreGrid);
  uint64_t v35 = *v32;
  uint64_t v36 = *v47;
  uint64_t v37 = v47[1];
  uint64_t v38 = (uint64_t)v42;
  *uint64_t v42 = v34;
  *(void *)(v38 + 8) = v35;
  *(void *)(v38 + 16) = v36;
  *(void *)(v38 + 24) = v37;
  *(_OWORD *)(v38 + 32) = xmmword_10044A0D0;
  *(_OWORD *)(v38 + 48) = xmmword_10044A0D0;
  swift_storeEnumTagMultiPayload();
  v40((_OWORD *)v38, 0, 1, v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1002297C8(v38);
}

uint64_t sub_1002708EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  v5[3] = a5;
  sub_10000F214(&qword_10051A308);
  v5[4] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002709B4, v7, v6);
}

uint64_t sub_1002709B4()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  swift_release();
  sub_1002ADE24(v2, v1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  type metadata accessor for GeoLocateState(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 0, 1, v3);
  sub_1002297C8(v1);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100270ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  sub_10000F214(&qword_10051A308);
  v4[3] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100270B84, v6, v5);
}

uint64_t sub_100270B84()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_release();
  *uint64_t v1 = 0xD000000000000032;
  v1[1] = 0x800000010042A420;
  uint64_t v2 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_1002297C8((uint64_t)v1);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100270C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  v5[3] = a5;
  sub_10000F214(&qword_10051A308);
  v5[4] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100270D38, v7, v6);
}

uint64_t sub_100270D38()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  swift_release();
  *(void *)uint64_t v1 = v2;
  uint64_t v3 = type metadata accessor for ResultLookupState();
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(void *)(v1 + 56) = 0;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 0, 1, v3);
  swift_bridgeObjectRetain();
  sub_1002297C8(v1);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100270E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  sub_10000F214(&qword_10051A308);
  v4[3] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100270EF0, v6, v5);
}

uint64_t sub_100270EF0()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_release();
  *uint64_t v1 = 0xD00000000000002CLL;
  v1[1] = 0x800000010042A460;
  uint64_t v2 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_1002297C8((uint64_t)v1);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100270FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, unsigned __int8 a8)
{
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = v17;
  *(unsigned char *)(v8 + 72) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  sub_10000F214(&qword_10051A308);
  *(void *)(v8 + 56) = swift_task_alloc();
  type metadata accessor for MainActor();
  sub_1000506C4(a5, a6, a7, a8);
  *(void *)(v8 + 64) = static MainActor.shared.getter();
  uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002710EC, v14, v13);
}

uint64_t sub_1002710EC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  long long v8 = *(_OWORD *)(v0 + 24);
  swift_release();
  *(_OWORD *)uint64_t v1 = v8;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v2 | 0x4000000000000000;
  *(void *)(v1 + 32) = v3;
  uint64_t v5 = type metadata accessor for ResultLookupState();
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 40) = 0;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 0, 1, v5);
  swift_bridgeObjectRetain();
  sub_1002297C8(v1);
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1002711F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 216) = v13;
  *(void *)(v8 + 192) = a8;
  *(void *)(v8 + 200) = v14;
  *(void *)(v8 + 176) = a6;
  *(void *)(v8 + 184) = a7;
  *(void *)(v8 + 160) = a4;
  *(void *)(v8 + 168) = a5;
  type metadata accessor for MainActor();
  *(void *)(v8 + 208) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002712A8, v10, v9);
}

uint64_t sub_1002712A8()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release();
  if (*(void *)(v1 + 16) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 160);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v2 + 32);
    long long v3 = *(_OWORD *)(v2 + 96);
    long long v5 = *(_OWORD *)(v2 + 48);
    long long v4 = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(v0 + 64) = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(v0 + 80) = v3;
    *(_OWORD *)(v0 + 32) = v5;
    *(_OWORD *)(v0 + 48) = v4;
    long long v7 = *(_OWORD *)(v2 + 128);
    long long v6 = *(_OWORD *)(v2 + 144);
    long long v8 = *(_OWORD *)(v2 + 112);
    *(void *)(v0 + 144) = *(void *)(v2 + 160);
    *(_OWORD *)(v0 + 112) = v7;
    *(_OWORD *)(v0 + 128) = v6;
    *(_OWORD *)(v0 + 96) = v8;
    uint64_t v9 = *(void **)(v0 + 24);
    sub_1001817B4(v0 + 16);
    *(void *)(v0 + 152) = [v9 muid];
    dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v10 = self;
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 captureUserAction:21 target:145 value:v11];

    sub_10017FF68(v0 + 16);
  }
  else
  {
    sub_10041B7EC(*(void *)(v0 + 160));
  }
  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v12 = *(void *)(v0 + 200);
  char v14 = *(unsigned char *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 184);
  long long v21 = *(_OWORD *)(v0 + 168);
  uint64_t v16 = *(void *)(v0 + 160);
  uint64_t v17 = swift_task_alloc();
  *(_OWORD *)(v17 + 16) = v21;
  *(void *)(v17 + 32) = v15;
  *(void *)(v17 + 40) = v13;
  *(unsigned char *)(v17 + 48) = v14;
  *(void *)(v17 + 56) = v12;
  *(void *)(v17 + 64) = v16;
  uint64_t v18 = swift_task_alloc();
  *(void *)(v18 + 16) = sub_1002A4F40;
  *(void *)(v18 + 24) = v17;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1002714A8(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, int64_t *a6, uint64_t a7)
{
  uint64_t v14 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v14 - 8);
  char v44 = (void **)((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v16 = a6[2];
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (v16)
  {
    uint64_t v37 = a7;
    os_log_type_t v40 = a3;
    uint64_t v42 = a5;
    uint64_t v43 = a1;
    uint64_t v45 = _swiftEmptyArrayStorage;
    sub_100040974(0, v16, 0);
    uint64_t v18 = v45;
    unint64_t v19 = v45[2];
    uint64_t v20 = a6 + 7;
    int64_t v21 = v16;
    do
    {
      uint64_t v22 = *v20;
      uint64_t v45 = v18;
      unint64_t v23 = v18[3];
      if (v19 >= v23 >> 1)
      {
        sub_100040974(v23 > 1, v19 + 1, 1);
        uint64_t v18 = v45;
      }
      v18[2] = v19 + 1;
      v18[v19 + 4] = v22;
      v20 += 8;
      ++v19;
      --v21;
    }
    while (v21);
    uint64_t v36 = v18;
    char v39 = a2;
    uint64_t v41 = a4;
    uint64_t v45 = _swiftEmptyArrayStorage;
    sub_100040BA0(0, v16, 0);
    uint64_t v17 = v45;
    uint64_t v38 = a6;
    long long v24 = a6 + 11;
    do
    {
      uint64_t v26 = *(v24 - 3);
      uint64_t v25 = *(v24 - 2);
      uint64_t v28 = *(v24 - 1);
      uint64_t v27 = *v24;
      uint64_t v45 = v17;
      unint64_t v30 = v17[2];
      unint64_t v29 = v17[3];
      swift_bridgeObjectRetain();
      if (v30 >= v29 >> 1)
      {
        sub_100040BA0(v29 > 1, v30 + 1, 1);
        uint64_t v17 = v45;
      }
      v24 += 8;
      void v17[2] = v30 + 1;
      uint64_t v31 = &v17[4 * v30];
      v31[4] = v26;
      v31[5] = v25;
      v31[6] = v28;
      uint64_t v31[7] = v27;
      --v16;
    }
    while (v16);
    LOBYTE(a5) = v42;
    a3 = v40;
    a4 = v41;
    a6 = v38;
    a2 = v39;
    long long v32 = v36;
    a7 = v37;
  }
  else
  {
    long long v32 = _swiftEmptyArrayStorage;
  }
  uint64_t v33 = v44;
  *char v44 = a2;
  v33[1] = a3;
  v33[2] = a4;
  v33[3] = a5 | 0x8000000000000000;
  v33[4] = a6;
  v33[5] = a7;
  v33[6] = v32;
  v33[7] = v17;
  uint64_t v34 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 0, 1, v34);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000506C4(a2, a3, a4, a5);
  return sub_1002297C8((uint64_t)v33);
}

uint64_t sub_100271740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 64) = a8;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  sub_10000F214(&qword_10051A308);
  *(void *)(v8 + 48) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v8 + 56) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100271810, v10, v9);
}

uint64_t sub_100271810()
{
  uint64_t v1 = *(uint64_t **)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 32);
  unint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 24);
  char v5 = *(unsigned char *)(v0 + 64);
  swift_release();
  *uint64_t v1 = sub_1000F14C4(v4, v2, v3, v5);
  v1[1] = v6;
  uint64_t v7 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 0, 1, v7);
  sub_1002297C8((uint64_t)v1);
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100271908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  sub_10000F214(&qword_10051A308);
  v5[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[9] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002719D0, v7, v6);
}

uint64_t sub_1002719D0()
{
  uint64_t v1 = *(uint64_t **)(v0 + 64);
  swift_release();
  swift_getErrorValue();
  *uint64_t v1 = Error.localizedDescription.getter();
  v1[1] = v2;
  uint64_t v3 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 0, 1, v3);
  sub_1002297C8((uint64_t)v1);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100271AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 40) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100271B6C, v6, v5);
}

uint64_t sub_100271B6C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  uint64_t v2 = (char *)(v1 + *(int *)(type metadata accessor for ContentView() + 156));
  char v3 = *v2;
  uint64_t v4 = *((void *)v2 + 1);
  *(unsigned char *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v4;
  *(unsigned char *)(v0 + 48) = 1;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100271C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = (char *)(a1 + *(int *)(type metadata accessor for ContentView() + 156));
  char v8 = *v7;
  uint64_t v9 = *((void *)v7 + 1);
  v12[0] = v8;
  uint64_t v13 = v9;
  char v14 = 0;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  *uint64_t v6 = a2;
  uint64_t v10 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 0, 1, v10);
  swift_bridgeObjectRetain();
  return sub_1002297C8((uint64_t)v6);
}

uint64_t sub_100271D4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10000F734(0, &qword_100518AA0);
  **(void **)(*(void *)(v1 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return swift_continuation_resume();
}

uint64_t sub_100271DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  void v7[2] = a4;
  v7[3] = a5;
  sub_10000F214(&qword_10051A308);
  v7[6] = swift_task_alloc();
  type metadata accessor for MainActor();
  v7[7] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100271E90, v9, v8);
}

uint64_t sub_100271E90()
{
  unint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  swift_release();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = sub_1002274E0(sub_10029EF98, v3, v2);
  swift_task_dealloc();
  uint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = v0[5];
    uint64_t v7 = (void *)swift_task_alloc();
    void v7[2] = v5;
    v7[3] = v6;
    v7[4] = v4;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();

    swift_task_dealloc();
  }
  else
  {
    uint64_t v8 = (void *)v0[6];
    *uint64_t v8 = 0xD000000000000025;
    v8[1] = 0x800000010042A3B0;
    uint64_t v9 = type metadata accessor for ResultLookupState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
    sub_1002297C8((uint64_t)v8);
  }
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100272030(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v31 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100521670);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v10 - 8);
  uint64_t v32 = (uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v14 = (char *)&v31 - v13;
  double v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v31 - v17;
  id v19 = [*a1 correlationIdentifier:v16];
  if (v19)
  {
    uint64_t v20 = v19;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v18, 1, 1, v4);
  }
  uint64_t v21 = type metadata accessor for TextDetectorResult.DataDetector(0);
  sub_10000FB74(a2 + *(int *)(v21 + 20), (uint64_t)v14, (uint64_t *)&unk_100524ED0);
  uint64_t v22 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10000FB74((uint64_t)v18, (uint64_t)v9, (uint64_t *)&unk_100524ED0);
  sub_10000FB74((uint64_t)v14, v22, (uint64_t *)&unk_100524ED0);
  unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v9, 1, v4) == 1)
  {
    sub_10000FBD8((uint64_t)v14, (uint64_t *)&unk_100524ED0);
    sub_10000FBD8((uint64_t)v18, (uint64_t *)&unk_100524ED0);
    int v24 = v23(v22, 1, v4);
    if (v24 == 1) {
      uint64_t v25 = (uint64_t *)&unk_100524ED0;
    }
    else {
      uint64_t v25 = &qword_100521670;
    }
    if (v24 == 1) {
      char v26 = -1;
    }
    else {
      char v26 = 0;
    }
  }
  else
  {
    uint64_t v27 = v32;
    sub_10000FB74((uint64_t)v9, v32, (uint64_t *)&unk_100524ED0);
    if (v23(v22, 1, v4) == 1)
    {
      sub_10000FBD8((uint64_t)v14, (uint64_t *)&unk_100524ED0);
      sub_10000FBD8((uint64_t)v18, (uint64_t *)&unk_100524ED0);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v27, v4);
      char v26 = 0;
      uint64_t v25 = &qword_100521670;
    }
    else
    {
      uint64_t v28 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v31, v22, v4);
      sub_1002AB13C(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
      v29(v28, v4);
      uint64_t v25 = (uint64_t *)&unk_100524ED0;
      sub_10000FBD8((uint64_t)v14, (uint64_t *)&unk_100524ED0);
      sub_10000FBD8((uint64_t)v18, (uint64_t *)&unk_100524ED0);
      v29((char *)v27, v4);
    }
  }
  sub_10000FBD8((uint64_t)v9, v25);
  return v26 & 1;
}

uint64_t sub_100272448(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051A320);
  uint64_t v9 = *(int *)(v8 + 48);
  sub_1002ADE24(a2, (uint64_t)v7, type metadata accessor for TextDetectorResult);
  *(void *)&v7[v9] = a3;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  uint64_t v10 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 0, 1, v10);
  id v11 = a3;
  return sub_1002297C8((uint64_t)v7);
}

uint64_t sub_1002725AC()
{
  uint64_t v0 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v0 - 8);
  unint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)unint64_t v2 = xmmword_10044A0D0;
  *((_OWORD *)v2 + 1) = xmmword_10044DAC0;
  *((void *)v2 + 4) = 0x800000010042A030;
  *(_OWORD *)(v2 + 40) = xmmword_10044A0D0;
  uint64_t v3 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  return sub_1002297C8((uint64_t)v2);
}

uint64_t sub_1002726B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  long long v14 = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = v5 & 1;
  uint64_t v9 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v9 - 8);
  id v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v11 = v3;
  *((void *)v11 + 1) = v4;
  *((void *)v11 + 2) = v8;
  *(_OWORD *)(v11 + 24) = v14;
  *((void *)v11 + 5) = v6;
  *((void *)v11 + 6) = v7;
  uint64_t v12 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  sub_1002A6AE4(a2);
  return sub_1002297C8((uint64_t)v11);
}

uint64_t sub_1002727DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 40) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002B48C4, v6, v5);
}

uint64_t sub_100272874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  sub_10000F214(&qword_10051A308);
  v5[10] = swift_task_alloc();
  v5[11] = type metadata accessor for StreamingBarcodeDetectorResult(0);
  v5[12] = swift_task_alloc();
  v5[13] = type metadata accessor for CVDetection();
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = type metadata accessor for MainActor();
  v5[17] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[18] = v7;
  v5[19] = v6;
  return _swift_task_switch(sub_1002729B0, v7, v6);
}

uint64_t sub_1002729B0()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  sub_10019D408(v1);
  sub_1002ADE24(v1, v2, (uint64_t (*)(void))type metadata accessor for CVDetection);
  unsigned int v3 = swift_getEnumCaseMultiPayload() - 3;
  uint64_t v4 = *(void *)(v0 + 112);
  if (v3 >= 2)
  {
    sub_1002ADE8C(v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  sub_1002AA830(v4, v5, type metadata accessor for StreamingBarcodeDetectorResult);
  unint64_t v7 = *(void *)(v5 + *(int *)(v6 + 40));
  swift_retain();
  sub_1002ADE8C(v5, type metadata accessor for StreamingBarcodeDetectorResult);
  if (v7 >> 62 != 1)
  {
    swift_release();
LABEL_17:
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v21 = *(void **)(v0 + 80);
    swift_release();
    *uint64_t v21 = 0xD000000000000011;
    v21[1] = 0x800000010042A490;
    uint64_t v22 = type metadata accessor for ResultLookupState();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 0, 1, v22);
    sub_1002297C8((uint64_t)v21);
    unint64_t v23 = (char *)(v20 + *(int *)(type metadata accessor for ContentView() + 156));
    char v24 = *v23;
    uint64_t v25 = *((void *)v23 + 1);
    *(unsigned char *)(v0 + 16) = v24;
    *(void *)(v0 + 24) = v25;
    *(unsigned char *)(v0 + 184) = 0;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.setter();
    sub_1002ADE8C(v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
    goto LABEL_18;
  }
  uint64_t v8 = *(void **)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
  *(void *)(v0 + 160) = v8;
  id v9 = v8;
  swift_release();
  if (!v8) {
    goto LABEL_17;
  }
  id v10 = v9;
  unint64_t v11 = (unint64_t)[v10 payloadDataType];
  BOOL v12 = v11 > 0xE || ((1 << v11) & 0x6742) == 0;
  if (v12
    || (uint64_t v13 = *(void *)(v0 + 72),
        uint64_t v14 = *(void *)(v13 + *(int *)(type metadata accessor for ContentView() + 240)),
        swift_getKeyPath(),
        *(void *)(v0 + 56) = v14,
        sub_1002AB13C(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility),
        ObservationRegistrar.access<A, B>(_:keyPath:)(),
        swift_release(),
        (*(unsigned char *)(v14 + 24) & 1) != 0))
  {
    if (sub_1001948B0())
    {
      uint64_t v15 = *(void *)(v0 + 72);
      double v16 = (uint64_t *)(v15 + *(int *)(type metadata accessor for ContentView() + 44));
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      *(void *)(v0 + 32) = v18;
      *(void *)(v0 + 40) = v17;
      sub_10000F214(&qword_100525F40);
      State.wrappedValue.getter();
      sub_10041513C(1, 6.0);
      swift_release();
    }
    *(void *)(v0 + 168) = 0;
    return _swift_task_switch(sub_100272E24, 0, 0);
  }
  uint64_t v27 = *(void *)(v0 + 120);
  uint64_t v28 = *(void *)(v0 + 72);
  swift_release();
  unint64_t v29 = (void *)swift_task_alloc();
  v29[2] = v28;
  void v29[3] = v27;
  v29[4] = v10;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();

  swift_task_dealloc();
  sub_1002ADE8C(v27, (uint64_t (*)(void))type metadata accessor for CVDetection);

LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t sub_100272E24()
{
  *(void *)(v0 + 176) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100272EB0, v2, v1);
}

uint64_t sub_100272EB0()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[9];
  swift_release();
  uint64_t v4 = (void *)swift_task_alloc();
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[19];
  return _swift_task_switch(sub_100272F84, v5, v6);
}

uint64_t sub_100272F84()
{
  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = v0[15];
  swift_release();

  sub_1002ADE8C(v2, (uint64_t (*)(void))type metadata accessor for CVDetection);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100273040(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v8 - 8);
  id v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v11 = (char *)(a1 + *(int *)(type metadata accessor for ContentView() + 156));
  char v12 = *v11;
  uint64_t v13 = *((void *)v11 + 1);
  v21[0] = v12;
  uint64_t v22 = v13;
  char v23 = 0;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  uint64_t v14 = sub_10000F214(&qword_10051A328);
  uint64_t v15 = *(int *)(v14 + 48);
  double v16 = (uint64_t *)&v10[*(int *)(v14 + 64)];
  sub_1002ADE24(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
  *(void *)&v10[v15] = a3;
  id v17 = a3;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  *double v16 = String.init(localized:table:bundle:locale:comment:)();
  v16[1] = v18;
  uint64_t v19 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 0, 1, v19);
  return sub_1002297C8((uint64_t)v10);
}

uint64_t sub_100273298(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = (char *)(a1 + *(int *)(type metadata accessor for ContentView() + 156));
  char v10 = *v9;
  uint64_t v11 = *((void *)v9 + 1);
  v18[0] = v10;
  uint64_t v19 = v11;
  char v20 = 0;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  uint64_t v12 = sub_10000F214(&qword_10051A328);
  uint64_t v13 = *(int *)(v12 + 48);
  uint64_t v14 = &v8[*(int *)(v12 + 64)];
  sub_1002ADE24(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
  *(void *)&v8[v13] = a3;
  *uint64_t v14 = 0;
  v14[1] = 0xE000000000000000;
  uint64_t v15 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v8, 0, 1, v15);
  id v16 = a3;
  return sub_1002297C8((uint64_t)v8);
}

uint64_t sub_100273418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  v5[7] = type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[9] = v8;
  v5[10] = v7;
  return _swift_task_switch(sub_100273510, v8, v7);
}

uint64_t sub_100273510()
{
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1005282F0 + dword_1005282F0);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002735EC;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_1002735EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v5 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = *(void *)(v2 + 72);
    uint64_t v7 = *(void *)(v2 + 80);
    uint64_t v8 = sub_100273930;
  }
  else
  {
    uint64_t v8 = sub_10027376C;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  return _swift_task_switch(v8, v6, v7);
}

uint64_t sub_10027376C()
{
  *(void *)(v0 + 104) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002737F8, v2, v1);
}

uint64_t sub_1002737F8()
{
  long long v4 = *(_OWORD *)(v0 + 16);
  swift_release();
  *(_OWORD *)(swift_task_alloc() + 16) = v4;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  return _swift_task_switch(sub_1002738C0, v1, v2);
}

uint64_t sub_1002738C0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100273930()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002739A0(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for Locale();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  *(void *)uint64_t v7 = String.init(localized:table:bundle:locale:comment:)();
  *((void *)v7 + 1) = v8;
  *((_OWORD *)v7 + 1) = xmmword_10044A0D0;
  *((_OWORD *)v7 + 2) = xmmword_10044A0D0;
  *((void *)v7 + 6) = a2;
  *((void *)v7 + 7) = 0xD000000000000077;
  *((void *)v7 + 8) = 0x800000010042A540;
  uint64_t v9 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 0, 1, v9);
  id v10 = a2;
  return sub_1002297C8((uint64_t)v7);
}

uint64_t sub_100273B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v70 = a3;
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v7 = type metadata accessor for ResultLookupState();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v61 = (uint64_t *)&v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_10000F214(&qword_100526390);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)&v56[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v14 - 8);
  uint64_t v65 = &v56[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  unint64_t v68 = (uint64_t *)&v56[-v17];
  __chkstk_darwin(v18);
  unint64_t v62 = &v56[-v19];
  __chkstk_darwin(v20);
  uint64_t v22 = &v56[-v21];
  __chkstk_darwin(v23);
  uint64_t v25 = &v56[-v24];
  id v26 = [self mainScreen];
  [v26 bounds];
  double v28 = v27;
  double v30 = v29;

  BOOL v58 = sub_1003780E4(a1, v28, v30, 0.0);
  uint64_t v71 = v31;
  uint64_t v32 = *(int *)(type metadata accessor for ContentView() + 48);
  uint64_t v69 = a2;
  uint64_t v33 = a2 + v32;
  uint64_t v66 = sub_10000F214(&qword_100525F58);
  State.wrappedValue.getter();
  *((void *)v22 + 8) = 0;
  *((_OWORD *)v22 + 2) = 0u;
  *((_OWORD *)v22 + 3) = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  swift_storeEnumTagMultiPayload();
  id v63 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56);
  v63(v22, 0, 1, v7);
  uint64_t v34 = (uint64_t)v13 + *(int *)(v11 + 56);
  sub_10000FB74((uint64_t)v25, (uint64_t)v13, &qword_10051A308);
  sub_10000FB74((uint64_t)v22, v34, &qword_10051A308);
  uint64_t v35 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
  int v36 = v35(v13, 1, v7);
  uint64_t v64 = v8 + 56;
  uint64_t v67 = v33;
  if (v36 == 1)
  {
    sub_10000FBD8((uint64_t)v22, &qword_10051A308);
    sub_10000FBD8((uint64_t)v25, &qword_10051A308);
    int v37 = v35((uint64_t *)v34, 1, v7);
    uint64_t v38 = v70;
    if (v37 == 1)
    {
      uint64_t v39 = sub_10000FBD8((uint64_t)v13, &qword_10051A308);
      uint64_t v40 = v71;
LABEL_13:
      __chkstk_darwin(v39);
      uint64_t v52 = v69;
      *(void *)&v56[-48] = v38;
      *(void *)&v56[-40] = v52;
      *(void *)&v56[-32] = v58;
      *(void *)&v56[-24] = v40;
      uint64_t v54 = v59;
      uint64_t v55 = v60;
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    goto LABEL_6;
  }
  uint64_t v41 = v61;
  uint64_t v42 = v62;
  sub_10000FB74((uint64_t)v13, (uint64_t)v62, &qword_10051A308);
  if (v35((uint64_t *)v34, 1, v7) == 1)
  {
    sub_10000FBD8((uint64_t)v22, &qword_10051A308);
    sub_10000FBD8((uint64_t)v25, &qword_10051A308);
    sub_1002ADE8C((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
LABEL_6:
    sub_10000FBD8((uint64_t)v13, &qword_100526390);
    goto LABEL_7;
  }
  sub_1002AA830(v34, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  int v57 = sub_1003192A0((uint64_t)v42, v41);
  sub_1002ADE8C((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  sub_10000FBD8((uint64_t)v22, &qword_10051A308);
  sub_10000FBD8((uint64_t)v25, &qword_10051A308);
  sub_1002ADE8C((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  uint64_t v39 = sub_10000FBD8((uint64_t)v13, &qword_10051A308);
  uint64_t v38 = v70;
  uint64_t v40 = v71;
  if (v57) {
    goto LABEL_13;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_10051F3B0);
  Task.cancel()();
  uint64_t v43 = v68;
  State.wrappedValue.getter();
  if (v35(v43, 1, v7) == 1)
  {
    sub_10000FBD8((uint64_t)v43, &qword_10051A308);
  }
  else if (swift_getEnumCaseMultiPayload() == 7)
  {
    uint64_t v44 = v43[1];
    if (v44)
    {
      uint64_t v45 = v43[5];
      uint64_t v46 = (void *)v43[6];
      uint64_t v47 = v43[3];
      uint64_t v48 = v43[4];
      uint64_t v49 = v43[2];
      uint64_t v50 = *v43;
      uint64_t v54 = v43[8];
      return sub_10004FE7C(v50, v44, v49, v47, v48, v45, v46);
    }
  }
  else
  {
    sub_1002ADE8C((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  }
  uint64_t v53 = (uint64_t)v65;
  *uint64_t v65 = 0xD000000000000040;
  *(void *)(v53 + 8) = 0x800000010042A4F0;
  swift_storeEnumTagMultiPayload();
  v63((unsigned char *)v53, 0, 1, v7);
  return sub_1002297C8(v53);
}

uint64_t sub_1002741FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v34 = a2;
  id v32 = a6;
  uint64_t v33 = a5;
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_10051F3B0);
  Task.cancel()();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v13 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v15 = v14;
  id v16 = [objc_allocWithZone((Class)NLLanguageRecognizer) init];
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  NSString v19 = String._bridgeToObjectiveC()();
  [v16 processString:v19];

  id v20 = [v16 dominantLanguage];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;
  }
  else
  {

    unint64_t v24 = 0xE200000000000000;
    uint64_t v22 = 28261;
  }
  uint64_t v25 = v33;
  id v26 = v33;
  if (!v33)
  {
    id v27 = v32;
    id v28 = v32;
    id v26 = v27;
  }
  *(void *)uint64_t v12 = v13;
  *((void *)v12 + 1) = v15;
  *((void *)v12 + 2) = v17;
  *((void *)v12 + 3) = v18;
  *((void *)v12 + 4) = v22;
  *((void *)v12 + 5) = v24;
  *((void *)v12 + 6) = v26;
  *(_OWORD *)(v12 + 56) = xmmword_10044A0D0;
  uint64_t v29 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v12, 0, 1, v29);
  id v30 = v25;
  swift_bridgeObjectRetain();
  return sub_1002297C8((uint64_t)v12);
}

uint64_t sub_1002744D8()
{
  uint64_t v0 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000F214(&qword_10051A428);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 0, 1, v4);
  return sub_1002297C8((uint64_t)v2);
}

uint64_t sub_1002745F4()
{
  return swift_release();
}

uint64_t sub_100274654()
{
  uint64_t v0 = type metadata accessor for Locale();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000F214(&qword_10051A428);
  uint64_t v6 = (void *)((char *)v4 + *(int *)(v5 + 48));
  uint64_t v7 = (void *)((char *)v4 + *(int *)(v5 + 64));
  uint64_t v8 = (int *)type metadata accessor for EventLookupItem(0);
  Date.init()();
  Date.init()();
  *uint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  uint64_t v9 = (void *)((char *)v4 + v8[7]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = (void *)((char *)v4 + v8[8]);
  *uint64_t v10 = 0;
  v10[1] = 0;
  *((unsigned char *)v4 + v8[9]) = 0;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  *uint64_t v6 = String.init(localized:table:bundle:locale:comment:)();
  v6[1] = v11;
  *uint64_t v7 = 0;
  v7[1] = 0xE000000000000000;
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  uint64_t v12 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 0, 1, v12);
  return sub_1002297C8((uint64_t)v4);
}

uint64_t sub_1002748C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051A428);
  uint64_t v7 = &v5[*(int *)(v6 + 48)];
  uint64_t v8 = &v5[*(int *)(v6 + 64)];
  sub_1002ADE24(a2, (uint64_t)v5, type metadata accessor for EventLookupItem);
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0xE000000000000000;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0xE000000000000000;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  uint64_t v9 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 0, 1, v9);
  return sub_1002297C8((uint64_t)v5);
}

uint64_t sub_100274A38()
{
  uint64_t v0 = type metadata accessor for Locale();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000F214(&qword_10051A428);
  uint64_t v6 = (void *)((char *)v4 + *(int *)(v5 + 48));
  uint64_t v7 = (void *)((char *)v4 + *(int *)(v5 + 64));
  uint64_t v8 = (int *)type metadata accessor for EventLookupItem(0);
  Date.init()();
  Date.init()();
  *uint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  uint64_t v9 = (void *)((char *)v4 + v8[7]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = (void *)((char *)v4 + v8[8]);
  *uint64_t v10 = 0;
  v10[1] = 0;
  *((unsigned char *)v4 + v8[9]) = 0;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  *uint64_t v6 = String.init(localized:table:bundle:locale:comment:)();
  v6[1] = v11;
  swift_getErrorValue();
  *uint64_t v7 = Error.localizedDescription.getter();
  v7[1] = v12;
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  uint64_t v13 = type metadata accessor for ResultLookupState();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 0, 1, v13);
  return sub_1002297C8((uint64_t)v4);
}

uint64_t sub_100274CD0(uint64_t a1)
{
  return State.wrappedValue.setter();
}

uint64_t sub_100274D38(void *a1)
{
  type metadata accessor for ContentView();
  id v2 = a1;
  sub_10000F214(&qword_1005264D0);
  return State.wrappedValue.setter();
}

uint64_t sub_100274D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[25] = a4;
  v4[26] = type metadata accessor for LoggingSignposter(0);
  v4[27] = swift_task_alloc();
  v4[28] = type metadata accessor for MainActor();
  v4[29] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[30] = v6;
  v4[31] = v5;
  return _swift_task_switch(sub_100274E68, v6, v5);
}

uint64_t sub_100274E68()
{
  if (qword_100517F30 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[25];
  uint64_t v3 = sub_10000F378(v0[26], (uint64_t)qword_10055E3B0);
  sub_1002ADE24(v3, v1, type metadata accessor for LoggingSignposter);
  sub_10018B270((unint64_t)"getQualityFrame", 15, 2u, 1, v0 + 2);
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(type metadata accessor for ContentView() + 44));
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  v0[22] = v6;
  v0[23] = v5;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[32] = v0[24];
  uint64_t v7 = (void *)swift_task_alloc();
  v0[33] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100274FD4;
  return sub_100417A1C((uint64_t)(v0 + 12));
}

uint64_t sub_100274FD4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v2 + 240);
    uint64_t v4 = *(void *)(v2 + 248);
    uint64_t v5 = sub_100275110;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 240);
    uint64_t v4 = *(void *)(v2 + 248);
    uint64_t v5 = sub_100275284;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100275110()
{
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  swift_release();
  sub_10000FBD8(v0 + 96, &qword_100518A80);
  if (qword_100517E60 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000F378(v1, (uint64_t)qword_10055E238);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 216);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "activateLiveTextImageAnalysis failed to get frame", v6, 2u);
    swift_slowDealloc();
  }

  sub_1002ADE8C(v5, type metadata accessor for LoggingSignposter);
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100275284()
{
  sub_1000321A8((long long *)(v0 + 96), v0 + 56);
  sub_10000F3B0((void *)(v0 + 16), *(void *)(v0 + 40));
  sub_10018BBE8();
  sub_10018B270((unint64_t)"performRecognizeDocumentsRequest", 32, 2u, 1, (uint64_t *)(v0 + 136));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10027536C;
  return sub_100293DB4(v0 + 56);
}

uint64_t sub_10027536C(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 288) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 248);
  uint64_t v4 = *(void *)(v2 + 240);
  return _swift_task_switch(sub_100275494, v4, v3);
}

uint64_t sub_100275494()
{
  sub_10000F3B0((void *)(v0 + 136), *(void *)(v0 + 160));
  sub_10018BBE8();
  return _swift_task_switch(sub_100275508, 0, 0);
}

uint64_t sub_100275508()
{
  *(void *)(v0 + 296) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100275594, v2, v1);
}

uint64_t sub_100275594()
{
  uint64_t v1 = (void *)v0[36];
  uint64_t v2 = v0[25];
  swift_release();
  sub_1002756EC(v1, v2, (uint64_t)(v0 + 7));
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[31];
  return _swift_task_switch(sub_100275624, v3, v4);
}

uint64_t sub_100275624()
{
  uint64_t v1 = (void *)v0[36];
  uint64_t v2 = v0[27];
  swift_release();

  sub_1002ADE8C(v2, type metadata accessor for LoggingSignposter);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 7));
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 17));
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1002756EC(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    sub_10000F578(a3, (uint64_t)v7 + 8);
    *(void *)&v7[0] = a1;
    type metadata accessor for ContentView();
    sub_10000FB74((uint64_t)v7, (uint64_t)v6, &qword_100518A70);
    id v4 = a1;
  }
  else
  {
    type metadata accessor for ContentView();
    memset(v7, 0, sizeof(v7));
    sub_10000FB74((uint64_t)v7, (uint64_t)v6, &qword_100518A70);
  }
  sub_10000F214(&qword_100526328);
  State.wrappedValue.setter();
  return sub_10000FBD8((uint64_t)v7, &qword_100518A70);
}

uint64_t sub_1002757E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[35] = a4;
  v4[36] = type metadata accessor for LoggingSignposter(0);
  v4[37] = swift_task_alloc();
  v4[38] = type metadata accessor for MainActor();
  v4[39] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[40] = v6;
  v4[41] = v5;
  return _swift_task_switch(sub_1002758B0, v6, v5);
}

uint64_t sub_1002758B0()
{
  if (qword_100517F40 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[35];
  uint64_t v3 = sub_10000F378(v0[36], (uint64_t)qword_10055E3E0);
  sub_1002ADE24(v3, v1, type metadata accessor for LoggingSignposter);
  sub_10018B270((unint64_t)"Retrieving quality frame for capture effects", 44, 2u, 1, v0 + 10);
  uint64_t v4 = type metadata accessor for ContentView();
  v0[42] = v4;
  uint64_t v5 = (uint64_t *)(v2 + *(int *)(v4 + 44));
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v0[32] = v7;
  v0[33] = v6;
  sub_10000F214(&qword_100525F40);
  State.wrappedValue.getter();
  v0[43] = v0[34];
  uint64_t v8 = (void *)swift_task_alloc();
  v0[44] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100275A20;
  return sub_100417A1C((uint64_t)(v0 + 15));
}

uint64_t sub_100275A20()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 328);
  uint64_t v4 = *(void *)(v2 + 320);
  if (v0) {
    uint64_t v5 = sub_10027619C;
  }
  else {
    uint64_t v5 = sub_100275B74;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100275B74()
{
  sub_10000F3B0((void *)(v0 + 80), *(void *)(v0 + 104));
  sub_10018BBE8();
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  sub_10000F3B0((void *)(v0 + 120), v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
  uint64_t v3 = sub_1001C2994(*(double *)(v0 + 16));
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  sub_10000F3B0((void *)(v0 + 120), v4);
  uint64_t v6 = sub_1003992A4(v4, v5);
  *(void *)(v0 + 368) = v6;
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    id v8 = sub_100299E14(v6, v3);
    *(void *)(v0 + 376) = v8;
    if (v8)
    {
      sub_10018B270((unint64_t)"Getting depth image for capture effects", 39, 2u, 1, (uint64_t *)(v0 + 160));
      uint64_t v9 = *(void *)(v0 + 144);
      uint64_t v10 = *(void *)(v0 + 152);
      sub_10000F3B0((void *)(v0 + 120), v9);
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 384) = v11;
      *uint64_t v11 = v0;
      v11[1] = sub_100275DA0;
      return sub_1000ABD28(v9, v10);
    }
    sub_1002ADE8C(*(void *)(v0 + 296), type metadata accessor for LoggingSignposter);
  }
  else
  {
    sub_1002ADE8C(*(void *)(v0 + 296), type metadata accessor for LoggingSignposter);
  }
  swift_release();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 120);
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 80);
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100275DA0(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 392) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 328);
  uint64_t v4 = *(void *)(v2 + 320);
  return _swift_task_switch(sub_100275EC8, v4, v3);
}

uint64_t sub_100275EC8()
{
  uint64_t v1 = *(void **)(v0 + 392);
  uint64_t v2 = *(void **)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 280);
  sub_10000F3B0((void *)(v0 + 160), *(void *)(v0 + 184));
  sub_10018BBE8();
  uint64_t v5 = v4 + *(int *)(v3 + 100);
  char v6 = *(unsigned char *)(v5 + 16);
  uint64_t v7 = *(void *)(v5 + 24);
  *(_OWORD *)(v0 + 200) = *(_OWORD *)v5;
  *(unsigned char *)(v0 + 216) = v6;
  *(void *)(v0 + 224) = v7;
  *(void *)(v0 + 232) = v2;
  *(void *)(v0 + 240) = v1;
  *(unsigned char *)(v0 + 248) = 1;
  id v8 = v2;
  id v9 = v1;
  sub_10000F214(&qword_100526428);
  State.wrappedValue.setter();
  return _swift_task_switch(sub_100275FB4, 0, 0);
}

uint64_t sub_100275FB4()
{
  *(void *)(v0 + 400) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100276040, v2, v1);
}

uint64_t sub_100276040()
{
  uint64_t v1 = v0[35];
  swift_release();
  sub_100276234(v1);
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[41];
  return _swift_task_switch(sub_1002760BC, v2, v3);
}

uint64_t sub_1002760BC()
{
  uint64_t v1 = (void *)v0[49];
  uint64_t v3 = (void *)v0[46];
  uint64_t v2 = (void *)v0[47];
  uint64_t v4 = v0[37];
  swift_release();

  sub_1002ADE8C(v4, type metadata accessor for LoggingSignposter);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 20));
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 15));
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 10));
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10027619C()
{
  uint64_t v1 = *(void *)(v0 + 296);
  swift_release();
  sub_1002ADE8C(v1, type metadata accessor for LoggingSignposter);
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 80);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100276234(uint64_t a1)
{
  uint64_t v57 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v55 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  uint64_t v59 = v4;
  __chkstk_darwin(v3);
  char v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ContentView();
  uint64_t v8 = v7 - 8;
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v51 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v44 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v16 = (char *)&v38 - v15;
  uint64_t v17 = a1 + *(int *)(v8 + 168);
  uint64_t v53 = a1;
  char v18 = *(unsigned char *)v17;
  uint64_t v19 = *(void *)(v17 + 8);
  LOBYTE(aBlock) = v18;
  uint64_t v63 = v19;
  LOBYTE(v61) = 2;
  sub_10000F214(&qword_1005262F8);
  State.wrappedValue.setter();
  uint64_t v54 = sub_10000F734(0, (unint64_t *)&qword_10051A950);
  uint64_t v43 = (void (*)(void, void))static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  id v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v45 = v11 + 8;
  unint64_t v56 = v20;
  v20(v13, v10);
  uint64_t v52 = type metadata accessor for ContentView;
  uint64_t v46 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002ADE24(a1, v46, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v21 = *(unsigned __int8 *)(v51 + 80);
  uint64_t v50 = ((v21 + 16) & ~v21) + v9;
  uint64_t v51 = (v21 + 16) & ~v21;
  uint64_t v22 = v51;
  uint64_t v49 = v21 | 7;
  uint64_t v23 = swift_allocObject();
  uint64_t v48 = type metadata accessor for ContentView;
  sub_1002AA830((uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v66 = sub_100299E64;
  uint64_t v67 = v23;
  aBlock = _NSConcreteStackBlock;
  uint64_t v63 = 1107296256;
  uint64_t v47 = &v64;
  uint64_t v64 = sub_1002EDB98;
  uint64_t v65 = &unk_1004F1A30;
  unint64_t v24 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v61 = _swiftEmptyArrayStorage;
  uint64_t v41 = sub_1002AB13C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v40 = sub_10000F214(&qword_10051A960);
  uint64_t v42 = sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  uint64_t v25 = v55;
  uint64_t v26 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v27 = v43;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v24);

  id v28 = *(void (**)(void, void))(v60 + 8);
  v60 += 8;
  uint64_t v43 = v28;
  v28(v25, v26);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v59 + 8);
  v59 += 8;
  uint64_t v39 = v29;
  v29(v6, v58);
  uint64_t v30 = v44;
  uint64_t v31 = v56;
  v56(v16, v44);
  swift_release();
  id v32 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  v31(v13, v30);
  uint64_t v33 = v46;
  sub_1002ADE24(v53, v46, (uint64_t (*)(void))v52);
  uint64_t v34 = swift_allocObject();
  sub_1002AA830(v33, v34 + v51, (uint64_t (*)(void))v48);
  uint64_t v66 = sub_100299E80;
  uint64_t v67 = v34;
  aBlock = _NSConcreteStackBlock;
  uint64_t v63 = 1107296256;
  uint64_t v64 = sub_1002EDB98;
  uint64_t v65 = &unk_1004F1A80;
  uint64_t v35 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v61 = _swiftEmptyArrayStorage;
  uint64_t v36 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v35);

  v43(v25, v36);
  v39(v6, v58);
  v56(v16, v30);
  return swift_release();
}

uint64_t sub_10027693C()
{
  return static Published.subscript.setter();
}

uint64_t sub_1002769CC()
{
  return AccessibilityFocusState.wrappedValue.setter();
}

uint64_t sub_100276A28()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100276A98(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v111 = a2;
  uint64_t v5 = type metadata accessor for ContentView();
  uint64_t v118 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v119 = v6;
  uint64_t v113 = (uint64_t)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v114 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for URL.DirectoryHint();
  uint64_t v9 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  Swift::Int v130 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v141 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  BOOL v129 = (char *)&v111 - v14;
  __chkstk_darwin(v15);
  uint64_t v139 = (char *)&v111 - v16;
  __chkstk_darwin(v17);
  id v132 = (char *)&v111 - v18;
  uint64_t v19 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v19 - 8);
  uint64_t v133 = (char *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000F214(&qword_10051DCC0);
  uint64_t v22 = v21 - 8;
  __chkstk_darwin(v21);
  unint64_t v24 = (uint64_t *)((char *)&v111 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v112 = a3;
  if (a3) {
    unint64_t v25 = 0xD000000000000029;
  }
  else {
    unint64_t v25 = 0xD000000000000027;
  }
  if (a3) {
    unint64_t v26 = 0x8000000100429E20;
  }
  else {
    unint64_t v26 = 0x8000000100429D90;
  }
  if (a3) {
    uint64_t v27 = 1724432;
  }
  else {
    uint64_t v27 = 1700176;
  }
  type metadata accessor for TapToRadarDraft();
  uint64_t v116 = swift_allocBox();
  uint64_t v29 = v28;
  v145[0] = v27;
  v145[1] = v25;
  v145[2] = v26;
  long long v146 = xmmword_10044DAD0;
  uint64_t v30 = (char *)v24 + *(int *)(v22 + 44);
  uint64_t v31 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  *unint64_t v24 = 0x7349664F656D6954;
  v24[1] = 0xEB00000000657573;
  v110.n128_u64[0] = 0xD000000000000012;
  v110.n128_u64[1] = 0x8000000100429DE0;
  *((void *)&v109 + 1) = 0x8000000100429DC0;
  *(void *)&long long v109 = 0xD000000000000018;
  *(void *)&long long v108 = 0x7470697263736544;
  *((void *)&v108 + 1) = 0xEB000000006E6F69;
  *(void *)&long long v107 = 0x656C746954;
  *((void *)&v107 + 1) = 0xE500000000000000;
  sub_1000C7650(0x4449656C646E7542, 0xE800000000000000, 0, 0, (uint64_t)v145, 0x6966697373616C43, 0xEE006E6F69746163, 10, v29, 0x6375646F72706552, 0xEF7974696C696269, 6, v107, 0, v108, 0, 0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v24,
    (uint64_t)_swiftEmptyArrayStorage,
    (uint64_t)_swiftEmptyArrayStorage,
    (uint64_t)_swiftEmptyArrayStorage,
    0,
    (uint64_t)_swiftEmptyArrayStorage,
    (uint64_t)_swiftEmptyArrayStorage,
    (uint64_t)_swiftEmptyArrayStorage,
    0,
    0,
    0,
    (uint64_t)_swiftEmptyArrayStorage,
    v109,
    0,
    0,
    v110,
    0,
    0);
  uint64_t v134 = swift_allocObject();
  *(void *)(v134 + 16) = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(a1 + 16);
  uint64_t v115 = a1;
  if (v32)
  {
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v33 = v11 + 16;
    uint64_t v34 = v35;
    unint64_t v123 = (*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64);
    uint64_t v36 = a1 + v123;
    uint64_t v122 = *(void *)(v33 + 56);
    BOOL v128 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 40);
    uint64_t v127 = (unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 32);
    uint64_t v140 = (void (**)(char *, char *, uint64_t))(v33 + 16);
    unsigned int v126 = enum case for URL.DirectoryHint.inferFromPath(_:);
    uint64_t v125 = (void (**)(char *, void, uint64_t))(v9 + 104);
    uint64_t v124 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v142 = (char **)(v33 - 8);
    swift_bridgeObjectRetain();
    int v37 = &selRef_headingAvailable;
    uint64_t v38 = v139;
    uint64_t v39 = v135;
    uint64_t v40 = v132;
    uint64_t v121 = v35;
    while (1)
    {
      uint64_t v41 = v133;
      v34(v133, v36, v39);
      uint64_t v42 = *v128;
      (*v128)(v41, 0, 1, v39);
      if ((*v127)(v41, 1, v39) == 1) {
        goto LABEL_30;
      }
      uint64_t v120 = v42;
      uint64_t v137 = v36;
      uint64_t v138 = v32;
      uint64_t v136 = *v140;
      v136(v40, v41, v39);
      uint64_t v43 = v37;
      uint64_t v44 = v38;
      uint64_t v45 = v129;
      static URL.temporaryDirectory.getter();
      v144[0] = (id)95;
      v144[1] = (id)0xE100000000000000;
      v46._countAndFlagsBits = URL.lastPathComponent.getter();
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      uint64_t v47 = v130;
      uint64_t v48 = v131;
      (*v125)(v130, v126, v131);
      sub_1000317A0();
      URL.appending<A>(path:directoryHint:)();
      (*v124)(v47, v48);
      swift_bridgeObjectRelease();
      uint64_t v49 = v45;
      uint64_t v50 = v44;
      uint64_t v139 = *v142;
      ((void (*)(char *, uint64_t))v139)(v49, v39);
      uint64_t v51 = self;
      id v52 = [v51 v43[44] v111];
      URL.path(percentEncoded:)(1);
      NSString v53 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned __int8 v54 = [v52 fileExistsAtPath:v53];

      if (v54) {
        break;
      }
      int v37 = v43;
      id v55 = [v51 v43[44]];
      URL._bridgeToObjectiveC()(v56);
      uint64_t v58 = v57;
      URL._bridgeToObjectiveC()(v59);
      uint64_t v61 = v60;
      v144[0] = 0;
      unsigned __int8 v62 = [v55 copyItemAtURL:v58 toURL:v60 error:v144];

      id v63 = v144[0];
      if ((v62 & 1) == 0)
      {
        id v80 = v144[0];
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        uint64_t v39 = v135;
        goto LABEL_24;
      }
      uint64_t v39 = v135;
      uint64_t v34 = v121;
      v121(v141, (uint64_t)v50, v135);
      uint64_t v64 = v134;
      unint64_t v65 = *(void *)(v134 + 16);
      id v66 = v63;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v64 + 16) = v65;
      uint64_t v38 = v50;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v65 = sub_10032A104(0, *(void *)(v65 + 16) + 1, 1, v65);
        *(void *)(v134 + 16) = v65;
      }
      uint64_t v68 = v137;
      unint64_t v70 = *(void *)(v65 + 16);
      unint64_t v69 = *(void *)(v65 + 24);
      if (v70 >= v69 >> 1)
      {
        unint64_t v65 = sub_10032A104(v69 > 1, v70 + 1, 1, v65);
        *(void *)(v134 + 16) = v65;
      }
      *(void *)(v65 + 16) = v70 + 1;
      unint64_t v71 = v65 + v123;
      uint64_t v72 = v122;
      v136((char *)(v71 + v70 * v122), v141, v39);
      uint64_t v73 = (void (*)(char *, uint64_t))v139;
      ((void (*)(char *, uint64_t))v139)(v38, v39);
      uint64_t v40 = v132;
      v73(v132, v39);
      uint64_t v36 = v68 + v72;
      uint64_t v32 = v138 - 1;
      if (v138 == 1)
      {
        v120(v133, 1, 1, v39);
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    sub_10000F214((uint64_t *)&unk_10051FB50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v76;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD00000000000001FLL;
    *(void *)(inited + 56) = 0x8000000100429E00;
    sub_10031BC4C(inited);
    id v77 = objc_allocWithZone((Class)NSError);
    NSString v78 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v77 initWithDomain:v78 code:1 userInfo:isa];

LABEL_24:
    swift_willThrow();
    uint64_t v81 = (void (*)(char *, uint64_t))v139;
    ((void (*)(char *, uint64_t))v139)(v50, v39);
    v81(v132, v39);
    swift_release();
    swift_release();
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    sub_10000F378(v82, (uint64_t)qword_10055E2E0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      v144[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 136315138;
      swift_getErrorValue();
      uint64_t v86 = Error.localizedDescription.getter();
      uint64_t v143 = sub_1003806B0(v86, v87, (uint64_t *)v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Error executing TTR open: %s", v85, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v88 = (uint64_t)v114;
    uint64_t v89 = v113;
    __chkstk_darwin(v90);
    uint64_t v91 = v117;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
    uint64_t v92 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v88, 1, 1, v92);
    sub_1002ADE24(v91, v89, (uint64_t (*)(void))type metadata accessor for ContentView);
    type metadata accessor for MainActor();
    uint64_t v93 = static MainActor.shared.getter();
    unint64_t v94 = (*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
    uint64_t v95 = swift_allocObject();
    *(void *)(v95 + 16) = v93;
    *(void *)(v95 + 24) = &protocol witness table for MainActor;
    sub_1002AA830(v89, v95 + v94, (uint64_t (*)(void))type metadata accessor for ContentView);
    sub_100064D5C(v88, (uint64_t)&unk_100526248, v95);
    swift_errorRelease();
    return swift_release();
  }
  uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  swift_bridgeObjectRetain();
  v74(v133, 1, 1, v135);
LABEL_30:
  swift_bridgeObjectRelease();
  uint64_t v96 = type metadata accessor for TaskPriority();
  uint64_t v97 = (uint64_t)v114;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v114, 1, 1, v96);
  sub_10000FB74(v111, (uint64_t)v144, &qword_100518A80);
  uint64_t v98 = v113;
  sub_1002ADE24(v117, v113, (uint64_t (*)(void))type metadata accessor for ContentView);
  type metadata accessor for MainActor();
  uint64_t v99 = v134;
  swift_retain();
  uint64_t v100 = v116;
  swift_retain();
  uint64_t v101 = static MainActor.shared.getter();
  unint64_t v102 = (*(unsigned __int8 *)(v118 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
  unint64_t v103 = (v119 + v102 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v104 = swift_allocObject();
  *(void *)(v104 + 16) = v101;
  *(void *)(v104 + 24) = &protocol witness table for MainActor;
  sub_10000FC34((uint64_t)v144, v104 + 32, &qword_100518A80);
  sub_1002AA830(v98, v104 + v102, (uint64_t (*)(void))type metadata accessor for ContentView);
  *(void *)(v104 + v103) = v99;
  unint64_t v105 = v104 + ((v103 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v105 = v100;
  *(unsigned char *)(v105 + 8) = v112 & 1;
  sub_1000D0B80(v97, (uint64_t)&unk_100526238, v104);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100277B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  uint64_t v6 = type metadata accessor for URL();
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = *(void *)(v7 + 64);
  v5[12] = swift_task_alloc();
  v5[13] = type metadata accessor for MainActor();
  v5[14] = static MainActor.shared.getter();
  return _swift_task_switch(sub_100277C68, 0, 0);
}

uint64_t sub_100277C68()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[7], v2);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  v0[15] = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v5 + v4, v1, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100277D88;
  return sub_100344098((uint64_t)sub_100295F3C, v5);
}

uint64_t sub_100277D88()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100277F40;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    swift_release();
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
    uint64_t v2 = sub_100277ECC;
    uint64_t v3 = v5;
    uint64_t v4 = v7;
  }
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_100277ECC()
{
  swift_release();
  sub_100278208();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100277F40()
{
  swift_release();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100277FC4, v1, v0);
}

uint64_t sub_100277FC4()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_100517E28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000F378(v1, (uint64_t)qword_10055E190);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_1003806B0(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unable to save video to photos: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100278208();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_100278208()
{
  Swift::String v0 = URL.path(percentEncoded:)(0);
  uint64_t v1 = self;
  id v2 = [v1 defaultManager];
  NSString v3 = String._bridgeToObjectiveC()();
  unsigned int v4 = [v2 isDeletableFileAtPath:v3];

  if (!v4)
  {
    if (qword_100517E28 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10000F378(v17, (uint64_t)qword_10055E190);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      id v25 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      sub_1003806B0(v0._countAndFlagsBits, (unint64_t)v0._object, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v16 = "Recording doesn't exist to delete at: %s";
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  id v5 = [v1 defaultManager];
  URL._bridgeToObjectiveC()(v6);
  uint64_t v8 = v7;
  id v25 = 0;
  unsigned int v9 = [v5 removeItemAtURL:v7 error:&v25];

  if (v9)
  {
    uint64_t v10 = qword_100517E28;
    id v11 = v25;
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000F378(v12, (uint64_t)qword_10055E190);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      id v25 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      sub_1003806B0(v0._countAndFlagsBits, (unint64_t)v0._object, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v16 = "Deleted temporary recording at path %s";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v16, v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
LABEL_12:

    swift_bridgeObjectRelease_n();
    return;
  }
  id v18 = v25;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_100517E28 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10000F378(v19, (uint64_t)qword_10055E190);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    id v25 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315394;
    swift_bridgeObjectRetain();
    sub_1003806B0(v0._countAndFlagsBits, (unint64_t)v0._object, (uint64_t *)&v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v23 = Error.localizedDescription.getter();
    sub_1003806B0(v23, v24, (uint64_t *)&v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unable to remove temporary recording file at path %s: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1002787A8(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  v2[10] = v3;
  v2[11] = *(void *)(v3 + 64);
  v2[12] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MainActor();
  v2[15] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[16] = v5;
  v2[17] = v4;
  return _swift_task_switch(sub_1002788D4, v5, v4);
}

uint64_t sub_1002788D4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v1, 1, 1, v6);
  sub_10000F578(v5, v0 + 16);
  sub_1002ADE24(v3, v2, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v7 = static MainActor.shared.getter();
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v7;
  *(void *)(v9 + 24) = &protocol witness table for MainActor;
  sub_1000321A8((long long *)(v0 + 16), v9 + 32);
  sub_1002AA830(v2, v9 + v8, (uint64_t (*)(void))type metadata accessor for ContentView);
  uint64_t v10 = sub_100065154(v1, (uint64_t)&unk_100526260, v9);
  *(void *)(v0 + 144) = v10;
  id v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v11;
  uint64_t v12 = sub_10000F214(&qword_10051B2B0);
  *id v11 = v0;
  v11[1] = sub_100278AB4;
  return Task<>.value.getter(v0 + 56, v10, v12);
}

uint64_t sub_100278AB4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = *(void *)(v1 + 128);
  return _swift_task_switch(sub_100278BF8, v3, v2);
}

uint64_t sub_100278BF8()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100278C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[30] = a4;
  v5[31] = a5;
  v5[29] = a1;
  uint64_t v6 = type metadata accessor for ContentView();
  v5[32] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[33] = v7;
  v5[34] = *(void *)(v7 + 64);
  v5[35] = swift_task_alloc();
  uint64_t v8 = sub_10000F214(&qword_100526268);
  v5[36] = v8;
  v5[37] = *(void *)(v8 - 8);
  v5[38] = swift_task_alloc();
  v5[39] = sub_10000F214(&qword_100526270);
  v5[40] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL.DirectoryHint();
  v5[41] = v9;
  v5[42] = *(void *)(v9 - 8);
  v5[43] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v5[44] = v10;
  v5[45] = *(void *)(v10 - 8);
  v5[46] = swift_task_alloc();
  v5[47] = swift_task_alloc();
  v5[48] = swift_task_alloc();
  v5[49] = swift_task_alloc();
  v5[50] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[51] = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100278F00, v12, v11);
}

uint64_t sub_100278F00()
{
  uint64_t v2 = *(void **)(v0 + 240);
  swift_release();
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10000F3B0(v2, v3);
  CGImageRef v5 = sub_100398EE0(v3, v4);
  if (v5)
  {
    CGImageRef v6 = v5;
    uint64_t v7 = v2[3];
    uint64_t v8 = v2[4];
    sub_10000F3B0(*(void **)(v0 + 240), v7);
    uint64_t v9 = (CGImage *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
    uint64_t v11 = v9;
    if (v10)
    {
      if (v10 == 1)
      {
        CGImageGetWidth(v9);
        CGImageGetHeight(v11);
        uint64_t v9 = v11;
        unsigned __int8 v10 = 1;
      }
    }
    else
    {
      CVPixelBufferGetWidth(v9);
      CVPixelBufferGetHeight(v11);
      uint64_t v9 = v11;
      unsigned __int8 v10 = 0;
    }
    sub_1000ACF28(v9, v10);
    uint64_t v17 = *(void **)(v0 + 240);
    uint64_t v18 = v2[3];
    uint64_t v19 = v2[4];
    sub_10000F3B0(v17, v18);
    double v20 = sub_10030CA60(v18, v19);
    double v21 = fabs(fmod((0.0 - v20) * 180.0 / 3.14159265, 180.0));
    uint64_t v22 = (void *)swift_task_alloc();
    *uint64_t v22 = &type metadata for Double;
    v22[1] = &protocol witness table for Double;
    v22[2] = sub_1002939DC();
    swift_getKeyPath();
    swift_task_dealloc();
    sub_1003767D4(90.0, 1.0, 0.0, v21);
    swift_release();
    uint64_t v23 = v2[3];
    uint64_t v24 = v2[4];
    sub_10000F3B0(v17, v23);
    double v25 = sub_10030CA28(v23, v24);
    if ((~*(void *)&v25 & 0x7FF0000000000000) != 0)
    {
      if (v25 > -9.22337204e18)
      {
        if (v25 < 9.22337204e18)
        {
          unint64_t v26 = *(void **)(v0 + 240);
          *(void *)(v0 + 224) = (uint64_t)v25;
          v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v27);
          swift_bridgeObjectRelease();
          uint64_t v28 = v2[3];
          uint64_t v29 = v2[4];
          sub_10000F3B0(v26, v28);
          uint64_t v30 = (__CVBuffer *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
          uint64_t v32 = v30;
          unint64_t v156 = v0;
          if (v31)
          {
LABEL_14:
            sub_1000ACF28(v30, v31);
            BOOL v129 = _swiftEmptyArrayStorage;
LABEL_19:
            uint64_t v58 = *(void **)(v0 + 240);
            uint64_t v57 = *(void *)(v0 + 248);
            uint64_t v59 = *(void *)v57;
            char v60 = *(unsigned char *)(v57 + 8);
            sub_10016180C(*(void *)v57, v60);
            sub_10027D2F8(v59, v60);
            sub_100161890(v59, v60);
            uint64_t v62 = v2[3];
            uint64_t v61 = v2[4];
            sub_10000F3B0(v58, v62);
            id v63 = v6;
            sub_10030CA60(v62, v61);
            uint64_t v64 = *(void *)(v0 + 360);
            uint64_t v65 = *(void *)(v0 + 336);
            uint64_t v134 = *(void *)(v0 + 312);
            uint64_t v135 = (long long *)(v0 + 88);
            uint64_t v66 = *(void *)(v156 + 296);
            uint64_t v133 = *(void *)(v156 + 264);
            uint64_t v67 = *(void *)(v156 + 256);
            uint64_t v68 = *(void *)(v156 + 248);
            uint64_t v122 = v63;
            uint64_t v136 = Image.init(decorative:scale:orientation:)();
            type metadata accessor for CameraController();
            uint64_t v69 = 0;
            id v132 = (void *)(v68 + *(int *)(v67 + 44));
            Swift::Int v130 = (void (**)(uint64_t, uint64_t))(v66 + 8);
            uint64_t v131 = (void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
            unint64_t v0 = v156;
            unsigned int v126 = enum case for URL.DirectoryHint.inferFromPath(_:);
            uint64_t v124 = (void (**)(uint64_t, uint64_t))(v65 + 8);
            uint64_t v125 = (void (**)(uint64_t, void, uint64_t))(v65 + 104);
            BOOL v128 = (void (**)(uint64_t, uint64_t))(v64 + 8);
            uint64_t v127 = v64;
            unint64_t v123 = (void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
            while (1)
            {
              uint64_t v147 = *(void *)(v0 + 304);
              uint64_t v71 = *(void *)(v0 + 280);
              uint64_t v150 = *(void *)(v0 + 288);
              uint64_t v152 = *(void *)(v0 + 320);
              uint64_t v72 = *(void *)(v0 + 248);
              uint64_t v137 = *(uint64_t *)((char *)&off_1004E5BF8 + v69 + 32);
              uint64_t v139 = v69;
              uint64_t v155 = *(uint64_t *)((char *)&off_1004E5BF8 + v69 + 40);
              char v73 = *((unsigned char *)&off_1004E5BF8 + v69 + 48);
              char v74 = *((unsigned char *)&off_1004E5BF8 + v69 + 49);
              char v75 = *((unsigned char *)&off_1004E5BF8 + v69 + 50);
              char v142 = v75;
              char v76 = *((unsigned char *)&off_1004E5BF8 + v69 + 51);
              char v77 = *((unsigned char *)&off_1004E5BF8 + v69 + 52);
              char v144 = v77;
              char v78 = *((unsigned char *)&off_1004E5BF8 + v69 + 53);
              sub_1002ADE24(v72, v71, (uint64_t (*)(void))type metadata accessor for ContentView);
              unint64_t v79 = (*(unsigned __int8 *)(v133 + 80) + 30) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
              uint64_t v80 = swift_allocObject();
              *(void *)(v80 + 16) = v136;
              *(unsigned char *)(v80 + 24) = v73;
              *(unsigned char *)(v80 + 25) = v74;
              *(unsigned char *)(v80 + 26) = v75;
              *(unsigned char *)(v80 + 27) = v76;
              char v81 = v76;
              *(unsigned char *)(v80 + 28) = v77;
              char v82 = v78;
              *(unsigned char *)(v80 + 29) = v78;
              sub_1002AA830(v71, v80 + v79, (uint64_t (*)(void))type metadata accessor for ContentView);
              sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
              swift_retain();
              swift_bridgeObjectRetain();
              uint64_t v83 = Environment.init<A>(_:)();
              LOBYTE(v71) = v84;
              *(unsigned char *)(v156 + 416) = 0;
              State.init(wrappedValue:)();
              char v85 = *(unsigned char *)(v156 + 136);
              uint64_t v86 = *(void *)(v156 + 144);
              *(unsigned char *)(v156 + 417) = 0;
              State.init(wrappedValue:)();
              char v87 = *(unsigned char *)(v156 + 152);
              uint64_t v88 = *(void *)(v156 + 160);
              *(void *)(v156 + 16) = v83;
              *(unsigned char *)(v156 + 24) = v71 & 1;
              *(unsigned char *)(v156 + 32) = v85;
              unint64_t v0 = v156;
              *(void *)(v156 + 40) = v86;
              *(unsigned char *)(v156 + 48) = v87;
              *(void *)(v156 + 56) = v88;
              *(unsigned char *)(v156 + 64) = v73;
              *(unsigned char *)(v156 + 65) = v74;
              *(unsigned char *)(v156 + 66) = v142;
              *(unsigned char *)(v156 + 67) = v81;
              *(unsigned char *)(v156 + 68) = v144;
              *(unsigned char *)(v156 + 69) = v82;
              *(unsigned char *)(v156 + 70) = 0;
              *(void *)(v156 + 72) = sub_100295DCC;
              *(void *)(v156 + 80) = v80;
              uint64_t v89 = v132[1];
              *(void *)(v156 + 200) = *v132;
              *(void *)(v156 + 208) = v89;
              sub_10000F214(&qword_100525F40);
              State.wrappedValue.getter();
              sub_10000F214(&qword_100526280);
              sub_100013AA8(&qword_100526288, &qword_100526280);
              View.environment<A>(_:)();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              static Alignment.center.getter();
              _FrameLayout.init(width:height:alignment:)();
              (*v131)(v152, v147, v150);
              uint64_t v90 = (_OWORD *)(v152 + *(int *)(v134 + 36));
              long long v91 = *v135;
              long long v92 = v135[2];
              v90[1] = v135[1];
              v90[2] = v92;
              *uint64_t v90 = v91;
              (*v130)(v147, v150);
              sub_10000F214(&qword_100526290);
              swift_allocObject();
              ImageRenderer.init(content:)();
              ImageRenderer.scale.setter();
              uint64_t v93 = ImageRenderer.cgImage.getter();
              if (v93)
              {
                unint64_t v94 = (void *)v93;
                uint64_t v95 = sub_10041BD8C();
                if (v96 >> 60 == 15)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v70 = v139;
                  if (qword_100517E98 != -1) {
                    swift_once();
                  }
                  uint64_t v97 = type metadata accessor for Logger();
                  sub_10000F378(v97, (uint64_t)qword_10055E2E0);
                  uint64_t v98 = Logger.logObject.getter();
                  os_log_type_t v99 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v98, v99))
                  {
                    uint64_t v100 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)uint64_t v100 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v98, v99, "Failed to generate png from image", v100, 2u);
                    swift_slowDealloc();
                  }
                  swift_release();

                  goto LABEL_22;
                }
                unint64_t v101 = v96;
                uint64_t v102 = *(void *)(v156 + 392);
                uint64_t v103 = *(void *)(v156 + 376);
                uint64_t v151 = v95;
                uint64_t v153 = *(void *)(v156 + 368);
                uint64_t v104 = *(void *)(v156 + 344);
                uint64_t v148 = *(void *)(v156 + 352);
                uint64_t v105 = *(void *)(v156 + 328);
                static URL.temporaryDirectory.getter();
                v106._countAndFlagsBits = 95;
                v106._object = (void *)0xE100000000000000;
                String.append(_:)(v106);
                v107._countAndFlagsBits = 0x5F6C6C697453;
                v107._object = (void *)0xE600000000000000;
                String.append(_:)(v107);
                v108._countAndFlagsBits = 1735290926;
                v108._object = (void *)0xE400000000000000;
                String.append(_:)(v108);
                *(void *)(v156 + 184) = v137;
                *(void *)(v156 + 192) = v155;
                (*v125)(v104, v126, v105);
                sub_1000317A0();
                URL.appending<A>(path:directoryHint:)();
                (*v124)(v104, v105);
                swift_bridgeObjectRelease();
                long long v109 = *v128;
                (*v128)(v102, v148);
                id v110 = [self defaultManager:v122];
                URL.path(percentEncoded:)(1);
                NSString v111 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                Class isa = Data._bridgeToObjectiveC()().super.isa;
                [v110 createFileAtPath:v111 contents:isa attributes:0];

                (*v123)(v153, v103, v148);
                if (swift_isUniquelyReferenced_nonNull_native()) {
                  unint64_t v113 = (unint64_t)v129;
                }
                else {
                  unint64_t v113 = sub_10032A104(0, v129[2] + 1, 1, (unint64_t)v129);
                }
                unint64_t v115 = *(void *)(v113 + 16);
                unint64_t v114 = *(void *)(v113 + 24);
                if (v115 >= v114 >> 1) {
                  unint64_t v113 = sub_10032A104(v114 > 1, v115 + 1, 1, v113);
                }
                uint64_t v116 = *(void *)(v156 + 368);
                uint64_t v117 = *(void *)(v156 + 376);
                uint64_t v118 = *(void *)(v156 + 352);
                *(void *)(v113 + 16) = v115 + 1;
                BOOL v129 = (void *)v113;
                unint64_t v119 = v113
                     + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80))
                     + *(void *)(v127 + 72) * v115;
                unint64_t v0 = v156;
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v127 + 32))(v119, v116, v118);
                swift_release();
                sub_100094760(v151, v101);

                v109(v117, v118);
              }
              else
              {
                swift_release();
                swift_bridgeObjectRelease();
              }
              uint64_t v70 = v139;
LABEL_22:
              uint64_t v69 = v70 + 24;
              if (v69 == 72)
              {
                sub_10000F214(&qword_100526298);
                swift_arrayDestroy();

                swift_release();
                swift_bridgeObjectRelease();
                uint64_t v16 = v129;
                goto LABEL_37;
              }
            }
          }
          CVPixelBufferLockBaseAddress(v30, 1uLL);
          BaseAddress = CVPixelBufferGetBaseAddress(v32);
          if (!BaseAddress)
          {
            uint64_t v30 = v32;
            unsigned __int8 v31 = 0;
            goto LABEL_14;
          }
          uint64_t v34 = BaseAddress;
          int64_t Height = CVPixelBufferGetHeight(v32);
          int64_t BytesPerRow = CVPixelBufferGetBytesPerRow(v32);
          unint64_t v38 = (unsigned __int128)(BytesPerRow * (__int128)Height) >> 64;
          if (v38 == (BytesPerRow * Height) >> 63)
          {
            uint64_t v39 = *(void *)(v0 + 392);
            uint64_t v149 = *(void *)(v0 + 384);
            uint64_t v40 = *(void *)(v0 + 344);
            uint64_t v143 = *(void *)(v0 + 360);
            uint64_t v145 = *(void *)(v0 + 352);
            uint64_t v41 = *(void *)(v0 + 336);
            uint64_t v138 = *(void *)(v0 + 328);
            uint64_t v140 = *(void *)(v0 + 400);
            uint64_t v141 = sub_100293D00(v34, BytesPerRow * Height);
            unint64_t v154 = v42;
            CVPixelBufferUnlockBaseAddress(v32, 1uLL);
            uint64_t v43 = sub_100279F88(v32);
            uint64_t v45 = v44;
            static URL.temporaryDirectory.getter();
            _StringGuts.grow(_:)(17);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v46._countAndFlagsBits = 0x75626C657869705FLL;
            v46._object = (void *)0xED00002E72656666;
            String.append(_:)(v46);
            v47._countAndFlagsBits = v43;
            v47._object = v45;
            String.append(_:)(v47);
            swift_bridgeObjectRelease();
            *(void *)(v0 + 168) = 0x5F6C6C697453;
            *(void *)(v0 + 176) = 0xE600000000000000;
            (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v40, enum case for URL.DirectoryHint.inferFromPath(_:), v138);
            sub_1000317A0();
            URL.appending<A>(path:directoryHint:)();
            (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v138);
            swift_bridgeObjectRelease();
            uint64_t v48 = v39;
            uint64_t v1 = v141;
            long long v146 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
            v146(v48, v145);
            id v49 = [self defaultManager];
            URL.path(percentEncoded:)(1);
            NSString v50 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            Class v51 = Data._bridgeToObjectiveC()().super.isa;
            [v49 createFileAtPath:v50 contents:v51 attributes:0];

            (*(void (**)(uint64_t, uint64_t, uint64_t))(v143 + 16))(v149, v140, v145);
            unint64_t v37 = sub_10032A104(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
            unint64_t v0 = *(void *)(v37 + 16);
            unint64_t v38 = *(void *)(v37 + 24);
            uint64_t v34 = (unsigned char *)(v0 + 1);
            if (v0 < v38 >> 1)
            {
LABEL_18:
              uint64_t v52 = *(void *)(v156 + 400);
              uint64_t v53 = *(void *)(v156 + 384);
              uint64_t v55 = *(void *)(v156 + 352);
              uint64_t v54 = *(void *)(v156 + 360);
              *(void *)(v37 + 16) = v34;
              BOOL v129 = (void *)v37;
              unint64_t v56 = v37
                  + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))
                  + *(void *)(v54 + 72) * v0;
              unint64_t v0 = v156;
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v54 + 32))(v56, v53, v55);
              sub_100038B34(v1, v154);
              sub_1000ACF28(v32, 0);
              v146(v52, v55);
              goto LABEL_19;
            }
          }
          else
          {
            __break(1u);
          }
          unint64_t v37 = sub_10032A104(v38 > 1, (int64_t)v34, 1, v37);
          goto LABEL_18;
        }
        goto LABEL_43;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (qword_100517E98 != -1) {
LABEL_44:
  }
    swift_once();
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000F378(v12, (uint64_t)qword_10055E2E0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Could not get high quality frame. Aborting TTR visualization capture.", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = _swiftEmptyArrayStorage;
LABEL_37:
  **(void **)(v0 + 232) = v16;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v120 = *(uint64_t (**)(void))(v0 + 8);
  return v120();
}

uint64_t sub_100279F88(__CVBuffer *a1)
{
  CVPixelBufferGetPixelFormatType(a1);
  sub_100040DDC(0, 4, 0);
  for (uint64_t i = 0; i != 32; i += 8)
  {
    uint64_t v2 = static String._uncheckedFromUTF8(_:)();
    uint64_t v4 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_100040DDC(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    unint64_t v5 = _swiftEmptyArrayStorage[3];
    if (v6 >= v5 >> 1) {
      sub_100040DDC(v5 > 1, v6 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v6 + 1;
    uint64_t v7 = &_swiftEmptyArrayStorage[2 * v6];
    v7[4] = v2;
    v7[5] = v4;
  }
  sub_10000F214(&qword_1005262A0);
  sub_100013AA8(&qword_1005262A8, &qword_1005262A0);
  return String.init<A>(_:)();
}

uint64_t sub_10027A168@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = static Alignment.center.getter();
  a4[1] = v8;
  uint64_t v9 = sub_10000F214(&qword_1005262B0);
  return sub_10027A1D4(a1, a2 & 0x1010101, a3, (uint64_t *)((char *)a4 + *(int *)(v9 + 44)));
}

uint64_t sub_10027A1D4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = sub_10000F214(&qword_1005262B8);
  __chkstk_darwin(v8 - 8);
  uint64_t v55 = (uint64_t *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000F214(&qword_1005262C0);
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v57 = v10;
  __chkstk_darwin(v10);
  uint64_t v54 = (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v12 - 8);
  os_log_type_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for CVBundle(0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v53 = (uint64_t)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000F214(&qword_1005262C8);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  unint64_t v26 = (char *)&v52 - v25;
  if ((a2 & 0x1000000) != 0)
  {
    uint64_t v52 = a4;
    Swift::String v27 = (uint64_t *)(a3 + *(int *)(type metadata accessor for ContentView() + 44));
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v58 = v29;
    uint64_t v59 = v28;
    swift_retain();
    sub_10000F214(&qword_100525F40);
    State.wrappedValue.getter();
    uint64_t v30 = v60;
    swift_getKeyPath();
    uint64_t v58 = v30;
    sub_1002AB13C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v31 = v30 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
    swift_beginAccess();
    sub_10000FB74(v31, (uint64_t)v14, &qword_10051B760);
    uint64_t v32 = sub_10000F214(&qword_10051A060);
    uint64_t v33 = 1;
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v14, 1, v32))
    {
      sub_1002ADE24((uint64_t)v14, (uint64_t)v17, type metadata accessor for CVBundle);
      uint64_t v33 = 0;
    }
    sub_10000FBD8((uint64_t)v14, &qword_10051B760);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, v33, 1, v18);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      uint64_t v34 = v53;
      sub_1002AA830((uint64_t)v17, v53, type metadata accessor for CVBundle);
      uint64_t v35 = static HorizontalAlignment.center.getter();
      uint64_t v36 = (uint64_t)v55;
      *uint64_t v55 = v35;
      *(void *)(v36 + 8) = 0;
      *(unsigned char *)(v36 + 16) = 1;
      uint64_t v37 = sub_10000F214(&qword_1005262D8);
      sub_10027A7E8(v34, 1, v36 + *(int *)(v37 + 44));
      char v38 = static Edge.Set.bottom.getter();
      EdgeInsets.init(_all:)();
      uint64_t v40 = v39;
      uint64_t v42 = v41;
      uint64_t v44 = v43;
      uint64_t v46 = v45;
      uint64_t v47 = v54;
      sub_10000FB74(v36, v54, &qword_1005262B8);
      uint64_t v48 = v57;
      uint64_t v49 = v47 + *(int *)(v57 + 36);
      *(unsigned char *)uint64_t v49 = v38;
      *(void *)(v49 + 8) = v40;
      *(void *)(v49 + 16) = v42;
      *(void *)(v49 + 24) = v44;
      *(void *)(v49 + 32) = v46;
      *(unsigned char *)(v49 + 40) = 0;
      sub_10000FBD8(v36, &qword_1005262B8);
      sub_10000FC34(v47, (uint64_t)v26, &qword_1005262C0);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v26, 0, 1, v48);
      sub_1002ADE8C(v34, type metadata accessor for CVBundle);
      a4 = v52;
      goto LABEL_9;
    }
    sub_10000FBD8((uint64_t)v17, &qword_10051B768);
    a4 = v52;
  }
  else
  {
    swift_retain();
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v26, 1, 1, v57);
LABEL_9:
  sub_10000FB74((uint64_t)v26, (uint64_t)v23, &qword_1005262C8);
  *a4 = a1;
  uint64_t v50 = sub_10000F214(&qword_1005262D0);
  sub_10000FB74((uint64_t)v23, (uint64_t)a4 + *(int *)(v50 + 48), &qword_1005262C8);
  swift_retain();
  sub_10000FBD8((uint64_t)v26, &qword_1005262C8);
  sub_10000FBD8((uint64_t)v23, &qword_1005262C8);
  return swift_release();
}

uint64_t sub_10027A7E8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CVBundle(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for BundleTextDetailView();
  uint64_t v10 = (int *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)&v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v15 = &v22[-v14];
  sub_1002ADE24(a1, (uint64_t)v8, type metadata accessor for CVBundle);
  *uint64_t v12 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  sub_1002AA830((uint64_t)v8, (uint64_t)v12 + v10[7], type metadata accessor for CVBundle);
  *((unsigned char *)v12 + v10[8]) = a2;
  uint64_t v16 = (char *)v12 + v10[9];
  char v23 = 0;
  State.init(wrappedValue:)();
  uint64_t v17 = v25;
  *uint64_t v16 = v24;
  *((void *)v16 + 1) = v17;
  uint64_t v18 = (char *)v12 + v10[10];
  char v23 = 0;
  State.init(wrappedValue:)();
  uint64_t v19 = v25;
  *uint64_t v18 = v24;
  *((void *)v18 + 1) = v19;
  sub_1002AA830((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
  sub_1002ADE24((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  uint64_t v20 = sub_10000F214(&qword_1005262E0);
  sub_1002ADE24((uint64_t)v12, a3 + *(int *)(v20 + 48), (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
  sub_1002ADE8C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
  return sub_1002ADE8C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
}

uint64_t sub_10027AA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 320) = a8;
  *(void *)(v8 + 224) = a5;
  *(void *)(v8 + 232) = a6;
  *(void *)(v8 + 216) = a4;
  *(void *)(v8 + 240) = type metadata accessor for TapToRadarDraft();
  *(void *)(v8 + 248) = swift_task_alloc();
  sub_10000F214(&qword_10051A2D0);
  *(void *)(v8 + 256) = swift_task_alloc();
  *(void *)(v8 + 264) = swift_projectBox();
  type metadata accessor for MainActor();
  *(void *)(v8 + 272) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 280) = v10;
  *(void *)(v8 + 288) = v9;
  return _swift_task_switch(sub_10027AB60, v10, v9);
}

uint64_t sub_10027AB60()
{
  sub_10000FB74(*(void *)(v0 + 216), v0 + 56, &qword_100518A80);
  if (*(void *)(v0 + 80))
  {
    sub_1000321A8((long long *)(v0 + 56), v0 + 16);
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10027AE64;
    return sub_1002787A8(v0 + 16);
  }
  else
  {
    swift_release();
    sub_10000FBD8(v0 + 56, &qword_100518A80);
    uint64_t v4 = *(void *)(v0 + 256);
    uint64_t v3 = *(void *)(v0 + 264);
    uint64_t v6 = *(int **)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 248);
    char v7 = *(unsigned char *)(v0 + 320);
    uint64_t v8 = *(void *)(v0 + 232);
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 16);
    swift_beginAccess();
    *(void *)(v3 + v6[12] + 16) = v9;
    *(unsigned char *)(v3 + v6[15] + 16) = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    Date.init()();
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 0, 1, v10);
    swift_beginAccess();
    uint64_t v11 = v6[11];
    uint64_t v12 = sub_10000F214(&qword_10051DCC0);
    sub_10000F5DC(v4, v3 + *(int *)(v12 + 36) + v11, &qword_10051A2D0);
    *(unsigned char *)(v3 + v6[21] + 16) = v7;
    swift_beginAccess();
    sub_1002ADE24(v3, v5, (uint64_t (*)(void))type metadata accessor for TapToRadarDraft);
    sub_1000C749C();
    sub_1002ADE8C(*(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for TapToRadarDraft);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_10027AE64(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 304) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[35];
    uint64_t v6 = v4[36];
    char v7 = sub_10027B214;
  }
  else
  {
    v4[39] = a1;
    uint64_t v5 = v4[35];
    uint64_t v6 = v4[36];
    char v7 = sub_10027AF8C;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_10027AF8C()
{
  uint64_t v1 = *(void *)(v0 + 312);
  swift_release();
  swift_beginAccess();
  sub_10019FFA0(v1);
  swift_endAccess();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v4 = *(int **)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 248);
  char v6 = *(unsigned char *)(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 232);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 16);
  swift_beginAccess();
  *(void *)(v2 + v4[12] + 16) = v8;
  *(unsigned char *)(v2 + v4[15] + 16) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 0, 1, v9);
  swift_beginAccess();
  uint64_t v10 = v4[11];
  uint64_t v11 = sub_10000F214(&qword_10051DCC0);
  sub_10000F5DC(v3, v2 + *(int *)(v11 + 36) + v10, &qword_10051A2D0);
  *(unsigned char *)(v2 + v4[21] + 16) = v6;
  swift_beginAccess();
  sub_1002ADE24(v2, v5, (uint64_t (*)(void))type metadata accessor for TapToRadarDraft);
  sub_1000C749C();
  sub_1002ADE8C(*(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for TapToRadarDraft);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10027B214()
{
  swift_release();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10027B294()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10027B334()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10027B3A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v4 - 8);
  char v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for EnablementUIDismissType();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = v1 + *(int *)(type metadata accessor for ContentView() + 80);
  char v16 = *(unsigned char *)v15;
  uint64_t v17 = *(void *)(v15 + 8);
  v25[0] = v16;
  uint64_t v26 = v17;
  v24[15] = 0;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 88))(v14, v11);
  if (result != enum case for EnablementUIDismissType.cancel(_:)
    && result != enum case for EnablementUIDismissType.notNow(_:))
  {
    if (result == enum case for EnablementUIDismissType.enableWithAccount(_:))
    {
      URL.init(string:)();
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        return sub_10000FBD8((uint64_t)v6, &qword_10051E070);
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
        uint64_t v20 = *(void *)(v1 + 64);
        uint64_t v21 = *(void *)(v2 + 72);
        char v22 = *(unsigned char *)(v2 + 80);
        sub_10000FCA0();
        char v23 = (void (*)(unsigned char *, char *))sub_10027C858(v20, v21, v22);
        sub_10000FD10();
        v25[0] = 1;
        v23(v10, v25);
        swift_release();
        return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      }
    }
    else if (result != enum case for EnablementUIDismissType.enableWithoutAccount(_:))
    {
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
  return result;
}

uint64_t type metadata accessor for ContentView()
{
  uint64_t result = qword_100525FC8;
  if (!qword_100525FC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10027B758(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return _swift_task_switch(sub_10027B778, 0, 0);
}

uint64_t sub_10027B778()
{
  unint64_t v1 = *(void *)(v0 + 104);
  if (v1 >> 62)
  {
    if (v1 >> 62 == 1) {
      uint64_t v2 = &qword_100526528;
    }
    else {
      uint64_t v2 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v2);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v3);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 40) + **(int **)(v4 + 40));
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  uint64_t v6 = type metadata accessor for CVBundle(0);
  uint64_t v7 = sub_1002AB13C(&qword_100526520, (void (*)(uint64_t))type metadata accessor for CVBundle);
  *uint64_t v5 = v0;
  v5[1] = sub_10027B954;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v6, v7, v3, v4);
}

uint64_t sub_10027B954(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 120) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10027BAF0;
  }
  else
  {
    *(void *)(v6 + 128) = a2;
    *(void *)(v6 + 136) = a1;
    uint64_t v7 = sub_10027BA88;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10027BA88()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  unint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  return v1(v2, v3);
}

uint64_t sub_10027BAF0()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10027BB54(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return _swift_task_switch(sub_10027BB74, 0, 0);
}

uint64_t sub_10027BB74()
{
  unint64_t v1 = *(void *)(v0 + 104);
  if (v1 >> 62)
  {
    if (v1 >> 62 == 1) {
      uint64_t v2 = &qword_100526528;
    }
    else {
      uint64_t v2 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v2);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v3);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 48) + **(int **)(v4 + 48));
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  uint64_t v6 = type metadata accessor for CVBundle(0);
  uint64_t v7 = sub_1002AB13C(&qword_100526520, (void (*)(uint64_t))type metadata accessor for CVBundle);
  *uint64_t v5 = v0;
  v5[1] = sub_10027BD50;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v6, v7, v3, v4);
}

uint64_t sub_10027BD50(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10027BAF0;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = sub_10027BE78;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10027BE78()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 128);
  return v1(v2);
}

uint64_t sub_10027BEE0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return _swift_task_switch(sub_10027BF00, 0, 0);
}

uint64_t sub_10027BF00()
{
  unint64_t v1 = *(void *)(v0 + 104);
  if (v1 >> 62)
  {
    if (v1 >> 62 == 1) {
      uint64_t v2 = &qword_100526528;
    }
    else {
      uint64_t v2 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v2);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v3);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 56) + **(int **)(v4 + 56));
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  uint64_t v6 = type metadata accessor for CVBundle(0);
  uint64_t v7 = sub_1002AB13C(&qword_100526520, (void (*)(uint64_t))type metadata accessor for CVBundle);
  *uint64_t v5 = v0;
  v5[1] = sub_10027C0DC;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v6, v7, v3, v4);
}

uint64_t sub_10027C0DC(uint64_t a1, int a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 120) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10027BAF0;
  }
  else
  {
    *(_DWORD *)(v6 + 136) = a2;
    *(void *)(v6 + 128) = a1;
    uint64_t v7 = sub_10027C214;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10027C214()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  unint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(unsigned int *)(v0 + 136);
  return v1(v2, v3);
}

uint64_t sub_10027C280(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = type metadata accessor for MainActor();
  v2[5] = static MainActor.shared.getter();
  v2[6] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[7] = v4;
  v2[8] = v3;
  return _swift_task_switch(sub_10027C328, v4, v3);
}

uint64_t sub_10027C328()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 16);
  *(void *)(v0 + 72) = v1;
  return _swift_task_switch(sub_10027C34C, v1, 0);
}

uint64_t sub_10027C34C()
{
  uint64_t v1 = *(void *)(v0[9] + 112);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005265F0 + dword_1005265F0);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10027C400;
  uint64_t v3 = v0[2];
  return v5(v3, v1);
}

uint64_t sub_10027C400(uint64_t a1, int a2)
{
  uint64_t v5 = *v3;
  *(void *)(v5 + 88) = a1;
  *(void *)(v5 + 96) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    uint64_t v8 = sub_10027C770;
  }
  else
  {
    *(_DWORD *)(v5 + 104) = a2;
    uint64_t v6 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    uint64_t v8 = sub_10027C528;
  }
  return _swift_task_switch(v8, v6, v7);
}

uint64_t sub_10027C528()
{
  swift_release();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10027C5AC, v1, v0);
}

uint64_t sub_10027C5AC()
{
  uint64_t v1 = *(unsigned int *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_release();
  id v3 = [objc_allocWithZone((Class)CIImage) initWithCGImage:v2];
  id v4 = [v3 imageByApplyingCGOrientation:v1];

  id v5 = [objc_allocWithZone((Class)CIContext) init];
  CGColorSpaceRef v6 = (CGColorSpaceRef)[v4 colorSpace];
  if (v6 || (CGColorSpaceRef v6 = CGColorSpaceCreateWithName(kCGColorSpaceSRGB)) != 0)
  {
    uint64_t v7 = *(void **)(v0 + 88);
    [v4 extent];
    double v9 = v8;
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    uint64_t v16 = kCIFormatRGBA8;
    uint64_t v17 = v6;
    id v18 = [v5 createCGImage:v4 fromRect:v16 format:v17 colorSpace:v9];
  }
  else
  {
    uint64_t v21 = *(void **)(v0 + 88);

    id v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(id))(v0 + 8);
  return v19(v18);
}

uint64_t sub_10027C770()
{
  swift_release();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10027C7F4, v1, v0);
}

uint64_t sub_10027C7F4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10027C858(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = type metadata accessor for EnvironmentValues();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    double v10 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      double v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)double v12 = 136315138;
      v14[0] = v12 + 4;
      v14[1] = sub_1003806B0(0xD00000000000002ELL, 0x8000000100429C60, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    sub_10000FD10();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return v15;
  }
  return a1;
}

uint64_t sub_10027CA80@<X0>(uint64_t a1@<X8>)
{
  return sub_10027CAF4(&qword_100522BF0, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_10027CABC@<X0>(uint64_t a1@<X8>)
{
  return sub_10027CAF4(&qword_10051AFE0, (uint64_t (*)(void))&type metadata accessor for FinishLaunchTestAction, 0xD000000000000016, 0x8000000100429D70, a1);
}

uint64_t sub_10027CAF4@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  double v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(a1);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FB74(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    uint64_t v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      unint64_t v25 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = a5;
      char v23 = (uint8_t *)v22;
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)char v23 = 136315138;
      uint64_t v28 = sub_1003806B0(v27, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_10027CDAC(uint64_t a1, char a2)
{
  return sub_10027D7D0(a1, a2, 0xD000000000000010, 0x8000000100426F10);
}

uint64_t sub_10027CDC8@<X0>(uint64_t a1@<X8>)
{
  return sub_10027CAF4(&qword_10051BB48, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010042AC60, a1);
}

uint64_t sub_10027CE00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051C890);
  __chkstk_darwin(v8);
  double v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FB74(v2, (uint64_t)v10, &qword_10051C890);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v10, v4);
  }
  os_log_type_t v12 = static os_log_type_t.fault.getter();
  uint64_t v13 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v17[1] = a1;
    uint64_t v18 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    void v17[2] = sub_1003806B0(0xD000000000000011, 0x800000010042AC40, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10027D098@<X0>(uint64_t a1@<X8>)
{
  return sub_10027CAF4((uint64_t *)&unk_1005197E0, (uint64_t (*)(void))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_10027D0D8(uint64_t a1, char a2)
{
  return sub_10027D7D0(a1, a2, 0xD000000000000010, 0x800000010042A340);
}

uint64_t sub_10027D0F4(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  uint64_t v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_1003806B0(1819242306, 0xE400000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_100161890(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

double sub_10027D2F8(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return *(double *)&a1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  uint64_t v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_1003806B0(0x74616F6C464743, 0xE700000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_100161890(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return *(double *)&v14;
}

uint64_t sub_10027D504(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10027D58C(a1, a2, a3, (void (*)(uint64_t, uint64_t, double))sub_10000F724, 0xD00000000000001DLL, 0x800000010042AC20, (uint64_t (*)(void))sub_10000F478);
}

uint64_t sub_10027D548(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10027D58C(a1, a2, a3, (void (*)(uint64_t, uint64_t, double))sub_10000F724, 0xD00000000000001BLL, 0x800000010042AC80, (uint64_t (*)(void))sub_10000F478);
}

uint64_t sub_10027D58C(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t, double), uint64_t a5, unint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v14 = type metadata accessor for EnvironmentValues();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    a4(a1, a2, v16);
  }
  else
  {
    uint64_t v28 = a5;
    swift_retain();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    os_log_type_t v20 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v20, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      unint64_t v26 = a6;
      uint64_t v22 = (uint8_t *)v21;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v27 = a7;
      uint64_t v30 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      v25[1] = v22 + 4;
      uint64_t v29 = sub_1003806B0(v28, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v20, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v22, 0xCu);
      swift_arrayDestroy();
      a7 = v27;
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    sub_1002B4754(a1, a2, 0, a7);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    return v30;
  }
  return a1;
}

uint64_t sub_10027D7D0(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for EnvironmentValues();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    uint64_t v13 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      unint64_t v18 = a4;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v19 = sub_1003806B0(a3, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return v20;
  }
  return a1;
}

uint64_t sub_10027D9D8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10027D58C(a1, a2, a3, (void (*)(uint64_t, uint64_t, double))sub_10014F7F8, 0xD000000000000032, 0x800000010042ACA0, (uint64_t (*)(void))sub_1002B48C8);
}

uint64_t sub_10027DA1C@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayScale.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10027DA48()
{
  return EnvironmentValues.displayScale.setter();
}

double sub_10027DA70@<D0>(_OWORD *a1@<X8>)
{
  sub_10027DE88();
  EnvironmentValues.subscript.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_10027DAC4()
{
  return EnvironmentValues.withCurrentHostingController.getter();
}

uint64_t sub_10027DAE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10027DB14()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_10027DB40@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10027DB74()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_10027DBA4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10027DBD4()
{
  return EnvironmentValues.isEnabled.setter();
}

unsigned char *sub_10027DBFC(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_10027DC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(char *))
{
  uint64_t v8 = a5(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

id sub_10027DCE0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v14[3] = v1;
  void v14[4] = &off_1004F8258;
  v14[0] = a1;
  uint64_t v2 = (objc_class *)type metadata accessor for ImageDataConfiguration();
  char v3 = objc_allocWithZone(v2);
  uint64_t v4 = sub_1000A36F4((uint64_t)v14, v1);
  double v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v12 - v6);
  (*(void (**)(char *, double))(v8 + 16))((char *)&v12 - v6, v5);
  uint64_t v9 = *v7;
  void v13[3] = v1;
  v13[4] = &off_1004F8258;
  v13[0] = v9;
  v3[OBJC_IVAR____TtC6Tamale22ImageDataConfiguration_shouldPersistContext] = 0;
  sub_10000F578((uint64_t)v13, (uint64_t)&v3[OBJC_IVAR____TtC6Tamale22ImageDataConfiguration_fileWriter]);
  *(void *)&v3[OBJC_IVAR____TtC6Tamale22ImageDataConfiguration_itemProvidersForActivityItemsConfiguration] = _swiftEmptyArrayStorage;
  v12.receiver = v3;
  v12.super_class = v2;
  id v10 = [super init];
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v13);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v14);
  return v10;
}

uint64_t sub_10027DE6C()
{
  return sub_10014CD44();
}

unint64_t sub_10027DE88()
{
  unint64_t result = qword_100525F48;
  if (!qword_100525F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100525F48);
  }
  return result;
}

unint64_t sub_10027DEDC(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v20 = v19 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_10016180C(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    char v9 = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = v9;
    char v10 = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = v10;
    char v11 = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = v11;
    uint64_t v12 = *(void *)(a2 + 64);
    uint64_t v13 = *(void *)(a2 + 72);
    char v14 = *(unsigned char *)(a2 + 80);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000FCA0();
    *(void *)(a1 + 64) = v12;
    *(void *)(a1 + 72) = v13;
    *(unsigned char *)(a1 + 80) = v14;
    uint64_t v15 = a3[9];
    double v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    sub_10000F214(&qword_100525F10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for WithCurrentHostingControllerAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *double v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v596 = a3;
    uint64_t v597 = a2;
    uint64_t v21 = a3[10];
    unint64_t v598 = a1;
    uint64_t v22 = a1 + v21;
    uint64_t v23 = a2 + v21;
    *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
    *(_WORD *)(v22 + 4) = *(_WORD *)(v23 + 4);
    v581 = (int *)type metadata accessor for AppConfiguration();
    uint64_t v24 = v581[5];
    uint64_t v25 = v22 + v24;
    uint64_t v26 = v23 + v24;
    *(unsigned char *)uint64_t v25 = *(unsigned char *)(v23 + v24);
    *(unsigned char *)(v25 + 1) = *(unsigned char *)(v23 + v24 + 1);
    *(_OWORD *)(v25 + 8) = *(_OWORD *)(v23 + v24 + 8);
    *(_DWORD *)(v25 + 24) = *(_DWORD *)(v23 + v24 + 24);
    *(_WORD *)(v25 + 28) = *(_WORD *)(v23 + v24 + 28);
    uint64_t v27 = (int *)type metadata accessor for CameraControllerConfiguration(0);
    uint64_t v28 = v27[10];
    uint64_t v29 = (void *)(v25 + v28);
    uint64_t v30 = (const void *)(v26 + v28);
    uint64_t v31 = type metadata accessor for URL();
    uint64_t v32 = *(void *)(v31 - 8);
    v592 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
    if (v592(v30, 1, v31))
    {
      uint64_t v33 = sub_10000F214(&qword_10051E070);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    *(unsigned char *)(v25 + v27[11]) = *(unsigned char *)(v26 + v27[11]);
    uint64_t v34 = v27[12];
    uint64_t v35 = v25 + v34;
    uint64_t v36 = v26 + v34;
    *(void *)uint64_t v35 = *(void *)v36;
    *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
    *(void *)(v25 + v27[13]) = *(void *)(v26 + v27[13]);
    *(unsigned char *)(v25 + v27[14]) = *(unsigned char *)(v26 + v27[14]);
    *(unsigned char *)(v25 + v27[15]) = *(unsigned char *)(v26 + v27[15]);
    *(unsigned char *)(v25 + v27[16]) = *(unsigned char *)(v26 + v27[16]);
    *(unsigned char *)(v25 + v27[17]) = *(unsigned char *)(v26 + v27[17]);
    uint64_t v37 = v27[18];
    char v38 = (void *)(v25 + v37);
    uint64_t v39 = (const void *)(v26 + v37);
    if (v592((const void *)(v26 + v37), 1, v31))
    {
      uint64_t v40 = sub_10000F214(&qword_10051E070);
      memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
      uint64_t v41 = v32;
    }
    else
    {
      uint64_t v42 = v39;
      uint64_t v41 = v32;
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v38, v42, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v38, 0, 1, v31);
    }
    *(unsigned char *)(v25 + v27[19]) = *(unsigned char *)(v26 + v27[19]);
    *(unsigned char *)(v25 + v27[20]) = *(unsigned char *)(v26 + v27[20]);
    *(unsigned char *)(v25 + v27[21]) = *(unsigned char *)(v26 + v27[21]);
    uint64_t v43 = v27[22];
    uint64_t v44 = (void *)(v25 + v43);
    uint64_t v45 = (const void *)(v26 + v43);
    if (v592((const void *)(v26 + v43), 1, v31))
    {
      uint64_t v46 = sub_10000F214(&qword_10051E070);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v44, v45, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v31);
    }
    *(unsigned char *)(v22 + v581[6]) = *(unsigned char *)(v23 + v581[6]);
    uint64_t v47 = v581[7];
    uint64_t v48 = (void *)(v22 + v47);
    uint64_t v49 = (void *)(v23 + v47);
    uint64_t v50 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v50;
    *(_WORD *)(v22 + v581[8]) = *(_WORD *)(v23 + v581[8]);
    *(_WORD *)(v22 + v581[10]) = *(_WORD *)(v23 + v581[10]);
    uint64_t v51 = v581[12];
    uint64_t v52 = v22 + v51;
    uint64_t v53 = v23 + v51;
    *(_WORD *)uint64_t v52 = *(_WORD *)v53;
    *(unsigned char *)(v52 + 2) = *(unsigned char *)(v53 + 2);
    uint64_t v54 = v581[13];
    uint64_t v55 = (void *)(v22 + v54);
    uint64_t v56 = (void *)(v23 + v54);
    uint64_t v57 = v56[1];
    *uint64_t v55 = *v56;
    v55[1] = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v58 = sub_10000F214(&qword_100525F50);
    *(void *)(v22 + *(int *)(v58 + 28)) = *(void *)(v23 + *(int *)(v58 + 28));
    uint64_t v59 = v596[11];
    uint64_t v60 = v596[12];
    uint64_t v61 = (void *)(v598 + v59);
    uint64_t v62 = (void *)(v597 + v59);
    uint64_t v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
    uint64_t v64 = (void *)(v598 + v60);
    uint64_t v65 = (void *)(v597 + v60);
    uint64_t v66 = type metadata accessor for ResultLookupState();
    uint64_t v593 = *(void *)(v66 - 8);
    uint64_t v67 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v593 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    if (v67(v65, 1, v66))
    {
      uint64_t v68 = sub_10000F214(&qword_10051A308);
      memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v69 = v65[1];
          *uint64_t v64 = *v65;
          v64[1] = v69;
          swift_bridgeObjectRetain();
          goto LABEL_93;
        case 1u:
          *uint64_t v64 = *v65;
          swift_bridgeObjectRetain();
          goto LABEL_93;
        case 2u:
          type metadata accessor for GeoLocateState(0);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          type metadata accessor for CVDetection();
          int v90 = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v586 = v66;
            switch(v90)
            {
              case 1:
                uint64_t v240 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v240 - 8) + 16))(v64, v65, v240);
                Swift::Int v241 = (int *)type metadata accessor for ParseDetectorResult(0);
                Swift::Int v242 = v64;
                uint64_t v243 = v241;
                *(_DWORD *)((char *)v242 + v241[5]) = *(_DWORD *)((char *)v65 + v241[5]);
                uint64_t v244 = v241[6];
                unint64_t v245 = (_OWORD *)((char *)v242 + v244);
                uint64_t v246 = (_OWORD *)((char *)v65 + v244);
                long long v247 = v246[3];
                v245[2] = v246[2];
                v245[3] = v247;
                long long v248 = v246[1];
                *unint64_t v245 = *v246;
                v245[1] = v248;
                *(void *)((char *)v242 + v241[7]) = *(void *)((char *)v65 + v241[7]);
                *(void *)((char *)v242 + v241[8]) = *(void *)((char *)v65 + v241[8]);
                *(void *)((char *)v242 + v241[9]) = *(void *)((char *)v65 + v241[9]);
                *((unsigned char *)v242 + v241[10]) = *((unsigned char *)v65 + v241[10]);
                uint64_t v249 = v241[11];
                unint64_t v250 = (void *)((char *)v242 + v249);
                unint64_t v251 = (void *)((char *)v65 + v249);
                uint64_t v252 = v251[1];
                *unint64_t v250 = *v251;
                v250[1] = v252;
                uint64_t v253 = v241[12];
                char v254 = (void *)((char *)v242 + v253);
                uint64_t v255 = (void *)((char *)v65 + v253);
                uint64_t v256 = v255[1];
                void *v254 = *v255;
                v254[1] = v256;
                uint64_t v257 = v241[13];
                v583 = v242;
                v578 = (char *)v242 + v257;
                uint64_t v258 = (char *)v65 + v257;
                uint64_t v259 = type metadata accessor for VisualUnderstanding.ImageRegion();
                uint64_t v260 = *(void *)(v259 - 8);
                uint64_t v261 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v261(v258, 1, v259))
                {
                  uint64_t v262 = sub_10000F214(&qword_100524BD0);
                  memcpy(v578, v258, *(void *)(*(void *)(v262 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v260 + 16))(v578, v258, v259);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v260 + 56))(v578, 0, 1, v259);
                }
                uint64_t v358 = v243[14];
                uint64_t v359 = (char *)v583 + v358;
                uint64_t v360 = (char *)v65 + v358;
                unint64_t v361 = *((void *)v360 + 1);
                if (v361 >> 60 == 15)
                {
                  *(_OWORD *)uint64_t v359 = *(_OWORD *)v360;
                }
                else
                {
                  uint64_t v362 = *(void *)v360;
                  sub_100038528(*(void *)v360, *((void *)v360 + 1));
                  *(void *)uint64_t v359 = v362;
                  *((void *)v359 + 1) = v361;
                }
                uint64_t v363 = v243[15];
                uint64_t v64 = v583;
                v364 = (void *)((char *)v583 + v363);
                uint64_t v365 = (void *)((char *)v65 + v363);
                if (*v365)
                {
                  uint64_t v366 = v365[1];
                  uint64_t v367 = v365[2];
                  void *v364 = *v365;
                  v364[1] = v366;
                  v364[2] = v367;
                  goto LABEL_82;
                }
                *(_OWORD *)v364 = *(_OWORD *)v365;
                v364[2] = v365[2];
                break;
              case 2:
                uint64_t v263 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v263 - 8) + 16))(v64, v65, v263);
                int v264 = (int *)type metadata accessor for TextDetectorResult(0);
                *(_DWORD *)((char *)v64 + v264[5]) = *(_DWORD *)((char *)v65 + v264[5]);
                uint64_t v265 = v264[6];
                int v266 = (_OWORD *)((char *)v64 + v265);
                uint64_t v267 = (_OWORD *)((char *)v65 + v265);
                long long v268 = v267[3];
                v266[2] = v267[2];
                v266[3] = v268;
                long long v269 = v267[1];
                *int v266 = *v267;
                v266[1] = v269;
                uint64_t v270 = v264[7];
                uint64_t v271 = (void *)((char *)v64 + v270);
                uint64_t v272 = (void *)((char *)v65 + v270);
                uint64_t v274 = *v272;
                uint64_t v273 = v272[1];
                *uint64_t v271 = v274;
                v271[1] = v273;
                *(void *)((char *)v64 + v264[8]) = *(void *)((char *)v65 + v264[8]);
                *(void *)((char *)v64 + v264[9]) = *(void *)((char *)v65 + v264[9]);
                *(void *)((char *)v64 + v264[10]) = *(void *)((char *)v65 + v264[10]);
                *(void *)((char *)v64 + v264[11]) = *(void *)((char *)v65 + v264[11]);
                *(void *)((char *)v64 + v264[12]) = *(void *)((char *)v65 + v264[12]);
                uint64_t v275 = v264[13];
                uint64_t v276 = *(void **)((char *)v65 + v275);
                *(void *)((char *)v64 + v275) = v276;
                *((unsigned char *)v64 + v264[14]) = *((unsigned char *)v65 + v264[14]);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v277 = v276;
                break;
              case 3:
              case 4:
                uint64_t v91 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v91 - 8) + 16))(v64, v65, v91);
                long long v92 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
                *(_DWORD *)((char *)v64 + v92[5]) = *(_DWORD *)((char *)v65 + v92[5]);
                uint64_t v93 = v92[6];
                unint64_t v94 = (_OWORD *)((char *)v64 + v93);
                uint64_t v95 = (_OWORD *)((char *)v65 + v93);
                long long v96 = v95[3];
                v94[2] = v95[2];
                v94[3] = v96;
                long long v97 = v95[1];
                _OWORD *v94 = *v95;
                v94[1] = v97;
                uint64_t v98 = v92[7];
                os_log_type_t v99 = (void *)((char *)v64 + v98);
                uint64_t v100 = (void *)((char *)v65 + v98);
                uint64_t v102 = *v100;
                uint64_t v101 = v100[1];
                *os_log_type_t v99 = v102;
                v99[1] = v101;
                *(void *)((char *)v64 + v92[8]) = *(void *)((char *)v65 + v92[8]);
                *(void *)((char *)v64 + v92[9]) = *(void *)((char *)v65 + v92[9]);
                *(void *)((char *)v64 + v92[10]) = *(void *)((char *)v65 + v92[10]);
LABEL_82:
                swift_bridgeObjectRetain();
                swift_retain();
                break;
              case 5:
                uint64_t v278 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v278 - 8) + 16))(v64, v65, v278);
                uint64_t v239 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
                goto LABEL_60;
              default:
                uint64_t v238 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v238 - 8) + 16))(v64, v65, v238);
                uint64_t v239 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_60:
                *(_DWORD *)((char *)v64 + v239[5]) = *(_DWORD *)((char *)v65 + v239[5]);
                uint64_t v279 = v239[6];
                uint64_t v280 = (_OWORD *)((char *)v64 + v279);
                long long v281 = (_OWORD *)((char *)v65 + v279);
                long long v282 = v281[3];
                v280[2] = v281[2];
                v280[3] = v282;
                long long v283 = v281[1];
                *uint64_t v280 = *v281;
                v280[1] = v283;
                uint64_t v284 = v239[7];
                long long v285 = (void *)((char *)v64 + v284);
                long long v286 = (void *)((char *)v65 + v284);
                uint64_t v288 = *v286;
                uint64_t v287 = v286[1];
                *long long v285 = v288;
                v285[1] = v287;
                *(void *)((char *)v64 + v239[8]) = *(void *)((char *)v65 + v239[8]);
                *(void *)((char *)v64 + v239[9]) = *(void *)((char *)v65 + v239[9]);
                swift_bridgeObjectRetain();
                break;
            }
            swift_storeEnumTagMultiPayload();
            uint64_t v368 = sub_10000F214(&qword_100520120);
            uint64_t v369 = *(int *)(v368 + 48);
            v370 = (char *)v64 + v369;
            uint64_t v371 = (char *)v65 + v369;
            id v372 = *(id *)v371;
            uint64_t v373 = (void *)*((void *)v371 + 1);
            uint64_t v374 = *((void *)v371 + 2);
            v375 = v64;
            unsigned __int8 v376 = v371[24];
            sub_1000506C4(*(id *)v371, v373, v374, v376);
            *(void *)v370 = v372;
            *((void *)v370 + 1) = v373;
            *((void *)v370 + 2) = v374;
            v370[24] = v376;
            uint64_t v64 = v375;
            uint64_t v377 = *(int *)(v368 + 64);
            v378 = (char *)v375 + v377;
            v379 = (char *)v65 + v377;
            id v380 = *(id *)v379;
            uint64_t v381 = (void *)*((void *)v379 + 1);
            uint64_t v382 = *((void *)v379 + 2);
            LOBYTE(v374) = v379[24];
            sub_1000506C4(*(id *)v379, v381, v382, v374);
            *(void *)v378 = v380;
            *((void *)v378 + 1) = v381;
            *((void *)v378 + 2) = v382;
            v378[24] = v374;
            uint64_t v66 = v586;
          }
          else
          {
            switch(v90)
            {
              case 1:
                uint64_t v591 = v66;
                uint64_t v291 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v291 - 8) + 16))(v64, v65, v291);
                unsigned __int8 v292 = (int *)type metadata accessor for ParseDetectorResult(0);
                uint64_t v293 = v64;
                uint64_t v294 = v292;
                *(_DWORD *)((char *)v293 + v292[5]) = *(_DWORD *)((char *)v65 + v292[5]);
                uint64_t v295 = v292[6];
                char v296 = (_OWORD *)((char *)v293 + v295);
                uint64_t v297 = (_OWORD *)((char *)v65 + v295);
                long long v298 = v297[3];
                v296[2] = v297[2];
                v296[3] = v298;
                long long v299 = v297[1];
                *char v296 = *v297;
                v296[1] = v299;
                *(void *)((char *)v293 + v292[7]) = *(void *)((char *)v65 + v292[7]);
                *(void *)((char *)v293 + v292[8]) = *(void *)((char *)v65 + v292[8]);
                *(void *)((char *)v293 + v292[9]) = *(void *)((char *)v65 + v292[9]);
                *((unsigned char *)v293 + v292[10]) = *((unsigned char *)v65 + v292[10]);
                uint64_t v300 = v292[11];
                uint64_t v301 = (void *)((char *)v293 + v300);
                unsigned __int8 v302 = (void *)((char *)v65 + v300);
                uint64_t v303 = v302[1];
                *uint64_t v301 = *v302;
                v301[1] = v303;
                uint64_t v304 = v292[12];
                unsigned __int8 v305 = (void *)((char *)v293 + v304);
                uint64_t v306 = (void *)((char *)v65 + v304);
                uint64_t v307 = v306[1];
                *unsigned __int8 v305 = *v306;
                v305[1] = v307;
                uint64_t v308 = v292[13];
                v584 = v293;
                v579 = (char *)v293 + v308;
                uint64_t v309 = (char *)v65 + v308;
                uint64_t v310 = type metadata accessor for VisualUnderstanding.ImageRegion();
                uint64_t v311 = *(void *)(v310 - 8);
                uint64_t v312 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v311 + 48);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v312(v309, 1, v310))
                {
                  uint64_t v313 = sub_10000F214(&qword_100524BD0);
                  memcpy(v579, v309, *(void *)(*(void *)(v313 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v311 + 16))(v579, v309, v310);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v311 + 56))(v579, 0, 1, v310);
                }
                uint64_t v383 = v294[14];
                uint64_t v66 = v591;
                uint64_t v384 = (char *)v584 + v383;
                uint64_t v385 = (char *)v65 + v383;
                unint64_t v386 = *((void *)v385 + 1);
                if (v386 >> 60 == 15)
                {
                  *(_OWORD *)uint64_t v384 = *(_OWORD *)v385;
                }
                else
                {
                  uint64_t v387 = *(void *)v385;
                  sub_100038528(*(void *)v385, *((void *)v385 + 1));
                  *(void *)uint64_t v384 = v387;
                  *((void *)v384 + 1) = v386;
                }
                uint64_t v388 = v294[15];
                uint64_t v64 = v584;
                int v389 = (void *)((char *)v584 + v388);
                BOOL v390 = (void *)((char *)v65 + v388);
                if (*v390)
                {
                  uint64_t v391 = v390[1];
                  uint64_t v392 = v390[2];
                  *int v389 = *v390;
                  v389[1] = v391;
                  v389[2] = v392;
                  goto LABEL_90;
                }
                *(_OWORD *)int v389 = *(_OWORD *)v390;
                v389[2] = v390[2];
                break;
              case 2:
                uint64_t v314 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v314 - 8) + 16))(v64, v65, v314);
                uint64_t v315 = (int *)type metadata accessor for TextDetectorResult(0);
                *(_DWORD *)((char *)v64 + v315[5]) = *(_DWORD *)((char *)v65 + v315[5]);
                uint64_t v316 = v315[6];
                uint64_t v317 = (_OWORD *)((char *)v64 + v316);
                uint64_t v318 = (_OWORD *)((char *)v65 + v316);
                long long v319 = v318[3];
                v317[2] = v318[2];
                v317[3] = v319;
                long long v320 = v318[1];
                _OWORD *v317 = *v318;
                v317[1] = v320;
                uint64_t v321 = v315[7];
                v322 = (void *)((char *)v64 + v321);
                uint64_t v323 = (void *)((char *)v65 + v321);
                uint64_t v325 = *v323;
                uint64_t v324 = v323[1];
                void *v322 = v325;
                v322[1] = v324;
                *(void *)((char *)v64 + v315[8]) = *(void *)((char *)v65 + v315[8]);
                *(void *)((char *)v64 + v315[9]) = *(void *)((char *)v65 + v315[9]);
                *(void *)((char *)v64 + v315[10]) = *(void *)((char *)v65 + v315[10]);
                *(void *)((char *)v64 + v315[11]) = *(void *)((char *)v65 + v315[11]);
                *(void *)((char *)v64 + v315[12]) = *(void *)((char *)v65 + v315[12]);
                uint64_t v326 = v315[13];
                uint64_t v327 = *(void **)((char *)v65 + v326);
                *(void *)((char *)v64 + v326) = v327;
                *((unsigned char *)v64 + v315[14]) = *((unsigned char *)v65 + v315[14]);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v328 = v327;
                break;
              case 3:
              case 4:
                uint64_t v127 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v127 - 8) + 16))(v64, v65, v127);
                BOOL v128 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
                *(_DWORD *)((char *)v64 + v128[5]) = *(_DWORD *)((char *)v65 + v128[5]);
                uint64_t v129 = v128[6];
                Swift::Int v130 = (_OWORD *)((char *)v64 + v129);
                uint64_t v131 = (_OWORD *)((char *)v65 + v129);
                long long v132 = v131[3];
                v130[2] = v131[2];
                v130[3] = v132;
                long long v133 = v131[1];
                *Swift::Int v130 = *v131;
                v130[1] = v133;
                uint64_t v134 = v128[7];
                uint64_t v135 = (void *)((char *)v64 + v134);
                uint64_t v136 = (void *)((char *)v65 + v134);
                uint64_t v138 = *v136;
                uint64_t v137 = v136[1];
                *uint64_t v135 = v138;
                v135[1] = v137;
                *(void *)((char *)v64 + v128[8]) = *(void *)((char *)v65 + v128[8]);
                *(void *)((char *)v64 + v128[9]) = *(void *)((char *)v65 + v128[9]);
                *(void *)((char *)v64 + v128[10]) = *(void *)((char *)v65 + v128[10]);
LABEL_90:
                swift_bridgeObjectRetain();
                swift_retain();
                break;
              case 5:
                uint64_t v329 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v329 - 8) + 16))(v64, v65, v329);
                unsigned __int8 v290 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
                goto LABEL_66;
              default:
                uint64_t v289 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v289 - 8) + 16))(v64, v65, v289);
                unsigned __int8 v290 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_66:
                *(_DWORD *)((char *)v64 + v290[5]) = *(_DWORD *)((char *)v65 + v290[5]);
                uint64_t v330 = v290[6];
                v331 = (_OWORD *)((char *)v64 + v330);
                v332 = (_OWORD *)((char *)v65 + v330);
                long long v333 = v332[3];
                v331[2] = v332[2];
                v331[3] = v333;
                long long v334 = v332[1];
                _OWORD *v331 = *v332;
                v331[1] = v334;
                uint64_t v335 = v290[7];
                uint64_t v336 = (void *)((char *)v64 + v335);
                uint64_t v337 = (void *)((char *)v65 + v335);
                uint64_t v339 = *v337;
                uint64_t v338 = v337[1];
                *uint64_t v336 = v339;
                v336[1] = v338;
                *(void *)((char *)v64 + v290[8]) = *(void *)((char *)v65 + v290[8]);
                *(void *)((char *)v64 + v290[9]) = *(void *)((char *)v65 + v290[9]);
                swift_bridgeObjectRetain();
                break;
            }
            swift_storeEnumTagMultiPayload();
          }
          swift_storeEnumTagMultiPayload();
          goto LABEL_93;
        case 3u:
          uint64_t v103 = *v65;
          uint64_t v104 = (void *)v65[1];
          uint64_t v587 = v66;
          uint64_t v105 = v65[2];
          unint64_t v106 = v65[3];
          Swift::String v107 = v64;
          uint64_t v109 = v65[4];
          uint64_t v108 = v65[5];
          uint64_t v111 = v65[6];
          uint64_t v110 = v65[7];
          sub_100050624((void *)*v65, v104, v105, v106);
          *Swift::String v107 = v103;
          v107[1] = v104;
          v107[2] = v105;
          v107[3] = v106;
          uint64_t v66 = v587;
          v107[4] = v109;
          v107[5] = v108;
          uint64_t v64 = v107;
          v107[6] = v111;
          v107[7] = v110;
          goto LABEL_93;
        case 4u:
          type metadata accessor for CVDetection();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v590 = v66;
              uint64_t v191 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v191 - 8) + 16))(v64, v65, v191);
              Swift::Int v192 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v64 + v192[5]) = *(_DWORD *)((char *)v65 + v192[5]);
              uint64_t v193 = v192[6];
              unint64_t v194 = (_OWORD *)((char *)v64 + v193);
              unint64_t v195 = (_OWORD *)((char *)v65 + v193);
              long long v196 = v195[3];
              v194[2] = v195[2];
              uint64_t v194[3] = v196;
              long long v197 = v195[1];
              *unint64_t v194 = *v195;
              v194[1] = v197;
              *(void *)((char *)v64 + v192[7]) = *(void *)((char *)v65 + v192[7]);
              *(void *)((char *)v64 + v192[8]) = *(void *)((char *)v65 + v192[8]);
              *(void *)((char *)v64 + v192[9]) = *(void *)((char *)v65 + v192[9]);
              *((unsigned char *)v64 + v192[10]) = *((unsigned char *)v65 + v192[10]);
              uint64_t v198 = v192[11];
              long long v199 = (void *)((char *)v64 + v198);
              uint64_t v200 = (void *)((char *)v65 + v198);
              uint64_t v201 = v200[1];
              *long long v199 = *v200;
              v199[1] = v201;
              uint64_t v202 = v192[12];
              uint64_t v203 = (void *)((char *)v64 + v202);
              uint64_t v204 = (void *)((char *)v65 + v202);
              uint64_t v205 = v204[1];
              *uint64_t v203 = *v204;
              v203[1] = v205;
              uint64_t v206 = v192[13];
              v582 = v64;
              v580 = (char *)v64 + v206;
              uint64_t v207 = (char *)v65 + v206;
              uint64_t v208 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v209 = *(void *)(v208 - 8);
              uint64_t v210 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v210(v207, 1, v208))
              {
                uint64_t v211 = sub_10000F214(&qword_100524BD0);
                memcpy(v580, v207, *(void *)(*(void *)(v211 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v209 + 16))(v580, v207, v208);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v209 + 56))(v580, 0, 1, v208);
              }
              uint64_t v340 = v192[14];
              uint64_t v64 = v582;
              uint64_t v341 = (char *)v582 + v340;
              uint64_t v342 = (char *)v65 + v340;
              unint64_t v343 = *((void *)v342 + 1);
              if (v343 >> 60 == 15)
              {
                *(_OWORD *)uint64_t v341 = *(_OWORD *)v342;
              }
              else
              {
                uint64_t v344 = *(void *)v342;
                sub_100038528(*(void *)v342, *((void *)v342 + 1));
                *(void *)uint64_t v341 = v344;
                *((void *)v341 + 1) = v343;
              }
              uint64_t v345 = v192[15];
              uint64_t v346 = (void *)((char *)v582 + v345);
              uint64_t v347 = (void *)((char *)v65 + v345);
              if (*v347)
              {
                uint64_t v348 = v347[1];
                uint64_t v349 = v347[2];
                *uint64_t v346 = *v347;
                v346[1] = v348;
                v346[2] = v349;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              else
              {
                *(_OWORD *)uint64_t v346 = *(_OWORD *)v347;
                v346[2] = v347[2];
              }
              uint64_t v66 = v590;
              break;
            case 2u:
              uint64_t v212 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v212 - 8) + 16))(v64, v65, v212);
              uint64_t v213 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v64 + v213[5]) = *(_DWORD *)((char *)v65 + v213[5]);
              uint64_t v214 = v213[6];
              uint64_t v215 = (_OWORD *)((char *)v64 + v214);
              uint64_t v216 = (_OWORD *)((char *)v65 + v214);
              long long v217 = v216[3];
              v215[2] = v216[2];
              v215[3] = v217;
              long long v218 = v216[1];
              *uint64_t v215 = *v216;
              v215[1] = v218;
              uint64_t v219 = v213[7];
              uint64_t v220 = (void *)((char *)v64 + v219);
              uint64_t v221 = (void *)((char *)v65 + v219);
              uint64_t v223 = *v221;
              uint64_t v222 = v221[1];
              *uint64_t v220 = v223;
              v220[1] = v222;
              *(void *)((char *)v64 + v213[8]) = *(void *)((char *)v65 + v213[8]);
              *(void *)((char *)v64 + v213[9]) = *(void *)((char *)v65 + v213[9]);
              *(void *)((char *)v64 + v213[10]) = *(void *)((char *)v65 + v213[10]);
              *(void *)((char *)v64 + v213[11]) = *(void *)((char *)v65 + v213[11]);
              *(void *)((char *)v64 + v213[12]) = *(void *)((char *)v65 + v213[12]);
              uint64_t v224 = v213[13];
              uint64_t v225 = *(void **)((char *)v65 + v224);
              *(void *)((char *)v64 + v224) = v225;
              *((unsigned char *)v64 + v213[14]) = *((unsigned char *)v65 + v213[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v226 = v225;
              break;
            case 3u:
            case 4u:
              uint64_t v70 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v70 - 8) + 16))(v64, v65, v70);
              uint64_t v71 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v64 + v71[5]) = *(_DWORD *)((char *)v65 + v71[5]);
              uint64_t v72 = v71[6];
              char v73 = (_OWORD *)((char *)v64 + v72);
              char v74 = (_OWORD *)((char *)v65 + v72);
              long long v75 = v74[3];
              v73[2] = v74[2];
              v73[3] = v75;
              long long v76 = v74[1];
              *char v73 = *v74;
              v73[1] = v76;
              uint64_t v77 = v71[7];
              char v78 = (void *)((char *)v64 + v77);
              unint64_t v79 = (void *)((char *)v65 + v77);
              uint64_t v81 = *v79;
              uint64_t v80 = v79[1];
              *char v78 = v81;
              v78[1] = v80;
              *(void *)((char *)v64 + v71[8]) = *(void *)((char *)v65 + v71[8]);
              *(void *)((char *)v64 + v71[9]) = *(void *)((char *)v65 + v71[9]);
              *(void *)((char *)v64 + v71[10]) = *(void *)((char *)v65 + v71[10]);
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5u:
              uint64_t v227 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v227 - 8) + 16))(v64, v65, v227);
              uint64_t v190 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_54;
            default:
              uint64_t v189 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v189 - 8) + 16))(v64, v65, v189);
              uint64_t v190 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_54:
              *(_DWORD *)((char *)v64 + v190[5]) = *(_DWORD *)((char *)v65 + v190[5]);
              uint64_t v228 = v190[6];
              uint64_t v229 = (_OWORD *)((char *)v64 + v228);
              uint64_t v230 = (_OWORD *)((char *)v65 + v228);
              long long v231 = v230[3];
              v229[2] = v230[2];
              v229[3] = v231;
              long long v232 = v230[1];
              *uint64_t v229 = *v230;
              v229[1] = v232;
              uint64_t v233 = v190[7];
              uint64_t v234 = (void *)((char *)v64 + v233);
              uint64_t v235 = (void *)((char *)v65 + v233);
              uint64_t v237 = *v235;
              uint64_t v236 = v235[1];
              *uint64_t v234 = v237;
              v234[1] = v236;
              *(void *)((char *)v64 + v190[8]) = *(void *)((char *)v65 + v190[8]);
              *(void *)((char *)v64 + v190[9]) = *(void *)((char *)v65 + v190[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v350 = sub_10000F214(&qword_10051A328);
          uint64_t v351 = *(int *)(v350 + 48);
          uint64_t v352 = *(void **)((char *)v65 + v351);
          *(void *)((char *)v64 + v351) = v352;
          uint64_t v353 = *(int *)(v350 + 64);
          uint64_t v354 = (void *)((char *)v64 + v353);
          uint64_t v355 = (void *)((char *)v65 + v353);
          uint64_t v356 = v355[1];
          *uint64_t v354 = *v355;
          v354[1] = v356;
          id v357 = v352;
          swift_bridgeObjectRetain();
          goto LABEL_93;
        case 5u:
          uint64_t v112 = sub_10000F214(&qword_10051A320);
          uint64_t v113 = *(void *)(v112 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v113 + 48))(v65, 1, v112))
          {
            uint64_t v114 = type metadata accessor for DataDetectorState(0);
            memcpy(v64, v65, *(void *)(*(void *)(v114 - 8) + 64));
          }
          else
          {
            uint64_t v141 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v141 - 8) + 16))(v64, v65, v141);
            char v142 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)v64 + v142[5]) = *(_DWORD *)((char *)v65 + v142[5]);
            uint64_t v143 = v142[6];
            char v144 = (_OWORD *)((char *)v64 + v143);
            uint64_t v145 = (_OWORD *)((char *)v65 + v143);
            long long v146 = v145[3];
            id v144[2] = v145[2];
            v144[3] = v146;
            long long v147 = v145[1];
            *char v144 = *v145;
            v144[1] = v147;
            uint64_t v148 = v142[7];
            uint64_t v149 = (void *)((char *)v64 + v148);
            uint64_t v150 = (void *)((char *)v65 + v148);
            uint64_t v152 = *v150;
            uint64_t v151 = v150[1];
            *uint64_t v149 = v152;
            v149[1] = v151;
            *(void *)((char *)v64 + v142[8]) = *(void *)((char *)v65 + v142[8]);
            *(void *)((char *)v64 + v142[9]) = *(void *)((char *)v65 + v142[9]);
            *(void *)((char *)v64 + v142[10]) = *(void *)((char *)v65 + v142[10]);
            *(void *)((char *)v64 + v142[11]) = *(void *)((char *)v65 + v142[11]);
            *(void *)((char *)v64 + v142[12]) = *(void *)((char *)v65 + v142[12]);
            uint64_t v153 = v142[13];
            unint64_t v154 = *(void **)((char *)v65 + v153);
            *(void *)((char *)v64 + v153) = v154;
            *((unsigned char *)v64 + v142[14]) = *((unsigned char *)v65 + v142[14]);
            uint64_t v155 = *(int *)(v112 + 48);
            uint64_t v588 = v66;
            unint64_t v156 = *(void **)((char *)v65 + v155);
            *(void *)((char *)v64 + v155) = v156;
            uint64_t v157 = *(void (**)(void *, void, uint64_t, uint64_t))(v113 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v158 = v154;
            id v159 = v156;
            uint64_t v66 = v588;
            v157(v64, 0, 1, v112);
          }
          goto LABEL_93;
        case 6u:
          uint64_t v115 = v65[1];
          if (v115)
          {
            *uint64_t v64 = *v65;
            v64[1] = v115;
            *((unsigned char *)v64 + 16) = *((unsigned char *)v65 + 16);
            uint64_t v116 = v65[4];
            v64[3] = v65[3];
            v64[4] = v116;
            uint64_t v117 = v65[6];
            v64[5] = v65[5];
            v64[6] = v117;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v160 = *((_OWORD *)v65 + 1);
            *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
            *((_OWORD *)v64 + 1) = v160;
            *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
            v64[6] = v65[6];
          }
          goto LABEL_93;
        case 7u:
          uint64_t v118 = v65[1];
          if (v118)
          {
            *uint64_t v64 = *v65;
            v64[1] = v118;
            uint64_t v119 = v65[3];
            v64[2] = v65[2];
            v64[3] = v119;
            uint64_t v120 = v65[5];
            v64[4] = v65[4];
            v64[5] = v120;
            uint64_t v122 = (void *)v65[6];
            uint64_t v121 = v65[7];
            v64[6] = v122;
            v64[7] = v121;
            v64[8] = v65[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v123 = v122;
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v161 = *((_OWORD *)v65 + 3);
            *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
            *((_OWORD *)v64 + 3) = v161;
            v64[8] = v65[8];
            long long v162 = *((_OWORD *)v65 + 1);
            *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
            *((_OWORD *)v64 + 1) = v162;
          }
          goto LABEL_93;
        case 8u:
          uint64_t v124 = sub_10000F214(&qword_10051A428);
          uint64_t v125 = *(void *)(v124 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v125 + 48))(v65, 1, v124))
          {
            uint64_t v126 = type metadata accessor for EventLookupState(0);
            memcpy(v64, v65, *(void *)(*(void *)(v126 - 8) + 64));
          }
          else
          {
            uint64_t v163 = v65[1];
            *uint64_t v64 = *v65;
            v64[1] = v163;
            uint64_t v164 = (int *)type metadata accessor for EventLookupItem(0);
            uint64_t v165 = v164[5];
            Swift::Int v166 = (char *)v64 + v165;
            Swift::Int v167 = (char *)v65 + v165;
            uint64_t v589 = v66;
            uint64_t v168 = type metadata accessor for Date();
            uint64_t v169 = (char *)v64;
            uint64_t v170 = *(void (**)(char *, char *, uint64_t))(*(void *)(v168 - 8) + 16);
            swift_bridgeObjectRetain();
            v170(v166, v167, v168);
            uint64_t v171 = v168;
            uint64_t v66 = v589;
            v170(&v169[v164[6]], (char *)v65 + v164[6], v171);
            uint64_t v64 = v169;
            uint64_t v172 = v164[7];
            uint64_t v173 = &v169[v172];
            uint64_t v174 = (void *)((char *)v65 + v172);
            uint64_t v175 = v174[1];
            *(void *)uint64_t v173 = *v174;
            *((void *)v173 + 1) = v175;
            uint64_t v176 = v164[8];
            uint64_t v177 = &v169[v176];
            unint64_t v178 = (void *)((char *)v65 + v176);
            uint64_t v179 = v178[1];
            *(void *)uint64_t v177 = *v178;
            *((void *)v177 + 1) = v179;
            v169[v164[9]] = *((unsigned char *)v65 + v164[9]);
            uint64_t v180 = *(int *)(v124 + 48);
            uint64_t v181 = &v169[v180];
            uint64_t v182 = (void *)((char *)v65 + v180);
            uint64_t v183 = v182[1];
            *(void *)uint64_t v181 = *v182;
            *((void *)v181 + 1) = v183;
            uint64_t v184 = *(int *)(v124 + 64);
            uint64_t v185 = &v169[v184];
            uint64_t v186 = (void *)((char *)v65 + v184);
            uint64_t v187 = v186[1];
            *(void *)uint64_t v185 = *v186;
            *((void *)v185 + 1) = v187;
            unint64_t v188 = *(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v188(v64, 0, 1, v124);
          }
          goto LABEL_93;
        case 9u:
          if (*v65)
          {
            uint64_t v83 = v65[1];
            uint64_t v82 = v65[2];
            *uint64_t v64 = *v65;
            v64[1] = v83;
            uint64_t v85 = v65[3];
            uint64_t v84 = v65[4];
            v64[2] = v82;
            v64[3] = v85;
            uint64_t v87 = v65[5];
            uint64_t v86 = v65[6];
            v64[4] = v84;
            v64[5] = v87;
            uint64_t v88 = v65[7];
            v64[6] = v86;
            v64[7] = v88;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v139 = *((_OWORD *)v65 + 1);
            *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
            *((_OWORD *)v64 + 1) = v139;
            long long v140 = *((_OWORD *)v65 + 3);
            *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
            *((_OWORD *)v64 + 3) = v140;
          }
LABEL_93:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v64, v65, *(void *)(v593 + 64));
          break;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v593 + 56))(v64, 0, 1, v66);
    }
    uint64_t v393 = sub_10000F214(&qword_100525F58);
    *(void *)((char *)v64 + *(int *)(v393 + 28)) = *(void *)((char *)v65 + *(int *)(v393 + 28));
    uint64_t v394 = v596[13];
    uint64_t v395 = v596[14];
    uint64_t v396 = v598 + v394;
    uint64_t v397 = v597 + v394;
    *(unsigned char *)uint64_t v396 = *(unsigned char *)v397;
    *(void *)(v396 + 8) = *(void *)(v397 + 8);
    uint64_t v398 = v598 + v395;
    uint64_t v399 = v597 + v395;
    *(unsigned char *)uint64_t v398 = *(unsigned char *)v399;
    *(void *)(v398 + 8) = *(void *)(v399 + 8);
    uint64_t v400 = v596[15];
    uint64_t v401 = v598 + v400;
    uint64_t v402 = v597 + v400;
    uint64_t v403 = type metadata accessor for UUID();
    v594 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v403 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v594(v401, v402, v403);
    uint64_t v404 = sub_10000F214(&qword_10051C250);
    *(void *)(v401 + *(int *)(v404 + 28)) = *(void *)(v402 + *(int *)(v404 + 28));
    uint64_t v405 = v596[16];
    uint64_t v406 = v596[17];
    uint64_t v407 = (void *)(v598 + v405);
    v408 = (void *)(v597 + v405);
    uint64_t v409 = v408[1];
    *uint64_t v407 = *v408;
    v407[1] = v409;
    v407[2] = v408[2];
    uint64_t v410 = v598 + v406;
    uint64_t v411 = v597 + v406;
    *(unsigned char *)uint64_t v410 = *(unsigned char *)v411;
    *(void *)(v410 + 8) = *(void *)(v411 + 8);
    uint64_t v412 = v596[18];
    uint64_t v413 = v596[19];
    uint64_t v414 = v598 + v412;
    uint64_t v415 = v597 + v412;
    *(unsigned char *)uint64_t v414 = *(unsigned char *)v415;
    *(void *)(v414 + 8) = *(void *)(v415 + 8);
    *(unsigned char *)(v414 + 16) = *(unsigned char *)(v415 + 16);
    uint64_t v416 = v598 + v413;
    uint64_t v417 = v597 + v413;
    *(unsigned char *)uint64_t v416 = *(unsigned char *)v417;
    *(void *)(v416 + 8) = *(void *)(v417 + 8);
    uint64_t v418 = v596[20];
    uint64_t v419 = v596[21];
    uint64_t v420 = v598 + v418;
    uint64_t v421 = v597 + v418;
    *(unsigned char *)uint64_t v420 = *(unsigned char *)v421;
    *(void *)(v420 + 8) = *(void *)(v421 + 8);
    uint64_t v422 = v598 + v419;
    uint64_t v423 = v597 + v419;
    *(unsigned char *)uint64_t v422 = *(unsigned char *)v423;
    *(void *)(v422 + 8) = *(void *)(v423 + 8);
    uint64_t v424 = v596[22];
    uint64_t v425 = v596[23];
    uint64_t v426 = (void *)(v598 + v424);
    uint64_t v427 = (void *)(v597 + v424);
    uint64_t v428 = v427[1];
    *uint64_t v426 = *v427;
    v426[1] = v428;
    uint64_t v429 = v598 + v425;
    uint64_t v430 = v597 + v425;
    *(unsigned char *)uint64_t v429 = *(unsigned char *)v430;
    *(void *)(v429 + 8) = *(void *)(v430 + 8);
    uint64_t v431 = v596[24];
    uint64_t v432 = v596[25];
    uint64_t v433 = (void *)(v598 + v431);
    __int16 v434 = (void *)(v597 + v431);
    uint64_t v435 = v434[1];
    *uint64_t v433 = *v434;
    v433[1] = v435;
    uint64_t v436 = v598 + v432;
    uint64_t v437 = v597 + v432;
    v576 = *(void **)(v597 + v432);
    v577 = *(void **)(v597 + v432 + 8);
    char v438 = *(unsigned char *)(v597 + v432 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000ACAE0(v576, v577, v438);
    *(void *)uint64_t v436 = v576;
    *(void *)(v436 + 8) = v577;
    *(unsigned char *)(v436 + 16) = v438;
    *(void *)(v436 + 24) = *(void *)(v437 + 24);
    uint64_t v439 = v596[26];
    v440 = (void *)(v598 + v439);
    uint64_t v441 = v597 + v439;
    uint64_t v442 = *(void *)(v597 + v439);
    swift_retain();
    if ((~v442 & 0xF000000000000007) != 0) {
      swift_retain();
    }
    uint64_t v443 = *(void *)(v441 + 8);
    void *v440 = v442;
    v440[1] = v443;
    uint64_t v444 = v596[27];
    uint64_t v445 = v596[28];
    v446 = (void *)(v598 + v444);
    uint64_t v447 = v597 + v444;
    v449 = *(void **)v447;
    uint64_t v448 = *(void *)(v447 + 8);
    void *v446 = *(void *)v447;
    v446[1] = v448;
    v450 = (void *)(v598 + v445);
    v451 = (void *)(v597 + v445);
    uint64_t v452 = v451[1];
    void *v450 = *v451;
    v450[1] = v452;
    uint64_t v453 = v596[29];
    uint64_t v454 = v596[30];
    v455 = (void *)(v598 + v453);
    v456 = (void *)(v597 + v453);
    uint64_t v457 = v456[1];
    void *v455 = *v456;
    v455[1] = v457;
    uint64_t v458 = v598 + v454;
    uint64_t v459 = v597 + v454;
    v460 = *(void **)(v597 + v454);
    swift_retain();
    id v461 = v449;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v460)
    {
      *(void *)uint64_t v458 = v460;
      long long v462 = *(_OWORD *)(v459 + 32);
      *(_OWORD *)(v458 + 32) = v462;
      uint64_t v463 = v462;
      v464 = **(void (***)(uint64_t, uint64_t, uint64_t))(v462 - 8);
      id v465 = v460;
      v464(v458 + 8, v459 + 8, v463);
    }
    else
    {
      long long v466 = *(_OWORD *)(v459 + 16);
      *(_OWORD *)uint64_t v458 = *(_OWORD *)v459;
      *(_OWORD *)(v458 + 16) = v466;
      *(_OWORD *)(v458 + 32) = *(_OWORD *)(v459 + 32);
    }
    *(void *)(v458 + 48) = *(void *)(v459 + 48);
    uint64_t v467 = v596[31];
    uint64_t v468 = v596[32];
    uint64_t v469 = v598 + v467;
    uint64_t v470 = v597 + v467;
    *(void *)uint64_t v469 = *(void *)v470;
    uint64_t v471 = *(void *)(v470 + 24);
    *(_OWORD *)(v469 + 8) = *(_OWORD *)(v470 + 8);
    *(void *)(v469 + 24) = v471;
    v472 = (void *)(v598 + v468);
    v473 = (void *)(v597 + v468);
    uint64_t v595 = v473[1];
    void *v472 = *v473;
    v472[1] = v595;
    uint64_t v474 = v596[33];
    uint64_t v475 = v596[34];
    uint64_t v476 = v598 + v474;
    uint64_t v477 = v597 + v474;
    *(unsigned char *)uint64_t v476 = *(unsigned char *)v477;
    *(void *)(v476 + 8) = *(void *)(v477 + 8);
    v478 = (void *)(v598 + v475);
    v479 = (void *)(v597 + v475);
    uint64_t v585 = v479[1];
    void *v478 = *v479;
    v478[1] = v585;
    uint64_t v480 = v596[35];
    uint64_t v481 = v596[36];
    uint64_t v482 = v598 + v480;
    uint64_t v483 = v597 + v480;
    *(unsigned char *)uint64_t v482 = *(unsigned char *)v483;
    *(void *)(v482 + 8) = *(void *)(v483 + 8);
    v484 = (void *)(v598 + v481);
    v485 = (void *)(v597 + v481);
    uint64_t v486 = v485[1];
    void *v484 = *v485;
    v484[1] = v486;
    v484[2] = v485[2];
    uint64_t v487 = v596[37];
    uint64_t v488 = v596[38];
    uint64_t v489 = v598 + v487;
    uint64_t v490 = v597 + v487;
    *(unsigned char *)uint64_t v489 = *(unsigned char *)v490;
    *(void *)(v489 + 8) = *(void *)(v490 + 8);
    uint64_t v491 = v598 + v488;
    uint64_t v492 = v597 + v488;
    *(unsigned char *)uint64_t v491 = *(unsigned char *)v492;
    *(void *)(v491 + 8) = *(void *)(v492 + 8);
    uint64_t v493 = v596[39];
    uint64_t v494 = v596[40];
    uint64_t v495 = v598 + v493;
    uint64_t v496 = v597 + v493;
    *(unsigned char *)uint64_t v495 = *(unsigned char *)v496;
    *(void *)(v495 + 8) = *(void *)(v496 + 8);
    uint64_t v497 = v598 + v494;
    uint64_t v498 = v597 + v494;
    *(unsigned char *)uint64_t v497 = *(unsigned char *)v498;
    *(void *)(v497 + 8) = *(void *)(v498 + 8);
    uint64_t v499 = v596[41];
    uint64_t v500 = v596[42];
    uint64_t v501 = v598 + v499;
    uint64_t v502 = v597 + v499;
    *(unsigned char *)uint64_t v501 = *(unsigned char *)v502;
    *(void *)(v501 + 8) = *(void *)(v502 + 8);
    uint64_t v503 = v598 + v500;
    uint64_t v504 = v597 + v500;
    *(unsigned char *)uint64_t v503 = *(unsigned char *)v504;
    *(void *)(v503 + 8) = *(void *)(v504 + 8);
    uint64_t v505 = v596[43];
    uint64_t v506 = v596[44];
    uint64_t v507 = v598 + v505;
    uint64_t v508 = v597 + v505;
    *(unsigned char *)uint64_t v507 = *(unsigned char *)v508;
    *(void *)(v507 + 8) = *(void *)(v508 + 8);
    v509 = (void *)(v598 + v506);
    v510 = (void *)(v597 + v506);
    uint64_t v574 = v510[1];
    void *v509 = *v510;
    v509[1] = v574;
    uint64_t v511 = v596[45];
    uint64_t v512 = v596[46];
    v513 = (void *)(v598 + v511);
    v514 = (void *)(v597 + v511);
    uint64_t v573 = v514[1];
    void *v513 = *v514;
    v513[1] = v573;
    v515 = (void *)(v598 + v512);
    v516 = (void *)(v597 + v512);
    uint64_t v575 = v516[1];
    void *v515 = *v516;
    v515[1] = v575;
    uint64_t v517 = v596[47];
    uint64_t v518 = v596[48];
    uint64_t v519 = v598 + v517;
    uint64_t v520 = v597 + v517;
    *(unsigned char *)uint64_t v519 = *(unsigned char *)v520;
    *(void *)(v519 + 8) = *(void *)(v520 + 8);
    uint64_t v521 = v598 + v518;
    uint64_t v522 = v597 + v518;
    *(unsigned char *)uint64_t v521 = *(unsigned char *)v522;
    *(void *)(v521 + 8) = *(void *)(v522 + 8);
    uint64_t v523 = v596[49];
    uint64_t v524 = v596[50];
    uint64_t v525 = v598 + v523;
    uint64_t v526 = v597 + v523;
    *(unsigned char *)uint64_t v525 = *(unsigned char *)v526;
    *(void *)(v525 + 8) = *(void *)(v526 + 8);
    uint64_t v527 = v598 + v524;
    uint64_t v528 = v597 + v524;
    *(unsigned char *)uint64_t v527 = *(unsigned char *)v528;
    *(void *)(v527 + 8) = *(void *)(v528 + 8);
    uint64_t v529 = v596[51];
    uint64_t v530 = v596[52];
    uint64_t v531 = v598 + v529;
    uint64_t v532 = v597 + v529;
    *(unsigned char *)uint64_t v531 = *(unsigned char *)v532;
    *(void *)(v531 + 8) = *(void *)(v532 + 8);
    uint64_t v533 = v598 + v530;
    uint64_t v534 = v597 + v530;
    *(unsigned char *)uint64_t v533 = *(unsigned char *)v534;
    *(void *)(v533 + 8) = *(void *)(v534 + 8);
    uint64_t v535 = v596[53];
    uint64_t v536 = v596[54];
    uint64_t v537 = v598 + v535;
    uint64_t v538 = v597 + v535;
    *(unsigned char *)uint64_t v537 = *(unsigned char *)v538;
    *(void *)(v537 + 8) = *(void *)(v538 + 8);
    uint64_t v539 = v598 + v536;
    uint64_t v540 = v597 + v536;
    *(unsigned char *)uint64_t v539 = *(unsigned char *)v540;
    *(void *)(v539 + 8) = *(void *)(v540 + 8);
    uint64_t v541 = v596[56];
    *(void *)(v598 + v596[55]) = *(void *)(v597 + v596[55]);
    v542 = *(void **)(v597 + v541);
    *(void *)(v598 + v541) = v542;
    uint64_t v543 = v596[58];
    *(void *)(v598 + v596[57]) = *(void *)(v597 + v596[57]);
    *(void *)(v598 + v543) = *(void *)(v597 + v543);
    uint64_t v544 = v596[60];
    *(void *)(v598 + v596[59]) = *(void *)(v597 + v596[59]);
    *(void *)(v598 + v544) = *(void *)(v597 + v544);
    uint64_t v545 = v596[62];
    *(void *)(v598 + v596[61]) = *(void *)(v597 + v596[61]);
    v546 = (uint64_t *)(v598 + v545);
    v547 = (uint64_t *)(v597 + v545);
    uint64_t v572 = *(void *)(v597 + v545 + 24);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v548 = v542;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v572)
    {
      uint64_t v549 = *v547;
      unint64_t v550 = v547[1];
      sub_100038528(*v547, v550);
      uint64_t *v546 = v549;
      v546[1] = v550;
      uint64_t v551 = v547[3];
      v546[2] = v547[2];
      v546[3] = v551;
      uint64_t v552 = v547[5];
      v546[4] = v547[4];
      v546[5] = v552;
      uint64_t v553 = v547[7];
      v546[6] = v547[6];
      v546[7] = v553;
      uint64_t v554 = v547[9];
      v546[8] = v547[8];
      v546[9] = v554;
      v546[10] = v547[10];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v555 = *((_OWORD *)v547 + 3);
      *((_OWORD *)v546 + 2) = *((_OWORD *)v547 + 2);
      *((_OWORD *)v546 + 3) = v555;
      *((_OWORD *)v546 + 4) = *((_OWORD *)v547 + 4);
      v546[10] = v547[10];
      long long v556 = *((_OWORD *)v547 + 1);
      *(_OWORD *)v546 = *(_OWORD *)v547;
      *((_OWORD *)v546 + 1) = v556;
    }
    uint64_t v557 = v596[63];
    uint64_t v558 = v596[64];
    uint64_t v559 = *(void *)(v597 + v557);
    v546[11] = v547[11];
    *(void *)(v598 + v557) = v559;
    v560 = (void *)(v598 + v558);
    v561 = (void *)(v597 + v558);
    uint64_t v562 = v561[1];
    void *v560 = *v561;
    v560[1] = v562;
    uint64_t v563 = v596[65];
    v564 = (char *)(v598 + v563);
    v565 = (char *)(v597 + v563);
    uint64_t v566 = type metadata accessor for AccessibilityTechnologies();
    uint64_t v567 = *(void *)(v566 - 8);
    v568 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v567 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v568(v565, 1, v566))
    {
      uint64_t v569 = sub_10000F214(&qword_100525F60);
      memcpy(v564, v565, *(void *)(*(void *)(v569 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v567 + 16))(v564, v565, v566);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v567 + 56))(v564, 0, 1, v566);
    }
    v570 = (int *)sub_10000F214(&qword_100519A10);
    v564[v570[9]] = v565[v570[9]];
    *(void *)&v564[v570[10]] = *(void *)&v565[v570[10]];
    v564[v570[11]] = v565[v570[11]];
    unint64_t v20 = v598;
  }
  swift_retain();
  return v20;
}

uint64_t sub_10028065C(uint64_t a1, int *a2)
{
  sub_100161890(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v4 = a1 + a2[9];
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  char v73 = a2;
  uint64_t v6 = a1 + a2[10];
  uint64_t v7 = v6 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  char v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v7 + v8[10];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v13 = v7 + v8[18];
  if (!v12(v13, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v14 = v7 + v8[22];
  if (!v12(v14, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = a1 + v73[12];
  uint64_t v16 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v18 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v18)
          {
            case 0:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v15, v50);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v51 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v15, v51);
              uint64_t v52 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v53 = v15 + v52[13];
              uint64_t v54 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v55 = *(void *)(v54 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54)) {
                (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
              }
              uint64_t v56 = (uint64_t *)(v15 + v52[14]);
              unint64_t v57 = v56[1];
              if (v57 >> 60 != 15) {
                sub_100038B34(*v56, v57);
              }
              if (*(void *)(v15 + v52[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v58 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v15, v58);
              uint64_t v59 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v19 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v15, v19);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v60 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v15, v60);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v61 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v15 + *(int *)(v61 + 48)), *(void **)(v15 + *(int *)(v61 + 48) + 8), *(void *)(v15 + *(int *)(v61 + 48) + 16), *(unsigned char *)(v15 + *(int *)(v61 + 48) + 24));
          sub_10004FFD4(*(void **)(v15 + *(int *)(v61 + 64)), *(void **)(v15 + *(int *)(v61 + 64) + 8), *(void *)(v15 + *(int *)(v61 + 64) + 16), *(unsigned char *)(v15 + *(int *)(v61 + 64) + 24));
        }
        else
        {
          switch(v18)
          {
            case 0:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v15, v62);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v63 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v15, v63);
              uint64_t v64 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v65 = v15 + v64[13];
              uint64_t v66 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v67 = *(void *)(v66 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66)) {
                (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
              }
              uint64_t v68 = (uint64_t *)(v15 + v64[14]);
              unint64_t v69 = v68[1];
              if (v69 >> 60 != 15) {
                sub_100038B34(*v68, v69);
              }
              if (*(void *)(v15 + v64[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v70 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8))(v15, v70);
              uint64_t v71 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v24 = *(int *)(v71 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v30 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v15, v30);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v72 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8))(v15, v72);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v15, *(void **)(v15 + 8), *(void *)(v15 + 16), *(void *)(v15 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v15, v31);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v32 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v15, v32);
            uint64_t v33 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v34 = v15 + v33[13];
            uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v36 = *(void *)(v35 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
              (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
            }
            uint64_t v37 = (uint64_t *)(v15 + v33[14]);
            unint64_t v38 = v37[1];
            if (v38 >> 60 != 15) {
              sub_100038B34(*v37, v38);
            }
            if (*(void *)(v15 + v33[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v39 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v15, v39);
            uint64_t v40 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v20 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v15, v20);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v41 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v15, v41);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v21 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21))
        {
          uint64_t v22 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v15, v22);
          uint64_t v23 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v24 = *(int *)(v21 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v15 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v15 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v25 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v15, 1, v25)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v26 = type metadata accessor for EventLookupItem(0);
        uint64_t v27 = v15 + *(int *)(v26 + 20);
        uint64_t v28 = type metadata accessor for Date();
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);
        v29(v27, v28);
        v29(v15 + *(int *)(v26 + 24), v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v15) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v42 = a1 + v73[15];
  uint64_t v43 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v42, v43);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(a1 + v73[25]), *(void **)(a1 + v73[25] + 8), *(unsigned char *)(a1 + v73[25] + 16));
  swift_release();
  if ((~*(void *)(a1 + v73[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (id *)(a1 + v73[30]);
  if (*v44)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v44 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = (uint64_t *)(a1 + v73[62]);
  if (v45[3])
  {
    sub_100038B34(*v45, v45[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v46 = a1 + v73[65];
  uint64_t v47 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v48 = *(void *)(v47 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47)) {
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  }
  sub_10000F214(&qword_100519A10);

  return swift_release();
}

uint64_t sub_100281A64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10016180C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  char v8 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v8;
  char v9 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v9;
  char v10 = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v10;
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  char v13 = *(unsigned char *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000FCA0();
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 80) = v13;
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  else
  {
    *uint64_t v15 = *v16;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v594 = a3;
  uint64_t v595 = a2;
  uint64_t v18 = a3[10];
  uint64_t v596 = a1;
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_WORD *)(v19 + 4) = *(_WORD *)(v20 + 4);
  uint64_t v585 = (int *)type metadata accessor for AppConfiguration();
  uint64_t v21 = v585[5];
  uint64_t v22 = v19 + v21;
  uint64_t v23 = v20 + v21;
  *(unsigned char *)uint64_t v22 = *(unsigned char *)(v20 + v21);
  *(unsigned char *)(v22 + 1) = *(unsigned char *)(v20 + v21 + 1);
  *(_OWORD *)(v22 + 8) = *(_OWORD *)(v20 + v21 + 8);
  *(_DWORD *)(v22 + 24) = *(_DWORD *)(v20 + v21 + 24);
  *(_WORD *)(v22 + 28) = *(_WORD *)(v20 + v21 + 28);
  uint64_t v24 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v25 = v24[10];
  v583 = (void *)(v22 + v25);
  uint64_t v26 = (const void *)(v23 + v25);
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v27 - 8);
  v579 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  if (v579(v26, 1, v27))
  {
    uint64_t v29 = sub_10000F214(&qword_10051E070);
    memcpy(v583, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v583, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v583, 0, 1, v27);
  }
  *(unsigned char *)(v22 + v24[11]) = *(unsigned char *)(v23 + v24[11]);
  uint64_t v30 = v24[12];
  uint64_t v31 = v22 + v30;
  uint64_t v32 = v23 + v30;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(void *)(v22 + v24[13]) = *(void *)(v23 + v24[13]);
  *(unsigned char *)(v22 + v24[14]) = *(unsigned char *)(v23 + v24[14]);
  *(unsigned char *)(v22 + v24[15]) = *(unsigned char *)(v23 + v24[15]);
  *(unsigned char *)(v22 + v24[16]) = *(unsigned char *)(v23 + v24[16]);
  *(unsigned char *)(v22 + v24[17]) = *(unsigned char *)(v23 + v24[17]);
  uint64_t v33 = v24[18];
  uint64_t v34 = (void *)(v22 + v33);
  uint64_t v35 = (const void *)(v23 + v33);
  if (v579((const void *)(v23 + v33), 1, v27))
  {
    uint64_t v36 = sub_10000F214(&qword_10051E070);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    uint64_t v37 = v28;
  }
  else
  {
    unint64_t v38 = v35;
    uint64_t v37 = v28;
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v34, v38, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v34, 0, 1, v27);
  }
  *(unsigned char *)(v22 + v24[19]) = *(unsigned char *)(v23 + v24[19]);
  *(unsigned char *)(v22 + v24[20]) = *(unsigned char *)(v23 + v24[20]);
  *(unsigned char *)(v22 + v24[21]) = *(unsigned char *)(v23 + v24[21]);
  uint64_t v39 = v24[22];
  uint64_t v40 = (void *)(v22 + v39);
  uint64_t v41 = (const void *)(v23 + v39);
  if (v579((const void *)(v23 + v39), 1, v27))
  {
    uint64_t v42 = sub_10000F214(&qword_10051E070);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v37 + 16))(v40, v41, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v40, 0, 1, v27);
  }
  uint64_t v43 = v594;
  *(unsigned char *)(v19 + v585[6]) = *(unsigned char *)(v20 + v585[6]);
  uint64_t v44 = v585[7];
  uint64_t v45 = (void *)(v19 + v44);
  uint64_t v46 = (void *)(v20 + v44);
  uint64_t v47 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v47;
  *(_WORD *)(v19 + v585[8]) = *(_WORD *)(v20 + v585[8]);
  *(_WORD *)(v19 + v585[10]) = *(_WORD *)(v20 + v585[10]);
  uint64_t v48 = v585[12];
  uint64_t v49 = v19 + v48;
  uint64_t v50 = v20 + v48;
  *(_WORD *)uint64_t v49 = *(_WORD *)v50;
  *(unsigned char *)(v49 + 2) = *(unsigned char *)(v50 + 2);
  uint64_t v51 = v585[13];
  uint64_t v52 = (void *)(v19 + v51);
  uint64_t v53 = (void *)(v20 + v51);
  uint64_t v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v55 = sub_10000F214(&qword_100525F50);
  *(void *)(v19 + *(int *)(v55 + 28)) = *(void *)(v20 + *(int *)(v55 + 28));
  uint64_t v56 = v594[11];
  uint64_t v57 = v594[12];
  uint64_t v58 = (void *)(v596 + v56);
  uint64_t v59 = (void *)(v595 + v56);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = (void *)(v596 + v57);
  uint64_t v62 = (void *)(v595 + v57);
  uint64_t v63 = type metadata accessor for ResultLookupState();
  uint64_t v591 = *(void *)(v63 - 8);
  uint64_t v64 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v591 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v64(v62, 1, v63))
  {
    uint64_t v65 = sub_10000F214(&qword_10051A308);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v66 = v62[1];
        *uint64_t v61 = *v62;
        v61[1] = v66;
        swift_bridgeObjectRetain();
        goto LABEL_91;
      case 1u:
        *uint64_t v61 = *v62;
        swift_bridgeObjectRetain();
        goto LABEL_91;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v88 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v88)
          {
            case 1:
              uint64_t v589 = v63;
              uint64_t v239 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v239 - 8) + 16))(v61, v62, v239);
              uint64_t v240 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v61 + v240[5]) = *(_DWORD *)((char *)v62 + v240[5]);
              uint64_t v241 = v240[6];
              Swift::Int v242 = (_OWORD *)((char *)v61 + v241);
              uint64_t v243 = (_OWORD *)((char *)v62 + v241);
              long long v244 = v243[3];
              v242[2] = v243[2];
              v242[3] = v244;
              long long v245 = v243[1];
              *Swift::Int v242 = *v243;
              v242[1] = v245;
              *(void *)((char *)v61 + v240[7]) = *(void *)((char *)v62 + v240[7]);
              *(void *)((char *)v61 + v240[8]) = *(void *)((char *)v62 + v240[8]);
              *(void *)((char *)v61 + v240[9]) = *(void *)((char *)v62 + v240[9]);
              *((unsigned char *)v61 + v240[10]) = *((unsigned char *)v62 + v240[10]);
              uint64_t v246 = v240[11];
              long long v247 = (void *)((char *)v61 + v246);
              long long v248 = (void *)((char *)v62 + v246);
              uint64_t v249 = v61;
              uint64_t v250 = v248[1];
              *long long v247 = *v248;
              v247[1] = v250;
              uint64_t v251 = v240[12];
              uint64_t v252 = (void *)((char *)v249 + v251);
              uint64_t v253 = (void *)((char *)v62 + v251);
              uint64_t v254 = v253[1];
              void *v252 = *v253;
              v252[1] = v254;
              uint64_t v255 = v240[13];
              v581 = v249;
              v576 = (char *)v249 + v255;
              uint64_t v256 = (char *)v62 + v255;
              uint64_t v257 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v258 = *(void *)(v257 - 8);
              uint64_t v259 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v258 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v259(v256, 1, v257))
              {
                uint64_t v260 = sub_10000F214(&qword_100524BD0);
                memcpy(v576, v256, *(void *)(*(void *)(v260 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v258 + 16))(v576, v256, v257);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v258 + 56))(v576, 0, 1, v257);
              }
              uint64_t v355 = v240[14];
              uint64_t v61 = v581;
              uint64_t v356 = (char *)v581 + v355;
              id v357 = (char *)v62 + v355;
              unint64_t v358 = *((void *)v357 + 1);
              uint64_t v63 = v589;
              if (v358 >> 60 == 15)
              {
                *(_OWORD *)uint64_t v356 = *(_OWORD *)v357;
              }
              else
              {
                uint64_t v359 = *(void *)v357;
                sub_100038528(*(void *)v357, *((void *)v357 + 1));
                *(void *)uint64_t v356 = v359;
                *((void *)v356 + 1) = v358;
              }
              uint64_t v360 = v240[15];
              unint64_t v361 = (void *)((char *)v581 + v360);
              uint64_t v362 = (void *)((char *)v62 + v360);
              if (*v362)
              {
                uint64_t v363 = v362[1];
                uint64_t v364 = v362[2];
                void *v361 = *v362;
                v361[1] = v363;
                v361[2] = v364;
                goto LABEL_80;
              }
              *(_OWORD *)unint64_t v361 = *(_OWORD *)v362;
              v361[2] = v362[2];
              break;
            case 2:
              uint64_t v261 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v261 - 8) + 16))(v61, v62, v261);
              uint64_t v262 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v61 + v262[5]) = *(_DWORD *)((char *)v62 + v262[5]);
              uint64_t v263 = v262[6];
              int v264 = (_OWORD *)((char *)v61 + v263);
              uint64_t v265 = (_OWORD *)((char *)v62 + v263);
              long long v266 = v265[3];
              v264[2] = v265[2];
              v264[3] = v266;
              long long v267 = v265[1];
              *int v264 = *v265;
              v264[1] = v267;
              uint64_t v268 = v262[7];
              long long v269 = (void *)((char *)v61 + v268);
              uint64_t v270 = (void *)((char *)v62 + v268);
              uint64_t v272 = *v270;
              uint64_t v271 = v270[1];
              *long long v269 = v272;
              v269[1] = v271;
              *(void *)((char *)v61 + v262[8]) = *(void *)((char *)v62 + v262[8]);
              *(void *)((char *)v61 + v262[9]) = *(void *)((char *)v62 + v262[9]);
              *(void *)((char *)v61 + v262[10]) = *(void *)((char *)v62 + v262[10]);
              *(void *)((char *)v61 + v262[11]) = *(void *)((char *)v62 + v262[11]);
              *(void *)((char *)v61 + v262[12]) = *(void *)((char *)v62 + v262[12]);
              uint64_t v273 = v262[13];
              uint64_t v274 = *(void **)((char *)v62 + v273);
              *(void *)((char *)v61 + v273) = v274;
              *((unsigned char *)v61 + v262[14]) = *((unsigned char *)v62 + v262[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v275 = v274;
              break;
            case 3:
            case 4:
              uint64_t v89 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v89 - 8) + 16))(v61, v62, v89);
              int v90 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v61 + v90[5]) = *(_DWORD *)((char *)v62 + v90[5]);
              uint64_t v91 = v90[6];
              long long v92 = (_OWORD *)((char *)v61 + v91);
              uint64_t v93 = (_OWORD *)((char *)v62 + v91);
              long long v94 = v93[3];
              v92[2] = v93[2];
              v92[3] = v94;
              long long v95 = v93[1];
              _OWORD *v92 = *v93;
              v92[1] = v95;
              uint64_t v96 = v90[7];
              long long v97 = (void *)((char *)v61 + v96);
              uint64_t v98 = (void *)((char *)v62 + v96);
              uint64_t v100 = *v98;
              uint64_t v99 = v98[1];
              *long long v97 = v100;
              v97[1] = v99;
              *(void *)((char *)v61 + v90[8]) = *(void *)((char *)v62 + v90[8]);
              *(void *)((char *)v61 + v90[9]) = *(void *)((char *)v62 + v90[9]);
              *(void *)((char *)v61 + v90[10]) = *(void *)((char *)v62 + v90[10]);
LABEL_80:
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5:
              uint64_t v276 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v276 - 8) + 16))(v61, v62, v276);
              uint64_t v238 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_58;
            default:
              uint64_t v237 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v237 - 8) + 16))(v61, v62, v237);
              uint64_t v238 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_58:
              *(_DWORD *)((char *)v61 + v238[5]) = *(_DWORD *)((char *)v62 + v238[5]);
              uint64_t v277 = v238[6];
              uint64_t v278 = (_OWORD *)((char *)v61 + v277);
              uint64_t v279 = (_OWORD *)((char *)v62 + v277);
              long long v280 = v279[3];
              v278[2] = v279[2];
              v278[3] = v280;
              long long v281 = v279[1];
              *uint64_t v278 = *v279;
              v278[1] = v281;
              uint64_t v282 = v238[7];
              long long v283 = (void *)((char *)v61 + v282);
              uint64_t v284 = (void *)((char *)v62 + v282);
              uint64_t v286 = *v284;
              uint64_t v285 = v284[1];
              *long long v283 = v286;
              v283[1] = v285;
              *(void *)((char *)v61 + v238[8]) = *(void *)((char *)v62 + v238[8]);
              *(void *)((char *)v61 + v238[9]) = *(void *)((char *)v62 + v238[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v365 = sub_10000F214(&qword_100520120);
          uint64_t v366 = *(int *)(v365 + 48);
          uint64_t v367 = (char *)v61 + v366;
          uint64_t v368 = (char *)v62 + v366;
          id v369 = *(id *)v368;
          v370 = (void *)*((void *)v368 + 1);
          uint64_t v371 = v61;
          uint64_t v372 = *((void *)v368 + 2);
          unsigned __int8 v373 = v368[24];
          sub_1000506C4(*(id *)v368, v370, v372, v373);
          *(void *)uint64_t v367 = v369;
          *((void *)v367 + 1) = v370;
          *((void *)v367 + 2) = v372;
          v367[24] = v373;
          uint64_t v374 = *(int *)(v365 + 64);
          v375 = (char *)v371 + v374;
          unsigned __int8 v376 = (char *)v62 + v374;
          id v377 = *(id *)v376;
          v378 = (void *)*((void *)v376 + 1);
          uint64_t v379 = *((void *)v376 + 2);
          LOBYTE(v372) = v376[24];
          sub_1000506C4(*(id *)v376, v378, v379, v372);
          *(void *)v375 = v377;
          *((void *)v375 + 1) = v378;
          *((void *)v375 + 2) = v379;
          v375[24] = v372;
          uint64_t v61 = v371;
          uint64_t v43 = v594;
        }
        else
        {
          switch(v88)
          {
            case 1:
              uint64_t v590 = v63;
              uint64_t v289 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v289 - 8) + 16))(v61, v62, v289);
              unsigned __int8 v290 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v61 + v290[5]) = *(_DWORD *)((char *)v62 + v290[5]);
              uint64_t v291 = v290[6];
              unsigned __int8 v292 = (_OWORD *)((char *)v61 + v291);
              uint64_t v293 = (_OWORD *)((char *)v62 + v291);
              long long v294 = v293[3];
              v292[2] = v293[2];
              v292[3] = v294;
              long long v295 = v293[1];
              _OWORD *v292 = *v293;
              v292[1] = v295;
              *(void *)((char *)v61 + v290[7]) = *(void *)((char *)v62 + v290[7]);
              *(void *)((char *)v61 + v290[8]) = *(void *)((char *)v62 + v290[8]);
              *(void *)((char *)v61 + v290[9]) = *(void *)((char *)v62 + v290[9]);
              *((unsigned char *)v61 + v290[10]) = *((unsigned char *)v62 + v290[10]);
              uint64_t v296 = v290[11];
              uint64_t v297 = (void *)((char *)v61 + v296);
              long long v298 = (void *)((char *)v62 + v296);
              long long v299 = v61;
              uint64_t v300 = v298[1];
              *uint64_t v297 = *v298;
              v297[1] = v300;
              uint64_t v301 = v290[12];
              unsigned __int8 v302 = (void *)((char *)v299 + v301);
              uint64_t v303 = (void *)((char *)v62 + v301);
              uint64_t v304 = v303[1];
              *unsigned __int8 v302 = *v303;
              v302[1] = v304;
              uint64_t v305 = v290[13];
              v582 = v299;
              v577 = (char *)v299 + v305;
              uint64_t v306 = (char *)v62 + v305;
              uint64_t v307 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v308 = *(void *)(v307 - 8);
              uint64_t v309 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v308 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v309(v306, 1, v307))
              {
                uint64_t v310 = sub_10000F214(&qword_100524BD0);
                memcpy(v577, v306, *(void *)(*(void *)(v310 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v308 + 16))(v577, v306, v307);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v308 + 56))(v577, 0, 1, v307);
              }
              uint64_t v380 = v290[14];
              uint64_t v61 = v582;
              uint64_t v381 = (char *)v582 + v380;
              uint64_t v382 = (char *)v62 + v380;
              unint64_t v383 = *((void *)v382 + 1);
              uint64_t v43 = v594;
              uint64_t v63 = v590;
              if (v383 >> 60 == 15)
              {
                *(_OWORD *)uint64_t v381 = *(_OWORD *)v382;
              }
              else
              {
                uint64_t v384 = *(void *)v382;
                sub_100038528(*(void *)v382, *((void *)v382 + 1));
                *(void *)uint64_t v381 = v384;
                *((void *)v381 + 1) = v383;
              }
              uint64_t v385 = v290[15];
              unint64_t v386 = (void *)((char *)v582 + v385);
              uint64_t v387 = (void *)((char *)v62 + v385);
              if (*v387)
              {
                uint64_t v388 = v387[1];
                uint64_t v389 = v387[2];
                *unint64_t v386 = *v387;
                v386[1] = v388;
                v386[2] = v389;
                goto LABEL_88;
              }
              *(_OWORD *)unint64_t v386 = *(_OWORD *)v387;
              v386[2] = v387[2];
              break;
            case 2:
              uint64_t v311 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v311 - 8) + 16))(v61, v62, v311);
              uint64_t v312 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v61 + v312[5]) = *(_DWORD *)((char *)v62 + v312[5]);
              uint64_t v313 = v312[6];
              uint64_t v314 = (_OWORD *)((char *)v61 + v313);
              uint64_t v315 = (_OWORD *)((char *)v62 + v313);
              long long v316 = v315[3];
              v314[2] = v315[2];
              v314[3] = v316;
              long long v317 = v315[1];
              *uint64_t v314 = *v315;
              v314[1] = v317;
              uint64_t v318 = v312[7];
              long long v319 = (void *)((char *)v61 + v318);
              long long v320 = (void *)((char *)v62 + v318);
              uint64_t v322 = *v320;
              uint64_t v321 = v320[1];
              *long long v319 = v322;
              v319[1] = v321;
              *(void *)((char *)v61 + v312[8]) = *(void *)((char *)v62 + v312[8]);
              *(void *)((char *)v61 + v312[9]) = *(void *)((char *)v62 + v312[9]);
              *(void *)((char *)v61 + v312[10]) = *(void *)((char *)v62 + v312[10]);
              *(void *)((char *)v61 + v312[11]) = *(void *)((char *)v62 + v312[11]);
              *(void *)((char *)v61 + v312[12]) = *(void *)((char *)v62 + v312[12]);
              uint64_t v323 = v312[13];
              uint64_t v324 = *(void **)((char *)v62 + v323);
              *(void *)((char *)v61 + v323) = v324;
              *((unsigned char *)v61 + v312[14]) = *((unsigned char *)v62 + v312[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v325 = v324;
              break;
            case 3:
            case 4:
              uint64_t v125 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v125 - 8) + 16))(v61, v62, v125);
              uint64_t v126 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v61 + v126[5]) = *(_DWORD *)((char *)v62 + v126[5]);
              uint64_t v127 = v126[6];
              BOOL v128 = (_OWORD *)((char *)v61 + v127);
              uint64_t v129 = (_OWORD *)((char *)v62 + v127);
              long long v130 = v129[3];
              v128[2] = v129[2];
              v128[3] = v130;
              long long v131 = v129[1];
              *BOOL v128 = *v129;
              v128[1] = v131;
              uint64_t v132 = v126[7];
              long long v133 = (void *)((char *)v61 + v132);
              uint64_t v134 = (void *)((char *)v62 + v132);
              uint64_t v136 = *v134;
              uint64_t v135 = v134[1];
              *long long v133 = v136;
              v133[1] = v135;
              *(void *)((char *)v61 + v126[8]) = *(void *)((char *)v62 + v126[8]);
              *(void *)((char *)v61 + v126[9]) = *(void *)((char *)v62 + v126[9]);
              *(void *)((char *)v61 + v126[10]) = *(void *)((char *)v62 + v126[10]);
LABEL_88:
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5:
              uint64_t v326 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v326 - 8) + 16))(v61, v62, v326);
              uint64_t v288 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_64;
            default:
              uint64_t v287 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v287 - 8) + 16))(v61, v62, v287);
              uint64_t v288 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_64:
              *(_DWORD *)((char *)v61 + v288[5]) = *(_DWORD *)((char *)v62 + v288[5]);
              uint64_t v327 = v288[6];
              id v328 = (_OWORD *)((char *)v61 + v327);
              uint64_t v329 = (_OWORD *)((char *)v62 + v327);
              long long v330 = v329[3];
              v328[2] = v329[2];
              v328[3] = v330;
              long long v331 = v329[1];
              _OWORD *v328 = *v329;
              v328[1] = v331;
              uint64_t v332 = v288[7];
              long long v333 = (void *)((char *)v61 + v332);
              long long v334 = (void *)((char *)v62 + v332);
              uint64_t v336 = *v334;
              uint64_t v335 = v334[1];
              *long long v333 = v336;
              v333[1] = v335;
              *(void *)((char *)v61 + v288[8]) = *(void *)((char *)v62 + v288[8]);
              *(void *)((char *)v61 + v288[9]) = *(void *)((char *)v62 + v288[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_91;
      case 3u:
        uint64_t v101 = *v62;
        uint64_t v102 = (void *)v62[1];
        uint64_t v103 = v61;
        uint64_t v104 = v62[2];
        unint64_t v105 = v62[3];
        uint64_t v586 = v63;
        uint64_t v107 = v62[4];
        uint64_t v106 = v62[5];
        uint64_t v109 = v62[6];
        uint64_t v108 = v62[7];
        sub_100050624((void *)*v62, v102, v104, v105);
        void *v103 = v101;
        v103[1] = v102;
        v103[2] = v104;
        v103[3] = v105;
        uint64_t v61 = v103;
        v103[4] = v107;
        v103[5] = v106;
        uint64_t v43 = v594;
        uint64_t v63 = v586;
        v103[6] = v109;
        v103[7] = v108;
        goto LABEL_91;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v588 = v63;
            uint64_t v190 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v190 - 8) + 16))(v61, v62, v190);
            uint64_t v191 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)v61 + v191[5]) = *(_DWORD *)((char *)v62 + v191[5]);
            uint64_t v192 = v191[6];
            uint64_t v193 = (_OWORD *)((char *)v61 + v192);
            unint64_t v194 = (_OWORD *)((char *)v62 + v192);
            long long v195 = v194[3];
            v193[2] = v194[2];
            v193[3] = v195;
            long long v196 = v194[1];
            *uint64_t v193 = *v194;
            v193[1] = v196;
            *(void *)((char *)v61 + v191[7]) = *(void *)((char *)v62 + v191[7]);
            *(void *)((char *)v61 + v191[8]) = *(void *)((char *)v62 + v191[8]);
            *(void *)((char *)v61 + v191[9]) = *(void *)((char *)v62 + v191[9]);
            *((unsigned char *)v61 + v191[10]) = *((unsigned char *)v62 + v191[10]);
            uint64_t v197 = v191[11];
            uint64_t v198 = (void *)((char *)v61 + v197);
            long long v199 = (void *)((char *)v62 + v197);
            uint64_t v200 = v199[1];
            *uint64_t v198 = *v199;
            v198[1] = v200;
            uint64_t v201 = v191[12];
            uint64_t v202 = (void *)((char *)v61 + v201);
            uint64_t v203 = (void *)((char *)v62 + v201);
            uint64_t v204 = v203[1];
            *uint64_t v202 = *v203;
            v202[1] = v204;
            uint64_t v205 = v191[13];
            v580 = v61;
            v578 = (char *)v61 + v205;
            uint64_t v206 = (char *)v62 + v205;
            uint64_t v207 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v208 = *(void *)(v207 - 8);
            uint64_t v209 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v208 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v209(v206, 1, v207))
            {
              uint64_t v210 = sub_10000F214(&qword_100524BD0);
              memcpy(v578, v206, *(void *)(*(void *)(v210 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v208 + 16))(v578, v206, v207);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v208 + 56))(v578, 0, 1, v207);
            }
            uint64_t v337 = v191[14];
            uint64_t v338 = (char *)v580 + v337;
            uint64_t v339 = (char *)v62 + v337;
            unint64_t v340 = *((void *)v339 + 1);
            uint64_t v43 = v594;
            uint64_t v63 = v588;
            if (v340 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v338 = *(_OWORD *)v339;
            }
            else
            {
              uint64_t v341 = *(void *)v339;
              sub_100038528(*(void *)v339, *((void *)v339 + 1));
              *(void *)uint64_t v338 = v341;
              *((void *)v338 + 1) = v340;
            }
            uint64_t v342 = v191[15];
            uint64_t v61 = v580;
            unint64_t v343 = (void *)((char *)v580 + v342);
            uint64_t v344 = (void *)((char *)v62 + v342);
            if (*v344)
            {
              uint64_t v345 = v344[1];
              uint64_t v346 = v344[2];
              void *v343 = *v344;
              v343[1] = v345;
              v343[2] = v346;
              goto LABEL_71;
            }
            *(_OWORD *)unint64_t v343 = *(_OWORD *)v344;
            v343[2] = v344[2];
            break;
          case 2u:
            uint64_t v211 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v211 - 8) + 16))(v61, v62, v211);
            uint64_t v212 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)v61 + v212[5]) = *(_DWORD *)((char *)v62 + v212[5]);
            uint64_t v213 = v212[6];
            uint64_t v214 = (_OWORD *)((char *)v61 + v213);
            uint64_t v215 = (_OWORD *)((char *)v62 + v213);
            long long v216 = v215[3];
            v214[2] = v215[2];
            v214[3] = v216;
            long long v217 = v215[1];
            *uint64_t v214 = *v215;
            v214[1] = v217;
            uint64_t v218 = v212[7];
            uint64_t v219 = (void *)((char *)v61 + v218);
            uint64_t v220 = (void *)((char *)v62 + v218);
            uint64_t v222 = *v220;
            uint64_t v221 = v220[1];
            *uint64_t v219 = v222;
            v219[1] = v221;
            *(void *)((char *)v61 + v212[8]) = *(void *)((char *)v62 + v212[8]);
            *(void *)((char *)v61 + v212[9]) = *(void *)((char *)v62 + v212[9]);
            *(void *)((char *)v61 + v212[10]) = *(void *)((char *)v62 + v212[10]);
            *(void *)((char *)v61 + v212[11]) = *(void *)((char *)v62 + v212[11]);
            *(void *)((char *)v61 + v212[12]) = *(void *)((char *)v62 + v212[12]);
            uint64_t v223 = v212[13];
            uint64_t v224 = *(void **)((char *)v62 + v223);
            *(void *)((char *)v61 + v223) = v224;
            *((unsigned char *)v61 + v212[14]) = *((unsigned char *)v62 + v212[14]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v225 = v224;
            break;
          case 3u:
          case 4u:
            uint64_t v67 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v67 - 8) + 16))(v61, v62, v67);
            uint64_t v68 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)v61 + v68[5]) = *(_DWORD *)((char *)v62 + v68[5]);
            uint64_t v69 = v68[6];
            uint64_t v70 = (_OWORD *)((char *)v61 + v69);
            uint64_t v71 = (_OWORD *)((char *)v62 + v69);
            long long v72 = v71[3];
            v70[2] = v71[2];
            v70[3] = v72;
            long long v73 = v71[1];
            *uint64_t v70 = *v71;
            v70[1] = v73;
            uint64_t v74 = v68[7];
            long long v75 = (void *)((char *)v61 + v74);
            long long v76 = (void *)((char *)v62 + v74);
            uint64_t v78 = *v76;
            uint64_t v77 = v76[1];
            *long long v75 = v78;
            v75[1] = v77;
            *(void *)((char *)v61 + v68[8]) = *(void *)((char *)v62 + v68[8]);
            *(void *)((char *)v61 + v68[9]) = *(void *)((char *)v62 + v68[9]);
            *(void *)((char *)v61 + v68[10]) = *(void *)((char *)v62 + v68[10]);
LABEL_71:
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            uint64_t v226 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v226 - 8) + 16))(v61, v62, v226);
            uint64_t v189 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            goto LABEL_52;
          default:
            uint64_t v188 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v188 - 8) + 16))(v61, v62, v188);
            uint64_t v189 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_52:
            *(_DWORD *)((char *)v61 + v189[5]) = *(_DWORD *)((char *)v62 + v189[5]);
            uint64_t v227 = v189[6];
            uint64_t v228 = (_OWORD *)((char *)v61 + v227);
            uint64_t v229 = (_OWORD *)((char *)v62 + v227);
            long long v230 = v229[3];
            v228[2] = v229[2];
            v228[3] = v230;
            long long v231 = v229[1];
            *uint64_t v228 = *v229;
            v228[1] = v231;
            uint64_t v232 = v189[7];
            uint64_t v233 = (void *)((char *)v61 + v232);
            uint64_t v234 = (void *)((char *)v62 + v232);
            uint64_t v236 = *v234;
            uint64_t v235 = v234[1];
            *uint64_t v233 = v236;
            v233[1] = v235;
            *(void *)((char *)v61 + v189[8]) = *(void *)((char *)v62 + v189[8]);
            *(void *)((char *)v61 + v189[9]) = *(void *)((char *)v62 + v189[9]);
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v347 = sub_10000F214(&qword_10051A328);
        uint64_t v348 = *(int *)(v347 + 48);
        uint64_t v349 = *(void **)((char *)v62 + v348);
        *(void *)((char *)v61 + v348) = v349;
        uint64_t v350 = *(int *)(v347 + 64);
        uint64_t v351 = (void *)((char *)v61 + v350);
        uint64_t v352 = (void *)((char *)v62 + v350);
        uint64_t v353 = v352[1];
        *uint64_t v351 = *v352;
        v351[1] = v353;
        id v354 = v349;
        swift_bridgeObjectRetain();
        goto LABEL_91;
      case 5u:
        uint64_t v110 = sub_10000F214(&qword_10051A320);
        uint64_t v111 = *(void *)(v110 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v111 + 48))(v62, 1, v110))
        {
          uint64_t v112 = type metadata accessor for DataDetectorState(0);
          memcpy(v61, v62, *(void *)(*(void *)(v112 - 8) + 64));
        }
        else
        {
          uint64_t v139 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v139 - 8) + 16))(v61, v62, v139);
          long long v140 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)v61 + v140[5]) = *(_DWORD *)((char *)v62 + v140[5]);
          uint64_t v141 = v140[6];
          char v142 = (_OWORD *)((char *)v61 + v141);
          uint64_t v143 = (_OWORD *)((char *)v62 + v141);
          long long v144 = v143[3];
          v142[2] = v143[2];
          v142[3] = v144;
          long long v145 = v143[1];
          *char v142 = *v143;
          v142[1] = v145;
          uint64_t v146 = v140[7];
          long long v147 = (void *)((char *)v61 + v146);
          uint64_t v148 = (void *)((char *)v62 + v146);
          uint64_t v150 = *v148;
          uint64_t v149 = v148[1];
          *long long v147 = v150;
          v147[1] = v149;
          *(void *)((char *)v61 + v140[8]) = *(void *)((char *)v62 + v140[8]);
          *(void *)((char *)v61 + v140[9]) = *(void *)((char *)v62 + v140[9]);
          *(void *)((char *)v61 + v140[10]) = *(void *)((char *)v62 + v140[10]);
          *(void *)((char *)v61 + v140[11]) = *(void *)((char *)v62 + v140[11]);
          *(void *)((char *)v61 + v140[12]) = *(void *)((char *)v62 + v140[12]);
          uint64_t v151 = v140[13];
          uint64_t v152 = *(void **)((char *)v62 + v151);
          *(void *)((char *)v61 + v151) = v152;
          *((unsigned char *)v61 + v140[14]) = *((unsigned char *)v62 + v140[14]);
          uint64_t v153 = *(int *)(v110 + 48);
          unint64_t v154 = v61;
          uint64_t v155 = *(void **)((char *)v62 + v153);
          *(void *)((char *)v154 + v153) = v155;
          unint64_t v156 = *(void (**)(void *, void, uint64_t, uint64_t))(v111 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v157 = v152;
          id v158 = v155;
          uint64_t v61 = v154;
          v156(v154, 0, 1, v110);
          uint64_t v43 = v594;
        }
        goto LABEL_91;
      case 6u:
        uint64_t v113 = v62[1];
        if (v113)
        {
          *uint64_t v61 = *v62;
          v61[1] = v113;
          *((unsigned char *)v61 + 16) = *((unsigned char *)v62 + 16);
          uint64_t v114 = v62[4];
          v61[3] = v62[3];
          v61[4] = v114;
          uint64_t v115 = v62[6];
          v61[5] = v62[5];
          v61[6] = v115;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v159 = *((_OWORD *)v62 + 1);
          *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
          *((_OWORD *)v61 + 1) = v159;
          *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
          v61[6] = v62[6];
        }
        goto LABEL_91;
      case 7u:
        uint64_t v116 = v62[1];
        if (v116)
        {
          *uint64_t v61 = *v62;
          v61[1] = v116;
          uint64_t v117 = v62[3];
          v61[2] = v62[2];
          v61[3] = v117;
          uint64_t v118 = v62[5];
          v61[4] = v62[4];
          v61[5] = v118;
          uint64_t v120 = (void *)v62[6];
          uint64_t v119 = v62[7];
          v61[6] = v120;
          v61[7] = v119;
          v61[8] = v62[8];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v121 = v120;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v160 = *((_OWORD *)v62 + 3);
          *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
          *((_OWORD *)v61 + 3) = v160;
          v61[8] = v62[8];
          long long v161 = *((_OWORD *)v62 + 1);
          *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
          *((_OWORD *)v61 + 1) = v161;
        }
        goto LABEL_91;
      case 8u:
        uint64_t v122 = sub_10000F214(&qword_10051A428);
        uint64_t v123 = *(void *)(v122 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v123 + 48))(v62, 1, v122))
        {
          uint64_t v124 = type metadata accessor for EventLookupState(0);
          memcpy(v61, v62, *(void *)(*(void *)(v124 - 8) + 64));
        }
        else
        {
          uint64_t v162 = v62[1];
          *uint64_t v61 = *v62;
          v61[1] = v162;
          uint64_t v587 = v63;
          uint64_t v163 = (int *)type metadata accessor for EventLookupItem(0);
          uint64_t v164 = v163[5];
          uint64_t v165 = (char *)v61 + v164;
          Swift::Int v166 = (char *)v62 + v164;
          Swift::Int v167 = v61;
          uint64_t v168 = type metadata accessor for Date();
          uint64_t v169 = *(void (**)(char *, char *, uint64_t))(*(void *)(v168 - 8) + 16);
          swift_bridgeObjectRetain();
          v169(v165, v166, v168);
          uint64_t v170 = v168;
          uint64_t v61 = v167;
          v169((char *)v167 + v163[6], (char *)v62 + v163[6], v170);
          uint64_t v43 = v594;
          uint64_t v171 = v163[7];
          uint64_t v172 = (void *)((char *)v167 + v171);
          uint64_t v173 = (void *)((char *)v62 + v171);
          uint64_t v174 = v173[1];
          *uint64_t v172 = *v173;
          v172[1] = v174;
          uint64_t v175 = v163[8];
          uint64_t v176 = (void *)((char *)v167 + v175);
          uint64_t v177 = (void *)((char *)v62 + v175);
          uint64_t v178 = v177[1];
          *uint64_t v176 = *v177;
          v176[1] = v178;
          *((unsigned char *)v167 + v163[9]) = *((unsigned char *)v62 + v163[9]);
          uint64_t v179 = *(int *)(v122 + 48);
          uint64_t v180 = (void *)((char *)v167 + v179);
          uint64_t v181 = (void *)((char *)v62 + v179);
          uint64_t v182 = v181[1];
          *uint64_t v180 = *v181;
          v180[1] = v182;
          uint64_t v183 = *(int *)(v122 + 64);
          uint64_t v184 = (void *)((char *)v167 + v183);
          uint64_t v185 = (void *)((char *)v62 + v183);
          uint64_t v186 = v185[1];
          *uint64_t v184 = *v185;
          v184[1] = v186;
          uint64_t v187 = *(void (**)(void *, void, uint64_t, uint64_t))(v123 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v63 = v587;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v187(v61, 0, 1, v122);
        }
        goto LABEL_91;
      case 9u:
        if (*v62)
        {
          uint64_t v80 = v62[1];
          uint64_t v79 = v62[2];
          *uint64_t v61 = *v62;
          v61[1] = v80;
          uint64_t v82 = v62[3];
          uint64_t v81 = v62[4];
          v61[2] = v79;
          v61[3] = v82;
          uint64_t v83 = v63;
          uint64_t v85 = v62[5];
          uint64_t v84 = v62[6];
          v61[4] = v81;
          v61[5] = v85;
          uint64_t v86 = v62[7];
          v61[6] = v84;
          v61[7] = v86;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v63 = v83;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v137 = *((_OWORD *)v62 + 1);
          *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
          *((_OWORD *)v61 + 1) = v137;
          long long v138 = *((_OWORD *)v62 + 3);
          *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
          *((_OWORD *)v61 + 3) = v138;
        }
LABEL_91:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v61, v62, *(void *)(v591 + 64));
        break;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v591 + 56))(v61, 0, 1, v63);
  }
  uint64_t v390 = sub_10000F214(&qword_100525F58);
  *(void *)((char *)v61 + *(int *)(v390 + 28)) = *(void *)((char *)v62 + *(int *)(v390 + 28));
  uint64_t v391 = v43;
  uint64_t v392 = v43[13];
  uint64_t v393 = v43[14];
  uint64_t v394 = v596 + v392;
  uint64_t v395 = v595 + v392;
  *(unsigned char *)uint64_t v394 = *(unsigned char *)v395;
  *(void *)(v394 + 8) = *(void *)(v395 + 8);
  uint64_t v396 = v596 + v393;
  uint64_t v397 = v595 + v393;
  *(unsigned char *)uint64_t v396 = *(unsigned char *)v397;
  *(void *)(v396 + 8) = *(void *)(v397 + 8);
  uint64_t v398 = v43[15];
  uint64_t v399 = v596 + v398;
  uint64_t v400 = v595 + v398;
  uint64_t v401 = type metadata accessor for UUID();
  v592 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v401 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v592(v399, v400, v401);
  uint64_t v402 = sub_10000F214(&qword_10051C250);
  *(void *)(v399 + *(int *)(v402 + 28)) = *(void *)(v400 + *(int *)(v402 + 28));
  uint64_t v403 = v43[16];
  uint64_t v404 = v43[17];
  uint64_t v405 = (void *)(v596 + v403);
  uint64_t v406 = (void *)(v595 + v403);
  uint64_t v407 = v406[1];
  *uint64_t v405 = *v406;
  v405[1] = v407;
  v405[2] = v406[2];
  uint64_t v408 = v596 + v404;
  uint64_t v409 = v595 + v404;
  *(unsigned char *)uint64_t v408 = *(unsigned char *)v409;
  *(void *)(v408 + 8) = *(void *)(v409 + 8);
  uint64_t v410 = v43[18];
  uint64_t v411 = v43[19];
  uint64_t v412 = v596 + v410;
  uint64_t v413 = v595 + v410;
  *(unsigned char *)uint64_t v412 = *(unsigned char *)v413;
  *(void *)(v412 + 8) = *(void *)(v413 + 8);
  *(unsigned char *)(v412 + 16) = *(unsigned char *)(v413 + 16);
  uint64_t v414 = v596 + v411;
  uint64_t v415 = v595 + v411;
  *(unsigned char *)uint64_t v414 = *(unsigned char *)v415;
  *(void *)(v414 + 8) = *(void *)(v415 + 8);
  uint64_t v416 = v43[20];
  uint64_t v417 = v43[21];
  uint64_t v418 = v596 + v416;
  uint64_t v419 = v595 + v416;
  *(unsigned char *)uint64_t v418 = *(unsigned char *)v419;
  *(void *)(v418 + 8) = *(void *)(v419 + 8);
  uint64_t v420 = v596 + v417;
  uint64_t v421 = v595 + v417;
  *(unsigned char *)uint64_t v420 = *(unsigned char *)v421;
  *(void *)(v420 + 8) = *(void *)(v421 + 8);
  uint64_t v422 = v43[22];
  uint64_t v423 = v43[23];
  uint64_t v424 = (void *)(v596 + v422);
  uint64_t v425 = (void *)(v595 + v422);
  uint64_t v426 = v425[1];
  *uint64_t v424 = *v425;
  v424[1] = v426;
  uint64_t v427 = v596 + v423;
  uint64_t v428 = v595 + v423;
  *(unsigned char *)uint64_t v427 = *(unsigned char *)v428;
  *(void *)(v427 + 8) = *(void *)(v428 + 8);
  uint64_t v429 = v43[24];
  uint64_t v430 = v43[25];
  uint64_t v431 = (void *)(v596 + v429);
  uint64_t v432 = (void *)(v595 + v429);
  uint64_t v433 = v432[1];
  *uint64_t v431 = *v432;
  v431[1] = v433;
  uint64_t v434 = v596 + v430;
  uint64_t v435 = v595 + v430;
  uint64_t v574 = *(void **)(v595 + v430);
  uint64_t v575 = *(void **)(v595 + v430 + 8);
  char v436 = *(unsigned char *)(v595 + v430 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000ACAE0(v574, v575, v436);
  *(void *)uint64_t v434 = v574;
  *(void *)(v434 + 8) = v575;
  *(unsigned char *)(v434 + 16) = v436;
  *(void *)(v434 + 24) = *(void *)(v435 + 24);
  uint64_t v437 = v391[26];
  char v438 = (void *)(v596 + v437);
  uint64_t v439 = v595 + v437;
  uint64_t v440 = *(void *)(v595 + v437);
  swift_retain();
  if ((~v440 & 0xF000000000000007) != 0) {
    swift_retain();
  }
  uint64_t v441 = *(void *)(v439 + 8);
  *char v438 = v440;
  v438[1] = v441;
  uint64_t v442 = v391[27];
  uint64_t v443 = v391[28];
  uint64_t v444 = (void *)(v596 + v442);
  uint64_t v445 = v595 + v442;
  uint64_t v447 = *(void **)v445;
  uint64_t v446 = *(void *)(v445 + 8);
  *uint64_t v444 = *(void *)v445;
  v444[1] = v446;
  uint64_t v448 = (void *)(v596 + v443);
  v449 = (void *)(v595 + v443);
  uint64_t v450 = v449[1];
  *uint64_t v448 = *v449;
  v448[1] = v450;
  uint64_t v451 = v391[29];
  uint64_t v452 = v391[30];
  uint64_t v453 = (void *)(v596 + v451);
  uint64_t v454 = (void *)(v595 + v451);
  uint64_t v455 = v454[1];
  *uint64_t v453 = *v454;
  v453[1] = v455;
  uint64_t v456 = v596 + v452;
  uint64_t v457 = v595 + v452;
  uint64_t v458 = *(void **)(v595 + v452);
  swift_retain();
  id v459 = v447;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v458)
  {
    *(void *)uint64_t v456 = v458;
    long long v460 = *(_OWORD *)(v457 + 32);
    *(_OWORD *)(v456 + 32) = v460;
    uint64_t v461 = v460;
    long long v462 = **(void (***)(uint64_t, uint64_t, uint64_t))(v460 - 8);
    id v463 = v458;
    v462(v456 + 8, v457 + 8, v461);
  }
  else
  {
    long long v464 = *(_OWORD *)(v457 + 16);
    *(_OWORD *)uint64_t v456 = *(_OWORD *)v457;
    *(_OWORD *)(v456 + 16) = v464;
    *(_OWORD *)(v456 + 32) = *(_OWORD *)(v457 + 32);
  }
  *(void *)(v456 + 48) = *(void *)(v457 + 48);
  uint64_t v465 = v594[31];
  uint64_t v466 = v594[32];
  uint64_t v467 = v596 + v465;
  uint64_t v468 = v595 + v465;
  *(void *)uint64_t v467 = *(void *)v468;
  uint64_t v469 = *(void *)(v468 + 24);
  *(_OWORD *)(v467 + 8) = *(_OWORD *)(v468 + 8);
  *(void *)(v467 + 24) = v469;
  uint64_t v470 = (void *)(v596 + v466);
  uint64_t v471 = (void *)(v595 + v466);
  uint64_t v593 = v471[1];
  *uint64_t v470 = *v471;
  v470[1] = v593;
  uint64_t v472 = v594[33];
  uint64_t v473 = v594[34];
  uint64_t v474 = v596 + v472;
  uint64_t v475 = v595 + v472;
  *(unsigned char *)uint64_t v474 = *(unsigned char *)v475;
  *(void *)(v474 + 8) = *(void *)(v475 + 8);
  uint64_t v476 = (void *)(v596 + v473);
  uint64_t v477 = (void *)(v595 + v473);
  uint64_t v584 = v477[1];
  *uint64_t v476 = *v477;
  v476[1] = v584;
  uint64_t v478 = v594[35];
  uint64_t v479 = v594[36];
  uint64_t v480 = v596 + v478;
  uint64_t v481 = v595 + v478;
  *(unsigned char *)uint64_t v480 = *(unsigned char *)v481;
  *(void *)(v480 + 8) = *(void *)(v481 + 8);
  uint64_t v482 = (void *)(v596 + v479);
  uint64_t v483 = (void *)(v595 + v479);
  uint64_t v484 = v483[1];
  *uint64_t v482 = *v483;
  v482[1] = v484;
  v482[2] = v483[2];
  uint64_t v485 = v594[37];
  uint64_t v486 = v594[38];
  uint64_t v487 = v596 + v485;
  uint64_t v488 = v595 + v485;
  *(unsigned char *)uint64_t v487 = *(unsigned char *)v488;
  *(void *)(v487 + 8) = *(void *)(v488 + 8);
  uint64_t v489 = v596 + v486;
  uint64_t v490 = v595 + v486;
  *(unsigned char *)uint64_t v489 = *(unsigned char *)v490;
  *(void *)(v489 + 8) = *(void *)(v490 + 8);
  uint64_t v491 = v594[39];
  uint64_t v492 = v594[40];
  uint64_t v493 = v596 + v491;
  uint64_t v494 = v595 + v491;
  *(unsigned char *)uint64_t v493 = *(unsigned char *)v494;
  *(void *)(v493 + 8) = *(void *)(v494 + 8);
  uint64_t v495 = v596 + v492;
  uint64_t v496 = v595 + v492;
  *(unsigned char *)uint64_t v495 = *(unsigned char *)v496;
  *(void *)(v495 + 8) = *(void *)(v496 + 8);
  uint64_t v497 = v594[41];
  uint64_t v498 = v594[42];
  uint64_t v499 = v596 + v497;
  uint64_t v500 = v595 + v497;
  *(unsigned char *)uint64_t v499 = *(unsigned char *)v500;
  *(void *)(v499 + 8) = *(void *)(v500 + 8);
  uint64_t v501 = v596 + v498;
  uint64_t v502 = v595 + v498;
  *(unsigned char *)uint64_t v501 = *(unsigned char *)v502;
  *(void *)(v501 + 8) = *(void *)(v502 + 8);
  uint64_t v503 = v594[43];
  uint64_t v504 = v594[44];
  uint64_t v505 = v596 + v503;
  uint64_t v506 = v595 + v503;
  *(unsigned char *)uint64_t v505 = *(unsigned char *)v506;
  *(void *)(v505 + 8) = *(void *)(v506 + 8);
  uint64_t v507 = (void *)(v596 + v504);
  uint64_t v508 = (void *)(v595 + v504);
  uint64_t v572 = v508[1];
  *uint64_t v507 = *v508;
  v507[1] = v572;
  uint64_t v509 = v594[45];
  uint64_t v510 = v594[46];
  uint64_t v511 = (void *)(v596 + v509);
  uint64_t v512 = (void *)(v595 + v509);
  uint64_t v571 = v512[1];
  *uint64_t v511 = *v512;
  v511[1] = v571;
  v513 = (void *)(v596 + v510);
  v514 = (void *)(v595 + v510);
  uint64_t v573 = v514[1];
  void *v513 = *v514;
  v513[1] = v573;
  uint64_t v515 = v594[47];
  uint64_t v516 = v594[48];
  uint64_t v517 = v596 + v515;
  uint64_t v518 = v595 + v515;
  *(unsigned char *)uint64_t v517 = *(unsigned char *)v518;
  *(void *)(v517 + 8) = *(void *)(v518 + 8);
  uint64_t v519 = v596 + v516;
  uint64_t v520 = v595 + v516;
  *(unsigned char *)uint64_t v519 = *(unsigned char *)v520;
  *(void *)(v519 + 8) = *(void *)(v520 + 8);
  uint64_t v521 = v594[49];
  uint64_t v522 = v594[50];
  uint64_t v523 = v596 + v521;
  uint64_t v524 = v595 + v521;
  *(unsigned char *)uint64_t v523 = *(unsigned char *)v524;
  *(void *)(v523 + 8) = *(void *)(v524 + 8);
  uint64_t v525 = v596 + v522;
  uint64_t v526 = v595 + v522;
  *(unsigned char *)uint64_t v525 = *(unsigned char *)v526;
  *(void *)(v525 + 8) = *(void *)(v526 + 8);
  uint64_t v527 = v594[51];
  uint64_t v528 = v594[52];
  uint64_t v529 = v596 + v527;
  uint64_t v530 = v595 + v527;
  *(unsigned char *)uint64_t v529 = *(unsigned char *)v530;
  *(void *)(v529 + 8) = *(void *)(v530 + 8);
  uint64_t v531 = v596 + v528;
  uint64_t v532 = v595 + v528;
  *(unsigned char *)uint64_t v531 = *(unsigned char *)v532;
  *(void *)(v531 + 8) = *(void *)(v532 + 8);
  uint64_t v533 = v594[53];
  uint64_t v534 = v594[54];
  uint64_t v535 = v596 + v533;
  uint64_t v536 = v595 + v533;
  *(unsigned char *)uint64_t v535 = *(unsigned char *)v536;
  *(void *)(v535 + 8) = *(void *)(v536 + 8);
  uint64_t v537 = v596 + v534;
  uint64_t v538 = v595 + v534;
  *(unsigned char *)uint64_t v537 = *(unsigned char *)v538;
  *(void *)(v537 + 8) = *(void *)(v538 + 8);
  uint64_t v539 = v594[56];
  *(void *)(v596 + v594[55]) = *(void *)(v595 + v594[55]);
  uint64_t v540 = *(void **)(v595 + v539);
  *(void *)(v596 + v539) = v540;
  uint64_t v541 = v594[58];
  *(void *)(v596 + v594[57]) = *(void *)(v595 + v594[57]);
  *(void *)(v596 + v541) = *(void *)(v595 + v541);
  uint64_t v542 = v594[60];
  *(void *)(v596 + v594[59]) = *(void *)(v595 + v594[59]);
  *(void *)(v596 + v542) = *(void *)(v595 + v542);
  uint64_t v543 = v594[62];
  *(void *)(v596 + v594[61]) = *(void *)(v595 + v594[61]);
  uint64_t v544 = (uint64_t *)(v596 + v543);
  uint64_t v545 = (uint64_t *)(v595 + v543);
  uint64_t v570 = *(void *)(v595 + v543 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v546 = v540;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v570)
  {
    uint64_t v547 = *v545;
    unint64_t v548 = v545[1];
    sub_100038528(*v545, v548);
    *uint64_t v544 = v547;
    v544[1] = v548;
    uint64_t v549 = v545[3];
    v544[2] = v545[2];
    v544[3] = v549;
    uint64_t v550 = v545[5];
    v544[4] = v545[4];
    v544[5] = v550;
    uint64_t v551 = v545[7];
    v544[6] = v545[6];
    v544[7] = v551;
    uint64_t v552 = v545[9];
    v544[8] = v545[8];
    v544[9] = v552;
    v544[10] = v545[10];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v553 = *((_OWORD *)v545 + 3);
    *((_OWORD *)v544 + 2) = *((_OWORD *)v545 + 2);
    *((_OWORD *)v544 + 3) = v553;
    *((_OWORD *)v544 + 4) = *((_OWORD *)v545 + 4);
    v544[10] = v545[10];
    long long v554 = *((_OWORD *)v545 + 1);
    *(_OWORD *)uint64_t v544 = *(_OWORD *)v545;
    *((_OWORD *)v544 + 1) = v554;
  }
  uint64_t v555 = v594[63];
  uint64_t v556 = v594[64];
  uint64_t v557 = *(void *)(v595 + v555);
  v544[11] = v545[11];
  *(void *)(v596 + v555) = v557;
  uint64_t v558 = (void *)(v596 + v556);
  uint64_t v559 = (void *)(v595 + v556);
  uint64_t v560 = v559[1];
  *uint64_t v558 = *v559;
  v558[1] = v560;
  uint64_t v561 = v594[65];
  uint64_t v562 = (char *)(v596 + v561);
  uint64_t v563 = (char *)(v595 + v561);
  uint64_t v564 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v565 = *(void *)(v564 - 8);
  uint64_t v566 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v565 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v566(v563, 1, v564))
  {
    uint64_t v567 = sub_10000F214(&qword_100525F60);
    memcpy(v562, v563, *(void *)(*(void *)(v567 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v565 + 16))(v562, v563, v564);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v565 + 56))(v562, 0, 1, v564);
  }
  v568 = (int *)sub_10000F214(&qword_100519A10);
  v562[v568[9]] = v563[v568[9]];
  *(void *)&v562[v568[10]] = *(void *)&v563[v568[10]];
  v562[v568[11]] = v563[v568[11]];
  swift_retain();
  return v596;
}

uint64_t sub_1002841EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10016180C(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_100161890(v8, v9);
  char v10 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v10;
  swift_retain();
  swift_release();
  char v11 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v11;
  swift_retain();
  swift_release();
  char v12 = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v12;
  swift_retain();
  swift_release();
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  char v15 = *(unsigned char *)(a2 + 80);
  sub_10000FCA0();
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = v15;
  sub_10000FD10();
  if (a1 != a2)
  {
    uint64_t v16 = a3[9];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (void *)(a2 + v16);
    sub_10000FBD8(a1 + v16, &qword_100525F10);
    sub_10000F214(&qword_100525F10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for WithCurrentHostingControllerAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *uint64_t v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v856 = a2;
  v857 = a3;
  uint64_t v20 = a3[10];
  uint64_t v855 = a1;
  uint64_t v21 = (unsigned char *)(a1 + v20);
  uint64_t v22 = a2 + v20;
  *uint64_t v21 = *(unsigned char *)(a2 + v20);
  v21[1] = *(unsigned char *)(a2 + v20 + 1);
  v21[2] = *(unsigned char *)(a2 + v20 + 2);
  v21[3] = *(unsigned char *)(a2 + v20 + 3);
  v21[4] = *(unsigned char *)(a2 + v20 + 4);
  v21[5] = *(unsigned char *)(a2 + v20 + 5);
  uint64_t v852 = type metadata accessor for AppConfiguration();
  uint64_t v23 = *(int *)(v852 + 20);
  uint64_t v24 = &v21[v23];
  uint64_t v25 = v22 + v23;
  *uint64_t v24 = *(unsigned char *)(v22 + v23);
  v24[1] = *(unsigned char *)(v22 + v23 + 1);
  *((void *)v24 + 1) = *(void *)(v22 + v23 + 8);
  *((void *)v24 + 2) = *(void *)(v22 + v23 + 16);
  *((_DWORD *)v24 + 6) = *(_DWORD *)(v22 + v23 + 24);
  v24[28] = *(unsigned char *)(v22 + v23 + 28);
  v24[29] = *(unsigned char *)(v22 + v23 + 29);
  uint64_t v26 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v27 = v26[10];
  uint64_t v28 = &v24[v27];
  uint64_t v29 = (unsigned char *)(v25 + v27);
  uint64_t v30 = type metadata accessor for URL();
  uint64_t v858 = *(void *)(v30 - 8);
  uint64_t v31 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v858 + 48);
  v844 = v28;
  LODWORD(v28) = v31(v28, 1, v30);
  v863 = v31;
  int v32 = v31(v29, 1, v30);
  if (v28)
  {
    if (v32)
    {
      size_t v33 = *(void *)(*(void *)(sub_10000F214(&qword_10051E070) - 8) + 64);
      uint64_t v34 = v844;
LABEL_11:
      memcpy(v34, v29, v33);
      goto LABEL_14;
    }
    (*(void (**)(void *, unsigned char *, uint64_t))(v858 + 16))(v844, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v858 + 56))(v844, 0, 1, v30);
  }
  else
  {
    if (v32)
    {
      (*(void (**)(void *, uint64_t))(v858 + 8))(v844, v30);
      size_t v33 = *(void *)(*(void *)(sub_10000F214(&qword_10051E070) - 8) + 64);
      uint64_t v34 = v844;
      goto LABEL_11;
    }
    (*(void (**)(void *, unsigned char *, uint64_t))(v858 + 24))(v844, v29, v30);
  }
LABEL_14:
  v24[v26[11]] = *(unsigned char *)(v25 + v26[11]);
  uint64_t v35 = v26[12];
  uint64_t v36 = &v24[v35];
  uint64_t v37 = (uint64_t *)(v25 + v35);
  uint64_t v38 = *v37;
  v36[8] = *((unsigned char *)v37 + 8);
  *(void *)uint64_t v36 = v38;
  uint64_t v39 = v26[13];
  uint64_t v40 = &v24[v39];
  uint64_t v41 = (_DWORD *)(v25 + v39);
  *uint64_t v40 = *v41;
  v40[1] = v41[1];
  v24[v26[14]] = *(unsigned char *)(v25 + v26[14]);
  v24[v26[15]] = *(unsigned char *)(v25 + v26[15]);
  v24[v26[16]] = *(unsigned char *)(v25 + v26[16]);
  v24[v26[17]] = *(unsigned char *)(v25 + v26[17]);
  uint64_t v42 = v26[18];
  uint64_t v43 = &v24[v42];
  uint64_t v44 = (unsigned char *)(v25 + v42);
  int v45 = v863(&v24[v42], 1, v30);
  int v46 = v863(v44, 1, v30);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v858 + 16))(v43, v44, v30);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v858 + 56))(v43, 0, 1, v30);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v46)
  {
    (*(void (**)(unsigned char *, uint64_t))(v858 + 8))(v43, v30);
LABEL_19:
    uint64_t v47 = sub_10000F214(&qword_10051E070);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v858 + 24))(v43, v44, v30);
LABEL_20:
  uint64_t v48 = v856;
  v24[v26[19]] = *(unsigned char *)(v25 + v26[19]);
  v24[v26[20]] = *(unsigned char *)(v25 + v26[20]);
  v24[v26[21]] = *(unsigned char *)(v25 + v26[21]);
  uint64_t v49 = v26[22];
  uint64_t v50 = &v24[v49];
  uint64_t v51 = (unsigned char *)(v25 + v49);
  int v52 = v863(&v24[v49], 1, v30);
  int v53 = v863(v51, 1, v30);
  if (v52)
  {
    uint64_t v54 = (int *)v852;
    if (!v53)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v858 + 16))(v50, v51, v30);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v858 + 56))(v50, 0, 1, v30);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v54 = (int *)v852;
  if (v53)
  {
    (*(void (**)(unsigned char *, uint64_t))(v858 + 8))(v50, v30);
LABEL_25:
    uint64_t v55 = sub_10000F214(&qword_10051E070);
    memcpy(v50, v51, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v858 + 24))(v50, v51, v30);
LABEL_26:
  uint64_t v56 = v857;
  v21[v54[6]] = *(unsigned char *)(v22 + v54[6]);
  uint64_t v57 = v54[7];
  uint64_t v58 = &v21[v57];
  uint64_t v59 = (void *)(v22 + v57);
  *uint64_t v58 = *v59;
  v58[1] = v59[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = v54[8];
  uint64_t v61 = &v21[v60];
  uint64_t v62 = (unsigned char *)(v22 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  uint64_t v63 = v54[10];
  uint64_t v64 = &v21[v63];
  uint64_t v65 = (unsigned char *)(v22 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  uint64_t v66 = v54[12];
  uint64_t v67 = &v21[v66];
  uint64_t v68 = (unsigned char *)(v22 + v66);
  *uint64_t v67 = *v68;
  v67[1] = v68[1];
  v67[2] = v68[2];
  uint64_t v69 = v54[13];
  uint64_t v70 = &v21[v69];
  uint64_t v71 = (void *)(v22 + v69);
  *uint64_t v70 = *v71;
  v70[1] = v71[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v72 = sub_10000F214(&qword_100525F50);
  *(void *)&v21[*(int *)(v72 + 28)] = *(void *)(v22 + *(int *)(v72 + 28));
  swift_retain();
  swift_release();
  uint64_t v73 = v857[11];
  uint64_t v74 = v855;
  uint64_t v75 = v855 + v73;
  uint64_t v76 = v856 + v73;
  *(void *)(v855 + v73) = *(void *)(v856 + v73);
  swift_retain();
  swift_release();
  *(void *)(v75 + 8) = *(void *)(v76 + 8);
  swift_retain();
  swift_release();
  uint64_t v77 = v857[12];
  uint64_t v78 = (void *)(v855 + v77);
  uint64_t v79 = (void *)(v856 + v77);
  uint64_t v80 = type metadata accessor for ResultLookupState();
  uint64_t v81 = *(void *)(v80 - 8);
  uint64_t v82 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v81 + 48);
  int v83 = v82(v78, 1, v80);
  int v84 = v82(v79, 1, v80);
  if (v83)
  {
    if (!v84)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *uint64_t v78 = *v79;
          v78[1] = v79[1];
          swift_bridgeObjectRetain();
          goto LABEL_153;
        case 1u:
          *uint64_t v78 = *v79;
          swift_bridgeObjectRetain();
          goto LABEL_153;
        case 2u:
          type metadata accessor for GeoLocateState(0);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          type metadata accessor for CVDetection();
          int v87 = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 1)
          {
            switch(v87)
            {
              case 1:
                uint64_t v866 = v80;
                uint64_t v326 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v326 - 8) + 16))(v78, v79, v326);
                uint64_t v327 = (int *)type metadata accessor for ParseDetectorResult(0);
                *(_DWORD *)((char *)v78 + v327[5]) = *(_DWORD *)((char *)v79 + v327[5]);
                uint64_t v328 = v327[6];
                uint64_t v329 = (_OWORD *)((char *)v78 + v328);
                long long v330 = (_OWORD *)((char *)v79 + v328);
                long long v332 = v330[2];
                long long v331 = v330[3];
                long long v333 = v330[1];
                *uint64_t v329 = *v330;
                v329[1] = v333;
                v329[2] = v332;
                v329[3] = v331;
                *(void *)((char *)v78 + v327[7]) = *(void *)((char *)v79 + v327[7]);
                *(void *)((char *)v78 + v327[8]) = *(void *)((char *)v79 + v327[8]);
                *(void *)((char *)v78 + v327[9]) = *(void *)((char *)v79 + v327[9]);
                *((unsigned char *)v78 + v327[10]) = *((unsigned char *)v79 + v327[10]);
                uint64_t v334 = v327[11];
                uint64_t v335 = (void *)((char *)v78 + v334);
                uint64_t v336 = (void *)((char *)v79 + v334);
                *uint64_t v335 = *v336;
                v335[1] = v336[1];
                uint64_t v337 = v327[12];
                uint64_t v338 = (void *)((char *)v78 + v337);
                uint64_t v339 = (void *)((char *)v79 + v337);
                void *v338 = *v339;
                v338[1] = v339[1];
                uint64_t v340 = v327[13];
                __srca = (char *)v78 + v340;
                v840 = (char *)v79 + v340;
                uint64_t v341 = type metadata accessor for VisualUnderstanding.ImageRegion();
                uint64_t v342 = *(void *)(v341 - 8);
                unint64_t v343 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v342 + 48);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v343(v840, 1, v341))
                {
                  uint64_t v344 = sub_10000F214(&qword_100524BD0);
                  memcpy(__srca, v840, *(void *)(*(void *)(v344 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v342 + 16))(__srca, v840, v341);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v342 + 56))(__srca, 0, 1, v341);
                }
                uint64_t v566 = v327[14];
                uint64_t v567 = (char *)v78 + v566;
                v568 = (char *)v79 + v566;
                unint64_t v569 = *((void *)v568 + 1);
                uint64_t v80 = v866;
                if (v569 >> 60 == 15)
                {
                  *(_OWORD *)uint64_t v567 = *(_OWORD *)v568;
                }
                else
                {
                  uint64_t v570 = *(void *)v568;
                  sub_100038528(*(void *)v568, *((void *)v568 + 1));
                  *(void *)uint64_t v567 = v570;
                  *((void *)v567 + 1) = v569;
                }
                uint64_t v571 = v327[15];
                uint64_t v572 = (void *)((char *)v78 + v571);
                uint64_t v573 = (void *)((char *)v79 + v571);
                if (*v573)
                {
                  *uint64_t v572 = *v573;
                  uint64_t v574 = v573[2];
                  v572[1] = v573[1];
                  v572[2] = v574;
                  swift_bridgeObjectRetain();
                  swift_retain();
                }
                else
                {
                  long long v584 = *(_OWORD *)v573;
                  v572[2] = v573[2];
                  *(_OWORD *)uint64_t v572 = v584;
                }
                break;
              case 2:
                uint64_t v345 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v345 - 8) + 16))(v78, v79, v345);
                uint64_t v346 = (int *)type metadata accessor for TextDetectorResult(0);
                *(_DWORD *)((char *)v78 + v346[5]) = *(_DWORD *)((char *)v79 + v346[5]);
                uint64_t v347 = v346[6];
                uint64_t v348 = (_OWORD *)((char *)v78 + v347);
                uint64_t v349 = (_OWORD *)((char *)v79 + v347);
                long long v351 = v349[2];
                long long v350 = v349[3];
                long long v352 = v349[1];
                _OWORD *v348 = *v349;
                v348[1] = v352;
                v348[2] = v351;
                v348[3] = v350;
                uint64_t v353 = v346[7];
                id v354 = (void *)((char *)v78 + v353);
                uint64_t v355 = (void *)((char *)v79 + v353);
                *id v354 = *v355;
                v354[1] = v355[1];
                *(void *)((char *)v78 + v346[8]) = *(void *)((char *)v79 + v346[8]);
                *(void *)((char *)v78 + v346[9]) = *(void *)((char *)v79 + v346[9]);
                *(void *)((char *)v78 + v346[10]) = *(void *)((char *)v79 + v346[10]);
                *(void *)((char *)v78 + v346[11]) = *(void *)((char *)v79 + v346[11]);
                *(void *)((char *)v78 + v346[12]) = *(void *)((char *)v79 + v346[12]);
                uint64_t v356 = v346[13];
                id v357 = *(void **)((char *)v79 + v356);
                *(void *)((char *)v78 + v356) = v357;
                *((unsigned char *)v78 + v346[14]) = *((unsigned char *)v79 + v346[14]);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v358 = v357;
                break;
              case 3:
              case 4:
                uint64_t v88 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v88 - 8) + 16))(v78, v79, v88);
                uint64_t v89 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
                *(_DWORD *)((char *)v78 + v89[5]) = *(_DWORD *)((char *)v79 + v89[5]);
                uint64_t v90 = v89[6];
                uint64_t v91 = (_OWORD *)((char *)v78 + v90);
                long long v92 = (_OWORD *)((char *)v79 + v90);
                long long v94 = v92[2];
                long long v93 = v92[3];
                long long v95 = v92[1];
                *uint64_t v91 = *v92;
                v91[1] = v95;
                v91[2] = v94;
                v91[3] = v93;
                uint64_t v96 = v89[7];
                long long v97 = (void *)((char *)v78 + v96);
                uint64_t v98 = (void *)((char *)v79 + v96);
                *long long v97 = *v98;
                v97[1] = v98[1];
                *(void *)((char *)v78 + v89[8]) = *(void *)((char *)v79 + v89[8]);
                *(void *)((char *)v78 + v89[9]) = *(void *)((char *)v79 + v89[9]);
                *(void *)((char *)v78 + v89[10]) = *(void *)((char *)v79 + v89[10]);
                swift_bridgeObjectRetain();
                swift_retain();
                break;
              case 5:
                uint64_t v359 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v359 - 8) + 16))(v78, v79, v359);
                id v325 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
                goto LABEL_101;
              default:
                uint64_t v324 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v324 - 8) + 16))(v78, v79, v324);
                id v325 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_101:
                *(_DWORD *)((char *)v78 + v325[5]) = *(_DWORD *)((char *)v79 + v325[5]);
                uint64_t v360 = v325[6];
                unint64_t v361 = (_OWORD *)((char *)v78 + v360);
                uint64_t v362 = (_OWORD *)((char *)v79 + v360);
                long long v364 = v362[2];
                long long v363 = v362[3];
                long long v365 = v362[1];
                _OWORD *v361 = *v362;
                v361[1] = v365;
                v361[2] = v364;
                v361[3] = v363;
                uint64_t v366 = v325[7];
                uint64_t v367 = (void *)((char *)v78 + v366);
                uint64_t v368 = (void *)((char *)v79 + v366);
                *uint64_t v367 = *v368;
                v367[1] = v368[1];
                *(void *)((char *)v78 + v325[8]) = *(void *)((char *)v79 + v325[8]);
                *(void *)((char *)v78 + v325[9]) = *(void *)((char *)v79 + v325[9]);
                swift_bridgeObjectRetain();
                break;
            }
            swift_storeEnumTagMultiPayload();
            uint64_t v585 = sub_10000F214(&qword_100520120);
            uint64_t v586 = *(int *)(v585 + 48);
            uint64_t v587 = (char *)v78 + v586;
            uint64_t v588 = (char *)v79 + v586;
            id v589 = *(id *)v588;
            uint64_t v590 = (void *)*((void *)v588 + 1);
            uint64_t v591 = *((void *)v588 + 2);
            unsigned __int8 v592 = v588[24];
            sub_1000506C4(*(id *)v588, v590, v591, v592);
            *(void *)uint64_t v587 = v589;
            *((void *)v587 + 1) = v590;
            *((void *)v587 + 2) = v591;
            v587[24] = v592;
            uint64_t v593 = *(int *)(v585 + 64);
            v594 = (char *)v78 + v593;
            uint64_t v595 = (char *)v79 + v593;
            id v596 = *(id *)v595;
            uint64_t v597 = (void *)*((void *)v595 + 1);
            uint64_t v598 = *((void *)v595 + 2);
            LOBYTE(v591) = v595[24];
            sub_1000506C4(*(id *)v595, v597, v598, v591);
            *(void *)v594 = v596;
            *((void *)v594 + 1) = v597;
            *((void *)v594 + 2) = v598;
            v594[24] = v591;
            uint64_t v74 = v855;
            uint64_t v48 = v856;
            uint64_t v56 = v857;
          }
          else
          {
            switch(v87)
            {
              case 1:
                uint64_t v867 = v80;
                uint64_t v371 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v371 - 8) + 16))(v78, v79, v371);
                uint64_t v372 = (int *)type metadata accessor for ParseDetectorResult(0);
                *(_DWORD *)((char *)v78 + v372[5]) = *(_DWORD *)((char *)v79 + v372[5]);
                uint64_t v373 = v372[6];
                uint64_t v374 = (_OWORD *)((char *)v78 + v373);
                v375 = (_OWORD *)((char *)v79 + v373);
                long long v377 = v375[2];
                long long v376 = v375[3];
                long long v378 = v375[1];
                *uint64_t v374 = *v375;
                v374[1] = v378;
                v374[2] = v377;
                v374[3] = v376;
                *(void *)((char *)v78 + v372[7]) = *(void *)((char *)v79 + v372[7]);
                *(void *)((char *)v78 + v372[8]) = *(void *)((char *)v79 + v372[8]);
                *(void *)((char *)v78 + v372[9]) = *(void *)((char *)v79 + v372[9]);
                *((unsigned char *)v78 + v372[10]) = *((unsigned char *)v79 + v372[10]);
                uint64_t v379 = v372[11];
                uint64_t v380 = (void *)((char *)v78 + v379);
                uint64_t v381 = (void *)((char *)v79 + v379);
                *uint64_t v380 = *v381;
                v380[1] = v381[1];
                uint64_t v382 = v372[12];
                unint64_t v383 = (void *)((char *)v78 + v382);
                uint64_t v384 = (void *)((char *)v79 + v382);
                void *v383 = *v384;
                v383[1] = v384[1];
                uint64_t v385 = v372[13];
                __srcb = (char *)v78 + v385;
                v841 = (char *)v79 + v385;
                uint64_t v386 = type metadata accessor for VisualUnderstanding.ImageRegion();
                uint64_t v387 = *(void *)(v386 - 8);
                uint64_t v388 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v387 + 48);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v388(v841, 1, v386))
                {
                  uint64_t v389 = sub_10000F214(&qword_100524BD0);
                  memcpy(__srcb, v841, *(void *)(*(void *)(v389 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v387 + 16))(__srcb, v841, v386);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v387 + 56))(__srcb, 0, 1, v386);
                }
                uint64_t v575 = v372[14];
                v576 = (char *)v78 + v575;
                v577 = (char *)v79 + v575;
                unint64_t v578 = *((void *)v577 + 1);
                uint64_t v48 = v856;
                uint64_t v80 = v867;
                if (v578 >> 60 == 15)
                {
                  *(_OWORD *)v576 = *(_OWORD *)v577;
                }
                else
                {
                  uint64_t v579 = *(void *)v577;
                  sub_100038528(*(void *)v577, *((void *)v577 + 1));
                  *(void *)v576 = v579;
                  *((void *)v576 + 1) = v578;
                }
                uint64_t v56 = v857;
                uint64_t v580 = v372[15];
                v581 = (void *)((char *)v78 + v580);
                v582 = (void *)((char *)v79 + v580);
                if (*v582)
                {
                  void *v581 = *v582;
                  uint64_t v583 = v582[2];
                  v581[1] = v582[1];
                  v581[2] = v583;
                  swift_bridgeObjectRetain();
                  swift_retain();
                }
                else
                {
                  long long v599 = *(_OWORD *)v582;
                  v581[2] = v582[2];
                  *(_OWORD *)v581 = v599;
                }
                uint64_t v74 = v855;
                break;
              case 2:
                uint64_t v390 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v390 - 8) + 16))(v78, v79, v390);
                uint64_t v391 = (int *)type metadata accessor for TextDetectorResult(0);
                *(_DWORD *)((char *)v78 + v391[5]) = *(_DWORD *)((char *)v79 + v391[5]);
                uint64_t v392 = v391[6];
                uint64_t v393 = (_OWORD *)((char *)v78 + v392);
                uint64_t v394 = (_OWORD *)((char *)v79 + v392);
                long long v396 = v394[2];
                long long v395 = v394[3];
                long long v397 = v394[1];
                *uint64_t v393 = *v394;
                v393[1] = v397;
                v393[2] = v396;
                v393[3] = v395;
                uint64_t v398 = v391[7];
                uint64_t v399 = (void *)((char *)v78 + v398);
                uint64_t v400 = (void *)((char *)v79 + v398);
                *uint64_t v399 = *v400;
                v399[1] = v400[1];
                *(void *)((char *)v78 + v391[8]) = *(void *)((char *)v79 + v391[8]);
                *(void *)((char *)v78 + v391[9]) = *(void *)((char *)v79 + v391[9]);
                *(void *)((char *)v78 + v391[10]) = *(void *)((char *)v79 + v391[10]);
                *(void *)((char *)v78 + v391[11]) = *(void *)((char *)v79 + v391[11]);
                *(void *)((char *)v78 + v391[12]) = *(void *)((char *)v79 + v391[12]);
                uint64_t v401 = v391[13];
                uint64_t v402 = *(void **)((char *)v79 + v401);
                *(void *)((char *)v78 + v401) = v402;
                *((unsigned char *)v78 + v391[14]) = *((unsigned char *)v79 + v391[14]);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v56 = v857;
                swift_bridgeObjectRetain();
                uint64_t v48 = v856;
                swift_bridgeObjectRetain();
                id v403 = v402;
                break;
              case 3:
              case 4:
                uint64_t v127 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v127 - 8) + 16))(v78, v79, v127);
                BOOL v128 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
                *(_DWORD *)((char *)v78 + v128[5]) = *(_DWORD *)((char *)v79 + v128[5]);
                uint64_t v129 = v128[6];
                long long v130 = (_OWORD *)((char *)v78 + v129);
                long long v131 = (_OWORD *)((char *)v79 + v129);
                long long v133 = v131[2];
                long long v132 = v131[3];
                long long v134 = v131[1];
                *long long v130 = *v131;
                v130[1] = v134;
                v130[2] = v133;
                v130[3] = v132;
                uint64_t v135 = v128[7];
                uint64_t v136 = (void *)((char *)v78 + v135);
                long long v137 = (void *)((char *)v79 + v135);
                *uint64_t v136 = *v137;
                v136[1] = v137[1];
                *(void *)((char *)v78 + v128[8]) = *(void *)((char *)v79 + v128[8]);
                *(void *)((char *)v78 + v128[9]) = *(void *)((char *)v79 + v128[9]);
                *(void *)((char *)v78 + v128[10]) = *(void *)((char *)v79 + v128[10]);
                swift_bridgeObjectRetain();
                swift_retain();
                break;
              case 5:
                uint64_t v404 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v404 - 8) + 16))(v78, v79, v404);
                v370 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
                goto LABEL_107;
              default:
                uint64_t v369 = type metadata accessor for UUID();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v369 - 8) + 16))(v78, v79, v369);
                v370 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_107:
                *(_DWORD *)((char *)v78 + v370[5]) = *(_DWORD *)((char *)v79 + v370[5]);
                uint64_t v405 = v370[6];
                uint64_t v406 = (_OWORD *)((char *)v78 + v405);
                uint64_t v407 = (_OWORD *)((char *)v79 + v405);
                long long v409 = v407[2];
                long long v408 = v407[3];
                long long v410 = v407[1];
                *uint64_t v406 = *v407;
                v406[1] = v410;
                v406[2] = v409;
                v406[3] = v408;
                uint64_t v411 = v370[7];
                uint64_t v412 = (void *)((char *)v78 + v411);
                uint64_t v413 = (void *)((char *)v79 + v411);
                *uint64_t v412 = *v413;
                v412[1] = v413[1];
                *(void *)((char *)v78 + v370[8]) = *(void *)((char *)v79 + v370[8]);
                *(void *)((char *)v78 + v370[9]) = *(void *)((char *)v79 + v370[9]);
                swift_bridgeObjectRetain();
                break;
            }
            swift_storeEnumTagMultiPayload();
          }
          swift_storeEnumTagMultiPayload();
          goto LABEL_153;
        case 3u:
          uint64_t v99 = (void *)*v79;
          uint64_t v100 = (void *)v79[1];
          uint64_t v101 = v79[2];
          unint64_t v102 = v79[3];
          uint64_t v103 = v79;
          uint64_t v104 = v79[4];
          uint64_t v859 = v81;
          uint64_t v864 = v80;
          uint64_t v106 = v103[5];
          uint64_t v105 = v103[6];
          uint64_t v107 = v103[7];
          sub_100050624(v99, v100, v101, v102);
          *uint64_t v78 = v99;
          v78[1] = v100;
          v78[2] = v101;
          v78[3] = v102;
          uint64_t v48 = v856;
          uint64_t v56 = v857;
          uint64_t v74 = v855;
          v78[4] = v104;
          v78[5] = v106;
          uint64_t v79 = v103;
          v78[6] = v105;
          v78[7] = v107;
          uint64_t v81 = v859;
          uint64_t v80 = v864;
          goto LABEL_153;
        case 4u:
          type metadata accessor for CVDetection();
          uint64_t v865 = v80;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v236 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v236 - 8) + 16))(v78, v79, v236);
              uint64_t v237 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v78 + v237[5]) = *(_DWORD *)((char *)v79 + v237[5]);
              uint64_t v238 = v237[6];
              uint64_t v239 = (_OWORD *)((char *)v78 + v238);
              uint64_t v240 = (_OWORD *)((char *)v79 + v238);
              long long v242 = v240[2];
              long long v241 = v240[3];
              long long v243 = v240[1];
              *uint64_t v239 = *v240;
              v239[1] = v243;
              v239[2] = v242;
              v239[3] = v241;
              *(void *)((char *)v78 + v237[7]) = *(void *)((char *)v79 + v237[7]);
              *(void *)((char *)v78 + v237[8]) = *(void *)((char *)v79 + v237[8]);
              *(void *)((char *)v78 + v237[9]) = *(void *)((char *)v79 + v237[9]);
              *((unsigned char *)v78 + v237[10]) = *((unsigned char *)v79 + v237[10]);
              uint64_t v244 = v237[11];
              long long v245 = (void *)((char *)v78 + v244);
              uint64_t v246 = (void *)((char *)v79 + v244);
              *long long v245 = *v246;
              v245[1] = v246[1];
              uint64_t v247 = v237[12];
              long long v248 = (void *)((char *)v78 + v247);
              uint64_t v249 = (void *)((char *)v79 + v247);
              *long long v248 = *v249;
              v248[1] = v249[1];
              uint64_t v250 = v237[13];
              __src = (char *)v78 + v250;
              uint64_t v251 = (char *)v79 + v250;
              uint64_t v252 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v253 = *(void *)(v252 - 8);
              uint64_t v254 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v253 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v254(v251, 1, v252))
              {
                uint64_t v255 = sub_10000F214(&qword_100524BD0);
                memcpy(__src, v251, *(void *)(*(void *)(v255 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v253 + 16))(__src, v251, v252);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v253 + 56))(__src, 0, 1, v252);
              }
              uint64_t v459 = v237[14];
              long long v460 = (char *)v78 + v459;
              uint64_t v461 = (char *)v79 + v459;
              unint64_t v462 = *((void *)v461 + 1);
              uint64_t v74 = v855;
              uint64_t v56 = v857;
              if (v462 >> 60 == 15)
              {
                *(_OWORD *)long long v460 = *(_OWORD *)v461;
              }
              else
              {
                uint64_t v463 = *(void *)v461;
                sub_100038528(*(void *)v461, *((void *)v461 + 1));
                *(void *)long long v460 = v463;
                *((void *)v460 + 1) = v462;
              }
              uint64_t v464 = v237[15];
              uint64_t v465 = (void *)((char *)v78 + v464);
              uint64_t v466 = (void *)((char *)v79 + v464);
              if (*v466)
              {
                *uint64_t v465 = *v466;
                uint64_t v467 = v466[2];
                v465[1] = v466[1];
                v465[2] = v467;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              else
              {
                long long v468 = *(_OWORD *)v466;
                v465[2] = v466[2];
                *(_OWORD *)uint64_t v465 = v468;
              }
              uint64_t v48 = v856;
              break;
            case 2u:
              uint64_t v256 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v256 - 8) + 16))(v78, v79, v256);
              uint64_t v257 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v78 + v257[5]) = *(_DWORD *)((char *)v79 + v257[5]);
              uint64_t v258 = v257[6];
              uint64_t v259 = (_OWORD *)((char *)v78 + v258);
              uint64_t v260 = (_OWORD *)((char *)v79 + v258);
              long long v262 = v260[2];
              long long v261 = v260[3];
              long long v263 = v260[1];
              *uint64_t v259 = *v260;
              v259[1] = v263;
              v259[2] = v262;
              v259[3] = v261;
              uint64_t v264 = v257[7];
              uint64_t v265 = (void *)((char *)v78 + v264);
              long long v266 = (void *)((char *)v79 + v264);
              *uint64_t v265 = *v266;
              v265[1] = v266[1];
              *(void *)((char *)v78 + v257[8]) = *(void *)((char *)v79 + v257[8]);
              *(void *)((char *)v78 + v257[9]) = *(void *)((char *)v79 + v257[9]);
              *(void *)((char *)v78 + v257[10]) = *(void *)((char *)v79 + v257[10]);
              *(void *)((char *)v78 + v257[11]) = *(void *)((char *)v79 + v257[11]);
              *(void *)((char *)v78 + v257[12]) = *(void *)((char *)v79 + v257[12]);
              uint64_t v267 = v257[13];
              uint64_t v268 = *(void **)((char *)v79 + v267);
              *(void *)((char *)v78 + v267) = v268;
              *((unsigned char *)v78 + v257[14]) = *((unsigned char *)v79 + v257[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v269 = v268;
              break;
            case 3u:
            case 4u:
              uint64_t v108 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v108 - 8) + 16))(v78, v79, v108);
              uint64_t v109 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v78 + v109[5]) = *(_DWORD *)((char *)v79 + v109[5]);
              uint64_t v110 = v109[6];
              uint64_t v111 = (_OWORD *)((char *)v78 + v110);
              uint64_t v112 = (_OWORD *)((char *)v79 + v110);
              long long v114 = v112[2];
              long long v113 = v112[3];
              long long v115 = v112[1];
              _OWORD *v111 = *v112;
              v111[1] = v115;
              v111[2] = v114;
              v111[3] = v113;
              uint64_t v116 = v109[7];
              uint64_t v117 = (void *)((char *)v78 + v116);
              uint64_t v118 = (void *)((char *)v79 + v116);
              void *v117 = *v118;
              v117[1] = v118[1];
              *(void *)((char *)v78 + v109[8]) = *(void *)((char *)v79 + v109[8]);
              *(void *)((char *)v78 + v109[9]) = *(void *)((char *)v79 + v109[9]);
              *(void *)((char *)v78 + v109[10]) = *(void *)((char *)v79 + v109[10]);
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5u:
              uint64_t v270 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v270 - 8) + 16))(v78, v79, v270);
              uint64_t v235 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_89;
            default:
              uint64_t v234 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v234 - 8) + 16))(v78, v79, v234);
              uint64_t v235 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_89:
              *(_DWORD *)((char *)v78 + v235[5]) = *(_DWORD *)((char *)v79 + v235[5]);
              uint64_t v271 = v235[6];
              uint64_t v272 = (_OWORD *)((char *)v78 + v271);
              uint64_t v273 = (_OWORD *)((char *)v79 + v271);
              long long v275 = v273[2];
              long long v274 = v273[3];
              long long v276 = v273[1];
              *uint64_t v272 = *v273;
              v272[1] = v276;
              v272[2] = v275;
              v272[3] = v274;
              uint64_t v277 = v235[7];
              uint64_t v278 = (void *)((char *)v78 + v277);
              uint64_t v279 = (void *)((char *)v79 + v277);
              *uint64_t v278 = *v279;
              v278[1] = v279[1];
              *(void *)((char *)v78 + v235[8]) = *(void *)((char *)v79 + v235[8]);
              *(void *)((char *)v78 + v235[9]) = *(void *)((char *)v79 + v235[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v469 = sub_10000F214(&qword_10051A328);
          uint64_t v470 = *(int *)(v469 + 48);
          uint64_t v471 = *(void **)((char *)v79 + v470);
          *(void *)((char *)v78 + v470) = v471;
          uint64_t v472 = *(int *)(v469 + 64);
          uint64_t v473 = (void *)((char *)v78 + v472);
          uint64_t v474 = (void *)((char *)v79 + v472);
          void *v473 = *v474;
          v473[1] = v474[1];
          id v475 = v471;
          swift_bridgeObjectRetain();
          uint64_t v80 = v865;
          goto LABEL_153;
        case 5u:
          uint64_t v119 = sub_10000F214(&qword_10051A320);
          uint64_t v120 = *(void *)(v119 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v120 + 48))(v79, 1, v119))
          {
            uint64_t v121 = type metadata accessor for DataDetectorState(0);
            memcpy(v78, v79, *(void *)(*(void *)(v121 - 8) + 64));
          }
          else
          {
            uint64_t v180 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v180 - 8) + 16))(v78, v79, v180);
            uint64_t v181 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)v78 + v181[5]) = *(_DWORD *)((char *)v79 + v181[5]);
            uint64_t v182 = v181[6];
            uint64_t v183 = (_OWORD *)((char *)v78 + v182);
            uint64_t v184 = (_OWORD *)((char *)v79 + v182);
            long long v186 = v184[2];
            long long v185 = v184[3];
            long long v187 = v184[1];
            *uint64_t v183 = *v184;
            v183[1] = v187;
            v183[2] = v186;
            v183[3] = v185;
            uint64_t v188 = v181[7];
            uint64_t v189 = (void *)((char *)v78 + v188);
            uint64_t v190 = (void *)((char *)v79 + v188);
            *uint64_t v189 = *v190;
            v189[1] = v190[1];
            *(void *)((char *)v78 + v181[8]) = *(void *)((char *)v79 + v181[8]);
            *(void *)((char *)v78 + v181[9]) = *(void *)((char *)v79 + v181[9]);
            *(void *)((char *)v78 + v181[10]) = *(void *)((char *)v79 + v181[10]);
            *(void *)((char *)v78 + v181[11]) = *(void *)((char *)v79 + v181[11]);
            *(void *)((char *)v78 + v181[12]) = *(void *)((char *)v79 + v181[12]);
            uint64_t v191 = v181[13];
            uint64_t v192 = *(void **)((char *)v79 + v191);
            *(void *)((char *)v78 + v191) = v192;
            *((unsigned char *)v78 + v181[14]) = *((unsigned char *)v79 + v181[14]);
            uint64_t v193 = *(int *)(v119 + 48);
            unint64_t v194 = *(void **)((char *)v79 + v193);
            *(void *)((char *)v78 + v193) = v194;
            long long v195 = *(void (**)(void *, void, uint64_t, uint64_t))(v120 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v56 = v857;
            swift_bridgeObjectRetain();
            id v196 = v192;
            id v197 = v194;
            uint64_t v48 = v856;
            v195(v78, 0, 1, v119);
            uint64_t v74 = v855;
          }
          goto LABEL_153;
        case 6u:
          if (v79[1])
          {
            *uint64_t v78 = *v79;
            v78[1] = v79[1];
            *((unsigned char *)v78 + 16) = *((unsigned char *)v79 + 16);
            v78[3] = v79[3];
            v78[4] = v79[4];
            v78[5] = v79[5];
            v78[6] = v79[6];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v198 = *(_OWORD *)v79;
            long long v199 = *((_OWORD *)v79 + 1);
            long long v200 = *((_OWORD *)v79 + 2);
            v78[6] = v79[6];
            *((_OWORD *)v78 + 1) = v199;
            *((_OWORD *)v78 + 2) = v200;
            *(_OWORD *)uint64_t v78 = v198;
          }
          goto LABEL_153;
        case 7u:
          if (v79[1])
          {
            *uint64_t v78 = *v79;
            v78[1] = v79[1];
            v78[2] = v79[2];
            v78[3] = v79[3];
            v78[4] = v79[4];
            v78[5] = v79[5];
            uint64_t v122 = (void *)v79[6];
            v78[6] = v122;
            v78[7] = v79[7];
            v78[8] = v79[8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v123 = v122;
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
            long long v201 = *((_OWORD *)v79 + 1);
            long long v202 = *((_OWORD *)v79 + 2);
            long long v203 = *((_OWORD *)v79 + 3);
            v78[8] = v79[8];
            *((_OWORD *)v78 + 2) = v202;
            *((_OWORD *)v78 + 3) = v203;
            *((_OWORD *)v78 + 1) = v201;
          }
          goto LABEL_153;
        case 8u:
          uint64_t v124 = sub_10000F214(&qword_10051A428);
          uint64_t v125 = *(void *)(v124 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v125 + 48))(v79, 1, v124))
          {
            uint64_t v126 = type metadata accessor for EventLookupState(0);
            memcpy(v78, v79, *(void *)(*(void *)(v126 - 8) + 64));
          }
          else
          {
            *uint64_t v78 = *v79;
            v78[1] = v79[1];
            uint64_t v204 = (int *)type metadata accessor for EventLookupItem(0);
            uint64_t v205 = v204[5];
            v853 = (char *)v78 + v205;
            uint64_t v206 = (char *)v79 + v205;
            uint64_t v207 = type metadata accessor for Date();
            uint64_t v208 = *(void (**)(char *, char *, uint64_t))(*(void *)(v207 - 8) + 16);
            swift_bridgeObjectRetain();
            uint64_t v209 = v206;
            uint64_t v48 = v856;
            v208(v853, v209, v207);
            uint64_t v210 = v207;
            uint64_t v74 = v855;
            v208((char *)v78 + v204[6], (char *)v79 + v204[6], v210);
            uint64_t v211 = v204[7];
            uint64_t v212 = (void *)((char *)v78 + v211);
            uint64_t v213 = (void *)((char *)v79 + v211);
            *uint64_t v212 = *v213;
            v212[1] = v213[1];
            uint64_t v214 = v204[8];
            uint64_t v215 = (void *)((char *)v78 + v214);
            long long v216 = (void *)((char *)v79 + v214);
            *uint64_t v215 = *v216;
            v215[1] = v216[1];
            *((unsigned char *)v78 + v204[9]) = *((unsigned char *)v79 + v204[9]);
            uint64_t v217 = *(int *)(v124 + 48);
            uint64_t v218 = (void *)((char *)v78 + v217);
            uint64_t v219 = (void *)((char *)v79 + v217);
            *uint64_t v218 = *v219;
            v218[1] = v219[1];
            uint64_t v220 = *(int *)(v124 + 64);
            uint64_t v221 = (void *)((char *)v78 + v220);
            uint64_t v222 = (void *)((char *)v79 + v220);
            *uint64_t v221 = *v222;
            v221[1] = v222[1];
            v861 = *(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v56 = v857;
            swift_bridgeObjectRetain();
            v861(v78, 0, 1, v124);
          }
          goto LABEL_153;
        case 9u:
          if (*v79)
          {
            *uint64_t v78 = *v79;
            v78[1] = v79[1];
            v78[2] = v79[2];
            v78[3] = v79[3];
            v78[4] = v79[4];
            v78[5] = v79[5];
            v78[6] = v79[6];
            v78[7] = v79[7];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v56 = v857;
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v149 = *(_OWORD *)v79;
            long long v150 = *((_OWORD *)v79 + 1);
            long long v151 = *((_OWORD *)v79 + 3);
            *((_OWORD *)v78 + 2) = *((_OWORD *)v79 + 2);
            *((_OWORD *)v78 + 3) = v151;
            *(_OWORD *)uint64_t v78 = v149;
            *((_OWORD *)v78 + 1) = v150;
          }
LABEL_153:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v78, v79, *(void *)(v81 + 64));
          break;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
      goto LABEL_155;
    }
    goto LABEL_32;
  }
  if (v84)
  {
    sub_1002ADE8C((uint64_t)v78, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
LABEL_32:
    size_t v85 = *(void *)(*(void *)(sub_10000F214(&qword_10051A308) - 8) + 64);
LABEL_33:
    memcpy(v78, v79, v85);
    goto LABEL_155;
  }
  if (v855 != v856)
  {
    sub_1002ADE8C((uint64_t)v78, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *uint64_t v78 = *v79;
        v78[1] = v79[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        *uint64_t v78 = *v79;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int v152 = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v153 = swift_getEnumCaseMultiPayload();
        if (v152 == 1)
        {
          switch(v153)
          {
            case 1:
              uint64_t v478 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v478 - 8) + 16))(v78, v79, v478);
              uint64_t v479 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v78 + v479[5]) = *(_DWORD *)((char *)v79 + v479[5]);
              uint64_t v480 = v479[6];
              uint64_t v481 = (_OWORD *)((char *)v78 + v480);
              uint64_t v482 = (_OWORD *)((char *)v79 + v480);
              long long v484 = v482[2];
              long long v483 = v482[3];
              long long v485 = v482[1];
              *uint64_t v481 = *v482;
              v481[1] = v485;
              v481[2] = v484;
              v481[3] = v483;
              *(void *)((char *)v78 + v479[7]) = *(void *)((char *)v79 + v479[7]);
              *(void *)((char *)v78 + v479[8]) = *(void *)((char *)v79 + v479[8]);
              *(void *)((char *)v78 + v479[9]) = *(void *)((char *)v79 + v479[9]);
              *((unsigned char *)v78 + v479[10]) = *((unsigned char *)v79 + v479[10]);
              uint64_t v486 = v479[11];
              uint64_t v487 = (void *)((char *)v78 + v486);
              uint64_t v488 = (void *)((char *)v79 + v486);
              *uint64_t v487 = *v488;
              v487[1] = v488[1];
              uint64_t v489 = v479[12];
              uint64_t v490 = (void *)((char *)v78 + v489);
              uint64_t v491 = (void *)((char *)v79 + v489);
              *uint64_t v490 = *v491;
              v490[1] = v491[1];
              uint64_t v492 = v479[13];
              __srcc = (char *)v78 + v492;
              v842 = (char *)v79 + v492;
              uint64_t v493 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v494 = *(void *)(v493 - 8);
              uint64_t v495 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v494 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v495(v842, 1, v493))
              {
                uint64_t v496 = sub_10000F214(&qword_100524BD0);
                memcpy(__srcc, v842, *(void *)(*(void *)(v496 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v494 + 16))(__srcc, v842, v493);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v494 + 56))(__srcc, 0, 1, v493);
              }
              uint64_t v806 = v479[14];
              v807 = (char *)v78 + v806;
              v808 = (char *)v79 + v806;
              unint64_t v809 = *((void *)v808 + 1);
              if (v809 >> 60 == 15)
              {
                *(_OWORD *)v807 = *(_OWORD *)v808;
              }
              else
              {
                uint64_t v810 = *(void *)v808;
                sub_100038528(*(void *)v808, *((void *)v808 + 1));
                *(void *)v807 = v810;
                *((void *)v807 + 1) = v809;
              }
              uint64_t v811 = v479[15];
              v812 = (void *)((char *)v78 + v811);
              v813 = (void *)((char *)v79 + v811);
              if (*v813)
              {
                void *v812 = *v813;
                uint64_t v814 = v813[2];
                v812[1] = v813[1];
                v812[2] = v814;
                goto LABEL_199;
              }
              long long v838 = *(_OWORD *)v813;
              v812[2] = v813[2];
              *(_OWORD *)v812 = v838;
              break;
            case 2:
              uint64_t v497 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v497 - 8) + 16))(v78, v79, v497);
              uint64_t v498 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v78 + v498[5]) = *(_DWORD *)((char *)v79 + v498[5]);
              uint64_t v499 = v498[6];
              uint64_t v500 = (_OWORD *)((char *)v78 + v499);
              uint64_t v501 = (_OWORD *)((char *)v79 + v499);
              long long v503 = v501[2];
              long long v502 = v501[3];
              long long v504 = v501[1];
              *uint64_t v500 = *v501;
              v500[1] = v504;
              v500[2] = v503;
              v500[3] = v502;
              uint64_t v505 = v498[7];
              uint64_t v506 = (void *)((char *)v78 + v505);
              uint64_t v507 = (void *)((char *)v79 + v505);
              *uint64_t v506 = *v507;
              v506[1] = v507[1];
              *(void *)((char *)v78 + v498[8]) = *(void *)((char *)v79 + v498[8]);
              *(void *)((char *)v78 + v498[9]) = *(void *)((char *)v79 + v498[9]);
              *(void *)((char *)v78 + v498[10]) = *(void *)((char *)v79 + v498[10]);
              *(void *)((char *)v78 + v498[11]) = *(void *)((char *)v79 + v498[11]);
              *(void *)((char *)v78 + v498[12]) = *(void *)((char *)v79 + v498[12]);
              uint64_t v508 = v498[13];
              uint64_t v509 = *(void **)((char *)v79 + v508);
              *(void *)((char *)v78 + v508) = v509;
              *((unsigned char *)v78 + v498[14]) = *((unsigned char *)v79 + v498[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v510 = v509;
              break;
            case 3:
            case 4:
              uint64_t v154 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v154 - 8) + 16))(v78, v79, v154);
              uint64_t v155 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v78 + v155[5]) = *(_DWORD *)((char *)v79 + v155[5]);
              uint64_t v156 = v155[6];
              id v157 = (_OWORD *)((char *)v78 + v156);
              id v158 = (_OWORD *)((char *)v79 + v156);
              long long v160 = v158[2];
              long long v159 = v158[3];
              long long v161 = v158[1];
              *id v157 = *v158;
              v157[1] = v161;
              v157[2] = v160;
              v157[3] = v159;
              uint64_t v162 = v155[7];
              uint64_t v163 = (void *)((char *)v78 + v162);
              uint64_t v164 = (void *)((char *)v79 + v162);
              *uint64_t v163 = *v164;
              v163[1] = v164[1];
              *(void *)((char *)v78 + v155[8]) = *(void *)((char *)v79 + v155[8]);
              *(void *)((char *)v78 + v155[9]) = *(void *)((char *)v79 + v155[9]);
              *(void *)((char *)v78 + v155[10]) = *(void *)((char *)v79 + v155[10]);
LABEL_199:
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5:
              uint64_t v511 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v511 - 8) + 16))(v78, v79, v511);
              uint64_t v477 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_128;
            default:
              uint64_t v476 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v476 - 8) + 16))(v78, v79, v476);
              uint64_t v477 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_128:
              *(_DWORD *)((char *)v78 + v477[5]) = *(_DWORD *)((char *)v79 + v477[5]);
              uint64_t v512 = v477[6];
              v513 = (_OWORD *)((char *)v78 + v512);
              v514 = (_OWORD *)((char *)v79 + v512);
              long long v516 = v514[2];
              long long v515 = v514[3];
              long long v517 = v514[1];
              _OWORD *v513 = *v514;
              v513[1] = v517;
              v513[2] = v516;
              v513[3] = v515;
              uint64_t v518 = v477[7];
              uint64_t v519 = (void *)((char *)v78 + v518);
              uint64_t v520 = (void *)((char *)v79 + v518);
              *uint64_t v519 = *v520;
              v519[1] = v520[1];
              *(void *)((char *)v78 + v477[8]) = *(void *)((char *)v79 + v477[8]);
              *(void *)((char *)v78 + v477[9]) = *(void *)((char *)v79 + v477[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v815 = sub_10000F214(&qword_100520120);
          uint64_t v816 = *(int *)(v815 + 48);
          v817 = (char *)v78 + v816;
          v818 = (char *)v79 + v816;
          id v819 = *(id *)v818;
          v820 = (void *)*((void *)v818 + 1);
          uint64_t v821 = *((void *)v818 + 2);
          unsigned __int8 v822 = v818[24];
          sub_1000506C4(*(id *)v818, v820, v821, v822);
          *(void *)v817 = v819;
          *((void *)v817 + 1) = v820;
          *((void *)v817 + 2) = v821;
          v817[24] = v822;
          uint64_t v823 = *(int *)(v815 + 64);
          v824 = (char *)v78 + v823;
          v825 = (char *)v79 + v823;
          id v826 = *(id *)v825;
          v827 = (void *)*((void *)v825 + 1);
          uint64_t v828 = *((void *)v825 + 2);
          LOBYTE(v821) = v825[24];
          sub_1000506C4(*(id *)v825, v827, v828, v821);
          *(void *)v824 = v826;
          *((void *)v824 + 1) = v827;
          *((void *)v824 + 2) = v828;
          v824[24] = v821;
          uint64_t v74 = v855;
          uint64_t v48 = v856;
          uint64_t v56 = v857;
        }
        else
        {
          switch(v153)
          {
            case 1:
              uint64_t v523 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v523 - 8) + 16))(v78, v79, v523);
              uint64_t v524 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v78 + v524[5]) = *(_DWORD *)((char *)v79 + v524[5]);
              uint64_t v525 = v524[6];
              uint64_t v526 = (_OWORD *)((char *)v78 + v525);
              uint64_t v527 = (_OWORD *)((char *)v79 + v525);
              long long v529 = v527[2];
              long long v528 = v527[3];
              long long v530 = v527[1];
              *uint64_t v526 = *v527;
              v526[1] = v530;
              v526[2] = v529;
              v526[3] = v528;
              *(void *)((char *)v78 + v524[7]) = *(void *)((char *)v79 + v524[7]);
              *(void *)((char *)v78 + v524[8]) = *(void *)((char *)v79 + v524[8]);
              *(void *)((char *)v78 + v524[9]) = *(void *)((char *)v79 + v524[9]);
              *((unsigned char *)v78 + v524[10]) = *((unsigned char *)v79 + v524[10]);
              uint64_t v531 = v524[11];
              uint64_t v532 = (void *)((char *)v78 + v531);
              uint64_t v533 = (void *)((char *)v79 + v531);
              *uint64_t v532 = *v533;
              v532[1] = v533[1];
              uint64_t v534 = v524[12];
              uint64_t v535 = (void *)((char *)v78 + v534);
              uint64_t v536 = (void *)((char *)v79 + v534);
              *uint64_t v535 = *v536;
              v535[1] = v536[1];
              uint64_t v537 = v524[13];
              __srcd = (char *)v78 + v537;
              v843 = (char *)v79 + v537;
              uint64_t v538 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v539 = *(void *)(v538 - 8);
              uint64_t v540 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v539 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v540(v843, 1, v538))
              {
                uint64_t v541 = sub_10000F214(&qword_100524BD0);
                memcpy(__srcd, v843, *(void *)(*(void *)(v541 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v539 + 16))(__srcd, v843, v538);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v539 + 56))(__srcd, 0, 1, v538);
              }
              uint64_t v829 = v524[14];
              v830 = (char *)v78 + v829;
              v831 = (char *)v79 + v829;
              unint64_t v832 = *((void *)v831 + 1);
              uint64_t v48 = v856;
              if (v832 >> 60 == 15)
              {
                *(_OWORD *)v830 = *(_OWORD *)v831;
              }
              else
              {
                uint64_t v833 = *(void *)v831;
                sub_100038528(*(void *)v831, *((void *)v831 + 1));
                *(void *)v830 = v833;
                *((void *)v830 + 1) = v832;
              }
              uint64_t v56 = v857;
              uint64_t v834 = v524[15];
              v835 = (void *)((char *)v78 + v834);
              v836 = (void *)((char *)v79 + v834);
              if (*v836)
              {
                void *v835 = *v836;
                uint64_t v837 = v836[2];
                v835[1] = v836[1];
                v835[2] = v837;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              else
              {
                long long v839 = *(_OWORD *)v836;
                v835[2] = v836[2];
                *(_OWORD *)v835 = v839;
              }
              uint64_t v74 = v855;
              break;
            case 2:
              uint64_t v542 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v542 - 8) + 16))(v78, v79, v542);
              uint64_t v543 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v78 + v543[5]) = *(_DWORD *)((char *)v79 + v543[5]);
              uint64_t v544 = v543[6];
              uint64_t v545 = (_OWORD *)((char *)v78 + v544);
              id v546 = (_OWORD *)((char *)v79 + v544);
              long long v548 = v546[2];
              long long v547 = v546[3];
              long long v549 = v546[1];
              *uint64_t v545 = *v546;
              v545[1] = v549;
              v545[2] = v548;
              v545[3] = v547;
              uint64_t v550 = v543[7];
              uint64_t v551 = (void *)((char *)v78 + v550);
              uint64_t v552 = (void *)((char *)v79 + v550);
              *uint64_t v551 = *v552;
              v551[1] = v552[1];
              *(void *)((char *)v78 + v543[8]) = *(void *)((char *)v79 + v543[8]);
              *(void *)((char *)v78 + v543[9]) = *(void *)((char *)v79 + v543[9]);
              *(void *)((char *)v78 + v543[10]) = *(void *)((char *)v79 + v543[10]);
              *(void *)((char *)v78 + v543[11]) = *(void *)((char *)v79 + v543[11]);
              *(void *)((char *)v78 + v543[12]) = *(void *)((char *)v79 + v543[12]);
              uint64_t v553 = v543[13];
              long long v554 = *(void **)((char *)v79 + v553);
              *(void *)((char *)v78 + v553) = v554;
              *((unsigned char *)v78 + v543[14]) = *((unsigned char *)v79 + v543[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v56 = v857;
              swift_bridgeObjectRetain();
              uint64_t v48 = v856;
              swift_bridgeObjectRetain();
              id v555 = v554;
              break;
            case 3:
            case 4:
              uint64_t v223 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v223 - 8) + 16))(v78, v79, v223);
              uint64_t v224 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v78 + v224[5]) = *(_DWORD *)((char *)v79 + v224[5]);
              uint64_t v225 = v224[6];
              uint64_t v226 = (_OWORD *)((char *)v78 + v225);
              uint64_t v227 = (_OWORD *)((char *)v79 + v225);
              long long v229 = v227[2];
              long long v228 = v227[3];
              long long v230 = v227[1];
              *uint64_t v226 = *v227;
              v226[1] = v230;
              v226[2] = v229;
              v226[3] = v228;
              uint64_t v231 = v224[7];
              uint64_t v232 = (void *)((char *)v78 + v231);
              uint64_t v233 = (void *)((char *)v79 + v231);
              *uint64_t v232 = *v233;
              v232[1] = v233[1];
              *(void *)((char *)v78 + v224[8]) = *(void *)((char *)v79 + v224[8]);
              *(void *)((char *)v78 + v224[9]) = *(void *)((char *)v79 + v224[9]);
              *(void *)((char *)v78 + v224[10]) = *(void *)((char *)v79 + v224[10]);
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5:
              uint64_t v556 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v556 - 8) + 16))(v78, v79, v556);
              uint64_t v522 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_134;
            default:
              uint64_t v521 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v521 - 8) + 16))(v78, v79, v521);
              uint64_t v522 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_134:
              *(_DWORD *)((char *)v78 + v522[5]) = *(_DWORD *)((char *)v79 + v522[5]);
              uint64_t v557 = v522[6];
              uint64_t v558 = (_OWORD *)((char *)v78 + v557);
              uint64_t v559 = (_OWORD *)((char *)v79 + v557);
              long long v561 = v559[2];
              long long v560 = v559[3];
              long long v562 = v559[1];
              *uint64_t v558 = *v559;
              v558[1] = v562;
              v558[2] = v561;
              v558[3] = v560;
              uint64_t v563 = v522[7];
              uint64_t v564 = (void *)((char *)v78 + v563);
              uint64_t v565 = (void *)((char *)v79 + v563);
              void *v564 = *v565;
              v564[1] = v565[1];
              *(void *)((char *)v78 + v522[8]) = *(void *)((char *)v79 + v522[8]);
              *(void *)((char *)v78 + v522[9]) = *(void *)((char *)v79 + v522[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v165 = *v79;
        Swift::Int v166 = (void *)v79[1];
        uint64_t v167 = v79[2];
        unint64_t v168 = v79[3];
        uint64_t v169 = v79[4];
        uint64_t v170 = v79[5];
        uint64_t v171 = v79[6];
        uint64_t v860 = v79[7];
        sub_100050624((void *)*v79, v166, v167, v168);
        *uint64_t v78 = v165;
        v78[1] = v166;
        v78[2] = v167;
        v78[3] = v168;
        uint64_t v48 = v856;
        uint64_t v56 = v857;
        uint64_t v74 = v855;
        v78[4] = v169;
        v78[5] = v170;
        v78[6] = v171;
        v78[7] = v860;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v416 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v416 - 8) + 16))(v78, v79, v416);
            uint64_t v417 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)v78 + v417[5]) = *(_DWORD *)((char *)v79 + v417[5]);
            uint64_t v418 = v417[6];
            uint64_t v419 = (_OWORD *)((char *)v78 + v418);
            uint64_t v420 = (_OWORD *)((char *)v79 + v418);
            long long v422 = v420[2];
            long long v421 = v420[3];
            long long v423 = v420[1];
            *uint64_t v419 = *v420;
            v419[1] = v423;
            v419[2] = v422;
            v419[3] = v421;
            *(void *)((char *)v78 + v417[7]) = *(void *)((char *)v79 + v417[7]);
            *(void *)((char *)v78 + v417[8]) = *(void *)((char *)v79 + v417[8]);
            *(void *)((char *)v78 + v417[9]) = *(void *)((char *)v79 + v417[9]);
            *((unsigned char *)v78 + v417[10]) = *((unsigned char *)v79 + v417[10]);
            uint64_t v424 = v417[11];
            uint64_t v425 = (void *)((char *)v78 + v424);
            uint64_t v426 = (void *)((char *)v79 + v424);
            *uint64_t v425 = *v426;
            v425[1] = v426[1];
            uint64_t v427 = v417[12];
            uint64_t v428 = (void *)((char *)v78 + v427);
            uint64_t v429 = (void *)((char *)v79 + v427);
            *uint64_t v428 = *v429;
            v428[1] = v429[1];
            uint64_t v430 = v417[13];
            __dst = (char *)v78 + v430;
            v845 = (char *)v79 + v430;
            uint64_t v431 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v432 = *(void *)(v431 - 8);
            uint64_t v433 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v432 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v433(v845, 1, v431))
            {
              uint64_t v434 = sub_10000F214(&qword_100524BD0);
              memcpy(__dst, v845, *(void *)(*(void *)(v434 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v432 + 16))(__dst, v845, v431);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v432 + 56))(__dst, 0, 1, v431);
            }
            uint64_t v789 = v417[14];
            v790 = (char *)v78 + v789;
            v791 = (char *)v79 + v789;
            unint64_t v792 = *((void *)v791 + 1);
            uint64_t v74 = v855;
            if (v792 >> 60 == 15)
            {
              *(_OWORD *)v790 = *(_OWORD *)v791;
            }
            else
            {
              uint64_t v793 = *(void *)v791;
              sub_100038528(*(void *)v791, *((void *)v791 + 1));
              *(void *)v790 = v793;
              *((void *)v790 + 1) = v792;
            }
            uint64_t v56 = v857;
            uint64_t v794 = v417[15];
            v795 = (void *)((char *)v78 + v794);
            v796 = (void *)((char *)v79 + v794);
            if (*v796)
            {
              void *v795 = *v796;
              uint64_t v797 = v796[2];
              v795[1] = v796[1];
              v795[2] = v797;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v798 = *(_OWORD *)v796;
              v795[2] = v796[2];
              *(_OWORD *)v795 = v798;
            }
            uint64_t v48 = v856;
            break;
          case 2u:
            uint64_t v435 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v435 - 8) + 16))(v78, v79, v435);
            char v436 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)v78 + v436[5]) = *(_DWORD *)((char *)v79 + v436[5]);
            uint64_t v437 = v436[6];
            char v438 = (_OWORD *)((char *)v78 + v437);
            uint64_t v439 = (_OWORD *)((char *)v79 + v437);
            long long v441 = v439[2];
            long long v440 = v439[3];
            long long v442 = v439[1];
            *char v438 = *v439;
            v438[1] = v442;
            v438[2] = v441;
            v438[3] = v440;
            uint64_t v443 = v436[7];
            uint64_t v444 = (void *)((char *)v78 + v443);
            uint64_t v445 = (void *)((char *)v79 + v443);
            *uint64_t v444 = *v445;
            v444[1] = v445[1];
            *(void *)((char *)v78 + v436[8]) = *(void *)((char *)v79 + v436[8]);
            *(void *)((char *)v78 + v436[9]) = *(void *)((char *)v79 + v436[9]);
            *(void *)((char *)v78 + v436[10]) = *(void *)((char *)v79 + v436[10]);
            *(void *)((char *)v78 + v436[11]) = *(void *)((char *)v79 + v436[11]);
            *(void *)((char *)v78 + v436[12]) = *(void *)((char *)v79 + v436[12]);
            uint64_t v446 = v436[13];
            uint64_t v447 = *(void **)((char *)v79 + v446);
            *(void *)((char *)v78 + v446) = v447;
            *((unsigned char *)v78 + v436[14]) = *((unsigned char *)v79 + v436[14]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v56 = v857;
            swift_bridgeObjectRetain();
            uint64_t v48 = v856;
            swift_bridgeObjectRetain();
            id v448 = v447;
            break;
          case 3u:
          case 4u:
            uint64_t v138 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v138 - 8) + 16))(v78, v79, v138);
            uint64_t v139 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)v78 + v139[5]) = *(_DWORD *)((char *)v79 + v139[5]);
            uint64_t v140 = v139[6];
            uint64_t v141 = (_OWORD *)((char *)v78 + v140);
            char v142 = (_OWORD *)((char *)v79 + v140);
            long long v144 = v142[2];
            long long v143 = v142[3];
            long long v145 = v142[1];
            *uint64_t v141 = *v142;
            v141[1] = v145;
            v141[2] = v144;
            v141[3] = v143;
            uint64_t v146 = v139[7];
            long long v147 = (void *)((char *)v78 + v146);
            uint64_t v148 = (void *)((char *)v79 + v146);
            *long long v147 = *v148;
            v147[1] = v148[1];
            *(void *)((char *)v78 + v139[8]) = *(void *)((char *)v79 + v139[8]);
            *(void *)((char *)v78 + v139[9]) = *(void *)((char *)v79 + v139[9]);
            *(void *)((char *)v78 + v139[10]) = *(void *)((char *)v79 + v139[10]);
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            uint64_t v449 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v449 - 8) + 16))(v78, v79, v449);
            uint64_t v415 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            goto LABEL_113;
          default:
            uint64_t v414 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v414 - 8) + 16))(v78, v79, v414);
            uint64_t v415 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_113:
            *(_DWORD *)((char *)v78 + v415[5]) = *(_DWORD *)((char *)v79 + v415[5]);
            uint64_t v450 = v415[6];
            uint64_t v451 = (_OWORD *)((char *)v78 + v450);
            uint64_t v452 = (_OWORD *)((char *)v79 + v450);
            long long v454 = v452[2];
            long long v453 = v452[3];
            long long v455 = v452[1];
            _OWORD *v451 = *v452;
            v451[1] = v455;
            v451[2] = v454;
            v451[3] = v453;
            uint64_t v456 = v415[7];
            uint64_t v457 = (void *)((char *)v78 + v456);
            uint64_t v458 = (void *)((char *)v79 + v456);
            *uint64_t v457 = *v458;
            v457[1] = v458[1];
            *(void *)((char *)v78 + v415[8]) = *(void *)((char *)v79 + v415[8]);
            *(void *)((char *)v78 + v415[9]) = *(void *)((char *)v79 + v415[9]);
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v799 = sub_10000F214(&qword_10051A328);
        uint64_t v800 = *(int *)(v799 + 48);
        v801 = *(void **)((char *)v79 + v800);
        *(void *)((char *)v78 + v800) = v801;
        uint64_t v802 = *(int *)(v799 + 64);
        v803 = (void *)((char *)v78 + v802);
        v804 = (void *)((char *)v79 + v802);
        void *v803 = *v804;
        v803[1] = v804[1];
        id v805 = v801;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v172 = sub_10000F214(&qword_10051A320);
        uint64_t v173 = *(void *)(v172 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v173 + 48))(v79, 1, v172))
        {
          uint64_t v174 = type metadata accessor for DataDetectorState(0);
          memcpy(v78, v79, *(void *)(*(void *)(v174 - 8) + 64));
        }
        else
        {
          uint64_t v283 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v283 - 8) + 16))(v78, v79, v283);
          uint64_t v284 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)v78 + v284[5]) = *(_DWORD *)((char *)v79 + v284[5]);
          uint64_t v285 = v284[6];
          uint64_t v286 = (_OWORD *)((char *)v78 + v285);
          uint64_t v287 = (_OWORD *)((char *)v79 + v285);
          long long v289 = v287[2];
          long long v288 = v287[3];
          long long v290 = v287[1];
          *uint64_t v286 = *v287;
          v286[1] = v290;
          v286[2] = v289;
          v286[3] = v288;
          uint64_t v291 = v284[7];
          unsigned __int8 v292 = (void *)((char *)v78 + v291);
          uint64_t v293 = (void *)((char *)v79 + v291);
          void *v292 = *v293;
          v292[1] = v293[1];
          *(void *)((char *)v78 + v284[8]) = *(void *)((char *)v79 + v284[8]);
          *(void *)((char *)v78 + v284[9]) = *(void *)((char *)v79 + v284[9]);
          *(void *)((char *)v78 + v284[10]) = *(void *)((char *)v79 + v284[10]);
          *(void *)((char *)v78 + v284[11]) = *(void *)((char *)v79 + v284[11]);
          *(void *)((char *)v78 + v284[12]) = *(void *)((char *)v79 + v284[12]);
          uint64_t v294 = v284[13];
          long long v295 = *(void **)((char *)v79 + v294);
          *(void *)((char *)v78 + v294) = v295;
          *((unsigned char *)v78 + v284[14]) = *((unsigned char *)v79 + v284[14]);
          uint64_t v296 = *(int *)(v172 + 48);
          uint64_t v297 = *(void **)((char *)v79 + v296);
          *(void *)((char *)v78 + v296) = v297;
          long long v298 = *(void (**)(void *, void, uint64_t, uint64_t))(v173 + 56);
          swift_bridgeObjectRetain();
          uint64_t v56 = v857;
          swift_bridgeObjectRetain();
          uint64_t v48 = v856;
          swift_bridgeObjectRetain();
          uint64_t v74 = v855;
          swift_bridgeObjectRetain();
          id v299 = v295;
          id v300 = v297;
          v298(v78, 0, 1, v172);
        }
        goto LABEL_95;
      case 6u:
        if (v79[1])
        {
          *uint64_t v78 = *v79;
          v78[1] = v79[1];
          *((unsigned char *)v78 + 16) = *((unsigned char *)v79 + 16);
          v78[3] = v79[3];
          v78[4] = v79[4];
          v78[5] = v79[5];
          v78[6] = v79[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v56 = v857;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v301 = *(_OWORD *)v79;
          long long v302 = *((_OWORD *)v79 + 1);
          long long v303 = *((_OWORD *)v79 + 2);
          v78[6] = v79[6];
          *((_OWORD *)v78 + 1) = v302;
          *((_OWORD *)v78 + 2) = v303;
          *(_OWORD *)uint64_t v78 = v301;
        }
        goto LABEL_95;
      case 7u:
        if (v79[1])
        {
          *uint64_t v78 = *v79;
          v78[1] = v79[1];
          v78[2] = v79[2];
          v78[3] = v79[3];
          v78[4] = v79[4];
          v78[5] = v79[5];
          uint64_t v175 = (void *)v79[6];
          v78[6] = v175;
          v78[7] = v79[7];
          v78[8] = v79[8];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v56 = v857;
          swift_bridgeObjectRetain();
          id v176 = v175;
          uint64_t v48 = v856;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
          long long v304 = *((_OWORD *)v79 + 1);
          long long v305 = *((_OWORD *)v79 + 2);
          long long v306 = *((_OWORD *)v79 + 3);
          v78[8] = v79[8];
          *((_OWORD *)v78 + 2) = v305;
          *((_OWORD *)v78 + 3) = v306;
          *((_OWORD *)v78 + 1) = v304;
        }
        goto LABEL_95;
      case 8u:
        uint64_t v177 = sub_10000F214(&qword_10051A428);
        uint64_t v178 = *(void *)(v177 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v178 + 48))(v79, 1, v177))
        {
          uint64_t v179 = type metadata accessor for EventLookupState(0);
          memcpy(v78, v79, *(void *)(*(void *)(v179 - 8) + 64));
        }
        else
        {
          *uint64_t v78 = *v79;
          v78[1] = v79[1];
          uint64_t v307 = (int *)type metadata accessor for EventLookupItem(0);
          uint64_t v308 = v307[5];
          v862 = (char *)v78 + v308;
          v854 = (char *)v79 + v308;
          uint64_t v309 = type metadata accessor for Date();
          uint64_t v310 = *(void (**)(char *, char *, uint64_t))(*(void *)(v309 - 8) + 16);
          swift_bridgeObjectRetain();
          v310(v862, v854, v309);
          v310((char *)v78 + v307[6], (char *)v79 + v307[6], v309);
          uint64_t v311 = v307[7];
          uint64_t v312 = (void *)((char *)v78 + v311);
          uint64_t v313 = (void *)((char *)v79 + v311);
          *uint64_t v312 = *v313;
          v312[1] = v313[1];
          uint64_t v314 = v307[8];
          uint64_t v315 = (void *)((char *)v78 + v314);
          long long v316 = (void *)((char *)v79 + v314);
          *uint64_t v315 = *v316;
          v315[1] = v316[1];
          *((unsigned char *)v78 + v307[9]) = *((unsigned char *)v79 + v307[9]);
          uint64_t v317 = *(int *)(v177 + 48);
          uint64_t v318 = (void *)((char *)v78 + v317);
          long long v319 = (void *)((char *)v79 + v317);
          *uint64_t v318 = *v319;
          v318[1] = v319[1];
          uint64_t v320 = *(int *)(v177 + 64);
          uint64_t v321 = (void *)((char *)v78 + v320);
          uint64_t v322 = (void *)((char *)v79 + v320);
          *uint64_t v321 = *v322;
          v321[1] = v322[1];
          uint64_t v323 = *(void (**)(void *, void, uint64_t, uint64_t))(v178 + 56);
          swift_bridgeObjectRetain();
          uint64_t v56 = v857;
          swift_bridgeObjectRetain();
          uint64_t v48 = v856;
          swift_bridgeObjectRetain();
          uint64_t v74 = v855;
          swift_bridgeObjectRetain();
          v323(v78, 0, 1, v177);
        }
        goto LABEL_95;
      case 9u:
        if (*v79)
        {
          *uint64_t v78 = *v79;
          v78[1] = v79[1];
          v78[2] = v79[2];
          v78[3] = v79[3];
          v78[4] = v79[4];
          v78[5] = v79[5];
          v78[6] = v79[6];
          v78[7] = v79[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v56 = v857;
          swift_bridgeObjectRetain();
          uint64_t v48 = v856;
          swift_bridgeObjectRetain();
          uint64_t v74 = v855;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v280 = *(_OWORD *)v79;
          long long v281 = *((_OWORD *)v79 + 1);
          long long v282 = *((_OWORD *)v79 + 3);
          *((_OWORD *)v78 + 2) = *((_OWORD *)v79 + 2);
          *((_OWORD *)v78 + 3) = v282;
          *(_OWORD *)uint64_t v78 = v280;
          *((_OWORD *)v78 + 1) = v281;
        }
LABEL_95:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        size_t v85 = *(void *)(v81 + 64);
        goto LABEL_33;
    }
  }
LABEL_155:
  uint64_t v600 = sub_10000F214(&qword_100525F58);
  *(void *)((char *)v78 + *(int *)(v600 + 28)) = *(void *)((char *)v79 + *(int *)(v600 + 28));
  swift_retain();
  swift_release();
  uint64_t v601 = v56[13];
  uint64_t v602 = v74 + v601;
  uint64_t v603 = v48 + v601;
  *(unsigned char *)uint64_t v602 = *(unsigned char *)v603;
  *(void *)(v602 + 8) = *(void *)(v603 + 8);
  swift_retain();
  swift_release();
  uint64_t v604 = v56[14];
  uint64_t v605 = v74 + v604;
  uint64_t v606 = v48 + v604;
  *(unsigned char *)uint64_t v605 = *(unsigned char *)v606;
  *(void *)(v605 + 8) = *(void *)(v606 + 8);
  swift_retain();
  swift_release();
  uint64_t v607 = v56[15];
  uint64_t v608 = v74 + v607;
  uint64_t v609 = v48 + v607;
  uint64_t v610 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v610 - 8) + 24))(v608, v609, v610);
  uint64_t v611 = sub_10000F214(&qword_10051C250);
  *(void *)(v608 + *(int *)(v611 + 28)) = *(void *)(v609 + *(int *)(v611 + 28));
  swift_retain();
  swift_release();
  uint64_t v612 = v56[16];
  v613 = (void *)(v74 + v612);
  uint64_t v614 = v48 + v612;
  void *v613 = *(void *)(v48 + v612);
  v613[1] = *(void *)(v48 + v612 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v613[2] = *(void *)(v614 + 16);
  swift_retain();
  swift_release();
  uint64_t v615 = v56[17];
  uint64_t v616 = v74 + v615;
  uint64_t v617 = v48 + v615;
  *(unsigned char *)uint64_t v616 = *(unsigned char *)v617;
  *(void *)(v616 + 8) = *(void *)(v617 + 8);
  swift_retain();
  swift_release();
  uint64_t v618 = v56[18];
  uint64_t v619 = v74 + v618;
  uint64_t v620 = v48 + v618;
  *(unsigned char *)uint64_t v619 = *(unsigned char *)(v48 + v618);
  *(void *)(v619 + 8) = *(void *)(v48 + v618 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v619 + 16) = *(unsigned char *)(v620 + 16);
  uint64_t v621 = v56[19];
  uint64_t v622 = v74 + v621;
  uint64_t v623 = v48 + v621;
  *(unsigned char *)uint64_t v622 = *(unsigned char *)v623;
  *(void *)(v622 + 8) = *(void *)(v623 + 8);
  swift_retain();
  swift_release();
  uint64_t v624 = v56[20];
  uint64_t v625 = v74 + v624;
  uint64_t v626 = v48 + v624;
  *(unsigned char *)uint64_t v625 = *(unsigned char *)v626;
  *(void *)(v625 + 8) = *(void *)(v626 + 8);
  swift_retain();
  swift_release();
  uint64_t v627 = v56[21];
  uint64_t v628 = v74 + v627;
  uint64_t v629 = v48 + v627;
  *(unsigned char *)uint64_t v628 = *(unsigned char *)v629;
  *(void *)(v628 + 8) = *(void *)(v629 + 8);
  swift_retain();
  swift_release();
  uint64_t v630 = v56[22];
  uint64_t v631 = v74 + v630;
  uint64_t v632 = v48 + v630;
  *(void *)(v74 + v630) = *(void *)(v48 + v630);
  swift_retain();
  swift_release();
  *(void *)(v631 + 8) = *(void *)(v632 + 8);
  swift_retain();
  swift_release();
  uint64_t v633 = v56[23];
  uint64_t v634 = v74 + v633;
  uint64_t v635 = v48 + v633;
  *(unsigned char *)uint64_t v634 = *(unsigned char *)v635;
  *(void *)(v634 + 8) = *(void *)(v635 + 8);
  swift_retain();
  swift_release();
  uint64_t v636 = v56[24];
  uint64_t v637 = v74 + v636;
  uint64_t v638 = v48 + v636;
  *(void *)(v74 + v636) = *(void *)(v48 + v636);
  swift_retain();
  swift_release();
  *(void *)(v637 + 8) = *(void *)(v638 + 8);
  swift_retain();
  swift_release();
  uint64_t v639 = v56[25];
  uint64_t v640 = v74 + v639;
  uint64_t v641 = v48 + v639;
  v642 = *(void **)(v48 + v639);
  v643 = *(void **)(v48 + v639 + 8);
  char v644 = *(unsigned char *)(v48 + v639 + 16);
  sub_1000ACAE0(v642, v643, v644);
  v645 = *(void **)v640;
  v646 = *(void **)(v640 + 8);
  *(void *)uint64_t v640 = v642;
  *(void *)(v640 + 8) = v643;
  char v647 = *(unsigned char *)(v640 + 16);
  *(unsigned char *)(v640 + 16) = v644;
  sub_1000ACB3C(v645, v646, v647);
  *(void *)(v640 + 24) = *(void *)(v641 + 24);
  swift_retain();
  swift_release();
  uint64_t v648 = v56[26];
  v649 = (void *)(v74 + v648);
  v650 = (uint64_t *)(v48 + v648);
  uint64_t v651 = *(void *)(v74 + v648);
  uint64_t v652 = *(void *)(v48 + v648);
  unint64_t v653 = v652 & 0xF000000000000007;
  if ((~v651 & 0xF000000000000007) == 0)
  {
    if (v653 != 0xF000000000000007)
    {
      void *v649 = v652;
      swift_retain();
      goto LABEL_162;
    }
    goto LABEL_160;
  }
  if (v653 == 0xF000000000000007)
  {
    sub_100288B28((uint64_t)v649);
    uint64_t v652 = *v650;
LABEL_160:
    void *v649 = v652;
    goto LABEL_162;
  }
  void *v649 = v652;
  swift_retain();
  swift_release();
LABEL_162:
  v649[1] = v650[1];
  swift_retain();
  swift_release();
  uint64_t v654 = v56[27];
  v655 = (void *)(v74 + v654);
  uint64_t v656 = v48 + v654;
  v657 = *(void **)(v74 + v654);
  v658 = *(void **)(v48 + v654);
  void *v655 = v658;
  id v659 = v658;

  v655[1] = *(void *)(v656 + 8);
  swift_retain();
  swift_release();
  uint64_t v660 = v56[28];
  uint64_t v661 = v74 + v660;
  uint64_t v662 = v48 + v660;
  *(void *)(v74 + v660) = *(void *)(v48 + v660);
  swift_retain();
  swift_release();
  *(void *)(v661 + 8) = *(void *)(v662 + 8);
  swift_retain();
  swift_release();
  uint64_t v663 = v56[29];
  uint64_t v664 = v74 + v663;
  uint64_t v665 = v48 + v663;
  *(void *)(v74 + v663) = *(void *)(v48 + v663);
  swift_retain();
  swift_release();
  *(void *)(v664 + 8) = *(void *)(v665 + 8);
  swift_retain();
  swift_release();
  uint64_t v666 = v56[30];
  uint64_t v667 = v74 + v666;
  v668 = (uint64_t *)(v48 + v666);
  v669 = *(void **)(v74 + v666);
  v670 = *(void **)(v48 + v666);
  if (v669)
  {
    if (v670)
    {
      *(void *)uint64_t v667 = v670;
      id v671 = v670;

      sub_10000E558((uint64_t *)(v667 + 8), v668 + 1);
    }
    else
    {
      sub_10000EB6C((id *)v667);
      long long v676 = *((_OWORD *)v668 + 1);
      long long v675 = *((_OWORD *)v668 + 2);
      *(_OWORD *)uint64_t v667 = *(_OWORD *)v668;
      *(_OWORD *)(v667 + 16) = v676;
      *(_OWORD *)(v667 + 32) = v675;
    }
  }
  else if (v670)
  {
    *(void *)uint64_t v667 = v670;
    uint64_t v672 = v668[4];
    *(void *)(v667 + 32) = v672;
    *(void *)(v667 + 40) = v668[5];
    v673 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v672 - 8);
    id v674 = v670;
    v673(v667 + 8, v668 + 1, v672);
  }
  else
  {
    long long v677 = *(_OWORD *)v668;
    long long v678 = *((_OWORD *)v668 + 2);
    *(_OWORD *)(v667 + 16) = *((_OWORD *)v668 + 1);
    *(_OWORD *)(v667 + 32) = v678;
    *(_OWORD *)uint64_t v667 = v677;
  }
  *(void *)(v667 + 48) = v668[6];
  swift_retain();
  swift_release();
  uint64_t v679 = v56[31];
  v680 = (void *)(v74 + v679);
  uint64_t v681 = v48 + v679;
  void *v680 = *(void *)(v48 + v679);
  v680[1] = *(void *)(v48 + v679 + 8);
  swift_retain();
  swift_release();
  uint64_t v682 = *(void *)(v681 + 24);
  v680[2] = *(void *)(v681 + 16);
  v680[3] = v682;
  swift_retain();
  swift_release();
  uint64_t v683 = v56[32];
  v684 = (void *)(v74 + v683);
  v685 = (void *)(v48 + v683);
  void *v684 = *v685;
  v684[1] = v685[1];
  swift_retain();
  swift_release();
  uint64_t v686 = v56[33];
  uint64_t v687 = v74 + v686;
  uint64_t v688 = v48 + v686;
  *(unsigned char *)uint64_t v687 = *(unsigned char *)v688;
  *(void *)(v687 + 8) = *(void *)(v688 + 8);
  swift_retain();
  swift_release();
  uint64_t v689 = v56[34];
  uint64_t v690 = v74 + v689;
  uint64_t v691 = v48 + v689;
  *(void *)(v74 + v689) = *(void *)(v48 + v689);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v690 + 8) = *(void *)(v691 + 8);
  swift_retain();
  swift_release();
  uint64_t v692 = v56[35];
  uint64_t v693 = v74 + v692;
  uint64_t v694 = v48 + v692;
  *(unsigned char *)uint64_t v693 = *(unsigned char *)v694;
  *(void *)(v693 + 8) = *(void *)(v694 + 8);
  swift_retain();
  swift_release();
  uint64_t v695 = v56[36];
  v696 = (void *)(v74 + v695);
  uint64_t v697 = v48 + v695;
  void *v696 = *(void *)(v48 + v695);
  v696[1] = *(void *)(v48 + v695 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v696[2] = *(void *)(v697 + 16);
  swift_retain();
  swift_release();
  uint64_t v698 = v56[37];
  uint64_t v699 = v74 + v698;
  uint64_t v700 = v48 + v698;
  *(unsigned char *)uint64_t v699 = *(unsigned char *)v700;
  *(void *)(v699 + 8) = *(void *)(v700 + 8);
  swift_retain();
  swift_release();
  uint64_t v701 = v56[38];
  uint64_t v702 = v74 + v701;
  uint64_t v703 = v48 + v701;
  *(unsigned char *)uint64_t v702 = *(unsigned char *)v703;
  *(void *)(v702 + 8) = *(void *)(v703 + 8);
  swift_retain();
  swift_release();
  uint64_t v704 = v56[39];
  uint64_t v705 = v74 + v704;
  uint64_t v706 = v48 + v704;
  *(unsigned char *)uint64_t v705 = *(unsigned char *)v706;
  *(void *)(v705 + 8) = *(void *)(v706 + 8);
  swift_retain();
  swift_release();
  uint64_t v707 = v56[40];
  uint64_t v708 = v74 + v707;
  uint64_t v709 = v48 + v707;
  *(unsigned char *)uint64_t v708 = *(unsigned char *)v709;
  *(void *)(v708 + 8) = *(void *)(v709 + 8);
  swift_retain();
  swift_release();
  uint64_t v710 = v56[41];
  uint64_t v711 = v74 + v710;
  uint64_t v712 = v48 + v710;
  *(unsigned char *)uint64_t v711 = *(unsigned char *)v712;
  *(void *)(v711 + 8) = *(void *)(v712 + 8);
  swift_retain();
  swift_release();
  uint64_t v713 = v56[42];
  uint64_t v714 = v74 + v713;
  uint64_t v715 = v48 + v713;
  *(unsigned char *)uint64_t v714 = *(unsigned char *)v715;
  *(void *)(v714 + 8) = *(void *)(v715 + 8);
  swift_retain();
  swift_release();
  uint64_t v716 = v56[43];
  uint64_t v717 = v74 + v716;
  uint64_t v718 = v48 + v716;
  *(unsigned char *)uint64_t v717 = *(unsigned char *)v718;
  *(void *)(v717 + 8) = *(void *)(v718 + 8);
  swift_retain();
  swift_release();
  uint64_t v719 = v56[44];
  uint64_t v720 = v74 + v719;
  uint64_t v721 = v48 + v719;
  *(void *)(v74 + v719) = *(void *)(v48 + v719);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v720 + 8) = *(void *)(v721 + 8);
  swift_retain();
  swift_release();
  uint64_t v722 = v56[45];
  uint64_t v723 = v74 + v722;
  uint64_t v724 = v48 + v722;
  *(void *)(v74 + v722) = *(void *)(v48 + v722);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v723 + 8) = *(void *)(v724 + 8);
  swift_retain();
  swift_release();
  uint64_t v725 = v56[46];
  uint64_t v726 = v74 + v725;
  uint64_t v727 = v48 + v725;
  *(void *)(v74 + v725) = *(void *)(v48 + v725);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v726 + 8) = *(void *)(v727 + 8);
  swift_retain();
  swift_release();
  uint64_t v728 = v56[47];
  uint64_t v729 = v74 + v728;
  uint64_t v730 = v48 + v728;
  *(unsigned char *)uint64_t v729 = *(unsigned char *)v730;
  *(void *)(v729 + 8) = *(void *)(v730 + 8);
  swift_retain();
  swift_release();
  uint64_t v731 = v56[48];
  uint64_t v732 = v74 + v731;
  uint64_t v733 = v48 + v731;
  *(unsigned char *)uint64_t v732 = *(unsigned char *)v733;
  *(void *)(v732 + 8) = *(void *)(v733 + 8);
  swift_retain();
  swift_release();
  uint64_t v734 = v56[49];
  uint64_t v735 = v74 + v734;
  uint64_t v736 = v48 + v734;
  *(unsigned char *)uint64_t v735 = *(unsigned char *)v736;
  *(void *)(v735 + 8) = *(void *)(v736 + 8);
  swift_retain();
  swift_release();
  uint64_t v737 = v56[50];
  uint64_t v738 = v74 + v737;
  uint64_t v739 = v48 + v737;
  *(unsigned char *)uint64_t v738 = *(unsigned char *)v739;
  *(void *)(v738 + 8) = *(void *)(v739 + 8);
  swift_retain();
  swift_release();
  uint64_t v740 = v56[51];
  uint64_t v741 = v74 + v740;
  uint64_t v742 = v48 + v740;
  *(unsigned char *)uint64_t v741 = *(unsigned char *)v742;
  *(void *)(v741 + 8) = *(void *)(v742 + 8);
  swift_retain();
  swift_release();
  uint64_t v743 = v56[52];
  uint64_t v744 = v74 + v743;
  uint64_t v745 = v48 + v743;
  *(unsigned char *)uint64_t v744 = *(unsigned char *)v745;
  *(void *)(v744 + 8) = *(void *)(v745 + 8);
  swift_retain();
  swift_release();
  uint64_t v746 = v56[53];
  uint64_t v747 = v74 + v746;
  uint64_t v748 = v48 + v746;
  *(unsigned char *)uint64_t v747 = *(unsigned char *)v748;
  *(void *)(v747 + 8) = *(void *)(v748 + 8);
  swift_retain();
  swift_release();
  uint64_t v749 = v56[54];
  uint64_t v750 = v74 + v749;
  uint64_t v751 = v48 + v749;
  *(unsigned char *)uint64_t v750 = *(unsigned char *)v751;
  *(void *)(v750 + 8) = *(void *)(v751 + 8);
  swift_retain();
  swift_release();
  *(void *)(v74 + v56[55]) = *(void *)(v48 + v56[55]);
  swift_retain();
  swift_release();
  uint64_t v752 = v56[56];
  v753 = *(void **)(v48 + v752);
  v754 = *(void **)(v74 + v752);
  *(void *)(v74 + v752) = v753;
  id v755 = v753;

  *(void *)(v74 + v56[57]) = *(void *)(v48 + v56[57]);
  swift_retain();
  swift_release();
  *(void *)(v74 + v56[58]) = *(void *)(v48 + v56[58]);
  swift_retain();
  swift_release();
  *(void *)(v74 + v56[59]) = *(void *)(v48 + v56[59]);
  swift_retain();
  swift_release();
  *(void *)(v74 + v56[60]) = *(void *)(v48 + v56[60]);
  swift_retain();
  swift_release();
  *(void *)(v74 + v56[61]) = *(void *)(v48 + v56[61]);
  swift_retain();
  swift_release();
  uint64_t v756 = v56[62];
  v757 = (uint64_t *)(v74 + v756);
  v758 = (uint64_t *)(v48 + v756);
  uint64_t v759 = *(void *)(v74 + v756 + 24);
  uint64_t v760 = *(void *)(v48 + v756 + 24);
  if (v759)
  {
    if (v760)
    {
      uint64_t v761 = *v758;
      unint64_t v762 = v758[1];
      sub_100038528(*v758, v762);
      uint64_t v763 = *v757;
      unint64_t v764 = v757[1];
      uint64_t *v757 = v761;
      v757[1] = v762;
      sub_100038B34(v763, v764);
      v757[2] = v758[2];
      v757[3] = v758[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v757[4] = v758[4];
      swift_retain();
      swift_release();
      v757[5] = v758[5];
      swift_retain();
      swift_release();
      v757[6] = v758[6];
      swift_retain();
      swift_release();
      v757[7] = v758[7];
      swift_retain();
      swift_release();
      v757[8] = v758[8];
      swift_retain();
      swift_release();
      v757[9] = v758[9];
      swift_retain();
      swift_release();
      v757[10] = v758[10];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_100288B7C((uint64_t)v757);
      long long v767 = *((_OWORD *)v758 + 1);
      *(_OWORD *)v757 = *(_OWORD *)v758;
      *((_OWORD *)v757 + 1) = v767;
      long long v769 = *((_OWORD *)v758 + 3);
      long long v768 = *((_OWORD *)v758 + 4);
      long long v770 = *((_OWORD *)v758 + 2);
      v757[10] = v758[10];
      *((_OWORD *)v757 + 3) = v769;
      *((_OWORD *)v757 + 4) = v768;
      *((_OWORD *)v757 + 2) = v770;
    }
  }
  else if (v760)
  {
    uint64_t v765 = *v758;
    unint64_t v766 = v758[1];
    sub_100038528(*v758, v766);
    uint64_t *v757 = v765;
    v757[1] = v766;
    v757[2] = v758[2];
    v757[3] = v758[3];
    v757[4] = v758[4];
    v757[5] = v758[5];
    v757[6] = v758[6];
    v757[7] = v758[7];
    v757[8] = v758[8];
    v757[9] = v758[9];
    v757[10] = v758[10];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v56 = v857;
    swift_retain();
    uint64_t v48 = v856;
    swift_retain();
    uint64_t v74 = v855;
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v771 = *((_OWORD *)v758 + 1);
    *(_OWORD *)v757 = *(_OWORD *)v758;
    *((_OWORD *)v757 + 1) = v771;
    long long v772 = *((_OWORD *)v758 + 2);
    long long v773 = *((_OWORD *)v758 + 3);
    long long v774 = *((_OWORD *)v758 + 4);
    v757[10] = v758[10];
    *((_OWORD *)v757 + 3) = v773;
    *((_OWORD *)v757 + 4) = v774;
    *((_OWORD *)v757 + 2) = v772;
  }
  v757[11] = v758[11];
  swift_retain();
  swift_release();
  *(void *)(v74 + v56[63]) = *(void *)(v48 + v56[63]);
  swift_retain();
  swift_release();
  uint64_t v775 = v56[64];
  uint64_t v776 = v74 + v775;
  uint64_t v777 = v48 + v775;
  *(void *)(v74 + v775) = *(void *)(v48 + v775);
  swift_retain();
  swift_release();
  *(void *)(v776 + 8) = *(void *)(v777 + 8);
  swift_retain();
  swift_release();
  uint64_t v778 = v56[65];
  v779 = (char *)(v74 + v778);
  v780 = (char *)(v48 + v778);
  uint64_t v781 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v782 = *(void *)(v781 - 8);
  v783 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v782 + 48);
  int v784 = v783(v779, 1, v781);
  int v785 = v783(v780, 1, v781);
  if (!v784)
  {
    if (!v785)
    {
      (*(void (**)(char *, char *, uint64_t))(v782 + 24))(v779, v780, v781);
      goto LABEL_182;
    }
    (*(void (**)(char *, uint64_t))(v782 + 8))(v779, v781);
    goto LABEL_181;
  }
  if (v785)
  {
LABEL_181:
    uint64_t v786 = sub_10000F214(&qword_100525F60);
    memcpy(v779, v780, *(void *)(*(void *)(v786 - 8) + 64));
    goto LABEL_182;
  }
  (*(void (**)(char *, char *, uint64_t))(v782 + 16))(v779, v780, v781);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v782 + 56))(v779, 0, 1, v781);
LABEL_182:
  v787 = (int *)sub_10000F214(&qword_100519A10);
  v779[v787[9]] = v780[v787[9]];
  *(void *)&v779[v787[10]] = *(void *)&v780[v787[10]];
  swift_retain();
  swift_release();
  v779[v787[11]] = v780[v787[11]];
  return v74;
}