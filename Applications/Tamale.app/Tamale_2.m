void sub_10014E0DC(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  id v12;
  id v13;
  unint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  UIImage *v19;
  UIImage *v20;
  NSData *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;
  uint64_t vars8;
  Swift::String v37;

  v2 = sub_10000F214(&qword_1005213A8);
  __chkstk_darwin(v2 - 8);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FBKSInteraction.Content();
  v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v34 - v10);
  v12 = [self sharedApplication];
  v13 = [v12 windows];

  sub_10014F0DC();
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v14 & 0xC000000000000001) != 0)
  {
    v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v15 = *(id *)(v14 + 32);
  }
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = [v16 rootViewController];

  if (v17)
  {
    v18 = [v17 view];

    if (v18)
    {
      [v18 bounds];
      v19 = [v18 _imageFromRect:];
      if (v19)
      {
        v20 = v19;
        v21 = UIImagePNGRepresentation(v19);

        if (v21)
        {
          v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v24 = v23;

          *v11 = v22;
          v11[1] = v24;
          v34 = v24;
          v35 = v22;
          (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v11, enum case for FBKSInteraction.Content.image(_:), v5);
          (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 16))(v8, v11, v5);
          v25 = self;
          sub_100038528(v22, v24);
          v26 = [v25 mainBundle];
          v37._object = (void *)0xE000000000000000;
          v27._countAndFlagsBits = 0;
          v27._object = (void *)0xE000000000000000;
          v28._countAndFlagsBits = 0;
          v28._object = (void *)0xE000000000000000;
          v37._countAndFlagsBits = 0;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v37);

          v29 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v4, 1, 1, v29);
          FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)();

          sub_100038B34(v35, v34);
          (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v11, v5);
          v30 = type metadata accessor for FBKSInteraction.AnnotatedContent();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(a1, 0, 1, v30);
          return;
        }
      }
    }
  }
LABEL_14:
  v32 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);

  v33(a1, 1, 1, v32);
}

uint64_t sub_10014E5C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_1005213A8);
  __chkstk_darwin(v2 - 8);
  v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FBKSInteraction.Content();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (void *)((char *)v26 - v10);
  size_t v12 = sub_10041BBA8();
  if (v12 && (v13 = (void *)v12, uint64_t v14 = sub_10041BD8C(), v16 = v15, v13, v16 >> 60 != 15))
  {
    uint64_t *v11 = v14;
    v11[1] = v16;
    (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v11, enum case for FBKSInteraction.Content.image(_:), v5);
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 16))(v8, v11, v5);
    v20 = self;
    sub_100038528(v14, v16);
    id v21 = [v20 mainBundle];
    v28._object = (void *)0xE000000000000000;
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    v28._countAndFlagsBits = 0;
    v26[1] = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v28)._countAndFlagsBits;

    uint64_t v24 = type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v4, 1, 1, v24);
    FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)();
    sub_100094760(v14, v16);
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v11, v5);
    uint64_t v25 = type metadata accessor for FBKSInteraction.AnnotatedContent();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(a1, 0, 1, v25);
  }
  else
  {
    uint64_t v17 = type metadata accessor for FBKSInteraction.AnnotatedContent();
    v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    return v18(a1, 1, 1, v17);
  }
}

uint64_t sub_10014E948()
{
  *(void *)(v1 + 104) = v0;
  return _swift_task_switch(sub_10014E968, 0, 0);
}

uint64_t sub_10014E968()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_getKeyPath();
  *(void *)(v0 + 96) = v1;
  sub_10014F024();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 112) = Strong;
  if (Strong)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10014EB38;
    return sub_100417A1C(v0 + 16);
  }
  else
  {
    uint64_t v5 = (void *)(v0 + 56);
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_10000FB74(v0 + 16, v0 + 56, &qword_100518A80);
    uint64_t v6 = *(void *)(v0 + 80);
    if (v6)
    {
      uint64_t v7 = *(void *)(v0 + 88);
      sub_10000F3B0(v5, *(void *)(v0 + 80));
      CGImageRef v8 = sub_100398EE0(v6, v7);
      sub_10000FBD8(v0 + 16, &qword_100518A80);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v5);
    }
    else
    {
      sub_10000FBD8(v0 + 16, &qword_100518A80);
      sub_10000FBD8((uint64_t)v5, &qword_100518A80);
      CGImageRef v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(CGImageRef))(v0 + 8);
    return v9(v8);
  }
}

uint64_t sub_10014EB38()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v1 = sub_10014ED70;
  }
  else
  {
    swift_release();
    uint64_t v1 = sub_10014EC80;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10014EC80()
{
  sub_10000FB74((uint64_t)(v0 + 2), (uint64_t)(v0 + 7), &qword_100518A80);
  uint64_t v1 = v0[10];
  if (v1)
  {
    uint64_t v2 = v0[11];
    sub_10000F3B0(v0 + 7, v0[10]);
    CGImageRef v3 = sub_100398EE0(v1, v2);
    sub_10000FBD8((uint64_t)(v0 + 2), &qword_100518A80);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 7));
  }
  else
  {
    sub_10000FBD8((uint64_t)(v0 + 2), &qword_100518A80);
    sub_10000FBD8((uint64_t)(v0 + 7), &qword_100518A80);
    CGImageRef v3 = 0;
  }
  v4 = (uint64_t (*)(CGImageRef))v0[1];
  return v4(v3);
}

uint64_t sub_10014ED70()
{
  *(_OWORD *)(v0 + 16) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  sub_10000FB74(v0 + 16, v0 + 56, &qword_100518A80);
  uint64_t v1 = *(void *)(v0 + 80);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 88);
    sub_10000F3B0((void *)(v0 + 56), *(void *)(v0 + 80));
    CGImageRef v3 = sub_100398EE0(v1, v2);
    sub_10000FBD8(v0 + 16, &qword_100518A80);
    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 56);
  }
  else
  {
    sub_10000FBD8(v0 + 16, &qword_100518A80);
    sub_10000FBD8(v0 + 56, &qword_100518A80);
    CGImageRef v3 = 0;
  }
  v4 = *(uint64_t (**)(CGImageRef))(v0 + 8);
  return v4(v3);
}

uint64_t sub_10014EE70()
{
  swift_weakDestroy();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale18FeedbackController___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10014EF20()
{
  return type metadata accessor for FeedbackController();
}

uint64_t type metadata accessor for FeedbackController()
{
  uint64_t result = qword_100521240;
  if (!qword_100521240) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10014EF74()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_10014F024()
{
  unint64_t result = qword_100521388;
  if (!qword_100521388)
  {
    type metadata accessor for FeedbackController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521388);
  }
  return result;
}

uint64_t sub_10014F07C()
{
  return swift_weakAssign();
}

void sub_10014F0A4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  CGImageRef v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v2;
  id v4 = v2;
}

unint64_t sub_10014F0DC()
{
  unint64_t result = qword_1005213B0;
  if (!qword_1005213B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005213B0);
  }
  return result;
}

uint64_t sub_10014F11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResultLookupState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014F180(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ResultLookupState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10014F1DC(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_10014F1E8()
{
  return sub_10014F248((void (*)(void))sub_10014F744);
}

uint64_t sub_10014F208()
{
  return sub_10014F248((void (*)(void))sub_10014F62C);
}

uint64_t sub_10014F228()
{
  return sub_10014F248((void (*)(void))sub_10014F570);
}

uint64_t sub_10014F248(void (*a1)(void))
{
  a1();
  EnvironmentValues.subscript.getter();
  return v2;
}

uint64_t sub_10014F290()
{
  return sub_10014F35C();
}

double sub_10014F29C@<D0>(_OWORD *a1@<X8>)
{
  return sub_10014F40C((void (*)(void))sub_10014F744, a1);
}

uint64_t sub_10014F2BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F4BC(a1, a2, a3, a4, sub_10000F724, (void (*)(uint64_t))sub_10014F744);
}

uint64_t sub_10014F2F0()
{
  return sub_10014F35C();
}

double sub_10014F2FC@<D0>(_OWORD *a1@<X8>)
{
  return sub_10014F40C((void (*)(void))sub_10014F62C, a1);
}

uint64_t sub_10014F31C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F4BC(a1, a2, a3, a4, sub_10000F724, (void (*)(uint64_t))sub_10014F62C);
}

uint64_t sub_10014F350()
{
  return sub_10014F35C();
}

uint64_t sub_10014F35C()
{
  return swift_release();
}

double sub_10014F3EC@<D0>(_OWORD *a1@<X8>)
{
  return sub_10014F40C((void (*)(void))sub_10014F570, a1);
}

double sub_10014F40C@<D0>(void (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  a1();
  EnvironmentValues.subscript.getter();
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double sub_10014F468@<D0>(_OWORD *a1@<X8>)
{
  return sub_10014F6A0((void (*)(void))sub_10014F570, a1);
}

uint64_t sub_10014F488(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F4BC(a1, a2, a3, a4, sub_10014F7F8, (void (*)(uint64_t))sub_10014F570);
}

uint64_t sub_10014F4BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t))
{
  uint64_t v7 = a5(*a1);
  a6(v7);
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_10014F528(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F4BC(a1, a2, a3, a4, sub_10014F7F8, (void (*)(uint64_t))sub_10014F570);
}

unint64_t sub_10014F570()
{
  unint64_t result = qword_1005213B8;
  if (!qword_1005213B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005213B8);
  }
  return result;
}

double sub_10014F5C4@<D0>(_OWORD *a1@<X8>)
{
  return sub_10014F6A0((void (*)(void))sub_10014F62C, a1);
}

uint64_t sub_10014F5E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F4BC(a1, a2, a3, a4, sub_10000F724, (void (*)(uint64_t))sub_10014F62C);
}

unint64_t sub_10014F62C()
{
  unint64_t result = qword_1005213C0;
  if (!qword_1005213C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005213C0);
  }
  return result;
}

double sub_10014F680@<D0>(_OWORD *a1@<X8>)
{
  return sub_10014F6A0((void (*)(void))sub_10014F744, a1);
}

double sub_10014F6A0@<D0>(void (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  a1();
  EnvironmentValues.subscript.getter();
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_10014F6FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F4BC(a1, a2, a3, a4, sub_10000F724, (void (*)(uint64_t))sub_10014F744);
}

unint64_t sub_10014F744()
{
  unint64_t result = qword_1005213C8;
  if (!qword_1005213C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005213C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TamaleDismissActionKey()
{
  return &type metadata for TamaleDismissActionKey;
}

ValueMetadata *type metadata accessor for TamaleErrorActionKey()
{
  return &type metadata for TamaleErrorActionKey;
}

ValueMetadata *type metadata accessor for TamaleSuppressPostShutterPinActionActionKey()
{
  return &type metadata for TamaleSuppressPostShutterPinActionActionKey;
}

ValueMetadata *type metadata accessor for TamaleSuppressPostShutterPinActionAction()
{
  return &type metadata for TamaleSuppressPostShutterPinActionAction;
}

ValueMetadata *type metadata accessor for TamaleErrorAction()
{
  return &type metadata for TamaleErrorAction;
}

ValueMetadata *type metadata accessor for TamaleDismissAction()
{
  return &type metadata for TamaleDismissAction;
}

uint64_t initializeWithCopy for TapToRadarButton(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TapToRadarButton(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TapToRadarButton(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TapToRadarButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TapToRadarButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarButton()
{
  return &type metadata for TapToRadarButton;
}

uint64_t sub_10014F994()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10014F9B0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v122 = a3;
  uint64_t v123 = a4;
  uint64_t v121 = a5;
  int v6 = a2 & 1;
  uint64_t v111 = sub_10000F214(&qword_100521400);
  __chkstk_darwin(v111);
  v105 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_10000F214(&qword_100521408);
  __chkstk_darwin(v109);
  uint64_t v110 = (uint64_t)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v107 = (uint64_t)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v115 = (uint64_t)&v102 - v12;
  __chkstk_darwin(v13);
  uint64_t v113 = (uint64_t)&v102 - v14;
  __chkstk_darwin(v15);
  uint64_t v116 = (uint64_t)&v102 - v16;
  uint64_t v17 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v17);
  uint64_t v106 = (uint64_t)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v114 = (uint64_t)&v102 - v20;
  __chkstk_darwin(v21);
  uint64_t v112 = (uint64_t)&v102 - v22;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v102 - v24;
  uint64_t v26 = sub_10000F214(&qword_100521410);
  __chkstk_darwin(v26 - 8);
  v120 = (char *)&v102 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v119 = (uint64_t)&v102 - v29;
  uint64_t v30 = sub_10000F214(&qword_10051EB90);
  uint64_t v125 = *(void *)(v30 - 8);
  uint64_t v126 = v30;
  __chkstk_darwin(v30);
  v104 = (char *)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v103 = (char *)&v102 - v33;
  __chkstk_darwin(v34);
  v108 = (char *)&v102 - v35;
  __chkstk_darwin(v36);
  v118 = (char *)&v102 - v37;
  __chkstk_darwin(v38);
  v40 = (char *)&v102 - v39;
  __chkstk_darwin(v41);
  v124 = (char *)&v102 - v42;
  uint64_t v43 = swift_retain();
  int v44 = v6;
  uint64_t v45 = sub_10027CDAC(v43, v6);
  swift_release();
  swift_getKeyPath();
  uint64_t v131 = v45;
  uint64_t v128 = sub_100150F24((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v46 = *(void *)(v45 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v47 = *(void *)(v45 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  int v48 = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v46, v47, *(unsigned char *)(v45 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  uint64_t v117 = v17;
  if (v48 == 2) {
    sub_1000BC2F4(v46, v47, 2);
  }
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = a1;
  *(unsigned char *)(v49 + 24) = v44 != 0;
  uint64_t v50 = v123;
  *(void *)(v49 + 32) = v122;
  *(void *)(v49 + 40) = v50;
  swift_retain();
  swift_retain();
  Button<>.init(_:action:)();
  (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v124, v40, v126);
  uint64_t v51 = swift_retain();
  int v127 = v44;
  uint64_t v52 = sub_10027CDAC(v51, v44);
  swift_release();
  swift_getKeyPath();
  uint64_t v131 = v52;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v53 = v52 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
  swift_beginAccess();
  sub_100150FB8(v53, (uint64_t)v25);
  swift_release();
  uint64_t v54 = v117;
  uint64_t v55 = v116;
  sub_10000FB74((uint64_t)&v25[*(int *)(v117 + 72)], v116, &qword_10051E070);
  sub_10010DEA8((uint64_t)v25);
  uint64_t v56 = type metadata accessor for URL();
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48);
  LODWORD(v52) = v57(v55, 1, v56);
  sub_10000FBD8(v55, &qword_10051E070);
  if (v52 == 1)
  {
    uint64_t v58 = swift_retain();
    uint64_t v59 = sub_10027CDAC(v58, v127);
    swift_release();
    swift_getKeyPath();
    uint64_t v130 = v59;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v60 = v59 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
    swift_beginAccess();
    uint64_t v61 = v112;
    sub_100150FB8(v60, v112);
    swift_release();
    uint64_t v62 = v113;
    sub_10000FB74(v61 + *(int *)(v54 + 88), v113, &qword_10051E070);
    sub_10010DEA8(v61);
    LODWORD(v59) = v57(v62, 1, v56);
    sub_10000FBD8(v62, &qword_10051E070);
    if (v59 != 1)
    {
      BOOL v93 = v127 != 0;
      LocalizedStringKey.init(stringLiteral:)();
      uint64_t v94 = swift_allocObject();
      *(void *)(v94 + 16) = a1;
      *(unsigned char *)(v94 + 24) = v93;
      uint64_t v95 = v123;
      *(void *)(v94 + 32) = v122;
      *(void *)(v94 + 40) = v95;
      swift_retain();
      swift_retain();
      v80 = v118;
      Button<>.init(_:action:)();
      uint64_t v83 = v125;
      uint64_t v82 = v126;
      v84 = *(void (**)(uint64_t, char *, uint64_t))(v125 + 16);
      v84(v110, v80, v126);
      swift_storeEnumTagMultiPayload();
      sub_100013AA8(&qword_100521430, &qword_10051EB90);
      sub_100013AA8(&qword_100521438, &qword_100521400);
      uint64_t v90 = (uint64_t)v120;
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char *, uint64_t))(v83 + 8))(v80, v82);
      goto LABEL_10;
    }
  }
  uint64_t v63 = swift_retain();
  uint64_t v64 = sub_10027CDAC(v63, v127);
  swift_release();
  swift_getKeyPath();
  uint64_t v130 = v64;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v65 = v64 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
  swift_beginAccess();
  uint64_t v66 = v114;
  sub_100150FB8(v65, v114);
  swift_release();
  uint64_t v67 = v115;
  sub_10000FB74(v66 + *(int *)(v54 + 72), v115, &qword_10051E070);
  sub_10010DEA8(v66);
  LODWORD(v64) = v57(v67, 1, v56);
  sub_10000FBD8(v67, &qword_10051E070);
  if (v64 == 1)
  {
    uint64_t v68 = swift_retain();
    uint64_t v69 = sub_10027CDAC(v68, v127);
    swift_release();
    swift_getKeyPath();
    uint64_t v129 = v69;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v70 = v69 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
    swift_beginAccess();
    uint64_t v71 = v106;
    sub_100150FB8(v70, v106);
    swift_release();
    uint64_t v72 = v107;
    sub_10000FB74(v71 + *(int *)(v54 + 88), v107, &qword_10051E070);
    sub_10010DEA8(v71);
    int v73 = v57(v72, 1, v56);
    sub_10000FBD8(v72, &qword_10051E070);
    if (v73 == 1)
    {
      BOOL v74 = v127 != 0;
      LocalizedStringKey.init(stringLiteral:)();
      uint64_t v75 = swift_allocObject();
      *(void *)(v75 + 16) = a1;
      *(unsigned char *)(v75 + 24) = v74;
      uint64_t v77 = v122;
      uint64_t v76 = v123;
      *(void *)(v75 + 32) = v122;
      *(void *)(v75 + 40) = v76;
      swift_retain();
      swift_retain();
      v78 = v118;
      Button<>.init(_:action:)();
      LocalizedStringKey.init(stringLiteral:)();
      uint64_t v79 = swift_allocObject();
      *(void *)(v79 + 16) = a1;
      *(unsigned char *)(v79 + 24) = v74;
      *(void *)(v79 + 32) = v77;
      *(void *)(v79 + 40) = v76;
      v80 = v78;
      swift_retain();
      swift_retain();
      v81 = v108;
      Button<>.init(_:action:)();
      uint64_t v83 = v125;
      uint64_t v82 = v126;
      v84 = *(void (**)(uint64_t, char *, uint64_t))(v125 + 16);
      v85 = v103;
      v84((uint64_t)v103, v78, v126);
      v86 = v104;
      v84((uint64_t)v104, v81, v82);
      uint64_t v87 = (uint64_t)v105;
      v84((uint64_t)v105, v85, v82);
      uint64_t v88 = sub_10000F214(&qword_100521428);
      v84(v87 + *(int *)(v88 + 48), v86, v82);
      v89 = *(void (**)(char *, uint64_t))(v83 + 8);
      v89(v86, v82);
      v89(v85, v82);
      sub_10000FB74(v87, v110, &qword_100521400);
      swift_storeEnumTagMultiPayload();
      uint64_t v128 = sub_100013AA8(&qword_100521430, &qword_10051EB90);
      sub_100013AA8(&qword_100521438, &qword_100521400);
      uint64_t v90 = (uint64_t)v120;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v87, &qword_100521400);
      v89(v108, v82);
      v89(v80, v82);
LABEL_10:
      uint64_t v96 = sub_10000F214(&qword_100521418);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v90, 0, 1, v96);
      uint64_t v92 = v119;
      sub_1001510A8(v90, v119);
      goto LABEL_11;
    }
  }
  uint64_t v91 = sub_10000F214(&qword_100521418);
  uint64_t v92 = v119;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v119, 1, 1, v91);
  uint64_t v83 = v125;
  uint64_t v82 = v126;
  v84 = *(void (**)(uint64_t, char *, uint64_t))(v125 + 16);
  uint64_t v90 = (uint64_t)v120;
  v80 = v118;
LABEL_11:
  v97 = v124;
  v84((uint64_t)v80, v124, v82);
  sub_10000FB74(v92, v90, &qword_100521410);
  uint64_t v98 = v121;
  v84(v121, v80, v82);
  uint64_t v99 = sub_10000F214(&qword_100521420);
  sub_10000FB74(v90, v98 + *(int *)(v99 + 48), &qword_100521410);
  sub_10000FBD8(v92, &qword_100521410);
  v100 = *(void (**)(char *, uint64_t))(v83 + 8);
  v100(v97, v82);
  sub_10000FBD8(v90, &qword_100521410);
  return ((uint64_t (*)(char *, uint64_t))v100)(v80, v82);
}

uint64_t sub_100150988@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SafeAreaPaddingModifier();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Image.ResizingMode();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6);
  uint64_t v19 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v10 = v20;
  char v11 = v21;
  uint64_t v12 = v22;
  char v13 = v23;
  uint64_t v15 = v24;
  uint64_t v14 = v25;
  static Edge.Set.all.getter();
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 1;
  SafeAreaPaddingModifier.init(edges:insets:)();
  uint64_t v16 = sub_10000F214(&qword_1005213D8);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1 + *(int *)(v16 + 36), v5, v2);
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v14;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100150C14()
{
  uint64_t v1 = sub_10000F214(&qword_1005213D0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v5 = *((unsigned char *)v0 + 8);
  uint64_t v8 = *v0;
  char v9 = v5;
  long long v10 = *((_OWORD *)v0 + 1);
  sub_10000F214(&qword_1005213D8);
  sub_10000F214(&qword_1005213E0);
  sub_100150DF4();
  sub_100013AA8(&qword_1005213F0, &qword_1005213E0);
  Menu.init(content:label:)();
  sub_100013AA8(&qword_1005213F8, &qword_1005213D0);
  View.accessibilityShowsLargeContentViewer()();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100150DDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10014F9B0(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

unint64_t sub_100150DF4()
{
  unint64_t result = qword_1005213E8;
  if (!qword_1005213E8)
  {
    sub_10000F69C(&qword_1005213D8);
    sub_100061F20();
    sub_100150F24(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005213E8);
  }
  return result;
}

unint64_t sub_100150EA0()
{
  unint64_t result = qword_10051AD68;
  if (!qword_10051AD68)
  {
    sub_10000F69C((uint64_t *)&unk_1005230D0);
    sub_100061FC8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AD68);
  }
  return result;
}

uint64_t sub_100150F24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100150F70()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  int v2 = MKBGetDeviceLockState();
  if (v2 == 3 || v2 == 0) {
    uint64_t v4 = 3;
  }
  else {
    uint64_t v4 = 4;
  }
  return v1(v4);
}

uint64_t sub_100150FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CameraControllerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100151020()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  int v2 = MKBGetDeviceLockState();
  if (v2 == 3 || v2 == 0) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 4;
  }
  return v1(v4);
}

uint64_t sub_100151064()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  int v2 = MKBGetDeviceLockState();
  if (v2 == 3 || v2 == 0) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 4;
  }
  return v1(v4);
}

uint64_t sub_1001510A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100521410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100151114()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100151154()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  int v2 = MKBGetDeviceLockState();
  if (v2 == 3 || v2 == 0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 4;
  }
  return v1(v4);
}

unsigned char *storeEnumTagSinglePayload for TapToRadarButton.ActionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100151260);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarButton.ActionType()
{
  return &type metadata for TapToRadarButton.ActionType;
}

uint64_t sub_100151298()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10015131C()
{
  unint64_t result = qword_100521440;
  if (!qword_100521440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521440);
  }
  return result;
}

uint64_t sub_100151370()
{
  return View.modifier<A>(_:)();
}

ValueMetadata *type metadata accessor for SceneStateObserverModifier()
{
  return &type metadata for SceneStateObserverModifier;
}

uint64_t sub_1001513B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001513D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v51 = a4;
  uint64_t v50 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v7 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  char v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100521448);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  char v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100521450);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000F214(&qword_100521458) - 8;
  __chkstk_darwin(v49);
  int v48 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_100521460);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v13, a1, v19);
  uint64_t v20 = &v13[*(int *)(v11 + 44)];
  *(_OWORD *)uint64_t v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  char v21 = self;
  id v22 = [v21 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = a3;
  sub_10000FB74((uint64_t)v13, (uint64_t)v17, &qword_100521448);
  uint64_t v24 = &v17[*(int *)(v15 + 60)];
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v25 = v50;
  v53(v24, v9, v50);
  long long v26 = (uint64_t (**)())&v17[*(int *)(v15 + 64)];
  *long long v26 = sub_1001518E8;
  v26[1] = (uint64_t (*)())v23;
  uint64_t v46 = *(void (**)(char *, uint64_t))(v7 + 8);
  long long v27 = v46;
  uint64_t v52 = v7 + 8;
  uint64_t v28 = a3;
  swift_retain();
  uint64_t v29 = v25;
  v27(v9, v25);
  sub_10000FBD8((uint64_t)v13, &qword_100521448);
  id v30 = [v21 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v47;
  uint64_t v33 = (uint64_t)v48;
  *(void *)(v31 + 16) = v47;
  *(void *)(v31 + 24) = v28;
  sub_10000FB74((uint64_t)v17, v33, &qword_100521450);
  uint64_t v34 = v49;
  v53((char *)(v33 + *(int *)(v49 + 60)), v9, v29);
  uint64_t v35 = (uint64_t (**)())(v33 + *(int *)(v34 + 64));
  uint64_t v36 = v33;
  *uint64_t v35 = sub_100151914;
  v35[1] = (uint64_t (*)())v31;
  swift_retain();
  uint64_t v37 = v46;
  v46(v9, v29);
  sub_10000FBD8((uint64_t)v17, &qword_100521450);
  id v38 = [v21 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v32;
  *(void *)(v39 + 24) = v28;
  uint64_t v40 = v36;
  uint64_t v41 = v36;
  uint64_t v42 = v51;
  sub_10000FB74(v40, v51, &qword_100521458);
  uint64_t v43 = sub_10000F214(&qword_100521468);
  v53((char *)(v42 + *(int *)(v43 + 52)), v9, v29);
  int v44 = (uint64_t (**)())(v42 + *(int *)(v43 + 56));
  *int v44 = sub_100151940;
  v44[1] = (uint64_t (*)())v39;
  swift_retain();
  v37(v9, v29);
  return sub_10000FBD8(v41, &qword_100521458);
}

uint64_t sub_1001518A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001513D4(a1, *v2, v2[1], a2);
}

uint64_t sub_1001518B0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001518E8()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_100151914()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(2);
}

uint64_t sub_100151940()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

unsigned char *storeEnumTagSinglePayload for SceneState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100151A38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneState()
{
  return &type metadata for SceneState;
}

unint64_t sub_100151A74()
{
  unint64_t result = qword_100521470;
  if (!qword_100521470)
  {
    sub_10000F69C(&qword_100521468);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521470);
  }
  return result;
}

unint64_t sub_100151AD4()
{
  unint64_t result = qword_100521478;
  if (!qword_100521478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521478);
  }
  return result;
}

ValueMetadata *type metadata accessor for GlassIconButtonStyle()
{
  return &type metadata for GlassIconButtonStyle;
}

uint64_t sub_100151B40()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100151B5C@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v46 = a1;
  uint64_t v47 = a2;
  uint64_t v45 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v2 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unsigned int v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100521520);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100521528);
  __chkstk_darwin(v9 - 8);
  uint64_t v39 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100521530);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000F214(&qword_100521538) - 8;
  __chkstk_darwin(v42);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000F214(&qword_100521540) - 8;
  __chkstk_darwin(v44);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_100521548);
  __chkstk_darwin(v19 - 8);
  uint64_t v40 = (uint64_t)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000F214(&qword_100521550) - 8;
  __chkstk_darwin(v43);
  uint64_t v41 = (uint64_t)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  uint64_t v22 = v45;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v8, v4, v45);
  v8[*(int *)(v6 + 44)] = v46;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v22);
  uint64_t v23 = v39;
  sub_10000FB74((uint64_t)v8, v39, &qword_100521520);
  sub_10000FBD8((uint64_t)v8, &qword_100521520);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v24 = 0.65;
  }
  else {
    double v24 = 1.0;
  }
  sub_10000FB74(v23, (uint64_t)v14, &qword_100521528);
  *(double *)&v14[*(int *)(v12 + 44)] = v24;
  sub_10000FBD8(v23, &qword_100521528);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v25 = 0.95;
  }
  else {
    double v25 = 1.0;
  }
  static UnitPoint.center.getter();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  sub_10000FB74((uint64_t)v14, (uint64_t)v16, &qword_100521530);
  id v30 = &v16[*(int *)(v42 + 44)];
  *(double *)id v30 = v25;
  *((double *)v30 + 1) = v25;
  *((void *)v30 + 2) = v27;
  *((void *)v30 + 3) = v29;
  sub_10000FBD8((uint64_t)v14, &qword_100521530);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v31 = 0.25;
  }
  else {
    double v31 = 0.0;
  }
  sub_10000FB74((uint64_t)v16, (uint64_t)v18, &qword_100521538);
  *(double *)&v18[*(int *)(v44 + 44)] = v31;
  sub_10000FBD8((uint64_t)v16, &qword_100521538);
  uint64_t v32 = v40;
  sub_10000FB74((uint64_t)v18, v40, &qword_100521540);
  sub_10000FBD8((uint64_t)v18, &qword_100521540);
  uint64_t v33 = static Animation.easeInOut(duration:)();
  char v34 = ButtonStyleConfiguration.isPressed.getter();
  uint64_t v35 = v41;
  sub_10000FB74(v32, v41, &qword_100521548);
  uint64_t v36 = v35 + *(int *)(v43 + 44);
  *(void *)uint64_t v36 = v33;
  *(unsigned char *)(v36 + 8) = v34 & 1;
  sub_10000FBD8(v32, &qword_100521548);
  return sub_10000FC34(v35, v47, &qword_100521550);
}

uint64_t sub_10015203C@<X0>(uint64_t a1@<X8>)
{
  return sub_100151B5C(*v1, a1);
}

uint64_t sub_100152044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v68 = a1;
  uint64_t v2 = type metadata accessor for IconOnlyLabelStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v66 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v63 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_100521480);
  uint64_t v59 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000F214(&qword_100521488) - 8;
  __chkstk_darwin(v55);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000F214(&qword_100521490) - 8;
  __chkstk_darwin(v57);
  uint64_t v53 = (uint64_t)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000F214(&qword_100521498) - 8;
  __chkstk_darwin(v62);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000F214(&qword_1005214A0) - 8;
  __chkstk_darwin(v58);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000F214(&qword_1005214A8) - 8;
  __chkstk_darwin(v61);
  uint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_1005214B0);
  __chkstk_darwin(v20 - 8);
  uint64_t v54 = (uint64_t)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000F214(&qword_1005214B8) - 8;
  __chkstk_darwin(v60);
  uint64_t v56 = (uint64_t)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  IconOnlyLabelStyle.init()();
  sub_100152728((unint64_t *)&qword_10051BE38, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
  sub_100152728(&qword_1005214C0, (void (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle);
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  uint64_t v25 = v65;
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v23, v25);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v24);
  uint64_t v26 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v28 = v59;
  uint64_t v29 = v64;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v12, v10, v64);
  id v30 = (uint64_t *)&v12[*(int *)(v55 + 44)];
  *id v30 = KeyPath;
  v30[1] = v26;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v29);
  LOBYTE(v26) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v39 = v53;
  sub_10000FB74((uint64_t)v12, v53, &qword_100521488);
  uint64_t v40 = v39 + *(int *)(v57 + 44);
  *(unsigned char *)uint64_t v40 = v26;
  *(void *)(v40 + 8) = v32;
  *(void *)(v40 + 16) = v34;
  *(void *)(v40 + 24) = v36;
  *(void *)(v40 + 32) = v38;
  *(unsigned char *)(v40 + 40) = 0;
  sub_10000FBD8((uint64_t)v12, &qword_100521488);
  uint64_t v41 = sub_1000AA4FC();
  uint64_t v43 = v42;
  sub_10000FB74(v39, (uint64_t)v15, &qword_100521490);
  uint64_t v44 = (uint64_t *)&v15[*(int *)(v62 + 44)];
  *uint64_t v44 = v41;
  v44[1] = v43;
  sub_10000FBD8(v39, &qword_100521490);
  sub_10000FB74((uint64_t)v15, (uint64_t)v17, &qword_100521498);
  *(_WORD *)&v17[*(int *)(v58 + 44)] = 256;
  sub_10000FBD8((uint64_t)v15, &qword_100521498);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v45 = 0.25;
  }
  else {
    double v45 = 0.0;
  }
  sub_10000FB74((uint64_t)v17, (uint64_t)v19, &qword_1005214A0);
  *(double *)&v19[*(int *)(v61 + 44)] = v45;
  sub_10000FBD8((uint64_t)v17, &qword_1005214A0);
  uint64_t v46 = v54;
  sub_10000FB74((uint64_t)v19, v54, &qword_1005214A8);
  sub_10000FBD8((uint64_t)v19, &qword_1005214A8);
  uint64_t v47 = static Animation.easeInOut(duration:)();
  char v48 = ButtonStyleConfiguration.isPressed.getter();
  uint64_t v49 = v56;
  sub_10000FB74(v46, v56, &qword_1005214B0);
  uint64_t v50 = v49 + *(int *)(v60 + 44);
  *(void *)uint64_t v50 = v47;
  *(unsigned char *)(v50 + 8) = v48 & 1;
  sub_10000FBD8(v46, &qword_1005214B0);
  return sub_10000FC34(v49, v67, &qword_1005214B8);
}

uint64_t sub_100152728(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for GlassButtonStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100152844);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GlassButtonStyle()
{
  return &type metadata for GlassButtonStyle;
}

uint64_t sub_10015287C()
{
  return sub_100152D80(&qword_1005214C8, &qword_1005214B8, (void (*)(void))sub_1001528B8);
}

uint64_t sub_1001528B8()
{
  return sub_1001528F4(&qword_1005214D0, &qword_1005214B0, (void (*)(void))sub_10015297C, (void (*)(void))sub_100152CD4);
}

uint64_t sub_1001528F4(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10015297C()
{
  return sub_100152AB4(&qword_1005214D8, &qword_1005214A8, (void (*)(void))sub_1001529AC);
}

unint64_t sub_1001529AC()
{
  unint64_t result = qword_1005214E0;
  if (!qword_1005214E0)
  {
    sub_10000F69C(&qword_1005214A0);
    sub_1001528F4(&qword_1005214E8, &qword_100521498, (void (*)(void))sub_100152A84, (void (*)(void))sub_100152C80);
    sub_100013AA8(&qword_100521508, &qword_100521510);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005214E0);
  }
  return result;
}

uint64_t sub_100152A84()
{
  return sub_100152AB4(&qword_1005214F0, &qword_100521490, (void (*)(void))sub_100152B30);
}

uint64_t sub_100152AB4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100152B30()
{
  unint64_t result = qword_1005214F8;
  if (!qword_1005214F8)
  {
    sub_10000F69C(&qword_100521488);
    type metadata accessor for ButtonStyleConfiguration.Label();
    type metadata accessor for IconOnlyLabelStyle();
    sub_100152728((unint64_t *)&qword_10051BE38, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_100152728(&qword_1005214C0, (void (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005214F8);
  }
  return result;
}

unint64_t sub_100152C80()
{
  unint64_t result = qword_100521500;
  if (!qword_100521500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521500);
  }
  return result;
}

unint64_t sub_100152CD4()
{
  unint64_t result = qword_100521518;
  if (!qword_100521518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521518);
  }
  return result;
}

uint64_t sub_100152D28()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100152D44()
{
  return sub_100152D80(&qword_100521558, &qword_100521550, (void (*)(void))sub_100152E24);
}

uint64_t sub_100152D80(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    sub_100013AA8(&qword_10051BE40, &qword_10051BE48);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100152E24()
{
  return sub_1001528F4(&qword_100521560, &qword_100521548, (void (*)(void))sub_100152E60, (void (*)(void))sub_100153020);
}

uint64_t sub_100152E60()
{
  return sub_100152AB4(&qword_100521568, &qword_100521540, (void (*)(void))sub_100152E90);
}

uint64_t sub_100152E90()
{
  return sub_100152AB4(&qword_100521570, &qword_100521538, (void (*)(void))sub_100152EC0);
}

uint64_t sub_100152EC0()
{
  return sub_100152AB4(&qword_100521578, &qword_100521530, (void (*)(void))sub_100152EF0);
}

uint64_t sub_100152EF0()
{
  return sub_100152AB4(&qword_100521580, &qword_100521528, (void (*)(void))sub_100152F20);
}

unint64_t sub_100152F20()
{
  unint64_t result = qword_100521588;
  if (!qword_100521588)
  {
    sub_10000F69C(&qword_100521520);
    sub_100152728((unint64_t *)&qword_10051BE38, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_100152FCC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521588);
  }
  return result;
}

unint64_t sub_100152FCC()
{
  unint64_t result = qword_100521590;
  if (!qword_100521590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521590);
  }
  return result;
}

unint64_t sub_100153020()
{
  unint64_t result = qword_100521598;
  if (!qword_100521598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521598);
  }
  return result;
}

void *sub_100153074(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    unsigned int v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v11 = (void *)a2[5];
    uint64_t v10 = a2[6];
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v10;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    uint64_t v12 = a3[11];
    __dst = (void *)(a1 + v12);
    uint64_t v13 = (char *)a2 + v12;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v9;
    uint64_t v14 = type metadata accessor for UUID();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v11;
    if (v34(v13, 1, v14))
    {
      uint64_t v17 = sub_10000F214((uint64_t *)&unk_100524ED0);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v19 = a3[12];
    uint64_t v20 = a3[13];
    uint64_t v21 = (void *)((char *)v4 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (void *)((char *)v4 + v20);
    uint64_t v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = a3[14];
    uint64_t v28 = (void *)((char *)v4 + v27);
    uint64_t v29 = (uint64_t)a2 + v27;
    uint64_t v30 = *(uint64_t *)((char *)a2 + v27);
    swift_retain();
    swift_retain();
    if (v30)
    {
      uint64_t v31 = *(void *)(v29 + 8);
      *uint64_t v28 = v30;
      v28[1] = v31;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    }
    uint64_t v32 = a3[16];
    *((unsigned char *)v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    *(void *)((char *)v4 + v32) = *(uint64_t *)((char *)a2 + v32);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1001532B4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_release();
  swift_release();
  if (*(void *)(a1 + *(int *)(a2 + 56))) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001533CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void **)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v10 = a3[11];
  __dst = (void *)(a1 + v10);
  uint64_t v11 = (const void *)(a2 + v10);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = v9;
  if (v14(v11, 1, v12))
  {
    uint64_t v16 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(__dst, v11, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v17 = a3[12];
  uint64_t v18 = a3[13];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[14];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = a2 + v25;
  uint64_t v28 = *(void *)(a2 + v25);
  swift_retain();
  swift_retain();
  if (v28)
  {
    uint64_t v29 = *(void *)(v27 + 8);
    *uint64_t v26 = v28;
    v26[1] = v29;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  }
  uint64_t v30 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(void *)(a1 + v30) = *(void *)(a2 + v30);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001535B0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v7;
  id v8 = v7;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v9 = a3[11];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = a3[12];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  uint64_t v22 = a3[13];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  swift_retain();
  swift_release();
  uint64_t v26 = a3[14];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(a1 + v26);
  uint64_t v30 = *(void *)(a2 + v26);
  if (!v29)
  {
    if (v30)
    {
      uint64_t v32 = *(void *)(v28 + 8);
      *uint64_t v27 = v30;
      v27[1] = v32;
      swift_retain();
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    goto LABEL_14;
  }
  if (!v30)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v31 = *(void *)(v28 + 8);
  *uint64_t v27 = v30;
  v27[1] = v31;
  swift_retain();
  swift_release();
LABEL_14:
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100153870(uint64_t a1, long long *a2, int *a3)
{
  long long v6 = *a2;
  long long v7 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  uint64_t v8 = *((void *)a2 + 6);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  uint64_t v9 = a3[11];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(long long *)((char *)a2 + a3[12]);
  *(_OWORD *)(a1 + v15) = *(long long *)((char *)a2 + v15);
  uint64_t v16 = a3[14];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  uint64_t v19 = *v18;
  if (*v18)
  {
    uint64_t v20 = v18[1];
    *uint64_t v17 = v19;
    v17[1] = v20;
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }
  uint64_t v21 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  *(void *)(a1 + v21) = *(void *)((char *)a2 + v21);
  return a1;
}

uint64_t sub_1001539FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v9 = a3[11];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  swift_release();
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  swift_release();
  uint64_t v18 = a3[14];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = a2 + v18;
  uint64_t v21 = *(void *)(a1 + v18);
  uint64_t v22 = *(void *)(a2 + v18);
  if (!v21)
  {
    if (v22)
    {
      uint64_t v24 = *(void *)(v20 + 8);
      *uint64_t v19 = v22;
      v19[1] = v24;
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    goto LABEL_14;
  }
  if (!v22)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v23 = *(void *)(v20 + 8);
  *uint64_t v19 = v22;
  v19[1] = v23;
  swift_release();
LABEL_14:
  uint64_t v25 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100153C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100153C7C);
}

uint64_t sub_100153C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000F214((uint64_t *)&unk_100524ED0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100153D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100153D44);
}

uint64_t sub_100153D44(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000F214((uint64_t *)&unk_100524ED0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ActionBarItem(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100521600);
}

void sub_100153E10()
{
  sub_10015B0E4(319, (unint64_t *)&qword_100529B40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100153F34()
{
  return sub_1001544E8(&qword_100521668, (void (*)(uint64_t))type metadata accessor for ActionBarItem);
}

uint64_t sub_100153F7C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if ((uint64_t)v3 >= result) {
      unint64_t v4 = result;
    }
    else {
      unint64_t v4 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = 0;
    }
    if (v3 >= v5)
    {
      type metadata accessor for ActionBarItem(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_100154018@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

Swift::Int sub_100154030()
{
  Hasher.init(_seed:)();
  sub_100154070((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100154070(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v23 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v22 = *((void *)v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_100062F74(*(unsigned char *)(v1 + 32));
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void **)(v1 + 40);
  if (v12)
  {
    Hasher._combine(_:)(1u);
    id v13 = v12;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v25 = v7;
  Hasher._combine(_:)(*(unsigned char *)(v2 + v9[15]));
  uint64_t v14 = *(void *)(v2 + v9[16]);
  if (v14)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v14 + 16));
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = v14 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      uint64_t v17 = *(void *)(v22 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_10015B1A8(v16, (uint64_t)v11, type metadata accessor for ActionBarItem);
        sub_100154070(a1);
        sub_10015B894((uint64_t)v11, type metadata accessor for ActionBarItem);
        v16 += v17;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 56));
  sub_10000FB74(v2 + v9[11], (uint64_t)v6, (uint64_t *)&unk_100524ED0);
  uint64_t v19 = v24;
  uint64_t v18 = v25;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v6, 1, v25) == 1) {
    return sub_10000FBD8((uint64_t)v6, (uint64_t *)&unk_100524ED0);
  }
  uint64_t v21 = v23;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v23, v6, v18);
  sub_1001544E8((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

Swift::Int sub_100154450@<X0>(Swift::Int *a1@<X8>)
{
  Hasher.init(_seed:)();
  sub_100154070((uint64_t)v3);
  Swift::Int result = Hasher._finalize()();
  *a1 = result;
  return result;
}

Swift::Int sub_1001544A0()
{
  Hasher.init(_seed:)();
  sub_100154070((uint64_t)v1);
  return Hasher._finalize()();
}

void *sub_1001544DC()
{
  return &protocol witness table for Int;
}

uint64_t sub_1001544E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100154530@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_10051EE38);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100521B90);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v4 = static VerticalAlignment.center.getter();
  *((void *)v4 + 1) = 0x4014000000000000;
  v4[16] = 0;
  uint64_t v9 = sub_10000F214(&qword_10051EE20);
  sub_1001546C4(&v4[*(int *)(v9 + 44)]);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v4, (uint64_t)v8, &qword_10051EE38);
  uint64_t v11 = &v8[*(int *)(v6 + 44)];
  *(void *)uint64_t v11 = KeyPath;
  *((void *)v11 + 1) = 1;
  v11[16] = 0;
  sub_10000FBD8((uint64_t)v4, &qword_10051EE38);
  uint64_t v12 = static Font.subheadline.getter();
  uint64_t v13 = swift_getKeyPath();
  sub_10000FB74((uint64_t)v8, a1, &qword_100521B90);
  uint64_t v14 = (uint64_t *)(a1 + *(int *)(sub_10000F214(&qword_100521B98) + 36));
  *uint64_t v14 = v13;
  v14[1] = v12;
  return sub_10000FBD8((uint64_t)v8, &qword_100521B90);
}

uint64_t sub_1001546C4@<X0>(char *a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v1 = type metadata accessor for LabelStyleConfiguration.Title();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  uint64_t v26 = v2;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for LabelStyleConfiguration.Icon();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v9 = v27;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - v13;
  LabelStyleConfiguration.icon.getter();
  LabelStyleConfiguration.title.getter();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v11, v14, v8);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v16(v4, v7, v1);
  uint64_t v17 = v28;
  v15(v28, v11, v8);
  uint64_t v18 = sub_10000F214(&qword_10051EE28);
  uint64_t v19 = v25;
  v16(&v17[*(int *)(v18 + 48)], v4, v25);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v21 = v7;
  uint64_t v22 = v19;
  v20(v21, v19);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v27 + 8);
  v23(v14, v8);
  v20(v4, v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v11, v8);
}

uint64_t sub_10015494C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000F214(&qword_100521730);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100521738);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
  *((void *)v5 + 1) = 0;
  v5[16] = 0;
  uint64_t v10 = sub_10000F214(&qword_100521740);
  sub_100154B18(v1, &v5[*(int *)(v10 + 44)]);
  char v11 = static Edge.Set.horizontal.getter();
  sub_10000FB74((uint64_t)v5, (uint64_t)v9, &qword_100521730);
  uint64_t v12 = &v9[*(int *)(v7 + 44)];
  *uint64_t v12 = v11;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  v12[40] = 1;
  sub_10000FBD8((uint64_t)v5, &qword_100521730);
  uint64_t v13 = static Animation.spring(response:dampingFraction:blendDuration:)();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  sub_10000FB74((uint64_t)v9, a1, &qword_100521738);
  uint64_t v15 = (uint64_t (**)())(a1 + *(int *)(sub_10000F214(&qword_100521748) + 36));
  *uint64_t v15 = sub_10015B19C;
  v15[1] = (uint64_t (*)())v14;
  return sub_10000FBD8((uint64_t)v9, &qword_100521738);
}

uint64_t sub_100154B18@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  v137 = a2;
  uint64_t v120 = type metadata accessor for ColorScheme();
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (char *)v112 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000F214(&qword_100521750);
  uint64_t v124 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v122 = (char *)v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000F214(&qword_100521758);
  __chkstk_darwin(v129);
  uint64_t v121 = (char *)v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v125 = (char *)v112 - v7;
  uint64_t v8 = sub_10000F214(&qword_100521760);
  uint64_t v127 = *(void *)(v8 - 8);
  uint64_t v128 = v8;
  __chkstk_darwin(v8);
  uint64_t v123 = (char *)v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100521768);
  __chkstk_darwin(v10 - 8);
  uint64_t v130 = (char *)v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000F214(&qword_100521770);
  __chkstk_darwin(v113);
  uint64_t v115 = (uint64_t)v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_10000F214(&qword_100521778);
  __chkstk_darwin(v114);
  uint64_t v117 = (uint64_t)v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100521780);
  uint64_t v134 = *(void *)(v14 - 8);
  uint64_t v135 = v14;
  __chkstk_darwin(v14);
  uint64_t v116 = (char *)v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_100521788);
  __chkstk_darwin(v16 - 8);
  uint64_t v136 = (uint64_t)v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v138 = (char *)v112 - v19;
  uint64_t v20 = type metadata accessor for ActionBar(0);
  uint64_t v21 = v20 - 8;
  uint64_t v22 = *(void *)(v20 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000F214(&qword_100521790);
  uint64_t v132 = *(void *)(v25 - 8);
  uint64_t v133 = v25;
  __chkstk_darwin(v25);
  uint64_t v131 = (char *)v112 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v140 = (char *)v112 - v28;
  uint64_t v139 = *(int *)(v21 + 40);
  uint64_t v29 = *(void *)(a1 + v139);
  swift_bridgeObjectRetain();
  uint64_t v30 = sub_100156DA8();
  uint64_t v31 = sub_100301068(v30, v29);
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  unint64_t v37 = v36;
  if ((v36 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v39 = (void *)swift_dynamicCastClass();
  if (!v39)
  {
    swift_unknownObjectRelease();
    uint64_t v39 = _swiftEmptyArrayStorage;
  }
  uint64_t v40 = v39[2];
  swift_release();
  if (__OFSUB__(v37 >> 1, v35))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v40 != (v37 >> 1) - v35)
  {
LABEL_30:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v38 = sub_1001E9DD4(v31, v33, v35, v37);
    goto LABEL_9;
  }
  uint64_t v38 = (void *)swift_dynamicCastClass();
  if (!v38)
  {
    swift_unknownObjectRelease();
    uint64_t v38 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  size_t v41 = sub_1001B3C64((uint64_t)v38);
  swift_release();
  size_t v141 = v41;
  swift_getKeyPath();
  sub_10015B1A8(a1, (uint64_t)v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ActionBar);
  unint64_t v42 = (*(unsigned __int8 *)(v22 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v112[1] = v42 + v23;
  uint64_t v43 = swift_allocObject();
  sub_10015BCBC((uint64_t)v24, v43 + v42, type metadata accessor for ActionBar);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = sub_10015B214;
  *(void *)(v44 + 24) = v43;
  sub_10000F214(&qword_100521798);
  sub_10000F214(&qword_1005217A0);
  sub_100013AA8(&qword_1005217A8, &qword_100521798);
  sub_100013AA8(&qword_1005217B0, &qword_1005217A0);
  ForEach<>.init(_:id:content:)();
  uint64_t v45 = *(void *)(a1 + v139);
  swift_bridgeObjectRetain();
  uint64_t v46 = sub_100156DA8();
  uint64_t v47 = sub_100153F7C(v46, v45);
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  unint64_t v53 = v52;
  if ((v52 & 1) == 0)
  {
LABEL_10:
    uint64_t v54 = sub_1001E9DD4(v47, v49, v51, v53);
    goto LABEL_17;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v55 = (void *)swift_dynamicCastClass();
  if (!v55)
  {
    swift_unknownObjectRelease();
    uint64_t v55 = _swiftEmptyArrayStorage;
  }
  uint64_t v56 = v55[2];
  swift_release();
  if (__OFSUB__(v53 >> 1, v51))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v56 != (v53 >> 1) - v51)
  {
LABEL_32:
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  uint64_t v54 = (void *)swift_dynamicCastClass();
  if (!v54)
  {
    swift_unknownObjectRelease();
    uint64_t v54 = _swiftEmptyArrayStorage;
  }
LABEL_17:
  swift_unknownObjectRelease();
  uint64_t v57 = v54[2];
  swift_release();
  if (v57)
  {
    sub_10015B1A8(a1, (uint64_t)v24, type metadata accessor for ActionBar);
    uint64_t v58 = swift_allocObject();
    uint64_t v59 = sub_10015BCBC((uint64_t)v24, v58 + v42, type metadata accessor for ActionBar);
    __chkstk_darwin(v59);
    __chkstk_darwin(v60);
    sub_10000F214(&qword_10051B958);
    sub_10000F214(&qword_1005217B8);
    sub_10015B50C();
    sub_10015B580();
    uint64_t v61 = v122;
    Menu.init(onPresentationChanged:content:label:)();
    LocalizedStringKey.init(stringLiteral:)();
    sub_100013AA8(&qword_1005217F0, &qword_100521750);
    uint64_t v62 = (uint64_t)v121;
    uint64_t v63 = v126;
    View.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v61, v63);
    uint64_t v64 = (uint64_t)v125;
    ModifiedContent<>.accessibilityIdentifier(_:)();
    sub_10000FBD8(v62, &qword_100521758);
    sub_10015B6E4();
    sub_10015B7B4();
    uint64_t v65 = v123;
    View.buttonStyle<A>(_:)();
    sub_10000FBD8(v64, &qword_100521758);
    uint64_t v67 = v127;
    uint64_t v66 = v128;
    uint64_t v68 = (uint64_t)v130;
    (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v130, v65, v128);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v66);
    uint64_t v69 = *(void *)(a1 + v139);
    swift_bridgeObjectRetain();
    uint64_t v70 = sub_100156DA8();
    uint64_t v71 = sub_100301068(v70, v69);
    uint64_t v73 = v72;
    uint64_t v75 = v74;
    unint64_t v77 = v76;
    uint64_t v78 = (uint64_t)v138;
    if (v76)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      v81 = (void *)swift_dynamicCastClass();
      if (!v81)
      {
        swift_unknownObjectRelease();
        v81 = _swiftEmptyArrayStorage;
      }
      uint64_t v82 = v81[2];
      swift_release();
      if (__OFSUB__(v77 >> 1, v75))
      {
        __break(1u);
      }
      else if (v82 == (v77 >> 1) - v75)
      {
        if (!swift_dynamicCastClass()) {
          swift_unknownObjectRelease();
        }
        goto LABEL_27;
      }
      swift_unknownObjectRelease();
    }
    sub_1001E9DD4(v71, v73, v75, v77);
LABEL_27:
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v83 = sub_100156B28();
    uint64_t v84 = v115;
    sub_10000FB74(v68, v115, &qword_100521768);
    *(void *)(v84 + *(int *)(v113 + 36)) = v83;
    sub_10000FBD8(v68, &qword_100521768);
    LOBYTE(v83) = static Edge.Set.leading.getter();
    EdgeInsets.init(_all:)();
    uint64_t v86 = v85;
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    uint64_t v93 = v117;
    sub_10000FB74(v84, v117, &qword_100521770);
    uint64_t v94 = v93 + *(int *)(v114 + 36);
    *(unsigned char *)uint64_t v94 = v83;
    *(void *)(v94 + 8) = v86;
    *(void *)(v94 + 16) = v88;
    *(void *)(v94 + 24) = v90;
    *(void *)(v94 + 32) = v92;
    *(unsigned char *)(v94 + 40) = 0;
    sub_10000FBD8(v84, &qword_100521770);
    uint64_t v95 = v119;
    uint64_t v96 = v118;
    uint64_t v97 = v120;
    (*(void (**)(char *, void, uint64_t))(v119 + 104))(v118, enum case for ColorScheme.dark(_:), v120);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v80 = v135;
    uint64_t v99 = (uint64_t)v116;
    v100 = (uint64_t *)&v116[*(int *)(v135 + 36)];
    uint64_t v101 = sub_10000F214(&qword_10051B788);
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))((char *)v100 + *(int *)(v101 + 28), v96, v97);
    uint64_t *v100 = KeyPath;
    sub_10000FB74(v93, v99, &qword_100521778);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v97);
    sub_10000FBD8(v93, &qword_100521778);
    sub_10000FC34(v99, v78, &qword_100521780);
    uint64_t v79 = 0;
    goto LABEL_28;
  }
  uint64_t v79 = 1;
  uint64_t v80 = v135;
  uint64_t v78 = (uint64_t)v138;
LABEL_28:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v134 + 56))(v78, v79, 1, v80);
  v103 = v131;
  uint64_t v102 = v132;
  v104 = *(void (**)(char *, char *, uint64_t))(v132 + 16);
  v105 = v140;
  uint64_t v106 = v133;
  v104(v131, v140, v133);
  uint64_t v107 = v136;
  sub_10000FB74(v78, v136, &qword_100521788);
  v108 = v137;
  v104(v137, v103, v106);
  uint64_t v109 = sub_10000F214(&qword_100521808);
  sub_10000FB74(v107, (uint64_t)&v108[*(int *)(v109 + 48)], &qword_100521788);
  sub_10000FBD8(v78, &qword_100521788);
  uint64_t v110 = *(void (**)(char *, uint64_t))(v102 + 8);
  v110(v105, v106);
  sub_10000FBD8(v107, &qword_100521788);
  return ((uint64_t (*)(char *, uint64_t))v110)(v103, v106);
}

Swift::Int sub_100155A10@<X0>(Swift::Int *a1@<X8>)
{
  Hasher.init(_seed:)();
  sub_100154070((uint64_t)v3);
  Swift::Int result = Hasher._finalize()();
  *a1 = result;
  return result;
}

uint64_t sub_100155A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v130 = a1;
  uint64_t v120 = a4;
  uint64_t v131 = type metadata accessor for ActionBar(0);
  __chkstk_darwin(v131);
  uint64_t v134 = (uint64_t)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ActionBarItem(0);
  uint64_t v121 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v109 = (uint64_t *)((char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v117 = sub_10000F214(&qword_100521840);
  __chkstk_darwin(v117);
  uint64_t v119 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100518AB8);
  __chkstk_darwin(v10 - 8);
  uint64_t v111 = (uint64_t *)((char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v133 = (uint64_t)&v108 - v13;
  __chkstk_darwin(v14);
  uint64_t v132 = (char *)&v108 - v15;
  uint64_t v124 = type metadata accessor for ActionBar.ActionButton(0);
  __chkstk_darwin(v124);
  uint64_t v17 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000F214(&qword_100521848);
  __chkstk_darwin(v129);
  uint64_t v19 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v110 = (uint64_t *)((char *)&v108 - v21);
  uint64_t v127 = sub_10000F214(&qword_100521850);
  __chkstk_darwin(v127);
  uint64_t v128 = (uint64_t)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v116 = type metadata accessor for ColorScheme();
  uint64_t v23 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_10000F214(&qword_100521858);
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v27 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_10000F214(&qword_100521860);
  __chkstk_darwin(v112);
  uint64_t v29 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000F214(&qword_100521868);
  __chkstk_darwin(v126);
  uint64_t v31 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v115 = (uint64_t)&v108 - v33;
  uint64_t v34 = sub_10000F214(&qword_100521870);
  __chkstk_darwin(v34 - 8);
  uint64_t v118 = (uint64_t)&v108 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v125 = (char *)&v108 - v38;
  uint64_t v122 = v7;
  uint64_t v123 = a3;
  if (*(void *)(a2 + *(int *)(v7 + 64)))
  {
    uint64_t v110 = &v108;
    __chkstk_darwin(v37);
    *(&v108 - 2) = v39;
    *(&v108 - 1) = a3;
    __chkstk_darwin(v40);
    *(&v108 - 2) = a2;
    *(&v108 - 1) = a3;
    sub_10000F214(&qword_100521828);
    sub_1001544E8(&qword_100521898, (void (*)(uint64_t))type metadata accessor for ActionBar.ActionButton);
    sub_10015B948();
    Menu.init(content:label:)();
    uint64_t v41 = v116;
    (*(void (**)(char *, void, void))(v23 + 104))(v25, enum case for ColorScheme.dark(_:), v116);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v43 = (uint64_t *)&v29[*(int *)(v112 + 36)];
    uint64_t v44 = sub_10000F214(&qword_10051B788);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v43 + *(int *)(v44 + 28), v25, v41);
    *uint64_t v43 = KeyPath;
    uint64_t v45 = v113;
    uint64_t v46 = v114;
    (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v29, v27, v114);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v41);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v46);
    uint64_t v47 = sub_100156B28();
    sub_10000FB74((uint64_t)v29, (uint64_t)v31, &qword_100521860);
    *(void *)&v31[*(int *)(v126 + 36)] = v47;
    sub_10000FBD8((uint64_t)v29, &qword_100521860);
    uint64_t v48 = (uint64_t)v31;
    uint64_t v49 = v115;
    sub_10000FC34(v48, v115, &qword_100521868);
    sub_10000FB74(v49, v128, &qword_100521868);
    swift_storeEnumTagMultiPayload();
    sub_10015BA88();
    sub_10015BBEC();
    uint64_t v50 = (uint64_t)v125;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v49, &qword_100521868);
    uint64_t v51 = v131;
  }
  else
  {
    uint64_t v52 = v131;
    unint64_t v53 = (uint64_t *)(a3 + *(int *)(v131 + 24));
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    uint64_t v135 = v55;
    uint64_t v136 = v54;
    sub_10000F214(&qword_100521820);
    State.projectedValue.getter();
    uint64_t v56 = v137;
    long long v116 = v138;
    uint64_t v57 = (char *)(a3 + *(int *)(v52 + 28));
    char v58 = *v57;
    uint64_t v59 = *((void *)v57 + 1);
    LOBYTE(v135) = v58;
    uint64_t v136 = v59;
    sub_10000F214(&qword_100522EA0);
    State.projectedValue.getter();
    uint64_t v60 = v137;
    uint64_t v61 = v138;
    char v62 = BYTE8(v138);
    type metadata accessor for SessionAnalytics();
    sub_1001544E8(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
    *(void *)uint64_t v17 = Environment.init<A>(_:)();
    v17[8] = v63 & 1;
    uint64_t v64 = v124;
    sub_10015B1A8(a2, (uint64_t)&v17[*(int *)(v124 + 20)], type metadata accessor for ActionBarItem);
    uint64_t v65 = &v17[*(int *)(v64 + 24)];
    *(void *)uint64_t v65 = v56;
    *(_OWORD *)(v65 + 8) = v116;
    uint64_t v66 = &v17[*(int *)(v64 + 28)];
    *(void *)uint64_t v66 = v60;
    *((void *)v66 + 1) = v61;
    v66[16] = v62;
    uint64_t v67 = sub_100156B28();
    sub_10015B1A8((uint64_t)v17, (uint64_t)v19, type metadata accessor for ActionBar.ActionButton);
    *(void *)&v19[*(int *)(v129 + 36)] = v67;
    sub_10015B894((uint64_t)v17, type metadata accessor for ActionBar.ActionButton);
    uint64_t v68 = (uint64_t)v110;
    sub_10000FC34((uint64_t)v19, (uint64_t)v110, &qword_100521848);
    sub_10000FB74(v68, v128, &qword_100521848);
    swift_storeEnumTagMultiPayload();
    sub_10015BA88();
    sub_10015BBEC();
    uint64_t v50 = (uint64_t)v125;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v68, &qword_100521848);
    uint64_t v51 = v52;
  }
  uint64_t v69 = v123;
  uint64_t v70 = *(void *)(v123 + *(int *)(v51 + 32));
  swift_bridgeObjectRetain();
  uint64_t v71 = sub_100156DA8();
  uint64_t v72 = sub_100301068(v71, v70);
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  unint64_t v78 = v77;
  uint64_t v79 = (uint64_t)v132;
  if ((v77 & 1) == 0) {
    goto LABEL_5;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v83 = (void *)swift_dynamicCastClass();
  if (!v83)
  {
    swift_unknownObjectRelease();
    uint64_t v83 = _swiftEmptyArrayStorage;
  }
  uint64_t v84 = v83[2];
  swift_release();
  if (__OFSUB__(v78 >> 1, v76))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v84 != (v78 >> 1) - v76)
  {
LABEL_28:
    swift_unknownObjectRelease();
LABEL_5:
    uint64_t v80 = sub_1001E9DD4(v72, v74, v76, v78);
    uint64_t v81 = v122;
    uint64_t v82 = v121;
    goto LABEL_12;
  }
  uint64_t v80 = (void *)swift_dynamicCastClass();
  uint64_t v81 = v122;
  uint64_t v82 = v121;
  if (!v80)
  {
    swift_unknownObjectRelease();
    uint64_t v80 = _swiftEmptyArrayStorage;
  }
LABEL_12:
  swift_unknownObjectRelease();
  uint64_t v85 = (uint64_t)v119;
  if (v80[2])
  {
    sub_10015B1A8((uint64_t)v80 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80)), v79, type metadata accessor for ActionBarItem);
    uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
    v86(v79, 0, 1, v81);
  }
  else
  {
    uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
    v86(v79, 1, 1, v81);
  }
  swift_release();
  uint64_t v87 = a2;
  uint64_t v88 = v133;
  sub_10015B1A8(v87, v133, type metadata accessor for ActionBarItem);
  v86(v88, 0, 1, v81);
  uint64_t v89 = v85 + *(int *)(v117 + 48);
  sub_10000FB74(v79, v85, &qword_100518AB8);
  sub_10000FB74(v88, v89, &qword_100518AB8);
  uint64_t v90 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  if (v90(v85, 1, v81) == 1)
  {
    sub_10000FBD8(v88, &qword_100518AB8);
    sub_10000FBD8(v79, &qword_100518AB8);
    if (v90(v89, 1, v81) == 1)
    {
      sub_10000FBD8(v85, &qword_100518AB8);
      sub_10015B1A8(v69, v134, type metadata accessor for ActionBar);
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t v91 = v111;
  sub_10000FB74(v85, (uint64_t)v111, &qword_100518AB8);
  if (v90(v89, 1, v81) == 1)
  {
    sub_10000FBD8(v133, &qword_100518AB8);
    sub_10000FBD8(v79, &qword_100518AB8);
    sub_10015B894((uint64_t)v91, type metadata accessor for ActionBarItem);
LABEL_20:
    sub_10000FBD8(v85, &qword_100521840);
    sub_10015B1A8(v69, v134, type metadata accessor for ActionBar);
LABEL_24:
    sub_10015B894(v134, type metadata accessor for ActionBar);
    goto LABEL_25;
  }
  uint64_t v92 = v109;
  sub_10015BCBC(v89, (uint64_t)v109, type metadata accessor for ActionBarItem);
  char v93 = sub_1001599FC(v91, v92);
  sub_10015B894((uint64_t)v92, type metadata accessor for ActionBarItem);
  sub_10000FBD8(v133, &qword_100518AB8);
  sub_10000FBD8(v79, &qword_100518AB8);
  sub_10015B894((uint64_t)v91, type metadata accessor for ActionBarItem);
  sub_10000FBD8(v85, &qword_100518AB8);
  sub_10015B1A8(v69, v134, type metadata accessor for ActionBar);
  if ((v93 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_22:
  uint64_t v94 = v134;
  uint64_t v95 = sub_100156DA8();
  sub_10015B894(v94, type metadata accessor for ActionBar);
  if (v95 <= 1)
  {
LABEL_25:
    uint64_t v134 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    LODWORD(v133) = 1;
    goto LABEL_26;
  }
  static Alignment.center.getter();
  uint64_t v134 = 1;
  _FrameLayout.init(width:height:alignment:)();
  LODWORD(v133) = 0;
  uint64_t v96 = v137;
  uint64_t v97 = v138;
  uint64_t v98 = *((void *)&v138 + 1);
  uint64_t v99 = v139;
  uint64_t v100 = v140;
  uint64_t v101 = v141;
LABEL_26:
  uint64_t v102 = v118;
  sub_10000FB74(v50, v118, &qword_100521870);
  uint64_t v103 = v50;
  uint64_t v104 = v120;
  sub_10000FB74(v102, v120, &qword_100521870);
  uint64_t v105 = v104 + *(int *)(sub_10000F214(&qword_1005218A0) + 48);
  uint64_t v106 = v134;
  *(void *)uint64_t v105 = 0;
  *(void *)(v105 + 8) = v106;
  *(void *)(v105 + 16) = v96;
  *(void *)(v105 + 24) = v97;
  *(void *)(v105 + 32) = v98;
  *(void *)(v105 + 40) = v99;
  *(void *)(v105 + 48) = v100;
  *(void *)(v105 + 56) = v101;
  *(unsigned char *)(v105 + 64) = v133;
  sub_10000FBD8(v103, &qword_100521870);
  return sub_10000FBD8(v102, &qword_100521870);
}

__n128 sub_1001569B8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ActionBar(0);
  sub_10000F214(&qword_100521820);
  State.projectedValue.getter();
  sub_10000F214(&qword_100522EA0);
  State.projectedValue.getter();
  type metadata accessor for SessionAnalytics();
  sub_1001544E8(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  *(void *)a2 = Environment.init<A>(_:)();
  *(unsigned char *)(a2 + 8) = v4 & 1;
  uint64_t v5 = (int *)type metadata accessor for ActionBar.ActionButton(0);
  sub_10015B1A8(a1, a2 + v5[5], type metadata accessor for ActionBarItem);
  uint64_t v6 = a2 + v5[6];
  *(void *)uint64_t v6 = v9;
  __n128 result = v10;
  *(__n128 *)(v6 + 8) = v10;
  uint64_t v8 = a2 + v5[7];
  *(void *)uint64_t v8 = v9;
  *(void *)(v8 + 8) = v10.n128_u64[0];
  *(unsigned char *)(v8 + 16) = v10.n128_u8[8];
  return result;
}

uint64_t sub_100156B28()
{
  static AnyTransition.move(edge:)();
  static Animation.spring(response:dampingFraction:blendDuration:)();
  Animation.delay(_:)();
  swift_release();
  AnyTransition.animation(_:)();
  swift_release();
  swift_release();
  static AnyTransition.opacity.getter();
  static Animation.linear(duration:)();
  Animation.delay(_:)();
  swift_release();
  AnyTransition.animation(_:)();
  swift_release();
  swift_release();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static AnyTransition.blur(radius:)();
  static Animation.linear(duration:)();
  Animation.delay(_:)();
  swift_release();
  AnyTransition.animation(_:)();
  swift_release();
  swift_release();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static AnyTransition.move(edge:)();
  static Animation.easeInOut(duration:)();
  AnyTransition.animation(_:)();
  swift_release();
  swift_release();
  static AnyTransition.opacity.getter();
  static Animation.linear(duration:)();
  AnyTransition.animation(_:)();
  swift_release();
  swift_release();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static AnyTransition.blur(radius:)();
  static Animation.linear(duration:)();
  AnyTransition.animation(_:)();
  swift_release();
  swift_release();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  uint64_t v0 = static AnyTransition.asymmetric(insertion:removal:)();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100156DA8()
{
  uint64_t v1 = type metadata accessor for ActionBarItem(0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  char v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + *(int *)(type metadata accessor for ActionBar(0) + 32));
  uint64_t result = 2;
  if (*(void *)(v5 + 16) >= 2uLL) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = *(void *)(v5 + 16);
  }
  if (v7)
  {
    uint64_t v8 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v9 = *(void *)(v2 + 72);
    swift_bridgeObjectRetain_n();
    sub_10015B1A8(v8, (uint64_t)v4, type metadata accessor for ActionBarItem);
    static Font.subheadline.getter();
    double v10 = sub_100335A98();
    swift_release();
    double v11 = v10 + 0.0;
    sub_10015B894((uint64_t)v4, type metadata accessor for ActionBarItem);
    if (v7 != 1)
    {
      sub_10015B1A8(v8 + v9, (uint64_t)v4, type metadata accessor for ActionBarItem);
      static Font.subheadline.getter();
      double v12 = sub_100335A98();
      swift_release();
      double v11 = v11 + v12;
      sub_10015B894((uint64_t)v4, type metadata accessor for ActionBarItem);
    }
    swift_bridgeObjectRelease_n();
    if (v11 >= 300.0) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t sub_100156F94()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100157000(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionBar(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  v9[1] = *(void *)(a1 + *(int *)(v5 + 40));
  swift_getKeyPath();
  sub_10015B1A8(a1, (uint64_t)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ActionBar);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  sub_10015BCBC((uint64_t)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for ActionBar);
  swift_bridgeObjectRetain();
  sub_10000F214(&qword_100522A60);
  sub_10000F214(&qword_1005217D0);
  sub_100013AA8(&qword_100521810, &qword_100522A60);
  sub_10015B5F4();
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_1001571D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ActionBar.MenuButton(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100521818);
  __chkstk_darwin(v9);
  double v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_1005217E0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ActionBarItem(0);
  if (*(void *)(a1 + *(int *)(v16 + 64)))
  {
    v26[1] = v26;
    *(void *)&long long v27 = a3;
    __chkstk_darwin(v16);
    v26[-2] = v17;
    v26[-1] = a2;
    __chkstk_darwin(v18);
    v26[-2] = a1;
    v26[-1] = a2;
    sub_10000F214(&qword_100521828);
    sub_1001544E8(&qword_1005217E8, (void (*)(uint64_t))type metadata accessor for ActionBar.MenuButton);
    sub_10015B948();
    Menu.init(content:label:)();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v15, v12);
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_1005217D8, &qword_1005217E0);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    uint64_t v20 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ActionBar(0) + 24));
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v28 = v22;
    uint64_t v29 = v21;
    sub_10000F214(&qword_100521820);
    State.projectedValue.getter();
    uint64_t v23 = v30;
    type metadata accessor for SessionAnalytics();
    sub_1001544E8(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
    long long v27 = v31;
    *(void *)uint64_t v8 = Environment.init<A>(_:)();
    v8[8] = v24 & 1;
    sub_10015B1A8(a1, (uint64_t)&v8[*(int *)(v6 + 20)], type metadata accessor for ActionBarItem);
    uint64_t v25 = &v8[*(int *)(v6 + 24)];
    *(void *)uint64_t v25 = v23;
    *(_OWORD *)(v25 + 8) = v27;
    sub_10015B1A8((uint64_t)v8, (uint64_t)v11, type metadata accessor for ActionBar.MenuButton);
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_1005217D8, &qword_1005217E0);
    sub_1001544E8(&qword_1005217E8, (void (*)(uint64_t))type metadata accessor for ActionBar.MenuButton);
    _ConditionalContent<>.init(storage:)();
    return sub_10015B894((uint64_t)v8, type metadata accessor for ActionBar.MenuButton);
  }
}

uint64_t sub_100157664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionBar(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  v10[1] = a1;
  swift_getKeyPath();
  sub_10015B1A8(a2, (uint64_t)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ActionBar);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  sub_10015BCBC((uint64_t)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for ActionBar);
  swift_bridgeObjectRetain();
  sub_10000F214(&qword_100522A60);
  type metadata accessor for ActionBar.MenuButton(0);
  sub_100013AA8(&qword_100521810, &qword_100522A60);
  sub_1001544E8(&qword_1005217E8, (void (*)(uint64_t))type metadata accessor for ActionBar.MenuButton);
  return ForEach<>.init(_:id:content:)();
}

__n128 sub_100157858@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ActionBar(0);
  sub_10000F214(&qword_100521820);
  State.projectedValue.getter();
  type metadata accessor for SessionAnalytics();
  sub_1001544E8(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  *(void *)a2 = Environment.init<A>(_:)();
  *(unsigned char *)(a2 + 8) = v4 & 1;
  uint64_t v5 = type metadata accessor for ActionBar.MenuButton(0);
  sub_10015B1A8(a1, a2 + *(int *)(v5 + 20), type metadata accessor for ActionBarItem);
  uint64_t v6 = a2 + *(int *)(v5 + 24);
  *(void *)uint64_t v6 = v8;
  __n128 result = v9;
  *(__n128 *)(v6 + 8) = v9;
  return result;
}

uint64_t sub_10015796C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v3);
  Image.init(systemName:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v4);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v5 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  static Font.subheadline.getter();
  uint64_t v10 = Text.font(_:)();
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t v16 = v15;
  swift_release();
  sub_100012FAC(v5, v7, v9);
  swift_bridgeObjectRelease();
  LOBYTE(v5) = static Edge.Set.all.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = v14 & 1;
  *(void *)(a1 + 24) = v16;
  *(unsigned char *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v18;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v20;
  *(void *)(a1 + 64) = v21;
  *(unsigned char *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_100157B08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v101 = sub_10000F214(&qword_100521A38);
  uint64_t v99 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v95 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000F214(&qword_100521A40);
  __chkstk_darwin(v98);
  uint64_t v96 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_10000F214(&qword_100521A48);
  uint64_t v97 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v94 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100521A50);
  __chkstk_darwin(v7 - 8);
  uint64_t v103 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000F214(&qword_100521A58);
  __chkstk_darwin(v102);
  uint64_t v105 = (uint64_t)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_10000F214(&qword_100521A60);
  __chkstk_darwin(v104);
  uint64_t v107 = (uint64_t)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_10000F214(&qword_100521A68);
  __chkstk_darwin(v106);
  uint64_t v110 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_10000F214(&qword_100521A70);
  __chkstk_darwin(v108);
  uint64_t v112 = (uint64_t)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000F214(&qword_100521A78);
  __chkstk_darwin(v111);
  char v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000F214(&qword_100521A80);
  __chkstk_darwin(v113);
  char v93 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ActionBar.ActionButton(0);
  uint64_t v92 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v92 + 64);
  __chkstk_darwin(v16);
  uint64_t v109 = (uint64_t)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v92 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v92 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v92 - v25;
  uint64_t v28 = v1 + *(int *)(v27 + 20);
  Hasher.init(_seed:)();
  uint64_t v117 = v28;
  sub_100154070((uint64_t)&v120);
  Swift::Int v29 = Hasher._finalize()();
  uint64_t v118 = v16;
  uint64_t v30 = *(int *)(v16 + 24);
  uint64_t v116 = v2;
  long long v31 = (uint64_t *)(v2 + v30);
  uint64_t v120 = *v31;
  long long v121 = *(_OWORD *)(v31 + 1);
  sub_10000F214(&qword_100521A20);
  Binding.wrappedValue.getter();
  uint64_t v32 = v119;
  uint64_t v33 = *(void *)(v119 + 16);
  uint64_t v114 = v14;
  uint64_t v115 = a1;
  if (v33 && (unint64_t v34 = sub_10032B28C(v29), (v35 & 1) != 0))
  {
    char v36 = *(unsigned char *)(*(void *)(v32 + 56) + v34);
    swift_bridgeObjectRelease();
    uint64_t v37 = v116;
    sub_10015B1A8(v116, (uint64_t)v26, type metadata accessor for ActionBar.ActionButton);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = v116;
    sub_10015B1A8(v116, (uint64_t)v26, type metadata accessor for ActionBar.ActionButton);
    uint64_t v39 = v118;
    uint64_t v40 = &v26[*(int *)(v118 + 20)];
    uint64_t v41 = type metadata accessor for ActionBarItem(0);
    LOBYTE(v40) = v40[*(int *)(v41 + 60)];
    sub_10015B1A8((uint64_t)v26, (uint64_t)v23, type metadata accessor for ActionBar.ActionButton);
    if (v40)
    {
      unint64_t v42 = (uint64_t *)&v23[*(int *)(v39 + 20) + (uint64_t)*(int *)(v41 + 56)];
      uint64_t v43 = *v42;
      uint64_t v44 = v42[1];
      char v36 = *v42 != 0;
      if (*v42)
      {
        uint64_t v45 = swift_allocObject();
        *(void *)(v45 + 16) = v43;
        *(void *)(v45 + 24) = v44;
        uint64_t v46 = sub_10010DF04;
      }
      else
      {
        uint64_t v46 = 0;
      }
      sub_10000F724(v43);
      sub_10000F478((uint64_t)v46);
      uint64_t v37 = v116;
    }
    else
    {
      char v36 = 0;
      uint64_t v37 = v38;
    }
    sub_10015B894((uint64_t)v23, type metadata accessor for ActionBar.ActionButton);
  }
  uint64_t v47 = (uint64_t)v93;
  uint64_t v48 = v92;
  sub_10015B894((uint64_t)v26, type metadata accessor for ActionBar.ActionButton);
  sub_10015B1A8(v37, (uint64_t)v20, type metadata accessor for ActionBar.ActionButton);
  uint64_t v49 = *(unsigned __int8 *)(v48 + 80);
  uint64_t v50 = (v49 + 16) & ~v49;
  uint64_t v116 = v49 | 7;
  uint64_t v51 = swift_allocObject();
  uint64_t v52 = sub_10015BCBC((uint64_t)v20, v51 + v50, type metadata accessor for ActionBar.ActionButton);
  *(unsigned char *)(v51 + v50 + v17) = v36;
  __chkstk_darwin(v52);
  *(&v92 - 2) = v37;
  sub_10000F214(&qword_100521A88);
  sub_10015E970();
  unint64_t v53 = v95;
  Button.init(action:label:)();
  sub_100013AA8(&qword_100521AC0, &qword_100521A38);
  uint64_t v54 = (uint64_t)v96;
  uint64_t v55 = v101;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v53, v55);
  LOBYTE(v120) = v36;
  sub_10015EC00();
  sub_10015ECD0();
  uint64_t v56 = v94;
  View.buttonStyle<A>(_:)();
  sub_10000FBD8(v54, &qword_100521A40);
  uint64_t v57 = v97;
  uint64_t v58 = (uint64_t)v103;
  uint64_t v59 = v100;
  (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v103, v56, v100);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v59);
  uint64_t v60 = v37 + *(int *)(v118 + 28);
  uint64_t v61 = *(void *)(v60 + 8);
  char v62 = *(unsigned char *)(v60 + 16);
  uint64_t v120 = *(void *)v60;
  *(void *)&long long v121 = v61;
  BYTE8(v121) = v62;
  sub_10000F214(&qword_100519660);
  Binding.wrappedValue.getter();
  double v63 = 0.0;
  double v64 = 0.0;
  if ((v119 & 1) == 0)
  {
    uint64_t v65 = type metadata accessor for ActionBarItem(0);
    if ((*(uint64_t (**)(void))(v117 + *(int *)(v65 + 48)))()) {
      double v64 = 0.3;
    }
    else {
      double v64 = 1.0;
    }
  }
  uint64_t v66 = v105;
  sub_10000FB74(v58, v105, &qword_100521A50);
  *(double *)(v66 + *(int *)(v102 + 36)) = v64;
  sub_10000FBD8(v58, &qword_100521A50);
  uint64_t v67 = *(void *)(v60 + 8);
  char v68 = *(unsigned char *)(v60 + 16);
  uint64_t v120 = *(void *)v60;
  *(void *)&long long v121 = v67;
  BYTE8(v121) = v68;
  Binding.wrappedValue.getter();
  if ((_BYTE)v119) {
    double v69 = 4.0;
  }
  else {
    double v69 = 0.0;
  }
  uint64_t v70 = v107;
  sub_10000FB74(v66, v107, &qword_100521A58);
  uint64_t v71 = v70 + *(int *)(v104 + 36);
  *(double *)uint64_t v71 = v69;
  *(unsigned char *)(v71 + 8) = 0;
  sub_10000FBD8(v66, &qword_100521A58);
  uint64_t v72 = *(void *)(v60 + 8);
  char v73 = *(unsigned char *)(v60 + 16);
  uint64_t v120 = *(void *)v60;
  *(void *)&long long v121 = v72;
  BYTE8(v121) = v73;
  Binding.wrappedValue.getter();
  if ((_BYTE)v119) {
    double v63 = 32.0;
  }
  uint64_t v74 = v110;
  sub_10000FB74(v70, v110, &qword_100521A60);
  uint64_t v75 = v74 + *(int *)(v106 + 36);
  *(double *)uint64_t v75 = v63;
  *(void *)(v75 + 8) = 0;
  sub_10000FBD8(v70, &qword_100521A60);
  uint64_t v76 = static Animation.spring(response:dampingFraction:blendDuration:)();
  uint64_t v77 = *(void *)(v60 + 8);
  char v78 = *(unsigned char *)(v60 + 16);
  uint64_t v120 = *(void *)v60;
  *(void *)&long long v121 = v77;
  BYTE8(v121) = v78;
  Binding.wrappedValue.getter();
  char v79 = v119;
  uint64_t v80 = v112;
  sub_10000FB74(v74, v112, &qword_100521A68);
  uint64_t v81 = v80 + *(int *)(v108 + 36);
  *(void *)uint64_t v81 = v76;
  *(unsigned char *)(v81 + 8) = v79;
  sub_10000FBD8(v74, &qword_100521A68);
  uint64_t v82 = type metadata accessor for ActionBarItem(0);
  LOBYTE(v76) = (*(uint64_t (**)(void))(v117 + *(int *)(v82 + 48)))();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v84 = swift_allocObject();
  *(unsigned char *)(v84 + 16) = v76 & 1;
  uint64_t v85 = (uint64_t)v114;
  sub_10000FB74(v80, (uint64_t)v114, &qword_100521A70);
  uint64_t v86 = (uint64_t *)(v85 + *(int *)(v111 + 36));
  uint64_t *v86 = KeyPath;
  v86[1] = (uint64_t)sub_1000E5558;
  v86[2] = v84;
  sub_10000FBD8(v80, &qword_100521A70);
  uint64_t v87 = v109;
  sub_10015B1A8(v37, v109, type metadata accessor for ActionBar.ActionButton);
  uint64_t v88 = swift_allocObject();
  sub_10015BCBC(v87, v88 + v50, type metadata accessor for ActionBar.ActionButton);
  LOBYTE(v119) = 0;
  swift_retain();
  State.init(wrappedValue:)();
  LOBYTE(v84) = v120;
  uint64_t v89 = v121;
  sub_10000FB74(v85, v47, &qword_100521A78);
  swift_release();
  uint64_t v90 = v47 + *(int *)(v113 + 36);
  *(void *)uint64_t v90 = sub_10015EF38;
  *(void *)(v90 + 8) = v88;
  *(unsigned char *)(v90 + 16) = v84;
  *(void *)(v90 + 24) = v89;
  sub_10000FBD8(v85, &qword_100521A78);
  return sub_10000FC34(v47, v115, &qword_100521A80);
}

uint64_t sub_1001587CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_10000F214(&qword_100521A00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100521AA8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000F214(&qword_100521AD8);
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_100521AA0);
  __chkstk_darwin(v27);
  char v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_100521A88);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  uint64_t v30 = a1;
  sub_10000F214(&qword_100521A28);
  sub_10015E650();
  Label.init(title:icon:)();
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v6, v3);
  uint64_t v19 = (uint64_t *)&v9[*(int *)(v7 + 36)];
  *uint64_t v19 = KeyPath;
  v19[1] = 0x3FE999999999999ALL;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10015EAE8();
  sub_10015EBAC();
  View.labelStyle<A>(_:)();
  sub_10000FBD8((uint64_t)v9, &qword_100521AA8);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v20 = v28;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v12, v28);
  uint64_t v21 = &v14[*(int *)(v27 + 36)];
  long long v22 = v37;
  *((_OWORD *)v21 + 4) = v36;
  *((_OWORD *)v21 + 5) = v22;
  *((_OWORD *)v21 + 6) = v38;
  long long v23 = v33;
  *(_OWORD *)uint64_t v21 = v32;
  *((_OWORD *)v21 + 1) = v23;
  long long v24 = v35;
  *((_OWORD *)v21 + 2) = v34;
  *((_OWORD *)v21 + 3) = v24;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v20);
  sub_10015EA1C();
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8((uint64_t)v14, &qword_100521AA0);
  return sub_10000FC34((uint64_t)v17, v29, &qword_100521A88);
}

uint64_t sub_100158C30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v46 = a1;
  uint64_t v3 = sub_10000F214(&qword_1005219F0);
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  __chkstk_darwin(v3);
  unint64_t v42 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_1005219F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v45 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ActionBar.MenuButton(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v40 - v12;
  uint64_t v15 = v1 + *(int *)(v14 + 20);
  uint64_t v16 = (uint64_t *)(v15 + *(int *)(type metadata accessor for ActionBarItem(0) + 56));
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  if (!*v16)
  {
    sub_10000F724(0);
    sub_10000F478(0);
    sub_10015B1A8(v2, (uint64_t)v13, type metadata accessor for ActionBar.MenuButton);
    goto LABEL_7;
  }
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = v17;
  sub_10000F724(v18);
  sub_10000F478((uint64_t)sub_10010C530);
  sub_10015B1A8(v2, (uint64_t)v13, type metadata accessor for ActionBar.MenuButton);
  Hasher.init(_seed:)();
  sub_100154070((uint64_t)&v48);
  Swift::Int v20 = Hasher._finalize()();
  uint64_t v21 = &v13[*(int *)(v7 + 24)];
  uint64_t v48 = *(void *)v21;
  long long v49 = *(_OWORD *)(v21 + 8);
  sub_10000F214(&qword_100521A20);
  Binding.wrappedValue.getter();
  uint64_t v22 = v47;
  if (!*(void *)(v47 + 16) || (unint64_t v23 = sub_10032B28C(v20), (v24 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char v25 = 0;
    goto LABEL_8;
  }
  char v25 = *(unsigned char *)(*(void *)(v22 + 56) + v23);
  swift_bridgeObjectRelease();
LABEL_8:
  sub_10015B894((uint64_t)v13, type metadata accessor for ActionBar.MenuButton);
  uint64_t v41 = type metadata accessor for ActionBar.MenuButton;
  sub_10015B1A8(v2, (uint64_t)v10, type metadata accessor for ActionBar.MenuButton);
  uint64_t v26 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v27 = (uint64_t (*)(void))v2;
  uint64_t v28 = (v26 + 16) & ~v26;
  v40[1] = (uint64_t (*)(void))(v26 | 7);
  uint64_t v29 = swift_allocObject();
  v40[0] = type metadata accessor for ActionBar.MenuButton;
  uint64_t v30 = sub_10015BCBC((uint64_t)v10, v29 + v28, type metadata accessor for ActionBar.MenuButton);
  *(unsigned char *)(v29 + v28 + v9) = v25;
  __chkstk_darwin(v30);
  v40[-2] = v27;
  sub_10000F214(&qword_100521A00);
  uint64_t v31 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013AA8(&qword_100521A08, &qword_100521A00);
  long long v32 = v42;
  Button.init(action:label:)();
  sub_100013AA8(&qword_100521A10, &qword_1005219F0);
  uint64_t v33 = v44;
  uint64_t v34 = (uint64_t)v45;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v33);
  sub_10015B1A8((uint64_t)v27, (uint64_t)v31, v41);
  uint64_t v35 = swift_allocObject();
  sub_10015BCBC((uint64_t)v31, v35 + v28, v40[0]);
  LOBYTE(v47) = 0;
  swift_retain();
  State.init(wrappedValue:)();
  LOBYTE(v33) = v48;
  uint64_t v36 = v49;
  uint64_t v37 = v46;
  sub_10000FB74(v34, v46, &qword_1005219F8);
  swift_release();
  uint64_t v38 = v37 + *(int *)(sub_10000F214(&qword_100521A18) + 36);
  *(void *)uint64_t v38 = sub_10015E5C4;
  *(void *)(v38 + 8) = v35;
  *(unsigned char *)(v38 + 16) = v33;
  *(void *)(v38 + 24) = v36;
  return sub_10000FBD8(v34, &qword_1005219F8);
}

uint64_t sub_10015919C(uint64_t a1, int a2, uint64_t (*a3)(void, double), uint64_t a4, uint64_t a5, int a6)
{
  int v40 = a6;
  uint64_t v38 = a5;
  uint64_t v9 = type metadata accessor for ActionBarItem(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v37 - v13;
  double v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = a3(0, v16);
  uint64_t v20 = a1 + *(int *)(v19 + 20);
  uint64_t v21 = sub_10015B1A8(v20, (uint64_t)v18, type metadata accessor for ActionBarItem);
  uint64_t v22 = *(void (**)(uint64_t))&v18[*(int *)(v9 + 56)];
  int v39 = a2;
  if (v22 && (a2 & 1) != 0) {
    v22(v21);
  }
  else {
    (*(void (**)(uint64_t))&v18[*(int *)(v9 + 52)])(v21);
  }
  sub_10015B894((uint64_t)v18, type metadata accessor for ActionBarItem);
  sub_10015B1A8(v20, (uint64_t)v14, type metadata accessor for ActionBarItem);
  unint64_t v23 = (uint64_t *)&v14[*(int *)(v9 + 56)];
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  if (*v23)
  {
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    *(void *)(v26 + 24) = v24;
    sub_10000F724(v25);
    sub_10000F478(v38);
    sub_10015B894((uint64_t)v14, type metadata accessor for ActionBarItem);
    sub_10015B1A8(v20, (uint64_t)v11, type metadata accessor for ActionBarItem);
    Hasher.init(_seed:)();
    sub_100154070((uint64_t)&v43);
    Swift::Int v27 = Hasher._finalize()();
    sub_10015B894((uint64_t)v11, type metadata accessor for ActionBarItem);
    uint64_t v28 = (unint64_t *)(a1 + *(int *)(v19 + 24));
    unint64_t v30 = v28[1];
    unint64_t v31 = v28[2];
    unint64_t v43 = *v28;
    unint64_t v29 = v43;
    unint64_t v44 = v30;
    unint64_t v45 = v31;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10000F214(&qword_100521A20);
    Binding.wrappedValue.getter();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v33 = v42;
    unint64_t v42 = 0x8000000000000000;
    unint64_t v43 = v33;
    sub_1002F5370((v39 & 1) == 0, v27, isUniquelyReferenced_nonNull_native);
    unint64_t v42 = v43;
    swift_bridgeObjectRelease();
    unint64_t v43 = v29;
    unint64_t v44 = v30;
    unint64_t v45 = v31;
    unint64_t v41 = v42;
    Binding.wrappedValue.setter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    sub_10000F724(0);
    sub_10000F478(0);
    sub_10015B894((uint64_t)v14, type metadata accessor for ActionBarItem);
  }
  char v34 = *(unsigned char *)(a1 + 8);
  uint64_t v35 = swift_retain();
  sub_10027D0D8(v35, v34);
  swift_release();
  sub_1003CA3E8(*(unsigned char *)(v20 + 32), v40);
  return swift_release();
}

uint64_t sub_100159508()
{
  return Label.init(title:icon:)();
}

uint64_t sub_10015959C@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  a1(0);
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  *(void *)(a2 + 24) = v6;
  return result;
}

void sub_100159620(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1 + *(int *)(a2(0) + 20);
  char v5 = *(void **)(v4 + 40);
  if (v5
    && (id v6 = [v5 imageWithRenderingMode:*(void *)(v4 + 48)]) != 0)
  {
    id v7 = v6;
    Image.init(uiImage:)();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    Image.init(_internalSystemName:)();
    _ConditionalContent<>.init(storage:)();
  }
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 8) = v9;
}

uint64_t sub_100159734(char a1, uint64_t a2, uint64_t (*a3)(void))
{
  char v5 = a1 & 1;
  char v6 = *(unsigned char *)(a2 + 8);
  uint64_t v7 = swift_retain();
  sub_10027D0D8(v7, v6);
  swift_release();
  uint64_t v8 = a3(0);
  sub_1003CA054(*(unsigned __int8 *)(a2 + *(int *)(v8 + 20) + 32), v5);

  return swift_release();
}

void sub_1001597D0()
{
  qword_1005215A0 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_1001597E4@<X0>(void *a1@<X8>)
{
  if (qword_100517EF8 != -1) {
    swift_once();
  }
  *a1 = qword_1005215A0;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100159850(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return sub_10019FC18(v3);
}

void sub_10015989C(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1001598A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_100521AE0);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  char v10 = *((unsigned char *)v2 + 8);
  uint64_t v11 = sub_10000F214(&qword_100521AE8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v8, a1, v11);
  *(void *)&v8[*(int *)(v6 + 44)] = v9;
  sub_10000FB74((uint64_t)v8, a2, &qword_100521AE0);
  *(unsigned char *)(a2 + *(int *)(sub_10000F214(&qword_100521AF0) + 36)) = v10;
  swift_bridgeObjectRetain();
  return sub_10000FBD8((uint64_t)v8, &qword_100521AE0);
}

uint64_t sub_1001599C0()
{
  uint64_t result = Transaction.disablesAnimations.getter();
  if ((result & 1) == 0)
  {
    swift_retain();
    return Transaction.animation.setter();
  }
  return result;
}

uint64_t sub_1001599FC(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v70 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v7 - 8);
  uint64_t v71 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000F214(&qword_100521670);
  __chkstk_darwin(v72);
  uint64_t v73 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for ActionBarItem(0);
  __chkstk_darwin(v76);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v69 - v11;
  __chkstk_darwin(v13);
  uint64_t v79 = (uint64_t)&v69 - v14;
  __chkstk_darwin(v15);
  uint64_t v78 = (uint64_t)&v69 - v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v69 - v18;
  __chkstk_darwin(v20);
  uint64_t v77 = (char *)&v69 - v21;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v69 - v23;
  __chkstk_darwin(v25);
  Swift::Int v27 = (char *)&v69 - v26;
  __chkstk_darwin(v28);
  unint64_t v30 = (char *)&v69 - v29;
  __chkstk_darwin(v31);
  unint64_t v33 = (char *)&v69 - v32;
  uint64_t v34 = a1[1];
  uint64_t v35 = a2[1];
  BOOL v36 = *a1 == *a2;
  uint64_t v80 = v37;
  uint64_t v74 = v5;
  uint64_t v75 = v4;
  if (v36 && v34 == v35)
  {
    sub_10015B1A8((uint64_t)a1, (uint64_t)&v69 - v32, type metadata accessor for ActionBarItem);
    sub_10015B1A8((uint64_t)a2, (uint64_t)v30, type metadata accessor for ActionBarItem);
  }
  else
  {
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_10015B1A8((uint64_t)a1, (uint64_t)v33, type metadata accessor for ActionBarItem);
    sub_10015B1A8((uint64_t)a2, (uint64_t)v30, type metadata accessor for ActionBarItem);
    if ((v38 & 1) == 0)
    {
      sub_10015B894((uint64_t)v33, type metadata accessor for ActionBarItem);
      sub_10015B894((uint64_t)v30, type metadata accessor for ActionBarItem);
      sub_10015B1A8((uint64_t)a1, (uint64_t)v27, type metadata accessor for ActionBarItem);
      sub_10015B1A8((uint64_t)a2, (uint64_t)v24, type metadata accessor for ActionBarItem);
      uint64_t v39 = (uint64_t)v77;
      goto LABEL_20;
    }
  }
  if (*((void *)v33 + 2) != *((void *)v30 + 2) || *((void *)v33 + 3) != *((void *)v30 + 3))
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_10015B894((uint64_t)v33, type metadata accessor for ActionBarItem);
    sub_10015B894((uint64_t)v30, type metadata accessor for ActionBarItem);
    sub_10015B1A8((uint64_t)a1, (uint64_t)v27, type metadata accessor for ActionBarItem);
    sub_10015B1A8((uint64_t)a2, (uint64_t)v24, type metadata accessor for ActionBarItem);
    uint64_t v39 = (uint64_t)v77;
    if (v40) {
      goto LABEL_10;
    }
LABEL_20:
    sub_10015B894((uint64_t)v24, type metadata accessor for ActionBarItem);
    sub_10015B894((uint64_t)v27, type metadata accessor for ActionBarItem);
    sub_10015B1A8((uint64_t)a1, v39, type metadata accessor for ActionBarItem);
    sub_10015B1A8((uint64_t)a2, (uint64_t)v19, type metadata accessor for ActionBarItem);
    goto LABEL_21;
  }
  sub_10015B894((uint64_t)v33, type metadata accessor for ActionBarItem);
  sub_10015B894((uint64_t)v30, type metadata accessor for ActionBarItem);
  sub_10015B1A8((uint64_t)a1, (uint64_t)v27, type metadata accessor for ActionBarItem);
  sub_10015B1A8((uint64_t)a2, (uint64_t)v24, type metadata accessor for ActionBarItem);
  uint64_t v39 = (uint64_t)v77;
LABEL_10:
  char v41 = v24[32];
  unint64_t v42 = sub_100062F74(v27[32]);
  uint64_t v44 = v43;
  if (v42 == sub_100062F74(v41) && v44 == v45)
  {
    swift_bridgeObjectRelease_n();
    sub_10015B894((uint64_t)v24, type metadata accessor for ActionBarItem);
    sub_10015B894((uint64_t)v27, type metadata accessor for ActionBarItem);
    sub_10015B1A8((uint64_t)a1, v39, type metadata accessor for ActionBarItem);
    sub_10015B1A8((uint64_t)a2, (uint64_t)v19, type metadata accessor for ActionBarItem);
    goto LABEL_14;
  }
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10015B894((uint64_t)v24, type metadata accessor for ActionBarItem);
  sub_10015B894((uint64_t)v27, type metadata accessor for ActionBarItem);
  sub_10015B1A8((uint64_t)a1, v39, type metadata accessor for ActionBarItem);
  sub_10015B1A8((uint64_t)a2, (uint64_t)v19, type metadata accessor for ActionBarItem);
  if ((v46 & 1) == 0)
  {
LABEL_21:
    sub_10015B894((uint64_t)v19, type metadata accessor for ActionBarItem);
    sub_10015B894(v39, type metadata accessor for ActionBarItem);
    uint64_t v49 = v78;
    sub_10015B1A8((uint64_t)a1, v78, type metadata accessor for ActionBarItem);
    uint64_t v50 = v79;
    sub_10015B1A8((uint64_t)a2, v79, type metadata accessor for ActionBarItem);
    goto LABEL_22;
  }
LABEL_14:
  int v47 = *(unsigned __int8 *)(v39 + 56);
  int v48 = v19[56];
  sub_10015B894((uint64_t)v19, type metadata accessor for ActionBarItem);
  sub_10015B894(v39, type metadata accessor for ActionBarItem);
  uint64_t v49 = v78;
  sub_10015B1A8((uint64_t)a1, v78, type metadata accessor for ActionBarItem);
  uint64_t v50 = v79;
  sub_10015B1A8((uint64_t)a2, v79, type metadata accessor for ActionBarItem);
  if (v47 != v48)
  {
LABEL_22:
    sub_10015B894(v50, type metadata accessor for ActionBarItem);
    sub_10015B894(v49, type metadata accessor for ActionBarItem);
    sub_10015B1A8((uint64_t)a1, (uint64_t)v12, type metadata accessor for ActionBarItem);
    uint64_t v64 = (uint64_t)a2;
    uint64_t v55 = v80;
    sub_10015B1A8(v64, v80, type metadata accessor for ActionBarItem);
    goto LABEL_23;
  }
  uint64_t v51 = v76;
  int v52 = *(unsigned __int8 *)(v49 + *(int *)(v76 + 60));
  sub_10015B894(v49, type metadata accessor for ActionBarItem);
  int v53 = *(unsigned __int8 *)(v50 + *(int *)(v51 + 60));
  sub_10015B894(v50, type metadata accessor for ActionBarItem);
  sub_10015B1A8((uint64_t)a1, (uint64_t)v12, type metadata accessor for ActionBarItem);
  uint64_t v54 = (uint64_t)a2;
  uint64_t v55 = v80;
  sub_10015B1A8(v54, v80, type metadata accessor for ActionBarItem);
  if (v52 != v53)
  {
LABEL_23:
    sub_10015B894(v55, type metadata accessor for ActionBarItem);
    sub_10015B894((uint64_t)v12, type metadata accessor for ActionBarItem);
LABEL_24:
    char v63 = 0;
    return v63 & 1;
  }
  uint64_t v56 = *(int *)(v51 + 44);
  uint64_t v57 = v55 + v56;
  uint64_t v58 = v73;
  uint64_t v59 = v73 + *(int *)(v72 + 48);
  sub_10000FB74((uint64_t)&v12[v56], v73, (uint64_t *)&unk_100524ED0);
  sub_10000FB74(v57, v59, (uint64_t *)&unk_100524ED0);
  uint64_t v61 = v74;
  uint64_t v60 = v75;
  char v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  if (v62(v58, 1, v75) != 1)
  {
    uint64_t v66 = v71;
    sub_10000FB74(v58, v71, (uint64_t *)&unk_100524ED0);
    if (v62(v59, 1, v60) != 1)
    {
      uint64_t v67 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v70, v59, v60);
      sub_1001544E8(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v68 = *(void (**)(char *, uint64_t))(v61 + 8);
      v68(v67, v60);
      sub_10015B894(v55, type metadata accessor for ActionBarItem);
      sub_10015B894((uint64_t)v12, type metadata accessor for ActionBarItem);
      v68((char *)v66, v60);
      sub_10000FBD8(v58, (uint64_t *)&unk_100524ED0);
      return v63 & 1;
    }
    sub_10015B894(v55, type metadata accessor for ActionBarItem);
    sub_10015B894((uint64_t)v12, type metadata accessor for ActionBarItem);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v66, v60);
    goto LABEL_28;
  }
  sub_10015B894(v55, type metadata accessor for ActionBarItem);
  sub_10015B894((uint64_t)v12, type metadata accessor for ActionBarItem);
  if (v62(v59, 1, v60) != 1)
  {
LABEL_28:
    sub_10000FBD8(v58, &qword_100521670);
    goto LABEL_24;
  }
  sub_10000FBD8(v58, (uint64_t *)&unk_100524ED0);
  char v63 = 1;
  return v63 & 1;
}

ValueMetadata *type metadata accessor for ActionBarSortOrder()
{
  return &type metadata for ActionBarSortOrder;
}

unsigned char *_s6Tamale13ActionBarItemV9SortOrderOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10015A584);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionBarItem.SortOrder()
{
  return &type metadata for ActionBarItem.SortOrder;
}

unint64_t sub_10015A5C0()
{
  unint64_t result = qword_100521680;
  if (!qword_100521680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521680);
  }
  return result;
}

unint64_t sub_10015A618()
{
  unint64_t result = qword_100521688;
  if (!qword_100521688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521688);
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionBarSortOrderPreferenceKey()
{
  return &type metadata for ActionBarSortOrderPreferenceKey;
}

ValueMetadata *type metadata accessor for ActionBarItemsPreferenceKey()
{
  return &type metadata for ActionBarItemsPreferenceKey;
}

uint64_t *sub_10015A68C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    uint64_t v13 = *(void *)v12;
    LOBYTE(v12) = v12[8];
    *(void *)uint64_t v11 = v13;
    v11[8] = (char)v12;
    uint64_t v14 = (uint64_t *)((char *)a1 + v10);
    uint64_t v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *uint64_t v19 = *v20;
    *((void *)v19 + 1) = *((void *)v20 + 1);
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10015A818(uint64_t a1)
{
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_10015A8F4(void *a1, void *a2, int *a3)
{
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v7;
  uint64_t v10 = (char *)a2 + v7;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = v10[8];
  *(void *)uint64_t v9 = v11;
  v9[8] = (char)v10;
  uint64_t v12 = (void *)((char *)a1 + v8);
  uint64_t v13 = (void *)((char *)a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v15;
  uint64_t v18 = (char *)a2 + v15;
  *uint64_t v17 = *v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10015AA30(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_10051BB48);
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)v9;
  LOBYTE(v9) = v9[8];
  *(void *)uint64_t v8 = v10;
  v8[8] = (char)v9;
  swift_retain();
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_retain();
  swift_release();
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *uint64_t v15 = *v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10015ABC0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v12 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  return a1;
}

char *sub_10015ACC0(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_10051BB48);
    uint64_t v6 = sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = v10[8];
  *(void *)uint64_t v9 = v11;
  v9[8] = (char)v10;
  swift_release();
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  swift_bridgeObjectRelease();
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_release();
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *uint64_t v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10015AE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015AE44);
}

uint64_t sub_10015AE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051BB50);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10015AF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015AF1C);
}

uint64_t sub_10015AF1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214(&qword_10051BB50);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ActionBar(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_1005216E8);
}

void sub_10015AFFC()
{
  sub_10015B0E4(319, (unint64_t *)&qword_10051BBC0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10015B0E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10015B148()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10015B164()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10015B19C()
{
  return sub_1001599C0();
}

uint64_t sub_10015B1A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10015B214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(type metadata accessor for ActionBar(0) - 8);
  uint64_t v8 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_100155A5C(a1, a2, v8, a3);
}

uint64_t sub_10015B29C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10015B2D4(char *a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = sub_10000F214(&qword_100521838);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

uint64_t sub_10015B338()
{
  uint64_t v1 = *(void *)(type metadata accessor for ActionBar(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10015B48C()
{
  type metadata accessor for ActionBar(0);

  return sub_100156F94();
}

uint64_t sub_10015B4FC()
{
  return sub_100157000(*(void *)(v0 + 16));
}

uint64_t sub_10015B504@<X0>(uint64_t a1@<X8>)
{
  return sub_10015796C(a1);
}

unint64_t sub_10015B50C()
{
  unint64_t result = qword_10051B950;
  if (!qword_10051B950)
  {
    sub_10000F69C(&qword_10051B958);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B950);
  }
  return result;
}

unint64_t sub_10015B580()
{
  unint64_t result = qword_1005217C0;
  if (!qword_1005217C0)
  {
    sub_10000F69C(&qword_1005217B8);
    sub_10015B5F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005217C0);
  }
  return result;
}

unint64_t sub_10015B5F4()
{
  unint64_t result = qword_1005217C8;
  if (!qword_1005217C8)
  {
    sub_10000F69C(&qword_1005217D0);
    sub_100013AA8(&qword_1005217D8, &qword_1005217E0);
    sub_1001544E8(&qword_1005217E8, (void (*)(uint64_t))type metadata accessor for ActionBar.MenuButton);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005217C8);
  }
  return result;
}

uint64_t type metadata accessor for ActionBar.MenuButton(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100521900);
}

unint64_t sub_10015B6E4()
{
  unint64_t result = qword_1005217F8;
  if (!qword_1005217F8)
  {
    sub_10000F69C(&qword_100521758);
    sub_100013AA8(&qword_1005217F0, &qword_100521750);
    sub_1001544E8((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005217F8);
  }
  return result;
}

unint64_t sub_10015B7B4()
{
  unint64_t result = qword_100521800;
  if (!qword_100521800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521800);
  }
  return result;
}

uint64_t sub_10015B814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ActionBar(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1001571D0(a1, v6, a2);
}

uint64_t sub_10015B894(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10015B8F4()
{
  return sub_100157664(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

double sub_10015B92C@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_100157858(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_10015B948()
{
  unint64_t result = qword_100521830;
  if (!qword_100521830)
  {
    sub_10000F69C(&qword_100521828);
    sub_1001544E8(&qword_1005217E8, (void (*)(uint64_t))type metadata accessor for ActionBar.MenuButton);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521830);
  }
  return result;
}

double sub_10015B9F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ActionBar(0);
  *(void *)&double result = sub_100157858(a1, a2).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for ActionBar.ActionButton(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100521998);
}

unint64_t sub_10015BA88()
{
  unint64_t result = qword_100521878;
  if (!qword_100521878)
  {
    sub_10000F69C(&qword_100521868);
    sub_10015BB28();
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521878);
  }
  return result;
}

unint64_t sub_10015BB28()
{
  unint64_t result = qword_100521880;
  if (!qword_100521880)
  {
    sub_10000F69C(&qword_100521860);
    sub_100013AA8(&qword_100521888, &qword_100521858);
    sub_100013AA8(&qword_10051B818, &qword_10051B788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521880);
  }
  return result;
}

unint64_t sub_10015BBEC()
{
  unint64_t result = qword_100521890;
  if (!qword_100521890)
  {
    sub_10000F69C(&qword_100521848);
    sub_1001544E8(&qword_100521898, (void (*)(uint64_t))type metadata accessor for ActionBar.ActionButton);
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521890);
  }
  return result;
}

uint64_t sub_10015BCBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10015BD24()
{
  return sub_100157664(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

double sub_10015BD5C@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1001569B8(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

void *sub_10015BD68(char *a1, void *(*a2)(uint64_t *__return_ptr))
{
  double result = a2(&v9);
  int v4 = *a1;
  BOOL v6 = v9 == 1 || v4 == 1;
  if (v9 == 2 || v4 == 2) {
    char v8 = 2;
  }
  else {
    char v8 = v6;
  }
  *a1 = v8;
  return result;
}

uint64_t sub_10015BDC8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    uint64_t v21 = v20 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    char v5 = *((unsigned char *)a2 + 8);
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *(void *)uint64_t v7 = *(uint64_t *)((char *)a2 + v6);
    *(void *)(v7 + 8) = v9;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    *(void *)(v7 + 16) = *(uint64_t *)((char *)a2 + v6 + 16);
    *(void *)(v7 + 24) = v10;
    *(unsigned char *)(v7 + 32) = *((unsigned char *)a2 + v6 + 32);
    uint64_t v12 = *(void **)((char *)a2 + v6 + 40);
    uint64_t v11 = *(uint64_t *)((char *)a2 + v6 + 48);
    *(void *)(v7 + 40) = v12;
    *(void *)(v7 + 48) = v11;
    *(unsigned char *)(v7 + 56) = *(unsigned char *)(v8 + 56);
    *(unsigned char *)(v7 + 57) = *(unsigned char *)(v8 + 57);
    uint64_t v13 = (int *)type metadata accessor for ActionBarItem(0);
    uint64_t v14 = v13[11];
    __dst = (void *)(v7 + v14);
    char v40 = (const void *)(v8 + v14);
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v18 = v12;
    if (v17(v40, 1, v15))
    {
      uint64_t v19 = sub_10000F214((uint64_t *)&unk_100524ED0);
      memcpy(__dst, v40, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v40, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    uint64_t v22 = v13[12];
    uint64_t v23 = (void *)(v7 + v22);
    uint64_t v24 = (void *)(v8 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = v13[13];
    Swift::Int v27 = (void *)(v7 + v26);
    uint64_t v28 = (void *)(v8 + v26);
    uint64_t v29 = v28[1];
    *Swift::Int v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = v13[14];
    uint64_t v31 = (void *)(v7 + v30);
    uint64_t v32 = v8 + v30;
    uint64_t v33 = *(void *)(v8 + v30);
    swift_retain();
    swift_retain();
    uint64_t v21 = a1;
    if (v33)
    {
      uint64_t v34 = *(void *)(v32 + 8);
      *uint64_t v31 = v33;
      v31[1] = v34;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    }
    *(unsigned char *)(v7 + v13[15]) = *(unsigned char *)(v8 + v13[15]);
    *(void *)(v7 + v13[16]) = *(void *)(v8 + v13[16]);
    uint64_t v35 = *(int *)(a3 + 24);
    BOOL v36 = (void *)(a1 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v38 = v37[1];
    *BOOL v36 = *v37;
    v36[1] = v38;
    v36[2] = v37[2];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v21;
}

uint64_t sub_10015C084(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v5 = type metadata accessor for ActionBarItem(0);
  uint64_t v6 = v4 + *(int *)(v5 + 44);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_release();
  swift_release();
  if (*(void *)(v4 + *(int *)(v5 + 56))) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10015C1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = *(void *)(a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)(a2 + v4);
  *(void *)(v5 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + v4 + 24);
  *(void *)(v5 + 16) = *(void *)(a2 + v4 + 16);
  *(void *)(v5 + 24) = v8;
  *(unsigned char *)(v5 + 32) = *(unsigned char *)(a2 + v4 + 32);
  uint64_t v10 = *(void **)(a2 + v4 + 40);
  uint64_t v9 = *(void *)(a2 + v4 + 48);
  uint64_t v37 = v10;
  *(void *)(v5 + 40) = v10;
  *(void *)(v5 + 48) = v9;
  *(unsigned char *)(v5 + 56) = *(unsigned char *)(v6 + 56);
  *(unsigned char *)(v5 + 57) = *(unsigned char *)(v6 + 57);
  uint64_t v11 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v12 = v11[11];
  __dst = (void *)(v5 + v12);
  uint64_t v13 = (const void *)(v6 + v12);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = v37;
  if (v16(v13, 1, v14))
  {
    uint64_t v18 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(__dst, v13, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
  }
  uint64_t v19 = v11[12];
  uint64_t v20 = (void *)(v5 + v19);
  uint64_t v21 = (void *)(v6 + v19);
  uint64_t v22 = v21[1];
  void *v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = v11[13];
  uint64_t v24 = (void *)(v5 + v23);
  uint64_t v25 = (void *)(v6 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = v11[14];
  uint64_t v28 = (void *)(v5 + v27);
  uint64_t v29 = v6 + v27;
  uint64_t v30 = *(void *)(v6 + v27);
  swift_retain();
  swift_retain();
  if (v30)
  {
    uint64_t v31 = *(void *)(v29 + 8);
    *uint64_t v28 = v30;
    v28[1] = v31;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  }
  *(unsigned char *)(v5 + v11[15]) = *(unsigned char *)(v6 + v11[15]);
  *(void *)(v5 + v11[16]) = *(void *)(v6 + v11[16]);
  uint64_t v32 = *(int *)(a3 + 24);
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  v33[2] = v34[2];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10015C448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  uint64_t v42 = a3;
  uint64_t v43 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v44 = a1;
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = *(void *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
  uint64_t v10 = *(void **)(v8 + 40);
  uint64_t v11 = *(void **)(v9 + 40);
  *(void *)(v8 + 40) = v11;
  id v12 = v11;

  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
  *(unsigned char *)(v8 + 57) = *(unsigned char *)(v9 + 57);
  uint64_t v13 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v14 = v13[11];
  uint64_t v15 = (void *)(v8 + v14);
  uint64_t v16 = (void *)(v9 + v14);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    uint64_t v22 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[12];
  uint64_t v24 = (void *)(v8 + v23);
  uint64_t v25 = (void *)(v9 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  swift_retain();
  swift_release();
  uint64_t v27 = v13[13];
  uint64_t v28 = (void *)(v8 + v27);
  uint64_t v29 = (void *)(v9 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  swift_retain();
  swift_release();
  uint64_t v31 = v13[14];
  uint64_t v32 = (void *)(v8 + v31);
  uint64_t v33 = v9 + v31;
  uint64_t v34 = *(void *)(v8 + v31);
  uint64_t v35 = *(void *)(v9 + v31);
  if (!v34)
  {
    if (v35)
    {
      uint64_t v37 = *(void *)(v33 + 8);
      *uint64_t v32 = v35;
      v32[1] = v37;
      swift_retain();
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_14;
  }
  if (!v35)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v36 = *(void *)(v33 + 8);
  *uint64_t v32 = v35;
  v32[1] = v36;
  swift_retain();
  swift_release();
LABEL_14:
  *(unsigned char *)(v8 + v13[15]) = *(unsigned char *)(v9 + v13[15]);
  *(void *)(v8 + v13[16]) = *(void *)(v9 + v13[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = *(int *)(v42 + 24);
  uint64_t v39 = v44 + v38;
  uint64_t v40 = v43 + v38;
  *(void *)(v44 + v38) = *(void *)(v43 + v38);
  swift_retain();
  swift_release();
  *(void *)(v39 + 8) = *(void *)(v40 + 8);
  swift_retain();
  swift_release();
  *(void *)(v39 + 16) = *(void *)(v40 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t sub_10015C7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  long long v9 = *(_OWORD *)(a2 + v6 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + v6);
  *(_OWORD *)(v7 + 16) = v9;
  *(unsigned char *)(v7 + 32) = *(unsigned char *)(a2 + v6 + 32);
  uint64_t v10 = *(void *)(a2 + v6 + 48);
  *(void *)(v7 + 40) = *(void *)(a2 + v6 + 40);
  *(void *)(v7 + 48) = v10;
  *(unsigned char *)(v7 + 56) = *(unsigned char *)(a2 + v6 + 56);
  *(unsigned char *)(v7 + 57) = *(unsigned char *)(a2 + v6 + 57);
  uint64_t v11 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v12 = v11[11];
  uint64_t v13 = (void *)(v7 + v12);
  uint64_t v14 = (const void *)(v8 + v12);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(v7 + v11[12]) = *(_OWORD *)(v8 + v11[12]);
  *(_OWORD *)(v7 + v11[13]) = *(_OWORD *)(v8 + v11[13]);
  uint64_t v18 = v11[14];
  uint64_t v19 = (void *)(v7 + v18);
  int v20 = (uint64_t *)(v8 + v18);
  uint64_t v21 = *v20;
  if (*v20)
  {
    uint64_t v22 = v20[1];
    *uint64_t v19 = v21;
    v19[1] = v22;
  }
  else
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }
  *(unsigned char *)(v7 + v11[15]) = *(unsigned char *)(v8 + v11[15]);
  *(void *)(v7 + v11[16]) = *(void *)(v8 + v11[16]);
  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  return a1;
}

uint64_t sub_10015C994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_release();
  uint64_t v34 = a3;
  uint64_t v35 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v36 = a1;
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v9 + 24);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
  uint64_t v12 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);

  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
  *(unsigned char *)(v8 + 57) = *(unsigned char *)(v9 + 57);
  uint64_t v13 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v14 = v13[11];
  uint64_t v15 = (void *)(v8 + v14);
  uint64_t v16 = (void *)(v9 + v14);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    uint64_t v22 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  *(_OWORD *)(v8 + v13[12]) = *(_OWORD *)(v9 + v13[12]);
  swift_release();
  *(_OWORD *)(v8 + v13[13]) = *(_OWORD *)(v9 + v13[13]);
  swift_release();
  uint64_t v23 = v13[14];
  uint64_t v24 = (void *)(v8 + v23);
  uint64_t v25 = v9 + v23;
  uint64_t v26 = *(void *)(v8 + v23);
  uint64_t v27 = *(void *)(v9 + v23);
  if (!v26)
  {
    if (v27)
    {
      uint64_t v29 = *(void *)(v25 + 8);
      *uint64_t v24 = v27;
      v24[1] = v29;
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    goto LABEL_14;
  }
  if (!v27)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v28 = *(void *)(v25 + 8);
  *uint64_t v24 = v27;
  v24[1] = v28;
  swift_release();
LABEL_14:
  *(unsigned char *)(v8 + v13[15]) = *(unsigned char *)(v9 + v13[15]);
  *(void *)(v8 + v13[16]) = *(void *)(v9 + v13[16]);
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(v34 + 24);
  uint64_t v31 = v36 + v30;
  uint64_t v32 = v35 + v30;
  *(void *)(v36 + v30) = *(void *)(v35 + v30);
  swift_release();
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  swift_release();
  *(void *)(v31 + 16) = *(void *)(v32 + 16);
  swift_bridgeObjectRelease();
  return v36;
}

uint64_t sub_10015CC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015CC9C);
}

uint64_t sub_10015CCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015CCB4);
}

uint64_t sub_10015CCB8()
{
  uint64_t result = type metadata accessor for ActionBarItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10015CD58(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    uint64_t v3 = v20 + ((v4 + 16) & ~(unint64_t)v4);
  }
  else
  {
    char v5 = *((unsigned char *)a2 + 8);
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = v5;
    uint64_t v6 = a3[5];
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *(void *)uint64_t v7 = *(uint64_t *)((char *)a2 + v6);
    *(void *)(v7 + 8) = v9;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    *(void *)(v7 + 16) = *(uint64_t *)((char *)a2 + v6 + 16);
    *(void *)(v7 + 24) = v10;
    *(unsigned char *)(v7 + 32) = *((unsigned char *)a2 + v6 + 32);
    uint64_t v12 = *(void **)((char *)a2 + v6 + 40);
    uint64_t v11 = *(uint64_t *)((char *)a2 + v6 + 48);
    uint64_t v44 = v12;
    *(void *)(v7 + 40) = v12;
    *(void *)(v7 + 48) = v11;
    *(unsigned char *)(v7 + 56) = *(unsigned char *)(v8 + 56);
    *(unsigned char *)(v7 + 57) = *(unsigned char *)(v8 + 57);
    uint64_t v13 = (int *)type metadata accessor for ActionBarItem(0);
    uint64_t v14 = v13[11];
    __dst = (void *)(v7 + v14);
    uint64_t v15 = (const void *)(v8 + v14);
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v18 = v44;
    if (v43(v15, 1, v16))
    {
      uint64_t v19 = sub_10000F214((uint64_t *)&unk_100524ED0);
      memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    uint64_t v21 = v13[12];
    uint64_t v22 = (void *)(v7 + v21);
    uint64_t v23 = (void *)(v8 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v13[13];
    uint64_t v26 = (void *)(v7 + v25);
    uint64_t v27 = (void *)(v8 + v25);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = v13[14];
    uint64_t v30 = (void *)(v7 + v29);
    uint64_t v31 = v8 + v29;
    uint64_t v32 = *(void *)(v8 + v29);
    swift_retain();
    swift_retain();
    if (v32)
    {
      uint64_t v33 = *(void *)(v31 + 8);
      *uint64_t v30 = v32;
      v30[1] = v33;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    }
    *(unsigned char *)(v7 + v13[15]) = *(unsigned char *)(v8 + v13[15]);
    *(void *)(v7 + v13[16]) = *(void *)(v8 + v13[16]);
    uint64_t v34 = a3[6];
    uint64_t v35 = a3[7];
    uint64_t v36 = (void *)(v3 + v34);
    uint64_t v37 = (uint64_t *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    v36[2] = v37[2];
    uint64_t v39 = v3 + v35;
    uint64_t v40 = (uint64_t)a2 + v35;
    uint64_t v41 = *(void *)(v40 + 8);
    *(void *)uint64_t v39 = *(void *)v40;
    *(void *)(v39 + 8) = v41;
    *(unsigned char *)(v39 + 16) = *(unsigned char *)(v40 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t sub_10015D038(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v5 = type metadata accessor for ActionBarItem(0);
  uint64_t v6 = v4 + *(int *)(v5 + 44);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_release();
  swift_release();
  if (*(void *)(v4 + *(int *)(v5 + 56))) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t sub_10015D1AC(uint64_t a1, uint64_t a2, int *a3)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  uint64_t v4 = a3[5];
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = *(void *)(a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)(a2 + v4);
  *(void *)(v5 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + v4 + 24);
  *(void *)(v5 + 16) = *(void *)(a2 + v4 + 16);
  *(void *)(v5 + 24) = v8;
  *(unsigned char *)(v5 + 32) = *(unsigned char *)(a2 + v4 + 32);
  uint64_t v10 = *(void **)(a2 + v4 + 40);
  uint64_t v9 = *(void *)(a2 + v4 + 48);
  uint64_t v41 = v10;
  *(void *)(v5 + 40) = v10;
  *(void *)(v5 + 48) = v9;
  *(unsigned char *)(v5 + 56) = *(unsigned char *)(v6 + 56);
  *(unsigned char *)(v5 + 57) = *(unsigned char *)(v6 + 57);
  uint64_t v11 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v12 = v11[11];
  __dst = (void *)(v5 + v12);
  uint64_t v13 = (const void *)(v6 + v12);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = v41;
  if (v16(v13, 1, v14))
  {
    uint64_t v18 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(__dst, v13, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
  }
  uint64_t v19 = v11[12];
  uint64_t v20 = (void *)(v5 + v19);
  uint64_t v21 = (void *)(v6 + v19);
  uint64_t v22 = v21[1];
  void *v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = v11[13];
  uint64_t v24 = (void *)(v5 + v23);
  uint64_t v25 = (void *)(v6 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = v11[14];
  uint64_t v28 = (void *)(v5 + v27);
  uint64_t v29 = v6 + v27;
  uint64_t v30 = *(void *)(v6 + v27);
  swift_retain();
  swift_retain();
  if (v30)
  {
    uint64_t v31 = *(void *)(v29 + 8);
    *uint64_t v28 = v30;
    v28[1] = v31;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  }
  *(unsigned char *)(v5 + v11[15]) = *(unsigned char *)(v6 + v11[15]);
  *(void *)(v5 + v11[16]) = *(void *)(v6 + v11[16]);
  uint64_t v32 = a3[6];
  uint64_t v33 = a3[7];
  uint64_t v34 = (void *)(a1 + v32);
  uint64_t v35 = (void *)(a2 + v32);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  v34[2] = v35[2];
  uint64_t v37 = a1 + v33;
  uint64_t v38 = a2 + v33;
  uint64_t v39 = *(void *)(v38 + 8);
  *(void *)uint64_t v37 = *(void *)v38;
  *(void *)(v37 + 8) = v39;
  *(unsigned char *)(v37 + 16) = *(unsigned char *)(v38 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10015D43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  uint64_t v45 = a3;
  uint64_t v46 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v47 = a1;
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = *(void *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
  uint64_t v10 = *(void **)(v8 + 40);
  uint64_t v11 = *(void **)(v9 + 40);
  *(void *)(v8 + 40) = v11;
  id v12 = v11;

  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
  *(unsigned char *)(v8 + 57) = *(unsigned char *)(v9 + 57);
  uint64_t v13 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v14 = v13[11];
  uint64_t v15 = (void *)(v8 + v14);
  uint64_t v16 = (void *)(v9 + v14);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    uint64_t v22 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[12];
  uint64_t v24 = (void *)(v8 + v23);
  uint64_t v25 = (void *)(v9 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  swift_retain();
  swift_release();
  uint64_t v27 = v13[13];
  uint64_t v28 = (void *)(v8 + v27);
  uint64_t v29 = (void *)(v9 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  swift_retain();
  swift_release();
  uint64_t v31 = v13[14];
  uint64_t v32 = (void *)(v8 + v31);
  uint64_t v33 = v9 + v31;
  uint64_t v34 = *(void *)(v8 + v31);
  uint64_t v35 = *(void *)(v9 + v31);
  if (!v34)
  {
    if (v35)
    {
      uint64_t v37 = *(void *)(v33 + 8);
      *uint64_t v32 = v35;
      v32[1] = v37;
      swift_retain();
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_14;
  }
  if (!v35)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v36 = *(void *)(v33 + 8);
  *uint64_t v32 = v35;
  v32[1] = v36;
  swift_retain();
  swift_release();
LABEL_14:
  *(unsigned char *)(v8 + v13[15]) = *(unsigned char *)(v9 + v13[15]);
  *(void *)(v8 + v13[16]) = *(void *)(v9 + v13[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = *(int *)(v45 + 24);
  uint64_t v39 = v47 + v38;
  uint64_t v40 = v46 + v38;
  *(void *)(v47 + v38) = *(void *)(v46 + v38);
  swift_retain();
  swift_release();
  *(void *)(v39 + 8) = *(void *)(v40 + 8);
  swift_retain();
  swift_release();
  *(void *)(v39 + 16) = *(void *)(v40 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = *(int *)(v45 + 28);
  uint64_t v42 = v47 + v41;
  uint64_t v43 = v46 + v41;
  *(void *)uint64_t v42 = *(void *)(v46 + v41);
  swift_retain();
  swift_release();
  *(void *)(v42 + 8) = *(void *)(v43 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v42 + 16) = *(unsigned char *)(v43 + 16);
  return v47;
}

uint64_t sub_10015D7E4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  long long v9 = *(_OWORD *)(a2 + v6 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + v6);
  *(_OWORD *)(v7 + 16) = v9;
  *(unsigned char *)(v7 + 32) = *(unsigned char *)(a2 + v6 + 32);
  uint64_t v10 = *(void *)(a2 + v6 + 48);
  *(void *)(v7 + 40) = *(void *)(a2 + v6 + 40);
  *(void *)(v7 + 48) = v10;
  *(unsigned char *)(v7 + 56) = *(unsigned char *)(a2 + v6 + 56);
  *(unsigned char *)(v7 + 57) = *(unsigned char *)(a2 + v6 + 57);
  uint64_t v11 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v12 = v11[11];
  uint64_t v13 = (void *)(v7 + v12);
  uint64_t v14 = (const void *)(v8 + v12);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(v7 + v11[12]) = *(_OWORD *)(v8 + v11[12]);
  *(_OWORD *)(v7 + v11[13]) = *(_OWORD *)(v8 + v11[13]);
  uint64_t v18 = v11[14];
  uint64_t v19 = (void *)(v7 + v18);
  int v20 = (uint64_t *)(v8 + v18);
  uint64_t v21 = *v20;
  if (*v20)
  {
    uint64_t v22 = v20[1];
    *uint64_t v19 = v21;
    v19[1] = v22;
  }
  else
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }
  *(unsigned char *)(v7 + v11[15]) = *(unsigned char *)(v8 + v11[15]);
  *(void *)(v7 + v11[16]) = *(void *)(v8 + v11[16]);
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(void *)(v25 + 16) = *(void *)(v26 + 16);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
  return a1;
}

uint64_t sub_10015D9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_release();
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v39 = a1;
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v9 + 24);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
  uint64_t v12 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);

  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
  *(unsigned char *)(v8 + 57) = *(unsigned char *)(v9 + 57);
  uint64_t v13 = (int *)type metadata accessor for ActionBarItem(0);
  uint64_t v14 = v13[11];
  uint64_t v15 = (void *)(v8 + v14);
  uint64_t v16 = (void *)(v9 + v14);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    uint64_t v22 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  *(_OWORD *)(v8 + v13[12]) = *(_OWORD *)(v9 + v13[12]);
  swift_release();
  *(_OWORD *)(v8 + v13[13]) = *(_OWORD *)(v9 + v13[13]);
  swift_release();
  uint64_t v23 = v13[14];
  uint64_t v24 = (void *)(v8 + v23);
  uint64_t v25 = v9 + v23;
  uint64_t v26 = *(void *)(v8 + v23);
  uint64_t v27 = *(void *)(v9 + v23);
  if (!v26)
  {
    if (v27)
    {
      uint64_t v29 = *(void *)(v25 + 8);
      *uint64_t v24 = v27;
      v24[1] = v29;
      goto LABEL_14;
    }
LABEL_13:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    goto LABEL_14;
  }
  if (!v27)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v28 = *(void *)(v25 + 8);
  *uint64_t v24 = v27;
  v24[1] = v28;
  swift_release();
LABEL_14:
  *(unsigned char *)(v8 + v13[15]) = *(unsigned char *)(v9 + v13[15]);
  *(void *)(v8 + v13[16]) = *(void *)(v9 + v13[16]);
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(v37 + 24);
  uint64_t v31 = v39 + v30;
  uint64_t v32 = v38 + v30;
  *(void *)(v39 + v30) = *(void *)(v38 + v30);
  swift_release();
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  swift_release();
  *(void *)(v31 + 16) = *(void *)(v32 + 16);
  swift_bridgeObjectRelease();
  uint64_t v33 = *(int *)(v37 + 28);
  uint64_t v34 = v39 + v33;
  uint64_t v35 = v38 + v33;
  *(void *)(v39 + v33) = *(void *)(v38 + v33);
  swift_release();
  *(void *)(v34 + 8) = *(void *)(v35 + 8);
  swift_release();
  *(unsigned char *)(v34 + 16) = *(unsigned char *)(v35 + 16);
  return v39;
}

uint64_t sub_10015DD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015DD20);
}

uint64_t sub_10015DD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionBarItem(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_10015DDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015DE00);
}

uint64_t sub_10015DE04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionBarItem(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10015DEC8()
{
  uint64_t result = type metadata accessor for ActionBarItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ActionBarItemsModifier(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionBarItemsModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionBarItemsModifier()
{
  return &type metadata for ActionBarItemsModifier;
}

uint64_t sub_10015E00C()
{
  return sub_10015F43C(&qword_1005219D8, &qword_100521748, (void (*)(void))sub_10015E050);
}

unint64_t sub_10015E050()
{
  unint64_t result = qword_1005219E0;
  if (!qword_1005219E0)
  {
    sub_10000F69C(&qword_100521738);
    sub_100013AA8(&qword_1005219E8, &qword_100521730);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005219E0);
  }
  return result;
}

uint64_t sub_10015E0F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10015E10C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10015E128()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10015E144()
{
  uint64_t v1 = type metadata accessor for ActionBar.MenuButton(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  unint64_t v3 = v0 + v2 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = type metadata accessor for ActionBarItem(0);
  unint64_t v5 = v3 + *(int *)(v4 + 44);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_release();
  swift_release();
  if (*(void *)(v3 + *(int *)(v4 + 56))) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10015E32C()
{
  uint64_t v1 = *(void *)(type metadata accessor for ActionBar.MenuButton(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10015919C(v0 + v2, *(unsigned __int8 *)(v0 + v2 + *(void *)(v1 + 64)), (uint64_t (*)(void, double))type metadata accessor for ActionBar.MenuButton, (uint64_t)&unk_1004EDCB8, (uint64_t)sub_10010DF04, 4);
}

uint64_t sub_10015E3D8()
{
  return sub_100159508();
}

uint64_t sub_10015E3E0()
{
  uint64_t v1 = type metadata accessor for ActionBar.MenuButton(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  unint64_t v3 = v0 + v2 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = type metadata accessor for ActionBarItem(0);
  unint64_t v5 = v3 + *(int *)(v4 + 44);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_release();
  swift_release();
  if (*(void *)(v3 + *(int *)(v4 + 56))) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10015E5C4(char a1)
{
  return sub_10015EF64(a1, type metadata accessor for ActionBar.MenuButton, type metadata accessor for ActionBar.MenuButton);
}

uint64_t sub_10015E5F0@<X0>(uint64_t a1@<X8>)
{
  return sub_10015959C(type metadata accessor for ActionBar.MenuButton, a1);
}

void sub_10015E620(uint64_t a1@<X8>)
{
  sub_100159620(*(void *)(v1 + 16), type metadata accessor for ActionBar.MenuButton, a1);
}

unint64_t sub_10015E650()
{
  unint64_t result = qword_100521A30;
  if (!qword_100521A30)
  {
    sub_10000F69C(&qword_100521A28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521A30);
  }
  return result;
}

uint64_t sub_10015E6BC()
{
  uint64_t v1 = type metadata accessor for ActionBar.ActionButton(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  unint64_t v3 = v0 + v2 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = type metadata accessor for ActionBarItem(0);
  unint64_t v5 = v3 + *(int *)(v4 + 44);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_release();
  swift_release();
  if (*(void *)(v3 + *(int *)(v4 + 56))) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10015E8BC()
{
  uint64_t v1 = *(void *)(type metadata accessor for ActionBar.ActionButton(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10015919C(v0 + v2, *(unsigned __int8 *)(v0 + v2 + *(void *)(v1 + 64)), (uint64_t (*)(void, double))type metadata accessor for ActionBar.ActionButton, (uint64_t)&unk_1004EDD80, (uint64_t)sub_10010DF04, 3);
}

uint64_t sub_10015E968@<X0>(uint64_t a1@<X8>)
{
  return sub_1001587CC(*(void *)(v1 + 16), a1);
}

unint64_t sub_10015E970()
{
  unint64_t result = qword_100521A90;
  if (!qword_100521A90)
  {
    sub_10000F69C(&qword_100521A88);
    sub_10015EA1C();
    sub_1001544E8((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521A90);
  }
  return result;
}

unint64_t sub_10015EA1C()
{
  unint64_t result = qword_100521A98;
  if (!qword_100521A98)
  {
    sub_10000F69C(&qword_100521AA0);
    sub_10000F69C(&qword_100521AA8);
    sub_10015EAE8();
    sub_10015EBAC();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521A98);
  }
  return result;
}

unint64_t sub_10015EAE8()
{
  unint64_t result = qword_100521AB0;
  if (!qword_100521AB0)
  {
    sub_10000F69C(&qword_100521AA8);
    sub_100013AA8(&qword_100521A08, &qword_100521A00);
    sub_100013AA8(&qword_10051EF70, &qword_10051EF40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521AB0);
  }
  return result;
}

unint64_t sub_10015EBAC()
{
  unint64_t result = qword_100521AB8;
  if (!qword_100521AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521AB8);
  }
  return result;
}

unint64_t sub_10015EC00()
{
  unint64_t result = qword_100521AC8;
  if (!qword_100521AC8)
  {
    sub_10000F69C(&qword_100521A40);
    sub_100013AA8(&qword_100521AC0, &qword_100521A38);
    sub_1001544E8((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521AC8);
  }
  return result;
}

unint64_t sub_10015ECD0()
{
  unint64_t result = qword_100521AD0;
  if (!qword_100521AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521AD0);
  }
  return result;
}

uint64_t sub_10015ED2C()
{
  return swift_deallocObject();
}

uint64_t sub_10015ED3C()
{
  uint64_t v1 = type metadata accessor for ActionBar.ActionButton(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  unint64_t v3 = v0 + v2 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = type metadata accessor for ActionBarItem(0);
  unint64_t v5 = v3 + *(int *)(v4 + 44);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_release();
  swift_release();
  if (*(void *)(v3 + *(int *)(v4 + 56))) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10015EF38(char a1)
{
  return sub_10015EF64(a1, type metadata accessor for ActionBar.ActionButton, type metadata accessor for ActionBar.ActionButton);
}

uint64_t sub_10015EF64(char a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  char v5 = a1 & 1;
  uint64_t v6 = *(void *)(a2(0) - 8);
  return sub_100159734(v5, v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a3);
}

uint64_t sub_10015EFDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10015959C(type metadata accessor for ActionBar.ActionButton, a1);
}

void sub_10015F00C(uint64_t a1@<X8>)
{
  sub_100159620(*(void *)(v1 + 16), type metadata accessor for ActionBar.ActionButton, a1);
}

ValueMetadata *type metadata accessor for ActionBarItemLabelStyle()
{
  return &type metadata for ActionBarItemLabelStyle;
}

uint64_t sub_10015F054()
{
  return sub_10015F090(&qword_100521AF8, &qword_100521A18, (void (*)(void))sub_10015F110);
}

uint64_t sub_10015F090(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    sub_10015F1E0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10015F110()
{
  unint64_t result = qword_100521B00;
  if (!qword_100521B00)
  {
    sub_10000F69C(&qword_1005219F8);
    sub_100013AA8(&qword_100521A10, &qword_1005219F0);
    sub_1001544E8((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521B00);
  }
  return result;
}

unint64_t sub_10015F1E0()
{
  unint64_t result = qword_100521B08;
  if (!qword_100521B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521B08);
  }
  return result;
}

uint64_t sub_10015F234()
{
  return sub_10015F090(&qword_100521B10, &qword_100521A80, (void (*)(void))sub_10015F270);
}

unint64_t sub_10015F270()
{
  unint64_t result = qword_100521B18;
  if (!qword_100521B18)
  {
    sub_10000F69C(&qword_100521A78);
    sub_10015F310();
    sub_100013AA8(&qword_100521B48, &qword_100521B50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521B18);
  }
  return result;
}

unint64_t sub_10015F310()
{
  unint64_t result = qword_100521B20;
  if (!qword_100521B20)
  {
    sub_10000F69C(&qword_100521A70);
    sub_10015F43C(&qword_100521B28, &qword_100521A68, (void (*)(void))sub_10015F3DC);
    sub_100013AA8(&qword_10051BE40, &qword_10051BE48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521B20);
  }
  return result;
}

uint64_t sub_10015F3DC()
{
  return sub_10015F43C(&qword_100521B30, &qword_100521A60, (void (*)(void))sub_10015F40C);
}

uint64_t sub_10015F40C()
{
  return sub_10015F43C(&qword_100521B38, &qword_100521A58, (void (*)(void))sub_10015F4B8);
}

uint64_t sub_10015F43C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10015F4B8()
{
  unint64_t result = qword_100521B40;
  if (!qword_100521B40)
  {
    sub_10000F69C(&qword_100521A50);
    sub_10000F69C(&qword_100521A40);
    sub_10015EC00();
    sub_10015ECD0();
    swift_getOpaqueTypeConformance2();
    sub_100153020();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521B40);
  }
  return result;
}

unint64_t sub_10015F588()
{
  unint64_t result = qword_100521B58;
  if (!qword_100521B58)
  {
    sub_10000F69C(&qword_100521AF0);
    sub_10015F628();
    sub_100013AA8(&qword_100521B80, &qword_100521B88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521B58);
  }
  return result;
}

unint64_t sub_10015F628()
{
  unint64_t result = qword_100521B60;
  if (!qword_100521B60)
  {
    sub_10000F69C(&qword_100521AE0);
    sub_100013AA8(&qword_100521B68, &qword_100521AE8);
    sub_100013AA8(&qword_100521B70, &qword_100521B78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521B60);
  }
  return result;
}

uint64_t sub_10015F6EC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10015F71C()
{
  unint64_t result = qword_100521BA0;
  if (!qword_100521BA0)
  {
    sub_10000F69C(&qword_100521B98);
    sub_10015F7BC();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521BA0);
  }
  return result;
}

unint64_t sub_10015F7BC()
{
  unint64_t result = qword_100521BA8;
  if (!qword_100521BA8)
  {
    sub_10000F69C(&qword_100521B90);
    sub_100013AA8(&qword_10051EE30, &qword_10051EE38);
    sub_100013AA8(&qword_100518D00, &qword_100523200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521BA8);
  }
  return result;
}

uint64_t sub_10015F890()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVDetection();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001614D0(v1, (uint64_t)v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100161534((uint64_t)v10, (uint64_t)v4, type metadata accessor for ParseDetectorResult);
      unint64_t v11 = *(void *)&v4[*(int *)(v2 + 44)];
      swift_bridgeObjectRetain();
      uint64_t v19 = type metadata accessor for ParseDetectorResult;
      uint64_t v20 = (uint64_t)v4;
      goto LABEL_66;
    case 2u:
    case 5u:
      sub_10016159C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      return 0xD000000000000016;
    case 3u:
      sub_10016159C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      return 0x65646F637271;
    case 4u:
      sub_10016159C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      return 0x70696C63707061;
    default:
      unint64_t v11 = 0x662E726568736177;
      sub_100161534((uint64_t)v10, (uint64_t)v7, type metadata accessor for ObjectDetectorResult);
      unint64_t v12 = &v7[*(int *)(v5 + 28)];
      uint64_t v13 = *(void *)v12;
      uint64_t v14 = *((void *)v12 + 1);
      BOOL v15 = *(void *)v12 == 0x636E61696C707061 && v14 == 0xE900000000000065;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_65;
      }
      unint64_t v11 = 0x656E616C70726961;
      BOOL v16 = v13 == 0x7466617263726961 && v14 == 0xE800000000000000;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_65;
      }
      unint64_t v11 = 0x656469732E726163;
      BOOL v17 = v13 == 0x69626F6D6F747561 && v14 == 0xEA0000000000656CLL;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_65;
      }
      unint64_t v11 = 0x6C69662E64726962;
      BOOL v18 = v13 == 1685219682 && v14 == 0xE400000000000000;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_65;
      }
      if (v13 == 0x656C74746F62 && v14 == 0xE600000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        goto LABEL_28;
      }
      unint64_t v11 = 0x6C6C69662E676F64;
      if ((v13 != 0x656E696E6163 || v14 != 0xE600000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unint64_t v11 = 0x747865742E636F64;
        if ((v13 != 0x746E656D75636F64 || v14 != 0xE800000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          unint64_t v11 = 0x79616C70736964;
          if ((v13 != 0xD000000000000010 || v14 != 0x80000001004285F0)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            unint64_t v11 = 0x672E656E6F687069;
            if ((v13 != 0xD000000000000014 || v14 != 0x8000000100428610)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              unint64_t v11 = 0x6C6C69662E746163;
              if ((v13 != 0x656E696C6566 || v14 != 0xE600000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                unint64_t v11 = 0x6C69662E6661656CLL;
                if ((v13 != 0x7265776F6C66 || v14 != 0xE600000000000000)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  unint64_t v11 = 0x696E6B2E6B726F66;
                  if ((v13 != 1685024614 || v14 != 0xE400000000000000)
                    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    unint64_t v11 = 0xD000000000000011;
                    if ((v13 != 0x727574696E727566 || v14 != 0xE900000000000065)
                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                    {
                      unint64_t v11 = 0x662E6E6F73726570;
                      if ((v13 != 0x656C706F6570 || v14 != 0xE600000000000000)
                        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                      {
                        unint64_t v11 = 0xD000000000000012;
                        if ((v13 != 1852270963 || v14 != 0xE400000000000000)
                          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                        {
                          unint64_t v11 = 0x6C6C6162746F6F66;
                          if ((v13 != 0xD000000000000010 || v14 != 0x8000000100428630)
                            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                          {
                            if (v13 == 1819242356 && v14 == 0xE400000000000000)
                            {
LABEL_28:
                              unint64_t v11 = 0xD000000000000010;
                            }
                            else
                            {
                              unint64_t v11 = 0xD000000000000010;
                              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                              {
                                unint64_t v11 = 0x662E746F72726163;
                                if ((v13 != 0x6C62617465676576 || v14 != 0xE900000000000065)
                                  && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                                {
                                  if (v13 == 0x6172637265746177 && v14 == 0xEA00000000007466
                                    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                  {
                                    unint64_t v11 = 0x74616F626C696173;
                                  }
                                  else
                                  {
                                    unint64_t v11 = 0x6E6F697473657571;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_65:
      uint64_t v19 = type metadata accessor for ObjectDetectorResult;
      uint64_t v20 = (uint64_t)v7;
LABEL_66:
      sub_10016159C(v20, v19);
      return v11;
  }
}

void sub_10016028C(void *a1@<X8>)
{
  *a1 = &off_1004E5858;
}

__n128 sub_10016029C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v40 = (_OWORD *)(a2 + 264);
  uint64_t v6 = *(void *)v2;
  char v7 = *(unsigned char *)(v2 + 8);
  sub_10016180C(*(void *)v3, *(unsigned char *)(v3 + 8));
  char v8 = sub_10027D0F4(v6, v7);
  sub_100161890(v6, v7);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v37 = *(void *)(a1 + 16);
  uint64_t v38 = *(uint64_t (**)(void))(v9 + 40);
  *(void *)&v43[0] = v38(v8 & 1);
  sub_100080384();
  uint64_t v34 = Color.init<A>(_:)();
  char v39 = *(unsigned char *)(v2 + *(int *)(a1 + 40));
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v10 = static Alignment.center.getter();
  uint64_t v35 = v11;
  uint64_t v36 = v10;
  sub_10016180C(v6, v7);
  char v12 = sub_10027D0F4(v6, v7);
  sub_100161890(v6, v7);
  *(void *)&v43[0] = ((uint64_t (*)(void, uint64_t, uint64_t))v38)(v12 & 1, v37, v9);
  Color.init<A>(_:)();
  uint64_t v13 = Color.opacity(_:)();
  swift_release();
  uint64_t v50 = v13;
  __int16 v51 = 256;
  uint64_t v52 = v45;
  uint64_t v53 = v46;
  uint64_t v54 = v47;
  uint64_t v55 = v48;
  uint64_t v56 = v49;
  uint64_t v57 = v34;
  __int16 v58 = 256;
  uint64_t v59 = v36;
  uint64_t v60 = v35;
  uint64_t v61 = static Alignment.center.getter();
  uint64_t v62 = v14;
  uint64_t v15 = v2 + *(int *)(a1 + 44);
  if (*(unsigned char *)(v15 + 8))
  {
    double v16 = 42.0;
    if (!*(unsigned char *)(v2 + *(int *)(a1 + 40))) {
      double v16 = 12.0;
    }
  }
  else
  {
    double v16 = *(double *)v15;
  }
  double v17 = v16;
  static Alignment.center.getter();
  sub_100226084(0.0, 1, 0.0, 1, v17, 0, 0.0, 1, (uint64_t)v43, 0.0, 1, 0.0, 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v18 = static Animation.spring(response:dampingFraction:blendDuration:)();
  uint64_t v19 = static Alignment.center.getter();
  uint64_t v21 = v20;
  sub_1001605F4(v3, v37, v9, (double *)v41);
  uint64_t v22 = v42;
  __n128 result = (__n128)v41[0];
  long long v24 = v41[1];
  long long v25 = v41[2];
  long long v26 = v41[3];
  long long v27 = v43[11];
  *(_OWORD *)(a2 + 160) = v43[10];
  *(_OWORD *)(a2 + 176) = v27;
  *(_OWORD *)(a2 + 192) = v43[12];
  uint64_t v28 = v44;
  long long v29 = v43[7];
  *(_OWORD *)(a2 + 96) = v43[6];
  *(_OWORD *)(a2 + 112) = v29;
  long long v30 = v43[9];
  *(_OWORD *)(a2 + 128) = v43[8];
  *(_OWORD *)(a2 + 144) = v30;
  long long v31 = v43[3];
  *(_OWORD *)(a2 + 32) = v43[2];
  *(_OWORD *)(a2 + 48) = v31;
  long long v32 = v43[5];
  *(_OWORD *)(a2 + 64) = v43[4];
  *(_OWORD *)(a2 + 80) = v32;
  long long v33 = v43[1];
  *(_OWORD *)a2 = v43[0];
  *(_OWORD *)(a2 + 16) = v33;
  *(void *)(a2 + 208) = v28;
  *(void *)(a2 + 216) = v18;
  *(unsigned char *)(a2 + 224) = v39;
  *(__n128 *)(a2 + 232) = result;
  *(_OWORD *)(a2 + 248) = v24;
  _OWORD *v40 = v25;
  v40[1] = v26;
  *(void *)(a2 + 296) = v22;
  *(void *)(a2 + 304) = v19;
  *(void *)(a2 + 312) = v21;
  return result;
}

uint64_t sub_1001605F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ScaleTransition();
  uint64_t v43 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100521C38);
  uint64_t v44 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v42 = (char *)&v37 - v14;
  uint64_t v15 = type metadata accessor for Image.ResizingMode();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = type metadata accessor for Pin();
  if (*(unsigned char *)(a1 + *(int *)(result + 40)) == 1)
  {
    uint64_t v40 = v11;
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    Image.init(_internalSystemName:)();
    uint64_t v38 = v8;
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v15);
    uint64_t v39 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    double v20 = (*(double (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    double v21 = (*(double (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    uint64_t v23 = v22;
    uint64_t v24 = *(void *)a1;
    char v25 = *(unsigned char *)(a1 + 8);
    sub_10016180C(*(void *)a1, v25);
    char v26 = sub_10027D0F4(v24, v25);
    sub_100161890(v24, v25);
    uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t))(a3 + 48))(v26 & 1, a2, a3);
    static UnitPoint.center.getter();
    ScaleTransition.init(_:anchor:)();
    static Animation.spring(response:dampingFraction:blendDuration:)();
    uint64_t v28 = sub_100161FF0(&qword_100521C40, (void (*)(uint64_t))&type metadata accessor for ScaleTransition);
    long long v29 = v42;
    uint64_t v30 = v38;
    Transition.animation(_:)();
    swift_release();
    uint64_t v31 = v30;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v30);
    uint64_t v32 = v44;
    uint64_t v33 = v40;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v29, v40);
    uint64_t v45 = v31;
    uint64_t v46 = v28;
    uint64_t v34 = 1;
    swift_getOpaqueTypeConformance2();
    uint64_t v35 = AnyTransition.init<A>(_:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v29, v33);
    uint64_t v36 = v39;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v34 = 0;
    uint64_t v27 = 0;
    uint64_t v35 = 0;
    double v20 = 0.0;
    double v21 = 0.0;
    uint64_t v23 = 0;
  }
  *(void *)a4 = v36;
  a4[1] = 0.0;
  *((void *)a4 + 2) = v34;
  a4[3] = v20;
  a4[4] = v20;
  a4[5] = v21;
  *((void *)a4 + 6) = v23;
  *((void *)a4 + 7) = v27;
  *((void *)a4 + 8) = v35;
  return result;
}

uint64_t sub_100160AB0(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t result = static Color.yellow.getter();
      break;
    case 2:
      uint64_t result = static Color.red.getter();
      break;
    case 3:
      uint64_t result = static Color.indigo.getter();
      break;
    case 4:
    case 6:
      uint64_t result = static Color.gray.getter();
      break;
    case 5:
      uint64_t result = static Color.green.getter();
      break;
    case 7:
      uint64_t result = static Color.blue.getter();
      break;
    case 8:
      uint64_t result = static Color.brown.getter();
      break;
    case 9:
      uint64_t result = static Color.pink.getter();
      break;
    default:
      uint64_t result = static Color.mint.getter();
      break;
  }
  return result;
}

double sub_100160B24()
{
  return 0.55;
}

uint64_t sub_100160B3C(uint64_t a1)
{
  uint64_t result = sub_100161FF0(qword_100521BB0, (void (*)(uint64_t))type metadata accessor for CVDetection);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100160B94(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x636E61696C707061 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return 6;
  }
  if (a1 == 0x7466617263726961 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x69626F6D6F747561 && a2 == 0xEA0000000000656CLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    goto LABEL_13;
  }
  if (a1 == 1685219682 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_18;
  }
  if (a1 == 0x656C74746F62 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_22;
  }
  if (a1 == 0x656E696E6163 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_18;
  }
  if (a1 == 0x746E656D75636F64 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001004285F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000014 && a2 == 0x8000000100428610
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  if (a1 == 0x656E696C6566 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (a1 == 0x7265776F6C66 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_45;
  }
  if (a1 == 1685024614 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return 3;
  }
  if (a1 == 0x727574696E727566 && a2 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    goto LABEL_52;
  }
  if (a1 == 0x656C706F6570 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  if (a1 == 1852270963 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000010 && a2 == 0x8000000100428630
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_52:
    swift_bridgeObjectRelease();
    return 4;
  }
  if (a1 == 1819242356 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_6;
  }
  if (a1 == 0x6C62617465676576 && a2 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_45:
    swift_bridgeObjectRelease();
    return 5;
  }
  if (a1 == 0x6172637265746177 && a2 == 0xEA00000000007466)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return 8;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v6) {
    return 8;
  }
  else {
    return 9;
  }
}

uint64_t sub_10016122C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v5);
  char v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVDetection();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001614D0(v1, (uint64_t)v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v18 = static Color.indigo.getter();
      goto LABEL_8;
    case 2u:
      sub_100161534((uint64_t)v10, (uint64_t)v4, type metadata accessor for TextDetectorResult);
      if (v4[*(int *)(v2 + 56)] == 1)
      {
        uint64_t v19 = static Color.mint.getter();
      }
      else if (*(void *)(*(void *)&v4[*(int *)(v2 + 48)] + 16))
      {
        uint64_t v19 = static Color.yellow.getter();
      }
      else
      {
        uint64_t v19 = static Color.orange.getter();
      }
      uint64_t v11 = v19;
      uint64_t v16 = type metadata accessor for TextDetectorResult;
      uint64_t v17 = (uint64_t)v4;
      goto LABEL_13;
    case 3u:
    case 4u:
      sub_10016159C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      return static Color.green.getter();
    case 5u:
      uint64_t v18 = static Color.purple.getter();
LABEL_8:
      uint64_t v11 = v18;
      uint64_t v16 = (uint64_t (*)(void))type metadata accessor for CVDetection;
      uint64_t v17 = (uint64_t)v10;
      goto LABEL_13;
    default:
      sub_100161534((uint64_t)v10, (uint64_t)v7, type metadata accessor for ObjectDetectorResult);
      uint64_t v12 = (uint64_t *)&v7[*(int *)(v5 + 28)];
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      swift_bridgeObjectRetain();
      char v15 = sub_100160B94(v13, v14);
      uint64_t v11 = sub_100160AB0(v15);
      uint64_t v16 = type metadata accessor for ObjectDetectorResult;
      uint64_t v17 = (uint64_t)v7;
LABEL_13:
      sub_10016159C(v17, v16);
      return v11;
  }
}

uint64_t sub_1001614D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVDetection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100161534(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10016159C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001615FC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001616AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((((v7 + 9) & ~v7) + v8) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v12 = *(void *)a2;
    char v13 = *(unsigned char *)(a2 + 8);
    sub_10016180C(*(void *)a2, v13);
    *(void *)a1 = v12;
    *(unsigned char *)(a1 + 8) = v13;
    uint64_t v14 = a2 + v7;
    uint64_t v15 = (a1 + v7 + 9) & ~v7;
    uint64_t v16 = (v14 + 9) & ~v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v15, v16, v5);
    *(unsigned char *)(v15 + v8) = *(unsigned char *)(v16 + v8);
    unint64_t v17 = (v15 + v8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v16 + v8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)(v18 + 8);
    *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
    *(void *)(v17 + 8) = v19;
  }
  return a1;
}

uint64_t sub_10016180C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100161818(uint64_t a1, uint64_t a2)
{
  sub_100161890(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t sub_100161890(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10016189C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10016180C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 9 + a1) & ~v10;
  uint64_t v12 = (v10 + 9 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 48);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  char v16 = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  *(unsigned char *)(v14 + 16) = v16;
  return a1;
}

uint64_t sub_10016196C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10016180C(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_100161890(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 9 + a1) & ~v12;
  uint64_t v14 = (v12 + 9 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15 + v14;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  v16 &= 0xFFFFFFFFFFFFFFF8;
  v17 &= 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 16);
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(unsigned char *)(v16 + 16) = v18;
  return a1;
}

uint64_t sub_100161A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 9 + a1) & ~v6;
  uint64_t v8 = (v6 + 9 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)v11;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  char v12 = *(unsigned char *)(v11 + 16);
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(unsigned char *)(v10 + 16) = v12;
  return a1;
}

uint64_t sub_100161AFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_100161890(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 9 + a1) & ~v12;
  uint64_t v14 = ((unint64_t)a2 + v12 + 9) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 24);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15 + v14;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  v16 &= 0xFFFFFFFFFFFFFFF8;
  v17 &= 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 16);
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(unsigned char *)(v16 + 16) = v18;
  return a1;
}

uint64_t sub_100161BC4(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 9) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100161D34);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((v6 + 9) & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 > 0xFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 9] & ~v6);
  }
  unsigned int v17 = a1[8];
  if (v17 > 1) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void sub_100161D48(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((v9 + 9) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 > 0xFE)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 9] & ~v9;
              double v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else if (a2 > 0xFE)
            {
              a1[8] = 0;
              *(void *)a1 = a2 - 255;
            }
            else
            {
              a1[8] = -(char)a2;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x100161F6CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Pin()
{
  return sub_1000684BC();
}

uint64_t sub_100161FAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100161FF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PinStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100162104);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PinStyle()
{
  return &type metadata for PinStyle;
}

unint64_t sub_100162140()
{
  unint64_t result = qword_100521C48;
  if (!qword_100521C48)
  {
    sub_10000F69C(&qword_100521C50);
    sub_1001621E0();
    sub_100013AA8(&qword_100521C98, &qword_100521CA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521C48);
  }
  return result;
}

unint64_t sub_1001621E0()
{
  unint64_t result = qword_100521C58;
  if (!qword_100521C58)
  {
    sub_10000F69C(&qword_100521C60);
    sub_100162280();
    sub_100013AA8(&qword_100521C88, &qword_100521C90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521C58);
  }
  return result;
}

unint64_t sub_100162280()
{
  unint64_t result = qword_100521C68;
  if (!qword_100521C68)
  {
    sub_10000F69C(&qword_100521C70);
    sub_100013AA8(&qword_100521C78, &qword_100521C80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521C68);
  }
  return result;
}

uint64_t sub_100162320()
{
  return sub_100013AA8(&qword_100521CA8, &qword_100521CB0);
}

unint64_t sub_100162360()
{
  unint64_t result = qword_100521CB8;
  if (!qword_100521CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100521CB8);
  }
  return result;
}

void sub_1001623B4(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (void *)AVMetadataMachineReadableCodeObject.corners.getter();
  [a1 time];
  double Seconds = CMTimeGetSeconds(&time);
  unint64_t v6 = v4[2];
  if (!v6)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v6 == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v6 >= 4)
  {
    double v31 = Seconds;
    uint64_t v7 = v4[4];
    uint64_t v8 = v4[5];
    uint64_t v9 = v4[6];
    uint64_t v10 = v4[7];
    uint64_t v11 = v4[10];
    uint64_t v12 = v4[11];
    uint64_t v14 = v4[8];
    uint64_t v13 = v4[9];
    swift_bridgeObjectRelease();
    id v15 = [a1 basicDescriptor];
    if (v15)
    {
      unsigned int v16 = v15;
      uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      AnyHashable.init<A>(_:)();
      if (*(void *)(v17 + 16) && (unint64_t v18 = sub_10032B058((uint64_t)&time), (v19 & 1) != 0))
      {
        sub_1000A7FD8(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v33);
      }
      else
      {
        long long v33 = 0u;
        long long v34 = 0u;
      }
      sub_100046BF0((uint64_t)&time);
      if (*((void *)&v34 + 1))
      {
        if (swift_dynamicCast())
        {
          Swift::String v20 = Data.base64EncodedString(options:)(0);
          uint64_t countAndFlagsBits = v20._countAndFlagsBits;
          object = v20._object;
          sub_100038B34(0x61746144776152, 0xE700000000000000);
          swift_bridgeObjectRelease();
LABEL_17:
          id v26 = [self detectedCodeWithMachineReadableObject:a1];
          UUID.init()();
          type metadata accessor for BCSDetectedCodeContainer();
          uint64_t v27 = swift_allocObject();
          *(void *)(v27 + 16) = v26;
          *(void *)(v27 + 24) = 0;
          uint64_t v28 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(a2 + v28[5]) = 1065353216;
          long long v29 = (void *)(a2 + v28[6]);
          *long long v29 = v7;
          v29[1] = v8;
          v29[2] = v9;
          v29[3] = v10;
          v29[4] = v11;
          v29[5] = v12;
          v29[6] = v14;
          v29[7] = v13;
          uint64_t v30 = (uint64_t *)(a2 + v28[7]);
          *uint64_t v30 = countAndFlagsBits;
          v30[1] = (uint64_t)object;
          *(void *)(a2 + v28[8]) = 0x3FF921FB54442D18;
          *(double *)(a2 + v28[9]) = v31;
          *(void *)(a2 + v28[10]) = v27;
          return;
        }
      }
      else
      {
        sub_10000FBD8((uint64_t)&v33, &qword_10051B448);
      }
      swift_bridgeObjectRelease();
    }
    id v23 = [a1 stringValue:v31];
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      object = v25;
    }
    else
    {
      object = (void *)0xE500000000000000;
      uint64_t countAndFlagsBits = 0x7974706D65;
    }
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1001626B0()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_1000EEA28(v0, qword_100521CC0);
  sub_10000F378(v0, (uint64_t)qword_100521CC0);
  return UUID.init()();
}

void sub_1001626FC()
{
  v8.origin.x = 0.0;
  v8.origin.y = 0.0;
  v8.size.width = 0.0;
  v8.size.height = 0.0;
  CGFloat MinX = CGRectGetMinX(v8);
  v9.origin.x = 0.0;
  v9.origin.y = 0.0;
  v9.size.width = 0.0;
  v9.size.height = 0.0;
  CGFloat MinY = CGRectGetMinY(v9);
  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.width = 0.0;
  v10.size.height = 0.0;
  CGFloat MaxX = CGRectGetMaxX(v10);
  v11.origin.x = 0.0;
  v11.origin.y = 0.0;
  v11.size.width = 0.0;
  v11.size.height = 0.0;
  CGFloat v3 = CGRectGetMinY(v11);
  v12.origin.x = 0.0;
  v12.origin.y = 0.0;
  v12.size.width = 0.0;
  v12.size.height = 0.0;
  CGFloat v4 = CGRectGetMinX(v12);
  v13.origin.x = 0.0;
  v13.origin.y = 0.0;
  v13.size.width = 0.0;
  v13.size.height = 0.0;
  CGFloat MaxY = CGRectGetMaxY(v13);
  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  v14.size.width = 0.0;
  v14.size.height = 0.0;
  CGFloat v6 = CGRectGetMaxX(v14);
  v15.origin.x = 0.0;
  v15.origin.y = 0.0;
  v15.size.width = 0.0;
  v15.size.height = 0.0;
  CGFloat v7 = CGRectGetMaxY(v15);
  qword_100521CD8 = *(void *)&MinX;
  unk_100521CE0 = *(void *)&MinY;
  qword_100521CE8 = *(void *)&MaxX;
  unk_100521CF0 = *(void *)&v3;
  qword_100521CF8 = *(void *)&v4;
  unk_100521D00 = *(void *)&MaxY;
  qword_100521D08 = *(void *)&v6;
  unk_100521D10 = *(void *)&v7;
}

void sub_100162804()
{
  qword_100521D18 = 0xFFF0000000000000;
}

void sub_100162814()
{
  unint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v4 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 24);
    if (!v2 || (Hasher._combine(_:)(1u), (CGFloat v3 = *(void **)(v2 + 16)) == 0))
    {
      Hasher._combine(_:)(0);
      return;
    }
    Hasher._combine(_:)(1u);
    swift_retain();
    id v4 = v3;
    NSObject.hash(into:)();
    swift_release();
  }
}

uint64_t sub_1001628EC(void *a1)
{
  uint64_t v4 = sub_10000F214(&qword_100522148);
  uint64_t v9 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  CGFloat v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 24) = 0;
  sub_10000F3B0(a1, a1[3]);
  sub_100167508();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_10000F214(&qword_100522158);
    sub_10016755C(&qword_100522160, &qword_100522168);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v4);
    *(void *)(v1 + 24) = v10;
    swift_release();
    *(void *)(v1 + 16) = 0;
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return v1;
}

uint64_t sub_100162AFC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_100522170);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  CGFloat v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100167508();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = *(void *)(v2 + 24);
  sub_10000F214(&qword_100522158);
  sub_10016755C(&qword_100522178, &qword_100522180);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int sub_100162C88()
{
  return Hasher._finalize()();
}

uint64_t sub_100162CE8()
{
  return String.hash(into:)();
}

Swift::Int sub_100162D0C()
{
  return Hasher._finalize()();
}

uint64_t sub_100162D68@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E5880, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100162DBC(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_100162DE4()
{
  return 0x416465646F636564;
}

uint64_t sub_100162E08@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E58B8, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100162E60(uint64_t a1)
{
  unint64_t v2 = sub_100167508();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100162E9C(uint64_t a1)
{
  unint64_t v2 = sub_100167508();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100162ED8()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BCSDetectedCodeContainer()
{
  return self;
}

Swift::Int sub_100162F3C()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 24);
    if (!v3 || (Hasher._combine(_:)(1u), (uint64_t v4 = *(void **)(v3 + 16)) == 0))
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    Hasher._combine(_:)(1u);
    swift_retain();
    id v2 = v4;
    NSObject.hash(into:)();
    swift_release();
  }

  return Hasher._finalize()();
}

BOOL sub_100162FF4(uint64_t *a1, uint64_t *a2)
{
  return sub_100167438(*a1, *a2);
}

Swift::Int sub_100163000()
{
  return sub_100162F3C();
}

void sub_100163024()
{
}

Swift::Int sub_100163048()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(void **)(v1 + 16);
  if (v2)
  {
    id v3 = v2;
    NSObject.hash(into:)();
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 24);
    if (!v4 || (Hasher._combine(_:)(1u), (Swift::Int v5 = *(void **)(v4 + 16)) == 0))
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    Hasher._combine(_:)(1u);
    swift_retain();
    id v3 = v5;
    NSObject.hash(into:)();
    swift_release();
  }

  return Hasher._finalize()();
}

uint64_t sub_100163100@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100164784(a1, (uint64_t (*)(uint64_t))sub_1001628EC, a2);
}

uint64_t sub_100163130(void *a1)
{
  return sub_100162AFC(a1);
}

uint64_t sub_100163154(void *a1)
{
  uint64_t v3 = v1;
  v14[1] = *(void *)v1;
  uint64_t v5 = sub_10000F214(&qword_100522188);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  sub_10000F3B0(a1, a1[3]);
  sub_1001675F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    swift_deallocPartialClassInstance();
  }
  else
  {
    char v16 = 0;
    *(void *)(v1 + 24) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v1 + 32) = v10;
    char v15 = 1;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)(v3 + 40) = v11;
    *(void *)(v3 + 48) = v13;
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t sub_100163370(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_100522198);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_1001675F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001634D0(char *a1, char *a2)
{
  return sub_1000C35B8(*a1, *a2);
}

Swift::Int sub_1001634DC()
{
  return Hasher._finalize()();
}

uint64_t sub_100163570()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001635F0()
{
  return Hasher._finalize()();
}

uint64_t sub_100163680@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1004E58F0;
  return sub_100164DB8(v2, a1, a2);
}

void sub_10016368C(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x63496E6F69746361;
  if (*v1) {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x80000001004246C0;
  if (!*v1) {
    unint64_t v3 = 0xEE00656D614E6E6FLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1001636DC()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x63496E6F69746361;
  }
}

uint64_t sub_100163728@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1004E58F0;
  return sub_100164EB4(a1, v2, a2);
}

uint64_t sub_100163734(uint64_t a1)
{
  unint64_t v2 = sub_1001675F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100163770(uint64_t a1)
{
  unint64_t v2 = sub_1001675F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001637AC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BCSActionContainer()
{
  return self;
}

uint64_t *sub_100163818(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    uint64_t v9 = (_OWORD *)((char *)a1 + v8);
    uint64_t v10 = (_OWORD *)((char *)a2 + v8);
    long long v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    long long v12 = v10[3];
    void v9[2] = v10[2];
    v9[3] = v12;
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    char v15 = (uint64_t *)((char *)a1 + v13);
    char v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *char v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100163928(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001639A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  char v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100163A60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  v8[6] = v9[6];
  v8[7] = v9[7];
  uint64_t v10 = a3[7];
  long long v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100163B6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100163C20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  return a1;
}

uint64_t sub_100163CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100163CF8);
}

uint64_t sub_100163CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100163D10);
}

uint64_t type metadata accessor for StreamingTextDetectorResult(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100521EE0);
}

uint64_t sub_100163D34()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100163DF0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(_DWORD *)((char *)v4 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    uint64_t v9 = (_OWORD *)((char *)v4 + v8);
    long long v10 = (_OWORD *)((char *)a2 + v8);
    long long v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    long long v12 = v10[3];
    void v9[2] = v10[2];
    v9[3] = v12;
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (uint64_t *)((char *)v4 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v18 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100163F10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_100163F98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v17 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_10016406C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  v8[6] = v9[6];
  v8[7] = v9[7];
  uint64_t v10 = a3[7];
  long long v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10016419C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  return a1;
}

uint64_t sub_100164258(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_release();
  return a1;
}

uint64_t sub_100164334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100164348);
}

uint64_t sub_10016434C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100164410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100164424);
}

uint64_t sub_100164428(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for StreamingBarcodeDetectorResult(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100521F80);
}

uint64_t sub_100164508()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001645D0(void **a1, void **a2)
{
  return sub_10016733C(*a1, *a2);
}

Swift::Int sub_1001645DC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void **)(v1 + 16);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    id v3 = v2;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_100164650()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1001646E4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(void **)(v1 + 16);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    id v3 = v2;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100164754@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100164784(a1, (uint64_t (*)(uint64_t))sub_100163154, a2);
}

uint64_t sub_100164784@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X4>, uint64_t *a3@<X8>)
{
  uint64_t v7 = swift_allocObject();
  uint64_t result = a2(a1);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t sub_1001647EC(void *a1)
{
  return sub_100163370(a1);
}

uint64_t sub_100164810(void *a1, unint64_t a2)
{
  uint64_t v5 = sub_10000F214(&qword_100522260);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100168F40();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!(a2 >> 62))
  {
    LOBYTE(v14) = 0;
    swift_retain();
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v2)
    {
      uint64_t v14 = a2;
      HIBYTE(v13) = 1;
      type metadata accessor for BCSDetectedCodeContainer();
      sub_100165DD4(&qword_100522268, v11, (void (*)(uint64_t))type metadata accessor for BCSDetectedCodeContainer);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    goto LABEL_8;
  }
  if (a2 >> 62 == 1)
  {
    uint64_t v9 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    LOBYTE(v14) = 0;
    swift_retain();
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v2)
    {
      uint64_t v14 = v9;
      HIBYTE(v13) = 1;
      type metadata accessor for BCSActionContainer();
      sub_100165DD4(&qword_100522180, v10, (void (*)(uint64_t))type metadata accessor for BCSActionContainer);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
LABEL_8:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_release();
  }
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100164AD0(uint64_t a1, unint64_t a2)
{
  if (!(a2 >> 62))
  {
    Hasher._combine(_:)(1uLL);
    uint64_t v4 = *(void **)(a2 + 16);
    if (v4) {
      goto LABEL_6;
    }
    uint64_t v5 = *(void *)(a2 + 24);
    if (v5)
    {
      Hasher._combine(_:)(1u);
      uint64_t v6 = *(void **)(v5 + 16);
      if (v6)
      {
        Hasher._combine(_:)(1u);
        swift_retain();
        swift_retain();
        id v7 = v6;
        NSObject.hash(into:)();
        swift_release();
        goto LABEL_7;
      }
    }
LABEL_14:
    Hasher._combine(_:)(0);
    return;
  }
  if (a2 >> 62 != 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  uint64_t v3 = a2 & 0x3FFFFFFFFFFFFFFFLL;
  Hasher._combine(_:)(2uLL);
  uint64_t v4 = *(void **)(v3 + 16);
  if (!v4) {
    goto LABEL_14;
  }
  Hasher._combine(_:)(1u);
LABEL_6:
  swift_retain();
  id v7 = v4;
  NSObject.hash(into:)();
LABEL_7:
  swift_release();
}

uint64_t sub_100164C08(char *a1, char *a2)
{
  return sub_1000C3504(*a1, *a2);
}

Swift::Int sub_100164C14()
{
  return Hasher._finalize()();
}

uint64_t sub_100164CA4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100164D20()
{
  return Hasher._finalize()();
}

uint64_t sub_100164DAC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1004E5940;
  return sub_100164DB8(v2, a1, a2);
}

uint64_t sub_100164DB8@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_100164E14(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65756C6156776172;
  if (*v1) {
    uint64_t v2 = 0x746169636F737361;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xEF65756C61566465;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100164E60()
{
  if (*v0) {
    return 0x746169636F737361;
  }
  else {
    return 0x65756C6156776172;
  }
}

uint64_t sub_100164EA8@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1004E5940;
  return sub_100164EB4(a1, v2, a2);
}

uint64_t sub_100164EB4@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t sub_100164F14(uint64_t a1)
{
  unint64_t v2 = sub_100168F40();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100164F50(uint64_t a1)
{
  unint64_t v2 = sub_100168F40();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100164F8C(unint64_t *a1, unint64_t *a2)
{
  return sub_100167748(*a1, *a2);
}

Swift::Int sub_100164F98()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100164AD0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_100164FE0(uint64_t a1)
{
  sub_100164AD0(a1, *v1);
}

Swift::Int sub_100164FE8()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100164AD0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t sub_10016502C@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_1001686DC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100165058(void *a1)
{
  return sub_100164810(a1, *v1);
}

void sub_100165074()
{
  type metadata accessor for UUID();
  sub_100165DD4((unint64_t *)&qword_100524E40, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v1 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
  if ((*(_DWORD *)(v0 + v1[5]) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = *(_DWORD *)(v0 + v1[5]);
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  unint64_t v3 = (Swift::UInt64 *)(v0 + v1[6]);
  Swift::UInt64 v4 = v3[1];
  Swift::UInt64 v5 = v3[2];
  Swift::UInt64 v6 = v3[3];
  Swift::UInt64 v7 = v3[4];
  Swift::UInt64 v8 = v3[5];
  Swift::UInt64 v9 = v3[6];
  Swift::UInt64 v26 = v3[7];
  if ((*v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *v3;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v4;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v5;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v6;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v7;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v8;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = v9;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  if ((v26 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = v26;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*(void *)(v0 + v1[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = *(void *)(v0 + v1[8]);
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((*(void *)(v0 + v1[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = *(void *)(v0 + v1[9]);
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  unint64_t v20 = *(void *)(v0 + v1[10]);
  if (!(v20 >> 62))
  {
    Hasher._combine(_:)(1uLL);
    id v23 = *(void **)(v20 + 16);
    if (v23)
    {
      swift_retain();
      id v22 = v23;
      goto LABEL_40;
    }
    uint64_t v24 = *(void *)(v20 + 24);
    if (v24)
    {
      Hasher._combine(_:)(1u);
      char v25 = *(void **)(v24 + 16);
      if (v25)
      {
        Hasher._combine(_:)(1u);
        swift_retain();
        swift_retain();
        id v27 = v25;
        NSObject.hash(into:)();
        swift_release();
        goto LABEL_41;
      }
    }
LABEL_48:
    Hasher._combine(_:)(0);
    return;
  }
  if (v20 >> 62 != 1)
  {
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(2uLL);
  uint64_t v21 = *(void **)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
  if (!v21) {
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_retain();
  id v22 = v21;
LABEL_40:
  id v27 = v22;
  NSObject.hash(into:)();
LABEL_41:
  swift_release();
}

uint64_t sub_10016534C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_1005221D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt64 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100167B20();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  type metadata accessor for UUID();
  sub_100165DD4(&qword_10051A048, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    Swift::UInt64 v9 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
    LOBYTE(v16) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    Swift::UInt64 v10 = (long long *)(v3 + v9[6]);
    long long v11 = v10[1];
    long long v16 = *v10;
    long long v17 = v11;
    long long v12 = v10[3];
    long long v18 = v10[2];
    long long v19 = v12;
    char v15 = 2;
    sub_100167ACC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v16 = *(void *)(v3 + v9[8]);
    char v15 = 4;
    sub_100107C48();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v16 = *(void *)(v3 + v9[10]);
    char v15 = 6;
    sub_100167C90();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016563C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000F214(&qword_1005221B8);
  uint64_t v28 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt64 v8 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v8);
  Swift::UInt64 v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100167B20();
  uint64_t v32 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  Swift::UInt64 v26 = a1;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v29;
  LOBYTE(v33) = 0;
  sub_100165DD4(&qword_10051A028, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  Swift::UInt64 v13 = v30;
  uint64_t v14 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v13, v4);
  LOBYTE(v33) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(_DWORD *)(v11 + v8[5]) = v15;
  char v37 = 2;
  sub_100167A78();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v28;
  long long v17 = (_OWORD *)(v11 + v8[6]);
  long long v18 = v34;
  *long long v17 = v33;
  v17[1] = v18;
  long long v19 = v36;
  v17[2] = v35;
  v17[3] = v19;
  LOBYTE(v33) = 3;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = (uint64_t *)(v11 + v8[7]);
  *uint64_t v21 = v20;
  v21[1] = v22;
  char v37 = 4;
  sub_100107BF4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v11 + v8[8]) = v33;
  LOBYTE(v33) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v11 + v8[9]) = v23;
  char v37 = 6;
  sub_100167B74();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v32, v14);
  *(void *)(v11 + v8[10]) = v33;
  sub_100167BC8(v11, v27, type metadata accessor for StreamingBarcodeDetectorResult);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v26);
  return sub_100167C30(v11, type metadata accessor for StreamingBarcodeDetectorResult);
}

uint64_t sub_100165B2C()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E656469666E6F63;
      break;
    case 2:
      uint64_t result = 0x7372656E726F63;
      break;
    case 3:
      uint64_t result = 0x6C6562616CLL;
      break;
    case 4:
      uint64_t result = 0x6E6F697461746F72;
      break;
    case 5:
      uint64_t result = 0x6D617473656D6974;
      break;
    case 6:
      uint64_t result = 0x4165646F63726162;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100165C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100168978(a1, a2);
  *a3 = result;
  return result;
}

void sub_100165C48(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100165C54(uint64_t a1)
{
  unint64_t v2 = sub_100167B20();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100165C90(uint64_t a1)
{
  unint64_t v2 = sub_100167B20();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100165CD8(uint64_t a1, uint64_t a2)
{
  return sub_1001670A4(a1, a2, (void (*)(unsigned char *))sub_100165074);
}

Swift::Int sub_100165CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100167108(a1, a2, a3, (void (*)(unsigned char *))sub_100165074);
}

uint64_t sub_100165D0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016563C(a1, a2);
}

uint64_t sub_100165D24(void *a1)
{
  return sub_10016534C(a1);
}

uint64_t sub_100165D3C()
{
  return sub_100165DD4(&qword_100521FD0, 255, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
}

uint64_t sub_100165D88()
{
  return sub_100165DD4((unint64_t *)&qword_100524E40, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_100165DD4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100165E1C(void *a1)
{
  a1[1] = sub_100165DD4(&qword_100522060, 255, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
  a1[2] = sub_100165DD4(&qword_100522068, 255, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
  a1[3] = sub_100165DD4(&qword_100522070, 255, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
  uint64_t result = sub_100165DD4(&qword_100522078, 255, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
  a1[4] = result;
  return result;
}

uint64_t sub_100165F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CVDetection();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v8);
  Swift::UInt64 v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100167BC8(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
  if (swift_getEnumCaseMultiPayload() - 3 > 1)
  {
    sub_100167C30((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  else
  {
    sub_100167CE4((uint64_t)v7, (uint64_t)v10);
    unint64_t v11 = *(void *)&v10[*(int *)(v8 + 40)];
    swift_retain();
    sub_100167C30((uint64_t)v10, type metadata accessor for StreamingBarcodeDetectorResult);
    if (v11 >> 62 == 1)
    {
      sub_1001660E8(a1, v11 & 0x3FFFFFFFFFFFFFFFLL, a2);
      return swift_release();
    }
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
}

uint64_t sub_1001660E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CVDetection();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  uint64_t v13 = (int *)(v12 - 8);
  __chkstk_darwin(v12);
  int v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v15, v4, v16);
  long long v17 = (_OWORD *)(v4 + v13[8]);
  long long v18 = (uint64_t *)(v4 + v13[9]);
  uint64_t v19 = *(void *)(v4 + v13[10]);
  uint64_t v20 = *v18;
  uint64_t v21 = v18[1];
  uint64_t v22 = *(void *)(v4 + v13[11]);
  *(_DWORD *)&v15[v13[7]] = *(_DWORD *)(v4 + v13[7]);
  uint64_t v23 = &v15[v13[8]];
  long long v24 = v17[1];
  *(_OWORD *)uint64_t v23 = *v17;
  *((_OWORD *)v23 + 1) = v24;
  long long v25 = v17[3];
  *((_OWORD *)v23 + 2) = v17[2];
  *((_OWORD *)v23 + 3) = v25;
  Swift::UInt64 v26 = &v15[v13[9]];
  *(void *)Swift::UInt64 v26 = v20;
  *((void *)v26 + 1) = v21;
  *(void *)&v15[v13[10]] = v19;
  *(void *)&v15[v13[11]] = v22;
  *(void *)&v15[v13[12]] = a2 | 0x4000000000000000;
  sub_100167BC8(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CVDetection);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 3)
  {
    sub_100167CE4((uint64_t)v15, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a3, 0, 1, v8);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100167C30((uint64_t)v15, type metadata accessor for StreamingBarcodeDetectorResult);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
  }
  return sub_100167C30((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

void sub_1001663AC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    uint64_t v26 = type metadata accessor for CVDetection();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v14, 1, 1, v26);
    a4(v14);
    goto LABEL_5;
  }
  v27[1] = a6;
  type metadata accessor for BCSActionContainer();
  int v15 = (void *)swift_allocObject();
  v15[2] = a1;
  id v16 = a1;
  id v17 = [v16 actionIcon];
  id v18 = sub_100167D48(v17);

  if (v18)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    v15[3] = v19;
    v15[4] = v21;
    id v22 = [v16 shortDescription];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    v15[5] = v23;
    v15[6] = v25;
    *(void *)(a3 + 24) = v15;
    swift_retain();
    swift_release();
    sub_1001660E8(a7, (uint64_t)v15, (uint64_t)v14);
    a4(v14);

    swift_release();
LABEL_5:
    sub_10000FBD8((uint64_t)v14, &qword_10051CB10);
    return;
  }
  __break(1u);
}

void sub_1001665AC()
{
  type metadata accessor for UUID();
  sub_100165DD4((unint64_t *)&qword_100524E40, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
  if ((*(_DWORD *)(v0 + v1[5]) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = *(_DWORD *)(v0 + v1[5]);
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  uint64_t v3 = (Swift::UInt64 *)(v0 + v1[6]);
  Swift::UInt64 v4 = v3[1];
  Swift::UInt64 v5 = v3[2];
  Swift::UInt64 v6 = v3[3];
  Swift::UInt64 v7 = v3[4];
  Swift::UInt64 v8 = v3[5];
  Swift::UInt64 v9 = v3[6];
  Swift::UInt64 v20 = v3[7];
  if ((*v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *v3;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v4;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v5;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v6;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v7;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v8;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = v9;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = v20;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*(void *)(v0 + v1[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = *(void *)(v0 + v1[8]);
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((*(void *)(v0 + v1[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = *(void *)(v0 + v1[9]);
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
}

uint64_t sub_100166748(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_1005221B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt64 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100167A24();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  type metadata accessor for UUID();
  sub_100165DD4(&qword_10051A048, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for StreamingTextDetectorResult(0);
    LOBYTE(v16) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    Swift::UInt64 v10 = (long long *)(v3 + *(int *)(v9 + 24));
    long long v11 = v10[1];
    long long v16 = *v10;
    long long v17 = v11;
    long long v12 = v10[3];
    long long v18 = v10[2];
    long long v19 = v12;
    char v15 = 2;
    sub_100167ACC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v16 = *(void *)(v3 + *(int *)(v9 + 32));
    char v15 = 4;
    sub_100107C48();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001669F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v29 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000F214(&qword_1005221A0);
  uint64_t v27 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt64 v8 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v8);
  Swift::UInt64 v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100167A24();
  uint64_t v31 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  uint64_t v25 = a1;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v28;
  LOBYTE(v33) = 0;
  sub_100165DD4(&qword_10051A028, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  Swift::UInt64 v13 = v29;
  uint64_t v14 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v13, v4);
  LOBYTE(v33) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(_DWORD *)(v11 + v8[5]) = v15;
  char v32 = 2;
  sub_100167A78();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v16 = (_OWORD *)(v11 + v8[6]);
  long long v17 = v34;
  *long long v16 = v33;
  v16[1] = v17;
  long long v18 = v36;
  v16[2] = v35;
  v16[3] = v18;
  LOBYTE(v33) = 3;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  Swift::UInt64 v20 = (uint64_t *)(v11 + v8[7]);
  uint64_t *v20 = v19;
  v20[1] = v21;
  char v32 = 4;
  sub_100107BF4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v11 + v8[8]) = v33;
  LOBYTE(v33) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v14);
  *(void *)(v11 + v8[9]) = v23;
  sub_100167BC8(v11, v26, type metadata accessor for StreamingTextDetectorResult);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v25);
  return sub_100167C30(v11, type metadata accessor for StreamingTextDetectorResult);
}

uint64_t sub_100166EA4()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E656469666E6F63;
      break;
    case 2:
      uint64_t result = 0x7372656E726F63;
      break;
    case 3:
      uint64_t result = 0x6C6562616CLL;
      break;
    case 4:
      uint64_t result = 0x6E6F697461746F72;
      break;
    case 5:
      uint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100166F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100168CA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100166F98(uint64_t a1)
{
  unint64_t v2 = sub_100167A24();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100166FD4(uint64_t a1)
{
  unint64_t v2 = sub_100167A24();

  return CodingKey.debugDescription.getter(a1, v2);
}

float sub_100167010(uint64_t a1)
{
  return *(float *)(v1 + *(int *)(a1 + 20));
}

__n128 sub_10016701C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 24);
  long long v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(v3 + 32);
  long long v6 = *(_OWORD *)(v3 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t sub_100167038(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

double sub_100167070(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 32));
}

double sub_10016707C(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

Swift::Int sub_10016708C(uint64_t a1, uint64_t a2)
{
  return sub_1001670A4(a1, a2, (void (*)(unsigned char *))sub_1001665AC);
}

Swift::Int sub_1001670A4(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_1001670F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100167108(a1, a2, a3, (void (*)(unsigned char *))sub_1001665AC);
}

Swift::Int sub_100167108(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_10016714C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001669F4(a1, a2);
}

uint64_t sub_100167164(void *a1)
{
  return sub_100166748(a1);
}

uint64_t sub_10016717C()
{
  return sub_100165DD4(&qword_100522080, 255, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
}

uint64_t sub_1001671C8(void *a1)
{
  a1[1] = sub_100165DD4(&qword_100522110, 255, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
  a1[2] = sub_100165DD4(&qword_100522118, 255, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
  a1[3] = sub_100165DD4(&qword_100522120, 255, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
  uint64_t result = sub_100165DD4(&qword_100522128, 255, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
  a1[4] = result;
  return result;
}

uint64_t sub_1001672AC(uint64_t a1, uint64_t a2)
{
  return sub_100165DD4(&qword_100522130, a2, (void (*)(uint64_t))type metadata accessor for BCSActionContainer);
}

uint64_t sub_1001672F4(uint64_t a1, uint64_t a2)
{
  return sub_100165DD4(&qword_100522138, a2, (void (*)(uint64_t))type metadata accessor for BCSDetectedCodeContainer);
}

uint64_t sub_10016733C(void *a1, void *a2)
{
  long long v4 = (void *)a1[2];
  uint64_t v5 = (void *)a2[2];
  if (v4)
  {
    if (v5)
    {
      sub_10000F734(0, &qword_100522140);
      id v6 = v5;
      id v7 = v4;
      char v8 = static NSObject.== infix(_:_:)();

      if (v8) {
        goto LABEL_4;
      }
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_4:
  BOOL v9 = a1[3] == a2[3] && a1[4] == a2[4];
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
  {
    if (a1[5] == a2[5] && a1[6] == a2[6])
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

BOOL sub_100167438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 && (uint64_t v3 = *(void **)(a2 + 16)) != 0)
  {
    sub_10000F734(0, (unint64_t *)&qword_100518A40);
    id v4 = v2;
    id v5 = v3;
    char v6 = static NSObject.== infix(_:_:)();

    return v6 & 1;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 24);
    unint64_t v9 = *(void *)(a2 + 24);
    BOOL result = (v8 | v9) == 0;
    if (v8) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      swift_retain();
      uint64_t v11 = (void *)swift_retain();
      char v12 = sub_10016733C(v11, (void *)v9);
      swift_release();
      swift_release();
      return v12 & 1;
    }
  }
  return result;
}

unint64_t sub_100167508()
{
  unint64_t result = qword_100522150;
  if (!qword_100522150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522150);
  }
  return result;
}

uint64_t sub_10016755C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_100522158);
    sub_100165DD4(a2, v5, (void (*)(uint64_t))type metadata accessor for BCSActionContainer);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001675F0()
{
  unint64_t result = qword_100522190;
  if (!qword_100522190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522190);
  }
  return result;
}

BOOL sub_100167644(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for StreamingTextDetectorResult(0);
  if (*(float *)(a1 + *(int *)(v4 + 20)) != *(float *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = (int *)v4;
  char v6 = (_OWORD *)(a1 + *(int *)(v4 + 24));
  long long v7 = v6[3];
  v18[2] = v6[2];
  v18[3] = v7;
  long long v8 = v6[1];
  v18[0] = *v6;
  v18[1] = v8;
  unint64_t v9 = (_OWORD *)(a2 + *(int *)(v4 + 24));
  long long v10 = v9[3];
  v19[2] = v9[2];
  v19[3] = v10;
  long long v11 = v9[1];
  v19[0] = *v9;
  v19[1] = v11;
  if (!sub_1004027A4((double *)v18, (double *)v19)) {
    return 0;
  }
  uint64_t v12 = v5[7];
  uint64_t v13 = *(void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  int v15 = (void *)(a2 + v12);
  if (v13 == *v15 && v14 == v15[1]
    || (char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v16 & 1) != 0))
  {
    if (*(double *)(a1 + v5[8]) == *(double *)(a2 + v5[8])) {
      return *(double *)(a1 + v5[9]) == *(double *)(a2 + v5[9]);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100167748(unint64_t a1, unint64_t a2)
{
  if (!(a1 >> 62))
  {
    if (!(a2 >> 62))
    {
      swift_retain();
      swift_retain();
      BOOL v11 = sub_100167438(a1, a2);
      swift_release();
      swift_release();
      return v11;
    }
    return 0;
  }
  if (a1 >> 62 == 1)
  {
    if (a2 >> 62 == 1)
    {
      uint64_t v4 = (void *)(a1 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v5 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
      char v6 = *(void **)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      long long v7 = *(void **)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v6)
      {
        if (v7)
        {
          sub_10000F734(0, &qword_100522140);
          swift_retain();
          swift_retain();
          id v8 = v7;
          id v9 = v6;
          char v10 = static NSObject.== infix(_:_:)();

          if ((v10 & 1) == 0)
          {
LABEL_20:
            swift_release();
            swift_release();
            return 0;
          }
          goto LABEL_14;
        }
      }
      else if (!v7)
      {
        swift_retain();
        swift_retain();
LABEL_14:
        if ((v4[3] != v5[3] || v4[4] != v5[4]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_20;
        }
        if (v4[5] == v5[5] && v4[6] == v5[6])
        {
          swift_release();
          swift_release();
        }
        else
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_release();
          swift_release();
          if ((v13 & 1) == 0) {
            return 0;
          }
        }
        return 1;
      }
    }
  }
  else if (a2 == 0x8000000000000000)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1001678FC(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  if (*(float *)(a1 + *(int *)(v4 + 20)) != *(float *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = (int *)v4;
  char v6 = (_OWORD *)(a1 + *(int *)(v4 + 24));
  long long v7 = v6[3];
  v20[2] = v6[2];
  v20[3] = v7;
  long long v8 = v6[1];
  v20[0] = *v6;
  v20[1] = v8;
  id v9 = (_OWORD *)(a2 + *(int *)(v4 + 24));
  long long v10 = v9[3];
  v21[2] = v9[2];
  v21[3] = v10;
  long long v11 = v9[1];
  v21[0] = *v9;
  v21[1] = v11;
  if (!sub_1004027A4((double *)v20, (double *)v21)) {
    return 0;
  }
  uint64_t v12 = v5[7];
  uint64_t v13 = *(void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  int v15 = (void *)(a2 + v12);
  if ((v13 != *v15 || v14 != v15[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  if (*(double *)(a1 + v5[8]) != *(double *)(a2 + v5[8]) || *(double *)(a1 + v5[9]) != *(double *)(a2 + v5[9])) {
    return 0;
  }
  uint64_t v16 = v5[10];
  unint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a2 + v16);

  return sub_100167748(v17, v18);
}

unint64_t sub_100167A24()
{
  unint64_t result = qword_1005221A8;
  if (!qword_1005221A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005221A8);
  }
  return result;
}

unint64_t sub_100167A78()
{
  unint64_t result = qword_100529700;
  if (!qword_100529700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529700);
  }
  return result;
}

unint64_t sub_100167ACC()
{
  unint64_t result = qword_100529760;
  if (!qword_100529760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529760);
  }
  return result;
}

unint64_t sub_100167B20()
{
  unint64_t result = qword_1005221C0;
  if (!qword_1005221C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005221C0);
  }
  return result;
}

unint64_t sub_100167B74()
{
  unint64_t result = qword_1005221C8;
  if (!qword_1005221C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005221C8);
  }
  return result;
}

uint64_t sub_100167BC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100167C30(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100167C90()
{
  unint64_t result = qword_1005221D8;
  if (!qword_1005221D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005221D8);
  }
  return result;
}

uint64_t sub_100167CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_100167D48(void *a1)
{
  id v1 = a1;
  if (_UIImageIsSystemSymbol())
  {
    uint64_t v2 = _UIImageIdentityName();
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

unsigned char *storeEnumTagSinglePayload for StreamingBarcodeDetectorResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100167E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamingBarcodeDetectorResult.CodingKeys()
{
  return &type metadata for StreamingBarcodeDetectorResult.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for StreamingTextDetectorResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100167F74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamingTextDetectorResult.CodingKeys()
{
  return &type metadata for StreamingTextDetectorResult.CodingKeys;
}

ValueMetadata *type metadata accessor for BCSActionContainer.CodingKeys()
{
  return &type metadata for BCSActionContainer.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BCSDetectedCodeContainer.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10016805CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BCSDetectedCodeContainer.CodingKeys()
{
  return &type metadata for BCSDetectedCodeContainer.CodingKeys;
}

void *initializeBufferWithCopyOfBuffer for StreamingBarcodeDetectorResult.Action(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for StreamingBarcodeDetectorResult.Action()
{
  return swift_release();
}

void *assignWithCopy for StreamingBarcodeDetectorResult.Action(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for StreamingBarcodeDetectorResult.Action(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamingBarcodeDetectorResult.Action(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for StreamingBarcodeDetectorResult.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1001681FC(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_100168218(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_100168228(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for StreamingBarcodeDetectorResult.Action()
{
  return &type metadata for StreamingBarcodeDetectorResult.Action;
}

unint64_t sub_100168268()
{
  unint64_t result = qword_1005221E0;
  if (!qword_1005221E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005221E0);
  }
  return result;
}

unint64_t sub_1001682C0()
{
  unint64_t result = qword_1005221E8;
  if (!qword_1005221E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005221E8);
  }
  return result;
}

unint64_t sub_100168318()
{
  unint64_t result = qword_1005221F0;
  if (!qword_1005221F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005221F0);
  }
  return result;
}

unint64_t sub_100168370()
{
  unint64_t result = qword_1005221F8;
  if (!qword_1005221F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005221F8);
  }
  return result;
}

unint64_t sub_1001683C8()
{
  unint64_t result = qword_100522200;
  if (!qword_100522200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522200);
  }
  return result;
}

unint64_t sub_100168420()
{
  unint64_t result = qword_100522208;
  if (!qword_100522208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522208);
  }
  return result;
}

unint64_t sub_100168478()
{
  unint64_t result = qword_100522210;
  if (!qword_100522210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522210);
  }
  return result;
}

unint64_t sub_1001684D0()
{
  unint64_t result = qword_100522218;
  if (!qword_100522218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522218);
  }
  return result;
}

unint64_t sub_100168528()
{
  unint64_t result = qword_100522220;
  if (!qword_100522220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522220);
  }
  return result;
}

unint64_t sub_100168580()
{
  unint64_t result = qword_100522228;
  if (!qword_100522228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522228);
  }
  return result;
}

unint64_t sub_1001685D8()
{
  unint64_t result = qword_100522230;
  if (!qword_100522230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522230);
  }
  return result;
}

unint64_t sub_100168630()
{
  unint64_t result = qword_100522238;
  if (!qword_100522238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522238);
  }
  return result;
}

unint64_t sub_100168688()
{
  unint64_t result = qword_100522240;
  if (!qword_100522240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522240);
  }
  return result;
}

unint64_t sub_1001686DC(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_100522248);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = (unint64_t)sub_10000F3B0(a1, a1[3]);
  sub_100168F40();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    LOBYTE(v13) = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    if (v8 == 2)
    {
      type metadata accessor for BCSActionContainer();
      HIBYTE(v12) = 1;
      sub_100165DD4(&qword_100522168, v11, (void (*)(uint64_t))type metadata accessor for BCSActionContainer);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      unint64_t v7 = v13 | 0x4000000000000000;
    }
    else if (v8 == 1)
    {
      type metadata accessor for BCSDetectedCodeContainer();
      HIBYTE(v12) = 1;
      sub_100165DD4(&qword_100522258, v10, (void (*)(uint64_t))type metadata accessor for BCSDetectedCodeContainer);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      unint64_t v7 = v13;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      unint64_t v7 = 0x8000000000000000;
    }
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_100168978(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7372656E726F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xED0000656C676E41 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4165646F63726162 && a2 == 0xED00006E6F697463)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_100168CA0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7372656E726F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xED0000656C676E41 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t sub_100168F40()
{
  unint64_t result = qword_100522250;
  if (!qword_100522250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522250);
  }
  return result;
}

unsigned char *_s6Tamale18BCSActionContainerC10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100169060);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamingBarcodeDetectorResult.Action.CodingKeys()
{
  return &type metadata for StreamingBarcodeDetectorResult.Action.CodingKeys;
}

unint64_t sub_10016909C()
{
  unint64_t result = qword_100522270;
  if (!qword_100522270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522270);
  }
  return result;
}

unint64_t sub_1001690F4()
{
  unint64_t result = qword_100522278;
  if (!qword_100522278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522278);
  }
  return result;
}

unint64_t sub_10016914C()
{
  unint64_t result = qword_100522280;
  if (!qword_100522280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522280);
  }
  return result;
}

uint64_t sub_1001691B4()
{
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)UIView) init];
  *(void *)(v0 + 24) = [objc_allocWithZone((Class)type metadata accessor for SubjectLiftViewDelegate()) init];
  *(void *)(v0 + 32) = [objc_allocWithZone((Class)VKCImageAnalysisInteraction) init];
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale26SubjectLiftRenderViewModel_previousInput;
  uint64_t v2 = type metadata accessor for SubjectLiftRenderInput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  int v3 = *(void **)(v0 + 32);
  [v3 setWantsAutomaticContentsRectCalculation:0];
  [v3 set_inhibitSubjectDimmingAndLiftView:1];
  [v3 setDelegate:*(void *)(v0 + 24)];
  [*(id *)(v0 + 16) addInteraction:v3];
  return v0;
}

uint64_t sub_1001692CC(uint64_t a1)
{
  v2[46] = a1;
  v2[47] = v1;
  v2[48] = sub_10000F214(&qword_100522460);
  v2[49] = swift_task_alloc();
  sub_10000F214(&qword_100522468);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SubjectLiftRenderInput(0);
  v2[55] = v3;
  v2[56] = *(void *)(v3 - 8);
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[59] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[60] = v5;
  v2[61] = v4;
  return _swift_task_switch(sub_100169468, v5, v4);
}

uint64_t sub_100169468()
{
  uint64_t v1 = v0[55];
  uint64_t v2 = v0[56];
  uint64_t v3 = v0[54];
  sub_10016B6D4(v0[46], v3);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v4(v3, 1, v1) == 1)
  {
    uint64_t v5 = v0[55];
    uint64_t v6 = v0[56];
    uint64_t v7 = v0[54];
    uint64_t v8 = v0[51];
    uint64_t v9 = v0[47];
    swift_release();
    sub_10000FBD8(v7, &qword_100522468);
    [*(id *)(v9 + 32) setActiveInteractionTypes:0];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v8, 1, 1, v5);
    uint64_t v10 = v9 + OBJC_IVAR____TtC6Tamale26SubjectLiftRenderViewModel_previousInput;
    swift_beginAccess();
    sub_10000F5DC(v8, v10, &qword_100522468);
    swift_endAccess();
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v34 = (uint64_t (*)(void))v0[1];
    return v34();
  }
  uint64_t v11 = v0[47];
  sub_10016DE88(v0[54], v0[58], type metadata accessor for SubjectLiftRenderInput);
  uint64_t v12 = *(void **)(v11 + 32);
  v0[62] = v12;
  id v13 = [v12 view];
  v0[63] = v13;
  if (!v13)
  {
    sub_10016B678(v0[58]);
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  uint64_t v14 = v13;
  id v15 = [v13 window];
  v0[64] = v15;
  if (!v15)
  {
    sub_10016B678(v0[58]);

    goto LABEL_15;
  }
  uint64_t v48 = v15;
  id v50 = v12;
  uint64_t v17 = v0[55];
  uint64_t v16 = v0[56];
  uint64_t v18 = v0[53];
  uint64_t v19 = v0[48];
  uint64_t v20 = v0[49];
  uint64_t v21 = v0[47];
  sub_10016DC90(v0[58], v18, type metadata accessor for SubjectLiftRenderInput);
  uint64_t v49 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56);
  v49(v18, 0, 1, v17);
  uint64_t v22 = v21 + OBJC_IVAR____TtC6Tamale26SubjectLiftRenderViewModel_previousInput;
  swift_beginAccess();
  uint64_t v23 = *(int *)(v19 + 48);
  uint64_t v24 = v22;
  uint64_t v25 = v20 + v23;
  sub_10016B6D4(v18, v20);
  sub_10016B6D4(v22, v25);
  unsigned int v26 = v4(v20, 1, v17);
  uint64_t v27 = v0[55];
  if (v26 == 1)
  {
    sub_10000FBD8(v0[53], &qword_100522468);
    if (v4(v25, 1, v27) == 1)
    {
      sub_10000FBD8(v0[49], &qword_100522468);
LABEL_14:
      sub_10016B678(v0[58]);

      goto LABEL_15;
    }
    goto LABEL_12;
  }
  sub_10016B6D4(v0[49], v0[52]);
  if (v4(v25, 1, v27) == 1)
  {
    uint64_t v28 = v0[52];
    sub_10000FBD8(v0[53], &qword_100522468);
    sub_10016B678(v28);
LABEL_12:
    sub_10000FBD8(v0[49], &qword_100522460);
    goto LABEL_19;
  }
  uint64_t v29 = v0[57];
  uint64_t v31 = v0[52];
  uint64_t v30 = v0[53];
  uint64_t v32 = v0[49];
  sub_10016DE88(v25, v29, type metadata accessor for SubjectLiftRenderInput);
  char v33 = sub_10016B43C(v31, v29);
  sub_10016B678(v29);
  sub_10000FBD8(v30, &qword_100522468);
  sub_10016B678(v31);
  sub_10000FBD8(v32, &qword_100522468);
  if (v33) {
    goto LABEL_14;
  }
LABEL_19:
  long long v36 = (void *)v0[58];
  uint64_t v37 = v0[55];
  uint64_t v38 = v0[50];
  uint64_t v39 = v0[51];
  uint64_t v40 = v0[47];
  sub_10016DC90((uint64_t)v36, v39, type metadata accessor for SubjectLiftRenderInput);
  v49(v39, 0, 1, v37);
  sub_10000FC34(v39, v38, &qword_100522468);
  swift_beginAccess();
  sub_10000F5DC(v38, v24, &qword_100522468);
  swift_endAccess();
  [v50 setAnalysis:*v36];
  [v50 setActiveInteractionTypes:8];
  uint64_t v41 = *(void *)(v40 + 24);
  sub_10000F578((uint64_t)(v36 + 1), (uint64_t)(v0 + 23));
  uint64_t v42 = v41 + OBJC_IVAR____TtC6Tamale23SubjectLiftViewDelegate_frame;
  swift_beginAccess();
  sub_10000F5DC((uint64_t)(v0 + 23), v42, &qword_100518A80);
  swift_endAccess();
  uint64_t v43 = (char *)v36 + *(int *)(v37 + 28);
  char v44 = v43[32];
  uint64_t v45 = v41 + OBJC_IVAR____TtC6Tamale23SubjectLiftViewDelegate_boundingBoxInImageCoordinates;
  long long v46 = *((_OWORD *)v43 + 1);
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v43;
  *(_OWORD *)(v45 + 16) = v46;
  *(unsigned char *)(v45 + 32) = v44;
  [v50 updateContentsRect];
  v0[2] = v0;
  v0[3] = sub_100169AB0;
  uint64_t v47 = swift_continuation_init();
  v0[28] = _NSConcreteStackBlock;
  v0[29] = 0x40000000;
  v0[30] = sub_1003088DC;
  v0[31] = &unk_1004EE260;
  v0[32] = v47;
  [v50 beginImageSubjectAnalysisIfNecessaryWithCompletion:];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100169AB0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 488);
  uint64_t v2 = *(void *)(*(void *)v0 + 480);
  return _swift_task_switch(sub_100169BB8, v2, v1);
}

uint64_t sub_100169BB8()
{
  uint64_t v1 = *(void **)(v0 + 496);
  uint64_t v2 = *(NSIndexSet **)(v0 + 464);
  *(_DWORD *)(v0 + 552) = *(_DWORD *)(*(void *)(v0 + 440) + 24);
  IndexSet._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  *(void *)(v0 + 520) = v3;
  *(void *)(v0 + 80) = v0;
  *(void *)(v0 + 120) = v0 + 360;
  *(void *)(v0 + 88) = sub_100169CE4;
  uint64_t v5 = swift_continuation_init();
  *(void *)(v0 + 144) = _NSConcreteStackBlock;
  *(void *)(v0 + 152) = 0x40000000;
  *(void *)(v0 + 160) = sub_10016A2B4;
  *(void *)(v0 + 168) = &unk_1004EE278;
  *(void *)(v0 + 176) = v5;
  [v1 loadImageSubjectWithIndexes:v4 completion:v0 + 144];
  return _swift_continuation_await(v0 + 80);
}

uint64_t sub_100169CE4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 488);
  uint64_t v2 = *(void *)(*(void *)v0 + 480);
  return _swift_task_switch(sub_100169DEC, v2, v1);
}

uint64_t sub_100169DEC()
{
  uint64_t v1 = *(void **)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 360);
  *(void *)(v0 + 528) = v2;

  if (v2)
  {
    uint64_t v3 = *(int *)(v0 + 552);
    uint64_t v4 = *(void *)(v0 + 464);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100169FD4;
    uint64_t v6 = *(void *)(v0 + 496);
    v5[10] = v4 + v3;
    v5[11] = v2;
    v5[8] = v4 + 8;
    v5[9] = v6;
    return _swift_task_switch(sub_10016B760, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v8 = *(void **)(v0 + 504);
    uint64_t v7 = *(void **)(v0 + 512);
    uint64_t v9 = *(void **)(v0 + 496);
    uint64_t v10 = *(void *)(v0 + 464);
    IndexSet._bridgeToObjectiveC()((NSIndexSet *)*(int *)(v0 + 552));
    uint64_t v12 = v11;
    [v9 highlightSubjectAtIndexSet:v11 showCallout:0 showBurst:0 burstPoint:1 animated:0.0];

    [v9 setWantsAutomaticContentsRectCalculation:0];
    sub_10016B678(v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_100169FD4(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 544) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 488);
  uint64_t v4 = *(void *)(v2 + 480);
  return _swift_task_switch(sub_10016A0FC, v4, v3);
}

uint64_t sub_10016A0FC()
{
  uint64_t v1 = *(void *)(v0 + 544);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 544);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = *(void (**)(uint64_t))(v3 + 40);
    if (v4)
    {
      uint64_t v5 = *(void *)(v0 + 528);
      swift_retain();
      v4(v5);
      sub_10000F478((uint64_t)v4);
      uint64_t v3 = *(void *)(v0 + 376);
    }
    uint64_t v6 = *(void (**)(void *))(v3 + 56);
    uint64_t v7 = *(void **)(v0 + 528);
    if (v6)
    {
      swift_retain();
      v6(v2);
      sub_10000F478((uint64_t)v6);
    }
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 528);
  }

  uint64_t v9 = *(void **)(v0 + 504);
  uint64_t v8 = *(void **)(v0 + 512);
  uint64_t v10 = *(void **)(v0 + 496);
  uint64_t v11 = *(void *)(v0 + 464);
  IndexSet._bridgeToObjectiveC()((NSIndexSet *)*(int *)(v0 + 552));
  id v13 = v12;
  [v10 highlightSubjectAtIndexSet:v12 showCallout:0 showBurst:0 burstPoint:1 animated:0.0];

  [v10 setWantsAutomaticContentsRectCalculation:0];
  sub_10016B678(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_10016A2B4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(*(void *)(v2 + 64) + 40);
  id v4 = a2;
  sub_10000FC34((uint64_t)&v6, v3, &qword_10051EF58);
  return swift_continuation_resume();
}

id sub_10016A318(void *a1, void *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  id v16 = [self clearColor];
  [v16 setFill];

  [a1 fillRect:0.0, 0.0, a3, a4];

  return [a2 drawInRect:a5, a6, a7, a8];
}

void sub_10016A3F4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_10016A440()
{
  sub_10000F478(*(void *)(v0 + 40));
  sub_10000F478(*(void *)(v0 + 56));
  sub_10000FBD8(v0 + OBJC_IVAR____TtC6Tamale26SubjectLiftRenderViewModel_previousInput, &qword_100522468);

  return swift_deallocClassInstance();
}

uint64_t sub_10016A4D4()
{
  return type metadata accessor for SubjectLiftRenderViewModel(0);
}

uint64_t type metadata accessor for SubjectLiftRenderViewModel(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_1005222B8);
}

void sub_10016A4FC()
{
  sub_10016A5AC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10016A5AC()
{
  if (!qword_1005222D0)
  {
    type metadata accessor for SubjectLiftRenderInput(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005222D0);
    }
  }
}

uint64_t type metadata accessor for SubjectLiftRenderInput(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100522420);
}

char *sub_10016A624(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 2) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(char *, char **, uint64_t))(v9 - 8);
    uint64_t v12 = v5;
    v11(a1 + 8, v8, v10);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = &a1[v13];
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = type metadata accessor for IndexSet();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = *(int *)(a3 + 28);
    uint64_t v18 = &a1[v17];
    uint64_t v19 = (uint64_t)a2 + v17;
    long long v20 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v20;
    v18[32] = *(unsigned char *)(v19 + 32);
  }
  return a1;
}

uint64_t sub_10016A768(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 1);

  _s6Tamale17AnyLocalizedErrorVwxx_0(v4);
  uint64_t v5 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_10016A7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v7 = a1 + 8;
  uint64_t v8 = a2 + 8;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  id v12 = v6;
  v11(v7, v8, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = *(int *)(a3 + 28);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  long long v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(unsigned char *)(v18 + 32) = *(unsigned char *)(v19 + 32);
  return a1;
}

uint64_t sub_10016A8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  sub_10000E558((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (long long *)(a2 + v13);
  long long v16 = *v15;
  long long v17 = v15[1];
  *(unsigned char *)(v14 + 32) = *((unsigned char *)v15 + 32);
  *(_OWORD *)uint64_t v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  return a1;
}

uint64_t sub_10016A9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  long long v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
  return a1;
}

uint64_t sub_10016AA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(unsigned char *)(v12 + 32) = *(unsigned char *)(v13 + 32);
  return a1;
}

uint64_t sub_10016AB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016AB54);
}

uint64_t sub_10016AB54(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for IndexSet();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10016AC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016AC18);
}

void *sub_10016AC18(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for IndexSet();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10016ACC0()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10016AD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for MainActor();
  v4[3] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[4] = v6;
  v4[5] = v5;
  return _swift_task_switch(sub_10016AE04, v6, v5);
}

uint64_t sub_10016AE04()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = v1 + *(int *)(type metadata accessor for SubjectLiftRenderUIView(0) + 20);
  id v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *id v3 = v0;
  v3[1] = sub_10016AEAC;
  return sub_1001692CC(v2);
}

uint64_t sub_10016AEAC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 32);
  return _swift_task_switch(sub_10016AFCC, v3, v2);
}

uint64_t sub_10016AFCC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_10016B02C()
{
  uint64_t v0 = (void *)sub_10016DFDC();

  return v0;
}

uint64_t sub_10016B058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_10016DC90(v3, (uint64_t)v6, type metadata accessor for SubjectLiftRenderUIView);
  type metadata accessor for MainActor();
  uint64_t v11 = static MainActor.shared.getter();
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  sub_10016DE88((uint64_t)v6, v13 + v12, type metadata accessor for SubjectLiftRenderUIView);
  sub_100064D5C((uint64_t)v9, (uint64_t)&unk_1005225D8, v13);
  return swift_release();
}

uint64_t sub_10016B218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10016E064(&qword_1005225E0);

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10016B298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10016E064(&qword_1005225E0);

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10016B318()
{
}

uint64_t sub_10016B35C@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  *a2 = static Alignment.center.getter();
  a2[1] = v6;
  uint64_t v7 = (uint64_t *)((char *)a2 + *(int *)(sub_10000F214(&qword_100522510) + 44));
  sub_10000F214(&qword_100522518);
  State.wrappedValue.getter();
  uint64_t v8 = v4 + a1[5];
  uint64_t v9 = (int *)type metadata accessor for SubjectLiftRenderUIView(0);
  sub_10016B6D4(v8, (uint64_t)v7 + v9[5]);
  uint64_t v10 = (uint64_t *)(v4 + a1[6]);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = (uint64_t *)(v4 + a1[7]);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  *uint64_t v7 = v19;
  long long v16 = (void *)((char *)v7 + v9[6]);
  *long long v16 = v12;
  v16[1] = v11;
  long long v17 = (void *)((char *)v7 + v9[7]);
  *long long v17 = v14;
  v17[1] = v15;
  swift_retain();
  return swift_retain();
}

uint64_t sub_10016B43C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SubjectLiftRenderInput(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v25 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v25 - v14;
  sub_100046CAC();
  char v16 = static NSObject.== infix(_:_:)();
  sub_10016DC90(a1, (uint64_t)v15, type metadata accessor for SubjectLiftRenderInput);
  sub_10016DC90(a2, (uint64_t)v12, type metadata accessor for SubjectLiftRenderInput);
  if ((v16 & 1) == 0)
  {
    sub_10016B678((uint64_t)v12);
    sub_10016B678((uint64_t)v15);
    sub_10016DC90(a1, (uint64_t)v9, type metadata accessor for SubjectLiftRenderInput);
    sub_10016DC90(a2, (uint64_t)v6, type metadata accessor for SubjectLiftRenderInput);
    goto LABEL_7;
  }
  char v17 = static IndexSet.== infix(_:_:)();
  sub_10016B678((uint64_t)v12);
  sub_10016B678((uint64_t)v15);
  sub_10016DC90(a1, (uint64_t)v9, type metadata accessor for SubjectLiftRenderInput);
  sub_10016DC90(a2, (uint64_t)v6, type metadata accessor for SubjectLiftRenderInput);
  if ((v17 & 1) == 0)
  {
LABEL_7:
    uint64_t v23 = 0;
    goto LABEL_8;
  }
  uint64_t v18 = *(int *)(v4 + 28);
  uint64_t v19 = (CGRect *)&v9[v18];
  int v20 = v9[v18 + 32];
  uint64_t v21 = &v6[v18];
  unsigned int v22 = v21[32];
  uint64_t v23 = v20 & v22;
  if ((v20 & 1) == 0 && (v22 & 1) == 0) {
    uint64_t v23 = CGRectEqualToRect(*v19, *(CGRect *)v21);
  }
LABEL_8:
  sub_10016B678((uint64_t)v6);
  sub_10016B678((uint64_t)v9);
  return v23;
}

uint64_t sub_10016B678(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SubjectLiftRenderInput(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10016B6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522468);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016B73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  return _swift_task_switch(sub_10016B760, 0, 0);
}

uint64_t sub_10016B760()
{
  *(void *)(v0 + 96) = type metadata accessor for MainActor();
  *(void *)(v0 + 104) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10016B7F8, v2, v1);
}

uint64_t sub_10016B7F8()
{
  uint64_t v1 = *(void **)(v0 + 72);
  swift_release();
  *(void *)(v0 + 112) = [v1 view];
  return _swift_task_switch(sub_10016B880, 0, 0);
}

uint64_t sub_10016B880()
{
  uint64_t v1 = (NSIndexSet *)v0[14];
  if (v1)
  {
    IndexSet._bridgeToObjectiveC()(v1);
    v0[15] = v2;
    v0[16] = static MainActor.shared.getter();
    uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10016B954, v4, v3);
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5(0);
  }
}

uint64_t sub_10016B954()
{
  uint64_t v1 = (void *)v0[15];
  uint64_t v2 = (void *)v0[9];
  swift_release();
  [v2 imageSubjectBoundsWithIndexes:v1];
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;

  v0[17] = v4;
  v0[18] = v6;
  v0[19] = v8;
  v0[20] = v10;
  return _swift_task_switch(sub_10016BA00, 0, 0);
}

uint64_t sub_10016BA00()
{
  *(void *)(v0 + 168) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10016BA8C, v2, v1);
}

uint64_t sub_10016BA8C()
{
  uint64_t v1 = (void *)v0[14];
  swift_release();
  [v1 bounds];
  v0[22] = v2;
  v0[23] = v3;
  v0[24] = v4;
  v0[25] = v5;
  return _swift_task_switch(sub_10016BB10, 0, 0);
}

uint64_t sub_10016BB10()
{
  *(void *)(v0 + 208) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10016BB9C, v2, v1);
}

uint64_t sub_10016BB9C()
{
  double v2 = v0[24];
  double v1 = v0[25];
  double v4 = v0[22];
  double v3 = v0[23];
  uint64_t v5 = (void *)*((void *)v0 + 14);
  swift_release();
  [v5 convertRect:0 toView:v4];
  *((void *)v0 + 27) = v6;
  *((void *)v0 + 28) = v7;
  *((void *)v0 + 29) = v8;
  *((void *)v0 + 30) = v9;
  return _swift_task_switch(sub_10016BC4C, 0, 0);
}

uint64_t sub_10016BC4C()
{
  CGFloat v2 = *(double *)(v0 + 232);
  CGFloat v1 = *(double *)(v0 + 240);
  CGFloat v4 = *(double *)(v0 + 216);
  CGFloat v3 = *(double *)(v0 + 224);
  CGFloat v6 = *(double *)(v0 + 152);
  CGFloat v5 = *(double *)(v0 + 160);
  CGFloat v8 = *(double *)(v0 + 136);
  CGFloat v7 = *(double *)(v0 + 144);
  CGFloat v27 = v7;
  uint64_t v9 = *(void **)(v0 + 112);
  uint64_t v10 = *(void **)(v0 + 88);
  sub_10030B1AC(*(void **)(v0 + 64));
  double v31 = v12;
  double v32 = v11;
  v34.origin.x = v8;
  v34.origin.y = v7;
  v34.size.width = v6;
  v34.size.height = v5;
  CGFloat v28 = v5;
  double MinX = CGRectGetMinX(v34);
  v35.origin.x = v4;
  v35.origin.y = v3;
  v35.size.width = v2;
  v35.size.height = v1;
  double v30 = MinX / CGRectGetWidth(v35);
  v36.origin.x = v8;
  v36.origin.y = v27;
  v36.size.width = v6;
  v36.size.height = v5;
  double MinY = CGRectGetMinY(v36);
  v37.origin.x = v4;
  v37.origin.y = v3;
  v37.size.width = v2;
  v37.size.height = v1;
  double v29 = MinY / CGRectGetHeight(v37);
  v38.origin.x = v8;
  v38.origin.y = v27;
  v38.size.width = v6;
  v38.size.height = v28;
  double Width = CGRectGetWidth(v38);
  v39.origin.x = v4;
  v39.origin.y = v3;
  v39.size.width = v2;
  v39.size.height = v1;
  double v16 = Width / CGRectGetWidth(v39);
  v40.origin.x = v8;
  v40.origin.y = v27;
  v40.size.width = v6;
  v40.size.height = v28;
  double Height = CGRectGetHeight(v40);
  v41.origin.x = v4;
  v41.origin.y = v3;
  v41.size.width = v2;
  v41.size.height = v1;
  double v18 = v31 * (Height / CGRectGetHeight(v41));
  id v19 = [objc_allocWithZone((Class)UIGraphicsImageRenderer) initWithSize:v32, v31];
  uint64_t v20 = swift_allocObject();
  *(double *)(v20 + 16) = v32;
  *(double *)(v20 + 24) = v31;
  *(void *)(v20 + 32) = v10;
  *(double *)(v20 + 40) = v32 * v30;
  *(double *)(v20 + 48) = v31 * v29;
  *(double *)(v20 + 56) = v32 * v16;
  *(double *)(v20 + 64) = v18;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10016BF94;
  *(void *)(v21 + 24) = v20;
  *(void *)(v0 + 48) = sub_10016BFB8;
  *(void *)(v0 + 56) = v21;
  *(void *)(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = sub_10016A3F4;
  *(void *)(v0 + 40) = &unk_1004EE2E0;
  unsigned int v22 = _Block_copy((const void *)(v0 + 16));
  id v23 = v10;
  swift_retain();
  swift_release();
  id v24 = [v19 imageWithActions:v22];

  _Block_release(v22);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v19)
  {
    __break(1u);
  }
  else
  {
    unsigned int v26 = *(uint64_t (**)(id))(v0 + 8);
    return v26(v24);
  }
  return result;
}

uint64_t sub_10016BF5C()
{
  return swift_deallocObject();
}

id sub_10016BF94(void *a1)
{
  return sub_10016A318(a1, *(void **)(v1 + 32), *(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64));
}

uint64_t sub_10016BFA8()
{
  return swift_deallocObject();
}

uint64_t sub_10016BFB8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10016BFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10016BFF0()
{
  return swift_release();
}

uint64_t *sub_10016BFF8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    CGFloat v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    CGFloat v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (void **)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for SubjectLiftRenderInput(0);
    uint64_t v36 = *(void *)(v11 - 8);
    double v12 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v36 + 48);
    swift_retain();
    swift_retain();
    if (v12(v10, 1, v11))
    {
      uint64_t v13 = sub_10000F214(&qword_100522468);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v14 = *v10;
      *(void *)uint64_t v9 = *v10;
      long long v15 = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 2) = v15;
      uint64_t v16 = v15;
      char v17 = **(void (***)(char *, void **, uint64_t))(v15 - 8);
      id v18 = v14;
      v17(v9 + 8, v10 + 1, v16);
      uint64_t v19 = *(int *)(v11 + 24);
      uint64_t v20 = &v9[v19];
      uint64_t v21 = (char *)v10 + v19;
      uint64_t v22 = type metadata accessor for IndexSet();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
      uint64_t v23 = *(int *)(v11 + 28);
      id v24 = &v9[v23];
      uint64_t v25 = (char *)v10 + v23;
      long long v26 = *((_OWORD *)v25 + 1);
      *(_OWORD *)id v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v26;
      v24[32] = v25[32];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v9, 0, 1, v11);
    }
    uint64_t v27 = a3[6];
    uint64_t v28 = a3[7];
    double v29 = (uint64_t *)((char *)v7 + v27);
    double v30 = (uint64_t *)((char *)a2 + v27);
    uint64_t v31 = v30[1];
    *double v29 = *v30;
    v29[1] = v31;
    double v32 = (uint64_t *)((char *)v7 + v28);
    uint64_t v33 = (uint64_t *)((char *)a2 + v28);
    uint64_t v34 = v33[1];
    *double v32 = *v33;
    v32[1] = v34;
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t sub_10016C258(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = (id *)(a1 + *(int *)(a2 + 20));
  uint64_t v5 = type metadata accessor for SubjectLiftRenderInput(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v4 + 1));
    CGFloat v6 = (char *)v4 + *(int *)(v5 + 24);
    uint64_t v7 = type metadata accessor for IndexSet();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  swift_release();

  return swift_release();
}

void *sub_10016C368(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (void **)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for SubjectLiftRenderInput(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  swift_retain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000F214(&qword_100522468);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = *v8;
    *(void *)uint64_t v7 = *v8;
    long long v14 = *((_OWORD *)v8 + 2);
    *((_OWORD *)v7 + 2) = v14;
    uint64_t v15 = v14;
    uint64_t v16 = **(void (***)(char *, void **, uint64_t))(v14 - 8);
    id v17 = v13;
    v16(v7 + 8, v8 + 1, v15);
    uint64_t v18 = *(int *)(v9 + 24);
    uint64_t v19 = &v7[v18];
    uint64_t v20 = (char *)v8 + v18;
    uint64_t v21 = type metadata accessor for IndexSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    uint64_t v22 = *(int *)(v9 + 28);
    uint64_t v23 = &v7[v22];
    id v24 = (char *)v8 + v22;
    long long v25 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v25;
    v23[32] = v24[32];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v26 = a3[6];
  uint64_t v27 = a3[7];
  uint64_t v28 = (void *)((char *)a1 + v26);
  double v29 = (void *)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = (void *)((char *)a1 + v27);
  double v32 = (void *)((char *)a2 + v27);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_10016C57C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for SubjectLiftRenderInput(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      CGRect v37 = (void *)*v8;
      CGRect v38 = (void *)*v7;
      *uint64_t v7 = *v8;
      id v39 = v37;

      sub_10000E558(v7 + 1, v8 + 1);
      uint64_t v40 = *(int *)(v9 + 24);
      CGRect v41 = (char *)v7 + v40;
      uint64_t v42 = (char *)v8 + v40;
      uint64_t v43 = type metadata accessor for IndexSet();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 24))(v41, v42, v43);
      uint64_t v44 = *(int *)(v9 + 28);
      uint64_t v45 = (char *)v7 + v44;
      long long v46 = (char *)v8 + v44;
      long long v47 = *(_OWORD *)v46;
      long long v48 = *((_OWORD *)v46 + 1);
      v45[32] = v46[32];
      *(_OWORD *)uint64_t v45 = v47;
      *((_OWORD *)v45 + 1) = v48;
      goto LABEL_7;
    }
    sub_10016B678((uint64_t)v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v27 = sub_10000F214(&qword_100522468);
    memcpy(v7, v8, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  long long v14 = (void *)*v8;
  *uint64_t v7 = *v8;
  uint64_t v15 = v8[4];
  v7[4] = v15;
  v7[5] = v8[5];
  uint64_t v16 = **(void (***)(void *, void *, uint64_t))(v15 - 8);
  id v17 = v14;
  v16(v7 + 1, v8 + 1, v15);
  uint64_t v18 = *(int *)(v9 + 24);
  uint64_t v19 = (char *)v7 + v18;
  uint64_t v20 = (char *)v8 + v18;
  uint64_t v21 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = *(int *)(v9 + 28);
  uint64_t v23 = (char *)v7 + v22;
  id v24 = (char *)v8 + v22;
  long long v25 = *(_OWORD *)v24;
  long long v26 = *((_OWORD *)v24 + 1);
  v23[32] = v24[32];
  *(_OWORD *)uint64_t v23 = v25;
  *((_OWORD *)v23 + 1) = v26;
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v28 = a3[6];
  double v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  uint64_t v31 = v30[1];
  *double v29 = *v30;
  v29[1] = v31;
  swift_retain();
  swift_release();
  uint64_t v32 = a3[7];
  uint64_t v33 = (void *)((char *)a1 + v32);
  uint64_t v34 = (void *)((char *)a2 + v32);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_10016C870(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for SubjectLiftRenderInput(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000F214(&qword_100522468);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    *uint64_t v7 = *v8;
    *(_OWORD *)(v7 + 1) = *(_OWORD *)(v8 + 1);
    *(_OWORD *)(v7 + 3) = *(_OWORD *)(v8 + 3);
    v7[5] = v8[5];
    uint64_t v12 = *(int *)(v9 + 24);
    int v13 = (char *)v7 + v12;
    long long v14 = (char *)v8 + v12;
    uint64_t v15 = type metadata accessor for IndexSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    uint64_t v16 = *(int *)(v9 + 28);
    id v17 = (char *)v7 + v16;
    uint64_t v18 = (char *)v8 + v16;
    long long v19 = *((_OWORD *)v18 + 1);
    *(_OWORD *)id v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v19;
    v17[32] = v18[32];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v20 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  return a1;
}

void *sub_10016CA14(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SubjectLiftRenderInput(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      id v24 = *(void **)v7;
      *(void *)uint64_t v7 = *(void *)v8;

      _s6Tamale17AnyLocalizedErrorVwxx_0(v7 + 8);
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(void *)(v7 + 40) = *((void *)v8 + 5);
      uint64_t v25 = *(int *)(v9 + 24);
      uint64_t v26 = v7 + v25;
      uint64_t v27 = &v8[v25];
      uint64_t v28 = type metadata accessor for IndexSet();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v28 - 8) + 40))(v26, v27, v28);
      uint64_t v29 = *(int *)(v9 + 28);
      uint64_t v30 = v7 + v29;
      uint64_t v31 = &v8[v29];
      long long v32 = *((_OWORD *)v31 + 1);
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      *(_OWORD *)(v30 + 16) = v32;
      *(unsigned char *)(v30 + 32) = v31[32];
      goto LABEL_7;
    }
    sub_10016B678(v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v22 = sub_10000F214(&qword_100522468);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  *(void *)(v7 + 40) = *((void *)v8 + 5);
  uint64_t v14 = *(int *)(v9 + 24);
  uint64_t v15 = v7 + v14;
  uint64_t v16 = &v8[v14];
  uint64_t v17 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  uint64_t v18 = *(int *)(v9 + 28);
  uint64_t v19 = v7 + v18;
  uint64_t v20 = &v8[v18];
  long long v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(unsigned char *)(v19 + 32) = v20[32];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  swift_release();
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t sub_10016CCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016CCC4);
}

uint64_t sub_10016CCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016CCDC);
}

uint64_t type metadata accessor for SubjectLiftRenderView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_1005224D0);
}

void sub_10016CD00()
{
}

uint64_t sub_10016CD0C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for SubjectLiftRenderUIView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100522578);
}

uint64_t *sub_10016CD48(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (void **)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for SubjectLiftRenderInput(0);
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10000F214(&qword_100522468);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v15 = *v10;
      *(void *)uint64_t v9 = *v10;
      long long v16 = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 2) = v16;
      uint64_t v17 = v16;
      uint64_t v18 = **(void (***)(char *, void **, uint64_t))(v16 - 8);
      id v19 = v15;
      v18(v9 + 8, v10 + 1, v17);
      uint64_t v20 = *(int *)(v11 + 24);
      long long v21 = &v9[v20];
      uint64_t v22 = (char *)v10 + v20;
      uint64_t v23 = type metadata accessor for IndexSet();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
      uint64_t v24 = *(int *)(v11 + 28);
      uint64_t v25 = &v9[v24];
      uint64_t v26 = (char *)v10 + v24;
      long long v27 = *((_OWORD *)v26 + 1);
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *((_OWORD *)v25 + 1) = v27;
      v25[32] = v26[32];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v28 = a3[6];
    uint64_t v29 = a3[7];
    uint64_t v30 = (uint64_t *)((char *)v7 + v28);
    uint64_t v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (uint64_t *)((char *)v7 + v29);
    uint64_t v34 = (uint64_t *)((char *)a2 + v29);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t sub_10016CFA4(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = (id *)(a1 + *(int *)(a2 + 20));
  uint64_t v5 = type metadata accessor for SubjectLiftRenderInput(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v4 + 1));
    uint64_t v6 = (char *)v4 + *(int *)(v5 + 24);
    uint64_t v7 = type metadata accessor for IndexSet();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  swift_release();

  return swift_release();
}

void *sub_10016D0AC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (void **)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for SubjectLiftRenderInput(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000F214(&qword_100522468);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    int v13 = *v8;
    *(void *)uint64_t v7 = *v8;
    long long v14 = *((_OWORD *)v8 + 2);
    *((_OWORD *)v7 + 2) = v14;
    uint64_t v15 = v14;
    long long v16 = **(void (***)(char *, void **, uint64_t))(v14 - 8);
    id v17 = v13;
    v16(v7 + 8, v8 + 1, v15);
    uint64_t v18 = *(int *)(v9 + 24);
    id v19 = &v7[v18];
    uint64_t v20 = (char *)v8 + v18;
    uint64_t v21 = type metadata accessor for IndexSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    uint64_t v22 = *(int *)(v9 + 28);
    uint64_t v23 = &v7[v22];
    uint64_t v24 = (char *)v8 + v22;
    long long v25 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v25;
    v23[32] = v24[32];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v26 = a3[6];
  uint64_t v27 = a3[7];
  uint64_t v28 = (void *)((char *)a1 + v26);
  uint64_t v29 = (void *)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = (void *)((char *)a1 + v27);
  uint64_t v32 = (void *)((char *)a2 + v27);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_10016D2B0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for SubjectLiftRenderInput(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      CGRect v37 = (void *)*v8;
      CGRect v38 = (void *)*v7;
      *uint64_t v7 = *v8;
      id v39 = v37;

      sub_10000E558(v7 + 1, v8 + 1);
      uint64_t v40 = *(int *)(v9 + 24);
      CGRect v41 = (char *)v7 + v40;
      uint64_t v42 = (char *)v8 + v40;
      uint64_t v43 = type metadata accessor for IndexSet();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 24))(v41, v42, v43);
      uint64_t v44 = *(int *)(v9 + 28);
      uint64_t v45 = (char *)v7 + v44;
      long long v46 = (char *)v8 + v44;
      long long v47 = *(_OWORD *)v46;
      long long v48 = *((_OWORD *)v46 + 1);
      v45[32] = v46[32];
      *(_OWORD *)uint64_t v45 = v47;
      *((_OWORD *)v45 + 1) = v48;
      goto LABEL_7;
    }
    sub_10016B678((uint64_t)v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v27 = sub_10000F214(&qword_100522468);
    memcpy(v7, v8, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  long long v14 = (void *)*v8;
  *uint64_t v7 = *v8;
  uint64_t v15 = v8[4];
  v7[4] = v15;
  v7[5] = v8[5];
  long long v16 = **(void (***)(void *, void *, uint64_t))(v15 - 8);
  id v17 = v14;
  v16(v7 + 1, v8 + 1, v15);
  uint64_t v18 = *(int *)(v9 + 24);
  id v19 = (char *)v7 + v18;
  uint64_t v20 = (char *)v8 + v18;
  uint64_t v21 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = *(int *)(v9 + 28);
  uint64_t v23 = (char *)v7 + v22;
  uint64_t v24 = (char *)v8 + v22;
  long long v25 = *(_OWORD *)v24;
  long long v26 = *((_OWORD *)v24 + 1);
  v23[32] = v24[32];
  *(_OWORD *)uint64_t v23 = v25;
  *((_OWORD *)v23 + 1) = v26;
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  swift_retain();
  swift_release();
  uint64_t v32 = a3[7];
  uint64_t v33 = (void *)((char *)a1 + v32);
  uint64_t v34 = (void *)((char *)a2 + v32);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_10016D58C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for SubjectLiftRenderInput(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000F214(&qword_100522468);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    *uint64_t v7 = *v8;
    *(_OWORD *)(v7 + 1) = *(_OWORD *)(v8 + 1);
    *(_OWORD *)(v7 + 3) = *(_OWORD *)(v8 + 3);
    v7[5] = v8[5];
    uint64_t v12 = *(int *)(v9 + 24);
    int v13 = (char *)v7 + v12;
    long long v14 = (char *)v8 + v12;
    uint64_t v15 = type metadata accessor for IndexSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    uint64_t v16 = *(int *)(v9 + 28);
    id v17 = (char *)v7 + v16;
    uint64_t v18 = (char *)v8 + v16;
    long long v19 = *((_OWORD *)v18 + 1);
    *(_OWORD *)id v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v19;
    v17[32] = v18[32];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v20 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  return a1;
}

void *sub_10016D730(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SubjectLiftRenderInput(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v24 = *(void **)v7;
      *(void *)uint64_t v7 = *(void *)v8;

      _s6Tamale17AnyLocalizedErrorVwxx_0(v7 + 8);
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(void *)(v7 + 40) = *((void *)v8 + 5);
      uint64_t v25 = *(int *)(v9 + 24);
      uint64_t v26 = v7 + v25;
      uint64_t v27 = &v8[v25];
      uint64_t v28 = type metadata accessor for IndexSet();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v28 - 8) + 40))(v26, v27, v28);
      uint64_t v29 = *(int *)(v9 + 28);
      uint64_t v30 = v7 + v29;
      uint64_t v31 = &v8[v29];
      long long v32 = *((_OWORD *)v31 + 1);
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      *(_OWORD *)(v30 + 16) = v32;
      *(unsigned char *)(v30 + 32) = v31[32];
      goto LABEL_7;
    }
    sub_10016B678(v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v22 = sub_10000F214(&qword_100522468);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  *(void *)(v7 + 40) = *((void *)v8 + 5);
  uint64_t v14 = *(int *)(v9 + 24);
  uint64_t v15 = v7 + v14;
  uint64_t v16 = &v8[v14];
  uint64_t v17 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  uint64_t v18 = *(int *)(v9 + 28);
  uint64_t v19 = v7 + v18;
  uint64_t v20 = &v8[v18];
  long long v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(unsigned char *)(v19 + 32) = v20[32];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  swift_release();
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t sub_10016D9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016D9D0);
}

uint64_t sub_10016D9D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000F214(&qword_100522468);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10016DA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016DA9C);
}

void *sub_10016DAA0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_100522468);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10016DB4C()
{
}

void sub_10016DB5C()
{
  sub_10016A5AC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_10016DC00()
{
  unint64_t result = qword_1005225B8;
  if (!qword_1005225B8)
  {
    sub_10000F69C(&qword_1005225C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005225B8);
  }
  return result;
}

uint64_t sub_10016DC5C()
{
  return sub_10016E064(&qword_1005225C8);
}

uint64_t sub_10016DC90(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10016DCF8()
{
  uint64_t v1 = type metadata accessor for SubjectLiftRenderUIView(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  swift_release();
  int v3 = (id *)(v0 + v2 + *(int *)(v1 + 20));
  uint64_t v4 = type metadata accessor for SubjectLiftRenderInput(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v3 + 1));
    uint64_t v5 = (char *)v3 + *(int *)(v4 + 24);
    uint64_t v6 = type metadata accessor for IndexSet();
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10016DE88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10016DEF0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SubjectLiftRenderUIView(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000F878;
  return sub_10016AD6C(a1, v5, v6, v7);
}

uint64_t sub_10016DFDC()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = type metadata accessor for SubjectLiftRenderUIView(0);
  int v3 = (void *)((char *)v0 + *(int *)(v2 + 24));
  uint64_t v4 = v3[1];
  uint64_t v5 = v1[5];
  v1[5] = *v3;
  v1[6] = v4;
  swift_retain();
  sub_10000F478(v5);
  uint64_t v6 = (void *)((char *)v0 + *(int *)(v2 + 28));
  uint64_t v7 = v6[1];
  uint64_t v8 = v1[7];
  v1[7] = *v6;
  v1[8] = v7;
  swift_retain();
  sub_10000F478(v8);
  return v1[2];
}

uint64_t sub_10016E064(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SubjectLiftRenderUIView(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016E0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016E0BC);
}

uint64_t sub_10016E0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522CF0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10016E12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016E140);
}

uint64_t sub_10016E140(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522CF0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for LatencyTextStyle()
{
  uint64_t result = qword_100522640;
  if (!qword_100522640) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10016E200()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10016E21C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v31 = type metadata accessor for ColorScheme();
  uint64_t v3 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = sub_10000F214(&qword_100522678);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  int v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_100522680);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Font.body.getter();
  static Font.Weight.medium.getter();
  uint64_t v17 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v19 = sub_10000F214(&qword_100522688);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v12, a1, v19);
  uint64_t v20 = (uint64_t *)&v12[*(int *)(v10 + 44)];
  uint64_t *v20 = KeyPath;
  v20[1] = v17;
  sub_10027CA80((uint64_t)v8);
  uint64_t v21 = v31;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for ColorScheme.dark(_:), v31);
  LOBYTE(KeyPath) = static ColorScheme.== infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
  v22(v5, v21);
  v22(v8, v21);
  uint64_t v23 = self;
  uint64_t v24 = &selRef_systemLightGrayColor;
  if ((KeyPath & 1) == 0) {
    uint64_t v24 = &selRef_systemDarkGrayColor;
  }
  id v25 = [v23 *v24];
  uint64_t v26 = Color.init(uiColor:)();
  uint64_t v27 = swift_getKeyPath();
  sub_10016E5C4((uint64_t)v12, (uint64_t)v16);
  uint64_t v28 = (uint64_t *)&v16[*(int *)(v14 + 44)];
  *uint64_t v28 = v27;
  v28[1] = v26;
  sub_10000FBD8((uint64_t)v12, &qword_100522678);
  return sub_10016E62C((uint64_t)v16, v32);
}

uint64_t sub_10016E514@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10016E540@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10016E56C()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_10016E598()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_10016E5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016E62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10016E698()
{
  unint64_t result = qword_100522690;
  if (!qword_100522690)
  {
    sub_10000F69C(&qword_100522680);
    sub_10016E738();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522690);
  }
  return result;
}

unint64_t sub_10016E738()
{
  unint64_t result = qword_100522698;
  if (!qword_100522698)
  {
    sub_10000F69C(&qword_100522678);
    sub_100013AA8(&qword_1005226A0, &qword_100522688);
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522698);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentOverlayBackdropModifier()
{
  return &type metadata for ContentOverlayBackdropModifier;
}

ValueMetadata *type metadata accessor for OnboardingProminentButtonStyle()
{
  return &type metadata for OnboardingProminentButtonStyle;
}

uint64_t sub_10016E81C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10016E838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v34 = a2;
  uint64_t v33 = type metadata accessor for BlendMode();
  uint64_t v2 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v32 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_1005226D8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000F214(&qword_1005226E0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_1005226E8);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = static Alignment.center.getter();
  uint64_t v18 = v17;
  char v19 = static Edge.Set.all.getter();
  uint64_t v20 = sub_10000F214(&qword_1005226F0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v11, v31, v20);
  uint64_t v21 = &v11[*(int *)(v9 + 44)];
  *(void *)uint64_t v21 = 0x3FF0000000000000;
  v21[8] = 1;
  v21[9] = v19;
  v21[10] = 0;
  *((void *)v21 + 2) = v16;
  *((void *)v21 + 3) = v18;
  static Color.black.getter();
  uint64_t v22 = Color.opacity(_:)();
  swift_release();
  LOBYTE(v9) = static Edge.Set.all.getter();
  sub_10000FB74((uint64_t)v11, (uint64_t)v15, &qword_1005226E0);
  uint64_t v23 = &v15[*(int *)(v13 + 44)];
  *(void *)uint64_t v23 = v22;
  v23[8] = v9;
  sub_10000FBD8((uint64_t)v11, &qword_1005226E0);
  static Color.black.getter();
  uint64_t v24 = Color.opacity(_:)();
  swift_release();
  uint64_t v26 = v32;
  uint64_t v25 = v33;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v32, enum case for BlendMode.overlay(_:), v33);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)v7 + *(int *)(v5 + 44), v26, v25);
  *uint64_t v7 = v24;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v26, v25);
  LOBYTE(v25) = static Edge.Set.all.getter();
  uint64_t v27 = sub_10000F214(&qword_1005226F8);
  uint64_t v28 = v34;
  uint64_t v29 = v34 + *(int *)(v27 + 36);
  sub_10000FB74((uint64_t)v7, v29, &qword_1005226D8);
  *(unsigned char *)(v29 + *(int *)(sub_10000F214(&qword_100522700) + 36)) = v25;
  sub_10000FB74((uint64_t)v15, v28, &qword_1005226E8);
  sub_10000FBD8((uint64_t)v7, &qword_1005226D8);
  return sub_10000FBD8((uint64_t)v15, &qword_1005226E8);
}

uint64_t sub_10016EBC8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10016EBE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v1 = type metadata accessor for Capsule();
  __chkstk_darwin(v1 - 8);
  uint64_t v57 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000F214(&qword_1005226A8) - 8;
  __chkstk_darwin(v59);
  uint64_t v58 = (uint64_t)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_1005226B0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_1005226B8);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_1005226C0);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v54 = (uint64_t)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000F214(&qword_1005226C8) - 8;
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  uint64_t v20 = static Color.white.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v7, v4);
  *(void *)&v11[*(int *)(v9 + 44)] = v20;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  LOBYTE(v4) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_10000FB74((uint64_t)v11, (uint64_t)v15, &qword_1005226B0);
  uint64_t v29 = &v15[*(int *)(v13 + 44)];
  *uint64_t v29 = v4;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  sub_10000FBD8((uint64_t)v11, &qword_1005226B0);
  LOBYTE(v4) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v38 = v54;
  sub_10000FB74((uint64_t)v15, v54, &qword_1005226B8);
  uint64_t v39 = v38 + *(int *)(v17 + 44);
  *(unsigned char *)uint64_t v39 = v4;
  *(void *)(v39 + 8) = v31;
  *(void *)(v39 + 16) = v33;
  *(void *)(v39 + 24) = v35;
  *(void *)(v39 + 32) = v37;
  *(unsigned char *)(v39 + 40) = 0;
  sub_10000FBD8((uint64_t)v15, &qword_1005226B8);
  uint64_t v40 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v41 = type metadata accessor for RoundedCornerStyle();
  uint64_t v42 = (uint64_t)v57;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104))(v57, v40, v41);
  static Color.white.getter();
  ButtonStyleConfiguration.isPressed.getter();
  uint64_t v43 = Color.opacity(_:)();
  swift_release();
  uint64_t v44 = v58;
  sub_10008D3F0(v42, v58);
  uint64_t v45 = v59;
  *(void *)(v44 + *(int *)(v59 + 60)) = v43;
  *(_WORD *)(v44 + *(int *)(v45 + 64)) = 256;
  sub_10008D454(v42);
  uint64_t v46 = static Alignment.center.getter();
  uint64_t v48 = v47;
  uint64_t v49 = (uint64_t)v55;
  uint64_t v50 = (uint64_t)&v55[*(int *)(v56 + 44)];
  sub_10000FB74(v44, v50, &qword_1005226A8);
  uint64_t v51 = (uint64_t *)(v50 + *(int *)(sub_10000F214(&qword_1005226D0) + 36));
  *uint64_t v51 = v46;
  v51[1] = v48;
  sub_10000FB74(v38, v49, &qword_1005226C0);
  sub_10000FBD8(v44, &qword_1005226A8);
  sub_10000FBD8(v38, &qword_1005226C0);
  return sub_10016F0CC(v49, v60);
}

uint64_t sub_10016F0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_1005226C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10016F138()
{
  unint64_t result = qword_100522708;
  if (!qword_100522708)
  {
    sub_10000F69C(&qword_1005226C8);
    sub_10016F224(&qword_100522710, &qword_1005226C0, (void (*)(void))sub_10016F1FC);
    sub_100013AA8(&qword_100522728, &qword_1005226D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522708);
  }
  return result;
}

uint64_t sub_10016F1FC()
{
  return sub_10016F224(&qword_100522718, &qword_1005226B8, (void (*)(void))sub_10016F2A4);
}

uint64_t sub_10016F224(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10016F2A4()
{
  unint64_t result = qword_100522720;
  if (!qword_100522720)
  {
    sub_10000F69C(&qword_1005226B0);
    sub_10008DF9C();
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522720);
  }
  return result;
}

unint64_t sub_10016F348()
{
  unint64_t result = qword_100522730;
  if (!qword_100522730)
  {
    sub_10000F69C(&qword_1005226F8);
    sub_10016F3E8();
    sub_100013AA8(&qword_100522760, &qword_100522700);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522730);
  }
  return result;
}

unint64_t sub_10016F3E8()
{
  unint64_t result = qword_100522738;
  if (!qword_100522738)
  {
    sub_10000F69C(&qword_1005226E8);
    sub_10016F488();
    sub_100013AA8(&qword_100519030, &qword_100519038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522738);
  }
  return result;
}

unint64_t sub_10016F488()
{
  unint64_t result = qword_100522740;
  if (!qword_100522740)
  {
    sub_10000F69C(&qword_1005226E0);
    sub_100013AA8(&qword_100522748, &qword_1005226F0);
    sub_100013AA8(&qword_100522750, &qword_100522758);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522740);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryButtonTransitionModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016F618);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryButtonTransitionModifier()
{
  return &type metadata for AccessoryButtonTransitionModifier;
}

void *initializeBufferWithCopyOfBuffer for GoogleImageSearchConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for GoogleImageSearchConfiguration()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for GoogleImageSearchConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for GoogleImageSearchConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GoogleImageSearchConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GoogleImageSearchConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryButtonStyle()
{
  return &type metadata for AccessoryButtonStyle;
}

uint64_t sub_10016F794()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10016F7B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v147 = a1;
  uint64_t v148 = a2;
  uint64_t v146 = a3;
  uint64_t v143 = type metadata accessor for BlurReplaceTransition.Configuration();
  uint64_t v141 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v140 = (char *)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unsigned __int8 v139 = (char *)&v106 - v5;
  uint64_t v6 = type metadata accessor for BlurReplaceTransition();
  uint64_t v144 = *(void *)(v6 - 8);
  uint64_t v145 = v6;
  __chkstk_darwin(v6);
  v142 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = type metadata accessor for ScaleTransition();
  uint64_t v127 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v125 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for OpacityTransition();
  uint64_t v124 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v123 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_10000F214(&qword_100522770);
  uint64_t v129 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v126 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000F214(&qword_100522778);
  uint64_t v134 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v132 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_10000F214(&qword_100522780);
  uint64_t v137 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v133 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v135 = (char *)&v106 - v14;
  uint64_t v15 = sub_10000F214(&qword_100519C60);
  __chkstk_darwin(v15 - 8);
  uint64_t v117 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_10000F214(&qword_10051EF30);
  __chkstk_darwin(v106);
  uint64_t v18 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000F214(&qword_100522788);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v108 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_10000F214(&qword_100522790);
  __chkstk_darwin(v107);
  uint64_t v109 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_10000F214(&qword_100522798);
  __chkstk_darwin(v112);
  uint64_t v113 = (uint64_t)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_10000F214(&qword_1005227A0);
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v114 = (char *)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_1005227A8);
  __chkstk_darwin(v23 - 8);
  uint64_t v149 = (uint64_t)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_10000F214(&qword_1005227B0);
  __chkstk_darwin(v120);
  uint64_t v122 = (uint64_t)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v121 = (uint64_t)&v106 - v27;
  uint64_t v28 = sub_10000F214(&qword_1005227B8);
  __chkstk_darwin(v28 - 8);
  uint64_t v30 = (uint64_t *)((char *)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = sub_10000F214(&qword_1005227C0);
  uint64_t v32 = v31 - 8;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v106 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10000F214(&qword_1005227C8);
  uint64_t v36 = v35 - 8;
  __chkstk_darwin(v35);
  uint64_t v119 = (uint64_t)&v106 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v106 - v39;
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v106 - v42;
  *uint64_t v30 = static Alignment.center.getter();
  v30[1] = v44;
  uint64_t v45 = sub_10000F214(&qword_1005227D0);
  sub_100170910((uint64_t)v30 + *(int *)(v45 + 44));
  sub_10000FB74((uint64_t)v30, (uint64_t)v34, &qword_1005227B8);
  v34[*(int *)(v32 + 44)] = 0;
  sub_10000FBD8((uint64_t)v30, &qword_1005227B8);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v46 = 0.4;
  }
  else {
    double v46 = 1.0;
  }
  sub_10000FB74((uint64_t)v34, (uint64_t)v40, &qword_1005227C0);
  *(double *)&v40[*(int *)(v36 + 44)] = v46;
  sub_10000FBD8((uint64_t)v34, &qword_1005227C0);
  uint64_t v118 = v43;
  sub_10000FC34((uint64_t)v40, (uint64_t)v43, &qword_1005227C8);
  uint64_t v150 = v147;
  uint64_t v151 = v148;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v47 = Text.init<A>(_:)();
  uint64_t v49 = v48;
  char v51 = v50;
  uint64_t v53 = v52;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v150 = v47;
  uint64_t v151 = v49;
  LOBYTE(v152) = v51 & 1;
  uint64_t v153 = v53;
  uint64_t v154 = KeyPath;
  uint64_t v155 = 1;
  char v156 = 0;
  uint64_t v55 = enum case for DynamicTypeSize.accessibility2(_:);
  uint64_t v56 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 104))(v18, v55, v56);
  sub_1001717F4(&qword_10051EF68, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    sub_10000F214(&qword_100518CF0);
    sub_100013734();
    sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    uint64_t v58 = v108;
    View.dynamicTypeSize<A>(_:)();
    sub_10000FBD8((uint64_t)v18, &qword_10051EF30);
    sub_100012FAC(v150, v151, v152);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v59 = static Color.white.getter();
    uint64_t v60 = swift_getKeyPath();
    uint64_t v61 = v110;
    uint64_t v62 = (uint64_t)v109;
    uint64_t v63 = v111;
    (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v109, v58, v111);
    uint64_t v64 = (uint64_t *)(v62 + *(int *)(v107 + 36));
    *uint64_t v64 = v60;
    v64[1] = v59;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v58, v63);
    uint64_t v65 = static Font.footnote.getter();
    uint64_t v66 = swift_getKeyPath();
    uint64_t v67 = v113;
    sub_10000FB74(v62, v113, &qword_100522790);
    char v68 = (uint64_t *)(v67 + *(int *)(v112 + 36));
    *char v68 = v66;
    v68[1] = v65;
    sub_10000FBD8(v62, &qword_100522790);
    uint64_t v69 = enum case for Font.Design.rounded(_:);
    uint64_t v70 = type metadata accessor for Font.Design();
    uint64_t v71 = *(void *)(v70 - 8);
    uint64_t v72 = (uint64_t)v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 104))(v117, v69, v70);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v72, 0, 1, v70);
    sub_1001714B4();
    uint64_t v73 = v114;
    View.fontDesign(_:)();
    sub_10000FBD8(v72, &qword_100519C60);
    sub_10000FBD8(v67, &qword_100522798);
    uint64_t v74 = static Alignment.center.getter();
    double v76 = sub_100226258(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v149, 0.0, 1, 0.0, 1, v74, v75);
    (*(void (**)(char *, uint64_t, double))(v115 + 8))(v73, v116, v76);
    uint64_t v77 = v123;
    OpacityTransition.init()();
    static UnitPoint.center.getter();
    uint64_t v78 = v125;
    ScaleTransition.init(_:anchor:)();
    uint64_t v79 = sub_1001717F4(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
    uint64_t v80 = sub_1001717F4(&qword_100521C40, (void (*)(uint64_t))&type metadata accessor for ScaleTransition);
    uint64_t v81 = v126;
    uint64_t v82 = v128;
    uint64_t v83 = v130;
    Transition.combined<A>(with:)();
    (*(void (**)(char *, uint64_t))(v127 + 8))(v78, v83);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v77, v82);
    static Animation.spring(response:dampingFraction:blendDuration:)();
    uint64_t v150 = v82;
    uint64_t v151 = v83;
    uint64_t v152 = v79;
    uint64_t v153 = v80;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v85 = v132;
    uint64_t v86 = v131;
    Transition.animation(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v129 + 8))(v81, v86);
    uint64_t v87 = v139;
    static BlurReplaceTransition.Configuration.downUp.getter();
    uint64_t v88 = v141;
    uint64_t v89 = v143;
    (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v140, v87, v143);
    uint64_t v90 = v142;
    BlurReplaceTransition.init(configuration:)();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v89);
    uint64_t v150 = v86;
    uint64_t v151 = OpaqueTypeConformance2;
    uint64_t v91 = swift_getOpaqueTypeConformance2();
    uint64_t v92 = sub_1001717F4(&qword_10051D5C0, (void (*)(uint64_t))&type metadata accessor for BlurReplaceTransition);
    char v93 = v135;
    uint64_t v94 = v136;
    uint64_t v95 = v145;
    Transition.combined<A>(with:)();
    (*(void (**)(char *, uint64_t))(v144 + 8))(v90, v95);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v85, v94);
    uint64_t v96 = v137;
    uint64_t v97 = v138;
    (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v133, v93, v138);
    uint64_t v150 = v94;
    uint64_t v151 = v95;
    uint64_t v152 = v91;
    uint64_t v153 = v92;
    swift_getOpaqueTypeConformance2();
    uint64_t v98 = AnyTransition.init<A>(_:)();
    uint64_t v99 = v149;
    uint64_t v100 = v122;
    sub_10000FB74(v149, v122, &qword_1005227A8);
    *(void *)(v100 + *(int *)(v120 + 36)) = v98;
    (*(void (**)(char *, uint64_t))(v96 + 8))(v93, v97);
    sub_10000FBD8(v99, &qword_1005227A8);
    uint64_t v101 = v121;
    sub_10000FC34(v100, v121, &qword_1005227B0);
    uint64_t v102 = (uint64_t)v118;
    uint64_t v103 = v119;
    sub_10000FB74((uint64_t)v118, v119, &qword_1005227C8);
    sub_10000FB74(v101, v100, &qword_1005227B0);
    uint64_t v104 = v146;
    sub_10000FB74(v103, v146, &qword_1005227C8);
    uint64_t v105 = sub_10000F214(&qword_1005227E8);
    sub_10000FB74(v100, v104 + *(int *)(v105 + 48), &qword_1005227B0);
    sub_10000FBD8(v101, &qword_1005227B0);
    sub_10000FBD8(v102, &qword_1005227C8);
    sub_10000FBD8(v100, &qword_1005227B0);
    return sub_10000FBD8(v103, &qword_1005227C8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100170910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v77 = type metadata accessor for ColorRenderingMode();
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v75 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v58 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v56 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000F214(&qword_1005227F0) - 8;
  __chkstk_darwin(v57);
  uint64_t v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000F214(&qword_1005227F8) - 8;
  __chkstk_darwin(v59);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000F214(&qword_100522800);
  __chkstk_darwin(v70);
  uint64_t v60 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000F214(&qword_100522808);
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v71 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v78 = (char *)&v54 - v11;
  uint64_t v12 = type metadata accessor for Spring();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = static Color.clear.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v68 = v79;
  int v67 = v80;
  uint64_t v66 = v81;
  int v65 = v82;
  uint64_t v64 = v83;
  uint64_t v63 = v84;
  uint64_t v62 = sub_1000AA4FC();
  uint64_t v61 = v16;
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v17 = 0.95;
  }
  else {
    double v17 = 1.0;
  }
  static UnitPoint.center.getter();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  static AnyTransition.opacity.getter();
  static UnitPoint.center.getter();
  static AnyTransition.scale(scale:anchor:)();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static AnyTransition.blur(radius:)();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  Spring.init(duration:bounce:)();
  static Animation.spring(_:blendDuration:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v55 = AnyTransition.animation(_:)();
  swift_release();
  swift_release();
  uint64_t v22 = v56;
  ButtonStyleConfiguration.label.getter();
  uint64_t v23 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = v58;
  uint64_t v26 = v69;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v5, v22, v69);
  uint64_t v27 = (uint64_t *)&v5[*(int *)(v57 + 44)];
  *uint64_t v27 = KeyPath;
  v27[1] = v23;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v26);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FB74((uint64_t)v5, (uint64_t)v7, &qword_1005227F0);
  uint64_t v28 = &v7[*(int *)(v59 + 44)];
  long long v29 = v86;
  *(_OWORD *)uint64_t v28 = v85;
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v87;
  sub_10000FBD8((uint64_t)v5, &qword_1005227F0);
  LOBYTE(v23) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v38 = v60;
  sub_10000FB74((uint64_t)v7, v60, &qword_1005227F8);
  uint64_t v39 = v38 + *(int *)(v70 + 36);
  *(unsigned char *)uint64_t v39 = v23;
  *(void *)(v39 + 8) = v31;
  *(void *)(v39 + 16) = v33;
  *(void *)(v39 + 24) = v35;
  *(void *)(v39 + 32) = v37;
  *(unsigned char *)(v39 + 40) = 0;
  sub_10000FBD8((uint64_t)v7, &qword_1005227F8);
  uint64_t v40 = v76;
  uint64_t v41 = v75;
  uint64_t v42 = v77;
  (*(void (**)(char *, void, uint64_t))(v76 + 104))(v75, enum case for ColorRenderingMode.nonLinear(_:), v77);
  sub_1001716A8(&qword_100522810, &qword_100522800, (void (*)(void))sub_100171678);
  uint64_t v43 = v71;
  View.drawingGroup(opaque:colorMode:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
  sub_10000FBD8(v38, &qword_100522800);
  uint64_t v44 = v73;
  uint64_t v45 = v78;
  uint64_t v46 = v74;
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v78, v43, v74);
  uint64_t v47 = v44;
  uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v48(v43, v45, v46);
  *(void *)a1 = v72;
  *(_WORD *)(a1 + 8) = 256;
  *(void *)(a1 + 16) = v68;
  *(unsigned char *)(a1 + 24) = v67;
  *(void *)(a1 + 32) = v66;
  *(unsigned char *)(a1 + 40) = v65;
  uint64_t v49 = v63;
  *(void *)(a1 + 48) = v64;
  *(void *)(a1 + 56) = v49;
  uint64_t v50 = v61;
  *(void *)(a1 + 64) = v62;
  *(void *)(a1 + 72) = v50;
  *(double *)(a1 + 80) = v17;
  *(double *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = v19;
  *(void *)(a1 + 104) = v21;
  *(void *)(a1 + 112) = v55;
  uint64_t v51 = sub_10000F214(&qword_100522828);
  v48((char *)(a1 + *(int *)(v51 + 48)), v43, v46);
  uint64_t v52 = *(void (**)(char *, uint64_t))(v47 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v52(v78, v46);
  v52(v43, v46);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1001711BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0x4018000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v5 = sub_10000F214(&qword_100522768);
  return sub_10016F7B0(v4, v3, a1 + *(int *)(v5 + 44));
}

uint64_t sub_100171220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_100522830);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnyTransition.opacity.getter();
  v11[0] = 0;
  v11[1] = 0x4018000000000000;
  sub_10017183C();
  static AnyTransition.modifier<A>(active:identity:)();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static UnitPoint.center.getter();
  static AnyTransition.scale(scale:anchor:)();
  static AnyTransition.opacity.getter();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static AnyTransition.blur(radius:)();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  sub_100343768();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static Animation.linear(duration:)();
  AnyTransition.animation(_:)();
  swift_release();
  swift_release();
  uint64_t v8 = static AnyTransition.asymmetric(insertion:removal:)();
  swift_release();
  swift_release();
  uint64_t v9 = sub_10000F214(&qword_100522840);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, a1, v9);
  *(void *)&v7[*(int *)(v5 + 44)] = v8;
  return sub_10000FC34((uint64_t)v7, a2, &qword_100522830);
}

uint64_t sub_100171478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100171220(a1, a2);
}

uint64_t sub_100171480()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1001714B4()
{
  unint64_t result = qword_1005227D8;
  if (!qword_1005227D8)
  {
    sub_10000F69C(&qword_100522798);
    sub_100171554();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005227D8);
  }
  return result;
}

unint64_t sub_100171554()
{
  unint64_t result = qword_1005227E0;
  if (!qword_1005227E0)
  {
    sub_10000F69C(&qword_100522790);
    sub_10000F69C(&qword_100518CF0);
    sub_10000F69C(&qword_10051EF30);
    sub_100013734();
    sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005227E0);
  }
  return result;
}

uint64_t sub_100171678()
{
  return sub_1001716A8(&qword_100522818, &qword_1005227F8, (void (*)(void))sub_100171724);
}

uint64_t sub_1001716A8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100171724()
{
  unint64_t result = qword_100522820;
  if (!qword_100522820)
  {
    sub_10000F69C(&qword_1005227F0);
    sub_1001717F4((unint64_t *)&qword_10051BE38, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522820);
  }
  return result;
}

uint64_t sub_1001717F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10017183C()
{
  unint64_t result = qword_100522838;
  if (!qword_100522838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522838);
  }
  return result;
}

uint64_t sub_100171890()
{
  return sub_100013AA8(&qword_100522848, &qword_100522850);
}

unint64_t sub_1001718D0()
{
  unint64_t result = qword_100522858;
  if (!qword_100522858)
  {
    sub_10000F69C(&qword_100522830);
    sub_100013AA8(&qword_100522860, &qword_100522840);
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522858);
  }
  return result;
}

void sub_100171998()
{
  qword_10055E370 = (uint64_t)&off_1004E57F8;
}

BOOL sub_1001719AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a4 - 1) > 3) {
    float v4 = NAN;
  }
  else {
    float v4 = flt_1004491D0[a4 - 1];
  }
  if ((unint64_t)(a2 - 1) > 3) {
    float v5 = NAN;
  }
  else {
    float v5 = flt_1004491D0[a2 - 1];
  }
  return v4 >= v5;
}

Swift::Int sub_1001719F8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  switch(a2)
  {
    case 0:
      Swift::UInt v3 = 1;
      goto LABEL_8;
    case 1:
      Swift::UInt v3 = 2;
      goto LABEL_8;
    case 2:
      Swift::UInt v3 = 3;
      goto LABEL_8;
    case 3:
      Swift::UInt v3 = 4;
      goto LABEL_8;
    case 4:
      Swift::UInt v3 = 5;
LABEL_8:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(0);
      String.hash(into:)();
      break;
  }
  return Hasher._finalize()();
}

BOOL sub_100171ADC(uint64_t *a1, uint64_t *a2)
{
  return sub_1001722D4(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_100171AF0(uint64_t *a1, uint64_t *a2)
{
  return sub_1001719AC(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_100171B04(uint64_t *a1, uint64_t *a2)
{
  return sub_100171B18(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_100171B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a2 - 1) > 3) {
    float v4 = NAN;
  }
  else {
    float v4 = flt_1004491D0[a2 - 1];
  }
  if ((unint64_t)(a4 - 1) > 3) {
    float v5 = NAN;
  }
  else {
    float v5 = flt_1004491D0[a4 - 1];
  }
  return v4 >= v5;
}

BOOL sub_100171B64(uint64_t *a1, uint64_t *a2)
{
  return sub_100171B78(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_100171B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a4 - 1) > 3) {
    float v4 = NAN;
  }
  else {
    float v4 = flt_1004491D0[a4 - 1];
  }
  if ((unint64_t)(a2 - 1) > 3) {
    float v5 = NAN;
  }
  else {
    float v5 = flt_1004491D0[a2 - 1];
  }
  return v4 < v5;
}

Swift::Int sub_100171BC4()
{
  return sub_1001719F8(*v0, v0[1]);
}

void sub_100171BCC()
{
  switch(*(void *)(v0 + 8))
  {
    case 0:
      Swift::UInt v1 = 1;
      goto LABEL_10;
    case 1:
      Swift::UInt v1 = 2;
      goto LABEL_10;
    case 2:
      Swift::UInt v1 = 3;
      goto LABEL_10;
    case 3:
      Swift::UInt v1 = 4;
      goto LABEL_10;
    case 4:
      Swift::UInt v1 = 5;
LABEL_10:
      Hasher._combine(_:)(v1);
      break;
    default:
      Hasher._combine(_:)(0);
      String.hash(into:)();
      break;
  }
}

Swift::Int sub_100171CA0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 1;
      goto LABEL_8;
    case 1:
      Swift::UInt v2 = 2;
      goto LABEL_8;
    case 2:
      Swift::UInt v2 = 3;
      goto LABEL_8;
    case 3:
      Swift::UInt v2 = 4;
      goto LABEL_8;
    case 4:
      Swift::UInt v2 = 5;
LABEL_8:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(0);
      String.hash(into:)();
      break;
  }
  return Hasher._finalize()();
}

BOOL sub_100171D7C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  switch(*(void *)(a1 + 8))
  {
    case 0:
      if (!v2) {
        goto LABEL_12;
      }
      goto LABEL_3;
    case 1:
      if (v2 == 1) {
        goto LABEL_12;
      }
      goto LABEL_3;
    case 2:
      if (v2 == 2) {
        goto LABEL_12;
      }
      goto LABEL_3;
    case 3:
      if (v2 == 3) {
        goto LABEL_12;
      }
      goto LABEL_3;
    case 4:
      if (v2 == 4) {
LABEL_12:
      }
        BOOL result = 1;
      else {
LABEL_3:
      }
        BOOL result = 0;
      break;
    default:
      BOOL result = v2 > 4;
      break;
  }
  return result;
}

void sub_100171E0C(float a1)
{
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 1056964608;
  float v2 = roundf(a1 * 0.5);
  if ((~LODWORD(v2) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 9.2234e18)
  {
LABEL_10:
    __break(1u);
    return;
  }
  Swift::UInt v3 = (void *)v1;
  if ((uint64_t)v2 <= 2) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = (uint64_t)v2;
  }
  v3[4] = v4;
  sub_10000F214(&qword_1005210E0);
  swift_allocObject();
  v3[2] = sub_10003FE5C((uint64_t)_swiftEmptyArrayStorage, 0, v4);
  uint64_t v5 = v3[4];
  sub_10000F214(&qword_1005210E8);
  swift_allocObject();
  v3[3] = sub_10003FE44((uint64_t)_swiftEmptyArrayStorage, 0, v5);
}

unint64_t sub_100171F14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    float v2 = *(float *)(a1 + 32);
    uint64_t v3 = v1 - 1;
    if (v1 != 1)
    {
      uint64_t v4 = (float *)(a1 + 36);
      do
      {
        float v5 = *v4++;
        float v6 = v5;
        if (v2 < v5) {
          float v2 = v6;
        }
        --v3;
      }
      while (v3);
    }
    uint64_t v7 = LODWORD(v2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

uint64_t sub_100171F6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t sub_100171FB0()
{
  swift_release();
  swift_release();
  sub_10014A76C(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CameraMotionMonitor()
{
  return self;
}

unint64_t destroy for CameraMotionMonitor.MotionState(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s6Tamale19CameraMotionMonitorC11MotionStateOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for CameraMotionMonitor.MotionState(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CameraMotionMonitor.MotionState(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraMotionMonitor.MotionState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CameraMotionMonitor.MotionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 4;
    }
  }
  return result;
}

uint64_t sub_100172234(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10017224C(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraMotionMonitor.MotionState()
{
  return &type metadata for CameraMotionMonitor.MotionState;
}

unint64_t sub_100172280()
{
  unint64_t result = qword_1005229A8;
  if (!qword_1005229A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005229A8);
  }
  return result;
}

BOOL sub_1001722D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a2 - 1) > 3) {
    float v4 = NAN;
  }
  else {
    float v4 = flt_1004491D0[a2 - 1];
  }
  if ((unint64_t)(a4 - 1) > 3) {
    float v5 = NAN;
  }
  else {
    float v5 = flt_1004491D0[a4 - 1];
  }
  return v4 < v5;
}

void sub_100172320(void *a1, float32x4_t a2)
{
  unint64_t v3 = (os_unfair_lock_s *)(a1[4] + 16);
  os_unfair_lock_lock(v3);
  float v4 = a1 + 2;
  swift_beginAccess();
  int64_t v5 = *(void *)(a1[2] + 16);
  os_unfair_lock_unlock(v3);
  if (v5)
  {
    sub_100040954(0, v5, 0);
    os_unfair_lock_lock(v3);
    os_unfair_lock_unlock(v3);
    uint64_t v6 = a1[5];
    if (v6)
    {
      unint64_t v7 = 0;
      while (1)
      {
        os_unfair_lock_lock(v3);
        unint64_t v8 = *(void *)(*v4 + 16);
        if (v8 == v6)
        {
          uint64_t v9 = a1[3];
          BOOL v10 = __OFADD__(v9, 1);
          uint64_t v11 = v9 + 1;
          if (v10) {
            goto LABEL_20;
          }
          uint64_t v12 = v11 % v6;
        }
        else
        {
          uint64_t v12 = 0;
        }
        BOOL v10 = __OFADD__(v12, v7);
        uint64_t v13 = v12 + v7;
        if (v10) {
          break;
        }
        if (v6 == -1 && v13 == 0x8000000000000000) {
          goto LABEL_21;
        }
        unint64_t v14 = v13 % v6;
        if (v14 >= v8) {
          goto LABEL_18;
        }
        float32x4_t v21 = *(float32x4_t *)(*v4 + 16 * v14 + 32);
        os_unfair_lock_unlock(v3);
        unint64_t v16 = _swiftEmptyArrayStorage[2];
        unint64_t v15 = _swiftEmptyArrayStorage[3];
        if (v16 >= v15 >> 1) {
          sub_100040954(v15 > 1, v16 + 1, 1);
        }
        float32x4_t v17 = vsubq_f32(v21, a2);
        float32x4_t v18 = vmulq_f32(v17, v17);
        _swiftEmptyArrayStorage[2] = v16 + 1;
        *((float *)&_swiftEmptyArrayStorage[4] + v16) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        os_unfair_lock_lock(v3);
        os_unfair_lock_unlock(v3);
        os_unfair_lock_lock(v3);
        unint64_t v19 = *(void *)(*v4 + 16);
        os_unfair_lock_unlock(v3);
        if (v7 >= v19) {
          goto LABEL_19;
        }
        if (v5 == ++v7) {
          return;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
  }
}

void sub_100172528(void *a1)
{
  double v2 = (os_unfair_lock_s *)(a1[4] + 16);
  os_unfair_lock_lock(v2);
  unint64_t v3 = a1 + 2;
  swift_beginAccess();
  int64_t v4 = *(void *)(a1[2] + 16);
  os_unfair_lock_unlock(v2);
  if (v4)
  {
    sub_100040B58(0, v4, 0);
    os_unfair_lock_lock(v2);
    os_unfair_lock_unlock(v2);
    uint64_t v5 = a1[5];
    if (v5)
    {
      unint64_t v6 = 0;
      while (1)
      {
        os_unfair_lock_lock(v2);
        unint64_t v7 = *(void *)(*v3 + 16);
        if (v7 == v5)
        {
          uint64_t v8 = a1[3];
          BOOL v9 = __OFADD__(v8, 1);
          uint64_t v10 = v8 + 1;
          if (v9) {
            goto LABEL_20;
          }
          uint64_t v11 = v10 % v5;
        }
        else
        {
          uint64_t v11 = 0;
        }
        BOOL v9 = __OFADD__(v11, v6);
        uint64_t v12 = v11 + v6;
        if (v9) {
          break;
        }
        if (v5 == -1 && v12 == 0x8000000000000000) {
          goto LABEL_21;
        }
        if (v12 % v5 >= v7) {
          goto LABEL_18;
        }
        os_unfair_lock_unlock(v2);
        log(_:)();
        unint64_t v15 = _swiftEmptyArrayStorage[2];
        unint64_t v14 = _swiftEmptyArrayStorage[3];
        if (v15 >= v14 >> 1)
        {
          float32x4_t v19 = v13;
          sub_100040B58(v14 > 1, v15 + 1, 1);
          float32x4_t v13 = v19;
        }
        float32x4_t v16 = vaddq_f32(v13, v13);
        int8x16_t v17 = (int8x16_t)vmulq_f32(v16, v16);
        _swiftEmptyArrayStorage[2] = v15 + 1;
        *(double *)&_swiftEmptyArrayStorage[v15 + 4] = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))));
        os_unfair_lock_lock(v2);
        os_unfair_lock_unlock(v2);
        os_unfair_lock_lock(v2);
        unint64_t v18 = *(void *)(*v3 + 16);
        os_unfair_lock_unlock(v2);
        if (v6 >= v18) {
          goto LABEL_19;
        }
        if (v4 == ++v6) {
          return;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
  }
}

unint64_t sub_1001727E0(uint64_t a1, uint64_t a2, char a3)
{
  double v3 = *(double *)&a2;
  unint64_t result = 0xD000000000000022;
  if ((a1 & 0x100000000) == 0 && (a3 & 1) == 0)
  {
    if (qword_100517F18 != -1)
    {
      int v14 = a1;
      swift_once();
      LODWORD(a1) = v14;
      double v3 = *(double *)&a2;
    }
    uint64_t v6 = *(void *)(qword_10055E370 + 16);
    if (v6)
    {
      float v7 = *(float *)&a1;
      double v8 = v3;
      BOOL v9 = *(float *)&a1 > 0.15;
      if (v8 > 0.261799388) {
        BOOL v9 = 1;
      }
      BOOL v10 = *(float *)&a1 > 0.02;
      if (v8 > 0.034906585) {
        BOOL v10 = 1;
      }
      BOOL v11 = v7 > 0.005;
      if (v8 > 0.00872664626) {
        BOOL v11 = 1;
      }
      BOOL v12 = v7 > INFINITY;
      if (v8 > 3.14159265) {
        BOOL v12 = 1;
      }
      float32x4_t v13 = (void *)(qword_10055E370 + 40);
      while (1)
      {
        switch(*v13)
        {
          case 1:
            if (!v11) {
              return *(v13 - 1);
            }
            goto LABEL_16;
          case 2:
            if (v10) {
              goto LABEL_16;
            }
            return *(v13 - 1);
          case 3:
            if (!v9) {
              return *(v13 - 1);
            }
            goto LABEL_16;
          case 4:
            if (!v12) {
              return *(v13 - 1);
            }
LABEL_16:
            v13 += 2;
            if (!--v6) {
              return 0xD000000000000028;
            }
            break;
          default:
            __break(1u);
            JUMPOUT(0x100172984);
        }
      }
    }
    return 0xD000000000000028;
  }
  return result;
}

uint64_t sub_100172994(int8x16_t a1, int8x16_t a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = v4;
  a4.n128_u32[3] = 0;
  __n128 v77 = a4;
  v7.n128_f64[0] = sub_10014AB04(a1, a2, a3);
  __n128 v76 = v7;
  uint64_t v8 = v4[2];
  BOOL v9 = (os_unfair_lock_s *)(*(void *)(v8 + 32) + 16);
  swift_retain();
  os_unfair_lock_lock(v9);
  os_unfair_lock_unlock(v9);
  os_unfair_lock_lock(v9);
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)(v8 + 16) + 16);
  os_unfair_lock_unlock(v9);
  if (!v10) {
    goto LABEL_15;
  }
  sub_10003FD60(0);
  long long v74 = v11;
  swift_release();
  uint64_t v12 = 0;
  __n128 v13 = v77;
  while (1)
  {
    __n128 v81 = v77;
    float v15 = *(float *)((unint64_t)&v81 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3)));
    long long v82 = v74;
    float v16 = *(float *)((unint64_t)&v82 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3)));
    BOOL v14 = v15 == v16;
    if (v12 == 2) {
      break;
    }
    while (1)
    {
      ++v12;
      if (v14) {
        break;
      }
      if (v12 == 2) {
        goto LABEL_17;
      }
      BOOL v14 = 0;
    }
  }
  if (v15 != v16) {
    goto LABEL_17;
  }
  uint64_t v17 = v5[3];
  unint64_t v18 = (os_unfair_lock_s *)(*(void *)(v17 + 32) + 16);
  swift_retain();
  os_unfair_lock_lock(v18);
  os_unfair_lock_unlock(v18);
  os_unfair_lock_lock(v18);
  swift_beginAccess();
  uint64_t v19 = *(void *)(*(void *)(v17 + 16) + 16);
  os_unfair_lock_unlock(v18);
  if (!v19)
  {
LABEL_15:
    swift_release();
LABEL_16:
    __n128 v13 = v77;
    goto LABEL_17;
  }
  sub_10003FD60(0);
  long long v75 = v20;
  swift_release();
  uint64_t v21 = 0;
  BOOL v22 = 1;
  while (1)
  {
    while (!v22)
    {
      if (v21 == 3) {
        goto LABEL_16;
      }
      BOOL v22 = 0;
      ++v21;
    }
    __n128 v79 = v76;
    float v23 = *(float *)((unint64_t)&v79 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
    long long v80 = v75;
    float v24 = *(float *)((unint64_t)&v80 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
    BOOL v22 = v23 == v24;
    if (v21 == 3) {
      break;
    }
    ++v21;
  }
  __n128 v13 = v77;
  if (v23 == v24)
  {
    if (qword_100517E28 != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    sub_10000F378(v63, (uint64_t)qword_10055E190);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      v84.n128_u64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136315138;
      uint64_t v83 = sub_1003806B0(0xD00000000000002FLL, 0x80000001004288D0, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%s", v66, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v67 = v5[5];
    uint64_t v59 = v5 + 5;
    uint64_t v58 = v67;
    unint64_t v61 = v59[1];
    *uint64_t v59 = 0xD00000000000002FLL;
    v59[1] = 0x80000001004288D0;
    goto LABEL_30;
  }
LABEL_17:
  uint64_t v25 = v5[2];
  __n128 v84 = v13;
  uint64_t v26 = *(void (**)(__n128 *))(*(void *)v25 + 216);
  swift_retain();
  v26(&v84);
  swift_release();
  uint64_t v27 = v5[3];
  __n128 v84 = v76;
  uint64_t v28 = *(void (**)(__n128 *))(*(void *)v27 + 216);
  swift_retain();
  v28(&v84);
  swift_release();
  long long v29 = (void *)v5[2];
  uint64_t v30 = (os_unfair_lock_s *)(v29[4] + 16);
  swift_retain();
  os_unfair_lock_lock(v30);
  swift_beginAccess();
  uint64_t v31 = *(void *)(v29[2] + 16);
  uint64_t v32 = v29[5];
  os_unfair_lock_unlock(v30);
  swift_release();
  if (v31 != v32) {
    goto LABEL_29;
  }
  uint64_t v33 = (void *)v5[3];
  uint64_t v34 = (os_unfair_lock_s *)(v33[4] + 16);
  swift_retain();
  os_unfair_lock_lock(v34);
  swift_beginAccess();
  uint64_t v35 = *(void *)(v33[2] + 16);
  uint64_t v36 = v33[5];
  os_unfair_lock_unlock(v34);
  swift_release();
  if (v35 != v36) {
    goto LABEL_29;
  }
  uint64_t v37 = v5[2];
  uint64_t v38 = (os_unfair_lock_s *)(*(void *)(v37 + 32) + 16);
  swift_retain();
  os_unfair_lock_lock(v38);
  os_unfair_lock_unlock(v38);
  os_unfair_lock_lock(v38);
  swift_beginAccess();
  uint64_t v39 = *(void *)(*(void *)(v37 + 16) + 16);
  os_unfair_lock_unlock(v38);
  if (!v39) {
    goto LABEL_28;
  }
  sub_10003FD60(0);
  float32x4_t v78 = v40;
  swift_release();
  uint64_t v41 = v5[3];
  uint64_t v42 = (os_unfair_lock_s *)(*(void *)(v41 + 32) + 16);
  swift_retain();
  os_unfair_lock_lock(v42);
  os_unfair_lock_unlock(v42);
  os_unfair_lock_lock(v42);
  swift_beginAccess();
  uint64_t v43 = *(void *)(*(void *)(v41 + 16) + 16);
  os_unfair_lock_unlock(v42);
  if (!v43)
  {
LABEL_28:
    swift_release();
LABEL_29:
    uint64_t v60 = v5[5];
    uint64_t v59 = v5 + 5;
    uint64_t v58 = v60;
    unint64_t v61 = v59[1];
    *uint64_t v59 = 0;
    v59[1] = 0;
LABEL_30:
    sub_10014A76C(v58, v61);
    return *v59;
  }
  sub_10003FD60(0);
  swift_release();
  swift_retain();
  uint64_t v44 = (void *)swift_retain();
  sub_100172320(v44, v78);
  uint64_t v46 = v45;
  swift_release();
  swift_release();
  swift_retain();
  uint64_t v47 = (void *)swift_retain();
  sub_100172528(v47);
  uint64_t v49 = v48;
  swift_release();
  swift_release();
  unint64_t v50 = sub_100171F14(v46);
  swift_bridgeObjectRelease();
  uint64_t v51 = *(void *)(v49 + 16);
  if (v51)
  {
    double v52 = *(double *)(v49 + 32);
    uint64_t v53 = v51 - 1;
    if (v51 != 1)
    {
      uint64_t v54 = (double *)(v49 + 40);
      do
      {
        double v55 = *v54++;
        double v56 = v55;
        if (v52 < v55) {
          double v52 = v56;
        }
        --v53;
      }
      while (v53);
    }
    uint64_t v57 = *(void *)&v52;
  }
  else
  {
    uint64_t v57 = 0;
  }
  char v68 = v51 == 0;
  swift_bridgeObjectRelease();
  unint64_t v69 = sub_1001727E0(v50 | ((HIDWORD(v50) & 1) << 32), v57, v68);
  unint64_t v71 = v5[6];
  uint64_t v70 = v5 + 6;
  uint64_t v72 = *(v70 - 1);
  *(v70 - 1) = v69;
  *uint64_t v70 = v73;
  sub_10014A76C(v72, v71);
  uint64_t v59 = v70 - 1;
  return *v59;
}

unint64_t sub_100173034(uint64_t a1)
{
  sub_1000508CC(a1, (uint64_t)&v29);
  unsigned __int8 v1 = v32;
  if (!(v32 >> 62)) {
    return 0xD000000000000021;
  }
  if (v32 >> 62 == 1) {
    return 0xD00000000000001ELL;
  }
  v32 &= 0x3FFFFFFFFFFFFFFFuLL;
  id v3 = v29;
  int64_t v4 = v30;
  uint64_t v5 = v31;
  uint64_t v6 = v33;
  uint64_t v7 = v34;
  sub_1000506C4(v29, v30, v31, v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_10017C438(v8, v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    unsigned __int8 v26 = v1;
    uint64_t v11 = v10 - 1;
    for (uint64_t i = 32; ; i += 176)
    {
      long long v13 = *(_OWORD *)(v9 + i);
      long long v14 = *(_OWORD *)(v9 + i + 32);
      v28[1] = *(_OWORD *)(v9 + i + 16);
      v28[2] = v14;
      v28[0] = v13;
      long long v15 = *(_OWORD *)(v9 + i + 48);
      long long v16 = *(_OWORD *)(v9 + i + 64);
      long long v17 = *(_OWORD *)(v9 + i + 96);
      v28[5] = *(_OWORD *)(v9 + i + 80);
      v28[6] = v17;
      v28[3] = v15;
      v28[4] = v16;
      long long v18 = *(_OWORD *)(v9 + i + 112);
      long long v19 = *(_OWORD *)(v9 + i + 128);
      long long v20 = *(_OWORD *)(v9 + i + 160);
      v28[9] = *(_OWORD *)(v9 + i + 144);
      v28[10] = v20;
      v28[7] = v18;
      v28[8] = v19;
      sub_10017FEA0((uint64_t)v28);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0;
      v27._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(22);
      v21._uint64_t countAndFlagsBits = 0x3A746C7573657220;
      v21._object = (void *)0xE900000000000020;
      String.append(_:)(v21);
      sub_1001817B4((uint64_t)v28);
      v22._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 0x203A65726F637320;
      v23._object = (void *)0xE800000000000000;
      String.append(_:)(v23);
      Double.write<A>(to:)();
      v24._uint64_t countAndFlagsBits = 44;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRetain();
      String.append(_:)(v27);
      sub_10017FF68((uint64_t)v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v11) {
        break;
      }
      --v11;
    }
    swift_bridgeObjectRelease();
    unsigned __int8 v1 = v26;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  *(void *)&v28[0] = 0xD000000000000029;
  *((void *)&v28[0] + 1) = 0x80000001004289E0;
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = 93;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  sub_10004FFD4(v3, v4, v5, v1);
  swift_bridgeObjectRelease();
  return *(void *)&v28[0];
}

id *sub_100173348()
{
  id v9 = *v0;
  id v1 = v9;
  sub_10000F214((uint64_t *)&unk_10051FB50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v3;
  id v4 = objc_allocWithZone((Class)NSNumber);
  id v5 = v1;
  id v6 = [v4 initWithDouble:50.0];
  *(void *)(inited + 72) = sub_10000F734(0, (unint64_t *)&qword_10051B450);
  *(void *)(inited + 48) = v6;
  sub_10031BC4C(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 openInMapsWithLaunchOptions:isa];

  return sub_100107B44(&v9);
}

uint64_t sub_100173460(uint64_t a1, uint64_t a2)
{
  sub_1000508CC(a1, (uint64_t)v4);
  sub_1000508CC(a2, (uint64_t)v5);
  return sub_100180908((uint64_t)v4, (uint64_t)v5) & 1;
}

id sub_1001734AC(uint64_t a1, uint64_t a2)
{
  [self setSectionHeaderStyle:1];
  id v3 = [objc_allocWithZone((Class)MUPlaceViewController) initWithMapItem:a2];
  [v3 setScrollEnabled:0];
  [v3 setOptions:0x1F8008000084DLL];
  id result = [v3 view];
  if (result)
  {
    id v5 = result;
    id v6 = [self clearColor];
    [v5 setBackgroundColor:v6];

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100173634(uint64_t a1)
{
  return sub_1001734AC(a1, *v1);
}

id sub_10017363C(void *a1)
{
  return [a1 setMapItem:*v1];
}

uint64_t sub_100173650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100185880();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001736B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100185880();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100173718()
{
}

uint64_t sub_100173740@<X0>(void *a1@<X0>, unsigned char *a2@<X1>, char *a3@<X8>)
{
  uint64_t v98 = a1;
  uint64_t v123 = a3;
  uint64_t v5 = type metadata accessor for Image.Scale();
  uint64_t v121 = *(void *)(v5 - 8);
  uint64_t v122 = v5;
  __chkstk_darwin(v5);
  uint64_t v120 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100523180);
  __chkstk_darwin(v7 - 8);
  uint64_t v109 = (uint64_t *)((char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v111 = sub_10000F214(&qword_100523188);
  __chkstk_darwin(v111);
  uint64_t v110 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100523190);
  __chkstk_darwin(v10 - 8);
  uint64_t v114 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_10000F214(&qword_100523198);
  __chkstk_darwin(v112);
  uint64_t v117 = (uint64_t)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000F214(&qword_1005231A0);
  __chkstk_darwin(v113);
  uint64_t v119 = (uint64_t)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v116 = (char *)&v97 - v15;
  __chkstk_darwin(v16);
  uint64_t v118 = (uint64_t)&v97 - v17;
  uint64_t v18 = sub_10000F214(&qword_1005231A8);
  __chkstk_darwin(v18 - 8);
  uint64_t v99 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_10000F214(&qword_1005231B0);
  __chkstk_darwin(v100);
  uint64_t v104 = (uint64_t)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000F214(&qword_1005231B8);
  __chkstk_darwin(v102);
  uint64_t v105 = (uint64_t)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000F214(&qword_1005231C0);
  __chkstk_darwin(v103);
  uint64_t v115 = (uint64_t)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v101 = (uint64_t)&v97 - v24;
  __chkstk_darwin(v25);
  uint64_t v125 = (uint64_t)&v97 - v26;
  uint64_t v27 = sub_10000F214(&qword_1005231C8);
  __chkstk_darwin(v27 - 8);
  id v29 = (char *)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000F214(&qword_1005231D0);
  __chkstk_darwin(v30);
  unint64_t v32 = (char *)&v97 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000F214(&qword_1005231D8);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v97 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v97 - v38;
  *(void *)id v29 = static VerticalAlignment.center.getter();
  *((void *)v29 + 1) = 0;
  v29[16] = 1;
  uint64_t v40 = sub_10000F214(&qword_1005231E0);
  sub_10017424C((uint64_t)a1, a2, (uint64_t)&v29[*(int *)(v40 + 44)]);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v29, (uint64_t)v32, &qword_1005231C8);
  uint64_t v42 = &v32[*(int *)(v30 + 36)];
  *(void *)uint64_t v42 = KeyPath;
  *((void *)v42 + 1) = 1;
  v42[16] = 0;
  sub_10000FBD8((uint64_t)v29, &qword_1005231C8);
  static Font.Weight.medium.getter();
  sub_100185B20();
  View.fontWeight(_:)();
  sub_10000FBD8((uint64_t)v32, &qword_1005231D0);
  uint64_t v106 = v36;
  uint64_t v107 = v34;
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  uint64_t v124 = v39;
  uint64_t v108 = v33;
  uint64_t v44 = v33;
  uint64_t v45 = (uint64_t)v99;
  v43(v39, v36, v44);
  *(void *)uint64_t v45 = static VerticalAlignment.center.getter();
  *(void *)(v45 + 8) = 0x4010000000000000;
  *(unsigned char *)(v45 + 16) = 0;
  uint64_t v46 = sub_10000F214(&qword_100523208);
  uint64_t v47 = v98;
  sub_100174718(v98, v45 + *(int *)(v46 + 44));
  char v48 = a2[184];
  if (v48) {
    uint64_t v49 = static Font.subheadline.getter();
  }
  else {
    uint64_t v49 = static Font.body.getter();
  }
  uint64_t v50 = v49;
  uint64_t v51 = swift_getKeyPath();
  uint64_t v52 = v104;
  sub_10000FB74(v45, v104, &qword_1005231A8);
  uint64_t v53 = (uint64_t *)(v52 + *(int *)(v100 + 36));
  *uint64_t v53 = v51;
  v53[1] = v50;
  sub_10000FBD8(v45, &qword_1005231A8);
  uint64_t v54 = self;
  id v55 = [v54 secondaryLabelColor];
  uint64_t v56 = Color.init(uiColor:)();
  uint64_t v57 = swift_getKeyPath();
  uint64_t v58 = v105;
  sub_10000FB74(v52, v105, &qword_1005231B0);
  uint64_t v59 = (uint64_t *)(v58 + *(int *)(v102 + 36));
  *uint64_t v59 = v57;
  v59[1] = v56;
  sub_10000FBD8(v52, &qword_1005231B0);
  uint64_t v60 = swift_getKeyPath();
  uint64_t v61 = v101;
  sub_10000FB74(v58, v101, &qword_1005231B8);
  uint64_t v62 = v61 + *(int *)(v103 + 36);
  *(void *)uint64_t v62 = v60;
  *(void *)(v62 + 8) = 1;
  *(unsigned char *)(v62 + 16) = 0;
  sub_10000FBD8(v58, &qword_1005231B8);
  sub_10000FC34(v61, v125, &qword_1005231C0);
  uint64_t v63 = static VerticalAlignment.center.getter();
  uint64_t v64 = (uint64_t)v109;
  *uint64_t v109 = v63;
  *(void *)(v64 + 8) = 0x4010000000000000;
  *(unsigned char *)(v64 + 16) = 0;
  uint64_t v65 = sub_10000F214(&qword_100523210);
  sub_100174C64((uint64_t)v47, v64 + *(int *)(v65 + 44));
  if (v48) {
    uint64_t v66 = static Font.subheadline.getter();
  }
  else {
    uint64_t v66 = static Font.body.getter();
  }
  uint64_t v67 = v66;
  uint64_t v68 = swift_getKeyPath();
  uint64_t v69 = v110;
  sub_10000FB74(v64, v110, &qword_100523180);
  uint64_t v70 = (uint64_t *)(v69 + *(int *)(v111 + 36));
  *uint64_t v70 = v68;
  v70[1] = v67;
  sub_10000FBD8(v64, &qword_100523180);
  sub_100185BE4();
  uint64_t v71 = (uint64_t)v114;
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8(v69, &qword_100523188);
  id v72 = [v54 secondaryLabelColor];
  uint64_t v73 = Color.init(uiColor:)();
  uint64_t v74 = swift_getKeyPath();
  uint64_t v75 = v117;
  sub_10000FB74(v71, v117, &qword_100523190);
  __n128 v76 = (uint64_t *)(v75 + *(int *)(v112 + 36));
  *__n128 v76 = v74;
  v76[1] = v73;
  sub_10000FBD8(v71, &qword_100523190);
  float32x4_t v78 = v120;
  uint64_t v77 = v121;
  uint64_t v79 = v122;
  (*(void (**)(char *, void, uint64_t))(v121 + 104))(v120, enum case for Image.Scale.small(_:), v122);
  uint64_t v80 = swift_getKeyPath();
  uint64_t v81 = (uint64_t)v116;
  long long v82 = (uint64_t *)&v116[*(int *)(v113 + 36)];
  uint64_t v83 = sub_10000F214(&qword_100523228);
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))((char *)v82 + *(int *)(v83 + 28), v78, v79);
  *long long v82 = v80;
  sub_10000FB74(v75, v81, &qword_100523198);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
  sub_10000FBD8(v75, &qword_100523198);
  uint64_t v84 = v81;
  uint64_t v85 = v118;
  sub_10000FC34(v84, v118, &qword_1005231A0);
  long long v86 = v106;
  uint64_t v87 = v107;
  uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
  uint64_t v89 = v108;
  v88(v106, v124, v108);
  uint64_t v90 = v125;
  uint64_t v91 = v115;
  sub_10000FB74(v125, v115, &qword_1005231C0);
  uint64_t v92 = v119;
  sub_10000FB74(v85, v119, &qword_1005231A0);
  char v93 = v123;
  v88(v123, v86, v89);
  uint64_t v94 = sub_10000F214(&qword_100523230);
  sub_10000FB74(v91, (uint64_t)&v93[*(int *)(v94 + 48)], &qword_1005231C0);
  sub_10000FB74(v92, (uint64_t)&v93[*(int *)(v94 + 64)], &qword_1005231A0);
  sub_10000FBD8(v85, &qword_1005231A0);
  sub_10000FBD8(v90, &qword_1005231C0);
  uint64_t v95 = *(void (**)(char *, uint64_t))(v87 + 8);
  v95(v124, v89);
  sub_10000FBD8(v92, &qword_1005231A0);
  sub_10000FBD8(v91, &qword_1005231C0);
  return ((uint64_t (*)(char *, uint64_t))v95)(v86, v89);
}

uint64_t sub_10017424C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v63 = a3;
  uint64_t v5 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v5 - 8);
  uint64_t v60 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100522E10);
  __chkstk_darwin(v7 - 8);
  uint64_t v62 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v60 - v10;
  __chkstk_darwin(v12);
  uint64_t v64 = (uint64_t)&v60 - v13;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v65 = v14;
  uint64_t v66 = v15;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v16 = Text.init<A>(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  char v21 = a2[184];
  uint64_t v61 = a2;
  if (v21) {
    static Font.headline.getter();
  }
  else {
    static Font.title3.getter();
  }
  uint64_t v22 = Text.font(_:)();
  uint64_t v24 = v23;
  char v26 = v25;
  uint64_t v28 = v27;
  swift_release();
  sub_100012FAC(v16, v18, v20 & 1);
  swift_bridgeObjectRelease();
  uint64_t v65 = v22;
  uint64_t v66 = v24;
  char v67 = v26 & 1;
  uint64_t v68 = v28;
  View.accessibilityIdentifier(_:)();
  sub_100012FAC(v22, v24, v26 & 1);
  swift_bridgeObjectRelease();
  sub_10000FC34((uint64_t)v11, v64, (uint64_t *)&unk_100522E10);
  id v29 = v61;
  if (*v61)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v35._uint64_t countAndFlagsBits = 0x203A686374614D28;
    v35._object = (void *)0xE800000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v35);
    sub_10000F214(&qword_10051F350);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_10043D4F0;
    uint64_t v37 = *((void *)v29 + 18);
    *(void *)(v36 + 56) = &type metadata for Double;
    *(void *)(v36 + 64) = &protocol witness table for Double;
    *(void *)(v36 + 32) = v37;
    v38._uint64_t countAndFlagsBits = String.init(format:_:)();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 41;
    v39._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v39);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v40 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v42 = v41;
    char v44 = v43 & 1;
    static Font.subheadline.getter();
    uint64_t v45 = Text.font(_:)();
    uint64_t v47 = v46;
    char v49 = v48;
    swift_release();
    char v50 = v49 & 1;
    sub_100012FAC(v40, v42, v44);
    swift_bridgeObjectRelease();
    uint64_t v65 = static Color.red.getter();
    uint64_t v31 = Text.foregroundStyle<A>(_:)();
    uint64_t v32 = v51;
    uint64_t v34 = v52;
    uint64_t v33 = v53 & 1;
    uint64_t v54 = v45;
    uint64_t v30 = 1;
    sub_100012FAC(v54, v47, v50);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000807A8(v31, v32, v33);
    swift_bridgeObjectRetain();
    sub_100012FAC(v31, v32, v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
  }
  uint64_t v55 = v64;
  uint64_t v56 = v62;
  sub_10000FB74(v64, v62, (uint64_t *)&unk_100522E10);
  uint64_t v57 = v63;
  sub_10000FB74(v56, v63, (uint64_t *)&unk_100522E10);
  uint64_t v58 = (void *)(v57 + *(int *)(sub_10000F214(&qword_1005232D8) + 48));
  *uint64_t v58 = 0;
  v58[1] = v30;
  v58[2] = v31;
  v58[3] = v32;
  v58[4] = v33;
  v58[5] = v34;
  sub_100185D3C(0, v30, v31, v32, v33, v34);
  sub_10000FBD8(v55, (uint64_t *)&unk_100522E10);
  sub_100185D8C(0, v30, v31, v32, v33, v34);
  return sub_10000FBD8(v56, (uint64_t *)&unk_100522E10);
}

uint64_t sub_100174718@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v3 = sub_10000F214((uint64_t *)&unk_100522E10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v54 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v53 = (char *)&v52 - v7;
  uint64_t v8 = sub_10000F214(&qword_1005232B0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v56 = (uint64_t)&v52 - v12;
  uint64_t v13 = sub_10000F214(&qword_100523268);
  __chkstk_darwin(v13 - 8);
  uint64_t v55 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v52 - v16;
  uint64_t v18 = a1[5];
  if (v18)
  {
    uint64_t v58 = a1[4];
    uint64_t v59 = v18;
    sub_1000317A0();
    uint64_t v52 = (void *)v3;
    swift_bridgeObjectRetain();
    uint64_t v19 = Text.init<A>(_:)();
    char v20 = v17;
    uint64_t v22 = v21;
    uint64_t v58 = v19;
    uint64_t v59 = v21;
    char v24 = v23 & 1;
    char v60 = v23 & 1;
    uint64_t v61 = v25;
    View.accessibilityIdentifier(_:)();
    uint64_t v26 = v22;
    uint64_t v17 = v20;
    sub_100012FAC(v19, v26, v24);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t, void *))(v4 + 56))(v20, 0, 1, v52);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))((char *)&v52 - v16, 1, 1, v3);
  }
  uint64_t v27 = a1[12];
  if (v27)
  {
    uint64_t v28 = a1[11];
    BOOL v29 = v18 == 0;
    if (v18) {
      uint64_t v30 = 10649826;
    }
    else {
      uint64_t v30 = 0;
    }
    if (v18) {
      uint64_t v31 = 0xA300000000000000;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v29) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = _swiftEmptyArrayStorage;
    }
    uint64_t v52 = v32;
    uint64_t v58 = v28;
    uint64_t v59 = v27;
    sub_1000317A0();
    swift_bridgeObjectRetain();
    uint64_t v33 = Text.init<A>(_:)();
    uint64_t v35 = v34;
    uint64_t v58 = v33;
    uint64_t v59 = v34;
    uint64_t v36 = v17;
    char v38 = v37 & 1;
    char v60 = v37 & 1;
    uint64_t v61 = v39;
    uint64_t v40 = (uint64_t)v53;
    View.accessibilityIdentifier(_:)();
    char v41 = v38;
    uint64_t v17 = v36;
    sub_100012FAC(v33, v35, v41);
    swift_bridgeObjectRelease();
    uint64_t v42 = v54;
    sub_10000FB74(v40, v54, (uint64_t *)&unk_100522E10);
    *uint64_t v10 = v30;
    v10[1] = v31;
    uint64_t v43 = (uint64_t)v52;
    void v10[2] = 0;
    v10[3] = v43;
    uint64_t v44 = sub_10000F214(&qword_1005232D0);
    sub_10000FB74(v42, (uint64_t)v10 + *(int *)(v44 + 48), (uint64_t *)&unk_100522E10);
    sub_10018172C(v30, v31, 0, v43);
    sub_10000FBD8(v40, (uint64_t *)&unk_100522E10);
    sub_10000FBD8(v42, (uint64_t *)&unk_100522E10);
    sub_100181770(v30, v31, 0, v43);
    uint64_t v45 = sub_10000F214(&qword_1005232B8);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v10, 0, 1, v45);
    uint64_t v46 = v56;
    sub_10000FC34((uint64_t)v10, v56, &qword_1005232B0);
  }
  else
  {
    uint64_t v47 = sub_10000F214(&qword_1005232B8);
    uint64_t v46 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v56, 1, 1, v47);
  }
  uint64_t v48 = v55;
  sub_10000FB74((uint64_t)v17, v55, &qword_100523268);
  sub_10000FB74(v46, (uint64_t)v10, &qword_1005232B0);
  uint64_t v49 = v57;
  sub_10000FB74(v48, v57, &qword_100523268);
  uint64_t v50 = sub_10000F214((uint64_t *)&unk_1005232C0);
  sub_10000FB74((uint64_t)v10, v49 + *(int *)(v50 + 48), &qword_1005232B0);
  sub_10000FBD8(v46, &qword_1005232B0);
  sub_10000FBD8((uint64_t)v17, &qword_100523268);
  sub_10000FBD8((uint64_t)v10, &qword_1005232B0);
  return sub_10000FBD8(v48, &qword_100523268);
}

uint64_t sub_100174C64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v115 = a2;
  uint64_t v3 = type metadata accessor for Locale();
  __chkstk_darwin(v3 - 8);
  uint64_t v103 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100523238);
  __chkstk_darwin(v5);
  uint64_t v104 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000F214(&qword_100523240);
  __chkstk_darwin(v111);
  uint64_t v112 = (uint64_t)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_10000F214(&qword_100523248);
  __chkstk_darwin(v105);
  uint64_t v9 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = sub_10000F214((uint64_t *)&unk_100522E10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v107 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_10000F214(&qword_100523250);
  __chkstk_darwin(v108);
  uint64_t v106 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_100523258);
  __chkstk_darwin(v15 - 8);
  uint64_t v110 = (uint64_t)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v109 = (char *)&v96 - v18;
  uint64_t v19 = sub_10000F214(&qword_100523260);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (uint64_t *)((char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  uint64_t v114 = (char *)&v96 - v23;
  uint64_t v24 = sub_10000F214(&qword_100523268);
  __chkstk_darwin(v24 - 8);
  uint64_t v113 = (uint64_t)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v28 = __chkstk_darwin(v26);
  BOOL v29 = (char *)&v96 - v27;
  uint64_t v30 = *(void *)(a1 + 120);
  if (v30)
  {
    uint64_t v31 = *(void *)(a1 + 104);
    uint64_t v102 = v21;
    uint64_t v101 = v11;
    uint64_t v100 = v9;
    uint64_t v96 = v5;
    uint64_t v99 = a1;
    if ((unint64_t)(v31 - 1) >= 3)
    {
      if (v31 == 4 || v31 == 6)
      {
        swift_bridgeObjectRetain();
        uint64_t v32 = static Color.orange.getter();
      }
      else
      {
        uint64_t v33 = self;
        swift_bridgeObjectRetain();
        id v34 = [v33 secondaryLabelColor:v96];
        uint64_t v32 = Color.init(uiColor:)();
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = static Color.red.getter();
    }
    uint64_t v124 = v32;
    uint64_t v35 = Text.foregroundStyle<A>(_:)();
    uint64_t v37 = v36;
    char v39 = v38;
    char v41 = v40;
    swift_bridgeObjectRelease();
    uint64_t v124 = v35;
    uint64_t v125 = v37;
    LOBYTE(v126) = v39 & 1;
    uint64_t v127 = v41;
    View.accessibilityIdentifier(_:)();
    swift_release();
    sub_100012FAC(v35, v37, v39 & 1);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v29, 0, 1, v101);
    uint64_t v21 = v102;
    uint64_t v9 = v100;
    a1 = v99;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v12 + 56))((char *)&v96 - v27, 1, 1, v11, v28);
  }
  sub_10000FC34(a1 + 48, (uint64_t)v120, &qword_100523270);
  sub_10000FC34((uint64_t)v120, (uint64_t)&v121, &qword_100523270);
  if (v122 == 255)
  {
    uint64_t v64 = sub_10000F214(&qword_100523278);
    uint64_t v63 = (uint64_t)v114;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v114, 1, 1, v64);
  }
  else
  {
    sub_10004ECF4(&v121, (uint64_t)&v123);
    uint64_t v42 = 10649826;
    if (!v30) {
      uint64_t v42 = 0;
    }
    uint64_t v99 = v42;
    unint64_t v43 = 0xA300000000000000;
    if (!v30) {
      unint64_t v43 = 0;
    }
    unint64_t v97 = v43;
    if (v30) {
      uint64_t v44 = _swiftEmptyArrayStorage;
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v98 = v44;
    sub_10004ECF4(&v123, (uint64_t)&v124);
    if (v128)
    {
      uint64_t v45 = v125;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v46._uint64_t countAndFlagsBits = 0;
      v46._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v46);
      Image.init(systemName:)();
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
      swift_release();
      v47._uint64_t countAndFlagsBits = 32;
      v47._object = (void *)0xE100000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v47);
      uint64_t v116 = v45;
      static Locale.autoupdatingCurrent.getter();
      sub_1000A23E0();
      FloatingPointFormatStyle.Percent.init(locale:)();
      sub_100013AA8(&qword_100523290, &qword_100523238);
      uint64_t v48 = Text.init<A>(_:format:)();
      uint64_t v49 = v29;
      uint64_t v51 = v50;
      char v53 = v52 & 1;
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
      sub_100012FAC(v48, v51, v53);
      swift_bridgeObjectRelease();
      v54._uint64_t countAndFlagsBits = 0;
      v54._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v54);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v55 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v57 = v56;
      uint64_t v116 = v55;
      uint64_t v117 = v56;
      char v59 = v58 & 1;
      char v118 = v58 & 1;
      uint64_t v119 = v60;
      uint64_t v61 = (uint64_t)v107;
      View.accessibilityIdentifier(_:)();
      sub_100012FAC(v55, v57, v59);
      BOOL v29 = v49;
      swift_bridgeObjectRelease();
      sub_10000FB74(v61, v112, (uint64_t *)&unk_100522E10);
      swift_storeEnumTagMultiPayload();
      sub_100185CB0();
      sub_10018546C((unint64_t *)&qword_1005232A0, (uint64_t *)&unk_100522E10);
      uint64_t v62 = (uint64_t)v109;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v61, (uint64_t *)&unk_100522E10);
      uint64_t v63 = (uint64_t)v114;
    }
    else
    {
      uint64_t v104 = v29;
      uint64_t v65 = v21;
      int v66 = v125;
      uint64_t v67 = v126;
      uint64_t v68 = v127;
      if (v127)
      {
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v69._uint64_t countAndFlagsBits = 0;
        v69._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v69);
        Image.init(_internalSystemName:)();
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
        swift_release();
        v70._uint64_t countAndFlagsBits = 32;
        v70._object = (void *)0xE100000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v70);
        LODWORD(v116) = v66;
        LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
        v71._uint64_t countAndFlagsBits = 32;
        v71._object = (void *)0xE100000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v71);
        v72._uint64_t countAndFlagsBits = v67;
        v72._object = v68;
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v72);
      }
      else
      {
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v82._uint64_t countAndFlagsBits = 0;
        v82._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v82);
        Image.init(_internalSystemName:)();
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
        swift_release();
        v83._uint64_t countAndFlagsBits = 32;
        v83._object = (void *)0xE100000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v83);
        LODWORD(v116) = v66;
        LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      }
      v73._uint64_t countAndFlagsBits = 0;
      v73._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v73);
      LocalizedStringKey.init(stringInterpolation:)();
      uint64_t v74 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v76 = v75;
      uint64_t v116 = v74;
      uint64_t v117 = v75;
      char v78 = v77 & 1;
      char v118 = v77 & 1;
      uint64_t v119 = v79;
      uint64_t v80 = (uint64_t)v107;
      View.accessibilityIdentifier(_:)();
      uint64_t v81 = v80;
      sub_100012FAC(v74, v76, v78);
      swift_bridgeObjectRelease();
      sub_10000FB74(v80, (uint64_t)v9, (uint64_t *)&unk_100522E10);
      swift_storeEnumTagMultiPayload();
      sub_10018546C((unint64_t *)&qword_1005232A0, (uint64_t *)&unk_100522E10);
      uint64_t v84 = (uint64_t)v106;
      _ConditionalContent<>.init(storage:)();
      uint64_t v21 = v65;
      sub_10000FBD8(v81, (uint64_t *)&unk_100522E10);
      sub_10000FB74(v84, v112, &qword_100523250);
      swift_storeEnumTagMultiPayload();
      sub_100185CB0();
      sub_10018546C((unint64_t *)&qword_1005232A0, (uint64_t *)&unk_100522E10);
      uint64_t v85 = v84;
      uint64_t v62 = (uint64_t)v109;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v85, &qword_100523250);
      uint64_t v63 = (uint64_t)v114;
      BOOL v29 = v104;
    }
    uint64_t v86 = v110;
    sub_10000FB74(v62, v110, &qword_100523258);
    uint64_t v87 = v99;
    uint64_t v88 = v97;
    *uint64_t v21 = v99;
    v21[1] = v88;
    uint64_t v89 = (uint64_t)v98;
    v21[2] = 0;
    v21[3] = v89;
    uint64_t v90 = sub_10000F214(&qword_1005232A8);
    sub_10000FB74(v86, (uint64_t)v21 + *(int *)(v90 + 48), &qword_100523258);
    sub_10018172C(v87, v88, 0, v89);
    sub_10000FBD8(v62, &qword_100523258);
    sub_10000FBD8(v86, &qword_100523258);
    sub_100181770(v87, v88, 0, v89);
    uint64_t v91 = sub_10000F214(&qword_100523278);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v21, 0, 1, v91);
    sub_10000FC34((uint64_t)v21, v63, &qword_100523260);
  }
  uint64_t v92 = v113;
  sub_10000FB74((uint64_t)v29, v113, &qword_100523268);
  sub_10000FB74(v63, (uint64_t)v21, &qword_100523260);
  uint64_t v93 = v115;
  sub_10000FB74(v92, v115, &qword_100523268);
  uint64_t v94 = sub_10000F214((uint64_t *)&unk_100523280);
  sub_10000FB74((uint64_t)v21, v93 + *(int *)(v94 + 48), &qword_100523260);
  sub_10000FBD8(v63, &qword_100523260);
  sub_10000FBD8((uint64_t)v29, &qword_100523268);
  sub_10000FBD8((uint64_t)v21, &qword_100523260);
  return sub_10000FBD8(v92, &qword_100523268);
}

uint64_t sub_100175B58@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[9];
  *(_OWORD *)&v12[128] = v1[8];
  *(_OWORD *)&v12[144] = v3;
  *(_OWORD *)&v12[160] = v1[10];
  *(_OWORD *)&v12[169] = *(_OWORD *)((char *)v1 + 169);
  long long v4 = v1[5];
  *(_OWORD *)&v12[64] = v1[4];
  *(_OWORD *)&v12[80] = v4;
  long long v5 = v1[7];
  *(_OWORD *)&v12[96] = v1[6];
  *(_OWORD *)&v12[112] = v5;
  long long v6 = v1[1];
  *(_OWORD *)uint64_t v12 = *v1;
  *(_OWORD *)&v12[16] = v6;
  long long v7 = v1[3];
  *(_OWORD *)&v12[32] = v1[2];
  *(_OWORD *)&v12[48] = v7;
  v13[8] = *(_OWORD *)&v12[136];
  v13[9] = *(_OWORD *)&v12[152];
  v13[10] = *(_OWORD *)&v12[168];
  v13[4] = *(_OWORD *)&v12[72];
  v13[5] = *(_OWORD *)&v12[88];
  v13[6] = *(_OWORD *)&v12[104];
  v13[7] = *(_OWORD *)&v12[120];
  v13[0] = *(_OWORD *)&v12[8];
  v13[1] = *(_OWORD *)&v12[24];
  v13[2] = *(_OWORD *)&v12[40];
  v13[3] = *(_OWORD *)&v12[56];
  v10[6] = *(_OWORD *)&v12[104];
  v10[7] = *(_OWORD *)&v12[120];
  uint64_t v11 = *(void *)&v12[136];
  void v10[2] = *(_OWORD *)&v12[40];
  v10[3] = *(_OWORD *)&v12[56];
  v10[4] = *(_OWORD *)&v12[72];
  v10[5] = *(_OWORD *)&v12[88];
  v10[0] = *(_OWORD *)&v12[8];
  v10[1] = *(_OWORD *)&v12[24];
  sub_100184208((uint64_t)v12);
  swift_bridgeObjectRelease();
  *(void *)a1 = static HorizontalAlignment.leading.getter();
  *(void *)(a1 + 8) = 0x4000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v8 = sub_10000F214(&qword_100523178);
  sub_100173740(v10, v12, (char *)(a1 + *(int *)(v8 + 44)));
  return sub_10017FF68((uint64_t)v13);
}

uint64_t sub_100175C8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  long long v3 = (int *)sub_10000F214(&qword_100522F78);
  __chkstk_darwin(v3);
  long long v5 = (uint64_t *)((char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v60 - v7;
  uint64_t v9 = sub_10000F214(&qword_100522F80);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_100522F88);
  __chkstk_darwin(v64);
  uint64_t v13 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100522F90);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v66 = *(_OWORD *)(a1 + 184);
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v67 == 1)
  {
    uint64_t v18 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v62 = v19;
    uint64_t v63 = v18;
    v60[3] = v20;
    uint64_t v61 = v21;
    uint64_t v22 = swift_allocObject();
    long long v23 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(v22 + 176) = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(v22 + 192) = v23;
    *(void *)(v22 + 208) = *(void *)(a1 + 192);
    long long v24 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v22 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v22 + 128) = v24;
    long long v25 = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(v22 + 144) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v22 + 160) = v25;
    long long v26 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v22 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v22 + 64) = v26;
    long long v27 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v22 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v22 + 96) = v27;
    long long v28 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v22 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v22 + 32) = v28;
    *long long v5 = swift_getKeyPath();
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    BOOL v29 = (char *)v5 + v3[9];
    strcpy(v29, "com.apple.Maps");
    v29[15] = -18;
    uint64_t v30 = (id *(**)())((char *)v5 + v3[10]);
    *uint64_t v30 = sub_100184154;
    v30[1] = (id *(*)())v22;
    sub_1001827AC(a1);
    uint64_t v31 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v32 = (char *)v5 + v3[11];
    *(void *)uint64_t v32 = v31;
    *((void *)v32 + 1) = v33;
    v32[16] = v34 & 1;
    *((void *)v32 + 3) = v35;
    sub_10000FC34((uint64_t)v5, (uint64_t)v8, &qword_100522F78);
    sub_100013AA8(&qword_100522F98, &qword_100522F78);
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8((uint64_t)v8, &qword_100522F78);
    char v36 = static Edge.Set.vertical.getter();
    EdgeInsets.init(_all:)();
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    sub_10000FB74((uint64_t)v11, (uint64_t)v13, &qword_100522F80);
    uint64_t v45 = &v13[*(int *)(v64 + 36)];
    *uint64_t v45 = v36;
    *((void *)v45 + 1) = v38;
    *((void *)v45 + 2) = v40;
    *((void *)v45 + 3) = v42;
    *((void *)v45 + 4) = v44;
    v45[40] = 0;
    sub_10000FBD8((uint64_t)v11, &qword_100522F80);
    char v46 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    sub_10000FB74((uint64_t)v13, (uint64_t)v17, &qword_100522F88);
    uint64_t v55 = &v17[*(int *)(v14 + 36)];
    *uint64_t v55 = v46;
    *((void *)v55 + 1) = v48;
    *((void *)v55 + 2) = v50;
    *((void *)v55 + 3) = v52;
    *((void *)v55 + 4) = v54;
    v55[40] = 0;
    sub_10000FBD8((uint64_t)v13, &qword_100522F88);
    uint64_t v56 = v65;
    sub_10000FC34((uint64_t)v17, v65, &qword_100522F90);
    uint64_t v57 = 0;
    uint64_t v58 = v56;
  }
  else
  {
    uint64_t v57 = 1;
    uint64_t v58 = v65;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v58, v57, 1, v14);
}

id *sub_100176154(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 16) muid];
  dispatch thunk of CustomStringConvertible.description.getter();
  id v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 captureUserAction:6050 target:145 value:v2];

  return sub_100173348();
}

uint64_t sub_10017624C(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100522EA8);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100522EB0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v4 = static HorizontalAlignment.leading.getter();
  *((void *)v4 + 1) = 0;
  v4[16] = 0;
  uint64_t v8 = sub_10000F214(&qword_100522EB8);
  sub_1001763E8(a1, &v4[*(int *)(v8 + 44)]);
  uint64_t v9 = static Alignment.leading.getter();
  sub_1002264B0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v7, 0.0, 1, 0.0, 1, v9, v10);
  sub_10000FBD8((uint64_t)v4, &qword_100522EA8);
  sub_100183C7C();
  View.accessibilityIdentifier(_:)();
  return sub_10000FBD8((uint64_t)v7, &qword_100522EB0);
}

uint64_t sub_1001763E8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v61 = sub_10000F214(&qword_100522ED0);
  uint64_t v3 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v53 - v7;
  uint64_t v9 = static VerticalAlignment.center.getter();
  sub_10017681C(a1, (uint64_t)v72);
  v73[432] = 0;
  memcpy(&v73[7], v72, 0x1A9uLL);
  *(void *)Swift::String v71 = v9;
  *(void *)&v71[8] = 0;
  v71[16] = 0;
  memcpy(&v71[17], v73, 0x1B0uLL);
  v71[449] = 0;
  uint64_t v10 = swift_allocObject();
  long long v11 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v10 + 176) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v10 + 192) = v11;
  *(void *)(v10 + 208) = *(void *)(a1 + 192);
  long long v12 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v10 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v10 + 128) = v12;
  long long v13 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v10 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v10 + 160) = v13;
  long long v14 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 64) = v14;
  long long v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v10 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v10 + 96) = v15;
  long long v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v16;
  sub_1001827AC(a1);
  sub_10000F214(&qword_100522ED8);
  sub_100183D28();
  uint64_t v64 = 1;
  View.onTapGesture(count:perform:)();
  swift_release();
  memcpy(v74, v71, 0x1C2uLL);
  sub_100183DEC((uint64_t)v74);
  *(_OWORD *)Swift::String v71 = *(_OWORD *)(a1 + 184);
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v69 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (v70 == 1)
  {
    uint64_t v64 = *(void *)(a1 + 8);
    id v25 = (id)v64;
    unsigned __int8 v26 = static Edge.Set.horizontal.getter();
    unsigned __int8 v27 = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v62 = v28;
    uint64_t v63 = v29;
    uint64_t v69 = v30;
    uint64_t v19 = v31;
    unsigned __int8 v32 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v21 = v33;
    uint64_t v22 = v34;
    uint64_t v23 = v35;
    uint64_t v24 = v36;
    uint64_t v17 = v26;
    uint64_t v18 = v27;
    uint64_t v20 = v32;
  }
  uint64_t v54 = v18;
  uint64_t v55 = v17;
  uint64_t v65 = v20;
  uint64_t v66 = v21;
  uint64_t v67 = v22;
  uint64_t v68 = v23;
  uint64_t v58 = v3;
  char v59 = v5;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v38 = v5;
  uint64_t v57 = v8;
  uint64_t v39 = v61;
  v37(v5, v8, v61);
  uint64_t v40 = v62;
  uint64_t v41 = v69;
  uint64_t v42 = v19;
  uint64_t v43 = v60;
  v37(v60, v38, v39);
  uint64_t v44 = &v43[*(int *)(sub_10000F214(&qword_100522F08) + 48)];
  uint64_t v46 = v63;
  id v45 = (id)v64;
  uint64_t v47 = v54;
  uint64_t v48 = v55;
  *(void *)uint64_t v44 = v64;
  *((void *)v44 + 1) = v48;
  *((void *)v44 + 2) = v47;
  *((void *)v44 + 3) = v40;
  uint64_t v69 = v41;
  *((void *)v44 + 4) = v41;
  *((void *)v44 + 5) = v42;
  uint64_t v56 = v42;
  *((void *)v44 + 6) = v46;
  *((void *)v44 + 7) = 0;
  uint64_t v49 = v66;
  *((void *)v44 + 8) = v65;
  *((void *)v44 + 9) = v49;
  uint64_t v50 = v68;
  *((void *)v44 + 10) = v67;
  *((void *)v44 + 11) = v50;
  *((void *)v44 + 12) = v24;
  v44[104] = 0;
  sub_10010DE70(v45);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v58 + 8);
  v51(v57, v39);
  sub_10010DE60(v45);
  return ((uint64_t (*)(char *, uint64_t))v51)(v59, v39);
}

uint64_t sub_10017681C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 120);
  long long v5 = *(_OWORD *)(a1 + 152);
  v22[8] = *(_OWORD *)(a1 + 136);
  v22[9] = v5;
  v22[10] = *(_OWORD *)(a1 + 168);
  long long v6 = *(_OWORD *)(a1 + 56);
  long long v7 = *(_OWORD *)(a1 + 88);
  v22[4] = *(_OWORD *)(a1 + 72);
  v22[5] = v7;
  v22[6] = *(_OWORD *)(a1 + 104);
  v22[7] = v4;
  long long v8 = *(_OWORD *)(a1 + 24);
  v22[0] = *(_OWORD *)(a1 + 8);
  v22[1] = v8;
  v22[2] = *(_OWORD *)(a1 + 40);
  v22[3] = v6;
  sub_10017FEA0((uint64_t)v22);
  swift_bridgeObjectRelease();
  id v9 = [*(id *)&v22[0] _searchResultPhotoCarousel];
  if (!v9)
  {
    unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  uint64_t v10 = v9;
  sub_10000F214(&qword_100522F70);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  uint64_t v13 = static HorizontalAlignment.leading.getter();
  sub_100176BF0((char *)a1, v12 > 2, v11, (uint64_t)v15);
  sub_10017FF68((uint64_t)v22);
  swift_bridgeObjectRelease();
  __src[392] = 0;
  memcpy(&__src[7], v15, 0x181uLL);
  v17[0] = v13;
  v17[1] = 0;
  LOBYTE(v17[2]) = 0;
  memcpy((char *)&v17[2] + 1, __src, 0x188uLL);
  memcpy((void *)a2, v17, 0x199uLL);
  char v18 = 0;
  *(void *)(a2 + 416) = 0;
  *(unsigned char *)(a2 + 424) = 0;
  v19[0] = v13;
  v19[1] = 0;
  char v20 = 0;
  memcpy(v21, __src, sizeof(v21));
  sub_100183F18((uint64_t)v17);
  return sub_100183FEC((uint64_t)v19);
}

id *sub_1001769F8(uint64_t a1)
{
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v8)
  {
    id v9 = [*(id *)(a1 + 16) muid];
    dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v2 = self;
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 captureUserAction:6050 target:145 value:v3];

    return sub_100173348();
  }
  else
  {
    [*(id *)(a1 + 16) muid];
    dispatch thunk of CustomStringConvertible.description.getter();
    long long v5 = self;
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 captureUserAction:489 target:145 value:v6];

    __chkstk_darwin(v7);
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    return (id *)swift_release();
  }
}

uint64_t sub_100176BF0@<X0>(char *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = *(_OWORD *)(a1 + 120);
  long long v9 = *(_OWORD *)(a1 + 152);
  long long v90 = *(_OWORD *)(a1 + 136);
  long long v91 = v9;
  long long v92 = *(_OWORD *)(a1 + 168);
  long long v10 = *(_OWORD *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 88);
  long long v86 = *(_OWORD *)(a1 + 72);
  long long v87 = v11;
  long long v12 = *(_OWORD *)(a1 + 104);
  long long v89 = v8;
  long long v88 = v12;
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v82 = *(_OWORD *)(a1 + 8);
  long long v83 = v13;
  long long v14 = *(_OWORD *)(a1 + 40);
  long long v85 = v10;
  long long v84 = v14;
  sub_10017FEA0((uint64_t)&v82);
  char v51 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v49 = v16;
  uint64_t v50 = v15;
  uint64_t v47 = v18;
  uint64_t v48 = v17;
  char v46 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v44 = v20;
  uint64_t v45 = v19;
  uint64_t v42 = v22;
  uint64_t v43 = v21;
  char v41 = static Edge.Set.bottom.getter();
  if ((a2 & 1) == 0)
  {
    *(_OWORD *)uint64_t v57 = *(_OWORD *)(a1 + 184);
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.getter();
  }
  *(_OWORD *)&v78[119] = v89;
  *(_OWORD *)&v78[135] = v90;
  *(_OWORD *)&v78[151] = v91;
  *(_OWORD *)&v78[167] = v92;
  *(_OWORD *)&v78[55] = v85;
  *(_OWORD *)&v78[71] = v86;
  *(_OWORD *)&v78[87] = v87;
  *(_OWORD *)&v78[103] = v88;
  *(_OWORD *)&v78[7] = v82;
  *(_OWORD *)&v78[23] = v83;
  char v23 = *a1;
  *(_OWORD *)&v78[39] = v84;
  char v79 = 0;
  char v80 = 0;
  EdgeInsets.init(_all:)();
  uint64_t v52 = v24;
  uint64_t v53 = v25;
  uint64_t v54 = v26;
  uint64_t v55 = v27;
  char v81 = 0;
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = a3;
    unsigned __int8 v28 = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v36 = v29;
    uint64_t v37 = v30;
    uint64_t v38 = v32;
    uint64_t v39 = v31;
    uint64_t v33 = v28;
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v33 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
  }
  *(_OWORD *)((char *)&__src[16] + 1) = *(_OWORD *)&v78[128];
  *(_OWORD *)((char *)&__src[18] + 1) = *(_OWORD *)&v78[144];
  *(_OWORD *)((char *)&__src[20] + 1) = *(_OWORD *)&v78[160];
  *(_OWORD *)((char *)&__src[8] + 1) = *(_OWORD *)&v78[64];
  *(_OWORD *)((char *)&__src[10] + 1) = *(_OWORD *)&v78[80];
  *(_OWORD *)((char *)&__src[12] + 1) = *(_OWORD *)&v78[96];
  *(_OWORD *)((char *)&__src[14] + 1) = *(_OWORD *)&v78[112];
  *(_OWORD *)((char *)__src + 1) = *(_OWORD *)v78;
  *(_OWORD *)((char *)&__src[2] + 1) = *(_OWORD *)&v78[16];
  *(_OWORD *)((char *)&__src[4] + 1) = *(_OWORD *)&v78[32];
  char v34 = v81;
  LOBYTE(__src[0]) = v23;
  __src[22] = *(void *)&v78[175];
  *(_OWORD *)((char *)&__src[6] + 1) = *(_OWORD *)&v78[48];
  LOBYTE(__src[23]) = 0;
  LOBYTE(__src[24]) = v51;
  __src[25] = v50;
  __src[26] = v49;
  __src[27] = v48;
  __src[28] = v47;
  LOBYTE(__src[29]) = 0;
  LOBYTE(__src[30]) = v46;
  __src[31] = v45;
  __src[32] = v44;
  __src[33] = v43;
  __src[34] = v42;
  LOBYTE(__src[35]) = 0;
  LOBYTE(__src[36]) = v41;
  __src[37] = v52;
  __src[38] = v53;
  __src[39] = v54;
  __src[40] = v55;
  LOBYTE(__src[41]) = v81;
  memcpy((void *)a4, __src, 0x149uLL);
  *(void *)(a4 + 336) = v40;
  *(void *)(a4 + 344) = v33;
  *(void *)(a4 + 352) = v36;
  *(void *)(a4 + 360) = v39;
  *(void *)(a4 + 368) = v38;
  *(void *)(a4 + 376) = v37;
  *(unsigned char *)(a4 + 384) = 0;
  sub_100184208((uint64_t)__src);
  *(_OWORD *)&v57[129] = *(_OWORD *)&v78[128];
  *(_OWORD *)&v57[145] = *(_OWORD *)&v78[144];
  *(_OWORD *)uint64_t v58 = *(_OWORD *)&v78[160];
  *(_OWORD *)&v57[65] = *(_OWORD *)&v78[64];
  *(_OWORD *)&v57[81] = *(_OWORD *)&v78[80];
  *(_OWORD *)&v57[97] = *(_OWORD *)&v78[96];
  *(_OWORD *)&v57[113] = *(_OWORD *)&v78[112];
  *(_OWORD *)&v57[1] = *(_OWORD *)v78;
  *(_OWORD *)&v57[17] = *(_OWORD *)&v78[16];
  *(_OWORD *)&v57[33] = *(_OWORD *)&v78[32];
  v57[0] = v23;
  *(void *)&v58[15] = *(void *)&v78[175];
  *(_OWORD *)&v57[49] = *(_OWORD *)&v78[48];
  char v59 = 0;
  char v60 = v51;
  uint64_t v61 = v50;
  uint64_t v62 = v49;
  uint64_t v63 = v48;
  uint64_t v64 = v47;
  char v65 = 0;
  char v66 = v46;
  uint64_t v67 = v45;
  uint64_t v68 = v44;
  uint64_t v69 = v43;
  uint64_t v70 = v42;
  char v71 = 0;
  char v72 = v41;
  uint64_t v73 = v52;
  uint64_t v74 = v53;
  uint64_t v75 = v54;
  uint64_t v76 = v55;
  char v77 = v34;
  return sub_1001842D0((uint64_t)v57);
}

uint64_t sub_100176FB4@<X0>(uint64_t *a1@<X8>)
{
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  return sub_1002F9DE0(v3, 0, (uint64_t (*)(void))sub_100183C6C, (void (*)(uint64_t))sub_100183C74, a1, 0.0, 0.0, 0.0, 0.0);
}

uint64_t sub_10017709C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v77 = a1;
  uint64_t v3 = sub_10000F214(&qword_100522FA0);
  __chkstk_darwin(v3 - 8);
  uint64_t v73 = &v60[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10000F214(&qword_100522FA8);
  __chkstk_darwin(v5 - 8);
  uint64_t v74 = &v60[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v76 = sub_10000F214(&qword_100522FB0);
  __chkstk_darwin(v76);
  uint64_t v75 = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v8 = *(void **)(v1 + 8);
  long long v9 = *(_OWORD *)(v1 + 160);
  long long v97 = *(_OWORD *)(v1 + 144);
  long long v98 = v9;
  uint64_t v99 = *(void *)(v1 + 176);
  long long v10 = *(_OWORD *)(v1 + 96);
  long long v93 = *(_OWORD *)(v1 + 80);
  long long v94 = v10;
  long long v11 = *(_OWORD *)(v1 + 128);
  long long v95 = *(_OWORD *)(v1 + 112);
  long long v96 = v11;
  long long v12 = *(_OWORD *)(v1 + 32);
  long long v89 = *(_OWORD *)(v1 + 16);
  long long v90 = v12;
  long long v13 = *(_OWORD *)(v1 + 64);
  long long v91 = *(_OWORD *)(v1 + 48);
  long long v92 = v13;
  id v79 = v8;
  uint64_t v72 = static VerticalAlignment.center.getter();
  sub_100177704((uint64_t)&v80);
  uint64_t v14 = v80;
  uint64_t v15 = v81;
  uint64_t v70 = v81;
  uint64_t v71 = v80;
  uint64_t v17 = v82[0];
  uint64_t v16 = v82[1];
  uint64_t v68 = v82[1];
  uint64_t v69 = v82[0];
  uint64_t v18 = v82[2];
  uint64_t v67 = v82[2];
  uint64_t v19 = v82[4];
  uint64_t v64 = v82[3];
  uint64_t v65 = v82[4];
  uint64_t v62 = v82[6];
  uint64_t v63 = v82[5];
  int v61 = LOWORD(v82[7]);
  int v78 = BYTE2(v82[7]);
  int v20 = static Edge.Set.trailing.getter();
  char v21 = v20;
  int v66 = v20;
  EdgeInsets.init(_all:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  char v101 = v78;
  char v100 = 0;
  char v30 = *(unsigned char *)v2;
  *(void *)&long long v102 = v14;
  *((void *)&v102 + 1) = v15;
  *(void *)&long long v103 = v17;
  *((void *)&v103 + 1) = v16;
  *(void *)&long long v104 = v18;
  uint64_t v31 = v63;
  uint64_t v32 = v64;
  *((void *)&v104 + 1) = v64;
  *(void *)&long long v105 = v19;
  *((void *)&v105 + 1) = v63;
  uint64_t v33 = v62;
  *(void *)&long long v106 = v62;
  LOWORD(v16) = v61;
  WORD4(v106) = v61;
  BYTE10(v106) = v78;
  LOBYTE(v107) = v21;
  *((void *)&v107 + 1) = v22;
  *(void *)&v108[0] = v24;
  *((void *)&v108[0] + 1) = v26;
  *(void *)&v108[1] = v28;
  BYTE8(v108[1]) = 0;
  LOBYTE(v109[0]) = v30;
  LOBYTE(v15) = v30;
  v109[9] = v97;
  v110[0] = v98;
  *((void *)&v109[0] + 1) = v79;
  *(void *)&v110[1] = v99;
  v109[5] = v93;
  v109[6] = v94;
  v109[7] = v95;
  v109[8] = v96;
  v109[1] = v89;
  v109[2] = v90;
  v109[3] = v91;
  v109[4] = v92;
  BYTE8(v110[1]) = 1;
  v111[4] = v106;
  v111[5] = v107;
  v111[6] = v108[0];
  *(_OWORD *)((char *)&v111[6] + 9) = *(_OWORD *)((char *)v108 + 9);
  v111[0] = v102;
  v111[1] = v103;
  v111[2] = v104;
  v111[3] = v105;
  *(_OWORD *)((char *)&v111[18] + 9) = *(_OWORD *)((char *)v110 + 9);
  v111[10] = v90;
  v111[11] = v91;
  v111[8] = v109[0];
  v111[9] = v89;
  v111[14] = v94;
  v111[15] = v95;
  v111[12] = v92;
  v111[13] = v93;
  v111[17] = v97;
  v111[18] = v98;
  v111[16] = v96;
  memcpy(v112, v111, sizeof(v112));
  v113[0] = v15;
  long long v123 = v97;
  long long v124 = v98;
  id v114 = v79;
  uint64_t v125 = v99;
  long long v119 = v93;
  long long v120 = v94;
  long long v121 = v95;
  long long v122 = v96;
  long long v115 = v89;
  long long v116 = v90;
  long long v117 = v91;
  long long v118 = v92;
  char v126 = 1;
  sub_100184394((uint64_t)&v102, (void (*)(void, void, void, void, void, void, void, void, void, int))sub_10018415C);
  sub_100184208((uint64_t)v109);
  sub_100184208(v2);
  sub_1001842D0((uint64_t)v113);
  v127[0] = v71;
  v127[1] = v70;
  v127[2] = v69;
  v127[3] = v68;
  v127[4] = v67;
  v127[5] = v32;
  v127[6] = v65;
  v127[7] = v31;
  v127[8] = v33;
  __int16 v128 = v16;
  char v129 = v78;
  char v130 = v66;
  uint64_t v131 = v23;
  uint64_t v132 = v25;
  uint64_t v133 = v27;
  uint64_t v134 = v29;
  char v135 = 0;
  sub_100184394((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, int))sub_1001843F4);
  v136[320] = 0;
  memcpy(&v136[7], v112, 0x139uLL);
  LOBYTE(v31) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  v136[328] = 0;
  uint64_t v80 = v72;
  uint64_t v81 = 0;
  LOBYTE(v82[0]) = 0;
  memcpy((char *)v82 + 1, v136, 0x140uLL);
  char v83 = v31;
  uint64_t v84 = v35;
  uint64_t v85 = v37;
  uint64_t v86 = v39;
  uint64_t v87 = v41;
  char v88 = 0;
  sub_10000F214(&qword_100522FB8);
  sub_10018449C();
  uint64_t v42 = (uint64_t)v73;
  View.accessibilityIdentifier(_:)();
  sub_10018453C((uint64_t)v111);
  uint64_t v43 = static Alignment.leading.getter();
  uint64_t v44 = v74;
  sub_10022650C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v74, 0.0, 1, 0.0, 1, v43, v45);
  sub_10000FBD8(v42, &qword_100522FA0);
  id v46 = [self tertiarySystemFillColor];
  uint64_t v47 = Color.init(uiColor:)();
  uint64_t v48 = static Alignment.center.getter();
  uint64_t v50 = v49;
  char v51 = v75;
  sub_10000FB74((uint64_t)v44, (uint64_t)v75, &qword_100522FA8);
  uint64_t v52 = &v51[*(int *)(v76 + 36)];
  *(void *)uint64_t v52 = v47;
  *((_WORD *)v52 + 4) = 256;
  *((void *)v52 + 2) = v48;
  *((void *)v52 + 3) = v50;
  sub_10000FBD8((uint64_t)v44, &qword_100522FA8);
  uint64_t v53 = swift_allocObject();
  long long v54 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v53 + 144) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v53 + 160) = v54;
  *(_OWORD *)(v53 + 176) = *(_OWORD *)(v2 + 160);
  *(void *)(v53 + 192) = *(void *)(v2 + 176);
  long long v55 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v53 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v53 + 96) = v55;
  long long v56 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v53 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v53 + 128) = v56;
  long long v57 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v53 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v53 + 32) = v57;
  long long v58 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v53 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v53 + 64) = v58;
  sub_100184208(v2);
  sub_1001846D0();
  View.onTapGesture(count:perform:)();

  swift_release();
  return sub_10000FBD8((uint64_t)v51, &qword_100522FB0);
}

void sub_100177704(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(v1 + 8) _searchResultPhotoCarousel];
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v4 = v3;
  sub_10000F214(&qword_100522F70);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
LABEL_10:
    swift_getKeyPath();
    sub_10000F214(&qword_10051EF58);
    State.init(wrappedValue:)();
    sub_10000F214(&qword_100523010);
    sub_100184898();
    sub_1000ED860();
    _ConditionalContent<>.init(storage:)();
    goto LABEL_11;
  }
LABEL_4:
  if ((v5 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_unknownObjectRetain();
LABEL_7:
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_unknownObjectRetain();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    swift_retain();
    sub_10000F214(&qword_100523010);
    sub_100184898();
    sub_1000ED860();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_unknownObjectRelease();
LABEL_11:
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v10;
    *(void *)(a1 + 64) = v11;
    *(_WORD *)(a1 + 72) = v12;
    *(unsigned char *)(a1 + 74) = v13;
    return;
  }
  __break(1u);
}

id *sub_100177990(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 16) muid];
  dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 captureUserAction:488 target:143 value:v2];

  return sub_100173348();
}

uint64_t sub_100177A88@<X0>(uint64_t a1@<X8>)
{
  return sub_10017709C(a1);
}

id sub_100177AEC()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for GeoLookupResultActionButtonLayoutBuilder(0));

  return [v0 init];
}

uint64_t sub_100177B24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v2 = type metadata accessor for GeoLookupResultViewContainer(0);
  uint64_t v3 = v2 - 8;
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v38 = *(void *)(v39 + 64);
  __chkstk_darwin(v2);
  uint64_t v37 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100522DB0);
  __chkstk_darwin(v5 - 8);
  long long v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100522DB8);
  __chkstk_darwin(v8 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100522DC0);
  uint64_t v11 = v10 - 8;
  double v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1003010FC(*(void *)(v1 + *(int *)(v3 + 40)), *(void *)(v1 + *(int *)(v3 + 36)), v12);
  uint64_t v36 = v15;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  unint64_t v21 = v20;
  swift_bridgeObjectRetain();
  sub_100177F2C(v15, v17, v19, v21, v1, (uint64_t)v7);
  uint64_t v22 = static Alignment.center.getter();
  uint64_t v23 = v35;
  sub_100226568(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v35, 0.0, 1, 530.0, 0, v22, v24);
  sub_10000FBD8((uint64_t)v7, &qword_100522DB0);
  type metadata accessor for GeoLookupResultActionButtonLayoutBuilder(0);
  sub_100184848(&qword_100522DC8, (void (*)(uint64_t))type metadata accessor for GeoLookupResultActionButtonLayoutBuilder);
  uint64_t v25 = (void *)StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v26 = v41;
  sub_10000FB74(v23, (uint64_t)v14, &qword_100522DB8);
  uint64_t v27 = &v14[*(int *)(v11 + 44)];
  *(void *)uint64_t v27 = v26;
  v27[8] = 2;
  sub_10000FBD8(v23, &qword_100522DB8);
  uint64_t v28 = v37;
  sub_100180F38(v1, v37);
  unint64_t v29 = (*(unsigned __int8 *)(v39 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v30 = swift_allocObject();
  sub_100180DEC(v28, v30 + v29, type metadata accessor for GeoLookupResultViewContainer);
  uint64_t v31 = v40;
  sub_10000FB74((uint64_t)v14, v40, &qword_100522DC0);
  uint64_t v32 = (void (**)())(v31 + *(int *)(sub_10000F214(&qword_100522DD0) + 36));
  *uint64_t v32 = sub_1001826F8;
  v32[1] = (void (*)())v30;
  v32[2] = 0;
  v32[3] = 0;
  return sub_10000FBD8((uint64_t)v14, &qword_100522DC0);
}

void sub_100177F2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v34 = a6;
  uint64_t v11 = sub_10000F214(&qword_100522DD8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100522DE0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = a4 >> 1;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v17 != a3 && (a4 >> 1) - a3 == 1)
  {
    if (v17 > a3)
    {
      uint64_t v18 = (long long *)(a2 + 176 * a3);
      long long v19 = v18[9];
      long long v44 = v18[8];
      long long v45 = v19;
      long long v46 = v18[10];
      long long v20 = v18[5];
      long long v40 = v18[4];
      long long v41 = v20;
      long long v21 = v18[7];
      long long v42 = v18[6];
      long long v43 = v21;
      long long v22 = v18[1];
      long long v36 = *v18;
      long long v37 = v22;
      long long v23 = v18[3];
      long long v38 = v18[2];
      long long v39 = v23;
      char v24 = *(unsigned char *)(a5 + *(int *)(type metadata accessor for GeoLookupResultViewContainer(0) + 20));
      char v35 = 0;
      sub_10017FEA0((uint64_t)&v36);
      sub_10017FEA0((uint64_t)&v36);
      State.init(wrappedValue:)();
      uint64_t v25 = *((void *)&v47[0] + 1);
      *(_OWORD *)((char *)&v47[7] + 8) = v43;
      *(_OWORD *)((char *)&v47[8] + 8) = v44;
      *(_OWORD *)((char *)&v47[9] + 8) = v45;
      *(_OWORD *)((char *)&v47[10] + 8) = v46;
      *(_OWORD *)((char *)&v47[3] + 8) = v39;
      *(_OWORD *)((char *)&v47[4] + 8) = v40;
      *(_OWORD *)((char *)&v47[5] + 8) = v41;
      *(_OWORD *)((char *)&v47[6] + 8) = v42;
      *(_OWORD *)((char *)v47 + 8) = v36;
      char v26 = v47[0];
      LOBYTE(v47[0]) = v24;
      *(_OWORD *)((char *)&v47[1] + 8) = v37;
      *(_OWORD *)((char *)&v47[2] + 8) = v38;
      BYTE8(v47[11]) = v26;
      uint64_t v48 = v25;
      *((void *)v16 + 24) = v25;
      long long v27 = v47[7];
      *((_OWORD *)v16 + 6) = v47[6];
      *((_OWORD *)v16 + 7) = v27;
      long long v28 = v47[9];
      *((_OWORD *)v16 + 8) = v47[8];
      *((_OWORD *)v16 + 9) = v28;
      long long v29 = v47[3];
      *((_OWORD *)v16 + 2) = v47[2];
      *((_OWORD *)v16 + 3) = v29;
      long long v30 = v47[5];
      *((_OWORD *)v16 + 4) = v47[4];
      *((_OWORD *)v16 + 5) = v30;
      long long v31 = v47[1];
      *(_OWORD *)uint64_t v16 = v47[0];
      *((_OWORD *)v16 + 1) = v31;
      long long v32 = v47[11];
      *((_OWORD *)v16 + 10) = v47[10];
      *((_OWORD *)v16 + 11) = v32;
      swift_storeEnumTagMultiPayload();
      sub_1001827AC((uint64_t)v47);
      sub_100182758();
      sub_100013AA8(&qword_100522DF8, &qword_100522DD8);
      _ConditionalContent<>.init(storage:)();
      sub_100182880((uint64_t)&v36);
      sub_100182944((uint64_t)v47);
      return;
    }
    goto LABEL_9;
  }
  *(void *)uint64_t v13 = static HorizontalAlignment.leading.getter();
  *((void *)v13 + 1) = 0;
  v13[16] = 0;
  uint64_t v33 = sub_10000F214(&qword_100522DE8);
  sub_100178290(a1, a2, a3, a4, a5, (uint64_t)&v13[*(int *)(v33 + 44)]);
  sub_10000FB74((uint64_t)v13, (uint64_t)v16, &qword_100522DD8);
  swift_storeEnumTagMultiPayload();
  sub_100182758();
  sub_100013AA8(&qword_100522DF8, &qword_100522DD8);
  _ConditionalContent<>.init(storage:)();
  sub_10000FBD8((uint64_t)v13, &qword_100522DD8);
}

uint64_t sub_100178290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v93 = a3;
  uint64_t v91 = a2;
  uint64_t v89 = a1;
  uint64_t v99 = a6;
  uint64_t v6 = type metadata accessor for GeoLookupResultViewContainer(0);
  uint64_t v92 = *(void *)(v6 - 8);
  uint64_t v90 = *(void *)(v92 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v88 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100522E00);
  __chkstk_darwin(v8 - 8);
  uint64_t v87 = (uint64_t *)((char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v98 = sub_10000F214(&qword_100522E08) - 8;
  __chkstk_darwin(v98);
  uint64_t v96 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v97 = (uint64_t)&v80 - v12;
  uint64_t v13 = sub_10000F214((uint64_t *)&unk_100522E10);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_100518BD0);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  long long v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_100522E20);
  __chkstk_darwin(v20 - 8);
  uint64_t v81 = (uint64_t)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000F214(&qword_100522E28) - 8;
  __chkstk_darwin(v82);
  long long v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000F214(&qword_100522E30) - 8;
  __chkstk_darwin(v83);
  uint64_t v25 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_100522E38) - 8;
  __chkstk_darwin(v86);
  uint64_t v84 = (uint64_t)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v85 = (uint64_t)&v80 - v28;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v29 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v31 = v30;
  uint64_t v100 = v29;
  uint64_t v101 = v30;
  char v33 = v32 & 1;
  LOBYTE(v102) = v32 & 1;
  uint64_t v103 = v34;
  View.accessibilityIdentifier(_:)();
  sub_100012FAC(v29, v31, v33);
  swift_bridgeObjectRelease();
  uint64_t v35 = static Font.title3.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v15, (uint64_t)v19, (uint64_t *)&unk_100522E10);
  long long v37 = (uint64_t *)&v19[*(int *)(v17 + 44)];
  *long long v37 = KeyPath;
  v37[1] = v35;
  sub_10000FBD8((uint64_t)v15, (uint64_t *)&unk_100522E10);
  uint64_t v38 = static Alignment.leading.getter();
  uint64_t v39 = v81;
  sub_1002265C4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v81, 0.0, 1, 0.0, 1, v38, v40);
  sub_10000FBD8((uint64_t)v19, &qword_100518BD0);
  LOBYTE(v35) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_10000FB74(v39, (uint64_t)v23, &qword_100522E20);
  uint64_t v49 = &v23[*(int *)(v82 + 44)];
  *uint64_t v49 = v35;
  *((void *)v49 + 1) = v42;
  *((void *)v49 + 2) = v44;
  *((void *)v49 + 3) = v46;
  *((void *)v49 + 4) = v48;
  v49[40] = 0;
  sub_10000FBD8(v39, &qword_100522E20);
  LOBYTE(v35) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  sub_10000FB74((uint64_t)v23, (uint64_t)v25, &qword_100522E28);
  long long v58 = &v25[*(int *)(v83 + 44)];
  *long long v58 = v35;
  *((void *)v58 + 1) = v51;
  *((void *)v58 + 2) = v53;
  *((void *)v58 + 3) = v55;
  *((void *)v58 + 4) = v57;
  v58[40] = 0;
  sub_10000FBD8((uint64_t)v23, &qword_100522E28);
  LOBYTE(v35) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v60 = v59;
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v67 = v84;
  sub_10000FB74((uint64_t)v25, v84, &qword_100522E30);
  uint64_t v68 = v67 + *(int *)(v86 + 44);
  *(unsigned char *)uint64_t v68 = v35;
  *(void *)(v68 + 8) = v60;
  *(void *)(v68 + 16) = v62;
  *(void *)(v68 + 24) = v64;
  *(void *)(v68 + 32) = v66;
  *(unsigned char *)(v68 + 40) = 0;
  sub_10000FBD8((uint64_t)v25, &qword_100522E30);
  uint64_t v69 = v85;
  sub_10000FC34(v67, v85, &qword_100522E38);
  uint64_t v70 = static HorizontalAlignment.leading.getter();
  uint64_t v71 = (uint64_t)v87;
  *uint64_t v87 = v70;
  *(void *)(v71 + 8) = 0x4000000000000000;
  *(unsigned char *)(v71 + 16) = 0;
  sub_10000F214(&qword_100522E40);
  uint64_t v100 = v89;
  uint64_t v101 = v91;
  uint64_t v102 = v93;
  uint64_t v103 = v94;
  swift_getKeyPath();
  uint64_t v72 = v88;
  sub_100180F38(v95, v88);
  unint64_t v73 = (*(unsigned __int8 *)(v92 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
  uint64_t v74 = swift_allocObject();
  sub_100180DEC(v72, v74 + v73, type metadata accessor for GeoLookupResultViewContainer);
  swift_unknownObjectRetain();
  sub_10000F214(&qword_100522E48);
  sub_100013AA8(&qword_100522E50, &qword_100522E48);
  sub_10018162C();
  sub_100182CB8();
  ForEach<>.init(_:id:content:)();
  uint64_t v75 = v96;
  sub_10000FB74(v71, v96, &qword_100522E00);
  *(_WORD *)(v75 + *(int *)(v98 + 44)) = 256;
  sub_10000FBD8(v71, &qword_100522E00);
  uint64_t v76 = v97;
  sub_10000FC34(v75, v97, &qword_100522E08);
  sub_10000FB74(v69, v67, &qword_100522E38);
  sub_10000FB74(v76, v75, &qword_100522E08);
  uint64_t v77 = v99;
  sub_10000FB74(v67, v99, &qword_100522E38);
  uint64_t v78 = sub_10000F214(&qword_100522E60);
  sub_10000FB74(v75, v77 + *(int *)(v78 + 48), &qword_100522E08);
  sub_10000FBD8(v76, &qword_100522E08);
  sub_10000FBD8(v69, &qword_100522E38);
  sub_10000FBD8(v75, &qword_100522E08);
  return sub_10000FBD8(v67, &qword_100522E38);
}

void sub_100178B10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GeoLookupResultViewContainer(0);
  type metadata accessor for GeoLookupResultActionButtonLayoutBuilder(0);
  sub_100184848(&qword_100522DC8, (void (*)(uint64_t))type metadata accessor for GeoLookupResultActionButtonLayoutBuilder);
  id v3 = (id)StateObject.wrappedValue.getter();
  sub_100178C60(*(void *)(a1 + *(int *)(v2 + 28)));
}

uint64_t sub_100178BE8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100178C60(uint64_t a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16) == 1)
  {
    uint64_t v6 = *(void **)&v1[OBJC_IVAR____TtC6Tamale40GeoLookupResultActionButtonLayoutBuilder_helper];
    long long v7 = *(_OWORD *)(a1 + 176);
    v18[8] = *(_OWORD *)(a1 + 160);
    v18[9] = v7;
    v18[10] = *(_OWORD *)(a1 + 192);
    long long v8 = *(_OWORD *)(a1 + 112);
    _OWORD v18[4] = *(_OWORD *)(a1 + 96);
    v18[5] = v8;
    long long v9 = *(_OWORD *)(a1 + 144);
    v18[6] = *(_OWORD *)(a1 + 128);
    v18[7] = v9;
    long long v10 = *(_OWORD *)(a1 + 48);
    v18[0] = *(_OWORD *)(a1 + 32);
    v18[1] = v10;
    long long v11 = *(_OWORD *)(a1 + 80);
    v18[2] = *(_OWORD *)(a1 + 64);
    v18[3] = v11;
    sub_10017FEA0((uint64_t)v18);
    swift_bridgeObjectRelease();
    id v12 = *(id *)&v18[0];
    sub_10017FF68((uint64_t)v18);
    [v6 setMapItem:v12];

    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = 0;
    v14[3] = 0;
    v14[4] = v1;
    uint64_t v15 = v1;
    sub_100064D5C((uint64_t)v5, (uint64_t)&unk_100522B28, (uint64_t)v14);
    return swift_release();
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)&v18[0] = _swiftEmptyArrayStorage;
    uint64_t v17 = v1;
    return static Published.subscript.setter();
  }
}

uint64_t sub_100178E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 64) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100178EC4;
  return sub_100179144();
}

uint64_t sub_100178EC4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100178FC4, 0, 0);
}

uint64_t sub_100178FC4()
{
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  *(void *)(v0 + 80) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100179064, v2, v1);
}

uint64_t sub_100179064()
{
  swift_release();
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v1 = v0[9];
    swift_getKeyPath();
    swift_getKeyPath();
    v0[6] = v1;
    static Published.subscript.setter();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectWeakDestroy();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100179144()
{
  v1[16] = v0;
  sub_10000F214((uint64_t *)&unk_100524ED0);
  v1[17] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for ActionBarItem(0);
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  return _swift_task_switch(sub_100179250, 0, 0);
}

uint64_t sub_100179250()
{
  id v1 = [*(id *)(*(void *)(v0 + 128) + OBJC_IVAR____TtC6Tamale40GeoLookupResultActionButtonLayoutBuilder_helper) buildButtonLayout];
  sub_10000F734(0, &qword_100522B10);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 184) = v2;

  if (v2 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 192) = v40;
    if (v40) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    *(void *)(v0 + 192) = v3;
    if (v3)
    {
LABEL_3:
      unint64_t v4 = 0;
      uint64_t v5 = _swiftEmptyArrayStorage;
      long long v43 = xmmword_100449310;
      while (1)
      {
        *(void *)(v0 + 200) = v5;
        uint64_t v6 = *(void *)(v0 + 184);
        if ((v6 & 0xC000000000000001) != 0)
        {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v4 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_23;
          }
          id v7 = *(id *)(v6 + 8 * v4 + 32);
        }
        long long v8 = v7;
        *(void *)(v0 + 208) = v7;
        *(void *)(v0 + 216) = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        self;
        uint64_t v9 = swift_dynamicCastObjCClass();
        *(void *)(v0 + 224) = v9;
        if (v9)
        {
          long long v10 = (void *)v9;
          id v11 = v8;
          if ([v10 shouldShowMenu])
          {
            *(void *)(v0 + 16) = v0;
            *(void *)(v0 + 56) = v0 + 120;
            *(void *)(v0 + 24) = sub_100179744;
            uint64_t v39 = swift_continuation_init();
            *(void *)(v0 + 80) = _NSConcreteStackBlock;
            *(void *)(v0 + 88) = 0x40000000;
            *(void *)(v0 + 96) = sub_10017A550;
            *(void *)(v0 + 104) = &unk_1004EE550;
            *(void *)(v0 + 112) = v39;
            [v10 buildMenuItemViewModelsWithUpdateDelegate:0 completion:v0 + 80];
            return _swift_continuation_await(v0 + 16);
          }
        }
        id v12 = *(void **)(v0 + 208);
        uint64_t v13 = *(void *)(v0 + 160);
        uint64_t v15 = *(void *)(v0 + 136);
        uint64_t v14 = *(int **)(v0 + 144);
        uint64_t v44 = *(void **)(v0 + 128);
        id v16 = [v12 titleText:v43];
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        id v20 = [v12 symbolName];
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;

        uint64_t v24 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v15, 1, 1, v24);
        uint64_t v25 = swift_allocObject();
        *(void *)(v25 + 16) = v44;
        *(void *)(v25 + 24) = v12;
        uint64_t v26 = v14[16];
        *(void *)uint64_t v13 = v17;
        *(void *)(v13 + 8) = v19;
        *(void *)(v13 + 16) = v21;
        *(void *)(v13 + 24) = v23;
        *(unsigned char *)(v13 + 32) = 2;
        *(_OWORD *)(v13 + 40) = v43;
        *(_WORD *)(v13 + 56) = 1;
        *(unsigned char *)(v13 + v14[15]) = 0;
        uint64_t v27 = (uint64_t (**)())(v13 + v14[12]);
        *uint64_t v27 = sub_100048CB8;
        v27[1] = 0;
        uint64_t v28 = (id (**)())(v13 + v14[13]);
        *uint64_t v28 = sub_10017F99C;
        v28[1] = (id (*)())v25;
        uint64_t v29 = (void *)(v13 + v14[14]);
        *uint64_t v29 = 0;
        v29[1] = 0;
        *(void *)(v13 + v26) = 0;
        sub_10000FC34(v15, v13 + v14[11], (uint64_t *)&unk_100524ED0);
        id v30 = v12;
        id v31 = v44;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v5 = *(void **)(v0 + 200);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v5 = (void *)sub_1003289A4(0, v5[2] + 1, 1, *(void *)(v0 + 200));
        }
        unint64_t v34 = v5[2];
        unint64_t v33 = v5[3];
        if (v34 >= v33 >> 1) {
          uint64_t v5 = (void *)sub_1003289A4(v33 > 1, v34 + 1, 1, (unint64_t)v5);
        }
        uint64_t v36 = *(void *)(v0 + 152);
        uint64_t v35 = *(void *)(v0 + 160);
        v5[2] = v34 + 1;
        sub_100180DEC(v35, (uint64_t)v5+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v34, type metadata accessor for ActionBarItem);
        uint64_t v37 = *(void *)(v0 + 216);
        uint64_t v38 = *(void *)(v0 + 192);

        if (v37 == v38) {
          goto LABEL_26;
        }
        unint64_t v4 = *(void *)(v0 + 216);
      }
    }
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
LABEL_26:
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void *))(v0 + 8);
  return v41(v5);
}

uint64_t sub_100179744()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 232) = v1;
  if (v1) {
    unint64_t v2 = sub_10017A0F0;
  }
  else {
    unint64_t v2 = sub_100179854;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100179854(uint64_t a1)
{
  unint64_t v2 = *(void *)(v1 + 120);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    a1 = swift_bridgeObjectRelease();
    uint64_t v89 = v1 + 120;
    if (v3) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v5 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v89 = v1 + 120;
  if (!v3) {
    goto LABEL_15;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    return _swift_continuation_await(a1);
  }
  uint64_t v4 = 0;
  unint64_t v91 = v2 & 0xC000000000000001;
  uint64_t v5 = _swiftEmptyArrayStorage;
  unint64_t v93 = v2;
  uint64_t v90 = v3;
  do
  {
    unint64_t v97 = (unint64_t)v5;
    if (v91) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v2 + 8 * v4 + 32);
    }
    id v7 = v6;
    uint64_t v8 = *(void *)(v1 + 224);
    uint64_t v95 = *(void **)(v1 + 208);
    uint64_t v9 = *(void *)(v1 + 176);
    uint64_t v11 = *(void *)(v1 + 136);
    long long v10 = *(int **)(v1 + 144);
    id v12 = [v6 title];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    id v16 = [v7 image];
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 1, 1, v17);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v8;
    *(void *)(v18 + 24) = v7;
    uint64_t v19 = v10[16];
    *(void *)uint64_t v9 = v13;
    *(void *)(v9 + 8) = v15;
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 24) = 0xE000000000000000;
    *(unsigned char *)(v9 + 32) = 2;
    *(void *)(v9 + 40) = v16;
    *(void *)(v9 + 48) = 1;
    *(_WORD *)(v9 + 56) = 1;
    *(unsigned char *)(v9 + v10[15]) = 0;
    id v20 = (uint64_t (**)())(v9 + v10[12]);
    char *v20 = sub_100048CB8;
    v20[1] = 0;
    uint64_t v21 = (id (**)())(v9 + v10[13]);
    *uint64_t v21 = sub_10017FE88;
    v21[1] = (id (*)())v18;
    uint64_t v22 = (void *)(v9 + v10[14]);
    *uint64_t v22 = 0;
    v22[1] = 0;
    *(void *)(v9 + v19) = 0;
    sub_10000FC34(v11, v9 + v10[11], (uint64_t *)&unk_100524ED0);
    id v23 = v95;
    id v24 = v7;
    uint64_t v5 = (void *)v97;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = (void *)sub_1003289A4(0, *(void *)(v97 + 16) + 1, 1, v97);
    }
    unint64_t v26 = v5[2];
    unint64_t v25 = v5[3];
    unint64_t v2 = v93;
    if (v26 >= v25 >> 1) {
      uint64_t v5 = (void *)sub_1003289A4(v25 > 1, v26 + 1, 1, (unint64_t)v5);
    }
    ++v4;
    uint64_t v27 = *(void *)(v1 + 176);
    uint64_t v28 = *(void *)(v1 + 152);
    v5[2] = v26 + 1;
    sub_100180DEC(v27, (uint64_t)v5+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v26, type metadata accessor for ActionBarItem);
  }
  while (v90 != v4);
LABEL_16:
  uint64_t v29 = *(void **)(v1 + 208);
  uint64_t v30 = *(void *)(v1 + 168);
  id v31 = *(int **)(v1 + 144);
  swift_bridgeObjectRelease();
  id v32 = [v29 titleText];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  id v36 = [v29 symbolName];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  uint64_t v40 = v30 + v31[11];
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56);
  uint64_t v94 = v41;
  v92(v40, 1, 1);
  uint64_t v42 = v31[16];
  *(void *)uint64_t v30 = v33;
  *(void *)(v30 + 8) = v35;
  *(void *)(v30 + 16) = v37;
  *(void *)(v30 + 24) = v39;
  *(unsigned char *)(v30 + 32) = 2;
  *(_OWORD *)(v30 + 40) = xmmword_100449310;
  *(_WORD *)(v30 + 56) = 1;
  *(unsigned char *)(v30 + v31[15]) = 0;
  long long v43 = (uint64_t (**)())(v30 + v31[12]);
  *long long v43 = sub_100048CB8;
  v43[1] = 0;
  uint64_t v44 = (void *)(v30 + v31[13]);
  *uint64_t v44 = nullsub_2;
  v44[1] = 0;
  uint64_t v45 = (void *)(v30 + v31[14]);
  *uint64_t v45 = 0;
  v45[1] = 0;
  *(void *)(v30 + v42) = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v47 = *(void *)(v1 + 200);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_42:
  }
    unint64_t v47 = sub_1003289A4(0, *(void *)(v47 + 16) + 1, 1, v47);
  unint64_t v49 = *(void *)(v47 + 16);
  unint64_t v48 = *(void *)(v47 + 24);
  if (v49 >= v48 >> 1) {
    unint64_t v47 = sub_1003289A4(v48 > 1, v49 + 1, 1, v47);
  }
  uint64_t v50 = *(void **)(v1 + 208);
  uint64_t v51 = *(void *)(v1 + 168);
  uint64_t v52 = *(void *)(v1 + 152);
  *(void *)(v47 + 16) = v49 + 1;
  sub_100180DEC(v51, v47+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(void *)(v52 + 72) * v49, type metadata accessor for ActionBarItem);

  while (1)
  {
    uint64_t v53 = *(void *)(v1 + 216);
    uint64_t v54 = *(void *)(v1 + 192);

    if (v53 == v54) {
      break;
    }
    unint64_t v55 = *(void *)(v1 + 216);
    *(void *)(v1 + 200) = v47;
    uint64_t v56 = *(void *)(v1 + 184);
    if ((v56 & 0xC000000000000001) != 0)
    {
      id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v55 >= *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_41;
      }
      id v57 = *(id *)(v56 + 8 * v55 + 32);
    }
    long long v58 = v57;
    *(void *)(v1 + 208) = v57;
    *(void *)(v1 + 216) = v55 + 1;
    if (__OFADD__(v55, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    self;
    uint64_t v59 = swift_dynamicCastObjCClass();
    *(void *)(v1 + 224) = v59;
    if (v59)
    {
      uint64_t v60 = (void *)v59;
      id v61 = v58;
      if ([v60 shouldShowMenu])
      {
        *(void *)(v1 + 16) = v1;
        *(void *)(v1 + 56) = v89;
        *(void *)(v1 + 24) = sub_100179744;
        uint64_t v88 = swift_continuation_init();
        *(void *)(v1 + 80) = _NSConcreteStackBlock;
        *(void *)(v1 + 88) = 0x40000000;
        *(void *)(v1 + 96) = sub_10017A550;
        *(void *)(v1 + 104) = &unk_1004EE550;
        *(void *)(v1 + 112) = v88;
        [v60 buildMenuItemViewModelsWithUpdateDelegate:0 completion:v1 + 80];
        a1 = v1 + 16;
        return _swift_continuation_await(a1);
      }
    }
    uint64_t v62 = *(void **)(v1 + 208);
    uint64_t v63 = *(void *)(v1 + 160);
    uint64_t v65 = *(void *)(v1 + 136);
    uint64_t v64 = *(int **)(v1 + 144);
    uint64_t v96 = *(void **)(v1 + 128);
    id v66 = [v62 titleText];
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v69 = v68;

    id v70 = [v62 symbolName];
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v72;

    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v92)(v65, 1, 1, v94);
    uint64_t v74 = swift_allocObject();
    *(void *)(v74 + 16) = v96;
    *(void *)(v74 + 24) = v62;
    uint64_t v75 = v64[16];
    *(void *)uint64_t v63 = v67;
    *(void *)(v63 + 8) = v69;
    *(void *)(v63 + 16) = v71;
    *(void *)(v63 + 24) = v73;
    *(unsigned char *)(v63 + 32) = 2;
    *(_OWORD *)(v63 + 40) = xmmword_100449310;
    *(_WORD *)(v63 + 56) = 1;
    *(unsigned char *)(v63 + v64[15]) = 0;
    uint64_t v76 = (uint64_t (**)())(v63 + v64[12]);
    *uint64_t v76 = sub_100048CB8;
    v76[1] = 0;
    uint64_t v77 = (id (**)())(v63 + v64[13]);
    *uint64_t v77 = sub_10017F99C;
    v77[1] = (id (*)())v74;
    uint64_t v78 = (void *)(v63 + v64[14]);
    void *v78 = 0;
    v78[1] = 0;
    *(void *)(v63 + v75) = 0;
    sub_10000FC34(v65, v63 + v64[11], (uint64_t *)&unk_100524ED0);
    id v79 = v62;
    id v80 = v96;
    char v81 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v47 = *(void *)(v1 + 200);
    if ((v81 & 1) == 0) {
      unint64_t v47 = sub_1003289A4(0, *(void *)(v47 + 16) + 1, 1, *(void *)(v1 + 200));
    }
    unint64_t v83 = *(void *)(v47 + 16);
    unint64_t v82 = *(void *)(v47 + 24);
    if (v83 >= v82 >> 1) {
      unint64_t v47 = sub_1003289A4(v82 > 1, v83 + 1, 1, v47);
    }
    uint64_t v85 = *(void *)(v1 + 152);
    uint64_t v84 = *(void *)(v1 + 160);
    *(void *)(v47 + 16) = v83 + 1;
    sub_100180DEC(v84, v47+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(void *)(v85 + 72) * v83, type metadata accessor for ActionBarItem);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v86 = *(uint64_t (**)(unint64_t))(v1 + 8);
  return v86(v47);
}

uint64_t sub_10017A0F0()
{
  uint64_t v1 = *(void **)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 232);
  swift_willThrow();
  uint64_t v41 = v2;

  swift_errorRelease();
  while (1)
  {
    uint64_t v3 = *(void **)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v6 = *(void *)(v0 + 136);
    uint64_t v5 = *(int **)(v0 + 144);
    uint64_t v42 = *(void **)(v0 + 128);
    id v7 = [v3 titleText:v41];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    id v11 = [v3 symbolName];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v42;
    *(void *)(v16 + 24) = v3;
    uint64_t v17 = v5[16];
    *(void *)uint64_t v4 = v8;
    *(void *)(v4 + 8) = v10;
    *(void *)(v4 + 16) = v12;
    *(void *)(v4 + 24) = v14;
    *(unsigned char *)(v4 + 32) = 2;
    *(_OWORD *)(v4 + 40) = xmmword_100449310;
    *(_WORD *)(v4 + 56) = 1;
    *(unsigned char *)(v4 + v5[15]) = 0;
    uint64_t v18 = (uint64_t (**)())(v4 + v5[12]);
    *uint64_t v18 = sub_100048CB8;
    v18[1] = 0;
    uint64_t v19 = (id (**)())(v4 + v5[13]);
    *uint64_t v19 = sub_10017F99C;
    v19[1] = (id (*)())v16;
    id v20 = (void *)(v4 + v5[14]);
    void *v20 = 0;
    v20[1] = 0;
    *(void *)(v4 + v17) = 0;
    sub_10000FC34(v6, v4 + v5[11], (uint64_t *)&unk_100524ED0);
    id v21 = v3;
    id v22 = v42;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = *(void *)(v0 + 200);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v24 = sub_1003289A4(0, *(void *)(v24 + 16) + 1, 1, *(void *)(v0 + 200));
    }
    unint64_t v26 = *(void *)(v24 + 16);
    unint64_t v25 = *(void *)(v24 + 24);
    if (v26 >= v25 >> 1) {
      unint64_t v24 = sub_1003289A4(v25 > 1, v26 + 1, 1, v24);
    }
    uint64_t v28 = *(void *)(v0 + 152);
    uint64_t v27 = *(void *)(v0 + 160);
    *(void *)(v24 + 16) = v26 + 1;
    sub_100180DEC(v27, v24+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v26, type metadata accessor for ActionBarItem);
    uint64_t v29 = *(void *)(v0 + 216);
    uint64_t v30 = *(void *)(v0 + 192);

    if (v29 == v30) {
      break;
    }
    unint64_t v32 = *(void *)(v0 + 216);
    *(void *)(v0 + 200) = v24;
    uint64_t v33 = *(void *)(v0 + 184);
    if ((v33 & 0xC000000000000001) != 0)
    {
      id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v32 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_22;
      }
      id v31 = *(id *)(v33 + 8 * v32 + 32);
    }
    uint64_t v34 = v31;
    *(void *)(v0 + 208) = v31;
    *(void *)(v0 + 216) = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
LABEL_22:
      __break(1u);
      return _swift_continuation_await(v31);
    }
    self;
    uint64_t v35 = swift_dynamicCastObjCClass();
    *(void *)(v0 + 224) = v35;
    if (v35)
    {
      id v36 = (void *)v35;
      id v37 = v34;
      if ([v36 shouldShowMenu])
      {
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 56) = v0 + 120;
        *(void *)(v0 + 24) = sub_100179744;
        uint64_t v40 = swift_continuation_init();
        *(void *)(v0 + 80) = _NSConcreteStackBlock;
        *(void *)(v0 + 88) = 0x40000000;
        *(void *)(v0 + 96) = sub_10017A550;
        *(void *)(v0 + 104) = &unk_1004EE550;
        *(void *)(v0 + 112) = v40;
        [v36 buildMenuItemViewModelsWithUpdateDelegate:0 completion:v0 + 80];
        id v31 = (id)(v0 + 16);
        return _swift_continuation_await(v31);
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v38(v24);
}

uint64_t sub_10017A550(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000F214(&qword_10051F3B0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_10000F734(0, &qword_100522B18);
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return _swift_continuation_throwingResume(v3);
  }
}

id sub_10017A62C(uint64_t a1)
{
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    uint64_t v3 = v2;
    id result = *(id *)(a1 + OBJC_IVAR____TtC6Tamale40GeoLookupResultActionButtonLayoutBuilder_helper);
    uint64_t v5 = "performActionFromPlaceActionRowItemViewModel:";
    return [result v5:v3];
  }
  self;
  id result = (id)swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v5 = "performSingleVendorSelectionAction";
    return [result v5:v3];
  }
  return result;
}

id sub_10017A83C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GeoLookupResultActionButtonLayoutBuilder(0);
  return [super dealloc];
}

uint64_t sub_10017A8F8()
{
  return type metadata accessor for GeoLookupResultActionButtonLayoutBuilder(0);
}

uint64_t type metadata accessor for GeoLookupResultActionButtonLayoutBuilder(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100522A40);
}

void sub_10017A920()
{
  sub_10017A9BC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10017A9BC()
{
  if (!qword_100522A58)
  {
    sub_10000F69C(&qword_100522A60);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100522A58);
    }
  }
}

unint64_t sub_10017AA1C()
{
  unint64_t result = qword_100522A68;
  if (!qword_100522A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522A68);
  }
  return result;
}

uint64_t sub_10017AA70@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for GeoLookupResultActionButtonLayoutBuilder(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10017AAB0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10017AD78(a1, (uint64_t)&v36);
  uint64_t v4 = v36;
  uint64_t v5 = v37;
  char v6 = v38;
  uint64_t v34 = v39;
  uint64_t v35 = v40;
  char v7 = v41;
  uint64_t v9 = v42;
  uint64_t v8 = v43;
  char v10 = v44;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v12 = 1;
  if (v11 >= 6)
  {
    sub_10017AFC8(a1, (uint64_t)&v36);
    uint64_t v13 = 1;
    uint64_t v12 = v36;
    uint64_t v14 = v37;
    uint64_t v15 = v38;
    uint64_t v16 = v39;
    uint64_t v17 = v40;
    uint64_t v18 = v41;
    uint64_t v19 = v42;
    uint64_t v20 = v43;
    char v21 = v44;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
  }
  uint64_t v26 = v20;
  uint64_t v27 = v12;
  uint64_t v28 = v14;
  char v29 = v15;
  uint64_t v30 = v16;
  uint64_t v31 = v17;
  char v32 = v18;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  uint64_t v33 = v8;
  *(unsigned char *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v34;
  *(void *)(a2 + 48) = v35;
  *(unsigned char *)(a2 + 56) = v7;
  *(void *)(a2 + 64) = v9;
  *(void *)(a2 + 72) = v8;
  *(unsigned char *)(a2 + 80) = v10;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = v13;
  *(void *)(a2 + 104) = v12;
  *(void *)(a2 + 112) = v14;
  *(void *)(a2 + 120) = v15;
  *(void *)(a2 + 128) = v16;
  *(void *)(a2 + 136) = v17;
  *(void *)(a2 + 144) = v18;
  *(void *)(a2 + 152) = v19;
  *(void *)(a2 + 160) = v20;
  *(unsigned char *)(a2 + 168) = v21;
  uint64_t v22 = v19;
  char v23 = v21;
  char v25 = v21;
  swift_unknownObjectRetain();
  sub_10016180C(v5, v6);
  swift_unknownObjectRetain();
  sub_10016180C(v35, v7);
  swift_unknownObjectRetain();
  sub_10016180C(v33, v10);
  sub_100185A74(0, v13, v27, v28, v29, v30, v31, v32, v22, v26, v23);
  sub_1001859D0(0, v13, v27, v28, v29, v30, v31, v32, v22, v26, v25);
  swift_unknownObjectRelease();
  sub_100161890(v5, v6);
  swift_unknownObjectRelease();
  sub_100161890(v35, v7);
  swift_unknownObjectRelease();

  return sub_100161890(v33, v10);
}

unint64_t sub_10017AD78@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result;
  if (!(result >> 62))
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4 > 0) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 <= 0) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t KeyPath = swift_getKeyPath();
    if ((unint64_t)v4 > 1)
    {
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v8 = swift_getKeyPath();
      if (v4 != 2)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)(v2 + 32);
  swift_unknownObjectRetain();
  uint64_t result = swift_getKeyPath();
  uint64_t KeyPath = result;
  if ((unint64_t)v4 <= 1)
  {
LABEL_12:
    uint64_t v8 = swift_getKeyPath();
    uint64_t v7 = 0;
    goto LABEL_13;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = *(void *)(v2 + 40);
  swift_unknownObjectRetain();
  uint64_t result = swift_getKeyPath();
  uint64_t v8 = result;
  if ((unint64_t)v4 <= 2)
  {
LABEL_13:
    uint64_t v9 = 0;
    goto LABEL_14;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  uint64_t v9 = *(void *)(v2 + 48);
  swift_unknownObjectRetain();
LABEL_14:
  uint64_t v10 = swift_getKeyPath();
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = KeyPath;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = v9;
  *(void *)(a2 + 56) = v10;
  *(unsigned char *)(a2 + 64) = 0;
  swift_unknownObjectRetain();
  sub_10016180C(KeyPath, 0);
  swift_unknownObjectRetain();
  sub_10016180C(v8, 0);
  swift_unknownObjectRetain();
  sub_10016180C(v10, 0);
  swift_unknownObjectRelease();
  sub_100161890(v10, 0);
  swift_unknownObjectRelease();
  sub_100161890(v8, 0);
  swift_unknownObjectRelease();

  return sub_100161890(KeyPath, 0);
}

unint64_t sub_10017AFC8@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result;
  if (!(result >> 62))
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4 > 3) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 <= 3) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t KeyPath = swift_getKeyPath();
    if ((unint64_t)v4 > 4)
    {
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v8 = swift_getKeyPath();
      if (v4 != 5)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 4uLL)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)(v2 + 56);
  swift_unknownObjectRetain();
  uint64_t result = swift_getKeyPath();
  uint64_t KeyPath = result;
  if ((unint64_t)v4 <= 4)
  {
LABEL_12:
    uint64_t v8 = swift_getKeyPath();
    uint64_t v7 = 0;
    goto LABEL_13;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 5uLL)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = *(void *)(v2 + 64);
  swift_unknownObjectRetain();
  uint64_t result = swift_getKeyPath();
  uint64_t v8 = result;
  if ((unint64_t)v4 <= 5)
  {
LABEL_13:
    uint64_t v9 = 0;
    goto LABEL_14;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 6uLL)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  uint64_t v9 = *(void *)(v2 + 72);
  swift_unknownObjectRetain();
LABEL_14:
  uint64_t v10 = swift_getKeyPath();
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = KeyPath;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = v9;
  *(void *)(a2 + 56) = v10;
  *(unsigned char *)(a2 + 64) = 0;
  swift_unknownObjectRetain();
  sub_10016180C(KeyPath, 0);
  swift_unknownObjectRetain();
  sub_10016180C(v8, 0);
  swift_unknownObjectRetain();
  sub_10016180C(v10, 0);
  swift_unknownObjectRelease();
  sub_100161890(v10, 0);
  swift_unknownObjectRelease();
  sub_100161890(v8, 0);
  swift_unknownObjectRelease();

  return sub_100161890(KeyPath, 0);
}

void *sub_10017B21C@<X0>(_WORD *a1@<X8>)
{
  unint64_t v3 = *v1;
  static Alignment.center.getter();
  sub_10017AAB0(v3, (uint64_t)v5);
  *(_OWORD *)&v6[151] = v5[7];
  *(_OWORD *)&v6[167] = v5[8];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
  *(_OWORD *)&v7[9] = *(_OWORD *)&v6[9];
  *(_OWORD *)&v6[87] = v5[3];
  *(_OWORD *)&v6[103] = v5[4];
  *(_OWORD *)&v6[119] = v5[5];
  *(_OWORD *)&v6[135] = v5[6];
  *(_OWORD *)&v6[39] = v5[0];
  *(_OWORD *)&v6[55] = v5[1];
  *(_OWORD *)&v6[71] = v5[2];
  char v9 = 0;
  char v8 = 0;
  static Alignment.center.getter();
  sub_100226620(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, __src, 0.0, 1, 0.0, 1);
  sub_1001858D4((uint64_t)v5);
  uint64_t result = memcpy(a1, __src, 0x150uLL);
  a1[168] = 256;
  return result;
}

uint64_t sub_10017B39C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v59 = a5;
  int v52 = a4 & 1;
  uint64_t v46 = type metadata accessor for GeometryProxy();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100523068);
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  unint64_t v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000F214(&qword_100523070);
  __chkstk_darwin(v58);
  unint64_t v47 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v51 = (uint64_t)&v44 - v12;
  uint64_t v55 = sub_10000F214(&qword_100523078);
  __chkstk_darwin(v55);
  uint64_t v57 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000F214((uint64_t *)&unk_100523080);
  __chkstk_darwin(v56);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  char v21 = (char *)&v44 - v20;
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v44 - v23;
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  GeometryProxy.size.getter();
  double v30 = v29;
  GeometryProxy.size.getter();
  sub_10017BAE0(v53, v54, v52, v24, v30, v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    sub_10000FBD8((uint64_t)v24, &qword_10051E070);
    id v32 = [self tertiarySystemFillColor];
    uint64_t v60 = Color.init(uiColor:)();
    View.accessibilityIdentifier(_:)();
    swift_release();
    sub_10000FB74((uint64_t)v15, v57, (uint64_t *)&unk_100523080);
    swift_storeEnumTagMultiPayload();
    sub_10018539C();
    sub_10018546C(&qword_1005230A0, (uint64_t *)&unk_100523080);
    _ConditionalContent<>.init(storage:)();
    return sub_10000FBD8((uint64_t)v15, (uint64_t *)&unk_100523080);
  }
  else
  {
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    char v44 = v28;
    v34(v28, v24, v25);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v21, v28, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v21, 0, 1, v25);
    uint64_t v35 = v45;
    uint64_t v36 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, a1, v46);
    unint64_t v37 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v38 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v38 + v37, v35, v36);
    sub_10000FB74((uint64_t)v21, (uint64_t)v18, &qword_10051E070);
    uint64_t v39 = (void *)swift_allocObject();
    v39[2] = sub_1001855A0;
    v39[3] = v38;
    v39[4] = sub_10017BF54;
    v39[5] = 0;
    sub_10000F214(&qword_1005230A8);
    sub_10018566C();
    uint64_t v40 = v48;
    AsyncImage.init(url:scale:transaction:content:)();
    sub_10000FBD8((uint64_t)v21, &qword_10051E070);
    sub_100013AA8(&qword_100523098, &qword_100523068);
    uint64_t v41 = (uint64_t)v47;
    uint64_t v42 = v50;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v42);
    uint64_t v43 = v51;
    sub_10000FC34(v41, v51, &qword_100523070);
    sub_10000FB74(v43, v57, &qword_100523070);
    swift_storeEnumTagMultiPayload();
    sub_10018539C();
    sub_10018546C(&qword_1005230A0, (uint64_t *)&unk_100523080);
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v43, &qword_100523070);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v44, v25);
  }
}

uint64_t sub_10017BAE0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051E070);
  v17.n128_f64[0] = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    char v20 = a3 & 1;
    sub_10016180C(a2, v20);
    double v21 = sub_10027D2F8(a2, v20);
    sub_100161890(a2, v20);
    id v22 = [self defaultPhotoOptionsWithAllowSmaller:1];
    id v23 = [a1 bestPhotoForFrameSize:v22 displayScale:a5 options:a6];

    if (v23)
    {
      id v24 = [v23 url];
      if (v24)
      {
        uint64_t v25 = v24;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        swift_unknownObjectRelease();
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v26(v19, v15, v12);
        uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
        v27(v19, 0, 1, v12);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v19, 1, v12) != 1)
        {
          v26(a4, v19, v12);
          return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v27)(a4, 0, 1, v12);
        }
      }
      else
      {
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v19, 1, 1, v12);
      }
      sub_10000FBD8((uint64_t)v19, &qword_10051E070);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))(a4, 1, 1, v12, v17);
}

double sub_10017BDC0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v3 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v2, v4);
  uint64_t v7 = Image.resizable(capInsets:resizingMode:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  GeometryProxy.size.getter();
  GeometryProxy.size.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v8 = v13;
  char v9 = v14;
  uint64_t v10 = v15;
  char v11 = v16;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 257;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v11;
  double result = *(double *)&v17;
  *(_OWORD *)(a1 + 56) = v17;
  *(_WORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_10017BF54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100523110);
  __chkstk_darwin(v2 - 8);
  double v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t *v4 = static Alignment.center.getter();
  v4[1] = v5;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100523120);
  sub_10017C01C((uint64_t *)((char *)v4 + *(int *)(v6 + 44)));
  sub_10000FB74((uint64_t)v4, a1, &qword_100523110);
  *(_WORD *)(a1 + *(int *)(sub_10000F214(&qword_100523100) + 36)) = 0;
  return sub_10000FBD8((uint64_t)v4, &qword_100523110);
}

uint64_t sub_10017C01C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v1 = type metadata accessor for DynamicTypeSize();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  double v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10051ED40);
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_100523130);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v14 = (char *)&v26 - v13;
  id v15 = [self tertiarySystemFillColor];
  uint64_t v26 = Color.init(uiColor:)();
  uint64_t v16 = Image.init(_internalSystemName:)();
  uint64_t v17 = static Font.title.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = v16;
  uint64_t v30 = KeyPath;
  uint64_t v31 = v17;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DynamicTypeSize.large(_:), v1);
  sub_10000F214(&qword_10051C1A8);
  sub_10008D63C();
  View.dynamicTypeSize(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v19 = static Color.secondary.getter();
  uint64_t v20 = swift_getKeyPath();
  uint64_t v21 = v27;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v7, v27);
  id v22 = (uint64_t *)&v11[*(int *)(v9 + 44)];
  *id v22 = v20;
  v22[1] = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  sub_10000FC34((uint64_t)v11, (uint64_t)v14, (uint64_t *)&unk_100523130);
  sub_10000FB74((uint64_t)v14, (uint64_t)v11, (uint64_t *)&unk_100523130);
  id v23 = v28;
  *uint64_t v28 = v26;
  uint64_t v24 = sub_10000F214(&qword_100523158);
  sub_10000FB74((uint64_t)v11, (uint64_t)v23 + *(int *)(v24 + 48), (uint64_t *)&unk_100523130);
  swift_retain();
  sub_10000FBD8((uint64_t)v14, (uint64_t *)&unk_100523130);
  sub_10000FBD8((uint64_t)v11, (uint64_t *)&unk_100523130);
  return swift_release();
}

uint64_t sub_10017C388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  char v5 = *((unsigned char *)v1 + 16);
  uint64_t v6 = static HorizontalAlignment.center.getter();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v4;
  *(unsigned char *)(v7 + 32) = v5;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = sub_100185390;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = 0x3FF5555555555555;
  *(_WORD *)(a1 + 48) = 256;
  swift_unknownObjectRetain();

  return sub_10016180C(v4, v5);
}

uint64_t sub_10017C438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v65 = *(void *)(a3 + 16);
  unint64_t v67 = v4;
  if (v65 < v4) {
    uint64_t v4 = *(void *)(a3 + 16);
  }
  uint64_t v72 = *(void *)(a1 + 16);
  if (v4 >= v72) {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v132 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000408E4(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0) {
    goto LABEL_52;
  }
  uint64_t v7 = v132;
  if (!v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v63 = 0;
    unint64_t v70 = 0;
    char v73 = 0;
    uint64_t v74 = 0;
    char v9 = 0;
LABEL_29:
    uint64_t v32 = v72;
    if ((v9 & 1) == 0 && v74 != v72)
    {
      uint64_t v33 = 0;
      BOOL v34 = v65 >= v63;
      unint64_t v35 = v65 - v63;
      unint64_t v66 = v65 - v63;
      if (!v34) {
        unint64_t v35 = 0;
      }
      unint64_t v64 = v35;
      unint64_t v36 = v67 - v70;
      unint64_t v69 = v67 - v70;
      if (v67 < v70) {
        unint64_t v36 = 0;
      }
      unint64_t v68 = v36;
      uint64_t v37 = a1 + 136 * v74 + 32;
      uint64_t v71 = a2 + 8 * v70 + 32;
      uint64_t v38 = (uint64_t *)(a3 + 32 * v63 + 56);
      while ((v74 & 0x8000000000000000) == 0 && v74 + v33 < v32)
      {
        long long v39 = *(_OWORD *)(v37 + 112);
        long long v116 = *(_OWORD *)(v37 + 96);
        long long v117 = v39;
        uint64_t v118 = *(void *)(v37 + 128);
        long long v40 = *(_OWORD *)(v37 + 48);
        long long v112 = *(_OWORD *)(v37 + 32);
        long long v113 = v40;
        long long v41 = *(_OWORD *)(v37 + 80);
        long long v114 = *(_OWORD *)(v37 + 64);
        long long v115 = v41;
        long long v42 = *(_OWORD *)(v37 + 16);
        long long v110 = *(_OWORD *)v37;
        long long v111 = v42;
        if ((v73 & 1) == 0 && v69 != v33)
        {
          if (v68 == v33) {
            goto LABEL_49;
          }
          if (v66 != v33)
          {
            if (v64 == v33) {
              goto LABEL_50;
            }
            uint64_t v43 = *(void *)(v71 + 8 * v33);
            uint64_t v44 = *(v38 - 3);
            uint64_t v45 = *(v38 - 2);
            uint64_t v46 = *(v38 - 1);
            uint64_t v47 = *v38;
            long long v48 = *(_OWORD *)(v37 + 112);
            long long v125 = *(_OWORD *)(v37 + 96);
            long long v126 = v48;
            uint64_t v127 = *(void *)(v37 + 128);
            long long v49 = *(_OWORD *)(v37 + 48);
            long long v121 = *(_OWORD *)(v37 + 32);
            long long v122 = v49;
            long long v50 = *(_OWORD *)(v37 + 80);
            long long v123 = *(_OWORD *)(v37 + 64);
            long long v124 = v50;
            long long v51 = *(_OWORD *)(v37 + 16);
            long long v119 = *(_OWORD *)v37;
            long long v120 = v51;
            uint64_t v128 = v43;
            *(void *)&long long v129 = v44;
            *((void *)&v129 + 1) = v45;
            uint64_t v76 = v46;
            uint64_t v130 = v46;
            uint64_t v131 = v47;
            sub_1001817B4((uint64_t)&v110);
            swift_bridgeObjectRetain();
            sub_1001817B4((uint64_t)&v110);
            swift_bridgeObjectRetain();
            uint64_t result = sub_100182880((uint64_t)&v119);
            uint64_t v132 = v7;
            unint64_t v53 = v7[2];
            unint64_t v52 = v7[3];
            if (v53 >= v52 >> 1)
            {
              uint64_t result = sub_1000408E4(v52 > 1, v53 + 1, 1);
              uint64_t v7 = v132;
            }
            char v73 = 0;
            uint64_t v109 = v118;
            long long v103 = v112;
            long long v104 = v113;
            long long v107 = v116;
            long long v108 = v117;
            long long v105 = v114;
            long long v106 = v115;
            long long v101 = v110;
            long long v102 = v111;
            v7[2] = v53 + 1;
            uint64_t v54 = &v7[22 * v53];
            *((_OWORD *)v54 + 2) = v101;
            long long v55 = v102;
            long long v56 = v103;
            long long v57 = v105;
            *((_OWORD *)v54 + 5) = v104;
            *((_OWORD *)v54 + 6) = v57;
            *((_OWORD *)v54 + 3) = v55;
            *((_OWORD *)v54 + 4) = v56;
            long long v58 = v106;
            long long v59 = v107;
            long long v60 = v108;
            v54[20] = v109;
            *((_OWORD *)v54 + 8) = v59;
            *((_OWORD *)v54 + 9) = v60;
            *((_OWORD *)v54 + 7) = v58;
            v54[21] = v43;
            v54[22] = v44;
            v54[23] = v45;
            ++v33;
            v37 += 136;
            v38 += 4;
            v54[24] = v76;
            v54[25] = v47;
            uint64_t v32 = v72;
            if (v74 - v72 + v33) {
              continue;
            }
          }
        }
        goto LABEL_46;
      }
      goto LABEL_48;
    }
LABEL_46:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  char v9 = 0;
  uint64_t v74 = 0;
  char v73 = 0;
  unint64_t v70 = 0;
  unint64_t v63 = 0;
  while (1)
  {
    if (v9) {
      goto LABEL_20;
    }
    if (v74 == v72)
    {
      uint64_t v74 = v72;
      goto LABEL_20;
    }
    if (v74 < 0 || v74 >= v72) {
      break;
    }
    uint64_t v10 = a1 + 32 + 136 * v74;
    long long v11 = *(_OWORD *)(v10 + 112);
    long long v116 = *(_OWORD *)(v10 + 96);
    long long v117 = v11;
    uint64_t v118 = *(void *)(v10 + 128);
    long long v12 = *(_OWORD *)(v10 + 48);
    long long v112 = *(_OWORD *)(v10 + 32);
    long long v113 = v12;
    long long v13 = *(_OWORD *)(v10 + 80);
    long long v114 = *(_OWORD *)(v10 + 64);
    long long v115 = v13;
    long long v14 = *(_OWORD *)(v10 + 16);
    long long v110 = *(_OWORD *)v10;
    long long v111 = v14;
    ++v74;
    if (v73)
    {
      char v73 = 1;
    }
    else
    {
      unint64_t v15 = v67;
      if (v70 != v67)
      {
        if (v70 >= v67) {
          goto LABEL_51;
        }
        unint64_t v15 = v70 + 1;
        if (v63 != v65)
        {
          if (v63 >= v65) {
            goto LABEL_53;
          }
          uint64_t v23 = *(void *)(a2 + 32 + 8 * v70);
          uint64_t v24 = a3 + 32 + 32 * v63;
          uint64_t v25 = *(void *)(v24 + 16);
          uint64_t v26 = *(void *)(v24 + 24);
          long long v27 = *(_OWORD *)v24;
          long long v28 = *(_OWORD *)(v10 + 112);
          long long v125 = *(_OWORD *)(v10 + 96);
          long long v126 = v28;
          uint64_t v127 = *(void *)(v10 + 128);
          long long v29 = *(_OWORD *)(v10 + 48);
          long long v121 = *(_OWORD *)(v10 + 32);
          long long v122 = v29;
          long long v30 = *(_OWORD *)(v10 + 80);
          long long v123 = *(_OWORD *)(v10 + 64);
          long long v124 = v30;
          long long v31 = *(_OWORD *)(v10 + 16);
          long long v119 = *(_OWORD *)v10;
          long long v120 = v31;
          uint64_t v128 = v23;
          long long v129 = v27;
          uint64_t v130 = v25;
          uint64_t v131 = v26;
          nullsub_2(&v119, v8);
          sub_1001817B4((uint64_t)&v110);
          swift_bridgeObjectRetain();
          char v73 = 0;
          char v75 = 0;
          ++v63;
          ++v70;
          goto LABEL_21;
        }
      }
      char v73 = 1;
      unint64_t v70 = v15;
    }
LABEL_20:
    sub_100181868(&v110);
    sub_10000FC34((uint64_t)&v110, (uint64_t)&v119, &qword_100522CE8);
    char v75 = 1;
LABEL_21:
    sub_10000FC34((uint64_t)&v119, (uint64_t)&v101, &qword_100522CE8);
    sub_10000FC34((uint64_t)&v101, (uint64_t)&v110, &qword_100522CE8);
    uint64_t result = sub_100101D80((uint64_t *)&v110);
    if (result == 1) {
      goto LABEL_54;
    }
    long long v92 = v125;
    long long v93 = v126;
    long long v88 = v121;
    long long v89 = v122;
    long long v90 = v123;
    long long v91 = v124;
    long long v86 = v119;
    long long v87 = v120;
    v95[6] = v125;
    v95[7] = v126;
    v95[2] = v121;
    v95[3] = v122;
    uint64_t v94 = v127;
    v95[4] = v123;
    v95[5] = v124;
    uint64_t v16 = v128;
    long long v17 = v129;
    uint64_t v18 = v130;
    uint64_t v19 = v131;
    uint64_t v96 = v127;
    v95[0] = v119;
    v95[1] = v120;
    uint64_t v97 = v128;
    long long v98 = v129;
    uint64_t v99 = v130;
    uint64_t v100 = v131;
    sub_1001817B4((uint64_t)&v86);
    swift_bridgeObjectRetain();
    uint64_t result = sub_100182880((uint64_t)v95);
    uint64_t v132 = v7;
    unint64_t v21 = v7[2];
    unint64_t v20 = v7[3];
    if (v21 >= v20 >> 1)
    {
      uint64_t result = sub_1000408E4(v20 > 1, v21 + 1, 1);
      uint64_t v7 = v132;
    }
    long long v79 = v88;
    long long v80 = v89;
    uint64_t v85 = v94;
    long long v83 = v92;
    long long v84 = v93;
    long long v81 = v90;
    long long v82 = v91;
    long long v77 = v86;
    long long v78 = v87;
    v7[2] = v21 + 1;
    id v22 = &v7[22 * v21];
    *((_OWORD *)v22 + 2) = v77;
    *((_OWORD *)v22 + 5) = v80;
    *((_OWORD *)v22 + 6) = v81;
    *((_OWORD *)v22 + 3) = v78;
    *((_OWORD *)v22 + 4) = v79;
    v22[20] = v85;
    *((_OWORD *)v22 + 8) = v83;
    *((_OWORD *)v22 + 9) = v84;
    *((_OWORD *)v22 + 7) = v82;
    v22[21] = v16;
    *((_OWORD *)v22 + 11) = v17;
    v22[24] = v18;
    v22[25] = v19;
    --v5;
    char v9 = v75;
    if (!v5) {
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t sub_10017CAB4()
{
  return 0x75626544776F6873;
}

uint64_t sub_10017CAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x75626544776F6873 && a2 == 0xE900000000000067)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10017CB74(uint64_t a1)
{
  unint64_t v2 = sub_10017F908();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017CBB0(uint64_t a1)
{
  unint64_t v2 = sub_10017F908();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10017CBEC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_100522AF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10017F908();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  *a2 = v9 & 1;
  return result;
}

uint64_t sub_10017CD4C(void *a1)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_100522B00);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10017F908();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10017CE80@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v12 = type metadata accessor for MapInteractionModes();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = sub_10000F214(&qword_100522C20);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = &v39[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v45 = a2;
  uint64_t v44 = a1;
  if ((_BYTE)a4) {
    a2 = a1;
  }
  int64_t v16 = *(void *)(a5 + 16);
  if (v16)
  {
    int v40 = a4;
    uint64_t v42 = v6;
    uint64_t v43 = a6;
    long long v58 = _swiftEmptyArrayStorage;
    id v17 = a2;
    sub_100040B80(0, v16, 0);
    uint64_t v18 = v58;
    uint64_t v41 = a5;
    uint64_t v19 = (long long *)(a5 + 32);
    do
    {
      long long v20 = v19[9];
      long long v55 = v19[8];
      long long v56 = v20;
      long long v57 = v19[10];
      long long v21 = v19[5];
      long long v51 = v19[4];
      long long v52 = v21;
      long long v22 = v19[7];
      long long v53 = v19[6];
      long long v54 = v22;
      long long v23 = v19[1];
      long long v47 = *v19;
      long long v24 = v19[2];
      long long v50 = v19[3];
      long long v48 = v23;
      long long v49 = v24;
      sub_10017FEA0((uint64_t)&v47);
      swift_bridgeObjectRelease();
      long long v58 = v18;
      unint64_t v26 = v18[2];
      unint64_t v25 = v18[3];
      if (v26 >= v25 >> 1)
      {
        sub_100040B80(v25 > 1, v26 + 1, 1);
        uint64_t v18 = v58;
      }
      v18[2] = v26 + 1;
      long long v27 = &v18[17 * v26];
      *((_OWORD *)v27 + 2) = v47;
      long long v28 = v48;
      long long v29 = v49;
      long long v30 = v51;
      *((_OWORD *)v27 + 5) = v50;
      *((_OWORD *)v27 + 6) = v30;
      *((_OWORD *)v27 + 3) = v28;
      *((_OWORD *)v27 + 4) = v29;
      long long v31 = v52;
      long long v32 = v53;
      long long v33 = v54;
      v27[20] = v55;
      *((_OWORD *)v27 + 8) = v32;
      *((_OWORD *)v27 + 9) = v33;
      *((_OWORD *)v27 + 7) = v31;
      v19 += 11;
      --v16;
    }
    while (v16);
    uint64_t v6 = v42;
    a5 = v41;
    LOBYTE(a4) = v40;
  }
  else
  {
    id v34 = a2;
    uint64_t v18 = _swiftEmptyArrayStorage;
  }
  sub_100180FF8(a2, (uint64_t)v18);
  MapCameraBounds.init(centerCoordinateBounds:minimumDistance:maximumDistance:)();

  swift_bridgeObjectRelease();
  uint64_t v35 = type metadata accessor for MapCameraBounds();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v15, 0, 1, v35);
  uint64_t v36 = static MapInteractionModes.zoom.getter();
  __chkstk_darwin(v36);
  uint64_t v37 = v45;
  *(void *)&v39[-48] = v44;
  *(void *)&v39[-40] = v37;
  *(void *)&v39[-32] = v46;
  v39[-24] = a4;
  *(void *)&v39[-16] = a5;
  *(void *)&v39[-8] = v6;
  sub_10000F214(&qword_100522C28);
  sub_100013AA8(&qword_100522C30, &qword_100522C28);
  return Map.init<A>(bounds:interactionModes:scope:content:)();
}

void sub_10017D210(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  int v52 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v41 = a1;
  long long v50 = a7;
  uint64_t v12 = sub_10000F214(&qword_100522C38);
  uint64_t v48 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000F214(&qword_100522C40);
  uint64_t v49 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  int64_t v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000F214(&qword_100522C48);
  uint64_t v46 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v45 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  long long v51 = (char *)v40 - v19;
  uint64_t v53 = a5;
  v40[1] = swift_getKeyPath();
  uint64_t v20 = swift_allocObject();
  long long v21 = *(_OWORD *)(a6 + 48);
  *(_OWORD *)(v20 + 48) = *(_OWORD *)(a6 + 32);
  *(_OWORD *)(v20 + 64) = v21;
  *(_OWORD *)(v20 + 80) = *(_OWORD *)(a6 + 64);
  *(void *)(v20 + 96) = *(void *)(a6 + 80);
  long long v22 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)a6;
  *(_OWORD *)(v20 + 32) = v22;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_100181584;
  *(void *)(v23 + 24) = v20;
  sub_1000506C4(a1, a2, a3, v52);
  swift_bridgeObjectRetain();
  sub_100180E74(a6);
  sub_10000F214(&qword_100522C50);
  sub_10000F214(&qword_100522C58);
  sub_100013AA8(&qword_100522C60, &qword_100522C50);
  sub_10018162C();
  sub_100013AA8(&qword_100522C70, &qword_100522C58);
  ForEach<>.init(_:id:content:)();
  unint64_t v24 = sub_100181680();
  MapContent.annotationTitles(_:)();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v12);
  uint64_t v53 = v12;
  unint64_t v54 = v24;
  swift_getOpaqueTypeConformance2();
  unint64_t v25 = v45;
  uint64_t v26 = v47;
  MapContent.annotationSubtitles(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v26);
  uint64_t v27 = v46;
  long long v28 = v51;
  uint64_t v29 = v44;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v51, v25, v44);
  long long v30 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  long long v31 = v28;
  uint64_t v32 = v29;
  v30(v25, v31, v29);
  id v34 = v41;
  long long v33 = v42;
  uint64_t v35 = v50;
  *long long v50 = v41;
  v35[1] = v33;
  uint64_t v36 = v43;
  v35[2] = v43;
  LOBYTE(a6) = v52;
  *((unsigned char *)v35 + 24) = v52;
  uint64_t v37 = (char *)v35;
  uint64_t v38 = sub_10000F214((uint64_t *)&unk_100522C80);
  v30(&v37[*(int *)(v38 + 48)], v25, v32);
  sub_1000506C4(v34, v33, v36, a6);
  long long v39 = *(void (**)(char *, uint64_t))(v27 + 8);
  v39(v51, v32);
  v39(v25, v32);
  sub_10004FFD4(v34, v33, v36, a6);
}

uint64_t sub_10017D6F0@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>, double a7@<D0>)
{
  uint64_t v57 = a3;
  uint64_t v56 = a2;
  unint64_t v68 = a6;
  uint64_t v62 = type metadata accessor for MapCircle();
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  long long v58 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_100520110);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  id v61 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000F214(&qword_100522C90);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  unint64_t v65 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v71 = (char *)&v54 - v15;
  uint64_t v16 = sub_10000F214(&qword_100522C98);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000F214(&qword_100522CA0);
  uint64_t v20 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  long long v59 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v54 - v23;
  double v26 = __chkstk_darwin(v25);
  long long v28 = (char *)&v54 - v27;
  id v29 = *a1;
  [*a1 _coordinate:v26];
  uint64_t v72 = a1;
  double v73 = a7;
  uint64_t v74 = v56;
  uint64_t v75 = v57;
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  sub_10000F214(&qword_100522CA8);
  sub_100013AA8(&qword_100522CB0, &qword_100522CA8);
  Marker.init(coordinate:label:)();
  if (a5)
  {
    uint64_t v30 = *(void *)(a5 + 16);
    if (v30)
    {
      long long v31 = (unsigned __int8 *)(a5 + 40);
      while (*v31 < 2u || *((void *)v31 - 1) == 0)
      {
        v31 += 16;
        if (!--v30) {
          goto LABEL_10;
        }
      }
      uint64_t v33 = static Color.green.getter();
    }
    else
    {
LABEL_10:
      uint64_t v33 = static Color.red.getter();
    }
  }
  else
  {
    uint64_t v33 = static Color.gray.getter();
  }
  uint64_t v78 = v33;
  sub_100013AA8(&qword_100522CB8, &qword_100522C98);
  MapContent.tint<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v55 = v20;
  id v34 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  unint64_t v69 = v28;
  v34(v28, v24, v70);
  [v29 _coordinate];
  uint64_t v35 = v58;
  MapCircle.init(center:radius:)();
  static Color.yellow.getter();
  uint64_t v36 = Color.opacity(_:)();
  swift_release();
  uint64_t v78 = v36;
  uint64_t v37 = v61;
  uint64_t v38 = v62;
  MapContent.foregroundStyle<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v35, v38);
  uint64_t v39 = static Color.yellow.getter();
  long long v81 = &protocol witness table for Color;
  uint64_t v82 = v39;
  uint64_t v78 = v38;
  long long v79 = &type metadata for Color;
  long long v80 = &protocol witness table for MapCircle;
  swift_getOpaqueTypeConformance2();
  int v40 = v65;
  uint64_t v41 = v64;
  MapContent.stroke<A>(_:lineWidth:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v37, v41);
  uint64_t v42 = v66;
  uint64_t v43 = v71;
  uint64_t v44 = v67;
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v71, v40, v67);
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  uint64_t v46 = v59;
  uint64_t v47 = v70;
  v45(v59, v69, v70);
  uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v48(v40, v43, v44);
  uint64_t v49 = v68;
  v45(v68, v46, v47);
  uint64_t v50 = sub_10000F214((uint64_t *)&unk_100522CC0);
  v48(&v49[*(int *)(v50 + 48)], v40, v44);
  long long v51 = *(void (**)(char *, uint64_t))(v42 + 8);
  v51(v71, v44);
  int v52 = *(void (**)(char *, uint64_t))(v55 + 8);
  v52(v69, v47);
  v51(v40, v44);
  return ((uint64_t (*)(char *, uint64_t))v52)(v46, v47);
}

uint64_t sub_10017DE58@<X0>(uint64_t a1@<X0>, double a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v12 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v12 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void **)(a1 + 24);
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = v14;
  v16._object = v15;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 2108704;
  v17._object = (void *)0xE300000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v17);
  sub_10000F214(&qword_10051F350);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_10043D4F0;
  *(void *)(v18 + 56) = &type metadata for Double;
  *(void *)(v18 + 64) = &protocol witness table for Double;
  *(double *)(v18 + 32) = a6;
  v19._uint64_t countAndFlagsBits = String.init(format:_:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v20);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v62 = v23;
  uint64_t v63 = v21;
  uint64_t v64 = v24;
  if (a4)
  {
    char v61 = v22;
    if (a3)
    {
      swift_bridgeObjectRetain();
      long long v28 = (void *)0xE300000000000000;
      uint64_t v26 = 4271950;
      int64_t v29 = *(void *)(a4 + 16);
      if (v29) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_10043D4F0;
      *(void *)(v25 + 56) = &type metadata for Double;
      *(void *)(v25 + 64) = &protocol witness table for Double;
      *(double *)(v25 + 32) = a2 * 180.0 / 3.14159265;
      swift_bridgeObjectRetain();
      uint64_t v26 = String.init(format:_:)();
      long long v28 = v27;
      int64_t v29 = *(void *)(a4 + 16);
      if (v29)
      {
LABEL_4:
        uint64_t v59 = v26;
        uint64_t v60 = a5;
        sub_1000407B0(0, v29, 0);
        uint64_t v30 = (unsigned char *)(a4 + 40);
        while (1)
        {
          uint64_t v31 = *((void *)v30 - 1);
          if (!*v30) {
            break;
          }
          if (*v30 == 1)
          {
            uint64_t v65 = 0x79726F6765746163;
            unint64_t v32 = 0xE900000000000028;
LABEL_9:
            unint64_t v66 = v32;
            uint64_t v33 = swift_allocObject();
            *(_OWORD *)(v33 + 16) = xmmword_10043D4F0;
            *(void *)(v33 + 56) = &type metadata for Double;
            *(void *)(v33 + 64) = &protocol witness table for Double;
            *(void *)(v33 + 32) = v31;
            v34._uint64_t countAndFlagsBits = String.init(format:_:)();
            String.append(_:)(v34);
            swift_bridgeObjectRelease();
            v35._uint64_t countAndFlagsBits = 41;
            v35._object = (void *)0xE100000000000000;
            String.append(_:)(v35);
            uint64_t v36 = v65;
            unint64_t v37 = v66;
            goto LABEL_16;
          }
          BOOL v38 = v31 == 0;
          if (v31) {
            uint64_t v36 = 0x676E6964616568;
          }
          else {
            uint64_t v36 = 0x6E697461722D6F6ELL;
          }
          if (v38) {
            unint64_t v37 = 0xEA00000000007367;
          }
          else {
            unint64_t v37 = 0xE700000000000000;
          }
LABEL_16:
          unint64_t v40 = _swiftEmptyArrayStorage[2];
          unint64_t v39 = _swiftEmptyArrayStorage[3];
          if (v40 >= v39 >> 1) {
            sub_1000407B0(v39 > 1, v40 + 1, 1);
          }
          v30 += 16;
          _swiftEmptyArrayStorage[2] = v40 + 1;
          uint64_t v41 = &_swiftEmptyArrayStorage[2 * v40];
          _OWORD v41[4] = v36;
          v41[5] = v37;
          if (!--v29)
          {
            swift_bridgeObjectRelease();
            a5 = v60;
            uint64_t v26 = v59;
            goto LABEL_23;
          }
        }
        uint64_t v65 = 678585199;
        unint64_t v32 = 0xE400000000000000;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
LABEL_23:
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v46._uint64_t countAndFlagsBits = 2112065;
    v46._object = (void *)0xE300000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v46);
    v47._uint64_t countAndFlagsBits = v26;
    v47._object = v28;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v47);
    swift_bridgeObjectRelease();
    v48._uint64_t countAndFlagsBits = 23328;
    v48._object = (void *)0xE200000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v48);
    sub_10000F214((uint64_t *)&unk_100522CD0);
    sub_100013AA8((unint64_t *)&qword_10051CA40, (uint64_t *)&unk_100522CD0);
    uint64_t v49 = BidirectionalCollection<>.joined(separator:)();
    long long v51 = v50;
    swift_bridgeObjectRelease();
    v52._uint64_t countAndFlagsBits = v49;
    v52._object = v51;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v52);
    swift_bridgeObjectRelease();
    v53._uint64_t countAndFlagsBits = 93;
    v53._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v53);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v42 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v43 = v54;
    uint64_t v45 = v55;
    uint64_t v44 = v56 & 1;
    char v22 = v61;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
  }
  char v57 = v22 & 1;
  *(void *)a5 = v63;
  *(void *)(a5 + 8) = v62;
  *(unsigned char *)(a5 + 16) = v22 & 1;
  *(void *)(a5 + 24) = v64;
  *(void *)(a5 + 32) = v42;
  *(void *)(a5 + 40) = v43;
  *(void *)(a5 + 48) = v44;
  *(void *)(a5 + 56) = v45;
  sub_1000807A8(v63, v62, v22 & 1);
  swift_bridgeObjectRetain();
  sub_10018172C(v42, v43, v44, v45);
  sub_100181770(v42, v43, v44, v45);
  sub_100012FAC(v63, v62, v57);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10017E3F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v95 = a1;
  uint64_t v79 = type metadata accessor for GeoLookupResultViewContainer(0);
  __chkstk_darwin(v79);
  uint64_t v3 = (uint64_t *)((char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_10000F214(&qword_100522B58);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)sub_10000F214(&qword_100522B60);
  uint64_t v89 = *((void *)v7 - 1);
  long long v90 = v7;
  __chkstk_darwin(v7);
  uint64_t v80 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000F214(&qword_100522B68);
  __chkstk_darwin(v94);
  long long v88 = (char **)((char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v92 = sub_10000F214(&qword_100522B70);
  __chkstk_darwin(v92);
  uint64_t v93 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000F214(&qword_100522B78);
  uint64_t v76 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v75 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000F214(&qword_100522B80);
  uint64_t v78 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v74 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v77 = (char *)&v74 - v14;
  uint64_t v82 = sub_10000F214(&qword_100522B88);
  __chkstk_darwin(v82);
  long long v84 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_100522B90);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000F214(&qword_100522B98);
  __chkstk_darwin(v83);
  Swift::String v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000F214(&qword_100522BA0);
  uint64_t v81 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000F214(&qword_100522BA8);
  __chkstk_darwin(v91);
  long long v86 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = *(unsigned char *)(v1 + 17);
  if (v25)
  {
    unint64_t v43 = *(void *)(v1 + 48);
    if (v43 >> 62)
    {
      uint64_t v44 = *(char **)(v1 + 24);
      uint64_t v45 = *(void **)(v1 + 32);
      uint64_t v46 = *(void *)(v1 + 40);
      if (v43 >> 62 != 1)
      {
        uint64_t v54 = *(void *)(v1 + 72);
        uint64_t v53 = *(void *)(v1 + 80);
        uint64_t v55 = *(void *)(v1 + 64);
        char v56 = *(void **)(v1 + 24);
        uint64_t v89 = *(void *)(v1 + 40);
        long long v90 = (int *)v44;
        char v57 = (char *)v46;
        uint64_t v58 = v46;
        unsigned __int8 v59 = v43;
        sub_1000506C4(v56, v45, v58, v43);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v60 = sub_10017C438(v55, v54, v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v61 = swift_bridgeObjectRelease();
        long long v88 = &v74;
        __chkstk_darwin(v61);
        *(&v74 - 6) = (char *)v1;
        *(&v74 - 5) = (char *)v60;
        *(&v74 - 4) = v44;
        *(&v74 - 3) = (char *)v45;
        *(&v74 - 2) = v57;
        *((unsigned char *)&v74 - 8) = v59;
        unsigned __int8 v62 = v59;
        static Axis.Set.vertical.getter();
        sub_10000F214(&qword_100522BF8);
        sub_100013AA8(&qword_100522C00, &qword_100522BF8);
        uint64_t v63 = v75;
        ScrollView.init(_:showsIndicators:content:)();
        swift_bridgeObjectRelease();
        uint64_t v64 = swift_allocObject();
        long long v65 = *(_OWORD *)(v1 + 48);
        *(_OWORD *)(v64 + 48) = *(_OWORD *)(v1 + 32);
        *(_OWORD *)(v64 + 64) = v65;
        *(_OWORD *)(v64 + 80) = *(_OWORD *)(v1 + 64);
        *(void *)(v64 + 96) = *(void *)(v1 + 80);
        long long v66 = *(_OWORD *)(v1 + 16);
        *(_OWORD *)(v64 + 16) = *(_OWORD *)v1;
        *(_OWORD *)(v64 + 32) = v66;
        sub_100180E74(v1);
        uint64_t v67 = sub_100013AA8(&qword_100522BC8, &qword_100522B78);
        unint64_t v68 = v74;
        uint64_t v69 = v85;
        View.onTapGesture(count:perform:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v63, v69);
        uint64_t v70 = v78;
        uint64_t v71 = v77;
        uint64_t v72 = v87;
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v68, v87);
        (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v84, v71, v72);
        swift_storeEnumTagMultiPayload();
        sub_100180CAC();
        uint64_t v96 = v69;
        uint64_t v97 = v67;
        swift_getOpaqueTypeConformance2();
        uint64_t v52 = (uint64_t)v86;
        _ConditionalContent<>.init(storage:)();
        sub_10004FFD4(v90, v45, v89, v62);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
        goto LABEL_12;
      }
      unsigned __int8 v47 = *(void *)(v1 + 48);
      sub_1000506C4(v44, v45, v46, v43);
      swift_bridgeObjectRetain();
      sub_10004FFD4(v44, v45, v46, v47);
      swift_bridgeObjectRelease();
      LocalizedStringKey.init(stringLiteral:)();
      ProgressView<>.init<>(_:)();
      uint64_t v48 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v18, v23, v21);
    }
    else
    {
      LocalizedStringKey.init(stringLiteral:)();
      ProgressView<>.init<>(_:)();
      uint64_t v48 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v18, v23, v21);
    }
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_100522BC0, &qword_100522BA0);
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74((uint64_t)v20, (uint64_t)v84, &qword_100522B98);
    swift_storeEnumTagMultiPayload();
    sub_100180CAC();
    uint64_t v51 = sub_100013AA8(&qword_100522BC8, &qword_100522B78);
    uint64_t v96 = v85;
    uint64_t v97 = v51;
    swift_getOpaqueTypeConformance2();
    uint64_t v52 = (uint64_t)v86;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8((uint64_t)v20, &qword_100522B98);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v23, v21);
LABEL_12:
    uint64_t v49 = &qword_100522BA8;
    sub_10000FB74(v52, v93, &qword_100522BA8);
    swift_storeEnumTagMultiPayload();
    sub_100180BD0();
    sub_100183AD4(&qword_100522BD0, &qword_100522B68, (void (*)(void))sub_100180D44);
    _ConditionalContent<>.init(storage:)();
    uint64_t v50 = v52;
    return sub_10000FBD8(v50, v49);
  }
  unint64_t v26 = *(void *)(v1 + 48);
  if (v26 >> 62 == 2)
  {
    uint64_t v28 = *(void *)(v1 + 72);
    uint64_t v27 = *(void *)(v1 + 80);
    uint64_t v29 = *(void *)(v1 + 56);
    uint64_t v30 = *(char **)(v1 + 64);
    uint64_t v31 = *(char **)(v1 + 32);
    long long v86 = *(char **)(v1 + 40);
    uint64_t v87 = v29;
    unint64_t v32 = *(char **)(v1 + 24);
    long long v84 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = swift_bridgeObjectRetain();
    uint64_t v85 = sub_10017C438(v33, v28, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
    *((void *)v6 + 1) = 0;
    v6[16] = 1;
    uint64_t v34 = (uint64_t)&v6[*(int *)(sub_10000F214(&qword_100522BE8) + 44)];
    *uint64_t v3 = swift_getKeyPath();
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    Swift::String v35 = (int *)v79;
    *((unsigned char *)v3 + *(int *)(v79 + 20)) = v25;
    uint64_t v36 = (char **)((char *)v3 + v35[6]);
    *uint64_t v36 = v32;
    v36[1] = v31;
    uint64_t v38 = (uint64_t)v86;
    uint64_t v37 = v87;
    v36[2] = v86;
    v36[3] = (char *)v26;
    v36[4] = (char *)v37;
    v36[5] = v30;
    v36[6] = (char *)v28;
    v36[7] = (char *)v27;
    *(uint64_t *)((char *)v3 + v35[7]) = v85;
    *(uint64_t *)((char *)v3 + v35[8]) = 3;
    unint64_t v39 = (char *)v3 + v35[9];
    *(void *)unint64_t v39 = sub_100177AEC;
    *((void *)v39 + 1) = 0;
    v39[16] = 0;
    sub_100180DEC((uint64_t)v3, v34, type metadata accessor for GeoLookupResultViewContainer);
    uint64_t v40 = v80;
    sub_10000FB74((uint64_t)v6, v80, &qword_100522B58);
    uint64_t v41 = v90;
    *(_WORD *)(v40 + v90[9]) = 256;
    sub_1000506C4(v84, v31, v38, v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000FBD8((uint64_t)v6, &qword_100522B58);
    uint64_t v42 = (uint64_t)v88;
    sub_10000FC34(v40, (uint64_t)v88, &qword_100522B60);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v89 + 56))(v42, 0, 1, v41);
  }
  else
  {
    uint64_t v42 = (uint64_t)v88;
    (*(void (**)(char **, uint64_t, uint64_t, int *))(v89 + 56))(v88, 1, 1, v90);
  }
  uint64_t v49 = &qword_100522B68;
  sub_10000FB74(v42, v93, &qword_100522B68);
  swift_storeEnumTagMultiPayload();
  sub_100180BD0();
  sub_100183AD4(&qword_100522BD0, &qword_100522B68, (void (*)(void))sub_100180D44);
  _ConditionalContent<>.init(storage:)();
  uint64_t v50 = v42;
  return sub_10000FBD8(v50, v49);
}

uint64_t sub_10017F128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  int v43 = a6;
  uint64_t v42 = a5;
  uint64_t v41 = a4;
  uint64_t v40 = a3;
  uint64_t v47 = a7;
  uint64_t v45 = sub_10000F214(&qword_100522C08);
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100522C10);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v46 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v39 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = type metadata accessor for GeoLookupResultViewContainer(0);
  uint64_t v21 = (int *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24);
  unint64_t v26 = (char *)&v39 - v25;
  char v27 = *(unsigned char *)(a1 + 17);
  sub_1000508CC(a1 + 24, (uint64_t)v55);
  *uint64_t v23 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  *((unsigned char *)v23 + v21[7]) = v27;
  sub_1000508CC((uint64_t)v55, (uint64_t)v23 + v21[8]);
  *(uint64_t *)((char *)v23 + v21[9]) = a2;
  *(uint64_t *)((char *)v23 + v21[10]) = 10;
  uint64_t v28 = (char *)v23 + v21[11];
  *(void *)uint64_t v28 = sub_100177AEC;
  *((void *)v28 + 1) = 0;
  v28[16] = 0;
  sub_100180DEC((uint64_t)v23, (uint64_t)v26, type metadata accessor for GeoLookupResultViewContainer);
  sub_100180EFC((uint64_t)v55);
  swift_bridgeObjectRetain();
  sub_10017CE80(v40, v41, v42, v43, a2, (uint64_t)v10);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v29 = v44;
  uint64_t v30 = v45;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v16, v10, v45);
  uint64_t v31 = &v16[*(int *)(v12 + 44)];
  long long v32 = v53;
  *((_OWORD *)v31 + 4) = v52;
  *((_OWORD *)v31 + 5) = v32;
  *((_OWORD *)v31 + 6) = v54;
  long long v33 = v49;
  *(_OWORD *)uint64_t v31 = v48;
  *((_OWORD *)v31 + 1) = v33;
  long long v34 = v51;
  *((_OWORD *)v31 + 2) = v50;
  *((_OWORD *)v31 + 3) = v34;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
  sub_10000FC34((uint64_t)v16, (uint64_t)v19, &qword_100522C10);
  sub_100180F38((uint64_t)v26, (uint64_t)v23);
  uint64_t v35 = v46;
  sub_10000FB74((uint64_t)v19, v46, &qword_100522C10);
  uint64_t v36 = v47;
  sub_100180F38((uint64_t)v23, v47);
  uint64_t v37 = sub_10000F214(&qword_100522C18);
  sub_10000FB74(v35, v36 + *(int *)(v37 + 48), &qword_100522C10);
  sub_10000FBD8((uint64_t)v19, &qword_100522C10);
  sub_100180F9C((uint64_t)v26);
  sub_10000FBD8(v35, &qword_100522C10);
  return sub_100180F9C((uint64_t)v23);
}

uint64_t sub_10017F568(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  sub_100050714(*(void *)a1, v2, v3);
  uint64_t v4 = (void (*)(uint64_t))sub_10027D504(v1, v2, v3);
  uint64_t result = sub_100050720(v1, v2, v3);
  if (v4)
  {
    v4(result);
    return sub_10000F478((uint64_t)v4);
  }
  return result;
}

uint64_t sub_10017F60C@<X0>(uint64_t a1@<X8>)
{
  return sub_10017E3F8(a1);
}

uint64_t sub_10017F658@<X0>(__int16 a1@<W2>, uint64_t a2@<X8>)
{
  char v2 = HIBYTE(a1);
  sub_10000F214(&qword_100522AE8);
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a2 = 0x62656420776F6853;
  *(void *)(a2 + 8) = 0xEA00000000006775;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v7;
  *(unsigned char *)(a2 + 33) = v2 & 1;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_10017F744@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 17)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return sub_10017F658(v2 | *(unsigned __int8 *)(v1 + 16), a1);
}

unint64_t sub_10017F764(uint64_t a1)
{
  unint64_t result = sub_10017F78C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017F78C()
{
  unint64_t result = qword_100522A98;
  if (!qword_100522A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522A98);
  }
  return result;
}

unint64_t sub_10017F7E0(void *a1)
{
  a1[1] = sub_100016F80();
  a1[2] = sub_100017320();
  unint64_t result = sub_10017F818();
  a1[3] = result;
  return result;
}

unint64_t sub_10017F818()
{
  unint64_t result = qword_100522AB0;
  if (!qword_100522AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522AB0);
  }
  return result;
}

unint64_t sub_10017F870(uint64_t a1)
{
  unint64_t result = sub_10017F898();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017F898()
{
  unint64_t result = qword_100522AE0;
  if (!qword_100522AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522AE0);
  }
  return result;
}

uint64_t sub_10017F8EC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10017F908()
{
  unint64_t result = qword_100522AF8;
  if (!qword_100522AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522AF8);
  }
  return result;
}

uint64_t sub_10017F95C()
{
  return swift_deallocObject();
}

id sub_10017F99C()
{
  return sub_10017A62C(*(void *)(v0 + 16));
}

uint64_t sub_10017F9A4@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10017FA24(uint64_t a1, void **a2)
{
  __int16 v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_10017FA9C(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  if (AsyncImagePhase.image.getter())
  {
    a2(&v7);
    swift_retain_n();
    sub_10000F214((uint64_t *)&unk_100523160);
    sub_100013AA8(&qword_10051BF28, (uint64_t *)&unk_100523160);
    _ConditionalContent<>.init(storage:)();
    swift_release_n();
    swift_release();
  }
  else
  {
    a4(&v7);
    sub_10000F214((uint64_t *)&unk_100523160);
    sub_100013AA8(&qword_10051BF28, (uint64_t *)&unk_100523160);
    _ConditionalContent<>.init(storage:)();
  }
  return v7;
}

uint64_t sub_10017FC38@<X0>(void (*a1)(void *__return_ptr)@<X1>, void (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  v22[1] = a3;
  uint64_t v5 = sub_10000F214(&qword_100523100);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100523118);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (AsyncImagePhase.image.getter())
  {
    a1(v23);
    uint64_t v11 = v23[1];
    char v12 = v24;
    char v13 = v25;
    uint64_t v14 = v26;
    char v15 = v27;
    uint64_t v16 = v28;
    char v17 = v29;
    char v18 = v31;
    char v19 = v32;
    long long v20 = v30;
    *(void *)uint64_t v10 = v23[0];
    *((void *)v10 + 1) = v11;
    v10[16] = v12;
    v10[17] = v13;
    *((void *)v10 + 3) = v14;
    v10[32] = v15;
    *((void *)v10 + 5) = v16;
    v10[48] = v17;
    *(_OWORD *)(v10 + 56) = v20;
    v10[72] = v18;
    v10[73] = v19;
    swift_storeEnumTagMultiPayload();
    swift_retain_n();
    sub_10000F214((uint64_t *)&unk_1005230C0);
    sub_1001856E8();
    sub_1001857B4();
    _ConditionalContent<>.init(storage:)();
    swift_release_n();
    return swift_release();
  }
  else
  {
    a2();
    sub_10000FB74((uint64_t)v7, (uint64_t)v10, &qword_100523100);
    swift_storeEnumTagMultiPayload();
    sub_10000F214((uint64_t *)&unk_1005230C0);
    sub_1001856E8();
    sub_1001857B4();
    _ConditionalContent<>.init(storage:)();
    return sub_10000FBD8((uint64_t)v7, &qword_100523100);
  }
}

id sub_10017FE88()
{
  return [*(id *)(v0 + 16) openPartnerActionUsingMenuItemViewModel:*(void *)(v0 + 24)];
}

uint64_t sub_10017FEA0(uint64_t a1)
{
  id v3 = *(void **)a1;
  __int16 v2 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 80);
  swift_bridgeObjectRetain();
  id v9 = v3;
  id v10 = v2;
  swift_bridgeObjectRetain();
  sub_100107B70(v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10017FF68(uint64_t a1)
{
  id v3 = *(void **)a1;
  __int16 v2 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 80);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100107B88(v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10018001C()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10018005C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  id v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *id v3 = v1;
  v3[1] = sub_10000F878;
  v3[7] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[8] = v4;
  void *v4 = v3;
  v4[1] = sub_100178EC4;
  return sub_100179144();
}

unsigned char *storeEnumTagSinglePayload for GeoLookupResultView.Configuration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001801D0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultView.Configuration.CodingKeys()
{
  return &type metadata for GeoLookupResultView.Configuration.CodingKeys;
}

void *destroy for GeoLookupResultView(uint64_t a1)
{
  sub_100050720(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 24);
  int v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 48);

  return sub_10004FF38(v2, v3, v4, v5);
}

uint64_t initializeWithCopy for GeoLookupResultView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_100050714(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v7 = *(void **)(a2 + 24);
  unsigned __int8 v8 = *(void **)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  sub_100050624(v7, v8, v9, v10);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v13;
  return a1;
}

uint64_t assignWithCopy for GeoLookupResultView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_100050714(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100050720(v7, v8, v9);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  unint64_t v10 = *(void **)(a2 + 24);
  uint64_t v11 = *(void **)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  uint64_t v16 = *(void *)(a2 + 80);
  sub_100050624(v10, v11, v12, v13);
  char v18 = *(void **)(a1 + 24);
  char v19 = *(void **)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 40);
  unint64_t v21 = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v16;
  sub_10004FF38(v18, v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for GeoLookupResultView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_100050720(v5, v6, v7);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v8 = *(void **)(a1 + 24);
  char v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10004FF38(v8, v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookupResultView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 48) >> 2;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for GeoLookupResultView(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 4 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultView()
{
  return &type metadata for GeoLookupResultView;
}

unsigned char *storeEnumTagSinglePayload for GeoLookupResultView.Configuration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001805F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultView.Configuration()
{
  return &type metadata for GeoLookupResultView.Configuration;
}

uint64_t sub_100180634(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GeoLookupResultView.Configuration.Form(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for GeoLookupResultView.Configuration.Form(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for GeoLookupResultView.Configuration.Form(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookupResultView.Configuration.Form(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookupResultView.Configuration.Form(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultView.Configuration.Form()
{
  return &type metadata for GeoLookupResultView.Configuration.Form;
}

uint64_t sub_1001807E4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100180804()
{
  unint64_t result = qword_100522B40;
  if (!qword_100522B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522B40);
  }
  return result;
}

unint64_t sub_10018085C()
{
  unint64_t result = qword_100522B48;
  if (!qword_100522B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522B48);
  }
  return result;
}

unint64_t sub_1001808B4()
{
  unint64_t result = qword_100522B50;
  if (!qword_100522B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522B50);
  }
  return result;
}

uint64_t sub_100180908(uint64_t a1, uint64_t a2)
{
  sub_1000508CC(a1, (uint64_t)&v44);
  char v3 = v47;
  if (!(v47 >> 62))
  {
    v47 &= 0x3FFFFFFFFFFFFFFFuLL;
    uint64_t v17 = (uint64_t)v44;
    sub_1000508CC(a2, (uint64_t)&v36);
    if (!(v39 >> 62))
    {
      char v13 = sub_1003E1FA0(v17, (uint64_t)v36);
      return v13 & 1;
    }
    goto LABEL_18;
  }
  if (v47 >> 62 != 1)
  {
    v47 &= 0x3FFFFFFFFFFFFFFFuLL;
    uint64_t v5 = v44;
    unsigned int v4 = v45;
    uint64_t v6 = v46;
    uint64_t v19 = v48;
    uint64_t v18 = v49;
    uint64_t v21 = v50;
    uint64_t v20 = v51;
    sub_1000508CC(a2, (uint64_t)&v36);
    char v8 = v39;
    if (v39 >> 62 == 2)
    {
      uint64_t v34 = v18;
      uint64_t v30 = v20;
      v39 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v23 = v36;
      uint64_t v22 = v37;
      uint64_t v24 = v38;
      uint64_t v35 = v40;
      uint64_t v32 = v21;
      uint64_t v33 = v41;
      uint64_t v25 = v43;
      uint64_t v31 = v42;
      sub_1000506C4(v5, v4, v6, v3);
      sub_1000506C4(v23, v22, v24, v8);
      if (sub_10011C6A4(v5, v4, v6, v3, v23, v22, v24, v8)
        && (sub_1003E1FA0(v19, v35) & 1) != 0
        && (sub_1003E2F48(v34, v33) & 1) != 0
        && sub_1003E3050(v32, v31))
      {
        char v13 = sub_1003E30BC(v30, v25);
        uint64_t v14 = v23;
        uint64_t v15 = v22;
        uint64_t v16 = v24;
        goto LABEL_6;
      }
      uint64_t v26 = v23;
      char v27 = v22;
      uint64_t v28 = v24;
      goto LABEL_17;
    }
LABEL_18:
    char v13 = 0;
    return v13 & 1;
  }
  v47 &= 0x3FFFFFFFFFFFFFFFuLL;
  uint64_t v5 = v44;
  unsigned int v4 = v45;
  uint64_t v6 = v46;
  uint64_t v7 = v48;
  sub_1000508CC(a2, (uint64_t)&v36);
  char v8 = v39;
  if (v39 >> 62 != 1) {
    goto LABEL_18;
  }
  v39 &= 0x3FFFFFFFFFFFFFFFuLL;
  char v9 = v36;
  uint64_t v10 = v37;
  uint64_t v11 = v38;
  uint64_t v12 = v40;
  sub_1000506C4(v5, v4, v6, v3);
  sub_1000506C4(v9, v10, v11, v8);
  if (!sub_10011C6A4(v5, v4, v6, v3, v9, v10, v11, v8))
  {
    uint64_t v26 = v9;
    char v27 = v10;
    uint64_t v28 = v11;
LABEL_17:
    sub_10004FFD4(v26, v27, v28, v8);
    sub_10004FFD4(v5, v4, v6, v3);
    goto LABEL_18;
  }
  char v13 = sub_1003E1FA0(v7, v12);
  uint64_t v14 = v9;
  uint64_t v15 = v10;
  uint64_t v16 = v11;
LABEL_6:
  sub_10004FFD4(v14, v15, v16, v8);
  sub_10004FFD4(v5, v4, v6, v3);
  return v13 & 1;
}

uint64_t type metadata accessor for GeoLookupResultViewContainer(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100522D50);
}

unint64_t sub_100180BD0()
{
  unint64_t result = qword_100522BB0;
  if (!qword_100522BB0)
  {
    sub_10000F69C(&qword_100522BA8);
    sub_100180CAC();
    sub_10000F69C(&qword_100522B78);
    sub_100013AA8(&qword_100522BC8, &qword_100522B78);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522BB0);
  }
  return result;
}

unint64_t sub_100180CAC()
{
  unint64_t result = qword_100522BB8;
  if (!qword_100522BB8)
  {
    sub_10000F69C(&qword_100522B98);
    sub_100013AA8(&qword_100522BC0, &qword_100522BA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522BB8);
  }
  return result;
}

unint64_t sub_100180D44()
{
  unint64_t result = qword_100522BD8;
  if (!qword_100522BD8)
  {
    sub_10000F69C(&qword_100522B60);
    sub_100013AA8(&qword_100522BE0, &qword_100522B58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522BD8);
  }
  return result;
}

uint64_t sub_100180DEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100180E54@<X0>(uint64_t a1@<X8>)
{
  return sub_10017F128(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), a1);
}

uint64_t sub_100180E6C()
{
  return sub_10017F568(v0 + 16);
}

uint64_t sub_100180E74(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  char v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 48);
  sub_100050714(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  sub_100050624(v2, v3, v4, v5);
  return a1;
}

uint64_t sub_100180EFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100180F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GeoLookupResultViewContainer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100180F9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GeoLookupResultViewContainer(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100180FF8(void *a1, uint64_t a2)
{
  sub_10000F214(&qword_100522CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
  [a1 coordinate];
  *(void *)(inited + 32) = v5;
  *(void *)(inited + 40) = v6;
  int64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    sub_100040B30(0, v7, 0);
    char v8 = (id *)(a2 + 32);
    do
    {
      [*v8 _coordinate];
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_100040B30(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v8 += 17;
      --v7;
    }
    while (v7);
  }
  sub_10019FE00((uint64_t)_swiftEmptyArrayStorage);
  int64_t v16 = *(void *)(inited + 16);
  if (v16)
  {
    sub_100040974(0, v16, 0);
    uint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t v18 = (uint64_t *)(inited + 32);
    unint64_t v19 = _swiftEmptyArrayStorage[2];
    int64_t v20 = v16;
    do
    {
      uint64_t v21 = *v18;
      uint64_t v58 = v17;
      unint64_t v22 = v17[3];
      unint64_t v23 = v19 + 1;
      if (v19 >= v22 >> 1)
      {
        sub_100040974(v22 > 1, v19 + 1, 1);
        uint64_t v17 = v58;
      }
      v17[2] = v23;
      v17[v19 + 4] = v21;
      v18 += 2;
      ++v19;
      --v20;
    }
    while (v20);
  }
  else
  {
    unint64_t v23 = _swiftEmptyArrayStorage[2];
    if (!v23)
    {
      swift_bridgeObjectRelease();
      double v25 = INFINITY;
      goto LABEL_25;
    }
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  uint64_t v24 = 0;
  double v25 = INFINITY;
  do
  {
    uint64_t v26 = (double *)&v17[v24];
    if (v26[4] < v25) {
      double v25 = v26[4];
    }
    ++v24;
  }
  while (v23 != v24);
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_100040974(0, v16, 0);
    char v27 = _swiftEmptyArrayStorage;
    unint64_t v28 = _swiftEmptyArrayStorage[2];
    char v29 = (uint64_t *)(inited + 40);
    int64_t v30 = v16;
    do
    {
      uint64_t v31 = *v29;
      unsigned __int8 v59 = v27;
      unint64_t v32 = v27[3];
      unint64_t v33 = v28 + 1;
      if (v28 >= v32 >> 1)
      {
        sub_100040974(v32 > 1, v28 + 1, 1);
        char v27 = v59;
      }
      void v27[2] = v33;
      v27[v28 + 4] = v31;
      v29 += 2;
      ++v28;
      --v30;
    }
    while (v30);
    goto LABEL_27;
  }
LABEL_25:
  unint64_t v33 = _swiftEmptyArrayStorage[2];
  if (!v33)
  {
    swift_bridgeObjectRelease();
    double v35 = INFINITY;
    goto LABEL_38;
  }
  char v27 = _swiftEmptyArrayStorage;
LABEL_27:
  uint64_t v34 = 0;
  double v35 = INFINITY;
  do
  {
    uint64_t v36 = (double *)&v27[v34];
    if (v36[4] < v35) {
      double v35 = v36[4];
    }
    ++v34;
  }
  while (v33 != v34);
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_100040974(0, v16, 0);
    uint64_t v37 = _swiftEmptyArrayStorage;
    uint64_t v38 = (uint64_t *)(inited + 32);
    unint64_t v39 = _swiftEmptyArrayStorage[2];
    int64_t v40 = v16;
    do
    {
      uint64_t v41 = *v38;
      uint64_t v60 = v37;
      unint64_t v42 = v37[3];
      unint64_t v43 = v39 + 1;
      if (v39 >= v42 >> 1)
      {
        sub_100040974(v42 > 1, v39 + 1, 1);
        uint64_t v37 = v60;
      }
      v37[2] = v43;
      v37[v39 + 4] = v41;
      v38 += 2;
      ++v39;
      --v40;
    }
    while (v40);
    goto LABEL_40;
  }
LABEL_38:
  unint64_t v43 = _swiftEmptyArrayStorage[2];
  if (!v43)
  {
    swift_bridgeObjectRelease();
    double v45 = -INFINITY;
    goto LABEL_56;
  }
  uint64_t v37 = _swiftEmptyArrayStorage;
LABEL_40:
  uint64_t v44 = 0;
  double v45 = -INFINITY;
  do
  {
    uint64_t v46 = (double *)&v37[v44];
    if (v45 <= v46[4]) {
      double v45 = v46[4];
    }
    ++v44;
  }
  while (v43 != v44);
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_100040974(0, v16, 0);
    unint64_t v47 = _swiftEmptyArrayStorage[2];
    uint64_t v48 = 40;
    do
    {
      uint64_t v49 = *(void *)(inited + v48);
      unint64_t v50 = _swiftEmptyArrayStorage[3];
      if (v47 >= v50 >> 1) {
        sub_100040974(v50 > 1, v47 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v47 + 1;
      _swiftEmptyArrayStorage[v47 + 4] = v49;
      v48 += 16;
      ++v47;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    uint64_t v51 = _swiftEmptyArrayStorage[2];
    if (v51) {
      goto LABEL_50;
    }
LABEL_57:
    double v53 = -INFINITY;
    goto LABEL_58;
  }
LABEL_56:
  swift_bridgeObjectRelease();
  uint64_t v51 = _swiftEmptyArrayStorage[2];
  if (!v51) {
    goto LABEL_57;
  }
LABEL_50:
  long long v52 = (double *)&_swiftEmptyArrayStorage[4];
  double v53 = -INFINITY;
  do
  {
    double v54 = *v52++;
    double v55 = v54;
    if (v53 <= v54) {
      double v53 = v55;
    }
    --v51;
  }
  while (v51);
LABEL_58:
  swift_bridgeObjectRelease();
  id v56 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v25 longitude:v35];
  id v57 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v45 longitude:v53];
  [v56 distanceFromLocation:v57];

  v61.latitude = (v25 + v45) * 0.5;
  v61.longitude = (v35 + v53) * 0.5;
  MKMapPointForCoordinate(v61);
}

void sub_10018151C(void *a1@<X8>)
{
  sub_10017D210(*(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), a1);
}

uint64_t sub_100181534()
{
  sub_100050720(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  sub_10004FF38(*(void **)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t sub_100181584@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>, double a7@<D0>)
{
  return sub_10017D6F0(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10018158C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001815C4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(_OWORD *, void, void, void, void, double))(v1 + 16);
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  uint64_t v9 = *(void *)(a1 + 128);
  long long v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return v2(v8, *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(double *)(a1 + 136));
}

unint64_t sub_10018162C()
{
  unint64_t result = qword_100522C68;
  if (!qword_100522C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522C68);
  }
  return result;
}

unint64_t sub_100181680()
{
  unint64_t result = qword_100522C78;
  if (!qword_100522C78)
  {
    sub_10000F69C(&qword_100522C38);
    sub_100013AA8(&qword_100522C70, &qword_100522C58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522C78);
  }
  return result;
}

uint64_t sub_100181718@<X0>(uint64_t a1@<X8>)
{
  return sub_10017DE58(*(void *)(v1 + 16), *(double *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), a1, *(double *)(v1 + 24));
}

uint64_t sub_10018172C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1000807A8(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100181770(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100012FAC(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001817B4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  long long v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 80);
  swift_bridgeObjectRetain();
  id v9 = v2;
  id v10 = v3;
  swift_bridgeObjectRetain();
  sub_100107B70(v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

double sub_100181868(_OWORD *a1)
{
  double result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *sub_100181888(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v26 = a3;
    id v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = *(void **)((char *)a2 + v9);
    uint64_t v12 = *(void **)((char *)a2 + v9 + 8);
    uint64_t v13 = *(void *)((char *)a2 + v9 + 16);
    unint64_t v14 = *(void *)((char *)a2 + v9 + 24);
    uint64_t v15 = *(void *)((char *)a2 + v9 + 32);
    uint64_t v16 = *(void *)((char *)a2 + v9 + 40);
    uint64_t v17 = *(void *)((char *)a2 + v9 + 48);
    uint64_t v25 = *(void *)((char *)a2 + v9 + 56);
    sub_100050624(v11, v12, v13, v14);
    *id v10 = v11;
    v10[1] = v12;
    void v10[2] = v13;
    v10[3] = v14;
    v10[4] = v15;
    v10[5] = v16;
    v10[6] = v17;
    v10[7] = v25;
    uint64_t v18 = v26[8];
    *(void *)((char *)a1 + v26[7]) = *(void *)((char *)a2 + v26[7]);
    *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
    uint64_t v19 = v26[9];
    int64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = *(void *)v21;
    unint64_t v23 = (void *)*((void *)v21 + 1);
    LOBYTE(v11) = v21[16];
    swift_bridgeObjectRetain();
    sub_100181A5C(v22, v23, (char)v11);
    *(void *)int64_t v20 = v22;
    *((void *)v20 + 1) = v23;
    v20[16] = (char)v11;
  }
  return a1;
}

id sub_100181A5C(uint64_t a1, void *a2, char a3)
{
  if (a3) {
    return a2;
  }
  else {
    return (id)swift_retain();
  }
}

uint64_t sub_100181A6C(uint64_t a1, uint64_t a2)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  sub_10004FF38(*(void **)(a1 + *(int *)(a2 + 24)), *(void **)(a1 + *(int *)(a2 + 24) + 8), *(void *)(a1 + *(int *)(a2 + 24) + 16), *(void *)(a1 + *(int *)(a2 + 24) + 24));
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  char v8 = *(unsigned char *)(v5 + 16);

  return sub_100181B3C(v6, v7, v8);
}

uint64_t sub_100181B3C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return _objc_release_x1();
  }
  else {
    return swift_release();
  }
}

void *sub_100181B4C(void *a1, void *a2, int *a3)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[6];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  char v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v25 = a2;
  uint64_t v11 = *(void **)((char *)a2 + v7);
  id v10 = *(void **)((char *)a2 + v7 + 8);
  uint64_t v12 = v9[2];
  unint64_t v13 = v9[3];
  uint64_t v14 = v9[4];
  uint64_t v15 = v9[5];
  uint64_t v16 = v9[6];
  uint64_t v24 = v9[7];
  sub_100050624(v11, v10, v12, v13);
  void *v8 = v11;
  v8[1] = v10;
  v8[2] = v12;
  v8[3] = v13;
  v8[4] = v14;
  v8[5] = v15;
  v8[6] = v16;
  v8[7] = v24;
  uint64_t v17 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)v25 + a3[7]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)v25 + v17);
  uint64_t v18 = a3[9];
  uint64_t v19 = (char *)a1 + v18;
  int64_t v20 = (char *)v25 + v18;
  uint64_t v21 = *(void *)v20;
  uint64_t v22 = (void *)*((void *)v20 + 1);
  LOBYTE(v11) = v20[16];
  swift_bridgeObjectRetain();
  sub_100181A5C(v21, v22, (char)v11);
  *(void *)uint64_t v19 = v21;
  *((void *)v19 + 1) = v22;
  v19[16] = (char)v11;
  return a1;
}

void *sub_100181CD0(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v7 = a3[6];
  char v8 = a2;
  unint64_t v32 = a3;
  unint64_t v33 = a2;
  uint64_t v9 = (char *)a1 + v7;
  id v10 = (char *)v8 + v7;
  uint64_t v11 = *(void **)v10;
  uint64_t v12 = (void *)*((void *)v10 + 1);
  uint64_t v13 = *((void *)v10 + 2);
  unint64_t v14 = *((void *)v10 + 3);
  uint64_t v15 = *((void *)v10 + 4);
  uint64_t v16 = *((void *)v10 + 5);
  uint64_t v18 = *((void *)v10 + 6);
  uint64_t v17 = *((void *)v10 + 7);
  sub_100050624(*(void **)v10, v12, v13, v14);
  uint64_t v19 = *(void **)v9;
  int64_t v20 = (void *)*((void *)v9 + 1);
  uint64_t v21 = *((void *)v9 + 2);
  unint64_t v22 = *((void *)v9 + 3);
  *(void *)uint64_t v9 = v11;
  *((void *)v9 + 1) = v12;
  *((void *)v9 + 2) = v13;
  *((void *)v9 + 3) = v14;
  *((void *)v9 + 4) = v15;
  *((void *)v9 + 5) = v16;
  *((void *)v9 + 6) = v18;
  *((void *)v9 + 7) = v17;
  sub_10004FF38(v19, v20, v21, v22);
  *(void *)((char *)a1 + v32[7]) = *(void *)((char *)v33 + v32[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v32[8]) = *(void *)((char *)v33 + v32[8]);
  uint64_t v23 = v32[9];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)v33 + v23;
  uint64_t v26 = *(void *)v25;
  char v27 = (void *)*((void *)v25 + 1);
  LOBYTE(v11) = v25[16];
  sub_100181A5C(*(void *)v25, v27, (char)v11);
  uint64_t v28 = *(void *)v24;
  uint64_t v29 = *((void *)v24 + 1);
  char v30 = v24[16];
  *(void *)uint64_t v24 = v26;
  *((void *)v24 + 1) = v27;
  v24[16] = (char)v11;
  sub_100181B3C(v28, v29, v30);
  return a1;
}

char *sub_100181EA4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v9 = &a1[v8];
  id v10 = &a2[v8];
  long long v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  long long v12 = *((_OWORD *)v10 + 3);
  *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
  *((_OWORD *)v9 + 3) = v12;
  uint64_t v13 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  v15[16] = v16[16];
  return a1;
}

char *sub_100181FC0(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v6 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  uint64_t v9 = &a1[v8];
  id v10 = &a2[v8];
  long long v11 = *(void **)v9;
  long long v12 = (void *)*((void *)v9 + 1);
  uint64_t v13 = *((void *)v9 + 2);
  unint64_t v14 = *((void *)v9 + 3);
  long long v15 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v15;
  long long v16 = *((_OWORD *)v10 + 3);
  *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
  *((_OWORD *)v9 + 3) = v16;
  sub_10004FF38(v11, v12, v13, v14);
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  char v20 = v19[16];
  uint64_t v21 = *(void *)v18;
  uint64_t v22 = *((void *)v18 + 1);
  char v23 = v18[16];
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  v18[16] = v20;
  sub_100181B3C(v21, v22, v23);
  return a1;
}

uint64_t sub_10018211C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100182130);
}

uint64_t sub_100182130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if ((*(void *)(a1 + *(int *)(a3 + 24) + 24) >> 2) > 0x80000000)
  {
    return -(*(void *)(a1 + *(int *)(a3 + 24) + 24) >> 2);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1001821F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018220C);
}

double sub_10018220C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000F214(&qword_100522CF0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    id v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = 4 * -(int)a2;
    double result = 0.0;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
  }
  return result;
}

void sub_1001822E0()
{
  sub_100027A88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *destroy for GeoLookupState(uint64_t a1)
{
  return sub_10004FF38(*(void **)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

void *initializeWithCopy for GeoLookupState(void *a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  sub_100050624(*(void **)a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  return a1;
}

uint64_t assignWithCopy for GeoLookupState(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  sub_100050624(*(void **)a2, v4, v5, v6);
  long long v11 = *(void **)a1;
  uint64_t v12 = *(void **)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  sub_10004FF38(v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for GeoLookupState(uint64_t a1, _OWORD *a2)
{
  long long v3 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v7;
  long long v8 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v8;
  sub_10004FF38(v3, v5, v4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookupState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 24) >> 2;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for GeoLookupState(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 4 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1001825E0(uint64_t a1)
{
  return *(void *)(a1 + 24) >> 62;
}

uint64_t sub_1001825EC(uint64_t result)
{
  *(void *)(result + 24) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1001825FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = *(void *)(result + 24) & 3 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupState()
{
  return &type metadata for GeoLookupState;
}

unint64_t sub_100182624()
{
  unint64_t result = qword_100522DA0;
  if (!qword_100522DA0)
  {
    sub_10000F69C(&qword_100522DA8);
    sub_100180BD0();
    sub_100183AD4(&qword_100522BD0, &qword_100522B68, (void (*)(void))sub_100180D44);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522DA0);
  }
  return result;
}

uint64_t sub_1001826D8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1001826F8()
{
  uint64_t v1 = *(void *)(type metadata accessor for GeoLookupResultViewContainer(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_100178B10(v2);
}

unint64_t sub_100182758()
{
  unint64_t result = qword_100522DF0;
  if (!qword_100522DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522DF0);
  }
  return result;
}

uint64_t sub_1001827AC(uint64_t a1)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 88);
  swift_bridgeObjectRetain();
  id v9 = v3;
  id v10 = v2;
  swift_bridgeObjectRetain();
  sub_100107B70(v4, v5, v6, v7, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100182880(uint64_t a1)
{
  int v3 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 80);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100107B88(v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100182944(uint64_t a1)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100107B88(v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_100182A20()
{
  uint64_t v1 = type metadata accessor for GeoLookupResultViewContainer(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = v0 + v2;
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v0 + v2, v4);
  }
  else
  {
    swift_release();
  }
  sub_10004FF38(*(void **)(v3 + *(int *)(v1 + 24)), *(void **)(v3 + *(int *)(v1 + 24) + 8), *(void *)(v3 + *(int *)(v1 + 24) + 16), *(void *)(v3 + *(int *)(v1 + 24) + 24));
  swift_bridgeObjectRelease();
  sub_100181B3C(*(void *)(v3 + *(int *)(v1 + 36)), *(void *)(v3 + *(int *)(v1 + 36) + 8), *(unsigned char *)(v3 + *(int *)(v1 + 36) + 16));

  return swift_deallocObject();
}

uint64_t sub_100182B70@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for GeoLookupResultViewContainer(0);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  long long v7 = a1[3];
  long long v8 = a1[5];
  long long v27 = a1[4];
  long long v28 = v8;
  long long v9 = a1[1];
  long long v10 = a1[3];
  long long v25 = a1[2];
  long long v26 = v10;
  long long v11 = a1[9];
  long long v33 = a1[10];
  long long v12 = a1[7];
  long long v13 = a1[9];
  long long v31 = a1[8];
  long long v32 = v13;
  long long v14 = a1[5];
  long long v15 = a1[7];
  long long v29 = a1[6];
  long long v30 = v15;
  long long v16 = a1[1];
  v24[0] = *a1;
  v24[1] = v16;
  uint64_t v17 = *(int *)(v5 + 20);
  *(_OWORD *)((char *)&v34[7] + 7) = v12;
  *(_OWORD *)((char *)&v34[8] + 7) = v31;
  *(_OWORD *)((char *)&v34[9] + 7) = v11;
  *(_OWORD *)((char *)&v34[10] + 7) = a1[10];
  *(_OWORD *)((char *)&v34[3] + 7) = v7;
  *(_OWORD *)((char *)&v34[4] + 7) = v27;
  *(_OWORD *)((char *)&v34[5] + 7) = v14;
  *(_OWORD *)((char *)&v34[6] + 7) = v29;
  *(_OWORD *)((char *)v34 + 7) = v24[0];
  *(_OWORD *)((char *)&v34[1] + 7) = v9;
  *(_OWORD *)((char *)&v34[2] + 7) = v25;
  long long v18 = v34[9];
  *(_OWORD *)(a2 + 129) = v34[8];
  *(_OWORD *)(a2 + 145) = v18;
  *(_OWORD *)(a2 + 161) = v34[10];
  long long v19 = v34[5];
  *(_OWORD *)(a2 + 65) = v34[4];
  *(_OWORD *)(a2 + 81) = v19;
  long long v20 = v34[7];
  *(_OWORD *)(a2 + 97) = v34[6];
  *(_OWORD *)(a2 + 113) = v20;
  long long v21 = v34[1];
  *(_OWORD *)(a2 + 1) = v34[0];
  *(_OWORD *)(a2 + 17) = v21;
  long long v22 = v34[3];
  *(_OWORD *)(a2 + 33) = v34[2];
  *(unsigned char *)a2 = *(unsigned char *)(v2 + ((v6 + 16) & ~v6) + v17);
  *(void *)(a2 + 176) = *(void *)((char *)&v34[10] + 15);
  *(_OWORD *)(a2 + 49) = v22;
  return sub_10017FEA0((uint64_t)v24);
}

unint64_t sub_100182CB8()
{
  unint64_t result = qword_100522E58;
  if (!qword_100522E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522E58);
  }
  return result;
}

uint64_t initializeWithCopy for GeoLookupResultDisambiguationItemView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 88);
  id v9 = v4;
  id v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 255)
  {
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  }
  else
  {
    char v12 = v8 & 1;
    uint64_t v13 = *(void *)(a2 + 56);
    uint64_t v14 = *(void *)(a2 + 64);
    uint64_t v15 = *(void *)(a2 + 72);
    uint64_t v16 = *(void *)(a2 + 80);
    sub_100105860(v13, v14, v15, v16, v12);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v16;
    *(unsigned char *)(a1 + 88) = v12;
  }
  uint64_t v17 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v17;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  uint64_t v18 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v18;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeoLookupResultDisambiguationItemView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 16);
  int v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = (long long *)(a1 + 56);
  long long v11 = (long long *)(a2 + 56);
  int v12 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v12 == 255)
    {
      long long v15 = *v11;
      long long v16 = *(_OWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *id v10 = v15;
      *(_OWORD *)(a1 + 72) = v16;
    }
    else
    {
      char v27 = v12 & 1;
      uint64_t v28 = *(void *)(a2 + 56);
      uint64_t v29 = *(void *)(a2 + 64);
      uint64_t v30 = *(void *)(a2 + 72);
      uint64_t v31 = *(void *)(a2 + 80);
      sub_100105860(v28, v29, v30, v31, v12 & 1);
      *(void *)(a1 + 56) = v28;
      *(void *)(a1 + 64) = v29;
      *(void *)(a1 + 72) = v30;
      *(void *)(a1 + 80) = v31;
      *(unsigned char *)(a1 + 88) = v27;
    }
  }
  else if (v12 == 255)
  {
    sub_100105BC8(a1 + 56);
    char v13 = *(unsigned char *)(a2 + 88);
    long long v14 = *(_OWORD *)(a2 + 72);
    *id v10 = *v11;
    *(_OWORD *)(a1 + 72) = v14;
    *(unsigned char *)(a1 + 88) = v13;
  }
  else
  {
    char v17 = v12 & 1;
    uint64_t v18 = *(void *)(a2 + 56);
    uint64_t v19 = *(void *)(a2 + 64);
    uint64_t v20 = *(void *)(a2 + 72);
    uint64_t v21 = *(void *)(a2 + 80);
    sub_100105860(v18, v19, v20, v21, v12 & 1);
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    uint64_t v24 = *(void *)(a1 + 72);
    uint64_t v25 = *(void *)(a1 + 80);
    char v26 = *(unsigned char *)(a1 + 88);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v19;
    *(void *)(a1 + 72) = v20;
    *(void *)(a1 + 80) = v21;
    *(unsigned char *)(a1 + 88) = v17;
    sub_1001058F0(v22, v23, v24, v25, v26);
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v32 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v32;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for GeoLookupResultDisambiguationItemView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for GeoLookupResultDisambiguationItemView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  long long v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  int v8 = *(unsigned __int8 *)(a1 + 88);
  if (v8 != 255)
  {
    int v9 = *(unsigned __int8 *)(a2 + 88);
    if (v9 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = *(void *)(a1 + 64);
      uint64_t v13 = *(void *)(a1 + 72);
      uint64_t v14 = *(void *)(a1 + 80);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 88) = v9 & 1;
      sub_1001058F0(v11, v12, v13, v14, v8 & 1);
      goto LABEL_6;
    }
    sub_100105BC8(a1 + 56);
  }
  long long v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
LABEL_6:
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookupResultDisambiguationItemView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 184)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookupResultDisambiguationItemView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 184) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultDisambiguationItemView()
{
  return &type metadata for GeoLookupResultDisambiguationItemView;
}

uint64_t destroy for GeoLookupResultItemView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 88);
  if (v2 != 255) {
    sub_1001058F0(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), v2 & 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for GeoLookupResultItemView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(void **)(a2 + 8);
  long long v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 88);
  id v9 = v4;
  id v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 255)
  {
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  }
  else
  {
    char v12 = v8 & 1;
    uint64_t v13 = *(void *)(a2 + 56);
    uint64_t v14 = *(void *)(a2 + 64);
    uint64_t v15 = *(void *)(a2 + 72);
    uint64_t v16 = *(void *)(a2 + 80);
    sub_100105860(v13, v14, v15, v16, v12);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v16;
    *(unsigned char *)(a1 + 88) = v12;
  }
  uint64_t v17 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v17;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  uint64_t v18 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v18;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GeoLookupResultItemView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(void **)(a2 + 8);
  long long v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 16);
  int v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = (long long *)(a1 + 56);
  long long v11 = (long long *)(a2 + 56);
  int v12 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v12 == 255)
    {
      long long v15 = *v11;
      long long v16 = *(_OWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *id v10 = v15;
      *(_OWORD *)(a1 + 72) = v16;
    }
    else
    {
      char v27 = v12 & 1;
      uint64_t v28 = *(void *)(a2 + 56);
      uint64_t v29 = *(void *)(a2 + 64);
      uint64_t v30 = *(void *)(a2 + 72);
      uint64_t v31 = *(void *)(a2 + 80);
      sub_100105860(v28, v29, v30, v31, v12 & 1);
      *(void *)(a1 + 56) = v28;
      *(void *)(a1 + 64) = v29;
      *(void *)(a1 + 72) = v30;
      *(void *)(a1 + 80) = v31;
      *(unsigned char *)(a1 + 88) = v27;
    }
  }
  else if (v12 == 255)
  {
    sub_100105BC8(a1 + 56);
    char v13 = *(unsigned char *)(a2 + 88);
    long long v14 = *(_OWORD *)(a2 + 72);
    *id v10 = *v11;
    *(_OWORD *)(a1 + 72) = v14;
    *(unsigned char *)(a1 + 88) = v13;
  }
  else
  {
    char v17 = v12 & 1;
    uint64_t v18 = *(void *)(a2 + 56);
    uint64_t v19 = *(void *)(a2 + 64);
    uint64_t v20 = *(void *)(a2 + 72);
    uint64_t v21 = *(void *)(a2 + 80);
    sub_100105860(v18, v19, v20, v21, v12 & 1);
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    uint64_t v24 = *(void *)(a1 + 72);
    uint64_t v25 = *(void *)(a1 + 80);
    char v26 = *(unsigned char *)(a1 + 88);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v19;
    *(void *)(a1 + 72) = v20;
    *(void *)(a1 + 80) = v21;
    *(unsigned char *)(a1 + 88) = v17;
    sub_1001058F0(v22, v23, v24, v25, v26);
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v32 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v32;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for GeoLookupResultItemView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for GeoLookupResultItemView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  long long v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  int v8 = *(unsigned __int8 *)(a1 + 88);
  if (v8 != 255)
  {
    int v9 = *(unsigned __int8 *)(a2 + 88);
    if (v9 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = *(void *)(a1 + 64);
      uint64_t v13 = *(void *)(a1 + 72);
      uint64_t v14 = *(void *)(a1 + 80);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 88) = v9 & 1;
      sub_1001058F0(v11, v12, v13, v14, v8 & 1);
      goto LABEL_6;
    }
    sub_100105BC8(a1 + 56);
  }
  long long v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
LABEL_6:
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookupResultItemView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookupResultItemView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultItemView()
{
  return &type metadata for GeoLookupResultItemView;
}

uint64_t sub_1001838E4()
{
  return sub_100183928(&qword_100522E68, &qword_100522DD0, (void (*)(void))sub_1001839A4);
}

uint64_t sub_100183928(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001839A4()
{
  unint64_t result = qword_100522E70;
  if (!qword_100522E70)
  {
    sub_10000F69C(&qword_100522DC0);
    sub_100183A20();
    sub_100183BE0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522E70);
  }
  return result;
}

unint64_t sub_100183A20()
{
  unint64_t result = qword_100522E78;
  if (!qword_100522E78)
  {
    sub_10000F69C(&qword_100522DB8);
    sub_100183AD4(&qword_100522E80, &qword_100522DB0, (void (*)(void))sub_100183B40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522E78);
  }
  return result;
}

uint64_t sub_100183AD4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100183B40()
{
  unint64_t result = qword_100522E88;
  if (!qword_100522E88)
  {
    sub_10000F69C(&qword_100522E90);
    sub_100182758();
    sub_100013AA8(&qword_100522DF8, &qword_100522DD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522E88);
  }
  return result;
}

unint64_t sub_100183BE0()
{
  unint64_t result = qword_100522E98;
  if (!qword_100522E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522E98);
  }
  return result;
}

uint64_t sub_100183C34()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100183C50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100183C6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100175C8C(*(void *)(v1 + 16), a1);
}

uint64_t sub_100183C74()
{
  return sub_10017624C(*(void *)(v0 + 16));
}

unint64_t sub_100183C7C()
{
  unint64_t result = qword_100522EC0;
  if (!qword_100522EC0)
  {
    sub_10000F69C(&qword_100522EB0);
    sub_100013AA8(&qword_100522EC8, &qword_100522EA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522EC0);
  }
  return result;
}

id *sub_100183D20()
{
  return sub_1001769F8(v0 + 16);
}

unint64_t sub_100183D28()
{
  unint64_t result = qword_100522EE0;
  if (!qword_100522EE0)
  {
    sub_10000F69C(&qword_100522ED8);
    sub_100013AA8(&qword_100522EE8, (uint64_t *)&unk_100522EF0);
    sub_100013AA8((unint64_t *)&qword_10051B8C0, &qword_100522F00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522EE0);
  }
  return result;
}

uint64_t sub_100183DEC(uint64_t a1)
{
  long long v3 = *(void **)(a1 + 56);
  unint64_t v2 = *(void **)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 128);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 136);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100107B88(v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100183EBC()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100183F18(uint64_t a1)
{
  long long v3 = *(void **)(a1 + 32);
  unint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 112);
  swift_bridgeObjectRetain();
  id v9 = v3;
  id v10 = v2;
  swift_bridgeObjectRetain();
  sub_100107B70(v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100183FEC(uint64_t a1)
{
  long long v3 = *(void **)(a1 + 32);
  unint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 112);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100107B88(v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001840C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 104);
  if (v1 != 255) {
    sub_1001058F0(*(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), v1 & 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

id *sub_100184154()
{
  return sub_100176154(v0 + 16);
}

id sub_10018415C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11)
{
  if (a11)
  {
    char v13 = a5 & 1;
    swift_bridgeObjectRetain();
    sub_10016180C(a4, v13);
    swift_retain();
    return a6;
  }
  else
  {
    char v15 = a3 & 1;
    swift_unknownObjectRetain();
    return (id)sub_10016180C(a2, v15);
  }
}

uint64_t sub_100184208(uint64_t a1)
{
  long long v3 = *(void **)(a1 + 8);
  unint64_t v2 = *(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 88);
  swift_bridgeObjectRetain();
  id v9 = v3;
  id v10 = v2;
  swift_bridgeObjectRetain();
  sub_100107B70(v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001842D0(uint64_t a1)
{
  long long v3 = *(void **)(a1 + 8);
  unint64_t v2 = *(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100107B88(v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100184394(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, int))
{
  BYTE2(v4) = *(unsigned char *)(a1 + 74);
  LOWORD(v4) = *(_WORD *)(a1 + 72);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v4);
  return a1;
}

uint64_t sub_1001843F4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11)
{
  if (a11)
  {
    swift_bridgeObjectRelease();
    sub_100161890(a4, a5 & 1);

    return swift_release();
  }
  else
  {
    char v16 = a3 & 1;
    swift_unknownObjectRelease();
    return sub_100161890(a2, v16);
  }
}

unint64_t sub_10018449C()
{
  unint64_t result = qword_100522FC0;
  if (!qword_100522FC0)
  {
    sub_10000F69C(&qword_100522FB8);
    sub_100013AA8(&qword_100522FC8, &qword_100522FD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522FC0);
  }
  return result;
}

uint64_t sub_10018453C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 136);
  long long v3 = *(void **)(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = *(void *)(a1 + 200);
  uint64_t v7 = *(void *)(a1 + 208);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 216);
  sub_1001843F4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void **)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(_WORD *)(a1 + 72), *(unsigned char *)(a1 + 74));
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100107B88(v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10018463C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 104);
  if (v1 != 255) {
    sub_1001058F0(*(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), v1 & 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id *sub_1001846C8()
{
  return sub_100177990(v0 + 16);
}

unint64_t sub_1001846D0()
{
  unint64_t result = qword_100522FD8;
  if (!qword_100522FD8)
  {
    sub_10000F69C(&qword_100522FB0);
    sub_100183928(&qword_100522FE0, &qword_100522FA8, (void (*)(void))sub_10018479C);
    sub_100013AA8(&qword_100522FF8, (uint64_t *)&unk_100523000);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522FD8);
  }
  return result;
}

unint64_t sub_10018479C()
{
  unint64_t result = qword_100522FE8;
  if (!qword_100522FE8)
  {
    sub_10000F69C(&qword_100522FA0);
    sub_10018449C();
    sub_100184848((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522FE8);
  }
  return result;
}

uint64_t sub_100184848(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100184898()
{
  unint64_t result = qword_100523018;
  if (!qword_100523018)
  {
    sub_10000F69C(&qword_100523010);
    sub_100183928(&qword_100523020, &qword_100523028, (void (*)(void))sub_100184964);
    sub_100013AA8(&qword_10051B990, (uint64_t *)&unk_100523040);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523018);
  }
  return result;
}

unint64_t sub_100184964()
{
  unint64_t result = qword_100523030;
  if (!qword_100523030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523030);
  }
  return result;
}

ValueMetadata *type metadata accessor for MapsPlaceViewControllerWrapper()
{
  return &type metadata for MapsPlaceViewControllerWrapper;
}

ValueMetadata *type metadata accessor for GeoLookupResultItemImageGrid()
{
  return &type metadata for GeoLookupResultItemImageGrid;
}

uint64_t _s6Tamale37GeoLookupResultDisambiguationItemViewVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 88);
  if (v2 != 255) {
    sub_1001058F0(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), v2 & 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeoLookupResultPlaceSummaryView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 88);
  id v9 = v4;
  id v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 255)
  {
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  }
  else
  {
    char v12 = v8 & 1;
    uint64_t v13 = *(void *)(a2 + 56);
    uint64_t v14 = *(void *)(a2 + 64);
    uint64_t v15 = *(void *)(a2 + 72);
    uint64_t v16 = *(void *)(a2 + 80);
    sub_100105860(v13, v14, v15, v16, v12);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v16;
    *(unsigned char *)(a1 + 88) = v12;
  }
  uint64_t v17 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v17;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  uint64_t v18 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v18;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeoLookupResultPlaceSummaryView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 16);
  int v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = (long long *)(a1 + 56);
  long long v11 = (long long *)(a2 + 56);
  int v12 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v12 == 255)
    {
      long long v15 = *v11;
      long long v16 = *(_OWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *id v10 = v15;
      *(_OWORD *)(a1 + 72) = v16;
    }
    else
    {
      char v27 = v12 & 1;
      uint64_t v28 = *(void *)(a2 + 56);
      uint64_t v29 = *(void *)(a2 + 64);
      uint64_t v30 = *(void *)(a2 + 72);
      uint64_t v31 = *(void *)(a2 + 80);
      sub_100105860(v28, v29, v30, v31, v12 & 1);
      *(void *)(a1 + 56) = v28;
      *(void *)(a1 + 64) = v29;
      *(void *)(a1 + 72) = v30;
      *(void *)(a1 + 80) = v31;
      *(unsigned char *)(a1 + 88) = v27;
    }
  }
  else if (v12 == 255)
  {
    sub_100105BC8(a1 + 56);
    char v13 = *(unsigned char *)(a2 + 88);
    long long v14 = *(_OWORD *)(a2 + 72);
    *id v10 = *v11;
    *(_OWORD *)(a1 + 72) = v14;
    *(unsigned char *)(a1 + 88) = v13;
  }
  else
  {
    char v17 = v12 & 1;
    uint64_t v18 = *(void *)(a2 + 56);
    uint64_t v19 = *(void *)(a2 + 64);
    uint64_t v20 = *(void *)(a2 + 72);
    uint64_t v21 = *(void *)(a2 + 80);
    sub_100105860(v18, v19, v20, v21, v12 & 1);
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    uint64_t v24 = *(void *)(a1 + 72);
    uint64_t v25 = *(void *)(a1 + 80);
    char v26 = *(unsigned char *)(a1 + 88);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v19;
    *(void *)(a1 + 72) = v20;
    *(void *)(a1 + 80) = v21;
    *(unsigned char *)(a1 + 88) = v17;
    sub_1001058F0(v22, v23, v24, v25, v26);
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v32 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v32;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  return a1;
}

__n128 initializeWithTake for GeoLookupResultPlaceSummaryView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for GeoLookupResultPlaceSummaryView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  long long v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  int v8 = *(unsigned __int8 *)(a1 + 88);
  if (v8 != 255)
  {
    int v9 = *(unsigned __int8 *)(a2 + 88);
    if (v9 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = *(void *)(a1 + 64);
      uint64_t v13 = *(void *)(a1 + 72);
      uint64_t v14 = *(void *)(a1 + 80);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 88) = v9 & 1;
      sub_1001058F0(v11, v12, v13, v14, v8 & 1);
      goto LABEL_6;
    }
    sub_100105BC8(a1 + 56);
  }
  long long v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
LABEL_6:
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookupResultPlaceSummaryView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 185)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookupResultPlaceSummaryView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 184) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 185) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 185) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultPlaceSummaryView()
{
  return &type metadata for GeoLookupResultPlaceSummaryView;
}

uint64_t destroy for GeoLookupResultItemImage(uint64_t a1)
{
  swift_unknownObjectRelease();
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);

  return sub_100161890(v2, v3);
}

uint64_t _s6Tamale24GeoLookupResultItemImageVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  swift_unknownObjectRetain();
  sub_10016180C(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for GeoLookupResultItemImage(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v4 = v2[1];
  LOBYTE(v2) = *((unsigned char *)v2 + 16);
  sub_10016180C(v4, (char)v2);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = (_BYTE)v2;
  sub_100161890(v5, v6);
  return a1;
}

uint64_t assignWithTake for GeoLookupResultItemImage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  sub_100161890(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookupResultItemImage(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookupResultItemImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultItemImage()
{
  return &type metadata for GeoLookupResultItemImage;
}

uint64_t sub_100185208()
{
  return sub_100013AA8(&qword_100523050, &qword_100523058);
}

uint64_t sub_100185244()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001852A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001852BC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1001852DC()
{
  unint64_t result = qword_100523060;
  if (!qword_100523060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523060);
  }
  return result;
}

uint64_t sub_100185330()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10018534C()
{
  swift_unknownObjectRelease();
  sub_100161890(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return swift_deallocObject();
}

uint64_t sub_100185390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10017B39C(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), a2);
}

unint64_t sub_10018539C()
{
  unint64_t result = qword_100523090;
  if (!qword_100523090)
  {
    sub_10000F69C(&qword_100523070);
    sub_100013AA8(&qword_100523098, &qword_100523068);
    sub_100184848((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523090);
  }
  return result;
}

uint64_t sub_10018546C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    sub_100184848((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100185510()
{
  uint64_t v1 = type metadata accessor for GeometryProxy();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

double sub_1001855A0@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for GeometryProxy();

  return sub_10017BDC0(a1);
}

uint64_t sub_100185620()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100185660@<X0>(uint64_t a1@<X8>)
{
  return sub_10017FC38(*(void (**)(void *__return_ptr))(v1 + 16), *(void (**)(void))(v1 + 32), a1);
}

unint64_t sub_10018566C()
{
  unint64_t result = qword_1005230B0;
  if (!qword_1005230B0)
  {
    sub_10000F69C(&qword_1005230A8);
    sub_1001856E8();
    sub_1001857B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005230B0);
  }
  return result;
}

unint64_t sub_1001856E8()
{
  unint64_t result = qword_1005230B8;
  if (!qword_1005230B8)
  {
    sub_10000F69C((uint64_t *)&unk_1005230C0);
    sub_100183928((unint64_t *)&qword_10051AD68, (uint64_t *)&unk_1005230D0, (void (*)(void))sub_100061FC8);
    sub_100013AA8(&qword_10051AC48, &qword_1005230F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005230B8);
  }
  return result;
}

unint64_t sub_1001857B4()
{
  unint64_t result = qword_1005230F8;
  if (!qword_1005230F8)
  {
    sub_10000F69C(&qword_100523100);
    sub_100013AA8(&qword_100523108, &qword_100523110);
    sub_100013AA8(&qword_10051AC48, &qword_1005230F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005230F8);
  }
  return result;
}

unint64_t sub_100185880()
{
  unint64_t result = qword_100523170;
  if (!qword_100523170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523170);
  }
  return result;
}

uint64_t sub_1001858D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 56);
  char v10 = *(unsigned char *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v19 = *(void *)(a1 + 88);
  uint64_t v16 = *(void *)(a1 + 112);
  uint64_t v17 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 128);
  uint64_t v15 = *(void *)(a1 + 120);
  uint64_t v13 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 160);
  char v8 = *(unsigned char *)(a1 + 168);
  swift_unknownObjectRelease();
  sub_100161890(v2, v3);
  swift_unknownObjectRelease();
  sub_100161890(v4, v5);
  swift_unknownObjectRelease();
  sub_100161890(v11, v10);
  sub_1001859D0(v19, v18, v17, v16, v15, v14, v13, v12, v6, v7, v8);
  return a1;
}

void sub_1001859D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a3 != 1)
  {
    char v14 = a5 & 1;
    char v15 = a8 & 1;
    swift_unknownObjectRelease();
    sub_100161890(a4, v14);
    swift_unknownObjectRelease();
    sub_100161890(a7, v15);
    swift_unknownObjectRelease();
    sub_100161890(a10, a11 & 1);
  }
}

void sub_100185A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a3 != 1)
  {
    char v14 = a5 & 1;
    char v15 = a8 & 1;
    swift_unknownObjectRetain();
    sub_10016180C(a4, v14);
    swift_unknownObjectRetain();
    sub_10016180C(a7, v15);
    swift_unknownObjectRetain();
    sub_10016180C(a10, a11 & 1);
  }
}

unint64_t sub_100185B20()
{
  unint64_t result = qword_1005231E8;
  if (!qword_1005231E8)
  {
    sub_10000F69C(&qword_1005231D0);
    sub_100013AA8((unint64_t *)&unk_1005231F0, &qword_1005231C8);
    sub_100013AA8(&qword_100518D00, &qword_100523200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005231E8);
  }
  return result;
}

unint64_t sub_100185BE4()
{
  unint64_t result = qword_100523218;
  if (!qword_100523218)
  {
    sub_10000F69C(&qword_100523188);
    sub_100013AA8(&qword_100523220, &qword_100523180);
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523218);
  }
  return result;
}

unint64_t sub_100185CB0()
{
  unint64_t result = qword_100523298;
  if (!qword_100523298)
  {
    sub_10000F69C(&qword_100523250);
    sub_10018546C((unint64_t *)&qword_1005232A0, (uint64_t *)&unk_100522E10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523298);
  }
  return result;
}

uint64_t sub_100185D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if (a6)
  {
    sub_1000807A8(a3, a4, a5 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100185D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if (a6)
  {
    sub_100012FAC(a3, a4, a5 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100185DE0()
{
  unint64_t result = qword_1005232E0;
  if (!qword_1005232E0)
  {
    sub_10000F69C(&qword_1005232E8);
    sub_100013AA8(&qword_1005232F0, &qword_1005232F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005232E0);
  }
  return result;
}

unint64_t sub_100185E84()
{
  unint64_t result = qword_100523300;
  if (!qword_100523300)
  {
    sub_10000F69C(&qword_100523308);
    sub_100185F24();
    sub_100013AA8(&qword_10051B990, (uint64_t *)&unk_100523040);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523300);
  }
  return result;
}

unint64_t sub_100185F24()
{
  unint64_t result = qword_100523310;
  if (!qword_100523310)
  {
    sub_10000F69C(&qword_100523318);
    sub_100013AA8(&qword_100523320, &qword_100523328);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523310);
  }
  return result;
}

uint64_t sub_100185FC4()
{
  return sub_100013AA8(&qword_100523330, &qword_100523338);
}

uint64_t initializeWithCopy for ACMECloseButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ACMECloseButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ACMECloseButton(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ACMECloseButton()
{
  return &type metadata for ACMECloseButton;
}

uint64_t destroy for ACMEKeyboardView()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ACMEKeyboardView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ACMEKeyboardView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ACMEKeyboardView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ACMEKeyboardView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ACMEKeyboardView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ACMEKeyboardView()
{
  return &type metadata for ACMEKeyboardView;
}

uint64_t sub_100186428()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100186444()
{
  uint64_t v1 = sub_10000F214(&qword_1005233E0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v3 = static VerticalAlignment.center.getter();
  *((void *)v3 + 1) = 0x4014000000000000;
  v3[16] = 0;
  uint64_t v4 = sub_10000F214(&qword_1005233E8);
  sub_1001865EC(v0, (uint64_t)&v3[*(int *)(v4 + 44)]);
  long long v9 = *(_OWORD *)(v0 + 32);
  char v10 = *(unsigned char *)(v0 + 48);
  sub_10000F214(&qword_1005233D8);
  FocusState.Binding.wrappedValue.getter();
  LOBYTE(v9) = v11;
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(void *)(v5 + 80) = *(void *)(v0 + 64);
  long long v7 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v5 + 32) = v7;
  sub_100189BFC(v0);
  sub_100013AA8(&qword_1005233F0, &qword_1005233E0);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  return sub_10000FBD8((uint64_t)v3, &qword_1005233E0);
}

uint64_t sub_1001865EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ACMEKeyboardFieldStyle();
  __chkstk_darwin(v4 - 8);
  long long v6 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000F214(&qword_1005233F8);
  __chkstk_darwin(v7 - 8);
  long long v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100523400);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100523408);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)long long v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0x4020000000000000;
  v9[16] = 0;
  uint64_t v18 = sub_10000F214(&qword_100523410);
  sub_1001868A0(a1, (uint64_t)&v9[*(int *)(v18 + 44)]);
  LOBYTE(a1) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  sub_10000FB74((uint64_t)v9, (uint64_t)v13, &qword_1005233F8);
  char v27 = &v13[*(int *)(v11 + 44)];
  *char v27 = a1;
  *((void *)v27 + 1) = v20;
  *((void *)v27 + 2) = v22;
  *((void *)v27 + 3) = v24;
  *((void *)v27 + 4) = v26;
  v27[40] = 0;
  sub_10000FBD8((uint64_t)v9, &qword_1005233F8);
  LOBYTE(v11) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_10000FB74((uint64_t)v13, (uint64_t)v17, &qword_100523400);
  uint64_t v36 = &v17[*(int *)(v15 + 44)];
  *uint64_t v36 = v11;
  *((void *)v36 + 1) = v29;
  *((void *)v36 + 2) = v31;
  *((void *)v36 + 3) = v33;
  *((void *)v36 + 4) = v35;
  v36[40] = 0;
  sub_10000FBD8((uint64_t)v13, &qword_100523400);
  *long long v6 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = sub_10000F214(&qword_100523418);
  sub_100189D20((uint64_t)v6, a2 + *(int *)(v37 + 36));
  return sub_10000FC34((uint64_t)v17, a2, &qword_100523408);
}

uint64_t sub_1001868A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v178 = a1;
  uint64_t v176 = a2;
  uint64_t v2 = type metadata accessor for SubmitTriggers();
  uint64_t v174 = *(void *)(v2 - 8);
  uint64_t v175 = v2;
  __chkstk_darwin(v2);
  v173 = (char *)v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SubmitLabel();
  uint64_t v171 = *(void *)(v4 - 8);
  uint64_t v172 = v4;
  __chkstk_darwin(v4);
  v170 = (char *)v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for Text.TruncationMode();
  uint64_t v168 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for PlainTextFieldStyle();
  uint64_t v166 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  v161 = (char *)v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for ColorScheme();
  uint64_t v137 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v136 = (char *)v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000F214(&qword_100523420);
  uint64_t v131 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  long long v126 = (char *)v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100523428);
  __chkstk_darwin(v10 - 8);
  uint64_t v127 = (char *)v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000F214(&qword_100523430) - 8;
  __chkstk_darwin(v129);
  uint64_t v128 = (char *)v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_10000F214(&qword_100523438);
  __chkstk_darwin(v135);
  uint64_t v132 = (uint64_t)v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_10000F214(&qword_100523440);
  uint64_t v141 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v133 = (char *)v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000F214(&qword_100523448);
  __chkstk_darwin(v139);
  uint64_t v134 = (char *)v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_10000F214(&qword_100523450);
  uint64_t v148 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v138 = (char *)v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_10000F214(&qword_100523458);
  uint64_t v151 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v143 = (char *)v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_10000F214(&qword_100523460);
  uint64_t v155 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v144 = (char *)v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10000F214(&qword_100523468) - 8;
  __chkstk_darwin(v146);
  uint64_t v145 = (char *)v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = sub_10000F214(&qword_100523470);
  __chkstk_darwin(v154);
  uint64_t v150 = (uint64_t)v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_10000F214(&qword_100523478);
  uint64_t v158 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v152 = (char *)v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_10000F214(&qword_100523480);
  __chkstk_darwin(v156);
  uint64_t v153 = (char *)v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = sub_10000F214(&qword_100523488);
  uint64_t v163 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  v159 = (char *)v121 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v162 = (char *)v121 - v25;
  uint64_t v26 = type metadata accessor for PlainButtonStyle();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)v121 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000F214(&qword_100523490);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)v121 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_10000F214(&qword_100523498);
  uint64_t v34 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v36 = (char *)v121 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000F214(&qword_1005234A0);
  __chkstk_darwin(v37 - 8);
  uint64_t v177 = (uint64_t)v121 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v179 = (uint64_t)v121 - v40;
  sub_10000F214(&qword_1005234A8);
  sub_100189D84();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v41 = sub_100013AA8(&qword_1005234C8, &qword_100523490);
  uint64_t v42 = sub_10018A184(&qword_10051EF48, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  uint64_t v182 = v30;
  uint64_t v183 = v26;
  unint64_t v184 = v41;
  uint64_t v185 = v42;
  swift_getOpaqueTypeConformance2();
  uint64_t v43 = v177;
  uint64_t v44 = v125;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v44);
  sub_10000FC34(v43, v179, &qword_1005234A0);
  uint64_t v125 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v124 = v45;
  int v122 = v46;
  uint64_t v123 = v47;
  long long v48 = *(_OWORD *)(v178 + 16);
  long long v180 = *(_OWORD *)v178;
  long long v181 = v48;
  sub_10000F214(&qword_1005234D0);
  Binding.projectedValue.getter();
  v121[2] = v182;
  v121[1] = v183;
  v121[0] = v185;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v49 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v51 = v50;
  LOBYTE(v44) = v52 & 1;
  static Color.secondary.getter();
  Text.foregroundColor(_:)();
  swift_release();
  sub_100012FAC(v49, v51, v44);
  swift_bridgeObjectRelease();
  double v53 = v126;
  TextField<>.init(_:text:prompt:)();
  sub_100013AA8((unint64_t *)&qword_1005234D8, &qword_100523420);
  uint64_t v54 = (uint64_t)v127;
  uint64_t v55 = v130;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v131 + 8))(v53, v55);
  uint64_t v56 = v137;
  id v57 = v136;
  uint64_t v58 = v140;
  (*(void (**)(char *, void, uint64_t))(v137 + 104))(v136, enum case for ColorScheme.dark(_:), v140);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v60 = (uint64_t)v128;
  CLLocationCoordinate2D v61 = (uint64_t *)&v128[*(int *)(v129 + 44)];
  uint64_t v62 = sub_10000F214(&qword_10051B788);
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))((char *)v61 + *(int *)(v62 + 28), v57, v58);
  *CLLocationCoordinate2D v61 = KeyPath;
  sub_10000FB74(v54, v60, &qword_100523428);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
  sub_10000FBD8(v54, &qword_100523428);
  uint64_t v63 = static Font.subheadline.getter();
  uint64_t v64 = swift_getKeyPath();
  uint64_t v65 = v132;
  sub_10000FB74(v60, v132, &qword_100523430);
  long long v66 = (uint64_t *)(v65 + *(int *)(v135 + 36));
  *long long v66 = v64;
  v66[1] = v63;
  sub_10000FBD8(v60, &qword_100523430);
  static Font.Weight.medium.getter();
  sub_100189EA0();
  uint64_t v67 = v133;
  View.fontWeight(_:)();
  sub_10000FBD8(v65, &qword_100523438);
  static Color.white.getter();
  uint64_t v68 = Color.opacity(_:)();
  swift_release();
  uint64_t v69 = v141;
  uint64_t v70 = (uint64_t)v134;
  uint64_t v71 = v142;
  (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v134, v67, v142);
  uint64_t v72 = v139;
  *(void *)(v70 + *(int *)(v139 + 36)) = v68;
  (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v71);
  double v73 = v161;
  PlainTextFieldStyle.init()();
  unint64_t v74 = sub_10018A0B0();
  uint64_t v75 = sub_10018A184(&qword_100523500, (void (*)(uint64_t))&type metadata accessor for PlainTextFieldStyle);
  uint64_t v76 = v138;
  uint64_t v77 = v72;
  uint64_t v78 = v165;
  View.textFieldStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v166 + 8))(v73, v78);
  sub_10000FBD8(v70, &qword_100523448);
  uint64_t v79 = v178;
  long long v180 = *(_OWORD *)(v178 + 32);
  LOBYTE(v181) = *(unsigned char *)(v178 + 48);
  sub_10000F214(&qword_1005233D8);
  FocusState.Binding.projectedValue.getter();
  uint64_t v182 = v77;
  uint64_t v183 = v78;
  unint64_t v184 = v74;
  uint64_t v185 = v75;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v81 = v143;
  uint64_t v82 = v147;
  View.focused(_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v148 + 8))(v76, v82);
  uint64_t v182 = v82;
  uint64_t v183 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v83 = v144;
  uint64_t v84 = v149;
  View.keyboardType(_:)();
  (*(void (**)(char *, uint64_t))(v151 + 8))(v81, v84);
  uint64_t v85 = v168;
  long long v86 = v167;
  uint64_t v87 = v169;
  (*(void (**)(char *, void, uint64_t))(v168 + 104))(v167, enum case for Text.TruncationMode.head(_:), v169);
  uint64_t v88 = swift_getKeyPath();
  uint64_t v89 = (uint64_t)v145;
  long long v90 = (uint64_t *)&v145[*(int *)(v146 + 44)];
  uint64_t v91 = sub_10000F214(&qword_100523508);
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))((char *)v90 + *(int *)(v91 + 28), v86, v87);
  *long long v90 = v88;
  uint64_t v92 = v155;
  uint64_t v93 = v157;
  (*(void (**)(uint64_t, char *, uint64_t))(v155 + 16))(v89, v83, v157);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v87);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v83, v93);
  uint64_t v94 = swift_getKeyPath();
  uint64_t v95 = v150;
  sub_10000FB74(v89, v150, &qword_100523468);
  uint64_t v96 = v95 + *(int *)(v154 + 36);
  *(void *)uint64_t v96 = v94;
  *(void *)(v96 + 8) = 0;
  *(unsigned char *)(v96 + 16) = 1;
  sub_10000FBD8(v89, &qword_100523468);
  uint64_t v97 = v170;
  static SubmitLabel.done.getter();
  sub_10018A238();
  long long v98 = v152;
  View.submitLabel(_:)();
  (*(void (**)(char *, uint64_t))(v171 + 8))(v97, v172);
  sub_10000FBD8(v95, &qword_100523470);
  uint64_t v99 = v158;
  uint64_t v100 = (uint64_t)v153;
  uint64_t v101 = v160;
  (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v153, v98, v160);
  *(_WORD *)(v100 + *(int *)(v156 + 36)) = 256;
  (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v101);
  uint64_t v102 = swift_allocObject();
  long long v103 = *(_OWORD *)(v79 + 48);
  *(_OWORD *)(v102 + 48) = *(_OWORD *)(v79 + 32);
  *(_OWORD *)(v102 + 64) = v103;
  *(void *)(v102 + 80) = *(void *)(v79 + 64);
  long long v104 = *(_OWORD *)(v79 + 16);
  *(_OWORD *)(v102 + 16) = *(_OWORD *)v79;
  *(_OWORD *)(v102 + 32) = v104;
  sub_100189BFC(v79);
  long long v105 = v173;
  static SubmitTriggers.text.getter();
  sub_10018A4D8();
  long long v106 = v159;
  View.onSubmit(of:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v174 + 8))(v105, v175);
  sub_10000FBD8(v100, &qword_100523480);
  uint64_t v107 = v163;
  long long v108 = v162;
  uint64_t v109 = v164;
  (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v162, v106, v164);
  uint64_t v110 = v179;
  uint64_t v111 = v177;
  sub_10000FB74(v179, v177, &qword_1005234A0);
  uint64_t v112 = v107;
  long long v113 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
  long long v114 = v106;
  long long v115 = v106;
  uint64_t v116 = v109;
  v113(v114, v108, v109);
  uint64_t v117 = v176;
  sub_10000FB74(v111, v176, &qword_1005234A0);
  uint64_t v118 = sub_10000F214(&qword_100523530);
  v113((char *)(v117 + *(int *)(v118 + 48)), v115, v116);
  long long v119 = *(void (**)(char *, uint64_t))(v112 + 8);
  v119(v108, v116);
  sub_10000FBD8(v110, &qword_1005234A0);
  v119(v115, v116);
  return sub_10000FBD8(v111, &qword_1005234A0);
}

uint64_t sub_100187F0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(_:bundle:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v6 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v7 = v12;
  LOBYTE(v5) = v13;
  uint64_t v8 = v14;
  LOBYTE(v3) = v15;
  uint64_t v9 = v16;
  uint64_t v10 = v17;
  uint64_t result = static Color.white.getter();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = (_BYTE)v5;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = result;
  return result;
}

uint64_t sub_1001880A8(long long *a1)
{
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v17 = a1[2];
  LOBYTE(v18) = *((unsigned char *)a1 + 48);
  LOBYTE(v14) = 0;
  sub_10000F214(&qword_1005233D8);
  FocusState.Binding.wrappedValue.setter();
  long long v6 = a1[1];
  long long v17 = *a1;
  long long v18 = v6;
  long long v7 = a1[1];
  long long v14 = *a1;
  long long v15 = v7;
  sub_10000F214(&qword_1005234D0);
  Binding.wrappedValue.getter();
  long long v14 = v16;
  static CharacterSet.whitespacesAndNewlines.getter();
  sub_1000317A0();
  uint64_t v8 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v12 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    char v13 = (void (*)(void, void))*((void *)a1 + 7);
    long long v14 = v17;
    long long v15 = v18;
    Binding.wrappedValue.getter();
    v13(v16, *((void *)&v16 + 1));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100188260(uint64_t result, unsigned char *a2)
{
  if ((*a2 & 1) == 0)
  {
    __chkstk_darwin(result);
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001882FC()
{
  return sub_100186444();
}

uint64_t sub_100188340()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10018835C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v2 = type metadata accessor for PlainButtonStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  uint64_t v29 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100523340);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000F214(&qword_100523348);
  __chkstk_darwin(v25);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100523350);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  __chkstk_darwin(v12);
  long long v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *v1;
  uint64_t v16 = swift_allocObject();
  long long v17 = *((_OWORD *)v1 + 1);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v16 + 32) = v17;
  *(void *)(v16 + 48) = v1[4];
  sub_100062328((uint64_t)&v35);
  swift_retain();
  swift_retain();
  sub_10000F214(&qword_100523358);
  sub_100188F78();
  Button.init(action:label:)();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v9, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  PlainButtonStyle.init()();
  unint64_t v18 = sub_1001892F8();
  uint64_t v19 = sub_10018A184(&qword_10051EF48, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v20 = v25;
  uint64_t v21 = v28;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v21);
  sub_10000FBD8((uint64_t)v11, &qword_100523348);
  uint64_t v31 = v20;
  uint64_t v32 = v21;
  unint64_t v33 = v18;
  uint64_t v34 = v19;
  swift_getOpaqueTypeConformance2();
  uint64_t v22 = v26;
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v22);
}

uint64_t sub_100188744(uint64_t a1)
{
  sub_10000F214(&qword_1005233D8);
  uint64_t v2 = FocusState.Binding.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t))(a1 + 24))(v2);
}

uint64_t sub_1001887A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v73 = a1;
  uint64_t v1 = type metadata accessor for ColorScheme();
  uint64_t v71 = *(void *)(v1 - 8);
  uint64_t v72 = v1;
  __chkstk_darwin(v1);
  uint64_t v70 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for BlendMode();
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v69 = v3;
  __chkstk_darwin(v3);
  uint64_t v67 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100523228);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for Image.Scale();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_1005233B0);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = sub_10000F214(&qword_100523398);
  __chkstk_darwin(v59);
  unint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_1005233D0);
  uint64_t v64 = *(void *)(v19 - 8);
  uint64_t v65 = v19;
  __chkstk_darwin(v19);
  id v57 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000F214(&qword_100523390) - 8;
  __chkstk_darwin(v61);
  uint64_t v58 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000F214(&qword_100523380) - 8;
  __chkstk_darwin(v62);
  uint64_t v60 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000F214(&qword_100523370) - 8;
  __chkstk_darwin(v66);
  uint64_t v63 = (uint64_t)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = Image.init(systemName:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for Image.Scale.large(_:), v9);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v8 + *(int *)(v6 + 36), v12, v9);
  uint64_t *v8 = KeyPath;
  sub_10000FB74((uint64_t)v8, (uint64_t)v16 + *(int *)(v14 + 44), &qword_100523228);
  *uint64_t v16 = v24;
  swift_retain();
  sub_10000FBD8((uint64_t)v8, &qword_100523228);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  LODWORD(v12) = static HierarchicalShapeStyle.secondary.getter();
  sub_10000FB74((uint64_t)v16, (uint64_t)v18, &qword_1005233B0);
  *(_DWORD *)&v18[*(int *)(v59 + 36)] = v12;
  sub_10000FBD8((uint64_t)v16, &qword_1005233B0);
  static Font.Weight.medium.getter();
  sub_1001891B8();
  uint64_t v26 = v57;
  View.fontWeight(_:)();
  sub_10000FBD8((uint64_t)v18, &qword_100523398);
  LOBYTE(v12) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v64;
  uint64_t v35 = v65;
  uint64_t v37 = (uint64_t)v58;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v58, v26, v65);
  uint64_t v38 = v37 + *(int *)(v61 + 44);
  *(unsigned char *)uint64_t v38 = (_BYTE)v12;
  *(void *)(v38 + 8) = v28;
  *(void *)(v38 + 16) = v30;
  *(void *)(v38 + 24) = v32;
  *(void *)(v38 + 32) = v34;
  *(unsigned char *)(v38 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v35);
  uint64_t v40 = v67;
  uint64_t v39 = v68;
  uint64_t v41 = v69;
  (*(void (**)(char *, void, uint64_t))(v68 + 104))(v67, enum case for BlendMode.plusLighter(_:), v69);
  uint64_t v42 = (uint64_t)v60;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(&v60[*(int *)(v62 + 44)], v40, v41);
  sub_10000FB74(v37, v42, &qword_100523390);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  sub_10000FBD8(v37, &qword_100523390);
  uint64_t v43 = sub_1000AA4FC();
  uint64_t v45 = v44;
  uint64_t v46 = v63;
  sub_10000FB74(v42, v63, &qword_100523380);
  uint64_t v47 = (uint64_t *)(v46 + *(int *)(v66 + 44));
  *uint64_t v47 = v43;
  v47[1] = v45;
  sub_10000FBD8(v42, &qword_100523380);
  uint64_t v49 = v70;
  uint64_t v48 = v71;
  uint64_t v50 = v72;
  (*(void (**)(char *, void, uint64_t))(v71 + 104))(v70, enum case for ColorScheme.dark(_:), v72);
  uint64_t v51 = swift_getKeyPath();
  uint64_t v52 = sub_10000F214(&qword_100523358);
  uint64_t v53 = v73;
  uint64_t v54 = (uint64_t *)(v73 + *(int *)(v52 + 36));
  uint64_t v55 = sub_10000F214(&qword_10051B788);
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))((char *)v54 + *(int *)(v55 + 28), v49, v50);
  *uint64_t v54 = v51;
  sub_10000FB74(v46, v53, &qword_100523370);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
  return sub_10000FBD8(v46, &qword_100523370);
}

uint64_t sub_100188F28()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100188F70()
{
  return sub_100188744(v0 + 16);
}

unint64_t sub_100188F78()
{
  unint64_t result = qword_100523360;
  if (!qword_100523360)
  {
    sub_10000F69C(&qword_100523358);
    sub_100189050(&qword_100523368, &qword_100523370, (void (*)(void))sub_1001890D8, (void (*)(void))sub_100152C80);
    sub_100013AA8(&qword_10051B818, &qword_10051B788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523360);
  }
  return result;
}

uint64_t sub_100189050(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001890D8()
{
  return sub_10018A8BC(&qword_100523378, &qword_100523380, (void (*)(void))sub_100189108);
}

unint64_t sub_100189108()
{
  unint64_t result = qword_100523388;
  if (!qword_100523388)
  {
    sub_10000F69C(&qword_100523390);
    sub_10000F69C(&qword_100523398);
    sub_1001891B8();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523388);
  }
  return result;
}

unint64_t sub_1001891B8()
{
  unint64_t result = qword_1005233A0;
  if (!qword_1005233A0)
  {
    sub_10000F69C(&qword_100523398);
    sub_100189258();
    sub_100013AA8(&qword_100518D20, &qword_100518D28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005233A0);
  }
  return result;
}

unint64_t sub_100189258()
{
  unint64_t result = qword_1005233A8;
  if (!qword_1005233A8)
  {
    sub_10000F69C(&qword_1005233B0);
    sub_100013AA8(&qword_1005233B8, &qword_100523228);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005233A8);
  }
  return result;
}

unint64_t sub_1001892F8()
{
  unint64_t result = qword_1005233C0;
  if (!qword_1005233C0)
  {
    sub_10000F69C(&qword_100523348);
    sub_100013AA8(&qword_1005233C8, &qword_100523340);
    sub_100152CD4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005233C0);
  }
  return result;
}

uint64_t sub_100189398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v2 = sub_10000F214(&qword_1005235D8);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_1005235E0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_1005235E8);
  __chkstk_darwin(v10 - 8);
  uint64_t v49 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_1005235F0);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = static Alignment.center.getter();
  uint64_t v44 = v17;
  uint64_t v45 = v16;
  unint64_t v18 = &v9[*(int *)(v7 + 44)];
  uint64_t v19 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v47 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v20 = type metadata accessor for RoundedCornerStyle();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 104);
  uint64_t v48 = v21 + 104;
  v46(v18, v19, v20);
  uint64_t v22 = &v18[*(int *)(sub_10000F214(&qword_1005235F8) + 36)];
  uint64_t v23 = static Alignment.center.getter();
  uint64_t v25 = v24;
  sub_100189710((uint64_t)v5);
  uint64_t v26 = (uint64_t *)&v5[*(int *)(v3 + 44)];
  *uint64_t v26 = v23;
  v26[1] = v25;
  uint64_t v27 = sub_10000F214(&qword_100523600);
  sub_10000FB74((uint64_t)v5, (uint64_t)&v22[*(int *)(v27 + 36)], &qword_1005235D8);
  *(void *)uint64_t v22 = 0x4044000000000000;
  v22[8] = 1;
  sub_10000FBD8((uint64_t)v5, &qword_1005235D8);
  uint64_t v28 = (uint64_t *)&v18[*(int *)(sub_10000F214(&qword_100523608) + 36)];
  uint64_t v29 = v44;
  *uint64_t v28 = v45;
  v28[1] = v29;
  uint64_t v30 = sub_10000F214(&qword_100523610);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v9, v50, v30);
  uint64_t v31 = v49;
  sub_10000FB74((uint64_t)v9, v49, &qword_1005235E0);
  sub_10000FBD8((uint64_t)v9, &qword_1005235E0);
  uint64_t v32 = static Alignment.center.getter();
  uint64_t v34 = v33;
  uint64_t v35 = (uint64_t *)&v15[*(int *)(v13 + 44)];
  uint64_t v36 = (char *)v35 + *(int *)(sub_10000F214(&qword_100523618) + 36);
  uint64_t v37 = type metadata accessor for RoundedRectangle();
  v46(&v36[*(int *)(v37 + 20)], v47, v20);
  __asm { FMOV            V0.2D, #30.0 }
  *(_OWORD *)uint64_t v36 = _Q0;
  *uint64_t v35 = v32;
  v35[1] = v34;
  sub_10000FC34(v31, (uint64_t)v15, &qword_1005235E8);
  sub_10000FB74((uint64_t)v15, v51, &qword_1005235F0);
  return sub_10000FBD8((uint64_t)v15, &qword_1005235F0);
}

uint64_t sub_100189710@<X0>(uint64_t a1@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v21 = type metadata accessor for ShadowStyle();
  uint64_t v1 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_10051CC80);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000F214(&qword_10051CC88);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Capsule();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v15 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  static Color.black.getter();
  uint64_t v16 = Color.opacity(_:)();
  swift_release();
  static Color.white.getter();
  Color.opacity(_:)();
  swift_release();
  static ShadowStyle.inner(color:radius:x:y:)();
  swift_release();
  uint64_t v17 = v21;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))((char *)v7 + *(int *)(v5 + 44), v3, v21);
  *uint64_t v7 = v16;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v17);
  static Color.white.getter();
  Color.opacity(_:)();
  swift_release();
  static ShadowStyle.inner(color:radius:x:y:)();
  swift_release();
  sub_10000FC34((uint64_t)v7, (uint64_t)v10, &qword_10051CC80);
  uint64_t v18 = v22;
  sub_10008D3F0((uint64_t)v13, v22);
  uint64_t v19 = sub_10000F214(&qword_10051CC90);
  sub_10000FB74((uint64_t)v10, v18 + *(int *)(v19 + 52), &qword_10051CC88);
  *(_WORD *)(v18 + *(int *)(v19 + 56)) = 256;
  sub_10000FBD8((uint64_t)v10, &qword_10051CC88);
  return sub_10008D454((uint64_t)v13);
}

uint64_t sub_100189A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100189398(a1, a2);
}

uint64_t sub_100189A64()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100189A88()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100189AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100189B18(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_100189AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100189B18(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_100189B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(char *))
{
  uint64_t v8 = a5(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_100189BF4(uint64_t result, unsigned char *a2)
{
  return sub_100188260(result, a2);
}

uint64_t sub_100189BFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100189C6C()
{
  return FocusState.Binding.wrappedValue.setter();
}

uint64_t type metadata accessor for ACMEKeyboardFieldStyle()
{
  uint64_t result = qword_100523590;
  if (!qword_100523590) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100189D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ACMEKeyboardFieldStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100189D84()
{
  unint64_t result = qword_1005234B0;
  if (!qword_1005234B0)
  {
    sub_10000F69C(&qword_1005234A8);
    sub_100189E24();
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005234B0);
  }
  return result;
}

unint64_t sub_100189E24()
{
  unint64_t result = qword_1005234B8;
  if (!qword_1005234B8)
  {
    sub_10000F69C(&qword_1005234C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005234B8);
  }
  return result;
}

unint64_t sub_100189EA0()
{
  unint64_t result = qword_1005234E0;
  if (!qword_1005234E0)
  {
    sub_10000F69C(&qword_100523438);
    sub_100189F40();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005234E0);
  }
  return result;
}

unint64_t sub_100189F40()
{
  unint64_t result = qword_1005234E8;
  if (!qword_1005234E8)
  {
    sub_10000F69C(&qword_100523430);
    sub_100189FE0();
    sub_100013AA8(&qword_10051B818, &qword_10051B788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005234E8);
  }
  return result;
}

unint64_t sub_100189FE0()
{
  unint64_t result = qword_1005234F0;
  if (!qword_1005234F0)
  {
    sub_10000F69C(&qword_100523428);
    sub_100013AA8((unint64_t *)&qword_1005234D8, &qword_100523420);
    sub_10018A184((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005234F0);
  }
  return result;
}

unint64_t sub_10018A0B0()
{
  unint64_t result = qword_1005234F8;
  if (!qword_1005234F8)
  {
    sub_10000F69C(&qword_100523448);
    sub_10000F69C(&qword_100523438);
    sub_100189EA0();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005234F8);
  }
  return result;
}

uint64_t sub_10018A184(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10018A1CC()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_10018A1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100189B18(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Text.TruncationMode, (uint64_t (*)(char *))&EnvironmentValues.truncationMode.setter);
}

unint64_t sub_10018A238()
{
  unint64_t result = qword_100523510;
  if (!qword_100523510)
  {
    sub_10000F69C(&qword_100523470);
    sub_10018A2D8();
    sub_100013AA8(&qword_100518D00, &qword_100523200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523510);
  }
  return result;
}

unint64_t sub_10018A2D8()
{
  unint64_t result = qword_100523518;
  if (!qword_100523518)
  {
    sub_10000F69C(&qword_100523468);
    sub_10000F69C(&qword_100523458);
    sub_10000F69C(&qword_100523450);
    sub_10000F69C(&qword_100523448);
    type metadata accessor for PlainTextFieldStyle();
    sub_10018A0B0();
    sub_10018A184(&qword_100523500, (void (*)(uint64_t))&type metadata accessor for PlainTextFieldStyle);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100523520, &qword_100523508);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523518);
  }
  return result;
}

uint64_t sub_10018A470()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10018A4D0()
{
  return sub_1001880A8((long long *)(v0 + 16));
}

unint64_t sub_10018A4D8()
{
  unint64_t result = qword_100523528;
  if (!qword_100523528)
  {
    sub_10000F69C(&qword_100523480);
    sub_10000F69C(&qword_100523470);
    sub_10018A238();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523528);
  }
  return result;
}

uint64_t sub_10018A588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018A59C);
}

uint64_t sub_10018A59C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522CF0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10018A60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018A620);
}

uint64_t sub_10018A620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522CF0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

unint64_t sub_10018A698()
{
  unint64_t result = qword_1005235C8;
  if (!qword_1005235C8)
  {
    sub_10000F69C(&qword_1005235D0);
    sub_10000F69C(&qword_100523348);
    type metadata accessor for PlainButtonStyle();
    sub_1001892F8();
    sub_10018A184(&qword_10051EF48, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2();
    sub_10018A184((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005235C8);
  }
  return result;
}

uint64_t sub_10018A7C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10018A85C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10018A878()
{
  return sub_10018A8BC(&qword_100523620, &qword_100523628, (void (*)(void))sub_10018A938);
}

uint64_t sub_10018A8BC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10018A938()
{
  unint64_t result = qword_100523630;
  if (!qword_100523630)
  {
    sub_10000F69C(&qword_1005235F0);
    sub_100189050(&qword_100523638, &qword_1005235E8, (void (*)(void))sub_10018AA10, (void (*)(void))sub_100153020);
    sub_100013AA8(&qword_100523658, &qword_100523618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523630);
  }
  return result;
}

unint64_t sub_10018AA10()
{
  unint64_t result = qword_100523640;
  if (!qword_100523640)
  {
    sub_10000F69C(&qword_1005235E0);
    sub_100013AA8(&qword_100523648, &qword_100523610);
    sub_100013AA8(&qword_100523650, &qword_100523608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523640);
  }
  return result;
}

uint64_t *sub_10018AAD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for OSSignposter();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_10018ABDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for OSSignposter();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_10018AC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_10018AD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10018ADF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10018AEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10018AF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018AF78);
}

uint64_t sub_10018AF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for OSSignposter();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10018B070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018B084);
}

uint64_t sub_10018B084(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for OSSignposter();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for LoggingSignposter(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_1005236B8);
}

uint64_t sub_10018B1A8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OSSignposter();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10018B270@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  int v45 = a4;
  uint64_t v42 = a2;
  unint64_t v46 = a1;
  uint64_t v39 = a5;
  int v47 = a3;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSSignposter();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = *(int *)(type metadata accessor for LoggingSignposter(0) + 20);
  uint64_t v41 = v5;
  uint64_t v21 = v5 + v20;
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v37 = v10;
  uint64_t v38 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, v9);
  uint64_t v22 = OSSignposter.logHandle.getter();
  int v23 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  uint64_t v43 = v7;
  uint64_t v44 = v6;
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  int v36 = v23;
  if ((v47 & 1) == 0)
  {
    uint64_t v25 = (const char *)v46;
    if (!v46)
    {
      __break(1u);
LABEL_5:

      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
      v26(v17, v19, v13);
LABEL_11:
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      uint64_t v29 = OSSignpostIntervalState.init(id:isOpen:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
      v26(v17, v19, v13);
      uint64_t v30 = v40;
      Date.init()();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
      uint64_t v31 = (int *)type metadata accessor for LoggingSignposter.IntervalState(0);
      uint64_t v32 = v39;
      v39[3] = (uint64_t)v31;
      v32[4] = (uint64_t)&off_1004EEE50;
      uint64_t v33 = sub_100040120(v32);
      sub_10018C7D4(v41, (uint64_t)v33 + v31[8], type metadata accessor for LoggingSignposter);
      uint64_t v34 = v42;
      *uint64_t v33 = v46;
      v33[1] = v34;
      *((unsigned char *)v33 + 16) = v47;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))((char *)v33 + v31[5], v17, v13);
      *(uint64_t *)((char *)v33 + v31[6]) = v29;
      uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v43 + 32))((char *)v33 + v31[7], v30, v44);
      *((unsigned char *)v33 + v31[9]) = v45 & 1;
      return result;
    }
LABEL_10:
    uint64_t v35 = v25;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v26(v17, v19, v13);
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    os_signpost_id_t v28 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, (os_signpost_type_t)v36, v28, v35, "", v27, 2u);
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v26(v17, v19, v13);
    goto LABEL_11;
  }
  if (HIDWORD(v46))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v46 >> 11 != 27)
  {
    if (WORD1(v46) <= 0x10u)
    {
      uint64_t v25 = &v48;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_10018B700(const char *a1, uint64_t a2, int a3, int a4)
{
  int v40 = a3;
  int v41 = a4;
  uint64_t v34 = a2;
  uint64_t v39 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v37 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = type metadata accessor for OSSignposter();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(int *)(type metadata accessor for LoggingSignposter(0) + 20);
  uint64_t v36 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v4 + v18, v14);
  static OSSignpostID.exclusive.getter();
  uint64_t v19 = OSSignposter.logHandle.getter();
  int v35 = static os_signpost_type_t.event.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if (result)
  {
    uint64_t v33 = v5;
    if ((v40 & 1) == 0)
    {
      uint64_t v21 = v39;
      if (!v39)
      {
        __break(1u);
        goto LABEL_5;
      }
LABEL_11:
      uint64_t v32 = v21;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, (os_signpost_type_t)v35, v23, v32, "", v22, 2u);
      swift_slowDealloc();

      uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
      v24(v13, v7);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v10, v7);
      uint64_t v5 = v33;
      if ((v41 & 1) == 0) {
        return result;
      }
      goto LABEL_12;
    }
    if ((unint64_t)v39 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v39 >> 11 == 27)
      {
LABEL_18:
        __break(1u);
        return result;
      }
      if (v39 >> 16 <= 0x10)
      {
        uint64_t v21 = &v44;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_5:

  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if ((v41 & 1) == 0) {
    return result;
  }
LABEL_12:
  uint64_t v26 = v37;
  uint64_t v25 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v36, v5);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v30 = StaticString.description.getter();
    uint64_t v42 = sub_1003806B0(v30, v31, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v5);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v5);
  }
}

uint64_t sub_10018BBE8()
{
  uint64_t v1 = type metadata accessor for LoggingSignposter.IntervalState(0);
  __chkstk_darwin(v1);
  uint64_t v59 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v60 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  __chkstk_darwin(v4);
  uint64_t v54 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostError();
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v51 = v6;
  __chkstk_darwin(v6);
  uint64_t v49 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v52 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v46 - v12;
  uint64_t v14 = type metadata accessor for OSSignposter();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v0 + *(int *)(v1 + 32);
  uint64_t v19 = *(int *)(type metadata accessor for LoggingSignposter(0) + 20);
  uint64_t v53 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v18 + v19, v14);
  uint64_t v62 = *(const char **)v0;
  char v20 = *(unsigned char *)(v0 + 16);
  uint64_t v57 = v1;
  uint64_t v58 = v0;
  uint64_t v21 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v48 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if (result)
  {
    uint64_t v47 = v14;
    if (v20)
    {
      if (!((unint64_t)v62 >> 32))
      {
        if (v62 >> 11 == 27)
        {
LABEL_22:
          __break(1u);
          return result;
        }
        if (v62 >> 16 <= 0x10)
        {
          uint64_t v23 = v9;
          uint64_t v24 = v8;
          uint64_t v62 = &v66;
          goto LABEL_10;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    else
    {
      if (v62)
      {
        uint64_t v23 = v9;
        uint64_t v24 = v8;
LABEL_10:
        swift_retain();
        uint64_t v25 = v49;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v27 = v50;
        uint64_t v26 = v51;
        if ((*(unsigned int (**)(char *, uint64_t))(v50 + 88))(v25, v51) == enum case for OSSignpostError.doubleEnd(_:))
        {
          os_log_type_t v28 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v26);
          os_log_type_t v28 = "";
        }
        uint64_t v29 = v52;
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v52, v13, v24);
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        os_signpost_id_t v31 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, (os_signpost_type_t)v48, v31, v62, v28, v30, 2u);
        swift_slowDealloc();

        uint64_t v32 = *(void (**)(char *, uint64_t))(v23 + 8);
        v32(v13, v24);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v47);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v32)(v29, v24);
        goto LABEL_14;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
LABEL_14:
  uint64_t v33 = v58;
  uint64_t v34 = v63;
  uint64_t v36 = v60;
  uint64_t v35 = v61;
  uint64_t v37 = (uint64_t)v59;
  if (*(unsigned char *)(v58 + *(int *)(v57 + 36)))
  {
    uint64_t v38 = v54;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v40 = v39;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v56);
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v36, v53, v34);
    sub_10018C7D4(v33, v37, type metadata accessor for LoggingSignposter.IntervalState);
    int v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v44 = StaticString.description.getter();
      uint64_t v64 = sub_1003806B0(v44, v45, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10018C778(v37);
      *(_WORD *)(v43 + 12) = 2048;
      uint64_t v64 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s (took %f seconds)", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v63);
    }
    else
    {
      sub_10018C778(v37);

      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v34);
    }
  }
  return result;
}

uint64_t sub_10018C344(uint64_t a1)
{
  return sub_10018C39C(a1, qword_10055E380, &qword_100517E28, (uint64_t)qword_10055E190, (uint64_t)sub_1000EE820);
}

uint64_t sub_10018C370(uint64_t a1)
{
  return sub_10018C39C(a1, qword_10055E398, &qword_100517E18, (uint64_t)qword_10055E160, (uint64_t)sub_1000EE7D0);
}

uint64_t sub_10018C39C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v25 = a4;
  uint64_t v26 = type metadata accessor for OSSignposter();
  uint64_t v7 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LoggingSignposter(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v23 - v18;
  sub_1000EEA28(v10, a2);
  uint64_t v24 = sub_10000F378(v10, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10000F378(v13, v25);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v21(v19, v20, v13);
  v21(v12, (uint64_t)v19, v13);
  v21(v17, (uint64_t)v19, v13);
  OSSignposter.init(logger:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[*(int *)(v10 + 20)], v9, v26);
  return sub_10018C83C((uint64_t)v12, v24);
}

uint64_t sub_10018C630(uint64_t a1)
{
  return sub_10018C39C(a1, qword_10055E3B0, &qword_100517E60, (uint64_t)qword_10055E238, (uint64_t)sub_1000EE924);
}

uint64_t sub_10018C65C(uint64_t a1)
{
  return sub_10018C39C(a1, qword_10055E3C8, &qword_100517E50, (uint64_t)qword_10055E208, (uint64_t)sub_1000EE8D8);
}

uint64_t sub_10018C688(uint64_t a1)
{
  return sub_10018C39C(a1, qword_10055E3E0, &qword_100517E98, (uint64_t)qword_10055E2E0, (uint64_t)sub_1000EEA14);
}

uint64_t sub_10018C6B4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

char *sub_10018C6C4()
{
  return &v1;
}

void sub_10018C6D4(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t type metadata accessor for LoggingSignposter.IntervalState(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100523748);
}

uint64_t sub_10018C778(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LoggingSignposter.IntervalState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10018C7D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10018C83C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LoggingSignposter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_10018C8A0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = a3[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = type metadata accessor for Date();
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    v15(v12, v13, v14);
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    uint64_t v19 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = *(int *)(type metadata accessor for LoggingSignposter(0) + 20);
    uint64_t v21 = &v17[v20];
    uint64_t v22 = v18 + v20;
    uint64_t v23 = type metadata accessor for OSSignposter();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return v4;
}

uint64_t sub_10018CA94(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v8 + *(int *)(type metadata accessor for LoggingSignposter(0) + 20);
  uint64_t v11 = type metadata accessor for OSSignposter();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);

  return v12(v10, v11);
}

uint64_t sub_10018CBE0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  v14(v11, v12, v13);
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = *(int *)(type metadata accessor for LoggingSignposter(0) + 20);
  uint64_t v20 = v16 + v19;
  uint64_t v21 = v17 + v19;
  uint64_t v22 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10018CD84(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = *(int *)(type metadata accessor for LoggingSignposter(0) + 20);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = v16 + v18;
  uint64_t v21 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10018CF28(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  uint64_t v18 = *(int *)(type metadata accessor for LoggingSignposter(0) + 20);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = v16 + v18;
  uint64_t v21 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10018D0B0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = *(int *)(type metadata accessor for LoggingSignposter(0) + 20);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = v16 + v18;
  uint64_t v21 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10018D244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018D258);
}

uint64_t sub_10018D258(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v13(a1 + v9, a2, v7);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + a3[6]);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
    {
      uint64_t v7 = v12;
      uint64_t v8 = *(void *)(v12 - 8);
      uint64_t v9 = a3[7];
      goto LABEL_9;
    }
    uint64_t v14 = type metadata accessor for LoggingSignposter(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[8];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_10018D3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018D3E8);
}

uint64_t sub_10018D3E8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6]) = (a2 - 1);
    return result;
  }
  uint64_t v12 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for LoggingSignposter(0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a4[8];

  return v15(v17, a2, a2, v16);
}

uint64_t sub_10018D564()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for LoggingSignposter(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10018D688()
{
  type metadata accessor for SiriStreamingVoicePlayer();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_10019000C();
  qword_10055E3F8 = v0;
  return result;
}

uint64_t sub_10018D6C8()
{
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_10018D768@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_10018D810()
{
  return swift_release();
}

uint64_t sub_10018D8E0()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10018D984@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 32);
  return swift_unknownObjectRetain();
}

uint64_t sub_10018DA30()
{
  return swift_unknownObjectRelease();
}

id sub_10018DB10()
{
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v1 = *(void **)(v0 + 40);

  return v1;
}

id sub_10018DBC0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 40);
  *a2 = v4;

  return v4;
}

void sub_10018DC78(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

void sub_10018DD54(uint64_t *a1@<X8>)
{
  swift_getKeyPath();
  uint64_t v10 = v1;
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1[6];
  uint64_t v4 = v10[7];
  uint64_t v5 = v10[8];
  uint64_t v6 = v10[9];
  uint64_t v7 = v10[10];
  uint64_t v8 = v10[11];
  uint64_t v9 = (void *)v10[12];
  sub_1001902B8(v3, v4, v5, v6, v7, v8, v9);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = (uint64_t)v9;
}

void sub_10018DE44(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (void *)*a1;
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3[6];
  uint64_t v5 = v3[7];
  uint64_t v6 = v3[8];
  uint64_t v7 = v3[9];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  uint64_t v10 = (void *)v3[12];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = (uint64_t)v10;
  sub_1001902B8(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10018DF08(uint64_t a1)
{
  sub_100190234(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_10019031C(v2, (void (*)(void, void, void, void, void, void, void))sub_1001902B8);
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_10019031C(v2, (void (*)(void, void, void, void, void, void, void))sub_1001901D0);
  return swift_release();
}

void sub_10018E018(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[11];
  uint64_t v9 = (void *)a1[12];
  sub_100190234((uint64_t)a2, (uint64_t)(a1 + 6));
  sub_10019031C(a2, (void (*)(void, void, void, void, void, void, void))sub_1001902B8);
  sub_1001901D0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10018E0B8()
{
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10018E168@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 112);
  *a2 = *(void *)(v3 + 104);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10018E214()
{
  return swift_bridgeObjectRelease();
}

void sub_10018E2F8()
{
  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    [*(id *)(v0 + 40) sendCommand:1 options:0 completion:0];
  }
  else
  {
    uint64_t v1 = *(void **)(v0 + 24);
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 getPlaybackStatusForIdentifier:v2];

    if (v3 == (id)3)
    {
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      [*(id *)(v0 + 40) sendCommand:0 options:0 completion:0];
      sub_10018EFD0();
    }
    else
    {
      sub_10018EA5C();
    }
  }
}

uint64_t sub_10018E4CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  long long v43 = *(_OWORD *)(a1 + 40);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v44 = &v36[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100517E90 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000F378(v11, (uint64_t)qword_10055E2C8);
  sub_10019035C(a1);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  int v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v41 = v4;
    uint64_t v16 = v15;
    uint64_t v38 = swift_slowAlloc();
    v47[0] = v38;
    *(_DWORD *)uint64_t v16 = 136315394;
    int v37 = v14;
    uint64_t v42 = v9;
    uint64_t v40 = v5;
    uint64_t v18 = *(void *)(a1 + 16);
    unint64_t v17 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_1003806B0(v18, v17, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v39 = v8;
    uint64_t v19 = v7;
    uint64_t v20 = v6;
    uint64_t v22 = *(void *)(a1 + 32);
    unint64_t v21 = *(void *)(a1 + 40);
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_1003806B0(v22, v21, v47);
    uint64_t v9 = v42;
    uint64_t v5 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    uint64_t v8 = v39;
    swift_bridgeObjectRelease();
    sub_1001903AC(a1);
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v37, "Starting to play Siri audio for Read Aloud: %s with locale identifier: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v41;
    swift_slowDealloc();
  }
  else
  {
    sub_1001903AC(a1);
  }

  v47[0] = v4;
  v47[1] = v5;
  v47[2] = v6;
  v47[3] = v7;
  v47[4] = v8;
  long long v48 = v43;
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(void *)&v36[-16] = v2;
  *(void *)&v36[-8] = v47;
  uint64_t v46 = v2;
  sub_10019035C(a1);
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_1001903AC(a1);
  swift_release();
  uint64_t v24 = v44;
  UUID.init()();
  uint64_t v25 = UUID.uuidString.getter();
  uint64_t v27 = v26;
  (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v24, v9);
  uint64_t v28 = swift_getKeyPath();
  __chkstk_darwin(v28);
  *(void *)&v36[-32] = v2;
  *(void *)&v36[-24] = v25;
  *(void *)&v36[-16] = v27;
  uint64_t v46 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void **)(v2 + 24);
  NSString v30 = String._bridgeToObjectiveC()();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_getKeyPath();
  uint64_t v46 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_bridgeObjectRetain();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v33 = String._bridgeToObjectiveC()();
  id v34 = [objc_allocWithZone((Class)UIImage) initWithCGImage:*(void *)(a1 + 48)];
  [v29 readText:v30 textBody:v31 textIdentifier:v32 textLocale:v33 textLeadingImage:v34 activationSource:3];

  swift_getKeyPath();
  uint64_t v46 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  [*(id *)(v2 + 40) sendCommand:0 options:0 completion:0];
  return sub_10018EFD0();
}

void sub_10018EA5C()
{
  uint64_t v1 = v0;
  if (qword_100517E90 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000F378(v2, (uint64_t)qword_10055E2C8);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying to start media playback from the beginning", v5, 2u);
    swift_slowDealloc();
  }

  swift_getKeyPath();
  v17[0] = v1;
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = v1[7];
  if (v6)
  {
    uint64_t v8 = v1[11];
    uint64_t v7 = (void *)v1[12];
    uint64_t v10 = v1[9];
    uint64_t v9 = v1[10];
    uint64_t v11 = v1[8];
    v17[0] = v1[6];
    uint64_t v12 = v17[0];
    v17[1] = v6;
    v17[2] = v11;
    v17[3] = v10;
    v17[4] = v9;
    v17[5] = v8;
    v17[6] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v13 = v7;
    sub_10018E4CC((uint64_t)v17);
    sub_1001901D0(v12, v6, v11, v10, v9, v8, v7);
  }
  else
  {
    int v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "There's no metadata to resume.", v16, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10018ECAC()
{
  uint64_t v1 = v0;
  if (qword_100517E90 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000F378(v2, (uint64_t)qword_10055E2C8);
  swift_retain_n();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getKeyPath();
    sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v6 = *(void *)(v0 + 104);
    unint64_t v7 = *(void *)(v1 + 112);
    swift_bridgeObjectRetain();
    sub_1003806B0(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping Siri audio for Read Aloud for identifier: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v8 = *(void **)(v1 + 24);
  swift_getKeyPath();
  uint64_t v11 = v1;
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 endMediaSessionForIdentifier:v9];

  swift_getKeyPath();
  uint64_t v11 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  [*(id *)(v1 + 40) sendCommand:3 options:0 completion:0];
  return sub_10018F994();
}

uint64_t sub_10018EFD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v51 = v2;
  __chkstk_darwin(v2);
  long long v48 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v46 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v45 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v44 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v43 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v14 = v0 + OBJC_IVAR____TtC6Tamale24SiriStreamingVoicePlayer___observationRegistrar;
  aBlock[0] = v1;
  uint64_t v15 = sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (!*(void *)(v1 + 32))
  {
    int v37 = v13;
    uint64_t v38 = v11;
    uint64_t v39 = v10;
    uint64_t v40 = v8;
    uint64_t v41 = v15;
    uint64_t v42 = v14;
    if (qword_100517E90 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10000F378(v17, (uint64_t)qword_10055E2C8);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v36 = v1;
    uint64_t v21 = v5;
    uint64_t v22 = v45;
    uint64_t v23 = v7;
    if (v20)
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Starting to observe Siri audio for Read Aloud", v24, 2u);
      swift_slowDealloc();
    }

    sub_10000F734(0, (unint64_t *)&unk_1005239D0);
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    uint64_t v25 = (void *)static OS_dispatch_queue.main.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100190120(&qword_1005239E0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
    sub_10000F214(&qword_1005239E8);
    sub_10010DE10((unint64_t *)&unk_1005239F0, &qword_1005239E8);
    uint64_t v26 = v37;
    uint64_t v27 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v28 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    (*(void (**)(char *, uint64_t))(v43 + 8))(v26, v27);
    swift_getObjectType();
    uint64_t v29 = v39;
    static DispatchTime.now()();
    *uint64_t v23 = 0;
    (*(void (**)(void *, void, uint64_t))(v22 + 104))(v23, enum case for DispatchTimeInterval.nanoseconds(_:), v21);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
    (*(void (**)(void *, uint64_t))(v22 + 8))(v23, v21);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v40);
    uint64_t v30 = swift_allocObject();
    uint64_t v31 = v36;
    swift_weakInit();
    aBlock[4] = sub_1001900C4;
    aBlock[5] = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002EDB98;
    aBlock[3] = &unk_1004EEF10;
    NSString v32 = _Block_copy(aBlock);
    swift_retain();
    NSString v33 = v46;
    static DispatchQoS.unspecified.getter();
    id v34 = v48;
    sub_10018F8CC();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v32);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v51);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v49);
    swift_release();
    swift_release();
    OS_dispatch_source.resume()();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(&v36 - 2) = v31;
    *(&v36 - 1) = v28;
    aBlock[0] = v31;
    swift_unknownObjectRetain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_unknownObjectRelease_n();
  }
  return result;
}

uint64_t sub_10018F720()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void **)(result + 24);
    swift_getKeyPath();
    sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
    id v2 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_bridgeObjectRetain();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 getPlaybackStatusForIdentifier:v3];

    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10018F8CC()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10018F994()
{
  uint64_t v1 = v0;
  if (qword_100517E90 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000F378(v2, (uint64_t)qword_10055E2C8);
  NSString v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping observation of Siri audio for Read Aloud", v5, 2u);
    swift_slowDealloc();
  }

  swift_getKeyPath();
  sub_100190120(&qword_1005239C8, (void (*)(uint64_t))type metadata accessor for SiriStreamingVoicePlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v1 + 32))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  uint64_t v7 = swift_getKeyPath();
  __chkstk_darwin(v7);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_10018FC18()
{
  swift_unknownObjectRelease();
  sub_1001901D0(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void **)(v0 + 96));
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale24SiriStreamingVoicePlayer___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10018FCEC()
{
  return type metadata accessor for SiriStreamingVoicePlayer();
}

uint64_t type metadata accessor for SiriStreamingVoicePlayer()
{
  uint64_t result = qword_1005237C0;
  if (!qword_1005237C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10018FD40()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void destroy for SiriStreamingVoicePlayerMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 48);
}

void *initializeWithCopy for SiriStreamingVoicePlayerMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = (void *)a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  return a1;
}

void *assignWithCopy for SiriStreamingVoicePlayerMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[6];
  uint64_t v5 = (void *)a1[6];
  a1[6] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for SiriStreamingVoicePlayerMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

ValueMetadata *type metadata accessor for SiriStreamingVoicePlayerMetadata()
{
  return &type metadata for SiriStreamingVoicePlayerMetadata;
}

uint64_t sub_10018FFDC()
{
  return sub_1001900E4();
}

void sub_10018FFFC()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 16) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10019000C()
{
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = [objc_allocWithZone((Class)SiriReaderConnection) init];
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = [self localRouteController];
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(void *)(v0 + 112) = 0xE000000000000000;
  ObservationRegistrar.init()();
  return v0;
}

uint64_t sub_10019008C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1001900C4()
{
  return sub_10018F720();
}

uint64_t sub_1001900CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001900DC()
{
  return swift_release();
}

uint64_t sub_1001900E4()
{
  *(void *)(*(void *)(v0 + 16) + 32) = *(void *)(v0 + 24);
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_100190120(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100190170()
{
  return sub_100190400();
}

void sub_100190190()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = v2;
  id v4 = v2;
}

void sub_1001901D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100190234(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214((uint64_t *)&unk_100523A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10019029C()
{
  sub_10018E018(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1001902B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v7 = a7;
  }
}

void *sub_10019031C(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_10019035C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t sub_1001903AC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100190400()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 104) = v0[3];
  *(void *)(v1 + 112) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_100190440()
{
}

void sub_100190458()
{
}

unint64_t sub_100190470(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BarCodeLookupState(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100199CC4(a1, (uint64_t)v4, type metadata accessor for BarCodeLookupState);
  uint64_t v5 = *(void **)&v4[*(int *)(sub_10000F214(&qword_10051A328) + 48)];
  swift_bridgeObjectRelease();
  id v6 = [v5 detectedCode];
  if (!v6)
  {
    unint64_t v10 = 0xD00000000000001DLL;
LABEL_8:

    goto LABEL_9;
  }
  id v7 = v6;
  id v8 = [v6 mrcObject];
  if (!v8)
  {
    unint64_t v10 = 0xD00000000000001DLL;

    goto LABEL_8;
  }
  uint64_t v9 = v8;
  unint64_t v10 = 0xD00000000000001DLL;
  id v11 = [v8 stringValue];
  if (!v11)
  {

    goto LABEL_8;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  uint64_t v20 = 0x203A65646F6320;
  unint64_t v21 = 0xE700000000000000;
  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = v20;
  uint64_t v18 = (void *)v21;
  uint64_t v20 = 0xD00000000000001DLL;
  unint64_t v21 = 0x8000000100428EA0;
  v17._object = v18;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();

  unint64_t v10 = v20;
LABEL_9:
  sub_100199E14((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return v10;
}

Swift::Int sub_100190678(uint64_t a1)
{
  __chkstk_darwin(a1 - 8);
  uint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  sub_100199CC4(v1, (uint64_t)v3, type metadata accessor for BarCodeLookupState);
  uint64_t v4 = *(void **)&v3[*(int *)(sub_10000F214(&qword_10051A328) + 48)];
  Hasher._combine(_:)(0);
  sub_1003FFF94((uint64_t)v7);
  NSObject.hash(into:)();
  String.hash(into:)();

  sub_100199E14((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for CVDetection);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100190798(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100199CC4(v1, (uint64_t)v4, type metadata accessor for BarCodeLookupState);
  uint64_t v5 = *(void **)&v4[*(int *)(sub_10000F214(&qword_10051A328) + 48)];
  Hasher._combine(_:)(0);
  sub_1003FFF94(a1);
  NSObject.hash(into:)();
  String.hash(into:)();

  sub_100199E14((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001908A4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Hasher.init(_seed:)();
  sub_100199CC4(v1, (uint64_t)v3, type metadata accessor for BarCodeLookupState);
  uint64_t v4 = *(void **)&v3[*(int *)(sub_10000F214(&qword_10051A328) + 48)];
  Hasher._combine(_:)(0);
  sub_1003FFF94((uint64_t)v7);
  NSObject.hash(into:)();
  String.hash(into:)();

  sub_100199E14((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for CVDetection);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001909C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = type metadata accessor for Spring();
  __chkstk_darwin(v3 - 8);
  v38[1] = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100523BA8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100523BB0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  id v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100523BB8);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_100523BC0);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  os_log_type_t v19 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38[0] = sub_10000F214(&qword_100523BC8) - 8;
  __chkstk_darwin(v38[0]);
  uint64_t v39 = (uint64_t)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = static HorizontalAlignment.center.getter();
  *((void *)v7 + 1) = 0;
  unsigned char v7[16] = 0;
  sub_10000F214(&qword_100523BD0);
  sub_100190E80((void **)v1);
  long long v43 = *(_OWORD *)(v1 + 24);
  uint64_t v45 = v43;
  sub_10000FC34((uint64_t)&v43 + 8, (uint64_t)v44, &qword_100523BD8);
  long long v41 = v43;
  sub_10000F214(&qword_100523BE0);
  State.wrappedValue.getter();
  uint64_t v21 = v42;
  sub_10000FB74((uint64_t)v7, (uint64_t)v11, &qword_100523BA8);
  uint64_t v22 = &v11[*(int *)(v9 + 44)];
  *(void *)uint64_t v22 = v21;
  v22[8] = 0;
  sub_10000FBD8((uint64_t)v7, &qword_100523BA8);
  uint64_t v23 = &v15[*(int *)(v13 + 44)];
  Spring.init(response:dampingRatio:)();
  SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)();
  uint64_t v24 = *(int *)(type metadata accessor for ContainerSmartDialogViewModifier() + 20);
  sub_10000F214(&qword_100518FE8);
  swift_allocObject();
  *(void *)&v23[v24] = PassthroughSubject.init()();
  sub_10000FC34((uint64_t)v11, (uint64_t)v15, &qword_100523BB0);
  type metadata accessor for Form();
  swift_allocObject();
  uint64_t v25 = Form.init()();
  sub_100199D2C(&qword_100523BE8, (void (*)(uint64_t))&type metadata accessor for Form);
  uint64_t v26 = static ObservableObject.environmentStore.getter();
  sub_10000FB74((uint64_t)v15, (uint64_t)v19, &qword_100523BB8);
  uint64_t v27 = (uint64_t *)&v19[*(int *)(v17 + 44)];
  *uint64_t v27 = v26;
  v27[1] = v25;
  sub_10000FBD8((uint64_t)v15, &qword_100523BB8);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = v39;
  sub_10000FB74((uint64_t)v19, v39, &qword_100523BC0);
  uint64_t v30 = v29 + *(int *)(v38[0] + 44);
  *(void *)uint64_t v30 = KeyPath;
  *(unsigned char *)(v30 + 8) = 1;
  sub_10000FBD8((uint64_t)v19, &qword_100523BC0);
  uint64_t v31 = *(void **)v2;
  uint64_t v32 = swift_allocObject();
  long long v33 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v32 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v32 + 32) = v33;
  *(void *)(v32 + 48) = *(void *)(v2 + 32);
  uint64_t v34 = v40;
  sub_10000FB74(v29, v40, &qword_100523BC8);
  uint64_t v35 = (uint64_t (**)())(v34 + *(int *)(sub_10000F214(&qword_100523BF0) + 36));
  *uint64_t v35 = sub_10019AF30;
  v35[1] = (uint64_t (*)())v32;
  v35[2] = 0;
  v35[3] = 0;
  id v36 = v31;
  swift_retain();
  sub_1000B4980((uint64_t)&v45);
  sub_100062328((uint64_t)v44);
  return sub_10000FBD8(v29, &qword_100523BC8);
}

uint64_t sub_100190E80(void **a1)
{
  uint64_t v2 = sub_10000F214(&qword_100523BF8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  v19[3] = sub_10000F734(0, &qword_100522140);
  _OWORD v19[4] = &off_1004EEF38;
  v19[0] = v6;
  id v7 = v6;
  LOBYTE(v6) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  sub_10019B324((uint64_t)v19, (uint64_t)v20);
  char v21 = (char)v6;
  uint64_t v22 = v9;
  uint64_t v23 = v11;
  uint64_t v24 = v13;
  uint64_t v25 = v15;
  char v26 = 0;
  sub_10019B384((uint64_t)v19);
  uint64_t v16 = sub_10000F214(&qword_100523C00);
  uint64_t v17 = sub_10019B454(&qword_100523C08, &qword_100523C00, (void (*)(void))sub_10019B3AC);
  View.smartDialogAnimatable()();
  sub_10000FBD8((uint64_t)v20, &qword_100523C00);
  v20[0] = v16;
  v20[1] = v17;
  swift_getOpaqueTypeConformance2();
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100191090@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isModernizedSnippet.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001910C0()
{
  return EnvironmentValues.isModernizedSnippet.setter();
}

uint64_t sub_1001910E8(uint64_t a1)
{
  id v2 = *(id *)a1;
  id v3 = [*(id *)a1 actionPickerItems];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_10000F734(0, &qword_100523B98);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    long long v8 = *(_OWORD *)(a1 + 24);
    uint64_t v10 = v8;
    sub_10000FC34((uint64_t)&v8 + 8, (uint64_t)v9, &qword_100523BD8);
    id v6 = v2;
    swift_retain();
    sub_1000B4980((uint64_t)&v10);
    sub_100062328((uint64_t)v9);
    sub_10019AF38(v5, v6);
    swift_release();

    sub_1000A6A04((uint64_t)&v10);
    sub_100062354((uint64_t)v9);
    swift_bridgeObjectRelease();
    sub_10000F214(&qword_100523BE0);
  }
  else
  {
    long long v8 = *(_OWORD *)(a1 + 24);
    sub_10000F214(&qword_100523BE0);
  }
  return State.wrappedValue.setter();
}

uint64_t sub_100191248@<X0>(uint64_t a1@<X8>)
{
  return sub_1001909C0(a1);
}

uint64_t sub_100191284()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  id v3 = [v0 contentPreviewString];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v5;
  }
  else
  {
    id v7 = [v0 dataTypeDisplayString];
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v9;
    }
    else
    {
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
    }
  }
}

uint64_t sub_100191404()
{
  return sub_100191284();
}

uint64_t sub_100191428()
{
  id v1 = [*v0 shortDescription];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100191480()
{
  id v1 = [*v0 actionIcon];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 imageWithRenderingMode:2];
    uint64_t v4 = Image.init(uiImage:)();

    return v4;
  }
  else
  {
    return Image.init(_internalSystemName:)();
  }
}

uint64_t sub_100191510()
{
  id v1 = v0;
  sub_1001917F0((uint64_t)&v37);
  uint64_t v2 = v37;
  uint64_t v3 = v38;
  char v4 = v39[0];
  uint64_t v45 = v37;
  uint64_t v46 = v38;
  char v47 = v39[0];
  long long v48 = v40;
  uint64_t v5 = View.eraseToAnyView()();
  sub_100012FAC(v2, v3, v4);
  swift_bridgeObjectRelease();
  long long v48 = &type metadata for AnyView;
  uint64_t v49 = &protocol witness table for AnyView;
  uint64_t v45 = v5;
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  sub_10000F3B0(v1, v6);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  uint64_t v38 = v8;
  sub_1000317A0();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  static Font.subheadline.getter();
  uint64_t v14 = Text.font(_:)();
  uint64_t v16 = v15;
  char v18 = v17;
  swift_release();
  sub_100012FAC(v9, v11, v13);
  swift_bridgeObjectRelease();
  static Color.secondary.getter();
  uint64_t v19 = Text.foregroundColor(_:)();
  uint64_t v21 = v20;
  char v23 = v22;
  swift_release();
  LOBYTE(v9) = v23 & 1;
  sub_100012FAC(v14, v16, v18 & 1);
  swift_bridgeObjectRelease();
  static Font.Weight.regular.getter();
  uint64_t v24 = Text.fontWeight(_:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  char v30 = v29 & 1;
  sub_100012FAC(v19, v21, v9);
  swift_bridgeObjectRelease();
  uint64_t v37 = v24;
  uint64_t v38 = v26;
  v39[0] = v30;
  uint64_t v40 = v28;
  uint64_t v31 = View.eraseToAnyView()();
  sub_100012FAC(v24, v26, v30);
  swift_bridgeObjectRelease();
  uint64_t v44 = &protocol witness table for AnyView;
  long long v43 = &type metadata for AnyView;
  uint64_t v42 = v31;
  uint64_t v32 = static Alignment.center.getter();
  uint64_t v34 = v33;
  sub_100191A94(v1, (uint64_t)v39);
  uint64_t v37 = v32;
  uint64_t v38 = v34;
  sub_10000F214(&qword_100523C58);
  sub_100013AA8(&qword_100523C60, &qword_100523C58);
  uint64_t v35 = AnyView.init<A>(_:)();
  uint64_t v40 = &type metadata for AnyView;
  long long v41 = &protocol witness table for AnyView;
  uint64_t v37 = v35;
  return PrimaryHeaderMarqueeView.init(text1:text2:thumbnail:addTint:)();
}

uint64_t sub_1001917F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000F214(&qword_100523C68);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v32[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v32[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  sub_10000F3B0(v1, v10);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  uint64_t v34 = v12;
  static CharacterSet.whitespacesAndNewlines.getter();
  sub_1000317A0();
  uint64_t v13 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v15 = v14;
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  uint64_t v33 = v13;
  uint64_t v34 = v15;
  uint64_t v16 = Text.init<A>(_:)();
  uint64_t v18 = v17;
  LOBYTE(v10) = v19 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v20 = Text.fontWeight(_:)();
  uint64_t v22 = v21;
  LOBYTE(v7) = v23 & 1;
  sub_100012FAC(v16, v18, v10);
  swift_bridgeObjectRelease();
  static Font.Width.standard.getter();
  uint64_t v24 = type metadata accessor for Font.Width();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v5, 0, 1, v24);
  uint64_t v25 = Text.fontWidth(_:)();
  uint64_t v27 = v26;
  LOBYTE(v9) = v28;
  uint64_t v30 = v29;
  sub_100012FAC(v20, v22, v7);
  swift_bridgeObjectRelease();
  uint64_t result = sub_10000FBD8((uint64_t)v5, &qword_100523C68);
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 16) = v9 & 1;
  *(void *)(a1 + 24) = v30;
  return result;
}

uint64_t sub_100191A94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = static Color.blue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  char v8 = v29;
  uint64_t v25 = v30;
  uint64_t v26 = v28;
  char v9 = v31;
  uint64_t v24 = v32;
  uint64_t v23 = v33;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_10000F3B0(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
  uint64_t v22 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v12 = v34;
  char v13 = v35;
  uint64_t v14 = v36;
  LOBYTE(a1) = v37;
  uint64_t v15 = v38;
  uint64_t v16 = v39;
  uint64_t v17 = static Color.white.getter();
  uint64_t result = swift_getKeyPath();
  char v44 = 1;
  char v41 = (char)a1;
  *(_DWORD *)(a2 + 10) = *(_DWORD *)&v46[9];
  *(_WORD *)(a2 + 14) = v47;
  *(_DWORD *)(a2 + 25) = *(_DWORD *)v46;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)&v46[3];
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v45;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v45[3];
  unsigned __int8 v19 = v44;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)&v42[9];
  *(_WORD *)(a2 + 86) = v43;
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v42;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v42[3];
  char v20 = v41;
  *(_DWORD *)(a2 + 113) = *(_DWORD *)v40;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v40[3];
  *(void *)a2 = v27;
  *(_WORD *)(a2 + 8) = 256;
  *(void *)(a2 + 16) = v26;
  *(unsigned char *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = v25;
  *(unsigned char *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v24;
  *(void *)(a2 + 56) = v23;
  *(void *)(a2 + 64) = v22;
  *(void *)(a2 + 72) = 0;
  *(_WORD *)(a2 + 80) = v19;
  *(void *)(a2 + 88) = v12;
  *(unsigned char *)(a2 + 96) = v13;
  *(void *)(a2 + 104) = v14;
  *(unsigned char *)(a2 + 112) = v20;
  *(void *)(a2 + 120) = v15;
  *(void *)(a2 + 128) = v16;
  *(void *)(a2 + 136) = result;
  *(void *)(a2 + 144) = v17;
  return result;
}

uint64_t sub_100191D94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v94 = a1;
  uint64_t v3 = type metadata accessor for BarCodeResultView(0);
  unint64_t v84 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v82 = (uint64_t)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v83 = v4;
  uint64_t v93 = sub_10000F214(&qword_100523B40);
  uint64_t v87 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v85 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v86 = (char *)&v72 - v7;
  uint64_t v91 = sub_10000F214(&qword_100523B48);
  __chkstk_darwin(v91);
  char v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for EmptyResultsView();
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  uint64_t v88 = (char *)&v72 - v14;
  uint64_t v15 = sub_10000F214(&qword_100523B50);
  __chkstk_darwin(v15 - 8);
  uint64_t v89 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for BarCodeLookupState(0);
  __chkstk_darwin(v90);
  uint64_t v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v72 - v20;
  uint64_t v22 = v3;
  uint64_t v23 = *(int *)(v3 + 28);
  uint64_t v24 = v2;
  uint64_t v25 = v2 + v23;
  sub_100199CC4(v25, (uint64_t)&v72 - v20, type metadata accessor for BarCodeLookupState);
  uint64_t v26 = sub_10000F214(&qword_10051A328);
  uint64_t v27 = *(void **)&v21[*(int *)(v26 + 48)];
  uint64_t v28 = *(int *)(v26 + 64);
  uint64_t v92 = v21;
  char v29 = &v21[v28];
  uint64_t v31 = *(void *)v29;
  unint64_t v30 = *((void *)v29 + 1);
  uint64_t v32 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v32 = v31 & 0xFFFFFFFFFFFFLL;
  }
  if (v32)
  {
    uint64_t v33 = v27;
    *uint64_t v12 = swift_getKeyPath();
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = (uint64_t *)((char *)v12 + *(int *)(v10 + 20));
    *uint64_t v34 = v31;
    v34[1] = v30;
    *(_OWORD *)((char *)v12 + *(int *)(v10 + 24)) = xmmword_10044A0D0;
    uint64_t v35 = (uint64_t)v88;
    sub_100199C5C((uint64_t)v12, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
    sub_100199CC4(v35, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
    swift_storeEnumTagMultiPayload();
    sub_100199D2C(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    uint64_t v36 = sub_10000F69C(&qword_100523B60);
    uint64_t v37 = sub_10019B454(&qword_100523B68, &qword_100523B60, (void (*)(void))sub_100199D74);
    uint64_t v38 = sub_100199D2C(&qword_100523A98, (void (*)(uint64_t))type metadata accessor for BarCodeLookupState);
    *(void *)&long long v104 = v36;
    *((void *)&v104 + 1) = v90;
    *(void *)&long long v105 = v37;
    *((void *)&v105 + 1) = v38;
    swift_getOpaqueTypeConformance2();
    uint64_t v39 = (uint64_t)v89;
    _ConditionalContent<>.init(storage:)();

    sub_100199E14(v35, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
  }
  else
  {
    uint64_t v77 = v25;
    uint64_t v79 = v18;
    uint64_t v80 = v10;
    uint64_t v40 = v27;
    uint64_t v81 = v9;
    swift_bridgeObjectRelease();
    uint64_t v78 = static HorizontalAlignment.center.getter();
    uint64_t v41 = v24;
    uint64_t v42 = v24 + *(int *)(v22 + 32);
    char v43 = *(unsigned char *)v42;
    uint64_t v44 = *(void *)(v42 + 8);
    LOBYTE(v104) = v43;
    *((void *)&v104 + 1) = v44;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.getter();
    uint64_t v45 = v82;
    unint64_t v46 = v83;
    unint64_t v47 = v84;
    if (v95)
    {
      uint64_t v88 = 0;
      long long v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
    }
    else
    {
      sub_100199CC4(v24, v82, type metadata accessor for BarCodeResultView);
      unint64_t v52 = (*(unsigned __int8 *)(v47 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      uint64_t v49 = swift_allocObject();
      sub_100199C5C(v45, v49 + v52, type metadata accessor for BarCodeResultView);
      *(void *)&long long v95 = _swiftEmptyArrayStorage;
      uint64_t v88 = v40;
      sub_10000F214(&qword_100522A60);
      State.init(wrappedValue:)();
      uint64_t v51 = *((void *)&v104 + 1);
      uint64_t v50 = v104;
      long long v48 = sub_100199E78;
    }
    *(void *)&long long v74 = v50;
    *((void *)&v74 + 1) = v51;
    *(void *)&long long v75 = v48;
    *((void *)&v75 + 1) = v49;
    sub_100199CC4(v41, v45, type metadata accessor for BarCodeResultView);
    uint64_t v53 = *(unsigned __int8 *)(v47 + 80);
    unint64_t v54 = ((v53 + 16) & ~v53) + v46;
    uint64_t v55 = (v53 + 16) & ~v53;
    uint64_t v73 = v55;
    unint64_t v83 = (v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v84 = v83 + 8;
    uint64_t v56 = swift_allocObject();
    uint64_t v76 = v40;
    sub_100199C5C(v45, v56 + v55, type metadata accessor for BarCodeResultView);
    *(void *)(v56 + ((v54 + 7) & 0xFFFFFFFFFFFFFFF8)) = v40;
    sub_100199CC4(v41, v45, type metadata accessor for BarCodeResultView);
    uint64_t v57 = swift_allocObject();
    uint64_t v58 = v73;
    sub_100199C5C(v45, v57 + v73, type metadata accessor for BarCodeResultView);
    char v103 = 1;
    long long v95 = (unint64_t)v78;
    LOBYTE(v96) = 1;
    *((void *)&v96 + 1) = v88;
    long long v97 = v75;
    long long v98 = v74;
    *(void *)&long long v99 = sub_100199E94;
    *((void *)&v99 + 1) = v56;
    long long v100 = 0u;
    long long v101 = 0u;
    *(void *)&long long v102 = sub_10019A304;
    *((void *)&v102 + 1) = v57;
    uint64_t v59 = (uint64_t)v79;
    sub_100199CC4(v77, (uint64_t)v79, type metadata accessor for BarCodeLookupState);
    sub_100199CC4(v41, v45, type metadata accessor for BarCodeResultView);
    uint64_t v60 = swift_allocObject();
    sub_100199C5C(v45, v60 + v58, type metadata accessor for BarCodeResultView);
    uint64_t v61 = v76;
    *(void *)(v60 + v83) = v76;
    uint64_t v88 = v61;
    uint64_t v62 = sub_10000F214(&qword_100523B60);
    uint64_t v63 = sub_10019B454(&qword_100523B68, &qword_100523B60, (void (*)(void))sub_100199D74);
    uint64_t v64 = sub_100199D2C(&qword_100523A98, (void (*)(uint64_t))type metadata accessor for BarCodeLookupState);
    uint64_t v65 = v85;
    uint64_t v66 = v90;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    sub_100199E14(v59, type metadata accessor for BarCodeLookupState);
    long long v108 = v99;
    long long v109 = v100;
    long long v110 = v101;
    long long v111 = v102;
    long long v104 = v95;
    long long v105 = v96;
    long long v106 = v97;
    long long v107 = v98;
    sub_10019A89C((uint64_t)&v104);
    uint64_t v68 = v86;
    uint64_t v67 = v87;
    uint64_t v69 = v93;
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v86, v65, v93);
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v81, v68, v69);
    swift_storeEnumTagMultiPayload();
    sub_100199D2C(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    *(void *)&long long v95 = v62;
    *((void *)&v95 + 1) = v66;
    *(void *)&long long v96 = v63;
    *((void *)&v96 + 1) = v64;
    swift_getOpaqueTypeConformance2();
    uint64_t v39 = (uint64_t)v89;
    _ConditionalContent<>.init(storage:)();

    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
  }
  uint64_t v70 = (uint64_t)v92;
  sub_10000FC34(v39, v94, &qword_100523B50);
  return sub_100199E14(v70, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

uint64_t sub_1001927E0(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  sub_100197C1C(*(void *)a1, v2, v3, (uint64_t (*)(void))sub_10000F724);
  unint64_t v4 = (void (*)(uint64_t))sub_10027D504(v1, v2, v3);
  uint64_t result = sub_100198010(v1, v2, v3, (uint64_t (*)(void))sub_10000F478);
  if (v4)
  {
    v4(result);
    return sub_10000F478((uint64_t)v4);
  }
  return result;
}

uint64_t sub_1001928AC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v103 = type metadata accessor for BarCodeResultView(0);
  uint64_t v4 = *(void *)(v103 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v103);
  uint64_t v6 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v109 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v10 - 8);
  uint64_t v107 = (uint64_t)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v99 - v13;
  double v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v99 - v17;
  id v19 = [a1 urlThatCanBeOpened:v16];
  if (v19)
  {
    uint64_t v20 = v19;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v14, 1, 1, v7);
  }
  uint64_t v21 = v8;
  sub_10000FC34((uint64_t)v14, (uint64_t)v18, &qword_10051E070);
  id v22 = [a1 defaultActionTargetApplicationBundleIdentifier];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v106 = v24;
  }
  else
  {
    uint64_t v104 = 0;
    uint64_t v106 = 0;
  }
  uint64_t v108 = v7;
  if (qword_100517E10 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = sub_10000F378(v25, (uint64_t)qword_10055E148);
  id v27 = a1;
  uint64_t v105 = v26;
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    long long v102 = v18;
    uint64_t v31 = (uint8_t *)v30;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v101 = v5;
    id aBlock = v32;
    long long v100 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_DWORD *)uint64_t v31 = 136315138;
    sub_100193E44();
    uint64_t v99 = v21;
    uint64_t v116 = sub_1003806B0(v33, v34, &aBlock);
    uint64_t v6 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v21 = v99;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Handling action %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v18 = v102;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v36 = v106;
  uint64_t v35 = v107;
  sub_10000FB74((uint64_t)v18, v107, &qword_10051E070);
  uint64_t v37 = v108;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v35, 1, v108) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v109, v35, v37);
    if (v36)
    {
      if (v104 == 0xD000000000000016 && v36 == 0x8000000100428E80)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v38)
      {
LABEL_19:
        if (!sub_10019AA70(v27))
        {
          uint64_t v62 = v21;
          uint64_t v63 = *(void *)(v2 + 48);
          uint64_t v64 = *(void *)(v2 + 56);
          char v65 = *(unsigned char *)(v2 + 64);
          sub_10000FCA0();
          uint64_t v66 = (void (*)(void, void))sub_10027C858(v63, v64, v65);
          sub_10000FD10();
          LOBYTE(aBlock) = 1;
          v66(v109, (id *)&aBlock);
          swift_release();
          uint64_t v67 = *(void *)v2;
          uint64_t v68 = *(void *)(v2 + 8);
          char v69 = *(unsigned char *)(v2 + 16);
          sub_100197C1C(*(void *)v2, v68, v69, (uint64_t (*)(void))sub_10000F724);
          uint64_t v70 = (void (*)(void))sub_10027D504(v67, v68, v69);
          uint64_t v71 = sub_100198010(v67, v68, v69, (uint64_t (*)(void))sub_10000F478);
          if (v70)
          {
            v70(v71);
            sub_10000F478((uint64_t)v70);
          }
          (*(void (**)(char *, uint64_t))(v62 + 8))(v109, v37);
          return sub_10000FBD8((uint64_t)v18, &qword_10051E070);
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v109, v37);
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  sub_10000FBD8(v35, &qword_10051E070);
LABEL_21:
  unint64_t v39 = (unint64_t)[v27 payloadDataType];
  if (v39 <= 0xE)
  {
    if (((1 << v39) & 0x6342) != 0)
    {
      uint64_t v40 = v27;
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        char v43 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)char v43 = 134217984;
        id v44 = [v40 actionPickerItems];
        if (v44)
        {
          sub_10000F734(0, &qword_100523B98);
          unint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v45 >> 62)
          {
            swift_bridgeObjectRetain();
            id v44 = (id)_CocoaArrayWrapper.endIndex.getter();

            swift_bridgeObjectRelease_n();
          }
          else
          {
            id v44 = *(id *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);

            swift_bridgeObjectRelease();
          }
        }
        else
        {
        }
        id aBlock = (uint64_t)v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Performing action via \"perform\" (%ld actionPickerItems available)", v43, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v41 = v40;
      }

      [v40 performAction];
      uint64_t v57 = *(void *)v2;
      uint64_t v58 = *(void *)(v2 + 8);
      char v59 = *(unsigned char *)(v2 + 16);
      sub_100197C1C(*(void *)v2, v58, v59, (uint64_t (*)(void))sub_10000F724);
      uint64_t v60 = (void (*)(void))sub_10027D504(v57, v58, v59);
      uint64_t v61 = sub_100198010(v57, v58, v59, (uint64_t (*)(void))sub_10000F478);
      if (v60)
      {
        v60(v61);
        sub_10000F478((uint64_t)v60);
      }
      return sub_10000FBD8((uint64_t)v18, &qword_10051E070);
    }
    if (!v39) {
      goto LABEL_62;
    }
  }
  unint64_t v46 = (NSString *)String._bridgeToObjectiveC()();
  SEL v47 = NSSelectorFromString(v46);

  if ([v27 respondsToSelector:v47])
  {
    long long v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Performing action using performDefaultActionWithCompletionHandler:", v50, 2u);
      swift_slowDealloc();
    }

    uint64_t v51 = v2 + *(int *)(v103 + 32);
    char v52 = *(unsigned char *)v51;
    uint64_t v53 = *(void *)(v51 + 8);
    LOBYTE(aBlock) = v52;
    uint64_t v111 = v53;
    LOBYTE(v116) = 1;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.setter();
    sub_100199CC4(v2, (uint64_t)v6, type metadata accessor for BarCodeResultView);
    unint64_t v54 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v55 = swift_allocObject();
    sub_100199C5C((uint64_t)v6, v55 + v54, type metadata accessor for BarCodeResultView);
    long long v114 = sub_10019A9E8;
    uint64_t v115 = v55;
    id aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v111 = 1107296256;
    uint64_t v112 = sub_100143444;
    long long v113 = &unk_1004EF040;
    uint64_t v56 = _Block_copy(&aBlock);
    swift_release();
    [v27 performDefaultActionWithCompletionHandler:v56];
    _Block_release(v56);
    return sub_10000FBD8((uint64_t)v18, &qword_10051E070);
  }
  id v73 = [v27 actionPickerItems];
  if (!v73)
  {
LABEL_59:
    uint64_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      long long v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Found zero action picker items", v96, 2u);
      swift_slowDealloc();
    }

LABEL_62:
    id v97 = [v27 payloadDataType];
    sub_10019A990();
    swift_allocError();
    *long long v98 = v97;
    sub_100193764();
    sub_10000FBD8((uint64_t)v18, &qword_10051E070);
    return swift_errorRelease();
  }
  long long v74 = v73;
  long long v109 = (char *)v2;
  sub_10000F734(0, &qword_100523B98);
  unint64_t v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v75 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_44;
    }
    goto LABEL_58;
  }
  uint64_t v76 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v76)
  {
LABEL_58:
    swift_bridgeObjectRelease_n();
    goto LABEL_59;
  }
LABEL_44:
  if ((v75 & 0xC000000000000001) != 0)
  {
    id v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_47;
  }
  if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v77 = *(id *)(v75 + 32);
LABEL_47:
    uint64_t v78 = v77;
    swift_bridgeObjectRelease();
    id v79 = v78;
    swift_bridgeObjectRetain();
    id v80 = v79;
    uint64_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = swift_slowAlloc();
      id aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 134218242;
      long long v102 = v18;
      if (v75 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v84 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v116 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v83 + 12) = 2080;
      id v85 = [v80 label];
      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v88 = v87;

      uint64_t v116 = sub_1003806B0(v86, v88, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Performing first of %ld actionPickerItems: (%s)", (uint8_t *)v83, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v18 = v102;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    [v80 performAction];
    uint64_t v89 = *(void *)v109;
    uint64_t v90 = *((void *)v109 + 1);
    char v91 = v109[16];
    sub_100197C1C(*(void *)v109, v90, v91, (uint64_t (*)(void))sub_10000F724);
    uint64_t v92 = (void (*)(void))sub_10027D504(v89, v90, v91);
    uint64_t v93 = sub_100198010(v89, v90, v91, (uint64_t (*)(void))sub_10000F478);
    if (v92)
    {
      v92(v93);
      sub_10000F478((uint64_t)v92);
    }

    return sub_10000FBD8((uint64_t)v18, &qword_10051E070);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001936FC()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100193764()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v3 - 8);
  if (qword_100517E10 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000F378(v4, (uint64_t)qword_10055E148);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v25;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error performing qr code action %@", v7, 0xCu);
    sub_10000F214(&qword_10051A948);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRetain();
  sub_10000F214(&qword_10051F3B0);
  if (swift_dynamicCast())
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = BCSParsedDataType.debugDescription.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    uint64_t v11 = 0xD00000000000001BLL;
    unint64_t v10 = 0x8000000100428FB0;
    goto LABEL_16;
  }
  swift_errorRetain();
  sub_10000F734(0, &qword_10051F3F8);
  if (swift_dynamicCast())
  {
    id v12 = [v26 domain];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    if (v13 == 0xD000000000000014 && v15 == 0x8000000100428F90)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      id v17 = [v26 localizedDescription];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v18;

      goto LABEL_16;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_13;
    }
  }
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v11 = String.init(localized:table:bundle:locale:comment:)();
  unint64_t v10 = v19;
LABEL_16:
  uint64_t v20 = *(void *)(v1 + 24);
  uint64_t v21 = *(void *)(v1 + 32);
  char v22 = *(unsigned char *)(v1 + 40);
  sub_100197C1C(v20, v21, v22, (uint64_t (*)(void))sub_10000F724);
  uint64_t v23 = (void (*)(uint64_t, unint64_t))sub_10027D548(v20, v21, v22);
  sub_100198010(v20, v21, v22, (uint64_t (*)(void))sub_10000F478);
  if (!v23) {
    return swift_bridgeObjectRelease();
  }
  v23(v11, v10);
  swift_bridgeObjectRelease();
  return sub_10000F478((uint64_t)v23);
}

uint64_t BCSParsedDataType.debugDescription.getter()
{
  return 0x6E776F6E6B6E75;
}

void sub_100193E44()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v96 = (char *)&v96 - v10;
  unint64_t v98 = 0;
  unint64_t v99 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  unint64_t v98 = 0xD000000000000010;
  unint64_t v99 = 0x8000000100428EF0;
  [v0 payloadDataType];
  v11._uint64_t countAndFlagsBits = BCSParsedDataType.debugDescription.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  unint64_t v12 = v98;
  unint64_t v13 = v99;
  uint64_t v14 = sub_100328860(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v16 = *((void *)v14 + 2);
  unint64_t v15 = *((void *)v14 + 3);
  if (v16 >= v15 >> 1) {
    uint64_t v14 = sub_100328860((char *)(v15 > 1), v16 + 1, 1, v14);
  }
  *((void *)v14 + 2) = v16 + 1;
  id v17 = &v14[16 * v16];
  *((void *)v17 + 4) = v12;
  *((void *)v17 + 5) = v13;
  id v18 = [v0 dataTypeDisplayString];
  if (v18)
  {
    unint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v22 = v21;

    unint64_t v98 = 0;
    unint64_t v99 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    unint64_t v98 = 0xD000000000000017;
    unint64_t v99 = 0x8000000100428F50;
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 34;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    unint64_t v25 = v98;
    unint64_t v26 = v99;
    unint64_t v28 = *((void *)v14 + 2);
    unint64_t v27 = *((void *)v14 + 3);
    if (v28 >= v27 >> 1) {
      uint64_t v14 = sub_100328860((char *)(v27 > 1), v28 + 1, 1, v14);
    }
    *((void *)v14 + 2) = v28 + 1;
    os_log_type_t v29 = &v14[16 * v28];
    *((void *)v29 + 4) = v25;
    *((void *)v29 + 5) = v26;
  }
  unint64_t v98 = 0x3D7373616C63;
  unint64_t v99 = 0xE600000000000000;
  swift_getObjectType();
  v30._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  unint64_t v31 = v98;
  unint64_t v32 = v99;
  unint64_t v34 = *((void *)v14 + 2);
  unint64_t v33 = *((void *)v14 + 3);
  if (v34 >= v33 >> 1) {
    uint64_t v14 = sub_100328860((char *)(v33 > 1), v34 + 1, 1, v14);
  }
  *((void *)v14 + 2) = v34 + 1;
  id v97 = v14;
  uint64_t v35 = &v14[16 * v34];
  *((void *)v35 + 4) = v31;
  *((void *)v35 + 5) = v32;
  id v36 = [v1 urlThatCanBeOpened];
  if (!v36)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_15;
  }
  uint64_t v37 = v36;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  char v38 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v38(v4, v8, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_15:
    sub_10000FBD8((uint64_t)v4, &qword_10051E070);
    goto LABEL_16;
  }
  unint64_t v39 = v96;
  v38(v96, v4, v5);
  unint64_t v98 = 1030517365;
  unint64_t v99 = 0xE400000000000000;
  sub_100199D2C((unint64_t *)&qword_10051E350, (void (*)(uint64_t))&type metadata accessor for URL);
  v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  unint64_t v41 = v98;
  unint64_t v42 = v99;
  char v43 = v97;
  unint64_t v45 = *((void *)v97 + 2);
  unint64_t v44 = *((void *)v97 + 3);
  if (v45 >= v44 >> 1) {
    char v43 = sub_100328860((char *)(v44 > 1), v45 + 1, 1, v97);
  }
  *((void *)v43 + 2) = v45 + 1;
  id v97 = v43;
  unint64_t v46 = &v43[16 * v45];
  *((void *)v46 + 4) = v41;
  *((void *)v46 + 5) = v42;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v39, v5);
LABEL_16:
  id v47 = [v1 defaultActionTargetApplicationBundleIdentifier];
  if (v47)
  {
    long long v48 = v47;
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v51 = v50;

    unint64_t v98 = 0;
    unint64_t v99 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    unint64_t v98 = 0xD000000000000014;
    unint64_t v99 = 0x8000000100428F30;
    v52._uint64_t countAndFlagsBits = v49;
    v52._object = v51;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    unint64_t v53 = v98;
    unint64_t v54 = v99;
    uint64_t v55 = v97;
    unint64_t v57 = *((void *)v97 + 2);
    unint64_t v56 = *((void *)v97 + 3);
    if (v57 >= v56 >> 1) {
      uint64_t v55 = sub_100328860((char *)(v56 > 1), v57 + 1, 1, v97);
    }
    *((void *)v55 + 2) = v57 + 1;
    id v97 = v55;
    uint64_t v58 = &v55[16 * v57];
    *((void *)v58 + 4) = v53;
    *((void *)v58 + 5) = v54;
  }
  id v59 = [v1 actionPickerItems];
  if (!v59) {
    goto LABEL_38;
  }
  uint64_t v60 = v59;
  sub_10000F734(0, &qword_100523B98);
  unint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v61 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v62 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v62 < 1)
  {
LABEL_38:
    os_log_type_t v82 = v97;
LABEL_44:
    unint64_t v98 = (unint64_t)v82;
    sub_10000F214((uint64_t *)&unk_100522CD0);
    sub_100013AA8((unint64_t *)&qword_10051CA40, (uint64_t *)&unk_100522CD0);
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return;
  }
  id v63 = [v1 actionPickerItems];
  if (v63)
  {
    uint64_t v64 = v63;
    unint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v65 >> 62)) {
      goto LABEL_26;
    }
  }
  else
  {
    unint64_t v65 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_26:
      uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v66) {
        goto LABEL_27;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      unint64_t v98 = 0;
      unint64_t v99 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v98 = 0xD000000000000013;
      unint64_t v99 = 0x8000000100428F10;
      uint64_t v83 = self;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v85 = [v83 localizedStringByJoiningStrings:isa];

      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v88 = v87;

      v89._uint64_t countAndFlagsBits = v86;
      v89._object = v88;
      String.append(_:)(v89);
      swift_bridgeObjectRelease();
      v90._uint64_t countAndFlagsBits = 93;
      v90._object = (void *)0xE100000000000000;
      String.append(_:)(v90);
      unint64_t v91 = v98;
      unint64_t v92 = v99;
      os_log_type_t v82 = v97;
      unint64_t v94 = *((void *)v97 + 2);
      unint64_t v93 = *((void *)v97 + 3);
      if (v94 >= v93 >> 1) {
        os_log_type_t v82 = sub_100328860((char *)(v93 > 1), v94 + 1, 1, v97);
      }
      *((void *)v82 + 2) = v94 + 1;
      os_log_type_t v95 = &v82[16 * v94];
      *((void *)v95 + 4) = v91;
      *((void *)v95 + 5) = v92;
      goto LABEL_44;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v66) {
    goto LABEL_41;
  }
LABEL_27:
  if (v66 >= 1)
  {
    uint64_t v67 = 0;
    uint64_t v68 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if ((v65 & 0xC000000000000001) != 0) {
        id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v69 = *(id *)(v65 + 8 * v67 + 32);
      }
      uint64_t v70 = v69;
      unint64_t v98 = 34;
      unint64_t v99 = 0xE100000000000000;
      id v71 = [v69 label];
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      long long v74 = v73;

      v75._uint64_t countAndFlagsBits = v72;
      v75._object = v74;
      String.append(_:)(v75);
      swift_bridgeObjectRelease();
      v76._uint64_t countAndFlagsBits = 34;
      v76._object = (void *)0xE100000000000000;
      String.append(_:)(v76);
      unint64_t v77 = v98;
      unint64_t v78 = v99;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v68 = sub_100328860(0, *((void *)v68 + 2) + 1, 1, v68);
      }
      unint64_t v80 = *((void *)v68 + 2);
      unint64_t v79 = *((void *)v68 + 3);
      if (v80 >= v79 >> 1) {
        uint64_t v68 = sub_100328860((char *)(v79 > 1), v80 + 1, 1, v68);
      }
      ++v67;
      *((void *)v68 + 2) = v80 + 1;
      uint64_t v81 = &v68[16 * v80];
      *((void *)v81 + 4) = v77;
      *((void *)v81 + 5) = v78;
    }
    while (v66 != v67);
    goto LABEL_41;
  }
  __break(1u);
}

uint64_t sub_1001947A0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    swift_errorRetain();
    sub_100193764();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v3 = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    sub_100197C1C(*(void *)a2, v4, v5, (uint64_t (*)(void))sub_10000F724);
    uint64_t v6 = (void (*)(uint64_t))sub_10027D504(v3, v4, v5);
    uint64_t result = sub_100198010(v3, v4, v5, (uint64_t (*)(void))sub_10000F478);
    if (v6)
    {
      v6(result);
      return sub_10000F478((uint64_t)v6);
    }
  }
  return result;
}

uint64_t sub_1001948B0()
{
  id v1 = [v0 payloadDataType];
  if (v1 == (id)1)
  {
    id v9 = [v0 defaultActionTargetApplicationBundleIdentifier];
    if (!v9) {
      return 0;
    }
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (v11 == 0xD000000000000014 && v13 == 0x8000000100428E60
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v11 == 0xD000000000000016 && v13 == 0x8000000100428E80)
    {
LABEL_14:
      swift_bridgeObjectRelease();
      return 1;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return (v14 & 1) != 0;
  }
  if (v1 == (id)3) {
    return 1;
  }
  if (v1 == (id)6)
  {
    uint64_t result = (uint64_t)[v0 defaultActionTargetApplicationBundleIdentifier];
    if (!result) {
      return result;
    }
    uint64_t v3 = (void *)result;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    if (v4 != 0x6C7070612E6D6F63 || v6 != 0xEE007370614D2E65)
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v8 & 1;
    }
    goto LABEL_14;
  }
  return 0;
}

uint64_t sub_100194AA4()
{
  return BCSParsedDataType.debugDescription.getter();
}

uint64_t sub_100194AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v9 = (char *)&v29 - v8;
  uint64_t v10 = sub_10000F214(&qword_100523A10);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t)&v12[*(int *)(v13 + 56)];
  sub_100199CC4(a1, (uint64_t)v12, type metadata accessor for BarCodeLookupState);
  sub_100199CC4(a2, v14, type metadata accessor for BarCodeLookupState);
  uint64_t v15 = sub_10000F214(&qword_10051A328);
  uint64_t v16 = *(int *)(v15 + 48);
  id v17 = *(void **)&v12[v16];
  uint64_t v18 = *(int *)(v15 + 64);
  uint64_t v19 = *(void *)&v12[v18 + 8];
  uint64_t v30 = *(void *)&v12[v18];
  uint64_t v20 = *(void **)(v14 + v16);
  uint64_t v22 = *(void *)(v14 + v18);
  uint64_t v21 = *(void *)(v14 + v18 + 8);
  sub_100199C5C((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v23 = v14;
  uint64_t v24 = (uint64_t)v6;
  sub_100199C5C(v23, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
  if ((sub_1003FD840(v9, v6) & 1) != 0
    && (uint64_t v25 = v30, sub_10000F734(0, (unint64_t *)&qword_100518A40), (static NSObject.== infix(_:_:)() & 1) != 0))
  {
    if (v25 == v22 && v19 == v21) {
      char v27 = 1;
    }
    else {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v27 = 0;
  }
  sub_100199E14(v24, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_100199E14((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return v27 & 1;
}

uint64_t type metadata accessor for BarCodeLookupState(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100523A88);
}

void *sub_100194D44(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v19 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        uint64_t v20 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)((char *)a1 + v20[5]) = *(_DWORD *)((char *)a2 + v20[5]);
        uint64_t v21 = v20[6];
        uint64_t v22 = (_OWORD *)((char *)a1 + v21);
        uint64_t v23 = (_OWORD *)((char *)a2 + v21);
        long long v24 = v23[3];
        void v22[2] = v23[2];
        v22[3] = v24;
        long long v25 = v23[1];
        *uint64_t v22 = *v23;
        v22[1] = v25;
        *(void *)((char *)a1 + v20[7]) = *(void *)((char *)a2 + v20[7]);
        *(void *)((char *)a1 + v20[8]) = *(void *)((char *)a2 + v20[8]);
        *(void *)((char *)a1 + v20[9]) = *(void *)((char *)a2 + v20[9]);
        *((unsigned char *)a1 + v20[10]) = *((unsigned char *)a2 + v20[10]);
        uint64_t v26 = v20[11];
        char v27 = (void *)((char *)a1 + v26);
        unint64_t v28 = (void *)((char *)a2 + v26);
        uint64_t v29 = v28[1];
        *char v27 = *v28;
        v27[1] = v29;
        uint64_t v30 = v20[12];
        unint64_t v31 = (void *)((char *)a1 + v30);
        unint64_t v32 = (void *)((char *)a2 + v30);
        uint64_t v33 = v32[1];
        *unint64_t v31 = *v32;
        v31[1] = v33;
        uint64_t v34 = v20[13];
        __dst = (char *)a1 + v34;
        uint64_t v35 = (char *)a2 + v34;
        uint64_t v36 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v37 = *(void *)(v36 - 8);
        char v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v38(v35, 1, v36))
        {
          uint64_t v39 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v35, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v35, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
        }
        uint64_t v79 = v20[14];
        unint64_t v80 = (char *)a1 + v79;
        uint64_t v81 = (char *)a2 + v79;
        unint64_t v82 = *((void *)v81 + 1);
        if (v82 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v80 = *(_OWORD *)v81;
        }
        else
        {
          uint64_t v83 = *(void *)v81;
          sub_100038528(*(void *)v81, *((void *)v81 + 1));
          *(void *)unint64_t v80 = v83;
          *((void *)v80 + 1) = v82;
        }
        uint64_t v84 = v20[15];
        id v85 = (void *)((char *)a1 + v84);
        uint64_t v86 = (void *)((char *)a2 + v84);
        if (*v86)
        {
          uint64_t v87 = v86[1];
          uint64_t v88 = v86[2];
          void *v85 = *v86;
          v85[1] = v87;
          v85[2] = v88;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)id v85 = *(_OWORD *)v86;
          v85[2] = v86[2];
        }
        break;
      case 2u:
        uint64_t v40 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
        unint64_t v41 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v41[5]) = *(_DWORD *)((char *)a2 + v41[5]);
        uint64_t v42 = v41[6];
        char v43 = (_OWORD *)((char *)a1 + v42);
        unint64_t v44 = (_OWORD *)((char *)a2 + v42);
        long long v45 = v44[3];
        v43[2] = v44[2];
        v43[3] = v45;
        long long v46 = v44[1];
        *char v43 = *v44;
        v43[1] = v46;
        uint64_t v47 = v41[7];
        long long v48 = (void *)((char *)a1 + v47);
        uint64_t v49 = (void *)((char *)a2 + v47);
        uint64_t v51 = *v49;
        uint64_t v50 = v49[1];
        *long long v48 = v51;
        v48[1] = v50;
        *(void *)((char *)a1 + v41[8]) = *(void *)((char *)a2 + v41[8]);
        *(void *)((char *)a1 + v41[9]) = *(void *)((char *)a2 + v41[9]);
        *(void *)((char *)a1 + v41[10]) = *(void *)((char *)a2 + v41[10]);
        *(void *)((char *)a1 + v41[11]) = *(void *)((char *)a2 + v41[11]);
        *(void *)((char *)a1 + v41[12]) = *(void *)((char *)a2 + v41[12]);
        uint64_t v52 = v41[13];
        unint64_t v53 = *(void **)((char *)a2 + v52);
        *(void *)((char *)a1 + v52) = v53;
        *((unsigned char *)a1 + v41[14]) = *((unsigned char *)a2 + v41[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v54 = v53;
        break;
      case 3u:
      case 4u:
        uint64_t v55 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v55 - 8) + 16))(a1, a2, v55);
        unint64_t v56 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)((char *)a1 + v56[5]) = *(_DWORD *)((char *)a2 + v56[5]);
        uint64_t v57 = v56[6];
        uint64_t v58 = (_OWORD *)((char *)a1 + v57);
        id v59 = (_OWORD *)((char *)a2 + v57);
        long long v60 = v59[3];
        v58[2] = v59[2];
        v58[3] = v60;
        long long v61 = v59[1];
        *uint64_t v58 = *v59;
        v58[1] = v61;
        uint64_t v62 = v56[7];
        id v63 = (void *)((char *)a1 + v62);
        uint64_t v64 = (void *)((char *)a2 + v62);
        uint64_t v66 = *v64;
        uint64_t v65 = v64[1];
        *id v63 = v66;
        v63[1] = v65;
        *(void *)((char *)a1 + v56[8]) = *(void *)((char *)a2 + v56[8]);
        *(void *)((char *)a1 + v56[9]) = *(void *)((char *)a2 + v56[9]);
        *(void *)((char *)a1 + v56[10]) = *(void *)((char *)a2 + v56[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v67 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v67 - 8) + 16))(a1, a2, v67);
        uint64_t v68 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v68[5]) = *(_DWORD *)((char *)a2 + v68[5]);
        uint64_t v69 = v68[6];
        uint64_t v70 = (_OWORD *)((char *)a1 + v69);
        id v71 = (_OWORD *)((char *)a2 + v69);
        long long v72 = v71[3];
        v70[2] = v71[2];
        v70[3] = v72;
        long long v73 = v71[1];
        *uint64_t v70 = *v71;
        v70[1] = v73;
        uint64_t v74 = v68[7];
        Swift::String v75 = (void *)((char *)a1 + v74);
        Swift::String v76 = (void *)((char *)a2 + v74);
        uint64_t v78 = *v76;
        uint64_t v77 = v76[1];
        *Swift::String v75 = v78;
        v75[1] = v77;
        *(void *)((char *)a1 + v68[8]) = *(void *)((char *)a2 + v68[8]);
        *(void *)((char *)a1 + v68[9]) = *(void *)((char *)a2 + v68[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)((char *)a1 + v7[5]) = *(_DWORD *)((char *)a2 + v7[5]);
        uint64_t v8 = v7[6];
        id v9 = (_OWORD *)((char *)a1 + v8);
        uint64_t v10 = (_OWORD *)((char *)a2 + v8);
        long long v11 = v10[3];
        void v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        *id v9 = *v10;
        v9[1] = v12;
        uint64_t v13 = v7[7];
        uint64_t v14 = (void *)((char *)a1 + v13);
        uint64_t v15 = (void *)((char *)a2 + v13);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        *uint64_t v14 = v17;
        v14[1] = v16;
        *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
        *(void *)((char *)a1 + v7[9]) = *(void *)((char *)a2 + v7[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v89 = sub_10000F214(&qword_10051A328);
    uint64_t v90 = *(int *)(v89 + 48);
    unint64_t v91 = *(void **)((char *)a2 + v90);
    *(void *)((char *)a1 + v90) = v91;
    uint64_t v92 = *(int *)(v89 + 64);
    unint64_t v93 = (void *)((char *)a1 + v92);
    unint64_t v94 = (void *)((char *)a2 + v92);
    uint64_t v95 = v94[1];
    *unint64_t v93 = *v94;
    v93[1] = v95;
    id v96 = v91;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001954BC(uint64_t a1)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      int v5 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = a1 + v5[13];
      uint64_t v7 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      }
      id v9 = (uint64_t *)(a1 + v5[14]);
      unint64_t v10 = v9[1];
      if (v10 >> 60 != 15) {
        sub_100038B34(*v9, v10);
      }
      if (*(void *)(a1 + v5[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      uint64_t v12 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v2 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10019582C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
      uint64_t v17 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v17[5]) = *(_DWORD *)(a2 + v17[5]);
      uint64_t v18 = v17[6];
      uint64_t v19 = (_OWORD *)(a1 + v18);
      uint64_t v20 = (_OWORD *)(a2 + v18);
      long long v21 = v20[3];
      void v19[2] = v20[2];
      v19[3] = v21;
      long long v22 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v22;
      *(void *)(a1 + v17[7]) = *(void *)(a2 + v17[7]);
      *(void *)(a1 + v17[8]) = *(void *)(a2 + v17[8]);
      *(void *)(a1 + v17[9]) = *(void *)(a2 + v17[9]);
      *(unsigned char *)(a1 + v17[10]) = *(unsigned char *)(a2 + v17[10]);
      uint64_t v23 = v17[11];
      long long v24 = (void *)(a1 + v23);
      long long v25 = (void *)(a2 + v23);
      uint64_t v26 = v25[1];
      *long long v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v17[12];
      unint64_t v28 = (void *)(a1 + v27);
      uint64_t v29 = (void *)(a2 + v27);
      uint64_t v30 = v29[1];
      *unint64_t v28 = *v29;
      v28[1] = v30;
      uint64_t v31 = v17[13];
      __dst = (void *)(a1 + v31);
      unint64_t v32 = (const void *)(a2 + v31);
      uint64_t v33 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        uint64_t v36 = sub_10000F214(&qword_100524BD0);
        memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(__dst, v32, v33);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
      }
      uint64_t v76 = v17[14];
      uint64_t v77 = a1 + v76;
      uint64_t v78 = (uint64_t *)(a2 + v76);
      unint64_t v79 = v78[1];
      if (v79 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
      }
      else
      {
        uint64_t v80 = *v78;
        sub_100038528(*v78, v78[1]);
        *(void *)uint64_t v77 = v80;
        *(void *)(v77 + 8) = v79;
      }
      uint64_t v81 = v17[15];
      unint64_t v82 = (void *)(a1 + v81);
      uint64_t v83 = (void *)(a2 + v81);
      if (*v83)
      {
        uint64_t v84 = v83[1];
        uint64_t v85 = v83[2];
        *unint64_t v82 = *v83;
        v82[1] = v84;
        v82[2] = v85;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)unint64_t v82 = *(_OWORD *)v83;
        v82[2] = v83[2];
      }
      break;
    case 2u:
      uint64_t v37 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
      char v38 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v38[5]) = *(_DWORD *)(a2 + v38[5]);
      uint64_t v39 = v38[6];
      uint64_t v40 = (_OWORD *)(a1 + v39);
      unint64_t v41 = (_OWORD *)(a2 + v39);
      long long v42 = v41[3];
      void v40[2] = v41[2];
      v40[3] = v42;
      long long v43 = v41[1];
      _OWORD *v40 = *v41;
      v40[1] = v43;
      uint64_t v44 = v38[7];
      long long v45 = (void *)(a1 + v44);
      long long v46 = (uint64_t *)(a2 + v44);
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      *long long v45 = v48;
      v45[1] = v47;
      *(void *)(a1 + v38[8]) = *(void *)(a2 + v38[8]);
      *(void *)(a1 + v38[9]) = *(void *)(a2 + v38[9]);
      *(void *)(a1 + v38[10]) = *(void *)(a2 + v38[10]);
      *(void *)(a1 + v38[11]) = *(void *)(a2 + v38[11]);
      *(void *)(a1 + v38[12]) = *(void *)(a2 + v38[12]);
      uint64_t v49 = v38[13];
      uint64_t v50 = *(void **)(a2 + v49);
      *(void *)(a1 + v49) = v50;
      *(unsigned char *)(a1 + v38[14]) = *(unsigned char *)(a2 + v38[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v51 = v50;
      break;
    case 3u:
    case 4u:
      uint64_t v52 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
      unint64_t v53 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v53[5]) = *(_DWORD *)(a2 + v53[5]);
      uint64_t v54 = v53[6];
      uint64_t v55 = (_OWORD *)(a1 + v54);
      unint64_t v56 = (_OWORD *)(a2 + v54);
      long long v57 = v56[3];
      v55[2] = v56[2];
      v55[3] = v57;
      long long v58 = v56[1];
      *uint64_t v55 = *v56;
      v55[1] = v58;
      uint64_t v59 = v53[7];
      long long v60 = (void *)(a1 + v59);
      long long v61 = (uint64_t *)(a2 + v59);
      uint64_t v63 = *v61;
      uint64_t v62 = v61[1];
      *long long v60 = v63;
      v60[1] = v62;
      *(void *)(a1 + v53[8]) = *(void *)(a2 + v53[8]);
      *(void *)(a1 + v53[9]) = *(void *)(a2 + v53[9]);
      *(void *)(a1 + v53[10]) = *(void *)(a2 + v53[10]);
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 5u:
      uint64_t v64 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(a1, a2, v64);
      uint64_t v65 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v65[5]) = *(_DWORD *)(a2 + v65[5]);
      uint64_t v66 = v65[6];
      uint64_t v67 = (_OWORD *)(a1 + v66);
      uint64_t v68 = (_OWORD *)(a2 + v66);
      long long v69 = v68[3];
      v67[2] = v68[2];
      v67[3] = v69;
      long long v70 = v68[1];
      *uint64_t v67 = *v68;
      v67[1] = v70;
      uint64_t v71 = v65[7];
      long long v72 = (void *)(a1 + v71);
      long long v73 = (uint64_t *)(a2 + v71);
      uint64_t v75 = *v73;
      uint64_t v74 = v73[1];
      *long long v72 = v75;
      v72[1] = v74;
      *(void *)(a1 + v65[8]) = *(void *)(a2 + v65[8]);
      *(void *)(a1 + v65[9]) = *(void *)(a2 + v65[9]);
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      int v5 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
      uint64_t v6 = v5[6];
      uint64_t v7 = (_OWORD *)(a1 + v6);
      uint64_t v8 = (_OWORD *)(a2 + v6);
      long long v9 = v8[3];
      v7[2] = v8[2];
      v7[3] = v9;
      long long v10 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v10;
      uint64_t v11 = v5[7];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (uint64_t *)(a2 + v11);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      *uint64_t v12 = v15;
      v12[1] = v14;
      *(void *)(a1 + v5[8]) = *(void *)(a2 + v5[8]);
      *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v86 = sub_10000F214(&qword_10051A328);
  uint64_t v87 = *(int *)(v86 + 48);
  uint64_t v88 = *(void **)(a2 + v87);
  *(void *)(a1 + v87) = v88;
  uint64_t v89 = *(int *)(v86 + 64);
  uint64_t v90 = (void *)(a1 + v89);
  unint64_t v91 = (void *)(a2 + v89);
  uint64_t v92 = v91[1];
  *uint64_t v90 = *v91;
  v90[1] = v92;
  id v93 = v88;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100195F58(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100199E14(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v15 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        uint64_t v16 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v16[5]) = *(_DWORD *)(a2 + v16[5]);
        uint64_t v17 = v16[6];
        uint64_t v18 = (_OWORD *)(a1 + v17);
        uint64_t v19 = (_OWORD *)(a2 + v17);
        long long v21 = v19[2];
        long long v20 = v19[3];
        long long v22 = v19[1];
        *uint64_t v18 = *v19;
        v18[1] = v22;
        v18[2] = v21;
        v18[3] = v20;
        *(void *)(a1 + v16[7]) = *(void *)(a2 + v16[7]);
        *(void *)(a1 + v16[8]) = *(void *)(a2 + v16[8]);
        *(void *)(a1 + v16[9]) = *(void *)(a2 + v16[9]);
        *(unsigned char *)(a1 + v16[10]) = *(unsigned char *)(a2 + v16[10]);
        uint64_t v23 = v16[11];
        long long v24 = (void *)(a1 + v23);
        long long v25 = (void *)(a2 + v23);
        *long long v24 = *v25;
        v24[1] = v25[1];
        uint64_t v26 = v16[12];
        uint64_t v27 = (void *)(a1 + v26);
        unint64_t v28 = (void *)(a2 + v26);
        *uint64_t v27 = *v28;
        v27[1] = v28[1];
        uint64_t v29 = v16[13];
        __dst = (void *)(a1 + v29);
        uint64_t v30 = (const void *)(a2 + v29);
        uint64_t v31 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v32 = *(void *)(v31 - 8);
        uint64_t v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v33(v30, 1, v31))
        {
          uint64_t v34 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v30, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v30, v31);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
        }
        uint64_t v71 = v16[14];
        uint64_t v72 = a1 + v71;
        long long v73 = (uint64_t *)(a2 + v71);
        unint64_t v74 = v73[1];
        if (v74 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
        }
        else
        {
          uint64_t v75 = *v73;
          sub_100038528(*v73, v73[1]);
          *(void *)uint64_t v72 = v75;
          *(void *)(v72 + 8) = v74;
        }
        uint64_t v76 = v16[15];
        uint64_t v77 = (void *)(a1 + v76);
        uint64_t v78 = (void *)(a2 + v76);
        if (*v78)
        {
          *uint64_t v77 = *v78;
          uint64_t v79 = v78[2];
          v77[1] = v78[1];
          v77[2] = v79;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v80 = *(_OWORD *)v78;
          v77[2] = v78[2];
          *(_OWORD *)uint64_t v77 = v80;
        }
        break;
      case 2u:
        uint64_t v35 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(a1, a2, v35);
        uint64_t v36 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v36[5]) = *(_DWORD *)(a2 + v36[5]);
        uint64_t v37 = v36[6];
        char v38 = (_OWORD *)(a1 + v37);
        uint64_t v39 = (_OWORD *)(a2 + v37);
        long long v41 = v39[2];
        long long v40 = v39[3];
        long long v42 = v39[1];
        *char v38 = *v39;
        v38[1] = v42;
        void v38[2] = v41;
        v38[3] = v40;
        uint64_t v43 = v36[7];
        uint64_t v44 = (void *)(a1 + v43);
        long long v45 = (void *)(a2 + v43);
        *uint64_t v44 = *v45;
        v44[1] = v45[1];
        *(void *)(a1 + v36[8]) = *(void *)(a2 + v36[8]);
        *(void *)(a1 + v36[9]) = *(void *)(a2 + v36[9]);
        *(void *)(a1 + v36[10]) = *(void *)(a2 + v36[10]);
        *(void *)(a1 + v36[11]) = *(void *)(a2 + v36[11]);
        *(void *)(a1 + v36[12]) = *(void *)(a2 + v36[12]);
        uint64_t v46 = v36[13];
        uint64_t v47 = *(void **)(a2 + v46);
        *(void *)(a1 + v46) = v47;
        *(unsigned char *)(a1 + v36[14]) = *(unsigned char *)(a2 + v36[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v48 = v47;
        break;
      case 3u:
      case 4u:
        uint64_t v49 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(a1, a2, v49);
        uint64_t v50 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v50[5]) = *(_DWORD *)(a2 + v50[5]);
        uint64_t v51 = v50[6];
        uint64_t v52 = (_OWORD *)(a1 + v51);
        unint64_t v53 = (_OWORD *)(a2 + v51);
        long long v55 = v53[2];
        long long v54 = v53[3];
        long long v56 = v53[1];
        *uint64_t v52 = *v53;
        v52[1] = v56;
        v52[2] = v55;
        v52[3] = v54;
        uint64_t v57 = v50[7];
        long long v58 = (void *)(a1 + v57);
        uint64_t v59 = (void *)(a2 + v57);
        *long long v58 = *v59;
        v58[1] = v59[1];
        *(void *)(a1 + v50[8]) = *(void *)(a2 + v50[8]);
        *(void *)(a1 + v50[9]) = *(void *)(a2 + v50[9]);
        *(void *)(a1 + v50[10]) = *(void *)(a2 + v50[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v60 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(a1, a2, v60);
        long long v61 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v61[5]) = *(_DWORD *)(a2 + v61[5]);
        uint64_t v62 = v61[6];
        uint64_t v63 = (_OWORD *)(a1 + v62);
        uint64_t v64 = (_OWORD *)(a2 + v62);
        long long v66 = v64[2];
        long long v65 = v64[3];
        long long v67 = v64[1];
        *uint64_t v63 = *v64;
        v63[1] = v67;
        v63[2] = v66;
        v63[3] = v65;
        uint64_t v68 = v61[7];
        long long v69 = (void *)(a1 + v68);
        long long v70 = (void *)(a2 + v68);
        *long long v69 = *v70;
        v69[1] = v70[1];
        *(void *)(a1 + v61[8]) = *(void *)(a2 + v61[8]);
        *(void *)(a1 + v61[9]) = *(void *)(a2 + v61[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        int v5 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
        uint64_t v6 = v5[6];
        uint64_t v7 = (_OWORD *)(a1 + v6);
        uint64_t v8 = (_OWORD *)(a2 + v6);
        long long v10 = v8[2];
        long long v9 = v8[3];
        long long v11 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v11;
        v7[2] = v10;
        v7[3] = v9;
        uint64_t v12 = v5[7];
        uint64_t v13 = (void *)(a1 + v12);
        uint64_t v14 = (void *)(a2 + v12);
        void *v13 = *v14;
        v13[1] = v14[1];
        *(void *)(a1 + v5[8]) = *(void *)(a2 + v5[8]);
        *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v81 = sub_10000F214(&qword_10051A328);
  uint64_t v82 = *(int *)(v81 + 48);
  uint64_t v83 = *(void **)(a2 + v82);
  uint64_t v84 = *(void **)(a1 + v82);
  *(void *)(a1 + v82) = v83;
  id v85 = v83;

  uint64_t v86 = *(int *)(v81 + 64);
  uint64_t v87 = (void *)(a1 + v86);
  uint64_t v88 = (void *)(a2 + v86);
  *uint64_t v87 = *v88;
  v87[1] = v88[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001966FC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      uint64_t v12 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v12[5]) = *(_DWORD *)(a2 + v12[5]);
      uint64_t v13 = v12[6];
      uint64_t v14 = (_OWORD *)(a1 + v13);
      uint64_t v15 = (_OWORD *)(a2 + v13);
      long long v16 = v15[3];
      void v14[2] = v15[2];
      v14[3] = v16;
      long long v17 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v17;
      *(void *)(a1 + v12[7]) = *(void *)(a2 + v12[7]);
      *(void *)(a1 + v12[8]) = *(void *)(a2 + v12[8]);
      *(void *)(a1 + v12[9]) = *(void *)(a2 + v12[9]);
      *(unsigned char *)(a1 + v12[10]) = *(unsigned char *)(a2 + v12[10]);
      *(_OWORD *)(a1 + v12[11]) = *(_OWORD *)(a2 + v12[11]);
      *(_OWORD *)(a1 + v12[12]) = *(_OWORD *)(a2 + v12[12]);
      uint64_t v18 = v12[13];
      uint64_t v19 = (void *)(a1 + v18);
      long long v20 = (const void *)(a2 + v18);
      uint64_t v21 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = sub_10000F214(&qword_100524BD0);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      *(_OWORD *)(a1 + v12[14]) = *(_OWORD *)(a2 + v12[14]);
      uint64_t v45 = v12[15];
      uint64_t v46 = a1 + v45;
      uint64_t v47 = a2 + v45;
      *(void *)(v46 + 16) = *(void *)(v47 + 16);
      *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
      break;
    case 2u:
      uint64_t v24 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
      long long v25 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v25[5]) = *(_DWORD *)(a2 + v25[5]);
      uint64_t v26 = v25[6];
      uint64_t v27 = (_OWORD *)(a1 + v26);
      unint64_t v28 = (_OWORD *)(a2 + v26);
      long long v29 = v28[3];
      void v27[2] = v28[2];
      v27[3] = v29;
      long long v30 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v30;
      *(_OWORD *)(a1 + v25[7]) = *(_OWORD *)(a2 + v25[7]);
      *(void *)(a1 + v25[8]) = *(void *)(a2 + v25[8]);
      *(void *)(a1 + v25[9]) = *(void *)(a2 + v25[9]);
      *(void *)(a1 + v25[10]) = *(void *)(a2 + v25[10]);
      *(void *)(a1 + v25[11]) = *(void *)(a2 + v25[11]);
      *(void *)(a1 + v25[12]) = *(void *)(a2 + v25[12]);
      *(void *)(a1 + v25[13]) = *(void *)(a2 + v25[13]);
      *(unsigned char *)(a1 + v25[14]) = *(unsigned char *)(a2 + v25[14]);
      break;
    case 3u:
    case 4u:
      uint64_t v31 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
      uint64_t v32 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v32[5]) = *(_DWORD *)(a2 + v32[5]);
      uint64_t v33 = v32[6];
      uint64_t v34 = (_OWORD *)(a1 + v33);
      uint64_t v35 = (_OWORD *)(a2 + v33);
      long long v36 = v35[3];
      v34[2] = v35[2];
      v34[3] = v36;
      long long v37 = v35[1];
      *uint64_t v34 = *v35;
      v34[1] = v37;
      *(_OWORD *)(a1 + v32[7]) = *(_OWORD *)(a2 + v32[7]);
      *(void *)(a1 + v32[8]) = *(void *)(a2 + v32[8]);
      *(void *)(a1 + v32[9]) = *(void *)(a2 + v32[9]);
      *(void *)(a1 + v32[10]) = *(void *)(a2 + v32[10]);
      break;
    case 5u:
      uint64_t v38 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32))(a1, a2, v38);
      uint64_t v39 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v39[5]) = *(_DWORD *)(a2 + v39[5]);
      uint64_t v40 = v39[6];
      long long v41 = (_OWORD *)(a1 + v40);
      long long v42 = (_OWORD *)(a2 + v40);
      long long v43 = v42[3];
      v41[2] = v42[2];
      v41[3] = v43;
      long long v44 = v42[1];
      *long long v41 = *v42;
      v41[1] = v44;
      *(_OWORD *)(a1 + v39[7]) = *(_OWORD *)(a2 + v39[7]);
      *(void *)(a1 + v39[8]) = *(void *)(a2 + v39[8]);
      *(void *)(a1 + v39[9]) = *(void *)(a2 + v39[9]);
      break;
    default:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      int v5 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
      uint64_t v6 = v5[6];
      uint64_t v7 = (_OWORD *)(a1 + v6);
      uint64_t v8 = (_OWORD *)(a2 + v6);
      long long v9 = v8[3];
      v7[2] = v8[2];
      v7[3] = v9;
      long long v10 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v10;
      *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
      *(void *)(a1 + v5[8]) = *(void *)(a2 + v5[8]);
      *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v48 = sub_10000F214(&qword_10051A328);
  *(void *)(a1 + *(int *)(v48 + 48)) = *(void *)(a2 + *(int *)(v48 + 48));
  *(_OWORD *)(a1 + *(int *)(v48 + 64)) = *(_OWORD *)(a2 + *(int *)(v48 + 64));
  return a1;
}

uint64_t sub_100196CF0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100199E14(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
        uint64_t v12 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v12[5]) = *(_DWORD *)(a2 + v12[5]);
        uint64_t v13 = v12[6];
        uint64_t v14 = (_OWORD *)(a1 + v13);
        uint64_t v15 = (_OWORD *)(a2 + v13);
        long long v16 = v15[3];
        void v14[2] = v15[2];
        v14[3] = v16;
        long long v17 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v17;
        *(void *)(a1 + v12[7]) = *(void *)(a2 + v12[7]);
        *(void *)(a1 + v12[8]) = *(void *)(a2 + v12[8]);
        *(void *)(a1 + v12[9]) = *(void *)(a2 + v12[9]);
        *(unsigned char *)(a1 + v12[10]) = *(unsigned char *)(a2 + v12[10]);
        *(_OWORD *)(a1 + v12[11]) = *(_OWORD *)(a2 + v12[11]);
        *(_OWORD *)(a1 + v12[12]) = *(_OWORD *)(a2 + v12[12]);
        uint64_t v18 = v12[13];
        uint64_t v19 = (void *)(a1 + v18);
        long long v20 = (const void *)(a2 + v18);
        uint64_t v21 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v22 = *(void *)(v21 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          uint64_t v23 = sub_10000F214(&qword_100524BD0);
          memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        *(_OWORD *)(a1 + v12[14]) = *(_OWORD *)(a2 + v12[14]);
        uint64_t v45 = v12[15];
        uint64_t v46 = a1 + v45;
        uint64_t v47 = a2 + v45;
        *(void *)(v46 + 16) = *(void *)(v47 + 16);
        *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
        break;
      case 2u:
        uint64_t v24 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
        long long v25 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v25[5]) = *(_DWORD *)(a2 + v25[5]);
        uint64_t v26 = v25[6];
        uint64_t v27 = (_OWORD *)(a1 + v26);
        unint64_t v28 = (_OWORD *)(a2 + v26);
        long long v29 = v28[3];
        void v27[2] = v28[2];
        v27[3] = v29;
        long long v30 = v28[1];
        *uint64_t v27 = *v28;
        v27[1] = v30;
        *(_OWORD *)(a1 + v25[7]) = *(_OWORD *)(a2 + v25[7]);
        *(void *)(a1 + v25[8]) = *(void *)(a2 + v25[8]);
        *(void *)(a1 + v25[9]) = *(void *)(a2 + v25[9]);
        *(void *)(a1 + v25[10]) = *(void *)(a2 + v25[10]);
        *(void *)(a1 + v25[11]) = *(void *)(a2 + v25[11]);
        *(void *)(a1 + v25[12]) = *(void *)(a2 + v25[12]);
        *(void *)(a1 + v25[13]) = *(void *)(a2 + v25[13]);
        *(unsigned char *)(a1 + v25[14]) = *(unsigned char *)(a2 + v25[14]);
        break;
      case 3u:
      case 4u:
        uint64_t v31 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
        uint64_t v32 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v32[5]) = *(_DWORD *)(a2 + v32[5]);
        uint64_t v33 = v32[6];
        uint64_t v34 = (_OWORD *)(a1 + v33);
        uint64_t v35 = (_OWORD *)(a2 + v33);
        long long v36 = v35[3];
        v34[2] = v35[2];
        v34[3] = v36;
        long long v37 = v35[1];
        *uint64_t v34 = *v35;
        v34[1] = v37;
        *(_OWORD *)(a1 + v32[7]) = *(_OWORD *)(a2 + v32[7]);
        *(void *)(a1 + v32[8]) = *(void *)(a2 + v32[8]);
        *(void *)(a1 + v32[9]) = *(void *)(a2 + v32[9]);
        *(void *)(a1 + v32[10]) = *(void *)(a2 + v32[10]);
        break;
      case 5u:
        uint64_t v38 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32))(a1, a2, v38);
        uint64_t v39 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v39[5]) = *(_DWORD *)(a2 + v39[5]);
        uint64_t v40 = v39[6];
        long long v41 = (_OWORD *)(a1 + v40);
        long long v42 = (_OWORD *)(a2 + v40);
        long long v43 = v42[3];
        v41[2] = v42[2];
        v41[3] = v43;
        long long v44 = v42[1];
        *long long v41 = *v42;
        v41[1] = v44;
        *(_OWORD *)(a1 + v39[7]) = *(_OWORD *)(a2 + v39[7]);
        *(void *)(a1 + v39[8]) = *(void *)(a2 + v39[8]);
        *(void *)(a1 + v39[9]) = *(void *)(a2 + v39[9]);
        break;
      default:
        uint64_t v4 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
        int v5 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
        uint64_t v6 = v5[6];
        uint64_t v7 = (_OWORD *)(a1 + v6);
        uint64_t v8 = (_OWORD *)(a2 + v6);
        long long v9 = v8[3];
        v7[2] = v8[2];
        v7[3] = v9;
        long long v10 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v10;
        *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
        *(void *)(a1 + v5[8]) = *(void *)(a2 + v5[8]);
        *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v48 = sub_10000F214(&qword_10051A328);
  uint64_t v49 = *(int *)(v48 + 48);
  uint64_t v50 = *(void **)(a1 + v49);
  *(void *)(a1 + v49) = *(void *)(a2 + v49);

  uint64_t v51 = *(int *)(v48 + 64);
  uint64_t v52 = (void *)(a1 + v51);
  unint64_t v53 = (uint64_t *)(a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100197324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A328);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100197394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A328);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, a2, a3, v6);
}

uint64_t sub_100197414(uint64_t a1)
{
  uint64_t result = type metadata accessor for CVDetection();
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = v4;
  }
  return result;
}

uint64_t sub_1001974DC()
{
  return sub_100199D2C(&qword_100523A98, (void (*)(uint64_t))type metadata accessor for BarCodeLookupState);
}

uint64_t *sub_100197524(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *(void *)a2;
    *a1 = *(void *)a2;
    int v4 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    sub_100197C1C(*(void *)a2, v8, v9, (uint64_t (*)(void))sub_10000F724);
    uint64_t *v4 = v7;
    v4[1] = v8;
    *((unsigned char *)v4 + 16) = v9;
    uint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 32);
    char v12 = *(unsigned char *)(a2 + 40);
    sub_100197C1C(v10, v11, v12, (uint64_t (*)(void))sub_10000F724);
    v4[3] = v10;
    v4[4] = v11;
    *((unsigned char *)v4 + 40) = v12;
    uint64_t v13 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    char v15 = *(unsigned char *)(a2 + 64);
    sub_10000FCA0();
    v4[6] = v13;
    v4[7] = v14;
    *((unsigned char *)v4 + 64) = v15;
    uint64_t v16 = *(int *)(a3 + 28);
    long long v17 = (char *)v4 + v16;
    uint64_t v18 = a2 + v16;
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v34 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v17, v18, v34);
        uint64_t v35 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v17[v35[5]] = *(_DWORD *)(v18 + v35[5]);
        uint64_t v36 = v35[6];
        long long v37 = &v17[v36];
        uint64_t v38 = (_OWORD *)(v18 + v36);
        long long v39 = v38[3];
        *((_OWORD *)v37 + 2) = v38[2];
        *((_OWORD *)v37 + 3) = v39;
        long long v40 = v38[1];
        *(_OWORD *)long long v37 = *v38;
        *((_OWORD *)v37 + 1) = v40;
        *(void *)&v17[v35[7]] = *(void *)(v18 + v35[7]);
        *(void *)&v17[v35[8]] = *(void *)(v18 + v35[8]);
        *(void *)&v17[v35[9]] = *(void *)(v18 + v35[9]);
        v17[v35[10]] = *(unsigned char *)(v18 + v35[10]);
        uint64_t v41 = v35[11];
        long long v42 = &v17[v41];
        long long v43 = (void *)(v18 + v41);
        uint64_t v44 = v43[1];
        *(void *)long long v42 = *v43;
        *((void *)v42 + 1) = v44;
        uint64_t v45 = v35[12];
        uint64_t v46 = &v17[v45];
        uint64_t v47 = (void *)(v18 + v45);
        uint64_t v48 = v47[1];
        *(void *)uint64_t v46 = *v47;
        *((void *)v46 + 1) = v48;
        uint64_t v49 = v35[13];
        __dst = &v17[v49];
        long long v102 = (const void *)(v18 + v49);
        uint64_t v50 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v100 = *(void *)(v50 - 8);
        uint64_t v101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v100 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v101(v102, 1, v50))
        {
          uint64_t v51 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v102, *(void *)(*(void *)(v51 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v100 + 16))(__dst, v102, v50);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(__dst, 0, 1, v50);
        }
        uint64_t v78 = v35[14];
        uint64_t v79 = &v17[v78];
        long long v80 = (uint64_t *)(v18 + v78);
        unint64_t v81 = v80[1];
        if (v81 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
        }
        else
        {
          uint64_t v82 = *v80;
          sub_100038528(*v80, v80[1]);
          *(void *)uint64_t v79 = v82;
          *((void *)v79 + 1) = v81;
        }
        uint64_t v83 = v35[15];
        uint64_t v84 = &v17[v83];
        id v85 = (void *)(v18 + v83);
        if (*v85)
        {
          uint64_t v86 = v85[1];
          uint64_t v87 = v85[2];
          *(void *)uint64_t v84 = *v85;
          *((void *)v84 + 1) = v86;
          *((void *)v84 + 2) = v87;
          goto LABEL_17;
        }
        *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
        *((void *)v84 + 2) = v85[2];
        break;
      case 2u:
        uint64_t v52 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v17, v18, v52);
        unint64_t v53 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v17[v53[5]] = *(_DWORD *)(v18 + v53[5]);
        uint64_t v54 = v53[6];
        uint64_t v55 = &v17[v54];
        long long v56 = (_OWORD *)(v18 + v54);
        long long v57 = v56[3];
        *((_OWORD *)v55 + 2) = v56[2];
        *((_OWORD *)v55 + 3) = v57;
        long long v58 = v56[1];
        *(_OWORD *)uint64_t v55 = *v56;
        *((_OWORD *)v55 + 1) = v58;
        uint64_t v59 = v53[7];
        uint64_t v60 = &v17[v59];
        long long v61 = (uint64_t *)(v18 + v59);
        uint64_t v63 = *v61;
        uint64_t v62 = v61[1];
        *(void *)uint64_t v60 = v63;
        *((void *)v60 + 1) = v62;
        *(void *)&v17[v53[8]] = *(void *)(v18 + v53[8]);
        *(void *)&v17[v53[9]] = *(void *)(v18 + v53[9]);
        *(void *)&v17[v53[10]] = *(void *)(v18 + v53[10]);
        *(void *)&v17[v53[11]] = *(void *)(v18 + v53[11]);
        *(void *)&v17[v53[12]] = *(void *)(v18 + v53[12]);
        uint64_t v64 = v53[13];
        long long v65 = *(void **)(v18 + v64);
        *(void *)&v17[v64] = v65;
        v17[v53[14]] = *(unsigned char *)(v18 + v53[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v66 = v65;
        break;
      case 3u:
      case 4u:
        uint64_t v19 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
        long long v20 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v17[v20[5]] = *(_DWORD *)(v18 + v20[5]);
        uint64_t v21 = v20[6];
        uint64_t v22 = &v17[v21];
        uint64_t v23 = (_OWORD *)(v18 + v21);
        long long v24 = v23[3];
        *((_OWORD *)v22 + 2) = v23[2];
        *((_OWORD *)v22 + 3) = v24;
        long long v25 = v23[1];
        *(_OWORD *)uint64_t v22 = *v23;
        *((_OWORD *)v22 + 1) = v25;
        uint64_t v26 = v20[7];
        uint64_t v27 = &v17[v26];
        unint64_t v28 = (uint64_t *)(v18 + v26);
        uint64_t v30 = *v28;
        uint64_t v29 = v28[1];
        *(void *)uint64_t v27 = v30;
        *((void *)v27 + 1) = v29;
        *(void *)&v17[v20[8]] = *(void *)(v18 + v20[8]);
        *(void *)&v17[v20[9]] = *(void *)(v18 + v20[9]);
        *(void *)&v17[v20[10]] = *(void *)(v18 + v20[10]);
LABEL_17:
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v67 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v17, v18, v67);
        uint64_t v33 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        goto LABEL_10;
      default:
        uint64_t v32 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v17, v18, v32);
        uint64_t v33 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_10:
        *(_DWORD *)&v17[v33[5]] = *(_DWORD *)(v18 + v33[5]);
        uint64_t v68 = v33[6];
        long long v69 = &v17[v68];
        long long v70 = (_OWORD *)(v18 + v68);
        long long v71 = v70[3];
        *((_OWORD *)v69 + 2) = v70[2];
        *((_OWORD *)v69 + 3) = v71;
        long long v72 = v70[1];
        *(_OWORD *)long long v69 = *v70;
        *((_OWORD *)v69 + 1) = v72;
        uint64_t v73 = v33[7];
        unint64_t v74 = &v17[v73];
        uint64_t v75 = (uint64_t *)(v18 + v73);
        uint64_t v77 = *v75;
        uint64_t v76 = v75[1];
        *(void *)unint64_t v74 = v77;
        *((void *)v74 + 1) = v76;
        *(void *)&v17[v33[8]] = *(void *)(v18 + v33[8]);
        *(void *)&v17[v33[9]] = *(void *)(v18 + v33[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v88 = sub_10000F214(&qword_10051A328);
    uint64_t v89 = *(int *)(v88 + 48);
    uint64_t v90 = *(void **)(v18 + v89);
    *(void *)&v17[v89] = v90;
    uint64_t v91 = *(int *)(v88 + 64);
    uint64_t v92 = &v17[v91];
    id v93 = (void *)(v18 + v91);
    uint64_t v94 = v93[1];
    *(void *)uint64_t v92 = *v93;
    *((void *)v92 + 1) = v94;
    uint64_t v95 = *(int *)(a3 + 32);
    id v96 = (char *)v4 + v95;
    id v97 = (char *)(a2 + v95);
    *id v96 = *v97;
    *((void *)v96 + 1) = *((void *)v97 + 1);
    id v98 = v90;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100197C1C(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if (a3) {
    return a4();
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_100197C2C(uint64_t a1, uint64_t a2)
{
  sub_100198010(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_100198010(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40), (uint64_t (*)(void))sub_10000F478);
  sub_10000FD10();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
      uint64_t v8 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4 + v8[13];
      uint64_t v10 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
      char v12 = (uint64_t *)(v4 + v8[14]);
      unint64_t v13 = v12[1];
      if (v13 >> 60 != 15) {
        sub_100038B34(*v12, v13);
      }
      if (*(void *)(v4 + v8[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v4, v14);
      uint64_t v15 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v4, v16);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_100198010(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if (a3) {
    return a4();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_100198020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_100197C1C(*(void *)a2, v7, v8, (uint64_t (*)(void))sub_10000F724);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 40);
  sub_100197C1C(v9, v10, v11, (uint64_t (*)(void))sub_10000F724);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  char v14 = *(unsigned char *)(a2 + 64);
  sub_10000FCA0();
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  *(unsigned char *)(a1 + 64) = v14;
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v102 = a3;
      uint64_t v32 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v16, v17, v32);
      uint64_t v33 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(v16 + v33[5]) = *(_DWORD *)(v17 + v33[5]);
      uint64_t v34 = v33[6];
      uint64_t v35 = (_OWORD *)(v16 + v34);
      uint64_t v36 = (_OWORD *)(v17 + v34);
      long long v37 = v36[3];
      v35[2] = v36[2];
      v35[3] = v37;
      long long v38 = v36[1];
      *uint64_t v35 = *v36;
      v35[1] = v38;
      *(void *)(v16 + v33[7]) = *(void *)(v17 + v33[7]);
      *(void *)(v16 + v33[8]) = *(void *)(v17 + v33[8]);
      *(void *)(v16 + v33[9]) = *(void *)(v17 + v33[9]);
      *(unsigned char *)(v16 + v33[10]) = *(unsigned char *)(v17 + v33[10]);
      uint64_t v39 = v33[11];
      long long v40 = (void *)(v16 + v39);
      uint64_t v41 = (void *)(v17 + v39);
      uint64_t v42 = v41[1];
      void *v40 = *v41;
      v40[1] = v42;
      uint64_t v43 = v33[12];
      uint64_t v44 = (void *)(v16 + v43);
      uint64_t v45 = (void *)(v17 + v43);
      uint64_t v46 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v46;
      uint64_t v47 = v33[13];
      __dst = (void *)(v16 + v47);
      uint64_t v100 = (const void *)(v17 + v47);
      uint64_t v48 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v49 = *(void *)(v48 - 8);
      unint64_t v99 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v49 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v99(v100, 1, v48))
      {
        uint64_t v50 = sub_10000F214(&qword_100524BD0);
        memcpy(__dst, v100, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v49 + 16))(__dst, v100, v48);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(__dst, 0, 1, v48);
      }
      uint64_t v77 = v33[14];
      uint64_t v78 = v16 + v77;
      uint64_t v79 = (uint64_t *)(v17 + v77);
      unint64_t v80 = v79[1];
      if (v80 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
      }
      else
      {
        uint64_t v81 = *v79;
        sub_100038528(*v79, v79[1]);
        *(void *)uint64_t v78 = v81;
        *(void *)(v78 + 8) = v80;
      }
      a3 = v102;
      uint64_t v82 = v33[15];
      uint64_t v83 = (void *)(v16 + v82);
      uint64_t v84 = (void *)(v17 + v82);
      if (*v84)
      {
        uint64_t v85 = v84[1];
        uint64_t v86 = v84[2];
        *uint64_t v83 = *v84;
        v83[1] = v85;
        v83[2] = v86;
        goto LABEL_15;
      }
      *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
      v83[2] = v84[2];
      break;
    case 2u:
      uint64_t v51 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(v16, v17, v51);
      uint64_t v52 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(v16 + v52[5]) = *(_DWORD *)(v17 + v52[5]);
      uint64_t v53 = v52[6];
      uint64_t v54 = (_OWORD *)(v16 + v53);
      uint64_t v55 = (_OWORD *)(v17 + v53);
      long long v56 = v55[3];
      v54[2] = v55[2];
      v54[3] = v56;
      long long v57 = v55[1];
      *uint64_t v54 = *v55;
      v54[1] = v57;
      uint64_t v58 = v52[7];
      uint64_t v59 = (void *)(v16 + v58);
      uint64_t v60 = (uint64_t *)(v17 + v58);
      uint64_t v62 = *v60;
      uint64_t v61 = v60[1];
      *uint64_t v59 = v62;
      v59[1] = v61;
      *(void *)(v16 + v52[8]) = *(void *)(v17 + v52[8]);
      *(void *)(v16 + v52[9]) = *(void *)(v17 + v52[9]);
      *(void *)(v16 + v52[10]) = *(void *)(v17 + v52[10]);
      *(void *)(v16 + v52[11]) = *(void *)(v17 + v52[11]);
      *(void *)(v16 + v52[12]) = *(void *)(v17 + v52[12]);
      uint64_t v63 = v52[13];
      uint64_t v64 = *(void **)(v17 + v63);
      *(void *)(v16 + v63) = v64;
      *(unsigned char *)(v16 + v52[14]) = *(unsigned char *)(v17 + v52[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v65 = v64;
      break;
    case 3u:
    case 4u:
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      uint64_t v19 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(v16 + v19[5]) = *(_DWORD *)(v17 + v19[5]);
      uint64_t v20 = v19[6];
      uint64_t v21 = (_OWORD *)(v16 + v20);
      uint64_t v22 = (_OWORD *)(v17 + v20);
      long long v23 = v22[3];
      v21[2] = v22[2];
      v21[3] = v23;
      long long v24 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v24;
      uint64_t v25 = v19[7];
      uint64_t v26 = (void *)(v16 + v25);
      uint64_t v27 = (uint64_t *)(v17 + v25);
      uint64_t v29 = *v27;
      uint64_t v28 = v27[1];
      *uint64_t v26 = v29;
      v26[1] = v28;
      *(void *)(v16 + v19[8]) = *(void *)(v17 + v19[8]);
      *(void *)(v16 + v19[9]) = *(void *)(v17 + v19[9]);
      *(void *)(v16 + v19[10]) = *(void *)(v17 + v19[10]);
LABEL_15:
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 5u:
      uint64_t v66 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(v16, v17, v66);
      uint64_t v31 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      goto LABEL_8;
    default:
      uint64_t v30 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v16, v17, v30);
      uint64_t v31 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_8:
      *(_DWORD *)(v16 + v31[5]) = *(_DWORD *)(v17 + v31[5]);
      uint64_t v67 = v31[6];
      uint64_t v68 = (_OWORD *)(v16 + v67);
      long long v69 = (_OWORD *)(v17 + v67);
      long long v70 = v69[3];
      v68[2] = v69[2];
      v68[3] = v70;
      long long v71 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v71;
      uint64_t v72 = v31[7];
      uint64_t v73 = (void *)(v16 + v72);
      unint64_t v74 = (uint64_t *)(v17 + v72);
      uint64_t v76 = *v74;
      uint64_t v75 = v74[1];
      *uint64_t v73 = v76;
      v73[1] = v75;
      *(void *)(v16 + v31[8]) = *(void *)(v17 + v31[8]);
      *(void *)(v16 + v31[9]) = *(void *)(v17 + v31[9]);
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v87 = sub_10000F214(&qword_10051A328);
  uint64_t v88 = *(int *)(v87 + 48);
  uint64_t v89 = *(void **)(v17 + v88);
  *(void *)(v16 + v88) = v89;
  uint64_t v90 = *(int *)(v87 + 64);
  uint64_t v91 = (void *)(v16 + v90);
  uint64_t v92 = (void *)(v17 + v90);
  uint64_t v93 = v92[1];
  *uint64_t v91 = *v92;
  v91[1] = v93;
  uint64_t v94 = *(int *)(a3 + 32);
  uint64_t v95 = a1 + v94;
  uint64_t v96 = a2 + v94;
  *(unsigned char *)uint64_t v95 = *(unsigned char *)v96;
  *(void *)(v95 + 8) = *(void *)(v96 + 8);
  id v97 = v89;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1001986D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_100197C1C(*(void *)a2, v7, v8, (uint64_t (*)(void))sub_10000F724);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_100198010(v9, v10, v11, (uint64_t (*)(void))sub_10000F478);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  char v14 = *(unsigned char *)(a2 + 40);
  sub_100197C1C(v12, v13, v14, (uint64_t (*)(void))sub_10000F724);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  char v17 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 40) = v14;
  sub_100198010(v15, v16, v17, (uint64_t (*)(void))sub_10000F478);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  char v20 = *(unsigned char *)(a2 + 64);
  sub_10000FCA0();
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v19;
  *(unsigned char *)(a1 + 64) = v20;
  sub_10000FD10();
  uint64_t v21 = *(int *)(a3 + 28);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  if (a1 != a2)
  {
    sub_100199E14(a1 + v21, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v101 = a3;
        uint64_t v37 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v22, v23, v37);
        long long v38 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v22 + v38[5]) = *(_DWORD *)(v23 + v38[5]);
        uint64_t v39 = v38[6];
        long long v40 = (_OWORD *)(v22 + v39);
        uint64_t v41 = (_OWORD *)(v23 + v39);
        long long v43 = v41[2];
        long long v42 = v41[3];
        long long v44 = v41[1];
        _OWORD *v40 = *v41;
        v40[1] = v44;
        void v40[2] = v43;
        v40[3] = v42;
        *(void *)(v22 + v38[7]) = *(void *)(v23 + v38[7]);
        *(void *)(v22 + v38[8]) = *(void *)(v23 + v38[8]);
        *(void *)(v22 + v38[9]) = *(void *)(v23 + v38[9]);
        *(unsigned char *)(v22 + v38[10]) = *(unsigned char *)(v23 + v38[10]);
        uint64_t v45 = v38[11];
        uint64_t v46 = (void *)(v22 + v45);
        uint64_t v47 = (void *)(v23 + v45);
        *uint64_t v46 = *v47;
        v46[1] = v47[1];
        uint64_t v48 = v38[12];
        uint64_t v49 = (void *)(v22 + v48);
        uint64_t v50 = (void *)(v23 + v48);
        *uint64_t v49 = *v50;
        v49[1] = v50[1];
        uint64_t v51 = v38[13];
        __dst = (void *)(v22 + v51);
        uint64_t v103 = (const void *)(v23 + v51);
        uint64_t v52 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v53 = *(void *)(v52 - 8);
        uint64_t v102 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v53 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v102(v103, 1, v52))
        {
          uint64_t v54 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v103, *(void *)(*(void *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v53 + 16))(__dst, v103, v52);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v52);
        }
        uint64_t v79 = v38[14];
        uint64_t v80 = v22 + v79;
        uint64_t v81 = (uint64_t *)(v23 + v79);
        unint64_t v82 = v81[1];
        if (v82 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
        }
        else
        {
          uint64_t v83 = *v81;
          sub_100038528(*v81, v81[1]);
          *(void *)uint64_t v80 = v83;
          *(void *)(v80 + 8) = v82;
        }
        a3 = v101;
        uint64_t v84 = v38[15];
        uint64_t v85 = (void *)(v22 + v84);
        uint64_t v86 = (void *)(v23 + v84);
        if (*v86)
        {
          void *v85 = *v86;
          uint64_t v87 = v86[2];
          v85[1] = v86[1];
          v85[2] = v87;
          goto LABEL_16;
        }
        long long v100 = *(_OWORD *)v86;
        v85[2] = v86[2];
        *(_OWORD *)uint64_t v85 = v100;
        break;
      case 2u:
        uint64_t v55 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(v22, v23, v55);
        long long v56 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v22 + v56[5]) = *(_DWORD *)(v23 + v56[5]);
        uint64_t v57 = v56[6];
        uint64_t v58 = (_OWORD *)(v22 + v57);
        uint64_t v59 = (_OWORD *)(v23 + v57);
        long long v61 = v59[2];
        long long v60 = v59[3];
        long long v62 = v59[1];
        *uint64_t v58 = *v59;
        v58[1] = v62;
        v58[2] = v61;
        v58[3] = v60;
        uint64_t v63 = v56[7];
        uint64_t v64 = (void *)(v22 + v63);
        id v65 = (void *)(v23 + v63);
        *uint64_t v64 = *v65;
        v64[1] = v65[1];
        *(void *)(v22 + v56[8]) = *(void *)(v23 + v56[8]);
        *(void *)(v22 + v56[9]) = *(void *)(v23 + v56[9]);
        *(void *)(v22 + v56[10]) = *(void *)(v23 + v56[10]);
        *(void *)(v22 + v56[11]) = *(void *)(v23 + v56[11]);
        *(void *)(v22 + v56[12]) = *(void *)(v23 + v56[12]);
        uint64_t v66 = v56[13];
        uint64_t v67 = *(void **)(v23 + v66);
        *(void *)(v22 + v66) = v67;
        *(unsigned char *)(v22 + v56[14]) = *(unsigned char *)(v23 + v56[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v68 = v67;
        break;
      case 3u:
      case 4u:
        uint64_t v24 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
        uint64_t v25 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v22 + v25[5]) = *(_DWORD *)(v23 + v25[5]);
        uint64_t v26 = v25[6];
        uint64_t v27 = (_OWORD *)(v22 + v26);
        uint64_t v28 = (_OWORD *)(v23 + v26);
        long long v30 = v28[2];
        long long v29 = v28[3];
        long long v31 = v28[1];
        *uint64_t v27 = *v28;
        v27[1] = v31;
        void v27[2] = v30;
        v27[3] = v29;
        uint64_t v32 = v25[7];
        uint64_t v33 = (void *)(v22 + v32);
        uint64_t v34 = (void *)(v23 + v32);
        *uint64_t v33 = *v34;
        v33[1] = v34[1];
        *(void *)(v22 + v25[8]) = *(void *)(v23 + v25[8]);
        *(void *)(v22 + v25[9]) = *(void *)(v23 + v25[9]);
        *(void *)(v22 + v25[10]) = *(void *)(v23 + v25[10]);
LABEL_16:
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v69 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16))(v22, v23, v69);
        uint64_t v36 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        goto LABEL_9;
      default:
        uint64_t v35 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v22, v23, v35);
        uint64_t v36 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_9:
        *(_DWORD *)(v22 + v36[5]) = *(_DWORD *)(v23 + v36[5]);
        uint64_t v70 = v36[6];
        long long v71 = (_OWORD *)(v22 + v70);
        uint64_t v72 = (_OWORD *)(v23 + v70);
        long long v74 = v72[2];
        long long v73 = v72[3];
        long long v75 = v72[1];
        *long long v71 = *v72;
        v71[1] = v75;
        v71[2] = v74;
        v71[3] = v73;
        uint64_t v76 = v36[7];
        uint64_t v77 = (void *)(v22 + v76);
        uint64_t v78 = (void *)(v23 + v76);
        *uint64_t v77 = *v78;
        v77[1] = v78[1];
        *(void *)(v22 + v36[8]) = *(void *)(v23 + v36[8]);
        *(void *)(v22 + v36[9]) = *(void *)(v23 + v36[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v88 = sub_10000F214(&qword_10051A328);
  uint64_t v89 = *(int *)(v88 + 48);
  uint64_t v90 = *(void **)(v23 + v89);
  uint64_t v91 = *(void **)(v22 + v89);
  *(void *)(v22 + v89) = v90;
  id v92 = v90;

  uint64_t v93 = *(int *)(v88 + 64);
  uint64_t v94 = (void *)(v22 + v93);
  uint64_t v95 = (void *)(v23 + v93);
  *uint64_t v94 = *v95;
  v94[1] = v95[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v96 = *(int *)(a3 + 32);
  uint64_t v97 = a1 + v96;
  uint64_t v98 = a2 + v96;
  *(unsigned char *)uint64_t v97 = *(unsigned char *)v98;
  *(void *)(v97 + 8) = *(void *)(v98 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100198E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 48) = v6;
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v50 = v3;
      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v8, v9, v20);
      uint64_t v21 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(v8 + v21[5]) = *(_DWORD *)(v9 + v21[5]);
      uint64_t v22 = v21[6];
      uint64_t v23 = (_OWORD *)(v8 + v22);
      uint64_t v24 = (_OWORD *)(v9 + v22);
      long long v25 = v24[3];
      void v23[2] = v24[2];
      v23[3] = v25;
      long long v26 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v26;
      *(void *)(v8 + v21[7]) = *(void *)(v9 + v21[7]);
      *(void *)(v8 + v21[8]) = *(void *)(v9 + v21[8]);
      *(void *)(v8 + v21[9]) = *(void *)(v9 + v21[9]);
      *(unsigned char *)(v8 + v21[10]) = *(unsigned char *)(v9 + v21[10]);
      *(_OWORD *)(v8 + v21[11]) = *(_OWORD *)(v9 + v21[11]);
      *(_OWORD *)(v8 + v21[12]) = *(_OWORD *)(v9 + v21[12]);
      uint64_t v27 = v21[13];
      __dst = (void *)(v8 + v27);
      uint64_t v28 = (const void *)(v9 + v27);
      uint64_t v29 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = sub_10000F214(&qword_100524BD0);
        memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(__dst, v28, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
      }
      uint64_t v3 = v50;
      *(_OWORD *)(v8 + v21[14]) = *(_OWORD *)(v9 + v21[14]);
      uint64_t v47 = v21[15];
      uint64_t v48 = v8 + v47;
      uint64_t v49 = v9 + v47;
      *(void *)(v48 + 16) = *(void *)(v49 + 16);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      goto LABEL_10;
    case 2u:
      uint64_t v32 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(v8, v9, v32);
      uint64_t v33 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(v8 + v33[5]) = *(_DWORD *)(v9 + v33[5]);
      uint64_t v34 = v33[6];
      uint64_t v35 = (_OWORD *)(v8 + v34);
      uint64_t v36 = (_OWORD *)(v9 + v34);
      long long v37 = v36[3];
      v35[2] = v36[2];
      v35[3] = v37;
      long long v38 = v36[1];
      *uint64_t v35 = *v36;
      v35[1] = v38;
      *(_OWORD *)(v8 + v33[7]) = *(_OWORD *)(v9 + v33[7]);
      *(void *)(v8 + v33[8]) = *(void *)(v9 + v33[8]);
      *(void *)(v8 + v33[9]) = *(void *)(v9 + v33[9]);
      *(void *)(v8 + v33[10]) = *(void *)(v9 + v33[10]);
      *(void *)(v8 + v33[11]) = *(void *)(v9 + v33[11]);
      *(void *)(v8 + v33[12]) = *(void *)(v9 + v33[12]);
      *(void *)(v8 + v33[13]) = *(void *)(v9 + v33[13]);
      *(unsigned char *)(v8 + v33[14]) = *(unsigned char *)(v9 + v33[14]);
      goto LABEL_10;
    case 3u:
    case 4u:
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      char v11 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(v8 + v11[5]) = *(_DWORD *)(v9 + v11[5]);
      uint64_t v12 = v11[6];
      uint64_t v13 = (_OWORD *)(v8 + v12);
      char v14 = (_OWORD *)(v9 + v12);
      long long v15 = v14[3];
      v13[2] = v14[2];
      v13[3] = v15;
      long long v16 = v14[1];
      _OWORD *v13 = *v14;
      v13[1] = v16;
      *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
      *(void *)(v8 + v11[8]) = *(void *)(v9 + v11[8]);
      *(void *)(v8 + v11[9]) = *(void *)(v9 + v11[9]);
      uint64_t v17 = v11[10];
      goto LABEL_9;
    case 5u:
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32))(v8, v9, v39);
      uint64_t v19 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      goto LABEL_8;
    default:
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v8, v9, v18);
      uint64_t v19 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_8:
      *(_DWORD *)(v8 + v19[5]) = *(_DWORD *)(v9 + v19[5]);
      uint64_t v40 = v19[6];
      uint64_t v41 = (_OWORD *)(v8 + v40);
      long long v42 = (_OWORD *)(v9 + v40);
      long long v43 = v42[3];
      v41[2] = v42[2];
      v41[3] = v43;
      long long v44 = v42[1];
      *uint64_t v41 = *v42;
      v41[1] = v44;
      *(_OWORD *)(v8 + v19[7]) = *(_OWORD *)(v9 + v19[7]);
      *(void *)(v8 + v19[8]) = *(void *)(v9 + v19[8]);
      uint64_t v17 = v19[9];
LABEL_9:
      *(void *)(v8 + v17) = *(void *)(v9 + v17);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = sub_10000F214(&qword_10051A328);
      *(void *)(v8 + *(int *)(v45 + 48)) = *(void *)(v9 + *(int *)(v45 + 48));
      *(_OWORD *)(v8 + *(int *)(v45 + 64)) = *(_OWORD *)(v9 + *(int *)(v45 + 64));
      *(_OWORD *)(a1 + *(int *)(v3 + 32)) = *(_OWORD *)(a2 + *(int *)(v3 + 32));
      return a1;
  }
}

uint64_t sub_100199370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100198010(v7, v8, v9, (uint64_t (*)(void))sub_10000F478);
  char v10 = *(unsigned char *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v10;
  sub_100198010(v11, v12, v13, (uint64_t (*)(void))sub_10000F478);
  char v14 = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v14;
  sub_10000FD10();
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  if (a1 != a2)
  {
    sub_100199E14(a1 + v15, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v28 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(v16, v17, v28);
        uint64_t v29 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v16 + v29[5]) = *(_DWORD *)(v17 + v29[5]);
        uint64_t v30 = v29[6];
        uint64_t v31 = (_OWORD *)(v16 + v30);
        uint64_t v32 = (_OWORD *)(v17 + v30);
        long long v33 = v32[3];
        v31[2] = v32[2];
        v31[3] = v33;
        long long v34 = v32[1];
        *uint64_t v31 = *v32;
        v31[1] = v34;
        *(void *)(v16 + v29[7]) = *(void *)(v17 + v29[7]);
        *(void *)(v16 + v29[8]) = *(void *)(v17 + v29[8]);
        *(void *)(v16 + v29[9]) = *(void *)(v17 + v29[9]);
        *(unsigned char *)(v16 + v29[10]) = *(unsigned char *)(v17 + v29[10]);
        *(_OWORD *)(v16 + v29[11]) = *(_OWORD *)(v17 + v29[11]);
        *(_OWORD *)(v16 + v29[12]) = *(_OWORD *)(v17 + v29[12]);
        uint64_t v35 = v29[13];
        __dst = (void *)(v16 + v35);
        uint64_t v36 = (const void *)(v17 + v35);
        uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          uint64_t v39 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v38 + 32))(__dst, v36, v37);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
        }
        *(_OWORD *)(v16 + v29[14]) = *(_OWORD *)(v17 + v29[14]);
        uint64_t v65 = v29[15];
        uint64_t v66 = v16 + v65;
        uint64_t v67 = v17 + v65;
        *(void *)(v66 + 16) = *(void *)(v67 + 16);
        *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
        goto LABEL_11;
      case 2u:
        uint64_t v40 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(v16, v17, v40);
        uint64_t v41 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v16 + v41[5]) = *(_DWORD *)(v17 + v41[5]);
        uint64_t v42 = v41[6];
        long long v43 = (_OWORD *)(v16 + v42);
        long long v44 = (_OWORD *)(v17 + v42);
        long long v45 = v44[3];
        v43[2] = v44[2];
        v43[3] = v45;
        long long v46 = v44[1];
        *long long v43 = *v44;
        v43[1] = v46;
        *(_OWORD *)(v16 + v41[7]) = *(_OWORD *)(v17 + v41[7]);
        *(void *)(v16 + v41[8]) = *(void *)(v17 + v41[8]);
        *(void *)(v16 + v41[9]) = *(void *)(v17 + v41[9]);
        *(void *)(v16 + v41[10]) = *(void *)(v17 + v41[10]);
        *(void *)(v16 + v41[11]) = *(void *)(v17 + v41[11]);
        *(void *)(v16 + v41[12]) = *(void *)(v17 + v41[12]);
        *(void *)(v16 + v41[13]) = *(void *)(v17 + v41[13]);
        *(unsigned char *)(v16 + v41[14]) = *(unsigned char *)(v17 + v41[14]);
        goto LABEL_11;
      case 3u:
      case 4u:
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        uint64_t v19 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v16 + v19[5]) = *(_DWORD *)(v17 + v19[5]);
        uint64_t v20 = v19[6];
        uint64_t v21 = (_OWORD *)(v16 + v20);
        uint64_t v22 = (_OWORD *)(v17 + v20);
        long long v23 = v22[3];
        v21[2] = v22[2];
        v21[3] = v23;
        long long v24 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v24;
        *(_OWORD *)(v16 + v19[7]) = *(_OWORD *)(v17 + v19[7]);
        *(void *)(v16 + v19[8]) = *(void *)(v17 + v19[8]);
        *(void *)(v16 + v19[9]) = *(void *)(v17 + v19[9]);
        uint64_t v25 = v19[10];
        goto LABEL_10;
      case 5u:
        uint64_t v47 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(v16, v17, v47);
        uint64_t v27 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        goto LABEL_9;
      default:
        uint64_t v26 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v16, v17, v26);
        uint64_t v27 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_9:
        *(_DWORD *)(v16 + v27[5]) = *(_DWORD *)(v17 + v27[5]);
        uint64_t v48 = v27[6];
        uint64_t v49 = (_OWORD *)(v16 + v48);
        uint64_t v50 = (_OWORD *)(v17 + v48);
        long long v51 = v50[3];
        v49[2] = v50[2];
        v49[3] = v51;
        long long v52 = v50[1];
        *uint64_t v49 = *v50;
        v49[1] = v52;
        *(_OWORD *)(v16 + v27[7]) = *(_OWORD *)(v17 + v27[7]);
        *(void *)(v16 + v27[8]) = *(void *)(v17 + v27[8]);
        uint64_t v25 = v27[9];
LABEL_10:
        *(void *)(v16 + v25) = *(void *)(v17 + v25);
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  uint64_t v53 = sub_10000F214(&qword_10051A328);
  uint64_t v54 = *(int *)(v53 + 48);
  uint64_t v55 = *(void **)(v16 + v54);
  *(void *)(v16 + v54) = *(void *)(v17 + v54);

  uint64_t v56 = *(int *)(v53 + 64);
  uint64_t v57 = (void *)(v16 + v56);
  uint64_t v58 = (uint64_t *)(v17 + v56);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  *uint64_t v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = *(int *)(a3 + 32);
  uint64_t v62 = a1 + v61;
  uint64_t v63 = a2 + v61;
  *(unsigned char *)uint64_t v62 = *(unsigned char *)v63;
  *(void *)(v62 + 8) = *(void *)(v63 + 8);
  swift_release();
  return a1;
}

uint64_t sub_100199948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019995C);
}

uint64_t sub_10019995C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(*(void *)(type metadata accessor for BarCodeLookupState(0) - 8) + 84) == a2)
  {
    uint64_t v6 = a1 + *(int *)(a3 + 28);
    uint64_t v7 = sub_10000F214(&qword_10051A328);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
    return v8(v6, a2, v7);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100199A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100199A64);
}

uint64_t sub_100199A64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BarCodeLookupState(0);
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t result = v8 - 8;
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    uint64_t v11 = a1 + *(int *)(a4 + 28);
    uint64_t v12 = sub_10000F214(&qword_10051A328);
    char v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    return v13(v11, a2, a2, v12);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for BarCodeResultView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100523AF8);
}

uint64_t sub_100199B68()
{
  uint64_t v3 = &unk_10044A218;
  uint64_t v4 = &unk_10044A218;
  uint64_t v5 = &unk_10044A218;
  uint64_t result = type metadata accessor for CVDetection();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v6 = &v2;
    uint64_t v7 = &unk_10044A230;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100199C38()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100199C5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100199CC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100199D2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100199D74()
{
  unint64_t result = qword_100523B70;
  if (!qword_100523B70)
  {
    sub_10000F69C(&qword_100523B78);
    sub_100013AA8(&qword_100523B80, &qword_100523B88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523B70);
  }
  return result;
}

uint64_t sub_100199E14(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100199E78()
{
  return sub_10019A31C(sub_1001927E0);
}

uint64_t sub_100199E9C()
{
  uint64_t v1 = type metadata accessor for BarCodeResultView(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  sub_100198010(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_100198010(*(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), (uint64_t (*)(void))sub_10000F478);
  sub_10000FD10();
  uint64_t v3 = v2 + *(int *)(v1 + 28);
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v3, v6);
      uint64_t v7 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v3 + v7[13];
      uint64_t v9 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      uint64_t v11 = (uint64_t *)(v3 + v7[14]);
      unint64_t v12 = v11[1];
      if (v12 >> 60 != 15) {
        sub_100038B34(*v11, v12);
      }
      if (*(void *)(v3 + v7[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v3, v13);
      uint64_t v14 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v3, v15);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10019A304()
{
  return sub_10019A31C((uint64_t (*)(uint64_t))sub_1001936FC);
}

uint64_t sub_10019A31C(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for BarCodeResultView(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_10019A394()
{
  uint64_t v1 = type metadata accessor for BarCodeResultView(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_100198010(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8), *(unsigned char *)(v0 + v2 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_100198010(*(void *)(v0 + v2 + 24), *(void *)(v0 + v2 + 32), *(unsigned char *)(v0 + v2 + 40), (uint64_t (*)(void))sub_10000F478);
  sub_10000FD10();
  unint64_t v4 = v0 + v2 + *(int *)(v1 + 28);
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v18 = v3;
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
      uint64_t v8 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v9 = v4 + v8[13];
      uint64_t v10 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
        (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
      unint64_t v12 = (uint64_t *)(v4 + v8[14]);
      unint64_t v13 = v12[1];
      uint64_t v3 = v18;
      if (v13 >> 60 != 15) {
        sub_100038B34(*v12, v13);
      }
      if (*(void *)(v4 + v8[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v4, v14);
      uint64_t v15 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v4, v16);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10019A810()
{
  uint64_t v1 = *(void *)(type metadata accessor for BarCodeResultView(0) - 8);
  return sub_1001928AC(*(void **)(v0
                                + ((*(void *)(v1 + 64)
                                  + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                                  + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10019A89C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 112);
  sub_10019A930(*(void **)(a1 + 24));
  sub_10000F478(v2);
  sub_10000F478(v3);
  sub_10000F478(v4);
  sub_10000F478(v5);
  return a1;
}

void *sub_10019A930(void *result)
{
  if (result)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return (void *)swift_release();
  }
  return result;
}

unint64_t sub_10019A990()
{
  unint64_t result = qword_100523B90;
  if (!qword_100523B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523B90);
  }
  return result;
}

uint64_t sub_10019A9E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BarCodeResultView(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1001947A0(a1, v4);
}

uint64_t sub_10019AA58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10019AA68()
{
  return swift_release();
}

BOOL sub_10019AA70(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 clipMetadataRequest];

  return v2 != 0;
}

ValueMetadata *type metadata accessor for BarCodeActionError()
{
  return &type metadata for BarCodeActionError;
}

uint64_t destroy for BarCodeResultItemView(id *a1)
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for BarCodeResultItemView(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(_OWORD *)a1 = *a2;
  uint64_t v4 = *((void *)a2 + 3);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  id v5 = (id)v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BarCodeResultItemView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for BarCodeResultItemView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BarCodeResultItemView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BarCodeResultItemView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BarCodeResultItemView()
{
  return &type metadata for BarCodeResultItemView;
}

unint64_t sub_10019AD08()
{
  unint64_t result = qword_100523BA0;
  if (!qword_100523BA0)
  {
    sub_10000F69C(&qword_100523B50);
    sub_100199D2C(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    sub_10000F69C(&qword_100523B60);
    type metadata accessor for BarCodeLookupState(255);
    sub_10019B454(&qword_100523B68, &qword_100523B60, (void (*)(void))sub_100199D74);
    sub_100199D2C(&qword_100523A98, (void (*)(uint64_t))type metadata accessor for BarCodeLookupState);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523BA0);
  }
  return result;
}

uint64_t sub_10019AE6C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10019AE88@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isModernizedSnippet.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10019AEB8()
{
  return EnvironmentValues.isModernizedSnippet.setter();
}

uint64_t sub_10019AEE0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10019AF30()
{
  return sub_1001910E8(v0 + 16);
}

uint64_t sub_10019AF38(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v5 - 8);
  uint64_t v37 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ActionBarItem(0);
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = (int *)v7;
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    if (!v10) {
      return (uint64_t)v11;
    }
    uint64_t v39 = _swiftEmptyArrayStorage;
    uint64_t result = sub_100040BC0(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0) {
      break;
    }
    uint64_t v31 = v3;
    uint64_t v3 = 0;
    unint64_t v32 = a1 & 0xC000000000000001;
    uint64_t v33 = v10;
    uint64_t v11 = v39;
    unint64_t v34 = a1;
    uint64_t v13 = (uint64_t)v37;
    while (v10 != v3)
    {
      if (v32) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v15 = v14;
      id v16 = [v14 label:v31];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      if (sub_10019AA70(v38)) {
        char v20 = 4;
      }
      else {
        char v20 = 3;
      }
      id v21 = [v15 icon];
      uint64_t v22 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v13, 1, 1, v22);
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v15;
      *(void *)unint64_t v9 = v17;
      *((void *)v9 + 1) = v19;
      *((void *)v9 + 2) = 0x65646F637271;
      *((void *)v9 + 3) = 0xE600000000000000;
      v9[32] = v20;
      *((void *)v9 + 5) = v21;
      *((void *)v9 + 6) = 2;
      *((_WORD *)v9 + 28) = 1;
      long long v24 = v36;
      uint64_t v25 = v36[16];
      v9[v36[15]] = 0;
      uint64_t v26 = (uint64_t (**)())&v9[v24[12]];
      *uint64_t v26 = sub_100048CB8;
      v26[1] = 0;
      uint64_t v27 = (id (**)())&v9[v24[13]];
      *uint64_t v27 = sub_10019B314;
      v27[1] = (id (*)())v23;
      uint64_t v28 = &v9[v24[14]];
      *(void *)uint64_t v28 = 0;
      *((void *)v28 + 1) = 0;
      *(void *)&v9[v25] = 0;
      sub_10000FC34(v13, (uint64_t)&v9[v24[11]], (uint64_t *)&unk_100524ED0);
      uint64_t v39 = v11;
      unint64_t v30 = v11[2];
      unint64_t v29 = v11[3];
      if (v30 >= v29 >> 1)
      {
        sub_100040BC0(v29 > 1, v30 + 1, 1);
        uint64_t v11 = v39;
      }
      ++v3;
      void v11[2] = v30 + 1;
      sub_100199C5C((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v30, type metadata accessor for ActionBarItem);
      uint64_t v10 = v33;
      a1 = v34;
      if (v33 == v3) {
        return (uint64_t)v11;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_10019B2DC()
{
  return swift_deallocObject();
}

id sub_10019B314()
{
  return [*(id *)(v0 + 16) performAction];
}

uint64_t sub_10019B324(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10019B384(uint64_t a1)
{
  return a1;
}

unint64_t sub_10019B3AC()
{
  unint64_t result = qword_100523C10;
  if (!qword_100523C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523C10);
  }
  return result;
}

ValueMetadata *type metadata accessor for SnippetMasthead()
{
  return &type metadata for SnippetMasthead;
}

uint64_t sub_10019B410()
{
  return sub_10019B454(&qword_100523C18, &qword_100523BF0, (void (*)(void))sub_10019B4D0);
}

uint64_t sub_10019B454(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10019B4D0()
{
  unint64_t result = qword_100523C20;
  if (!qword_100523C20)
  {
    sub_10000F69C(&qword_100523BC8);
    sub_10019B570();
    sub_100013AA8(&qword_1005190F0, &qword_1005190F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523C20);
  }
  return result;
}

unint64_t sub_10019B570()
{
  unint64_t result = qword_100523C28;
  if (!qword_100523C28)
  {
    sub_10000F69C(&qword_100523BC0);
    sub_10019B610();
    sub_100013AA8(&qword_100523C48, &qword_100523C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523C28);
  }
  return result;
}

unint64_t sub_10019B610()
{
  unint64_t result = qword_100523C30;
  if (!qword_100523C30)
  {
    sub_10000F69C(&qword_100523BB8);
    sub_10019B6BC();
    sub_100199D2C((unint64_t *)&qword_100519CF8, (void (*)(uint64_t))type metadata accessor for ContainerSmartDialogViewModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523C30);
  }
  return result;
}

unint64_t sub_10019B6BC()
{
  unint64_t result = qword_100523C38;
  if (!qword_100523C38)
  {
    sub_10000F69C(&qword_100523BB0);
    sub_100013AA8(&qword_100523C40, &qword_100523BA8);
    sub_100183BE0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523C38);
  }
  return result;
}

uint64_t sub_10019B75C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10019B780()
{
  return sub_100199D2C(&qword_100523C70, (void (*)(uint64_t))&type metadata accessor for PrimaryHeaderMarqueeView);
}

uint64_t destroy for ConfigTextField(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for ConfigTextField(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  unint64_t v9 = a2 + 8;
  uint64_t v8 = a2[8];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v10 = a2[9];
    a1[8] = v8;
    a1[9] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 4) = *v9;
  }
  return a1;
}

void *assignWithCopy for ConfigTextField(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[8];
  if (!a1[8])
  {
    if (v4)
    {
      uint64_t v6 = a2[9];
      a1[8] = v4;
      a1[9] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[9];
  a1[8] = v4;
  a1[9] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ConfigTextField(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v6)
    {
      uint64_t v8 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v6;
      *(void *)(a1 + 72) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfigTextField(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfigTextField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigTextField()
{
  return &type metadata for ConfigTextField;
}

uint64_t sub_10019BB74()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10019BB90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v31 = a1;
  uint64_t v3 = type metadata accessor for SubmitLabel();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000F214(&qword_100523420);
  uint64_t v6 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100523C78);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  uint64_t v30 = v10;
  __chkstk_darwin(v9);
  uint64_t v25 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v38 = *(_OWORD *)v2;
  uint64_t v13 = *(void *)(v2 + 16);
  uint64_t v12 = *(void *)(v2 + 24);
  uint64_t v15 = *(void *)(v2 + 32);
  uint64_t v14 = *(void *)(v2 + 40);
  long long v34 = *(_OWORD *)v2;
  sub_100110F38((uint64_t)&v38);
  sub_1000317A0();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  TextField<>.init<A>(_:text:onEditingChanged:onCommit:)();
  static SubmitLabel.done.getter();
  unint64_t v16 = sub_10019BF7C();
  uint64_t v17 = v26;
  View.submitLabel(_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v28);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  *(void *)&long long v34 = v13;
  *((void *)&v34 + 1) = v12;
  uint64_t v35 = v15;
  uint64_t v36 = v14;
  sub_10000F214(&qword_1005234D0);
  Binding.wrappedValue.getter();
  long long v34 = v37;
  uint64_t v18 = (_OWORD *)swift_allocObject();
  long long v19 = *(_OWORD *)(v2 + 48);
  v18[3] = *(_OWORD *)(v2 + 32);
  _OWORD v18[4] = v19;
  v18[5] = *(_OWORD *)(v2 + 64);
  long long v20 = *(_OWORD *)(v2 + 16);
  v18[1] = *(_OWORD *)v2;
  v18[2] = v20;
  sub_10019C078(v2);
  uint64_t v32 = v17;
  unint64_t v33 = v16;
  swift_getOpaqueTypeConformance2();
  uint64_t v21 = v29;
  uint64_t v22 = v25;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v22, v21);
}

uint64_t sub_10019BF38@<X0>(uint64_t a1@<X8>)
{
  return sub_10019BB90(a1);
}

unint64_t sub_10019BF7C()
{
  unint64_t result = qword_1005234D8;
  if (!qword_1005234D8)
  {
    sub_10000F69C(&qword_100523420);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005234D8);
  }
  return result;
}

uint64_t sub_10019BFD8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 80)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10019C040(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void, void))(v2 + 80);
  if (v3) {
    return v3(*a2, a2[1]);
  }
  return result;
}

uint64_t sub_10019C078(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000F724(v2);
  return a1;
}

uint64_t sub_10019C0F8()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_10019C288()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EventEditViewController.Coordinator();
  return [super dealloc];
}

uint64_t type metadata accessor for EventEditViewController.Coordinator()
{
  return self;
}

void destroy for EventEditViewController(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_release();
  }
}

void *_s6Tamale23EventEditViewControllerVwCP_0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *a1 = *(void *)a2;
  uint64_t v5 = a1 + 1;
  uint64_t v7 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  id v8 = v4;
  if (v6)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    a1[1] = v6;
    a1[2] = v9;
    swift_retain();
  }
  else
  {
    *uint64_t v5 = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for EventEditViewController(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v9;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EventEditViewController(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[1];
  if (!*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = a2[2];
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = a2[2];
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EventEditViewController()
{
  return &type metadata for EventEditViewController;
}

id sub_10019C524(uint64_t a1)
{
  return sub_10019C700(a1, *v1);
}

id sub_10019C52C@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = (objc_class *)type metadata accessor for EventEditViewController.Coordinator();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = &v7[OBJC_IVAR____TtCV6Tamale23EventEditViewController11Coordinator_parent];
  *(void *)uint64_t v8 = v4;
  *((void *)v8 + 1) = v3;
  *((void *)v8 + 2) = v5;
  id v9 = v4;
  sub_10000F724(v3);
  v11.receiver = v7;
  v11.super_class = v6;
  id result = [super init];
  *a1 = result;
  return result;
}

uint64_t sub_10019C5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019C7CC();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10019C61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019C7CC();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10019C680()
{
}

unint64_t sub_10019C6AC()
{
  unint64_t result = qword_100523D10;
  if (!qword_100523D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523D10);
  }
  return result;
}

id sub_10019C700(uint64_t a1, void *a2)
{
  id v3 = [objc_allocWithZone((Class)EKEventEditViewController) init];
  id v4 = [a2 eventStore];
  [v3 setEventStore:v4];

  [v3 setEvent:a2];
  sub_10000F214(&qword_100523D18);
  UIViewControllerRepresentableContext.coordinator.getter();
  [v3 setEditViewDelegate:v6];

  return v3;
}

unint64_t sub_10019C7CC()
{
  unint64_t result = qword_100523D20;
  if (!qword_100523D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523D20);
  }
  return result;
}

uint64_t sub_10019C820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CVBundle(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B36D8(v2, (uint64_t)v13, type metadata accessor for CVBundle.BundleType);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v15 = *(void *)(v2 + *(int *)(v4 + 20));
    if (*(void *)(v15 + 16))
    {
      uint64_t v16 = sub_1001B36D8(v15 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v7, type metadata accessor for CVBundle);
      sub_10019C820(v16);
      sub_1001B3678((uint64_t)v7, type metadata accessor for CVBundle);
      uint64_t v17 = type metadata accessor for UUID();
      return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v13, v17);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1001B5120((uint64_t)v13, (uint64_t)v10, type metadata accessor for CVTrackSnapshot);
    sub_1001B36D8((uint64_t)&v10[*(int *)(v8 + 20)], a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return sub_1001B3678((uint64_t)v10, type metadata accessor for CVTrackSnapshot);
  }
  return result;
}

void *sub_10019CAAC()
{
  uint64_t v0 = type metadata accessor for CVDetection();
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000F214(&qword_100518AD8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v29 - v7;
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v38 = (uint64_t)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v33 = (uint64_t)v29 - v13;
  uint64_t v37 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v14 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v39 = (uint64_t)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v16 = sub_1001A31A0();
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v18 = *(unsigned __int8 *)(v14 + 80);
    v29[1] = v16;
    uint64_t v19 = v16 + ((v18 + 32) & ~v18);
    uint64_t v36 = *(void *)(v14 + 72);
    long long v34 = v8;
    uint64_t v35 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v31 = v10;
    long long v20 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    uint64_t v21 = _swiftEmptyArrayStorage;
    uint64_t v32 = v0;
    uint64_t v30 = v2;
    do
    {
      uint64_t v22 = v39;
      sub_1001B36D8(v19, v39, type metadata accessor for CVTrackSnapshot);
      sub_1001B36D8(v22 + *(int *)(v37 + 24), (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for CVDetection);
      unint64_t v23 = (unint64_t)v21;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        sub_1001B5120((uint64_t)v2, (uint64_t)v5, type metadata accessor for TextDetectorResult);
        (*v35)(v5, 0, 1, v9);
      }
      else
      {
        (*v35)(v5, 1, 1, v9);
        sub_1001B3678((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      uint64_t v24 = (uint64_t)v34;
      sub_10000FC34((uint64_t)v5, (uint64_t)v34, &qword_100518AD8);
      sub_1001B3678(v39, type metadata accessor for CVTrackSnapshot);
      if ((*v20)(v24, 1, v9) == 1)
      {
        sub_10000FBD8(v24, &qword_100518AD8);
        uint64_t v21 = (void *)v23;
      }
      else
      {
        uint64_t v25 = v33;
        sub_1001B5120(v24, v33, type metadata accessor for TextDetectorResult);
        sub_1001B5120(v25, v38, type metadata accessor for TextDetectorResult);
        uint64_t v21 = (void *)v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = (void *)sub_100328970(0, *(void *)(v23 + 16) + 1, 1, v23);
        }
        unint64_t v27 = v21[2];
        unint64_t v26 = v21[3];
        if (v27 >= v26 >> 1) {
          uint64_t v21 = (void *)sub_100328970(v26 > 1, v27 + 1, 1, (unint64_t)v21);
        }
        v21[2] = v27 + 1;
        sub_1001B5120(v38, (uint64_t)v21+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v27, type metadata accessor for TextDetectorResult);
        uint64_t v2 = v30;
      }
      v19 += v36;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v21;
}

unint64_t sub_10019CF90(uint64_t a1, uint64_t *a2)
{
  uint64_t v47 = a2;
  uint64_t v4 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v39 = (uint64_t)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v46);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v45 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v37 - v12;
  uint64_t v44 = type metadata accessor for CVBundle(0);
  __chkstk_darwin(v44);
  size_t v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = _swiftEmptyArrayStorage;
  if (!v17) {
    return (unint64_t)v18;
  }
  v37[1] = v2;
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t v19 = v14;
  sub_100040BFC(0, v17, 0);
  unint64_t v42 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  long long v43 = v7;
  uint64_t v20 = a1 + v42;
  uint64_t v21 = *(void *)(v19 + 72);
  uint64_t v38 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v22 = v9;
  unint64_t v23 = (void (**)(void))(v9 + 32);
  uint64_t v40 = (void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v41 = v21;
  while (1)
  {
    sub_1001B36D8(v20, (uint64_t)v16, type metadata accessor for CVBundle);
    sub_1001B36D8(v20, (uint64_t)v7, type metadata accessor for CVBundle.BundleType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = *v23;
      uint64_t v25 = v45;
      (*v23)();
    }
    else
    {
      uint64_t v26 = v39;
      sub_1001B5120((uint64_t)v7, v39, type metadata accessor for CVTrackSnapshot);
      uint64_t v25 = v45;
      (*v38)(v45, v26, v8);
      sub_1001B3678(v26, type metadata accessor for CVTrackSnapshot);
      uint64_t v24 = *v23;
    }
    unint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v24)(v13, v25, v8);
    uint64_t v28 = *v47;
    if (!*(void *)(*v47 + 16)) {
      break;
    }
    unint64_t result = sub_10032ADC4((uint64_t)v13);
    if ((v29 & 1) == 0) {
      goto LABEL_15;
    }
    uint64_t v30 = *(void *)(*(void *)(v28 + 56) + 8 * result);
    uint64_t v31 = *v40;
    swift_retain();
    v31(v13, v8);
    uint64_t v32 = *(void *)(v30 + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_classifications);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v33 = *(int *)(v44 + 24);
    swift_bridgeObjectRelease();
    *(void *)&v16[v33] = v32;
    uint64_t v18 = v48;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100040BFC(0, v18[2] + 1, 1);
      uint64_t v18 = v48;
    }
    unint64_t v35 = v18[2];
    unint64_t v34 = v18[3];
    if (v35 >= v34 >> 1)
    {
      sub_100040BFC(v34 > 1, v35 + 1, 1);
      uint64_t v18 = v48;
    }
    v18[2] = v35 + 1;
    uint64_t v36 = v41;
    sub_1001B5120((uint64_t)v16, (uint64_t)v18 + v42 + v35 * v41, type metadata accessor for CVBundle);
    v20 += v36;
    --v17;
    uint64_t v7 = v43;
    if (!v17) {
      return (unint64_t)v18;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10019D408@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CVBundle(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B36D8(v2, (uint64_t)v13, type metadata accessor for CVBundle.BundleType);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v15 = *(void *)(v2 + *(int *)(v4 + 20));
    if (*(void *)(v15 + 16))
    {
      uint64_t v16 = sub_1001B36D8(v15 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v7, type metadata accessor for CVBundle);
      sub_10019D408(v16);
      sub_1001B3678((uint64_t)v7, type metadata accessor for CVBundle);
      uint64_t v17 = type metadata accessor for UUID();
      return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v13, v17);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1001B5120((uint64_t)v13, (uint64_t)v10, type metadata accessor for CVTrackSnapshot);
    sub_1001B36D8((uint64_t)&v10[*(int *)(v8 + 24)], a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return sub_1001B3678((uint64_t)v10, type metadata accessor for CVTrackSnapshot);
  }
  return result;
}

float sub_10019D694()
{
  uint64_t v1 = type metadata accessor for CVBundle(0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B36D8(v0, (uint64_t)v10, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *(void *)(v0 + *(int *)(v1 + 20));
    int64_t v12 = *(void *)(v11 + 16);
    uint64_t v13 = (float *)_swiftEmptyArrayStorage;
    if (v12)
    {
      uint64_t v25 = (float *)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100040954(0, v12, 0);
      uint64_t v14 = v11 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v15 = *(void *)(v2 + 72);
      uint64_t v13 = v25;
      do
      {
        uint64_t v16 = sub_1001B36D8(v14, (uint64_t)v4, type metadata accessor for CVBundle);
        float v17 = sub_10019D694(v16);
        sub_1001B3678((uint64_t)v4, type metadata accessor for CVBundle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040954(0, *((void *)v13 + 2) + 1, 1);
          uint64_t v13 = v25;
        }
        unint64_t v19 = *((void *)v13 + 2);
        unint64_t v18 = *((void *)v13 + 3);
        if (v19 >= v18 >> 1)
        {
          sub_100040954(v18 > 1, v19 + 1, 1);
          uint64_t v13 = v25;
        }
        *((void *)v13 + 2) = v19 + 1;
        v13[v19 + 8] = v17;
        v14 += v15;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
    }
    unint64_t v21 = sub_100171F14((uint64_t)v13);
    swift_bridgeObjectRelease();
    if ((v21 & (unint64_t)&_mh_execute_header) != 0) {
      float v20 = 0.0;
    }
    else {
      float v20 = *(float *)&v21;
    }
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v10, v22);
  }
  else
  {
    sub_1001B5120((uint64_t)v10, (uint64_t)v7, type metadata accessor for CVTrackSnapshot);
    float v20 = *(float *)&v7[*(int *)(v5 + 36)];
    sub_1001B3678((uint64_t)v7, type metadata accessor for CVTrackSnapshot);
  }
  return v20;
}

double sub_10019D9E0()
{
  uint64_t v1 = type metadata accessor for CVBundle(0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B36D8(v0, (uint64_t)v10, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *(void *)(v0 + *(int *)(v1 + 20));
    int64_t v12 = *(void *)(v11 + 16);
    uint64_t v13 = _swiftEmptyArrayStorage;
    if (v12)
    {
      unint64_t v27 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100040974(0, v12, 0);
      uint64_t v14 = v11 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v15 = *(void *)(v2 + 72);
      uint64_t v13 = v27;
      do
      {
        uint64_t v16 = sub_1001B36D8(v14, (uint64_t)v4, type metadata accessor for CVBundle);
        double v17 = sub_10019D9E0(v16);
        sub_1001B3678((uint64_t)v4, type metadata accessor for CVBundle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040974(0, v13[2] + 1, 1);
          uint64_t v13 = v27;
        }
        unint64_t v19 = v13[2];
        unint64_t v18 = v13[3];
        if (v19 >= v18 >> 1)
        {
          sub_100040974(v18 > 1, v19 + 1, 1);
          uint64_t v13 = v27;
        }
        v13[2] = v19 + 1;
        *(double *)&v13[v19 + 4] = v17;
        v14 += v15;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
    }
    double v21 = COERCE_DOUBLE(sub_1003A4DC0((uint64_t)v13));
    char v23 = v22;
    swift_bridgeObjectRelease();
    if (v23) {
      double v20 = 0.0;
    }
    else {
      double v20 = v21;
    }
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v10, v24);
  }
  else
  {
    sub_1001B5120((uint64_t)v10, (uint64_t)v7, type metadata accessor for CVTrackSnapshot);
    double v20 = *(double *)&v7[*(int *)(v5 + 32)];
    sub_1001B3678((uint64_t)v7, type metadata accessor for CVTrackSnapshot);
  }
  return v20;
}

void *sub_10019DD30()
{
  uint64_t v0 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v31 - v4;
  uint64_t v6 = type metadata accessor for CVDetection();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v39 = (uint64_t)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v31 - v10;
  __chkstk_darwin(v12);
  uint64_t v34 = (uint64_t)v31 - v13;
  uint64_t v38 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v14 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v17 = sub_1001A31A0();
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v31[1] = v17;
    uint64_t v32 = v7;
    uint64_t v20 = v17 + v19;
    uint64_t v21 = *(void *)(v14 + 72);
    uint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v37 = v21;
    unint64_t v35 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    char v22 = _swiftEmptyArrayStorage;
    char v23 = &qword_10051CB10;
    uint64_t v33 = v2;
    do
    {
      uint64_t v24 = v23;
      sub_1001B36D8(v20, (uint64_t)v16, type metadata accessor for CVTrackSnapshot);
      uint64_t v25 = (uint64_t)&v16[*(int *)(v38 + 24)];
      sub_1001B36D8(v25, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        sub_1001B36D8(v25, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v26 = 1;
      }
      (*v36)(v2, v26, 1, v6);
      sub_1001B3678((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CVDetection);
      char v23 = v24;
      sub_10000FC34((uint64_t)v2, (uint64_t)v5, v24);
      sub_1001B3678((uint64_t)v16, type metadata accessor for CVTrackSnapshot);
      if ((*v35)(v5, 1, v6) == 1)
      {
        sub_10000FBD8((uint64_t)v5, v24);
      }
      else
      {
        uint64_t v27 = v34;
        sub_1001B5120((uint64_t)v5, v34, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1001B5120(v27, v39, (uint64_t (*)(void))type metadata accessor for CVDetection);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v22 = (void *)sub_100328C90(0, v22[2] + 1, 1, (unint64_t)v22);
        }
        unint64_t v29 = v22[2];
        unint64_t v28 = v22[3];
        if (v29 >= v28 >> 1) {
          char v22 = (void *)sub_100328C90(v28 > 1, v29 + 1, 1, (unint64_t)v22);
        }
        void v22[2] = v29 + 1;
        sub_1001B5120(v39, (uint64_t)v22+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v29, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v2 = v33;
        char v23 = v24;
      }
      v20 += v37;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v22;
}

uint64_t sub_10019E198@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CVBundle(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v39.i8[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v39.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v11);
  uint64_t v13 = &v39.i8[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001B36D8(v2, (uint64_t)v13, type metadata accessor for CVBundle.BundleType);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 1)
  {
    sub_1001B5120((uint64_t)v13, (uint64_t)v10, type metadata accessor for CVTrackSnapshot);
    sub_1003FEC34(v43.i64);
    int8x16_t v37 = v45;
    sub_10000F3B0(&v43, v45.i64[0]);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v37.i64[1] + 64))(&v49, v37.i64[0], v37.i64[1]);
    v38.i64[0] = v49;
    int8x16_t v40 = v38;
    v38.i64[0] = v50;
    double v21 = v51;
    int8x16_t v42 = v38;
    v38.i64[0] = v52;
    int8x16_t v39 = v38;
    v38.i64[0] = v53;
    double v22 = v54;
    int8x16_t v41 = v38;
    double v23 = v55;
    double v24 = v56;
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v43);
    uint64_t result = sub_1001B3678((uint64_t)v10, type metadata accessor for CVTrackSnapshot);
    uint64_t v36 = v39.i64[0];
    uint64_t v35 = v40.i64[0];
    float64_t v34 = *(double *)v41.i64;
    float64_t v33 = *(double *)v42.i64;
LABEL_17:
    *(void *)a1 = v35;
    *(float64_t *)(a1 + 8) = v33;
    *(double *)(a1 + 16) = v21;
    *(void *)(a1 + 24) = v36;
    *(float64_t *)(a1 + 32) = v34;
    *(double *)(a1 + 40) = v22;
    *(double *)(a1 + 48) = v23;
    *(double *)(a1 + 56) = v24;
    return result;
  }
  uint64_t v15 = *(void *)(v2 + *(int *)(v4 + 20));
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    unint64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v18 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1001B36D8(v15 + v17, (uint64_t)v7, type metadata accessor for CVBundle);
    sub_10019E198(&v49, v19);
    v20.i64[0] = v49;
    int8x16_t v40 = v20;
    v20.i64[0] = v50;
    double v21 = v51;
    int8x16_t v42 = v20;
    v20.i64[0] = v52;
    int8x16_t v39 = v20;
    v20.i64[0] = v53;
    double v22 = v54;
    int8x16_t v41 = v20;
    double v23 = v55;
    double v24 = v56;
    sub_1001B3678((uint64_t)v7, type metadata accessor for CVBundle);
    uint64_t v25 = v16 - 1;
    if (v16 != 1)
    {
      v26.i64[0] = v42.i64[0];
      v26.i64[1] = v40.i64[0];
      int8x16_t v42 = v26;
      v26.i64[0] = v41.i64[0];
      v26.i64[1] = v39.i64[0];
      int8x16_t v41 = v26;
      uint64_t v27 = v15 + v18 + v17;
      do
      {
        uint64_t v28 = sub_1001B36D8(v27, (uint64_t)v7, type metadata accessor for CVBundle);
        sub_10019E198(&v43, v28);
        if (v21 <= v44) {
          double v21 = v44;
        }
        float64x2_t v29 = (float64x2_t)vextq_s8(v45, v45, 8uLL);
        float64x2_t v30 = (float64x2_t)vextq_s8(v43, v43, 8uLL);
        int8x16_t v42 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v42, v30), (int8x16_t)v30, v42);
        int8x16_t v41 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v41, v29), (int8x16_t)v29, v41);
        if (v22 <= v46) {
          double v22 = v46;
        }
        if (v23 <= v47) {
          double v23 = v47;
        }
        if (v24 <= v48) {
          double v24 = v48;
        }
        sub_1001B3678((uint64_t)v7, type metadata accessor for CVBundle);
        v27 += v18;
        --v25;
      }
      while (v25);
      v31.i64[1] = v42.i64[1];
      v31.i64[0] = v42.i64[1];
      int8x16_t v40 = v31;
      v31.i64[1] = v41.i64[1];
      v31.i64[0] = v41.i64[1];
      int8x16_t v39 = v31;
    }
    swift_bridgeObjectRelease();
    uint64_t v32 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8))(v13, v32);
    float64_t v33 = *(double *)v42.i64;
    float64_t v34 = *(double *)v41.i64;
    uint64_t v35 = v40.i64[0];
    uint64_t v36 = v39.i64[0];
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_10019E630()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v16[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B36D8(v1, (uint64_t)v7, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    v8._uint64_t countAndFlagsBits = 0x2870756F7267;
    v8._object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    _print_unlocked<A, B>(_:_:)();
    v9._uint64_t countAndFlagsBits = 41;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    uint64_t v10 = v16[0];
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v7, v11);
  }
  else
  {
    sub_1001B5120((uint64_t)v7, (uint64_t)v4, type metadata accessor for CVTrackSnapshot);
    sub_1003FEC34(v16);
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    sub_10000F3B0(v16, v17);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 72))(v12, v13);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v16);
    sub_1001B3678((uint64_t)v4, type metadata accessor for CVTrackSnapshot);
  }
  return v10;
}

uint64_t sub_10019E854(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v38 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v4 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_1005254A0);
  __chkstk_darwin(v7 - 8);
  Swift::String v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v37 = (uint64_t)&v35 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v35 - v13;
  int64_t v15 = *v2;
  unint64_t v16 = *(void *)(*v2 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v15;
  if (!isUniquelyReferenced_nonNull_native || (unint64_t v18 = *(void *)(v15 + 24) >> 1, v18 < v16))
  {
    int64_t v15 = sub_1003289D8(isUniquelyReferenced_nonNull_native, v16, 1, v15);
    *uint64_t v2 = v15;
    unint64_t v18 = *(void *)(v15 + 24) >> 1;
  }
  uint64_t v19 = *(void *)(v15 + 16);
  unint64_t v20 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v21 = *(void *)(v4 + 72);
  uint64_t v22 = v18 - v19;
  sub_10020A5BC(&v39, v15 + v20 + v21 * v19, v18 - v19, a1);
  if (v23 < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v23)
  {
    uint64_t v24 = *(void *)(v15 + 16);
    BOOL v25 = __OFADD__(v24, v23);
    uint64_t v26 = v24 + v23;
    if (v25)
    {
      __break(1u);
      goto LABEL_19;
    }
    *(void *)(v15 + 16) = v26;
  }
  if (v23 == v22)
  {
LABEL_13:
    int64_t v15 = *(void *)(v15 + 16);
    sub_1001B49FC((uint64_t)v14);
    a1 = v37;
    sub_10000FB74((uint64_t)v14, v37, (uint64_t *)&unk_1005254A0);
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (v36(a1, 1, v38) == 1)
    {
LABEL_14:
      sub_10000FBD8((uint64_t)v14, (uint64_t *)&unk_1005254A0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_10000FBD8(a1, (uint64_t *)&unk_1005254A0);
    }
    do
    {
LABEL_19:
      sub_10000FBD8(a1, (uint64_t *)&unk_1005254A0);
      uint64_t v29 = *v2;
      unint64_t v30 = *(void *)(*v2 + 24);
      int64_t v31 = v30 >> 1;
      if ((uint64_t)(v30 >> 1) < v15 + 1)
      {
        uint64_t v29 = sub_1003289D8(v30 > 1, v15 + 1, 1, *v2);
        *uint64_t v2 = v29;
        int64_t v31 = *(void *)(v29 + 24) >> 1;
      }
      sub_10000FB74((uint64_t)v14, (uint64_t)v9, (uint64_t *)&unk_1005254A0);
      if (v36((uint64_t)v9, 1, v38) == 1)
      {
        int64_t v28 = v15;
LABEL_29:
        sub_10000FBD8((uint64_t)v9, (uint64_t *)&unk_1005254A0);
        int64_t v15 = v28;
      }
      else
      {
        if (v15 <= v31) {
          int64_t v32 = v31;
        }
        else {
          int64_t v32 = v15;
        }
        int64_t v35 = v32;
        unint64_t v33 = v29 + v20;
        int64_t v28 = v15;
        uint64_t v34 = v33 + v21 * v15;
        while (1)
        {
          sub_1001B5120((uint64_t)v9, (uint64_t)v6, type metadata accessor for CVTrackSnapshot);
          if (v35 == v28) {
            break;
          }
          sub_10000FBD8((uint64_t)v14, (uint64_t *)&unk_1005254A0);
          sub_1001B5120((uint64_t)v6, v34, type metadata accessor for CVTrackSnapshot);
          sub_1001B49FC((uint64_t)v14);
          ++v28;
          sub_10000FB74((uint64_t)v14, (uint64_t)v9, (uint64_t *)&unk_1005254A0);
          v34 += v21;
          if (v36((uint64_t)v9, 1, v38) == 1) {
            goto LABEL_29;
          }
        }
        sub_1001B3678((uint64_t)v6, type metadata accessor for CVTrackSnapshot);
        int64_t v28 = v35;
        int64_t v15 = v35;
      }
      *(void *)(*v2 + 16) = v28;
      a1 = v37;
      sub_10000FB74((uint64_t)v14, v37, (uint64_t *)&unk_1005254A0);
    }
    while (v36(a1, 1, v38) != 1);
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10019ECE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100328B64(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  Swift::String v9 = &v3[11 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[11 * v2] && (unint64_t)v9 < a1 + 32 + 88 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 88 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019EE3C(uint64_t a1)
{
  uint64_t v2 = v1;
  int64_t v4 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 16);
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 16);
  os_unfair_lock_unlock(v4);
  uint64_t v6 = *(void **)v2;
  int64_t v7 = *(void *)(*(void *)v2 + 16);
  int64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v10 = v6[3] >> 1, v10 < v8))
  {
    if (v7 <= v8) {
      int64_t v11 = v7 + v5;
    }
    else {
      int64_t v11 = v7;
    }
    uint64_t v6 = sub_100328B64(isUniquelyReferenced_nonNull_native, v11, 1, v6);
    int64_t v10 = v6[3] >> 1;
  }
  uint64_t v12 = v6[2];
  uint64_t v13 = v10 - v12;
  sub_10020A9A0(v56, &v6[11 * v12 + 4], v10 - v12);
  if (v14 < v5) {
    goto LABEL_15;
  }
  if (v14)
  {
    uint64_t v15 = v6[2];
    BOOL v16 = __OFADD__(v15, v14);
    uint64_t v17 = v15 + v14;
    if (v16)
    {
      __break(1u);
      goto LABEL_31;
    }
    v6[2] = v17;
  }
  if (v14 != v13)
  {
LABEL_13:
    uint64_t result = swift_release();
    *(void *)uint64_t v2 = v6;
    return result;
  }
LABEL_16:
  int64_t v19 = v6[2];
  uint64_t v20 = v56[0];
  unint64_t v21 = v56[1];
  uint64_t v22 = (os_unfair_lock_s *)(*(void *)(v56[0] + 32) + 16);
  os_unfair_lock_lock(v22);
  swift_beginAccess();
  uint64_t v23 = *(void *)(*(void *)(v20 + 16) + 16);
  os_unfair_lock_unlock(v22);
  if (v21 == v23) {
    goto LABEL_13;
  }
  uint64_t v43 = v20;
  uint64_t v24 = sub_10003FFE4(v54, v21);
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  uint64_t v28 = v25[2];
  uint64_t v52 = v25[4];
  uint64_t v53 = v25[3];
  uint64_t v50 = v25[6];
  uint64_t v51 = v25[5];
  uint64_t v48 = v25[8];
  uint64_t v49 = v25[7];
  uint64_t v46 = v25[10];
  uint64_t v47 = v25[9];
  ((void (*)(void *, void))v24)(v54, 0);
  swift_retain();
  os_unfair_lock_lock(v22);
  os_unfair_lock_unlock(v22);
  os_unfair_lock_lock(v22);
  unint64_t v29 = *(void *)(*(void *)(v20 + 16) + 16);
  os_unfair_lock_unlock(v22);
  uint64_t result = swift_release();
  if (v21 < v29)
  {
    unint64_t v30 = v21 + 1;
    char v55 = 0;
    int64_t v31 = v19;
    while (1)
    {
      unint64_t v32 = v6[3];
      int64_t v44 = v32 >> 1;
      if ((uint64_t)(v32 >> 1) < v31 + 1)
      {
        unint64_t v42 = v30;
        uint64_t v6 = sub_100328B64((void *)(v32 > 1), v31 + 1, 1, v6);
        char v33 = v55;
        int64_t v44 = v6[3] >> 1;
        unint64_t v30 = v42;
        if (v55) {
          goto LABEL_19;
        }
      }
      else
      {
        char v33 = 0;
      }
      if (v31 < v44)
      {
        uint64_t v34 = &v6[11 * v31 + 7];
        while (1)
        {
          *(v34 - 3) = v26;
          *(v34 - 2) = v27;
          *(v34 - 1) = v28;
          *uint64_t v34 = v53;
          v34[1] = v52;
          v34[2] = v51;
          v34[3] = v50;
          v34[4] = v49;
          v34[5] = v48;
          v34[6] = v47;
          v34[7] = v46;
          int64_t v45 = v31 + 1;
          int64_t v35 = (os_unfair_lock_s *)(*(void *)(v20 + 32) + 16);
          unint64_t v36 = v30;
          os_unfair_lock_lock(v35);
          uint64_t v37 = *(void *)(*(void *)(v20 + 16) + 16);
          os_unfair_lock_unlock(v35);
          if (v36 == v37) {
            break;
          }
          uint64_t v38 = sub_10003FFE4(v54, v36);
          uint64_t v40 = *v39;
          uint64_t v27 = v39[1];
          uint64_t v28 = v39[2];
          uint64_t v52 = v39[4];
          uint64_t v53 = v39[3];
          uint64_t v50 = v39[6];
          uint64_t v51 = v39[5];
          uint64_t v48 = v39[8];
          uint64_t v49 = v39[7];
          uint64_t v46 = v39[10];
          uint64_t v47 = v39[9];
          ((void (*)(void *, void))v38)(v54, 0);
          swift_retain();
          os_unfair_lock_lock(v35);
          os_unfair_lock_unlock(v35);
          os_unfair_lock_lock(v35);
          unint64_t v41 = *(void *)(*(void *)(v20 + 16) + 16);
          os_unfair_lock_unlock(v35);
          uint64_t result = swift_release();
          if (v36 >= v41)
          {
            __break(1u);
            goto LABEL_34;
          }
          unint64_t v30 = v36 + 1;
          char v55 = 0;
          v34 += 11;
          int64_t v31 = v45;
          uint64_t v26 = v40;
          uint64_t v20 = v43;
          if (v45 >= v44)
          {
            char v33 = 0;
            goto LABEL_19;
          }
        }
LABEL_31:
        v6[2] = v45;
        goto LABEL_13;
      }
LABEL_19:
      v6[2] = v31;
      if (v33) {
        goto LABEL_13;
      }
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10019F224(unint64_t a1)
{
  return sub_1001A0A4C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1001B43AC);
}

uint64_t sub_10019F23C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100328CC4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019F398(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10032912C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[8 * v8 + 4];
  if (a1 + 32 < v9 + (v2 << 6) && v9 < a1 + 32 + (v2 << 6)) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019F4EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10032923C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019F634(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_10032959C(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for URLQueryItem() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019F7E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1003296E0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019F92C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1003297F0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019FA80(uint64_t a1)
{
  return sub_10019FC44(a1, (uint64_t (*)(void))sub_100329B40, type metadata accessor for TextDetectorResult.DataDetector);
}

uint64_t sub_10019FAAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_100328860(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019FC00(unint64_t a1)
{
  return sub_1001A0A4C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1001B45CC);
}

uint64_t sub_10019FC18(uint64_t a1)
{
  return sub_10019FC44(a1, (uint64_t (*)(void))sub_1003289A4, type metadata accessor for ActionBarItem);
}

uint64_t sub_10019FC44(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019FE00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_100329E28(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019FF48(uint64_t a1)
{
  return sub_10019FC44(a1, (uint64_t (*)(void))sub_10032A09C, type metadata accessor for DetectionResult);
}

uint64_t sub_10019FF74(uint64_t a1)
{
  return sub_10019FC44(a1, (uint64_t (*)(void))sub_10032A0D0, type metadata accessor for DetectionRequest);
}

uint64_t sub_10019FFA0(uint64_t a1)
{
  return sub_10019FC44(a1, (uint64_t (*)(void))sub_10032A104, (uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t sub_10019FFCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_10032A468(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  sub_10000F214(&qword_10051A0C8);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001A0130(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v94 = type metadata accessor for Text.Layout.Run();
  uint64_t v5 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  long long v100 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100524420);
  __chkstk_darwin(v7 - 8);
  uint64_t v101 = (uint64_t)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v96 = (uint64_t)&v82 - v10;
  __chkstk_darwin(v11);
  uint64_t v102 = (uint64_t)&v82 - v12;
  uint64_t v13 = type metadata accessor for Text.Layout.Line();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v104 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_100524428);
  __chkstk_darwin(v16);
  uint64_t v106 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = (void (*)(char *, uint64_t))sub_1001B34C8(&qword_100524430, 255, (void (*)(uint64_t))&type metadata accessor for Text.Layout.Line);
  uint64_t v103 = v13;
  uint64_t v19 = dispatch thunk of Sequence.underestimatedCount.getter();
  unint64_t v20 = *v1;
  int64_t v21 = *(void *)(*v3 + 16);
  int64_t v22 = v21 + v19;
  if (__OFADD__(v21, v19))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v2 = (unint64_t *)v19;
  int64_t v93 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v105 = v3;
  *unint64_t v3 = v20;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v24 = *(void *)(v20 + 24) >> 1, v24 < v22))
  {
    if (v21 <= v22) {
      int64_t v25 = v22;
    }
    else {
      int64_t v25 = v21;
    }
    unint64_t v20 = sub_10032A578(isUniquelyReferenced_nonNull_native, v25, 1, v20);
    unint64_t *v105 = v20;
    int64_t v24 = *(void *)(v20 + 24) >> 1;
  }
  uint64_t v26 = *(void *)(v5 + 72);
  int64_t v27 = v24 - *(void *)(v20 + 16);
  unint64_t v95 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v28 = v14;
  uint64_t v29 = v14 + 16;
  unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v31 = v103;
  uint64_t v98 = v29;
  uint64_t v99 = v26;
  uint64_t v97 = v30;
  v30(v104, (uint64_t)a1, v103);
  uint64_t v32 = dispatch thunk of Sequence._copyContents(initializing:)();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v28 + 8);
  char v33 = (void *)(v28 + 8);
  unint64_t v18 = v34;
  int64_t v35 = a1;
  a1 = v33;
  uint64_t v19 = ((uint64_t (*)(void *, uint64_t))v34)(v35, v31);
  if (v32 < (uint64_t)v2) {
    goto LABEL_16;
  }
  uint64_t v2 = v105;
  uint64_t v19 = v106;
  if (v32 >= 1)
  {
    uint64_t v36 = *(void *)(*v105 + 16);
    BOOL v37 = __OFADD__(v36, v32);
    uint64_t v38 = v36 + v32;
    if (v37)
    {
      __break(1u);
      goto LABEL_20;
    }
    *(void *)(*v105 + 16) = v38;
  }
  if (v32 != v27)
  {
    uint64_t v39 = &qword_100524428;
    return sub_10000FBD8(v19, v39);
  }
LABEL_17:
  int64_t v92 = *(void *)(*v2 + 16);
  char v33 = (void *)(v19 + *(int *)(v16 + 36));
  uint64_t v41 = *v33;
  uint64_t v42 = sub_1001B34C8(&qword_100524438, 255, (void (*)(uint64_t))&type metadata accessor for Text.Layout.Line);
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v89 = v42;
  if (v41 != v107[0])
  {
LABEL_20:
    uint64_t v50 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v44 = v5;
    uint64_t v46 = v102;
    uint64_t v49 = v94;
    (*(void (**)(uint64_t))(v5 + 16))(v102);
    v50(v107, 0);
    uint64_t v52 = v103;
    uint64_t v51 = v104;
    v97(v104, v106, v103);
    uint64_t v43 = v33;
    dispatch thunk of Collection.formIndex(after:)();
    v18(v51, v52);
    int64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
    uint64_t v47 = v46;
    uint64_t v48 = 0;
    goto LABEL_21;
  }
  uint64_t v43 = v33;
  uint64_t v44 = v5;
  int64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v46 = v102;
  uint64_t v47 = v102;
  uint64_t v48 = 1;
  uint64_t v49 = v94;
LABEL_21:
  uint64_t v88 = v45;
  v45(v47, v48, 1, v49);
  uint64_t v53 = v96;
  sub_10000FB74(v46, v96, &qword_100524420);
  double v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  uint64_t v94 = v44 + 48;
  uint64_t v91 = v54;
  int v55 = v54(v53, 1, v49);
  uint64_t v85 = a1;
  uint64_t v56 = v103;
  int64_t v57 = v92;
  if (v55 != 1)
  {
    uint64_t v58 = v43;
    uint64_t v59 = (void (**)(void, void, void))(v93 + 32);
    uint64_t v84 = (void (**)(uint64_t))(v93 + 16);
    uint64_t v86 = v93 + 56;
    uint64_t v83 = (void (**)(char *, uint64_t))(v93 + 8);
    uint64_t v87 = (void (**)(void, void, void))(v93 + 32);
    do
    {
      sub_10000FBD8(v53, &qword_100524420);
      uint64_t v61 = *v2;
      unint64_t v62 = *(void *)(*v2 + 24);
      int64_t v63 = v62 >> 1;
      if ((uint64_t)(v62 >> 1) < v57 + 1)
      {
        uint64_t v61 = sub_10032A578(v62 > 1, v57 + 1, 1, *v2);
        *uint64_t v2 = v61;
        int64_t v63 = *(void *)(v61 + 24) >> 1;
      }
      uint64_t v64 = v101;
      sub_10000FB74(v102, v101, &qword_100524420);
      if (v91(v64, 1, v49) == 1)
      {
        uint64_t v65 = v101;
LABEL_30:
        sub_10000FBD8(v65, &qword_100524420);
        int64_t v60 = v57;
      }
      else
      {
        uint64_t v66 = *v59;
        if (v57 <= v63) {
          int64_t v67 = v63;
        }
        else {
          int64_t v67 = v57;
        }
        int64_t v93 = v67;
        unint64_t v68 = v61 + v95;
        uint64_t v69 = v100;
        unint64_t v70 = v68 + v99 * v57;
        uint64_t v65 = v101;
        uint64_t v90 = v66;
        while (1)
        {
          v66(v69, v65, v49);
          if (v93 == v57) {
            break;
          }
          int64_t v92 = v57;
          uint64_t v77 = (void (*)(unint64_t, char *, uint64_t))v66;
          uint64_t v78 = v102;
          sub_10000FBD8(v102, &qword_100524420);
          v77(v70, v69, v49);
          uint64_t v79 = v49;
          uint64_t v80 = *v58;
          uint64_t v81 = v106;
          dispatch thunk of Collection.endIndex.getter();
          if (v80 == v107[0])
          {
            uint64_t v73 = v78;
            uint64_t v74 = 1;
          }
          else
          {
            long long v71 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
            (*v84)(v78);
            v71(v107, 0);
            uint64_t v72 = v104;
            v97(v104, v81, v56);
            dispatch thunk of Collection.formIndex(after:)();
            v18(v72, v56);
            uint64_t v73 = v78;
            uint64_t v74 = 0;
          }
          v88(v73, v74, 1, v79);
          uint64_t v49 = v79;
          uint64_t v75 = v101;
          sub_10000FB74(v78, v101, &qword_100524420);
          int v76 = v91(v75, 1, v79);
          v70 += v99;
          int64_t v57 = v92 + 1;
          uint64_t v65 = v75;
          uint64_t v69 = v100;
          uint64_t v59 = v87;
          uint64_t v66 = v90;
          if (v76 == 1) {
            goto LABEL_30;
          }
        }
        (*v83)(v69, v49);
        int64_t v60 = v93;
        int64_t v57 = v93;
      }
      uint64_t v2 = v105;
      *(void *)(*v105 + 16) = v60;
      uint64_t v46 = v102;
      uint64_t v53 = v96;
      sub_10000FB74(v102, v96, &qword_100524420);
    }
    while (v91(v53, 1, v49) != 1);
  }
  sub_10000FBD8(v46, &qword_100524420);
  sub_10000FBD8(v106, &qword_100524428);
  uint64_t v19 = v53;
  uint64_t v39 = &qword_100524420;
  return sub_10000FBD8(v19, v39);
}

uint64_t sub_1001A0A34(unint64_t a1)
{
  return sub_1001A0A4C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1001B47EC);
}

uint64_t sub_1001A0A4C(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1001A0C24(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B36D8(v1, (uint64_t)v12, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    Hasher._combine(_:)(1uLL);
    sub_1001B34C8((unint64_t *)&qword_100524E40, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    Hasher._combine(_:)(0);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    sub_1001B5120((uint64_t)v12, (uint64_t)v9, type metadata accessor for CVTrackSnapshot);
    Hasher._combine(_:)(0);
    sub_1001B34C8((unint64_t *)&qword_100524E40, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    sub_1003FFF94(a1);
    sub_1003FFF94(a1);
    Hasher._combine(_:)(v9[v7[7]]);
    if ((*(void *)&v9[v7[8]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v14 = *(void *)&v9[v7[8]];
    }
    else {
      Swift::UInt64 v14 = 0;
    }
    Hasher._combine(_:)(v14);
    if ((*(_DWORD *)&v9[v7[9]] & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v15 = *(_DWORD *)&v9[v7[9]];
    }
    else {
      Swift::UInt32 v15 = 0;
    }
    Hasher._combine(_:)(v15);
    return sub_1001B3678((uint64_t)v9, type metadata accessor for CVTrackSnapshot);
  }
}

uint64_t sub_1001A0F38(void *a1)
{
  uint64_t v31 = sub_10000F214(&qword_100524240);
  uint64_t v27 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  BOOL v37 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  int64_t v35 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_100524248);
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v26);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_10000F214(&qword_100524250);
  uint64_t v12 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  Swift::UInt64 v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1001B52B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001B36D8((uint64_t)v36, (uint64_t)v11, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = v27;
    uint64_t v16 = v30;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v35, v11, v30);
    char v41 = 1;
    sub_1001B530C();
    uint64_t v17 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v40 = 0;
    sub_1001B34C8(&qword_10051A048, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = v31;
    uint64_t v19 = v34;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v19)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v37, v18);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v16);
      unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
      uint64_t v21 = (uint64_t)v14;
    }
    else
    {
      uint64_t v36 = v14;
      uint64_t v25 = v33;
      char v39 = 1;
      sub_1001B5408();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v37, v18);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v35, v16);
      unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
      uint64_t v21 = (uint64_t)v36;
    }
    return v20(v21, v17);
  }
  else
  {
    sub_1001B5120((uint64_t)v11, (uint64_t)v8, type metadata accessor for CVTrackSnapshot);
    char v38 = 0;
    sub_1001B53B4();
    uint64_t v22 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_1001B34C8(&qword_100524260, 255, (void (*)(uint64_t))type metadata accessor for CVTrackSnapshot);
    uint64_t v23 = v29;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v23);
    sub_1001B3678((uint64_t)v8, type metadata accessor for CVTrackSnapshot);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v22);
  }
}

uint64_t sub_1001A1500@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v47 = sub_10000F214(&qword_100524208);
  uint64_t v43 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_100524210);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  uint64_t v42 = v5;
  __chkstk_darwin(v4);
  int64_t v45 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100524218);
  uint64_t v44 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v36 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = a1[3];
  uint64_t v48 = a1;
  sub_10000F3B0(a1, v19);
  sub_1001B52B8();
  uint64_t v20 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v48);
  }
  char v38 = v15;
  char v39 = v12;
  uint64_t v22 = v45;
  uint64_t v21 = v46;
  uint64_t v23 = v47;
  BOOL v37 = v18;
  uint64_t v49 = v10;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v27 = v49;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v7);
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v48);
  }
  if (*(unsigned char *)(v24 + 32))
  {
    char v53 = 1;
    sub_1001B530C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for UUID();
    char v52 = 0;
    sub_1001B34C8(&qword_10051A028, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v51 = 1;
    sub_1001B5360();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v31 = v44;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v21, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v7);
    uint64_t v32 = (uint64_t)v39;
    swift_storeEnumTagMultiPayload();
    uint64_t v33 = v32;
    uint64_t v34 = (uint64_t)v48;
  }
  else
  {
    char v50 = 0;
    sub_1001B53B4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for CVTrackSnapshot(0);
    sub_1001B34C8(&qword_100524FC0, 255, (void (*)(uint64_t))type metadata accessor for CVTrackSnapshot);
    uint64_t v29 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v7);
    uint64_t v34 = (uint64_t)v48;
    uint64_t v30 = (uint64_t)v38;
    swift_storeEnumTagMultiPayload();
    uint64_t v33 = v30;
  }
  uint64_t v35 = (uint64_t)v37;
  sub_1001B5120(v33, (uint64_t)v37, type metadata accessor for CVBundle.BundleType);
  sub_1001B5120(v35, v40, type metadata accessor for CVBundle.BundleType);
  return _s6Tamale17AnyLocalizedErrorVwxx_0(v34);
}

uint64_t sub_1001A1C34(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_1005241D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1001B50CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for CVBundle.BundleType(0);
  sub_1001B34C8(&qword_1005241E0, 255, (void (*)(uint64_t))type metadata accessor for CVBundle.BundleType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for CVBundle(0);
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 20));
    HIBYTE(v11) = 1;
    sub_10000F214(&qword_10051B740);
    sub_1001B5220(&qword_1005241E8, &qword_1005241F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 24));
    HIBYTE(v11) = 2;
    sub_10000F214(&qword_1005241C0);
    sub_1001B5188(&qword_1005241F8, &qword_100524200);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001A1ED4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100524198);
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v21 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CVBundle(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v22 = a1;
  sub_10000F3B0(a1, v13);
  sub_1001B50CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v22);
  }
  uint64_t v14 = v20;
  uint64_t v15 = (uint64_t)v12;
  LOBYTE(v24) = 0;
  sub_1001B34C8(&qword_1005241A8, 255, (void (*)(uint64_t))type metadata accessor for CVBundle.BundleType);
  uint64_t v16 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_1001B5120((uint64_t)v6, v15, type metadata accessor for CVBundle.BundleType);
  sub_10000F214(&qword_10051B740);
  char v23 = 1;
  sub_1001B5220(&qword_1005241B0, &qword_1005241B8);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v15 + *(int *)(v10 + 20)) = v24;
  sub_10000F214(&qword_1005241C0);
  char v23 = 2;
  sub_1001B5188(&qword_1005241C8, &qword_1005241D0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v16);
  *(void *)(v15 + *(int *)(v10 + 24)) = v24;
  sub_1001B36D8(v15, v19, type metadata accessor for CVBundle);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v22);
  return sub_1001B3678(v15, type metadata accessor for CVBundle);
}

uint64_t sub_1001A231C()
{
  return 1852270963;
}

uint64_t sub_1001A232C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1852270963 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001A23B4(uint64_t a1)
{
  unint64_t v2 = sub_1001B8640();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A23F0(uint64_t a1)
{
  unint64_t v2 = sub_1001B8640();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A242C(uint64_t a1)
{
  unint64_t v2 = sub_1001B8694();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A2468(uint64_t a1)
{
  unint64_t v2 = sub_1001B8694();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A24A4(void *a1)
{
  return sub_1001B804C(a1);
}

uint64_t sub_1001A24BC(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_1005243B8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_1005243C0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1001B8640();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001B8694();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1001A268C()
{
  if (*v0) {
    return 0x70756F7267;
  }
  else {
    return 1701080942;
  }
}

uint64_t sub_1001A26BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B8334(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A26E4(uint64_t a1)
{
  unint64_t v2 = sub_1001B52B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A2720(uint64_t a1)
{
  unint64_t v2 = sub_1001B52B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A275C()
{
  if (*v0) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t sub_1001A2778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B8410(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A27A0(uint64_t a1)
{
  unint64_t v2 = sub_1001B530C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A27DC(uint64_t a1)
{
  unint64_t v2 = sub_1001B530C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A2818()
{
  return 12383;
}

uint64_t sub_1001A2824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001A28A4(uint64_t a1)
{
  unint64_t v2 = sub_1001B53B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A28E0(uint64_t a1)
{
  unint64_t v2 = sub_1001B53B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1001A291C()
{
  Hasher.init(_seed:)();
  sub_1001A0C24((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001A2960()
{
  Hasher.init(_seed:)();
  sub_1001A0C24((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1001A299C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A1500(a1, a2);
}

uint64_t sub_1001A29B4(void *a1)
{
  return sub_1001A0F38(a1);
}

uint64_t sub_1001A29CC()
{
  uint64_t v1 = 0x6E6572646C696863;
  if (*v0 != 1) {
    uint64_t v1 = 0x6966697373616C63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1001A2A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001B84D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A2A54(uint64_t a1)
{
  unint64_t v2 = sub_1001B50CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A2A90(uint64_t a1)
{
  unint64_t v2 = sub_1001B50CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1001A2ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_1001A0C20(a1, a2) & 1) == 0
    || !sub_1003E09E8(*(void *)(a1 + *(int *)(a3 + 20)), *(void *)(a2 + *(int *)(a3 + 20))))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + *(int *)(a3 + 24));

  return sub_1003E1070(v6);
}

Swift::Int sub_1001A2B48(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_1001A0C24((uint64_t)v4);
  sub_10032D440((uint64_t)v4, *(void *)(v1 + *(int *)(a1 + 20)));
  sub_10032CC50((uint64_t)v4, *(void *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void sub_1001A2BAC(uint64_t a1, uint64_t a2)
{
  sub_1001A0C24(a1);
  sub_10032D440(a1, *(void *)(v2 + *(int *)(a2 + 20)));
  uint64_t v5 = *(void *)(v2 + *(int *)(a2 + 24));

  sub_10032CC50(a1, v5);
}

Swift::Int sub_1001A2C08(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  sub_1001A0C24((uint64_t)v5);
  sub_10032D440((uint64_t)v5, *(void *)(v2 + *(int *)(a2 + 20)));
  sub_10032CC50((uint64_t)v5, *(void *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_1001A2C68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A1ED4(a1, a2);
}

uint64_t sub_1001A2C80(void *a1)
{
  return sub_1001A1C34(a1);
}

uint64_t sub_1001A2C98@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3 = v2;
  uint64_t v6 = (int *)type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v6);
  uint64_t v47 = (uint64_t)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVBundle(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v41 - v13;
  uint64_t v49 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v49);
  uint64_t v46 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v48 = (uint64_t)v41 - v17;
  __chkstk_darwin(v18);
  uint64_t v50 = (uint64_t)v41 - v19;
  uint64_t v20 = *(void *)(v2 + *(int *)(v8 + 20));
  int64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = _swiftEmptyArrayStorage;
  if (v21)
  {
    uint64_t v42 = v6;
    uint64_t v43 = v8;
    uint64_t v44 = v2;
    uint64_t v45 = a1;
    char v51 = _swiftEmptyArrayStorage;
    uint64_t v23 = v20;
    swift_bridgeObjectRetain();
    sub_100040BFC(0, v21, 0);
    unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v41[1] = v23;
    uint64_t v25 = v23 + v24;
    uint64_t v26 = *(void *)(v9 + 72);
    uint64_t v22 = v51;
    do
    {
      uint64_t v27 = sub_1001B36D8(v25, (uint64_t)v11, type metadata accessor for CVBundle);
      sub_1001A2C98(v27, a2);
      sub_1001B3678((uint64_t)v11, type metadata accessor for CVBundle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040BFC(0, v22[2] + 1, 1);
        uint64_t v22 = v51;
      }
      unint64_t v29 = v22[2];
      unint64_t v28 = v22[3];
      if (v29 >= v28 >> 1)
      {
        sub_100040BFC(v28 > 1, v29 + 1, 1);
        uint64_t v22 = v51;
      }
      void v22[2] = v29 + 1;
      sub_1001B5120((uint64_t)v14, (uint64_t)v22 + v24 + v29 * v26, type metadata accessor for CVBundle);
      v25 += v26;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    uint64_t v3 = v44;
    a1 = v45;
    uint64_t v6 = v42;
    uint64_t v8 = v43;
  }
  uint64_t v30 = v48;
  sub_1001B36D8(v3, v48, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v31 = v50;
    sub_1001B36D8(v3, v50, type metadata accessor for CVBundle.BundleType);
    uint64_t v32 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v30, v32);
  }
  else
  {
    uint64_t v33 = v30;
    uint64_t v34 = v47;
    sub_1001B5120(v33, v47, type metadata accessor for CVTrackSnapshot);
    uint64_t v35 = type metadata accessor for UUID();
    uint64_t v36 = (uint64_t)v46;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v46, v34, v35);
    sub_1003FDDDC(v36 + v6[5], a2);
    sub_1003FDDDC(v36 + v6[6], a2);
    uint64_t v37 = *(void *)(v34 + v6[8]);
    int v38 = *(_DWORD *)(v34 + v6[9]);
    *(unsigned char *)(v36 + v6[7]) = *(unsigned char *)(v34 + v6[7]);
    *(void *)(v36 + v6[8]) = v37;
    *(_DWORD *)(v36 + v6[9]) = v38;
    sub_1001B3678(v34, type metadata accessor for CVTrackSnapshot);
    swift_storeEnumTagMultiPayload();
    uint64_t v31 = v50;
    sub_1001B5120(v36, v50, type metadata accessor for CVBundle.BundleType);
  }
  uint64_t v39 = *(void *)(v3 + *(int *)(v8 + 24));
  sub_1001B5120(v31, a1, type metadata accessor for CVBundle.BundleType);
  *(void *)(a1 + *(int *)(v8 + 20)) = v22;
  *(void *)(a1 + *(int *)(v8 + 24)) = v39;
  return swift_bridgeObjectRetain();
}

size_t sub_1001A31A0()
{
  uint64_t v1 = type metadata accessor for CVBundle(0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B36D8(v0, (uint64_t)v7, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1001B3678((uint64_t)v7, type metadata accessor for CVBundle.BundleType);
    uint64_t v12 = *(void *)(v0 + *(int *)(v1 + 20));
    int64_t v13 = *(void *)(v12 + 16);
    uint64_t v14 = _swiftEmptyArrayStorage;
    if (v13)
    {
      uint64_t v37 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100040780(0, v13, 0);
      uint64_t v15 = v12 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v16 = *(void *)(v2 + 72);
      uint64_t v14 = v37;
      do
      {
        uint64_t v17 = sub_1001B36D8(v15, (uint64_t)v4, type metadata accessor for CVBundle);
        uint64_t v18 = sub_1001A31A0(v17);
        sub_1001B3678((uint64_t)v4, type metadata accessor for CVBundle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040780(0, v14[2] + 1, 1);
          uint64_t v14 = v37;
        }
        unint64_t v20 = v14[2];
        unint64_t v19 = v14[3];
        if (v20 >= v19 >> 1)
        {
          sub_100040780(v19 > 1, v20 + 1, 1);
          uint64_t v14 = v37;
        }
        void v14[2] = v20 + 1;
        v14[v20 + 4] = v18;
        v15 += v16;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
    }
    size_t v33 = sub_1001B3740((uint64_t)v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001B5120((uint64_t)v7, (uint64_t)v11, type metadata accessor for CVTrackSnapshot);
    sub_10000F214(&qword_100529830);
    unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_10043D4F0;
    sub_1001B36D8((uint64_t)v11, v22 + v21, type metadata accessor for CVTrackSnapshot);
    uint64_t v23 = *(void *)(v0 + *(int *)(v1 + 20));
    int64_t v24 = *(void *)(v23 + 16);
    uint64_t v25 = _swiftEmptyArrayStorage;
    if (v24)
    {
      uint64_t v36 = v22;
      uint64_t v37 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100040780(0, v24, 0);
      uint64_t v26 = *(unsigned __int8 *)(v2 + 80);
      v35[1] = v23;
      uint64_t v27 = v23 + ((v26 + 32) & ~v26);
      uint64_t v28 = *(void *)(v2 + 72);
      uint64_t v25 = v37;
      do
      {
        uint64_t v29 = sub_1001B36D8(v27, (uint64_t)v4, type metadata accessor for CVBundle);
        uint64_t v30 = sub_1001A31A0(v29);
        sub_1001B3678((uint64_t)v4, type metadata accessor for CVBundle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040780(0, v25[2] + 1, 1);
          uint64_t v25 = v37;
        }
        unint64_t v32 = v25[2];
        unint64_t v31 = v25[3];
        if (v32 >= v31 >> 1)
        {
          sub_100040780(v31 > 1, v32 + 1, 1);
          uint64_t v25 = v37;
        }
        v25[2] = v32 + 1;
        v25[v32 + 4] = v30;
        v27 += v28;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
      uint64_t v22 = v36;
    }
    uint64_t v37 = (void *)v22;
    sub_10019E854((uint64_t)v25);
    size_t v33 = (size_t)v37;
    sub_1001B3678((uint64_t)v11, type metadata accessor for CVTrackSnapshot);
  }
  return v33;
}

void *sub_1001A365C()
{
  uint64_t v25 = type metadata accessor for BundleClassification(0);
  uint64_t v1 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10019C820((uint64_t)v6);
  uint64_t v7 = sub_10004E390();
  sub_1001B3678((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v8 = *(void *)(v0 + *(int *)(type metadata accessor for CVBundle(0) + 24));
  int64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    int64_t v24 = v7;
    uint64_t v26 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100040904(0, v9, 0);
    uint64_t v11 = *(unsigned __int8 *)(v1 + 80);
    uint64_t v23 = v8;
    uint64_t v12 = v8 + ((v11 + 32) & ~v11);
    uint64_t v13 = *(void *)(v1 + 72);
    do
    {
      sub_1001B36D8(v12, (uint64_t)v3, type metadata accessor for BundleClassification);
      uint64_t v14 = v10;
      if (*(double *)&v3[*(int *)(v25 + 20)] > 0.0) {
        uint64_t v10 = sub_10038EA84();
      }
      sub_1001B3678((uint64_t)v3, type metadata accessor for BundleClassification);
      uint64_t v15 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040904(0, v15[2] + 1, 1);
        uint64_t v15 = v26;
      }
      unint64_t v17 = v15[2];
      unint64_t v16 = v15[3];
      if (v17 >= v16 >> 1)
      {
        sub_100040904(v16 > 1, v17 + 1, 1);
        uint64_t v15 = v26;
      }
      v15[2] = v17 + 1;
      v15[v17 + 4] = v10;
      v12 += v13;
      --v9;
      uint64_t v10 = v14;
    }
    while (v9);
    swift_bridgeObjectRelease();
    uint64_t v7 = v24;
    uint64_t v18 = v15[2];
    if (v18) {
      goto LABEL_11;
    }
LABEL_15:
    unint64_t v20 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v18 = _swiftEmptyArrayStorage[2];
  if (!v18) {
    goto LABEL_15;
  }
LABEL_11:
  swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  unint64_t v20 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v21 = v15[v19++ + 4];
    uint64_t v26 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10019F23C(v21);
    swift_bridgeObjectRelease();
    unint64_t v20 = v26;
  }
  while (v18 != v19);
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v26 = v7;
  sub_10019F23C((uint64_t)v20);
  return v26;
}

uint64_t sub_1001A3970@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v7);
  int64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B36D8(v2, (uint64_t)v9, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, v9, v10);
  }
  else
  {
    sub_1001B5120((uint64_t)v9, (uint64_t)v6, type metadata accessor for CVTrackSnapshot);
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, v6, v12);
    return sub_1001B3678((uint64_t)v6, type metadata accessor for CVTrackSnapshot);
  }
}

void *sub_1001A3B2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVDetection();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B36D8(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1001B3678((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v8 = &off_1004E5AA8;
      break;
    case 2u:
      sub_1001B3678((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v8 = &off_1004E5A08;
      break;
    case 3u:
    case 4u:
      sub_1001B3678((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v8 = &off_1004E5AD0;
      break;
    case 5u:
      sub_1001B3678((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v8 = _swiftEmptyArrayStorage;
      break;
    default:
      sub_1001B5120((uint64_t)v7, (uint64_t)v4, type metadata accessor for ObjectDetectorResult);
      int64_t v9 = &v4[*(int *)(v2 + 28)];
      uint64_t v10 = *(void *)v9;
      uint64_t v11 = *((void *)v9 + 1);
      BOOL v12 = *(void *)v9 == 1852270963 && v11 == 0xE400000000000000;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v8 = &off_1004E5A30;
      }
      else
      {
        uint64_t v8 = &off_1004E5A58;
        BOOL v14 = v10 == 0x746E656D75636F64 && v11 == 0xE800000000000000;
        if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          uint64_t v8 = &off_1004E5A80;
        }
      }
      sub_1001B3678((uint64_t)v4, type metadata accessor for ObjectDetectorResult);
      break;
  }
  return v8;
}

uint64_t sub_1001A3DEC()
{
  type metadata accessor for BundleActor();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  qword_10055E400 = v0;
  return result;
}

uint64_t sub_1001A3E28()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BundleActor()
{
  return self;
}

uint64_t sub_1001A3E7C()
{
  if (qword_100517F50 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t sub_1001A3ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for BundleActor();

  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_1001A3F10(uint64_t a1, float a2)
{
  uint64_t v5 = sub_10000F214((uint64_t *)&unk_100528AB0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + 24) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 32) = &_swiftEmptyDictionarySingleton;
  *(void *)(v2 + 40) = &_swiftEmptyDictionarySingleton;
  *(void *)(v2 + 48) = 0;
  *(float *)(v2 + 16) = a2;
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  BOOL v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = 0;
  *((void *)v14 + 3) = 0;
  *((void *)v14 + 4) = v2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], v8, v5);
  swift_retain();
  sub_100064D5C((uint64_t)v11, (uint64_t)&unk_100524318, (uint64_t)v14);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v2;
}

uint64_t sub_1001A412C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100528AB0);
  v5[4] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[5] = v7;
  v5[6] = *(void *)(v7 + 64);
  v5[7] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v5[8] = swift_task_alloc();
  return _swift_task_switch(sub_1001A4228, 0, 0);
}

uint64_t sub_1001A4228()
{
  if (qword_100517F50 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_10055E400;
  return _swift_task_switch(sub_1001A42BC, v0, 0);
}

uint64_t sub_1001A42BC()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v17 = v2;
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = v0[2];
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v6, v5);
  uint64_t v9 = qword_10055E400;
  uint64_t v11 = sub_1001B34C8(&qword_100524188, v10, (void (*)(uint64_t))type metadata accessor for BundleActor);
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v13 = (v3 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v9;
  *(void *)(v14 + 24) = v11;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v14 + v12, v17, v5);
  *(void *)(v14 + v13) = v7;
  swift_retain();
  swift_retain();
  *(void *)(v7 + 48) = sub_100064D5C(v1, (uint64_t)&unk_100524328, v14);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1001A4490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100528AD0);
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  if (qword_100517F50 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_10055E400;
  v5[8] = qword_10055E400;
  return _swift_task_switch(sub_1001A458C, v7, 0);
}

uint64_t sub_1001A458C()
{
  sub_10000F214((uint64_t *)&unk_100528AB0);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = qword_10055E400;
  uint64_t v3 = sub_1001B34C8(&qword_100524188, v2, (void (*)(uint64_t))type metadata accessor for BundleActor);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  void *v4 = v0;
  v4[1] = sub_1001A469C;
  uint64_t v5 = *(void *)(v0 + 40);
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, v1, v3, v5);
}

uint64_t sub_1001A469C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A47AC, v1, 0);
}

uint64_t sub_1001A47AC()
{
  if (v0[2])
  {
    sub_1001A7348(v0[2]);
    swift_bridgeObjectRelease();
    uint64_t v1 = qword_10055E400;
    uint64_t v3 = sub_1001B34C8(&qword_100524188, v2, (void (*)(uint64_t))type metadata accessor for BundleActor);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[9] = v4;
    void *v4 = v0;
    v4[1] = sub_1001A469C;
    uint64_t v5 = v0[5];
    return AsyncStream.Iterator.next(isolation:)(v0 + 2, v1, v3, v5);
  }
  else
  {
    (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1001A4914()
{
  uint64_t v0 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v38 = (uint64_t)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v35 - 8);
  uint64_t v36 = *(void *)(v2 + 64);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v29 - v5;
  uint64_t v7 = sub_10000F214(&qword_1005242D0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000F214(&qword_1005242C8);
  uint64_t v11 = *(void *)(v33 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v33);
  unint64_t v31 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - v14;
  sub_10000F214(&qword_10051B740);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v7);
  uint64_t v16 = v15;
  uint64_t v30 = v15;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v17 = v6;
  unint64_t v32 = v6;
  UUID.init()();
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v38, 1, 1, v18);
  uint64_t v19 = v2;
  unint64_t v20 = v34;
  uint64_t v21 = v35;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v34, v17, v35);
  uint64_t v22 = v31;
  uint64_t v23 = v16;
  uint64_t v24 = v33;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v31, v23, v33);
  unint64_t v25 = (*(unsigned __int8 *)(v19 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v26 = (v36 + *(unsigned __int8 *)(v11 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v27 = (char *)swift_allocObject();
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 3) = 0;
  *((void *)v27 + 4) = v37;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v27[v25], v20, v21);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v27[v26], v22, v24);
  swift_retain();
  sub_100064D5C(v38, (uint64_t)&unk_1005242E0, (uint64_t)v27);
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v32, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v30, v24);
}

uint64_t sub_1001A4D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  uint64_t v7 = sub_10000F214(&qword_1005242C0);
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  sub_10000F214(&qword_1005242E8);
  v6[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v6[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[14] = v9;
  v6[15] = *(void *)(v9 + 64);
  v6[16] = swift_task_alloc();
  return _swift_task_switch(sub_1001A4EBC, 0, 0);
}

uint64_t sub_1001A4EBC()
{
  if (qword_100517F50 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_10055E400;
  return _swift_task_switch(sub_1001A4F50, v0, 0);
}

uint64_t sub_1001A4F50()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[17] = v7;
  v0[18] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v5, v2);
  uint64_t v8 = sub_10000F214(&qword_1005242C8);
  v0[19] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, v6, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  swift_beginAccess();
  sub_1003A406C(v4, v1);
  swift_endAccess();
  return _swift_task_switch(sub_1001A50B0, 0, 0);
}

uint64_t sub_1001A50B0()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[17];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[7];
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  v2(v1, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  AsyncStream.Continuation.onTermination.setter();
  uint64_t v9 = qword_10055E400;
  return _swift_task_switch(sub_1001A51E8, v9, 0);
}

uint64_t sub_1001A51E8()
{
  *(void *)(v0 + 160) = *(void *)(*(void *)(v0 + 48) + 24);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1001A525C, 0, 0);
}

uint64_t sub_1001A525C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  v0[5] = v0[20];
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001A5318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v4);
    unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v14[v13], (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    sub_100064D5C((uint64_t)v9, (uint64_t)&unk_1005242F8, (uint64_t)v14);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001A5510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  sub_10000F214(&qword_1005242E8);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001A55A4, 0, 0);
}

uint64_t sub_1001A55A4()
{
  if (qword_100517F50 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_10055E400;
  return _swift_task_switch(sub_1001A5638, v0, 0);
}

uint64_t sub_1001A5638()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  swift_beginAccess();
  sub_1003F3B1C(v1, v2);
  sub_10000FBD8(v2, &qword_1005242E8);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001A56EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10019D408((uint64_t)v6);
  uint64_t v7 = sub_1001A3B2C();
  sub_1001B3678((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v8 = v7[2];
  if (v8)
  {
    uint64_t v9 = (unsigned __int8 *)(v7 + 4);
    uint64_t v10 = _swiftEmptyArrayStorage;
    do
    {
      int v11 = *v9++;
      if (v11 == 3)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_100329F6C(0, v10[2] + 1, 1, v10);
        }
        unint64_t v13 = v10[2];
        unint64_t v12 = v10[3];
        unint64_t v14 = v13 + 1;
        if (v13 >= v12 >> 1) {
          uint64_t v10 = sub_100329F6C((void *)(v12 > 1), v13 + 1, 1, v10);
        }
        void v10[2] = v14;
      }
      --v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = v10[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  long long v41 = xmmword_10043D4F0;
  while (1)
  {
    uint64_t v17 = *a1;
    if (*(void *)(*a1 + 16))
    {
      uint64_t v18 = sub_100331224();
      uint64_t v19 = _swiftEmptyArrayStorage;
      if (v20)
      {
        uint64_t v19 = *(void **)(*(void *)(v17 + 56) + 8 * v18);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v19 = _swiftEmptyArrayStorage;
    }
    sub_10000F214(&qword_10051A070);
    uint64_t v21 = *(void *)(type metadata accessor for CVBundle(0) - 8);
    unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = v41;
    sub_1001B36D8(a2, v23 + v22, type metadata accessor for CVBundle);
    uint64_t v42 = v19;
    sub_10019FC44(v23, (uint64_t (*)(void))sub_100329F38, type metadata accessor for CVBundle);
    uint64_t v24 = v42;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v42 = (void *)*a1;
    unint64_t v26 = v42;
    *a1 = 0x8000000000000000;
    unint64_t v28 = sub_100331224();
    uint64_t v29 = v26[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_32:
      __break(1u);
    }
    char v32 = v27;
    if (v26[3] < v31) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v35 = v42;
      if (v27) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1001F65A0();
      uint64_t v35 = v42;
      if (v32)
      {
LABEL_13:
        uint64_t v16 = v35[7];
        swift_bridgeObjectRelease();
        *(void *)(v16 + 8 * v28) = v24;
        goto LABEL_14;
      }
    }
LABEL_26:
    v35[(v28 >> 6) + 8] |= 1 << v28;
    *(void *)(v35[7] + 8 * v28) = v24;
    uint64_t v36 = v35[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_32;
    }
    void v35[2] = v38;
LABEL_14:
    *a1 = (uint64_t)v35;
    swift_bridgeObjectRelease();
    if (!--v15) {
      return swift_bridgeObjectRelease();
    }
  }
  sub_1001EE5D0(v31, isUniquelyReferenced_nonNull_native);
  uint64_t v33 = sub_100331224();
  if ((v32 & 1) == (v34 & 1))
  {
    unint64_t v28 = v33;
    uint64_t v35 = v42;
    if (v32) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001A5AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v9 - 8);
  int v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  v14.n128_f64[0] = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16) < 2uLL)
  {
    uint64_t v23 = type metadata accessor for CVBundle(0);
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
    return v24(a3, 1, 1, v23);
  }
  else
  {
    if (*(void *)(a2 + 16) && (uint64_t v17 = sub_100331224(), (v18 & 1) != 0))
    {
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      v19(v11, *(void *)(a2 + 56) + *(void *)(v13 + 72) * v17, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
        v19(v8, (uint64_t)v16, v12);
        swift_storeEnumTagMultiPayload();
        char v20 = *(void (**)(char *, uint64_t))(v13 + 8);
        swift_bridgeObjectRetain();
        v20(v16, v12);
        sub_1001B5120((uint64_t)v8, a3, type metadata accessor for CVBundle.BundleType);
        uint64_t v21 = type metadata accessor for CVBundle(0);
        *(void *)(a3 + *(int *)(v21 + 20)) = a1;
        *(void *)(a3 + *(int *)(v21 + 24)) = _swiftEmptyArrayStorage;
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a3, 0, 1, v21);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))(v11, 1, 1, v12, v14);
    }
    sub_10000FBD8((uint64_t)v11, (uint64_t *)&unk_100524ED0);
    UUID.init()();
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = type metadata accessor for CVBundle(0);
    *(void *)(a3 + *(int *)(v25 + 20)) = a1;
    *(void *)(a3 + *(int *)(v25 + 24)) = _swiftEmptyArrayStorage;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(a3, 0, 1, v25);
    return swift_bridgeObjectRetain();
  }
}

void *sub_1001A5EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v120 = a2;
  uint64_t v135 = type metadata accessor for CVBundle(0);
  uint64_t v138 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v132 = (char *)&v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v119 - v5;
  uint64_t v128 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v128);
  uint64_t v126 = (uint64_t)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v125 = (uint64_t)&v119 - v9;
  __chkstk_darwin(v10);
  uint64_t v124 = (uint64_t)&v119 - v11;
  uint64_t v12 = type metadata accessor for CVDetection();
  __chkstk_darwin(v12);
  uint64_t v137 = (uint64_t)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v136 = (uint64_t *)((char *)&v119 - v15);
  __chkstk_darwin(v16);
  char v18 = (char *)&v119 - v17;
  uint64_t v139 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v19 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v131 = (uint64_t)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v134 = (uint64_t)&v119 - v22;
  __chkstk_darwin(v23);
  uint64_t v130 = (uint64_t)&v119 - v24;
  __chkstk_darwin(v25);
  char v27 = (char *)&v119 - v26;
  __chkstk_darwin(v28);
  BOOL v30 = (char *)&v119 - v29;
  __chkstk_darwin(v31);
  uint64_t v129 = (uint64_t *)((char *)&v119 - v32);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v119 - v34;
  uint64_t v141 = _swiftEmptyArrayStorage;
  uint64_t v36 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v122 = a1;
  uint64_t v133 = v12;
  uint64_t v121 = v19;
  uint64_t v140 = v36;
  if (v36)
  {
    uint64_t v37 = 0;
    uint64_t v38 = *(unsigned __int8 *)(v19 + 80);
    uint64_t v39 = *(void *)(v19 + 72);
    uint64_t v123 = (v38 + 32) & ~v38;
    uint64_t v40 = a1 + v123;
    uint64_t v127 = a1 + v123;
    do
    {
      uint64_t v41 = v40 + v39 * v37++;
      sub_1001B36D8(v41, (uint64_t)v35, type metadata accessor for CVTrackSnapshot);
      sub_1001B36D8((uint64_t)&v35[*(int *)(v139 + 24)], (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_1001B3678((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v42 = &off_1004E5AA8;
          uint64_t v43 = 1;
          goto LABEL_24;
        case 2u:
          sub_1001B3678((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v42 = &off_1004E5A08;
          uint64_t v43 = 1;
          goto LABEL_24;
        case 3u:
        case 4u:
          sub_1001B3678((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v42 = &off_1004E5AD0;
          uint64_t v43 = 2;
          goto LABEL_24;
        case 5u:
          sub_1001B3678((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v42 = _swiftEmptyArrayStorage;
          uint64_t v43 = _swiftEmptyArrayStorage[2];
          if (v43) {
            goto LABEL_24;
          }
          goto LABEL_3;
        default:
          uint64_t v44 = v124;
          sub_1001B5120((uint64_t)v18, v124, type metadata accessor for ObjectDetectorResult);
          uint64_t v45 = (uint64_t *)(v44 + *(int *)(v128 + 28));
          uint64_t v46 = *v45;
          uint64_t v47 = v45[1];
          BOOL v48 = *v45 == 1852270963 && v47 == 0xE400000000000000;
          uint64_t v42 = &off_1004E5A30;
          if (!v48 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            BOOL v49 = v46 == 0x746E656D75636F64 && v47 == 0xE800000000000000;
            uint64_t v42 = &off_1004E5A58;
            if (!v49)
            {
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                uint64_t v42 = &off_1004E5A58;
              }
              else {
                uint64_t v42 = &off_1004E5A80;
              }
            }
          }
          sub_1001B3678(v124, type metadata accessor for ObjectDetectorResult);
          uint64_t v40 = v127;
          uint64_t v43 = v42[2];
          if (!v43) {
            goto LABEL_3;
          }
LABEL_24:
          uint64_t v50 = 0;
          break;
      }
      while (*((unsigned char *)v42 + v50 + 32) != 2)
      {
        if (v43 == ++v50)
        {
LABEL_3:
          swift_bridgeObjectRelease();
          sub_1001B3678((uint64_t)v35, type metadata accessor for CVTrackSnapshot);
          goto LABEL_4;
        }
      }
      swift_bridgeObjectRelease();
      sub_1001B5120((uint64_t)v35, (uint64_t)v129, type metadata accessor for CVTrackSnapshot);
      char v51 = v141;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040C38(0, v51[2] + 1, 1);
        char v51 = v141;
      }
      unint64_t v53 = v51[2];
      unint64_t v52 = v51[3];
      if (v53 >= v52 >> 1)
      {
        sub_100040C38(v52 > 1, v53 + 1, 1);
        char v51 = v141;
      }
      v51[2] = v53 + 1;
      sub_1001B5120((uint64_t)v129, (uint64_t)v51 + v123 + v53 * v39, type metadata accessor for CVTrackSnapshot);
      uint64_t v40 = v127;
LABEL_4:
      ;
    }
    while (v37 != v140);
    double v54 = v141;
    uint64_t v19 = v121;
  }
  else
  {
    double v54 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  int64_t v55 = v54[2];
  if (v55)
  {
    uint64_t v141 = _swiftEmptyArrayStorage;
    sub_100040BFC(0, v55, 0);
    uint64_t v56 = *(unsigned __int8 *)(v19 + 80);
    uint64_t v129 = v54;
    uint64_t v57 = (uint64_t)v54 + ((v56 + 32) & ~v56);
    uint64_t v58 = *(void *)(v19 + 72);
    do
    {
      sub_1001B36D8(v57, (uint64_t)v30, type metadata accessor for CVTrackSnapshot);
      sub_1001B36D8((uint64_t)v30, (uint64_t)v6, type metadata accessor for CVTrackSnapshot);
      type metadata accessor for CVBundle.BundleType(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v59 = v135;
      *(void *)&v6[*(int *)(v135 + 20)] = _swiftEmptyArrayStorage;
      *(void *)&v6[*(int *)(v59 + 24)] = _swiftEmptyArrayStorage;
      sub_1001B3678((uint64_t)v30, type metadata accessor for CVTrackSnapshot);
      int64_t v60 = v141;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040BFC(0, v60[2] + 1, 1);
        int64_t v60 = v141;
      }
      unint64_t v62 = v60[2];
      unint64_t v61 = v60[3];
      if (v62 >= v61 >> 1)
      {
        sub_100040BFC(v61 > 1, v62 + 1, 1);
        int64_t v60 = v141;
      }
      v60[2] = v62 + 1;
      sub_1001B5120((uint64_t)v6, (uint64_t)v60+ ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))+ *(void *)(v138 + 72) * v62, type metadata accessor for CVBundle);
      v57 += v58;
      --v55;
    }
    while (v55);
    swift_release();
    uint64_t v19 = v121;
  }
  else
  {
    swift_release();
    int64_t v60 = _swiftEmptyArrayStorage;
  }
  uint64_t v141 = _swiftEmptyArrayStorage;
  uint64_t v63 = v122;
  swift_bridgeObjectRetain();
  if (v140)
  {
    uint64_t v64 = 0;
    unint64_t v65 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v66 = *(void *)(v19 + 72);
    uint64_t v67 = v63 + v65;
    do
    {
      uint64_t v68 = v67 + v66 * v64++;
      sub_1001B36D8(v68, (uint64_t)v27, type metadata accessor for CVTrackSnapshot);
      sub_1001B36D8((uint64_t)&v27[*(int *)(v139 + 24)], (uint64_t)v136, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_1001B3678((uint64_t)v136, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v69 = &off_1004E5AA8;
          uint64_t v70 = 1;
          goto LABEL_67;
        case 2u:
          sub_1001B3678((uint64_t)v136, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v69 = &off_1004E5A08;
          uint64_t v70 = 1;
          goto LABEL_67;
        case 3u:
        case 4u:
          sub_1001B3678((uint64_t)v136, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v69 = &off_1004E5AD0;
          uint64_t v70 = 2;
          goto LABEL_67;
        case 5u:
          sub_1001B3678((uint64_t)v136, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v69 = _swiftEmptyArrayStorage;
          uint64_t v70 = _swiftEmptyArrayStorage[2];
          if (v70) {
            goto LABEL_67;
          }
          goto LABEL_46;
        default:
          uint64_t v71 = v125;
          sub_1001B5120((uint64_t)v136, v125, type metadata accessor for ObjectDetectorResult);
          uint64_t v72 = (uint64_t *)(v71 + *(int *)(v128 + 28));
          uint64_t v73 = *v72;
          uint64_t v74 = v72[1];
          BOOL v75 = *v72 == 1852270963 && v74 == 0xE400000000000000;
          uint64_t v69 = &off_1004E5A30;
          if (!v75 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            BOOL v76 = v73 == 0x746E656D75636F64 && v74 == 0xE800000000000000;
            uint64_t v69 = &off_1004E5A58;
            if (!v76)
            {
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                uint64_t v69 = &off_1004E5A58;
              }
              else {
                uint64_t v69 = &off_1004E5A80;
              }
            }
          }
          sub_1001B3678(v125, type metadata accessor for ObjectDetectorResult);
          uint64_t v70 = v69[2];
          if (!v70) {
            goto LABEL_46;
          }
LABEL_67:
          uint64_t v77 = 0;
          break;
      }
      while (*((unsigned char *)v69 + v77 + 32) != 1)
      {
        if (v70 == ++v77)
        {
LABEL_46:
          swift_bridgeObjectRelease();
          sub_1001B3678((uint64_t)v27, type metadata accessor for CVTrackSnapshot);
          goto LABEL_47;
        }
      }
      swift_bridgeObjectRelease();
      sub_1001B5120((uint64_t)v27, v130, type metadata accessor for CVTrackSnapshot);
      uint64_t v78 = v141;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040C38(0, v78[2] + 1, 1);
        uint64_t v78 = v141;
      }
      unint64_t v80 = v78[2];
      unint64_t v79 = v78[3];
      if (v80 >= v79 >> 1)
      {
        sub_100040C38(v79 > 1, v80 + 1, 1);
        uint64_t v78 = v141;
      }
      v78[2] = v80 + 1;
      sub_1001B5120(v130, (uint64_t)v78 + v65 + v80 * v66, type metadata accessor for CVTrackSnapshot);
LABEL_47:
      ;
    }
    while (v64 != v140);
    uint64_t v81 = v141;
    uint64_t v63 = v122;
  }
  else
  {
    uint64_t v81 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v82 = v119;
  swift_retain();
  uint64_t v136 = sub_1001B5830((uint64_t)v81, (uint64_t)v60, v82);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_release();
  uint64_t v141 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  if (v140)
  {
    uint64_t v83 = 0;
    unint64_t v84 = (*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
    uint64_t v85 = *(void *)(v121 + 72);
    uint64_t v86 = v63 + v84;
    do
    {
      uint64_t v87 = v86 + v85 * v83++;
      uint64_t v88 = v134;
      sub_1001B36D8(v87, v134, type metadata accessor for CVTrackSnapshot);
      sub_1001B36D8(v88 + *(int *)(v139 + 24), v137, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_1001B3678(v137, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v89 = &off_1004E5AA8;
          uint64_t v90 = 1;
          goto LABEL_101;
        case 2u:
          sub_1001B3678(v137, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v89 = &off_1004E5A08;
          uint64_t v90 = 1;
          goto LABEL_101;
        case 3u:
        case 4u:
          sub_1001B3678(v137, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v89 = &off_1004E5AD0;
          uint64_t v90 = 2;
          goto LABEL_101;
        case 5u:
          sub_1001B3678(v137, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v89 = _swiftEmptyArrayStorage;
          uint64_t v90 = _swiftEmptyArrayStorage[2];
          if (v90) {
            goto LABEL_101;
          }
          goto LABEL_80;
        default:
          uint64_t v91 = v126;
          sub_1001B5120(v137, v126, type metadata accessor for ObjectDetectorResult);
          int64_t v92 = (uint64_t *)(v91 + *(int *)(v128 + 28));
          uint64_t v93 = *v92;
          uint64_t v94 = v92[1];
          BOOL v95 = *v92 == 1852270963 && v94 == 0xE400000000000000;
          uint64_t v89 = &off_1004E5A30;
          if (!v95 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            BOOL v96 = v93 == 0x746E656D75636F64 && v94 == 0xE800000000000000;
            uint64_t v89 = &off_1004E5A58;
            if (!v96)
            {
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                uint64_t v89 = &off_1004E5A58;
              }
              else {
                uint64_t v89 = &off_1004E5A80;
              }
            }
          }
          sub_1001B3678(v126, type metadata accessor for ObjectDetectorResult);
          uint64_t v90 = v89[2];
          if (!v90) {
            goto LABEL_80;
          }
LABEL_101:
          uint64_t v97 = 0;
          break;
      }
      while (*((unsigned char *)v89 + v97 + 32))
      {
        if (v90 == ++v97)
        {
LABEL_80:
          swift_bridgeObjectRelease();
          sub_1001B3678(v134, type metadata accessor for CVTrackSnapshot);
          goto LABEL_81;
        }
      }
      swift_bridgeObjectRelease();
      sub_1001B5120(v134, v131, type metadata accessor for CVTrackSnapshot);
      uint64_t v98 = v141;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040C38(0, v98[2] + 1, 1);
        uint64_t v98 = v141;
      }
      unint64_t v100 = v98[2];
      unint64_t v99 = v98[3];
      if (v100 >= v99 >> 1)
      {
        sub_100040C38(v99 > 1, v100 + 1, 1);
        uint64_t v98 = v141;
      }
      v98[2] = v100 + 1;
      sub_1001B5120(v131, (uint64_t)v98 + v84 + v100 * v85, type metadata accessor for CVTrackSnapshot);
LABEL_81:
      ;
    }
    while (v83 != v140);
    uint64_t v101 = v141;
  }
  else
  {
    uint64_t v101 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  int64_t v102 = v101[2];
  if (v102)
  {
    uint64_t v141 = _swiftEmptyArrayStorage;
    sub_100040BFC(0, v102, 0);
    uint64_t v103 = (uint64_t)v101
         + ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80));
    uint64_t v104 = *(void *)(v121 + 72);
    uint64_t v105 = (uint64_t)v132;
    do
    {
      sub_1001B36D8(v103, (uint64_t)v30, type metadata accessor for CVTrackSnapshot);
      sub_1001B36D8((uint64_t)v30, v105, type metadata accessor for CVTrackSnapshot);
      type metadata accessor for CVBundle.BundleType(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v106 = v135;
      *(void *)(v105 + *(int *)(v135 + 20)) = _swiftEmptyArrayStorage;
      *(void *)(v105 + *(int *)(v106 + 24)) = _swiftEmptyArrayStorage;
      sub_1001B3678((uint64_t)v30, type metadata accessor for CVTrackSnapshot);
      uint64_t v107 = v141;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040BFC(0, v107[2] + 1, 1);
        uint64_t v107 = v141;
      }
      unint64_t v109 = v107[2];
      unint64_t v108 = v107[3];
      uint64_t v110 = (uint64_t)v132;
      if (v109 >= v108 >> 1)
      {
        sub_100040BFC(v108 > 1, v109 + 1, 1);
        uint64_t v110 = (uint64_t)v132;
        uint64_t v107 = v141;
      }
      v107[2] = v109 + 1;
      uint64_t v105 = v110;
      sub_1001B5120(v110, (uint64_t)v107+ ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))+ *(void *)(v138 + 72) * v109, type metadata accessor for CVBundle);
      v103 += v104;
      --v102;
    }
    while (v102);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v107 = _swiftEmptyArrayStorage;
  }
  uint64_t v111 = (void *)sub_100331278(_swiftEmptyArrayStorage);
  uint64_t v141 = v111;
  uint64_t v112 = v136;
  uint64_t v113 = v136[2];
  if (v113)
  {
    uint64_t v114 = (uint64_t)v136
         + ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80));
    uint64_t v115 = *(void *)(v138 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1001A56EC((uint64_t *)&v141, v114);
      v114 += v115;
      --v113;
    }
    while (v113);
    uint64_t v111 = (void *)swift_bridgeObjectRelease();
    uint64_t v116 = (uint64_t)v141;
  }
  else
  {
    uint64_t v116 = (uint64_t)v111;
  }
  __chkstk_darwin(v111);
  *(&v119 - 2) = v120;
  uint64_t v117 = sub_1001B545C(v116, (void (*)(uint64_t))sub_1001B6F70);
  swift_bridgeObjectRelease();
  uint64_t v141 = v112;
  sub_10019FC44((uint64_t)v107, (uint64_t (*)(void))sub_100329F38, type metadata accessor for CVBundle);
  sub_10019FC44((uint64_t)v117, (uint64_t (*)(void))sub_100329F38, type metadata accessor for CVBundle);
  return v141;
}

BOOL sub_1001A721C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)(a3 + 16);
  type metadata accessor for CVTrackSnapshot(0);
  sub_1003FEC34(v20);
  uint64_t v4 = v21;
  uint64_t v5 = v22;
  sub_10000F3B0(v20, v21);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 64))(v19, v4, v5);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v20);
  double v6 = sub_1003FD844();
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  sub_10019E198((uint64_t)v20);
  v25.origin.x = sub_1003FD844();
  v25.origin.y = v13;
  double v15 = v14;
  double v17 = v16;
  v23.origin.x = v6;
  v23.origin.y = v8;
  v23.size.width = v10;
  v23.size.height = v12;
  v25.size.width = v15;
  v25.size.height = v17;
  CGRect v24 = CGRectIntersection(v23, v25);
  return v15 * v17 * v3 <= v24.size.width * v24.size.height;
}

uint64_t sub_1001A7348(uint64_t a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v3 - 8);
  v189 = (char *)&v186 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = type metadata accessor for CVDetection();
  __chkstk_darwin(v219);
  double v6 = (char *)&v186 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v225 = (uint64_t)&v186 - v8;
  uint64_t v224 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v224);
  uint64_t v228 = (uint64_t)&v186 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = type metadata accessor for BundleClassification(0);
  uint64_t v190 = *(void *)(v218 - 8);
  __chkstk_darwin(v218);
  uint64_t v229 = (uint64_t)&v186 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v198 = sub_10000F214(&qword_100524278);
  __chkstk_darwin(v198);
  v197 = (char *)&v186 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v211 = (uint64_t)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v226 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v226 - 8);
  __chkstk_darwin(v226);
  v212 = (char *)&v186 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v217 = (char *)&v186 - v17;
  __chkstk_darwin(v18);
  v209 = (char *)&v186 - v19;
  __chkstk_darwin(v20);
  v216 = (char *)&v186 - v21;
  __chkstk_darwin(v22);
  v223 = (char *)&v186 - v23;
  __chkstk_darwin(v24);
  v205 = (char *)&v186 - v25;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v186 - v27;
  uint64_t v29 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v29 - 8);
  v200 = (char *)&v186 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v195 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v186 - v32);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v186 - v34;
  uint64_t v36 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v36);
  v215 = (uint64_t *)((char *)&v186 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v38);
  v207 = (char *)&v186 - v39;
  __chkstk_darwin(v40);
  v206 = (char *)&v186 - v41;
  uint64_t v42 = type metadata accessor for CVBundle(0);
  uint64_t v43 = *(void *)(v42 - 8);
  __chkstk_darwin(v42 - 8);
  uint64_t v196 = (uint64_t)&v186 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  uint64_t v227 = (uint64_t)&v186 - v46;
  __chkstk_darwin(v47);
  uint64_t v222 = (uint64_t)&v186 - v48;
  unint64_t v188 = v49;
  __chkstk_darwin(v50);
  unint64_t v52 = (char *)&v186 - v51;
  v213 = (void *)sub_100331360((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v191 = v1;
  uint64_t v53 = *(void *)(v1 + 24);
  uint64_t v54 = *(void *)(v53 + 16);
  v208 = v6;
  uint64_t v221 = v14;
  uint64_t v199 = v43;
  v220 = (void (**)(char *, uint64_t, uint64_t))v36;
  if (v54)
  {
    uint64_t v187 = a1;
    uint64_t v55 = v53 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
    v204 = (void (**)(uint64_t, uint64_t))(v14 + 8);
    v194 = (void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v203 = (void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v210 = v14 + 56;
    v202 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    v192 = (char *)(v14 + 40);
    uint64_t v214 = *(void *)(v43 + 72);
    uint64_t v186 = v53;
    swift_bridgeObjectRetain();
    uint64_t v56 = v226;
    uint64_t v57 = (uint64_t)v207;
    uint64_t v58 = (uint64_t)v206;
    unint64_t v201 = (unint64_t)v28;
    v193 = v35;
    do
    {
      sub_1001B36D8(v55, (uint64_t)v52, type metadata accessor for CVBundle);
      sub_1001B36D8((uint64_t)v52, v58, type metadata accessor for CVBundle.BundleType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*v204)(v58, v56);
        sub_1001B36D8((uint64_t)v52, v57, type metadata accessor for CVBundle.BundleType);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v59 = *v203;
          (*v203)(v28, v57, v56);
        }
        else
        {
          uint64_t v60 = v211;
          sub_1001B5120(v57, v211, type metadata accessor for CVTrackSnapshot);
          (*v194)(v28, v60, v56);
          sub_1001B3678(v60, type metadata accessor for CVTrackSnapshot);
          uint64_t v59 = *v203;
        }
        v59(v35, (uint64_t)v28, v56);
        unint64_t v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v210;
        (*(void (**)(char *, void, uint64_t, uint64_t))v210)(v35, 0, 1, v56);
        if ((*v202)(v35, 1, v56) == 1)
        {
          sub_10000FBD8((uint64_t)v35, (uint64_t *)&unk_100524ED0);
          uint64_t v62 = (uint64_t)v213;
          uint64_t v63 = sub_100331224();
          if (v64)
          {
            unint64_t v65 = v63;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v237 = (void *)v62;
            uint64_t v56 = v226;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1001F6320();
              uint64_t v56 = v226;
              uint64_t v62 = (uint64_t)v237;
            }
            uint64_t v67 = v195;
            v59((char *)v195, *(void *)(v62 + 56) + *(void *)(v221 + 72) * v65, v56);
            v213 = (void *)v62;
            sub_1003F4304(v65, v62);
            swift_bridgeObjectRelease();
            uint64_t v68 = (uint64_t)v67;
            uint64_t v69 = 0;
            uint64_t v35 = v193;
          }
          else
          {
            uint64_t v69 = 1;
            uint64_t v56 = v226;
            uint64_t v68 = (uint64_t)v195;
          }
          v61((char *)v68, v69, 1, v56);
          sub_10000FBD8(v68, (uint64_t *)&unk_100524ED0);
        }
        else
        {
          v59(v205, (uint64_t)v35, v56);
          uint64_t v70 = (uint64_t)v213;
          int v71 = swift_isUniquelyReferenced_nonNull_native();
          v237 = (void *)v70;
          unint64_t v73 = sub_100331224();
          uint64_t v74 = *(void *)(v70 + 16);
          BOOL v75 = (v72 & 1) == 0;
          uint64_t v76 = v74 + v75;
          if (__OFADD__(v74, v75)) {
            goto LABEL_104;
          }
          char v77 = v72;
          if (*(void *)(v70 + 24) >= v76)
          {
            if ((v71 & 1) == 0) {
              sub_1001F6320();
            }
          }
          else
          {
            sub_1001EE21C(v76, v71);
            uint64_t v78 = sub_100331224();
            if ((v77 & 1) != (v79 & 1)) {
              goto LABEL_108;
            }
            unint64_t v73 = v78;
          }
          uint64_t v80 = v221;
          uint64_t v81 = (uint64_t)v237;
          if (v77)
          {
            uint64_t v56 = v226;
            (*(void (**)(unint64_t, char *, uint64_t))(v221 + 40))(v237[7] + *(void *)(v221 + 72) * v73, v205, v226);
          }
          else
          {
            v237[(v73 >> 6) + 8] |= 1 << v73;
            v59((char *)(*(void *)(v81 + 56) + *(void *)(v80 + 72) * v73), (uint64_t)v205, v226);
            uint64_t v82 = *(void *)(v81 + 16);
            BOOL v83 = __OFADD__(v82, 1);
            uint64_t v84 = v82 + 1;
            if (v83) {
              goto LABEL_106;
            }
            *(void *)(v81 + 16) = v84;
            uint64_t v56 = v226;
          }
          v213 = v237;
          swift_bridgeObjectRelease();
        }
        double v6 = v208;
        uint64_t v28 = (char *)v201;
        uint64_t v57 = (uint64_t)v207;
        uint64_t v58 = (uint64_t)v206;
      }
      else
      {
        sub_1001B3678(v58, type metadata accessor for CVBundle.BundleType);
      }
      sub_1001B3678((uint64_t)v52, type metadata accessor for CVBundle);
      v55 += v214;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
    a1 = v187;
  }
  uint64_t v85 = (uint64_t)v213;
  swift_bridgeObjectRetain();
  uint64_t v86 = v191;
  uint64_t v87 = (char *)sub_1001A5EA8(a1, v85);
  swift_bridgeObjectRelease();
  uint64_t v88 = *(void *)(v86 + 32);
  int64_t v89 = *((void *)v87 + 2);
  uint64_t v90 = type metadata accessor for BundleClassifier(0);
  sub_1001B34C8((unint64_t *)&qword_100524E40, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v210 = v88;
  swift_bridgeObjectRetain();
  v203 = (void (**)(char *, uint64_t, uint64_t))v90;
  v240 = (void *)Dictionary.init(minimumCapacity:)();
  uint64_t v91 = (char *)_swiftEmptyArrayStorage;
  v207 = v87;
  if (v89)
  {
    v237 = _swiftEmptyArrayStorage;
    sub_100040CB0(0, v89, 0);
    uint64_t v92 = (uint64_t)&v87[(*(unsigned __int8 *)(v199 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v199 + 80)];
    uint64_t v214 = *(void *)(v199 + 72);
    uint64_t v93 = (void (**)(char *, uint64_t, uint64_t))(v221 + 16);
    uint64_t v94 = (void (**)(char *, uint64_t, uint64_t))(v221 + 32);
    uint64_t v95 = v226;
    do
    {
      uint64_t v96 = v222;
      sub_1001B36D8(v92, v222, type metadata accessor for CVBundle);
      uint64_t v97 = v96;
      uint64_t v98 = (uint64_t)v215;
      sub_1001B36D8(v97, (uint64_t)v215, type metadata accessor for CVBundle.BundleType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        unint64_t v99 = *v94;
        unint64_t v100 = v216;
        (*v94)(v216, v98, v95);
      }
      else
      {
        uint64_t v101 = v98;
        uint64_t v102 = v211;
        sub_1001B5120(v101, v211, type metadata accessor for CVTrackSnapshot);
        unint64_t v100 = v216;
        (*v93)(v216, v102, v95);
        sub_1001B3678(v102, type metadata accessor for CVTrackSnapshot);
        unint64_t v99 = *v94;
      }
      v99(v223, (uint64_t)v100, v95);
      sub_1001B3678(v222, type metadata accessor for CVBundle);
      uint64_t v91 = (char *)v237;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040CB0(0, *((void *)v91 + 2) + 1, 1);
        uint64_t v95 = v226;
        uint64_t v91 = (char *)v237;
      }
      unint64_t v104 = *((void *)v91 + 2);
      unint64_t v103 = *((void *)v91 + 3);
      if (v104 >= v103 >> 1)
      {
        sub_100040CB0(v103 > 1, v104 + 1, 1);
        uint64_t v95 = v226;
        uint64_t v91 = (char *)v237;
      }
      *((void *)v91 + 2) = v104 + 1;
      v99(&v91[((*(unsigned __int8 *)(v221 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80))+ *(void *)(v221 + 72) * v104], (uint64_t)v223, v95);
      v237 = v91;
      v92 += v214;
      --v89;
    }
    while (v89);
    double v6 = v208;
    uint64_t v87 = v207;
  }
  else
  {
    uint64_t v95 = v226;
  }
  uint64_t v105 = (char *)*((void *)v91 + 2);
  swift_bridgeObjectRetain();
  uint64_t v106 = (uint64_t)v200;
  v205 = v105;
  if (!v105)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v221 + 56))(v200, 1, 1, v95);
LABEL_99:
    sub_10000FBD8(v106, (uint64_t *)&unk_100524ED0);
    goto LABEL_100;
  }
  unint64_t v107 = 0;
  v223 = (char *)(v221 + 16);
  v206 = (char *)(v221 + 48);
  v220 = (void (**)(char *, uint64_t, uint64_t))(v221 + 32);
  v216 = (char *)(v221 + 8);
  v193 = (char *)(v188 + 7);
  uint64_t v211 = v221 + 56;
  unint64_t v188 = (v221 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v192 = (char *)&type metadata for () + 8;
LABEL_45:
  if (v107 >= *((void *)v91 + 2))
  {
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_108:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x1001A9120);
  }
  uint64_t v108 = v221;
  uint64_t v109 = *(void *)(v221 + 72);
  uint64_t v110 = *(void (**)(uint64_t, char *, uint64_t))(v221 + 16);
  v110(v106, &v91[((*(unsigned __int8 *)(v221 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80)) + v109 * v107], v95);
  uint64_t v111 = *(void (***)(uint64_t, void))(v108 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v111)(v106, 0, 1, v95);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v106, 1, v95) == 1) {
    goto LABEL_99;
  }
  v204 = v111;
  uint64_t v112 = *v220;
  (*v220)(v209, v106, v95);
  unint64_t v113 = *((void *)v87 + 2);
  if (v107 != v113)
  {
    if (v107 >= v113) {
      goto LABEL_102;
    }
    uint64_t v214 = *(unsigned __int8 *)(v199 + 80);
    uint64_t v114 = *(void *)(v199 + 72);
    v215 = (uint64_t *)v107;
    uint64_t v115 = (uint64_t)&v87[((v214 + 32) & ~v214) + v114 * v107];
    uint64_t v116 = v95;
    uint64_t v117 = v197;
    uint64_t v118 = (uint64_t)&v197[*(int *)(v198 + 48)];
    v112(v197, (uint64_t)v209, v116);
    sub_1001B36D8(v115, v118, type metadata accessor for CVBundle);
    uint64_t v119 = v117;
    uint64_t v120 = (uint64_t)v217;
    uint64_t v121 = v227;
    v112(v217, (uint64_t)v119, v116);
    sub_1001B5120(v118, v121, type metadata accessor for CVBundle);
    uint64_t v122 = v210;
    if (*(void *)(v210 + 16) && (unint64_t v123 = sub_10032ADC4(v120), (v124 & 1) != 0))
    {
      uint64_t v125 = *(void *)(*(void *)(v122 + 56) + 8 * v123);
      swift_retain();
    }
    else
    {
      uint64_t v126 = v121;
      uint64_t v127 = v196;
      sub_1001B36D8(v126, v196, type metadata accessor for CVBundle);
      swift_allocObject();
      uint64_t v125 = sub_1001A91C0(v127);
    }
    uint64_t v128 = (uint64_t)v212;
    v110((uint64_t)v212, (char *)v120, v226);
    uint64_t v222 = v125;
    swift_retain();
    uint64_t v129 = (uint64_t)v240;
    int v130 = swift_isUniquelyReferenced_nonNull_native();
    v237 = (void *)v129;
    v240 = (void *)0x8000000000000000;
    unint64_t v132 = sub_10032ADC4(v128);
    uint64_t v133 = *(void *)(v129 + 16);
    BOOL v134 = (v131 & 1) == 0;
    uint64_t v135 = v133 + v134;
    if (__OFADD__(v133, v134)) {
      goto LABEL_103;
    }
    char v136 = v131;
    if (*(void *)(v129 + 24) < v135)
    {
      sub_1001EE210(v135, v130);
      unint64_t v137 = sub_10032ADC4((uint64_t)v212);
      uint64_t v139 = (uint64_t)v215;
      if ((v136 & 1) != (v138 & 1)) {
        goto LABEL_107;
      }
      unint64_t v132 = v137;
      uint64_t v140 = v237;
      if ((v136 & 1) == 0) {
        goto LABEL_62;
      }
LABEL_60:
      uint64_t v141 = v140[7];
      swift_release();
      uint64_t v142 = v222;
      *(void *)(v141 + 8 * v132) = v222;
LABEL_64:
      v240 = v140;
      swift_bridgeObjectRelease();
      uint64_t v145 = *(uint64_t **)v216;
      uint64_t v95 = v226;
      (*(void (**)(char *, uint64_t))v216)(v212, v226);
      uint64_t v146 = v217;
      uint64_t v106 = (uint64_t)v200;
      uint64_t v147 = v227;
      if (*(unsigned char *)(v142 + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_isUpdating))
      {
        swift_release();
        goto LABEL_44;
      }
      v215 = v145;
      uint64_t v148 = *(void *)(v142
                       + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_classifications);
      uint64_t v149 = *(void *)(v148 + 16);
      if (!v149)
      {
        swift_release();
        goto LABEL_95;
      }
      v194 = (void (**)(char *, uint64_t, uint64_t))OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_classifications;
      v195 = (void (**)(char *, uint64_t, uint64_t, uint64_t))OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_isUpdating;
      unint64_t v201 = ~v214;
      uint64_t v150 = v190;
      uint64_t v151 = v148 + ((*(unsigned __int8 *)(v190 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80));
      v202 = (unsigned int (**)(char *, uint64_t, uint64_t))v148;
      swift_bridgeObjectRetain();
      uint64_t v152 = *(void *)(v150 + 72);
      while (1)
      {
        uint64_t v153 = v229;
        sub_1001B36D8(v151, v229, type metadata accessor for BundleClassification);
        sub_1001B36D8(v153, v228, type metadata accessor for BundleClassification.ClassificationType);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            sub_10000F214(&qword_1005297C0);
            uint64_t v154 = v228;
            swift_bridgeObjectRelease();
            v235 = &type metadata for VisualLookupClassifier;
            v236 = (char **)&off_1004F2D00;
            sub_1001B3678(v154, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
            break;
          case 2u:
            v235 = &type metadata for EventClassifier;
            v236 = &off_1004E6FC8;
            break;
          case 3u:
            v235 = &type metadata for ReadAloudClassifier;
            v236 = (char **)&off_1004EC708;
            break;
          case 4u:
            v235 = &type metadata for SummarizeClassifier;
            v236 = (char **)&off_1004E7000;
            break;
          default:
            swift_bridgeObjectRelease();
            v235 = &type metadata for MapsResultsClassifier;
            v236 = (char **)&off_1004E8000;
            break;
        }
        sub_1000321A8(&v234, (uint64_t)&v237);
        uint64_t v155 = v238;
        uint64_t v156 = v239;
        sub_10000F3B0(&v237, v238);
        char v157 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 8))(v227, v155, v156);
        _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v237);
        if (v157)
        {
          uint64_t v158 = v225;
          sub_10019D408(v225);
          sub_1001B36D8(v158, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v238 = type metadata accessor for ParseDetectorResult(0);
              uint64_t v159 = sub_1001B34C8(&qword_100519F98, 255, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
              uint64_t v160 = type metadata accessor for ParseDetectorResult;
              break;
            case 2u:
              uint64_t v238 = type metadata accessor for TextDetectorResult(0);
              uint64_t v159 = sub_1001B34C8((unint64_t *)&unk_1005298A0, 255, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
              uint64_t v160 = type metadata accessor for TextDetectorResult;
              break;
            case 3u:
            case 4u:
              uint64_t v238 = type metadata accessor for StreamingBarcodeDetectorResult(0);
              uint64_t v159 = sub_1001B34C8(&qword_100519F90, 255, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
              uint64_t v160 = type metadata accessor for StreamingBarcodeDetectorResult;
              break;
            case 5u:
              uint64_t v238 = type metadata accessor for StreamingTextDetectorResult(0);
              uint64_t v159 = sub_1001B34C8((unint64_t *)&unk_100529890, 255, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
              uint64_t v160 = type metadata accessor for StreamingTextDetectorResult;
              break;
            default:
              uint64_t v238 = type metadata accessor for ObjectDetectorResult(0);
              uint64_t v159 = sub_1001B34C8(&qword_1005298B0, 255, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
              uint64_t v160 = type metadata accessor for ObjectDetectorResult;
              break;
          }
          v161 = v160;
          uint64_t v239 = v159;
          v162 = sub_100040120((uint64_t *)&v237);
          sub_1001B5120((uint64_t)v6, (uint64_t)v162, v161);
          uint64_t v163 = v238;
          uint64_t v164 = v239;
          sub_10000F3B0(&v237, v238);
          double v165 = (*(double (**)(uint64_t, uint64_t))(v164 + 88))(v163, v164);
          _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v237);
          sub_1001B3678(v225, (uint64_t (*)(void))type metadata accessor for CVDetection);
          double v166 = *(double *)(v229 + *(int *)(v218 + 24)) + 0.2;
          sub_1001B3678(v229, type metadata accessor for BundleClassification);
          if (v166 <= v165)
          {
            swift_bridgeObjectRelease();
            uint64_t v167 = v222;
            uint64_t v168 = *(unsigned int (***)(char *, uint64_t, uint64_t))((char *)v194 + v222);
            *((unsigned char *)v195 + v222) = 1;
            uint64_t v169 = type metadata accessor for TaskPriority();
            v195 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v169 - 8);
            uint64_t v170 = (uint64_t)v189;
            v195[7](v189, 1, 1, v169);
            sub_1001B36D8(v227, v196, type metadata accessor for CVBundle);
            uint64_t v171 = qword_100517F50;
            swift_retain();
            v202 = v168;
            swift_bridgeObjectRetain();
            if (v171 != -1) {
              swift_once();
            }
            uint64_t v173 = qword_10055E400;
            uint64_t v174 = sub_1001B34C8(&qword_100524188, v172, (void (*)(uint64_t))type metadata accessor for BundleActor);
            uint64_t v175 = (v214 + 40) & v201;
            unint64_t v176 = (unint64_t)&v193[v175] & 0xFFFFFFFFFFFFFFF8;
            uint64_t v177 = (void *)swift_allocObject();
            v177[2] = v173;
            v177[3] = v174;
            v177[4] = v202;
            sub_1001B5120(v196, (uint64_t)v177 + v175, type metadata accessor for CVBundle);
            *(void *)((char *)v177 + v176) = v167;
            uint64_t v178 = v195;
            LODWORD(v176) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v195[6])(v170, 1, v169);
            swift_retain();
            if (v176 == 1)
            {
              sub_10000FBD8(v170, &qword_10051A8C0);
            }
            else
            {
              TaskPriority.rawValue.getter();
              ((void (*)(uint64_t, uint64_t))v178[1])(v170, v169);
            }
            double v6 = v208;
            if (v177[2])
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              uint64_t v179 = dispatch thunk of Actor.unownedExecutor.getter();
              uint64_t v181 = v180;
              swift_unknownObjectRelease();
              if (v181 | v179)
              {
                uint64_t v230 = 0;
                uint64_t v231 = 0;
                uint64_t v232 = v179;
                uint64_t v233 = v181;
              }
            }
            uint64_t v146 = v217;
            uint64_t v106 = (uint64_t)v200;
            swift_task_create();
            swift_release();
            swift_release();
            uint64_t v95 = v226;
LABEL_94:
            uint64_t v147 = v227;
LABEL_95:
            uint64_t v145 = v215;
LABEL_44:
            unint64_t v107 = v139 + 1;
            sub_1001B3678(v147, type metadata accessor for CVBundle);
            ((void (*)(char *, uint64_t))v145)(v146, v95);
            uint64_t v87 = v207;
            if ((char *)v107 == v205)
            {
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v204)(v106, 1, 1, v95);
              goto LABEL_99;
            }
            goto LABEL_45;
          }
        }
        else
        {
          sub_1001B3678(v229, type metadata accessor for BundleClassification);
        }
        v151 += v152;
        if (!--v149)
        {
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v95 = v226;
          uint64_t v146 = v217;
          uint64_t v106 = (uint64_t)v200;
          goto LABEL_94;
        }
      }
    }
    uint64_t v139 = (uint64_t)v215;
    if (v130)
    {
      uint64_t v140 = v237;
      if (v131) {
        goto LABEL_60;
      }
    }
    else
    {
      sub_1001F6314();
      uint64_t v140 = v237;
      if (v136) {
        goto LABEL_60;
      }
    }
LABEL_62:
    v140[(v132 >> 6) + 8] |= 1 << v132;
    v110(v140[6] + v132 * v109, v212, v226);
    uint64_t v142 = v222;
    *(void *)(v140[7] + 8 * v132) = v222;
    uint64_t v143 = v140[2];
    BOOL v83 = __OFADD__(v143, 1);
    uint64_t v144 = v143 + 1;
    if (v83) {
      goto LABEL_105;
    }
    v140[2] = v144;
    goto LABEL_64;
  }
  (*(void (**)(char *, uint64_t))v216)(v209, v95);
LABEL_100:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v182 = sub_10019CF90((uint64_t)v87, (uint64_t *)&v240);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v183 = v191;
  *(void *)(v191 + 32) = v240;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v183 + 24) = v182;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_retain();
  uint64_t v184 = swift_bridgeObjectRetain();
  sub_1001B5AF0(v184, v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1001A914C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BundleManager()
{
  return self;
}

uint64_t sub_1001A91C0(uint64_t a1)
{
  uint64_t v34 = a1;
  uint64_t v35 = type metadata accessor for BundleClassification.ClassificationType(0);
  uint64_t v32 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for BundleClassification(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  double v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v32 - v17;
  *(unsigned char *)(v36 + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_isUpdating) = 0;
  sub_1001B36D8(v34, (uint64_t)v12, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v19(v15, v12, v13);
  }
  else
  {
    sub_1001B5120((uint64_t)v12, (uint64_t)v9, type metadata accessor for CVTrackSnapshot);
    uint64_t v20 = v33;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v15, v9, v13);
    sub_1001B3678((uint64_t)v9, type metadata accessor for CVTrackSnapshot);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  }
  v19(v18, v15, v13);
  v19((char *)(v36 + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_id), v18, v13);
  sub_10000F214(&qword_10051A190);
  uint64_t v21 = *(void *)(v32 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10043F400;
  uint64_t v32 = v23;
  uint64_t v24 = v13;
  uint64_t v25 = v23 + v22;
  *(void *)(v23 + v22) = _swiftEmptyArrayStorage;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  uint64_t v26 = *(int *)(sub_10000F214(&qword_1005297C0) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v25 + 4 * v21, 1, 3, v24);
  *(void *)(v25 + 4 * v21 + v26) = _swiftEmptyArrayStorage;
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v27 = 5;
  sub_100040C74(0, 5, 0);
  uint64_t v28 = v37;
  uint64_t v33 = v25;
  do
  {
    sub_1001B36D8(v25, (uint64_t)v2, type metadata accessor for BundleClassification.ClassificationType);
    sub_1001B36D8((uint64_t)v2, (uint64_t)v6, type metadata accessor for BundleClassification.ClassificationType);
    *(void *)&v6[*(int *)(v3 + 20)] = 0;
    *(void *)&v6[*(int *)(v3 + 24)] = 0;
    sub_1001B3678((uint64_t)v2, type metadata accessor for BundleClassification.ClassificationType);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100040C74(0, v28[2] + 1, 1);
      uint64_t v28 = v37;
    }
    unint64_t v30 = v28[2];
    unint64_t v29 = v28[3];
    if (v30 >= v29 >> 1)
    {
      sub_100040C74(v29 > 1, v30 + 1, 1);
      uint64_t v28 = v37;
    }
    v28[2] = v30 + 1;
    sub_1001B5120((uint64_t)v6, (uint64_t)v28+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v30, type metadata accessor for BundleClassification);
    v25 += v21;
    --v27;
  }
  while (v27);
  sub_1001B3678(v34, type metadata accessor for CVBundle);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t result = v36;
  *(void *)(v36 + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_classifications) = v28;
  return result;
}

uint64_t sub_1001A97A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  if (qword_100517F50 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_10055E400;
  v6[6] = qword_10055E400;
  return _swift_task_switch(sub_1001A9840, v7, 0);
}

uint64_t sub_1001A9840()
{
  uint64_t v1 = type metadata accessor for BundleClassification(0);
  uint64_t v2 = qword_10055E400;
  uint64_t v4 = sub_1001B34C8(&qword_100524188, v3, (void (*)(uint64_t))type metadata accessor for BundleActor);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 56) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v6 = sub_10000F214(&qword_1005241C0);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001A9998;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v1, v6, v2, v4, &unk_100524298, v5, v1);
}

uint64_t sub_1001A9998()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = sub_1001A9B40;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 48);
    swift_task_dealloc();
    uint64_t v4 = sub_1001A9ABC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001A9ABC()
{
  uint64_t v1 = v0[5];
  *(void *)(v1 + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_classifications) = v0[2];
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_isUpdating) = 0;
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1001A9B40()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001A9BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a3;
  v4[13] = a4;
  v4[10] = a1;
  v4[11] = a2;
  uint64_t v5 = *(void *)(type metadata accessor for CVBundle(0) - 8);
  v4[14] = v5;
  v4[15] = *(void *)(v5 + 64);
  v4[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for BundleClassification(0);
  v4[17] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[18] = v7;
  v4[19] = *(void *)(v7 + 64);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  sub_10000F214(&qword_1005242A0);
  v4[24] = swift_task_alloc();
  uint64_t v8 = sub_10000F214(&qword_1005242A8);
  v4[25] = v8;
  v4[26] = *(void *)(v8 - 8);
  v4[27] = swift_task_alloc();
  if (qword_100517F50 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_10055E400;
  v4[28] = qword_10055E400;
  return _swift_task_switch(sub_1001A9DE8, v9, 0);
}

uint64_t sub_1001A9DE8()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 144);
    uint64_t v36 = *(void *)(v0 + 112);
    unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + v4;
    unint64_t v35 = v4;
    unint64_t v33 = v4 + *(void *)(v0 + 152);
    uint64_t v34 = *(void *)(v3 + 72);
    uint64_t v32 = type metadata accessor for TaskPriority();
    uint64_t v6 = *(void *)(v32 - 8);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    unint64_t v30 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    unint64_t v29 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v37 = v2;
      uint64_t v8 = *(void *)(v0 + 176);
      uint64_t v9 = *(void *)(v0 + 184);
      uint64_t v10 = *(void *)(v0 + 168);
      uint64_t v11 = *(void *)(v0 + 128);
      uint64_t v12 = *(void *)(v0 + 104);
      v31(v9, 1, 1, v32);
      uint64_t v38 = v5;
      sub_1001B36D8(v5, v10, type metadata accessor for BundleClassification);
      sub_1001B36D8(v12, v11, type metadata accessor for CVBundle);
      unint64_t v13 = (v33 + *(unsigned __int8 *)(v36 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      sub_1001B5120(v10, v14 + v35, type metadata accessor for BundleClassification);
      sub_1001B5120(v11, v14 + v13, type metadata accessor for CVBundle);
      sub_10000FB74(v9, v8, &qword_10051A8C0);
      int v15 = (*v30)(v8, 1, v32);
      uint64_t v16 = *(void *)(v0 + 176);
      if (v15 == 1)
      {
        sub_10000FBD8(*(void *)(v0 + 176), &qword_10051A8C0);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v29)(v16, v32);
      }
      if (*(void *)(v14 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v19 = v18;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0;
      }
      uint64_t v20 = **(void **)(v0 + 88);
      uint64_t v21 = v19 | v17;
      if (v19 | v17)
      {
        uint64_t v21 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v17;
        *(void *)(v0 + 40) = v19;
      }
      uint64_t v7 = *(void *)(v0 + 184);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v21;
      *(void *)(v0 + 64) = v20;
      swift_task_create();
      swift_release();
      sub_10000FBD8(v7, &qword_10051A8C0);
      uint64_t v5 = v38 + v34;
      uint64_t v2 = v37 - 1;
    }
    while (v37 != 1);
    swift_bridgeObjectRelease();
  }
  sub_10000F214(&qword_10051F3B0);
  ThrowingTaskGroup.makeAsyncIterator()();
  *(void *)(v0 + 232) = _swiftEmptyArrayStorage;
  uint64_t v22 = qword_10055E400;
  uint64_t v24 = sub_1001B34C8(&qword_100524188, v23, (void (*)(uint64_t))type metadata accessor for BundleActor);
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_1001AA21C;
  uint64_t v26 = *(void *)(v0 + 192);
  uint64_t v27 = *(void *)(v0 + 200);
  return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v26, v22, v24, v27, v0 + 72);
}

uint64_t sub_1001AA21C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 224);
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_1001AA5E0;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 224);
    unint64_t v4 = sub_1001AA33C;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1001AA33C()
{
  uint64_t v1 = v0[24];
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v0[18] + 48))(v1, 1, v0[17]);
  uint64_t v3 = v0[29];
  if (v2 == 1)
  {
    unint64_t v4 = (void *)v0[10];
    (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
    void *v4 = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    sub_1001B5120(v1, v0[20], type metadata accessor for BundleClassification);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v8 = v0[29];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v8 = sub_10032A068(0, *(void *)(v8 + 16) + 1, 1, v0[29]);
    }
    unint64_t v10 = *(void *)(v8 + 16);
    unint64_t v9 = *(void *)(v8 + 24);
    if (v10 >= v9 >> 1) {
      unint64_t v8 = sub_10032A068(v9 > 1, v10 + 1, 1, v8);
    }
    uint64_t v11 = v0[20];
    uint64_t v12 = v0[18];
    *(void *)(v8 + 16) = v10 + 1;
    sub_1001B5120(v11, v8+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v10, type metadata accessor for BundleClassification);
    v0[29] = v8;
    uint64_t v13 = qword_10055E400;
    uint64_t v15 = sub_1001B34C8(&qword_100524188, v14, (void (*)(uint64_t))type metadata accessor for BundleActor);
    uint64_t v16 = (void *)swift_task_alloc();
    v0[30] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_1001AA21C;
    uint64_t v17 = v0[24];
    uint64_t v18 = v0[25];
    return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v17, v13, v15, v18, v0 + 9);
  }
}

uint64_t sub_1001AA5E0()
{
  (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001AA6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v8;
  void *v8 = v5;
  v8[1] = sub_100066534;
  return sub_10038BBD4(a1, a5);
}

uint64_t sub_1001AA764()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1001AA814()
{
  return type metadata accessor for BundleClassifier(0);
}

uint64_t type metadata accessor for BundleClassifier(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100523F68);
}

uint64_t sub_1001AA83C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *sub_1001AA8E4(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for CVBundle.BundleType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v8 = type metadata accessor for UUID();
    unint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v177 = v9;
      uint64_t v11 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v12 = v11[5];
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v175 = v11;
          v177(v13, v14, v8);
          uint64_t v26 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v13[v26[5]] = *(_DWORD *)&v14[v26[5]];
          uint64_t v27 = v26[6];
          uint64_t v28 = &v13[v27];
          unint64_t v29 = &v14[v27];
          long long v30 = *((_OWORD *)v29 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 3) = v30;
          long long v31 = *((_OWORD *)v29 + 1);
          *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
          *((_OWORD *)v28 + 1) = v31;
          *(void *)&v13[v26[7]] = *(void *)&v14[v26[7]];
          *(void *)&v13[v26[8]] = *(void *)&v14[v26[8]];
          *(void *)&v13[v26[9]] = *(void *)&v14[v26[9]];
          v13[v26[10]] = v14[v26[10]];
          uint64_t v32 = v26[11];
          unint64_t v33 = &v13[v32];
          uint64_t v34 = &v14[v32];
          uint64_t v170 = *((void *)v34 + 1);
          *(void *)unint64_t v33 = *(void *)v34;
          *((void *)v33 + 1) = v170;
          uint64_t v35 = v26[12];
          uint64_t v36 = &v13[v35];
          uint64_t v37 = &v14[v35];
          uint64_t v38 = *((void *)v37 + 1);
          *(void *)uint64_t v36 = *(void *)v37;
          *((void *)v36 + 1) = v38;
          uint64_t v39 = v26[13];
          __dst = &v13[v39];
          uint64_t v169 = &v14[v39];
          uint64_t v40 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v167 = *(void *)(v40 - 8);
          uint64_t v168 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v168(v169, 1, v40))
          {
            uint64_t v41 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v169, *(void *)(*(void *)(v41 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v167 + 16))(__dst, v169, v40);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v167 + 56))(__dst, 0, 1, v40);
          }
          uint64_t v78 = v26[14];
          char v79 = &v13[v78];
          uint64_t v80 = &v14[v78];
          unint64_t v81 = *((void *)v80 + 1);
          if (v81 >> 60 == 15)
          {
            *(_OWORD *)char v79 = *(_OWORD *)v80;
          }
          else
          {
            uint64_t v82 = *(void *)v80;
            sub_100038528(*(void *)v80, *((void *)v80 + 1));
            *(void *)char v79 = v82;
            *((void *)v79 + 1) = v81;
          }
          uint64_t v11 = v175;
          uint64_t v83 = v26[15];
          uint64_t v84 = &v13[v83];
          uint64_t v85 = &v14[v83];
          if (*(void *)v85)
          {
            uint64_t v86 = *((void *)v85 + 1);
            uint64_t v87 = *((void *)v85 + 2);
            *(void *)uint64_t v84 = *(void *)v85;
            *((void *)v84 + 1) = v86;
            *((void *)v84 + 2) = v87;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
            *((void *)v84 + 2) = *((void *)v85 + 2);
          }
          break;
        case 2u:
          v177(v13, v14, v8);
          uint64_t v42 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v13[v42[5]] = *(_DWORD *)&v14[v42[5]];
          uint64_t v43 = v42[6];
          uint64_t v44 = &v13[v43];
          uint64_t v45 = &v14[v43];
          long long v46 = *((_OWORD *)v45 + 3);
          *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
          *((_OWORD *)v44 + 3) = v46;
          long long v47 = *((_OWORD *)v45 + 1);
          *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
          *((_OWORD *)v44 + 1) = v47;
          uint64_t v48 = v42[7];
          unint64_t v49 = &v13[v48];
          uint64_t v50 = &v14[v48];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          *(void *)unint64_t v49 = v52;
          *((void *)v49 + 1) = v51;
          *(void *)&v13[v42[8]] = *(void *)&v14[v42[8]];
          *(void *)&v13[v42[9]] = *(void *)&v14[v42[9]];
          *(void *)&v13[v42[10]] = *(void *)&v14[v42[10]];
          *(void *)&v13[v42[11]] = *(void *)&v14[v42[11]];
          *(void *)&v13[v42[12]] = *(void *)&v14[v42[12]];
          uint64_t v53 = v42[13];
          uint64_t v54 = *(void **)&v14[v53];
          *(void *)&v13[v53] = v54;
          v13[v42[14]] = v14[v42[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v55 = v54;
          break;
        case 3u:
        case 4u:
          v177(v13, v14, v8);
          uint64_t v56 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v13[v56[5]] = *(_DWORD *)&v14[v56[5]];
          uint64_t v57 = v56[6];
          uint64_t v58 = &v13[v57];
          uint64_t v59 = &v14[v57];
          long long v60 = *((_OWORD *)v59 + 3);
          *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
          *((_OWORD *)v58 + 3) = v60;
          long long v61 = *((_OWORD *)v59 + 1);
          *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
          *((_OWORD *)v58 + 1) = v61;
          uint64_t v62 = v56[7];
          uint64_t v63 = &v13[v62];
          char v64 = &v14[v62];
          uint64_t v66 = *(void *)v64;
          uint64_t v65 = *((void *)v64 + 1);
          *(void *)uint64_t v63 = v66;
          *((void *)v63 + 1) = v65;
          *(void *)&v13[v56[8]] = *(void *)&v14[v56[8]];
          *(void *)&v13[v56[9]] = *(void *)&v14[v56[9]];
          *(void *)&v13[v56[10]] = *(void *)&v14[v56[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v177(v13, v14, v8);
          uint64_t v67 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v13[v67[5]] = *(_DWORD *)&v14[v67[5]];
          uint64_t v68 = v67[6];
          uint64_t v69 = &v13[v68];
          uint64_t v70 = &v14[v68];
          long long v71 = *((_OWORD *)v70 + 3);
          *((_OWORD *)v69 + 2) = *((_OWORD *)v70 + 2);
          *((_OWORD *)v69 + 3) = v71;
          long long v72 = *((_OWORD *)v70 + 1);
          *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
          *((_OWORD *)v69 + 1) = v72;
          uint64_t v73 = v67[7];
          uint64_t v74 = &v13[v73];
          BOOL v75 = &v14[v73];
          uint64_t v77 = *(void *)v75;
          uint64_t v76 = *((void *)v75 + 1);
          *(void *)uint64_t v74 = v77;
          *((void *)v74 + 1) = v76;
          *(void *)&v13[v67[8]] = *(void *)&v14[v67[8]];
          *(void *)&v13[v67[9]] = *(void *)&v14[v67[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v177(v13, v14, v8);
          uint64_t v15 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v13[v15[5]] = *(_DWORD *)&v14[v15[5]];
          uint64_t v16 = v15[6];
          uint64_t v17 = &v13[v16];
          uint64_t v18 = &v14[v16];
          long long v19 = *((_OWORD *)v18 + 3);
          *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
          *((_OWORD *)v17 + 3) = v19;
          long long v20 = *((_OWORD *)v18 + 1);
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
          *((_OWORD *)v17 + 1) = v20;
          uint64_t v21 = v15[7];
          uint64_t v22 = &v13[v21];
          uint64_t v23 = &v14[v21];
          uint64_t v25 = *(void *)v23;
          uint64_t v24 = *((void *)v23 + 1);
          *(void *)uint64_t v22 = v25;
          *((void *)v22 + 1) = v24;
          *(void *)&v13[v15[8]] = *(void *)&v14[v15[8]];
          *(void *)&v13[v15[9]] = *(void *)&v14[v15[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v88 = v11[6];
      int64_t v89 = &a1[v88];
      uint64_t v90 = &a2[v88];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          unint64_t v176 = v11;
          v177(v89, v90, v8);
          uint64_t v102 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v89[v102[5]] = *(_DWORD *)&v90[v102[5]];
          uint64_t v103 = v102[6];
          unint64_t v104 = &v89[v103];
          uint64_t v105 = &v90[v103];
          long long v106 = *((_OWORD *)v105 + 3);
          *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
          *((_OWORD *)v104 + 3) = v106;
          long long v107 = *((_OWORD *)v105 + 1);
          *(_OWORD *)unint64_t v104 = *(_OWORD *)v105;
          *((_OWORD *)v104 + 1) = v107;
          *(void *)&v89[v102[7]] = *(void *)&v90[v102[7]];
          *(void *)&v89[v102[8]] = *(void *)&v90[v102[8]];
          *(void *)&v89[v102[9]] = *(void *)&v90[v102[9]];
          v89[v102[10]] = v90[v102[10]];
          uint64_t v108 = v102[11];
          uint64_t v109 = &v89[v108];
          uint64_t v110 = &v90[v108];
          uint64_t v111 = *((void *)v110 + 1);
          *(void *)uint64_t v109 = *(void *)v110;
          *((void *)v109 + 1) = v111;
          uint64_t v112 = v102[12];
          unint64_t v113 = &v89[v112];
          uint64_t v114 = &v90[v112];
          uint64_t v115 = *((void *)v114 + 1);
          *(void *)unint64_t v113 = *(void *)v114;
          *((void *)v113 + 1) = v115;
          uint64_t v116 = v102[13];
          uint64_t v178 = &v89[v116];
          __dsta = &v90[v116];
          uint64_t v117 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v171 = *(void *)(v117 - 8);
          uint64_t v172 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v172(__dsta, 1, v117))
          {
            uint64_t v118 = sub_10000F214(&qword_100524BD0);
            memcpy(v178, __dsta, *(void *)(*(void *)(v118 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v178, __dsta, v117);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v178, 0, 1, v117);
          }
          uint64_t v155 = v102[14];
          uint64_t v156 = &v89[v155];
          char v157 = &v90[v155];
          unint64_t v158 = *((void *)v157 + 1);
          if (v158 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v156 = *(_OWORD *)v157;
          }
          else
          {
            uint64_t v159 = *(void *)v157;
            sub_100038528(*(void *)v157, *((void *)v157 + 1));
            *(void *)uint64_t v156 = v159;
            *((void *)v156 + 1) = v158;
          }
          uint64_t v11 = v176;
          uint64_t v160 = v102[15];
          v161 = &v89[v160];
          v162 = &v90[v160];
          if (*(void *)v162)
          {
            uint64_t v163 = *((void *)v162 + 1);
            uint64_t v164 = *((void *)v162 + 2);
            *(void *)v161 = *(void *)v162;
            *((void *)v161 + 1) = v163;
            *((void *)v161 + 2) = v164;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)v161 = *(_OWORD *)v162;
            *((void *)v161 + 2) = *((void *)v162 + 2);
          }
          break;
        case 2u:
          v177(v89, v90, v8);
          uint64_t v119 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v89[v119[5]] = *(_DWORD *)&v90[v119[5]];
          uint64_t v120 = v119[6];
          uint64_t v121 = &v89[v120];
          uint64_t v122 = &v90[v120];
          long long v123 = *((_OWORD *)v122 + 3);
          *((_OWORD *)v121 + 2) = *((_OWORD *)v122 + 2);
          *((_OWORD *)v121 + 3) = v123;
          long long v124 = *((_OWORD *)v122 + 1);
          *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
          *((_OWORD *)v121 + 1) = v124;
          uint64_t v125 = v119[7];
          uint64_t v126 = &v89[v125];
          uint64_t v127 = &v90[v125];
          uint64_t v129 = *(void *)v127;
          uint64_t v128 = *((void *)v127 + 1);
          *(void *)uint64_t v126 = v129;
          *((void *)v126 + 1) = v128;
          *(void *)&v89[v119[8]] = *(void *)&v90[v119[8]];
          *(void *)&v89[v119[9]] = *(void *)&v90[v119[9]];
          *(void *)&v89[v119[10]] = *(void *)&v90[v119[10]];
          *(void *)&v89[v119[11]] = *(void *)&v90[v119[11]];
          *(void *)&v89[v119[12]] = *(void *)&v90[v119[12]];
          uint64_t v130 = v119[13];
          char v131 = *(void **)&v90[v130];
          *(void *)&v89[v130] = v131;
          v89[v119[14]] = v90[v119[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v132 = v131;
          break;
        case 3u:
        case 4u:
          v177(v89, v90, v8);
          uint64_t v133 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v89[v133[5]] = *(_DWORD *)&v90[v133[5]];
          uint64_t v134 = v133[6];
          uint64_t v135 = &v89[v134];
          char v136 = &v90[v134];
          long long v137 = *((_OWORD *)v136 + 3);
          *((_OWORD *)v135 + 2) = *((_OWORD *)v136 + 2);
          *((_OWORD *)v135 + 3) = v137;
          long long v138 = *((_OWORD *)v136 + 1);
          *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
          *((_OWORD *)v135 + 1) = v138;
          uint64_t v139 = v133[7];
          uint64_t v140 = &v89[v139];
          uint64_t v141 = &v90[v139];
          uint64_t v143 = *(void *)v141;
          uint64_t v142 = *((void *)v141 + 1);
          *(void *)uint64_t v140 = v143;
          *((void *)v140 + 1) = v142;
          *(void *)&v89[v133[8]] = *(void *)&v90[v133[8]];
          *(void *)&v89[v133[9]] = *(void *)&v90[v133[9]];
          *(void *)&v89[v133[10]] = *(void *)&v90[v133[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v177(v89, v90, v8);
          uint64_t v144 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v89[v144[5]] = *(_DWORD *)&v90[v144[5]];
          uint64_t v145 = v144[6];
          uint64_t v146 = &v89[v145];
          uint64_t v147 = &v90[v145];
          long long v148 = *((_OWORD *)v147 + 3);
          *((_OWORD *)v146 + 2) = *((_OWORD *)v147 + 2);
          *((_OWORD *)v146 + 3) = v148;
          long long v149 = *((_OWORD *)v147 + 1);
          *(_OWORD *)uint64_t v146 = *(_OWORD *)v147;
          *((_OWORD *)v146 + 1) = v149;
          uint64_t v150 = v144[7];
          uint64_t v151 = &v89[v150];
          uint64_t v152 = &v90[v150];
          uint64_t v154 = *(void *)v152;
          uint64_t v153 = *((void *)v152 + 1);
          *(void *)uint64_t v151 = v154;
          *((void *)v151 + 1) = v153;
          *(void *)&v89[v144[8]] = *(void *)&v90[v144[8]];
          *(void *)&v89[v144[9]] = *(void *)&v90[v144[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v177(v89, v90, v8);
          uint64_t v91 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v89[v91[5]] = *(_DWORD *)&v90[v91[5]];
          uint64_t v92 = v91[6];
          uint64_t v93 = &v89[v92];
          uint64_t v94 = &v90[v92];
          long long v95 = *((_OWORD *)v94 + 3);
          *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
          *((_OWORD *)v93 + 3) = v95;
          long long v96 = *((_OWORD *)v94 + 1);
          *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
          *((_OWORD *)v93 + 1) = v96;
          uint64_t v97 = v91[7];
          uint64_t v98 = &v89[v97];
          unint64_t v99 = &v90[v97];
          uint64_t v101 = *(void *)v99;
          uint64_t v100 = *((void *)v99 + 1);
          *(void *)uint64_t v98 = v101;
          *((void *)v98 + 1) = v100;
          *(void *)&v89[v91[8]] = *(void *)&v90[v91[8]];
          *(void *)&v89[v91[9]] = *(void *)&v90[v91[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      a1[v11[7]] = a2[v11[7]];
      *(void *)&a1[v11[8]] = *(void *)&a2[v11[8]];
      *(_DWORD *)&a1[v11[9]] = *(_DWORD *)&a2[v11[9]];
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v165 = *(int *)(a3 + 24);
    *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
    *(void *)&a1[v165] = *(void *)&a2[v165];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t type metadata accessor for CVBundle.BundleType(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100524140);
}

uint64_t sub_1001AB6A0(uint64_t a1)
{
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = type metadata accessor for UUID();
  unint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(a1, v3);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v5 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v6 = a1 + *(int *)(v5 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v4(v6, v3);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_13;
      case 1u:
        v4(v6, v3);
        uint64_t v7 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = v6 + v7[13];
        uint64_t v9 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v24 = *(void *)(v9 - 8);
        uint64_t v25 = v8;
        uint64_t v10 = v8;
        uint64_t v11 = v9;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v10, 1, v9)) {
          (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v11);
        }
        uint64_t v12 = (uint64_t *)(v6 + v7[14]);
        unint64_t v13 = v12[1];
        if (v13 >> 60 != 15) {
          sub_100038B34(*v12, v13);
        }
        if (*(void *)(v6 + v7[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v4(v6, v3);
        uint64_t v14 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v4(v6, v3);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v4(v6, v3);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_13:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v15 = a1 + *(int *)(v5 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v4(v15, v3);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_25;
      case 1u:
        v4(v15, v3);
        uint64_t v16 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v17 = v15 + v16[13];
        uint64_t v18 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v19 = *(void *)(v18 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
        }
        long long v20 = (uint64_t *)(v15 + v16[14]);
        unint64_t v21 = v20[1];
        if (v21 >> 60 != 15) {
          sub_100038B34(*v20, v21);
        }
        if (*(void *)(v15 + v16[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v4(v15, v3);
        uint64_t v22 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v4(v15, v3);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v4(v15, v3);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_25:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001ABC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  v8(a1, a2, v7);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v178 = v8;
    uint64_t v9 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v10 = v9[5];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        unint64_t v176 = v9;
        uint64_t v173 = a3;
        v178(v11, v12, v7);
        uint64_t v24 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v11 + v24[5]) = *(_DWORD *)(v12 + v24[5]);
        uint64_t v25 = v24[6];
        uint64_t v26 = (_OWORD *)(v11 + v25);
        uint64_t v27 = (_OWORD *)(v12 + v25);
        long long v28 = v27[3];
        void v26[2] = v27[2];
        v26[3] = v28;
        long long v29 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v29;
        *(void *)(v11 + v24[7]) = *(void *)(v12 + v24[7]);
        *(void *)(v11 + v24[8]) = *(void *)(v12 + v24[8]);
        *(void *)(v11 + v24[9]) = *(void *)(v12 + v24[9]);
        *(unsigned char *)(v11 + v24[10]) = *(unsigned char *)(v12 + v24[10]);
        uint64_t v30 = v24[11];
        long long v31 = (void *)(v11 + v30);
        uint64_t v32 = (void *)(v12 + v30);
        uint64_t v169 = v32[1];
        *long long v31 = *v32;
        v31[1] = v169;
        uint64_t v33 = v24[12];
        uint64_t v34 = (void *)(v11 + v33);
        uint64_t v35 = (void *)(v12 + v33);
        uint64_t v36 = v35[1];
        *uint64_t v34 = *v35;
        v34[1] = v36;
        uint64_t v37 = v24[13];
        __dst = (void *)(v11 + v37);
        uint64_t v168 = (const void *)(v12 + v37);
        uint64_t v38 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v166 = *(void *)(v38 - 8);
        uint64_t v167 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v166 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v167(v168, 1, v38))
        {
          uint64_t v39 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v168, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v166 + 16))(__dst, v168, v38);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v166 + 56))(__dst, 0, 1, v38);
        }
        uint64_t v76 = v24[14];
        uint64_t v77 = v11 + v76;
        uint64_t v78 = (uint64_t *)(v12 + v76);
        unint64_t v79 = v78[1];
        if (v79 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
        }
        else
        {
          uint64_t v80 = *v78;
          sub_100038528(*v78, v78[1]);
          *(void *)uint64_t v77 = v80;
          *(void *)(v77 + 8) = v79;
        }
        uint64_t v9 = v176;
        uint64_t v81 = v24[15];
        uint64_t v82 = (void *)(v11 + v81);
        uint64_t v83 = (void *)(v12 + v81);
        if (*v83)
        {
          uint64_t v84 = v83[1];
          uint64_t v85 = v83[2];
          *uint64_t v82 = *v83;
          v82[1] = v84;
          v82[2] = v85;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
          v82[2] = v83[2];
        }
        a3 = v173;
        break;
      case 2u:
        v178(v11, v12, v7);
        uint64_t v40 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v11 + v40[5]) = *(_DWORD *)(v12 + v40[5]);
        uint64_t v41 = v40[6];
        uint64_t v42 = (_OWORD *)(v11 + v41);
        uint64_t v43 = (_OWORD *)(v12 + v41);
        long long v44 = v43[3];
        v42[2] = v43[2];
        v42[3] = v44;
        long long v45 = v43[1];
        *uint64_t v42 = *v43;
        v42[1] = v45;
        uint64_t v46 = v40[7];
        long long v47 = (void *)(v11 + v46);
        uint64_t v48 = (uint64_t *)(v12 + v46);
        uint64_t v50 = *v48;
        uint64_t v49 = v48[1];
        *long long v47 = v50;
        v47[1] = v49;
        *(void *)(v11 + v40[8]) = *(void *)(v12 + v40[8]);
        *(void *)(v11 + v40[9]) = *(void *)(v12 + v40[9]);
        *(void *)(v11 + v40[10]) = *(void *)(v12 + v40[10]);
        uint64_t v174 = a3;
        *(void *)(v11 + v40[11]) = *(void *)(v12 + v40[11]);
        *(void *)(v11 + v40[12]) = *(void *)(v12 + v40[12]);
        uint64_t v51 = v40[13];
        uint64_t v52 = *(void **)(v12 + v51);
        *(void *)(v11 + v51) = v52;
        *(unsigned char *)(v11 + v40[14]) = *(unsigned char *)(v12 + v40[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v53 = v52;
        a3 = v174;
        break;
      case 3u:
      case 4u:
        v178(v11, v12, v7);
        uint64_t v54 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v11 + v54[5]) = *(_DWORD *)(v12 + v54[5]);
        uint64_t v55 = v54[6];
        uint64_t v56 = (_OWORD *)(v11 + v55);
        uint64_t v57 = (_OWORD *)(v12 + v55);
        long long v58 = v57[3];
        void v56[2] = v57[2];
        v56[3] = v58;
        long long v59 = v57[1];
        *uint64_t v56 = *v57;
        v56[1] = v59;
        uint64_t v60 = v54[7];
        long long v61 = (void *)(v11 + v60);
        uint64_t v62 = (uint64_t *)(v12 + v60);
        uint64_t v64 = *v62;
        uint64_t v63 = v62[1];
        *long long v61 = v64;
        v61[1] = v63;
        *(void *)(v11 + v54[8]) = *(void *)(v12 + v54[8]);
        *(void *)(v11 + v54[9]) = *(void *)(v12 + v54[9]);
        *(void *)(v11 + v54[10]) = *(void *)(v12 + v54[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        v178(v11, v12, v7);
        uint64_t v65 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v11 + v65[5]) = *(_DWORD *)(v12 + v65[5]);
        uint64_t v66 = v65[6];
        uint64_t v67 = (_OWORD *)(v11 + v66);
        uint64_t v68 = (_OWORD *)(v12 + v66);
        long long v69 = v68[3];
        v67[2] = v68[2];
        v67[3] = v69;
        long long v70 = v68[1];
        *uint64_t v67 = *v68;
        v67[1] = v70;
        uint64_t v71 = v65[7];
        long long v72 = (void *)(v11 + v71);
        uint64_t v73 = (uint64_t *)(v12 + v71);
        uint64_t v75 = *v73;
        uint64_t v74 = v73[1];
        *long long v72 = v75;
        v72[1] = v74;
        *(void *)(v11 + v65[8]) = *(void *)(v12 + v65[8]);
        *(void *)(v11 + v65[9]) = *(void *)(v12 + v65[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        v178(v11, v12, v7);
        unint64_t v13 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v11 + v13[5]) = *(_DWORD *)(v12 + v13[5]);
        uint64_t v14 = v13[6];
        uint64_t v15 = (_OWORD *)(v11 + v14);
        uint64_t v16 = (_OWORD *)(v12 + v14);
        long long v17 = v16[3];
        v15[2] = v16[2];
        v15[3] = v17;
        long long v18 = v16[1];
        *uint64_t v15 = *v16;
        v15[1] = v18;
        uint64_t v19 = v13[7];
        long long v20 = (void *)(v11 + v19);
        unint64_t v21 = (uint64_t *)(v12 + v19);
        uint64_t v23 = *v21;
        uint64_t v22 = v21[1];
        void *v20 = v23;
        v20[1] = v22;
        *(void *)(v11 + v13[8]) = *(void *)(v12 + v13[8]);
        *(void *)(v11 + v13[9]) = *(void *)(v12 + v13[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v86 = v9[6];
    uint64_t v87 = a1 + v86;
    uint64_t v88 = a2 + v86;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v177 = v9;
        uint64_t v175 = a3;
        v178(v87, v88, v7);
        uint64_t v100 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v87 + v100[5]) = *(_DWORD *)(v88 + v100[5]);
        uint64_t v101 = v100[6];
        uint64_t v102 = (_OWORD *)(v87 + v101);
        uint64_t v103 = (_OWORD *)(v88 + v101);
        long long v104 = v103[3];
        v102[2] = v103[2];
        v102[3] = v104;
        long long v105 = v103[1];
        *uint64_t v102 = *v103;
        v102[1] = v105;
        *(void *)(v87 + v100[7]) = *(void *)(v88 + v100[7]);
        *(void *)(v87 + v100[8]) = *(void *)(v88 + v100[8]);
        *(void *)(v87 + v100[9]) = *(void *)(v88 + v100[9]);
        *(unsigned char *)(v87 + v100[10]) = *(unsigned char *)(v88 + v100[10]);
        uint64_t v106 = v100[11];
        long long v107 = (void *)(v87 + v106);
        uint64_t v108 = (void *)(v88 + v106);
        uint64_t v109 = v108[1];
        *long long v107 = *v108;
        v107[1] = v109;
        uint64_t v110 = v100[12];
        uint64_t v111 = (void *)(v87 + v110);
        uint64_t v112 = (void *)(v88 + v110);
        uint64_t v113 = v112[1];
        *uint64_t v111 = *v112;
        v111[1] = v113;
        uint64_t v114 = v100[13];
        uint64_t v179 = (void *)(v87 + v114);
        uint64_t v171 = (const void *)(v88 + v114);
        uint64_t v115 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v116 = *(void *)(v115 - 8);
        uint64_t v170 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v116 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v170(v171, 1, v115))
        {
          uint64_t v117 = sub_10000F214(&qword_100524BD0);
          memcpy(v179, v171, *(void *)(*(void *)(v117 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v179, v171, v115);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v179, 0, 1, v115);
        }
        uint64_t v154 = v100[14];
        uint64_t v155 = v87 + v154;
        uint64_t v156 = (uint64_t *)(v88 + v154);
        unint64_t v157 = v156[1];
        a3 = v175;
        if (v157 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v155 = *(_OWORD *)v156;
        }
        else
        {
          uint64_t v158 = *v156;
          sub_100038528(*v156, v156[1]);
          *(void *)uint64_t v155 = v158;
          *(void *)(v155 + 8) = v157;
        }
        uint64_t v9 = v177;
        uint64_t v159 = v100[15];
        uint64_t v160 = (void *)(v87 + v159);
        v161 = (void *)(v88 + v159);
        if (*v161)
        {
          uint64_t v162 = v161[1];
          uint64_t v163 = v161[2];
          *uint64_t v160 = *v161;
          v160[1] = v162;
          v160[2] = v163;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v160 = *(_OWORD *)v161;
          v160[2] = v161[2];
        }
        break;
      case 2u:
        v178(v87, v88, v7);
        uint64_t v118 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v87 + v118[5]) = *(_DWORD *)(v88 + v118[5]);
        uint64_t v119 = v118[6];
        uint64_t v120 = (_OWORD *)(v87 + v119);
        uint64_t v121 = (_OWORD *)(v88 + v119);
        long long v122 = v121[3];
        v120[2] = v121[2];
        v120[3] = v122;
        long long v123 = v121[1];
        _OWORD *v120 = *v121;
        v120[1] = v123;
        uint64_t v124 = v118[7];
        uint64_t v125 = (void *)(v87 + v124);
        uint64_t v126 = (uint64_t *)(v88 + v124);
        uint64_t v128 = *v126;
        uint64_t v127 = v126[1];
        *uint64_t v125 = v128;
        v125[1] = v127;
        *(void *)(v87 + v118[8]) = *(void *)(v88 + v118[8]);
        *(void *)(v87 + v118[9]) = *(void *)(v88 + v118[9]);
        *(void *)(v87 + v118[10]) = *(void *)(v88 + v118[10]);
        *(void *)(v87 + v118[11]) = *(void *)(v88 + v118[11]);
        *(void *)(v87 + v118[12]) = *(void *)(v88 + v118[12]);
        uint64_t v129 = v118[13];
        uint64_t v130 = *(void **)(v88 + v129);
        *(void *)(v87 + v129) = v130;
        *(unsigned char *)(v87 + v118[14]) = *(unsigned char *)(v88 + v118[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v131 = v130;
        break;
      case 3u:
      case 4u:
        v178(v87, v88, v7);
        id v132 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v87 + v132[5]) = *(_DWORD *)(v88 + v132[5]);
        uint64_t v133 = v132[6];
        uint64_t v134 = (_OWORD *)(v87 + v133);
        uint64_t v135 = (_OWORD *)(v88 + v133);
        long long v136 = v135[3];
        v134[2] = v135[2];
        v134[3] = v136;
        long long v137 = v135[1];
        *uint64_t v134 = *v135;
        v134[1] = v137;
        uint64_t v138 = v132[7];
        uint64_t v139 = (void *)(v87 + v138);
        uint64_t v140 = (uint64_t *)(v88 + v138);
        uint64_t v142 = *v140;
        uint64_t v141 = v140[1];
        *uint64_t v139 = v142;
        v139[1] = v141;
        *(void *)(v87 + v132[8]) = *(void *)(v88 + v132[8]);
        *(void *)(v87 + v132[9]) = *(void *)(v88 + v132[9]);
        *(void *)(v87 + v132[10]) = *(void *)(v88 + v132[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        v178(v87, v88, v7);
        uint64_t v143 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v87 + v143[5]) = *(_DWORD *)(v88 + v143[5]);
        uint64_t v144 = v143[6];
        uint64_t v145 = (_OWORD *)(v87 + v144);
        uint64_t v146 = (_OWORD *)(v88 + v144);
        long long v147 = v146[3];
        v145[2] = v146[2];
        v145[3] = v147;
        long long v148 = v146[1];
        *uint64_t v145 = *v146;
        v145[1] = v148;
        uint64_t v149 = v143[7];
        uint64_t v150 = (void *)(v87 + v149);
        uint64_t v151 = (uint64_t *)(v88 + v149);
        uint64_t v153 = *v151;
        uint64_t v152 = v151[1];
        *uint64_t v150 = v153;
        v150[1] = v152;
        *(void *)(v87 + v143[8]) = *(void *)(v88 + v143[8]);
        *(void *)(v87 + v143[9]) = *(void *)(v88 + v143[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        v178(v87, v88, v7);
        int64_t v89 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v87 + v89[5]) = *(_DWORD *)(v88 + v89[5]);
        uint64_t v90 = v89[6];
        uint64_t v91 = (_OWORD *)(v87 + v90);
        uint64_t v92 = (_OWORD *)(v88 + v90);
        long long v93 = v92[3];
        v91[2] = v92[2];
        v91[3] = v93;
        long long v94 = v92[1];
        *uint64_t v91 = *v92;
        v91[1] = v94;
        uint64_t v95 = v89[7];
        long long v96 = (void *)(v87 + v95);
        uint64_t v97 = (uint64_t *)(v88 + v95);
        uint64_t v99 = *v97;
        uint64_t v98 = v97[1];
        *long long v96 = v99;
        v96[1] = v98;
        *(void *)(v87 + v89[8]) = *(void *)(v88 + v89[8]);
        *(void *)(v87 + v89[9]) = *(void *)(v88 + v89[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    *(unsigned char *)(a1 + v9[7]) = *(unsigned char *)(a2 + v9[7]);
    *(void *)(a1 + v9[8]) = *(void *)(a2 + v9[8]);
    *(_DWORD *)(a1 + v9[9]) = *(_DWORD *)(a2 + v9[9]);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v164 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v164) = *(void *)(a2 + v164);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001AC9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001B3678(a1, type metadata accessor for CVBundle.BundleType);
    type metadata accessor for CVBundle.BundleType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v165 = v8;
      uint64_t v9 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v10 = v9[5];
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v164 = v9;
          uint64_t v162 = a3;
          v165(v11, v12, v7);
          uint64_t v23 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(v11 + v23[5]) = *(_DWORD *)(v12 + v23[5]);
          uint64_t v24 = v23[6];
          uint64_t v25 = (_OWORD *)(v11 + v24);
          uint64_t v26 = (_OWORD *)(v12 + v24);
          long long v28 = v26[2];
          long long v27 = v26[3];
          long long v29 = v26[1];
          *uint64_t v25 = *v26;
          v25[1] = v29;
          v25[2] = v28;
          v25[3] = v27;
          *(void *)(v11 + v23[7]) = *(void *)(v12 + v23[7]);
          *(void *)(v11 + v23[8]) = *(void *)(v12 + v23[8]);
          *(void *)(v11 + v23[9]) = *(void *)(v12 + v23[9]);
          *(unsigned char *)(v11 + v23[10]) = *(unsigned char *)(v12 + v23[10]);
          uint64_t v30 = v23[11];
          long long v31 = (void *)(v11 + v30);
          uint64_t v32 = (void *)(v12 + v30);
          *long long v31 = *v32;
          v31[1] = v32[1];
          uint64_t v33 = v23[12];
          uint64_t v34 = (void *)(v11 + v33);
          uint64_t v35 = (void *)(v12 + v33);
          *uint64_t v34 = *v35;
          v34[1] = v35[1];
          uint64_t v36 = v23[13];
          __dst = (void *)(v11 + v36);
          uint64_t v158 = (const void *)(v12 + v36);
          uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v156 = *(void *)(v37 - 8);
          unint64_t v157 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v156 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v157(v158, 1, v37))
          {
            uint64_t v38 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v158, *(void *)(*(void *)(v38 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v156 + 16))(__dst, v158, v37);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v156 + 56))(__dst, 0, 1, v37);
          }
          uint64_t v72 = v23[14];
          uint64_t v73 = v11 + v72;
          uint64_t v74 = (uint64_t *)(v12 + v72);
          unint64_t v75 = v74[1];
          if (v75 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
          }
          else
          {
            uint64_t v76 = *v74;
            sub_100038528(*v74, v74[1]);
            *(void *)uint64_t v73 = v76;
            *(void *)(v73 + 8) = v75;
          }
          uint64_t v9 = v164;
          uint64_t v77 = v23[15];
          uint64_t v78 = (void *)(v11 + v77);
          unint64_t v79 = (void *)(v12 + v77);
          if (*v79)
          {
            void *v78 = *v79;
            uint64_t v80 = v79[2];
            v78[1] = v79[1];
            v78[2] = v80;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v81 = *(_OWORD *)v79;
            v78[2] = v79[2];
            *(_OWORD *)uint64_t v78 = v81;
          }
          a3 = v162;
          break;
        case 2u:
          v165(v11, v12, v7);
          uint64_t v39 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(v11 + v39[5]) = *(_DWORD *)(v12 + v39[5]);
          uint64_t v40 = v39[6];
          uint64_t v41 = (_OWORD *)(v11 + v40);
          uint64_t v42 = (_OWORD *)(v12 + v40);
          long long v44 = v42[2];
          long long v43 = v42[3];
          long long v45 = v42[1];
          *uint64_t v41 = *v42;
          v41[1] = v45;
          void v41[2] = v44;
          v41[3] = v43;
          uint64_t v46 = v39[7];
          long long v47 = (void *)(v11 + v46);
          uint64_t v48 = (void *)(v12 + v46);
          *long long v47 = *v48;
          v47[1] = v48[1];
          *(void *)(v11 + v39[8]) = *(void *)(v12 + v39[8]);
          *(void *)(v11 + v39[9]) = *(void *)(v12 + v39[9]);
          *(void *)(v11 + v39[10]) = *(void *)(v12 + v39[10]);
          uint64_t v163 = a3;
          *(void *)(v11 + v39[11]) = *(void *)(v12 + v39[11]);
          *(void *)(v11 + v39[12]) = *(void *)(v12 + v39[12]);
          uint64_t v49 = v39[13];
          uint64_t v50 = *(void **)(v12 + v49);
          *(void *)(v11 + v49) = v50;
          *(unsigned char *)(v11 + v39[14]) = *(unsigned char *)(v12 + v39[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v51 = v50;
          a3 = v163;
          break;
        case 3u:
        case 4u:
          v165(v11, v12, v7);
          uint64_t v52 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(v11 + v52[5]) = *(_DWORD *)(v12 + v52[5]);
          uint64_t v53 = v52[6];
          uint64_t v54 = (_OWORD *)(v11 + v53);
          uint64_t v55 = (_OWORD *)(v12 + v53);
          long long v57 = v55[2];
          long long v56 = v55[3];
          long long v58 = v55[1];
          *uint64_t v54 = *v55;
          v54[1] = v58;
          v54[2] = v57;
          v54[3] = v56;
          uint64_t v59 = v52[7];
          uint64_t v60 = (void *)(v11 + v59);
          long long v61 = (void *)(v12 + v59);
          *uint64_t v60 = *v61;
          v60[1] = v61[1];
          *(void *)(v11 + v52[8]) = *(void *)(v12 + v52[8]);
          *(void *)(v11 + v52[9]) = *(void *)(v12 + v52[9]);
          *(void *)(v11 + v52[10]) = *(void *)(v12 + v52[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v165(v11, v12, v7);
          uint64_t v62 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(v11 + v62[5]) = *(_DWORD *)(v12 + v62[5]);
          uint64_t v63 = v62[6];
          uint64_t v64 = (_OWORD *)(v11 + v63);
          uint64_t v65 = (_OWORD *)(v12 + v63);
          long long v67 = v65[2];
          long long v66 = v65[3];
          long long v68 = v65[1];
          *uint64_t v64 = *v65;
          v64[1] = v68;
          v64[2] = v67;
          v64[3] = v66;
          uint64_t v69 = v62[7];
          long long v70 = (void *)(v11 + v69);
          uint64_t v71 = (void *)(v12 + v69);
          *long long v70 = *v71;
          v70[1] = v71[1];
          *(void *)(v11 + v62[8]) = *(void *)(v12 + v62[8]);
          *(void *)(v11 + v62[9]) = *(void *)(v12 + v62[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          v165(v11, v12, v7);
          unint64_t v13 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(v11 + v13[5]) = *(_DWORD *)(v12 + v13[5]);
          uint64_t v14 = v13[6];
          uint64_t v15 = (_OWORD *)(v11 + v14);
          uint64_t v16 = (_OWORD *)(v12 + v14);
          long long v18 = v16[2];
          long long v17 = v16[3];
          long long v19 = v16[1];
          *uint64_t v15 = *v16;
          v15[1] = v19;
          v15[2] = v18;
          v15[3] = v17;
          uint64_t v20 = v13[7];
          unint64_t v21 = (void *)(v11 + v20);
          uint64_t v22 = (void *)(v12 + v20);
          *unint64_t v21 = *v22;
          v21[1] = v22[1];
          *(void *)(v11 + v13[8]) = *(void *)(v12 + v13[8]);
          *(void *)(v11 + v13[9]) = *(void *)(v12 + v13[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v82 = v9[6];
      uint64_t v83 = a1 + v82;
      uint64_t v84 = a2 + v82;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v165(v83, v84, v7);
          uint64_t v95 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(v83 + v95[5]) = *(_DWORD *)(v84 + v95[5]);
          uint64_t v96 = v95[6];
          uint64_t v97 = (_OWORD *)(v83 + v96);
          uint64_t v98 = (_OWORD *)(v84 + v96);
          long long v100 = v98[2];
          long long v99 = v98[3];
          long long v101 = v98[1];
          _OWORD *v97 = *v98;
          v97[1] = v101;
          v97[2] = v100;
          v97[3] = v99;
          *(void *)(v83 + v95[7]) = *(void *)(v84 + v95[7]);
          *(void *)(v83 + v95[8]) = *(void *)(v84 + v95[8]);
          *(void *)(v83 + v95[9]) = *(void *)(v84 + v95[9]);
          *(unsigned char *)(v83 + v95[10]) = *(unsigned char *)(v84 + v95[10]);
          uint64_t v102 = v95[11];
          uint64_t v103 = (void *)(v83 + v102);
          long long v104 = (void *)(v84 + v102);
          void *v103 = *v104;
          v103[1] = v104[1];
          uint64_t v105 = v95[12];
          uint64_t v106 = (void *)(v83 + v105);
          long long v107 = (void *)(v84 + v105);
          *uint64_t v106 = *v107;
          v106[1] = v107[1];
          uint64_t v108 = v95[13];
          uint64_t v166 = (void *)(v83 + v108);
          uint64_t v160 = (const void *)(v84 + v108);
          uint64_t v109 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v110 = *(void *)(v109 - 8);
          uint64_t v159 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v110 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v159(v160, 1, v109))
          {
            uint64_t v111 = sub_10000F214(&qword_100524BD0);
            memcpy(v166, v160, *(void *)(*(void *)(v111 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v110 + 16))(v166, v160, v109);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v166, 0, 1, v109);
          }
          uint64_t v145 = v95[14];
          uint64_t v146 = v83 + v145;
          long long v147 = (uint64_t *)(v84 + v145);
          unint64_t v148 = v147[1];
          if (v148 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v146 = *(_OWORD *)v147;
          }
          else
          {
            uint64_t v149 = *v147;
            sub_100038528(*v147, v147[1]);
            *(void *)uint64_t v146 = v149;
            *(void *)(v146 + 8) = v148;
          }
          uint64_t v150 = v95[15];
          uint64_t v151 = (void *)(v83 + v150);
          uint64_t v152 = (void *)(v84 + v150);
          if (*v152)
          {
            *uint64_t v151 = *v152;
            uint64_t v153 = v152[2];
            v151[1] = v152[1];
            v151[2] = v153;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v154 = *(_OWORD *)v152;
            v151[2] = v152[2];
            *(_OWORD *)uint64_t v151 = v154;
          }
          break;
        case 2u:
          v165(v83, v84, v7);
          uint64_t v112 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(v83 + v112[5]) = *(_DWORD *)(v84 + v112[5]);
          uint64_t v113 = v112[6];
          uint64_t v114 = (_OWORD *)(v83 + v113);
          uint64_t v115 = (_OWORD *)(v84 + v113);
          long long v117 = v115[2];
          long long v116 = v115[3];
          long long v118 = v115[1];
          *uint64_t v114 = *v115;
          v114[1] = v118;
          v114[2] = v117;
          v114[3] = v116;
          uint64_t v119 = v112[7];
          uint64_t v120 = (void *)(v83 + v119);
          uint64_t v121 = (void *)(v84 + v119);
          void *v120 = *v121;
          v120[1] = v121[1];
          *(void *)(v83 + v112[8]) = *(void *)(v84 + v112[8]);
          *(void *)(v83 + v112[9]) = *(void *)(v84 + v112[9]);
          *(void *)(v83 + v112[10]) = *(void *)(v84 + v112[10]);
          *(void *)(v83 + v112[11]) = *(void *)(v84 + v112[11]);
          *(void *)(v83 + v112[12]) = *(void *)(v84 + v112[12]);
          uint64_t v122 = v112[13];
          long long v123 = *(void **)(v84 + v122);
          *(void *)(v83 + v122) = v123;
          *(unsigned char *)(v83 + v112[14]) = *(unsigned char *)(v84 + v112[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v124 = v123;
          break;
        case 3u:
        case 4u:
          v165(v83, v84, v7);
          uint64_t v125 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(v83 + v125[5]) = *(_DWORD *)(v84 + v125[5]);
          uint64_t v126 = v125[6];
          uint64_t v127 = (_OWORD *)(v83 + v126);
          uint64_t v128 = (_OWORD *)(v84 + v126);
          long long v130 = v128[2];
          long long v129 = v128[3];
          long long v131 = v128[1];
          *uint64_t v127 = *v128;
          v127[1] = v131;
          v127[2] = v130;
          v127[3] = v129;
          uint64_t v132 = v125[7];
          uint64_t v133 = (void *)(v83 + v132);
          uint64_t v134 = (void *)(v84 + v132);
          *uint64_t v133 = *v134;
          v133[1] = v134[1];
          *(void *)(v83 + v125[8]) = *(void *)(v84 + v125[8]);
          *(void *)(v83 + v125[9]) = *(void *)(v84 + v125[9]);
          *(void *)(v83 + v125[10]) = *(void *)(v84 + v125[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v165(v83, v84, v7);
          uint64_t v135 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(v83 + v135[5]) = *(_DWORD *)(v84 + v135[5]);
          uint64_t v136 = v135[6];
          long long v137 = (_OWORD *)(v83 + v136);
          uint64_t v138 = (_OWORD *)(v84 + v136);
          long long v140 = v138[2];
          long long v139 = v138[3];
          long long v141 = v138[1];
          _OWORD *v137 = *v138;
          v137[1] = v141;
          v137[2] = v140;
          v137[3] = v139;
          uint64_t v142 = v135[7];
          uint64_t v143 = (void *)(v83 + v142);
          uint64_t v144 = (void *)(v84 + v142);
          *uint64_t v143 = *v144;
          v143[1] = v144[1];
          *(void *)(v83 + v135[8]) = *(void *)(v84 + v135[8]);
          *(void *)(v83 + v135[9]) = *(void *)(v84 + v135[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          v165(v83, v84, v7);
          uint64_t v85 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(v83 + v85[5]) = *(_DWORD *)(v84 + v85[5]);
          uint64_t v86 = v85[6];
          uint64_t v87 = (_OWORD *)(v83 + v86);
          uint64_t v88 = (_OWORD *)(v84 + v86);
          long long v90 = v88[2];
          long long v89 = v88[3];
          long long v91 = v88[1];
          *uint64_t v87 = *v88;
          v87[1] = v91;
          v87[2] = v90;
          v87[3] = v89;
          uint64_t v92 = v85[7];
          long long v93 = (void *)(v83 + v92);
          long long v94 = (void *)(v84 + v92);
          *long long v93 = *v94;
          v93[1] = v94[1];
          *(void *)(v83 + v85[8]) = *(void *)(v84 + v85[8]);
          *(void *)(v83 + v85[9]) = *(void *)(v84 + v85[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      *(unsigned char *)(a1 + v9[7]) = *(unsigned char *)(a2 + v9[7]);
      *(void *)(a1 + v9[8]) = *(void *)(a2 + v9[8]);
      *(_DWORD *)(a1 + v9[9]) = *(_DWORD *)(a2 + v9[9]);
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001AD7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32);
  v8(a1, a2, v7);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v9 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v10 = v9[5];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v97 = v9;
        uint64_t v95 = a3;
        v8(v11, v12, v7);
        long long v19 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v11 + v19[5]) = *(_DWORD *)(v12 + v19[5]);
        uint64_t v20 = v19[6];
        unint64_t v21 = (_OWORD *)(v11 + v20);
        uint64_t v22 = (_OWORD *)(v12 + v20);
        long long v23 = v22[3];
        v21[2] = v22[2];
        v21[3] = v23;
        long long v24 = v22[1];
        *unint64_t v21 = *v22;
        v21[1] = v24;
        *(void *)(v11 + v19[7]) = *(void *)(v12 + v19[7]);
        *(void *)(v11 + v19[8]) = *(void *)(v12 + v19[8]);
        *(void *)(v11 + v19[9]) = *(void *)(v12 + v19[9]);
        *(unsigned char *)(v11 + v19[10]) = *(unsigned char *)(v12 + v19[10]);
        *(_OWORD *)(v11 + v19[11]) = *(_OWORD *)(v12 + v19[11]);
        *(_OWORD *)(v11 + v19[12]) = *(_OWORD *)(v12 + v19[12]);
        uint64_t v25 = v19[13];
        __dst = (void *)(v11 + v25);
        uint64_t v26 = (const void *)(v12 + v25);
        uint64_t v27 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v94 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v94 + 48))(v26, 1, v27))
        {
          uint64_t v28 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v26, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v94 + 32))(__dst, v26, v27);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v94 + 56))(__dst, 0, 1, v27);
        }
        uint64_t v9 = v97;
        *(_OWORD *)(v11 + v19[14]) = *(_OWORD *)(v12 + v19[14]);
        uint64_t v88 = v19[15];
        uint64_t v89 = v11 + v88;
        uint64_t v90 = v12 + v88;
        *(void *)(v89 + 16) = *(void *)(v90 + 16);
        *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        swift_storeEnumTagMultiPayload();
        a3 = v95;
        goto LABEL_10;
      case 2u:
        v8(v11, v12, v7);
        long long v29 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v11 + v29[5]) = *(_DWORD *)(v12 + v29[5]);
        uint64_t v30 = v29[6];
        long long v31 = (_OWORD *)(v11 + v30);
        uint64_t v32 = (_OWORD *)(v12 + v30);
        long long v33 = v32[3];
        void v31[2] = v32[2];
        v31[3] = v33;
        long long v34 = v32[1];
        *long long v31 = *v32;
        v31[1] = v34;
        *(_OWORD *)(v11 + v29[7]) = *(_OWORD *)(v12 + v29[7]);
        *(void *)(v11 + v29[8]) = *(void *)(v12 + v29[8]);
        *(void *)(v11 + v29[9]) = *(void *)(v12 + v29[9]);
        *(void *)(v11 + v29[10]) = *(void *)(v12 + v29[10]);
        *(void *)(v11 + v29[11]) = *(void *)(v12 + v29[11]);
        *(void *)(v11 + v29[12]) = *(void *)(v12 + v29[12]);
        *(void *)(v11 + v29[13]) = *(void *)(v12 + v29[13]);
        *(unsigned char *)(v11 + v29[14]) = *(unsigned char *)(v12 + v29[14]);
        goto LABEL_9;
      case 3u:
      case 4u:
        v8(v11, v12, v7);
        uint64_t v35 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v11 + v35[5]) = *(_DWORD *)(v12 + v35[5]);
        uint64_t v36 = v35[6];
        uint64_t v37 = (_OWORD *)(v11 + v36);
        uint64_t v38 = (_OWORD *)(v12 + v36);
        long long v39 = v38[3];
        void v37[2] = v38[2];
        v37[3] = v39;
        long long v40 = v38[1];
        *uint64_t v37 = *v38;
        v37[1] = v40;
        *(_OWORD *)(v11 + v35[7]) = *(_OWORD *)(v12 + v35[7]);
        *(void *)(v11 + v35[8]) = *(void *)(v12 + v35[8]);
        *(void *)(v11 + v35[9]) = *(void *)(v12 + v35[9]);
        *(void *)(v11 + v35[10]) = *(void *)(v12 + v35[10]);
        goto LABEL_9;
      case 5u:
        v8(v11, v12, v7);
        uint64_t v41 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v11 + v41[5]) = *(_DWORD *)(v12 + v41[5]);
        uint64_t v42 = v41[6];
        long long v43 = (_OWORD *)(v11 + v42);
        long long v44 = (_OWORD *)(v12 + v42);
        long long v45 = v44[3];
        v43[2] = v44[2];
        v43[3] = v45;
        long long v46 = v44[1];
        *long long v43 = *v44;
        v43[1] = v46;
        *(_OWORD *)(v11 + v41[7]) = *(_OWORD *)(v12 + v41[7]);
        *(void *)(v11 + v41[8]) = *(void *)(v12 + v41[8]);
        *(void *)(v11 + v41[9]) = *(void *)(v12 + v41[9]);
        goto LABEL_9;
      default:
        v8(v11, v12, v7);
        unint64_t v13 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v11 + v13[5]) = *(_DWORD *)(v12 + v13[5]);
        uint64_t v14 = v13[6];
        uint64_t v15 = (_OWORD *)(v11 + v14);
        uint64_t v16 = (_OWORD *)(v12 + v14);
        long long v17 = v16[3];
        v15[2] = v16[2];
        v15[3] = v17;
        long long v18 = v16[1];
        *uint64_t v15 = *v16;
        v15[1] = v18;
        *(_OWORD *)(v11 + v13[7]) = *(_OWORD *)(v12 + v13[7]);
        *(void *)(v11 + v13[8]) = *(void *)(v12 + v13[8]);
        *(void *)(v11 + v13[9]) = *(void *)(v12 + v13[9]);
LABEL_9:
        swift_storeEnumTagMultiPayload();
LABEL_10:
        uint64_t v47 = v9[6];
        uint64_t v48 = a1 + v47;
        uint64_t v49 = a2 + v47;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v98 = v9;
            v8(v48, v49, v7);
            long long v56 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)(v48 + v56[5]) = *(_DWORD *)(v49 + v56[5]);
            uint64_t v57 = v56[6];
            long long v58 = (_OWORD *)(v48 + v57);
            uint64_t v59 = (_OWORD *)(v49 + v57);
            long long v60 = v59[3];
            v58[2] = v59[2];
            v58[3] = v60;
            long long v61 = v59[1];
            *long long v58 = *v59;
            v58[1] = v61;
            *(void *)(v48 + v56[7]) = *(void *)(v49 + v56[7]);
            *(void *)(v48 + v56[8]) = *(void *)(v49 + v56[8]);
            *(void *)(v48 + v56[9]) = *(void *)(v49 + v56[9]);
            *(unsigned char *)(v48 + v56[10]) = *(unsigned char *)(v49 + v56[10]);
            *(_OWORD *)(v48 + v56[11]) = *(_OWORD *)(v49 + v56[11]);
            *(_OWORD *)(v48 + v56[12]) = *(_OWORD *)(v49 + v56[12]);
            uint64_t v62 = v56[13];
            uint64_t v63 = (void *)(v48 + v62);
            uint64_t v64 = (const void *)(v49 + v62);
            uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v66 = *(void *)(v65 - 8);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
            {
              uint64_t v67 = sub_10000F214(&qword_100524BD0);
              memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v66 + 32))(v63, v64, v65);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
            }
            uint64_t v9 = v98;
            *(_OWORD *)(v48 + v56[14]) = *(_OWORD *)(v49 + v56[14]);
            uint64_t v91 = v56[15];
            uint64_t v92 = v48 + v91;
            uint64_t v93 = v49 + v91;
            *(void *)(v92 + 16) = *(void *)(v93 + 16);
            *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
            swift_storeEnumTagMultiPayload();
            goto LABEL_18;
          case 2u:
            v8(v48, v49, v7);
            long long v68 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)(v48 + v68[5]) = *(_DWORD *)(v49 + v68[5]);
            uint64_t v69 = v68[6];
            long long v70 = (_OWORD *)(v48 + v69);
            uint64_t v71 = (_OWORD *)(v49 + v69);
            long long v72 = v71[3];
            v70[2] = v71[2];
            v70[3] = v72;
            long long v73 = v71[1];
            *long long v70 = *v71;
            v70[1] = v73;
            *(_OWORD *)(v48 + v68[7]) = *(_OWORD *)(v49 + v68[7]);
            *(void *)(v48 + v68[8]) = *(void *)(v49 + v68[8]);
            *(void *)(v48 + v68[9]) = *(void *)(v49 + v68[9]);
            *(void *)(v48 + v68[10]) = *(void *)(v49 + v68[10]);
            *(void *)(v48 + v68[11]) = *(void *)(v49 + v68[11]);
            *(void *)(v48 + v68[12]) = *(void *)(v49 + v68[12]);
            *(void *)(v48 + v68[13]) = *(void *)(v49 + v68[13]);
            *(unsigned char *)(v48 + v68[14]) = *(unsigned char *)(v49 + v68[14]);
            goto LABEL_17;
          case 3u:
          case 4u:
            v8(v48, v49, v7);
            uint64_t v74 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)(v48 + v74[5]) = *(_DWORD *)(v49 + v74[5]);
            uint64_t v75 = v74[6];
            uint64_t v76 = (_OWORD *)(v48 + v75);
            uint64_t v77 = (_OWORD *)(v49 + v75);
            long long v78 = v77[3];
            v76[2] = v77[2];
            v76[3] = v78;
            long long v79 = v77[1];
            *uint64_t v76 = *v77;
            v76[1] = v79;
            *(_OWORD *)(v48 + v74[7]) = *(_OWORD *)(v49 + v74[7]);
            *(void *)(v48 + v74[8]) = *(void *)(v49 + v74[8]);
            *(void *)(v48 + v74[9]) = *(void *)(v49 + v74[9]);
            *(void *)(v48 + v74[10]) = *(void *)(v49 + v74[10]);
            goto LABEL_17;
          case 5u:
            v8(v48, v49, v7);
            uint64_t v80 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)(v48 + v80[5]) = *(_DWORD *)(v49 + v80[5]);
            uint64_t v81 = v80[6];
            uint64_t v82 = (_OWORD *)(v48 + v81);
            uint64_t v83 = (_OWORD *)(v49 + v81);
            long long v84 = v83[3];
            v82[2] = v83[2];
            v82[3] = v84;
            long long v85 = v83[1];
            *uint64_t v82 = *v83;
            v82[1] = v85;
            *(_OWORD *)(v48 + v80[7]) = *(_OWORD *)(v49 + v80[7]);
            *(void *)(v48 + v80[8]) = *(void *)(v49 + v80[8]);
            *(void *)(v48 + v80[9]) = *(void *)(v49 + v80[9]);
            goto LABEL_17;
          default:
            v8(v48, v49, v7);
            uint64_t v50 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)(v48 + v50[5]) = *(_DWORD *)(v49 + v50[5]);
            uint64_t v51 = v50[6];
            uint64_t v52 = (_OWORD *)(v48 + v51);
            uint64_t v53 = (_OWORD *)(v49 + v51);
            long long v54 = v53[3];
            v52[2] = v53[2];
            v52[3] = v54;
            long long v55 = v53[1];
            *uint64_t v52 = *v53;
            v52[1] = v55;
            *(_OWORD *)(v48 + v50[7]) = *(_OWORD *)(v49 + v50[7]);
            *(void *)(v48 + v50[8]) = *(void *)(v49 + v50[8]);
            *(void *)(v48 + v50[9]) = *(void *)(v49 + v50[9]);
LABEL_17:
            swift_storeEnumTagMultiPayload();
LABEL_18:
            *(unsigned char *)(a1 + v9[7]) = *(unsigned char *)(a2 + v9[7]);
            *(void *)(a1 + v9[8]) = *(void *)(a2 + v9[8]);
            *(_DWORD *)(a1 + v9[9]) = *(_DWORD *)(a2 + v9[9]);
            break;
        }
        break;
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v86 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v86) = *(void *)(a2 + v86);
  return a1;
}

uint64_t sub_1001AE2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001B3678(a1, type metadata accessor for CVBundle.BundleType);
    type metadata accessor for CVBundle.BundleType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v9 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v10 = v9[5];
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v98 = v9;
          v8(v11, v12, v7);
          long long v19 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(v11 + v19[5]) = *(_DWORD *)(v12 + v19[5]);
          uint64_t v20 = v19[6];
          unint64_t v21 = (_OWORD *)(v11 + v20);
          uint64_t v22 = (_OWORD *)(v12 + v20);
          long long v23 = v22[3];
          v21[2] = v22[2];
          v21[3] = v23;
          long long v24 = v22[1];
          *unint64_t v21 = *v22;
          v21[1] = v24;
          *(void *)(v11 + v19[7]) = *(void *)(v12 + v19[7]);
          *(void *)(v11 + v19[8]) = *(void *)(v12 + v19[8]);
          *(void *)(v11 + v19[9]) = *(void *)(v12 + v19[9]);
          *(unsigned char *)(v11 + v19[10]) = *(unsigned char *)(v12 + v19[10]);
          *(_OWORD *)(v11 + v19[11]) = *(_OWORD *)(v12 + v19[11]);
          *(_OWORD *)(v11 + v19[12]) = *(_OWORD *)(v12 + v19[12]);
          uint64_t v25 = v19[13];
          uint64_t v97 = (void *)(v11 + v25);
          uint64_t v26 = (const void *)(v12 + v25);
          uint64_t v27 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v95 = *(void *)(v27 - 8);
          uint64_t v96 = v26;
          uint64_t v28 = v26;
          uint64_t v29 = v27;
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v95 + 48))(v28, 1, v27))
          {
            uint64_t v30 = sub_10000F214(&qword_100524BD0);
            memcpy(v97, v96, *(void *)(*(void *)(v30 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v95 + 32))(v97, v96, v29);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v95 + 56))(v97, 0, 1, v29);
          }
          uint64_t v9 = v98;
          *(_OWORD *)(v11 + v19[14]) = *(_OWORD *)(v12 + v19[14]);
          uint64_t v89 = v19[15];
          uint64_t v90 = v11 + v89;
          uint64_t v91 = v12 + v89;
          *(void *)(v90 + 16) = *(void *)(v91 + 16);
          *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
          swift_storeEnumTagMultiPayload();
          goto LABEL_11;
        case 2u:
          v8(v11, v12, v7);
          long long v31 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(v11 + v31[5]) = *(_DWORD *)(v12 + v31[5]);
          uint64_t v32 = v31[6];
          long long v33 = (_OWORD *)(v11 + v32);
          long long v34 = (_OWORD *)(v12 + v32);
          long long v35 = v34[3];
          v33[2] = v34[2];
          v33[3] = v35;
          long long v36 = v34[1];
          *long long v33 = *v34;
          v33[1] = v36;
          *(_OWORD *)(v11 + v31[7]) = *(_OWORD *)(v12 + v31[7]);
          *(void *)(v11 + v31[8]) = *(void *)(v12 + v31[8]);
          *(void *)(v11 + v31[9]) = *(void *)(v12 + v31[9]);
          *(void *)(v11 + v31[10]) = *(void *)(v12 + v31[10]);
          *(void *)(v11 + v31[11]) = *(void *)(v12 + v31[11]);
          *(void *)(v11 + v31[12]) = *(void *)(v12 + v31[12]);
          *(void *)(v11 + v31[13]) = *(void *)(v12 + v31[13]);
          *(unsigned char *)(v11 + v31[14]) = *(unsigned char *)(v12 + v31[14]);
          goto LABEL_10;
        case 3u:
        case 4u:
          v8(v11, v12, v7);
          uint64_t v37 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(v11 + v37[5]) = *(_DWORD *)(v12 + v37[5]);
          uint64_t v38 = v37[6];
          long long v39 = (_OWORD *)(v11 + v38);
          long long v40 = (_OWORD *)(v12 + v38);
          long long v41 = v40[3];
          v39[2] = v40[2];
          v39[3] = v41;
          long long v42 = v40[1];
          *long long v39 = *v40;
          v39[1] = v42;
          *(_OWORD *)(v11 + v37[7]) = *(_OWORD *)(v12 + v37[7]);
          *(void *)(v11 + v37[8]) = *(void *)(v12 + v37[8]);
          *(void *)(v11 + v37[9]) = *(void *)(v12 + v37[9]);
          *(void *)(v11 + v37[10]) = *(void *)(v12 + v37[10]);
          goto LABEL_10;
        case 5u:
          v8(v11, v12, v7);
          long long v43 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(v11 + v43[5]) = *(_DWORD *)(v12 + v43[5]);
          uint64_t v44 = v43[6];
          long long v45 = (_OWORD *)(v11 + v44);
          long long v46 = (_OWORD *)(v12 + v44);
          long long v47 = v46[3];
          v45[2] = v46[2];
          v45[3] = v47;
          long long v48 = v46[1];
          *long long v45 = *v46;
          v45[1] = v48;
          *(_OWORD *)(v11 + v43[7]) = *(_OWORD *)(v12 + v43[7]);
          *(void *)(v11 + v43[8]) = *(void *)(v12 + v43[8]);
          *(void *)(v11 + v43[9]) = *(void *)(v12 + v43[9]);
          goto LABEL_10;
        default:
          v8(v11, v12, v7);
          unint64_t v13 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(v11 + v13[5]) = *(_DWORD *)(v12 + v13[5]);
          uint64_t v14 = v13[6];
          uint64_t v15 = (_OWORD *)(v11 + v14);
          uint64_t v16 = (_OWORD *)(v12 + v14);
          long long v17 = v16[3];
          v15[2] = v16[2];
          v15[3] = v17;
          long long v18 = v16[1];
          *uint64_t v15 = *v16;
          v15[1] = v18;
          *(_OWORD *)(v11 + v13[7]) = *(_OWORD *)(v12 + v13[7]);
          *(void *)(v11 + v13[8]) = *(void *)(v12 + v13[8]);
          *(void *)(v11 + v13[9]) = *(void *)(v12 + v13[9]);
LABEL_10:
          swift_storeEnumTagMultiPayload();
LABEL_11:
          uint64_t v49 = v9[6];
          uint64_t v50 = a1 + v49;
          uint64_t v51 = a2 + v49;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              long long v99 = v9;
              v8(v50, v51, v7);
              long long v58 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)(v50 + v58[5]) = *(_DWORD *)(v51 + v58[5]);
              uint64_t v59 = v58[6];
              long long v60 = (_OWORD *)(v50 + v59);
              long long v61 = (_OWORD *)(v51 + v59);
              long long v62 = v61[3];
              v60[2] = v61[2];
              v60[3] = v62;
              long long v63 = v61[1];
              *long long v60 = *v61;
              v60[1] = v63;
              *(void *)(v50 + v58[7]) = *(void *)(v51 + v58[7]);
              *(void *)(v50 + v58[8]) = *(void *)(v51 + v58[8]);
              *(void *)(v50 + v58[9]) = *(void *)(v51 + v58[9]);
              *(unsigned char *)(v50 + v58[10]) = *(unsigned char *)(v51 + v58[10]);
              *(_OWORD *)(v50 + v58[11]) = *(_OWORD *)(v51 + v58[11]);
              *(_OWORD *)(v50 + v58[12]) = *(_OWORD *)(v51 + v58[12]);
              uint64_t v64 = v58[13];
              uint64_t v65 = (void *)(v50 + v64);
              uint64_t v66 = (const void *)(v51 + v64);
              uint64_t v67 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v68 = *(void *)(v67 - 8);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
              {
                uint64_t v69 = sub_10000F214(&qword_100524BD0);
                memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v68 + 32))(v65, v66, v67);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
              }
              uint64_t v9 = v99;
              *(_OWORD *)(v50 + v58[14]) = *(_OWORD *)(v51 + v58[14]);
              uint64_t v92 = v58[15];
              uint64_t v93 = v50 + v92;
              uint64_t v94 = v51 + v92;
              *(void *)(v93 + 16) = *(void *)(v94 + 16);
              *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
              swift_storeEnumTagMultiPayload();
              goto LABEL_19;
            case 2u:
              v8(v50, v51, v7);
              long long v70 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)(v50 + v70[5]) = *(_DWORD *)(v51 + v70[5]);
              uint64_t v71 = v70[6];
              long long v72 = (_OWORD *)(v50 + v71);
              long long v73 = (_OWORD *)(v51 + v71);
              long long v74 = v73[3];
              v72[2] = v73[2];
              v72[3] = v74;
              long long v75 = v73[1];
              *long long v72 = *v73;
              v72[1] = v75;
              *(_OWORD *)(v50 + v70[7]) = *(_OWORD *)(v51 + v70[7]);
              *(void *)(v50 + v70[8]) = *(void *)(v51 + v70[8]);
              *(void *)(v50 + v70[9]) = *(void *)(v51 + v70[9]);
              *(void *)(v50 + v70[10]) = *(void *)(v51 + v70[10]);
              *(void *)(v50 + v70[11]) = *(void *)(v51 + v70[11]);
              *(void *)(v50 + v70[12]) = *(void *)(v51 + v70[12]);
              *(void *)(v50 + v70[13]) = *(void *)(v51 + v70[13]);
              *(unsigned char *)(v50 + v70[14]) = *(unsigned char *)(v51 + v70[14]);
              goto LABEL_18;
            case 3u:
            case 4u:
              v8(v50, v51, v7);
              uint64_t v76 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)(v50 + v76[5]) = *(_DWORD *)(v51 + v76[5]);
              uint64_t v77 = v76[6];
              long long v78 = (_OWORD *)(v50 + v77);
              long long v79 = (_OWORD *)(v51 + v77);
              long long v80 = v79[3];
              v78[2] = v79[2];
              v78[3] = v80;
              long long v81 = v79[1];
              _OWORD *v78 = *v79;
              v78[1] = v81;
              *(_OWORD *)(v50 + v76[7]) = *(_OWORD *)(v51 + v76[7]);
              *(void *)(v50 + v76[8]) = *(void *)(v51 + v76[8]);
              *(void *)(v50 + v76[9]) = *(void *)(v51 + v76[9]);
              *(void *)(v50 + v76[10]) = *(void *)(v51 + v76[10]);
              goto LABEL_18;
            case 5u:
              v8(v50, v51, v7);
              uint64_t v82 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)(v50 + v82[5]) = *(_DWORD *)(v51 + v82[5]);
              uint64_t v83 = v82[6];
              long long v84 = (_OWORD *)(v50 + v83);
              long long v85 = (_OWORD *)(v51 + v83);
              long long v86 = v85[3];
              v84[2] = v85[2];
              v84[3] = v86;
              long long v87 = v85[1];
              *long long v84 = *v85;
              v84[1] = v87;
              *(_OWORD *)(v50 + v82[7]) = *(_OWORD *)(v51 + v82[7]);
              *(void *)(v50 + v82[8]) = *(void *)(v51 + v82[8]);
              *(void *)(v50 + v82[9]) = *(void *)(v51 + v82[9]);
              goto LABEL_18;
            default:
              v8(v50, v51, v7);
              uint64_t v52 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)(v50 + v52[5]) = *(_DWORD *)(v51 + v52[5]);
              uint64_t v53 = v52[6];
              long long v54 = (_OWORD *)(v50 + v53);
              long long v55 = (_OWORD *)(v51 + v53);
              long long v56 = v55[3];
              v54[2] = v55[2];
              v54[3] = v56;
              long long v57 = v55[1];
              *long long v54 = *v55;
              v54[1] = v57;
              *(_OWORD *)(v50 + v52[7]) = *(_OWORD *)(v51 + v52[7]);
              *(void *)(v50 + v52[8]) = *(void *)(v51 + v52[8]);
              *(void *)(v50 + v52[9]) = *(void *)(v51 + v52[9]);
LABEL_18:
              swift_storeEnumTagMultiPayload();
LABEL_19:
              *(unsigned char *)(a1 + v9[7]) = *(unsigned char *)(a2 + v9[7]);
              *(void *)(a1 + v9[8]) = *(void *)(a2 + v9[8]);
              *(_DWORD *)(a1 + v9[9]) = *(_DWORD *)(a2 + v9[9]);
              break;
          }
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001AEDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AEDD4);
}

uint64_t sub_1001AEDD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CVBundle.BundleType(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001AEE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AEEA8);
}

uint64_t sub_1001AEEA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CVBundle.BundleType(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for CVBundle(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100524090);
}

uint64_t sub_1001AEF84()
{
  uint64_t result = type metadata accessor for CVBundle.BundleType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1001AF020(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    if (EnumCaseMultiPayload != 1)
    {
      unint64_t v10 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v11 = v10[5];
      uint64_t v12 = (char *)a1 + v11;
      unint64_t v13 = (char *)a2 + v11;
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v174 = v10;
          uint64_t v173 = v8;
          v8(v12, v13, v7);
          uint64_t v25 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v12[v25[5]] = *(_DWORD *)&v13[v25[5]];
          uint64_t v26 = v25[6];
          uint64_t v27 = &v12[v26];
          uint64_t v28 = &v13[v26];
          long long v29 = *((_OWORD *)v28 + 3);
          *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
          *((_OWORD *)v27 + 3) = v29;
          long long v30 = *((_OWORD *)v28 + 1);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
          *((_OWORD *)v27 + 1) = v30;
          *(void *)&v12[v25[7]] = *(void *)&v13[v25[7]];
          *(void *)&v12[v25[8]] = *(void *)&v13[v25[8]];
          *(void *)&v12[v25[9]] = *(void *)&v13[v25[9]];
          v12[v25[10]] = v13[v25[10]];
          uint64_t v31 = v25[11];
          uint64_t v32 = &v12[v31];
          long long v33 = &v13[v31];
          uint64_t v167 = *((void *)v33 + 1);
          *(void *)uint64_t v32 = *(void *)v33;
          *((void *)v32 + 1) = v167;
          uint64_t v34 = v25[12];
          long long v35 = &v12[v34];
          long long v36 = &v13[v34];
          uint64_t v37 = *((void *)v36 + 1);
          *(void *)long long v35 = *(void *)v36;
          *((void *)v35 + 1) = v37;
          uint64_t v38 = v25[13];
          __dst = &v12[v38];
          uint64_t v166 = &v13[v38];
          uint64_t v39 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v164 = *(void *)(v39 - 8);
          uint64_t v165 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v165(v166, 1, v39))
          {
            uint64_t v40 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v166, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v164 + 16))(__dst, v166, v39);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(__dst, 0, 1, v39);
          }
          uint64_t v77 = v25[14];
          long long v78 = &v12[v77];
          long long v79 = (uint64_t *)&v13[v77];
          unint64_t v80 = v79[1];
          unint64_t v10 = v174;
          if (v80 >> 60 == 15)
          {
            *(_OWORD *)long long v78 = *(_OWORD *)v79;
          }
          else
          {
            __dstb = (void *)*v79;
            sub_100038528(*v79, v80);
            *(void *)long long v78 = __dstb;
            *((void *)v78 + 1) = v80;
          }
          uint64_t v81 = v25[15];
          uint64_t v82 = &v12[v81];
          uint64_t v83 = &v13[v81];
          if (*(void *)v83)
          {
            uint64_t v84 = *((void *)v83 + 1);
            uint64_t v85 = *((void *)v83 + 2);
            *(void *)uint64_t v82 = *(void *)v83;
            *((void *)v82 + 1) = v84;
            *((void *)v82 + 2) = v85;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
            *((void *)v82 + 2) = *((void *)v83 + 2);
          }
          uint64_t v8 = v173;
          break;
        case 2u:
          v8(v12, v13, v7);
          long long v41 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v12[v41[5]] = *(_DWORD *)&v13[v41[5]];
          uint64_t v42 = v41[6];
          long long v43 = &v12[v42];
          uint64_t v44 = &v13[v42];
          long long v45 = *((_OWORD *)v44 + 3);
          *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
          *((_OWORD *)v43 + 3) = v45;
          long long v46 = *((_OWORD *)v44 + 1);
          *(_OWORD *)long long v43 = *(_OWORD *)v44;
          *((_OWORD *)v43 + 1) = v46;
          uint64_t v47 = v41[7];
          long long v48 = &v12[v47];
          uint64_t v49 = &v13[v47];
          uint64_t v51 = *(void *)v49;
          uint64_t v50 = *((void *)v49 + 1);
          *(void *)long long v48 = v51;
          *((void *)v48 + 1) = v50;
          *(void *)&v12[v41[8]] = *(void *)&v13[v41[8]];
          *(void *)&v12[v41[9]] = *(void *)&v13[v41[9]];
          *(void *)&v12[v41[10]] = *(void *)&v13[v41[10]];
          uint64_t v175 = v10;
          *(void *)&v12[v41[11]] = *(void *)&v13[v41[11]];
          *(void *)&v12[v41[12]] = *(void *)&v13[v41[12]];
          uint64_t v52 = v41[13];
          uint64_t v53 = *(void **)&v13[v52];
          *(void *)&v12[v52] = v53;
          v12[v41[14]] = v13[v41[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v54 = v53;
          unint64_t v10 = v175;
          break;
        case 3u:
        case 4u:
          v8(v12, v13, v7);
          long long v55 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v12[v55[5]] = *(_DWORD *)&v13[v55[5]];
          uint64_t v56 = v55[6];
          long long v57 = &v12[v56];
          long long v58 = &v13[v56];
          long long v59 = *((_OWORD *)v58 + 3);
          *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
          *((_OWORD *)v57 + 3) = v59;
          long long v60 = *((_OWORD *)v58 + 1);
          *(_OWORD *)long long v57 = *(_OWORD *)v58;
          *((_OWORD *)v57 + 1) = v60;
          uint64_t v61 = v55[7];
          long long v62 = &v12[v61];
          long long v63 = &v13[v61];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          *(void *)long long v62 = v65;
          *((void *)v62 + 1) = v64;
          *(void *)&v12[v55[8]] = *(void *)&v13[v55[8]];
          *(void *)&v12[v55[9]] = *(void *)&v13[v55[9]];
          *(void *)&v12[v55[10]] = *(void *)&v13[v55[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v8(v12, v13, v7);
          uint64_t v66 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v12[v66[5]] = *(_DWORD *)&v13[v66[5]];
          uint64_t v67 = v66[6];
          uint64_t v68 = &v12[v67];
          uint64_t v69 = &v13[v67];
          long long v70 = *((_OWORD *)v69 + 3);
          *((_OWORD *)v68 + 2) = *((_OWORD *)v69 + 2);
          *((_OWORD *)v68 + 3) = v70;
          long long v71 = *((_OWORD *)v69 + 1);
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
          *((_OWORD *)v68 + 1) = v71;
          uint64_t v72 = v66[7];
          long long v73 = &v12[v72];
          long long v74 = &v13[v72];
          uint64_t v76 = *(void *)v74;
          uint64_t v75 = *((void *)v74 + 1);
          *(void *)long long v73 = v76;
          *((void *)v73 + 1) = v75;
          *(void *)&v12[v66[8]] = *(void *)&v13[v66[8]];
          *(void *)&v12[v66[9]] = *(void *)&v13[v66[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v8(v12, v13, v7);
          uint64_t v14 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v12[v14[5]] = *(_DWORD *)&v13[v14[5]];
          uint64_t v15 = v14[6];
          uint64_t v16 = &v12[v15];
          long long v17 = &v13[v15];
          long long v18 = *((_OWORD *)v17 + 3);
          *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
          *((_OWORD *)v16 + 3) = v18;
          long long v19 = *((_OWORD *)v17 + 1);
          *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
          *((_OWORD *)v16 + 1) = v19;
          uint64_t v20 = v14[7];
          unint64_t v21 = &v12[v20];
          uint64_t v22 = &v13[v20];
          uint64_t v24 = *(void *)v22;
          uint64_t v23 = *((void *)v22 + 1);
          *(void *)unint64_t v21 = v24;
          *((void *)v21 + 1) = v23;
          *(void *)&v12[v14[8]] = *(void *)&v13[v14[8]];
          *(void *)&v12[v14[9]] = *(void *)&v13[v14[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v86 = v10[6];
      long long v87 = (char *)a1 + v86;
      uint64_t v88 = (char *)a2 + v86;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          unint64_t v176 = v10;
          v8(v87, v88, v7);
          long long v100 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v87[v100[5]] = *(_DWORD *)&v88[v100[5]];
          uint64_t v101 = v100[6];
          uint64_t v102 = &v87[v101];
          uint64_t v103 = &v88[v101];
          long long v104 = *((_OWORD *)v103 + 3);
          *((_OWORD *)v102 + 2) = *((_OWORD *)v103 + 2);
          *((_OWORD *)v102 + 3) = v104;
          long long v105 = *((_OWORD *)v103 + 1);
          *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
          *((_OWORD *)v102 + 1) = v105;
          *(void *)&v87[v100[7]] = *(void *)&v88[v100[7]];
          *(void *)&v87[v100[8]] = *(void *)&v88[v100[8]];
          *(void *)&v87[v100[9]] = *(void *)&v88[v100[9]];
          v87[v100[10]] = v88[v100[10]];
          uint64_t v106 = v100[11];
          long long v107 = &v87[v106];
          uint64_t v108 = &v88[v106];
          uint64_t v109 = *((void *)v108 + 1);
          *(void *)long long v107 = *(void *)v108;
          *((void *)v107 + 1) = v109;
          uint64_t v110 = v100[12];
          uint64_t v111 = &v87[v110];
          uint64_t v112 = &v88[v110];
          uint64_t v113 = *((void *)v112 + 1);
          *(void *)uint64_t v111 = *(void *)v112;
          *((void *)v111 + 1) = v113;
          uint64_t v114 = v100[13];
          uint64_t v177 = &v87[v114];
          __dsta = &v88[v114];
          uint64_t v115 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v168 = *(void *)(v115 - 8);
          uint64_t v169 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v169(__dsta, 1, v115))
          {
            uint64_t v116 = sub_10000F214(&qword_100524BD0);
            memcpy(v177, __dsta, *(void *)(*(void *)(v116 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v168 + 16))(v177, __dsta, v115);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v168 + 56))(v177, 0, 1, v115);
          }
          uint64_t v153 = v100[14];
          long long v154 = &v87[v153];
          uint64_t v155 = &v88[v153];
          unint64_t v156 = *((void *)v155 + 1);
          unint64_t v10 = v176;
          if (v156 >> 60 == 15)
          {
            *(_OWORD *)long long v154 = *(_OWORD *)v155;
          }
          else
          {
            uint64_t v157 = *(void *)v155;
            sub_100038528(*(void *)v155, *((void *)v155 + 1));
            *(void *)long long v154 = v157;
            *((void *)v154 + 1) = v156;
          }
          uint64_t v158 = v100[15];
          uint64_t v159 = &v87[v158];
          uint64_t v160 = &v88[v158];
          if (*(void *)v160)
          {
            uint64_t v161 = *((void *)v160 + 1);
            uint64_t v162 = *((void *)v160 + 2);
            *(void *)uint64_t v159 = *(void *)v160;
            *((void *)v159 + 1) = v161;
            *((void *)v159 + 2) = v162;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v159 = *(_OWORD *)v160;
            *((void *)v159 + 2) = *((void *)v160 + 2);
          }
          break;
        case 2u:
          v8(v87, v88, v7);
          long long v117 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v87[v117[5]] = *(_DWORD *)&v88[v117[5]];
          uint64_t v118 = v117[6];
          uint64_t v119 = &v87[v118];
          uint64_t v120 = &v88[v118];
          long long v121 = *((_OWORD *)v120 + 3);
          *((_OWORD *)v119 + 2) = *((_OWORD *)v120 + 2);
          *((_OWORD *)v119 + 3) = v121;
          long long v122 = *((_OWORD *)v120 + 1);
          *(_OWORD *)uint64_t v119 = *(_OWORD *)v120;
          *((_OWORD *)v119 + 1) = v122;
          uint64_t v123 = v117[7];
          id v124 = &v87[v123];
          uint64_t v125 = &v88[v123];
          uint64_t v127 = *(void *)v125;
          uint64_t v126 = *((void *)v125 + 1);
          *(void *)id v124 = v127;
          *((void *)v124 + 1) = v126;
          *(void *)&v87[v117[8]] = *(void *)&v88[v117[8]];
          *(void *)&v87[v117[9]] = *(void *)&v88[v117[9]];
          *(void *)&v87[v117[10]] = *(void *)&v88[v117[10]];
          *(void *)&v87[v117[11]] = *(void *)&v88[v117[11]];
          *(void *)&v87[v117[12]] = *(void *)&v88[v117[12]];
          uint64_t v128 = v117[13];
          long long v129 = *(void **)&v88[v128];
          *(void *)&v87[v128] = v129;
          v87[v117[14]] = v88[v117[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v130 = v129;
          break;
        case 3u:
        case 4u:
          v8(v87, v88, v7);
          long long v131 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v87[v131[5]] = *(_DWORD *)&v88[v131[5]];
          uint64_t v132 = v131[6];
          uint64_t v133 = &v87[v132];
          uint64_t v134 = &v88[v132];
          long long v135 = *((_OWORD *)v134 + 3);
          *((_OWORD *)v133 + 2) = *((_OWORD *)v134 + 2);
          *((_OWORD *)v133 + 3) = v135;
          long long v136 = *((_OWORD *)v134 + 1);
          *(_OWORD *)uint64_t v133 = *(_OWORD *)v134;
          *((_OWORD *)v133 + 1) = v136;
          uint64_t v137 = v131[7];
          uint64_t v138 = &v87[v137];
          long long v139 = &v88[v137];
          uint64_t v141 = *(void *)v139;
          uint64_t v140 = *((void *)v139 + 1);
          *(void *)uint64_t v138 = v141;
          *((void *)v138 + 1) = v140;
          *(void *)&v87[v131[8]] = *(void *)&v88[v131[8]];
          *(void *)&v87[v131[9]] = *(void *)&v88[v131[9]];
          *(void *)&v87[v131[10]] = *(void *)&v88[v131[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v8(v87, v88, v7);
          uint64_t v142 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v87[v142[5]] = *(_DWORD *)&v88[v142[5]];
          uint64_t v143 = v142[6];
          uint64_t v144 = &v87[v143];
          uint64_t v145 = &v88[v143];
          long long v146 = *((_OWORD *)v145 + 3);
          *((_OWORD *)v144 + 2) = *((_OWORD *)v145 + 2);
          *((_OWORD *)v144 + 3) = v146;
          long long v147 = *((_OWORD *)v145 + 1);
          *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
          *((_OWORD *)v144 + 1) = v147;
          uint64_t v148 = v142[7];
          uint64_t v149 = &v87[v148];
          uint64_t v150 = &v88[v148];
          uint64_t v152 = *(void *)v150;
          uint64_t v151 = *((void *)v150 + 1);
          *(void *)uint64_t v149 = v152;
          *((void *)v149 + 1) = v151;
          *(void *)&v87[v142[8]] = *(void *)&v88[v142[8]];
          *(void *)&v87[v142[9]] = *(void *)&v88[v142[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v8(v87, v88, v7);
          uint64_t v89 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v87[v89[5]] = *(_DWORD *)&v88[v89[5]];
          uint64_t v90 = v89[6];
          uint64_t v91 = &v87[v90];
          uint64_t v92 = &v88[v90];
          long long v93 = *((_OWORD *)v92 + 3);
          *((_OWORD *)v91 + 2) = *((_OWORD *)v92 + 2);
          *((_OWORD *)v91 + 3) = v93;
          long long v94 = *((_OWORD *)v92 + 1);
          *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
          *((_OWORD *)v91 + 1) = v94;
          uint64_t v95 = v89[7];
          uint64_t v96 = &v87[v95];
          uint64_t v97 = &v88[v95];
          uint64_t v99 = *(void *)v97;
          uint64_t v98 = *((void *)v97 + 1);
          *(void *)uint64_t v96 = v99;
          *((void *)v96 + 1) = v98;
          *(void *)&v87[v89[8]] = *(void *)&v88[v89[8]];
          *(void *)&v87[v89[9]] = *(void *)&v88[v89[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      *((unsigned char *)a1 + v10[7]) = *((unsigned char *)a2 + v10[7]);
      *(void *)((char *)a1 + v10[8]) = *(void *)((char *)a2 + v10[8]);
      *(_DWORD *)((char *)a1 + v10[9]) = *(_DWORD *)((char *)a2 + v10[9]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_1001AFD98(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = type metadata accessor for UUID();
  unint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(a1, v3);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v5 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v6 = a1 + *(int *)(v5 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v4(v6, v3);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_14;
      case 1u:
        v4(v6, v3);
        uint64_t v7 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = v6 + v7[13];
        uint64_t v9 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v22 = *(void *)(v9 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v8, 1, v9)) {
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v8, v9);
        }
        unint64_t v10 = (uint64_t *)(v6 + v7[14]);
        unint64_t v11 = v10[1];
        if (v11 >> 60 != 15) {
          sub_100038B34(*v10, v11);
        }
        if (*(void *)(v6 + v7[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v4(v6, v3);
        uint64_t v12 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v4(v6, v3);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v4(v6, v3);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_14:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v13 = a1 + *(int *)(v5 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v4(v13, v3);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_31;
      case 1u:
        v4(v13, v3);
        uint64_t v14 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = v13 + v14[13];
        uint64_t v16 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v17 = *(void *)(v16 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
          (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
        }
        long long v18 = (uint64_t *)(v13 + v14[14]);
        unint64_t v19 = v18[1];
        if (v19 >> 60 != 15) {
          sub_100038B34(*v18, v19);
        }
        if (!*(void *)(v13 + v14[15])) {
          return;
        }
        swift_bridgeObjectRelease();
LABEL_24:
        swift_release();
        break;
      case 2u:
        v4(v13, v3);
        uint64_t v20 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v21 = *(void **)(v13 + *(int *)(v20 + 52));

        return;
      case 3u:
      case 4u:
        v4(v13, v3);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        goto LABEL_24;
      case 5u:
        v4(v13, v3);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_31:
        swift_bridgeObjectRelease();
        return;
      default:
        return;
    }
  }
}

uint64_t sub_1001B0364(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v7 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v8 = v7[5];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = a2 + v8;
    type metadata accessor for CVDetection();
    __dst = v6;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v170 = v7;
        v6(v9, v10, v5);
        uint64_t v22 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v9 + v22[5]) = *(_DWORD *)(v10 + v22[5]);
        uint64_t v23 = v22[6];
        uint64_t v24 = (_OWORD *)(v9 + v23);
        uint64_t v25 = (_OWORD *)(v10 + v23);
        long long v26 = v25[3];
        _OWORD v24[2] = v25[2];
        v24[3] = v26;
        long long v27 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v27;
        *(void *)(v9 + v22[7]) = *(void *)(v10 + v22[7]);
        *(void *)(v9 + v22[8]) = *(void *)(v10 + v22[8]);
        *(void *)(v9 + v22[9]) = *(void *)(v10 + v22[9]);
        *(unsigned char *)(v9 + v22[10]) = *(unsigned char *)(v10 + v22[10]);
        uint64_t v28 = v22[11];
        long long v29 = (void *)(v9 + v28);
        long long v30 = (void *)(v10 + v28);
        uint64_t v165 = v30[1];
        *long long v29 = *v30;
        v29[1] = v165;
        uint64_t v31 = v22[12];
        uint64_t v32 = (void *)(v9 + v31);
        long long v33 = (void *)(v10 + v31);
        uint64_t v164 = v33[1];
        *uint64_t v32 = *v33;
        v32[1] = v164;
        uint64_t v34 = v22[13];
        uint64_t v167 = (void *)(v9 + v34);
        uint64_t v169 = (const void *)(v10 + v34);
        uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v162 = *(void *)(v35 - 8);
        uint64_t v163 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v162 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v163(v169, 1, v35))
        {
          uint64_t v36 = sub_10000F214(&qword_100524BD0);
          memcpy(v167, v169, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v162 + 16))(v167, v169, v35);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v162 + 56))(v167, 0, 1, v35);
        }
        uint64_t v73 = v22[14];
        uint64_t v74 = v9 + v73;
        uint64_t v75 = (uint64_t *)(v10 + v73);
        unint64_t v76 = v75[1];
        if (v76 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
        }
        else
        {
          uint64_t v77 = *v75;
          sub_100038528(*v75, v75[1]);
          *(void *)uint64_t v74 = v77;
          *(void *)(v74 + 8) = v76;
        }
        uint64_t v7 = v170;
        uint64_t v78 = v22[15];
        long long v79 = (void *)(v9 + v78);
        unint64_t v80 = (void *)(v10 + v78);
        if (*v80)
        {
          uint64_t v81 = v80[1];
          uint64_t v82 = v80[2];
          *long long v79 = *v80;
          v79[1] = v81;
          v79[2] = v82;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)long long v79 = *(_OWORD *)v80;
          v79[2] = v80[2];
        }
        break;
      case 2u:
        v6(v9, v10, v5);
        uint64_t v37 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v9 + v37[5]) = *(_DWORD *)(v10 + v37[5]);
        uint64_t v38 = v37[6];
        uint64_t v39 = (_OWORD *)(v9 + v38);
        uint64_t v40 = (_OWORD *)(v10 + v38);
        long long v41 = v40[3];
        v39[2] = v40[2];
        v39[3] = v41;
        long long v42 = v40[1];
        *uint64_t v39 = *v40;
        v39[1] = v42;
        uint64_t v43 = v37[7];
        uint64_t v44 = (void *)(v9 + v43);
        long long v45 = (uint64_t *)(v10 + v43);
        uint64_t v47 = *v45;
        uint64_t v46 = v45[1];
        *uint64_t v44 = v47;
        v44[1] = v46;
        *(void *)(v9 + v37[8]) = *(void *)(v10 + v37[8]);
        *(void *)(v9 + v37[9]) = *(void *)(v10 + v37[9]);
        *(void *)(v9 + v37[10]) = *(void *)(v10 + v37[10]);
        *(void *)(v9 + v37[11]) = *(void *)(v10 + v37[11]);
        *(void *)(v9 + v37[12]) = *(void *)(v10 + v37[12]);
        uint64_t v48 = v37[13];
        uint64_t v49 = *(void **)(v10 + v48);
        *(void *)(v9 + v48) = v49;
        *(unsigned char *)(v9 + v37[14]) = *(unsigned char *)(v10 + v37[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v50 = v49;
        break;
      case 3u:
      case 4u:
        v6(v9, v10, v5);
        uint64_t v51 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v9 + v51[5]) = *(_DWORD *)(v10 + v51[5]);
        uint64_t v52 = v51[6];
        uint64_t v53 = (_OWORD *)(v9 + v52);
        id v54 = (_OWORD *)(v10 + v52);
        long long v55 = v54[3];
        v53[2] = v54[2];
        v53[3] = v55;
        long long v56 = v54[1];
        *uint64_t v53 = *v54;
        v53[1] = v56;
        uint64_t v57 = v51[7];
        long long v58 = (void *)(v9 + v57);
        long long v59 = (uint64_t *)(v10 + v57);
        uint64_t v61 = *v59;
        uint64_t v60 = v59[1];
        *long long v58 = v61;
        v58[1] = v60;
        *(void *)(v9 + v51[8]) = *(void *)(v10 + v51[8]);
        *(void *)(v9 + v51[9]) = *(void *)(v10 + v51[9]);
        *(void *)(v9 + v51[10]) = *(void *)(v10 + v51[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        v6(v9, v10, v5);
        long long v62 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v9 + v62[5]) = *(_DWORD *)(v10 + v62[5]);
        uint64_t v63 = v62[6];
        uint64_t v64 = (_OWORD *)(v9 + v63);
        uint64_t v65 = (_OWORD *)(v10 + v63);
        long long v66 = v65[3];
        v64[2] = v65[2];
        v64[3] = v66;
        long long v67 = v65[1];
        *uint64_t v64 = *v65;
        v64[1] = v67;
        uint64_t v68 = v62[7];
        uint64_t v69 = (void *)(v9 + v68);
        long long v70 = (uint64_t *)(v10 + v68);
        uint64_t v72 = *v70;
        uint64_t v71 = v70[1];
        *uint64_t v69 = v72;
        v69[1] = v71;
        *(void *)(v9 + v62[8]) = *(void *)(v10 + v62[8]);
        *(void *)(v9 + v62[9]) = *(void *)(v10 + v62[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        v6(v9, v10, v5);
        unint64_t v11 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v9 + v11[5]) = *(_DWORD *)(v10 + v11[5]);
        uint64_t v12 = v11[6];
        uint64_t v13 = (_OWORD *)(v9 + v12);
        uint64_t v14 = (_OWORD *)(v10 + v12);
        long long v15 = v14[3];
        v13[2] = v14[2];
        v13[3] = v15;
        long long v16 = v14[1];
        _OWORD *v13 = *v14;
        v13[1] = v16;
        uint64_t v17 = v11[7];
        long long v18 = (void *)(v9 + v17);
        unint64_t v19 = (uint64_t *)(v10 + v17);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        *long long v18 = v21;
        v18[1] = v20;
        *(void *)(v9 + v11[8]) = *(void *)(v10 + v11[8]);
        *(void *)(v9 + v11[9]) = *(void *)(v10 + v11[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v83 = v7[6];
    uint64_t v84 = a1 + v83;
    uint64_t v85 = a2 + v83;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v171 = v7;
        __dst(v84, v85, v5);
        uint64_t v97 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v84 + v97[5]) = *(_DWORD *)(v85 + v97[5]);
        uint64_t v98 = v97[6];
        uint64_t v99 = (_OWORD *)(v84 + v98);
        long long v100 = (_OWORD *)(v85 + v98);
        long long v101 = v100[3];
        v99[2] = v100[2];
        v99[3] = v101;
        long long v102 = v100[1];
        *uint64_t v99 = *v100;
        v99[1] = v102;
        *(void *)(v84 + v97[7]) = *(void *)(v85 + v97[7]);
        *(void *)(v84 + v97[8]) = *(void *)(v85 + v97[8]);
        *(void *)(v84 + v97[9]) = *(void *)(v85 + v97[9]);
        *(unsigned char *)(v84 + v97[10]) = *(unsigned char *)(v85 + v97[10]);
        uint64_t v103 = v97[11];
        long long v104 = (void *)(v84 + v103);
        long long v105 = (void *)(v85 + v103);
        uint64_t v106 = v105[1];
        void *v104 = *v105;
        v104[1] = v106;
        uint64_t v107 = v97[12];
        uint64_t v108 = (void *)(v84 + v107);
        uint64_t v109 = (void *)(v85 + v107);
        uint64_t v110 = v109[1];
        void *v108 = *v109;
        v108[1] = v110;
        uint64_t v111 = v97[13];
        __dsta = (void *)(v84 + v111);
        uint64_t v168 = (const void *)(v85 + v111);
        uint64_t v112 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v113 = *(void *)(v112 - 8);
        uint64_t v166 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v113 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v166(v168, 1, v112))
        {
          uint64_t v114 = sub_10000F214(&qword_100524BD0);
          memcpy(__dsta, v168, *(void *)(*(void *)(v114 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v113 + 16))(__dsta, v168, v112);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v113 + 56))(__dsta, 0, 1, v112);
        }
        uint64_t v151 = v97[14];
        uint64_t v152 = v84 + v151;
        uint64_t v153 = (uint64_t *)(v85 + v151);
        unint64_t v154 = v153[1];
        if (v154 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
        }
        else
        {
          uint64_t v155 = *v153;
          sub_100038528(*v153, v153[1]);
          *(void *)uint64_t v152 = v155;
          *(void *)(v152 + 8) = v154;
        }
        uint64_t v7 = v171;
        uint64_t v156 = v97[15];
        uint64_t v157 = (void *)(v84 + v156);
        uint64_t v158 = (void *)(v85 + v156);
        if (*v158)
        {
          uint64_t v159 = v158[1];
          uint64_t v160 = v158[2];
          *uint64_t v157 = *v158;
          v157[1] = v159;
          v157[2] = v160;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v157 = *(_OWORD *)v158;
          v157[2] = v158[2];
        }
        break;
      case 2u:
        __dst(v84, v85, v5);
        uint64_t v115 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v84 + v115[5]) = *(_DWORD *)(v85 + v115[5]);
        uint64_t v116 = v115[6];
        long long v117 = (_OWORD *)(v84 + v116);
        uint64_t v118 = (_OWORD *)(v85 + v116);
        long long v119 = v118[3];
        v117[2] = v118[2];
        v117[3] = v119;
        long long v120 = v118[1];
        *long long v117 = *v118;
        v117[1] = v120;
        uint64_t v121 = v115[7];
        long long v122 = (void *)(v84 + v121);
        uint64_t v123 = (uint64_t *)(v85 + v121);
        uint64_t v125 = *v123;
        uint64_t v124 = v123[1];
        *long long v122 = v125;
        v122[1] = v124;
        *(void *)(v84 + v115[8]) = *(void *)(v85 + v115[8]);
        *(void *)(v84 + v115[9]) = *(void *)(v85 + v115[9]);
        *(void *)(v84 + v115[10]) = *(void *)(v85 + v115[10]);
        *(void *)(v84 + v115[11]) = *(void *)(v85 + v115[11]);
        *(void *)(v84 + v115[12]) = *(void *)(v85 + v115[12]);
        uint64_t v126 = v115[13];
        uint64_t v127 = *(void **)(v85 + v126);
        *(void *)(v84 + v126) = v127;
        *(unsigned char *)(v84 + v115[14]) = *(unsigned char *)(v85 + v115[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v128 = v127;
        break;
      case 3u:
      case 4u:
        __dst(v84, v85, v5);
        long long v129 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v84 + v129[5]) = *(_DWORD *)(v85 + v129[5]);
        uint64_t v130 = v129[6];
        long long v131 = (_OWORD *)(v84 + v130);
        uint64_t v132 = (_OWORD *)(v85 + v130);
        long long v133 = v132[3];
        v131[2] = v132[2];
        v131[3] = v133;
        long long v134 = v132[1];
        *long long v131 = *v132;
        v131[1] = v134;
        uint64_t v135 = v129[7];
        long long v136 = (void *)(v84 + v135);
        uint64_t v137 = (uint64_t *)(v85 + v135);
        uint64_t v139 = *v137;
        uint64_t v138 = v137[1];
        *long long v136 = v139;
        v136[1] = v138;
        *(void *)(v84 + v129[8]) = *(void *)(v85 + v129[8]);
        *(void *)(v84 + v129[9]) = *(void *)(v85 + v129[9]);
        *(void *)(v84 + v129[10]) = *(void *)(v85 + v129[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        __dst(v84, v85, v5);
        uint64_t v140 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v84 + v140[5]) = *(_DWORD *)(v85 + v140[5]);
        uint64_t v141 = v140[6];
        uint64_t v142 = (_OWORD *)(v84 + v141);
        uint64_t v143 = (_OWORD *)(v85 + v141);
        long long v144 = v143[3];
        v142[2] = v143[2];
        v142[3] = v144;
        long long v145 = v143[1];
        _OWORD *v142 = *v143;
        v142[1] = v145;
        uint64_t v146 = v140[7];
        long long v147 = (void *)(v84 + v146);
        uint64_t v148 = (uint64_t *)(v85 + v146);
        uint64_t v150 = *v148;
        uint64_t v149 = v148[1];
        *long long v147 = v150;
        v147[1] = v149;
        *(void *)(v84 + v140[8]) = *(void *)(v85 + v140[8]);
        *(void *)(v84 + v140[9]) = *(void *)(v85 + v140[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        __dst(v84, v85, v5);
        uint64_t v86 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v84 + v86[5]) = *(_DWORD *)(v85 + v86[5]);
        uint64_t v87 = v86[6];
        uint64_t v88 = (_OWORD *)(v84 + v87);
        uint64_t v89 = (_OWORD *)(v85 + v87);
        long long v90 = v89[3];
        v88[2] = v89[2];
        v88[3] = v90;
        long long v91 = v89[1];
        *uint64_t v88 = *v89;
        v88[1] = v91;
        uint64_t v92 = v86[7];
        long long v93 = (void *)(v84 + v92);
        long long v94 = (uint64_t *)(v85 + v92);
        uint64_t v96 = *v94;
        uint64_t v95 = v94[1];
        *long long v93 = v96;
        v93[1] = v95;
        *(void *)(v84 + v86[8]) = *(void *)(v85 + v86[8]);
        *(void *)(v84 + v86[9]) = *(void *)(v85 + v86[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    *(unsigned char *)(a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
    *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
    *(_DWORD *)(a1 + v7[9]) = *(_DWORD *)(a2 + v7[9]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1001B105C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1001B3678(a1, type metadata accessor for CVBundle.BundleType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
    v6(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v7 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      type metadata accessor for CVDetection();
      __dst = v6;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v160 = v7;
          v6(v9, v10, v5);
          uint64_t v21 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(v9 + v21[5]) = *(_DWORD *)(v10 + v21[5]);
          uint64_t v22 = v21[6];
          uint64_t v23 = (_OWORD *)(v9 + v22);
          uint64_t v24 = (_OWORD *)(v10 + v22);
          long long v26 = v24[2];
          long long v25 = v24[3];
          long long v27 = v24[1];
          *uint64_t v23 = *v24;
          v23[1] = v27;
          void v23[2] = v26;
          v23[3] = v25;
          *(void *)(v9 + v21[7]) = *(void *)(v10 + v21[7]);
          *(void *)(v9 + v21[8]) = *(void *)(v10 + v21[8]);
          *(void *)(v9 + v21[9]) = *(void *)(v10 + v21[9]);
          *(unsigned char *)(v9 + v21[10]) = *(unsigned char *)(v10 + v21[10]);
          uint64_t v28 = v21[11];
          long long v29 = (void *)(v9 + v28);
          long long v30 = (void *)(v10 + v28);
          *long long v29 = *v30;
          v29[1] = v30[1];
          uint64_t v31 = v21[12];
          uint64_t v32 = (void *)(v9 + v31);
          long long v33 = (void *)(v10 + v31);
          *uint64_t v32 = *v33;
          v32[1] = v33[1];
          uint64_t v34 = v21[13];
          uint64_t v157 = (void *)(v9 + v34);
          uint64_t v159 = (const void *)(v10 + v34);
          uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v154 = *(void *)(v35 - 8);
          uint64_t v155 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v154 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v155(v159, 1, v35))
          {
            uint64_t v36 = sub_10000F214(&qword_100524BD0);
            memcpy(v157, v159, *(void *)(*(void *)(v36 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v154 + 16))(v157, v159, v35);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v154 + 56))(v157, 0, 1, v35);
          }
          uint64_t v70 = v21[14];
          uint64_t v71 = v9 + v70;
          uint64_t v72 = (uint64_t *)(v10 + v70);
          unint64_t v73 = v72[1];
          if (v73 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
          }
          else
          {
            uint64_t v74 = *v72;
            sub_100038528(*v72, v72[1]);
            *(void *)uint64_t v71 = v74;
            *(void *)(v71 + 8) = v73;
          }
          uint64_t v7 = v160;
          uint64_t v75 = v21[15];
          unint64_t v76 = (void *)(v9 + v75);
          uint64_t v77 = (void *)(v10 + v75);
          if (*v77)
          {
            *unint64_t v76 = *v77;
            uint64_t v78 = v77[2];
            v76[1] = v77[1];
            v76[2] = v78;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v79 = *(_OWORD *)v77;
            v76[2] = v77[2];
            *(_OWORD *)unint64_t v76 = v79;
          }
          break;
        case 2u:
          v6(v9, v10, v5);
          uint64_t v37 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(v9 + v37[5]) = *(_DWORD *)(v10 + v37[5]);
          uint64_t v38 = v37[6];
          uint64_t v39 = (_OWORD *)(v9 + v38);
          uint64_t v40 = (_OWORD *)(v10 + v38);
          long long v42 = v40[2];
          long long v41 = v40[3];
          long long v43 = v40[1];
          *uint64_t v39 = *v40;
          v39[1] = v43;
          v39[2] = v42;
          v39[3] = v41;
          uint64_t v44 = v37[7];
          long long v45 = (void *)(v9 + v44);
          uint64_t v46 = (void *)(v10 + v44);
          *long long v45 = *v46;
          v45[1] = v46[1];
          *(void *)(v9 + v37[8]) = *(void *)(v10 + v37[8]);
          *(void *)(v9 + v37[9]) = *(void *)(v10 + v37[9]);
          *(void *)(v9 + v37[10]) = *(void *)(v10 + v37[10]);
          *(void *)(v9 + v37[11]) = *(void *)(v10 + v37[11]);
          *(void *)(v9 + v37[12]) = *(void *)(v10 + v37[12]);
          uint64_t v47 = v37[13];
          uint64_t v48 = *(void **)(v10 + v47);
          *(void *)(v9 + v47) = v48;
          *(unsigned char *)(v9 + v37[14]) = *(unsigned char *)(v10 + v37[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v49 = v48;
          break;
        case 3u:
        case 4u:
          v6(v9, v10, v5);
          id v50 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(v9 + v50[5]) = *(_DWORD *)(v10 + v50[5]);
          uint64_t v51 = v50[6];
          uint64_t v52 = (_OWORD *)(v9 + v51);
          uint64_t v53 = (_OWORD *)(v10 + v51);
          long long v55 = v53[2];
          long long v54 = v53[3];
          long long v56 = v53[1];
          *uint64_t v52 = *v53;
          v52[1] = v56;
          v52[2] = v55;
          v52[3] = v54;
          uint64_t v57 = v50[7];
          long long v58 = (void *)(v9 + v57);
          long long v59 = (void *)(v10 + v57);
          *long long v58 = *v59;
          v58[1] = v59[1];
          *(void *)(v9 + v50[8]) = *(void *)(v10 + v50[8]);
          *(void *)(v9 + v50[9]) = *(void *)(v10 + v50[9]);
          *(void *)(v9 + v50[10]) = *(void *)(v10 + v50[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v6(v9, v10, v5);
          uint64_t v60 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(v9 + v60[5]) = *(_DWORD *)(v10 + v60[5]);
          uint64_t v61 = v60[6];
          long long v62 = (_OWORD *)(v9 + v61);
          uint64_t v63 = (_OWORD *)(v10 + v61);
          long long v65 = v63[2];
          long long v64 = v63[3];
          long long v66 = v63[1];
          *long long v62 = *v63;
          v62[1] = v66;
          v62[2] = v65;
          v62[3] = v64;
          uint64_t v67 = v60[7];
          uint64_t v68 = (void *)(v9 + v67);
          uint64_t v69 = (void *)(v10 + v67);
          *uint64_t v68 = *v69;
          v68[1] = v69[1];
          *(void *)(v9 + v60[8]) = *(void *)(v10 + v60[8]);
          *(void *)(v9 + v60[9]) = *(void *)(v10 + v60[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          v6(v9, v10, v5);
          unint64_t v11 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(v9 + v11[5]) = *(_DWORD *)(v10 + v11[5]);
          uint64_t v12 = v11[6];
          uint64_t v13 = (_OWORD *)(v9 + v12);
          uint64_t v14 = (_OWORD *)(v10 + v12);
          long long v16 = v14[2];
          long long v15 = v14[3];
          long long v17 = v14[1];
          _OWORD *v13 = *v14;
          v13[1] = v17;
          v13[2] = v16;
          v13[3] = v15;
          uint64_t v18 = v11[7];
          unint64_t v19 = (void *)(v9 + v18);
          uint64_t v20 = (void *)(v10 + v18);
          *unint64_t v19 = *v20;
          v19[1] = v20[1];
          *(void *)(v9 + v11[8]) = *(void *)(v10 + v11[8]);
          *(void *)(v9 + v11[9]) = *(void *)(v10 + v11[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v80 = v7[6];
      uint64_t v81 = a1 + v80;
      uint64_t v82 = a2 + v80;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v161 = v7;
          __dst(v81, v82, v5);
          long long v93 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(v81 + v93[5]) = *(_DWORD *)(v82 + v93[5]);
          uint64_t v94 = v93[6];
          uint64_t v95 = (_OWORD *)(v81 + v94);
          uint64_t v96 = (_OWORD *)(v82 + v94);
          long long v98 = v96[2];
          long long v97 = v96[3];
          long long v99 = v96[1];
          *uint64_t v95 = *v96;
          v95[1] = v99;
          v95[2] = v98;
          v95[3] = v97;
          *(void *)(v81 + v93[7]) = *(void *)(v82 + v93[7]);
          *(void *)(v81 + v93[8]) = *(void *)(v82 + v93[8]);
          *(void *)(v81 + v93[9]) = *(void *)(v82 + v93[9]);
          *(unsigned char *)(v81 + v93[10]) = *(unsigned char *)(v82 + v93[10]);
          uint64_t v100 = v93[11];
          long long v101 = (void *)(v81 + v100);
          long long v102 = (void *)(v82 + v100);
          *long long v101 = *v102;
          v101[1] = v102[1];
          uint64_t v103 = v93[12];
          long long v104 = (void *)(v81 + v103);
          long long v105 = (void *)(v82 + v103);
          void *v104 = *v105;
          v104[1] = v105[1];
          uint64_t v106 = v93[13];
          __dsta = (void *)(v81 + v106);
          uint64_t v158 = (const void *)(v82 + v106);
          uint64_t v107 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v108 = *(void *)(v107 - 8);
          uint64_t v156 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v108 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v156(v158, 1, v107))
          {
            uint64_t v109 = sub_10000F214(&qword_100524BD0);
            memcpy(__dsta, v158, *(void *)(*(void *)(v109 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v108 + 16))(__dsta, v158, v107);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v108 + 56))(__dsta, 0, 1, v107);
          }
          uint64_t v143 = v93[14];
          uint64_t v144 = v81 + v143;
          long long v145 = (uint64_t *)(v82 + v143);
          unint64_t v146 = v145[1];
          if (v146 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
          }
          else
          {
            uint64_t v147 = *v145;
            sub_100038528(*v145, v145[1]);
            *(void *)uint64_t v144 = v147;
            *(void *)(v144 + 8) = v146;
          }
          uint64_t v7 = v161;
          uint64_t v148 = v93[15];
          uint64_t v149 = (void *)(v81 + v148);
          uint64_t v150 = (void *)(v82 + v148);
          if (*v150)
          {
            *uint64_t v149 = *v150;
            uint64_t v151 = v150[2];
            v149[1] = v150[1];
            v149[2] = v151;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v152 = *(_OWORD *)v150;
            v149[2] = v150[2];
            *(_OWORD *)uint64_t v149 = v152;
          }
          break;
        case 2u:
          __dst(v81, v82, v5);
          uint64_t v110 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(v81 + v110[5]) = *(_DWORD *)(v82 + v110[5]);
          uint64_t v111 = v110[6];
          uint64_t v112 = (_OWORD *)(v81 + v111);
          uint64_t v113 = (_OWORD *)(v82 + v111);
          long long v115 = v113[2];
          long long v114 = v113[3];
          long long v116 = v113[1];
          *uint64_t v112 = *v113;
          v112[1] = v116;
          void v112[2] = v115;
          v112[3] = v114;
          uint64_t v117 = v110[7];
          uint64_t v118 = (void *)(v81 + v117);
          long long v119 = (void *)(v82 + v117);
          void *v118 = *v119;
          v118[1] = v119[1];
          *(void *)(v81 + v110[8]) = *(void *)(v82 + v110[8]);
          *(void *)(v81 + v110[9]) = *(void *)(v82 + v110[9]);
          *(void *)(v81 + v110[10]) = *(void *)(v82 + v110[10]);
          *(void *)(v81 + v110[11]) = *(void *)(v82 + v110[11]);
          *(void *)(v81 + v110[12]) = *(void *)(v82 + v110[12]);
          uint64_t v120 = v110[13];
          uint64_t v121 = *(void **)(v82 + v120);
          *(void *)(v81 + v120) = v121;
          *(unsigned char *)(v81 + v110[14]) = *(unsigned char *)(v82 + v110[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v122 = v121;
          break;
        case 3u:
        case 4u:
          __dst(v81, v82, v5);
          uint64_t v123 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(v81 + v123[5]) = *(_DWORD *)(v82 + v123[5]);
          uint64_t v124 = v123[6];
          uint64_t v125 = (_OWORD *)(v81 + v124);
          uint64_t v126 = (_OWORD *)(v82 + v124);
          long long v128 = v126[2];
          long long v127 = v126[3];
          long long v129 = v126[1];
          *uint64_t v125 = *v126;
          v125[1] = v129;
          v125[2] = v128;
          v125[3] = v127;
          uint64_t v130 = v123[7];
          long long v131 = (void *)(v81 + v130);
          uint64_t v132 = (void *)(v82 + v130);
          *long long v131 = *v132;
          v131[1] = v132[1];
          *(void *)(v81 + v123[8]) = *(void *)(v82 + v123[8]);
          *(void *)(v81 + v123[9]) = *(void *)(v82 + v123[9]);
          *(void *)(v81 + v123[10]) = *(void *)(v82 + v123[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          __dst(v81, v82, v5);
          long long v133 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(v81 + v133[5]) = *(_DWORD *)(v82 + v133[5]);
          uint64_t v134 = v133[6];
          uint64_t v135 = (_OWORD *)(v81 + v134);
          long long v136 = (_OWORD *)(v82 + v134);
          long long v138 = v136[2];
          long long v137 = v136[3];
          long long v139 = v136[1];
          *uint64_t v135 = *v136;
          v135[1] = v139;
          v135[2] = v138;
          v135[3] = v137;
          uint64_t v140 = v133[7];
          uint64_t v141 = (void *)(v81 + v140);
          uint64_t v142 = (void *)(v82 + v140);
          *uint64_t v141 = *v142;
          v141[1] = v142[1];
          *(void *)(v81 + v133[8]) = *(void *)(v82 + v133[8]);
          *(void *)(v81 + v133[9]) = *(void *)(v82 + v133[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          __dst(v81, v82, v5);
          uint64_t v83 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(v81 + v83[5]) = *(_DWORD *)(v82 + v83[5]);
          uint64_t v84 = v83[6];
          uint64_t v85 = (_OWORD *)(v81 + v84);
          uint64_t v86 = (_OWORD *)(v82 + v84);
          long long v88 = v86[2];
          long long v87 = v86[3];
          long long v89 = v86[1];
          _OWORD *v85 = *v86;
          v85[1] = v89;
          v85[2] = v88;
          v85[3] = v87;
          uint64_t v90 = v83[7];
          long long v91 = (void *)(v81 + v90);
          uint64_t v92 = (void *)(v82 + v90);
          *long long v91 = *v92;
          v91[1] = v92[1];
          *(void *)(v81 + v83[8]) = *(void *)(v82 + v83[8]);
          *(void *)(v81 + v83[9]) = *(void *)(v82 + v83[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      *(unsigned char *)(a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(_DWORD *)(a1 + v7[9]) = *(_DWORD *)(a2 + v7[9]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1001B1DE8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v7 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v8 = v7[5];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = a2 + v8;
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v93 = v7;
        v6(v9, v10, v5);
        long long v17 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v9 + v17[5]) = *(_DWORD *)(v10 + v17[5]);
        uint64_t v18 = v17[6];
        unint64_t v19 = (_OWORD *)(v9 + v18);
        uint64_t v20 = (_OWORD *)(v10 + v18);
        long long v21 = v20[3];
        void v19[2] = v20[2];
        v19[3] = v21;
        long long v22 = v20[1];
        *unint64_t v19 = *v20;
        v19[1] = v22;
        *(void *)(v9 + v17[7]) = *(void *)(v10 + v17[7]);
        *(void *)(v9 + v17[8]) = *(void *)(v10 + v17[8]);
        *(void *)(v9 + v17[9]) = *(void *)(v10 + v17[9]);
        *(unsigned char *)(v9 + v17[10]) = *(unsigned char *)(v10 + v17[10]);
        *(_OWORD *)(v9 + v17[11]) = *(_OWORD *)(v10 + v17[11]);
        *(_OWORD *)(v9 + v17[12]) = *(_OWORD *)(v10 + v17[12]);
        uint64_t v23 = v17[13];
        __dst = (void *)(v9 + v23);
        uint64_t v24 = (const void *)(v10 + v23);
        uint64_t v25 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v91 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v91 + 48))(v24, 1, v25))
        {
          uint64_t v26 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v24, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v91 + 32))(__dst, v24, v25);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v25);
        }
        *(_OWORD *)(v9 + v17[14]) = *(_OWORD *)(v10 + v17[14]);
        uint64_t v85 = v17[15];
        uint64_t v86 = v9 + v85;
        uint64_t v87 = v10 + v85;
        *(void *)(v86 + 16) = *(void *)(v87 + 16);
        *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
        uint64_t v7 = v93;
        swift_storeEnumTagMultiPayload();
        goto LABEL_10;
      case 2u:
        v6(v9, v10, v5);
        long long v27 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v9 + v27[5]) = *(_DWORD *)(v10 + v27[5]);
        uint64_t v28 = v27[6];
        long long v29 = (_OWORD *)(v9 + v28);
        long long v30 = (_OWORD *)(v10 + v28);
        long long v31 = v30[3];
        void v29[2] = v30[2];
        v29[3] = v31;
        long long v32 = v30[1];
        *long long v29 = *v30;
        v29[1] = v32;
        *(_OWORD *)(v9 + v27[7]) = *(_OWORD *)(v10 + v27[7]);
        *(void *)(v9 + v27[8]) = *(void *)(v10 + v27[8]);
        *(void *)(v9 + v27[9]) = *(void *)(v10 + v27[9]);
        *(void *)(v9 + v27[10]) = *(void *)(v10 + v27[10]);
        *(void *)(v9 + v27[11]) = *(void *)(v10 + v27[11]);
        *(void *)(v9 + v27[12]) = *(void *)(v10 + v27[12]);
        *(void *)(v9 + v27[13]) = *(void *)(v10 + v27[13]);
        *(unsigned char *)(v9 + v27[14]) = *(unsigned char *)(v10 + v27[14]);
        goto LABEL_9;
      case 3u:
      case 4u:
        v6(v9, v10, v5);
        long long v33 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v9 + v33[5]) = *(_DWORD *)(v10 + v33[5]);
        uint64_t v34 = v33[6];
        uint64_t v35 = (_OWORD *)(v9 + v34);
        uint64_t v36 = (_OWORD *)(v10 + v34);
        long long v37 = v36[3];
        void v35[2] = v36[2];
        v35[3] = v37;
        long long v38 = v36[1];
        *uint64_t v35 = *v36;
        v35[1] = v38;
        *(_OWORD *)(v9 + v33[7]) = *(_OWORD *)(v10 + v33[7]);
        *(void *)(v9 + v33[8]) = *(void *)(v10 + v33[8]);
        *(void *)(v9 + v33[9]) = *(void *)(v10 + v33[9]);
        *(void *)(v9 + v33[10]) = *(void *)(v10 + v33[10]);
        goto LABEL_9;
      case 5u:
        v6(v9, v10, v5);
        uint64_t v39 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v9 + v39[5]) = *(_DWORD *)(v10 + v39[5]);
        uint64_t v40 = v39[6];
        long long v41 = (_OWORD *)(v9 + v40);
        long long v42 = (_OWORD *)(v10 + v40);
        long long v43 = v42[3];
        void v41[2] = v42[2];
        v41[3] = v43;
        long long v44 = v42[1];
        *long long v41 = *v42;
        v41[1] = v44;
        *(_OWORD *)(v9 + v39[7]) = *(_OWORD *)(v10 + v39[7]);
        *(void *)(v9 + v39[8]) = *(void *)(v10 + v39[8]);
        *(void *)(v9 + v39[9]) = *(void *)(v10 + v39[9]);
        goto LABEL_9;
      default:
        v6(v9, v10, v5);
        unint64_t v11 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v9 + v11[5]) = *(_DWORD *)(v10 + v11[5]);
        uint64_t v12 = v11[6];
        uint64_t v13 = (_OWORD *)(v9 + v12);
        uint64_t v14 = (_OWORD *)(v10 + v12);
        long long v15 = v14[3];
        v13[2] = v14[2];
        v13[3] = v15;
        long long v16 = v14[1];
        _OWORD *v13 = *v14;
        v13[1] = v16;
        *(_OWORD *)(v9 + v11[7]) = *(_OWORD *)(v10 + v11[7]);
        *(void *)(v9 + v11[8]) = *(void *)(v10 + v11[8]);
        *(void *)(v9 + v11[9]) = *(void *)(v10 + v11[9]);
LABEL_9:
        swift_storeEnumTagMultiPayload();
LABEL_10:
        uint64_t v45 = v7[6];
        uint64_t v46 = a1 + v45;
        uint64_t v47 = a2 + v45;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            v6(v46, v47, v5);
            long long v54 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)(v46 + v54[5]) = *(_DWORD *)(v47 + v54[5]);
            uint64_t v55 = v54[6];
            long long v56 = (_OWORD *)(v46 + v55);
            uint64_t v57 = (_OWORD *)(v47 + v55);
            long long v58 = v57[3];
            void v56[2] = v57[2];
            v56[3] = v58;
            long long v59 = v57[1];
            *long long v56 = *v57;
            v56[1] = v59;
            *(void *)(v46 + v54[7]) = *(void *)(v47 + v54[7]);
            *(void *)(v46 + v54[8]) = *(void *)(v47 + v54[8]);
            *(void *)(v46 + v54[9]) = *(void *)(v47 + v54[9]);
            *(unsigned char *)(v46 + v54[10]) = *(unsigned char *)(v47 + v54[10]);
            *(_OWORD *)(v46 + v54[11]) = *(_OWORD *)(v47 + v54[11]);
            *(_OWORD *)(v46 + v54[12]) = *(_OWORD *)(v47 + v54[12]);
            uint64_t v60 = v54[13];
            uint64_t v61 = (void *)(v46 + v60);
            long long v62 = (const void *)(v47 + v60);
            uint64_t v63 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v64 = *(void *)(v63 - 8);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
            {
              uint64_t v65 = sub_10000F214(&qword_100524BD0);
              memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v64 + 32))(v61, v62, v63);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
            }
            *(_OWORD *)(v46 + v54[14]) = *(_OWORD *)(v47 + v54[14]);
            uint64_t v88 = v54[15];
            uint64_t v89 = v46 + v88;
            uint64_t v90 = v47 + v88;
            *(void *)(v89 + 16) = *(void *)(v90 + 16);
            *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
            swift_storeEnumTagMultiPayload();
            goto LABEL_18;
          case 2u:
            v6(v46, v47, v5);
            long long v66 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)(v46 + v66[5]) = *(_DWORD *)(v47 + v66[5]);
            uint64_t v67 = v66[6];
            uint64_t v68 = (_OWORD *)(v46 + v67);
            uint64_t v69 = (_OWORD *)(v47 + v67);
            long long v70 = v69[3];
            v68[2] = v69[2];
            v68[3] = v70;
            long long v71 = v69[1];
            *uint64_t v68 = *v69;
            v68[1] = v71;
            *(_OWORD *)(v46 + v66[7]) = *(_OWORD *)(v47 + v66[7]);
            *(void *)(v46 + v66[8]) = *(void *)(v47 + v66[8]);
            *(void *)(v46 + v66[9]) = *(void *)(v47 + v66[9]);
            *(void *)(v46 + v66[10]) = *(void *)(v47 + v66[10]);
            *(void *)(v46 + v66[11]) = *(void *)(v47 + v66[11]);
            *(void *)(v46 + v66[12]) = *(void *)(v47 + v66[12]);
            *(void *)(v46 + v66[13]) = *(void *)(v47 + v66[13]);
            *(unsigned char *)(v46 + v66[14]) = *(unsigned char *)(v47 + v66[14]);
            goto LABEL_17;
          case 3u:
          case 4u:
            v6(v46, v47, v5);
            uint64_t v72 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)(v46 + v72[5]) = *(_DWORD *)(v47 + v72[5]);
            uint64_t v73 = v72[6];
            uint64_t v74 = (_OWORD *)(v46 + v73);
            uint64_t v75 = (_OWORD *)(v47 + v73);
            long long v76 = v75[3];
            v74[2] = v75[2];
            v74[3] = v76;
            long long v77 = v75[1];
            *uint64_t v74 = *v75;
            v74[1] = v77;
            *(_OWORD *)(v46 + v72[7]) = *(_OWORD *)(v47 + v72[7]);
            *(void *)(v46 + v72[8]) = *(void *)(v47 + v72[8]);
            *(void *)(v46 + v72[9]) = *(void *)(v47 + v72[9]);
            *(void *)(v46 + v72[10]) = *(void *)(v47 + v72[10]);
            goto LABEL_17;
          case 5u:
            v6(v46, v47, v5);
            uint64_t v78 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)(v46 + v78[5]) = *(_DWORD *)(v47 + v78[5]);
            uint64_t v79 = v78[6];
            uint64_t v80 = (_OWORD *)(v46 + v79);
            uint64_t v81 = (_OWORD *)(v47 + v79);
            long long v82 = v81[3];
            v80[2] = v81[2];
            v80[3] = v82;
            long long v83 = v81[1];
            _OWORD *v80 = *v81;
            v80[1] = v83;
            *(_OWORD *)(v46 + v78[7]) = *(_OWORD *)(v47 + v78[7]);
            *(void *)(v46 + v78[8]) = *(void *)(v47 + v78[8]);
            *(void *)(v46 + v78[9]) = *(void *)(v47 + v78[9]);
            goto LABEL_17;
          default:
            v6(v46, v47, v5);
            uint64_t v48 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)(v46 + v48[5]) = *(_DWORD *)(v47 + v48[5]);
            uint64_t v49 = v48[6];
            id v50 = (_OWORD *)(v46 + v49);
            uint64_t v51 = (_OWORD *)(v47 + v49);
            long long v52 = v51[3];
            v50[2] = v51[2];
            v50[3] = v52;
            long long v53 = v51[1];
            *id v50 = *v51;
            v50[1] = v53;
            *(_OWORD *)(v46 + v48[7]) = *(_OWORD *)(v47 + v48[7]);
            *(void *)(v46 + v48[8]) = *(void *)(v47 + v48[8]);
            *(void *)(v46 + v48[9]) = *(void *)(v47 + v48[9]);
LABEL_17:
            swift_storeEnumTagMultiPayload();
LABEL_18:
            *(unsigned char *)(a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
            *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
            *(_DWORD *)(a1 + v7[9]) = *(_DWORD *)(a2 + v7[9]);
            break;
        }
        break;
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1001B288C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1001B3678(a1, type metadata accessor for CVBundle.BundleType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
    v6(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v7 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          long long v93 = v7;
          v6(v9, v10, v5);
          long long v17 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(v9 + v17[5]) = *(_DWORD *)(v10 + v17[5]);
          uint64_t v18 = v17[6];
          unint64_t v19 = (_OWORD *)(v9 + v18);
          uint64_t v20 = (_OWORD *)(v10 + v18);
          long long v21 = v20[3];
          void v19[2] = v20[2];
          v19[3] = v21;
          long long v22 = v20[1];
          *unint64_t v19 = *v20;
          v19[1] = v22;
          *(void *)(v9 + v17[7]) = *(void *)(v10 + v17[7]);
          *(void *)(v9 + v17[8]) = *(void *)(v10 + v17[8]);
          *(void *)(v9 + v17[9]) = *(void *)(v10 + v17[9]);
          *(unsigned char *)(v9 + v17[10]) = *(unsigned char *)(v10 + v17[10]);
          *(_OWORD *)(v9 + v17[11]) = *(_OWORD *)(v10 + v17[11]);
          *(_OWORD *)(v9 + v17[12]) = *(_OWORD *)(v10 + v17[12]);
          uint64_t v23 = v17[13];
          __dst = (void *)(v9 + v23);
          uint64_t v24 = (const void *)(v10 + v23);
          uint64_t v25 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v91 = *(void *)(v25 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v91 + 48))(v24, 1, v25))
          {
            uint64_t v26 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v24, *(void *)(*(void *)(v26 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v91 + 32))(__dst, v24, v25);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v25);
          }
          *(_OWORD *)(v9 + v17[14]) = *(_OWORD *)(v10 + v17[14]);
          uint64_t v85 = v17[15];
          uint64_t v86 = v9 + v85;
          uint64_t v87 = v10 + v85;
          *(void *)(v86 + 16) = *(void *)(v87 + 16);
          *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
          uint64_t v7 = v93;
          swift_storeEnumTagMultiPayload();
          goto LABEL_11;
        case 2u:
          v6(v9, v10, v5);
          long long v27 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(v9 + v27[5]) = *(_DWORD *)(v10 + v27[5]);
          uint64_t v28 = v27[6];
          long long v29 = (_OWORD *)(v9 + v28);
          long long v30 = (_OWORD *)(v10 + v28);
          long long v31 = v30[3];
          void v29[2] = v30[2];
          v29[3] = v31;
          long long v32 = v30[1];
          *long long v29 = *v30;
          v29[1] = v32;
          *(_OWORD *)(v9 + v27[7]) = *(_OWORD *)(v10 + v27[7]);
          *(void *)(v9 + v27[8]) = *(void *)(v10 + v27[8]);
          *(void *)(v9 + v27[9]) = *(void *)(v10 + v27[9]);
          *(void *)(v9 + v27[10]) = *(void *)(v10 + v27[10]);
          *(void *)(v9 + v27[11]) = *(void *)(v10 + v27[11]);
          *(void *)(v9 + v27[12]) = *(void *)(v10 + v27[12]);
          *(void *)(v9 + v27[13]) = *(void *)(v10 + v27[13]);
          *(unsigned char *)(v9 + v27[14]) = *(unsigned char *)(v10 + v27[14]);
          goto LABEL_10;
        case 3u:
        case 4u:
          v6(v9, v10, v5);
          long long v33 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(v9 + v33[5]) = *(_DWORD *)(v10 + v33[5]);
          uint64_t v34 = v33[6];
          uint64_t v35 = (_OWORD *)(v9 + v34);
          uint64_t v36 = (_OWORD *)(v10 + v34);
          long long v37 = v36[3];
          void v35[2] = v36[2];
          v35[3] = v37;
          long long v38 = v36[1];
          *uint64_t v35 = *v36;
          v35[1] = v38;
          *(_OWORD *)(v9 + v33[7]) = *(_OWORD *)(v10 + v33[7]);
          *(void *)(v9 + v33[8]) = *(void *)(v10 + v33[8]);
          *(void *)(v9 + v33[9]) = *(void *)(v10 + v33[9]);
          *(void *)(v9 + v33[10]) = *(void *)(v10 + v33[10]);
          goto LABEL_10;
        case 5u:
          v6(v9, v10, v5);
          uint64_t v39 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(v9 + v39[5]) = *(_DWORD *)(v10 + v39[5]);
          uint64_t v40 = v39[6];
          long long v41 = (_OWORD *)(v9 + v40);
          long long v42 = (_OWORD *)(v10 + v40);
          long long v43 = v42[3];
          void v41[2] = v42[2];
          v41[3] = v43;
          long long v44 = v42[1];
          *long long v41 = *v42;
          v41[1] = v44;
          *(_OWORD *)(v9 + v39[7]) = *(_OWORD *)(v10 + v39[7]);
          *(void *)(v9 + v39[8]) = *(void *)(v10 + v39[8]);
          *(void *)(v9 + v39[9]) = *(void *)(v10 + v39[9]);
          goto LABEL_10;
        default:
          v6(v9, v10, v5);
          unint64_t v11 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(v9 + v11[5]) = *(_DWORD *)(v10 + v11[5]);
          uint64_t v12 = v11[6];
          uint64_t v13 = (_OWORD *)(v9 + v12);
          uint64_t v14 = (_OWORD *)(v10 + v12);
          long long v15 = v14[3];
          v13[2] = v14[2];
          v13[3] = v15;
          long long v16 = v14[1];
          _OWORD *v13 = *v14;
          v13[1] = v16;
          *(_OWORD *)(v9 + v11[7]) = *(_OWORD *)(v10 + v11[7]);
          *(void *)(v9 + v11[8]) = *(void *)(v10 + v11[8]);
          *(void *)(v9 + v11[9]) = *(void *)(v10 + v11[9]);
LABEL_10:
          swift_storeEnumTagMultiPayload();
LABEL_11:
          uint64_t v45 = v7[6];
          uint64_t v46 = a1 + v45;
          uint64_t v47 = a2 + v45;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              v6(v46, v47, v5);
              long long v54 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)(v46 + v54[5]) = *(_DWORD *)(v47 + v54[5]);
              uint64_t v55 = v54[6];
              long long v56 = (_OWORD *)(v46 + v55);
              uint64_t v57 = (_OWORD *)(v47 + v55);
              long long v58 = v57[3];
              void v56[2] = v57[2];
              v56[3] = v58;
              long long v59 = v57[1];
              *long long v56 = *v57;
              v56[1] = v59;
              *(void *)(v46 + v54[7]) = *(void *)(v47 + v54[7]);
              *(void *)(v46 + v54[8]) = *(void *)(v47 + v54[8]);
              *(void *)(v46 + v54[9]) = *(void *)(v47 + v54[9]);
              *(unsigned char *)(v46 + v54[10]) = *(unsigned char *)(v47 + v54[10]);
              *(_OWORD *)(v46 + v54[11]) = *(_OWORD *)(v47 + v54[11]);
              *(_OWORD *)(v46 + v54[12]) = *(_OWORD *)(v47 + v54[12]);
              uint64_t v60 = v54[13];
              uint64_t v61 = (void *)(v46 + v60);
              long long v62 = (const void *)(v47 + v60);
              uint64_t v63 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v64 = *(void *)(v63 - 8);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
              {
                uint64_t v65 = sub_10000F214(&qword_100524BD0);
                memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v64 + 32))(v61, v62, v63);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
              }
              *(_OWORD *)(v46 + v54[14]) = *(_OWORD *)(v47 + v54[14]);
              uint64_t v88 = v54[15];
              uint64_t v89 = v46 + v88;
              uint64_t v90 = v47 + v88;
              *(void *)(v89 + 16) = *(void *)(v90 + 16);
              *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
              swift_storeEnumTagMultiPayload();
              goto LABEL_19;
            case 2u:
              v6(v46, v47, v5);
              long long v66 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)(v46 + v66[5]) = *(_DWORD *)(v47 + v66[5]);
              uint64_t v67 = v66[6];
              uint64_t v68 = (_OWORD *)(v46 + v67);
              uint64_t v69 = (_OWORD *)(v47 + v67);
              long long v70 = v69[3];
              v68[2] = v69[2];
              v68[3] = v70;
              long long v71 = v69[1];
              *uint64_t v68 = *v69;
              v68[1] = v71;
              *(_OWORD *)(v46 + v66[7]) = *(_OWORD *)(v47 + v66[7]);
              *(void *)(v46 + v66[8]) = *(void *)(v47 + v66[8]);
              *(void *)(v46 + v66[9]) = *(void *)(v47 + v66[9]);
              *(void *)(v46 + v66[10]) = *(void *)(v47 + v66[10]);
              *(void *)(v46 + v66[11]) = *(void *)(v47 + v66[11]);
              *(void *)(v46 + v66[12]) = *(void *)(v47 + v66[12]);
              *(void *)(v46 + v66[13]) = *(void *)(v47 + v66[13]);
              *(unsigned char *)(v46 + v66[14]) = *(unsigned char *)(v47 + v66[14]);
              goto LABEL_18;
            case 3u:
            case 4u:
              v6(v46, v47, v5);
              uint64_t v72 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)(v46 + v72[5]) = *(_DWORD *)(v47 + v72[5]);
              uint64_t v73 = v72[6];
              uint64_t v74 = (_OWORD *)(v46 + v73);
              uint64_t v75 = (_OWORD *)(v47 + v73);
              long long v76 = v75[3];
              v74[2] = v75[2];
              v74[3] = v76;
              long long v77 = v75[1];
              *uint64_t v74 = *v75;
              v74[1] = v77;
              *(_OWORD *)(v46 + v72[7]) = *(_OWORD *)(v47 + v72[7]);
              *(void *)(v46 + v72[8]) = *(void *)(v47 + v72[8]);
              *(void *)(v46 + v72[9]) = *(void *)(v47 + v72[9]);
              *(void *)(v46 + v72[10]) = *(void *)(v47 + v72[10]);
              goto LABEL_18;
            case 5u:
              v6(v46, v47, v5);
              uint64_t v78 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)(v46 + v78[5]) = *(_DWORD *)(v47 + v78[5]);
              uint64_t v79 = v78[6];
              uint64_t v80 = (_OWORD *)(v46 + v79);
              uint64_t v81 = (_OWORD *)(v47 + v79);
              long long v82 = v81[3];
              v80[2] = v81[2];
              v80[3] = v82;
              long long v83 = v81[1];
              _OWORD *v80 = *v81;
              v80[1] = v83;
              *(_OWORD *)(v46 + v78[7]) = *(_OWORD *)(v47 + v78[7]);
              *(void *)(v46 + v78[8]) = *(void *)(v47 + v78[8]);
              *(void *)(v46 + v78[9]) = *(void *)(v47 + v78[9]);
              goto LABEL_18;
            default:
              v6(v46, v47, v5);
              uint64_t v48 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)(v46 + v48[5]) = *(_DWORD *)(v47 + v48[5]);
              uint64_t v49 = v48[6];
              id v50 = (_OWORD *)(v46 + v49);
              uint64_t v51 = (_OWORD *)(v47 + v49);
              long long v52 = v51[3];
              v50[2] = v51[2];
              v50[3] = v52;
              long long v53 = v51[1];
              *id v50 = *v51;
              v50[1] = v53;
              *(_OWORD *)(v46 + v48[7]) = *(_OWORD *)(v47 + v48[7]);
              *(void *)(v46 + v48[8]) = *(void *)(v47 + v48[8]);
              *(void *)(v46 + v48[9]) = *(void *)(v47 + v48[9]);
LABEL_18:
              swift_storeEnumTagMultiPayload();
LABEL_19:
              *(unsigned char *)(a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
              *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
              *(_DWORD *)(a1 + v7[9]) = *(_DWORD *)(a2 + v7[9]);
              break;
          }
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1001B3354()
{
  uint64_t result = type metadata accessor for CVTrackSnapshot(319);
  if (v1 <= 0x3F)
  {
    v3[4] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001B3430()
{
  return sub_1001B34C8(&qword_100524178, 255, (void (*)(uint64_t))type metadata accessor for CVBundle.BundleType);
}

uint64_t sub_1001B347C()
{
  return sub_1001B34C8(&qword_100524180, 255, (void (*)(uint64_t))type metadata accessor for CVBundle);
}

uint64_t sub_1001B34C8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001B3510()
{
  return sub_1001B34C8((unint64_t *)&qword_100524E40, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_1001B355C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC6TamaleP33_5B1486948597A68D0749D88DF4EE5AEA16BundleClassifier_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1001B35D4(uint64_t a1, uint64_t a2)
{
  return sub_1001B34C8(&qword_100524188, a2, (void (*)(uint64_t))type metadata accessor for BundleActor);
}

uint64_t sub_1001B361C(uint64_t a1)
{
  uint64_t result = sub_1001B34C8(&qword_10051B750, 255, (void (*)(uint64_t))type metadata accessor for CVBundle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001B3678(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001B36D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

size_t sub_1001B3740(uint64_t a1)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_1005254A0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v51 = (char *)v45 - v6;
  uint64_t v7 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v7);
  uint64_t v53 = (uint64_t)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage + v11;
  uint64_t v55 = _swiftEmptyArrayStorage;
  uint64_t v12 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v45[1] = v9 + 48;
  uint64_t v46 = v9;
  v45[0] = v10 | 7;
  size_t result = swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v50 = v11;
LABEL_4:
  unint64_t v17 = *(void *)(a1 + 16);
  if (v15 != v17)
  {
    if (v15 < v17)
    {
      while (1)
      {
        uint64_t v18 = *(void *)(a1 + 32 + 8 * v15);
        swift_bridgeObjectRetain();
        size_t result = swift_bridgeObjectRelease();
        if (v18) {
          break;
        }
LABEL_9:
        ++v15;
        unint64_t v19 = *(void *)(a1 + 16);
        if (v15 == v19) {
          goto LABEL_38;
        }
        if (v15 >= v19) {
          goto LABEL_44;
        }
      }
      unint64_t v16 = *(void *)(v18 + 16);
      if (!v16)
      {
        (*v12)(v4, 1, 1, v7);
        size_t result = sub_10000FBD8((uint64_t)v4, (uint64_t *)&unk_1005254A0);
        goto LABEL_9;
      }
      unint64_t v20 = 0;
      ++v15;
      while (1)
      {
        if (v20 >= v16) {
          goto LABEL_45;
        }
        unint64_t v47 = v20;
        uint64_t v48 = v14;
        uint64_t v21 = v46;
        uint64_t v49 = *(void *)(v46 + 72);
        sub_1001B36D8(v18 + v11 + v49 * v20, (uint64_t)v4, type metadata accessor for CVTrackSnapshot);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v4, 0, 1, v7);
        uint64_t v22 = (uint64_t)v51;
        sub_10000FC34((uint64_t)v4, (uint64_t)v51, (uint64_t *)&unk_1005254A0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v7) == 1)
        {
          swift_bridgeObjectRelease();
          long long v41 = v55;
          uint64_t v14 = v48;
          goto LABEL_39;
        }
        size_t result = sub_1001B5120(v22, v53, type metadata accessor for CVTrackSnapshot);
        if (!v48) {
          break;
        }
        long long v52 = v55;
        unint64_t v23 = v47;
        uint64_t v14 = v48 - 1;
        if (__OFSUB__(v48, 1)) {
          goto LABEL_46;
        }
LABEL_37:
        unint64_t v20 = v23 + 1;
        uint64_t v40 = v54;
        size_t result = sub_1001B5120(v53, v54, type metadata accessor for CVTrackSnapshot);
        unint64_t v54 = v40 + v49;
        uint64_t v55 = v52;
        uint64_t v11 = v50;
        unint64_t v16 = *(void *)(v18 + 16);
        if (v20 == v16)
        {
          (*v12)(v4, 1, 1, v7);
          size_t result = sub_10000FBD8((uint64_t)v4, (uint64_t *)&unk_1005254A0);
          goto LABEL_4;
        }
      }
      unint64_t v24 = v55[3];
      unint64_t v23 = v47;
      if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_48;
      }
      int64_t v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      if (v25 <= 1) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = v25;
      }
      sub_10000F214(&qword_100529830);
      uint64_t v27 = v50;
      unint64_t v54 = v26;
      uint64_t v28 = v49;
      long long v52 = (void *)swift_allocObject();
      size_t result = j__malloc_size_0(v52);
      if (!v28) {
        goto LABEL_49;
      }
      uint64_t v29 = v28;
      int64_t v30 = result - v27;
      if (result - v27 == 0x8000000000000000 && v28 == -1) {
        goto LABEL_50;
      }
      uint64_t v32 = v30 / v28;
      long long v33 = v52;
      unint64_t v34 = (unint64_t)v55;
      v52[2] = v54;
      v33[3] = 2 * (v30 / v29);
      unint64_t v35 = (unint64_t)v33 + v27;
      uint64_t v36 = *(void *)(v34 + 24) >> 1;
      uint64_t v37 = v36 * v29;
      if (!*(void *)(v34 + 16))
      {
LABEL_36:
        unint64_t v54 = v35 + v37;
        uint64_t v38 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v36;
        size_t result = swift_release();
        BOOL v39 = __OFSUB__(v38, 1);
        uint64_t v14 = v38 - 1;
        if (v39) {
          goto LABEL_46;
        }
        goto LABEL_37;
      }
      if ((unint64_t)v52 < v34 || v35 >= v34 + v50 + v37)
      {
        unint64_t v54 = v35;
        uint64_t v48 = v37;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v52 == v55)
        {
LABEL_35:
          v55[2] = 0;
          goto LABEL_36;
        }
        unint64_t v54 = v35;
        uint64_t v48 = v37;
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v37 = v48;
      unint64_t v35 = v54;
      goto LABEL_35;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v22 = (uint64_t)v51;
  (*v12)(v51, 1, 1, v7);
  swift_bridgeObjectRelease();
  long long v41 = v55;
LABEL_39:
  swift_bridgeObjectRelease();
  size_t result = sub_10000FBD8(v22, (uint64_t *)&unk_1005254A0);
  unint64_t v42 = v41[3];
  if (v42 < 2) {
    return (size_t)v41;
  }
  unint64_t v43 = v42 >> 1;
  BOOL v39 = __OFSUB__(v43, v14);
  unint64_t v44 = v43 - v14;
  if (!v39)
  {
    void v41[2] = v44;
    return (size_t)v41;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

size_t sub_1001B3C64(uint64_t a1)
{
  uint64_t v43 = sub_10000F214(&qword_100521838);
  __chkstk_darwin(v43);
  uint64_t v48 = (char *)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v47 = (void *)((char *)v41 - v4);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v41 - v6;
  uint64_t v49 = v8;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v46 = v10;
  v41[0] = a1;
  if (v10)
  {
    uint64_t v42 = (v9 + 32) & ~v9;
    uint64_t v12 = (char *)_swiftEmptyArrayStorage + v42;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(type metadata accessor for ActionBarItem(0) - 8);
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v17 = *(void *)(v15 + 72);
    unint64_t v44 = v7;
    uint64_t v45 = v17;
    v41[1] = v9 | 7;
    uint64_t v18 = _swiftEmptyArrayStorage;
    uint64_t v19 = v43;
    while (1)
    {
      uint64_t v21 = (uint64_t)&v48[*(int *)(v19 + 48)];
      sub_1001B36D8(v16, v21, type metadata accessor for ActionBarItem);
      uint64_t v22 = (uint64_t)v47;
      uint64_t v23 = (uint64_t)v47 + *(int *)(v19 + 48);
      *unint64_t v47 = v13;
      sub_1001B5120(v21, v23, type metadata accessor for ActionBarItem);
      size_t result = sub_10000FC34(v22, (uint64_t)v7, &qword_100521838);
      if (v14)
      {
        uint64_t v11 = v18;
        BOOL v20 = __OFSUB__(v14--, 1);
        if (v20) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v25 = v18[3];
        if ((uint64_t)((v25 >> 1) + 0x4000000000000000) < 0)
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        int64_t v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
        if (v26 <= 1) {
          uint64_t v27 = 1;
        }
        else {
          uint64_t v27 = v26;
        }
        sub_10000F214(&qword_100524418);
        uint64_t v28 = *(void *)(v49 + 72);
        uint64_t v29 = v42;
        uint64_t v11 = (void *)swift_allocObject();
        size_t result = j__malloc_size_0(v11);
        if (!v28) {
          goto LABEL_34;
        }
        int64_t v30 = result - v29;
        if (result - v29 == 0x8000000000000000 && v28 == -1) {
          goto LABEL_35;
        }
        uint64_t v32 = v30 / v28;
        void v11[2] = v27;
        v11[3] = 2 * (v30 / v28);
        long long v33 = (char *)v11 + v29;
        uint64_t v34 = v18[3] >> 1;
        uint64_t v35 = v34 * v28;
        if (v18[2])
        {
          if (v11 < v18 || v33 >= (char *)v18 + v42 + v35)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v11 != v18)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v18[2] = 0;
        }
        uint64_t v12 = &v33[v35];
        uint64_t v37 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v34;
        swift_release();
        uint64_t v19 = v43;
        BOOL v20 = __OFSUB__(v37, 1);
        uint64_t v14 = v37 - 1;
        if (v20)
        {
LABEL_27:
          __break(1u);
          break;
        }
      }
      ++v13;
      uint64_t v7 = v44;
      sub_10000FC34((uint64_t)v44, (uint64_t)v12, &qword_100521838);
      v12 += *(void *)(v49 + 72);
      v16 += v45;
      uint64_t v18 = v11;
      if (v46 == v13) {
        goto LABEL_29;
      }
    }
  }
  uint64_t v14 = 0;
LABEL_29:
  size_t result = swift_bridgeObjectRelease();
  unint64_t v38 = v11[3];
  if (v38 >= 2)
  {
    unint64_t v39 = v38 >> 1;
    BOOL v20 = __OFSUB__(v39, v14);
    uint64_t v40 = v39 - v14;
    if (v20) {
      goto LABEL_36;
    }
    void v11[2] = v40;
  }
  return (size_t)v11;
}

size_t sub_1001B4008(uint64_t a1)
{
  uint64_t v43 = sub_10000F214(&qword_1005243F0);
  __chkstk_darwin(v43);
  uint64_t v48 = (char *)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v47 = (void *)((char *)v41 - v4);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v41 - v6;
  uint64_t v49 = v8;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v46 = v10;
  v41[0] = a1;
  if (v10)
  {
    uint64_t v42 = (v9 + 32) & ~v9;
    uint64_t v12 = (char *)_swiftEmptyArrayStorage + v42;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(type metadata accessor for Lens_Item(0) - 8);
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v17 = *(void *)(v15 + 72);
    unint64_t v44 = v7;
    uint64_t v45 = v17;
    v41[1] = v9 | 7;
    uint64_t v18 = _swiftEmptyArrayStorage;
    uint64_t v19 = v43;
    while (1)
    {
      uint64_t v21 = (uint64_t)&v48[*(int *)(v19 + 48)];
      sub_1001B36D8(v16, v21, type metadata accessor for Lens_Item);
      uint64_t v22 = (uint64_t)v47;
      uint64_t v23 = (uint64_t)v47 + *(int *)(v19 + 48);
      *unint64_t v47 = v13;
      sub_1001B5120(v21, v23, type metadata accessor for Lens_Item);
      size_t result = sub_10000FC34(v22, (uint64_t)v7, &qword_1005243F0);
      if (v14)
      {
        uint64_t v11 = v18;
        BOOL v20 = __OFSUB__(v14--, 1);
        if (v20) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v25 = v18[3];
        if ((uint64_t)((v25 >> 1) + 0x4000000000000000) < 0)
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        int64_t v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
        if (v26 <= 1) {
          uint64_t v27 = 1;
        }
        else {
          uint64_t v27 = v26;
        }
        sub_10000F214(&qword_1005243F8);
        uint64_t v28 = *(void *)(v49 + 72);
        uint64_t v29 = v42;
        uint64_t v11 = (void *)swift_allocObject();
        size_t result = j__malloc_size_0(v11);
        if (!v28) {
          goto LABEL_34;
        }
        int64_t v30 = result - v29;
        if (result - v29 == 0x8000000000000000 && v28 == -1) {
          goto LABEL_35;
        }
        uint64_t v32 = v30 / v28;
        void v11[2] = v27;
        v11[3] = 2 * (v30 / v28);
        long long v33 = (char *)v11 + v29;
        uint64_t v34 = v18[3] >> 1;
        uint64_t v35 = v34 * v28;
        if (v18[2])
        {
          if (v11 < v18 || v33 >= (char *)v18 + v42 + v35)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v11 != v18)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v18[2] = 0;
        }
        uint64_t v12 = &v33[v35];
        uint64_t v37 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v34;
        swift_release();
        uint64_t v19 = v43;
        BOOL v20 = __OFSUB__(v37, 1);
        uint64_t v14 = v37 - 1;
        if (v20)
        {
LABEL_27:
          __break(1u);
          break;
        }
      }
      ++v13;
      uint64_t v7 = v44;
      sub_10000FC34((uint64_t)v44, (uint64_t)v12, &qword_1005243F0);
      v12 += *(void *)(v49 + 72);
      v16 += v45;
      uint64_t v18 = v11;
      if (v46 == v13) {
        goto LABEL_29;
      }
    }
  }
  uint64_t v14 = 0;
LABEL_29:
  size_t result = swift_bridgeObjectRelease();
  unint64_t v38 = v11[3];
  if (v38 >= 2)
  {
    unint64_t v39 = v38 >> 1;
    BOOL v20 = __OFSUB__(v39, v14);
    uint64_t v40 = v39 - v14;
    if (v20) {
      goto LABEL_36;
    }
    void v11[2] = v40;
  }
  return (size_t)v11;
}

uint64_t sub_1001B43AC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001B8988(&qword_100524410, &qword_100524408);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000F214(&qword_100524408);
          uint64_t v12 = sub_10020B354(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000F734(0, &qword_100524400);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B45CC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001B8988(&qword_100524308, &qword_100524300);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000F214(&qword_100524300);
          uint64_t v12 = sub_10020B3C0(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000F734(0, &qword_100521110);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001B47EC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1001B8988(&qword_100524270, &qword_100524268);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000F214(&qword_100524268);
          uint64_t v12 = sub_10020B428(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CVTrackedDetection(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1001B49FC(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000F214((uint64_t *)&unk_1005254A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1[2];
  if (v6)
  {
LABEL_2:
    unint64_t v7 = v1[3];
    unint64_t v8 = *(void *)(v6 + 16);
    if (v7 == v8)
    {
      uint64_t v9 = type metadata accessor for CVTrackSnapshot(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
      sub_10000FBD8((uint64_t)v5, (uint64_t *)&unk_1005254A0);
      goto LABEL_4;
    }
    if (v7 < v8)
    {
      uint64_t v13 = type metadata accessor for CVTrackSnapshot(0);
      uint64_t v14 = *(void *)(v13 - 8);
      sub_1001B36D8(v6+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v7, (uint64_t)v5, type metadata accessor for CVTrackSnapshot);
      v1[3] = v7 + 1;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
      sub_10000FC34((uint64_t)v5, a1, (uint64_t *)&unk_1005254A0);
      return;
    }
  }
  else
  {
    while (1)
    {
LABEL_4:
      unint64_t v10 = v1[1];
      unint64_t v11 = *(void *)(*v1 + 16);
      if (v10 == v11)
      {
        uint64_t v12 = type metadata accessor for CVTrackSnapshot(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
        return;
      }
      if (v10 >= v11) {
        break;
      }
      uint64_t v6 = *(void *)(*v1 + 8 * v10 + 32);
      v1[1] = v10 + 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v1[2] = v6;
      v1[3] = 0;
      if (v6) {
        goto LABEL_2;
      }
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1001B4C38(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v25 = (int *)type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v25);
  uint64_t v26 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = sub_10000F214(&qword_100524190);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v16[*(int *)(v17 + 56)];
  sub_1001B36D8(a1, (uint64_t)v16, type metadata accessor for CVBundle.BundleType);
  sub_1001B36D8(v27, v18, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1001B36D8((uint64_t)v16, (uint64_t)v13, type metadata accessor for CVBundle.BundleType);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v21 = v18;
      uint64_t v22 = v26;
      sub_1001B5120(v21, v26, type metadata accessor for CVTrackSnapshot);
      if ((static UUID.== infix(_:_:)() & 1) != 0
        && (sub_1003FD840(&v13[v25[5]], v22 + v25[5]) & 1) != 0
        && (sub_1003FD840(&v13[v25[6]], v22 + v25[6]) & 1) != 0
        && v13[v25[7]] == *(unsigned char *)(v22 + v25[7])
        && *(double *)&v13[v25[8]] == *(double *)(v22 + v25[8])
        && *(float *)&v13[v25[9]] == *(float *)(v22 + v25[9]))
      {
        sub_1001B3678(v22, type metadata accessor for CVTrackSnapshot);
        sub_1001B3678((uint64_t)v13, type metadata accessor for CVTrackSnapshot);
        sub_1001B3678((uint64_t)v16, type metadata accessor for CVBundle.BundleType);
        char v19 = 1;
        return v19 & 1;
      }
      sub_1001B3678(v22, type metadata accessor for CVTrackSnapshot);
      sub_1001B3678((uint64_t)v13, type metadata accessor for CVTrackSnapshot);
      sub_1001B3678((uint64_t)v16, type metadata accessor for CVBundle.BundleType);
LABEL_16:
      char v19 = 0;
      return v19 & 1;
    }
    sub_1001B3678((uint64_t)v13, type metadata accessor for CVTrackSnapshot);
LABEL_7:
    sub_10000FBD8((uint64_t)v16, &qword_100524190);
    goto LABEL_16;
  }
  sub_1001B36D8((uint64_t)v16, (uint64_t)v10, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v18, v3);
  char v19 = static UUID.== infix(_:_:)();
  BOOL v20 = *(void (**)(char *, uint64_t))(v4 + 8);
  v20(v6, v3);
  v20(v10, v3);
  sub_1001B3678((uint64_t)v16, type metadata accessor for CVBundle.BundleType);
  return v19 & 1;
}

unint64_t sub_1001B50CC()
{
  unint64_t result = qword_1005241A0;
  if (!qword_1005241A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005241A0);
  }
  return result;
}

uint64_t sub_1001B5120(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001B5188(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_1005241C0);
    sub_1001B34C8(a2, 255, (void (*)(uint64_t))type metadata accessor for BundleClassification);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001B5220(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10051B740);
    sub_1001B34C8(a2, 255, (void (*)(uint64_t))type metadata accessor for CVBundle);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001B52B8()
{
  unint64_t result = qword_100524220;
  if (!qword_100524220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524220);
  }
  return result;
}

unint64_t sub_1001B530C()
{
  unint64_t result = qword_100524228;
  if (!qword_100524228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524228);
  }
  return result;
}

unint64_t sub_1001B5360()
{
  unint64_t result = qword_100524230;
  if (!qword_100524230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524230);
  }
  return result;
}

unint64_t sub_1001B53B4()
{
  unint64_t result = qword_100524238;
  if (!qword_100524238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524238);
  }
  return result;
}

unint64_t sub_1001B5408()
{
  unint64_t result = qword_100524258;
  if (!qword_100524258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524258);
  }
  return result;
}

void *sub_1001B545C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVBundle(0);
  __chkstk_darwin(v7);
  uint64_t v34 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v31 = (uint64_t)&v30 - v11;
  uint64_t v32 = v10;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v36 = a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  uint64_t v15 = v14 & v12;
  int64_t v37 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v35 = _swiftEmptyArrayStorage;
  if (!v15) {
    goto LABEL_7;
  }
LABEL_4:
  for (v15 &= v15 - 1; ; uint64_t v15 = (v21 - 1) & v21)
  {
    uint64_t v19 = swift_bridgeObjectRetain();
    a2(v19);
    swift_bridgeObjectRelease();
    if ((*v16)(v6, 1, v7) == 1)
    {
      unint64_t result = (void *)sub_10000FBD8((uint64_t)v6, &qword_10051B768);
      if (v15) {
        goto LABEL_4;
      }
    }
    else
    {
      long long v33 = type metadata accessor for CVBundle;
      uint64_t v23 = v31;
      sub_1001B5120((uint64_t)v6, v31, type metadata accessor for CVBundle);
      sub_1001B5120(v23, v34, v33);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v35 = (void *)sub_100329F38(0, v35[2] + 1, 1, (unint64_t)v35);
      }
      unint64_t v25 = v35[2];
      unint64_t v24 = v35[3];
      uint64_t v26 = (uint64_t (*)(uint64_t))(v25 + 1);
      if (v25 >= v24 >> 1)
      {
        long long v33 = (uint64_t (*)(uint64_t))(v25 + 1);
        uint64_t v29 = (void *)sub_100329F38(v24 > 1, v25 + 1, 1, (unint64_t)v35);
        uint64_t v26 = v33;
        uint64_t v35 = v29;
      }
      uint64_t v27 = v34;
      uint64_t v28 = v35;
      void v35[2] = v26;
      unint64_t result = (void *)sub_1001B5120(v27, (uint64_t)v28+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v25, type metadata accessor for CVBundle);
      if (v15) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v20 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v20 >= v37) {
      goto LABEL_29;
    }
    uint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v18;
    if (!v21)
    {
      int64_t v18 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_29;
      }
      uint64_t v21 = *(void *)(v36 + 8 * v18);
      if (!v21)
      {
        int64_t v18 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_29;
        }
        uint64_t v21 = *(void *)(v36 + 8 * v18);
        if (!v21)
        {
          int64_t v18 = v20 + 3;
          if (v20 + 3 >= v37) {
            goto LABEL_29;
          }
          uint64_t v21 = *(void *)(v36 + 8 * v18);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_22:
    ;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v37)
  {
LABEL_29:
    swift_release();
    return v35;
  }
  uint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    int64_t v18 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v18 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v18 >= v37) {
      goto LABEL_29;
    }
    uint64_t v21 = *(void *)(v36 + 8 * v18);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void *sub_1001B5830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v4 = type metadata accessor for CVBundle(0);
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v24 = _swiftEmptyArrayStorage;
  sub_100040BFC(0, v7, 0);
  uint64_t v8 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v9 = v8 - 8;
  uint64_t v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v20 = *(void *)(v10 + 72);
  do
  {
    __chkstk_darwin(v9);
    uint64_t v13 = v22;
    uint64_t v12 = v23;
    *(&v20 - 2) = v11;
    *(&v20 - 1) = v12;
    swift_bridgeObjectRetain();
    sub_1001C20BC((uint64_t (*)(char *))sub_1001B6F78, (uint64_t)(&v20 - 4), v13);
    uint64_t v15 = v14;
    sub_1001B36D8(v11, (uint64_t)v6, type metadata accessor for CVTrackSnapshot);
    type metadata accessor for CVBundle.BundleType(0);
    swift_storeEnumTagMultiPayload();
    *(void *)&v6[*(int *)(v4 + 20)] = v15;
    *(void *)&v6[*(int *)(v4 + 24)] = _swiftEmptyArrayStorage;
    uint64_t v16 = v24;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100040BFC(0, v16[2] + 1, 1);
      uint64_t v16 = v24;
    }
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1)
    {
      sub_100040BFC(v17 > 1, v18 + 1, 1);
      uint64_t v16 = v24;
    }
    v16[2] = v18 + 1;
    uint64_t v9 = sub_1001B5120((uint64_t)v6, (uint64_t)v16+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v18, type metadata accessor for CVBundle);
    v11 += v20;
    --v7;
  }
  while (v7);
  return v16;
}

uint64_t sub_1001B5AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v32 = sub_10000F214(&qword_1005242C0);
  uint64_t v3 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_1005242C8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v30 = v7 + 32;
  uint64_t v31 = v7 + 16;
  unint64_t v17 = (void (**)(char *, uint64_t))(v3 + 8);
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v7 + 8;
  uint64_t v18 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_5;
    }
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v28) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v28) {
        return swift_release();
      }
      unint64_t v24 = *(void *)(v27 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v28) {
          return swift_release();
        }
        unint64_t v24 = *(void *)(v27 + 8 * v20);
        if (!v24)
        {
          int64_t v20 = v23 + 3;
          if (v23 + 3 >= v28) {
            return swift_release();
          }
          unint64_t v24 = *(void *)(v27 + 8 * v20);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v16 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v18 + 56) + *(void *)(v7 + 72) * v22, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    uint64_t v34 = *(void *)(v33 + 24);
    swift_bridgeObjectRetain();
    AsyncStream.Continuation.yield(_:)();
    (*v17)(v5, v32);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  int64_t v25 = v23 + 4;
  if (v25 >= v28) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    int64_t v20 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v20 >= v28) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v27 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1001B5E58()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CVBundle(0) - 8) + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = v0 + ((v1 + 40) & ~v1);
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v2, v4);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v6 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v7 = v2 + *(int *)(v6 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v5(v7, v4);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_13;
      case 1u:
        uint64_t v28 = v6;
        v5(v7, v4);
        uint64_t v8 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = v7 + v8[13];
        uint64_t v10 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v26 = *(void *)(v10 - 8);
        uint64_t v27 = v9;
        uint64_t v11 = v9;
        uint64_t v12 = v10;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v11, 1, v10)) {
          (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v12);
        }
        uint64_t v13 = (uint64_t *)(v7 + v8[14]);
        unint64_t v14 = v13[1];
        if (v14 >> 60 != 15) {
          sub_100038B34(*v13, v14);
        }
        uint64_t v15 = (void *)(v7 + v8[15]);
        uint64_t v6 = v28;
        if (*v15)
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v5(v7, v4);
        uint64_t v16 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v5(v7, v4);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v5(v7, v4);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_13:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v17 = v2 + *(int *)(v6 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v5(v17, v4);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_25;
      case 1u:
        v5(v17, v4);
        uint64_t v18 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = v17 + v18[13];
        uint64_t v20 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v21 = *(void *)(v20 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
          (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
        }
        unint64_t v22 = (uint64_t *)(v17 + v18[14]);
        unint64_t v23 = v22[1];
        if (v23 >> 60 != 15) {
          sub_100038B34(*v22, v23);
        }
        if (*(void *)(v17 + v18[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v5(v17, v4);
        uint64_t v24 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v5(v17, v4);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v5(v17, v4);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_25:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001B64A8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CVBundle(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_10000FC9C;
  return sub_1001A97A0(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1001B65D4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = sub_10000F878;
  return sub_1001A9BA4(a1, a2, v7, v6);
}

uint64_t sub_1001B6688()
{
  uint64_t v1 = *(void *)(type metadata accessor for BundleClassification(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for CVBundle(0) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  swift_unknownObjectRelease();
  uint64_t v6 = v0 + v2;
  type metadata accessor for BundleClassification.ClassificationType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      goto LABEL_7;
    }
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 3, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
    }
    sub_10000F214(&qword_1005297C0);
  }
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v10 = v0 + v5;
  type metadata accessor for CVBundle.BundleType(0);
  int v11 = swift_getEnumCaseMultiPayload();
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v0 + v5, v12);
  if (v11 != 1)
  {
    uint64_t v14 = type metadata accessor for CVTrackSnapshot(0);
    unint64_t v15 = v10 + *(int *)(v14 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v13(v15, v12);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_19;
      case 1u:
        uint64_t v36 = v14;
        v13(v15, v12);
        uint64_t v16 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v17 = v15 + v16[13];
        uint64_t v18 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v34 = *(void *)(v18 - 8);
        unint64_t v35 = v17;
        unint64_t v19 = v17;
        uint64_t v20 = v18;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v34 + 48))(v19, 1, v18)) {
          (*(void (**)(unint64_t, uint64_t))(v34 + 8))(v35, v20);
        }
        uint64_t v21 = (uint64_t *)(v15 + v16[14]);
        unint64_t v22 = v21[1];
        if (v22 >> 60 != 15) {
          sub_100038B34(*v21, v22);
        }
        unint64_t v23 = (void *)(v15 + v16[15]);
        uint64_t v14 = v36;
        if (*v23)
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v13(v15, v12);
        uint64_t v24 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v13(v15, v12);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v13(v15, v12);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_19:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    unint64_t v25 = v10 + *(int *)(v14 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v13(v25, v12);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_31;
      case 1u:
        v13(v25, v12);
        uint64_t v26 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v27 = v25 + v26[13];
        uint64_t v28 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v29 = *(void *)(v28 - 8);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28)) {
          (*(void (**)(unint64_t, uint64_t))(v29 + 8))(v27, v28);
        }
        uint64_t v30 = (uint64_t *)(v25 + v26[14]);
        unint64_t v31 = v30[1];
        if (v31 >> 60 != 15) {
          sub_100038B34(*v30, v31);
        }
        if (*(void *)(v25 + v26[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v13(v25, v12);
        uint64_t v32 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v13(v25, v12);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v13(v25, v12);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_31:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1001B6DE8(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for BundleClassification(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CVBundle(0) - 8) + 80);
  uint64_t v9 = v1 + ((v6 + v7 + v8) & ~v8);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_10000FC9C;
  int v11 = (void *)swift_task_alloc();
  void v10[2] = v11;
  void *v11 = v10;
  v11[1] = sub_100066534;
  return sub_10038BBD4(a1, v9);
}

uint64_t sub_1001B6F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A5AC8(a1, *(void *)(v2 + 16), a2);
}

BOOL sub_1001B6F78(uint64_t a1)
{
  return sub_1001A721C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001B6F98()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = sub_10000F214(&qword_1005242C8);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_1001B70FC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000F214(&qword_1005242C8) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + v9;
  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *unint64_t v15 = v3;
  v15[1] = sub_10000FC9C;
  return sub_1001A4D60(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_1001B7260()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1001B7298()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1001B7364(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1001A5318(a1, v4, v5);
}

uint64_t sub_1001B73D8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1001B74AC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unint64_t v9 = v2;
  v9[1] = sub_10000FC9C;
  return sub_1001A5510(a1, v5, v6, v7, v8);
}

uint64_t sub_1001B75A8()
{
  uint64_t v1 = sub_10000F214((uint64_t *)&unk_100528AB0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1001B7680(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000F214((uint64_t *)&unk_100528AB0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unint64_t v9 = v2;
  v9[1] = sub_10000F878;
  return sub_1001A412C(a1, v5, v6, v7, v8);
}

uint64_t sub_1001B7780()
{
  uint64_t v1 = sub_10000F214((uint64_t *)&unk_100528AB0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001B786C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000F214((uint64_t *)&unk_100528AB0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000FC9C;
  return sub_1001A4490(a1, v6, v7, v8, v9);
}

ValueMetadata *type metadata accessor for CVBundle.BundleType.CodingKeys()
{
  return &type metadata for CVBundle.BundleType.CodingKeys;
}

ValueMetadata *type metadata accessor for CVBundle.BundleType.NodeCodingKeys()
{
  return &type metadata for CVBundle.BundleType.NodeCodingKeys;
}

unsigned char *_s6Tamale8CVBundleV10BundleTypeO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B7A88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVBundle.BundleType.GroupCodingKeys()
{
  return &type metadata for CVBundle.BundleType.GroupCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for CVBundle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B7B8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVBundle.CodingKeys()
{
  return &type metadata for CVBundle.CodingKeys;
}

ValueMetadata *type metadata accessor for BundleGroupType()
{
  return &type metadata for BundleGroupType;
}

unint64_t sub_1001B7BD8()
{
  unint64_t result = qword_100524330;
  if (!qword_100524330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524330);
  }
  return result;
}

unint64_t sub_1001B7C30()
{
  unint64_t result = qword_100524338;
  if (!qword_100524338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524338);
  }
  return result;
}

unint64_t sub_1001B7C88()
{
  unint64_t result = qword_100524340;
  if (!qword_100524340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524340);
  }
  return result;
}

unint64_t sub_1001B7CE0()
{
  unint64_t result = qword_100524348;
  if (!qword_100524348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524348);
  }
  return result;
}

unint64_t sub_1001B7D38()
{
  unint64_t result = qword_100524350;
  if (!qword_100524350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524350);
  }
  return result;
}

unint64_t sub_1001B7D90()
{
  unint64_t result = qword_100524358;
  if (!qword_100524358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524358);
  }
  return result;
}

unint64_t sub_1001B7DE8()
{
  unint64_t result = qword_100524360;
  if (!qword_100524360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524360);
  }
  return result;
}

unint64_t sub_1001B7E40()
{
  unint64_t result = qword_100524368;
  if (!qword_100524368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524368);
  }
  return result;
}

unint64_t sub_1001B7E98()
{
  unint64_t result = qword_100524370;
  if (!qword_100524370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524370);
  }
  return result;
}

unint64_t sub_1001B7EF0()
{
  unint64_t result = qword_100524378;
  if (!qword_100524378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524378);
  }
  return result;
}

unint64_t sub_1001B7F48()
{
  unint64_t result = qword_100524380;
  if (!qword_100524380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524380);
  }
  return result;
}

unint64_t sub_1001B7FA0()
{
  unint64_t result = qword_100524388;
  if (!qword_100524388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524388);
  }
  return result;
}

unint64_t sub_1001B7FF8()
{
  unint64_t result = qword_100524390;
  if (!qword_100524390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524390);
  }
  return result;
}

uint64_t sub_1001B804C(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_100524398);
  uint64_t v16 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_1005243A0);
  uint64_t v6 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1001B8640();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v9 = v16;
    uint64_t v15 = v6;
    if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) == 1)
    {
      sub_1001B8694();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v10 = v15;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v3);
    }
    else
    {
      uint64_t v11 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v13 = v12;
      sub_10000F214(&qword_10051E3E0);
      void *v13 = &type metadata for BundleGroupType;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, enum case for DecodingError.typeMismatch(_:), v11);
      swift_willThrow();
      uint64_t v10 = v15;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v17);
  }
  return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
}

uint64_t sub_1001B8334(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701080942 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x70756F7267 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001B8410(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001B84D4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6572646C696863 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6966697373616C63 && a2 == 0xEF736E6F69746163)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1001B8640()
{
  unint64_t result = qword_1005243A8;
  if (!qword_1005243A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005243A8);
  }
  return result;
}

unint64_t sub_1001B8694()
{
  unint64_t result = qword_1005243B0;
  if (!qword_1005243B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005243B0);
  }
  return result;
}

unsigned char *_s6Tamale15BundleGroupTypeOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001B8788);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BundleGroupType.CodingKeys()
{
  return &type metadata for BundleGroupType.CodingKeys;
}

ValueMetadata *type metadata accessor for BundleGroupType.SignCodingKeys()
{
  return &type metadata for BundleGroupType.SignCodingKeys;
}

unint64_t sub_1001B87D4()
{
  unint64_t result = qword_1005243C8;
  if (!qword_1005243C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005243C8);
  }
  return result;
}

unint64_t sub_1001B882C()
{
  unint64_t result = qword_1005243D0;
  if (!qword_1005243D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005243D0);
  }
  return result;
}

unint64_t sub_1001B8884()
{
  unint64_t result = qword_1005243D8;
  if (!qword_1005243D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005243D8);
  }
  return result;
}

unint64_t sub_1001B88DC()
{
  unint64_t result = qword_1005243E0;
  if (!qword_1005243E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005243E0);
  }
  return result;
}

unint64_t sub_1001B8934()
{
  unint64_t result = qword_1005243E8;
  if (!qword_1005243E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005243E8);
  }
  return result;
}

uint64_t sub_1001B8988(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FocusSelectionConfiguration(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FocusSelectionConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusSelectionConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)uint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)uint64_t result = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentDimmingView()
{
  return &type metadata for ContentDimmingView;
}

uint64_t sub_1001B8B08()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001B8B24@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_100524440);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = static HorizontalAlignment.center.getter();
  char v8 = a1 & 1;
  int v9 = (a1 >> 8) & 1;
  sub_1001B8D48(a1 & 0x101, (uint64_t)v31);
  v32[576] = 0;
  memcpy(&v32[7], v31, 0x239uLL);
  int v21 = 0;
  int v22 = static Edge.Set.all.getter();
  uint64_t v20 = static Alignment.center.getter();
  uint64_t v11 = v10;
  BOOL v12 = (a1 & 0x10000) == 0;
  unsigned int v13 = (a1 & 0x10000) >> 16;
  if (v12) {
    double v14 = 0.0;
  }
  else {
    double v14 = 16.0;
  }
  char v15 = static Edge.Set.all.getter();
  double v27 = v14;
  char v28 = 1;
  char v29 = v15;
  char v30 = 0;
  char v24 = v8;
  char v25 = v9;
  char v26 = v13;
  sub_10000F214(&qword_100524448);
  sub_10000F214(&qword_100524450);
  sub_1001B9C8C(&qword_100524458, &qword_100524448, (void (*)(void))sub_1001B97A8);
  sub_1001B98C4();
  View.animation<A>(_:body:)();
  uint64_t v16 = (uint64_t *)&v7[*(int *)(v5 + 44)];
  *uint64_t v16 = v20;
  v16[1] = v11;
  uint64_t v17 = sub_10000F214(&qword_1005244A8);
  sub_1001B9964((uint64_t)v7, a2 + *(int *)(v17 + 36));
  *(void *)a2 = v23;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = v21;
  memcpy((void *)(a2 + 17), v32, 0x240uLL);
  *(_WORD *)(a2 + 593) = v22;
  return sub_1001B99CC((uint64_t)v7);
}

uint64_t sub_1001B8D48@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = static Alignment.center.getter();
  uint64_t v5 = v4;
  uint64_t v6 = static Color.clear.getter();
  uint64_t v7 = static Alignment.center.getter();
  sub_100226808(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v125, 0.0, 1, 0.0, 1, v7, v8, v3, v5, v6);
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  char v9 = v135;
  char v55 = v135;
  uint64_t v64 = v136;
  uint64_t v65 = v134;
  char v10 = v137;
  uint64_t v62 = v139;
  uint64_t v63 = v138;
  uint64_t v54 = static Alignment.center.getter();
  uint64_t v66 = v11;
  sub_1001B94A8((uint64_t)v80);
  uint64_t v60 = v80[0];
  uint64_t v12 = v80[2];
  uint64_t v46 = v80[2];
  uint64_t v51 = v80[1];
  uint64_t v52 = v80[3];
  uint64_t v50 = v80[4];
  char v58 = BYTE1(v80[5]);
  char v59 = v80[5];
  __int16 v13 = a1;
  char v61 = a1 & 1;
  double v14 = 1.0;
  double v15 = 0.0;
  if (a1) {
    double v15 = 1.0;
  }
  double v57 = v15;
  char v124 = v9;
  char v123 = v10;
  uint64_t v56 = static Animation.linear(duration:)();
  uint64_t v16 = static Alignment.center.getter();
  uint64_t v18 = v17;
  uint64_t v19 = static Color.clear.getter();
  uint64_t v20 = static Alignment.center.getter();
  sub_100226808(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v67, 0.0, 1, 0.0, 1, v20, v21, v16, v18, v19);
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  char v22 = v141;
  uint64_t v49 = v142;
  char v23 = v143;
  uint64_t v24 = v144;
  uint64_t v47 = v140;
  uint64_t v48 = v145;
  sub_10000F214(&qword_1005244B0);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_10043F400;
  static Color.black.getter();
  Color.opacity(_:)();
  swift_release();
  *(void *)(v25 + 32) = Gradient.Stop.init(color:location:)();
  *(void *)(v25 + 40) = v26;
  static Color.black.getter();
  Color.opacity(_:)();
  swift_release();
  *(void *)(v25 + 48) = Gradient.Stop.init(color:location:)();
  *(void *)(v25 + 56) = v27;
  static Color.black.getter();
  Color.opacity(_:)();
  swift_release();
  *(void *)(v25 + 64) = Gradient.Stop.init(color:location:)();
  *(void *)(v25 + 72) = v28;
  static Color.black.getter();
  Color.opacity(_:)();
  swift_release();
  *(void *)(v25 + 80) = Gradient.Stop.init(color:location:)();
  *(void *)(v25 + 88) = v29;
  static Color.clear.getter();
  *(void *)(v25 + 96) = Gradient.Stop.init(color:location:)();
  *(void *)(v25 + 104) = v30;
  Gradient.init(stops:)();
  static UnitPoint.bottom.getter();
  static UnitPoint.top.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v31 = v146;
  uint64_t v42 = v146;
  uint64_t v33 = v147;
  uint64_t v32 = v148;
  uint64_t v34 = v149;
  uint64_t v35 = v150;
  uint64_t v36 = static SafeAreaRegions.all.getter();
  char v45 = static Edge.Set.all.getter();
  uint64_t v37 = static Alignment.center.getter();
  uint64_t v43 = v38;
  uint64_t v44 = v37;
  int v39 = v13 & 0x100;
  if (!v39) {
    double v14 = 0.0;
  }
  char v77 = v22;
  char v76 = v23;
  uint64_t v41 = static Animation.linear(duration:)();
  __src[6] = v131;
  __src[7] = v132;
  __src[2] = v127;
  __src[3] = v128;
  __src[4] = v129;
  __src[5] = v130;
  __src[0] = v125;
  __src[1] = v126;
  *(void *)&__src[8] = v133;
  *((void *)&__src[8] + 1) = v65;
  LOBYTE(__src[9]) = v55;
  *((void *)&__src[9] + 1) = v64;
  LOBYTE(__src[10]) = v10;
  *((void *)&__src[10] + 1) = v63;
  *(void *)&__src[11] = v62;
  *((void *)&__src[11] + 1) = v60;
  *(void *)&__src[12] = v51;
  *((void *)&__src[12] + 1) = v12;
  *(void *)&__src[13] = v52;
  *((void *)&__src[13] + 1) = v50;
  LOBYTE(__src[14]) = v59;
  BYTE1(__src[14]) = v58;
  *((void *)&__src[14] + 1) = v54;
  *(void *)&__src[15] = v66;
  *((double *)&__src[15] + 1) = v57;
  *(void *)&__src[16] = v56;
  BYTE8(__src[16]) = v61;
  v79[6] = v73;
  v79[7] = v74;
  v79[2] = v69;
  v79[3] = v70;
  v79[4] = v71;
  v79[5] = v72;
  v79[0] = v67;
  v79[1] = v68;
  *(void *)&v79[8] = v75;
  *((void *)&v79[8] + 1) = v47;
  LOBYTE(v79[9]) = v22;
  *((void *)&v79[9] + 1) = v49;
  LOBYTE(v79[10]) = v23;
  *((void *)&v79[10] + 1) = v24;
  *(void *)&v79[11] = v48;
  *((void *)&v79[11] + 1) = v31;
  *(void *)&v79[12] = v33;
  *((void *)&v79[12] + 1) = v32;
  *(void *)&v79[13] = v34;
  *((void *)&v79[13] + 1) = v35;
  LOBYTE(v79[14]) = 0;
  *((void *)&v79[14] + 1) = v36;
  LOBYTE(v79[15]) = v45;
  *((void *)&v79[15] + 1) = v44;
  *(void *)&v79[16] = v43;
  *((double *)&v79[16] + 1) = v14;
  *(void *)&v79[17] = v41;
  BYTE8(v79[17]) = BYTE1(v39);
  memcpy((void *)a2, __src, 0x109uLL);
  char v81 = 0;
  memcpy((char *)v80 + 7, v79, 0x119uLL);
  *(void *)(a2 + 272) = 0;
  *(unsigned char *)(a2 + 280) = 0;
  memcpy((void *)(a2 + 281), v80, 0x120uLL);
  v82[6] = v73;
  v82[7] = v74;
  v82[2] = v69;
  v82[3] = v70;
  v82[4] = v71;
  v82[5] = v72;
  v82[0] = v67;
  v82[1] = v68;
  uint64_t v83 = v75;
  uint64_t v84 = v47;
  char v85 = v22;
  uint64_t v86 = v49;
  char v87 = v23;
  uint64_t v88 = v24;
  uint64_t v89 = v48;
  uint64_t v90 = v42;
  uint64_t v91 = v33;
  uint64_t v92 = v32;
  uint64_t v93 = v34;
  uint64_t v94 = v35;
  char v95 = 0;
  uint64_t v96 = v36;
  char v97 = v45;
  uint64_t v98 = v44;
  uint64_t v99 = v43;
  double v100 = v14;
  uint64_t v101 = v41;
  char v102 = BYTE1(v39);
  sub_1001B9A94((uint64_t)__src);
  sub_1001B9AE0((uint64_t)v79);
  sub_1001B9B2C((uint64_t)v82);
  v103[5] = v130;
  v103[6] = v131;
  v103[7] = v132;
  v103[1] = v126;
  v103[2] = v127;
  v103[3] = v128;
  v103[4] = v129;
  v103[0] = v125;
  uint64_t v104 = v133;
  uint64_t v105 = v65;
  char v106 = v55;
  uint64_t v107 = v64;
  char v108 = v10;
  uint64_t v109 = v63;
  uint64_t v110 = v62;
  uint64_t v111 = v60;
  uint64_t v112 = v51;
  uint64_t v113 = v46;
  uint64_t v114 = v52;
  uint64_t v115 = v50;
  char v116 = v59;
  char v117 = v58;
  uint64_t v118 = v54;
  uint64_t v119 = v66;
  double v120 = v57;
  uint64_t v121 = v56;
  char v122 = v61;
  return sub_1001B9B78((uint64_t)v103);
}

__n128 sub_1001B94A8@<Q0>(uint64_t a1@<X8>)
{
  sub_10000F214(&qword_1005244B0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10043F400;
  static Color.black.getter();
  Color.opacity(_:)();
  swift_release();
  *(void *)(v2 + 32) = Gradient.Stop.init(color:location:)();
  *(void *)(v2 + 40) = v3;
  static Color.black.getter();
  Color.opacity(_:)();
  swift_release();
  *(void *)(v2 + 48) = Gradient.Stop.init(color:location:)();
  *(void *)(v2 + 56) = v4;
  static Color.black.getter();
  Color.opacity(_:)();
  swift_release();
  *(void *)(v2 + 64) = Gradient.Stop.init(color:location:)();
  *(void *)(v2 + 72) = v5;
  static Color.black.getter();
  Color.opacity(_:)();
  swift_release();
  *(void *)(v2 + 80) = Gradient.Stop.init(color:location:)();
  *(void *)(v2 + 88) = v6;
  static Color.clear.getter();
  *(void *)(v2 + 96) = Gradient.Stop.init(color:location:)();
  *(void *)(v2 + 104) = v7;
  Gradient.init(stops:)();
  static UnitPoint.top.getter();
  static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  char v8 = static Edge.Set.all.getter();
  *(void *)a1 = v10;
  __n128 result = v11;
  *(__n128 *)(a1 + 8) = v11;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 41) = v8;
  return result;
}

uint64_t sub_1001B9654@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000F214(&qword_100524450);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  char v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x10000) != 0) {
    double v10 = 1.0;
  }
  else {
    double v10 = 0.0;
  }
  uint64_t v11 = sub_10000F214(&qword_1005244A0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, a1, v11);
  *(double *)&v9[*(int *)(v7 + 44)] = v10;
  return sub_1001B9A2C((uint64_t)v9, a3);
}

uint64_t sub_1001B9748@<X0>(uint64_t a1@<X8>)
{
  if (v1[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (v1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return sub_1001B8B24(v3 | *v1 | v2, a1);
}

uint64_t sub_1001B9778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (v2[18]) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  if (v2[17]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return sub_1001B9654(a1, v4 | v2[16] | v3, a2);
}

unint64_t sub_1001B97A8()
{
  unint64_t result = qword_100524460;
  if (!qword_100524460)
  {
    sub_10000F69C(&qword_100524468);
    sub_1001B9824();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524460);
  }
  return result;
}

unint64_t sub_1001B9824()
{
  unint64_t result = qword_100524470;
  if (!qword_100524470)
  {
    sub_10000F69C(&qword_100524478);
    sub_1000621D8();
    sub_100013AA8(&qword_100524480, &qword_100524488);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524470);
  }
  return result;
}

unint64_t sub_1001B98C4()
{
  unint64_t result = qword_100524490;
  if (!qword_100524490)
  {
    sub_10000F69C(&qword_100524450);
    sub_100013AA8(&qword_100524498, &qword_1005244A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524490);
  }
  return result;
}

uint64_t sub_1001B9964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100524440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B99CC(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100524440);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001B9A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100524450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B9A94(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001B9AE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001B9B2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001B9B78(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001B9BC8()
{
  unint64_t result = qword_1005244B8;
  if (!qword_1005244B8)
  {
    sub_10000F69C(&qword_1005244A8);
    sub_1001B9C8C(&qword_1005244C0, &qword_1005244C8, (void (*)(void))sub_1001B9D0C);
    sub_100013AA8(&qword_1005244F0, &qword_100524440);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005244B8);
  }
  return result;
}

uint64_t sub_1001B9C8C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    sub_10002D694();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001B9D0C()
{
  unint64_t result = qword_1005244D0;
  if (!qword_1005244D0)
  {
    sub_10000F69C(&qword_1005244D8);
    sub_100013AA8(&qword_1005244E0, &qword_1005244E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005244D0);
  }
  return result;
}

uint64_t sub_1001B9DAC()
{
  return swift_retain();
}

uint64_t sub_1001B9E50@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 16);
  return swift_retain();
}

uint64_t sub_1001B9EFC()
{
  return swift_release();
}

uint64_t sub_1001B9FDC@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderInput;
  swift_beginAccess();
  return sub_10000FB74(v3, a1, &qword_100522468);
}

uint64_t sub_1001BA0B0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderInput;
  swift_beginAccess();
  return sub_10000FB74(v4, a2, &qword_100522468);
}

uint64_t sub_1001BA184(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522468);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000FB74(a1, (uint64_t)v6, &qword_100522468);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000FBD8((uint64_t)v6, &qword_100522468);
}

uint64_t sub_1001BA2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderInput;
  swift_beginAccess();
  sub_1001C038C(a2, v3);
  return swift_endAccess();
}

void *sub_1001BA330()
{
  return sub_1001BA6E0((uint64_t)&unk_10044B188, &OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__maskImage);
}

id sub_1001BA344@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001BA79C(a1, &OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__maskImage, a2);
}

uint64_t sub_1001BA358(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

void sub_1001BA434(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__maskImage);
  *(void *)(a1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__maskImage) = a2;
  id v3 = a2;
}

uint64_t sub_1001BA470()
{
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderedSubjectIndex);
}

uint64_t sub_1001BA520@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderedSubjectIndex + 8);
  *(void *)a2 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderedSubjectIndex);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1001BA5DC()
{
  return swift_release();
}

uint64_t sub_1001BA6B0(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = result + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderedSubjectIndex;
  *(void *)uint64_t v3 = a2;
  *(unsigned char *)(v3 + 8) = a3 & 1;
  return result;
}

void *sub_1001BA6CC()
{
  return sub_1001BA6E0((uint64_t)&unk_10044B160, &OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__userSelectedSubjectImage);
}

void *sub_1001BA6E0(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v2 + *a2);
  id v5 = v4;
  return v4;
}

id sub_1001BA788@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001BA79C(a1, &OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__userSelectedSubjectImage, a2);
}

id sub_1001BA79C@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = *(void **)(v5 + *a2);
  *a3 = v6;

  return v6;
}

uint64_t sub_1001BA860(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

void sub_1001BA93C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__userSelectedSubjectImage);
  *(void *)(a1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__userSelectedSubjectImage) = a2;
  id v3 = a2;
}

uint64_t sub_1001BA978(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 976) = v7;
  *(void *)(v8 + 968) = a7;
  *(void *)(v8 + 960) = a6;
  *(void *)(v8 + 952) = a5;
  *(void *)(v8 + 944) = a4;
  *(unsigned char *)(v8 + 105) = a3;
  *(void *)(v8 + 936) = a2;
  *(void *)(v8 + 928) = a1;
  sub_10000F214(&qword_100522468);
  *(void *)(v8 + 984) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for IndexSet();
  *(void *)(v8 + 992) = v9;
  *(void *)(v8 + 1000) = *(void *)(v9 - 8);
  *(void *)(v8 + 1008) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SubjectLiftAnalysisOutput(0);
  *(void *)(v8 + 1016) = v10;
  *(void *)(v8 + 1024) = *(void *)(v10 - 8);
  *(void *)(v8 + 1032) = swift_task_alloc();
  *(void *)(v8 + 1040) = swift_task_alloc();
  *(void *)(v8 + 1048) = swift_task_alloc();
  sub_10000F214(&qword_100524730);
  *(void *)(v8 + 1056) = swift_task_alloc();
  *(void *)(v8 + 1064) = swift_task_alloc();
  *(void *)(v8 + 1072) = swift_task_alloc();
  *(void *)(v8 + 1080) = swift_task_alloc();
  *(void *)(v8 + 1088) = swift_task_alloc();
  *(void *)(v8 + 1096) = swift_task_alloc();
  return _swift_task_switch(sub_1001BAB98, 0, 0);
}

uint64_t sub_1001BAB98()
{
  uint64_t v1 = (void *)v0[116];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10000F3B0(v1, v2);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  unsigned __int8 v6 = v5;
  uint64_t v7 = &selRef_initWithCVPixelBuffer_orientation_requestType_;
  uint64_t v8 = v4;
  switch(v5)
  {
    case 1u:
      uint64_t v7 = &selRef_initWithCGImage_orientation_requestType_;
      goto LABEL_3;
    case 2u:
      sub_1000ACF28(v4, 2u);
      goto LABEL_8;
    case 3u:
      goto LABEL_8;
    default:
LABEL_3:
      uint64_t v9 = v1[3];
      uint64_t v10 = v1[4];
      sub_10000F3B0((void *)v0[116], v9);
      double v11 = sub_10030CA60(v9, v10);
      id v12 = [objc_allocWithZone((Class)VKCImageAnalyzerRequest) *v7 v8 sub_1001C2994(v11) 32];
      v0[138] = v12;
      sub_1000ACF28(v8, v6);
      if (v12)
      {
        uint64_t v13 = v0[122];
        uint64_t v14 = swift_task_alloc();
        v0[139] = v14;
        *(void *)(v14 + 16) = v13;
        *(void *)(v14 + 24) = v12;
        double v15 = (void *)swift_task_alloc();
        v0[140] = v15;
        uint64_t v16 = sub_10000F214(&qword_100524738);
        v0[141] = v16;
        *double v15 = v0;
        v15[1] = sub_1001BAEAC;
        return withCheckedContinuation<A>(isolation:function:_:)(v0 + 110, 0, 0, 0xD00000000000001DLL, 0x8000000100429210, sub_1001BEF0C, v14, v16);
      }
      else
      {
LABEL_8:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v17 = (uint64_t (*)(void))v0[1];
        return v17();
      }
  }
}

uint64_t sub_1001BAEAC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001BAFF0, 0, 0);
}

uint64_t sub_1001BAFF0()
{
  uint64_t v1 = *(void **)(v0 + 880);
  *(void *)(v0 + 1136) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 936);
    if ((~v2 & 0xF000000000000007) != 0)
    {
      if (v2 < 0)
      {
        uint64_t v6 = v0 + 400;
        sub_1001BEF38(*(void *)(v0 + 936));
        uint64_t v11 = *(void *)(v0 + 936);
        *(void *)(v0 + 1216) = 0x4042C00000000000;
        *(void *)(v0 + 1208) = v2 & 0x7FFFFFFFFFFFFFFFLL;
        *(void *)(v0 + 1200) = v2 & 0x7FFFFFFFFFFFFFFFLL;
        id v12 = *(void **)(v0 + 1136);
        uint64_t v13 = *(void *)(v0 + 976);
        uint64_t v14 = *(void *)(v0 + 928);
        swift_retain_n();
        sub_10000F578(v14, v0 + 216);
        *(void *)(v0 + 208) = v12;
        *(void *)(v0 + 256) = v11;
        *(_OWORD *)(v0 + 264) = 0u;
        *(_OWORD *)(v0 + 280) = 0u;
        *(unsigned char *)(v0 + 296) = 1;
        swift_getKeyPath();
        *(void *)(v0 + 1224) = OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel___observationRegistrar;
        *(void *)(v0 + 864) = v13;
        *(void *)(v0 + 1232) = sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
        id v15 = v12;
        swift_retain();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        *(void *)(v0 + 1240) = *(void *)(v13 + 16);
        sub_1001BEF58(v0 + 208, v0 + 400);
        swift_retain();
        uint64_t v16 = (void *)swift_task_alloc();
        *(void *)(v0 + 1248) = v16;
        *uint64_t v16 = v0;
        v16[1] = sub_1001BCA28;
        uint64_t v10 = *(void *)(v0 + 1080);
      }
      else
      {
        uint64_t v6 = v0 + 304;
        uint64_t v7 = *(void *)(v0 + 976);
        sub_10000F578(*(void *)(v0 + 928), v0 + 120);
        *(void *)(v0 + 112) = v1;
        *(void *)(v0 + 160) = v2;
        *(_OWORD *)(v0 + 168) = 0u;
        *(_OWORD *)(v0 + 184) = 0u;
        *(unsigned char *)(v0 + 200) = 1;
        swift_getKeyPath();
        *(void *)(v0 + 1144) = OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel___observationRegistrar;
        *(void *)(v0 + 808) = v7;
        sub_1001BEF38(v2);
        sub_1001BEF38(v2);
        sub_1001BEF38(v2);
        sub_1001BEF38(v2);
        *(void *)(v0 + 1152) = sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
        id v8 = v1;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        *(void *)(v0 + 1160) = *(void *)(v7 + 16);
        sub_1001BEF58(v0 + 112, v0 + 304);
        swift_retain();
        uint64_t v9 = (void *)swift_task_alloc();
        *(void *)(v0 + 1168) = v9;
        *uint64_t v9 = v0;
        v9[1] = sub_1001BB4C0;
        uint64_t v10 = *(void *)(v0 + 1096);
      }
      return sub_10030910C(v10, v6);
    }
    else
    {
      type metadata accessor for MainActor();
      *(void *)(v0 + 1408) = static MainActor.shared.getter();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      return _swift_task_switch(sub_1001BE3D8, v4, v3);
    }
  }
  else
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unsigned __int8 v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1001BB4C0()
{
  uint64_t v1 = *v0 + 304;
  swift_task_dealloc();
  swift_release();
  sub_10000FBD8(v1, &qword_100524748);
  return _swift_task_switch(sub_1001BB620, 0, 0);
}

uint64_t sub_1001BB620()
{
  uint64_t v1 = *(void *)(v0 + 1088);
  uint64_t v2 = *(void *)(v0 + 1024);
  uint64_t v3 = *(void *)(v0 + 1016);
  sub_10000FB74(*(void *)(v0 + 1096), v1, &qword_100524730);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  uint64_t v5 = *(void *)(v0 + 1088);
  if (v4 == 1)
  {
    sub_10000FBD8(v5, &qword_100524730);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 1048);
    uint64_t v7 = *(void *)(v0 + 1016);
    sub_1001C02AC(v5, v6);
    uint64_t v8 = v6 + *(int *)(v7 + 24);
    if ((IndexSet.isEmpty.getter() & 1) == 0)
    {
      IndexSet.init()();
      uint64_t v16 = IndexSet.first.getter();
      if ((v17 & 1) != 0 || (uint64_t v18 = v16, IndexSet.count.getter() != 1))
      {
        uint64_t v22 = *(void *)(v0 + 976);
        (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 1000) + 24))(*(void *)(v0 + 1008), v8, *(void *)(v0 + 992));
        swift_getKeyPath();
        uint64_t v23 = swift_task_alloc();
        *(void *)(v23 + 16) = v22;
        *(void *)(v23 + 24) = 0;
        *(unsigned char *)(v23 + 32) = 1;
        *(void *)(v0 + 888) = v22;
      }
      else
      {
        uint64_t v19 = *(void *)(v0 + 976);
        swift_getKeyPath();
        *(void *)(v0 + 904) = v19;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        if ((*(unsigned char *)(v19 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderedSubjectIndex + 8) & 1) != 0
          || *(void *)(v19 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderedSubjectIndex) != v18)
        {
          uint64_t v84 = *(void *)(v0 + 976);
          (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 1000) + 24))(*(void *)(v0 + 1008), v8, *(void *)(v0 + 992));
          swift_getKeyPath();
          uint64_t v85 = swift_task_alloc();
          *(void *)(v85 + 16) = v84;
          *(void *)(v85 + 24) = v18;
          *(unsigned char *)(v85 + 32) = 0;
          *(void *)(v0 + 912) = v84;
        }
        else
        {
          uint64_t v20 = *(void *)(v0 + 976);
          swift_getKeyPath();
          uint64_t v21 = swift_task_alloc();
          *(void *)(v21 + 16) = v20;
          *(void *)(v21 + 24) = 0;
          *(unsigned char *)(v21 + 32) = 1;
          *(void *)(v0 + 920) = v20;
        }
      }
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      *(void *)(v0 + 1176) = 0;
      swift_task_dealloc();
      type metadata accessor for MainActor();
      *(void *)(v0 + 1184) = static MainActor.shared.getter();
      uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v26 = sub_1001BC338;
      goto LABEL_22;
    }
    sub_1001C09EC(*(void *)(v0 + 1048), type metadata accessor for SubjectLiftAnalysisOutput);
  }
  if (*(unsigned char *)(v0 + 105) != 1)
  {
LABEL_21:
    type metadata accessor for MainActor();
    *(void *)(v0 + 1192) = static MainActor.shared.getter();
    uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v26 = sub_1001BC6E0;
LABEL_22:
    uint64_t v79 = v24;
    uint64_t v80 = v25;
    uint64_t v81 = (uint64_t)v26;
    uint64_t v82 = v79;
    uint64_t v83 = v80;
    return _swift_task_switch(v81, v82, v83);
  }
  uint64_t v9 = *(void **)(v0 + 928);
  uint64_t v10 = v9[3];
  uint64_t v11 = v9[4];
  sub_10000F3B0(v9, v10);
  id v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  uint64_t v14 = v12;
  if (v13)
  {
    sub_1000ACF28(v12, v13);
    sub_10000F214((uint64_t *)&unk_10051D350);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_10043D4F0;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 32) = 0xD000000000000012;
    *(void *)(v15 + 40) = 0x8000000100429230;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v27 = *(void (**)(void *))(v0 + 960);
  uint64_t v28 = *(double **)(v0 + 936);
  *(void *)(v0 + 800) = 0;
  VTCreateCGImageFromCVPixelBuffer((CVPixelBufferRef)v12, 0, (CGImageRef *)(v0 + 800));
  uint64_t v29 = *(void **)(v0 + 800);
  id v30 = v29;
  v27(v29);

  double v32 = v28[2];
  double v31 = v28[3];
  double v33 = v28[4];
  double v34 = v28[5];
  id v35 = [self tracker];
  if (!v35)
  {
    uint64_t v81 = sub_1001C0240(*(void *)(v0 + 936));
    __break(1u);
    return _swift_task_switch(v81, v82, v83);
  }
  uint64_t v36 = v35;
  double v87 = v32 / v33;
  [v35 predictRectForPoint:v14];

  sub_10000F214((uint64_t *)&unk_10051D350);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_10043D4F0;
  _StringGuts.grow(_:)(32);
  *(void *)(v0 + 760) = 0;
  *(void *)(v0 + 768) = 0xE000000000000000;
  v38._object = (void *)0x8000000100429250;
  v38._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v38);
  *(double *)(v0 + 728) = v32;
  *(double *)(v0 + 736) = v31;
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v39 = *(void *)(v0 + 760);
  uint64_t v40 = *(void *)(v0 + 768);
  *(void *)(v37 + 56) = &type metadata for String;
  *(void *)(v37 + 32) = v39;
  *(void *)(v37 + 40) = v40;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_10043D4F0;
  _StringGuts.grow(_:)(18);
  *(void *)(v0 + 776) = 0;
  *(void *)(v0 + 784) = 0xE000000000000000;
  v42._uint64_t countAndFlagsBits = 0xD000000000000010;
  v42._object = (void *)0x8000000100429270;
  String.append(_:)(v42);
  double v43 = v33;
  *(double *)(v0 + 696) = v33;
  double v86 = v34;
  *(double *)(v0 + 704) = v34;
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v44 = *(void *)(v0 + 776);
  uint64_t v45 = *(void *)(v0 + 784);
  *(void *)(v41 + 56) = &type metadata for String;
  *(void *)(v41 + 32) = v44;
  *(void *)(v41 + 40) = v45;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_10043D4F0;
  _StringGuts.grow(_:)(19);
  *(void *)(v0 + 680) = 0;
  *(void *)(v0 + 688) = 0xE000000000000000;
  v47._uint64_t countAndFlagsBits = 0xD000000000000011;
  v47._object = (void *)0x8000000100429290;
  String.append(_:)(v47);
  *(double *)(v0 + 664) = v87;
  *(double *)(v0 + 672) = v31 / v34;
  _print_unlocked<A, B>(_:_:)();
  uint64_t v48 = *(void *)(v0 + 680);
  uint64_t v49 = *(void *)(v0 + 688);
  *(void *)(v46 + 56) = &type metadata for String;
  *(void *)(v46 + 32) = v48;
  *(void *)(v46 + 40) = v49;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_10043D4F0;
  _StringGuts.grow(_:)(30);
  *(void *)(v0 + 712) = 0;
  *(void *)(v0 + 720) = 0xE000000000000000;
  v51._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v51._object = (void *)0x80000001004292B0;
  String.append(_:)(v51);
  *(CGFloat *)(v0 + 592) = v90.origin.x;
  *(CGFloat *)(v0 + 600) = v90.origin.y;
  *(CGFloat *)(v0 + 608) = v90.size.width;
  *(CGFloat *)(v0 + 616) = v90.size.height;
  *(double *)(v0 + 624) = v91;
  type metadata accessor for FTBoxWithConfidence(0);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v52 = *(void *)(v0 + 712);
  uint64_t v53 = *(void *)(v0 + 720);
  *(void *)(v50 + 56) = &type metadata for String;
  *(void *)(v50 + 32) = v52;
  *(void *)(v50 + 40) = v53;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  if (v91 <= 0.1)
  {
    sub_1000ACF28(v14, 0);

    goto LABEL_21;
  }
  uint64_t v89 = *(void *)(v0 + 1096);
  uint64_t v54 = *(void (**)(unint64_t))(v0 + 944);
  uint64_t v55 = *(void *)(v0 + 936);
  CGRectGetMidX(v90);
  double v56 = 1.0 - CGRectGetMidY(v90);
  double MidX = CGRectGetMidX(v90);
  CGRectGetMidY(v90);
  double Height = CGRectGetHeight(v90);
  double Width = CGRectGetWidth(v90);
  CGFloat v60 = v56 - Height * 0.5;
  CGFloat v61 = MidX - Width * 0.5;
  v93.origin.x = v60;
  v93.origin.y = v61;
  v93.size.width = Height;
  v93.size.height = Width;
  double v88 = v43 * CGRectGetMinX(v93);
  v94.origin.x = v60;
  v94.origin.y = v61;
  v94.size.width = Height;
  v94.size.height = Width;
  double v62 = v86 * CGRectGetMinY(v94);
  v95.origin.x = v60;
  v95.origin.y = v61;
  v95.size.width = Height;
  v95.size.height = Width;
  double v63 = v43 * CGRectGetWidth(v95);
  v96.origin.x = v60;
  v96.origin.y = v61;
  v96.size.width = Height;
  v96.size.height = Width;
  double v64 = v86 * CGRectGetHeight(v96);
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_10043D4F0;
  _StringGuts.grow(_:)(32);
  *(void *)(v0 + 744) = 0;
  *(void *)(v0 + 752) = 0xE000000000000000;
  v66._object = (void *)0x80000001004292D0;
  v66._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v66);
  *(double *)(v0 + 632) = v88;
  *(double *)(v0 + 640) = v62;
  *(double *)(v0 + 648) = v63;
  *(double *)(v0 + 656) = v64;
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v67 = *(void *)(v0 + 744);
  uint64_t v68 = *(void *)(v0 + 752);
  *(void *)(v65 + 56) = &type metadata for String;
  *(void *)(v65 + 32) = v67;
  *(void *)(v65 + 40) = v68;
  print(_:separator:terminator:)();
  sub_1001C0240(v55);
  swift_bridgeObjectRelease();
  uint64_t v69 = *(void *)(v55 + 48);
  uint64_t v70 = *(void *)(v55 + 56);
  type metadata accessor for FocusSelectionArea();
  uint64_t v71 = swift_allocObject();
  *(double *)(v71 + 16) = v88;
  *(double *)(v71 + 24) = v62;
  *(double *)(v71 + 32) = v63;
  *(double *)(v71 + 40) = v64;
  *(double *)(v71 + 48) = v43;
  *(double *)(v71 + 56) = v86;
  *(void *)(v71 + 64) = v69;
  *(void *)(v71 + 72) = v70;
  swift_retain();
  v54(v71 | 0x8000000000000000);
  sub_1000ACF28(v14, 0);

  swift_release();
  sub_1001C0240(v55);
  sub_10000FBD8(v89, &qword_100524730);
  sub_1001C0258(v0 + 112);
  *(void *)(v0 + 1216) = 0;
  *(void *)(v0 + 1208) = v71 & 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(v0 + 1200) = v71;
  long long v72 = *(void **)(v0 + 1136);
  uint64_t v73 = *(void *)(v0 + 976);
  uint64_t v74 = *(void *)(v0 + 928);
  swift_retain();
  sub_10000F578(v74, v0 + 216);
  *(void *)(v0 + 208) = v72;
  *(void *)(v0 + 256) = v71 | 0x8000000000000000;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(unsigned char *)(v0 + 296) = 1;
  swift_getKeyPath();
  *(void *)(v0 + 1224) = OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel___observationRegistrar;
  *(void *)(v0 + 864) = v73;
  *(void *)(v0 + 1232) = sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  id v75 = v72;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *(void *)(v0 + 1240) = *(void *)(v73 + 16);
  sub_1001BEF58(v0 + 208, v0 + 400);
  swift_retain();
  char v76 = (void *)swift_task_alloc();
  *(void *)(v0 + 1248) = v76;
  *char v76 = v0;
  v76[1] = sub_1001BCA28;
  uint64_t v77 = *(void *)(v0 + 1080);
  return sub_10030910C(v77, v0 + 400);
}

uint64_t sub_1001BC338()
{
  uint64_t v1 = (void *)v0[142];
  uint64_t v2 = v0[126];
  uint64_t v3 = v0[125];
  uint64_t v4 = v0[124];
  uint64_t v5 = (char *)v0[123];
  uint64_t v6 = v0[122];
  uint64_t v7 = v0[116];
  swift_release();
  sub_10000F578(v7, (uint64_t)(v5 + 8));
  uint64_t v8 = type metadata accessor for SubjectLiftRenderInput(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(&v5[*(int *)(v8 + 24)], v2, v4);
  *(void *)uint64_t v5 = v1;
  uint64_t v9 = &v5[*(int *)(v8 + 28)];
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[32] = 1;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 0, 1, v8);
  swift_getKeyPath();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v6;
  *(void *)(v10 + 24) = v5;
  v0[112] = v6;
  id v11 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000FBD8((uint64_t)v5, &qword_100522468);
  return _swift_task_switch(sub_1001BC528, 0, 0);
}

uint64_t sub_1001BC528()
{
  uint64_t v1 = (void *)v0[142];
  uint64_t v2 = (void *)v0[138];
  uint64_t v3 = v0[137];
  uint64_t v4 = v0[131];
  uint64_t v5 = v0[126];
  uint64_t v6 = v0[125];
  uint64_t v7 = v0[124];
  uint64_t v8 = v0[117];
  sub_1001C0240(v8);

  sub_1001C0240(v8);
  sub_1001C0240(v8);
  sub_1001C09EC(v4, type metadata accessor for SubjectLiftAnalysisOutput);
  sub_10000FBD8(v3, &qword_100524730);
  sub_1001C0258((uint64_t)(v0 + 14));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001BC6E0()
{
  uint64_t v1 = (void *)v0[142];
  uint64_t v2 = (void *)v0[123];
  uint64_t v3 = v0[122];
  uint64_t v4 = v0[116];
  swift_release();
  sub_10000F578(v4, (uint64_t)(v2 + 1));
  uint64_t v5 = type metadata accessor for SubjectLiftRenderInput(0);
  id v6 = v1;
  IndexSet.init()();
  *uint64_t v2 = v6;
  uint64_t v7 = (char *)v2 + *(int *)(v5 + 28);
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 0, 1, v5);
  swift_getKeyPath();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v2;
  v0[99] = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000FBD8((uint64_t)v2, &qword_100522468);
  return _swift_task_switch(sub_1001BC8B4, 0, 0);
}

uint64_t sub_1001BC8B4()
{
  uint64_t v1 = *(void **)(v0 + 1136);
  uint64_t v2 = *(void *)(v0 + 1096);
  uint64_t v3 = *(void *)(v0 + 936);

  sub_1001C0240(v3);
  sub_1001C0240(v3);
  sub_1001C0240(v3);
  sub_10000FBD8(v2, &qword_100524730);
  sub_1001C0258(v0 + 112);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001BCA28()
{
  uint64_t v1 = *v0 + 400;
  swift_task_dealloc();
  swift_release();
  sub_10000FBD8(v1, &qword_100524748);
  return _swift_task_switch(sub_1001BCB88, 0, 0);
}

uint64_t sub_1001BCB88()
{
  uint64_t v1 = *(void *)(v0 + 1072);
  uint64_t v2 = *(void *)(v0 + 1024);
  uint64_t v3 = *(void *)(v0 + 1016);
  sub_10000FB74(*(void *)(v0 + 1080), v1, &qword_100524730);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(void *)(v0 + 1256) = v4;
  *(void *)(v0 + 1264) = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v1, 1, v3) == 1)
  {
    double v5 = *(double *)(v0 + 1216);
    uint64_t v6 = *(CGFloat **)(v0 + 1200);
    uint64_t v7 = *(void **)(v0 + 928);
    sub_10000FBD8(*(void *)(v0 + 1072), &qword_100524730);
    CGFloat v8 = v6[2];
    CGFloat v9 = v6[3];
    CGFloat v10 = v6[4];
    CGFloat v11 = v6[5];
    v53.origin.x = v8;
    v53.origin.y = v9;
    v53.size.width = v10;
    v53.size.height = v11;
    double v12 = CGRectGetMinX(v53) - v5;
    double v13 = 0.0;
    if (v12 > 0.0) {
      double v14 = v12;
    }
    else {
      double v14 = 0.0;
    }
    v54.origin.x = v8;
    v54.origin.y = v9;
    v54.size.width = v10;
    v54.size.height = v11;
    double v15 = v5 + CGRectGetMaxX(v54);
    if (v6[6] >= v15) {
      double v16 = v15;
    }
    else {
      double v16 = v6[6];
    }
    v55.origin.x = v8;
    v55.origin.y = v9;
    v55.size.width = v10;
    v55.size.height = v11;
    double v17 = CGRectGetMinY(v55) - v5;
    if (v17 > 0.0) {
      double v13 = v17;
    }
    v56.origin.x = v8;
    v56.origin.y = v9;
    v56.size.width = v10;
    v56.size.height = v11;
    double v18 = v5 + CGRectGetMaxY(v56);
    if (v6[7] < v18) {
      double v18 = v6[7];
    }
    CGFloat v19 = v16 - v14;
    CGFloat v20 = v18 - v13;
    v57.origin.x = v14;
    v57.origin.y = v13;
    v57.size.width = v16 - v14;
    v57.size.height = v20;
    double MinX = CGRectGetMinX(v57);
    *(double *)(v0 + 1288) = MinX;
    double v21 = v6[9];
    *(double *)(v0 + 1296) = v21;
    double v22 = v6[8];
    *(double *)(v0 + 1304) = v22;
    v58.origin.x = v14;
    v58.origin.y = v13;
    v58.size.width = v19;
    v58.size.height = v20;
    double MinY = CGRectGetMinY(v58);
    *(double *)(v0 + 1312) = MinY;
    v59.origin.x = v14;
    v59.origin.y = v13;
    v59.size.width = v19;
    v59.size.height = v20;
    double Width = CGRectGetWidth(v59);
    *(double *)(v0 + 1320) = Width;
    v60.origin.x = v14;
    v60.origin.y = v13;
    v60.size.width = v19;
    v60.size.height = v20;
    double Height = CGRectGetHeight(v60);
    *(double *)(v0 + 1328) = Height;
    uint64_t v26 = v7[3];
    uint64_t v27 = v7[4];
    sub_10000F3B0(v7, v26);
    CGImageRef v28 = sub_100398EE0(v26, v27);
    if (!v28) {
      goto LABEL_21;
    }
    CGImageRef v29 = v28;
    id v30 = (CGImage *)sub_10041BBA8();

    if (!v30) {
      goto LABEL_21;
    }
    v61.origin.x = MinX * v21 + v22;
    v61.origin.y = v21 * MinY;
    v61.size.width = v21 * Width;
    v61.size.height = v21 * Height;
    CGImageRef v31 = CGImageCreateWithImageInRect(v30, v61);
    *(void *)(v0 + 1336) = v31;

    if (v31)
    {
      uint64_t v32 = *(void *)(v0 + 976);
      id v33 = [objc_allocWithZone((Class)VKCImageAnalyzerRequest) initWithCGImage:v31 orientation:0 requestType:32];
      *(void *)(v0 + 1344) = v33;
      uint64_t v34 = swift_task_alloc();
      *(void *)(v0 + 1352) = v34;
      *(void *)(v34 + 16) = v32;
      *(void *)(v34 + 24) = v33;
      id v35 = (void *)swift_task_alloc();
      *(void *)(v0 + 1360) = v35;
      *id v35 = v0;
      v35[1] = sub_1001BD538;
      uint64_t v36 = *(void *)(v0 + 1128);
      return withCheckedContinuation<A>(isolation:function:_:)(v0 + 856, 0, 0, 0xD00000000000001DLL, 0x8000000100429210, sub_1001C0AB0, v34, v36);
    }
    else
    {
LABEL_21:
      double v43 = *(void **)(v0 + 1136);
      uint64_t v44 = *(void **)(v0 + 1104);
      uint64_t v45 = *(void *)(v0 + 1080);
      uint64_t v46 = *(void *)(v0 + 936);
      swift_release();
      swift_release();

      sub_1001C0240(v46);
      sub_10000FBD8(v45, &qword_100524730);
      sub_1001C0258(v0 + 208);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      Swift::String v47 = *(uint64_t (**)(void))(v0 + 8);
      return v47();
    }
  }
  else
  {
    uint64_t v37 = *(void *)(v0 + 1016);
    sub_1001C02AC(*(void *)(v0 + 1072), *(void *)(v0 + 1040));
    *(_DWORD *)(v0 + 108) = *(_DWORD *)(v37 + 24);
    uint64_t v38 = IndexSet.first.getter();
    if ((v39 & 1) == 0)
    {
      uint64_t v40 = v38;
      if (IndexSet.count.getter() == 1)
      {
        uint64_t v41 = *(void *)(v0 + 976);
        swift_getKeyPath();
        uint64_t v42 = swift_task_alloc();
        *(void *)(v42 + 16) = v41;
        *(void *)(v42 + 24) = v40;
        *(unsigned char *)(v42 + 32) = 0;
        *(void *)(v0 + 816) = v41;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
        swift_task_dealloc();
      }
    }
    *(void *)(v0 + 1272) = 0;
    type metadata accessor for MainActor();
    *(void *)(v0 + 1280) = static MainActor.shared.getter();
    uint64_t v49 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_1001BD1A8, v49, v48);
  }
}

uint64_t sub_1001BD1A8()
{
  uint64_t v1 = *(int *)(v0 + 108);
  uint64_t v2 = *(void ***)(v0 + 1040);
  uint64_t v3 = *(void *)(v0 + 1000);
  uint64_t v4 = *(void *)(v0 + 992);
  double v5 = *(char **)(v0 + 984);
  uint64_t v6 = *(void *)(v0 + 976);
  swift_release();
  uint64_t v7 = (char *)v2 + v1;
  CGFloat v8 = *v2;
  sub_10000F578((uint64_t)(v2 + 1), (uint64_t)(v5 + 8));
  uint64_t v9 = type metadata accessor for SubjectLiftRenderInput(0);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(&v5[*(int *)(v9 + 24)], v7, v4);
  *(void *)double v5 = v8;
  CGFloat v10 = &v5[*(int *)(v9 + 28)];
  *(_OWORD *)CGFloat v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[32] = 1;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 0, 1, v9);
  swift_getKeyPath();
  uint64_t v11 = swift_task_alloc();
  *(void *)(v11 + 16) = v6;
  *(void *)(v11 + 24) = v5;
  *(void *)(v0 + 824) = v6;
  id v12 = v8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000FBD8((uint64_t)v5, &qword_100522468);
  return _swift_task_switch(sub_1001BD39C, 0, 0);
}

uint64_t sub_1001BD39C()
{
  uint64_t v1 = *(void **)(v0 + 1136);
  uint64_t v2 = *(void *)(v0 + 1080);
  uint64_t v3 = *(void *)(v0 + 1040);
  uint64_t v4 = *(void *)(v0 + 936);

  swift_release();
  swift_release();

  sub_1001C0240(v4);
  sub_10000FBD8(v2, &qword_100524730);
  sub_1001C0258(v0 + 208);
  sub_1001C09EC(v3, type metadata accessor for SubjectLiftAnalysisOutput);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001BD538()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001BD67C, 0, 0);
}

uint64_t sub_1001BD67C()
{
  uint64_t v1 = *(void **)(v0 + 856);
  *(void *)(v0 + 1368) = v1;
  if (v1)
  {
    double v2 = *(double *)(v0 + 1296);
    uint64_t v3 = *(void *)(v0 + 976);
    double v4 = *(double *)(v0 + 1328) * v2;
    double v5 = *(double *)(v0 + 1304) + v2 * *(double *)(v0 + 1288);
    float64x2_t v17 = vmulq_n_f64(*(float64x2_t *)(v0 + 1312), v2);
    sub_10000F578(*(void *)(v0 + 928), v0 + 504);
    *(void *)(v0 + 496) = v1;
    *(void *)(v0 + 544) = 0xF000000000000007;
    *(double *)(v0 + 552) = v5;
    *(float64x2_t *)(v0 + 560) = v17;
    *(double *)(v0 + 576) = v4;
    *(unsigned char *)(v0 + 584) = 0;
    swift_getKeyPath();
    *(void *)(v0 + 848) = v3;
    id v6 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    *(void *)(v0 + 1376) = *(void *)(v3 + 16);
    sub_1001BEF58(v0 + 496, v0 + 16);
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 1384) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1001BD974;
    uint64_t v8 = *(void *)(v0 + 1064);
    return sub_10030910C(v8, v0 + 16);
  }
  else
  {
    CGFloat v10 = *(void **)(v0 + 1344);
    uint64_t v11 = *(void **)(v0 + 1336);
    id v12 = *(void **)(v0 + 1136);
    double v13 = *(void **)(v0 + 1104);
    uint64_t v14 = *(void *)(v0 + 1080);
    uint64_t v15 = *(void *)(v0 + 936);
    swift_release();
    swift_release();

    sub_1001C0240(v15);
    sub_10000FBD8(v14, &qword_100524730);
    sub_1001C0258(v0 + 208);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    double v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_1001BD974()
{
  uint64_t v1 = *v0 + 16;
  swift_task_dealloc();
  swift_release();
  sub_10000FBD8(v1, &qword_100524748);
  return _swift_task_switch(sub_1001BDAD4, 0, 0);
}

uint64_t sub_1001BDAD4()
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[157];
  uint64_t v2 = v0[132];
  uint64_t v3 = v0[127];
  sub_10000FB74(v0[133], v2, &qword_100524730);
  int v4 = v1(v2, 1, v3);
  uint64_t v5 = v0[132];
  if (v4 == 1)
  {
    sub_10000FBD8(v5, &qword_100524730);
    type metadata accessor for MainActor();
    v0[175] = static MainActor.shared.getter();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = sub_1001BE04C;
  }
  else
  {
    sub_1001C02AC(v5, v0[129]);
    type metadata accessor for MainActor();
    v0[174] = static MainActor.shared.getter();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = sub_1001BDC38;
  }
  return _swift_task_switch(v8, v6, v7);
}

uint64_t sub_1001BDC38()
{
  double v1 = *(double *)(v0 + 1328);
  double v2 = *(double *)(v0 + 1320);
  double v3 = *(double *)(v0 + 1312);
  double v4 = *(double *)(v0 + 1304);
  double v5 = *(double *)(v0 + 1296);
  double v6 = *(double *)(v0 + 1288);
  uint64_t v7 = *(void ***)(v0 + 1032);
  uint64_t v8 = *(void *)(v0 + 1016);
  uint64_t v9 = *(void *)(v0 + 1000);
  uint64_t v10 = *(void *)(v0 + 992);
  uint64_t v11 = *(char **)(v0 + 984);
  uint64_t v12 = *(void *)(v0 + 976);
  swift_release();
  double v13 = *v7;
  sub_10000F578((uint64_t)(v7 + 1), (uint64_t)(v11 + 8));
  uint64_t v14 = (char *)v7 + *(int *)(v8 + 24);
  uint64_t v15 = type metadata accessor for SubjectLiftRenderInput(0);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v11[*(int *)(v15 + 24)], v14, v10);
  *(void *)uint64_t v11 = v13;
  double v16 = (double *)&v11[*(int *)(v15 + 28)];
  *double v16 = v4 + v5 * v6;
  v16[1] = v3 * v5;
  v16[2] = v2 * v5;
  uint64_t v16[3] = v1 * v5;
  *((unsigned char *)v16 + 32) = 0;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 0, 1, v15);
  swift_getKeyPath();
  uint64_t v17 = swift_task_alloc();
  *(void *)(v17 + 16) = v12;
  *(void *)(v17 + 24) = v11;
  *(void *)(v0 + 832) = v12;
  id v18 = v13;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000FBD8((uint64_t)v11, &qword_100522468);
  return _swift_task_switch(sub_1001BDE70, 0, 0);
}

uint64_t sub_1001BDE70()
{
  double v1 = *(void **)(v0 + 1368);
  double v2 = *(void **)(v0 + 1344);
  double v3 = *(void **)(v0 + 1336);
  double v4 = *(void **)(v0 + 1136);
  uint64_t v5 = *(void *)(v0 + 1080);
  uint64_t v6 = *(void *)(v0 + 1064);
  uint64_t v10 = *(void *)(v0 + 1032);
  uint64_t v7 = *(void *)(v0 + 936);

  swift_release();
  swift_release();

  sub_1001C0240(v7);
  sub_10000FBD8(v6, &qword_100524730);
  sub_1001C0258(v0 + 496);
  sub_10000FBD8(v5, &qword_100524730);
  sub_1001C0258(v0 + 208);
  sub_1001C09EC(v10, type metadata accessor for SubjectLiftAnalysisOutput);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001BE04C()
{
  double v1 = (void *)v0[171];
  double v2 = (void *)v0[123];
  uint64_t v3 = v0[122];
  uint64_t v4 = v0[116];
  swift_release();
  sub_10000F578(v4, (uint64_t)(v2 + 1));
  uint64_t v5 = type metadata accessor for SubjectLiftRenderInput(0);
  id v6 = v1;
  IndexSet.init()();
  *double v2 = v6;
  uint64_t v7 = (char *)v2 + *(int *)(v5 + 28);
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 0, 1, v5);
  swift_getKeyPath();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v2;
  v0[105] = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000FBD8((uint64_t)v2, &qword_100522468);
  return _swift_task_switch(sub_1001BE220, 0, 0);
}

uint64_t sub_1001BE220()
{
  double v1 = *(void **)(v0 + 1368);
  double v2 = *(void **)(v0 + 1344);
  uint64_t v3 = *(void **)(v0 + 1336);
  uint64_t v4 = *(void **)(v0 + 1136);
  uint64_t v5 = *(void *)(v0 + 1080);
  uint64_t v6 = *(void *)(v0 + 1064);
  uint64_t v7 = *(void *)(v0 + 936);

  swift_release();
  swift_release();

  sub_1001C0240(v7);
  sub_10000FBD8(v6, &qword_100524730);
  sub_1001C0258(v0 + 496);
  sub_10000FBD8(v5, &qword_100524730);
  sub_1001C0258(v0 + 208);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001BE3D8()
{
  double v1 = (void *)v0[142];
  double v2 = (void *)v0[123];
  uint64_t v3 = v0[122];
  uint64_t v4 = v0[116];
  swift_release();
  sub_10000F578(v4, (uint64_t)(v2 + 1));
  uint64_t v5 = type metadata accessor for SubjectLiftRenderInput(0);
  id v6 = v1;
  IndexSet.init()();
  *double v2 = v6;
  uint64_t v7 = (char *)v2 + *(int *)(v5 + 28);
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 0, 1, v5);
  swift_getKeyPath();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v2;
  v0[109] = v3;
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000FBD8((uint64_t)v2, &qword_100522468);
  return _swift_task_switch(sub_1001BE5D8, 0, 0);
}

uint64_t sub_1001BE5D8()
{
  double v1 = *(void **)(v0 + 1136);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001BE710(uint64_t a1, uint64_t a2, void *a3)
{
  double v22 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100524750);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E8B0();
  uint64_t v23 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v22;
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, v14, v11);
  aBlock[4] = sub_1001C04CC;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004EF950;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  id v19 = v17;
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1001C0910((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v20 = (void *)v23;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v25);
  return swift_release();
}

void sub_1001BEAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100524750);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  double v9 = __chkstk_darwin(v6);
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel_imageAnalyzer);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6, v9);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1001C05E0;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000F4EF4;
  aBlock[3] = &unk_1004EF9A0;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  [v10 processRequest:a2 progressHandler:0 completionHandler:v13];
  _Block_release(v13);
}

uint64_t sub_1001BEC78(void *a1, uint64_t a2)
{
  if (!a2) {
    id v2 = a1;
  }
  sub_10000F214(&qword_100524750);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1001BECCC()
{
  swift_release();
  sub_10000FBD8(v0 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderInput, &qword_100522468);

  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1001BEDBC()
{
  return type metadata accessor for SubjectLiftViewModel();
}

uint64_t type metadata accessor for SubjectLiftViewModel()
{
  uint64_t result = qword_100524550;
  if (!qword_100524550) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001BEE10()
{
  sub_10016A5AC();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1001BEF0C(uint64_t a1)
{
  return sub_1001BE710(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1001BEF1C()
{
  return sub_1001BA2C4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001BEF38(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1001BEF58(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001BEFB4()
{
  uint64_t v1 = v0;
  type metadata accessor for SubjectLiftAnalysisViewModel(0);
  swift_allocObject();
  *(void *)(v0 + 16) = sub_10030902C();
  uint64_t v2 = v0 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderInput;
  uint64_t v3 = type metadata accessor for SubjectLiftRenderInput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__maskImage) = 0;
  uint64_t v4 = v1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderedSubjectIndex;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__userSelectedSubjectImage) = 0;
  uint64_t v5 = OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel_imageAnalyzer;
  *(void *)(v1 + v5) = [objc_allocWithZone((Class)VKCImageAnalyzer) init];
  ObservationRegistrar.init()();
  return v1;
}

uint64_t sub_1001BF0B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  LODWORD(v118) = a2;
  long long v129 = a3;
  uint64_t v4 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v4 - 8);
  uint64_t v115 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for BlendMode();
  uint64_t v114 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v112 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Image.ResizingMode();
  uint64_t v109 = *(void *)(v7 - 8);
  uint64_t v110 = v7;
  __chkstk_darwin(v7);
  char v108 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000F214(&qword_100524760);
  __chkstk_darwin(v111);
  char v117 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100524768);
  uint64_t v125 = *(void *)(v10 - 8);
  uint64_t v126 = v10;
  __chkstk_darwin(v10);
  uint64_t v113 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100524770);
  __chkstk_darwin(v12 - 8);
  uint64_t v128 = (uint64_t)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v127 = (uint64_t)&v92 - v15;
  uint64_t v132 = type metadata accessor for OpacityTransition();
  uint64_t v136 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_10000F214(&qword_100524778);
  uint64_t v137 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  long long v130 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  long long v131 = (char *)&v92 - v20;
  uint64_t v21 = sub_10000F214(&qword_100522468);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for SubjectLiftRenderView(0);
  uint64_t v25 = (int *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (void *)((char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v122 = sub_10000F214(&qword_100524780);
  __chkstk_darwin(v122);
  uint64_t v121 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000F214(&qword_100524788);
  __chkstk_darwin(v29 - 8);
  uint64_t v135 = (uint64_t)&v92 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v134 = (uint64_t)&v92 - v32;
  swift_getKeyPath();
  uint64_t v33 = a1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel___observationRegistrar;
  *(void *)&long long v155 = a1;
  uint64_t v119 = sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  uint64_t v120 = v33;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v34 = *(void *)(a1 + 16);
  swift_getKeyPath();
  *(void *)&long long v155 = a1;
  uint64_t v124 = v34;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v35 = a1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderInput;
  swift_beginAccess();
  sub_10000FB74(v35, (uint64_t)v23, &qword_100522468);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = a1;
  char v37 = (char)v118;
  int v123 = v118 & 1;
  *(unsigned char *)(v36 + 24) = (_BYTE)v118;
  LOBYTE(v35) = v37;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = a1;
  *(unsigned char *)(v38 + 24) = v35;
  type metadata accessor for SubjectLiftRenderViewModel(0);
  swift_allocObject();
  swift_retain_n();
  uint64_t v169 = sub_1001691B4();
  State.init(wrappedValue:)();
  uint64_t v39 = *((void *)&v155 + 1);
  *uint64_t v27 = v155;
  v27[1] = v39;
  sub_10000FC34((uint64_t)v23, (uint64_t)v27 + v25[7], &qword_100522468);
  uint64_t v40 = (void (**)(void *))((char *)v27 + v25[8]);
  _OWORD *v40 = sub_1001C0828;
  v40[1] = (void (*)(void *))v36;
  uint64_t v41 = (void (**)(void *))((char *)v27 + v25[9]);
  *uint64_t v41 = sub_1001C0834;
  v41[1] = (void (*)(void *))v38;
  OpacityTransition.init()();
  static Animation.linear(duration:)();
  uint64_t v42 = sub_1001C0910(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
  uint64_t v44 = v131;
  uint64_t v43 = v132;
  Transition.animation(_:)();
  swift_release();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v136 + 8);
  uint64_t v118 = v17;
  uint64_t v46 = v43;
  v136 += 8;
  uint64_t v104 = v45;
  v45(v17, v43);
  uint64_t v47 = v137;
  uint64_t v48 = v137 + 16;
  uint64_t v49 = v133;
  uint64_t v107 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
  v107(v130, v44, v133);
  *(void *)&long long v155 = v46;
  *((void *)&v155 + 1) = v42;
  uint64_t v103 = v42;
  uint64_t v50 = v49;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v51 = AnyTransition.init<A>(_:)();
  uint64_t v52 = v121;
  sub_1001C0958((uint64_t)v27, (uint64_t)v121, type metadata accessor for SubjectLiftRenderView);
  *(void *)&v52[*(int *)(v122 + 36)] = v51;
  CGRect v53 = *(void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v137 = v47 + 8;
  char v106 = v53;
  v53(v44, v50);
  sub_1001C09EC((uint64_t)v27, type metadata accessor for SubjectLiftRenderView);
  sub_1001C0840();
  uint64_t v54 = v135;
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8((uint64_t)v52, &qword_100524780);
  sub_10000FC34(v54, v134, &qword_100524788);
  swift_getKeyPath();
  *(void *)&long long v155 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  CGRect v55 = *(void **)(a1 + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__maskImage);
  if (v55)
  {
    id v56 = v55;
    static Alignment.center.getter();
    sub_1002269E0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v155, 0.0, 1, INFINITY, 0);
    char v57 = BYTE8(v155);
    uint64_t v119 = v156;
    uint64_t v120 = v155;
    char v58 = BYTE8(v156);
    char v59 = BYTE8(v157);
    uint64_t v101 = v158;
    uint64_t v102 = v157;
    uint64_t v122 = v48;
    int v92 = BYTE8(v159);
    int v93 = BYTE8(v158);
    uint64_t v99 = v160;
    uint64_t v100 = v159;
    char v60 = BYTE8(v160);
    uint64_t v97 = *((void *)&v161 + 1);
    uint64_t v98 = v161;
    uint64_t v61 = static Alignment.center.getter();
    uint64_t v95 = v62;
    uint64_t v96 = v61;
    uint64_t v121 = (char *)v56;
    Image.init(uiImage:)();
    double v63 = v108;
    uint64_t v64 = v109;
    uint64_t v65 = v110;
    (*(void (**)(char *, void, uint64_t))(v109 + 104))(v108, enum case for Image.ResizingMode.stretch(_:), v110);
    uint64_t v94 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    char v153 = v57;
    char v151 = v58;
    char v149 = v59;
    char v147 = v93;
    char v145 = v92;
    char v143 = v60;
    char v141 = v170;
    char v139 = v172;
    *(_DWORD *)((char *)&v155 + 9) = *(_DWORD *)v152;
    HIDWORD(v155) = *(_DWORD *)&v152[3];
    HIDWORD(v156) = *(_DWORD *)&v150[3];
    *(_DWORD *)((char *)&v156 + 9) = *(_DWORD *)v150;
    HIDWORD(v157) = *(_DWORD *)&v148[3];
    *(_DWORD *)((char *)&v157 + 9) = *(_DWORD *)v148;
    HIDWORD(v158) = *(_DWORD *)&v146[3];
    *(_DWORD *)((char *)&v158 + 9) = *(_DWORD *)v146;
    HIDWORD(v159) = *(_DWORD *)&v144[3];
    *(_DWORD *)((char *)&v159 + 9) = *(_DWORD *)v144;
    HIDWORD(v160) = *(_DWORD *)&v142[3];
    *(_DWORD *)((char *)&v160 + 9) = *(_DWORD *)v142;
    HIDWORD(v164) = *(_DWORD *)&v140[3];
    *(_DWORD *)((char *)&v164 + 9) = *(_DWORD *)v140;
    HIDWORD(v165) = *(_DWORD *)&v138[3];
    *(_DWORD *)((char *)&v165 + 9) = *(_DWORD *)v138;
    *(void *)&long long v155 = v120;
    BYTE8(v155) = v57;
    *(void *)&long long v156 = v119;
    BYTE8(v156) = v58;
    *(void *)&long long v157 = v102;
    BYTE8(v157) = v59;
    *(void *)&long long v158 = v101;
    BYTE8(v158) = v93;
    *(void *)&long long v159 = v100;
    BYTE8(v159) = v92;
    *(void *)&long long v160 = v99;
    BYTE8(v160) = v60;
    *(void *)&long long v161 = v98;
    *((void *)&v161 + 1) = v97;
    *(void *)&long long v162 = 0x4046800000000000;
    *((void *)&v162 + 1) = v96;
    *(void *)&long long v163 = v95;
    *((void *)&v163 + 1) = v94;
    *(void *)&long long v164 = v169;
    BYTE8(v164) = v170;
    *(void *)&long long v165 = v171;
    BYTE8(v165) = v172;
    long long v166 = v173;
    *(void *)&long long v167 = 0x402C000000000000;
    BYTE8(v167) = 0;
    *(_DWORD *)((char *)&v167 + 9) = *(_DWORD *)v154;
    HIDWORD(v167) = *(_DWORD *)&v154[3];
    long long v168 = xmmword_10044B060;
    uint64_t v66 = v114;
    uint64_t v67 = v112;
    uint64_t v68 = v116;
    (*(void (**)(char *, void, uint64_t))(v114 + 104))(v112, enum case for BlendMode.overlay(_:), v116);
    uint64_t v69 = (uint64_t)v115;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v115, v67, v68);
    uint64_t v70 = v117;
    sub_1001C0958(v69, (uint64_t)&v117[*(int *)(v111 + 36)], (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
    long long v71 = v166;
    v70[10] = v165;
    v70[11] = v71;
    long long v72 = v168;
    v70[12] = v167;
    v70[13] = v72;
    long long v73 = v162;
    v70[6] = v161;
    v70[7] = v73;
    long long v74 = v164;
    v70[8] = v163;
    v70[9] = v74;
    long long v75 = v158;
    v70[2] = v157;
    v70[3] = v75;
    long long v76 = v160;
    v70[4] = v159;
    v70[5] = v76;
    long long v77 = v156;
    *uint64_t v70 = v155;
    v70[1] = v77;
    sub_1001C09C0((uint64_t)&v155);
    sub_1001C09EC(v69, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
    swift_release();
    uint64_t v78 = v118;
    OpacityTransition.init()();
    static Animation.linear(duration:)();
    uint64_t v80 = v131;
    uint64_t v79 = v132;
    Transition.animation(_:)();
    swift_release();
    v104(v78, v79);
    uint64_t v81 = v133;
    v107(v130, v80, v133);
    uint64_t v82 = AnyTransition.init<A>(_:)();
    uint64_t v83 = v113;
    sub_10000FB74((uint64_t)v70, v113, &qword_100524760);

    uint64_t v84 = v126;
    *(void *)(v83 + *(int *)(v126 + 36)) = v82;
    v106(v80, v81);
    sub_10000FBD8((uint64_t)v70, &qword_100524760);
    uint64_t v85 = v127;
    sub_10000FC34(v83, v127, &qword_100524768);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v125 + 56))(v85, 0, 1, v84);
  }
  else
  {
    uint64_t v85 = v127;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56))(v127, 1, 1, v126);
  }
  uint64_t v87 = v134;
  uint64_t v86 = v135;
  sub_10000FB74(v134, v135, &qword_100524788);
  uint64_t v88 = v128;
  sub_10000FB74(v85, v128, &qword_100524770);
  uint64_t v89 = v129;
  *long long v129 = v124;
  *((unsigned char *)v89 + 8) = v123;
  uint64_t v90 = sub_10000F214(&qword_1005247A0);
  sub_10000FB74(v86, (uint64_t)v89 + *(int *)(v90 + 48), &qword_100524788);
  sub_10000FB74(v88, (uint64_t)v89 + *(int *)(v90 + 64), &qword_100524770);
  swift_retain_n();
  sub_10000FBD8(v85, &qword_100524770);
  sub_10000FBD8(v87, &qword_100524788);
  swift_release();
  sub_10000FBD8(v88, &qword_100524770);
  sub_10000FBD8(v86, &qword_100524788);
  return swift_release();
}

void sub_1001C0018(void *a1)
{
  id v1 = [a1 CGImage];
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

void sub_1001C0104(void *a1)
{
  swift_getKeyPath();
  sub_1001C0910(&qword_100524740, (void (*)(uint64_t))type metadata accessor for SubjectLiftViewModel);
  id v2 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_1001C01E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(unsigned __int8 *)(v1 + 8);
  *a1 = static Alignment.center.getter();
  a1[1] = v5;
  uint64_t v6 = sub_10000F214(&qword_100524758);
  return sub_1001BF0B0(v3, v4, (uint64_t *)((char *)a1 + *(int *)(v6 + 44)));
}

uint64_t sub_1001C0240(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1001C0258(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001C02AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SubjectLiftAnalysisOutput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001C0318()
{
}

void sub_1001C0330()
{
  char v1 = *(unsigned char *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__renderedSubjectIndex;
  *(void *)uint64_t v2 = *(void *)(v0 + 24);
  *(unsigned char *)(v2 + 8) = v1;
}

uint64_t sub_1001C0350()
{
  *(void *)(*(void *)(v0 + 16) + 16) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_1001C038C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522468);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C03F4()
{
  uint64_t v1 = sub_10000F214(&qword_100524750);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_1001C04CC()
{
  uint64_t v1 = *(void *)(sub_10000F214(&qword_100524750) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_1001BEAB8(v2, v3, v4);
}

uint64_t sub_1001C0534(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001C0544()
{
  return swift_release();
}

uint64_t sub_1001C054C()
{
  uint64_t v1 = sub_10000F214(&qword_100524750);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_1001C05E0(void *a1, uint64_t a2)
{
  sub_10000F214(&qword_100524750);

  return sub_1001BEC78(a1, a2);
}

id sub_1001C0664@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001BA79C(a1, &OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__userSelectedSubjectImage, a2);
}

void sub_1001C0690()
{
}

id sub_1001C06B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001BA79C(a1, &OBJC_IVAR____TtC6Tamale20SubjectLiftViewModel__maskImage, a2);
}

void sub_1001C06DC()
{
}

uint64_t initializeBufferWithCopyOfBuffer for SubjectLiftView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SubjectLiftView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for SubjectLiftView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for SubjectLiftView()
{
  return &type metadata for SubjectLiftView;
}

uint64_t sub_1001C07D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001C07F0()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1001C0828(void *a1)
{
}

void sub_1001C0834(void *a1)
{
}

unint64_t sub_1001C0840()
{
  unint64_t result = qword_100524790;
  if (!qword_100524790)
  {
    sub_10000F69C(&qword_100524780);
    sub_1001C0910(&qword_100524798, (void (*)(uint64_t))type metadata accessor for SubjectLiftRenderView);
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524790);
  }
  return result;
}

uint64_t sub_1001C0910(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001C0958(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001C09C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001C09EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001C0A4C()
{
  return sub_100013AA8(&qword_1005247A8, &qword_1005247B0);
}

uint64_t sub_1001C0A94()
{
  return sub_1001BEF1C();
}

unsigned char *storeEnumTagSinglePayload for StringSimilarityAlgorithm(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C0B80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StringSimilarityAlgorithm()
{
  return &type metadata for StringSimilarityAlgorithm;
}

unint64_t sub_1001C0BBC()
{
  unint64_t result = qword_1005247B8;
  if (!qword_1005247B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005247B8);
  }
  return result;
}

uint64_t sub_1001C0C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a5 + 8) + 8) + 8);
  uint64_t v41 = type metadata accessor for EnumeratedSequence();
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v38 - v8;
  uint64_t v42 = v7;
  uint64_t v9 = type metadata accessor for EnumeratedSequence.Iterator();
  unint64_t v50 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = type metadata accessor for EnumeratedSequence();
  __chkstk_darwin(v12);
  uint64_t v45 = type metadata accessor for EnumeratedSequence.Iterator();
  uint64_t v38 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v46 = (char *)&v38 - v13;
  uint64_t v43 = a1;
  uint64_t v44 = a3;
  uint64_t v14 = dispatch thunk of Collection.count.getter();
  if (__OFADD__(v14, 1)) {
    goto LABEL_39;
  }
  uint64_t v15 = sub_1003A49F8(0, v14 + 1);
  uint64_t v16 = dispatch thunk of Collection.count.getter();
  if (__OFADD__(v16, 1))
  {
LABEL_40:
    __break(1u);
  }
  else
  {
    uint64_t v17 = sub_1003A4AE4((uint64_t)v15, v16 + 1);
    Sequence.enumerated()();
    EnumeratedSequence.makeIterator()();
    uint64_t v47 = v17;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_4;
    }
  }
  uint64_t v47 = sub_1003068C4(v47);
LABEL_4:
  EnumeratedSequence.Iterator.next()();
  uint64_t v18 = v55;
  if (v55)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    unint64_t v22 = v53;
    uint64_t v23 = v54;
    uint64_t v51 = v47 + 4;
    uint64_t v39 = (void (**)(char *, uint64_t))(v50 + 8);
LABEL_7:
    Sequence.enumerated()();
    EnumeratedSequence.makeIterator()();
    unint64_t v48 = v22;
    unint64_t v52 = v22 + 1;
    while (1)
    {
      EnumeratedSequence.Iterator.next()();
      if (!v55)
      {
        (*v39)(v11, v9);
        swift_bridgeObjectRelease();
        EnumeratedSequence.Iterator.next()();
        unint64_t v22 = v53;
        uint64_t v23 = v54;
        uint64_t v18 = v55;
        if (!v55) {
          goto LABEL_31;
        }
        goto LABEL_7;
      }
      unint64_t v24 = v53;
      if (v23 == v54 && v18 == v55) {
        break;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v26)
      {
LABEL_16:
        if ((v48 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        unint64_t v27 = v47[2];
        if (v48 >= v27) {
          goto LABEL_33;
        }
        if ((v24 & 0x8000000000000000) != 0) {
          goto LABEL_34;
        }
        uint64_t v28 = v51[v48];
        if (v24 >= *(void *)(v28 + 16)) {
          goto LABEL_35;
        }
        uint64_t v29 = *(void *)(v28 + 8 * v24 + 32);
        uint64_t v30 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          goto LABEL_36;
        }
        if (v52 >= v27) {
          goto LABEL_37;
        }
        uint64_t v49 = v19;
        unint64_t v50 = v20;
        unint64_t v31 = v21;
        uint64_t v32 = v52;
        uint64_t v33 = v51;
        uint64_t v34 = (void *)v51[v52];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v33[v32] = v34;
        if (isUniquelyReferenced_nonNull_native)
        {
          unint64_t v21 = v31;
          unint64_t v36 = v52;
        }
        else
        {
          uint64_t v34 = sub_1003068B0(v34);
          unint64_t v36 = v52;
          v51[v52] = v34;
          unint64_t v21 = v31;
        }
        unint64_t v20 = v50;
        if (v24 + 1 >= v34[2]) {
          goto LABEL_38;
        }
        v34[v24 + 5] = v30;
        uint64_t v19 = v49;
        if (v49 < v30)
        {
          unint64_t v21 = v24 + 1;
          unint64_t v20 = v36;
        }
        if (v49 <= v30) {
          uint64_t v19 = v30;
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v19 = 0;
LABEL_31:
  (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v45);
  swift_bridgeObjectRelease();
  return v19;
}

char *sub_1001C10D4(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t inited, uint64_t a6, unint64_t a7)
{
  unint64_t v7 = a7;
  uint64_t v8 = a6;
  uint64_t v91 = a6;
  unint64_t v92 = a7;
  uint64_t v14 = sub_100040120(&v90);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v14, a1, v8);
  unint64_t v86 = a2;
  unint64_t v87 = a3;
  uint64_t v88 = a4;
  uint64_t v89 = inited;
  unint64_t v15 = sub_100107968();
  uint64_t v16 = sub_1001C0C10((uint64_t)v14, (uint64_t)&type metadata for Substring, v8, v15, v7);
  if (v16 < 1)
  {
    uint64_t v66 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  int64_t v21 = v16;
  uint64_t v22 = v17;
  uint64_t v23 = v17 - v16;
  if (__OFSUB__(v17, v16))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v81 = v18;
  unint64_t v80 = v7;
  unint64_t v7 = Substring.index(_:offsetBy:)();
  unint64_t v20 = (unint64_t)Substring.index(_:offsetBy:)() >> 14;
  if (v20 < v7 >> 14)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v82[0] = Substring.subscript.getter();
  v82[1] = v24;
  v82[2] = v25;
  uint64_t v83 = v26;
  sub_1001079F4();
  uint64_t v27 = String.init<A>(_:)();
  if (v23 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v7 = v27;
  uint64_t v79 = v28;
  swift_bridgeObjectRetain();
  uint64_t v29 = Substring.index(_:offsetBy:limitedBy:)();
  if (v30) {
    unint64_t v31 = a3;
  }
  else {
    unint64_t v31 = v29;
  }
  unint64_t v20 = v31 >> 14;
  if (v31 >> 14 < a2 >> 14) {
    goto LABEL_23;
  }
  uint64_t v78 = Substring.subscript.getter();
  uint64_t v77 = v32;
  uint64_t v76 = v33;
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v36 = Substring.distance(from:to:)();
  unint64_t v20 = v36 - v22;
  if (__OFSUB__(v36, v22))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v37 = Substring.index(_:offsetBy:limitedBy:)();
  if (v38) {
    unint64_t v37 = a2;
  }
  unint64_t v20 = a3 >> 14;
  if (a3 >> 14 < v37 >> 14) {
    goto LABEL_26;
  }
  uint64_t v72 = v35;
  uint64_t v75 = Substring.subscript.getter();
  uint64_t v74 = v39;
  uint64_t v73 = v40;
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  sub_10000F214((uint64_t *)&unk_10051F628);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100440F30;
  unint64_t v43 = v92;
  uint64_t v44 = sub_10000F3B0(&v90, v91);
  double v45 = __chkstk_darwin(v44);
  (*(void (**)(char *, double))(v47 + 16))((char *)&v68 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0), v45);
  unint64_t v20 = (unint64_t)&v93;
  BOOL v48 = __OFSUB__(v81, v21);
  int64_t v21 = v81 - v21;
  if (v48)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v69 = v42;
  unint64_t v70 = v7;
  long long v71 = v14;
  unint64_t v7 = *(void *)(*(void *)(v43 + 8) + 8);
  uint64_t v49 = v81;
  *(void *)(inited + 56) = swift_getAssociatedTypeWitness();
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness();
  uint64_t v68 = (void *)(inited + 32);
  sub_100040120((uint64_t *)(inited + 32));
  Collection.prefix(_:)();
  unint64_t v50 = sub_10000F3B0(&v90, v91);
  double v51 = __chkstk_darwin(v50);
  (*(void (**)(char *, double))(v53 + 16))((char *)&v68 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0), v51);
  uint64_t v54 = dispatch thunk of Collection.count.getter();
  int64_t v21 = v54 - v49;
  if (__OFSUB__(v54, v49))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = inited + 72;
  *(void *)(inited + 96) = swift_getAssociatedTypeWitness();
  *(void *)(inited + 104) = swift_getAssociatedConformanceWitness();
  sub_100040120((uint64_t *)(inited + 72));
  BidirectionalCollection.suffix(_:)();
  uint64_t v19 = sub_100328860(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v7 = *((void *)v19 + 2);
  unint64_t v20 = *((void *)v19 + 3);
  int64_t v21 = v7 + 1;
  if (v7 >= v20 >> 1) {
LABEL_29:
  }
    uint64_t v19 = sub_100328860((char *)(v20 > 1), v21, 1, v19);
  uint64_t v55 = v72;
  *((void *)v19 + 2) = v21;
  id v56 = &v19[16 * v7];
  uint64_t v57 = v79;
  *((void *)v56 + 4) = v70;
  *((void *)v56 + 5) = v57;
  uint64_t v85 = v19;
  uint64_t v58 = *(void *)(inited + 56);
  uint64_t v59 = *(void *)(inited + 64);
  char v60 = sub_10000F3B0(v68, v58);
  swift_bridgeObjectRetain();
  uint64_t v61 = sub_1001C10D4(v60, v78, v77, v76, v55, v58, v59);
  swift_bridgeObjectRelease();
  sub_10019FAAC(v61);
  swift_bridgeObjectRelease();
  sub_10000F578(v8, (uint64_t)v82);
  swift_bridgeObjectRelease();
  uint64_t v62 = v83;
  uint64_t v63 = v84;
  uint64_t v64 = sub_10000F3B0(v82, v83);
  uint64_t v65 = sub_1001C10D4(v64, v75, v74, v73, v69, v62, v63);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v82);
  swift_bridgeObjectRelease();
  sub_10019FAAC(v65);
  uint64_t v66 = v85;
LABEL_19:
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v90);
  return v66;
}

uint64_t sub_1001C17DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DetectionRequest.Originator(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100524E38);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v24 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v23 == v14) {
      goto LABEL_8;
    }
    unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v16 = *(void *)(v5 + 72) * v14;
    uint64_t result = sub_10020F0D8(v24 + v15 + v16, (uint64_t)v7, type metadata accessor for DetectionRequest.Originator);
    unint64_t v18 = *(void *)(a2 + 16);
    if (v14 == v18)
    {
      sub_1001D430C((uint64_t)v7, type metadata accessor for DetectionRequest.Originator);
LABEL_8:
      swift_bridgeObjectRelease();
      uint64_t v21 = 0;
LABEL_9:
      swift_bridgeObjectRelease();
      return v21;
    }
    if (v14++ >= v18) {
      break;
    }
    uint64_t v19 = a2 + v15 + v16;
    uint64_t v20 = (uint64_t)&v13[*(int *)(v8 + 48)];
    sub_10020F140((uint64_t)v7, (uint64_t)v13, type metadata accessor for DetectionRequest.Originator);
    sub_10020F0D8(v19, v20, type metadata accessor for DetectionRequest.Originator);
    sub_10000FC34((uint64_t)v13, (uint64_t)v10, &qword_100524E38);
    LOBYTE(v19) = sub_10020BB18(v10, &v10[*(int *)(v8 + 48)]);
    sub_10000FBD8((uint64_t)v10, &qword_100524E38);
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v21 = 1;
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C1A68(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v27 = a1;
  uint64_t v6 = type metadata accessor for CVDetection();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v25 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (v16)
  {
    unint64_t v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v20 = v19 | (v18 << 6);
LABEL_19:
    sub_10020F0D8(*(void *)(a3 + 48) + *(void *)(v7 + 72) * v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10020F140((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
    char v24 = v27(v9);
    uint64_t result = sub_1001D430C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
    if (v3) {
      goto LABEL_28;
    }
    if (v24)
    {
      a2 = 1;
LABEL_28:
      swift_release();
      return a2 & 1;
    }
  }
  if (__OFADD__(v18++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v18 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v18);
  if (v22)
  {
LABEL_18:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_19;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v26) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v26)
  {
LABEL_27:
    a2 = 0;
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
LABEL_17:
    int64_t v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v26) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1001C1D38(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v18 = (uint64_t (*)(void *))result;
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    unint64_t v3 = 0;
    uint64_t v4 = (unsigned __int8 *)(a3 + 64);
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v16 = a3;
    while (v3 < *(void *)(a3 + 16))
    {
      uint64_t v7 = *((void *)v4 - 4);
      uint64_t v6 = *((void *)v4 - 3);
      uint64_t v9 = *((void *)v4 - 2);
      uint64_t v8 = *((void *)v4 - 1);
      unsigned __int8 v10 = *v4;
      v20[0] = v7;
      v20[1] = v6;
      v20[2] = v9;
      uint64_t v20[3] = v8;
      unsigned __int8 v21 = v10;
      sub_10004E998(v7, v6, v9, v8, v10);
      char v11 = v18(v20);
      if (v19)
      {
        sub_10004EA10(v7, v6, v9, v8, v10);
        swift_release();
        goto LABEL_16;
      }
      if (v11)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v22 = v5;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100040934(0, v5[2] + 1, 1);
          uint64_t v5 = v22;
        }
        unint64_t v13 = v5[2];
        unint64_t v12 = v5[3];
        unint64_t v14 = v13 + 1;
        if (v13 >= v12 >> 1)
        {
          uint64_t result = sub_100040934(v12 > 1, v13 + 1, 1);
          unint64_t v14 = v13 + 1;
          uint64_t v5 = v22;
        }
        v5[2] = v14;
        uint64_t v15 = &v5[5 * v13];
        v15[4] = v7;
        v15[5] = v6;
        v15[6] = v9;
        v15[7] = v8;
        *((unsigned char *)v15 + 64) = v10;
      }
      else
      {
        uint64_t result = sub_10004EA10(v7, v6, v9, v8, v10);
      }
      ++v3;
      v4 += 40;
      a3 = v16;
      if (v17 == v3) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

void *sub_1001C1F00(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  unint64_t v5 = a3;
  int64_t v18 = _swiftEmptyArrayStorage;
  if (a3 >> 62)
  {
LABEL_18:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      uint64_t v15 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v5 & 0xC000000000000001;
      unint64_t v14 = v5;
      while (1)
      {
        if (v16)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(void *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
          swift_retain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v17 = v10;
        unint64_t v3 = a2;
        char v12 = a1(&v17);
        if (v4) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v5 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v3 = &v18;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          unint64_t v3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  unint64_t v3 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

void sub_1001C20BC(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for CVBundle(0);
  uint64_t v23 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v22 = (uint64_t)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)v19 - v10;
  char v24 = _swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(a3 + 16);
  if (v21)
  {
    unint64_t v12 = 0;
    unint64_t v13 = _swiftEmptyArrayStorage;
    v19[1] = a2;
    uint64_t v20 = a3;
    v19[0] = a1;
    while (v12 < *(void *)(a3 + 16))
    {
      unint64_t v14 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      uint64_t v15 = *(void *)(v23 + 72);
      sub_10020F0D8(a3 + v14 + v15 * v12, (uint64_t)v11, type metadata accessor for CVBundle);
      char v16 = a1(v11);
      if (v3)
      {
        sub_1001D430C((uint64_t)v11, type metadata accessor for CVBundle);
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      if (v16)
      {
        sub_10020F140((uint64_t)v11, v22, type metadata accessor for CVBundle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100040BFC(0, v13[2] + 1, 1);
        }
        unint64_t v13 = v24;
        unint64_t v18 = v24[2];
        unint64_t v17 = v24[3];
        if (v18 >= v17 >> 1)
        {
          sub_100040BFC(v17 > 1, v18 + 1, 1);
          unint64_t v13 = v24;
        }
        v13[2] = v18 + 1;
        sub_10020F140(v22, (uint64_t)v13 + v14 + v18 * v15, type metadata accessor for CVBundle);
        a3 = v20;
        a1 = (uint64_t (*)(char *))v19[0];
      }
      else
      {
        sub_1001D430C((uint64_t)v11, type metadata accessor for CVBundle);
      }
      if (v21 == ++v12) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

void sub_1001C2354(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DetectionRequest(0);
  uint64_t v23 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v22 = (uint64_t)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)v19 - v10;
  char v24 = _swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(a3 + 16);
  if (v21)
  {
    unint64_t v12 = 0;
    unint64_t v13 = _swiftEmptyArrayStorage;
    v19[1] = a2;
    uint64_t v20 = a3;
    v19[0] = a1;
    while (v12 < *(void *)(a3 + 16))
    {
      unint64_t v14 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      uint64_t v15 = *(void *)(v23 + 72);
      sub_10020F0D8(a3 + v14 + v15 * v12, (uint64_t)v11, type metadata accessor for DetectionRequest);
      char v16 = a1(v11);
      if (v3)
      {
        sub_1001D430C((uint64_t)v11, type metadata accessor for DetectionRequest);
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      if (v16)
      {
        sub_10020F140((uint64_t)v11, v22, type metadata accessor for DetectionRequest);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100040DA0(0, v13[2] + 1, 1);
        }
        unint64_t v13 = v24;
        unint64_t v18 = v24[2];
        unint64_t v17 = v24[3];
        if (v18 >= v17 >> 1)
        {
          sub_100040DA0(v17 > 1, v18 + 1, 1);
          unint64_t v13 = v24;
        }
        v13[2] = v18 + 1;
        sub_10020F140(v22, (uint64_t)v13 + v14 + v18 * v15, type metadata accessor for DetectionRequest);
        a3 = v20;
        a1 = (uint64_t (*)(char *))v19[0];
      }
      else
      {
        sub_1001D430C((uint64_t)v11, type metadata accessor for DetectionRequest);
      }
      if (v21 == ++v12) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001C25EC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _OWORD *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = a4;
  uint64_t v43 = a3;
  double v45 = a2;
  uint64_t v47 = sub_10000F214(&qword_100525278);
  uint64_t v38 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v44 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v42 = (uint64_t)&v38 - v7;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v40 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v46 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  uint64_t v14 = v47;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v48 = (v11 - 1) & v11;
  int64_t v50 = v13;
  for (unint64_t i = __clz(__rbit64(v11)) | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v18 << 6))
  {
    uint64_t v20 = v46;
    uint64_t v21 = *(void *)(v46 + 48);
    uint64_t v22 = type metadata accessor for CVDetection();
    uint64_t v23 = v42;
    sub_10020F0D8(v21 + *(void *)(*(void *)(v22 - 8) + 72) * i, v42, (uint64_t (*)(void))type metadata accessor for CVDetection);
    char v24 = (uint64_t *)(*(void *)(v20 + 56) + 48 * i);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v27 = v24[3];
    char v30 = (void *)v24[4];
    uint64_t v29 = (void *)v24[5];
    unint64_t v31 = (uint64_t *)(v23 + *(int *)(v14 + 48));
    *unint64_t v31 = v26;
    v31[1] = v25;
    void v31[2] = v28;
    v31[3] = v27;
    v31[4] = (uint64_t)v30;
    v31[5] = (uint64_t)v29;
    uint64_t v32 = v44;
    sub_10000FC34(v23, v44, &qword_100525278);
    uint64_t v33 = (_OWORD *)(v32 + *(int *)(v14 + 48));
    long long v34 = v33[1];
    v49[0] = *v33;
    v49[1] = v34;
    v49[2] = v33[2];
    sub_10020F1A8(v26, v25, v28, v27, v30);
    id v35 = v29;
    if (v45(v32, v49))
    {
      swift_release();
      uint64_t v36 = v32;
      uint64_t v37 = v39;
      sub_10000FC34(v36, v39, &qword_100525278);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v37, 0, 1, v47);
    }
    uint64_t result = sub_10000FBD8(v32, &qword_100525278);
    int64_t v13 = v50;
    unint64_t v11 = v48;
    if (v48) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v41) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v40 + 8 * v16);
    int64_t v18 = v13 + 1;
    if (!v17)
    {
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v41) {
        goto LABEL_25;
      }
      unint64_t v17 = *(void *)(v40 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v13 + 3;
        if (v13 + 3 >= v41) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v40 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v13 + 4;
          if (v13 + 4 >= v41) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(v40 + 8 * v18);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v48 = (v17 - 1) & v17;
    int64_t v50 = v18;
  }
  uint64_t v19 = v13 + 5;
  if (v13 + 5 >= v41)
  {
LABEL_25:
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v39, 1, 1, v47);
  }
  unint64_t v17 = *(void *)(v40 + 8 * v19);
  if (v17)
  {
    int64_t v18 = v13 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v41) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v40 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1001C2994(double a1)
{
  if (a1 == 0.0) {
    return 0;
  }
  uint64_t result = 1;
  if (a1 != 3.14159265 && a1 != -3.14159265)
  {
    uint64_t result = 3;
    if (a1 != 1.57079633 && a1 != -1.57079633)
    {
      if (a1 == -4.71238898 || a1 == 4.71238898) {
        return 2;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1001C2A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FB74(a1, (uint64_t)v9, &qword_10051A8C0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10000FBD8((uint64_t)v9, &qword_10051A8C0);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  sub_10000F214(&qword_10051CA60);
  int64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    int64_t v16 = v19;
    void v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

unint64_t sub_1001C2BF4(uint64_t a1, void *a2, char a3)
{
  if (!a3)
  {
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000012;
    if (a2) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = 0;
    }
    if (a2) {
      unint64_t v8 = (unint64_t)a2;
    }
    else {
      unint64_t v8 = 0xE000000000000000;
    }
    unint64_t v9 = v8;
    String.append(_:)(*(Swift::String *)&v7);
    goto LABEL_14;
  }
  if (a3 == 1)
  {
    unint64_t v11 = 0x6C75736572206F4ELL;
    if (a2)
    {
      uint64_t v5 = a2;
    }
    else
    {
      a1 = 0;
      uint64_t v5 = (void *)0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = a1;
    v6._object = v5;
    String.append(_:)(v6);
LABEL_14:
    swift_bridgeObjectRelease();
    return v11;
  }
  unint64_t result = 0x6F6E20656D617246;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0x656C74746F726854;
      break;
    case 3:
      unint64_t result = 0x6F6E206B63617254;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001C2DAC()
{
  return sub_1001C2BF4(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void sub_1001C2DBC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v4 - 8);
  Swift::String v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DetectionRequest.Originator(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v20 - v12;
  sub_10020F0D8(v2, (uint64_t)&v20 - v12, type metadata accessor for DetectionRequest.Originator);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1001C785C(a1, *(void *)v13, *((void *)v13 + 1), v13[16]);
      break;
    case 2u:
      sub_10020F140((uint64_t)v13, (uint64_t)v6, type metadata accessor for CVTrackSnapshot);
      type metadata accessor for UUID();
      sub_1001E227C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      sub_1001D430C((uint64_t)v6, type metadata accessor for CVTrackSnapshot);
      break;
    case 3u:
      unint64_t v16 = *(void *)v13;
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        uint64_t v18 = v16 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
        uint64_t v19 = *(void *)(v8 + 72);
        swift_bridgeObjectRetain();
        do
        {
          sub_10020F0D8(v18, (uint64_t)v10, type metadata accessor for DetectionRequest.Originator);
          sub_1001C2DBC(a1);
          sub_1001D430C((uint64_t)v10, type metadata accessor for DetectionRequest.Originator);
          v18 += v19;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      break;
    case 4u:
      Hasher._combine(_:)(1uLL);
      break;
    default:
      uint64_t v14 = *(void *)v13;
      unint64_t v15 = *((void *)v13 + 1);
      Data.hash(into:)();
      sub_100038B34(v14, v15);
      break;
  }
}

uint64_t sub_1001C30A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DetectionRequest.Originator(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v16 - v7);
  sub_10020F0D8(v1, (uint64_t)&v16 - v7, type metadata accessor for DetectionRequest.Originator);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1001D430C((uint64_t)v8, type metadata accessor for DetectionRequest.Originator);
    return 1;
  }
  uint64_t v10 = *v8;
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = v10 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v13 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v14 = sub_10020F0D8(v12, (uint64_t)v5, type metadata accessor for DetectionRequest.Originator);
      char v15 = sub_1001C30A8(v14);
      sub_1001D430C((uint64_t)v5, type metadata accessor for DetectionRequest.Originator);
      if (v15) {
        break;
      }
      v12 += v13;
      if (!--v11)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
    return 1;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001C3278(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_100524FE8);
  uint64_t v51 = *(void *)(v2 - 8);
  uint64_t v52 = v2;
  __chkstk_darwin(v2);
  int64_t v50 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_100524FF0);
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  __chkstk_darwin(v4);
  uint64_t v53 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100524FF8);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  __chkstk_darwin(v6);
  uint64_t v47 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v45);
  uint64_t v46 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100525000);
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100525008);
  uint64_t v42 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DetectionRequest.Originator(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_100525010);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v56 = v18;
  uint64_t v57 = v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10020FEE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10020F0D8(v61, (uint64_t)v17, type metadata accessor for DetectionRequest.Originator);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v26 = *(void *)v17;
      unint64_t v27 = *((void *)v17 + 1);
      char v28 = v17[16];
      LOBYTE(v58) = 1;
      sub_1002100C8();
      uint64_t v29 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v58 = v26;
      unint64_t v59 = v27;
      char v60 = v28;
      sub_1002101C4();
      uint64_t v30 = v44;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v30);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v21, v29);
      break;
    case 2u:
      uint64_t v31 = v46;
      sub_10020F140((uint64_t)v17, v46, type metadata accessor for CVTrackSnapshot);
      LOBYTE(v58) = 2;
      sub_100210074();
      uint64_t v32 = v47;
      uint64_t v33 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1001E227C(&qword_100524260, (void (*)(uint64_t))type metadata accessor for CVTrackSnapshot);
      uint64_t v34 = v49;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v34);
      sub_1001D430C(v31, type metadata accessor for CVTrackSnapshot);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v21, v33);
      break;
    case 3u:
      uint64_t v35 = *(void *)v17;
      LOBYTE(v58) = 3;
      sub_10020FF8C();
      uint64_t v36 = v53;
      uint64_t v37 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v58 = v35;
      sub_10000F214(&qword_100524FA0);
      sub_10020FFE0(&qword_100525018, (unint64_t *)&unk_100525020);
      uint64_t v38 = v55;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v38);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v21, v37);
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 4u:
      LOBYTE(v58) = 4;
      sub_10020FF38();
      uint64_t v39 = v50;
      uint64_t v40 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v52);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v21, v40);
      break;
    default:
      uint64_t v23 = *(void *)v17;
      unint64_t v22 = *((void *)v17 + 1);
      LOBYTE(v58) = 0;
      sub_100210170();
      uint64_t v24 = v56;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v58 = v23;
      unint64_t v59 = v22;
      sub_1000A7684();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v12);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v21, v24);
      uint64_t result = sub_100038B34(v23, v22);
      break;
  }
  return result;
}

uint64_t sub_1001C3AA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v3 = sub_10000F214(&qword_100524F50);
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v69 = v3;
  __chkstk_darwin(v3);
  uint64_t v74 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000F214(&qword_100524F58);
  uint64_t v72 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v79 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000F214(&qword_100524F60);
  uint64_t v71 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v77 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000F214(&qword_100524F68);
  uint64_t v65 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v76 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_100524F70);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v73 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000F214(&qword_100524F78);
  uint64_t v75 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DetectionRequest.Originator(0);
  __chkstk_darwin(v81);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v58 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v58 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v58 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v58 - v23;
  uint64_t v25 = a1[3];
  uint64_t v83 = a1;
  sub_10000F3B0(a1, v25);
  sub_10020FEE4();
  uint64_t v78 = v10;
  uint64_t v26 = (uint64_t)v86;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v26)
  {
    unint64_t v59 = v21;
    char v60 = v18;
    uint64_t v62 = v15;
    uint64_t v61 = v12;
    unint64_t v27 = v76;
    char v28 = v77;
    uint64_t v30 = v79;
    uint64_t v29 = v80;
    unint64_t v86 = v24;
    uint64_t v31 = v78;
    uint64_t v32 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v32 + 16) == 1)
    {
      uint64_t v33 = v31;
      uint64_t v34 = v82;
      uint64_t v58 = v32;
      switch(*(unsigned char *)(v32 + 32))
      {
        case 1:
          LOBYTE(v84) = 1;
          sub_1002100C8();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_10021011C();
          uint64_t v47 = v66;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v65 + 8))(v27, v47);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v75 + 8))(v33, v34);
          char v48 = v85;
          uint64_t v46 = v60;
          *char v60 = v84;
          *((unsigned char *)v46 + 16) = v48;
          goto LABEL_11;
        case 2:
          LOBYTE(v84) = 2;
          sub_100210074();
          uint64_t v41 = v34;
          uint64_t v42 = v33;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          type metadata accessor for CVTrackSnapshot(0);
          sub_1001E227C(&qword_100524FC0, (void (*)(uint64_t))type metadata accessor for CVTrackSnapshot);
          uint64_t v49 = v67;
          int64_t v50 = v28;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v51 = v75;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v50, v49);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v41);
          uint64_t v46 = v62;
          goto LABEL_11;
        case 3:
          LOBYTE(v84) = 3;
          sub_10020FF8C();
          uint64_t v43 = v30;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_10000F214(&qword_100524FA0);
          sub_10020FFE0(&qword_100524FA8, &qword_100524FB0);
          uint64_t v52 = v70;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v53 = v75;
          (*(void (**)(char *, uint64_t))(v72 + 8))(v43, v52);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v34);
          uint64_t v55 = v61;
          *uint64_t v61 = v84;
          swift_storeEnumTagMultiPayload();
          uint64_t v56 = (uint64_t)v55;
          uint64_t v57 = (uint64_t)v86;
          sub_10020F140(v56, (uint64_t)v86, type metadata accessor for DetectionRequest.Originator);
          uint64_t v29 = v80;
          goto LABEL_12;
        case 4:
          LOBYTE(v84) = 4;
          sub_10020FF38();
          uint64_t v44 = v74;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v68 + 8))(v44, v69);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v75 + 8))(v33, v34);
          uint64_t v57 = (uint64_t)v86;
          swift_storeEnumTagMultiPayload();
          goto LABEL_12;
        default:
          LOBYTE(v84) = 0;
          sub_100210170();
          uint64_t v35 = v73;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_1000A7534();
          uint64_t v45 = v64;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v63 + 8))(v35, v45);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v75 + 8))(v33, v34);
          uint64_t v46 = v59;
          *unint64_t v59 = v84;
LABEL_11:
          swift_storeEnumTagMultiPayload();
          uint64_t v54 = (uint64_t)v46;
          uint64_t v57 = (uint64_t)v86;
          sub_10020F140(v54, (uint64_t)v86, type metadata accessor for DetectionRequest.Originator);
LABEL_12:
          sub_10020F140(v57, v29, type metadata accessor for DetectionRequest.Originator);
          break;
      }
    }
    else
    {
      uint64_t v36 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v38 = v37;
      sub_10000F214(&qword_10051E3E0);
      uint64_t v39 = v82;
      *uint64_t v38 = v81;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, enum case for DecodingError.typeMismatch(_:), v36);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v31, v39);
    }
  }
  return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v83);
}

unint64_t sub_1001C4690()
{
  unint64_t result = 0xD00000000000001BLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656D69676572;
      break;
    case 2:
      unint64_t result = 0x6B63617274;
      break;
    case 3:
      unint64_t result = 0x73756F69726176;
      break;
    case 4:
      unint64_t result = 0x6E696D6165727473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001C473C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10020D080(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C4764(uint64_t a1)
{
  unint64_t v2 = sub_10020FEE4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C47A0(uint64_t a1)
{
  unint64_t v2 = sub_10020FEE4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C47E0(uint64_t a1)
{
  unint64_t v2 = sub_1002100C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C481C(uint64_t a1)
{
  unint64_t v2 = sub_1002100C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C4858(uint64_t a1)
{
  unint64_t v2 = sub_10020FF38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C4894(uint64_t a1)
{
  unint64_t v2 = sub_10020FF38();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C48D0(uint64_t a1)
{
  unint64_t v2 = sub_100210074();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C490C(uint64_t a1)
{
  unint64_t v2 = sub_100210074();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C4948(uint64_t a1)
{
  unint64_t v2 = sub_10020FF8C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C4984(uint64_t a1)
{
  unint64_t v2 = sub_10020FF8C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C49C0(uint64_t a1)
{
  unint64_t v2 = sub_100210170();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C49FC(uint64_t a1)
{
  unint64_t v2 = sub_100210170();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1001C4A38()
{
  Hasher.init(_seed:)();
  sub_1001C2DBC((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001C4A7C()
{
  Hasher.init(_seed:)();
  sub_1001C2DBC((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1001C4AB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C3AA8(a1, a2);
}

uint64_t sub_1001C4AD0(void *a1)
{
  return sub_1001C3278(a1);
}

uint64_t sub_1001C4AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DetectionRequest.Originator(0);
  uint64_t v75 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v76 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v73 = (char *)&v65 - v7;
  uint64_t v8 = type metadata accessor for CVDetection();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v65 - v13;
  uint64_t v15 = type metadata accessor for DetectionRequest(0);
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v65 - v17;
  v23.n128_f64[0] = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v65 - v21;
  int64_t v25 = *(void *)(a1 + 16);
  if (v25)
  {
    uint64_t v26 = a2;
    uint64_t v27 = v4;
    uint64_t v28 = v26;
    unint64_t v29 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    uint64_t v71 = a1;
    unint64_t v68 = v29;
    uint64_t v69 = v22;
    uint64_t v30 = a1 + v29;
    uint64_t v74 = v20;
    sub_10020F0D8(v30, (uint64_t)&v65 - v21, type metadata accessor for DetectionRequest);
    if (v25 == 1)
    {
      sub_10020F140((uint64_t)v24, v28, type metadata accessor for DetectionRequest);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v28, 0, 1, v15);
    }
    else
    {
      uint64_t v72 = v24;
      uint64_t v70 = v11;
      uint64_t v65 = v27;
      uint64_t v66 = (int *)v15;
      uint64_t v67 = v28;
      uint64_t v78 = _swiftEmptyArrayStorage;
      sub_100040D64(0, v25, 0);
      uint64_t v77 = *(void *)(v74 + 72);
      uint64_t v33 = (uint64_t)v78;
      uint64_t v34 = v30;
      int64_t v35 = v25;
      do
      {
        sub_10020F0D8(v34, (uint64_t)v18, type metadata accessor for DetectionRequest);
        sub_10020F0D8((uint64_t)v18, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1001D430C((uint64_t)v18, type metadata accessor for DetectionRequest);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040D64(0, *(void *)(v33 + 16) + 1, 1);
          uint64_t v33 = (uint64_t)v78;
        }
        unint64_t v37 = *(void *)(v33 + 16);
        unint64_t v36 = *(void *)(v33 + 24);
        if (v37 >= v36 >> 1)
        {
          sub_100040D64(v36 > 1, v37 + 1, 1);
          uint64_t v33 = (uint64_t)v78;
        }
        *(void *)(v33 + 16) = v37 + 1;
        sub_10020F140((uint64_t)v14, v33+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v37, (uint64_t (*)(void))type metadata accessor for CVDetection);
        v34 += v77;
        --v35;
      }
      while (v35);
      uint64_t v38 = sub_10033178C(v33);
      swift_release();
      uint64_t v39 = *(void *)(v38 + 16);
      swift_bridgeObjectRelease();
      if (v39 == 1)
      {
        uint64_t v78 = _swiftEmptyArrayStorage;
        sub_100040974(0, v25, 0);
        uint64_t v40 = v78;
        uint64_t v41 = v30;
        int64_t v42 = v25;
        uint64_t v43 = v66;
        uint64_t v44 = v73;
        do
        {
          sub_10020F0D8(v41, (uint64_t)v18, type metadata accessor for DetectionRequest);
          uint64_t v45 = *(void *)&v18[v43[7]];
          sub_1001D430C((uint64_t)v18, type metadata accessor for DetectionRequest);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100040974(0, v40[2] + 1, 1);
            uint64_t v40 = v78;
          }
          unint64_t v47 = v40[2];
          unint64_t v46 = v40[3];
          if (v47 >= v46 >> 1)
          {
            sub_100040974(v46 > 1, v47 + 1, 1);
            uint64_t v40 = v78;
          }
          void v40[2] = v47 + 1;
          v40[v47 + 4] = v45;
          uint64_t v48 = v77;
          v41 += v77;
          --v42;
        }
        while (v42);
        uint64_t v78 = v40;
        swift_retain();
        sub_1001EA618((uint64_t *)&v78);
        swift_release();
        uint64_t v49 = v78[2];
        if (v49) {
          uint64_t v50 = v78[v49 + 3];
        }
        else {
          uint64_t v50 = 0;
        }
        swift_release();
        uint64_t v51 = (CGFloat *)&v72[v43[6]];
        CGFloat x = *v51;
        CGFloat y = v51[1];
        CGFloat width = v51[2];
        CGFloat height = v51[3];
        uint64_t v56 = swift_bridgeObjectRetain() + v48 + v68;
        uint64_t v57 = 1;
        do
        {
          ++v57;
          sub_10020F0D8(v56, (uint64_t)v18, type metadata accessor for DetectionRequest);
          v80.origin.CGFloat x = x;
          v80.origin.CGFloat y = y;
          v80.size.CGFloat width = width;
          v80.size.CGFloat height = height;
          CGRect v81 = CGRectUnion(v80, *(CGRect *)&v18[v43[6]]);
          CGFloat x = v81.origin.x;
          CGFloat y = v81.origin.y;
          CGFloat width = v81.size.width;
          CGFloat height = v81.size.height;
          sub_1001D430C((uint64_t)v18, type metadata accessor for DetectionRequest);
          v56 += v48;
        }
        while (v25 != v57);
        swift_bridgeObjectRelease();
        sub_10020F0D8((uint64_t)v72, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v78 = _swiftEmptyArrayStorage;
        sub_100040D28(0, v25, 0);
        uint64_t v58 = v78;
        uint64_t v59 = v76;
        do
        {
          sub_10020F0D8(v30, (uint64_t)v18, type metadata accessor for DetectionRequest);
          sub_10020F0D8((uint64_t)&v18[v43[5]], v59, type metadata accessor for DetectionRequest.Originator);
          sub_1001D430C((uint64_t)v18, type metadata accessor for DetectionRequest);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100040D28(0, v58[2] + 1, 1);
            uint64_t v58 = v78;
          }
          unint64_t v61 = v58[2];
          unint64_t v60 = v58[3];
          if (v61 >= v60 >> 1)
          {
            sub_100040D28(v60 > 1, v61 + 1, 1);
            uint64_t v58 = v78;
          }
          v58[2] = v61 + 1;
          uint64_t v59 = v76;
          sub_10020F140(v76, (uint64_t)v58+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(void *)(v75 + 72) * v61, type metadata accessor for DetectionRequest.Originator);
          v30 += v48;
          --v25;
        }
        while (v25);
        *uint64_t v44 = v58;
        swift_storeEnumTagMultiPayload();
        uint64_t v62 = v69;
        sub_10020F140((uint64_t)v72, v69, type metadata accessor for DetectionRequest);
        if (!v49) {
          uint64_t v50 = *(void *)(v62 + v43[7]);
        }
        sub_1001D430C(v62, type metadata accessor for DetectionRequest);
        uint64_t v63 = v67;
        sub_10020F140((uint64_t)v70, v67, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_10020F140((uint64_t)v44, v63 + v43[5], type metadata accessor for DetectionRequest.Originator);
        uint64_t v64 = (CGFloat *)(v63 + v43[6]);
        *uint64_t v64 = x;
        v64[1] = y;
        v64[2] = width;
        v64[3] = height;
        *(void *)(v63 + v43[7]) = v50;
        return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(v74 + 56))(v63, 0, 1, v43);
      }
      else
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        uint64_t result = swift_release();
        __break(1u);
      }
    }
  }
  else
  {
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56);
    return v32(a2, 1, 1, v15, v23);
  }
  return result;
}

uint64_t sub_1001C5404(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_100525070);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_100210228();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for CVDetection();
  sub_1001E227C(&qword_10051A050, (void (*)(uint64_t))type metadata accessor for CVDetection);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for DetectionRequest(0);
    LOBYTE(v14) = 1;
    type metadata accessor for DetectionRequest.Originator(0);
    sub_1001E227C((unint64_t *)&unk_100525020, (void (*)(uint64_t))type metadata accessor for DetectionRequest.Originator);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = (long long *)(v3 + *(int *)(v9 + 24));
    long long v11 = v10[1];
    long long v14 = *v10;
    long long v15 = v11;
    v13[15] = 2;
    type metadata accessor for CGRect(0);
    sub_1001E227C(&qword_100525078, type metadata accessor for CGRect);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1001C56B4()
{
  Hasher.init(_seed:)();
  sub_1003FFF94((uint64_t)v4);
  uint64_t v1 = type metadata accessor for DetectionRequest(0);
  sub_1001C2DBC((uint64_t)v4);
  sub_10020B90C(*(double *)(v0 + *(int *)(v1 + 24)), *(double *)(v0 + *(int *)(v1 + 24) + 8), *(double *)(v0 + *(int *)(v1 + 24) + 16), *(double *)(v0 + *(int *)(v1 + 24) + 24));
  if ((*(void *)(v0 + *(int *)(v1 + 28)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + *(int *)(v1 + 28));
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001C574C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for DetectionRequest.Originator(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CVDetection();
  __chkstk_darwin(v6);
  uint64_t v26 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_100525058);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for DetectionRequest(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  unint64_t v29 = a1;
  sub_10000F3B0(a1, v13);
  sub_100210228();
  uint64_t v28 = v9;
  uint64_t v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v29);
  }
  uint64_t v30 = v3;
  uint64_t v15 = (uint64_t)v5;
  uint64_t v16 = (uint64_t)v12;
  LOBYTE(v32) = 0;
  sub_1001E227C(&qword_10051A030, (void (*)(uint64_t))type metadata accessor for CVDetection);
  uint64_t v17 = (uint64_t)v26;
  uint64_t v18 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10020F140(v17, v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
  LOBYTE(v32) = 1;
  sub_1001E227C(&qword_100524FB0, (void (*)(uint64_t))type metadata accessor for DetectionRequest.Originator);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10020F140(v15, v16 + v10[5], type metadata accessor for DetectionRequest.Originator);
  type metadata accessor for CGRect(0);
  char v31 = 2;
  sub_1001E227C(&qword_100525068, type metadata accessor for CGRect);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = (_OWORD *)(v16 + v10[6]);
  long long v20 = v33;
  *uint64_t v19 = v32;
  v19[1] = v20;
  LOBYTE(v32) = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v18);
  *(void *)(v16 + v10[7]) = v23;
  sub_10020F0D8(v16, v24, type metadata accessor for DetectionRequest);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v29);
  return sub_1001D430C(v16, type metadata accessor for DetectionRequest);
}

uint64_t sub_1001C5C40(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_100524F30);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_10020FDFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  type metadata accessor for DetectionRequest(0);
  sub_1001E227C(&qword_100524F38, (void (*)(uint64_t))type metadata accessor for DetectionRequest);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + *(int *)(type metadata accessor for DetectionResult(0) + 20));
    v10[15] = 1;
    sub_10000F214(&qword_100524F18);
    sub_10020FE50((unint64_t *)&unk_100524F40, &qword_10051A050);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001C5E50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v4 = type metadata accessor for DetectionRequest(0);
  __chkstk_darwin(v4);
  uint64_t v20 = (uint64_t)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100524F00);
  uint64_t v18 = *(void *)(v6 - 8);
  uint64_t v19 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DetectionResult(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10020FDFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = v18;
  char v23 = 0;
  sub_1001E227C(&qword_100524F10, (void (*)(uint64_t))type metadata accessor for DetectionRequest);
  uint64_t v14 = v19;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10020F140(v20, v12, type metadata accessor for DetectionRequest);
  sub_10000F214(&qword_100524F18);
  char v22 = 1;
  sub_10020FE50((unint64_t *)&unk_100524F20, &qword_10051A030);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v14);
  *(void *)(v12 + *(int *)(v9 + 20)) = v21;
  sub_10020F0D8(v12, v17, type metadata accessor for DetectionResult);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return sub_1001D430C(v12, type metadata accessor for DetectionResult);
}

void sub_1001C61B0()
{
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(*(void *)(v0 + 8));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 16));
  sub_10020F6E0((int *)(v0 + 20), (uint64_t)&v6);
  sub_10020F6E0(&v6, (uint64_t)&v7);
  Swift::UInt32 v1 = v7;
  if (v8 == 1)
  {
    if (v7) {
      Swift::UInt v2 = 2;
    }
    else {
      Swift::UInt v2 = 0;
    }
    Hasher._combine(_:)(v2);
    uint64_t v3 = *(void **)(v0 + 32);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    uint64_t v3 = *(void **)(v0 + 32);
    if (!v3)
    {
LABEL_10:
      Swift::UInt v4 = 0;
      goto LABEL_11;
    }
  }
  if (v3 != (void *)1)
  {
    Hasher._combine(_:)(2uLL);
    type metadata accessor for CGColor(0);
    sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
    id v5 = v3;
    _CFObject.hash(into:)();
    sub_10020F6F8(v0);
    return;
  }
  Swift::UInt v4 = 1;
LABEL_11:
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1001C62EC()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(*(void *)(v0 + 8));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 16));
  sub_10020F6E0((int *)(v0 + 20), (uint64_t)&v7);
  sub_10020F6E0(&v7, (uint64_t)&v8);
  Swift::UInt32 v1 = v8;
  if (v9 == 1)
  {
    if (v8) {
      Swift::UInt v2 = 2;
    }
    else {
      Swift::UInt v2 = 0;
    }
    Hasher._combine(_:)(v2);
    uint64_t v3 = *(void **)(v0 + 32);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    uint64_t v3 = *(void **)(v0 + 32);
    if (!v3)
    {
LABEL_10:
      Swift::UInt v4 = 0;
      goto LABEL_11;
    }
  }
  if (v3 == (void *)1)
  {
    Swift::UInt v4 = 1;
LABEL_11:
    Hasher._combine(_:)(v4);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(2uLL);
  type metadata accessor for CGColor(0);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  id v5 = v3;
  _CFObject.hash(into:)();
  sub_10020F6F8(v0);
  return Hasher._finalize()();
}

unint64_t sub_1001C644C()
{
  unint64_t result = 0x6F69746365746564;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x74616E696769726FLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001C64F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10020D298(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C651C(uint64_t a1)
{
  unint64_t v2 = sub_100210228();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C6558(uint64_t a1)
{
  unint64_t v2 = sub_100210228();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1001C6594(uint64_t a1, uint64_t a2, int *a3)
{
  if ((sub_1003FD840(a1, a2) & 1) == 0 || (sub_10020BB18(a1 + a3[5], a2 + a3[5]) & 1) == 0) {
    return 0;
  }
  BOOL result = CGRectEqualToRect(*(CGRect *)(a1 + a3[6]), *(CGRect *)(a2 + a3[6]));
  if (result) {
    return *(double *)(a1 + a3[7]) == *(double *)(a2 + a3[7]);
  }
  return result;
}

void sub_1001C6624(uint64_t a1, uint64_t a2)
{
  sub_1003FFF94(a1);
  sub_1001C2DBC(a1);
  sub_10020B90C(*(double *)(v2 + *(int *)(a2 + 24)), *(double *)(v2 + *(int *)(a2 + 24) + 8), *(double *)(v2 + *(int *)(a2 + 24) + 16), *(double *)(v2 + *(int *)(a2 + 24) + 24));
  if ((*(void *)(v2 + *(int *)(a2 + 28)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v2 + *(int *)(a2 + 28));
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int sub_1001C6698(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  sub_1003FFF94((uint64_t)v6);
  sub_1001C2DBC((uint64_t)v6);
  sub_10020B90C(*(double *)(v2 + *(int *)(a2 + 24)), *(double *)(v2 + *(int *)(a2 + 24) + 8), *(double *)(v2 + *(int *)(a2 + 24) + 16), *(double *)(v2 + *(int *)(a2 + 24) + 24));
  if ((*(void *)(v2 + *(int *)(a2 + 28)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v2 + *(int *)(a2 + 28));
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001C6724@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C574C(a1, a2);
}

uint64_t sub_1001C673C(void *a1)
{
  return sub_1001C5404(a1);
}

uint64_t sub_1001C6754()
{
  if (*v0) {
    return 0x73746C75736572;
  }
  else {
    return 0x74736575716572;
  }
}

uint64_t sub_1001C6788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10020D488(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C67B0(uint64_t a1)
{
  unint64_t v2 = sub_10020FDFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C67EC(uint64_t a1)
{
  unint64_t v2 = sub_10020FDFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C6828@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C5E50(a1, a2);
}

uint64_t sub_1001C6840(void *a1)
{
  return sub_1001C5C40(a1);
}

uint64_t sub_1001C6858(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 4);
  unsigned int v3 = (*(_DWORD *)a1 == *(_DWORD *)a2) & ~v2;
  if (*(_DWORD *)a2) {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 4);
  }
  else {
    unsigned int v4 = 0;
  }
  if (*(_DWORD *)a2) {
    unsigned int v2 = 0;
  }
  if (*(_DWORD *)a1) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v2;
  }
  if (*(unsigned char *)(a1 + 4) == 1) {
    return v5;
  }
  else {
    return v3;
  }
}

Swift::Int sub_1001C6894()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    if (v1) {
      Swift::UInt v3 = 2;
    }
    else {
      Swift::UInt v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_1001C6910()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  if (*(unsigned char *)(v0 + 4) == 1)
  {
    if (v1) {
      Swift::UInt v2 = 2;
    }
    else {
      Swift::UInt v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_1001C696C()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    if (v1) {
      Swift::UInt v3 = 2;
    }
    else {
      Swift::UInt v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

BOOL sub_1001C69E4(void **a1, void **a2)
{
  int v2 = *a1;
  Swift::UInt v3 = *a2;
  if (!*a1) {
    return !v3;
  }
  if (v2 == (void *)1) {
    return v3 == (void *)1;
  }
  if ((unint64_t)v3 < 2) {
    return 0;
  }
  type metadata accessor for CGColor(0);
  sub_10020F1BC(v2);
  sub_10020F1BC(v3);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  char v5 = static _CFObject.== infix(_:_:)();
  sub_10020F488(v3);
  sub_10020F488(v2);
  return v5 & 1;
}

Swift::Int sub_1001C6AC0()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != (void *)1)
    {
      Hasher._combine(_:)(2uLL);
      type metadata accessor for CGColor(0);
      sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
      id v3 = v1;
      _CFObject.hash(into:)();
      sub_10020F488(v1);
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 1;
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001C6B98()
{
  Swift::UInt32 v1 = *v0;
  if (!*v0)
  {
    Swift::UInt v2 = 0;
    goto LABEL_5;
  }
  if (v1 == (void *)1)
  {
    Swift::UInt v2 = 1;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  Hasher._combine(_:)(2uLL);
  type metadata accessor for CGColor(0);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  id v3 = v1;
  _CFObject.hash(into:)();

  sub_10020F488(v1);
}

Swift::Int sub_1001C6C74()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != (void *)1)
    {
      Hasher._combine(_:)(2uLL);
      type metadata accessor for CGColor(0);
      sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
      id v3 = v1;
      _CFObject.hash(into:)();
      sub_10020F488(v1);
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 1;
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_1001C6D48()
{
  return sub_1001C62EC();
}

void sub_1001C6D84()
{
}

Swift::Int sub_1001C6DC0()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 16);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 20);
  int v5 = *(unsigned __int8 *)(v0 + 24);
  int v6 = *(void **)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v4);
  if (v5 == 1)
  {
    if (v3) {
      Swift::UInt v7 = 2;
    }
    else {
      Swift::UInt v7 = 0;
    }
    Hasher._combine(_:)(v7);
    if (!v6) {
      goto LABEL_10;
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v3);
    if (!v6)
    {
LABEL_10:
      Swift::UInt v8 = 0;
      goto LABEL_11;
    }
  }
  if (v6 == (void *)1)
  {
    Swift::UInt v8 = 1;
LABEL_11:
    Hasher._combine(_:)(v8);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(2uLL);
  type metadata accessor for CGColor(0);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  id v9 = v6;
  _CFObject.hash(into:)();
  sub_10020F488(v6);
  return Hasher._finalize()();
}

uint64_t sub_1001C6F10(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    int v4 = *(_DWORD *)(a1 + 20);
    int v5 = *(void **)(a1 + 32);
    int v6 = *(_DWORD *)(a2 + 20);
    Swift::UInt v7 = *(void **)(a2 + 32);
    if (*(unsigned char *)(a1 + 24) == 1)
    {
      if (v4)
      {
        if (v6) {
          int v8 = *(unsigned __int8 *)(a2 + 24);
        }
        else {
          int v8 = 0;
        }
        if (v8 != 1) {
          return 0;
        }
      }
      else
      {
        if (v6) {
          char v10 = 0;
        }
        else {
          char v10 = *(unsigned char *)(a2 + 24);
        }
        if ((v10 & 1) == 0) {
          return 0;
        }
      }
    }
    else
    {
      if (v4 == v6) {
        char v9 = *(unsigned char *)(a2 + 24);
      }
      else {
        char v9 = 1;
      }
      if (v9) {
        return 0;
      }
    }
    if (v5)
    {
      if (v5 == (void *)1)
      {
        if (v7 != (void *)1) {
          return 0;
        }
      }
      else
      {
        if ((unint64_t)v7 < 2) {
          return 0;
        }
        type metadata accessor for CGColor(0);
        sub_10020F1BC(v5);
        sub_10020F1BC(v7);
        sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
        char v11 = static _CFObject.== infix(_:_:)();
        sub_10020F488(v7);
        sub_10020F488(v5);
        if ((v11 & 1) == 0) {
          return 0;
        }
      }
    }
    else if (v7)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

Swift::Int sub_1001C706C()
{
  sub_1000321A8(v0, (uint64_t)v5);
  Swift::UInt v1 = v6;
  Hasher.init(_seed:)();
  sub_1000321A8(v0, (uint64_t)v7);
  if (v8 != 2)
  {
    long long v9 = v7[0];
    long long v10 = v7[1];
    uint64_t v11 = v8;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(*((Swift::UInt *)&v9 + 1));
    Hasher._combine(_:)(v10);
    sub_10020F6E0((int *)&v10 + 1, (uint64_t)&v12);
    sub_10020F6E0(&v12, (uint64_t)&v15);
    Swift::UInt32 v2 = v15;
    if (v16 == 1)
    {
      if (v15) {
        Swift::UInt v3 = 2;
      }
      else {
        Swift::UInt v3 = 0;
      }
      Hasher._combine(_:)(v3);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v2);
    }
    sub_100210218(&v11, &v13);
    sub_100210218(&v13, &v14);
    if (v14 == 1)
    {
      Hasher._combine(_:)(1uLL);
      return Hasher._finalize()();
    }
    if (v14)
    {
      Hasher._combine(_:)(2uLL);
      sub_10020F1BC(v1);
      type metadata accessor for CGColor(0);
      sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
      _CFObject.hash(into:)();
      sub_100210C2C(v0, (void (*)(void, void, void, void, void))sub_10020F474);
      return Hasher._finalize()();
    }
  }
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL sub_1001C7250(uint64_t *a1, void *a2)
{
  Swift::UInt32 v2 = (void *)a1[4];
  Swift::UInt v3 = (void *)a2[4];
  if (v2 != (void *)2)
  {
    if (v3 == (void *)2) {
      return 0;
    }
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[2];
    uint64_t v8 = a2[2];
    BOOL v9 = *a1 == *a2 && v5 == a2[1];
    if (!v9 || v7 != v8) {
      return 0;
    }
    uint64_t v12 = a1[3];
    uint64_t v13 = a2[3];
    if (v12)
    {
      if (HIDWORD(v7))
      {
        if ((v13 & 1) == 0 || !HIDWORD(v8)) {
          return 0;
        }
      }
      else if ((v13 & 1) == 0 || HIDWORD(v8))
      {
        return 0;
      }
    }
    else if ((v13 & 1) != 0 || HIDWORD(v7) != HIDWORD(v8))
    {
      return 0;
    }
    if (v2)
    {
      if (v2 == (void *)1)
      {
        if (v3 == (void *)1)
        {
          uint64_t v4 = 1;
          sub_10020F1A8(*a1, v5, v7, v12, (void *)1);
          sub_10020F1A8(v6, v5, v8, v13, (void *)1);
          return v4;
        }
      }
      else if ((unint64_t)v3 >= 2)
      {
        type metadata accessor for CGColor(0);
        sub_10020F1A8(v6, v5, v7, v12, v2);
        sub_10020F1A8(v6, v5, v8, v13, v3);
        sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
        char v14 = static _CFObject.== infix(_:_:)();
        sub_10020F474(v6, v5, v8, v13, v3);
        sub_10020F474(v6, v5, v7, v12, v2);
        if (v14) {
          return 1;
        }
      }
    }
    else if (!v3)
    {
      sub_10020F1A8(*a1, v5, v7, v12, 0);
      sub_10020F1A8(v6, v5, v8, v13, 0);
      return 1;
    }
    return 0;
  }
  return v3 == (void *)2;
}

Swift::Int sub_1001C7468()
{
  sub_1000321A8(v0, (uint64_t)v2);
  return sub_1001C706C();
}

void sub_1001C74A0()
{
  Swift::UInt v1 = (void *)v0[4];
  if (v1 == (void *)2) {
    goto LABEL_13;
  }
  Swift::UInt v2 = *v0;
  Swift::UInt v3 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if ((v5 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(HIDWORD(v4));
    if (v1) {
      goto LABEL_4;
    }
LABEL_13:
    Swift::UInt v6 = 0;
    goto LABEL_14;
  }
  if (HIDWORD(v4)) {
    Swift::UInt v7 = 2;
  }
  else {
    Swift::UInt v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if (!v1) {
    goto LABEL_13;
  }
LABEL_4:
  if (v1 == (void *)1)
  {
    Swift::UInt v6 = 1;
LABEL_14:
    Hasher._combine(_:)(v6);
    return;
  }
  Hasher._combine(_:)(2uLL);
  sub_10020F1BC(v1);
  type metadata accessor for CGColor(0);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  _CFObject.hash(into:)();

  sub_10020F474(v2, v3, v4, v5, v1);
}

Swift::Int sub_1001C75FC()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = (void *)v0[4];
  Hasher.init(_seed:)();
  if (v5 == (void *)2) {
    goto LABEL_11;
  }
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if ((v4 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(HIDWORD(v3));
    if (v5) {
      goto LABEL_4;
    }
LABEL_11:
    Swift::UInt v6 = 0;
    goto LABEL_12;
  }
  if (HIDWORD(v3)) {
    Swift::UInt v7 = 2;
  }
  else {
    Swift::UInt v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if (!v5) {
    goto LABEL_11;
  }
LABEL_4:
  if (v5 == (void *)1)
  {
    Swift::UInt v6 = 1;
LABEL_12:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(2uLL);
  sub_10020F1BC(v5);
  type metadata accessor for CGColor(0);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  _CFObject.hash(into:)();
  sub_10020F474(v1, v2, v3, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1001C7768()
{
  Swift::UInt v1 = (void *)v0[4];
  if (v1 == (void *)2) {
    return 0x667562206C6C7546;
  }
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v6 = *v0;
  uint64_t v5 = v0[1];
  sub_10020F1BC(v1);
  v7._uint64_t countAndFlagsBits = 0x203A616E69746552;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  sub_10020F474(v6, v5, v4, v3, v1);
  return 0;
}

void sub_1001C785C(uint64_t a1, unint64_t a2, Swift::UInt64 a3, unsigned __int8 a4)
{
  switch(a4 >> 5)
  {
    case 1:
      Swift::UInt v11 = 1;
      goto LABEL_26;
    case 2:
      unint64_t v12 = HIDWORD(a2);
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(a2 & 1);
      if ((v12 & 0x7FFFFF) == 0 && (a2 & 0x7F80000000000000) == 0) {
        Swift::UInt32 v14 = 0;
      }
      else {
        Swift::UInt32 v14 = v12;
      }
      Hasher._combine(_:)(v14);
      if ((a3 & 0x7FFFFF) == 0 && (a3 & 0x7F800000) == 0) {
        Swift::UInt32 v16 = 0;
      }
      else {
        Swift::UInt32 v16 = a3;
      }
      goto LABEL_32;
    case 3:
      Swift::UInt v11 = 4;
LABEL_26:
      Hasher._combine(_:)(v11);
      if ((a2 & 0x7FFFFF) == 0 && (a2 & 0x7F800000) == 0) {
        Swift::UInt32 v16 = 0;
      }
      else {
        Swift::UInt32 v16 = a2;
      }
LABEL_32:
      Hasher._combine(_:)(v16);
      return;
    case 4:
      Swift::UInt v10 = 3;
      goto LABEL_34;
    default:
      Hasher._combine(_:)(0);
      if ((a2 & 0x7FFFFF) == 0 && (a2 & 0x7F800000) == 0) {
        Swift::UInt32 v8 = 0;
      }
      else {
        Swift::UInt32 v8 = a2;
      }
      Hasher._combine(_:)(v8);
      if ((a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v9 = a3;
      }
      else {
        Swift::UInt64 v9 = 0;
      }
      Hasher._combine(_:)(v9);
      Swift::UInt v10 = a4 & 1;
LABEL_34:
      Hasher._combine(_:)(v10);
      return;
  }
}

uint64_t sub_1001C7970(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v44 = a4;
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  uint64_t v37 = sub_10000F214(&qword_100525400);
  uint64_t v29 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  int64_t v35 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100525408);
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  long long v32 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100525410);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  unint64_t v36 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100525418);
  uint64_t v31 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_100525420);
  uint64_t v30 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::UInt32 v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_100525428);
  uint64_t v42 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1002121B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v44 >> 5)
  {
    case 1:
      LOBYTE(v45) = 1;
      sub_100212354();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v16);
    case 2:
      LOBYTE(v45) = 2;
      sub_1002122AC();
      char v22 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v45) = v41 & 1;
      char v48 = 0;
      sub_1002123FC();
      uint64_t v23 = v39;
      uint64_t v24 = v43;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (!v24)
      {
        LOBYTE(v45) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
        LOBYTE(v45) = 2;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v23);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v16);
    case 3:
      LOBYTE(v45) = 4;
      sub_100212204();
      uint64_t v25 = v35;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v13 = v37;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v20 = *(void (**)(char *, uint64_t))(v29 + 8);
      uint64_t v21 = v25;
      goto LABEL_8;
    case 4:
      LOBYTE(v45) = 3;
      sub_100212258();
      uint64_t v27 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v16);
    default:
      char v19 = v44 & 1;
      LOBYTE(v45) = 0;
      sub_1002123A8();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      int v45 = v41;
      uint64_t v46 = v40;
      char v47 = v19;
      sub_1000A7630();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v20 = *(void (**)(char *, uint64_t))(v30 + 8);
      uint64_t v21 = v15;
LABEL_8:
      v20(v21, v13);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v16);
  }
}

uint64_t sub_1001C7FF0()
{
  return 0x636E657571657266;
}

uint64_t sub_1001C8014(uint64_t a1)
{
  unint64_t v2 = sub_100212354();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C8050(uint64_t a1)
{
  unint64_t v2 = sub_100212354();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1001C808C()
{
  unint64_t result = 0x45676E696461656CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x65636E65646163;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
    case 4:
      unint64_t result = 0x646E616D65446E6FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001C8140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10020D57C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C8168(uint64_t a1)
{
  unint64_t v2 = sub_1002121B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C81A4(uint64_t a1)
{
  unint64_t v2 = sub_1002121B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C81E0()
{
  return 0x6C6F687365726874;
}

uint64_t sub_1001C81FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001C82A0(uint64_t a1)
{
  unint64_t v2 = sub_1002123A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C82DC(uint64_t a1)
{
  unint64_t v2 = sub_1002123A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C8318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x636E657571657266 && a2 == 0xEB000000007A4879)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001C83C8(uint64_t a1)
{
  unint64_t v2 = sub_100212204();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C8404(uint64_t a1)
{
  unint64_t v2 = sub_100212204();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C8440(uint64_t a1)
{
  unint64_t v2 = sub_100212258();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C847C(uint64_t a1)
{
  unint64_t v2 = sub_100212258();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C84B8()
{
  unint64_t v1 = 0xD000000000000013;
  if (*v0 != 1) {
    unint64_t v1 = 0x636E657571657266;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7954657461647075;
  }
}

uint64_t sub_1001C8524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10020D7C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C854C(uint64_t a1)
{
  unint64_t v2 = sub_1002122AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C8588(uint64_t a1)
{
  unint64_t v2 = sub_1002122AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C85C4(uint64_t a1, uint64_t a2)
{
  return sub_10020C0B0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

Swift::Int sub_1001C85E0()
{
  unint64_t v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_1001C785C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_1001C863C(uint64_t a1)
{
  sub_1001C785C(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_1001C8648()
{
  unint64_t v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_1001C785C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

unint64_t sub_1001C86A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10020D93C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001C86D0(void *a1)
{
  return sub_1001C7970(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

unint64_t sub_1001C86F0(int a1, unsigned __int8 a2)
{
  LODWORD(v108) = a1;
  unsigned int v2 = a2;
  uint64_t v3 = type metadata accessor for CVDetection();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v99 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v99 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v99 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v99 - v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v99 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v99 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v99 - v25;
  if (v2 > 1) {
    goto LABEL_6;
  }
  if (qword_100518000 != -1) {
    swift_once();
  }
  if (byte_10055E435 != 1 || (v108 & 1) != 0)
  {
    if (qword_100517FB0 != -1) {
      swift_once();
    }
    uint64_t v99 = v5;
    uint64_t v28 = type metadata accessor for UUID();
    uint64_t v29 = sub_10000F378(v28, (uint64_t)qword_100529170);
    uint64_t v30 = *(void *)(v28 - 8);
    uint64_t v105 = *(void (**)(char *))(v30 + 16);
    uint64_t v106 = v29;
    uint64_t v104 = v30 + 16;
    v105(v26);
    if (qword_100517FB8 != -1) {
      swift_once();
    }
    uint64_t v107 = xmmword_100529188;
    uint64_t v31 = qword_100529198;
    uint64_t v103 = *((void *)&xmmword_100529188 + 1);
    uint64_t v32 = qword_1005291A0;
    long long v34 = xmmword_1005291A8;
    uint64_t v33 = qword_1005291B8;
    uint64_t v35 = qword_1005291C0;
    if (qword_100517FC0 != -1) {
      swift_once();
    }
    uint64_t v102 = v14;
    uint64_t v36 = qword_1005291C8;
    if (qword_100517FC8 != -1) {
      swift_once();
    }
    uint64_t v37 = qword_1005291D0;
    uint64_t v38 = (int *)type metadata accessor for ObjectDetectorResult(0);
    *(_DWORD *)&v26[v38[5]] = -1082130432;
    uint64_t v39 = &v26[v38[6]];
    uint64_t v40 = v103;
    *(void *)uint64_t v39 = v107;
    *((void *)v39 + 1) = v40;
    *((void *)v39 + 2) = v31;
    *((void *)v39 + 3) = v32;
    *((_OWORD *)v39 + 2) = v34;
    *((void *)v39 + 6) = v33;
    *((void *)v39 + 7) = v35;
    uint64_t v41 = &v26[v38[7]];
    *(void *)uint64_t v41 = 0x7974706D65;
    *((void *)v41 + 1) = 0xE500000000000000;
    *(void *)&v26[v38[8]] = v36;
    *(void *)&v26[v38[9]] = v37;
    swift_storeEnumTagMultiPayload();
    sub_10020F0D8((uint64_t)v26, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CVDetection);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v43 = 0x40000000;
    uint64_t v107 = v28;
    uint64_t v100 = (uint64_t)v11;
    uint64_t v103 = v3;
    switch(EnumCaseMultiPayload)
    {
      case 1:
      case 3:
      case 4:
      case 5:
        uint64_t v98 = (uint64_t)v23;
LABEL_30:
        sub_1001D430C(v98, (uint64_t (*)(void))type metadata accessor for CVDetection);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1001C9260);
      case 2:
        uint64_t v43 = 1056964608;
        break;
      default:
        break;
    }
    unint64_t v101 = v43;
    sub_1001D430C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1001D430C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10000F214(&qword_100525288);
    int v44 = (int *)(sub_10000F214((uint64_t *)&unk_100525290) - 8);
    uint64_t v45 = *(void *)(*(void *)v44 + 72);
    unint64_t v46 = (*(unsigned __int8 *)(*(void *)v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v44 + 80);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_100440F30;
    unint64_t v48 = v47 + v46;
    unint64_t v49 = v47 + v46 + v44[14];
    ((void (*)(unint64_t, uint64_t, uint64_t))v105)(v48, v106, v107);
    uint64_t v50 = qword_1005291C8;
    uint64_t v51 = qword_1005291D0;
    *(_DWORD *)(v48 + v38[5]) = -1082130432;
    uint64_t v52 = (_OWORD *)(v48 + v38[6]);
    long long v53 = *(_OWORD *)&qword_100529198;
    *uint64_t v52 = xmmword_100529188;
    v52[1] = v53;
    long long v54 = *(_OWORD *)&qword_1005291B8;
    v52[2] = xmmword_1005291A8;
    v52[3] = v54;
    uint64_t v55 = (void *)(v48 + v38[7]);
    *uint64_t v55 = 0x7974706D65;
    v55[1] = 0xE500000000000000;
    *(void *)(v48 + v38[8]) = v50;
    *(void *)(v48 + v38[9]) = v51;
    swift_storeEnumTagMultiPayload();
    *(void *)unint64_t v49 = v101;
    *(void *)(v49 + 8) = 0;
    *(unsigned char *)(v49 + 16) = 32;
    uint64_t v56 = v48 + v45;
    uint64_t v57 = v56 + v44[14];
    sub_1003E6684(v56);
    swift_storeEnumTagMultiPayload();
    *(void *)uint64_t v57 = 0;
    *(void *)(v57 + 8) = 0;
    *(unsigned char *)(v57 + 16) = 0x80;
    unint64_t v101 = sub_10031B5B4(v47);
    if (v108)
    {
      uint64_t v58 = v106;
      uint64_t v59 = v107;
      unint64_t v60 = (void (*)(char *, uint64_t, uint64_t))v105;
      ((void (*)(char *, uint64_t, uint64_t))v105)(v20, v106, v107);
      long long v61 = xmmword_100529188;
      uint64_t v108 = xmmword_100529188;
      uint64_t v62 = qword_100529198;
      uint64_t v63 = qword_1005291A0;
      long long v64 = xmmword_1005291A8;
      uint64_t v65 = qword_1005291C0;
      uint64_t v100 = qword_1005291B8;
      uint64_t v66 = qword_1005291D0;
      uint64_t v67 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)&v20[v67[5]] = -1082130432;
      unint64_t v68 = &v20[v67[6]];
      *(_OWORD *)unint64_t v68 = v61;
      *((void *)v68 + 2) = v62;
      *((void *)v68 + 3) = v63;
      *((_OWORD *)v68 + 2) = v64;
      uint64_t v69 = v100;
      *((void *)v68 + 6) = v100;
      *((void *)v68 + 7) = v65;
      uint64_t v70 = &v20[v67[7]];
      *(void *)uint64_t v70 = 0x7974706D65;
      *((void *)v70 + 1) = 0xE500000000000000;
      *(void *)&v20[v67[8]] = 0;
      *(void *)&v20[v67[9]] = v66;
      *(void *)&v20[v67[10]] = &_swiftEmptySetSingleton;
      *(void *)&v20[v67[11]] = _swiftEmptyArrayStorage;
      v20[v67[14]] = 0;
      *(void *)&v20[v67[12]] = _swiftEmptyArrayStorage;
      *(void *)&v20[v67[13]] = 0;
      swift_storeEnumTagMultiPayload();
      v60(v17, v58, v59);
      *(_DWORD *)&v17[v67[5]] = -1082130432;
      uint64_t v71 = &v17[v67[6]];
      *(void *)uint64_t v71 = v108;
      *((void *)v71 + 1) = *((void *)&v61 + 1);
      *((void *)v71 + 2) = v62;
      *((void *)v71 + 3) = v63;
      *((_OWORD *)v71 + 2) = v64;
      *((void *)v71 + 6) = v69;
      *((void *)v71 + 7) = v65;
      uint64_t v72 = &v17[v67[7]];
      *(void *)uint64_t v72 = 0x7974706D65;
      *((void *)v72 + 1) = 0xE500000000000000;
      *(void *)&v17[v67[8]] = 0;
      *(void *)&v17[v67[9]] = v66;
      *(void *)&v17[v67[10]] = &_swiftEmptySetSingleton;
      *(void *)&v17[v67[11]] = _swiftEmptyArrayStorage;
      v17[v67[14]] = 0;
      *(void *)&v17[v67[12]] = _swiftEmptyArrayStorage;
      *(void *)&v17[v67[13]] = 0;
      swift_storeEnumTagMultiPayload();
      sub_10020F0D8((uint64_t)v17, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v73 = 0x40000000;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 3u:
        case 4u:
        case 5u:
          uint64_t v98 = (uint64_t)v102;
          goto LABEL_30;
        case 2u:
          uint64_t v73 = 1056964608;
          goto LABEL_22;
        default:
LABEL_22:
          sub_1001D430C((uint64_t)v102, (uint64_t (*)(void))type metadata accessor for CVDetection);
          sub_1001D430C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
          unint64_t v74 = v101;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v109 = v74;
          sub_1002F4BC4(v73, 0, 32, (uint64_t)v20, isUniquelyReferenced_nonNull_native);
          unint64_t v76 = v109;
          swift_bridgeObjectRelease();
          uint64_t v77 = (uint64_t)v20;
          break;
      }
    }
    else
    {
      uint64_t v78 = v100;
      uint64_t v79 = v106;
      uint64_t v80 = v107;
      CGRect v81 = (void (*)(char *, uint64_t, uint64_t))v105;
      ((void (*)(uint64_t, uint64_t, uint64_t))v105)(v100, v106, v107);
      long long v82 = xmmword_100529188;
      uint64_t v108 = xmmword_100529188;
      uint64_t v83 = qword_100529198;
      uint64_t v84 = qword_1005291A0;
      long long v85 = xmmword_1005291A8;
      uint64_t v86 = qword_1005291C0;
      uint64_t v102 = (char *)qword_1005291B8;
      uint64_t v87 = qword_1005291D0;
      uint64_t v88 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(v78 + v88[5]) = -1082130432;
      uint64_t v89 = v78 + v88[6];
      *(_OWORD *)uint64_t v89 = v82;
      *(void *)(v89 + 16) = v83;
      *(void *)(v89 + 24) = v84;
      *(_OWORD *)(v89 + 32) = v85;
      uint64_t v90 = (uint64_t)v102;
      *(void *)(v89 + 48) = v102;
      *(void *)(v89 + 56) = v86;
      uint64_t v91 = (void *)(v78 + v88[7]);
      *uint64_t v91 = 0x7974706D65;
      v91[1] = 0xE500000000000000;
      *(void *)(v78 + v88[8]) = 0;
      *(void *)(v78 + v88[9]) = v87;
      *(void *)(v78 + v88[10]) = &_swiftEmptySetSingleton;
      *(void *)(v78 + v88[11]) = _swiftEmptyArrayStorage;
      *(unsigned char *)(v78 + v88[14]) = 0;
      *(void *)(v78 + v88[12]) = _swiftEmptyArrayStorage;
      *(void *)(v78 + v88[13]) = 0;
      swift_storeEnumTagMultiPayload();
      v81(v8, v79, v80);
      *(_DWORD *)&v8[v88[5]] = -1082130432;
      unint64_t v92 = &v8[v88[6]];
      *(void *)unint64_t v92 = v108;
      *((void *)v92 + 1) = *((void *)&v82 + 1);
      *((void *)v92 + 2) = v83;
      *((void *)v92 + 3) = v84;
      *((_OWORD *)v92 + 2) = v85;
      *((void *)v92 + 6) = v90;
      *((void *)v92 + 7) = v86;
      uint64_t v93 = &v8[v88[7]];
      *(void *)uint64_t v93 = 0x7974706D65;
      *((void *)v93 + 1) = 0xE500000000000000;
      *(void *)&v8[v88[8]] = 0;
      *(void *)&v8[v88[9]] = v87;
      *(void *)&v8[v88[10]] = &_swiftEmptySetSingleton;
      *(void *)&v8[v88[11]] = _swiftEmptyArrayStorage;
      v8[v88[14]] = 0;
      *(void *)&v8[v88[12]] = _swiftEmptyArrayStorage;
      *(void *)&v8[v88[13]] = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v94 = (uint64_t)v99;
      sub_10020F0D8((uint64_t)v8, (uint64_t)v99, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v95 = 0x40000000;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 3u:
        case 4u:
        case 5u:
          uint64_t v98 = v94;
          goto LABEL_30;
        case 2u:
          uint64_t v95 = 1056964608;
          goto LABEL_25;
        default:
LABEL_25:
          sub_1001D430C(v94, (uint64_t (*)(void))type metadata accessor for CVDetection);
          sub_1001D430C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
          unint64_t v96 = v101;
          char v97 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v109 = v96;
          sub_1002F4BC4(v95, 0, 96, v78, v97);
          unint64_t v76 = v109;
          swift_bridgeObjectRelease();
          uint64_t v77 = v78;
          break;
      }
    }
    sub_1001D430C(v77, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return v76;
  }
  else
  {
LABEL_6:
    return sub_10031B5B4((uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1001C92A8(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_10000F214(&qword_100525480);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  uint64_t v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100525488);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100525490);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100525498);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100212450();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_1002124F8();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_1002124A4();
      uint64_t v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_10021254C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1001C9614()
{
  unint64_t v1 = 0xD000000000000013;
  if (*v0 != 1) {
    unint64_t v1 = 0x6C6C4170696B73;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x5379726F74636166;
  }
}

uint64_t sub_1001C9680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10020E2E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C96A8(uint64_t a1)
{
  unint64_t v2 = sub_100212450();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C96E4(uint64_t a1)
{
  unint64_t v2 = sub_100212450();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C9720(uint64_t a1)
{
  unint64_t v2 = sub_1002124F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C975C(uint64_t a1)
{
  unint64_t v2 = sub_1002124F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C9798(uint64_t a1)
{
  unint64_t v2 = sub_10021254C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C97D4(uint64_t a1)
{
  unint64_t v2 = sub_10021254C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C9810(uint64_t a1)
{
  unint64_t v2 = sub_1002124A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C984C(uint64_t a1)
{
  unint64_t v2 = sub_1002124A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001C9888@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10020E45C(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_1001C98B4(void *a1)
{
  return sub_1001C92A8(a1, *v1);
}

void sub_1001C98D0(void *a1@<X8>)
{
  *a1 = &off_1004E5AF8;
}

unint64_t sub_1001C98E0()
{
  unint64_t v1 = 0xD000000000000015;
  if (*v0 != 1) {
    unint64_t v1 = 0x6C6C412070696B53;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1001C9940()
{
  unint64_t v1 = *(void **)(v0 + 40);
  *(void *)&v11[0] = 0;
  *((void *)&v11[0] + 1) = 0xE000000000000000;
  if (v1)
  {
    id v2 = v1;
    _StringGuts.grow(_:)(18);
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
    v3._uint64_t countAndFlagsBits = 0x20656761726F7453;
    v3._object = (void *)0xEC00000020726F66;
    String.append(_:)(v3);
    sub_1000321A8((long long *)v0, (uint64_t)v11);
    sub_1000321A8(v11, (uint64_t)v8);
    _print_unlocked<A, B>(_:_:)();
    v4._uint64_t countAndFlagsBits = 8250;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    v8[0] = v2;
    _print_unlocked<A, B>(_:_:)();
  }
  else
  {
    _StringGuts.grow(_:)(28);
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
    v5._uint64_t countAndFlagsBits = 0x20656761726F7453;
    v5._object = (void *)0xEC00000020726F66;
    String.append(_:)(v5);
    sub_1000321A8((long long *)v0, (uint64_t)v11);
    sub_1000321A8(v11, (uint64_t)v8);
    _print_unlocked<A, B>(_:_:)();
    v6._uint64_t countAndFlagsBits = 0x6162206F6E3C203ALL;
    v6._object = (void *)0xEE003E676E696B63;
    String.append(_:)(v6);
  }
  return v9;
}

Swift::Int sub_1001C9AE4()
{
  Hasher.init(_seed:)();
  unint64_t v1 = (void *)v0[4];
  if (v1 == (void *)2) {
    goto LABEL_12;
  }
  Swift::UInt v2 = *v0;
  Swift::UInt v3 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if ((v5 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(HIDWORD(v4));
    if (v1) {
      goto LABEL_4;
    }
LABEL_12:
    Swift::UInt v6 = 0;
LABEL_13:
    Hasher._combine(_:)(v6);
    uint64_t v8 = (void *)v0[5];
    if (v8) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  if (HIDWORD(v4)) {
    Swift::UInt v7 = 2;
  }
  else {
    Swift::UInt v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if (!v1) {
    goto LABEL_12;
  }
LABEL_4:
  if (v1 == (void *)1)
  {
    Swift::UInt v6 = 1;
    goto LABEL_13;
  }
  Hasher._combine(_:)(2uLL);
  sub_10020F1BC(v1);
  type metadata accessor for CGColor(0);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  _CFObject.hash(into:)();
  sub_10020F474(v2, v3, v4, v5, v1);
  uint64_t v8 = (void *)v0[5];
  if (v8)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    type metadata accessor for CVBuffer(0);
    sub_1001E227C((unint64_t *)&unk_100524E80, type metadata accessor for CVBuffer);
    id v9 = v8;
    _CFObject.hash(into:)();

    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1001C9CE4(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_10020C1CC((uint64_t)v7, (uint64_t)v8) & 1;
}

void sub_1001C9D30()
{
  unint64_t v1 = (void *)v0[4];
  long long v2 = (void *)v0[5];
  if (v1 == (void *)2) {
    goto LABEL_12;
  }
  Swift::UInt v3 = *v0;
  Swift::UInt v4 = v0[1];
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  if ((v6 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(HIDWORD(v5));
    if (v1) {
      goto LABEL_4;
    }
LABEL_12:
    Swift::UInt v7 = 0;
LABEL_13:
    Hasher._combine(_:)(v7);
    if (v2) {
      goto LABEL_14;
    }
LABEL_9:
    Hasher._combine(_:)(0);
    return;
  }
  if (HIDWORD(v5)) {
    Swift::UInt v8 = 2;
  }
  else {
    Swift::UInt v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if (!v1) {
    goto LABEL_12;
  }
LABEL_4:
  if (v1 == (void *)1)
  {
    Swift::UInt v7 = 1;
    goto LABEL_13;
  }
  Hasher._combine(_:)(2uLL);
  sub_10020F1BC(v1);
  type metadata accessor for CGColor(0);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  _CFObject.hash(into:)();
  sub_10020F474(v3, v4, v5, v6, v1);
  if (!v2) {
    goto LABEL_9;
  }
LABEL_14:
  Hasher._combine(_:)(1u);
  type metadata accessor for CVBuffer(0);
  sub_1001E227C((unint64_t *)&unk_100524E80, type metadata accessor for CVBuffer);
  id v9 = v2;
  _CFObject.hash(into:)();
}

Swift::Int sub_1001C9F40()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v6 = (void *)v0[5];
  Hasher.init(_seed:)();
  if (v5 == (void *)2) {
    goto LABEL_12;
  }
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if ((v4 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(HIDWORD(v3));
    if (v5) {
      goto LABEL_4;
    }
LABEL_12:
    Swift::UInt v7 = 0;
LABEL_13:
    Hasher._combine(_:)(v7);
    if (v6) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  if (HIDWORD(v3)) {
    Swift::UInt v8 = 2;
  }
  else {
    Swift::UInt v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if (!v5) {
    goto LABEL_12;
  }
LABEL_4:
  if (v5 == (void *)1)
  {
    Swift::UInt v7 = 1;
    goto LABEL_13;
  }
  Hasher._combine(_:)(2uLL);
  sub_10020F1BC(v5);
  type metadata accessor for CGColor(0);
  sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
  _CFObject.hash(into:)();
  sub_10020F474(v1, v2, v3, v4, v5);
  if (v6)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    type metadata accessor for CVBuffer(0);
    sub_1001E227C((unint64_t *)&unk_100524E80, type metadata accessor for CVBuffer);
    id v9 = v6;
    _CFObject.hash(into:)();

    return Hasher._finalize()();
  }
LABEL_9:
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1001CA130()
{
  return sub_1001C9940();
}

id sub_1001CA16C()
{
  Swift::UInt v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
LABEL_5:
    id v5 = v1;
    return v2;
  }
  id result = [objc_allocWithZone((Class)FigM2MController) init];
  if (result)
  {
    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = result;
    id v2 = result;

    Swift::UInt v1 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_1001CA1E0(double a1, double a2, double a3, double a4)
{
  double v7 = floor(a1 * 0.5);
  double v8 = v7 + v7;
  id v9 = sub_1001CA16C();
  if (v8 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  double v10 = floor(a2 * 0.5);
  double v11 = v10 + v10;
  if (v11 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  double v12 = floor(a3 * 0.5);
  double v13 = v12 + v12;
  if (v13 <= -9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  double v14 = floor(a4 * 0.5);
  double v15 = v14 + v14;
  if ((*(void *)&v8 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(void *)&v11 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(void *)&v13 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(void *)&v15 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_28;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v15 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    return;
  }
  id v19 = v9;
  [v9 setCustomFilter:3 alignment:2 sourceWidth:(uint64_t)v8 sourceHeight:(uint64_t)v11 destinationWidth:(uint64_t)v13 destinationHeight:(uint64_t)v15 luma_param:0.0 chroma_param:0.0];
}

void sub_1001CA388(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3, double a4)
{
  sub_10000FC34(a3, (uint64_t)v69, (uint64_t *)&unk_100518AE0);
  double v10 = *(double *)v69;
  double v9 = *(double *)&v69[1];
  double v12 = *(double *)&v69[2];
  double v11 = *(double *)&v69[3];
  if (a4 == 1.57079633 || a4 == 4.71238898)
  {
    int64_t Height = CVPixelBufferGetHeight(a2);
    if (a4 == 1.57079633)
    {
LABEL_6:
      size_t Width = CVPixelBufferGetWidth(a2);
      goto LABEL_8;
    }
  }
  else
  {
    int64_t Height = CVPixelBufferGetWidth(a2);
  }
  if (a4 == 4.71238898) {
    goto LABEL_6;
  }
  size_t Width = CVPixelBufferGetHeight(a2);
LABEL_8:
  uint64_t v15 = Width;
  sub_10000FC34(a3, (uint64_t)v70, (uint64_t *)&unk_100518AE0);
  if (v70[32] == 1)
  {
    double v16 = (double)(uint64_t)CVPixelBufferGetWidth(a1);
    double v17 = (double)(uint64_t)CVPixelBufferGetHeight(a1);
    double v18 = sub_10020F6D8(v16);
    double v19 = sub_10020F6D8(v17);
    double v10 = sub_10020F6D8(v16 * 0.0);
    double v9 = sub_10020F6D8(v17 * 0.0);
    double v12 = v18 - v10;
    double v11 = v19 - v9;
  }
  if ((double)(uint64_t)CVPixelBufferGetWidth(a1) / (double)Height <= 4.0
    && (double)(uint64_t)CVPixelBufferGetHeight(a1) / (double)v15 <= 4.0)
  {
    double v67 = v10;
    double v31 = (double)(uint64_t)CVPixelBufferGetWidth(a2);
    double v32 = a4;
    double v33 = v11;
    double v34 = v12;
    double v35 = (double)(uint64_t)CVPixelBufferGetHeight(a2);
    double v36 = sub_10020F6D8(v31);
    double v37 = sub_10020F6D8(v35);
    double v38 = sub_10020F6D8(v31 * 0.0);
    double v39 = sub_10020F6D8(v35 * 0.0);
    sub_1001CA1E0(v34, v33, v36 - v38, v37 - v39);
    uint64_t v40 = (__CVBuffer *)sub_1001CA16C();
    uint64_t v41 = v40;
    if (v32 == 0.0)
    {
      uint64_t v42 = 1;
      double v43 = v67;
      double v44 = v9;
    }
    else
    {
      BOOL v65 = v32 == 3.14159265;
      if (v32 == -3.14159265) {
        BOOL v65 = 1;
      }
      if (v32 == 1.57079633) {
        unsigned int v66 = 6;
      }
      else {
        unsigned int v66 = 8;
      }
      if (v65) {
        uint64_t v42 = 3;
      }
      else {
        uint64_t v42 = v66;
      }
      double v43 = v67;
      double v44 = v9;
      if (v32 != 4.71238898 && v32 != 1.57079633 && !v65) {
        goto LABEL_55;
      }
    }
    -[__CVBuffer transform:srcRect:dst:dstRect:rotate:sync_m2m:](v40, "transform:srcRect:dst:dstRect:rotate:sync_m2m:", a1, a2, v42, 0, v43, v44, v34, v33, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
    goto LABEL_53;
  }
  int64_t v20 = CVPixelBufferGetWidth(a1);
  if (v20 >= 0) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = v20 + 1;
  }
  size_t v22 = v21 >> 1;
  int64_t v23 = CVPixelBufferGetHeight(a1);
  if (v23 >= 0) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = v23 + 1;
  }
  size_t v25 = v24 >> 1;
  char v26 = (void **)(v4 + 24);
  swift_beginAccess();
  char v27 = *(void **)(v4 + 24);
  if (v27)
  {
    uint64_t v28 = v27;
    if (CVPixelBufferGetWidth(v28) == v22)
    {
      size_t v29 = CVPixelBufferGetHeight(v28);

      if (v29 == v25)
      {
        uint64_t v30 = *v26;
        if (*v26) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }
    else
    {
    }
    uint64_t v45 = *v26;
    *char v26 = 0;

    uint64_t v30 = *v26;
    if (*v26) {
      goto LABEL_28;
    }
  }
LABEL_27:
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  sub_10000F214(&qword_100525198);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
  unint64_t v48 = (__CFString *)kCVPixelBufferIOSurfacePropertiesKey;
  *(void *)(inited + 32) = kCVPixelBufferIOSurfacePropertiesKey;
  unint64_t v49 = v48;
  *(void *)(inited + 40) = sub_10031BB08((uint64_t)_swiftEmptyArrayStorage);
  sub_10031BD84(inited);
  type metadata accessor for CFString(0);
  sub_10000F214((uint64_t *)&unk_1005251A0);
  sub_1001E227C(&qword_100518538, type metadata accessor for CFString);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  CVPixelBufferCreate(0, v22, v25, PixelFormatType, isa, (CVPixelBufferRef *)(v4 + 24));
  swift_endAccess();

  uint64_t v30 = *v26;
  if (!*v26) {
    return;
  }
LABEL_28:
  uint64_t v41 = v30;
  double v68 = a4;
  double v51 = v11;
  double v52 = v12;
  double v53 = (double)(uint64_t)CVPixelBufferGetWidth(v41);
  double v54 = v10;
  double v55 = (double)(uint64_t)CVPixelBufferGetHeight(v41);
  double v56 = sub_10020F6D8(v53);
  double v57 = sub_10020F6D8(v55);
  double v58 = sub_10020F6D8(v53 * 0.0);
  double v59 = sub_10020F6D8(v55 * 0.0);
  sub_1001CA1E0(v52, v51, v56 - v58, v57 - v59);
  id v60 = sub_1001CA16C();
  long long v61 = v60;
  uint64_t v62 = 1;
  if (v68 != 0.0)
  {
    BOOL v63 = v68 == 3.14159265;
    if (v68 == -3.14159265) {
      BOOL v63 = 1;
    }
    unsigned int v64 = v68 == 1.57079633 ? 6 : 8;
    uint64_t v62 = v63 ? 3 : v64;
    if (v68 != 4.71238898 && v68 != 1.57079633 && !v63)
    {
LABEL_55:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
  }
  [v60 transform:a1 srcRect:v41 dst:v62 dstRect:0 rotate:v54 sync_m2m:v9, v52, v51, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height];

  memset(v71, 0, 32);
  v71[32] = 1;
  sub_1001CA388(v41, a2, v71, 0.0);
LABEL_53:
}

uint64_t sub_1001CA9B4()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for M2MHandle()
{
  return self;
}

uint64_t sub_1001CAA18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 56;
  swift_beginAccess();
  uint64_t result = sub_10000FB74(v3, (uint64_t)&v5, &qword_100525188);
  if (v6) {
    return sub_1000321A8(&v5, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001CAA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  sub_10000F578(a2, (uint64_t)v13);
  sub_10000FC34((uint64_t)v13, (uint64_t)v12, &qword_100525188);
  swift_beginAccess();
  sub_100210704((uint64_t)v12, a1 + 56);
  swift_endAccess();
  if (*(void *)(a1 + 96))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  double v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = v8;
  swift_retain();
  *(void *)(a1 + 96) = sub_100064D5C((uint64_t)v6, (uint64_t)&unk_100525218, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_1001CAC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[42] = a4;
  v5[43] = a5;
  uint64_t v6 = sub_10000F214(&qword_100525220);
  v5[44] = v6;
  v5[45] = *(void *)(v6 - 8);
  v5[46] = swift_task_alloc();
  return _swift_task_switch(sub_1001CAD14, 0, 0);
}

uint64_t sub_1001CAD14()
{
  id v1 = *(id *)(v0[42] + 48);
  sub_10000F214(&qword_100525228);
  OS_dispatch_queue.sync<A>(execute:)();

  sub_10000F3B0(v0 + 21, v0[24]);
  sub_10000F214(&qword_100525230);
  AsyncStream.makeAsyncIterator()();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 21));
  swift_beginAccess();
  v0[47] = 0;
  v0[48] = 0;
  id v2 = (void *)swift_task_alloc();
  v0[49] = v2;
  *id v2 = v0;
  v2[1] = sub_1001CAE94;
  uint64_t v3 = v0[44];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v3);
}

uint64_t sub_1001CAE94()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001CAF90, 0, 0);
}

uint64_t sub_1001CAF90()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if (!v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 360) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 352));
LABEL_8:
    sub_10000F478(*(void *)(v0 + 376));
    swift_task_dealloc();
    double v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 56);
  unint64_t v7 = *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int8 *)(v0 + 68) << 32);
  *(void *)(v0 + 120) = v1;
  *(void *)(v0 + 128) = v4;
  *(void *)(v0 + 136) = v3;
  *(void *)(v0 + 144) = v6;
  *(void *)(v0 + 152) = v5;
  *(_DWORD *)(v0 + 160) = v7;
  *(unsigned char *)(v0 + 164) = BYTE4(v7) & 1;
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 360) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 352));
    goto LABEL_7;
  }
  uint64_t v9 = Strong;
  if (static Task<>.isCancelled.getter())
  {
    (*(void (**)(void, void))(*(void *)(v0 + 360) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 352));
    swift_release();
LABEL_7:
    sub_100210890(v2, v1, v4, v3, v6, v5);
    goto LABEL_8;
  }
  uint64_t v30 = v4;
  uint64_t v29 = *(void *)(v0 + 376);
  uint64_t v31 = v3;
  double v12 = *(void **)(v9 + 48);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v9;
  *(void *)(v13 + 24) = v2;
  long long v14 = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v0 + 120);
  *(_OWORD *)(v13 + 48) = v14;
  *(_OWORD *)(v13 + 61) = *(_OWORD *)(v0 + 149);
  uint64_t v15 = v12;
  swift_retain();
  uint64_t v26 = v2;
  uint64_t v27 = v6;
  unint64_t v28 = v5;
  sub_100210960(v2, v1, v30, v31, v6, v5);
  sub_10000F478(v29);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_100210950;
  *(void *)(v16 + 24) = v13;
  *(void *)(v0 + 104) = sub_10014C6EC;
  *(void *)(v0 + 112) = v16;
  *(void *)(v0 + 72) = _NSConcreteStackBlock;
  *(void *)(v0 + 80) = 1107296256;
  *(void *)(v0 + 88) = sub_100109E30;
  *(void *)(v0 + 96) = &unk_1004F00B8;
  double v17 = _Block_copy((const void *)(v0 + 72));
  swift_retain();
  swift_release();
  dispatch_sync(v15, v17);

  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  uint64_t v18 = swift_release();
  if (v17)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = v9 + OBJC_IVAR____TtC6Tamale13CVCoordinator_streamingMetadataConsumer;
    swift_beginAccess();
    sub_10000FB74(v22, v0 + 208, &qword_100525190);
    if (*(void *)(v0 + 232))
    {
      sub_10000F578(v0 + 208, v0 + 248);
      sub_10000FBD8(v0 + 208, &qword_100525190);
      uint64_t v24 = *(void *)(v0 + 272);
      uint64_t v23 = *(void *)(v0 + 280);
      sub_10000F3B0((void *)(v0 + 248), v24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 8))(v0 + 120, v24, v23);
      sub_100210890(v26, v1, v30, v31, v27, v28);
      swift_release();
      _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 248);
    }
    else
    {
      sub_100210890(v2, v1, v30, v31, v27, v28);
      swift_release();
      sub_10000FBD8(v0 + 208, &qword_100525190);
    }
    *(void *)(v0 + 376) = sub_100210950;
    *(void *)(v0 + 384) = v13;
    size_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v25;
    *size_t v25 = v0;
    v25[1] = sub_1001CAE94;
    uint64_t v21 = *(void *)(v0 + 352);
    uint64_t v18 = v0 + 16;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  return AsyncStream.Iterator.next(isolation:)(v18, v19, v20, v21);
}

uint64_t sub_1001CB40C(uint64_t result, _OWORD *a2, double a3)
{
  if (!*(unsigned char *)(result + 16))
  {
    uint64_t v5 = result;
    swift_beginAccess();
    sub_10014A83C((uint64_t)a2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *(void *)(v5 + 104);
    *(void *)(v5 + 104) = 0x8000000000000000;
    sub_1002F5854(a2, isUniquelyReferenced_nonNull_native, a3);
    *(void *)(v5 + 104) = v7;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1001CB4B4(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v105 = a3;
  uint64_t v108 = a1;
  unint64_t v112 = a2;
  unint64_t v109 = HIDWORD(a2);
  uint64_t v110 = a4;
  uint64_t v90 = type metadata accessor for CVDetection();
  uint64_t v91 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v113 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v114 = (uint64_t)&v90 - v8;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v101 = *(void *)(v9 - 8);
  uint64_t v102 = v9;
  __chkstk_darwin(v9);
  uint64_t v100 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v11 - 8);
  unint64_t v96 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for Logger();
  uint64_t v111 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v106 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  double v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v18);
  uint64_t v99 = type metadata accessor for DispatchQoS();
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v20 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v4 + 16) = 1;
  type metadata accessor for M2MHandle();
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0;
  *(void *)(v21 + 24) = 0;
  *(void *)(v4 + 40) = v21;
  unint64_t v103 = sub_10002E8B0();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001E227C((unint64_t *)&unk_10051FB60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000F214(&qword_100521000);
  sub_100013AA8((unint64_t *)&qword_10051FB70, &qword_100521000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
  char v97 = v20;
  *(void *)(v4 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(void *)(v4 + 104) = &_swiftEmptyDictionarySingleton;
  swift_weakInit();
  *(unsigned char *)(v4 + 120) = 0;
  *(void *)(v4 + 152) = &_swiftEmptyDictionarySingleton;
  uint64_t v22 = (void *)(v4 + 152);
  *(void *)(v4 + 160) = &_swiftEmptyDictionarySingleton;
  uint64_t v23 = (void *)(v4 + 160);
  *(void *)(v4 + 168) = &_swiftEmptySetSingleton;
  uint64_t v24 = v4 + OBJC_IVAR____TtC6Tamale13CVCoordinator_logger;
  if (qword_100517E30 != -1) {
LABEL_35:
  }
    swift_once();
  uint64_t v25 = v104;
  uint64_t v26 = sub_10000F378(v104, (uint64_t)qword_10055E1A8);
  uint64_t v27 = v111 + 16;
  unint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16);
  v28(v24, v26, v25);
  uint64_t v95 = v26;
  uint64_t v111 = v27;
  uint64_t v94 = v28;
  v28((uint64_t)v106, v26, v25);
  OSSignposter.init(logger:)();
  uint64_t v29 = v5 + OBJC_IVAR____TtC6Tamale13CVCoordinator_signpostName;
  *(void *)uint64_t v29 = "Tamale.CVProcessor.batchProcess.inference";
  *(void *)(v29 + 8) = 41;
  *(unsigned char *)(v29 + 16) = 2;
  unint64_t v103 = OBJC_IVAR____TtC6Tamale13CVCoordinator_processors;
  *(void *)(v5 + OBJC_IVAR____TtC6Tamale13CVCoordinator_processors) = _swiftEmptyArrayStorage;
  *(void *)(v5 + OBJC_IVAR____TtC6Tamale13CVCoordinator_inputStorage) = &_swiftEmptyDictionarySingleton;
  uint64_t v30 = v5 + OBJC_IVAR____TtC6Tamale13CVCoordinator_streamingMetadataConsumer;
  *(_OWORD *)uint64_t v30 = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  *(void *)(v30 + 32) = 0;
  uint64_t v31 = v108;
  *(void *)(v5 + 128) = v108;
  unsigned int v32 = v112;
  int v93 = v112 & 1;
  *(unsigned char *)(v5 + 136) = v112 & 1;
  int v92 = (v32 >> 8) & 1;
  *(unsigned char *)(v5 + 137) = v92;
  *(_DWORD *)(v5 + 140) = v109;
  char v33 = v105;
  *(unsigned char *)(v5 + 144) = v105 & 1;
  swift_weakAssign();
  swift_bridgeObjectRetain_n();
  double v34 = (char *)sub_1001EA334(v31);
  swift_bridgeObjectRelease();
  uint64_t v35 = *((void *)v34 + 2);
  uint64_t v36 = v25;
  uint64_t v106 = v34;
  uint64_t v107 = v5;
  if (v35)
  {
    *(unsigned char *)(v5 + 16) = 2;
    uint64_t v37 = *((void *)v34 + 2);
    if (v37)
    {
      uint64_t v38 = (uint64_t)&v34[(*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80)];
      unint64_t v112 = *(void *)(v91 + 72);
      swift_retain();
      while (1)
      {
        uint64_t v5 = v36;
        uint64_t v24 = v114;
        sub_10020F0D8(v38, v114, (uint64_t (*)(void))type metadata accessor for CVDetection);
        swift_beginAccess();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v116 = (void *)*v22;
        uint64_t v40 = v116;
        *uint64_t v22 = 0x8000000000000000;
        unint64_t v42 = sub_10032AF9C(v24);
        uint64_t v43 = v40[2];
        BOOL v44 = (v41 & 1) == 0;
        uint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        uint64_t v24 = v41;
        if (v40[3] >= v45)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            unint64_t v48 = v116;
            if (v41) {
              goto LABEL_14;
            }
          }
          else
          {
            sub_1001F72DC();
            unint64_t v48 = v116;
            if (v24) {
              goto LABEL_14;
            }
          }
        }
        else
        {
          sub_1001EFEAC(v45, isUniquelyReferenced_nonNull_native);
          unint64_t v46 = sub_10032AF9C(v114);
          if ((v24 & 1) != (v47 & 1)) {
            goto LABEL_36;
          }
          unint64_t v42 = v46;
          unint64_t v48 = v116;
          if (v24)
          {
LABEL_14:
            *(void *)(v48[7] + 8 * v42) = 0xFFF0000000000000;
            goto LABEL_18;
          }
        }
        v48[(v42 >> 6) + 8] |= 1 << v42;
        sub_10020F0D8(v114, v48[6] + v42 * v112, (uint64_t (*)(void))type metadata accessor for CVDetection);
        *(void *)(v48[7] + 8 * v42) = 0xFFF0000000000000;
        uint64_t v49 = v48[2];
        BOOL v50 = __OFADD__(v49, 1);
        uint64_t v51 = v49 + 1;
        if (v50) {
          goto LABEL_33;
        }
        v48[2] = v51;
LABEL_18:
        *uint64_t v22 = v48;
        swift_bridgeObjectRelease();
        sub_1001D430C(v114, (uint64_t (*)(void))type metadata accessor for CVDetection);
        swift_endAccess();
        uint64_t v24 = v113;
        sub_10020F0D8(v38, v113, (uint64_t (*)(void))type metadata accessor for CVDetection);
        swift_beginAccess();
        int v52 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v116 = (void *)*v23;
        double v53 = v116;
        *uint64_t v23 = 0x8000000000000000;
        unint64_t v55 = sub_10032AF9C(v24);
        uint64_t v56 = v53[2];
        BOOL v57 = (v54 & 1) == 0;
        uint64_t v58 = v56 + v57;
        if (__OFADD__(v56, v57)) {
          goto LABEL_32;
        }
        uint64_t v24 = v54;
        if (v53[3] >= v58)
        {
          if ((v52 & 1) == 0) {
            sub_1001F7058();
          }
        }
        else
        {
          sub_1001EF714(v58, v52);
          unint64_t v59 = sub_10032AF9C(v113);
          if ((v24 & 1) != (v60 & 1))
          {
LABEL_36:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v55 = v59;
        }
        uint64_t v36 = v5;
        long long v61 = v116;
        if (v24)
        {
          *(_DWORD *)(v116[7] + 4 * v55) = 0;
        }
        else
        {
          v116[(v55 >> 6) + 8] |= 1 << v55;
          sub_10020F0D8(v113, v61[6] + v55 * v112, (uint64_t (*)(void))type metadata accessor for CVDetection);
          *(_DWORD *)(v61[7] + 4 * v55) = 0;
          uint64_t v62 = v61[2];
          BOOL v50 = __OFADD__(v62, 1);
          uint64_t v63 = v62 + 1;
          if (v50) {
            goto LABEL_34;
          }
          v61[2] = v63;
        }
        *uint64_t v23 = v61;
        swift_bridgeObjectRelease();
        sub_1001D430C(v113, (uint64_t (*)(void))type metadata accessor for CVDetection);
        swift_endAccess();
        v38 += v112;
        if (!--v37)
        {
          swift_release();
          uint64_t v5 = v107;
          uint64_t v31 = v108;
          break;
        }
      }
    }
  }
  uint64_t v64 = type metadata accessor for VisionProcessor(0);
  uint64_t v65 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_defaultActor_initialize();
  uint64_t v66 = OBJC_IVAR____TtC6Tamale15VisionProcessor_logger;
  if (qword_100517EB0 != -1) {
    swift_once();
  }
  uint64_t v67 = sub_10000F378(v36, (uint64_t)qword_10055E328);
  double v68 = v94;
  v94(v65 + v66, v67, v36);
  uint64_t v69 = OBJC_IVAR____TtC6Tamale15VisionProcessor_sequenceHandler;
  id v70 = objc_allocWithZone((Class)VNSequenceRequestHandler);
  *(void *)(v65 + v69) = [v70 init:v90];
  *(void *)(v65 + OBJC_IVAR____TtC6Tamale15VisionProcessor_configuredDetectionTypes) = &_swiftEmptySetSingleton;
  uint64_t v71 = v65 + OBJC_IVAR____TtC6Tamale15VisionProcessor_configuration;
  *(void *)uint64_t v71 = v31;
  uint64_t v114 = v65;
  char v72 = v93;
  *(unsigned char *)(v71 + 8) = v93;
  *(unsigned char *)(v71 + 9) = v92;
  *(_DWORD *)(v71 + 12) = v109;
  *(unsigned char *)(v71 + 16) = v33 & 1;
  uint64_t v73 = type metadata accessor for StreamingVisualIntelligenceProcessor(0);
  uint64_t v74 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v74 + 112) = 0;
  v68(v74 + OBJC_IVAR____TtC6Tamale36StreamingVisualIntelligenceProcessor_logger, v95, v36);
  *(void *)(v74 + OBJC_IVAR____TtC6Tamale36StreamingVisualIntelligenceProcessor_currentRequestIdentifier) = 0;
  *(unsigned char *)(v74 + OBJC_IVAR____TtC6Tamale36StreamingVisualIntelligenceProcessor_detectUnusedDomains) = v72;
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525238);
  uint64_t v75 = swift_allocObject();
  *(_OWORD *)(v75 + 16) = xmmword_100440F30;
  *(void *)(v75 + 56) = v64;
  *(void *)(v75 + 64) = &off_1004F4870;
  *(void *)(v75 + 32) = v114;
  *(void *)(v75 + 96) = v73;
  *(void *)(v75 + 104) = &off_1004F8270;
  *(void *)(v75 + 72) = v74;
  *(void *)(v5 + v103) = v75;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  unint64_t v76 = dispatch_group_create();
  dispatch_group_enter(v76);
  uint64_t v77 = type metadata accessor for TaskPriority();
  uint64_t v78 = (uint64_t)v96;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v96, 1, 1, v77);
  uint64_t v79 = (void *)swift_allocObject();
  v79[2] = 0;
  v79[3] = 0;
  uint64_t v80 = v106;
  v79[4] = v5;
  v79[5] = v80;
  v79[6] = v76;
  swift_retain();
  CGRect v81 = v76;
  sub_100064D5C(v78, (uint64_t)&unk_100525248, (uint64_t)v79);
  swift_release();
  long long v82 = *(void **)(v5 + 48);
  uint64_t v83 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_100210AE8;
  aBlock[5] = v83;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004F0108;
  uint64_t v84 = _Block_copy(aBlock);
  id v85 = v82;
  swift_retain();
  uint64_t v86 = v97;
  static DispatchQoS.unspecified.getter();
  uint64_t v116 = _swiftEmptyArrayStorage;
  sub_1001E227C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  uint64_t v87 = v100;
  uint64_t v88 = v102;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v84);
  swift_release();
  swift_release();

  swift_release();
  (*(void (**)(char *, uint64_t))(v101 + 8))(v87, v88);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v86, v99);
  swift_release();
  swift_release();
  return v107;
}

uint64_t sub_1001CC330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned char v6[72] = a6;
  v6[71] = a5;
  v6[70] = a4;
  sub_10000F214((uint64_t *)&unk_100525250);
  v6[73] = swift_task_alloc();
  v6[74] = *(void *)(type metadata accessor for CVDetection() - 8);
  v6[75] = swift_task_alloc();
  v6[76] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v6[77] = swift_task_alloc();
  return _swift_task_switch(sub_1001CC490, 0, 0);
}

uint64_t sub_1001CC490()
{
  uint64_t v2 = *(void *)(v0 + 560);
  uint64_t v3 = OBJC_IVAR____TtC6Tamale13CVCoordinator_processors;
  *(void *)(v0 + 624) = OBJC_IVAR____TtC6Tamale13CVCoordinator_processors;
  uint64_t v4 = *(void *)(v2 + v3);
  *(void *)(v0 + 632) = v4;
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v0 + 640) = v5;
  if (v5)
  {
    *(void *)(v0 + 648) = *(void *)(*(void *)(v0 + 568) + 16);
    *(void *)(v0 + 656) = OBJC_IVAR____TtC6Tamale13CVCoordinator_inputStorage;
    *(void *)(v0 + 664) = kCVPixelBufferIOSurfacePropertiesKey;
    *(void *)(v0 + 672) = 0;
    uint64_t v6 = *(void *)(v4 + 16);
    uint64_t v7 = swift_bridgeObjectRetain();
    if (v6)
    {
      unint64_t v8 = 0;
      uint64_t v6 = v0 + 320;
      uint64_t v1 = (void *)(v0 + 360);
      BOOL v44 = (long long *)(v0 + 400);
      while (1)
      {
        uint64_t v9 = *(void *)(v0 + 648);
        sub_10000F578(v7 + 40 * v8 + 32, v0 + 360);
        if (v9)
        {
          uint64_t v10 = *(void *)(v0 + 592);
          *(_DWORD *)(v0 + 712) = *(_DWORD *)(v10 + 80);
          swift_bridgeObjectRetain();
          swift_beginAccess();
          uint64_t v11 = 0;
          *(void *)(v0 + 680) = *(void *)(v10 + 72);
          do
          {
            *(void *)(v0 + 688) = v11;
            uint64_t v12 = *(void *)(v0 + 656);
            uint64_t v13 = *(void *)(v0 + 608);
            uint64_t v14 = *(void *)(v0 + 560);
            sub_10020F0D8(*(void *)(v0 + 568)+ ((*(unsigned __int8 *)(v0 + 712) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 712))+ *(void *)(v0 + 680) * v11, v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
            uint64_t v15 = *(void *)(v14 + v12);
            uint64_t v16 = swift_task_alloc();
            char v17 = v16;
            *(void *)(v16 + 16) = v13;
            swift_bridgeObjectRetain();
            LOBYTE(v13) = sub_1001C1A68((uint64_t (*)(char *))sub_100210AF0, v17, v15);
            *(void *)(v0 + 696) = 0;
            swift_bridgeObjectRelease();
            swift_task_dealloc();
            if ((v13 & 1) == 0) {
              goto LABEL_12;
            }
            sub_1001D430C(*(void *)(v0 + 608), (uint64_t (*)(void))type metadata accessor for CVDetection);
            uint64_t v11 = *(void *)(v0 + 688) + 1;
          }
          while (v11 != *(void *)(v0 + 648));
          swift_bridgeObjectRelease();
        }
        uint64_t v18 = *(void *)(v0 + 640);
        uint64_t v19 = *(void *)(v0 + 672) + 1;
        _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 360);
        if (v19 == v18) {
          break;
        }
        unint64_t v8 = *(void *)(v0 + 672) + 1;
        *(void *)(v0 + 672) = v8;
        uint64_t v7 = *(void *)(v0 + 632);
        if (v8 >= *(void *)(v7 + 16)) {
          goto LABEL_11;
        }
      }
      uint64_t v25 = *(void *)(v0 + 624);
      uint64_t v26 = *(void *)(v0 + 560);
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v26 + v25);
      uint64_t v28 = *(void *)(v27 + 16);
      if (!v28) {
        goto LABEL_27;
      }
      uint64_t v29 = v27 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v46 = v28;
        uint64_t v30 = *(void *)(v0 + 616);
        uint64_t v31 = *(NSObject **)(v0 + 576);
        uint64_t v32 = *(void *)(v0 + 560);
        dispatch_group_enter(v31);
        uint64_t v33 = type metadata accessor for TaskPriority();
        uint64_t v34 = *(void *)(v33 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v30, 1, 1, v33);
        sub_10000F578(v29, (uint64_t)v44);
        uint64_t v35 = (void *)swift_allocObject();
        void v35[2] = 0;
        uint64_t v36 = v35 + 2;
        v35[3] = 0;
        sub_1000321A8(v44, (uint64_t)(v35 + 4));
        v35[9] = v32;
        v35[10] = v31;
        LODWORD(v30) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v30, 1, v33);
        swift_retain();
        uint64_t v37 = v31;
        uint64_t v38 = *(void *)(v0 + 616);
        if (v30 == 1)
        {
          sub_10000FBD8(*(void *)(v0 + 616), &qword_10051A8C0);
          if (!*v36) {
            goto LABEL_23;
          }
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v38, v33);
          if (!*v36)
          {
LABEL_23:
            uint64_t v39 = 0;
            uint64_t v41 = 0;
            goto LABEL_24;
          }
        }
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v39 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v41 = v40;
        swift_unknownObjectRelease();
LABEL_24:
        uint64_t v42 = swift_allocObject();
        *(void *)(v42 + 16) = &unk_100525268;
        *(void *)(v42 + 24) = v35;
        if (v41 | v39)
        {
          *(void *)(v0 + 440) = 0;
          *(void *)(v0 + 448) = 0;
          *(void *)(v0 + 456) = v39;
          *(void *)(v0 + 464) = v41;
        }
        swift_task_create();
        swift_release();
        v29 += 40;
        uint64_t v28 = v46 - 1;
        if (v46 == 1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_27;
        }
      }
    }
LABEL_11:
    __break(1u);
LABEL_12:
    uint64_t v20 = *(void *)(v0 + 384);
    uint64_t v21 = *(void *)(v0 + 392);
    sub_10000F3B0(v1, v20);
    uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 16) + **(int **)(v21 + 16));
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 704) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1001CCA9C;
    uint64_t v23 = *(void *)(v0 + 608);
    return v45(v6, v23, v20, v21);
  }
  else
  {
LABEL_27:
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 576));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
    return v43();
  }
}

uint64_t sub_1001CCA9C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001CCBC4, 0, 0);
}

uint64_t sub_1001CCBC4()
{
  uint64_t v1 = (void *)(v0 + 320);
  sub_10000FC34(v0 + 320, v0 + 280, &qword_100529670);
  if (*(void *)(v0 + 312) == 3)
  {
    sub_1001D430C(*(void *)(v0 + 608), (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v2 = *(void *)(v0 + 696);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 696);
    uint64_t v3 = *(void *)(v0 + 584);
    sub_1000321A8((long long *)(v0 + 280), v0 + 240);
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v69 = *(void *)(v0 + 296);
    uint64_t v73 = *(void *)(v0 + 288);
    uint64_t v67 = *(void *)(v0 + 312);
    uint64_t v68 = *(void *)(v0 + 304);
    uint64_t v5 = swift_task_alloc();
    *(void *)(v5 + 16) = v0 + 240;
    uint64_t v6 = swift_bridgeObjectRetain();
    sub_1001C25EC(v6, (uint64_t (*)(uint64_t, _OWORD *))sub_100210C14, v5, v3);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v7 = sub_10000F214(&qword_100525278);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v3, 1, v7) == 1)
    {
      sub_10000FBD8(*(void *)(v0 + 584), (uint64_t *)&unk_100525250);
      *(void *)(v0 + 544) = 0;
      sub_1000321A8((long long *)(v0 + 240), v0 + 200);
      unint64_t v8 = 0;
      if (*(void *)(v0 + 232) != 2)
      {
        size_t v9 = *(void *)(v0 + 200);
        size_t v10 = *(void *)(v0 + 208);
        if (((v10 | v9) & 0x8000000000000000) != 0) {
          goto LABEL_38;
        }
        uint64_t v11 = *(void **)(v0 + 664);
        OSType v12 = *(_DWORD *)(v0 + 216);
        sub_10000F214(&qword_100525198);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
        *(void *)(inited + 32) = v11;
        sub_100210C2C((void *)(v0 + 320), (void (*)(void, void, void, void, void))sub_100210C1C);
        id v14 = v11;
        *(void *)(inited + 40) = sub_10031BB08((uint64_t)_swiftEmptyArrayStorage);
        sub_10031BD84(inited);
        type metadata accessor for CFString(0);
        sub_10000F214((uint64_t *)&unk_1005251A0);
        sub_1001E227C(&qword_100518538, type metadata accessor for CFString);
        uint64_t v1 = (void *)(v0 + 320);
        CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        CVPixelBufferCreate(0, v9, v10, v12, isa, (CVPixelBufferRef *)(v0 + 544));

        sub_100210C2C((void *)(v0 + 320), (void (*)(void, void, void, void, void))sub_100210C68);
        unint64_t v8 = *(void **)(v0 + 544);
      }
      uint64_t v16 = *(void *)(v0 + 608);
      uint64_t v17 = *(void *)(v0 + 600);
      uint64_t v18 = (uint64_t *)(*(void *)(v0 + 560) + *(void *)(v0 + 656));
      sub_10020F0D8(v16, v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
      *(void *)(v0 + 112) = v4;
      *(void *)(v0 + 120) = v73;
      *(void *)(v0 + 128) = v69;
      *(void *)(v0 + 136) = v68;
      *(void *)(v0 + 144) = v67;
      *(void *)(v0 + 152) = v8;
      swift_beginAccess();
      sub_100210C2C(v1, (void (*)(void, void, void, void, void))sub_100210C1C);
      id v19 = v8;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v75 = *v18;
      *uint64_t v18 = 0x8000000000000000;
      sub_1002F5984((long long *)(v0 + 112), v17, isUniquelyReferenced_nonNull_native);
      *uint64_t v18 = v75;
      swift_bridgeObjectRelease();
      sub_1001D430C(v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
      swift_endAccess();
      sub_100210C2C(v1, (void (*)(void, void, void, void, void))sub_100210C68);
      sub_1001D430C(v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
    }
    else
    {
      uint64_t v21 = *(void *)(v0 + 608);
      uint64_t v70 = v21;
      uint64_t v22 = *(void *)(v0 + 600);
      uint64_t v23 = *(void *)(v0 + 584);
      uint64_t v24 = (uint64_t *)(*(void *)(v0 + 560) + *(void *)(v0 + 656));
      uint64_t v25 = (_OWORD *)(v23 + *(int *)(v7 + 48));
      long long v27 = v25[1];
      long long v26 = v25[2];
      *(_OWORD *)(v0 + 64) = *v25;
      *(_OWORD *)(v0 + 80) = v27;
      *(_OWORD *)(v0 + 96) = v26;
      sub_1001D430C(v23, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10020F0D8(v21, v22, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1000321A8((long long *)(v0 + 64), v0 + 160);
      sub_10000FC34(v0 + 104, v0 + 552, &qword_100524E48);
      swift_beginAccess();
      sub_100210C2C((void *)(v0 + 160), (void (*)(void, void, void, void, void))sub_10020F1A8);
      sub_100107B18((id *)(v0 + 552));
      char v28 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v76 = *v24;
      *uint64_t v24 = 0x8000000000000000;
      sub_1002F5984((long long *)(v0 + 64), v22, v28);
      *uint64_t v24 = v76;
      swift_bridgeObjectRelease();
      sub_1001D430C(v22, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v1 = (void *)(v0 + 320);
      swift_endAccess();
      sub_100210C2C((void *)(v0 + 320), (void (*)(void, void, void, void, void))sub_100210C68);
      sub_100210C2C((void *)(v0 + 160), (void (*)(void, void, void, void, void))sub_10020F474);
      sub_100107B44((id *)(v0 + 552));
      sub_1001D430C(v70, (uint64_t (*)(void))type metadata accessor for CVDetection);
    }
  }
  uint64_t v71 = (long long *)(v0 + 400);
  while (1)
  {
    uint64_t v29 = *(void *)(v0 + 688) + 1;
    if (v29 == *(void *)(v0 + 648)) {
      break;
    }
    uint64_t v36 = *(void *)(v0 + 680);
LABEL_17:
    *(void *)(v0 + 688) = v29;
    uint64_t v37 = *(void *)(v0 + 656);
    uint64_t v38 = *(void *)(v0 + 608);
    uint64_t v39 = *(void *)(v0 + 560);
    sub_10020F0D8(*(void *)(v0 + 568)+ ((*(unsigned __int8 *)(v0 + 712) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 712))+ v36 * v29, v38, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v40 = *(void *)(v39 + v37);
    uint64_t v41 = swift_task_alloc();
    char v42 = v41;
    *(void *)(v41 + 16) = v38;
    swift_bridgeObjectRetain();
    LOBYTE(v38) = sub_1001C1A68((uint64_t (*)(char *))sub_100210AF0, v42, v40);
    *(void *)(v0 + 696) = v2;
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    if ((v38 & 1) == 0)
    {
      uint64_t v63 = *(void *)(v0 + 384);
      uint64_t v64 = *(void *)(v0 + 392);
      sub_10000F3B0((void *)(v0 + 360), v63);
      char v72 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 + 16) + **(int **)(v64 + 16));
      uint64_t v65 = (void *)swift_task_alloc();
      *(void *)(v0 + 704) = v65;
      *uint64_t v65 = v0;
      v65[1] = sub_1001CCA9C;
      uint64_t v66 = *(void *)(v0 + 608);
      return v72(v1, v66, v63, v64);
    }
    sub_1001D430C(*(void *)(v0 + 608), (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  swift_bridgeObjectRelease();
  while (1)
  {
    uint64_t v30 = *(void *)(v0 + 640);
    uint64_t v31 = *(void *)(v0 + 672) + 1;
    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 360);
    if (v31 == v30) {
      break;
    }
    unint64_t v32 = *(void *)(v0 + 672) + 1;
    *(void *)(v0 + 672) = v32;
    uint64_t v33 = *(void *)(v0 + 632);
    if (v32 >= *(void *)(v33 + 16))
    {
      __break(1u);
LABEL_38:
      __break(1u);
    }
    uint64_t v34 = *(void *)(v0 + 648);
    sub_10000F578(v33 + 40 * v32 + 32, v0 + 360);
    if (v34)
    {
      uint64_t v35 = *(void *)(v0 + 592);
      *(_DWORD *)(v0 + 712) = *(_DWORD *)(v35 + 80);
      swift_bridgeObjectRetain();
      swift_beginAccess();
      uint64_t v29 = 0;
      uint64_t v36 = *(void *)(v35 + 72);
      *(void *)(v0 + 680) = v36;
      goto LABEL_17;
    }
  }
  uint64_t v43 = *(void *)(v0 + 624);
  uint64_t v44 = *(void *)(v0 + 560);
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(v44 + v43);
  uint64_t v46 = *(void *)(v45 + 16);
  if (!v46) {
    goto LABEL_31;
  }
  uint64_t v47 = v45 + 32;
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v74 = v46;
    uint64_t v48 = *(void *)(v0 + 616);
    uint64_t v49 = *(NSObject **)(v0 + 576);
    uint64_t v50 = *(void *)(v0 + 560);
    dispatch_group_enter(v49);
    uint64_t v51 = type metadata accessor for TaskPriority();
    uint64_t v52 = *(void *)(v51 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v48, 1, 1, v51);
    sub_10000F578(v47, (uint64_t)v71);
    double v53 = (void *)swift_allocObject();
    v53[2] = 0;
    uint64_t v54 = v53 + 2;
    v53[3] = 0;
    sub_1000321A8(v71, (uint64_t)(v53 + 4));
    v53[9] = v50;
    v53[10] = v49;
    LODWORD(v48) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v48, 1, v51);
    swift_retain();
    unint64_t v55 = v49;
    uint64_t v56 = *(void *)(v0 + 616);
    if (v48 == 1)
    {
      sub_10000FBD8(*(void *)(v0 + 616), &qword_10051A8C0);
      if (*v54) {
        goto LABEL_25;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v56, v51);
      if (*v54)
      {
LABEL_25:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v57 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v59 = v58;
        swift_unknownObjectRelease();
        goto LABEL_28;
      }
    }
    uint64_t v57 = 0;
    uint64_t v59 = 0;
LABEL_28:
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = &unk_100525268;
    *(void *)(v60 + 24) = v53;
    if (v59 | v57)
    {
      *(void *)(v0 + 440) = 0;
      *(void *)(v0 + 448) = 0;
      *(void *)(v0 + 456) = v57;
      *(void *)(v0 + 464) = v59;
    }
    swift_task_create();
    swift_release();
    v47 += 40;
    uint64_t v46 = v74 - 1;
  }
  while (v74 != 1);
  swift_bridgeObjectRelease();
LABEL_31:
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 576));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v61 = *(uint64_t (**)(void))(v0 + 8);
  return v61();
}

BOOL sub_1001CD6A8(uint64_t a1, long long *a2, long long *a3)
{
  sub_1000321A8(a2, (uint64_t)v14);
  sub_1000321A8(v14, (uint64_t)v15);
  if (v16 == 2)
  {
    sub_1000321A8(a3, (uint64_t)&v17);
    return v19 == 2;
  }
  long long v17 = v15[0];
  long long v18 = v15[1];
  uint64_t v19 = v16;
  sub_1000321A8(a3, (uint64_t)v7);
  if (v8 == 2) {
    return 0;
  }
  long long v9 = v7[0];
  long long v10 = v7[1];
  uint64_t v11 = v8;
  if (v17 != v7[0] || v18 != v10) {
    return 0;
  }
  sub_10020F6E0((int *)&v18 + 1, (uint64_t)&v24);
  sub_10020F6E0((int *)&v10 + 1, (uint64_t)&v13);
  sub_10020F6E0(&v24, (uint64_t)&v25);
  int v5 = v25;
  if (v26 == 1)
  {
    if (v25)
    {
      sub_10020F6E0(&v13, (uint64_t)&v20);
      if (v21 != 1 || !v20) {
        return 0;
      }
    }
    else
    {
      sub_10020F6E0(&v13, (uint64_t)&v20);
      if (v21 != 1 || v20) {
        return 0;
      }
    }
  }
  else
  {
    sub_10020F6E0(&v13, (uint64_t)&v20);
    if ((v21 & 1) != 0 || v5 != v20) {
      return 0;
    }
  }
  sub_100210218(&v19, &v23);
  sub_100210218(&v11, &v12);
  sub_100210218(&v23, &v27);
  if (v27 == 1)
  {
    sub_100210218(&v12, &v22);
    if (v22 == 1) {
      return 1;
    }
  }
  else if (v27)
  {
    sub_100210218(&v12, &v22);
    if (v22 > 1)
    {
      type metadata accessor for CGColor(0);
      sub_100210C2C(v14, (void (*)(void, void, void, void, void))sub_10020F1A8);
      sub_100210C2C(a3, (void (*)(void, void, void, void, void))sub_10020F1A8);
      sub_1001E227C(&qword_100524E78, type metadata accessor for CGColor);
      char v6 = static _CFObject.== infix(_:_:)();
      sub_100210C2C(a3, (void (*)(void, void, void, void, void))sub_10020F474);
      sub_100210C2C(v14, (void (*)(void, void, void, void, void))sub_10020F474);
      if (v6) {
        return 1;
      }
    }
  }
  else
  {
    sub_100210218(&v12, &v22);
    if (!v22) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1001CD964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  return _swift_task_switch(sub_1001CD988, 0, 0);
}

uint64_t sub_1001CD988()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10000F3B0(v1, v2);
  char v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  void *v4 = v0;
  v4[1] = sub_1001CDA88;
  return v6(v2, v3);
}

uint64_t sub_1001CDA88()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001CDBFC;
  }
  else {
    uint64_t v2 = sub_1001CDB9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CDB9C()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 72));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CDBFC()
{
  uint64_t v9 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_1003806B0(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to preheat processor: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 72));
  char v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001CDDF0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(unsigned char *)(result + 16) == 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1001CDE4C()
{
  return sub_1001CDF70((uint64_t)sub_1002106FC, (uint64_t)&unk_1004F0018);
}

uint64_t sub_1001CDE6C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    *(unsigned char *)(result + 16) = 1;
    swift_beginAccess();
    swift_retain();
    uint64_t v2 = swift_bridgeObjectRetain();
    sub_10020C53C(v2, v1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_beginAccess();
    swift_retain();
    uint64_t v3 = swift_bridgeObjectRetain();
    sub_10020C984(v3, v1);
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1001CDF50()
{
  return sub_1001CDF70((uint64_t)sub_1002106F4, (uint64_t)&unk_1004EFFF0);
}

uint64_t sub_1001CDF70(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)(v2 + 48);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = a1;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = a2;
  int v13 = _Block_copy(aBlock);
  id v14 = v11;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_1001E227C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_1001CE240()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(unsigned char *)(result + 16) != 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1001CE29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[8] = a6;
  v7[9] = v6;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  _OWORD v7[3] = a1;
  uint64_t v8 = type metadata accessor for OSSignpostError();
  v7[10] = v8;
  v7[11] = *(void *)(v8 - 8);
  v7[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OSSignpostID();
  v7[13] = v9;
  v7[14] = *(void *)(v9 - 8);
  v7[15] = swift_task_alloc();
  unsigned char v7[16] = swift_task_alloc();
  v7[17] = swift_task_alloc();
  return _swift_task_switch(sub_1001CE3E0, 0, 0);
}

uint64_t sub_1001CE3E0()
{
  uint64_t v1 = *(void *)(v0 + 72);
  *(void *)(v0 + 144) = OBJC_IVAR____TtC6Tamale13CVCoordinator_signposter;
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v2 = v1 + OBJC_IVAR____TtC6Tamale13CVCoordinator_signpostName;
  uint64_t v3 = *(char **)(v1 + OBJC_IVAR____TtC6Tamale13CVCoordinator_signpostName);
  *(void *)(v0 + 152) = v3;
  char v4 = *(unsigned char *)(v2 + 16);
  *(unsigned char *)(v0 + 216) = v4;
  uint64_t v5 = OSSignposter.logHandle.getter();
  os_signpost_type_t v6 = static os_signpost_type_t.begin.getter();
  uint64_t v7 = OS_os_log.signpostsEnabled.getter();
  if ((v7 & 1) == 0) {
    goto LABEL_5;
  }
  if (v4)
  {
    if ((unint64_t)v3 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v3 >> 11 == 27)
      {
LABEL_20:
        __break(1u);
        return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v7, v8, v9, v10, v11, v12, v13, v14);
      }
      if (v3 >> 16 <= 0x10)
      {
        uint64_t v3 = sub_10018C6C4();
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
  if (!v3)
  {
    __break(1u);
LABEL_5:
    uint64_t v15 = *(void *)(v0 + 112);

    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    unint64_t v17 = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v18 = *(void *)(v0 + 128);
  uint64_t v19 = *(void *)(v0 + 104);
  uint64_t v20 = *(void *)(v0 + 112);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  unint64_t v17 = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v16(v18, *(void *)(v0 + 136), v19);
  char v21 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)char v21 = 0;
  os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v22, v3, "", v21, 2u);
  swift_slowDealloc();

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
LABEL_11:
  uint64_t v24 = *(void *)(v0 + 128);
  uint64_t v23 = *(void *)(v0 + 136);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v27 = *(void *)(v0 + 56);
  uint64_t v26 = *(void *)(v0 + 64);
  uint64_t v28 = *(void *)(v0 + 40);
  uint64_t v29 = *(void *)(v0 + 24);
  *(void *)(v0 + 160) = v16;
  *(void *)(v0 + 168) = v17;
  v16(v24, v23, v25);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(void *)(v0 + 176) = OSSignpostIntervalState.init(id:isOpen:)();
  clock_gettime_nsec_np(_CLOCK_UPTIME_RAW_APPROX);
  id v30 = sub_1001CEC68(v29, v28, v27, v26);
  *(void *)(v0 + 184) = v30;
  if (v30)
  {
    id v31 = v30;
    uint64_t v32 = *(void *)(v0 + 72);
    uint64_t v33 = sub_10000F214(&qword_10051CA60);
    uint64_t v34 = swift_task_alloc();
    *(void *)(v0 + 192) = v34;
    long long v35 = *(_OWORD *)(v0 + 24);
    long long v36 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v34 + 16) = *(_OWORD *)(v0 + 56);
    *(void *)(v34 + 32) = v32;
    *(void *)(v34 + 40) = v31;
    *(_OWORD *)(v34 + 48) = v35;
    *(_OWORD *)(v34 + 64) = v36;
    uint64_t v37 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v37;
    *uint64_t v37 = v0;
    v37[1] = sub_1001CE7A0;
    uint64_t v12 = &unk_100525150;
    uint64_t v7 = v0 + 16;
    uint64_t v8 = v33;
    uint64_t v9 = v33;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v13 = v34;
    uint64_t v14 = v33;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  uint64_t v38 = *(void *)(v0 + 136);
  uint64_t v39 = *(void *)(v0 + 104);
  uint64_t v40 = *(void *)(v0 + 112);
  sub_10021027C();
  swift_allocError();
  *(void *)uint64_t v41 = 0;
  *(void *)(v41 + 8) = 0;
  *(unsigned char *)(v41 + 16) = 2;
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v42 = *(uint64_t (**)(void))(v0 + 8);
  return v42();
}

uint64_t sub_1001CE7A0()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001CEBB0;
  }
  else {
    uint64_t v2 = sub_1001CE8D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CE8D4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v3 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v5 = *(char **)(v0 + 152);
  os_signpost_type_t v27 = v3;
  if (*(unsigned char *)(v0 + 216))
  {
    if ((unint64_t)v5 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v5 >> 11 == 27)
      {
LABEL_19:
        __break(1u);
        return result;
      }
      if (v5 >> 16 <= 0x10)
      {
        uint64_t v5 = sub_10018C6C4();
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  if (v5)
  {
LABEL_10:
    uint64_t v26 = v1;
    uint64_t v12 = *(void *)(v0 + 88);
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 80);
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 88))(v13, v14) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v15 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
      uint64_t v15 = "";
    }
    uint64_t v16 = *(void **)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 128);
    uint64_t v25 = *(void *)(v0 + 136);
    uint64_t v19 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 160))(v17, v18, v20);
    char v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v21 = 0;
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, v27, v22, v5, v15, v21, 2u);
    swift_slowDealloc();

    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v23(v18, v20);
    v23(v25, v20);
    swift_release();
    v23(v17, v20);
    uint64_t v1 = v26;
    goto LABEL_14;
  }
  __break(1u);
LABEL_5:
  os_signpost_type_t v6 = *(void **)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 104);

  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v11(v8, v10);
  v11(v7, v10);
  swift_release();
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v24(v1);
}

uint64_t sub_1001CEBB0()
{
  uint64_t v1 = (void *)v0[23];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

id sub_1001CEC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  id v7 = v5;
  if (v6)
  {
    sub_1000ACF28(v5, v6);
    sub_10000FC34(a2, (uint64_t)&v10, &qword_100525170);
    id v7 = v11;
    if (v11 == (id)1) {
      return 0;
    }
    else {
      id v8 = v11;
    }
  }
  return v7;
}

uint64_t sub_1001CECF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = v12;
  v8[14] = v13;
  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  _OWORD v8[8] = a4;
  void v8[5] = a1;
  v8[6] = a2;
  uint64_t v9 = sub_10000F214((uint64_t *)&unk_100525158);
  v8[15] = v9;
  unsigned char v8[16] = *(void *)(v9 - 8);
  v8[17] = swift_task_alloc();
  return _swift_task_switch(sub_1001CEDD0, 0, 0);
}

uint64_t sub_1001CEDD0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + OBJC_IVAR____TtC6Tamale13CVCoordinator_processors);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1001CF214(v3, *(void *)(v0 + 48), *(void **)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  sub_10000F214(&qword_10051CA60);
  sub_10000F214(&qword_10051F3B0);
  ThrowingTaskGroup.makeAsyncIterator()();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v4;
  void *v4 = v0;
  v4[1] = sub_1001CEF48;
  uint64_t v5 = *(void *)(v0 + 120);
  return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 24, 0, 0, v5, v0 + 32);
}

uint64_t sub_1001CEF48()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_1001CF194;
  }
  else
  {
    uint64_t v1 = sub_1001CF060;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_1001CF060()
{
  uint64_t v1 = v0[3];
  if (v1)
  {
    sub_10019FF48(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[18] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001CEF48;
    uint64_t v3 = v0[15];
    return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 3, 0, 0, v3, v0 + 4);
  }
  else
  {
    uint64_t v4 = (void *)v0[5];
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
    void *v4 = v0[2];
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1001CF194()
{
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001CF214(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v30 = a5;
  uint64_t v33 = a2;
  uint64_t v13 = *(void *)(a8 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v29 = a9;
  __chkstk_darwin(a1);
  uint64_t v28 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  sub_10000F578(a1, (uint64_t)v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a4, a8);
  unint64_t v19 = (*(unsigned __int8 *)(v13 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v20 = (v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  os_signpost_id_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = 0;
  *((void *)v22 + 3) = 0;
  uint64_t v23 = v29;
  *((void *)v22 + 4) = a8;
  *((void *)v22 + 5) = v23;
  sub_1000321A8(v34, (uint64_t)(v22 + 48));
  *((void *)v22 + 11) = a3;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v22[v19], v28, a8);
  *(void *)&v22[v20] = v30;
  uint64_t v24 = v31;
  sub_10000FC34(v31, (uint64_t)&v22[v21], &qword_100525170);
  sub_10000FC34(v32, (uint64_t)&v22[(v21 + 55) & 0xFFFFFFFFFFFFFFF8], (uint64_t *)&unk_100518AE0);
  id v25 = a3;
  swift_bridgeObjectRetain();
  sub_100210640(v24);
  sub_1001C2A10((uint64_t)v17, (uint64_t)&unk_100525178, (uint64_t)v22);
  return sub_10000FBD8((uint64_t)v17, &qword_10051A8C0);
}

uint64_t sub_1001CF49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 168) = v11;
  *(_OWORD *)(v8 + 152) = v10;
  *(void *)(v8 + 136) = a7;
  *(void *)(v8 + 144) = a8;
  *(void *)(v8 + 120) = a5;
  *(void *)(v8 + 128) = a6;
  *(void *)(v8 + 104) = a1;
  *(void *)(v8 + 112) = a4;
  return _swift_task_switch(sub_1001CF4D8, 0, 0);
}

void sub_1001CF4D8()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void **)(v0 + 112);
  uint64_t v3 = v2[4];
  sub_10000F3B0(v2, v2[3]);
  sub_10000FC34(v1, v0 + 16, &qword_100525170);
  if (*(void *)(v0 + 56) == 1)
  {
    long long v4 = 0uLL;
    uint64_t v5 = 3;
    long long v6 = 0uLL;
  }
  else
  {
    long long v4 = *(_OWORD *)(v0 + 16);
    long long v6 = *(_OWORD *)(v0 + 32);
    uint64_t v5 = *(void *)(v0 + 48);
  }
  *(_OWORD *)(v0 + 64) = v4;
  *(_OWORD *)(v0 + 80) = v6;
  *(void *)(v0 + 96) = v5;
  uint64_t v8 = *(void *)(v3 + 8) + **(int **)(v3 + 8);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001CF654;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_1001CF654(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    long long v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 184) = a1;
    return _swift_task_switch(sub_1001CF7A0, 0, 0);
  }
}

uint64_t sub_1001CF7A0()
{
  **(void **)(v0 + 104) = *(void *)(v0 + 184);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CF7C4()
{
  swift_unknownObjectRelease();
  swift_release();

  sub_10000FBD8(v0 + 56, &qword_100525188);
  swift_release();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale13CVCoordinator_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC6Tamale13CVCoordinator_signposter;
  uint64_t v4 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FBD8(v0 + OBJC_IVAR____TtC6Tamale13CVCoordinator_streamingMetadataConsumer, &qword_100525190);
  return v0;
}

uint64_t sub_1001CF904()
{
  sub_1001CF7C4();

  return swift_deallocClassInstance();
}

uint64_t sub_1001CF95C()
{
  return type metadata accessor for CVCoordinator(0);
}

uint64_t type metadata accessor for CVCoordinator(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100524900);
}

uint64_t sub_1001CF984()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OSSignposter();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void *sub_1001CFAE0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = a3;
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v275 = v6;
        uint64_t v20 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
        unint64_t v21 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)((char *)a1 + v21[5]) = *(_DWORD *)((char *)a2 + v21[5]);
        uint64_t v22 = v21[6];
        uint64_t v23 = (_OWORD *)((char *)a1 + v22);
        uint64_t v24 = (_OWORD *)((char *)a2 + v22);
        long long v25 = v24[3];
        void v23[2] = v24[2];
        v23[3] = v25;
        long long v26 = v24[1];
        *uint64_t v23 = *v24;
        v23[1] = v26;
        *(void *)((char *)a1 + v21[7]) = *(void *)((char *)a2 + v21[7]);
        *(void *)((char *)a1 + v21[8]) = *(void *)((char *)a2 + v21[8]);
        *(void *)((char *)a1 + v21[9]) = *(void *)((char *)a2 + v21[9]);
        *((unsigned char *)a1 + v21[10]) = *((unsigned char *)a2 + v21[10]);
        uint64_t v27 = v21[11];
        uint64_t v28 = (void *)((char *)a1 + v27);
        uint64_t v29 = (void *)((char *)a2 + v27);
        uint64_t v30 = v29[1];
        *uint64_t v28 = *v29;
        v28[1] = v30;
        uint64_t v31 = v21[12];
        uint64_t v32 = (void *)((char *)a1 + v31);
        uint64_t v33 = (void *)((char *)a2 + v31);
        uint64_t v34 = v33[1];
        *uint64_t v32 = *v33;
        v32[1] = v34;
        uint64_t v35 = v21[13];
        __dst = (char *)a1 + v35;
        long long v36 = (char *)a2 + v35;
        uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v38 = *(void *)(v37 - 8);
        uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v39(v36, 1, v37))
        {
          uint64_t v40 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v36, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
        }
        uint64_t v6 = v275;
        uint64_t v80 = v21[14];
        CGRect v81 = (char *)a1 + v80;
        long long v82 = (char *)a2 + v80;
        unint64_t v83 = *((void *)v82 + 1);
        if (v83 >> 60 == 15)
        {
          *(_OWORD *)CGRect v81 = *(_OWORD *)v82;
        }
        else
        {
          uint64_t v84 = *(void *)v82;
          sub_100038528(*(void *)v82, *((void *)v82 + 1));
          *(void *)CGRect v81 = v84;
          *((void *)v81 + 1) = v83;
        }
        uint64_t v85 = v21[15];
        uint64_t v86 = (void *)((char *)a1 + v85);
        uint64_t v87 = (void *)((char *)a2 + v85);
        if (*v87)
        {
          uint64_t v88 = v87[1];
          uint64_t v89 = v87[2];
          void *v86 = *v87;
          v86[1] = v88;
          v86[2] = v89;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
          v86[2] = v87[2];
        }
        break;
      case 2u:
        uint64_t v41 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        char v42 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v42[5]) = *(_DWORD *)((char *)a2 + v42[5]);
        uint64_t v43 = v42[6];
        uint64_t v44 = (_OWORD *)((char *)a1 + v43);
        uint64_t v45 = (_OWORD *)((char *)a2 + v43);
        long long v46 = v45[3];
        v44[2] = v45[2];
        v44[3] = v46;
        long long v47 = v45[1];
        *uint64_t v44 = *v45;
        v44[1] = v47;
        uint64_t v48 = v42[7];
        uint64_t v49 = (void *)((char *)a1 + v48);
        uint64_t v50 = (void *)((char *)a2 + v48);
        uint64_t v52 = *v50;
        uint64_t v51 = v50[1];
        *uint64_t v49 = v52;
        v49[1] = v51;
        *(void *)((char *)a1 + v42[8]) = *(void *)((char *)a2 + v42[8]);
        *(void *)((char *)a1 + v42[9]) = *(void *)((char *)a2 + v42[9]);
        *(void *)((char *)a1 + v42[10]) = *(void *)((char *)a2 + v42[10]);
        *(void *)((char *)a1 + v42[11]) = *(void *)((char *)a2 + v42[11]);
        *(void *)((char *)a1 + v42[12]) = *(void *)((char *)a2 + v42[12]);
        uint64_t v53 = v42[13];
        uint64_t v54 = *(void **)((char *)a2 + v53);
        *(void *)((char *)a1 + v53) = v54;
        *((unsigned char *)a1 + v42[14]) = *((unsigned char *)a2 + v42[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v55 = v54;
        break;
      case 3u:
      case 4u:
        uint64_t v56 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
        uint64_t v57 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)((char *)a1 + v57[5]) = *(_DWORD *)((char *)a2 + v57[5]);
        uint64_t v58 = v57[6];
        uint64_t v59 = (_OWORD *)((char *)a1 + v58);
        uint64_t v60 = (_OWORD *)((char *)a2 + v58);
        long long v61 = v60[3];
        v59[2] = v60[2];
        v59[3] = v61;
        long long v62 = v60[1];
        *uint64_t v59 = *v60;
        v59[1] = v62;
        uint64_t v63 = v57[7];
        uint64_t v64 = (void *)((char *)a1 + v63);
        uint64_t v65 = (void *)((char *)a2 + v63);
        uint64_t v67 = *v65;
        uint64_t v66 = v65[1];
        *uint64_t v64 = v67;
        v64[1] = v66;
        *(void *)((char *)a1 + v57[8]) = *(void *)((char *)a2 + v57[8]);
        *(void *)((char *)a1 + v57[9]) = *(void *)((char *)a2 + v57[9]);
        *(void *)((char *)a1 + v57[10]) = *(void *)((char *)a2 + v57[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v68 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v68 - 8) + 16))(a1, a2, v68);
        uint64_t v69 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v69[5]) = *(_DWORD *)((char *)a2 + v69[5]);
        uint64_t v70 = v69[6];
        uint64_t v71 = (_OWORD *)((char *)a1 + v70);
        char v72 = (_OWORD *)((char *)a2 + v70);
        long long v73 = v72[3];
        v71[2] = v72[2];
        v71[3] = v73;
        long long v74 = v72[1];
        *uint64_t v71 = *v72;
        v71[1] = v74;
        uint64_t v75 = v69[7];
        uint64_t v76 = (void *)((char *)a1 + v75);
        uint64_t v77 = (void *)((char *)a2 + v75);
        uint64_t v79 = *v77;
        uint64_t v78 = v77[1];
        *uint64_t v76 = v79;
        v76[1] = v78;
        *(void *)((char *)a1 + v69[8]) = *(void *)((char *)a2 + v69[8]);
        *(void *)((char *)a1 + v69[9]) = *(void *)((char *)a2 + v69[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)((char *)a1 + v8[5]) = *(_DWORD *)((char *)a2 + v8[5]);
        uint64_t v9 = v8[6];
        long long v10 = (_OWORD *)((char *)a1 + v9);
        uint64_t v11 = (_OWORD *)((char *)a2 + v9);
        long long v12 = v11[3];
        void v10[2] = v11[2];
        v10[3] = v12;
        long long v13 = v11[1];
        *long long v10 = *v11;
        v10[1] = v13;
        uint64_t v14 = v8[7];
        uint64_t v15 = (void *)((char *)a1 + v14);
        uint64_t v16 = (void *)((char *)a2 + v14);
        uint64_t v18 = *v16;
        uint64_t v17 = v16[1];
        *uint64_t v15 = v18;
        v15[1] = v17;
        *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
        *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v90 = (int *)type metadata accessor for DetectionRequest(0);
    uint64_t v91 = v90[5];
    int v92 = (void *)((char *)a1 + v91);
    int v93 = (void *)((char *)a2 + v91);
    uint64_t v94 = type metadata accessor for DetectionRequest.Originator(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *int v92 = *v93;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v276 = v6;
      uint64_t v265 = type metadata accessor for UUID();
      __dstb = (void (**)(char *, char *, uint64_t))(*(void *)(v265 - 8) + 16);
      v271 = *__dstb;
      ((void (*)(void *, void *))*__dstb)(v92, v93);
      uint64_t v98 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v99 = v98[5];
      uint64_t v100 = (char *)v92 + v99;
      uint64_t v101 = (char *)v93 + v99;
      v264 = v98;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v271(v100, v101, v265);
          uint64_t v113 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v100[v113[5]] = *(_DWORD *)&v101[v113[5]];
          uint64_t v114 = v113[6];
          uint64_t v115 = &v100[v114];
          uint64_t v116 = &v101[v114];
          long long v117 = *((_OWORD *)v116 + 3);
          *((_OWORD *)v115 + 2) = *((_OWORD *)v116 + 2);
          *((_OWORD *)v115 + 3) = v117;
          long long v118 = *((_OWORD *)v116 + 1);
          *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
          *((_OWORD *)v115 + 1) = v118;
          *(void *)&v100[v113[7]] = *(void *)&v101[v113[7]];
          *(void *)&v100[v113[8]] = *(void *)&v101[v113[8]];
          *(void *)&v100[v113[9]] = *(void *)&v101[v113[9]];
          v100[v113[10]] = v101[v113[10]];
          uint64_t v119 = v113[11];
          uint64_t v120 = &v100[v119];
          uint64_t v121 = &v101[v119];
          uint64_t v253 = *((void *)v121 + 1);
          *(void *)uint64_t v120 = *(void *)v121;
          *((void *)v120 + 1) = v253;
          uint64_t v122 = v113[12];
          int v123 = &v100[v122];
          uint64_t v124 = &v101[v122];
          uint64_t v252 = *((void *)v124 + 1);
          *(void *)int v123 = *(void *)v124;
          *((void *)v123 + 1) = v252;
          uint64_t v125 = v113[13];
          v256 = v113;
          v258 = &v100[v125];
          v261 = &v101[v125];
          uint64_t v126 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v250 = *(void *)(v126 - 8);
          v251 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v250 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v251(v261, 1, v126))
          {
            uint64_t v127 = sub_10000F214(&qword_100524BD0);
            memcpy(v258, v261, *(void *)(*(void *)(v127 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v250 + 16))(v258, v261, v126);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v250 + 56))(v258, 0, 1, v126);
          }
          uint64_t v163 = v256[14];
          long long v164 = &v100[v163];
          long long v165 = (uint64_t *)&v101[v163];
          unint64_t v166 = v165[1];
          if (v166 >> 60 == 15)
          {
            *(_OWORD *)long long v164 = *(_OWORD *)v165;
          }
          else
          {
            v259 = (uint64_t *)v164;
            uint64_t v263 = *v165;
            sub_100038528(*v165, v166);
            uint64_t *v259 = v263;
            v259[1] = v166;
          }
          uint64_t v167 = v256[15];
          long long v168 = &v100[v167];
          uint64_t v169 = &v101[v167];
          if (*(void *)v169)
          {
            uint64_t v170 = *((void *)v169 + 1);
            uint64_t v171 = *((void *)v169 + 2);
            *(void *)long long v168 = *(void *)v169;
            *((void *)v168 + 1) = v170;
            *((void *)v168 + 2) = v171;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)long long v168 = *(_OWORD *)v169;
            *((void *)v168 + 2) = *((void *)v169 + 2);
          }
          uint64_t v98 = v264;
          break;
        case 2u:
          v271(v100, v101, v265);
          uint64_t v128 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v100[v128[5]] = *(_DWORD *)&v101[v128[5]];
          uint64_t v129 = v128[6];
          long long v130 = &v100[v129];
          long long v131 = &v101[v129];
          long long v132 = *((_OWORD *)v131 + 3);
          *((_OWORD *)v130 + 2) = *((_OWORD *)v131 + 2);
          *((_OWORD *)v130 + 3) = v132;
          long long v133 = *((_OWORD *)v131 + 1);
          *(_OWORD *)long long v130 = *(_OWORD *)v131;
          *((_OWORD *)v130 + 1) = v133;
          uint64_t v134 = v128[7];
          uint64_t v135 = &v100[v134];
          uint64_t v136 = &v101[v134];
          uint64_t v138 = *(void *)v136;
          uint64_t v137 = *((void *)v136 + 1);
          *(void *)uint64_t v135 = v138;
          *((void *)v135 + 1) = v137;
          *(void *)&v100[v128[8]] = *(void *)&v101[v128[8]];
          *(void *)&v100[v128[9]] = *(void *)&v101[v128[9]];
          *(void *)&v100[v128[10]] = *(void *)&v101[v128[10]];
          *(void *)&v100[v128[11]] = *(void *)&v101[v128[11]];
          *(void *)&v100[v128[12]] = *(void *)&v101[v128[12]];
          uint64_t v139 = v128[13];
          v262 = *(void **)&v101[v139];
          *(void *)&v100[v139] = v262;
          v100[v128[14]] = v101[v128[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v140 = v262;
          break;
        case 3u:
        case 4u:
          v271(v100, v101, v265);
          char v141 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v100[v141[5]] = *(_DWORD *)&v101[v141[5]];
          uint64_t v142 = v141[6];
          char v143 = &v100[v142];
          uint64_t v144 = &v101[v142];
          long long v145 = *((_OWORD *)v144 + 3);
          *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
          *((_OWORD *)v143 + 3) = v145;
          long long v146 = *((_OWORD *)v144 + 1);
          *(_OWORD *)char v143 = *(_OWORD *)v144;
          *((_OWORD *)v143 + 1) = v146;
          uint64_t v147 = v141[7];
          uint64_t v148 = &v100[v147];
          char v149 = &v101[v147];
          uint64_t v151 = *(void *)v149;
          uint64_t v150 = *((void *)v149 + 1);
          *(void *)uint64_t v148 = v151;
          *((void *)v148 + 1) = v150;
          *(void *)&v100[v141[8]] = *(void *)&v101[v141[8]];
          *(void *)&v100[v141[9]] = *(void *)&v101[v141[9]];
          *(void *)&v100[v141[10]] = *(void *)&v101[v141[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v271(v100, v101, v265);
          long long v152 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v100[v152[5]] = *(_DWORD *)&v101[v152[5]];
          uint64_t v153 = v152[6];
          uint64_t v154 = &v100[v153];
          long long v155 = &v101[v153];
          long long v156 = *((_OWORD *)v155 + 3);
          *((_OWORD *)v154 + 2) = *((_OWORD *)v155 + 2);
          *((_OWORD *)v154 + 3) = v156;
          long long v157 = *((_OWORD *)v155 + 1);
          *(_OWORD *)uint64_t v154 = *(_OWORD *)v155;
          *((_OWORD *)v154 + 1) = v157;
          uint64_t v158 = v152[7];
          long long v159 = &v100[v158];
          long long v160 = &v101[v158];
          uint64_t v162 = *(void *)v160;
          uint64_t v161 = *((void *)v160 + 1);
          *(void *)long long v159 = v162;
          *((void *)v159 + 1) = v161;
          *(void *)&v100[v152[8]] = *(void *)&v101[v152[8]];
          *(void *)&v100[v152[9]] = *(void *)&v101[v152[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v271(v100, v101, v265);
          uint64_t v102 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v100[v102[5]] = *(_DWORD *)&v101[v102[5]];
          uint64_t v103 = v102[6];
          uint64_t v104 = &v100[v103];
          int v105 = &v101[v103];
          long long v106 = *((_OWORD *)v105 + 3);
          *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
          *((_OWORD *)v104 + 3) = v106;
          long long v107 = *((_OWORD *)v105 + 1);
          *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
          *((_OWORD *)v104 + 1) = v107;
          uint64_t v108 = v102[7];
          unint64_t v109 = &v100[v108];
          uint64_t v110 = &v101[v108];
          uint64_t v112 = *(void *)v110;
          uint64_t v111 = *((void *)v110 + 1);
          *(void *)unint64_t v109 = v112;
          *((void *)v109 + 1) = v111;
          *(void *)&v100[v102[8]] = *(void *)&v101[v102[8]];
          *(void *)&v100[v102[9]] = *(void *)&v101[v102[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v172 = v98[6];
      long long v173 = (char *)v92 + v172;
      uint64_t v174 = (char *)v93 + v172;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v271(v173, v174, v265);
          uint64_t v186 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v173[v186[5]] = *(_DWORD *)&v174[v186[5]];
          uint64_t v187 = v186[6];
          unint64_t v188 = &v173[v187];
          v189 = &v174[v187];
          long long v190 = *((_OWORD *)v189 + 3);
          *((_OWORD *)v188 + 2) = *((_OWORD *)v189 + 2);
          *((_OWORD *)v188 + 3) = v190;
          long long v191 = *((_OWORD *)v189 + 1);
          *(_OWORD *)unint64_t v188 = *(_OWORD *)v189;
          *((_OWORD *)v188 + 1) = v191;
          *(void *)&v173[v186[7]] = *(void *)&v174[v186[7]];
          *(void *)&v173[v186[8]] = *(void *)&v174[v186[8]];
          *(void *)&v173[v186[9]] = *(void *)&v174[v186[9]];
          v173[v186[10]] = v174[v186[10]];
          uint64_t v192 = v186[11];
          v193 = &v173[v192];
          v194 = &v174[v192];
          uint64_t v260 = *((void *)v194 + 1);
          *(void *)v193 = *(void *)v194;
          *((void *)v193 + 1) = v260;
          uint64_t v195 = v186[12];
          uint64_t v196 = &v173[v195];
          v197 = &v174[v195];
          uint64_t v257 = *((void *)v197 + 1);
          *(void *)uint64_t v196 = *(void *)v197;
          *((void *)v196 + 1) = v257;
          uint64_t v198 = v186[13];
          v266 = v186;
          __dsta = &v173[v198];
          v272 = &v174[v198];
          uint64_t v199 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v254 = *(void *)(v199 - 8);
          v255 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v254 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v255(v272, 1, v199))
          {
            uint64_t v200 = sub_10000F214(&qword_100524BD0);
            memcpy(__dsta, v272, *(void *)(*(void *)(v200 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v254 + 16))(__dsta, v272, v199);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v254 + 56))(__dsta, 0, 1, v199);
          }
          uint64_t v236 = v266[14];
          v237 = &v173[v236];
          uint64_t v238 = (uint64_t *)&v174[v236];
          unint64_t v239 = v238[1];
          if (v239 >> 60 == 15)
          {
            *(_OWORD *)v237 = *(_OWORD *)v238;
          }
          else
          {
            __dstc = (uint64_t *)v237;
            uint64_t v274 = *v238;
            sub_100038528(*v238, v239);
            uint64_t *__dstc = v274;
            __dstc[1] = v239;
          }
          uint64_t v240 = v266[15];
          v241 = &v173[v240];
          v242 = &v174[v240];
          if (*(void *)v242)
          {
            uint64_t v243 = *((void *)v242 + 1);
            uint64_t v244 = *((void *)v242 + 2);
            *(void *)v241 = *(void *)v242;
            *((void *)v241 + 1) = v243;
            *((void *)v241 + 2) = v244;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)v241 = *(_OWORD *)v242;
            *((void *)v241 + 2) = *((void *)v242 + 2);
          }
          uint64_t v98 = v264;
          break;
        case 2u:
          v271(v173, v174, v265);
          unint64_t v201 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v173[v201[5]] = *(_DWORD *)&v174[v201[5]];
          uint64_t v202 = v201[6];
          v203 = &v173[v202];
          v204 = &v174[v202];
          long long v205 = *((_OWORD *)v204 + 3);
          *((_OWORD *)v203 + 2) = *((_OWORD *)v204 + 2);
          *((_OWORD *)v203 + 3) = v205;
          long long v206 = *((_OWORD *)v204 + 1);
          *(_OWORD *)v203 = *(_OWORD *)v204;
          *((_OWORD *)v203 + 1) = v206;
          uint64_t v207 = v201[7];
          v208 = &v173[v207];
          v209 = &v174[v207];
          uint64_t v211 = *(void *)v209;
          uint64_t v210 = *((void *)v209 + 1);
          *(void *)v208 = v211;
          *((void *)v208 + 1) = v210;
          *(void *)&v173[v201[8]] = *(void *)&v174[v201[8]];
          *(void *)&v173[v201[9]] = *(void *)&v174[v201[9]];
          *(void *)&v173[v201[10]] = *(void *)&v174[v201[10]];
          *(void *)&v173[v201[11]] = *(void *)&v174[v201[11]];
          *(void *)&v173[v201[12]] = *(void *)&v174[v201[12]];
          uint64_t v212 = v201[13];
          v273 = *(void **)&v174[v212];
          *(void *)&v173[v212] = v273;
          v173[v201[14]] = v174[v201[14]];
          swift_bridgeObjectRetain();
          uint64_t v98 = v264;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v213 = v273;
          break;
        case 3u:
        case 4u:
          v271(v173, v174, v265);
          uint64_t v214 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v173[v214[5]] = *(_DWORD *)&v174[v214[5]];
          uint64_t v215 = v214[6];
          v216 = &v173[v215];
          v217 = &v174[v215];
          long long v218 = *((_OWORD *)v217 + 3);
          *((_OWORD *)v216 + 2) = *((_OWORD *)v217 + 2);
          *((_OWORD *)v216 + 3) = v218;
          long long v219 = *((_OWORD *)v217 + 1);
          *(_OWORD *)v216 = *(_OWORD *)v217;
          *((_OWORD *)v216 + 1) = v219;
          uint64_t v220 = v214[7];
          uint64_t v221 = &v173[v220];
          uint64_t v222 = &v174[v220];
          uint64_t v224 = *(void *)v222;
          uint64_t v223 = *((void *)v222 + 1);
          *(void *)uint64_t v221 = v224;
          *((void *)v221 + 1) = v223;
          *(void *)&v173[v214[8]] = *(void *)&v174[v214[8]];
          *(void *)&v173[v214[9]] = *(void *)&v174[v214[9]];
          *(void *)&v173[v214[10]] = *(void *)&v174[v214[10]];
          swift_bridgeObjectRetain();
          uint64_t v98 = v264;
          swift_retain();
          break;
        case 5u:
          v271(v173, v174, v265);
          uint64_t v225 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v173[v225[5]] = *(_DWORD *)&v174[v225[5]];
          uint64_t v226 = v225[6];
          uint64_t v227 = &v173[v226];
          uint64_t v228 = &v174[v226];
          long long v229 = *((_OWORD *)v228 + 3);
          *((_OWORD *)v227 + 2) = *((_OWORD *)v228 + 2);
          *((_OWORD *)v227 + 3) = v229;
          long long v230 = *((_OWORD *)v228 + 1);
          *(_OWORD *)uint64_t v227 = *(_OWORD *)v228;
          *((_OWORD *)v227 + 1) = v230;
          uint64_t v231 = v225[7];
          uint64_t v232 = &v173[v231];
          uint64_t v233 = &v174[v231];
          uint64_t v235 = *(void *)v233;
          uint64_t v234 = *((void *)v233 + 1);
          *(void *)uint64_t v232 = v235;
          *((void *)v232 + 1) = v234;
          *(void *)&v173[v225[8]] = *(void *)&v174[v225[8]];
          *(void *)&v173[v225[9]] = *(void *)&v174[v225[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v271(v173, v174, v265);
          uint64_t v175 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v173[v175[5]] = *(_DWORD *)&v174[v175[5]];
          uint64_t v176 = v175[6];
          uint64_t v177 = &v173[v176];
          uint64_t v178 = &v174[v176];
          long long v179 = *((_OWORD *)v178 + 3);
          *((_OWORD *)v177 + 2) = *((_OWORD *)v178 + 2);
          *((_OWORD *)v177 + 3) = v179;
          long long v180 = *((_OWORD *)v178 + 1);
          *(_OWORD *)uint64_t v177 = *(_OWORD *)v178;
          *((_OWORD *)v177 + 1) = v180;
          uint64_t v181 = v175[7];
          unint64_t v182 = &v173[v181];
          uint64_t v183 = &v174[v181];
          uint64_t v185 = *(void *)v183;
          uint64_t v184 = *((void *)v183 + 1);
          *(void *)unint64_t v182 = v185;
          *((void *)v182 + 1) = v184;
          *(void *)&v173[v175[8]] = *(void *)&v174[v175[8]];
          *(void *)&v173[v175[9]] = *(void *)&v174[v175[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v6 = v276;
      *((unsigned char *)v92 + v98[7]) = *((unsigned char *)v93 + v98[7]);
      *(void *)((char *)v92 + v98[8]) = *(void *)((char *)v93 + v98[8]);
      *(_DWORD *)((char *)v92 + v98[9]) = *(_DWORD *)((char *)v93 + v98[9]);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
LABEL_55:
        uint64_t v245 = v90[6];
        v246 = (_OWORD *)((char *)a1 + v245);
        v247 = (_OWORD *)((char *)a2 + v245);
        long long v248 = v247[1];
        _OWORD *v246 = *v247;
        v246[1] = v248;
        *(void *)((char *)a1 + v90[7]) = *(void *)((char *)a2 + v90[7]);
        *(void *)((char *)a1 + *(int *)(v6 + 20)) = *(void *)((char *)a2 + *(int *)(v6 + 20));
        swift_bridgeObjectRetain();
        return a1;
      }
      uint64_t v96 = *v93;
      unint64_t v97 = v93[1];
      sub_100038528(*v93, v97);
      *int v92 = v96;
      v92[1] = v97;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_55;
  }
  uint64_t v19 = *a2;
  *a1 = *a2;
  a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for DetectionRequest(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100524D70);
}

uint64_t type metadata accessor for DetectionRequest.Originator(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100524CD8);
}

uint64_t sub_1001D100C(uint64_t a1)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      int v5 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = a1 + v5[13];
      uint64_t v7 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      }
      uint64_t v9 = (uint64_t *)(a1 + v5[14]);
      unint64_t v10 = v9[1];
      if (v10 >> 60 != 15) {
        sub_100038B34(*v9, v10);
      }
      if (*(void *)(a1 + v5[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      uint64_t v12 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v2 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v14 = a1 + *(int *)(type metadata accessor for DetectionRequest(0) + 20);
  type metadata accessor for DetectionRequest.Originator(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
LABEL_41:
      swift_bridgeObjectRelease();
      break;
    case 2:
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
      v17(v14, v16);
      uint64_t v18 = type metadata accessor for CVTrackSnapshot(0);
      uint64_t v19 = v14 + *(int *)(v18 + 20);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v17(v19, v16);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_29;
        case 1u:
          v17(v19, v16);
          uint64_t v20 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v21 = v19 + v20[13];
          uint64_t v22 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v37 = *(void *)(v22 - 8);
          uint64_t v38 = v21;
          uint64_t v23 = v21;
          uint64_t v24 = v22;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v23, 1, v22)) {
            (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v24);
          }
          long long v25 = (uint64_t *)(v19 + v20[14]);
          unint64_t v26 = v25[1];
          if (v26 >> 60 != 15) {
            sub_100038B34(*v25, v26);
          }
          if (*(void *)(v19 + v20[15]))
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v17(v19, v16);
          uint64_t v27 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v17(v19, v16);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v17(v19, v16);
          type metadata accessor for StreamingTextDetectorResult(0);
LABEL_29:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      uint64_t v28 = v14 + *(int *)(v18 + 24);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v17(v28, v16);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_41;
        case 1u:
          v17(v28, v16);
          uint64_t v29 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v30 = v28 + v29[13];
          uint64_t v31 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v32 = *(void *)(v31 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31)) {
            (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
          }
          uint64_t v33 = (uint64_t *)(v28 + v29[14]);
          unint64_t v34 = v33[1];
          if (v34 >> 60 != 15) {
            sub_100038B34(*v33, v34);
          }
          if (*(void *)(v28 + v29[15]))
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v17(v28, v16);
          uint64_t v35 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v17(v28, v16);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v17(v28, v16);
          type metadata accessor for StreamingTextDetectorResult(0);
          goto LABEL_41;
        default:
          goto LABEL_42;
      }
      break;
    case 0:
      sub_100038B34(*(void *)v14, *(void *)(v14 + 8));
      break;
  }
LABEL_42:

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D18C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
      uint64_t v19 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v19[5]) = *(_DWORD *)(a2 + v19[5]);
      uint64_t v20 = v19[6];
      uint64_t v21 = (_OWORD *)(a1 + v20);
      uint64_t v22 = (_OWORD *)(a2 + v20);
      long long v23 = v22[3];
      v21[2] = v22[2];
      v21[3] = v23;
      long long v24 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v24;
      *(void *)(a1 + v19[7]) = *(void *)(a2 + v19[7]);
      *(void *)(a1 + v19[8]) = *(void *)(a2 + v19[8]);
      *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
      *(unsigned char *)(a1 + v19[10]) = *(unsigned char *)(a2 + v19[10]);
      uint64_t v25 = v19[11];
      unint64_t v26 = (void *)(a1 + v25);
      uint64_t v27 = (void *)(a2 + v25);
      uint64_t v28 = v27[1];
      *unint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = v19[12];
      uint64_t v30 = (void *)(a1 + v29);
      uint64_t v31 = (void *)(a2 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = v19[13];
      __dst = (void *)(a1 + v33);
      unint64_t v34 = (const void *)(a2 + v33);
      uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37(v34, 1, v35))
      {
        uint64_t v38 = sub_10000F214(&qword_100524BD0);
        memcpy(__dst, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(__dst, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
      }
      uint64_t v78 = v19[14];
      uint64_t v79 = a1 + v78;
      uint64_t v80 = (uint64_t *)(a2 + v78);
      unint64_t v81 = v80[1];
      if (v81 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
      }
      else
      {
        uint64_t v82 = *v80;
        sub_100038528(*v80, v80[1]);
        *(void *)uint64_t v79 = v82;
        *(void *)(v79 + 8) = v81;
      }
      uint64_t v83 = v19[15];
      uint64_t v84 = (void *)(a1 + v83);
      uint64_t v85 = (void *)(a2 + v83);
      if (*v85)
      {
        uint64_t v86 = v85[1];
        uint64_t v87 = v85[2];
        *uint64_t v84 = *v85;
        v84[1] = v86;
        v84[2] = v87;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
        v84[2] = v85[2];
      }
      break;
    case 2u:
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
      uint64_t v40 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v40[5]) = *(_DWORD *)(a2 + v40[5]);
      uint64_t v41 = v40[6];
      char v42 = (_OWORD *)(a1 + v41);
      uint64_t v43 = (_OWORD *)(a2 + v41);
      long long v44 = v43[3];
      v42[2] = v43[2];
      v42[3] = v44;
      long long v45 = v43[1];
      *char v42 = *v43;
      v42[1] = v45;
      uint64_t v46 = v40[7];
      long long v47 = (void *)(a1 + v46);
      uint64_t v48 = (uint64_t *)(a2 + v46);
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      *long long v47 = v50;
      v47[1] = v49;
      *(void *)(a1 + v40[8]) = *(void *)(a2 + v40[8]);
      *(void *)(a1 + v40[9]) = *(void *)(a2 + v40[9]);
      *(void *)(a1 + v40[10]) = *(void *)(a2 + v40[10]);
      *(void *)(a1 + v40[11]) = *(void *)(a2 + v40[11]);
      *(void *)(a1 + v40[12]) = *(void *)(a2 + v40[12]);
      uint64_t v51 = v40[13];
      uint64_t v52 = *(void **)(a2 + v51);
      *(void *)(a1 + v51) = v52;
      *(unsigned char *)(a1 + v40[14]) = *(unsigned char *)(a2 + v40[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v53 = v52;
      break;
    case 3u:
    case 4u:
      uint64_t v54 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
      id v55 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v55[5]) = *(_DWORD *)(a2 + v55[5]);
      uint64_t v56 = v55[6];
      uint64_t v57 = (_OWORD *)(a1 + v56);
      uint64_t v58 = (_OWORD *)(a2 + v56);
      long long v59 = v58[3];
      v57[2] = v58[2];
      v57[3] = v59;
      long long v60 = v58[1];
      *uint64_t v57 = *v58;
      v57[1] = v60;
      uint64_t v61 = v55[7];
      long long v62 = (void *)(a1 + v61);
      uint64_t v63 = (uint64_t *)(a2 + v61);
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      *long long v62 = v65;
      v62[1] = v64;
      *(void *)(a1 + v55[8]) = *(void *)(a2 + v55[8]);
      *(void *)(a1 + v55[9]) = *(void *)(a2 + v55[9]);
      *(void *)(a1 + v55[10]) = *(void *)(a2 + v55[10]);
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 5u:
      uint64_t v66 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(a1, a2, v66);
      uint64_t v67 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v67[5]) = *(_DWORD *)(a2 + v67[5]);
      uint64_t v68 = v67[6];
      uint64_t v69 = (_OWORD *)(a1 + v68);
      uint64_t v70 = (_OWORD *)(a2 + v68);
      long long v71 = v70[3];
      v69[2] = v70[2];
      v69[3] = v71;
      long long v72 = v70[1];
      *uint64_t v69 = *v70;
      v69[1] = v72;
      uint64_t v73 = v67[7];
      long long v74 = (void *)(a1 + v73);
      uint64_t v75 = (uint64_t *)(a2 + v73);
      uint64_t v77 = *v75;
      uint64_t v76 = v75[1];
      *long long v74 = v77;
      v74[1] = v76;
      *(void *)(a1 + v67[8]) = *(void *)(a2 + v67[8]);
      *(void *)(a1 + v67[9]) = *(void *)(a2 + v67[9]);
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
      uint64_t v8 = v7[6];
      uint64_t v9 = (_OWORD *)(a1 + v8);
      unint64_t v10 = (_OWORD *)(a2 + v8);
      long long v11 = v10[3];
      void v9[2] = v10[2];
      v9[3] = v11;
      long long v12 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v12;
      uint64_t v13 = v7[7];
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (uint64_t *)(a2 + v13);
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      *uint64_t v14 = v17;
      v14[1] = v16;
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v88 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v89 = v88[5];
  uint64_t v90 = (uint64_t *)(a1 + v89);
  uint64_t v91 = (uint64_t *)(a2 + v89);
  uint64_t v92 = type metadata accessor for DetectionRequest.Originator(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      *uint64_t v90 = *v91;
      swift_bridgeObjectRetain();
      goto LABEL_52;
    case 2:
      uint64_t v263 = type metadata accessor for UUID();
      uint64_t v265 = (void **)(*(void *)(v263 - 8) + 16);
      __dsta = (void (*)(char *, char *, uint64_t))*v265;
      ((void (*)(uint64_t *, uint64_t *))*v265)(v90, v91);
      v273 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v96 = v273[5];
      unint64_t v97 = (char *)v90 + v96;
      uint64_t v98 = (char *)v91 + v96;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v261 = a3;
          __dsta(v97, v98, v263);
          uint64_t v110 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v97[v110[5]] = *(_DWORD *)&v98[v110[5]];
          uint64_t v111 = v110[6];
          uint64_t v112 = &v97[v111];
          uint64_t v113 = &v98[v111];
          long long v114 = *((_OWORD *)v113 + 3);
          *((_OWORD *)v112 + 2) = *((_OWORD *)v113 + 2);
          *((_OWORD *)v112 + 3) = v114;
          long long v115 = *((_OWORD *)v113 + 1);
          *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
          *((_OWORD *)v112 + 1) = v115;
          *(void *)&v97[v110[7]] = *(void *)&v98[v110[7]];
          *(void *)&v97[v110[8]] = *(void *)&v98[v110[8]];
          *(void *)&v97[v110[9]] = *(void *)&v98[v110[9]];
          v97[v110[10]] = v98[v110[10]];
          uint64_t v116 = v110[11];
          long long v117 = &v97[v116];
          long long v118 = &v98[v116];
          uint64_t v250 = *((void *)v118 + 1);
          *(void *)long long v117 = *(void *)v118;
          *((void *)v117 + 1) = v250;
          uint64_t v119 = v110[12];
          uint64_t v120 = &v97[v119];
          uint64_t v121 = &v98[v119];
          uint64_t v249 = *((void *)v121 + 1);
          *(void *)uint64_t v120 = *(void *)v121;
          *((void *)v120 + 1) = v249;
          uint64_t v122 = v110[13];
          uint64_t v253 = v110;
          v255 = &v97[v122];
          v258 = &v98[v122];
          uint64_t v123 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v247 = *(void *)(v123 - 8);
          long long v248 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v247 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v248(v258, 1, v123))
          {
            uint64_t v124 = sub_10000F214(&qword_100524BD0);
            memcpy(v255, v258, *(void *)(*(void *)(v124 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v247 + 16))(v255, v258, v123);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v247 + 56))(v255, 0, 1, v123);
          }
          uint64_t v160 = v253[14];
          uint64_t v161 = &v97[v160];
          uint64_t v162 = (uint64_t *)&v98[v160];
          unint64_t v163 = v162[1];
          if (v163 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
          }
          else
          {
            v256 = (uint64_t *)v161;
            uint64_t v260 = *v162;
            sub_100038528(*v162, v163);
            uint64_t *v256 = v260;
            v256[1] = v163;
          }
          uint64_t v164 = v253[15];
          long long v165 = &v97[v164];
          unint64_t v166 = &v98[v164];
          if (*(void *)v166)
          {
            uint64_t v167 = *((void *)v166 + 1);
            uint64_t v168 = *((void *)v166 + 2);
            *(void *)long long v165 = *(void *)v166;
            *((void *)v165 + 1) = v167;
            *((void *)v165 + 2) = v168;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)long long v165 = *(_OWORD *)v166;
            *((void *)v165 + 2) = *((void *)v166 + 2);
          }
          a3 = v261;
          break;
        case 2u:
          __dsta(v97, v98, v263);
          uint64_t v125 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v97[v125[5]] = *(_DWORD *)&v98[v125[5]];
          uint64_t v126 = v125[6];
          uint64_t v127 = &v97[v126];
          uint64_t v128 = &v98[v126];
          long long v129 = *((_OWORD *)v128 + 3);
          *((_OWORD *)v127 + 2) = *((_OWORD *)v128 + 2);
          *((_OWORD *)v127 + 3) = v129;
          long long v130 = *((_OWORD *)v128 + 1);
          *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
          *((_OWORD *)v127 + 1) = v130;
          uint64_t v131 = v125[7];
          long long v132 = &v97[v131];
          long long v133 = &v98[v131];
          uint64_t v135 = *(void *)v133;
          uint64_t v134 = *((void *)v133 + 1);
          *(void *)long long v132 = v135;
          *((void *)v132 + 1) = v134;
          *(void *)&v97[v125[8]] = *(void *)&v98[v125[8]];
          *(void *)&v97[v125[9]] = *(void *)&v98[v125[9]];
          *(void *)&v97[v125[10]] = *(void *)&v98[v125[10]];
          *(void *)&v97[v125[11]] = *(void *)&v98[v125[11]];
          *(void *)&v97[v125[12]] = *(void *)&v98[v125[12]];
          uint64_t v136 = v125[13];
          v259 = *(void **)&v98[v136];
          *(void *)&v97[v136] = v259;
          v97[v125[14]] = v98[v125[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v137 = v259;
          break;
        case 3u:
        case 4u:
          __dsta(v97, v98, v263);
          uint64_t v138 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v97[v138[5]] = *(_DWORD *)&v98[v138[5]];
          uint64_t v139 = v138[6];
          id v140 = &v97[v139];
          char v141 = &v98[v139];
          long long v142 = *((_OWORD *)v141 + 3);
          *((_OWORD *)v140 + 2) = *((_OWORD *)v141 + 2);
          *((_OWORD *)v140 + 3) = v142;
          long long v143 = *((_OWORD *)v141 + 1);
          *(_OWORD *)id v140 = *(_OWORD *)v141;
          *((_OWORD *)v140 + 1) = v143;
          uint64_t v144 = v138[7];
          long long v145 = &v97[v144];
          long long v146 = &v98[v144];
          uint64_t v148 = *(void *)v146;
          uint64_t v147 = *((void *)v146 + 1);
          *(void *)long long v145 = v148;
          *((void *)v145 + 1) = v147;
          *(void *)&v97[v138[8]] = *(void *)&v98[v138[8]];
          *(void *)&v97[v138[9]] = *(void *)&v98[v138[9]];
          *(void *)&v97[v138[10]] = *(void *)&v98[v138[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          __dsta(v97, v98, v263);
          char v149 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v97[v149[5]] = *(_DWORD *)&v98[v149[5]];
          uint64_t v150 = v149[6];
          uint64_t v151 = &v97[v150];
          long long v152 = &v98[v150];
          long long v153 = *((_OWORD *)v152 + 3);
          *((_OWORD *)v151 + 2) = *((_OWORD *)v152 + 2);
          *((_OWORD *)v151 + 3) = v153;
          long long v154 = *((_OWORD *)v152 + 1);
          *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
          *((_OWORD *)v151 + 1) = v154;
          uint64_t v155 = v149[7];
          long long v156 = &v97[v155];
          long long v157 = &v98[v155];
          uint64_t v159 = *(void *)v157;
          uint64_t v158 = *((void *)v157 + 1);
          *(void *)long long v156 = v159;
          *((void *)v156 + 1) = v158;
          *(void *)&v97[v149[8]] = *(void *)&v98[v149[8]];
          *(void *)&v97[v149[9]] = *(void *)&v98[v149[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          __dsta(v97, v98, v263);
          uint64_t v99 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v97[v99[5]] = *(_DWORD *)&v98[v99[5]];
          uint64_t v100 = v99[6];
          uint64_t v101 = &v97[v100];
          uint64_t v102 = &v98[v100];
          long long v103 = *((_OWORD *)v102 + 3);
          *((_OWORD *)v101 + 2) = *((_OWORD *)v102 + 2);
          *((_OWORD *)v101 + 3) = v103;
          long long v104 = *((_OWORD *)v102 + 1);
          *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
          *((_OWORD *)v101 + 1) = v104;
          uint64_t v105 = v99[7];
          long long v106 = &v97[v105];
          long long v107 = &v98[v105];
          uint64_t v109 = *(void *)v107;
          uint64_t v108 = *((void *)v107 + 1);
          *(void *)long long v106 = v109;
          *((void *)v106 + 1) = v108;
          *(void *)&v97[v99[8]] = *(void *)&v98[v99[8]];
          *(void *)&v97[v99[9]] = *(void *)&v98[v99[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v169 = v273[6];
      uint64_t v170 = (char *)v90 + v169;
      uint64_t v171 = (char *)v91 + v169;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v262 = a3;
          __dsta(v170, v171, v263);
          uint64_t v183 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v170[v183[5]] = *(_DWORD *)&v171[v183[5]];
          uint64_t v184 = v183[6];
          uint64_t v185 = &v170[v184];
          uint64_t v186 = &v171[v184];
          long long v187 = *((_OWORD *)v186 + 3);
          *((_OWORD *)v185 + 2) = *((_OWORD *)v186 + 2);
          *((_OWORD *)v185 + 3) = v187;
          long long v188 = *((_OWORD *)v186 + 1);
          *(_OWORD *)uint64_t v185 = *(_OWORD *)v186;
          *((_OWORD *)v185 + 1) = v188;
          *(void *)&v170[v183[7]] = *(void *)&v171[v183[7]];
          *(void *)&v170[v183[8]] = *(void *)&v171[v183[8]];
          *(void *)&v170[v183[9]] = *(void *)&v171[v183[9]];
          v170[v183[10]] = v171[v183[10]];
          uint64_t v189 = v183[11];
          long long v190 = &v170[v189];
          long long v191 = &v171[v189];
          uint64_t v257 = *((void *)v191 + 1);
          *(void *)long long v190 = *(void *)v191;
          *((void *)v190 + 1) = v257;
          uint64_t v192 = v183[12];
          v193 = &v170[v192];
          v194 = &v171[v192];
          uint64_t v254 = *((void *)v194 + 1);
          *(void *)v193 = *(void *)v194;
          *((void *)v193 + 1) = v254;
          uint64_t v195 = v183[13];
          v264 = v183;
          v266 = &v170[v195];
          __dstb = &v171[v195];
          uint64_t v196 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v251 = *(void *)(v196 - 8);
          uint64_t v252 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v251 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v252(__dstb, 1, v196))
          {
            uint64_t v197 = sub_10000F214(&qword_100524BD0);
            memcpy(v266, __dstb, *(void *)(*(void *)(v197 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v251 + 16))(v266, __dstb, v196);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v251 + 56))(v266, 0, 1, v196);
          }
          uint64_t v233 = v264[14];
          uint64_t v234 = &v170[v233];
          uint64_t v235 = (uint64_t *)&v171[v233];
          unint64_t v236 = v235[1];
          if (v236 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v234 = *(_OWORD *)v235;
          }
          else
          {
            v267 = v234;
            __dstd = (void *)*v235;
            sub_100038528(*v235, v236);
            *(void *)v267 = __dstd;
            *((void *)v267 + 1) = v236;
          }
          uint64_t v237 = v264[15];
          uint64_t v238 = &v170[v237];
          unint64_t v239 = &v171[v237];
          if (*(void *)v239)
          {
            uint64_t v240 = *((void *)v239 + 1);
            uint64_t v241 = *((void *)v239 + 2);
            *(void *)uint64_t v238 = *(void *)v239;
            *((void *)v238 + 1) = v240;
            *((void *)v238 + 2) = v241;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v238 = *(_OWORD *)v239;
            *((void *)v238 + 2) = *((void *)v239 + 2);
          }
          a3 = v262;
          break;
        case 2u:
          __dsta(v170, v171, v263);
          uint64_t v198 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v170[v198[5]] = *(_DWORD *)&v171[v198[5]];
          uint64_t v199 = v198[6];
          uint64_t v200 = &v170[v199];
          unint64_t v201 = &v171[v199];
          long long v202 = *((_OWORD *)v201 + 3);
          *((_OWORD *)v200 + 2) = *((_OWORD *)v201 + 2);
          *((_OWORD *)v200 + 3) = v202;
          long long v203 = *((_OWORD *)v201 + 1);
          *(_OWORD *)uint64_t v200 = *(_OWORD *)v201;
          *((_OWORD *)v200 + 1) = v203;
          uint64_t v204 = v198[7];
          long long v205 = &v170[v204];
          long long v206 = &v171[v204];
          uint64_t v208 = *(void *)v206;
          uint64_t v207 = *((void *)v206 + 1);
          *(void *)long long v205 = v208;
          *((void *)v205 + 1) = v207;
          *(void *)&v170[v198[8]] = *(void *)&v171[v198[8]];
          *(void *)&v170[v198[9]] = *(void *)&v171[v198[9]];
          *(void *)&v170[v198[10]] = *(void *)&v171[v198[10]];
          *(void *)&v170[v198[11]] = *(void *)&v171[v198[11]];
          *(void *)&v170[v198[12]] = *(void *)&v171[v198[12]];
          uint64_t v209 = v198[13];
          __dstc = *(void **)&v171[v209];
          *(void *)&v170[v209] = __dstc;
          v170[v198[14]] = v171[v198[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v210 = __dstc;
          break;
        case 3u:
        case 4u:
          __dsta(v170, v171, v263);
          uint64_t v211 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v170[v211[5]] = *(_DWORD *)&v171[v211[5]];
          uint64_t v212 = v211[6];
          id v213 = &v170[v212];
          uint64_t v214 = &v171[v212];
          long long v215 = *((_OWORD *)v214 + 3);
          *((_OWORD *)v213 + 2) = *((_OWORD *)v214 + 2);
          *((_OWORD *)v213 + 3) = v215;
          long long v216 = *((_OWORD *)v214 + 1);
          *(_OWORD *)id v213 = *(_OWORD *)v214;
          *((_OWORD *)v213 + 1) = v216;
          uint64_t v217 = v211[7];
          long long v218 = &v170[v217];
          long long v219 = &v171[v217];
          uint64_t v221 = *(void *)v219;
          uint64_t v220 = *((void *)v219 + 1);
          *(void *)long long v218 = v221;
          *((void *)v218 + 1) = v220;
          *(void *)&v170[v211[8]] = *(void *)&v171[v211[8]];
          *(void *)&v170[v211[9]] = *(void *)&v171[v211[9]];
          *(void *)&v170[v211[10]] = *(void *)&v171[v211[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          __dsta(v170, v171, v263);
          uint64_t v222 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v170[v222[5]] = *(_DWORD *)&v171[v222[5]];
          uint64_t v223 = v222[6];
          uint64_t v224 = &v170[v223];
          uint64_t v225 = &v171[v223];
          long long v226 = *((_OWORD *)v225 + 3);
          *((_OWORD *)v224 + 2) = *((_OWORD *)v225 + 2);
          *((_OWORD *)v224 + 3) = v226;
          long long v227 = *((_OWORD *)v225 + 1);
          *(_OWORD *)uint64_t v224 = *(_OWORD *)v225;
          *((_OWORD *)v224 + 1) = v227;
          uint64_t v228 = v222[7];
          long long v229 = &v170[v228];
          long long v230 = &v171[v228];
          uint64_t v232 = *(void *)v230;
          uint64_t v231 = *((void *)v230 + 1);
          *(void *)long long v229 = v232;
          *((void *)v229 + 1) = v231;
          *(void *)&v170[v222[8]] = *(void *)&v171[v222[8]];
          *(void *)&v170[v222[9]] = *(void *)&v171[v222[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          __dsta(v170, v171, v263);
          uint64_t v172 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v170[v172[5]] = *(_DWORD *)&v171[v172[5]];
          uint64_t v173 = v172[6];
          uint64_t v174 = &v170[v173];
          uint64_t v175 = &v171[v173];
          long long v176 = *((_OWORD *)v175 + 3);
          *((_OWORD *)v174 + 2) = *((_OWORD *)v175 + 2);
          *((_OWORD *)v174 + 3) = v176;
          long long v177 = *((_OWORD *)v175 + 1);
          *(_OWORD *)uint64_t v174 = *(_OWORD *)v175;
          *((_OWORD *)v174 + 1) = v177;
          uint64_t v178 = v172[7];
          long long v179 = &v170[v178];
          long long v180 = &v171[v178];
          uint64_t v182 = *(void *)v180;
          uint64_t v181 = *((void *)v180 + 1);
          *(void *)long long v179 = v182;
          *((void *)v179 + 1) = v181;
          *(void *)&v170[v172[8]] = *(void *)&v171[v172[8]];
          *(void *)&v170[v172[9]] = *(void *)&v171[v172[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      *((unsigned char *)v90 + v273[7]) = *((unsigned char *)v91 + v273[7]);
      *(uint64_t *)((char *)v90 + v273[8]) = *(uint64_t *)((char *)v91 + v273[8]);
      *(_DWORD *)((char *)v90 + v273[9]) = *(_DWORD *)((char *)v91 + v273[9]);
      goto LABEL_52;
    case 0:
      uint64_t v94 = *v91;
      unint64_t v95 = v91[1];
      sub_100038528(*v91, v95);
      *uint64_t v90 = v94;
      v90[1] = v95;
LABEL_52:
      swift_storeEnumTagMultiPayload();
      goto LABEL_53;
  }
  memcpy(v90, v91, *(void *)(*(void *)(v92 - 8) + 64));
LABEL_53:
  uint64_t v242 = v88[6];
  uint64_t v243 = (_OWORD *)(a1 + v242);
  uint64_t v244 = (_OWORD *)(a2 + v242);
  long long v245 = v244[1];
  *uint64_t v243 = *v244;
  v243[1] = v245;
  *(void *)(a1 + v88[7]) = *(void *)(a2 + v88[7]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001D2D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2)
  {
    uint64_t v17 = (int *)type metadata accessor for DetectionRequest(0);
  }
  else
  {
    sub_1001D430C(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v19[5]) = *(_DWORD *)(a2 + v19[5]);
        uint64_t v20 = v19[6];
        uint64_t v21 = (_OWORD *)(a1 + v20);
        uint64_t v22 = (_OWORD *)(a2 + v20);
        long long v24 = v22[2];
        long long v23 = v22[3];
        long long v25 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v25;
        v21[2] = v24;
        v21[3] = v23;
        *(void *)(a1 + v19[7]) = *(void *)(a2 + v19[7]);
        *(void *)(a1 + v19[8]) = *(void *)(a2 + v19[8]);
        *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
        *(unsigned char *)(a1 + v19[10]) = *(unsigned char *)(a2 + v19[10]);
        uint64_t v26 = v19[11];
        uint64_t v27 = (void *)(a1 + v26);
        uint64_t v28 = (void *)(a2 + v26);
        *uint64_t v27 = *v28;
        v27[1] = v28[1];
        uint64_t v29 = v19[12];
        uint64_t v30 = (void *)(a1 + v29);
        uint64_t v31 = (void *)(a2 + v29);
        *uint64_t v30 = *v31;
        v30[1] = v31[1];
        uint64_t v32 = v19[13];
        __dst = (void *)(a1 + v32);
        uint64_t v33 = (const void *)(a2 + v32);
        uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v35 = *(void *)(v34 - 8);
        uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v36(v33, 1, v34))
        {
          uint64_t v37 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v33, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(__dst, v33, v34);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
        }
        uint64_t v74 = v19[14];
        uint64_t v75 = a1 + v74;
        uint64_t v76 = (uint64_t *)(a2 + v74);
        unint64_t v77 = v76[1];
        if (v77 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
        }
        else
        {
          uint64_t v78 = *v76;
          sub_100038528(*v76, v76[1]);
          *(void *)uint64_t v75 = v78;
          *(void *)(v75 + 8) = v77;
        }
        uint64_t v79 = v19[15];
        uint64_t v80 = (void *)(a1 + v79);
        unint64_t v81 = (void *)(a2 + v79);
        if (*v81)
        {
          void *v80 = *v81;
          uint64_t v82 = v81[2];
          v80[1] = v81[1];
          v80[2] = v82;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v83 = *(_OWORD *)v81;
          v80[2] = v81[2];
          *(_OWORD *)uint64_t v80 = v83;
        }
        break;
      case 2u:
        uint64_t v38 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
        uint64_t v39 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v39[5]) = *(_DWORD *)(a2 + v39[5]);
        uint64_t v40 = v39[6];
        uint64_t v41 = (_OWORD *)(a1 + v40);
        char v42 = (_OWORD *)(a2 + v40);
        long long v44 = v42[2];
        long long v43 = v42[3];
        long long v45 = v42[1];
        *uint64_t v41 = *v42;
        v41[1] = v45;
        void v41[2] = v44;
        v41[3] = v43;
        uint64_t v46 = v39[7];
        long long v47 = (void *)(a1 + v46);
        uint64_t v48 = (void *)(a2 + v46);
        *long long v47 = *v48;
        v47[1] = v48[1];
        *(void *)(a1 + v39[8]) = *(void *)(a2 + v39[8]);
        *(void *)(a1 + v39[9]) = *(void *)(a2 + v39[9]);
        *(void *)(a1 + v39[10]) = *(void *)(a2 + v39[10]);
        *(void *)(a1 + v39[11]) = *(void *)(a2 + v39[11]);
        *(void *)(a1 + v39[12]) = *(void *)(a2 + v39[12]);
        uint64_t v49 = v39[13];
        uint64_t v50 = *(void **)(a2 + v49);
        *(void *)(a1 + v49) = v50;
        *(unsigned char *)(a1 + v39[14]) = *(unsigned char *)(a2 + v39[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v51 = v50;
        break;
      case 3u:
      case 4u:
        uint64_t v52 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
        id v53 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v53[5]) = *(_DWORD *)(a2 + v53[5]);
        uint64_t v54 = v53[6];
        id v55 = (_OWORD *)(a1 + v54);
        uint64_t v56 = (_OWORD *)(a2 + v54);
        long long v58 = v56[2];
        long long v57 = v56[3];
        long long v59 = v56[1];
        *id v55 = *v56;
        v55[1] = v59;
        v55[2] = v58;
        v55[3] = v57;
        uint64_t v60 = v53[7];
        uint64_t v61 = (void *)(a1 + v60);
        long long v62 = (void *)(a2 + v60);
        *uint64_t v61 = *v62;
        v61[1] = v62[1];
        *(void *)(a1 + v53[8]) = *(void *)(a2 + v53[8]);
        *(void *)(a1 + v53[9]) = *(void *)(a2 + v53[9]);
        *(void *)(a1 + v53[10]) = *(void *)(a2 + v53[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v63 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16))(a1, a2, v63);
        uint64_t v64 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v64[5]) = *(_DWORD *)(a2 + v64[5]);
        uint64_t v65 = v64[6];
        uint64_t v66 = (_OWORD *)(a1 + v65);
        uint64_t v67 = (_OWORD *)(a2 + v65);
        long long v69 = v67[2];
        long long v68 = v67[3];
        long long v70 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v70;
        v66[2] = v69;
        v66[3] = v68;
        uint64_t v71 = v64[7];
        long long v72 = (void *)(a1 + v71);
        uint64_t v73 = (void *)(a2 + v71);
        *long long v72 = *v73;
        v72[1] = v73[1];
        *(void *)(a1 + v64[8]) = *(void *)(a2 + v64[8]);
        *(void *)(a1 + v64[9]) = *(void *)(a2 + v64[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        unint64_t v10 = (_OWORD *)(a2 + v8);
        long long v12 = v10[2];
        long long v11 = v10[3];
        long long v13 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v13;
        void v9[2] = v12;
        v9[3] = v11;
        uint64_t v14 = v7[7];
        uint64_t v15 = (void *)(a1 + v14);
        uint64_t v16 = (void *)(a2 + v14);
        *uint64_t v15 = *v16;
        v15[1] = v16[1];
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = (int *)type metadata accessor for DetectionRequest(0);
    uint64_t v84 = v17[5];
    uint64_t v85 = (uint64_t *)(a1 + v84);
    uint64_t v86 = (uint64_t *)(a2 + v84);
    sub_1001D430C(a1 + v84, type metadata accessor for DetectionRequest.Originator);
    uint64_t v87 = type metadata accessor for DetectionRequest.Originator(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t *v85 = *v86;
        swift_bridgeObjectRetain();
        goto LABEL_54;
      case 2:
        uint64_t v247 = type metadata accessor for UUID();
        uint64_t v249 = (void **)(*(void *)(v247 - 8) + 16);
        __dsta = (void (*)(char *, char *, uint64_t))*v249;
        ((void (*)(uint64_t *, uint64_t *))*v249)(v85, v86);
        uint64_t v257 = (int *)type metadata accessor for CVTrackSnapshot(0);
        uint64_t v91 = v257[5];
        uint64_t v92 = (char *)v85 + v91;
        int v93 = (char *)v86 + v91;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v245 = a3;
            __dsta(v92, v93, v247);
            long long v104 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v92[v104[5]] = *(_DWORD *)&v93[v104[5]];
            uint64_t v105 = v104[6];
            long long v106 = &v92[v105];
            long long v107 = &v93[v105];
            long long v109 = *((_OWORD *)v107 + 2);
            long long v108 = *((_OWORD *)v107 + 3);
            long long v110 = *((_OWORD *)v107 + 1);
            *(_OWORD *)long long v106 = *(_OWORD *)v107;
            *((_OWORD *)v106 + 1) = v110;
            *((_OWORD *)v106 + 2) = v109;
            *((_OWORD *)v106 + 3) = v108;
            *(void *)&v92[v104[7]] = *(void *)&v93[v104[7]];
            *(void *)&v92[v104[8]] = *(void *)&v93[v104[8]];
            *(void *)&v92[v104[9]] = *(void *)&v93[v104[9]];
            v92[v104[10]] = v93[v104[10]];
            uint64_t v111 = v104[11];
            uint64_t v112 = &v92[v111];
            uint64_t v113 = &v93[v111];
            *(void *)uint64_t v112 = *(void *)v113;
            *((void *)v112 + 1) = *((void *)v113 + 1);
            uint64_t v114 = v104[12];
            long long v115 = &v92[v114];
            uint64_t v116 = &v93[v114];
            *(void *)long long v115 = *(void *)v116;
            *((void *)v115 + 1) = *((void *)v116 + 1);
            uint64_t v117 = v104[13];
            unint64_t v239 = v104;
            uint64_t v240 = &v92[v117];
            uint64_t v242 = &v93[v117];
            uint64_t v118 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v235 = *(void *)(v118 - 8);
            unint64_t v236 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v235 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v236(v242, 1, v118))
            {
              uint64_t v119 = sub_10000F214(&qword_100524BD0);
              memcpy(v240, v242, *(void *)(*(void *)(v119 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v235 + 16))(v240, v242, v118);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v235 + 56))(v240, 0, 1, v118);
            }
            uint64_t v152 = v239[14];
            long long v153 = &v92[v152];
            long long v154 = (uint64_t *)&v93[v152];
            unint64_t v155 = v154[1];
            if (v155 >> 60 == 15)
            {
              *(_OWORD *)long long v153 = *(_OWORD *)v154;
            }
            else
            {
              uint64_t v241 = (uint64_t *)v153;
              uint64_t v244 = *v154;
              sub_100038528(*v154, v155);
              uint64_t *v241 = v244;
              v241[1] = v155;
            }
            uint64_t v156 = v239[15];
            long long v157 = &v92[v156];
            uint64_t v158 = &v93[v156];
            if (*(void *)v158)
            {
              *(void *)long long v157 = *(void *)v158;
              uint64_t v159 = *((void *)v158 + 2);
              *((void *)v157 + 1) = *((void *)v158 + 1);
              *((void *)v157 + 2) = v159;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v160 = *(_OWORD *)v158;
              *((void *)v157 + 2) = *((void *)v158 + 2);
              *(_OWORD *)long long v157 = v160;
            }
            a3 = v245;
            break;
          case 2u:
            __dsta(v92, v93, v247);
            uint64_t v120 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v92[v120[5]] = *(_DWORD *)&v93[v120[5]];
            uint64_t v121 = v120[6];
            uint64_t v122 = &v92[v121];
            uint64_t v123 = &v93[v121];
            long long v125 = *((_OWORD *)v123 + 2);
            long long v124 = *((_OWORD *)v123 + 3);
            long long v126 = *((_OWORD *)v123 + 1);
            *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
            *((_OWORD *)v122 + 1) = v126;
            *((_OWORD *)v122 + 2) = v125;
            *((_OWORD *)v122 + 3) = v124;
            uint64_t v127 = v120[7];
            uint64_t v128 = &v92[v127];
            long long v129 = &v93[v127];
            *(void *)uint64_t v128 = *(void *)v129;
            *((void *)v128 + 1) = *((void *)v129 + 1);
            *(void *)&v92[v120[8]] = *(void *)&v93[v120[8]];
            *(void *)&v92[v120[9]] = *(void *)&v93[v120[9]];
            *(void *)&v92[v120[10]] = *(void *)&v93[v120[10]];
            *(void *)&v92[v120[11]] = *(void *)&v93[v120[11]];
            *(void *)&v92[v120[12]] = *(void *)&v93[v120[12]];
            uint64_t v130 = v120[13];
            uint64_t v243 = *(void **)&v93[v130];
            *(void *)&v92[v130] = v243;
            v92[v120[14]] = v93[v120[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v131 = v243;
            break;
          case 3u:
          case 4u:
            __dsta(v92, v93, v247);
            long long v132 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v92[v132[5]] = *(_DWORD *)&v93[v132[5]];
            uint64_t v133 = v132[6];
            uint64_t v134 = &v92[v133];
            uint64_t v135 = &v93[v133];
            long long v137 = *((_OWORD *)v135 + 2);
            long long v136 = *((_OWORD *)v135 + 3);
            long long v138 = *((_OWORD *)v135 + 1);
            *(_OWORD *)uint64_t v134 = *(_OWORD *)v135;
            *((_OWORD *)v134 + 1) = v138;
            *((_OWORD *)v134 + 2) = v137;
            *((_OWORD *)v134 + 3) = v136;
            uint64_t v139 = v132[7];
            id v140 = &v92[v139];
            char v141 = &v93[v139];
            *(void *)id v140 = *(void *)v141;
            *((void *)v140 + 1) = *((void *)v141 + 1);
            *(void *)&v92[v132[8]] = *(void *)&v93[v132[8]];
            *(void *)&v92[v132[9]] = *(void *)&v93[v132[9]];
            *(void *)&v92[v132[10]] = *(void *)&v93[v132[10]];
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            __dsta(v92, v93, v247);
            long long v142 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v92[v142[5]] = *(_DWORD *)&v93[v142[5]];
            uint64_t v143 = v142[6];
            uint64_t v144 = &v92[v143];
            long long v145 = &v93[v143];
            long long v147 = *((_OWORD *)v145 + 2);
            long long v146 = *((_OWORD *)v145 + 3);
            long long v148 = *((_OWORD *)v145 + 1);
            *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
            *((_OWORD *)v144 + 1) = v148;
            *((_OWORD *)v144 + 2) = v147;
            *((_OWORD *)v144 + 3) = v146;
            uint64_t v149 = v142[7];
            uint64_t v150 = &v92[v149];
            uint64_t v151 = &v93[v149];
            *(void *)uint64_t v150 = *(void *)v151;
            *((void *)v150 + 1) = *((void *)v151 + 1);
            *(void *)&v92[v142[8]] = *(void *)&v93[v142[8]];
            *(void *)&v92[v142[9]] = *(void *)&v93[v142[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            __dsta(v92, v93, v247);
            uint64_t v94 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v92[v94[5]] = *(_DWORD *)&v93[v94[5]];
            uint64_t v95 = v94[6];
            uint64_t v96 = &v92[v95];
            unint64_t v97 = &v93[v95];
            long long v99 = *((_OWORD *)v97 + 2);
            long long v98 = *((_OWORD *)v97 + 3);
            long long v100 = *((_OWORD *)v97 + 1);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
            *((_OWORD *)v96 + 1) = v100;
            *((_OWORD *)v96 + 2) = v99;
            *((_OWORD *)v96 + 3) = v98;
            uint64_t v101 = v94[7];
            uint64_t v102 = &v92[v101];
            long long v103 = &v93[v101];
            *(void *)uint64_t v102 = *(void *)v103;
            *((void *)v102 + 1) = *((void *)v103 + 1);
            *(void *)&v92[v94[8]] = *(void *)&v93[v94[8]];
            *(void *)&v92[v94[9]] = *(void *)&v93[v94[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v161 = v257[6];
        uint64_t v162 = (char *)v85 + v161;
        unint64_t v163 = (char *)v86 + v161;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v246 = a3;
            __dsta(v162, v163, v247);
            uint64_t v174 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v162[v174[5]] = *(_DWORD *)&v163[v174[5]];
            uint64_t v175 = v174[6];
            long long v176 = &v162[v175];
            long long v177 = &v163[v175];
            long long v179 = *((_OWORD *)v177 + 2);
            long long v178 = *((_OWORD *)v177 + 3);
            long long v180 = *((_OWORD *)v177 + 1);
            *(_OWORD *)long long v176 = *(_OWORD *)v177;
            *((_OWORD *)v176 + 1) = v180;
            *((_OWORD *)v176 + 2) = v179;
            *((_OWORD *)v176 + 3) = v178;
            *(void *)&v162[v174[7]] = *(void *)&v163[v174[7]];
            *(void *)&v162[v174[8]] = *(void *)&v163[v174[8]];
            *(void *)&v162[v174[9]] = *(void *)&v163[v174[9]];
            v162[v174[10]] = v163[v174[10]];
            uint64_t v181 = v174[11];
            uint64_t v182 = &v162[v181];
            uint64_t v183 = &v163[v181];
            *(void *)uint64_t v182 = *(void *)v183;
            *((void *)v182 + 1) = *((void *)v183 + 1);
            uint64_t v184 = v174[12];
            uint64_t v185 = &v162[v184];
            uint64_t v186 = &v163[v184];
            *(void *)uint64_t v185 = *(void *)v186;
            *((void *)v185 + 1) = *((void *)v186 + 1);
            uint64_t v187 = v174[13];
            long long v248 = v174;
            uint64_t v250 = &v162[v187];
            __dstb = &v163[v187];
            uint64_t v188 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v237 = *(void *)(v188 - 8);
            uint64_t v238 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v237 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v238(__dstb, 1, v188))
            {
              uint64_t v189 = sub_10000F214(&qword_100524BD0);
              memcpy(v250, __dstb, *(void *)(*(void *)(v189 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v237 + 16))(v250, __dstb, v188);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v237 + 56))(v250, 0, 1, v188);
            }
            uint64_t v222 = v248[14];
            uint64_t v223 = &v162[v222];
            uint64_t v224 = (uint64_t *)&v163[v222];
            unint64_t v225 = v224[1];
            if (v225 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v223 = *(_OWORD *)v224;
            }
            else
            {
              uint64_t v251 = v223;
              __dstd = (void *)*v224;
              sub_100038528(*v224, v225);
              *(void *)uint64_t v251 = __dstd;
              *((void *)v251 + 1) = v225;
            }
            uint64_t v226 = v248[15];
            long long v227 = &v162[v226];
            uint64_t v228 = &v163[v226];
            if (*(void *)v228)
            {
              *(void *)long long v227 = *(void *)v228;
              uint64_t v229 = *((void *)v228 + 2);
              *((void *)v227 + 1) = *((void *)v228 + 1);
              *((void *)v227 + 2) = v229;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v230 = *(_OWORD *)v228;
              *((void *)v227 + 2) = *((void *)v228 + 2);
              *(_OWORD *)long long v227 = v230;
            }
            a3 = v246;
            break;
          case 2u:
            __dsta(v162, v163, v247);
            long long v190 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v162[v190[5]] = *(_DWORD *)&v163[v190[5]];
            uint64_t v191 = v190[6];
            uint64_t v192 = &v162[v191];
            v193 = &v163[v191];
            long long v195 = *((_OWORD *)v193 + 2);
            long long v194 = *((_OWORD *)v193 + 3);
            long long v196 = *((_OWORD *)v193 + 1);
            *(_OWORD *)uint64_t v192 = *(_OWORD *)v193;
            *((_OWORD *)v192 + 1) = v196;
            *((_OWORD *)v192 + 2) = v195;
            *((_OWORD *)v192 + 3) = v194;
            uint64_t v197 = v190[7];
            uint64_t v198 = &v162[v197];
            uint64_t v199 = &v163[v197];
            *(void *)uint64_t v198 = *(void *)v199;
            *((void *)v198 + 1) = *((void *)v199 + 1);
            *(void *)&v162[v190[8]] = *(void *)&v163[v190[8]];
            *(void *)&v162[v190[9]] = *(void *)&v163[v190[9]];
            *(void *)&v162[v190[10]] = *(void *)&v163[v190[10]];
            *(void *)&v162[v190[11]] = *(void *)&v163[v190[11]];
            *(void *)&v162[v190[12]] = *(void *)&v163[v190[12]];
            uint64_t v200 = v190[13];
            __dstc = *(void **)&v163[v200];
            *(void *)&v162[v200] = __dstc;
            v162[v190[14]] = v163[v190[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v201 = __dstc;
            break;
          case 3u:
          case 4u:
            __dsta(v162, v163, v247);
            long long v202 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v162[v202[5]] = *(_DWORD *)&v163[v202[5]];
            uint64_t v203 = v202[6];
            uint64_t v204 = &v162[v203];
            long long v205 = &v163[v203];
            long long v207 = *((_OWORD *)v205 + 2);
            long long v206 = *((_OWORD *)v205 + 3);
            long long v208 = *((_OWORD *)v205 + 1);
            *(_OWORD *)uint64_t v204 = *(_OWORD *)v205;
            *((_OWORD *)v204 + 1) = v208;
            *((_OWORD *)v204 + 2) = v207;
            *((_OWORD *)v204 + 3) = v206;
            uint64_t v209 = v202[7];
            id v210 = &v162[v209];
            uint64_t v211 = &v163[v209];
            *(void *)id v210 = *(void *)v211;
            *((void *)v210 + 1) = *((void *)v211 + 1);
            *(void *)&v162[v202[8]] = *(void *)&v163[v202[8]];
            *(void *)&v162[v202[9]] = *(void *)&v163[v202[9]];
            *(void *)&v162[v202[10]] = *(void *)&v163[v202[10]];
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            __dsta(v162, v163, v247);
            uint64_t v212 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v162[v212[5]] = *(_DWORD *)&v163[v212[5]];
            uint64_t v213 = v212[6];
            uint64_t v214 = &v162[v213];
            long long v215 = &v163[v213];
            long long v217 = *((_OWORD *)v215 + 2);
            long long v216 = *((_OWORD *)v215 + 3);
            long long v218 = *((_OWORD *)v215 + 1);
            *(_OWORD *)uint64_t v214 = *(_OWORD *)v215;
            *((_OWORD *)v214 + 1) = v218;
            *((_OWORD *)v214 + 2) = v217;
            *((_OWORD *)v214 + 3) = v216;
            uint64_t v219 = v212[7];
            uint64_t v220 = &v162[v219];
            uint64_t v221 = &v163[v219];
            *(void *)uint64_t v220 = *(void *)v221;
            *((void *)v220 + 1) = *((void *)v221 + 1);
            *(void *)&v162[v212[8]] = *(void *)&v163[v212[8]];
            *(void *)&v162[v212[9]] = *(void *)&v163[v212[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            __dsta(v162, v163, v247);
            uint64_t v164 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v162[v164[5]] = *(_DWORD *)&v163[v164[5]];
            uint64_t v165 = v164[6];
            unint64_t v166 = &v162[v165];
            uint64_t v167 = &v163[v165];
            long long v169 = *((_OWORD *)v167 + 2);
            long long v168 = *((_OWORD *)v167 + 3);
            long long v170 = *((_OWORD *)v167 + 1);
            *(_OWORD *)unint64_t v166 = *(_OWORD *)v167;
            *((_OWORD *)v166 + 1) = v170;
            *((_OWORD *)v166 + 2) = v169;
            *((_OWORD *)v166 + 3) = v168;
            uint64_t v171 = v164[7];
            uint64_t v172 = &v162[v171];
            uint64_t v173 = &v163[v171];
            *(void *)uint64_t v172 = *(void *)v173;
            *((void *)v172 + 1) = *((void *)v173 + 1);
            *(void *)&v162[v164[8]] = *(void *)&v163[v164[8]];
            *(void *)&v162[v164[9]] = *(void *)&v163[v164[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        *((unsigned char *)v85 + v257[7]) = *((unsigned char *)v86 + v257[7]);
        *(uint64_t *)((char *)v85 + v257[8]) = *(uint64_t *)((char *)v86 + v257[8]);
        *(_DWORD *)((char *)v85 + v257[9]) = *(_DWORD *)((char *)v86 + v257[9]);
        goto LABEL_54;
      case 0:
        uint64_t v89 = *v86;
        unint64_t v90 = v86[1];
        sub_100038528(*v86, v90);
        uint64_t *v85 = v89;
        v85[1] = v90;
LABEL_54:
        swift_storeEnumTagMultiPayload();
        goto LABEL_55;
    }
    memcpy(v85, v86, *(void *)(*(void *)(v87 - 8) + 64));
  }
LABEL_55:
  uint64_t v231 = v17[6];
  uint64_t v232 = (void *)(a1 + v231);
  uint64_t v233 = (void *)(a2 + v231);
  *uint64_t v232 = *v233;
  v232[1] = v233[1];
  v232[2] = v233[2];
  v232[3] = v233[3];
  *(void *)(a1 + v17[7]) = *(void *)(a2 + v17[7]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001D430C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001D436C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      uint64_t v14 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v14[5]) = *(_DWORD *)(a2 + v14[5]);
      uint64_t v15 = v14[6];
      uint64_t v16 = (_OWORD *)(a1 + v15);
      uint64_t v17 = (_OWORD *)(a2 + v15);
      long long v18 = v17[3];
      v16[2] = v17[2];
      uint64_t v16[3] = v18;
      long long v19 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v19;
      *(void *)(a1 + v14[7]) = *(void *)(a2 + v14[7]);
      *(void *)(a1 + v14[8]) = *(void *)(a2 + v14[8]);
      *(void *)(a1 + v14[9]) = *(void *)(a2 + v14[9]);
      *(unsigned char *)(a1 + v14[10]) = *(unsigned char *)(a2 + v14[10]);
      *(_OWORD *)(a1 + v14[11]) = *(_OWORD *)(a2 + v14[11]);
      *(_OWORD *)(a1 + v14[12]) = *(_OWORD *)(a2 + v14[12]);
      uint64_t v20 = v14[13];
      uint64_t v21 = (void *)(a1 + v20);
      uint64_t v22 = (const void *)(a2 + v20);
      uint64_t v23 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = sub_10000F214(&qword_100524BD0);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(_OWORD *)(a1 + v14[14]) = *(_OWORD *)(a2 + v14[14]);
      uint64_t v47 = v14[15];
      uint64_t v48 = a1 + v47;
      uint64_t v49 = a2 + v47;
      *(void *)(v48 + 16) = *(void *)(v49 + 16);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      break;
    case 2u:
      uint64_t v26 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
      uint64_t v27 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v27[5]) = *(_DWORD *)(a2 + v27[5]);
      uint64_t v28 = v27[6];
      uint64_t v29 = (_OWORD *)(a1 + v28);
      uint64_t v30 = (_OWORD *)(a2 + v28);
      long long v31 = v30[3];
      void v29[2] = v30[2];
      v29[3] = v31;
      long long v32 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v32;
      *(_OWORD *)(a1 + v27[7]) = *(_OWORD *)(a2 + v27[7]);
      *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
      *(void *)(a1 + v27[9]) = *(void *)(a2 + v27[9]);
      *(void *)(a1 + v27[10]) = *(void *)(a2 + v27[10]);
      *(void *)(a1 + v27[11]) = *(void *)(a2 + v27[11]);
      *(void *)(a1 + v27[12]) = *(void *)(a2 + v27[12]);
      *(void *)(a1 + v27[13]) = *(void *)(a2 + v27[13]);
      *(unsigned char *)(a1 + v27[14]) = *(unsigned char *)(a2 + v27[14]);
      break;
    case 3u:
    case 4u:
      uint64_t v33 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
      uint64_t v34 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v34[5]) = *(_DWORD *)(a2 + v34[5]);
      uint64_t v35 = v34[6];
      uint64_t v36 = (_OWORD *)(a1 + v35);
      uint64_t v37 = (_OWORD *)(a2 + v35);
      long long v38 = v37[3];
      v36[2] = v37[2];
      v36[3] = v38;
      long long v39 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v39;
      *(_OWORD *)(a1 + v34[7]) = *(_OWORD *)(a2 + v34[7]);
      *(void *)(a1 + v34[8]) = *(void *)(a2 + v34[8]);
      *(void *)(a1 + v34[9]) = *(void *)(a2 + v34[9]);
      *(void *)(a1 + v34[10]) = *(void *)(a2 + v34[10]);
      break;
    case 5u:
      uint64_t v40 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
      uint64_t v41 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v41[5]) = *(_DWORD *)(a2 + v41[5]);
      uint64_t v42 = v41[6];
      long long v43 = (_OWORD *)(a1 + v42);
      long long v44 = (_OWORD *)(a2 + v42);
      long long v45 = v44[3];
      v43[2] = v44[2];
      v43[3] = v45;
      long long v46 = v44[1];
      *long long v43 = *v44;
      v43[1] = v46;
      *(_OWORD *)(a1 + v41[7]) = *(_OWORD *)(a2 + v41[7]);
      *(void *)(a1 + v41[8]) = *(void *)(a2 + v41[8]);
      *(void *)(a1 + v41[9]) = *(void *)(a2 + v41[9]);
      break;
    default:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
      uint64_t v8 = v7[6];
      uint64_t v9 = (_OWORD *)(a1 + v8);
      unint64_t v10 = (_OWORD *)(a2 + v8);
      long long v11 = v10[3];
      void v9[2] = v10[2];
      v9[3] = v11;
      long long v12 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v12;
      *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v50 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v51 = v50[5];
  uint64_t v52 = (unsigned char *)(a1 + v51);
  id v53 = (unsigned char *)(a2 + v51);
  uint64_t v54 = type metadata accessor for DetectionRequest.Originator(0);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v55 = type metadata accessor for UUID();
    __dst = *(void **)(*(void *)(v55 - 8) + 32);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))__dst)(v52, v53, v55);
    uint64_t v150 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v56 = v150[5];
    long long v57 = &v52[v56];
    long long v58 = &v53[v56];
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v144 = v50;
        uint64_t v146 = a3;
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        uint64_t v65 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v57[v65[5]] = *(_DWORD *)&v58[v65[5]];
        uint64_t v66 = v65[6];
        uint64_t v67 = &v57[v66];
        long long v68 = &v58[v66];
        long long v69 = *((_OWORD *)v68 + 3);
        *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
        *((_OWORD *)v67 + 3) = v69;
        long long v70 = *((_OWORD *)v68 + 1);
        *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
        *((_OWORD *)v67 + 1) = v70;
        *(void *)&v57[v65[7]] = *(void *)&v58[v65[7]];
        *(void *)&v57[v65[8]] = *(void *)&v58[v65[8]];
        *(void *)&v57[v65[9]] = *(void *)&v58[v65[9]];
        v57[v65[10]] = v58[v65[10]];
        *(_OWORD *)&v57[v65[11]] = *(_OWORD *)&v58[v65[11]];
        *(_OWORD *)&v57[v65[12]] = *(_OWORD *)&v58[v65[12]];
        uint64_t v71 = v65[13];
        uint64_t v143 = &v57[v71];
        long long v72 = &v58[v71];
        uint64_t v73 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v142 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v72, 1, v73))
        {
          uint64_t v74 = sub_10000F214(&qword_100524BD0);
          memcpy(v143, v72, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v143, v72, v73);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v143, 0, 1, v73);
        }
        *(_OWORD *)&v57[v65[14]] = *(_OWORD *)&v58[v65[14]];
        uint64_t v131 = v65[15];
        long long v132 = &v57[v131];
        uint64_t v133 = &v58[v131];
        *((void *)v132 + 2) = *((void *)v133 + 2);
        *(_OWORD *)long long v132 = *(_OWORD *)v133;
        swift_storeEnumTagMultiPayload();
        a3 = v146;
        uint64_t v50 = v144;
        goto LABEL_20;
      case 2u:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        uint64_t v75 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v57[v75[5]] = *(_DWORD *)&v58[v75[5]];
        uint64_t v76 = v75[6];
        unint64_t v77 = &v57[v76];
        uint64_t v78 = &v58[v76];
        long long v79 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v79;
        long long v80 = *((_OWORD *)v78 + 1);
        *(_OWORD *)unint64_t v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v80;
        *(_OWORD *)&v57[v75[7]] = *(_OWORD *)&v58[v75[7]];
        *(void *)&v57[v75[8]] = *(void *)&v58[v75[8]];
        *(void *)&v57[v75[9]] = *(void *)&v58[v75[9]];
        *(void *)&v57[v75[10]] = *(void *)&v58[v75[10]];
        *(void *)&v57[v75[11]] = *(void *)&v58[v75[11]];
        *(void *)&v57[v75[12]] = *(void *)&v58[v75[12]];
        *(void *)&v57[v75[13]] = *(void *)&v58[v75[13]];
        v57[v75[14]] = v58[v75[14]];
        goto LABEL_19;
      case 3u:
      case 4u:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        unint64_t v81 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v57[v81[5]] = *(_DWORD *)&v58[v81[5]];
        uint64_t v82 = v81[6];
        long long v83 = &v57[v82];
        uint64_t v84 = &v58[v82];
        long long v85 = *((_OWORD *)v84 + 3);
        *((_OWORD *)v83 + 2) = *((_OWORD *)v84 + 2);
        *((_OWORD *)v83 + 3) = v85;
        long long v86 = *((_OWORD *)v84 + 1);
        *(_OWORD *)long long v83 = *(_OWORD *)v84;
        *((_OWORD *)v83 + 1) = v86;
        *(_OWORD *)&v57[v81[7]] = *(_OWORD *)&v58[v81[7]];
        *(void *)&v57[v81[8]] = *(void *)&v58[v81[8]];
        *(void *)&v57[v81[9]] = *(void *)&v58[v81[9]];
        *(void *)&v57[v81[10]] = *(void *)&v58[v81[10]];
        goto LABEL_19;
      case 5u:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        uint64_t v87 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v57[v87[5]] = *(_DWORD *)&v58[v87[5]];
        uint64_t v88 = v87[6];
        uint64_t v89 = &v57[v88];
        unint64_t v90 = &v58[v88];
        long long v91 = *((_OWORD *)v90 + 3);
        *((_OWORD *)v89 + 2) = *((_OWORD *)v90 + 2);
        *((_OWORD *)v89 + 3) = v91;
        long long v92 = *((_OWORD *)v90 + 1);
        *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        *((_OWORD *)v89 + 1) = v92;
        *(_OWORD *)&v57[v87[7]] = *(_OWORD *)&v58[v87[7]];
        *(void *)&v57[v87[8]] = *(void *)&v58[v87[8]];
        *(void *)&v57[v87[9]] = *(void *)&v58[v87[9]];
        goto LABEL_19;
      default:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        long long v59 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v57[v59[5]] = *(_DWORD *)&v58[v59[5]];
        uint64_t v60 = v59[6];
        uint64_t v61 = &v57[v60];
        long long v62 = &v58[v60];
        long long v63 = *((_OWORD *)v62 + 3);
        *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
        *((_OWORD *)v61 + 3) = v63;
        long long v64 = *((_OWORD *)v62 + 1);
        *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
        *((_OWORD *)v61 + 1) = v64;
        *(_OWORD *)&v57[v59[7]] = *(_OWORD *)&v58[v59[7]];
        *(void *)&v57[v59[8]] = *(void *)&v58[v59[8]];
        *(void *)&v57[v59[9]] = *(void *)&v58[v59[9]];
LABEL_19:
        swift_storeEnumTagMultiPayload();
LABEL_20:
        uint64_t v93 = v150[6];
        uint64_t v94 = &v52[v93];
        uint64_t v95 = &v53[v93];
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            long long v145 = v50;
            uint64_t v147 = a3;
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v102 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v94[v102[5]] = *(_DWORD *)&v95[v102[5]];
            uint64_t v103 = v102[6];
            long long v104 = &v94[v103];
            uint64_t v105 = &v95[v103];
            long long v106 = *((_OWORD *)v105 + 3);
            *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
            *((_OWORD *)v104 + 3) = v106;
            long long v107 = *((_OWORD *)v105 + 1);
            *(_OWORD *)long long v104 = *(_OWORD *)v105;
            *((_OWORD *)v104 + 1) = v107;
            *(void *)&v94[v102[7]] = *(void *)&v95[v102[7]];
            *(void *)&v94[v102[8]] = *(void *)&v95[v102[8]];
            *(void *)&v94[v102[9]] = *(void *)&v95[v102[9]];
            v94[v102[10]] = v95[v102[10]];
            *(_OWORD *)&v94[v102[11]] = *(_OWORD *)&v95[v102[11]];
            *(_OWORD *)&v94[v102[12]] = *(_OWORD *)&v95[v102[12]];
            uint64_t v108 = v102[13];
            __dsta = &v94[v108];
            long long v109 = &v95[v108];
            uint64_t v110 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v111 = *(void *)(v110 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
            {
              uint64_t v112 = sub_10000F214(&qword_100524BD0);
              memcpy(__dsta, v109, *(void *)(*(void *)(v112 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v111 + 32))(__dsta, v109, v110);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(__dsta, 0, 1, v110);
            }
            a3 = v147;
            uint64_t v50 = v145;
            *(_OWORD *)&v94[v102[14]] = *(_OWORD *)&v95[v102[14]];
            uint64_t v134 = v102[15];
            uint64_t v135 = &v94[v134];
            long long v136 = &v95[v134];
            *((void *)v135 + 2) = *((void *)v136 + 2);
            *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
            break;
          case 2u:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v113 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v94[v113[5]] = *(_DWORD *)&v95[v113[5]];
            uint64_t v114 = v113[6];
            long long v115 = &v94[v114];
            uint64_t v116 = &v95[v114];
            long long v117 = *((_OWORD *)v116 + 3);
            *((_OWORD *)v115 + 2) = *((_OWORD *)v116 + 2);
            *((_OWORD *)v115 + 3) = v117;
            long long v118 = *((_OWORD *)v116 + 1);
            *(_OWORD *)long long v115 = *(_OWORD *)v116;
            *((_OWORD *)v115 + 1) = v118;
            *(_OWORD *)&v94[v113[7]] = *(_OWORD *)&v95[v113[7]];
            *(void *)&v94[v113[8]] = *(void *)&v95[v113[8]];
            *(void *)&v94[v113[9]] = *(void *)&v95[v113[9]];
            *(void *)&v94[v113[10]] = *(void *)&v95[v113[10]];
            *(void *)&v94[v113[11]] = *(void *)&v95[v113[11]];
            *(void *)&v94[v113[12]] = *(void *)&v95[v113[12]];
            *(void *)&v94[v113[13]] = *(void *)&v95[v113[13]];
            v94[v113[14]] = v95[v113[14]];
            break;
          case 3u:
          case 4u:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v119 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v94[v119[5]] = *(_DWORD *)&v95[v119[5]];
            uint64_t v120 = v119[6];
            uint64_t v121 = &v94[v120];
            uint64_t v122 = &v95[v120];
            long long v123 = *((_OWORD *)v122 + 3);
            *((_OWORD *)v121 + 2) = *((_OWORD *)v122 + 2);
            *((_OWORD *)v121 + 3) = v123;
            long long v124 = *((_OWORD *)v122 + 1);
            *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
            *((_OWORD *)v121 + 1) = v124;
            *(_OWORD *)&v94[v119[7]] = *(_OWORD *)&v95[v119[7]];
            *(void *)&v94[v119[8]] = *(void *)&v95[v119[8]];
            *(void *)&v94[v119[9]] = *(void *)&v95[v119[9]];
            *(void *)&v94[v119[10]] = *(void *)&v95[v119[10]];
            break;
          case 5u:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            long long v125 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v94[v125[5]] = *(_DWORD *)&v95[v125[5]];
            uint64_t v126 = v125[6];
            uint64_t v127 = &v94[v126];
            uint64_t v128 = &v95[v126];
            long long v129 = *((_OWORD *)v128 + 3);
            *((_OWORD *)v127 + 2) = *((_OWORD *)v128 + 2);
            *((_OWORD *)v127 + 3) = v129;
            long long v130 = *((_OWORD *)v128 + 1);
            *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
            *((_OWORD *)v127 + 1) = v130;
            *(_OWORD *)&v94[v125[7]] = *(_OWORD *)&v95[v125[7]];
            *(void *)&v94[v125[8]] = *(void *)&v95[v125[8]];
            *(void *)&v94[v125[9]] = *(void *)&v95[v125[9]];
            break;
          default:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v96 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v94[v96[5]] = *(_DWORD *)&v95[v96[5]];
            uint64_t v97 = v96[6];
            long long v98 = &v94[v97];
            long long v99 = &v95[v97];
            long long v100 = *((_OWORD *)v99 + 3);
            *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
            *((_OWORD *)v98 + 3) = v100;
            long long v101 = *((_OWORD *)v99 + 1);
            *(_OWORD *)long long v98 = *(_OWORD *)v99;
            *((_OWORD *)v98 + 1) = v101;
            *(_OWORD *)&v94[v96[7]] = *(_OWORD *)&v95[v96[7]];
            *(void *)&v94[v96[8]] = *(void *)&v95[v96[8]];
            *(void *)&v94[v96[9]] = *(void *)&v95[v96[9]];
            break;
        }
        swift_storeEnumTagMultiPayload();
        v52[v150[7]] = v53[v150[7]];
        *(void *)&v52[v150[8]] = *(void *)&v53[v150[8]];
        *(_DWORD *)&v52[v150[9]] = *(_DWORD *)&v53[v150[9]];
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  else
  {
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
  }
  uint64_t v137 = v50[6];
  long long v138 = (_OWORD *)(a1 + v137);
  uint64_t v139 = (_OWORD *)(a2 + v137);
  long long v140 = v139[1];
  _OWORD *v138 = *v139;
  v138[1] = v140;
  *(void *)(a1 + v50[7]) = *(void *)(a2 + v50[7]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001D5438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2)
  {
    uint64_t v13 = (int *)type metadata accessor for DetectionRequest(0);
  }
  else
  {
    sub_1001D430C(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        uint64_t v15 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v15[5]) = *(_DWORD *)(a2 + v15[5]);
        uint64_t v16 = v15[6];
        uint64_t v17 = (_OWORD *)(a1 + v16);
        long long v18 = (_OWORD *)(a2 + v16);
        long long v19 = v18[3];
        v17[2] = v18[2];
        v17[3] = v19;
        long long v20 = v18[1];
        *uint64_t v17 = *v18;
        v17[1] = v20;
        *(void *)(a1 + v15[7]) = *(void *)(a2 + v15[7]);
        *(void *)(a1 + v15[8]) = *(void *)(a2 + v15[8]);
        *(void *)(a1 + v15[9]) = *(void *)(a2 + v15[9]);
        *(unsigned char *)(a1 + v15[10]) = *(unsigned char *)(a2 + v15[10]);
        *(_OWORD *)(a1 + v15[11]) = *(_OWORD *)(a2 + v15[11]);
        *(_OWORD *)(a1 + v15[12]) = *(_OWORD *)(a2 + v15[12]);
        uint64_t v21 = v15[13];
        uint64_t v22 = (void *)(a1 + v21);
        uint64_t v23 = (const void *)(a2 + v21);
        uint64_t v24 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v25 = *(void *)(v24 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          uint64_t v26 = sub_10000F214(&qword_100524BD0);
          memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        *(_OWORD *)(a1 + v15[14]) = *(_OWORD *)(a2 + v15[14]);
        uint64_t v48 = v15[15];
        uint64_t v49 = a1 + v48;
        uint64_t v50 = a2 + v48;
        *(void *)(v49 + 16) = *(void *)(v50 + 16);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
        break;
      case 2u:
        uint64_t v27 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
        uint64_t v28 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v28[5]) = *(_DWORD *)(a2 + v28[5]);
        uint64_t v29 = v28[6];
        uint64_t v30 = (_OWORD *)(a1 + v29);
        long long v31 = (_OWORD *)(a2 + v29);
        long long v32 = v31[3];
        v30[2] = v31[2];
        v30[3] = v32;
        long long v33 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v33;
        *(_OWORD *)(a1 + v28[7]) = *(_OWORD *)(a2 + v28[7]);
        *(void *)(a1 + v28[8]) = *(void *)(a2 + v28[8]);
        *(void *)(a1 + v28[9]) = *(void *)(a2 + v28[9]);
        *(void *)(a1 + v28[10]) = *(void *)(a2 + v28[10]);
        *(void *)(a1 + v28[11]) = *(void *)(a2 + v28[11]);
        *(void *)(a1 + v28[12]) = *(void *)(a2 + v28[12]);
        *(void *)(a1 + v28[13]) = *(void *)(a2 + v28[13]);
        *(unsigned char *)(a1 + v28[14]) = *(unsigned char *)(a2 + v28[14]);
        break;
      case 3u:
      case 4u:
        uint64_t v34 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32))(a1, a2, v34);
        uint64_t v35 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v35[5]) = *(_DWORD *)(a2 + v35[5]);
        uint64_t v36 = v35[6];
        uint64_t v37 = (_OWORD *)(a1 + v36);
        long long v38 = (_OWORD *)(a2 + v36);
        long long v39 = v38[3];
        void v37[2] = v38[2];
        v37[3] = v39;
        long long v40 = v38[1];
        *uint64_t v37 = *v38;
        v37[1] = v40;
        *(_OWORD *)(a1 + v35[7]) = *(_OWORD *)(a2 + v35[7]);
        *(void *)(a1 + v35[8]) = *(void *)(a2 + v35[8]);
        *(void *)(a1 + v35[9]) = *(void *)(a2 + v35[9]);
        *(void *)(a1 + v35[10]) = *(void *)(a2 + v35[10]);
        break;
      case 5u:
        uint64_t v41 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(a1, a2, v41);
        uint64_t v42 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v42[5]) = *(_DWORD *)(a2 + v42[5]);
        uint64_t v43 = v42[6];
        long long v44 = (_OWORD *)(a1 + v43);
        long long v45 = (_OWORD *)(a2 + v43);
        long long v46 = v45[3];
        v44[2] = v45[2];
        v44[3] = v46;
        long long v47 = v45[1];
        *long long v44 = *v45;
        v44[1] = v47;
        *(_OWORD *)(a1 + v42[7]) = *(_OWORD *)(a2 + v42[7]);
        *(void *)(a1 + v42[8]) = *(void *)(a2 + v42[8]);
        *(void *)(a1 + v42[9]) = *(void *)(a2 + v42[9]);
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        unint64_t v10 = (_OWORD *)(a2 + v8);
        long long v11 = v10[3];
        void v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v12;
        *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = (int *)type metadata accessor for DetectionRequest(0);
    uint64_t v51 = v13[5];
    uint64_t v52 = (char *)(a1 + v51);
    id v53 = (char *)(a2 + v51);
    sub_1001D430C(a1 + v51, type metadata accessor for DetectionRequest.Originator);
    uint64_t v54 = type metadata accessor for DetectionRequest.Originator(0);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v55 = type metadata accessor for UUID();
      uint64_t v149 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
      v149(v52, v53, v55);
      uint64_t v151 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v56 = v151[5];
      long long v57 = &v52[v56];
      long long v58 = &v53[v56];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v147 = a3;
          v149(v57, v58, v55);
          uint64_t v65 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v57[v65[5]] = *(_DWORD *)&v58[v65[5]];
          uint64_t v66 = v65[6];
          uint64_t v67 = &v57[v66];
          long long v68 = &v58[v66];
          long long v69 = *((_OWORD *)v68 + 3);
          *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
          *((_OWORD *)v67 + 3) = v69;
          long long v70 = *((_OWORD *)v68 + 1);
          *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
          *((_OWORD *)v67 + 1) = v70;
          *(void *)&v57[v65[7]] = *(void *)&v58[v65[7]];
          *(void *)&v57[v65[8]] = *(void *)&v58[v65[8]];
          *(void *)&v57[v65[9]] = *(void *)&v58[v65[9]];
          v57[v65[10]] = v58[v65[10]];
          *(_OWORD *)&v57[v65[11]] = *(_OWORD *)&v58[v65[11]];
          *(_OWORD *)&v57[v65[12]] = *(_OWORD *)&v58[v65[12]];
          uint64_t v71 = v65[13];
          long long v145 = &v57[v71];
          long long v72 = &v58[v71];
          uint64_t v73 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v143 = *(void *)(v73 - 8);
          uint64_t v144 = v72;
          uint64_t v74 = v72;
          uint64_t v75 = v73;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v74, 1, v73))
          {
            uint64_t v76 = sub_10000F214(&qword_100524BD0);
            memcpy(v145, v144, *(void *)(*(void *)(v76 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v145, v144, v75);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v145, 0, 1, v75);
          }
          *(_OWORD *)&v57[v65[14]] = *(_OWORD *)&v58[v65[14]];
          uint64_t v132 = v65[15];
          uint64_t v133 = &v57[v132];
          uint64_t v134 = &v58[v132];
          *((void *)v133 + 2) = *((void *)v134 + 2);
          *(_OWORD *)uint64_t v133 = *(_OWORD *)v134;
          swift_storeEnumTagMultiPayload();
          a3 = v147;
          goto LABEL_22;
        case 2u:
          v149(v57, v58, v55);
          unint64_t v77 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v57[v77[5]] = *(_DWORD *)&v58[v77[5]];
          uint64_t v78 = v77[6];
          long long v79 = &v57[v78];
          long long v80 = &v58[v78];
          long long v81 = *((_OWORD *)v80 + 3);
          *((_OWORD *)v79 + 2) = *((_OWORD *)v80 + 2);
          *((_OWORD *)v79 + 3) = v81;
          long long v82 = *((_OWORD *)v80 + 1);
          *(_OWORD *)long long v79 = *(_OWORD *)v80;
          *((_OWORD *)v79 + 1) = v82;
          *(_OWORD *)&v57[v77[7]] = *(_OWORD *)&v58[v77[7]];
          *(void *)&v57[v77[8]] = *(void *)&v58[v77[8]];
          *(void *)&v57[v77[9]] = *(void *)&v58[v77[9]];
          *(void *)&v57[v77[10]] = *(void *)&v58[v77[10]];
          *(void *)&v57[v77[11]] = *(void *)&v58[v77[11]];
          *(void *)&v57[v77[12]] = *(void *)&v58[v77[12]];
          *(void *)&v57[v77[13]] = *(void *)&v58[v77[13]];
          v57[v77[14]] = v58[v77[14]];
          goto LABEL_21;
        case 3u:
        case 4u:
          v149(v57, v58, v55);
          long long v83 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v57[v83[5]] = *(_DWORD *)&v58[v83[5]];
          uint64_t v84 = v83[6];
          long long v85 = &v57[v84];
          long long v86 = &v58[v84];
          long long v87 = *((_OWORD *)v86 + 3);
          *((_OWORD *)v85 + 2) = *((_OWORD *)v86 + 2);
          *((_OWORD *)v85 + 3) = v87;
          long long v88 = *((_OWORD *)v86 + 1);
          *(_OWORD *)long long v85 = *(_OWORD *)v86;
          *((_OWORD *)v85 + 1) = v88;
          *(_OWORD *)&v57[v83[7]] = *(_OWORD *)&v58[v83[7]];
          *(void *)&v57[v83[8]] = *(void *)&v58[v83[8]];
          *(void *)&v57[v83[9]] = *(void *)&v58[v83[9]];
          *(void *)&v57[v83[10]] = *(void *)&v58[v83[10]];
          goto LABEL_21;
        case 5u:
          v149(v57, v58, v55);
          uint64_t v89 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v57[v89[5]] = *(_DWORD *)&v58[v89[5]];
          uint64_t v90 = v89[6];
          long long v91 = &v57[v90];
          long long v92 = &v58[v90];
          long long v93 = *((_OWORD *)v92 + 3);
          *((_OWORD *)v91 + 2) = *((_OWORD *)v92 + 2);
          *((_OWORD *)v91 + 3) = v93;
          long long v94 = *((_OWORD *)v92 + 1);
          *(_OWORD *)long long v91 = *(_OWORD *)v92;
          *((_OWORD *)v91 + 1) = v94;
          *(_OWORD *)&v57[v89[7]] = *(_OWORD *)&v58[v89[7]];
          *(void *)&v57[v89[8]] = *(void *)&v58[v89[8]];
          *(void *)&v57[v89[9]] = *(void *)&v58[v89[9]];
          goto LABEL_21;
        default:
          v149(v57, v58, v55);
          long long v59 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v57[v59[5]] = *(_DWORD *)&v58[v59[5]];
          uint64_t v60 = v59[6];
          uint64_t v61 = &v57[v60];
          long long v62 = &v58[v60];
          long long v63 = *((_OWORD *)v62 + 3);
          *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
          *((_OWORD *)v61 + 3) = v63;
          long long v64 = *((_OWORD *)v62 + 1);
          *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
          *((_OWORD *)v61 + 1) = v64;
          *(_OWORD *)&v57[v59[7]] = *(_OWORD *)&v58[v59[7]];
          *(void *)&v57[v59[8]] = *(void *)&v58[v59[8]];
          *(void *)&v57[v59[9]] = *(void *)&v58[v59[9]];
LABEL_21:
          swift_storeEnumTagMultiPayload();
LABEL_22:
          uint64_t v95 = v151[6];
          uint64_t v96 = &v52[v95];
          uint64_t v97 = &v53[v95];
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v148 = a3;
              v149(v96, v97, v55);
              long long v104 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)&v96[v104[5]] = *(_DWORD *)&v97[v104[5]];
              uint64_t v105 = v104[6];
              long long v106 = &v96[v105];
              long long v107 = &v97[v105];
              long long v108 = *((_OWORD *)v107 + 3);
              *((_OWORD *)v106 + 2) = *((_OWORD *)v107 + 2);
              *((_OWORD *)v106 + 3) = v108;
              long long v109 = *((_OWORD *)v107 + 1);
              *(_OWORD *)long long v106 = *(_OWORD *)v107;
              *((_OWORD *)v106 + 1) = v109;
              *(void *)&v96[v104[7]] = *(void *)&v97[v104[7]];
              *(void *)&v96[v104[8]] = *(void *)&v97[v104[8]];
              *(void *)&v96[v104[9]] = *(void *)&v97[v104[9]];
              v96[v104[10]] = v97[v104[10]];
              *(_OWORD *)&v96[v104[11]] = *(_OWORD *)&v97[v104[11]];
              *(_OWORD *)&v96[v104[12]] = *(_OWORD *)&v97[v104[12]];
              uint64_t v110 = v104[13];
              uint64_t v150 = &v96[v110];
              uint64_t v111 = &v97[v110];
              uint64_t v112 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v146 = *(void *)(v112 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v111, 1, v112))
              {
                uint64_t v113 = sub_10000F214(&qword_100524BD0);
                memcpy(v150, v111, *(void *)(*(void *)(v113 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v150, v111, v112);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v150, 0, 1, v112);
              }
              a3 = v148;
              *(_OWORD *)&v96[v104[14]] = *(_OWORD *)&v97[v104[14]];
              uint64_t v135 = v104[15];
              long long v136 = &v96[v135];
              uint64_t v137 = &v97[v135];
              *((void *)v136 + 2) = *((void *)v137 + 2);
              *(_OWORD *)long long v136 = *(_OWORD *)v137;
              break;
            case 2u:
              v149(v96, v97, v55);
              uint64_t v114 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)&v96[v114[5]] = *(_DWORD *)&v97[v114[5]];
              uint64_t v115 = v114[6];
              uint64_t v116 = &v96[v115];
              long long v117 = &v97[v115];
              long long v118 = *((_OWORD *)v117 + 3);
              *((_OWORD *)v116 + 2) = *((_OWORD *)v117 + 2);
              *((_OWORD *)v116 + 3) = v118;
              long long v119 = *((_OWORD *)v117 + 1);
              *(_OWORD *)uint64_t v116 = *(_OWORD *)v117;
              *((_OWORD *)v116 + 1) = v119;
              *(_OWORD *)&v96[v114[7]] = *(_OWORD *)&v97[v114[7]];
              *(void *)&v96[v114[8]] = *(void *)&v97[v114[8]];
              *(void *)&v96[v114[9]] = *(void *)&v97[v114[9]];
              *(void *)&v96[v114[10]] = *(void *)&v97[v114[10]];
              *(void *)&v96[v114[11]] = *(void *)&v97[v114[11]];
              *(void *)&v96[v114[12]] = *(void *)&v97[v114[12]];
              *(void *)&v96[v114[13]] = *(void *)&v97[v114[13]];
              v96[v114[14]] = v97[v114[14]];
              break;
            case 3u:
            case 4u:
              v149(v96, v97, v55);
              uint64_t v120 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)&v96[v120[5]] = *(_DWORD *)&v97[v120[5]];
              uint64_t v121 = v120[6];
              uint64_t v122 = &v96[v121];
              long long v123 = &v97[v121];
              long long v124 = *((_OWORD *)v123 + 3);
              *((_OWORD *)v122 + 2) = *((_OWORD *)v123 + 2);
              *((_OWORD *)v122 + 3) = v124;
              long long v125 = *((_OWORD *)v123 + 1);
              *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
              *((_OWORD *)v122 + 1) = v125;
              *(_OWORD *)&v96[v120[7]] = *(_OWORD *)&v97[v120[7]];
              *(void *)&v96[v120[8]] = *(void *)&v97[v120[8]];
              *(void *)&v96[v120[9]] = *(void *)&v97[v120[9]];
              *(void *)&v96[v120[10]] = *(void *)&v97[v120[10]];
              break;
            case 5u:
              v149(v96, v97, v55);
              uint64_t v126 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)&v96[v126[5]] = *(_DWORD *)&v97[v126[5]];
              uint64_t v127 = v126[6];
              uint64_t v128 = &v96[v127];
              long long v129 = &v97[v127];
              long long v130 = *((_OWORD *)v129 + 3);
              *((_OWORD *)v128 + 2) = *((_OWORD *)v129 + 2);
              *((_OWORD *)v128 + 3) = v130;
              long long v131 = *((_OWORD *)v129 + 1);
              *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
              *((_OWORD *)v128 + 1) = v131;
              *(_OWORD *)&v96[v126[7]] = *(_OWORD *)&v97[v126[7]];
              *(void *)&v96[v126[8]] = *(void *)&v97[v126[8]];
              *(void *)&v96[v126[9]] = *(void *)&v97[v126[9]];
              break;
            default:
              v149(v96, v97, v55);
              long long v98 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)&v96[v98[5]] = *(_DWORD *)&v97[v98[5]];
              uint64_t v99 = v98[6];
              long long v100 = &v96[v99];
              long long v101 = &v97[v99];
              long long v102 = *((_OWORD *)v101 + 3);
              *((_OWORD *)v100 + 2) = *((_OWORD *)v101 + 2);
              *((_OWORD *)v100 + 3) = v102;
              long long v103 = *((_OWORD *)v101 + 1);
              *(_OWORD *)long long v100 = *(_OWORD *)v101;
              *((_OWORD *)v100 + 1) = v103;
              *(_OWORD *)&v96[v98[7]] = *(_OWORD *)&v97[v98[7]];
              *(void *)&v96[v98[8]] = *(void *)&v97[v98[8]];
              *(void *)&v96[v98[9]] = *(void *)&v97[v98[9]];
              break;
          }
          swift_storeEnumTagMultiPayload();
          v52[v151[7]] = v53[v151[7]];
          *(void *)&v52[v151[8]] = *(void *)&v53[v151[8]];
          *(_DWORD *)&v52[v151[9]] = *(_DWORD *)&v53[v151[9]];
          swift_storeEnumTagMultiPayload();
          break;
      }
    }
    else
    {
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
  }
  uint64_t v138 = v13[6];
  uint64_t v139 = (_OWORD *)(a1 + v138);
  long long v140 = (_OWORD *)(a2 + v138);
  long long v141 = v140[1];
  *uint64_t v139 = *v140;
  v139[1] = v141;
  *(void *)(a1 + v13[7]) = *(void *)(a2 + v13[7]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001D6550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D6564);
}

uint64_t sub_1001D6564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DetectionRequest(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001D6624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D6638);
}

uint64_t sub_1001D6638(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DetectionRequest(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for DetectionResult(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100524C30);
}

uint64_t sub_1001D6714()
{
  uint64_t result = type metadata accessor for DetectionRequest(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1001D67AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 2:
        uint64_t v11 = type metadata accessor for UUID();
        long long v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16);
        v12(a1, a2, v11);
        uint64_t v13 = (int *)type metadata accessor for CVTrackSnapshot(0);
        uint64_t v14 = v13[5];
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        type metadata accessor for CVDetection();
        long long v180 = (void *)v11;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            long long v178 = v13;
            uint64_t v175 = v12;
            v12((uint64_t *)v15, (uint64_t *)v16, v11);
            uint64_t v28 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v15[v28[5]] = *(_DWORD *)&v16[v28[5]];
            uint64_t v29 = v28[6];
            uint64_t v30 = &v15[v29];
            long long v31 = &v16[v29];
            long long v32 = *((_OWORD *)v31 + 3);
            *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
            *((_OWORD *)v30 + 3) = v32;
            long long v33 = *((_OWORD *)v31 + 1);
            *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
            *((_OWORD *)v30 + 1) = v33;
            *(void *)&v15[v28[7]] = *(void *)&v16[v28[7]];
            *(void *)&v15[v28[8]] = *(void *)&v16[v28[8]];
            *(void *)&v15[v28[9]] = *(void *)&v16[v28[9]];
            v15[v28[10]] = v16[v28[10]];
            uint64_t v34 = v28[11];
            uint64_t v35 = &v15[v34];
            uint64_t v36 = &v16[v34];
            uint64_t v37 = *((void *)v36 + 1);
            *(void *)uint64_t v35 = *(void *)v36;
            *((void *)v35 + 1) = v37;
            uint64_t v38 = v28[12];
            long long v39 = &v15[v38];
            long long v40 = &v16[v38];
            uint64_t v41 = *((void *)v40 + 1);
            *(void *)long long v39 = *(void *)v40;
            *((void *)v39 + 1) = v41;
            uint64_t v42 = v28[13];
            __dst = &v15[v42];
            uint64_t v171 = &v16[v42];
            uint64_t v43 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v169 = *(void *)(v43 - 8);
            long long v170 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v170(v171, 1, v43))
            {
              uint64_t v44 = sub_10000F214(&qword_100524BD0);
              memcpy(__dst, v171, *(void *)(*(void *)(v44 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v169 + 16))(__dst, v171, v43);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v169 + 56))(__dst, 0, 1, v43);
            }
            uint64_t v81 = v28[14];
            long long v82 = &v15[v81];
            long long v83 = &v16[v81];
            unint64_t v84 = *((void *)v83 + 1);
            uint64_t v13 = v178;
            if (v84 >> 60 == 15)
            {
              *(_OWORD *)long long v82 = *(_OWORD *)v83;
            }
            else
            {
              uint64_t v85 = *(void *)v83;
              sub_100038528(*(void *)v83, *((void *)v83 + 1));
              *(void *)long long v82 = v85;
              *((void *)v82 + 1) = v84;
            }
            long long v12 = v175;
            uint64_t v86 = v28[15];
            long long v87 = &v15[v86];
            long long v88 = &v16[v86];
            if (*(void *)v88)
            {
              uint64_t v89 = *((void *)v88 + 1);
              uint64_t v90 = *((void *)v88 + 2);
              *(void *)long long v87 = *(void *)v88;
              *((void *)v87 + 1) = v89;
              *((void *)v87 + 2) = v90;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              *(_OWORD *)long long v87 = *(_OWORD *)v88;
              *((void *)v87 + 2) = *((void *)v88 + 2);
            }
            break;
          case 2u:
            v12((uint64_t *)v15, (uint64_t *)v16, v11);
            long long v45 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v15[v45[5]] = *(_DWORD *)&v16[v45[5]];
            uint64_t v46 = v45[6];
            long long v47 = &v15[v46];
            uint64_t v48 = &v16[v46];
            long long v49 = *((_OWORD *)v48 + 3);
            *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
            *((_OWORD *)v47 + 3) = v49;
            long long v50 = *((_OWORD *)v48 + 1);
            *(_OWORD *)long long v47 = *(_OWORD *)v48;
            *((_OWORD *)v47 + 1) = v50;
            uint64_t v51 = v45[7];
            uint64_t v52 = &v15[v51];
            id v53 = &v16[v51];
            uint64_t v55 = *(void *)v53;
            uint64_t v54 = *((void *)v53 + 1);
            *(void *)uint64_t v52 = v55;
            *((void *)v52 + 1) = v54;
            *(void *)&v15[v45[8]] = *(void *)&v16[v45[8]];
            *(void *)&v15[v45[9]] = *(void *)&v16[v45[9]];
            *(void *)&v15[v45[10]] = *(void *)&v16[v45[10]];
            *(void *)&v15[v45[11]] = *(void *)&v16[v45[11]];
            long long v176 = v12;
            *(void *)&v15[v45[12]] = *(void *)&v16[v45[12]];
            uint64_t v56 = v45[13];
            long long v57 = *(void **)&v16[v56];
            *(void *)&v15[v56] = v57;
            v15[v45[14]] = v16[v45[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v58 = v57;
            long long v12 = v176;
            break;
          case 3u:
          case 4u:
            v12((uint64_t *)v15, (uint64_t *)v16, v11);
            long long v59 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v15[v59[5]] = *(_DWORD *)&v16[v59[5]];
            uint64_t v60 = v59[6];
            uint64_t v61 = &v15[v60];
            long long v62 = &v16[v60];
            long long v63 = *((_OWORD *)v62 + 3);
            *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
            *((_OWORD *)v61 + 3) = v63;
            long long v64 = *((_OWORD *)v62 + 1);
            *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
            *((_OWORD *)v61 + 1) = v64;
            uint64_t v65 = v59[7];
            uint64_t v66 = &v15[v65];
            uint64_t v67 = &v16[v65];
            uint64_t v69 = *(void *)v67;
            uint64_t v68 = *((void *)v67 + 1);
            *(void *)uint64_t v66 = v69;
            *((void *)v66 + 1) = v68;
            *(void *)&v15[v59[8]] = *(void *)&v16[v59[8]];
            *(void *)&v15[v59[9]] = *(void *)&v16[v59[9]];
            *(void *)&v15[v59[10]] = *(void *)&v16[v59[10]];
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            v12((uint64_t *)v15, (uint64_t *)v16, v11);
            long long v70 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v15[v70[5]] = *(_DWORD *)&v16[v70[5]];
            uint64_t v71 = v70[6];
            long long v72 = &v15[v71];
            uint64_t v73 = &v16[v71];
            long long v74 = *((_OWORD *)v73 + 3);
            *((_OWORD *)v72 + 2) = *((_OWORD *)v73 + 2);
            *((_OWORD *)v72 + 3) = v74;
            long long v75 = *((_OWORD *)v73 + 1);
            *(_OWORD *)long long v72 = *(_OWORD *)v73;
            *((_OWORD *)v72 + 1) = v75;
            uint64_t v76 = v70[7];
            unint64_t v77 = &v15[v76];
            uint64_t v78 = &v16[v76];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            *(void *)unint64_t v77 = v80;
            *((void *)v77 + 1) = v79;
            *(void *)&v15[v70[8]] = *(void *)&v16[v70[8]];
            *(void *)&v15[v70[9]] = *(void *)&v16[v70[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            v12((uint64_t *)v15, (uint64_t *)v16, v11);
            uint64_t v17 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v15[v17[5]] = *(_DWORD *)&v16[v17[5]];
            uint64_t v18 = v17[6];
            long long v19 = &v15[v18];
            long long v20 = &v16[v18];
            long long v21 = *((_OWORD *)v20 + 3);
            *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
            *((_OWORD *)v19 + 3) = v21;
            long long v22 = *((_OWORD *)v20 + 1);
            *(_OWORD *)long long v19 = *(_OWORD *)v20;
            *((_OWORD *)v19 + 1) = v22;
            uint64_t v23 = v17[7];
            uint64_t v24 = &v15[v23];
            uint64_t v25 = &v16[v23];
            uint64_t v27 = *(void *)v25;
            uint64_t v26 = *((void *)v25 + 1);
            *(void *)uint64_t v24 = v27;
            *((void *)v24 + 1) = v26;
            *(void *)&v15[v17[8]] = *(void *)&v16[v17[8]];
            *(void *)&v15[v17[9]] = *(void *)&v16[v17[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v91 = v13[6];
        long long v92 = (char *)a1 + v91;
        long long v93 = (char *)a2 + v91;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            long long v179 = v13;
            v12((uint64_t *)v92, (uint64_t *)v93, (uint64_t)v180);
            uint64_t v105 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v92[v105[5]] = *(_DWORD *)&v93[v105[5]];
            uint64_t v106 = v105[6];
            long long v107 = &v92[v106];
            long long v108 = &v93[v106];
            long long v109 = *((_OWORD *)v108 + 3);
            *((_OWORD *)v107 + 2) = *((_OWORD *)v108 + 2);
            *((_OWORD *)v107 + 3) = v109;
            long long v110 = *((_OWORD *)v108 + 1);
            *(_OWORD *)long long v107 = *(_OWORD *)v108;
            *((_OWORD *)v107 + 1) = v110;
            *(void *)&v92[v105[7]] = *(void *)&v93[v105[7]];
            *(void *)&v92[v105[8]] = *(void *)&v93[v105[8]];
            *(void *)&v92[v105[9]] = *(void *)&v93[v105[9]];
            v92[v105[10]] = v93[v105[10]];
            uint64_t v111 = v105[11];
            uint64_t v112 = &v92[v111];
            uint64_t v113 = &v93[v111];
            uint64_t v114 = *((void *)v113 + 1);
            *(void *)uint64_t v112 = *(void *)v113;
            *((void *)v112 + 1) = v114;
            uint64_t v115 = v105[12];
            uint64_t v116 = &v92[v115];
            long long v117 = &v93[v115];
            uint64_t v118 = *((void *)v117 + 1);
            *(void *)uint64_t v116 = *(void *)v117;
            *((void *)v116 + 1) = v118;
            uint64_t v119 = v105[13];
            uint64_t v181 = &v92[v119];
            long long v177 = &v93[v119];
            uint64_t v120 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v172 = *(void *)(v120 - 8);
            __dsta = *(unsigned int (**)(char *, uint64_t, uint64_t))(v172 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__dsta(v177, 1, v120))
            {
              uint64_t v121 = sub_10000F214(&qword_100524BD0);
              memcpy(v181, v177, *(void *)(*(void *)(v121 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v181, v177, v120);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v172 + 56))(v181, 0, 1, v120);
            }
            uint64_t v158 = v105[14];
            uint64_t v159 = &v92[v158];
            long long v160 = &v93[v158];
            unint64_t v161 = *((void *)v160 + 1);
            uint64_t v13 = v179;
            if (v161 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v159 = *(_OWORD *)v160;
            }
            else
            {
              uint64_t v162 = *(void *)v160;
              sub_100038528(*(void *)v160, *((void *)v160 + 1));
              *(void *)uint64_t v159 = v162;
              *((void *)v159 + 1) = v161;
            }
            uint64_t v163 = v105[15];
            uint64_t v164 = &v92[v163];
            uint64_t v165 = &v93[v163];
            if (*(void *)v165)
            {
              uint64_t v166 = *((void *)v165 + 1);
              uint64_t v167 = *((void *)v165 + 2);
              *(void *)uint64_t v164 = *(void *)v165;
              *((void *)v164 + 1) = v166;
              *((void *)v164 + 2) = v167;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
              *((void *)v164 + 2) = *((void *)v165 + 2);
            }
            break;
          case 2u:
            v12((uint64_t *)v92, (uint64_t *)v93, (uint64_t)v180);
            uint64_t v122 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v92[v122[5]] = *(_DWORD *)&v93[v122[5]];
            uint64_t v123 = v122[6];
            long long v124 = &v92[v123];
            long long v125 = &v93[v123];
            long long v126 = *((_OWORD *)v125 + 3);
            *((_OWORD *)v124 + 2) = *((_OWORD *)v125 + 2);
            *((_OWORD *)v124 + 3) = v126;
            long long v127 = *((_OWORD *)v125 + 1);
            *(_OWORD *)long long v124 = *(_OWORD *)v125;
            *((_OWORD *)v124 + 1) = v127;
            uint64_t v128 = v122[7];
            long long v129 = &v92[v128];
            long long v130 = &v93[v128];
            uint64_t v132 = *(void *)v130;
            uint64_t v131 = *((void *)v130 + 1);
            *(void *)long long v129 = v132;
            *((void *)v129 + 1) = v131;
            *(void *)&v92[v122[8]] = *(void *)&v93[v122[8]];
            *(void *)&v92[v122[9]] = *(void *)&v93[v122[9]];
            *(void *)&v92[v122[10]] = *(void *)&v93[v122[10]];
            *(void *)&v92[v122[11]] = *(void *)&v93[v122[11]];
            *(void *)&v92[v122[12]] = *(void *)&v93[v122[12]];
            uint64_t v133 = v122[13];
            uint64_t v134 = *(void **)&v93[v133];
            *(void *)&v92[v133] = v134;
            v92[v122[14]] = v93[v122[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v135 = v134;
            break;
          case 3u:
          case 4u:
            v12((uint64_t *)v92, (uint64_t *)v93, (uint64_t)v180);
            long long v136 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v92[v136[5]] = *(_DWORD *)&v93[v136[5]];
            uint64_t v137 = v136[6];
            uint64_t v138 = &v92[v137];
            uint64_t v139 = &v93[v137];
            long long v140 = *((_OWORD *)v139 + 3);
            *((_OWORD *)v138 + 2) = *((_OWORD *)v139 + 2);
            *((_OWORD *)v138 + 3) = v140;
            long long v141 = *((_OWORD *)v139 + 1);
            *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
            *((_OWORD *)v138 + 1) = v141;
            uint64_t v142 = v136[7];
            uint64_t v143 = &v92[v142];
            uint64_t v144 = &v93[v142];
            uint64_t v146 = *(void *)v144;
            uint64_t v145 = *((void *)v144 + 1);
            *(void *)uint64_t v143 = v146;
            *((void *)v143 + 1) = v145;
            *(void *)&v92[v136[8]] = *(void *)&v93[v136[8]];
            *(void *)&v92[v136[9]] = *(void *)&v93[v136[9]];
            *(void *)&v92[v136[10]] = *(void *)&v93[v136[10]];
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            v12((uint64_t *)v92, (uint64_t *)v93, (uint64_t)v180);
            uint64_t v147 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v92[v147[5]] = *(_DWORD *)&v93[v147[5]];
            uint64_t v148 = v147[6];
            uint64_t v149 = &v92[v148];
            uint64_t v150 = &v93[v148];
            long long v151 = *((_OWORD *)v150 + 3);
            *((_OWORD *)v149 + 2) = *((_OWORD *)v150 + 2);
            *((_OWORD *)v149 + 3) = v151;
            long long v152 = *((_OWORD *)v150 + 1);
            *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
            *((_OWORD *)v149 + 1) = v152;
            uint64_t v153 = v147[7];
            long long v154 = &v92[v153];
            unint64_t v155 = &v93[v153];
            uint64_t v157 = *(void *)v155;
            uint64_t v156 = *((void *)v155 + 1);
            *(void *)long long v154 = v157;
            *((void *)v154 + 1) = v156;
            *(void *)&v92[v147[8]] = *(void *)&v93[v147[8]];
            *(void *)&v92[v147[9]] = *(void *)&v93[v147[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            v12((uint64_t *)v92, (uint64_t *)v93, (uint64_t)v180);
            long long v94 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v92[v94[5]] = *(_DWORD *)&v93[v94[5]];
            uint64_t v95 = v94[6];
            uint64_t v96 = &v92[v95];
            uint64_t v97 = &v93[v95];
            long long v98 = *((_OWORD *)v97 + 3);
            *((_OWORD *)v96 + 2) = *((_OWORD *)v97 + 2);
            *((_OWORD *)v96 + 3) = v98;
            long long v99 = *((_OWORD *)v97 + 1);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
            *((_OWORD *)v96 + 1) = v99;
            uint64_t v100 = v94[7];
            long long v101 = &v92[v100];
            long long v102 = &v93[v100];
            uint64_t v104 = *(void *)v102;
            uint64_t v103 = *((void *)v102 + 1);
            *(void *)long long v101 = v104;
            *((void *)v101 + 1) = v103;
            *(void *)&v92[v94[8]] = *(void *)&v93[v94[8]];
            *(void *)&v92[v94[9]] = *(void *)&v93[v94[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        *((unsigned char *)a1 + v13[7]) = *((unsigned char *)a2 + v13[7]);
        *(uint64_t *)((char *)a1 + v13[8]) = *(uint64_t *)((char *)a2 + v13[8]);
        *(_DWORD *)((char *)a1 + v13[9]) = *(_DWORD *)((char *)a2 + v13[9]);
        goto LABEL_38;
      case 0:
        uint64_t v9 = *a2;
        unint64_t v8 = a2[1];
        sub_100038528(v9, v8);
        *a1 = v9;
        a1[1] = v8;
LABEL_38:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

void sub_1001D7528(uint64_t *a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
LABEL_37:
      swift_bridgeObjectRelease();
      break;
    case 2:
      uint64_t v5 = type metadata accessor for UUID();
      uint64_t v6 = *(void (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(a1, v5);
      uint64_t v7 = type metadata accessor for CVTrackSnapshot(0);
      unint64_t v8 = (char *)a1 + *(int *)(v7 + 20);
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v6((uint64_t *)v8, v5);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_19;
        case 1u:
          v6((uint64_t *)v8, v5);
          uint64_t v9 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v10 = &v8[v9[13]];
          uint64_t v11 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v24 = *(void *)(v11 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v10, 1, v11)) {
            (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v11);
          }
          long long v12 = (uint64_t *)&v8[v9[14]];
          unint64_t v13 = v12[1];
          if (v13 >> 60 != 15) {
            sub_100038B34(*v12, v13);
          }
          if (*(void *)&v8[v9[15]])
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v6((uint64_t *)v8, v5);
          uint64_t v14 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v6((uint64_t *)v8, v5);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v6((uint64_t *)v8, v5);
          type metadata accessor for StreamingTextDetectorResult(0);
LABEL_19:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      uint64_t v15 = (char *)a1 + *(int *)(v7 + 24);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v6((uint64_t *)v15, v5);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_37;
        case 1u:
          v6((uint64_t *)v15, v5);
          uint64_t v16 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v17 = &v15[v16[13]];
          uint64_t v18 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v19 = *(void *)(v18 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
            (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
          }
          long long v20 = (uint64_t *)&v15[v16[14]];
          unint64_t v21 = v20[1];
          if (v21 >> 60 != 15) {
            sub_100038B34(*v20, v21);
          }
          if (!*(void *)&v15[v16[15]]) {
            return;
          }
          swift_bridgeObjectRelease();
LABEL_29:
          swift_release();
          break;
        case 2u:
          v6((uint64_t *)v15, v5);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v23 = *(void **)&v15[*(int *)(v22 + 52)];

          return;
        case 3u:
        case 4u:
          v6((uint64_t *)v15, v5);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          goto LABEL_29;
        case 5u:
          v6((uint64_t *)v15, v5);
          type metadata accessor for StreamingTextDetectorResult(0);
          goto LABEL_37;
        default:
          return;
      }
      break;
    case 0:
      uint64_t v3 = *a1;
      unint64_t v4 = a1[1];
      sub_100038B34(v3, v4);
      break;
  }
}

uint64_t *sub_1001D7B38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_36;
    case 2:
      uint64_t v9 = type metadata accessor for UUID();
      uint64_t v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16);
      v10(a1, a2, v9);
      uint64_t v11 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v12 = v11[5];
      unint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      type metadata accessor for CVDetection();
      long long v178 = (void *)v9;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          long long v176 = v11;
          uint64_t v173 = v10;
          v10((uint64_t *)v13, (uint64_t *)v14, v9);
          uint64_t v26 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v13[v26[5]] = *(_DWORD *)&v14[v26[5]];
          uint64_t v27 = v26[6];
          uint64_t v28 = &v13[v27];
          uint64_t v29 = &v14[v27];
          long long v30 = *((_OWORD *)v29 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 3) = v30;
          long long v31 = *((_OWORD *)v29 + 1);
          *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
          *((_OWORD *)v28 + 1) = v31;
          *(void *)&v13[v26[7]] = *(void *)&v14[v26[7]];
          *(void *)&v13[v26[8]] = *(void *)&v14[v26[8]];
          *(void *)&v13[v26[9]] = *(void *)&v14[v26[9]];
          v13[v26[10]] = v14[v26[10]];
          uint64_t v32 = v26[11];
          long long v33 = &v13[v32];
          uint64_t v34 = &v14[v32];
          uint64_t v35 = *((void *)v34 + 1);
          *(void *)long long v33 = *(void *)v34;
          *((void *)v33 + 1) = v35;
          uint64_t v36 = v26[12];
          uint64_t v37 = &v13[v36];
          uint64_t v38 = &v14[v36];
          uint64_t v39 = *((void *)v38 + 1);
          *(void *)uint64_t v37 = *(void *)v38;
          *((void *)v37 + 1) = v39;
          uint64_t v40 = v26[13];
          __dst = &v13[v40];
          uint64_t v169 = &v14[v40];
          uint64_t v41 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v167 = *(void *)(v41 - 8);
          long long v168 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v168(v169, 1, v41))
          {
            uint64_t v42 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v169, *(void *)(*(void *)(v42 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v167 + 16))(__dst, v169, v41);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v167 + 56))(__dst, 0, 1, v41);
          }
          uint64_t v79 = v26[14];
          uint64_t v80 = &v13[v79];
          uint64_t v81 = &v14[v79];
          unint64_t v82 = *((void *)v81 + 1);
          uint64_t v11 = v176;
          if (v82 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
          }
          else
          {
            uint64_t v83 = *(void *)v81;
            sub_100038528(*(void *)v81, *((void *)v81 + 1));
            *(void *)uint64_t v80 = v83;
            *((void *)v80 + 1) = v82;
          }
          uint64_t v10 = v173;
          uint64_t v84 = v26[15];
          uint64_t v85 = &v13[v84];
          uint64_t v86 = &v14[v84];
          if (*(void *)v86)
          {
            uint64_t v87 = *((void *)v86 + 1);
            uint64_t v88 = *((void *)v86 + 2);
            *(void *)uint64_t v85 = *(void *)v86;
            *((void *)v85 + 1) = v87;
            *((void *)v85 + 2) = v88;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
            *((void *)v85 + 2) = *((void *)v86 + 2);
          }
          break;
        case 2u:
          v10((uint64_t *)v13, (uint64_t *)v14, v9);
          uint64_t v43 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v13[v43[5]] = *(_DWORD *)&v14[v43[5]];
          uint64_t v44 = v43[6];
          long long v45 = &v13[v44];
          uint64_t v46 = &v14[v44];
          long long v47 = *((_OWORD *)v46 + 3);
          *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
          *((_OWORD *)v45 + 3) = v47;
          long long v48 = *((_OWORD *)v46 + 1);
          *(_OWORD *)long long v45 = *(_OWORD *)v46;
          *((_OWORD *)v45 + 1) = v48;
          uint64_t v49 = v43[7];
          long long v50 = &v13[v49];
          uint64_t v51 = &v14[v49];
          uint64_t v53 = *(void *)v51;
          uint64_t v52 = *((void *)v51 + 1);
          *(void *)long long v50 = v53;
          *((void *)v50 + 1) = v52;
          *(void *)&v13[v43[8]] = *(void *)&v14[v43[8]];
          *(void *)&v13[v43[9]] = *(void *)&v14[v43[9]];
          *(void *)&v13[v43[10]] = *(void *)&v14[v43[10]];
          *(void *)&v13[v43[11]] = *(void *)&v14[v43[11]];
          uint64_t v174 = v10;
          *(void *)&v13[v43[12]] = *(void *)&v14[v43[12]];
          uint64_t v54 = v43[13];
          uint64_t v55 = *(void **)&v14[v54];
          *(void *)&v13[v54] = v55;
          v13[v43[14]] = v14[v43[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v56 = v55;
          uint64_t v10 = v174;
          break;
        case 3u:
        case 4u:
          v10((uint64_t *)v13, (uint64_t *)v14, v9);
          long long v57 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v13[v57[5]] = *(_DWORD *)&v14[v57[5]];
          uint64_t v58 = v57[6];
          long long v59 = &v13[v58];
          uint64_t v60 = &v14[v58];
          long long v61 = *((_OWORD *)v60 + 3);
          *((_OWORD *)v59 + 2) = *((_OWORD *)v60 + 2);
          *((_OWORD *)v59 + 3) = v61;
          long long v62 = *((_OWORD *)v60 + 1);
          *(_OWORD *)long long v59 = *(_OWORD *)v60;
          *((_OWORD *)v59 + 1) = v62;
          uint64_t v63 = v57[7];
          long long v64 = &v13[v63];
          uint64_t v65 = &v14[v63];
          uint64_t v67 = *(void *)v65;
          uint64_t v66 = *((void *)v65 + 1);
          *(void *)long long v64 = v67;
          *((void *)v64 + 1) = v66;
          *(void *)&v13[v57[8]] = *(void *)&v14[v57[8]];
          *(void *)&v13[v57[9]] = *(void *)&v14[v57[9]];
          *(void *)&v13[v57[10]] = *(void *)&v14[v57[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v10((uint64_t *)v13, (uint64_t *)v14, v9);
          uint64_t v68 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v13[v68[5]] = *(_DWORD *)&v14[v68[5]];
          uint64_t v69 = v68[6];
          long long v70 = &v13[v69];
          uint64_t v71 = &v14[v69];
          long long v72 = *((_OWORD *)v71 + 3);
          *((_OWORD *)v70 + 2) = *((_OWORD *)v71 + 2);
          *((_OWORD *)v70 + 3) = v72;
          long long v73 = *((_OWORD *)v71 + 1);
          *(_OWORD *)long long v70 = *(_OWORD *)v71;
          *((_OWORD *)v70 + 1) = v73;
          uint64_t v74 = v68[7];
          long long v75 = &v13[v74];
          uint64_t v76 = &v14[v74];
          uint64_t v78 = *(void *)v76;
          uint64_t v77 = *((void *)v76 + 1);
          *(void *)long long v75 = v78;
          *((void *)v75 + 1) = v77;
          *(void *)&v13[v68[8]] = *(void *)&v14[v68[8]];
          *(void *)&v13[v68[9]] = *(void *)&v14[v68[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v10((uint64_t *)v13, (uint64_t *)v14, v9);
          uint64_t v15 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v13[v15[5]] = *(_DWORD *)&v14[v15[5]];
          uint64_t v16 = v15[6];
          uint64_t v17 = &v13[v16];
          uint64_t v18 = &v14[v16];
          long long v19 = *((_OWORD *)v18 + 3);
          *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
          *((_OWORD *)v17 + 3) = v19;
          long long v20 = *((_OWORD *)v18 + 1);
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
          *((_OWORD *)v17 + 1) = v20;
          uint64_t v21 = v15[7];
          uint64_t v22 = &v13[v21];
          uint64_t v23 = &v14[v21];
          uint64_t v25 = *(void *)v23;
          uint64_t v24 = *((void *)v23 + 1);
          *(void *)uint64_t v22 = v25;
          *((void *)v22 + 1) = v24;
          *(void *)&v13[v15[8]] = *(void *)&v14[v15[8]];
          *(void *)&v13[v15[9]] = *(void *)&v14[v15[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v89 = v11[6];
      uint64_t v90 = (char *)a1 + v89;
      uint64_t v91 = (char *)a2 + v89;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          long long v177 = v11;
          v10((uint64_t *)v90, (uint64_t *)v91, (uint64_t)v178);
          uint64_t v103 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v90[v103[5]] = *(_DWORD *)&v91[v103[5]];
          uint64_t v104 = v103[6];
          uint64_t v105 = &v90[v104];
          uint64_t v106 = &v91[v104];
          long long v107 = *((_OWORD *)v106 + 3);
          *((_OWORD *)v105 + 2) = *((_OWORD *)v106 + 2);
          *((_OWORD *)v105 + 3) = v107;
          long long v108 = *((_OWORD *)v106 + 1);
          *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
          *((_OWORD *)v105 + 1) = v108;
          *(void *)&v90[v103[7]] = *(void *)&v91[v103[7]];
          *(void *)&v90[v103[8]] = *(void *)&v91[v103[8]];
          *(void *)&v90[v103[9]] = *(void *)&v91[v103[9]];
          v90[v103[10]] = v91[v103[10]];
          uint64_t v109 = v103[11];
          long long v110 = &v90[v109];
          uint64_t v111 = &v91[v109];
          uint64_t v112 = *((void *)v111 + 1);
          *(void *)long long v110 = *(void *)v111;
          *((void *)v110 + 1) = v112;
          uint64_t v113 = v103[12];
          uint64_t v114 = &v90[v113];
          uint64_t v115 = &v91[v113];
          uint64_t v116 = *((void *)v115 + 1);
          *(void *)uint64_t v114 = *(void *)v115;
          *((void *)v114 + 1) = v116;
          uint64_t v117 = v103[13];
          long long v179 = &v90[v117];
          uint64_t v175 = &v91[v117];
          uint64_t v118 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v170 = *(void *)(v118 - 8);
          __dsta = *(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__dsta(v175, 1, v118))
          {
            uint64_t v119 = sub_10000F214(&qword_100524BD0);
            memcpy(v179, v175, *(void *)(*(void *)(v119 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v179, v175, v118);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(v179, 0, 1, v118);
          }
          uint64_t v156 = v103[14];
          uint64_t v157 = &v90[v156];
          uint64_t v158 = &v91[v156];
          unint64_t v159 = *((void *)v158 + 1);
          uint64_t v11 = v177;
          if (v159 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v157 = *(_OWORD *)v158;
          }
          else
          {
            uint64_t v160 = *(void *)v158;
            sub_100038528(*(void *)v158, *((void *)v158 + 1));
            *(void *)uint64_t v157 = v160;
            *((void *)v157 + 1) = v159;
          }
          uint64_t v161 = v103[15];
          uint64_t v162 = &v90[v161];
          uint64_t v163 = &v91[v161];
          if (*(void *)v163)
          {
            uint64_t v164 = *((void *)v163 + 1);
            uint64_t v165 = *((void *)v163 + 2);
            *(void *)uint64_t v162 = *(void *)v163;
            *((void *)v162 + 1) = v164;
            *((void *)v162 + 2) = v165;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
            *((void *)v162 + 2) = *((void *)v163 + 2);
          }
          break;
        case 2u:
          v10((uint64_t *)v90, (uint64_t *)v91, (uint64_t)v178);
          uint64_t v120 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v90[v120[5]] = *(_DWORD *)&v91[v120[5]];
          uint64_t v121 = v120[6];
          uint64_t v122 = &v90[v121];
          uint64_t v123 = &v91[v121];
          long long v124 = *((_OWORD *)v123 + 3);
          *((_OWORD *)v122 + 2) = *((_OWORD *)v123 + 2);
          *((_OWORD *)v122 + 3) = v124;
          long long v125 = *((_OWORD *)v123 + 1);
          *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
          *((_OWORD *)v122 + 1) = v125;
          uint64_t v126 = v120[7];
          long long v127 = &v90[v126];
          uint64_t v128 = &v91[v126];
          uint64_t v130 = *(void *)v128;
          uint64_t v129 = *((void *)v128 + 1);
          *(void *)long long v127 = v130;
          *((void *)v127 + 1) = v129;
          *(void *)&v90[v120[8]] = *(void *)&v91[v120[8]];
          *(void *)&v90[v120[9]] = *(void *)&v91[v120[9]];
          *(void *)&v90[v120[10]] = *(void *)&v91[v120[10]];
          *(void *)&v90[v120[11]] = *(void *)&v91[v120[11]];
          *(void *)&v90[v120[12]] = *(void *)&v91[v120[12]];
          uint64_t v131 = v120[13];
          uint64_t v132 = *(void **)&v91[v131];
          *(void *)&v90[v131] = v132;
          v90[v120[14]] = v91[v120[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v133 = v132;
          break;
        case 3u:
        case 4u:
          v10((uint64_t *)v90, (uint64_t *)v91, (uint64_t)v178);
          uint64_t v134 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v90[v134[5]] = *(_DWORD *)&v91[v134[5]];
          uint64_t v135 = v134[6];
          long long v136 = &v90[v135];
          uint64_t v137 = &v91[v135];
          long long v138 = *((_OWORD *)v137 + 3);
          *((_OWORD *)v136 + 2) = *((_OWORD *)v137 + 2);
          *((_OWORD *)v136 + 3) = v138;
          long long v139 = *((_OWORD *)v137 + 1);
          *(_OWORD *)long long v136 = *(_OWORD *)v137;
          *((_OWORD *)v136 + 1) = v139;
          uint64_t v140 = v134[7];
          long long v141 = &v90[v140];
          uint64_t v142 = &v91[v140];
          uint64_t v144 = *(void *)v142;
          uint64_t v143 = *((void *)v142 + 1);
          *(void *)long long v141 = v144;
          *((void *)v141 + 1) = v143;
          *(void *)&v90[v134[8]] = *(void *)&v91[v134[8]];
          *(void *)&v90[v134[9]] = *(void *)&v91[v134[9]];
          *(void *)&v90[v134[10]] = *(void *)&v91[v134[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v10((uint64_t *)v90, (uint64_t *)v91, (uint64_t)v178);
          uint64_t v145 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v90[v145[5]] = *(_DWORD *)&v91[v145[5]];
          uint64_t v146 = v145[6];
          uint64_t v147 = &v90[v146];
          uint64_t v148 = &v91[v146];
          long long v149 = *((_OWORD *)v148 + 3);
          *((_OWORD *)v147 + 2) = *((_OWORD *)v148 + 2);
          *((_OWORD *)v147 + 3) = v149;
          long long v150 = *((_OWORD *)v148 + 1);
          *(_OWORD *)uint64_t v147 = *(_OWORD *)v148;
          *((_OWORD *)v147 + 1) = v150;
          uint64_t v151 = v145[7];
          long long v152 = &v90[v151];
          uint64_t v153 = &v91[v151];
          uint64_t v155 = *(void *)v153;
          uint64_t v154 = *((void *)v153 + 1);
          *(void *)long long v152 = v155;
          *((void *)v152 + 1) = v154;
          *(void *)&v90[v145[8]] = *(void *)&v91[v145[8]];
          *(void *)&v90[v145[9]] = *(void *)&v91[v145[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v10((uint64_t *)v90, (uint64_t *)v91, (uint64_t)v178);
          long long v92 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v90[v92[5]] = *(_DWORD *)&v91[v92[5]];
          uint64_t v93 = v92[6];
          long long v94 = &v90[v93];
          uint64_t v95 = &v91[v93];
          long long v96 = *((_OWORD *)v95 + 3);
          *((_OWORD *)v94 + 2) = *((_OWORD *)v95 + 2);
          *((_OWORD *)v94 + 3) = v96;
          long long v97 = *((_OWORD *)v95 + 1);
          *(_OWORD *)long long v94 = *(_OWORD *)v95;
          *((_OWORD *)v94 + 1) = v97;
          uint64_t v98 = v92[7];
          long long v99 = &v90[v98];
          uint64_t v100 = &v91[v98];
          uint64_t v102 = *(void *)v100;
          uint64_t v101 = *((void *)v100 + 1);
          *(void *)long long v99 = v102;
          *((void *)v99 + 1) = v101;
          *(void *)&v90[v92[8]] = *(void *)&v91[v92[8]];
          *(void *)&v90[v92[9]] = *(void *)&v91[v92[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      *((unsigned char *)a1 + v11[7]) = *((unsigned char *)a2 + v11[7]);
      *(uint64_t *)((char *)a1 + v11[8]) = *(uint64_t *)((char *)a2 + v11[8]);
      *(_DWORD *)((char *)a1 + v11[9]) = *(_DWORD *)((char *)a2 + v11[9]);
      goto LABEL_36;
    case 0:
      uint64_t v8 = *a2;
      unint64_t v7 = a2[1];
      sub_100038528(v8, v7);
      *a1 = v8;
      a1[1] = v7;
LABEL_36:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t *sub_1001D8870(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001D430C((uint64_t)a1, type metadata accessor for DetectionRequest.Originator);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_37;
      case 2:
        uint64_t v9 = type metadata accessor for UUID();
        uint64_t v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16);
        v10(a1, a2, v9);
        uint64_t v11 = (int *)type metadata accessor for CVTrackSnapshot(0);
        uint64_t v12 = v11[5];
        unint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        type metadata accessor for CVDetection();
        uint64_t v166 = (void *)v9;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v163 = v10;
            v10((uint64_t *)v13, (uint64_t *)v14, v9);
            uint64_t v25 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v13[v25[5]] = *(_DWORD *)&v14[v25[5]];
            uint64_t v26 = v25[6];
            uint64_t v27 = &v13[v26];
            uint64_t v28 = &v14[v26];
            long long v30 = *((_OWORD *)v28 + 2);
            long long v29 = *((_OWORD *)v28 + 3);
            long long v31 = *((_OWORD *)v28 + 1);
            *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
            *((_OWORD *)v27 + 1) = v31;
            *((_OWORD *)v27 + 2) = v30;
            *((_OWORD *)v27 + 3) = v29;
            *(void *)&v13[v25[7]] = *(void *)&v14[v25[7]];
            *(void *)&v13[v25[8]] = *(void *)&v14[v25[8]];
            *(void *)&v13[v25[9]] = *(void *)&v14[v25[9]];
            v13[v25[10]] = v14[v25[10]];
            uint64_t v32 = v25[11];
            long long v33 = &v13[v32];
            uint64_t v34 = &v14[v32];
            *(void *)long long v33 = *(void *)v34;
            *((void *)v33 + 1) = *((void *)v34 + 1);
            uint64_t v35 = v25[12];
            uint64_t v36 = &v13[v35];
            uint64_t v37 = &v14[v35];
            *(void *)uint64_t v36 = *(void *)v37;
            *((void *)v36 + 1) = *((void *)v37 + 1);
            uint64_t v38 = v25[13];
            __dst = &v13[v38];
            unint64_t v159 = &v14[v38];
            uint64_t v39 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v157 = *(void *)(v39 - 8);
            uint64_t v158 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v158(v159, 1, v39))
            {
              uint64_t v40 = sub_10000F214(&qword_100524BD0);
              memcpy(__dst, v159, *(void *)(*(void *)(v40 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v157 + 16))(__dst, v159, v39);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56))(__dst, 0, 1, v39);
            }
            uint64_t v74 = v25[14];
            long long v75 = &v13[v74];
            uint64_t v76 = &v14[v74];
            unint64_t v77 = *((void *)v76 + 1);
            if (v77 >> 60 == 15)
            {
              *(_OWORD *)long long v75 = *(_OWORD *)v76;
            }
            else
            {
              uint64_t v78 = *(void *)v76;
              sub_100038528(*(void *)v76, *((void *)v76 + 1));
              *(void *)long long v75 = v78;
              *((void *)v75 + 1) = v77;
            }
            uint64_t v10 = v163;
            uint64_t v79 = v25[15];
            uint64_t v80 = &v13[v79];
            uint64_t v81 = &v14[v79];
            if (*(void *)v81)
            {
              *(void *)uint64_t v80 = *(void *)v81;
              uint64_t v82 = *((void *)v81 + 2);
              *((void *)v80 + 1) = *((void *)v81 + 1);
              *((void *)v80 + 2) = v82;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v83 = *(_OWORD *)v81;
              *((void *)v80 + 2) = *((void *)v81 + 2);
              *(_OWORD *)uint64_t v80 = v83;
            }
            break;
          case 2u:
            v10((uint64_t *)v13, (uint64_t *)v14, v9);
            uint64_t v41 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v13[v41[5]] = *(_DWORD *)&v14[v41[5]];
            uint64_t v42 = v41[6];
            uint64_t v43 = &v13[v42];
            uint64_t v44 = &v14[v42];
            long long v46 = *((_OWORD *)v44 + 2);
            long long v45 = *((_OWORD *)v44 + 3);
            long long v47 = *((_OWORD *)v44 + 1);
            *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
            *((_OWORD *)v43 + 1) = v47;
            *((_OWORD *)v43 + 2) = v46;
            *((_OWORD *)v43 + 3) = v45;
            uint64_t v48 = v41[7];
            uint64_t v49 = &v13[v48];
            long long v50 = &v14[v48];
            *(void *)uint64_t v49 = *(void *)v50;
            *((void *)v49 + 1) = *((void *)v50 + 1);
            *(void *)&v13[v41[8]] = *(void *)&v14[v41[8]];
            *(void *)&v13[v41[9]] = *(void *)&v14[v41[9]];
            *(void *)&v13[v41[10]] = *(void *)&v14[v41[10]];
            *(void *)&v13[v41[11]] = *(void *)&v14[v41[11]];
            uint64_t v164 = v10;
            *(void *)&v13[v41[12]] = *(void *)&v14[v41[12]];
            uint64_t v51 = v41[13];
            uint64_t v52 = *(void **)&v14[v51];
            *(void *)&v13[v51] = v52;
            v13[v41[14]] = v14[v41[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v53 = v52;
            uint64_t v10 = v164;
            break;
          case 3u:
          case 4u:
            v10((uint64_t *)v13, (uint64_t *)v14, v9);
            uint64_t v54 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v13[v54[5]] = *(_DWORD *)&v14[v54[5]];
            uint64_t v55 = v54[6];
            id v56 = &v13[v55];
            long long v57 = &v14[v55];
            long long v59 = *((_OWORD *)v57 + 2);
            long long v58 = *((_OWORD *)v57 + 3);
            long long v60 = *((_OWORD *)v57 + 1);
            *(_OWORD *)id v56 = *(_OWORD *)v57;
            *((_OWORD *)v56 + 1) = v60;
            *((_OWORD *)v56 + 2) = v59;
            *((_OWORD *)v56 + 3) = v58;
            uint64_t v61 = v54[7];
            long long v62 = &v13[v61];
            uint64_t v63 = &v14[v61];
            *(void *)long long v62 = *(void *)v63;
            *((void *)v62 + 1) = *((void *)v63 + 1);
            *(void *)&v13[v54[8]] = *(void *)&v14[v54[8]];
            *(void *)&v13[v54[9]] = *(void *)&v14[v54[9]];
            *(void *)&v13[v54[10]] = *(void *)&v14[v54[10]];
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            v10((uint64_t *)v13, (uint64_t *)v14, v9);
            long long v64 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v13[v64[5]] = *(_DWORD *)&v14[v64[5]];
            uint64_t v65 = v64[6];
            uint64_t v66 = &v13[v65];
            uint64_t v67 = &v14[v65];
            long long v69 = *((_OWORD *)v67 + 2);
            long long v68 = *((_OWORD *)v67 + 3);
            long long v70 = *((_OWORD *)v67 + 1);
            *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
            *((_OWORD *)v66 + 1) = v70;
            *((_OWORD *)v66 + 2) = v69;
            *((_OWORD *)v66 + 3) = v68;
            uint64_t v71 = v64[7];
            long long v72 = &v13[v71];
            long long v73 = &v14[v71];
            *(void *)long long v72 = *(void *)v73;
            *((void *)v72 + 1) = *((void *)v73 + 1);
            *(void *)&v13[v64[8]] = *(void *)&v14[v64[8]];
            *(void *)&v13[v64[9]] = *(void *)&v14[v64[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            v10((uint64_t *)v13, (uint64_t *)v14, v9);
            uint64_t v15 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v13[v15[5]] = *(_DWORD *)&v14[v15[5]];
            uint64_t v16 = v15[6];
            uint64_t v17 = &v13[v16];
            uint64_t v18 = &v14[v16];
            long long v20 = *((_OWORD *)v18 + 2);
            long long v19 = *((_OWORD *)v18 + 3);
            long long v21 = *((_OWORD *)v18 + 1);
            *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            *((_OWORD *)v17 + 1) = v21;
            *((_OWORD *)v17 + 2) = v20;
            *((_OWORD *)v17 + 3) = v19;
            uint64_t v22 = v15[7];
            uint64_t v23 = &v13[v22];
            uint64_t v24 = &v14[v22];
            *(void *)uint64_t v23 = *(void *)v24;
            *((void *)v23 + 1) = *((void *)v24 + 1);
            *(void *)&v13[v15[8]] = *(void *)&v14[v15[8]];
            *(void *)&v13[v15[9]] = *(void *)&v14[v15[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v84 = v11[6];
        uint64_t v85 = (char *)a1 + v84;
        uint64_t v86 = (char *)a2 + v84;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            v10((uint64_t *)v85, (uint64_t *)v86, (uint64_t)v166);
            long long v97 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v85[v97[5]] = *(_DWORD *)&v86[v97[5]];
            uint64_t v98 = v97[6];
            long long v99 = &v85[v98];
            uint64_t v100 = &v86[v98];
            long long v102 = *((_OWORD *)v100 + 2);
            long long v101 = *((_OWORD *)v100 + 3);
            long long v103 = *((_OWORD *)v100 + 1);
            *(_OWORD *)long long v99 = *(_OWORD *)v100;
            *((_OWORD *)v99 + 1) = v103;
            *((_OWORD *)v99 + 2) = v102;
            *((_OWORD *)v99 + 3) = v101;
            *(void *)&v85[v97[7]] = *(void *)&v86[v97[7]];
            *(void *)&v85[v97[8]] = *(void *)&v86[v97[8]];
            *(void *)&v85[v97[9]] = *(void *)&v86[v97[9]];
            v85[v97[10]] = v86[v97[10]];
            uint64_t v104 = v97[11];
            uint64_t v105 = &v85[v104];
            uint64_t v106 = &v86[v104];
            *(void *)uint64_t v105 = *(void *)v106;
            *((void *)v105 + 1) = *((void *)v106 + 1);
            uint64_t v107 = v97[12];
            long long v108 = &v85[v107];
            uint64_t v109 = &v86[v107];
            *(void *)long long v108 = *(void *)v109;
            *((void *)v108 + 1) = *((void *)v109 + 1);
            uint64_t v110 = v97[13];
            uint64_t v167 = &v85[v110];
            uint64_t v165 = &v86[v110];
            uint64_t v111 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v160 = *(void *)(v111 - 8);
            __dsta = *(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (__dsta(v165, 1, v111))
            {
              uint64_t v112 = sub_10000F214(&qword_100524BD0);
              memcpy(v167, v165, *(void *)(*(void *)(v112 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v167, v165, v111);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v160 + 56))(v167, 0, 1, v111);
            }
            uint64_t v146 = v97[14];
            uint64_t v147 = &v85[v146];
            uint64_t v148 = &v86[v146];
            unint64_t v149 = *((void *)v148 + 1);
            if (v149 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v147 = *(_OWORD *)v148;
            }
            else
            {
              uint64_t v150 = *(void *)v148;
              sub_100038528(*(void *)v148, *((void *)v148 + 1));
              *(void *)uint64_t v147 = v150;
              *((void *)v147 + 1) = v149;
            }
            uint64_t v151 = v97[15];
            long long v152 = &v85[v151];
            uint64_t v153 = &v86[v151];
            if (*(void *)v153)
            {
              *(void *)long long v152 = *(void *)v153;
              uint64_t v154 = *((void *)v153 + 2);
              *((void *)v152 + 1) = *((void *)v153 + 1);
              *((void *)v152 + 2) = v154;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v155 = *(_OWORD *)v153;
              *((void *)v152 + 2) = *((void *)v153 + 2);
              *(_OWORD *)long long v152 = v155;
            }
            break;
          case 2u:
            v10((uint64_t *)v85, (uint64_t *)v86, (uint64_t)v166);
            uint64_t v113 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v85[v113[5]] = *(_DWORD *)&v86[v113[5]];
            uint64_t v114 = v113[6];
            uint64_t v115 = &v85[v114];
            uint64_t v116 = &v86[v114];
            long long v118 = *((_OWORD *)v116 + 2);
            long long v117 = *((_OWORD *)v116 + 3);
            long long v119 = *((_OWORD *)v116 + 1);
            *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
            *((_OWORD *)v115 + 1) = v119;
            *((_OWORD *)v115 + 2) = v118;
            *((_OWORD *)v115 + 3) = v117;
            uint64_t v120 = v113[7];
            uint64_t v121 = &v85[v120];
            uint64_t v122 = &v86[v120];
            *(void *)uint64_t v121 = *(void *)v122;
            *((void *)v121 + 1) = *((void *)v122 + 1);
            *(void *)&v85[v113[8]] = *(void *)&v86[v113[8]];
            *(void *)&v85[v113[9]] = *(void *)&v86[v113[9]];
            *(void *)&v85[v113[10]] = *(void *)&v86[v113[10]];
            *(void *)&v85[v113[11]] = *(void *)&v86[v113[11]];
            *(void *)&v85[v113[12]] = *(void *)&v86[v113[12]];
            uint64_t v123 = v113[13];
            long long v124 = *(void **)&v86[v123];
            *(void *)&v85[v123] = v124;
            v85[v113[14]] = v86[v113[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v125 = v124;
            break;
          case 3u:
          case 4u:
            v10((uint64_t *)v85, (uint64_t *)v86, (uint64_t)v166);
            uint64_t v126 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v85[v126[5]] = *(_DWORD *)&v86[v126[5]];
            uint64_t v127 = v126[6];
            uint64_t v128 = &v85[v127];
            uint64_t v129 = &v86[v127];
            long long v131 = *((_OWORD *)v129 + 2);
            long long v130 = *((_OWORD *)v129 + 3);
            long long v132 = *((_OWORD *)v129 + 1);
            *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
            *((_OWORD *)v128 + 1) = v132;
            *((_OWORD *)v128 + 2) = v131;
            *((_OWORD *)v128 + 3) = v130;
            uint64_t v133 = v126[7];
            uint64_t v134 = &v85[v133];
            uint64_t v135 = &v86[v133];
            *(void *)uint64_t v134 = *(void *)v135;
            *((void *)v134 + 1) = *((void *)v135 + 1);
            *(void *)&v85[v126[8]] = *(void *)&v86[v126[8]];
            *(void *)&v85[v126[9]] = *(void *)&v86[v126[9]];
            *(void *)&v85[v126[10]] = *(void *)&v86[v126[10]];
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            v10((uint64_t *)v85, (uint64_t *)v86, (uint64_t)v166);
            long long v136 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v85[v136[5]] = *(_DWORD *)&v86[v136[5]];
            uint64_t v137 = v136[6];
            long long v138 = &v85[v137];
            long long v139 = &v86[v137];
            long long v141 = *((_OWORD *)v139 + 2);
            long long v140 = *((_OWORD *)v139 + 3);
            long long v142 = *((_OWORD *)v139 + 1);
            *(_OWORD *)long long v138 = *(_OWORD *)v139;
            *((_OWORD *)v138 + 1) = v142;
            *((_OWORD *)v138 + 2) = v141;
            *((_OWORD *)v138 + 3) = v140;
            uint64_t v143 = v136[7];
            uint64_t v144 = &v85[v143];
            uint64_t v145 = &v86[v143];
            *(void *)uint64_t v144 = *(void *)v145;
            *((void *)v144 + 1) = *((void *)v145 + 1);
            *(void *)&v85[v136[8]] = *(void *)&v86[v136[8]];
            *(void *)&v85[v136[9]] = *(void *)&v86[v136[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            v10((uint64_t *)v85, (uint64_t *)v86, (uint64_t)v166);
            uint64_t v87 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v85[v87[5]] = *(_DWORD *)&v86[v87[5]];
            uint64_t v88 = v87[6];
            uint64_t v89 = &v85[v88];
            uint64_t v90 = &v86[v88];
            long long v92 = *((_OWORD *)v90 + 2);
            long long v91 = *((_OWORD *)v90 + 3);
            long long v93 = *((_OWORD *)v90 + 1);
            *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
            *((_OWORD *)v89 + 1) = v93;
            *((_OWORD *)v89 + 2) = v92;
            *((_OWORD *)v89 + 3) = v91;
            uint64_t v94 = v87[7];
            uint64_t v95 = &v85[v94];
            long long v96 = &v86[v94];
            *(void *)uint64_t v95 = *(void *)v96;
            *((void *)v95 + 1) = *((void *)v96 + 1);
            *(void *)&v85[v87[8]] = *(void *)&v86[v87[8]];
            *(void *)&v85[v87[9]] = *(void *)&v86[v87[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        *((unsigned char *)a1 + v11[7]) = *((unsigned char *)a2 + v11[7]);
        *(uint64_t *)((char *)a1 + v11[8]) = *(uint64_t *)((char *)a2 + v11[8]);
        *(_DWORD *)((char *)a1 + v11[9]) = *(_DWORD *)((char *)a2 + v11[9]);
        goto LABEL_37;
      case 0:
        uint64_t v8 = *a2;
        unint64_t v7 = a2[1];
        sub_100038528(v8, v7);
        *a1 = v8;
        a1[1] = v7;
LABEL_37:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *sub_1001D963C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for UUID();
    unint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    uint64_t v8 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v95 = v8;
        uint64_t v94 = v7;
        v7(v10, v11, v6);
        uint64_t v18 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v10[v18[5]] = *(_DWORD *)&v11[v18[5]];
        uint64_t v19 = v18[6];
        long long v20 = &v10[v19];
        long long v21 = &v11[v19];
        long long v22 = *((_OWORD *)v21 + 3);
        *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
        *((_OWORD *)v20 + 3) = v22;
        long long v23 = *((_OWORD *)v21 + 1);
        *(_OWORD *)long long v20 = *(_OWORD *)v21;
        *((_OWORD *)v20 + 1) = v23;
        *(void *)&v10[v18[7]] = *(void *)&v11[v18[7]];
        *(void *)&v10[v18[8]] = *(void *)&v11[v18[8]];
        *(void *)&v10[v18[9]] = *(void *)&v11[v18[9]];
        v10[v18[10]] = v11[v18[10]];
        *(_OWORD *)&v10[v18[11]] = *(_OWORD *)&v11[v18[11]];
        *(_OWORD *)&v10[v18[12]] = *(_OWORD *)&v11[v18[12]];
        uint64_t v24 = v18[13];
        long long v93 = &v10[v24];
        uint64_t v25 = &v11[v24];
        uint64_t v26 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = sub_10000F214(&qword_100524BD0);
          memcpy(v93, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v93, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v93, 0, 1, v26);
        }
        *(_OWORD *)&v10[v18[14]] = *(_OWORD *)&v11[v18[14]];
        uint64_t v86 = v18[15];
        uint64_t v87 = &v10[v86];
        uint64_t v88 = &v11[v86];
        *((void *)v87 + 2) = *((void *)v88 + 2);
        *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
        uint64_t v8 = v95;
        swift_storeEnumTagMultiPayload();
        unint64_t v7 = v94;
        goto LABEL_11;
      case 2u:
        v7(v10, v11, v6);
        long long v29 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v10[v29[5]] = *(_DWORD *)&v11[v29[5]];
        uint64_t v30 = v29[6];
        long long v31 = &v10[v30];
        uint64_t v32 = &v11[v30];
        long long v33 = *((_OWORD *)v32 + 3);
        *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
        *((_OWORD *)v31 + 3) = v33;
        long long v34 = *((_OWORD *)v32 + 1);
        *(_OWORD *)long long v31 = *(_OWORD *)v32;
        *((_OWORD *)v31 + 1) = v34;
        *(_OWORD *)&v10[v29[7]] = *(_OWORD *)&v11[v29[7]];
        *(void *)&v10[v29[8]] = *(void *)&v11[v29[8]];
        *(void *)&v10[v29[9]] = *(void *)&v11[v29[9]];
        *(void *)&v10[v29[10]] = *(void *)&v11[v29[10]];
        *(void *)&v10[v29[11]] = *(void *)&v11[v29[11]];
        *(void *)&v10[v29[12]] = *(void *)&v11[v29[12]];
        *(void *)&v10[v29[13]] = *(void *)&v11[v29[13]];
        v10[v29[14]] = v11[v29[14]];
        goto LABEL_10;
      case 3u:
      case 4u:
        v7(v10, v11, v6);
        uint64_t v35 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v10[v35[5]] = *(_DWORD *)&v11[v35[5]];
        uint64_t v36 = v35[6];
        uint64_t v37 = &v10[v36];
        uint64_t v38 = &v11[v36];
        long long v39 = *((_OWORD *)v38 + 3);
        *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
        *((_OWORD *)v37 + 3) = v39;
        long long v40 = *((_OWORD *)v38 + 1);
        *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
        *((_OWORD *)v37 + 1) = v40;
        *(_OWORD *)&v10[v35[7]] = *(_OWORD *)&v11[v35[7]];
        *(void *)&v10[v35[8]] = *(void *)&v11[v35[8]];
        *(void *)&v10[v35[9]] = *(void *)&v11[v35[9]];
        *(void *)&v10[v35[10]] = *(void *)&v11[v35[10]];
        goto LABEL_10;
      case 5u:
        v7(v10, v11, v6);
        uint64_t v41 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v10[v41[5]] = *(_DWORD *)&v11[v41[5]];
        uint64_t v42 = v41[6];
        uint64_t v43 = &v10[v42];
        uint64_t v44 = &v11[v42];
        long long v45 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v45;
        long long v46 = *((_OWORD *)v44 + 1);
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v46;
        *(_OWORD *)&v10[v41[7]] = *(_OWORD *)&v11[v41[7]];
        *(void *)&v10[v41[8]] = *(void *)&v11[v41[8]];
        *(void *)&v10[v41[9]] = *(void *)&v11[v41[9]];
        goto LABEL_10;
      default:
        v7(v10, v11, v6);
        uint64_t v12 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v10[v12[5]] = *(_DWORD *)&v11[v12[5]];
        uint64_t v13 = v12[6];
        uint64_t v14 = &v10[v13];
        uint64_t v15 = &v11[v13];
        long long v16 = *((_OWORD *)v15 + 3);
        *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
        *((_OWORD *)v14 + 3) = v16;
        long long v17 = *((_OWORD *)v15 + 1);
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        *((_OWORD *)v14 + 1) = v17;
        *(_OWORD *)&v10[v12[7]] = *(_OWORD *)&v11[v12[7]];
        *(void *)&v10[v12[8]] = *(void *)&v11[v12[8]];
        *(void *)&v10[v12[9]] = *(void *)&v11[v12[9]];
LABEL_10:
        swift_storeEnumTagMultiPayload();
LABEL_11:
        uint64_t v47 = v8[6];
        uint64_t v48 = &a1[v47];
        uint64_t v49 = &a2[v47];
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            long long v96 = v8;
            v7(v48, v49, v6);
            id v56 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v48[v56[5]] = *(_DWORD *)&v49[v56[5]];
            uint64_t v57 = v56[6];
            long long v58 = &v48[v57];
            long long v59 = &v49[v57];
            long long v60 = *((_OWORD *)v59 + 3);
            *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
            *((_OWORD *)v58 + 3) = v60;
            long long v61 = *((_OWORD *)v59 + 1);
            *(_OWORD *)long long v58 = *(_OWORD *)v59;
            *((_OWORD *)v58 + 1) = v61;
            *(void *)&v48[v56[7]] = *(void *)&v49[v56[7]];
            *(void *)&v48[v56[8]] = *(void *)&v49[v56[8]];
            *(void *)&v48[v56[9]] = *(void *)&v49[v56[9]];
            v48[v56[10]] = v49[v56[10]];
            *(_OWORD *)&v48[v56[11]] = *(_OWORD *)&v49[v56[11]];
            *(_OWORD *)&v48[v56[12]] = *(_OWORD *)&v49[v56[12]];
            uint64_t v62 = v56[13];
            uint64_t v63 = &v48[v62];
            long long v64 = &v49[v62];
            uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v66 = *(void *)(v65 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
            {
              uint64_t v67 = sub_10000F214(&qword_100524BD0);
              memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v63, v64, v65);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
            }
            uint64_t v8 = v96;
            *(_OWORD *)&v48[v56[14]] = *(_OWORD *)&v49[v56[14]];
            uint64_t v89 = v56[15];
            uint64_t v90 = &v48[v89];
            long long v91 = &v49[v89];
            *((void *)v90 + 2) = *((void *)v91 + 2);
            *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
            break;
          case 2u:
            v7(v48, v49, v6);
            long long v68 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v48[v68[5]] = *(_DWORD *)&v49[v68[5]];
            uint64_t v69 = v68[6];
            long long v70 = &v48[v69];
            uint64_t v71 = &v49[v69];
            long long v72 = *((_OWORD *)v71 + 3);
            *((_OWORD *)v70 + 2) = *((_OWORD *)v71 + 2);
            *((_OWORD *)v70 + 3) = v72;
            long long v73 = *((_OWORD *)v71 + 1);
            *(_OWORD *)long long v70 = *(_OWORD *)v71;
            *((_OWORD *)v70 + 1) = v73;
            *(_OWORD *)&v48[v68[7]] = *(_OWORD *)&v49[v68[7]];
            *(void *)&v48[v68[8]] = *(void *)&v49[v68[8]];
            *(void *)&v48[v68[9]] = *(void *)&v49[v68[9]];
            *(void *)&v48[v68[10]] = *(void *)&v49[v68[10]];
            *(void *)&v48[v68[11]] = *(void *)&v49[v68[11]];
            *(void *)&v48[v68[12]] = *(void *)&v49[v68[12]];
            *(void *)&v48[v68[13]] = *(void *)&v49[v68[13]];
            v48[v68[14]] = v49[v68[14]];
            break;
          case 3u:
          case 4u:
            v7(v48, v49, v6);
            uint64_t v74 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v48[v74[5]] = *(_DWORD *)&v49[v74[5]];
            uint64_t v75 = v74[6];
            uint64_t v76 = &v48[v75];
            unint64_t v77 = &v49[v75];
            long long v78 = *((_OWORD *)v77 + 3);
            *((_OWORD *)v76 + 2) = *((_OWORD *)v77 + 2);
            *((_OWORD *)v76 + 3) = v78;
            long long v79 = *((_OWORD *)v77 + 1);
            *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
            *((_OWORD *)v76 + 1) = v79;
            *(_OWORD *)&v48[v74[7]] = *(_OWORD *)&v49[v74[7]];
            *(void *)&v48[v74[8]] = *(void *)&v49[v74[8]];
            *(void *)&v48[v74[9]] = *(void *)&v49[v74[9]];
            *(void *)&v48[v74[10]] = *(void *)&v49[v74[10]];
            break;
          case 5u:
            v7(v48, v49, v6);
            uint64_t v80 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v48[v80[5]] = *(_DWORD *)&v49[v80[5]];
            uint64_t v81 = v80[6];
            uint64_t v82 = &v48[v81];
            long long v83 = &v49[v81];
            long long v84 = *((_OWORD *)v83 + 3);
            *((_OWORD *)v82 + 2) = *((_OWORD *)v83 + 2);
            *((_OWORD *)v82 + 3) = v84;
            long long v85 = *((_OWORD *)v83 + 1);
            *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
            *((_OWORD *)v82 + 1) = v85;
            *(_OWORD *)&v48[v80[7]] = *(_OWORD *)&v49[v80[7]];
            *(void *)&v48[v80[8]] = *(void *)&v49[v80[8]];
            *(void *)&v48[v80[9]] = *(void *)&v49[v80[9]];
            break;
          default:
            v7(v48, v49, v6);
            long long v50 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v48[v50[5]] = *(_DWORD *)&v49[v50[5]];
            uint64_t v51 = v50[6];
            uint64_t v52 = &v48[v51];
            id v53 = &v49[v51];
            long long v54 = *((_OWORD *)v53 + 3);
            *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
            *((_OWORD *)v52 + 3) = v54;
            long long v55 = *((_OWORD *)v53 + 1);
            *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
            *((_OWORD *)v52 + 1) = v55;
            *(_OWORD *)&v48[v50[7]] = *(_OWORD *)&v49[v50[7]];
            *(void *)&v48[v50[8]] = *(void *)&v49[v50[8]];
            *(void *)&v48[v50[9]] = *(void *)&v49[v50[9]];
            break;
        }
        swift_storeEnumTagMultiPayload();
        a1[v8[7]] = a2[v8[7]];
        *(void *)&a1[v8[8]] = *(void *)&a2[v8[8]];
        *(_DWORD *)&a1[v8[9]] = *(_DWORD *)&a2[v8[9]];
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *sub_1001DA0E8(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001D430C((uint64_t)a1, type metadata accessor for DetectionRequest.Originator);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for UUID();
      unint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v9 = v8[5];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v95 = v8;
          uint64_t v94 = v7;
          v7(v10, v11, v6);
          uint64_t v18 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v10[v18[5]] = *(_DWORD *)&v11[v18[5]];
          uint64_t v19 = v18[6];
          long long v20 = &v10[v19];
          long long v21 = &v11[v19];
          long long v22 = *((_OWORD *)v21 + 3);
          *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
          *((_OWORD *)v20 + 3) = v22;
          long long v23 = *((_OWORD *)v21 + 1);
          *(_OWORD *)long long v20 = *(_OWORD *)v21;
          *((_OWORD *)v20 + 1) = v23;
          *(void *)&v10[v18[7]] = *(void *)&v11[v18[7]];
          *(void *)&v10[v18[8]] = *(void *)&v11[v18[8]];
          *(void *)&v10[v18[9]] = *(void *)&v11[v18[9]];
          v10[v18[10]] = v11[v18[10]];
          *(_OWORD *)&v10[v18[11]] = *(_OWORD *)&v11[v18[11]];
          *(_OWORD *)&v10[v18[12]] = *(_OWORD *)&v11[v18[12]];
          uint64_t v24 = v18[13];
          long long v93 = &v10[v24];
          uint64_t v25 = &v11[v24];
          uint64_t v26 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v27 = *(void *)(v26 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
          {
            uint64_t v28 = sub_10000F214(&qword_100524BD0);
            memcpy(v93, v25, *(void *)(*(void *)(v28 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v93, v25, v26);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v93, 0, 1, v26);
          }
          *(_OWORD *)&v10[v18[14]] = *(_OWORD *)&v11[v18[14]];
          uint64_t v86 = v18[15];
          uint64_t v87 = &v10[v86];
          uint64_t v88 = &v11[v86];
          *((void *)v87 + 2) = *((void *)v88 + 2);
          *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
          uint64_t v8 = v95;
          swift_storeEnumTagMultiPayload();
          unint64_t v7 = v94;
          goto LABEL_12;
        case 2u:
          v7(v10, v11, v6);
          long long v29 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v10[v29[5]] = *(_DWORD *)&v11[v29[5]];
          uint64_t v30 = v29[6];
          long long v31 = &v10[v30];
          uint64_t v32 = &v11[v30];
          long long v33 = *((_OWORD *)v32 + 3);
          *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
          *((_OWORD *)v31 + 3) = v33;
          long long v34 = *((_OWORD *)v32 + 1);
          *(_OWORD *)long long v31 = *(_OWORD *)v32;
          *((_OWORD *)v31 + 1) = v34;
          *(_OWORD *)&v10[v29[7]] = *(_OWORD *)&v11[v29[7]];
          *(void *)&v10[v29[8]] = *(void *)&v11[v29[8]];
          *(void *)&v10[v29[9]] = *(void *)&v11[v29[9]];
          *(void *)&v10[v29[10]] = *(void *)&v11[v29[10]];
          *(void *)&v10[v29[11]] = *(void *)&v11[v29[11]];
          *(void *)&v10[v29[12]] = *(void *)&v11[v29[12]];
          *(void *)&v10[v29[13]] = *(void *)&v11[v29[13]];
          v10[v29[14]] = v11[v29[14]];
          goto LABEL_11;
        case 3u:
        case 4u:
          v7(v10, v11, v6);
          uint64_t v35 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v10[v35[5]] = *(_DWORD *)&v11[v35[5]];
          uint64_t v36 = v35[6];
          uint64_t v37 = &v10[v36];
          uint64_t v38 = &v11[v36];
          long long v39 = *((_OWORD *)v38 + 3);
          *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
          *((_OWORD *)v37 + 3) = v39;
          long long v40 = *((_OWORD *)v38 + 1);
          *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
          *((_OWORD *)v37 + 1) = v40;
          *(_OWORD *)&v10[v35[7]] = *(_OWORD *)&v11[v35[7]];
          *(void *)&v10[v35[8]] = *(void *)&v11[v35[8]];
          *(void *)&v10[v35[9]] = *(void *)&v11[v35[9]];
          *(void *)&v10[v35[10]] = *(void *)&v11[v35[10]];
          goto LABEL_11;
        case 5u:
          v7(v10, v11, v6);
          uint64_t v41 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v10[v41[5]] = *(_DWORD *)&v11[v41[5]];
          uint64_t v42 = v41[6];
          uint64_t v43 = &v10[v42];
          uint64_t v44 = &v11[v42];
          long long v45 = *((_OWORD *)v44 + 3);
          *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
          *((_OWORD *)v43 + 3) = v45;
          long long v46 = *((_OWORD *)v44 + 1);
          *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
          *((_OWORD *)v43 + 1) = v46;
          *(_OWORD *)&v10[v41[7]] = *(_OWORD *)&v11[v41[7]];
          *(void *)&v10[v41[8]] = *(void *)&v11[v41[8]];
          *(void *)&v10[v41[9]] = *(void *)&v11[v41[9]];
          goto LABEL_11;
        default:
          v7(v10, v11, v6);
          uint64_t v12 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v10[v12[5]] = *(_DWORD *)&v11[v12[5]];
          uint64_t v13 = v12[6];
          uint64_t v14 = &v10[v13];
          uint64_t v15 = &v11[v13];
          long long v16 = *((_OWORD *)v15 + 3);
          *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
          *((_OWORD *)v14 + 3) = v16;
          long long v17 = *((_OWORD *)v15 + 1);
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
          *((_OWORD *)v14 + 1) = v17;
          *(_OWORD *)&v10[v12[7]] = *(_OWORD *)&v11[v12[7]];
          *(void *)&v10[v12[8]] = *(void *)&v11[v12[8]];
          *(void *)&v10[v12[9]] = *(void *)&v11[v12[9]];
LABEL_11:
          swift_storeEnumTagMultiPayload();
LABEL_12:
          uint64_t v47 = v8[6];
          uint64_t v48 = &a1[v47];
          uint64_t v49 = &a2[v47];
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              long long v96 = v8;
              v7(v48, v49, v6);
              id v56 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)&v48[v56[5]] = *(_DWORD *)&v49[v56[5]];
              uint64_t v57 = v56[6];
              long long v58 = &v48[v57];
              long long v59 = &v49[v57];
              long long v60 = *((_OWORD *)v59 + 3);
              *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
              *((_OWORD *)v58 + 3) = v60;
              long long v61 = *((_OWORD *)v59 + 1);
              *(_OWORD *)long long v58 = *(_OWORD *)v59;
              *((_OWORD *)v58 + 1) = v61;
              *(void *)&v48[v56[7]] = *(void *)&v49[v56[7]];
              *(void *)&v48[v56[8]] = *(void *)&v49[v56[8]];
              *(void *)&v48[v56[9]] = *(void *)&v49[v56[9]];
              v48[v56[10]] = v49[v56[10]];
              *(_OWORD *)&v48[v56[11]] = *(_OWORD *)&v49[v56[11]];
              *(_OWORD *)&v48[v56[12]] = *(_OWORD *)&v49[v56[12]];
              uint64_t v62 = v56[13];
              uint64_t v63 = &v48[v62];
              long long v64 = &v49[v62];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
              {
                uint64_t v67 = sub_10000F214(&qword_100524BD0);
                memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v63, v64, v65);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
              }
              uint64_t v8 = v96;
              *(_OWORD *)&v48[v56[14]] = *(_OWORD *)&v49[v56[14]];
              uint64_t v89 = v56[15];
              uint64_t v90 = &v48[v89];
              long long v91 = &v49[v89];
              *((void *)v90 + 2) = *((void *)v91 + 2);
              *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
              break;
            case 2u:
              v7(v48, v49, v6);
              long long v68 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)&v48[v68[5]] = *(_DWORD *)&v49[v68[5]];
              uint64_t v69 = v68[6];
              long long v70 = &v48[v69];
              uint64_t v71 = &v49[v69];
              long long v72 = *((_OWORD *)v71 + 3);
              *((_OWORD *)v70 + 2) = *((_OWORD *)v71 + 2);
              *((_OWORD *)v70 + 3) = v72;
              long long v73 = *((_OWORD *)v71 + 1);
              *(_OWORD *)long long v70 = *(_OWORD *)v71;
              *((_OWORD *)v70 + 1) = v73;
              *(_OWORD *)&v48[v68[7]] = *(_OWORD *)&v49[v68[7]];
              *(void *)&v48[v68[8]] = *(void *)&v49[v68[8]];
              *(void *)&v48[v68[9]] = *(void *)&v49[v68[9]];
              *(void *)&v48[v68[10]] = *(void *)&v49[v68[10]];
              *(void *)&v48[v68[11]] = *(void *)&v49[v68[11]];
              *(void *)&v48[v68[12]] = *(void *)&v49[v68[12]];
              *(void *)&v48[v68[13]] = *(void *)&v49[v68[13]];
              v48[v68[14]] = v49[v68[14]];
              break;
            case 3u:
            case 4u:
              v7(v48, v49, v6);
              uint64_t v74 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)&v48[v74[5]] = *(_DWORD *)&v49[v74[5]];
              uint64_t v75 = v74[6];
              uint64_t v76 = &v48[v75];
              unint64_t v77 = &v49[v75];
              long long v78 = *((_OWORD *)v77 + 3);
              *((_OWORD *)v76 + 2) = *((_OWORD *)v77 + 2);
              *((_OWORD *)v76 + 3) = v78;
              long long v79 = *((_OWORD *)v77 + 1);
              *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
              *((_OWORD *)v76 + 1) = v79;
              *(_OWORD *)&v48[v74[7]] = *(_OWORD *)&v49[v74[7]];
              *(void *)&v48[v74[8]] = *(void *)&v49[v74[8]];
              *(void *)&v48[v74[9]] = *(void *)&v49[v74[9]];
              *(void *)&v48[v74[10]] = *(void *)&v49[v74[10]];
              break;
            case 5u:
              v7(v48, v49, v6);
              uint64_t v80 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)&v48[v80[5]] = *(_DWORD *)&v49[v80[5]];
              uint64_t v81 = v80[6];
              uint64_t v82 = &v48[v81];
              long long v83 = &v49[v81];
              long long v84 = *((_OWORD *)v83 + 3);
              *((_OWORD *)v82 + 2) = *((_OWORD *)v83 + 2);
              *((_OWORD *)v82 + 3) = v84;
              long long v85 = *((_OWORD *)v83 + 1);
              *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
              *((_OWORD *)v82 + 1) = v85;
              *(_OWORD *)&v48[v80[7]] = *(_OWORD *)&v49[v80[7]];
              *(void *)&v48[v80[8]] = *(void *)&v49[v80[8]];
              *(void *)&v48[v80[9]] = *(void *)&v49[v80[9]];
              break;
            default:
              v7(v48, v49, v6);
              long long v50 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)&v48[v50[5]] = *(_DWORD *)&v49[v50[5]];
              uint64_t v51 = v50[6];
              uint64_t v52 = &v48[v51];
              id v53 = &v49[v51];
              long long v54 = *((_OWORD *)v53 + 3);
              *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
              *((_OWORD *)v52 + 3) = v54;
              long long v55 = *((_OWORD *)v53 + 1);
              *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
              *((_OWORD *)v52 + 1) = v55;
              *(_OWORD *)&v48[v50[7]] = *(_OWORD *)&v49[v50[7]];
              *(void *)&v48[v50[8]] = *(void *)&v49[v50[8]];
              *(void *)&v48[v50[9]] = *(void *)&v49[v50[9]];
              break;
          }
          swift_storeEnumTagMultiPayload();
          a1[v8[7]] = a2[v8[7]];
          *(void *)&a1[v8[8]] = *(void *)&a2[v8[8]];
          *(_DWORD *)&a1[v8[9]] = *(_DWORD *)&a2[v8[9]];
          swift_storeEnumTagMultiPayload();
          break;
      }
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001DABB8()
{
  uint64_t result = type metadata accessor for CVTrackSnapshot(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void destroy for CVProcessorInputStorage(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if ((unint64_t)v2 >= 3) {

  }
  uint64_t v3 = *(void **)(a1 + 40);
}

uint64_t initializeWithCopy for CVProcessorInputStorage(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a2 + 32);
  if (v4 == (void *)2)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    unint64_t v4 = *(void **)(a2 + 32);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    int v6 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = v6;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    if ((unint64_t)v4 >= 2)
    {
      *(void *)(a1 + 32) = v4;
      id v7 = v4;
      goto LABEL_6;
    }
  }
  *(void *)(a1 + 32) = v4;
LABEL_6:
  uint64_t v8 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v8;
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for CVProcessorInputStorage(uint64_t a1, long long *a2)
{
  unint64_t v4 = (void *)(a1 + 32);
  long long v5 = *(void **)(a1 + 32);
  uint64_t v6 = *((void *)a2 + 4);
  if (v5 == (void *)2)
  {
    if (v6 == 2)
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
      goto LABEL_14;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    int v11 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(_DWORD *)(a1 + 20) = v11;
    uint64_t v12 = (void *)*((void *)a2 + 4);
    if ((unint64_t)v12 < 2)
    {
LABEL_7:
      void *v4 = v12;
      goto LABEL_14;
    }
LABEL_10:
    void *v4 = v12;
    id v14 = v12;
    goto LABEL_14;
  }
  if (v6 == 2)
  {
    sub_1001DAE70(a1);
    uint64_t v9 = *((void *)a2 + 4);
    long long v10 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(void *)(a1 + 32) = v9;
    goto LABEL_14;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  int v13 = *((_DWORD *)a2 + 5);
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(_DWORD *)(a1 + 20) = v13;
  uint64_t v12 = (void *)*((void *)a2 + 4);
  if ((unint64_t)v5 < 2)
  {
    if ((unint64_t)v12 < 2) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  if ((unint64_t)v12 >= 2)
  {
    void *v4 = v12;
    id v15 = v12;
  }
  else
  {
    sub_10000FBD8(a1 + 32, &qword_100524D10);
    void *v4 = *((void *)a2 + 4);
  }
LABEL_14:
  long long v16 = *(void **)(a1 + 40);
  long long v17 = (void *)*((void *)a2 + 5);
  *(void *)(a1 + 40) = v17;
  id v18 = v17;

  return a1;
}

uint64_t sub_1001DAE70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if ((unint64_t)v2 >= 2) {

  }
  return a1;
}

uint64_t assignWithTake for CVProcessorInputStorage(uint64_t a1, uint64_t a2)
{
  long long v5 = (unint64_t *)(a1 + 32);
  unint64_t v4 = *(void **)(a1 + 32);
  if (v4 == (void *)2) {
    goto LABEL_4;
  }
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 == 2)
  {
    sub_1001DAE70(a1);
LABEL_4:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    goto LABEL_10;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v8 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v8;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  if ((unint64_t)v4 >= 2)
  {
    if (v6 >= 2)
    {
      *long long v5 = v6;

      goto LABEL_10;
    }
    sub_10000FBD8(a1 + 32, &qword_100524D10);
  }
  *long long v5 = v6;
LABEL_10:
  uint64_t v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for CVProcessorInputStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CVProcessorInputStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVProcessorInputStorage()
{
  return &type metadata for CVProcessorInputStorage;
}

void destroy for CVProcessorInputConfiguration(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  if ((unint64_t)v1 >= 2) {
}
  }

uint64_t initializeWithCopy for CVProcessorInputConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v3 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  int v4 = *(void **)(a2 + 32);
  if ((unint64_t)v4 >= 2) {
    id v5 = v4;
  }
  *(void *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for CVProcessorInputConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  int v3 = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v3;
  int v4 = (void *)(a1 + 32);
  id v5 = *(void **)(a1 + 32);
  unint64_t v6 = *(void **)(a2 + 32);
  if ((unint64_t)v5 >= 2)
  {
    if ((unint64_t)v6 >= 2)
    {
      void *v4 = v6;
      id v9 = v6;

      return a1;
    }
    sub_10000FBD8(a1 + 32, &qword_100524D10);
    unint64_t v6 = *(void **)(a2 + 32);
    goto LABEL_6;
  }
  if ((unint64_t)v6 < 2)
  {
LABEL_6:
    void *v4 = v6;
    return a1;
  }
  void *v4 = v6;
  id v7 = v6;
  return a1;
}

uint64_t assignWithTake for CVProcessorInputConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v3 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  id v5 = (unint64_t *)(a1 + 32);
  int v4 = *(void **)(a1 + 32);
  unint64_t v6 = *(void *)(a2 + 32);
  if ((unint64_t)v4 >= 2)
  {
    if (v6 >= 2)
    {
      *id v5 = v6;

      return a1;
    }
    sub_10000FBD8(a1 + 32, &qword_100524D10);
  }
  *id v5 = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for CVProcessorInputConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CVProcessorInputConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVProcessorInputConfiguration()
{
  return &type metadata for CVProcessorInputConfiguration;
}

void *sub_1001DB288(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    unint64_t v6 = a3;
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v265 = v6;
        uint64_t v20 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
        long long v21 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)((char *)a1 + v21[5]) = *(_DWORD *)((char *)a2 + v21[5]);
        uint64_t v22 = v21[6];
        long long v23 = (_OWORD *)((char *)a1 + v22);
        uint64_t v24 = (_OWORD *)((char *)a2 + v22);
        long long v25 = v24[3];
        void v23[2] = v24[2];
        v23[3] = v25;
        long long v26 = v24[1];
        *long long v23 = *v24;
        v23[1] = v26;
        *(void *)((char *)a1 + v21[7]) = *(void *)((char *)a2 + v21[7]);
        *(void *)((char *)a1 + v21[8]) = *(void *)((char *)a2 + v21[8]);
        *(void *)((char *)a1 + v21[9]) = *(void *)((char *)a2 + v21[9]);
        *((unsigned char *)a1 + v21[10]) = *((unsigned char *)a2 + v21[10]);
        uint64_t v27 = v21[11];
        uint64_t v28 = (void *)((char *)a1 + v27);
        long long v29 = (void *)((char *)a2 + v27);
        uint64_t v30 = v29[1];
        *uint64_t v28 = *v29;
        v28[1] = v30;
        uint64_t v31 = v21[12];
        uint64_t v32 = (void *)((char *)a1 + v31);
        long long v33 = (void *)((char *)a2 + v31);
        uint64_t v34 = v33[1];
        *uint64_t v32 = *v33;
        v32[1] = v34;
        uint64_t v35 = v21[13];
        __dst = (char *)a1 + v35;
        uint64_t v36 = (char *)a2 + v35;
        uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v38 = *(void *)(v37 - 8);
        long long v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v39(v36, 1, v37))
        {
          uint64_t v40 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v36, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
        }
        unint64_t v6 = v265;
        uint64_t v80 = v21[14];
        uint64_t v81 = (char *)a1 + v80;
        uint64_t v82 = (char *)a2 + v80;
        unint64_t v83 = *((void *)v82 + 1);
        if (v83 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
        }
        else
        {
          uint64_t v84 = *(void *)v82;
          sub_100038528(*(void *)v82, *((void *)v82 + 1));
          *(void *)uint64_t v81 = v84;
          *((void *)v81 + 1) = v83;
        }
        uint64_t v85 = v21[15];
        uint64_t v86 = (void *)((char *)a1 + v85);
        uint64_t v87 = (void *)((char *)a2 + v85);
        if (*v87)
        {
          uint64_t v88 = v87[1];
          uint64_t v89 = v87[2];
          void *v86 = *v87;
          v86[1] = v88;
          v86[2] = v89;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
          v86[2] = v87[2];
        }
        break;
      case 2u:
        uint64_t v41 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        uint64_t v42 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v42[5]) = *(_DWORD *)((char *)a2 + v42[5]);
        uint64_t v43 = v42[6];
        uint64_t v44 = (_OWORD *)((char *)a1 + v43);
        long long v45 = (_OWORD *)((char *)a2 + v43);
        long long v46 = v45[3];
        v44[2] = v45[2];
        v44[3] = v46;
        long long v47 = v45[1];
        *uint64_t v44 = *v45;
        v44[1] = v47;
        uint64_t v48 = v42[7];
        uint64_t v49 = (void *)((char *)a1 + v48);
        long long v50 = (void *)((char *)a2 + v48);
        uint64_t v52 = *v50;
        uint64_t v51 = v50[1];
        *uint64_t v49 = v52;
        v49[1] = v51;
        *(void *)((char *)a1 + v42[8]) = *(void *)((char *)a2 + v42[8]);
        *(void *)((char *)a1 + v42[9]) = *(void *)((char *)a2 + v42[9]);
        *(void *)((char *)a1 + v42[10]) = *(void *)((char *)a2 + v42[10]);
        *(void *)((char *)a1 + v42[11]) = *(void *)((char *)a2 + v42[11]);
        *(void *)((char *)a1 + v42[12]) = *(void *)((char *)a2 + v42[12]);
        uint64_t v53 = v42[13];
        long long v54 = *(void **)((char *)a2 + v53);
        *(void *)((char *)a1 + v53) = v54;
        *((unsigned char *)a1 + v42[14]) = *((unsigned char *)a2 + v42[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v55 = v54;
        break;
      case 3u:
      case 4u:
        uint64_t v56 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
        uint64_t v57 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)((char *)a1 + v57[5]) = *(_DWORD *)((char *)a2 + v57[5]);
        uint64_t v58 = v57[6];
        long long v59 = (_OWORD *)((char *)a1 + v58);
        long long v60 = (_OWORD *)((char *)a2 + v58);
        long long v61 = v60[3];
        v59[2] = v60[2];
        v59[3] = v61;
        long long v62 = v60[1];
        *long long v59 = *v60;
        v59[1] = v62;
        uint64_t v63 = v57[7];
        long long v64 = (void *)((char *)a1 + v63);
        uint64_t v65 = (void *)((char *)a2 + v63);
        uint64_t v67 = *v65;
        uint64_t v66 = v65[1];
        *long long v64 = v67;
        v64[1] = v66;
        *(void *)((char *)a1 + v57[8]) = *(void *)((char *)a2 + v57[8]);
        *(void *)((char *)a1 + v57[9]) = *(void *)((char *)a2 + v57[9]);
        *(void *)((char *)a1 + v57[10]) = *(void *)((char *)a2 + v57[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v68 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v68 - 8) + 16))(a1, a2, v68);
        uint64_t v69 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v69[5]) = *(_DWORD *)((char *)a2 + v69[5]);
        uint64_t v70 = v69[6];
        uint64_t v71 = (_OWORD *)((char *)a1 + v70);
        long long v72 = (_OWORD *)((char *)a2 + v70);
        long long v73 = v72[3];
        v71[2] = v72[2];
        v71[3] = v73;
        long long v74 = v72[1];
        *uint64_t v71 = *v72;
        v71[1] = v74;
        uint64_t v75 = v69[7];
        uint64_t v76 = (void *)((char *)a1 + v75);
        unint64_t v77 = (void *)((char *)a2 + v75);
        uint64_t v79 = *v77;
        uint64_t v78 = v77[1];
        *uint64_t v76 = v79;
        v76[1] = v78;
        *(void *)((char *)a1 + v69[8]) = *(void *)((char *)a2 + v69[8]);
        *(void *)((char *)a1 + v69[9]) = *(void *)((char *)a2 + v69[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        int v8 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)((char *)a1 + v8[5]) = *(_DWORD *)((char *)a2 + v8[5]);
        uint64_t v9 = v8[6];
        long long v10 = (_OWORD *)((char *)a1 + v9);
        int v11 = (_OWORD *)((char *)a2 + v9);
        long long v12 = v11[3];
        void v10[2] = v11[2];
        v10[3] = v12;
        long long v13 = v11[1];
        *long long v10 = *v11;
        v10[1] = v13;
        uint64_t v14 = v8[7];
        id v15 = (void *)((char *)a1 + v14);
        long long v16 = (void *)((char *)a2 + v14);
        uint64_t v18 = *v16;
        uint64_t v17 = v16[1];
        *id v15 = v18;
        v15[1] = v17;
        *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
        *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v90 = v6[5];
    long long v91 = (void *)((char *)a1 + v90);
    long long v92 = (void *)((char *)a2 + v90);
    uint64_t v93 = type metadata accessor for DetectionRequest.Originator(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *long long v91 = *v92;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v266 = type metadata accessor for UUID();
      v270 = *(void (**)(uint64_t *, uint64_t *))(*(void *)(v266 - 8) + 16);
      v270(v91, v92);
      long long v97 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v98 = v97[5];
      long long v99 = (char *)v91 + v98;
      uint64_t v100 = (char *)v92 + v98;
      v264 = v97;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          ((void (*)(char *, char *, uint64_t))v270)(v99, v100, v266);
          uint64_t v112 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v99[v112[5]] = *(_DWORD *)&v100[v112[5]];
          uint64_t v113 = v112[6];
          uint64_t v114 = &v99[v113];
          uint64_t v115 = &v100[v113];
          long long v116 = *((_OWORD *)v115 + 3);
          *((_OWORD *)v114 + 2) = *((_OWORD *)v115 + 2);
          *((_OWORD *)v114 + 3) = v116;
          long long v117 = *((_OWORD *)v115 + 1);
          *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
          *((_OWORD *)v114 + 1) = v117;
          *(void *)&v99[v112[7]] = *(void *)&v100[v112[7]];
          *(void *)&v99[v112[8]] = *(void *)&v100[v112[8]];
          *(void *)&v99[v112[9]] = *(void *)&v100[v112[9]];
          v99[v112[10]] = v100[v112[10]];
          uint64_t v118 = v112[11];
          long long v119 = &v99[v118];
          uint64_t v120 = &v100[v118];
          uint64_t v255 = *((void *)v120 + 1);
          uint64_t v257 = v112;
          *(void *)long long v119 = *(void *)v120;
          *((void *)v119 + 1) = v255;
          uint64_t v121 = v112[12];
          uint64_t v122 = &v99[v121];
          uint64_t v123 = &v100[v121];
          uint64_t v254 = *((void *)v123 + 1);
          *(void *)uint64_t v122 = *(void *)v123;
          *((void *)v122 + 1) = v254;
          uint64_t v124 = v112[13];
          v259 = &v99[v124];
          uint64_t v261 = &v100[v124];
          uint64_t v125 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v252 = *(void *)(v125 - 8);
          uint64_t v253 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v252 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v253(v261, 1, v125))
          {
            uint64_t v126 = sub_10000F214(&qword_100524BD0);
            memcpy(v259, v261, *(void *)(*(void *)(v126 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v252 + 16))(v259, v261, v125);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v252 + 56))(v259, 0, 1, v125);
          }
          uint64_t v163 = v257[14];
          uint64_t v164 = &v99[v163];
          uint64_t v165 = (uint64_t *)&v100[v163];
          unint64_t v166 = v165[1];
          if (v166 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
          }
          else
          {
            uint64_t v262 = *v165;
            sub_100038528(*v165, v166);
            *(void *)uint64_t v164 = v262;
            *((void *)v164 + 1) = v166;
          }
          uint64_t v167 = v257[15];
          long long v168 = &v99[v167];
          uint64_t v169 = &v100[v167];
          if (*(void *)v169)
          {
            uint64_t v170 = *((void *)v169 + 1);
            uint64_t v171 = *((void *)v169 + 2);
            *(void *)long long v168 = *(void *)v169;
            *((void *)v168 + 1) = v170;
            *((void *)v168 + 2) = v171;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)long long v168 = *(_OWORD *)v169;
            *((void *)v168 + 2) = *((void *)v169 + 2);
          }
          long long v97 = v264;
          break;
        case 2u:
          ((void (*)(char *, char *, uint64_t))v270)(v99, v100, v266);
          uint64_t v127 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v99[v127[5]] = *(_DWORD *)&v100[v127[5]];
          uint64_t v128 = v127[6];
          uint64_t v129 = &v99[v128];
          long long v130 = &v100[v128];
          long long v131 = *((_OWORD *)v130 + 3);
          *((_OWORD *)v129 + 2) = *((_OWORD *)v130 + 2);
          *((_OWORD *)v129 + 3) = v131;
          long long v132 = *((_OWORD *)v130 + 1);
          *(_OWORD *)uint64_t v129 = *(_OWORD *)v130;
          *((_OWORD *)v129 + 1) = v132;
          uint64_t v133 = v127[7];
          uint64_t v134 = &v99[v133];
          uint64_t v135 = &v100[v133];
          uint64_t v137 = *(void *)v135;
          uint64_t v136 = *((void *)v135 + 1);
          *(void *)uint64_t v134 = v137;
          *((void *)v134 + 1) = v136;
          *(void *)&v99[v127[8]] = *(void *)&v100[v127[8]];
          *(void *)&v99[v127[9]] = *(void *)&v100[v127[9]];
          *(void *)&v99[v127[10]] = *(void *)&v100[v127[10]];
          *(void *)&v99[v127[11]] = *(void *)&v100[v127[11]];
          *(void *)&v99[v127[12]] = *(void *)&v100[v127[12]];
          uint64_t v138 = v127[13];
          long long v139 = *(void **)&v100[v138];
          *(void *)&v99[v138] = v139;
          v99[v127[14]] = v100[v127[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v140 = v139;
          break;
        case 3u:
        case 4u:
          ((void (*)(char *, char *, uint64_t))v270)(v99, v100, v266);
          long long v141 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v99[v141[5]] = *(_DWORD *)&v100[v141[5]];
          uint64_t v142 = v141[6];
          uint64_t v143 = &v99[v142];
          uint64_t v144 = &v100[v142];
          long long v145 = *((_OWORD *)v144 + 3);
          *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
          *((_OWORD *)v143 + 3) = v145;
          long long v146 = *((_OWORD *)v144 + 1);
          *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
          *((_OWORD *)v143 + 1) = v146;
          uint64_t v147 = v141[7];
          uint64_t v148 = &v99[v147];
          unint64_t v149 = &v100[v147];
          uint64_t v151 = *(void *)v149;
          uint64_t v150 = *((void *)v149 + 1);
          *(void *)uint64_t v148 = v151;
          *((void *)v148 + 1) = v150;
          *(void *)&v99[v141[8]] = *(void *)&v100[v141[8]];
          *(void *)&v99[v141[9]] = *(void *)&v100[v141[9]];
          *(void *)&v99[v141[10]] = *(void *)&v100[v141[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          ((void (*)(char *, char *, uint64_t))v270)(v99, v100, v266);
          long long v152 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v99[v152[5]] = *(_DWORD *)&v100[v152[5]];
          uint64_t v153 = v152[6];
          uint64_t v154 = &v99[v153];
          long long v155 = &v100[v153];
          long long v156 = *((_OWORD *)v155 + 3);
          *((_OWORD *)v154 + 2) = *((_OWORD *)v155 + 2);
          *((_OWORD *)v154 + 3) = v156;
          long long v157 = *((_OWORD *)v155 + 1);
          *(_OWORD *)uint64_t v154 = *(_OWORD *)v155;
          *((_OWORD *)v154 + 1) = v157;
          uint64_t v158 = v152[7];
          unint64_t v159 = &v99[v158];
          uint64_t v160 = &v100[v158];
          uint64_t v162 = *(void *)v160;
          uint64_t v161 = *((void *)v160 + 1);
          *(void *)unint64_t v159 = v162;
          *((void *)v159 + 1) = v161;
          *(void *)&v99[v152[8]] = *(void *)&v100[v152[8]];
          *(void *)&v99[v152[9]] = *(void *)&v100[v152[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          ((void (*)(char *, char *, uint64_t))v270)(v99, v100, v266);
          long long v101 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v99[v101[5]] = *(_DWORD *)&v100[v101[5]];
          uint64_t v102 = v101[6];
          long long v103 = &v99[v102];
          uint64_t v104 = &v100[v102];
          long long v105 = *((_OWORD *)v104 + 3);
          *((_OWORD *)v103 + 2) = *((_OWORD *)v104 + 2);
          *((_OWORD *)v103 + 3) = v105;
          long long v106 = *((_OWORD *)v104 + 1);
          *(_OWORD *)long long v103 = *(_OWORD *)v104;
          *((_OWORD *)v103 + 1) = v106;
          uint64_t v107 = v101[7];
          long long v108 = &v99[v107];
          uint64_t v109 = &v100[v107];
          uint64_t v111 = *(void *)v109;
          uint64_t v110 = *((void *)v109 + 1);
          *(void *)long long v108 = v111;
          *((void *)v108 + 1) = v110;
          *(void *)&v99[v101[8]] = *(void *)&v100[v101[8]];
          *(void *)&v99[v101[9]] = *(void *)&v100[v101[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v172 = v97[6];
      uint64_t v173 = (char *)v91 + v172;
      uint64_t v174 = (char *)v92 + v172;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          ((void (*)(char *, char *, uint64_t))v270)(v173, v174, v266);
          uint64_t v186 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v173[v186[5]] = *(_DWORD *)&v174[v186[5]];
          uint64_t v187 = v186[6];
          uint64_t v188 = &v173[v187];
          uint64_t v189 = &v174[v187];
          long long v190 = *((_OWORD *)v189 + 3);
          *((_OWORD *)v188 + 2) = *((_OWORD *)v189 + 2);
          *((_OWORD *)v188 + 3) = v190;
          long long v191 = *((_OWORD *)v189 + 1);
          *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
          *((_OWORD *)v188 + 1) = v191;
          *(void *)&v173[v186[7]] = *(void *)&v174[v186[7]];
          *(void *)&v173[v186[8]] = *(void *)&v174[v186[8]];
          *(void *)&v173[v186[9]] = *(void *)&v174[v186[9]];
          v173[v186[10]] = v174[v186[10]];
          uint64_t v192 = v186[11];
          v193 = &v173[v192];
          long long v194 = &v174[v192];
          uint64_t v263 = *((void *)v194 + 1);
          *(void *)v193 = *(void *)v194;
          *((void *)v193 + 1) = v263;
          uint64_t v195 = v186[12];
          long long v196 = &v173[v195];
          uint64_t v197 = &v174[v195];
          uint64_t v260 = *((void *)v197 + 1);
          *(void *)long long v196 = *(void *)v197;
          *((void *)v196 + 1) = v260;
          uint64_t v198 = v186[13];
          v267 = v186;
          __dsta = &v173[v198];
          v271 = &v174[v198];
          uint64_t v199 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v256 = *(void *)(v199 - 8);
          v258 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v256 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v258(v271, 1, v199))
          {
            uint64_t v200 = sub_10000F214(&qword_100524BD0);
            memcpy(__dsta, v271, *(void *)(*(void *)(v200 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v256 + 16))(__dsta, v271, v199);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v256 + 56))(__dsta, 0, 1, v199);
          }
          uint64_t v237 = v267[14];
          uint64_t v238 = &v173[v237];
          unint64_t v239 = (uint64_t *)&v174[v237];
          unint64_t v240 = v239[1];
          if (v240 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v238 = *(_OWORD *)v239;
          }
          else
          {
            uint64_t v272 = *v239;
            sub_100038528(*v239, v240);
            *(void *)uint64_t v238 = v272;
            *((void *)v238 + 1) = v240;
          }
          uint64_t v241 = v267[15];
          uint64_t v242 = &v173[v241];
          uint64_t v243 = &v174[v241];
          if (*(void *)v243)
          {
            uint64_t v244 = *((void *)v243 + 1);
            uint64_t v245 = *((void *)v243 + 2);
            *(void *)uint64_t v242 = *(void *)v243;
            *((void *)v242 + 1) = v244;
            *((void *)v242 + 2) = v245;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v242 = *(_OWORD *)v243;
            *((void *)v242 + 2) = *((void *)v243 + 2);
          }
          long long v97 = v264;
          break;
        case 2u:
          ((void (*)(char *, char *, uint64_t))v270)(v173, v174, v266);
          id v201 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v173[v201[5]] = *(_DWORD *)&v174[v201[5]];
          uint64_t v202 = v201[6];
          uint64_t v203 = &v173[v202];
          uint64_t v204 = &v174[v202];
          long long v205 = *((_OWORD *)v204 + 3);
          *((_OWORD *)v203 + 2) = *((_OWORD *)v204 + 2);
          *((_OWORD *)v203 + 3) = v205;
          long long v206 = *((_OWORD *)v204 + 1);
          *(_OWORD *)uint64_t v203 = *(_OWORD *)v204;
          *((_OWORD *)v203 + 1) = v206;
          uint64_t v207 = v201[7];
          long long v208 = &v173[v207];
          uint64_t v209 = &v174[v207];
          uint64_t v211 = *(void *)v209;
          uint64_t v210 = *((void *)v209 + 1);
          *(void *)long long v208 = v211;
          *((void *)v208 + 1) = v210;
          *(void *)&v173[v201[8]] = *(void *)&v174[v201[8]];
          *(void *)&v173[v201[9]] = *(void *)&v174[v201[9]];
          *(void *)&v173[v201[10]] = *(void *)&v174[v201[10]];
          *(void *)&v173[v201[11]] = *(void *)&v174[v201[11]];
          *(void *)&v173[v201[12]] = *(void *)&v174[v201[12]];
          uint64_t v212 = v201[13];
          uint64_t v213 = *(void **)&v174[v212];
          *(void *)&v173[v212] = v213;
          v173[v201[14]] = v174[v201[14]];
          swift_bridgeObjectRetain();
          long long v97 = v264;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v214 = v213;
          break;
        case 3u:
        case 4u:
          ((void (*)(char *, char *, uint64_t))v270)(v173, v174, v266);
          long long v215 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v173[v215[5]] = *(_DWORD *)&v174[v215[5]];
          uint64_t v216 = v215[6];
          long long v217 = &v173[v216];
          long long v218 = &v174[v216];
          long long v219 = *((_OWORD *)v218 + 3);
          *((_OWORD *)v217 + 2) = *((_OWORD *)v218 + 2);
          *((_OWORD *)v217 + 3) = v219;
          long long v220 = *((_OWORD *)v218 + 1);
          *(_OWORD *)long long v217 = *(_OWORD *)v218;
          *((_OWORD *)v217 + 1) = v220;
          uint64_t v221 = v215[7];
          uint64_t v222 = &v173[v221];
          uint64_t v223 = &v174[v221];
          uint64_t v225 = *(void *)v223;
          uint64_t v224 = *((void *)v223 + 1);
          *(void *)uint64_t v222 = v225;
          *((void *)v222 + 1) = v224;
          *(void *)&v173[v215[8]] = *(void *)&v174[v215[8]];
          *(void *)&v173[v215[9]] = *(void *)&v174[v215[9]];
          *(void *)&v173[v215[10]] = *(void *)&v174[v215[10]];
          swift_bridgeObjectRetain();
          long long v97 = v264;
          swift_retain();
          break;
        case 5u:
          ((void (*)(char *, char *, uint64_t))v270)(v173, v174, v266);
          uint64_t v226 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v173[v226[5]] = *(_DWORD *)&v174[v226[5]];
          uint64_t v227 = v226[6];
          uint64_t v228 = &v173[v227];
          uint64_t v229 = &v174[v227];
          long long v230 = *((_OWORD *)v229 + 3);
          *((_OWORD *)v228 + 2) = *((_OWORD *)v229 + 2);
          *((_OWORD *)v228 + 3) = v230;
          long long v231 = *((_OWORD *)v229 + 1);
          *(_OWORD *)uint64_t v228 = *(_OWORD *)v229;
          *((_OWORD *)v228 + 1) = v231;
          uint64_t v232 = v226[7];
          uint64_t v233 = &v173[v232];
          uint64_t v234 = &v174[v232];
          uint64_t v236 = *(void *)v234;
          uint64_t v235 = *((void *)v234 + 1);
          *(void *)uint64_t v233 = v236;
          *((void *)v233 + 1) = v235;
          *(void *)&v173[v226[8]] = *(void *)&v174[v226[8]];
          *(void *)&v173[v226[9]] = *(void *)&v174[v226[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          ((void (*)(char *, char *, uint64_t))v270)(v173, v174, v266);
          uint64_t v175 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v173[v175[5]] = *(_DWORD *)&v174[v175[5]];
          uint64_t v176 = v175[6];
          long long v177 = &v173[v176];
          long long v178 = &v174[v176];
          long long v179 = *((_OWORD *)v178 + 3);
          *((_OWORD *)v177 + 2) = *((_OWORD *)v178 + 2);
          *((_OWORD *)v177 + 3) = v179;
          long long v180 = *((_OWORD *)v178 + 1);
          *(_OWORD *)long long v177 = *(_OWORD *)v178;
          *((_OWORD *)v177 + 1) = v180;
          uint64_t v181 = v175[7];
          uint64_t v182 = &v173[v181];
          uint64_t v183 = &v174[v181];
          uint64_t v185 = *(void *)v183;
          uint64_t v184 = *((void *)v183 + 1);
          *(void *)uint64_t v182 = v185;
          *((void *)v182 + 1) = v184;
          *(void *)&v173[v175[8]] = *(void *)&v174[v175[8]];
          *(void *)&v173[v175[9]] = *(void *)&v174[v175[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      *((unsigned char *)v91 + v97[7]) = *((unsigned char *)v92 + v97[7]);
      *(uint64_t *)((char *)v91 + v97[8]) = *(uint64_t *)((char *)v92 + v97[8]);
      *(_DWORD *)((char *)v91 + v97[9]) = *(_DWORD *)((char *)v92 + v97[9]);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v91, v92, *(void *)(*(void *)(v93 - 8) + 64));
LABEL_55:
        uint64_t v246 = v6[6];
        uint64_t v247 = v6[7];
        long long v248 = (_OWORD *)((char *)a1 + v246);
        uint64_t v249 = (_OWORD *)((char *)a2 + v246);
        long long v250 = v249[1];
        *long long v248 = *v249;
        v248[1] = v250;
        *(void *)((char *)a1 + v247) = *(void *)((char *)a2 + v247);
        return a1;
      }
      uint64_t v95 = *v92;
      unint64_t v96 = v92[1];
      sub_100038528(v95, v96);
      *long long v91 = v95;
      v91[1] = v96;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_55;
  }
  uint64_t v19 = *a2;
  *a1 = *a2;
  a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

void sub_1001DC754(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
      uint64_t v7 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = a1 + v7[13];
      uint64_t v9 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      int v11 = (uint64_t *)(a1 + v7[14]);
      unint64_t v12 = v11[1];
      if (v12 >> 60 != 15) {
        sub_100038B34(*v11, v12);
      }
      if (*(void *)(a1 + v7[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      uint64_t v14 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  long long v16 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  type metadata accessor for DetectionRequest.Originator(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
LABEL_49:
      swift_bridgeObjectRelease();
      break;
    case 2:
      uint64_t v20 = type metadata accessor for UUID();
      long long v21 = *(void (**)(uint64_t *, uint64_t))(*(void *)(v20 - 8) + 8);
      v21(v16, v20);
      uint64_t v22 = type metadata accessor for CVTrackSnapshot(0);
      long long v23 = (char *)v16 + *(int *)(v22 + 20);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v21((uint64_t *)v23, v20);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_31;
        case 1u:
          v21((uint64_t *)v23, v20);
          uint64_t v24 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          long long v25 = &v23[v24[13]];
          uint64_t v26 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v39 = *(void *)(v26 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v25, 1, v26)) {
            (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v26);
          }
          uint64_t v27 = (uint64_t *)&v23[v24[14]];
          unint64_t v28 = v27[1];
          if (v28 >> 60 != 15) {
            sub_100038B34(*v27, v28);
          }
          if (*(void *)&v23[v24[15]])
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v21((uint64_t *)v23, v20);
          uint64_t v29 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v21((uint64_t *)v23, v20);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v21((uint64_t *)v23, v20);
          type metadata accessor for StreamingTextDetectorResult(0);
LABEL_31:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      uint64_t v30 = (char *)v16 + *(int *)(v22 + 24);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v21((uint64_t *)v30, v20);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_49;
        case 1u:
          v21((uint64_t *)v30, v20);
          uint64_t v31 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v32 = &v30[v31[13]];
          uint64_t v33 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v34 = *(void *)(v33 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33)) {
            (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
          }
          uint64_t v35 = (uint64_t *)&v30[v31[14]];
          unint64_t v36 = v35[1];
          if (v36 >> 60 != 15) {
            sub_100038B34(*v35, v36);
          }
          if (!*(void *)&v30[v31[15]]) {
            return;
          }
          swift_bridgeObjectRelease();
LABEL_41:
          swift_release();
          break;
        case 2u:
          v21((uint64_t *)v30, v20);
          uint64_t v37 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v38 = *(void **)&v30[*(int *)(v37 + 52)];

          return;
        case 3u:
        case 4u:
          v21((uint64_t *)v30, v20);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          goto LABEL_41;
        case 5u:
          v21((uint64_t *)v30, v20);
          type metadata accessor for StreamingTextDetectorResult(0);
          goto LABEL_49;
        default:
          return;
      }
      break;
    case 0:
      uint64_t v18 = *v16;
      unint64_t v19 = v16[1];
      sub_100038B34(v18, v19);
      break;
  }
}

uint64_t sub_1001DD080(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v262 = a3;
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
      unint64_t v19 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v19[5]) = *(_DWORD *)(a2 + v19[5]);
      uint64_t v20 = v19[6];
      long long v21 = (_OWORD *)(a1 + v20);
      uint64_t v22 = (_OWORD *)(a2 + v20);
      long long v23 = v22[3];
      v21[2] = v22[2];
      v21[3] = v23;
      long long v24 = v22[1];
      *long long v21 = *v22;
      v21[1] = v24;
      *(void *)(a1 + v19[7]) = *(void *)(a2 + v19[7]);
      *(void *)(a1 + v19[8]) = *(void *)(a2 + v19[8]);
      *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
      *(unsigned char *)(a1 + v19[10]) = *(unsigned char *)(a2 + v19[10]);
      uint64_t v25 = v19[11];
      uint64_t v26 = (void *)(a1 + v25);
      uint64_t v27 = (void *)(a2 + v25);
      uint64_t v28 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = v19[12];
      uint64_t v30 = (void *)(a1 + v29);
      uint64_t v31 = (void *)(a2 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = v19[13];
      __dst = (void *)(a1 + v33);
      uint64_t v34 = (const void *)(a2 + v33);
      uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37(v34, 1, v35))
      {
        uint64_t v38 = sub_10000F214(&qword_100524BD0);
        memcpy(__dst, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(__dst, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
      }
      a3 = v262;
      uint64_t v78 = v19[14];
      uint64_t v79 = a1 + v78;
      uint64_t v80 = (uint64_t *)(a2 + v78);
      unint64_t v81 = v80[1];
      if (v81 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
      }
      else
      {
        uint64_t v82 = *v80;
        sub_100038528(*v80, v80[1]);
        *(void *)uint64_t v79 = v82;
        *(void *)(v79 + 8) = v81;
      }
      uint64_t v83 = v19[15];
      uint64_t v84 = (void *)(a1 + v83);
      uint64_t v85 = (void *)(a2 + v83);
      if (*v85)
      {
        uint64_t v86 = v85[1];
        uint64_t v87 = v85[2];
        *uint64_t v84 = *v85;
        v84[1] = v86;
        v84[2] = v87;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
        v84[2] = v85[2];
      }
      break;
    case 2u:
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
      uint64_t v40 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v40[5]) = *(_DWORD *)(a2 + v40[5]);
      uint64_t v41 = v40[6];
      uint64_t v42 = (_OWORD *)(a1 + v41);
      uint64_t v43 = (_OWORD *)(a2 + v41);
      long long v44 = v43[3];
      v42[2] = v43[2];
      v42[3] = v44;
      long long v45 = v43[1];
      *uint64_t v42 = *v43;
      v42[1] = v45;
      uint64_t v46 = v40[7];
      long long v47 = (void *)(a1 + v46);
      uint64_t v48 = (uint64_t *)(a2 + v46);
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      *long long v47 = v50;
      v47[1] = v49;
      *(void *)(a1 + v40[8]) = *(void *)(a2 + v40[8]);
      *(void *)(a1 + v40[9]) = *(void *)(a2 + v40[9]);
      *(void *)(a1 + v40[10]) = *(void *)(a2 + v40[10]);
      *(void *)(a1 + v40[11]) = *(void *)(a2 + v40[11]);
      *(void *)(a1 + v40[12]) = *(void *)(a2 + v40[12]);
      uint64_t v51 = v40[13];
      uint64_t v52 = *(void **)(a2 + v51);
      *(void *)(a1 + v51) = v52;
      *(unsigned char *)(a1 + v40[14]) = *(unsigned char *)(a2 + v40[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v53 = v52;
      break;
    case 3u:
    case 4u:
      uint64_t v54 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
      id v55 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v55[5]) = *(_DWORD *)(a2 + v55[5]);
      uint64_t v56 = v55[6];
      uint64_t v57 = (_OWORD *)(a1 + v56);
      uint64_t v58 = (_OWORD *)(a2 + v56);
      long long v59 = v58[3];
      v57[2] = v58[2];
      v57[3] = v59;
      long long v60 = v58[1];
      *uint64_t v57 = *v58;
      v57[1] = v60;
      uint64_t v61 = v55[7];
      long long v62 = (void *)(a1 + v61);
      uint64_t v63 = (uint64_t *)(a2 + v61);
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      *long long v62 = v65;
      v62[1] = v64;
      *(void *)(a1 + v55[8]) = *(void *)(a2 + v55[8]);
      *(void *)(a1 + v55[9]) = *(void *)(a2 + v55[9]);
      *(void *)(a1 + v55[10]) = *(void *)(a2 + v55[10]);
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 5u:
      uint64_t v66 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(a1, a2, v66);
      uint64_t v67 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v67[5]) = *(_DWORD *)(a2 + v67[5]);
      uint64_t v68 = v67[6];
      uint64_t v69 = (_OWORD *)(a1 + v68);
      uint64_t v70 = (_OWORD *)(a2 + v68);
      long long v71 = v70[3];
      v69[2] = v70[2];
      v69[3] = v71;
      long long v72 = v70[1];
      *uint64_t v69 = *v70;
      v69[1] = v72;
      uint64_t v73 = v67[7];
      long long v74 = (void *)(a1 + v73);
      uint64_t v75 = (uint64_t *)(a2 + v73);
      uint64_t v77 = *v75;
      uint64_t v76 = v75[1];
      *long long v74 = v77;
      v74[1] = v76;
      *(void *)(a1 + v67[8]) = *(void *)(a2 + v67[8]);
      *(void *)(a1 + v67[9]) = *(void *)(a2 + v67[9]);
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
      uint64_t v8 = v7[6];
      uint64_t v9 = (_OWORD *)(a1 + v8);
      uint64_t v10 = (_OWORD *)(a2 + v8);
      long long v11 = v10[3];
      void v9[2] = v10[2];
      v9[3] = v11;
      long long v12 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v12;
      uint64_t v13 = v7[7];
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (uint64_t *)(a2 + v13);
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      *uint64_t v14 = v17;
      v14[1] = v16;
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v88 = a3[5];
  uint64_t v89 = (uint64_t *)(a1 + v88);
  uint64_t v90 = (uint64_t *)(a2 + v88);
  uint64_t v91 = type metadata accessor for DetectionRequest.Originator(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      *uint64_t v89 = *v90;
      swift_bridgeObjectRetain();
      goto LABEL_52;
    case 2:
      uint64_t v263 = type metadata accessor for UUID();
      v267 = *(void (**)(uint64_t *, uint64_t *))(*(void *)(v263 - 8) + 16);
      v267(v89, v90);
      uint64_t v95 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v96 = v95[5];
      long long v97 = (char *)v89 + v96;
      uint64_t v98 = (char *)v90 + v96;
      uint64_t v261 = v95;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          ((void (*)(char *, char *, uint64_t))v267)(v97, v98, v263);
          uint64_t v110 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v97[v110[5]] = *(_DWORD *)&v98[v110[5]];
          uint64_t v111 = v110[6];
          uint64_t v112 = &v97[v111];
          uint64_t v113 = &v98[v111];
          long long v114 = *((_OWORD *)v113 + 3);
          *((_OWORD *)v112 + 2) = *((_OWORD *)v113 + 2);
          *((_OWORD *)v112 + 3) = v114;
          long long v115 = *((_OWORD *)v113 + 1);
          *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
          *((_OWORD *)v112 + 1) = v115;
          *(void *)&v97[v110[7]] = *(void *)&v98[v110[7]];
          *(void *)&v97[v110[8]] = *(void *)&v98[v110[8]];
          *(void *)&v97[v110[9]] = *(void *)&v98[v110[9]];
          v97[v110[10]] = v98[v110[10]];
          uint64_t v116 = v110[11];
          long long v117 = &v97[v116];
          uint64_t v118 = &v98[v116];
          uint64_t v251 = *((void *)v118 + 1);
          uint64_t v253 = v110;
          *(void *)long long v117 = *(void *)v118;
          *((void *)v117 + 1) = v251;
          uint64_t v119 = v110[12];
          uint64_t v120 = &v97[v119];
          uint64_t v121 = &v98[v119];
          uint64_t v250 = *((void *)v121 + 1);
          *(void *)uint64_t v120 = *(void *)v121;
          *((void *)v120 + 1) = v250;
          uint64_t v122 = v110[13];
          uint64_t v255 = &v97[v122];
          uint64_t v257 = &v98[v122];
          uint64_t v123 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v248 = *(void *)(v123 - 8);
          uint64_t v249 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v249(v257, 1, v123))
          {
            uint64_t v124 = sub_10000F214(&qword_100524BD0);
            memcpy(v255, v257, *(void *)(*(void *)(v124 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v248 + 16))(v255, v257, v123);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v248 + 56))(v255, 0, 1, v123);
          }
          uint64_t v160 = v253[14];
          uint64_t v161 = &v97[v160];
          uint64_t v162 = (uint64_t *)&v98[v160];
          unint64_t v163 = v162[1];
          if (v163 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
          }
          else
          {
            uint64_t v259 = *v162;
            sub_100038528(*v162, v163);
            *(void *)uint64_t v161 = v259;
            *((void *)v161 + 1) = v163;
          }
          uint64_t v164 = v253[15];
          uint64_t v165 = &v97[v164];
          unint64_t v166 = &v98[v164];
          if (*(void *)v166)
          {
            uint64_t v167 = *((void *)v166 + 1);
            uint64_t v168 = *((void *)v166 + 2);
            *(void *)uint64_t v165 = *(void *)v166;
            *((void *)v165 + 1) = v167;
            *((void *)v165 + 2) = v168;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
            *((void *)v165 + 2) = *((void *)v166 + 2);
          }
          uint64_t v95 = v261;
          break;
        case 2u:
          ((void (*)(char *, char *, uint64_t))v267)(v97, v98, v263);
          uint64_t v125 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v97[v125[5]] = *(_DWORD *)&v98[v125[5]];
          uint64_t v126 = v125[6];
          uint64_t v127 = &v97[v126];
          uint64_t v128 = &v98[v126];
          long long v129 = *((_OWORD *)v128 + 3);
          *((_OWORD *)v127 + 2) = *((_OWORD *)v128 + 2);
          *((_OWORD *)v127 + 3) = v129;
          long long v130 = *((_OWORD *)v128 + 1);
          *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
          *((_OWORD *)v127 + 1) = v130;
          uint64_t v131 = v125[7];
          long long v132 = &v97[v131];
          uint64_t v133 = &v98[v131];
          uint64_t v135 = *(void *)v133;
          uint64_t v134 = *((void *)v133 + 1);
          *(void *)long long v132 = v135;
          *((void *)v132 + 1) = v134;
          *(void *)&v97[v125[8]] = *(void *)&v98[v125[8]];
          *(void *)&v97[v125[9]] = *(void *)&v98[v125[9]];
          *(void *)&v97[v125[10]] = *(void *)&v98[v125[10]];
          *(void *)&v97[v125[11]] = *(void *)&v98[v125[11]];
          *(void *)&v97[v125[12]] = *(void *)&v98[v125[12]];
          uint64_t v136 = v125[13];
          v258 = *(void **)&v98[v136];
          *(void *)&v97[v136] = v258;
          v97[v125[14]] = v98[v125[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v137 = v258;
          break;
        case 3u:
        case 4u:
          ((void (*)(char *, char *, uint64_t))v267)(v97, v98, v263);
          uint64_t v138 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v97[v138[5]] = *(_DWORD *)&v98[v138[5]];
          uint64_t v139 = v138[6];
          id v140 = &v97[v139];
          long long v141 = &v98[v139];
          long long v142 = *((_OWORD *)v141 + 3);
          *((_OWORD *)v140 + 2) = *((_OWORD *)v141 + 2);
          *((_OWORD *)v140 + 3) = v142;
          long long v143 = *((_OWORD *)v141 + 1);
          *(_OWORD *)id v140 = *(_OWORD *)v141;
          *((_OWORD *)v140 + 1) = v143;
          uint64_t v144 = v138[7];
          long long v145 = &v97[v144];
          long long v146 = &v98[v144];
          uint64_t v148 = *(void *)v146;
          uint64_t v147 = *((void *)v146 + 1);
          *(void *)long long v145 = v148;
          *((void *)v145 + 1) = v147;
          *(void *)&v97[v138[8]] = *(void *)&v98[v138[8]];
          *(void *)&v97[v138[9]] = *(void *)&v98[v138[9]];
          *(void *)&v97[v138[10]] = *(void *)&v98[v138[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          ((void (*)(char *, char *, uint64_t))v267)(v97, v98, v263);
          unint64_t v149 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v97[v149[5]] = *(_DWORD *)&v98[v149[5]];
          uint64_t v150 = v149[6];
          uint64_t v151 = &v97[v150];
          long long v152 = &v98[v150];
          long long v153 = *((_OWORD *)v152 + 3);
          *((_OWORD *)v151 + 2) = *((_OWORD *)v152 + 2);
          *((_OWORD *)v151 + 3) = v153;
          long long v154 = *((_OWORD *)v152 + 1);
          *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
          *((_OWORD *)v151 + 1) = v154;
          uint64_t v155 = v149[7];
          long long v156 = &v97[v155];
          long long v157 = &v98[v155];
          uint64_t v159 = *(void *)v157;
          uint64_t v158 = *((void *)v157 + 1);
          *(void *)long long v156 = v159;
          *((void *)v156 + 1) = v158;
          *(void *)&v97[v149[8]] = *(void *)&v98[v149[8]];
          *(void *)&v97[v149[9]] = *(void *)&v98[v149[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          ((void (*)(char *, char *, uint64_t))v267)(v97, v98, v263);
          long long v99 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v97[v99[5]] = *(_DWORD *)&v98[v99[5]];
          uint64_t v100 = v99[6];
          long long v101 = &v97[v100];
          uint64_t v102 = &v98[v100];
          long long v103 = *((_OWORD *)v102 + 3);
          *((_OWORD *)v101 + 2) = *((_OWORD *)v102 + 2);
          *((_OWORD *)v101 + 3) = v103;
          long long v104 = *((_OWORD *)v102 + 1);
          *(_OWORD *)long long v101 = *(_OWORD *)v102;
          *((_OWORD *)v101 + 1) = v104;
          uint64_t v105 = v99[7];
          long long v106 = &v97[v105];
          uint64_t v107 = &v98[v105];
          uint64_t v109 = *(void *)v107;
          uint64_t v108 = *((void *)v107 + 1);
          *(void *)long long v106 = v109;
          *((void *)v106 + 1) = v108;
          *(void *)&v97[v99[8]] = *(void *)&v98[v99[8]];
          *(void *)&v97[v99[9]] = *(void *)&v98[v99[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v169 = v95[6];
      uint64_t v170 = (char *)v89 + v169;
      uint64_t v171 = (char *)v90 + v169;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          ((void (*)(char *, char *, uint64_t))v267)(v170, v171, v263);
          uint64_t v183 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v170[v183[5]] = *(_DWORD *)&v171[v183[5]];
          uint64_t v184 = v183[6];
          uint64_t v185 = &v170[v184];
          uint64_t v186 = &v171[v184];
          long long v187 = *((_OWORD *)v186 + 3);
          *((_OWORD *)v185 + 2) = *((_OWORD *)v186 + 2);
          *((_OWORD *)v185 + 3) = v187;
          long long v188 = *((_OWORD *)v186 + 1);
          *(_OWORD *)uint64_t v185 = *(_OWORD *)v186;
          *((_OWORD *)v185 + 1) = v188;
          *(void *)&v170[v183[7]] = *(void *)&v171[v183[7]];
          *(void *)&v170[v183[8]] = *(void *)&v171[v183[8]];
          *(void *)&v170[v183[9]] = *(void *)&v171[v183[9]];
          v170[v183[10]] = v171[v183[10]];
          uint64_t v189 = v183[11];
          long long v190 = &v170[v189];
          long long v191 = &v171[v189];
          uint64_t v260 = *((void *)v191 + 1);
          *(void *)long long v190 = *(void *)v191;
          *((void *)v190 + 1) = v260;
          uint64_t v192 = v183[12];
          v193 = &v170[v192];
          long long v194 = &v171[v192];
          uint64_t v256 = *((void *)v194 + 1);
          *(void *)v193 = *(void *)v194;
          *((void *)v193 + 1) = v256;
          uint64_t v195 = v183[13];
          v264 = v183;
          __dsta = &v170[v195];
          v268 = &v171[v195];
          uint64_t v196 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v252 = *(void *)(v196 - 8);
          uint64_t v254 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v252 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v254(v268, 1, v196))
          {
            uint64_t v197 = sub_10000F214(&qword_100524BD0);
            memcpy(__dsta, v268, *(void *)(*(void *)(v197 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v252 + 16))(__dsta, v268, v196);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v252 + 56))(__dsta, 0, 1, v196);
          }
          uint64_t v233 = v264[14];
          uint64_t v234 = &v170[v233];
          uint64_t v235 = (uint64_t *)&v171[v233];
          unint64_t v236 = v235[1];
          if (v236 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v234 = *(_OWORD *)v235;
          }
          else
          {
            uint64_t v270 = *v235;
            sub_100038528(*v235, v236);
            *(void *)uint64_t v234 = v270;
            *((void *)v234 + 1) = v236;
          }
          uint64_t v237 = v264[15];
          uint64_t v238 = &v170[v237];
          unint64_t v239 = &v171[v237];
          if (*(void *)v239)
          {
            uint64_t v240 = *((void *)v239 + 1);
            uint64_t v241 = *((void *)v239 + 2);
            *(void *)uint64_t v238 = *(void *)v239;
            *((void *)v238 + 1) = v240;
            *((void *)v238 + 2) = v241;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v238 = *(_OWORD *)v239;
            *((void *)v238 + 2) = *((void *)v239 + 2);
          }
          uint64_t v95 = v261;
          break;
        case 2u:
          ((void (*)(char *, char *, uint64_t))v267)(v170, v171, v263);
          uint64_t v198 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v170[v198[5]] = *(_DWORD *)&v171[v198[5]];
          uint64_t v199 = v198[6];
          uint64_t v200 = &v170[v199];
          id v201 = &v171[v199];
          long long v202 = *((_OWORD *)v201 + 3);
          *((_OWORD *)v200 + 2) = *((_OWORD *)v201 + 2);
          *((_OWORD *)v200 + 3) = v202;
          long long v203 = *((_OWORD *)v201 + 1);
          *(_OWORD *)uint64_t v200 = *(_OWORD *)v201;
          *((_OWORD *)v200 + 1) = v203;
          uint64_t v204 = v198[7];
          long long v205 = &v170[v204];
          long long v206 = &v171[v204];
          uint64_t v208 = *(void *)v206;
          uint64_t v207 = *((void *)v206 + 1);
          *(void *)long long v205 = v208;
          *((void *)v205 + 1) = v207;
          *(void *)&v170[v198[8]] = *(void *)&v171[v198[8]];
          *(void *)&v170[v198[9]] = *(void *)&v171[v198[9]];
          *(void *)&v170[v198[10]] = *(void *)&v171[v198[10]];
          *(void *)&v170[v198[11]] = *(void *)&v171[v198[11]];
          *(void *)&v170[v198[12]] = *(void *)&v171[v198[12]];
          uint64_t v209 = v198[13];
          v269 = *(void **)&v171[v209];
          *(void *)&v170[v209] = v269;
          v170[v198[14]] = v171[v198[14]];
          swift_bridgeObjectRetain();
          uint64_t v95 = v261;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v210 = v269;
          break;
        case 3u:
        case 4u:
          ((void (*)(char *, char *, uint64_t))v267)(v170, v171, v263);
          uint64_t v211 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v170[v211[5]] = *(_DWORD *)&v171[v211[5]];
          uint64_t v212 = v211[6];
          uint64_t v213 = &v170[v212];
          id v214 = &v171[v212];
          long long v215 = *((_OWORD *)v214 + 3);
          *((_OWORD *)v213 + 2) = *((_OWORD *)v214 + 2);
          *((_OWORD *)v213 + 3) = v215;
          long long v216 = *((_OWORD *)v214 + 1);
          *(_OWORD *)uint64_t v213 = *(_OWORD *)v214;
          *((_OWORD *)v213 + 1) = v216;
          uint64_t v217 = v211[7];
          long long v218 = &v170[v217];
          long long v219 = &v171[v217];
          uint64_t v221 = *(void *)v219;
          uint64_t v220 = *((void *)v219 + 1);
          *(void *)long long v218 = v221;
          *((void *)v218 + 1) = v220;
          *(void *)&v170[v211[8]] = *(void *)&v171[v211[8]];
          *(void *)&v170[v211[9]] = *(void *)&v171[v211[9]];
          *(void *)&v170[v211[10]] = *(void *)&v171[v211[10]];
          swift_bridgeObjectRetain();
          uint64_t v95 = v261;
          swift_retain();
          break;
        case 5u:
          ((void (*)(char *, char *, uint64_t))v267)(v170, v171, v263);
          uint64_t v222 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v170[v222[5]] = *(_DWORD *)&v171[v222[5]];
          uint64_t v223 = v222[6];
          uint64_t v224 = &v170[v223];
          uint64_t v225 = &v171[v223];
          long long v226 = *((_OWORD *)v225 + 3);
          *((_OWORD *)v224 + 2) = *((_OWORD *)v225 + 2);
          *((_OWORD *)v224 + 3) = v226;
          long long v227 = *((_OWORD *)v225 + 1);
          *(_OWORD *)uint64_t v224 = *(_OWORD *)v225;
          *((_OWORD *)v224 + 1) = v227;
          uint64_t v228 = v222[7];
          uint64_t v229 = &v170[v228];
          long long v230 = &v171[v228];
          uint64_t v232 = *(void *)v230;
          uint64_t v231 = *((void *)v230 + 1);
          *(void *)uint64_t v229 = v232;
          *((void *)v229 + 1) = v231;
          *(void *)&v170[v222[8]] = *(void *)&v171[v222[8]];
          *(void *)&v170[v222[9]] = *(void *)&v171[v222[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          ((void (*)(char *, char *, uint64_t))v267)(v170, v171, v263);
          uint64_t v172 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v170[v172[5]] = *(_DWORD *)&v171[v172[5]];
          uint64_t v173 = v172[6];
          uint64_t v174 = &v170[v173];
          uint64_t v175 = &v171[v173];
          long long v176 = *((_OWORD *)v175 + 3);
          *((_OWORD *)v174 + 2) = *((_OWORD *)v175 + 2);
          *((_OWORD *)v174 + 3) = v176;
          long long v177 = *((_OWORD *)v175 + 1);
          *(_OWORD *)uint64_t v174 = *(_OWORD *)v175;
          *((_OWORD *)v174 + 1) = v177;
          uint64_t v178 = v172[7];
          long long v179 = &v170[v178];
          long long v180 = &v171[v178];
          uint64_t v182 = *(void *)v180;
          uint64_t v181 = *((void *)v180 + 1);
          *(void *)long long v179 = v182;
          *((void *)v179 + 1) = v181;
          *(void *)&v170[v172[8]] = *(void *)&v171[v172[8]];
          *(void *)&v170[v172[9]] = *(void *)&v171[v172[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      *((unsigned char *)v89 + v95[7]) = *((unsigned char *)v90 + v95[7]);
      *(uint64_t *)((char *)v89 + v95[8]) = *(uint64_t *)((char *)v90 + v95[8]);
      *(_DWORD *)((char *)v89 + v95[9]) = *(_DWORD *)((char *)v90 + v95[9]);
      goto LABEL_52;
    case 0:
      uint64_t v93 = *v90;
      unint64_t v94 = v90[1];
      sub_100038528(*v90, v94);
      *uint64_t v89 = v93;
      v89[1] = v94;
LABEL_52:
      swift_storeEnumTagMultiPayload();
      goto LABEL_53;
  }
  memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
LABEL_53:
  uint64_t v242 = a3[6];
  uint64_t v243 = a3[7];
  uint64_t v244 = (_OWORD *)(a1 + v242);
  uint64_t v245 = (_OWORD *)(a2 + v242);
  long long v246 = v245[1];
  *uint64_t v244 = *v245;
  v244[1] = v246;
  *(void *)(a1 + v243) = *(void *)(a2 + v243);
  return a1;
}

uint64_t sub_1001DE504(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1001D430C(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v17 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
        uint64_t v18 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v18[5]) = *(_DWORD *)(a2 + v18[5]);
        uint64_t v19 = v18[6];
        uint64_t v20 = (_OWORD *)(a1 + v19);
        long long v21 = (_OWORD *)(a2 + v19);
        long long v23 = v21[2];
        long long v22 = v21[3];
        long long v24 = v21[1];
        _OWORD *v20 = *v21;
        v20[1] = v24;
        v20[2] = v23;
        uint64_t v20[3] = v22;
        *(void *)(a1 + v18[7]) = *(void *)(a2 + v18[7]);
        *(void *)(a1 + v18[8]) = *(void *)(a2 + v18[8]);
        *(void *)(a1 + v18[9]) = *(void *)(a2 + v18[9]);
        *(unsigned char *)(a1 + v18[10]) = *(unsigned char *)(a2 + v18[10]);
        uint64_t v25 = v18[11];
        uint64_t v26 = (void *)(a1 + v25);
        uint64_t v27 = (void *)(a2 + v25);
        *uint64_t v26 = *v27;
        v26[1] = v27[1];
        uint64_t v28 = v18[12];
        uint64_t v29 = (void *)(a1 + v28);
        uint64_t v30 = (void *)(a2 + v28);
        *uint64_t v29 = *v30;
        v29[1] = v30[1];
        uint64_t v31 = v18[13];
        __dst = (void *)(a1 + v31);
        uint64_t v32 = (const void *)(a2 + v31);
        uint64_t v33 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v34 = *(void *)(v33 - 8);
        uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v35(v32, 1, v33))
        {
          uint64_t v36 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(__dst, v32, v33);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
        }
        uint64_t v73 = v18[14];
        uint64_t v74 = a1 + v73;
        uint64_t v75 = (uint64_t *)(a2 + v73);
        unint64_t v76 = v75[1];
        if (v76 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
        }
        else
        {
          uint64_t v77 = *v75;
          sub_100038528(*v75, v75[1]);
          *(void *)uint64_t v74 = v77;
          *(void *)(v74 + 8) = v76;
        }
        uint64_t v78 = v18[15];
        uint64_t v79 = (void *)(a1 + v78);
        uint64_t v80 = (void *)(a2 + v78);
        if (*v80)
        {
          *uint64_t v79 = *v80;
          uint64_t v81 = v80[2];
          v79[1] = v80[1];
          v79[2] = v81;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v82 = *(_OWORD *)v80;
          v79[2] = v80[2];
          *(_OWORD *)uint64_t v79 = v82;
        }
        break;
      case 2u:
        uint64_t v37 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
        uint64_t v38 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v38[5]) = *(_DWORD *)(a2 + v38[5]);
        uint64_t v39 = v38[6];
        uint64_t v40 = (_OWORD *)(a1 + v39);
        uint64_t v41 = (_OWORD *)(a2 + v39);
        long long v43 = v41[2];
        long long v42 = v41[3];
        long long v44 = v41[1];
        _OWORD *v40 = *v41;
        v40[1] = v44;
        void v40[2] = v43;
        v40[3] = v42;
        uint64_t v45 = v38[7];
        uint64_t v46 = (void *)(a1 + v45);
        long long v47 = (void *)(a2 + v45);
        *uint64_t v46 = *v47;
        v46[1] = v47[1];
        *(void *)(a1 + v38[8]) = *(void *)(a2 + v38[8]);
        *(void *)(a1 + v38[9]) = *(void *)(a2 + v38[9]);
        *(void *)(a1 + v38[10]) = *(void *)(a2 + v38[10]);
        *(void *)(a1 + v38[11]) = *(void *)(a2 + v38[11]);
        *(void *)(a1 + v38[12]) = *(void *)(a2 + v38[12]);
        uint64_t v48 = v38[13];
        uint64_t v49 = *(void **)(a2 + v48);
        *(void *)(a1 + v48) = v49;
        *(unsigned char *)(a1 + v38[14]) = *(unsigned char *)(a2 + v38[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v50 = v49;
        break;
      case 3u:
      case 4u:
        uint64_t v51 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(a1, a2, v51);
        uint64_t v52 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v52[5]) = *(_DWORD *)(a2 + v52[5]);
        uint64_t v53 = v52[6];
        uint64_t v54 = (_OWORD *)(a1 + v53);
        id v55 = (_OWORD *)(a2 + v53);
        long long v57 = v55[2];
        long long v56 = v55[3];
        long long v58 = v55[1];
        *uint64_t v54 = *v55;
        v54[1] = v58;
        v54[2] = v57;
        v54[3] = v56;
        uint64_t v59 = v52[7];
        long long v60 = (void *)(a1 + v59);
        uint64_t v61 = (void *)(a2 + v59);
        *long long v60 = *v61;
        v60[1] = v61[1];
        *(void *)(a1 + v52[8]) = *(void *)(a2 + v52[8]);
        *(void *)(a1 + v52[9]) = *(void *)(a2 + v52[9]);
        *(void *)(a1 + v52[10]) = *(void *)(a2 + v52[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v62 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(a1, a2, v62);
        uint64_t v63 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v63[5]) = *(_DWORD *)(a2 + v63[5]);
        uint64_t v64 = v63[6];
        uint64_t v65 = (_OWORD *)(a1 + v64);
        uint64_t v66 = (_OWORD *)(a2 + v64);
        long long v68 = v66[2];
        long long v67 = v66[3];
        long long v69 = v66[1];
        *uint64_t v65 = *v66;
        v65[1] = v69;
        v65[2] = v68;
        v65[3] = v67;
        uint64_t v70 = v63[7];
        long long v71 = (void *)(a1 + v70);
        long long v72 = (void *)(a2 + v70);
        *long long v71 = *v72;
        v71[1] = v72[1];
        *(void *)(a1 + v63[8]) = *(void *)(a2 + v63[8]);
        *(void *)(a1 + v63[9]) = *(void *)(a2 + v63[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        uint64_t v10 = (_OWORD *)(a2 + v8);
        long long v12 = v10[2];
        long long v11 = v10[3];
        long long v13 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v13;
        void v9[2] = v12;
        v9[3] = v11;
        uint64_t v14 = v7[7];
        uint64_t v15 = (void *)(a1 + v14);
        uint64_t v16 = (void *)(a2 + v14);
        *uint64_t v15 = *v16;
        v15[1] = v16[1];
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v83 = a3[5];
    uint64_t v84 = (uint64_t *)(a1 + v83);
    uint64_t v85 = (uint64_t *)(a2 + v83);
    sub_1001D430C(a1 + v83, type metadata accessor for DetectionRequest.Originator);
    uint64_t v86 = type metadata accessor for DetectionRequest.Originator(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        *uint64_t v84 = *v85;
        swift_bridgeObjectRetain();
        goto LABEL_53;
      case 2:
        uint64_t v246 = type metadata accessor for UUID();
        uint64_t v250 = *(void (**)(uint64_t *, uint64_t *))(*(void *)(v246 - 8) + 16);
        v250(v84, v85);
        uint64_t v90 = (int *)type metadata accessor for CVTrackSnapshot(0);
        uint64_t v91 = v90[5];
        long long v92 = (char *)v84 + v91;
        uint64_t v93 = (char *)v85 + v91;
        uint64_t v245 = v90;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            ((void (*)(char *, char *, uint64_t))v250)(v92, v93, v246);
            long long v104 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v92[v104[5]] = *(_DWORD *)&v93[v104[5]];
            uint64_t v105 = v104[6];
            long long v106 = &v92[v105];
            uint64_t v107 = &v93[v105];
            long long v109 = *((_OWORD *)v107 + 2);
            long long v108 = *((_OWORD *)v107 + 3);
            long long v110 = *((_OWORD *)v107 + 1);
            *(_OWORD *)long long v106 = *(_OWORD *)v107;
            *((_OWORD *)v106 + 1) = v110;
            *((_OWORD *)v106 + 2) = v109;
            *((_OWORD *)v106 + 3) = v108;
            *(void *)&v92[v104[7]] = *(void *)&v93[v104[7]];
            *(void *)&v92[v104[8]] = *(void *)&v93[v104[8]];
            *(void *)&v92[v104[9]] = *(void *)&v93[v104[9]];
            v92[v104[10]] = v93[v104[10]];
            uint64_t v111 = v104[11];
            uint64_t v112 = &v92[v111];
            uint64_t v113 = &v93[v111];
            *(void *)uint64_t v112 = *(void *)v113;
            uint64_t v240 = v104;
            *((void *)v112 + 1) = *((void *)v113 + 1);
            uint64_t v114 = v104[12];
            long long v115 = &v92[v114];
            uint64_t v116 = &v93[v114];
            *(void *)long long v115 = *(void *)v116;
            *((void *)v115 + 1) = *((void *)v116 + 1);
            uint64_t v117 = v104[13];
            uint64_t v242 = &v92[v117];
            uint64_t v243 = &v93[v117];
            uint64_t v118 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v237 = *(void *)(v118 - 8);
            uint64_t v238 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v237 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v238(v243, 1, v118))
            {
              uint64_t v119 = sub_10000F214(&qword_100524BD0);
              memcpy(v242, v243, *(void *)(*(void *)(v119 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v237 + 16))(v242, v243, v118);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v237 + 56))(v242, 0, 1, v118);
            }
            uint64_t v153 = v240[14];
            long long v154 = &v92[v153];
            uint64_t v155 = (uint64_t *)&v93[v153];
            unint64_t v156 = v155[1];
            if (v156 >> 60 == 15)
            {
              *(_OWORD *)long long v154 = *(_OWORD *)v155;
            }
            else
            {
              uint64_t v244 = *v155;
              sub_100038528(*v155, v156);
              *(void *)long long v154 = v244;
              *((void *)v154 + 1) = v156;
            }
            uint64_t v157 = v240[15];
            uint64_t v158 = &v92[v157];
            uint64_t v159 = &v93[v157];
            if (*(void *)v159)
            {
              *(void *)uint64_t v158 = *(void *)v159;
              uint64_t v160 = *((void *)v159 + 2);
              *((void *)v158 + 1) = *((void *)v159 + 1);
              *((void *)v158 + 2) = v160;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v161 = *(_OWORD *)v159;
              *((void *)v158 + 2) = *((void *)v159 + 2);
              *(_OWORD *)uint64_t v158 = v161;
            }
            uint64_t v90 = v245;
            break;
          case 2u:
            ((void (*)(char *, char *, uint64_t))v250)(v92, v93, v246);
            uint64_t v120 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v92[v120[5]] = *(_DWORD *)&v93[v120[5]];
            uint64_t v121 = v120[6];
            uint64_t v122 = &v92[v121];
            uint64_t v123 = &v93[v121];
            long long v125 = *((_OWORD *)v123 + 2);
            long long v124 = *((_OWORD *)v123 + 3);
            long long v126 = *((_OWORD *)v123 + 1);
            *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
            *((_OWORD *)v122 + 1) = v126;
            *((_OWORD *)v122 + 2) = v125;
            *((_OWORD *)v122 + 3) = v124;
            uint64_t v127 = v120[7];
            uint64_t v128 = &v92[v127];
            long long v129 = &v93[v127];
            *(void *)uint64_t v128 = *(void *)v129;
            *((void *)v128 + 1) = *((void *)v129 + 1);
            *(void *)&v92[v120[8]] = *(void *)&v93[v120[8]];
            *(void *)&v92[v120[9]] = *(void *)&v93[v120[9]];
            *(void *)&v92[v120[10]] = *(void *)&v93[v120[10]];
            *(void *)&v92[v120[11]] = *(void *)&v93[v120[11]];
            *(void *)&v92[v120[12]] = *(void *)&v93[v120[12]];
            uint64_t v130 = v120[13];
            uint64_t v131 = *(void **)&v93[v130];
            *(void *)&v92[v130] = v131;
            v92[v120[14]] = v93[v120[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v132 = v131;
            break;
          case 3u:
          case 4u:
            ((void (*)(char *, char *, uint64_t))v250)(v92, v93, v246);
            uint64_t v133 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v92[v133[5]] = *(_DWORD *)&v93[v133[5]];
            uint64_t v134 = v133[6];
            uint64_t v135 = &v92[v134];
            uint64_t v136 = &v93[v134];
            long long v138 = *((_OWORD *)v136 + 2);
            long long v137 = *((_OWORD *)v136 + 3);
            long long v139 = *((_OWORD *)v136 + 1);
            *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
            *((_OWORD *)v135 + 1) = v139;
            *((_OWORD *)v135 + 2) = v138;
            *((_OWORD *)v135 + 3) = v137;
            uint64_t v140 = v133[7];
            long long v141 = &v92[v140];
            long long v142 = &v93[v140];
            *(void *)long long v141 = *(void *)v142;
            *((void *)v141 + 1) = *((void *)v142 + 1);
            *(void *)&v92[v133[8]] = *(void *)&v93[v133[8]];
            *(void *)&v92[v133[9]] = *(void *)&v93[v133[9]];
            *(void *)&v92[v133[10]] = *(void *)&v93[v133[10]];
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            ((void (*)(char *, char *, uint64_t))v250)(v92, v93, v246);
            long long v143 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v92[v143[5]] = *(_DWORD *)&v93[v143[5]];
            uint64_t v144 = v143[6];
            long long v145 = &v92[v144];
            long long v146 = &v93[v144];
            long long v148 = *((_OWORD *)v146 + 2);
            long long v147 = *((_OWORD *)v146 + 3);
            long long v149 = *((_OWORD *)v146 + 1);
            *(_OWORD *)long long v145 = *(_OWORD *)v146;
            *((_OWORD *)v145 + 1) = v149;
            *((_OWORD *)v145 + 2) = v148;
            *((_OWORD *)v145 + 3) = v147;
            uint64_t v150 = v143[7];
            uint64_t v151 = &v92[v150];
            long long v152 = &v93[v150];
            *(void *)uint64_t v151 = *(void *)v152;
            *((void *)v151 + 1) = *((void *)v152 + 1);
            *(void *)&v92[v143[8]] = *(void *)&v93[v143[8]];
            *(void *)&v92[v143[9]] = *(void *)&v93[v143[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            ((void (*)(char *, char *, uint64_t))v250)(v92, v93, v246);
            unint64_t v94 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v92[v94[5]] = *(_DWORD *)&v93[v94[5]];
            uint64_t v95 = v94[6];
            uint64_t v96 = &v92[v95];
            long long v97 = &v93[v95];
            long long v99 = *((_OWORD *)v97 + 2);
            long long v98 = *((_OWORD *)v97 + 3);
            long long v100 = *((_OWORD *)v97 + 1);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
            *((_OWORD *)v96 + 1) = v100;
            *((_OWORD *)v96 + 2) = v99;
            *((_OWORD *)v96 + 3) = v98;
            uint64_t v101 = v94[7];
            uint64_t v102 = &v92[v101];
            long long v103 = &v93[v101];
            *(void *)uint64_t v102 = *(void *)v103;
            *((void *)v102 + 1) = *((void *)v103 + 1);
            *(void *)&v92[v94[8]] = *(void *)&v93[v94[8]];
            *(void *)&v92[v94[9]] = *(void *)&v93[v94[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v162 = v90[6];
        unint64_t v163 = (char *)v84 + v162;
        uint64_t v164 = (char *)v85 + v162;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            ((void (*)(char *, char *, uint64_t))v250)(v163, v164, v246);
            uint64_t v175 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v163[v175[5]] = *(_DWORD *)&v164[v175[5]];
            uint64_t v176 = v175[6];
            long long v177 = &v163[v176];
            uint64_t v178 = &v164[v176];
            long long v180 = *((_OWORD *)v178 + 2);
            long long v179 = *((_OWORD *)v178 + 3);
            long long v181 = *((_OWORD *)v178 + 1);
            *(_OWORD *)long long v177 = *(_OWORD *)v178;
            *((_OWORD *)v177 + 1) = v181;
            *((_OWORD *)v177 + 2) = v180;
            *((_OWORD *)v177 + 3) = v179;
            *(void *)&v163[v175[7]] = *(void *)&v164[v175[7]];
            *(void *)&v163[v175[8]] = *(void *)&v164[v175[8]];
            *(void *)&v163[v175[9]] = *(void *)&v164[v175[9]];
            v163[v175[10]] = v164[v175[10]];
            uint64_t v182 = v175[11];
            uint64_t v183 = &v163[v182];
            uint64_t v184 = &v164[v182];
            *(void *)uint64_t v183 = *(void *)v184;
            *((void *)v183 + 1) = *((void *)v184 + 1);
            uint64_t v185 = v175[12];
            uint64_t v186 = &v163[v185];
            long long v187 = &v164[v185];
            *(void *)uint64_t v186 = *(void *)v187;
            *((void *)v186 + 1) = *((void *)v187 + 1);
            uint64_t v188 = v175[13];
            uint64_t v247 = v175;
            __dsta = &v163[v188];
            uint64_t v251 = &v164[v188];
            uint64_t v189 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v239 = *(void *)(v189 - 8);
            uint64_t v241 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v241(v251, 1, v189))
            {
              uint64_t v190 = sub_10000F214(&qword_100524BD0);
              memcpy(__dsta, v251, *(void *)(*(void *)(v190 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v239 + 16))(__dsta, v251, v189);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v239 + 56))(__dsta, 0, 1, v189);
            }
            uint64_t v224 = v247[14];
            uint64_t v225 = &v163[v224];
            long long v226 = (uint64_t *)&v164[v224];
            unint64_t v227 = v226[1];
            if (v227 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v225 = *(_OWORD *)v226;
            }
            else
            {
              uint64_t v252 = *v226;
              sub_100038528(*v226, v227);
              *(void *)uint64_t v225 = v252;
              *((void *)v225 + 1) = v227;
            }
            uint64_t v228 = v247[15];
            uint64_t v229 = &v163[v228];
            long long v230 = &v164[v228];
            if (*(void *)v230)
            {
              *(void *)uint64_t v229 = *(void *)v230;
              uint64_t v231 = *((void *)v230 + 2);
              *((void *)v229 + 1) = *((void *)v230 + 1);
              *((void *)v229 + 2) = v231;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v232 = *(_OWORD *)v230;
              *((void *)v229 + 2) = *((void *)v230 + 2);
              *(_OWORD *)uint64_t v229 = v232;
            }
            uint64_t v90 = v245;
            break;
          case 2u:
            ((void (*)(char *, char *, uint64_t))v250)(v163, v164, v246);
            long long v191 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v163[v191[5]] = *(_DWORD *)&v164[v191[5]];
            uint64_t v192 = v191[6];
            v193 = &v163[v192];
            long long v194 = &v164[v192];
            long long v196 = *((_OWORD *)v194 + 2);
            long long v195 = *((_OWORD *)v194 + 3);
            long long v197 = *((_OWORD *)v194 + 1);
            *(_OWORD *)v193 = *(_OWORD *)v194;
            *((_OWORD *)v193 + 1) = v197;
            *((_OWORD *)v193 + 2) = v196;
            *((_OWORD *)v193 + 3) = v195;
            uint64_t v198 = v191[7];
            uint64_t v199 = &v163[v198];
            uint64_t v200 = &v164[v198];
            *(void *)uint64_t v199 = *(void *)v200;
            *((void *)v199 + 1) = *((void *)v200 + 1);
            *(void *)&v163[v191[8]] = *(void *)&v164[v191[8]];
            *(void *)&v163[v191[9]] = *(void *)&v164[v191[9]];
            *(void *)&v163[v191[10]] = *(void *)&v164[v191[10]];
            *(void *)&v163[v191[11]] = *(void *)&v164[v191[11]];
            *(void *)&v163[v191[12]] = *(void *)&v164[v191[12]];
            uint64_t v201 = v191[13];
            long long v202 = *(void **)&v164[v201];
            *(void *)&v163[v201] = v202;
            v163[v191[14]] = v164[v191[14]];
            swift_bridgeObjectRetain();
            uint64_t v90 = v245;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v203 = v202;
            break;
          case 3u:
          case 4u:
            ((void (*)(char *, char *, uint64_t))v250)(v163, v164, v246);
            uint64_t v204 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v163[v204[5]] = *(_DWORD *)&v164[v204[5]];
            uint64_t v205 = v204[6];
            long long v206 = &v163[v205];
            uint64_t v207 = &v164[v205];
            long long v209 = *((_OWORD *)v207 + 2);
            long long v208 = *((_OWORD *)v207 + 3);
            long long v210 = *((_OWORD *)v207 + 1);
            *(_OWORD *)long long v206 = *(_OWORD *)v207;
            *((_OWORD *)v206 + 1) = v210;
            *((_OWORD *)v206 + 2) = v209;
            *((_OWORD *)v206 + 3) = v208;
            uint64_t v211 = v204[7];
            uint64_t v212 = &v163[v211];
            uint64_t v213 = &v164[v211];
            *(void *)uint64_t v212 = *(void *)v213;
            *((void *)v212 + 1) = *((void *)v213 + 1);
            *(void *)&v163[v204[8]] = *(void *)&v164[v204[8]];
            *(void *)&v163[v204[9]] = *(void *)&v164[v204[9]];
            *(void *)&v163[v204[10]] = *(void *)&v164[v204[10]];
            swift_bridgeObjectRetain();
            uint64_t v90 = v245;
            swift_retain();
            break;
          case 5u:
            ((void (*)(char *, char *, uint64_t))v250)(v163, v164, v246);
            id v214 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v163[v214[5]] = *(_DWORD *)&v164[v214[5]];
            uint64_t v215 = v214[6];
            long long v216 = &v163[v215];
            uint64_t v217 = &v164[v215];
            long long v219 = *((_OWORD *)v217 + 2);
            long long v218 = *((_OWORD *)v217 + 3);
            long long v220 = *((_OWORD *)v217 + 1);
            *(_OWORD *)long long v216 = *(_OWORD *)v217;
            *((_OWORD *)v216 + 1) = v220;
            *((_OWORD *)v216 + 2) = v219;
            *((_OWORD *)v216 + 3) = v218;
            uint64_t v221 = v214[7];
            uint64_t v222 = &v163[v221];
            uint64_t v223 = &v164[v221];
            *(void *)uint64_t v222 = *(void *)v223;
            *((void *)v222 + 1) = *((void *)v223 + 1);
            *(void *)&v163[v214[8]] = *(void *)&v164[v214[8]];
            *(void *)&v163[v214[9]] = *(void *)&v164[v214[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            ((void (*)(char *, char *, uint64_t))v250)(v163, v164, v246);
            uint64_t v165 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v163[v165[5]] = *(_DWORD *)&v164[v165[5]];
            uint64_t v166 = v165[6];
            uint64_t v167 = &v163[v166];
            uint64_t v168 = &v164[v166];
            long long v170 = *((_OWORD *)v168 + 2);
            long long v169 = *((_OWORD *)v168 + 3);
            long long v171 = *((_OWORD *)v168 + 1);
            *(_OWORD *)uint64_t v167 = *(_OWORD *)v168;
            *((_OWORD *)v167 + 1) = v171;
            *((_OWORD *)v167 + 2) = v170;
            *((_OWORD *)v167 + 3) = v169;
            uint64_t v172 = v165[7];
            uint64_t v173 = &v163[v172];
            uint64_t v174 = &v164[v172];
            *(void *)uint64_t v173 = *(void *)v174;
            *((void *)v173 + 1) = *((void *)v174 + 1);
            *(void *)&v163[v165[8]] = *(void *)&v164[v165[8]];
            *(void *)&v163[v165[9]] = *(void *)&v164[v165[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        *((unsigned char *)v84 + v90[7]) = *((unsigned char *)v85 + v90[7]);
        *(uint64_t *)((char *)v84 + v90[8]) = *(uint64_t *)((char *)v85 + v90[8]);
        *(_DWORD *)((char *)v84 + v90[9]) = *(_DWORD *)((char *)v85 + v90[9]);
        goto LABEL_53;
      case 0:
        uint64_t v88 = *v85;
        unint64_t v89 = v85[1];
        sub_100038528(v88, v89);
        *uint64_t v84 = v88;
        v84[1] = v89;
LABEL_53:
        swift_storeEnumTagMultiPayload();
        goto LABEL_54;
    }
    memcpy(v84, v85, *(void *)(*(void *)(v86 - 8) + 64));
  }
LABEL_54:
  uint64_t v233 = a3[6];
  uint64_t v234 = (void *)(a1 + v233);
  uint64_t v235 = (void *)(a2 + v233);
  *uint64_t v234 = *v235;
  v234[1] = v235[1];
  v234[2] = v235[2];
  v234[3] = v235[3];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001DFA84(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      uint64_t v14 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v14[5]) = *(_DWORD *)(a2 + v14[5]);
      uint64_t v15 = v14[6];
      uint64_t v16 = (_OWORD *)(a1 + v15);
      uint64_t v17 = (_OWORD *)(a2 + v15);
      long long v18 = v17[3];
      v16[2] = v17[2];
      uint64_t v16[3] = v18;
      long long v19 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v19;
      *(void *)(a1 + v14[7]) = *(void *)(a2 + v14[7]);
      *(void *)(a1 + v14[8]) = *(void *)(a2 + v14[8]);
      *(void *)(a1 + v14[9]) = *(void *)(a2 + v14[9]);
      *(unsigned char *)(a1 + v14[10]) = *(unsigned char *)(a2 + v14[10]);
      *(_OWORD *)(a1 + v14[11]) = *(_OWORD *)(a2 + v14[11]);
      *(_OWORD *)(a1 + v14[12]) = *(_OWORD *)(a2 + v14[12]);
      uint64_t v20 = v14[13];
      long long v21 = (void *)(a1 + v20);
      long long v22 = (const void *)(a2 + v20);
      uint64_t v23 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = sub_10000F214(&qword_100524BD0);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(_OWORD *)(a1 + v14[14]) = *(_OWORD *)(a2 + v14[14]);
      uint64_t v47 = v14[15];
      uint64_t v48 = a1 + v47;
      uint64_t v49 = a2 + v47;
      *(void *)(v48 + 16) = *(void *)(v49 + 16);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      break;
    case 2u:
      uint64_t v26 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
      uint64_t v27 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v27[5]) = *(_DWORD *)(a2 + v27[5]);
      uint64_t v28 = v27[6];
      uint64_t v29 = (_OWORD *)(a1 + v28);
      uint64_t v30 = (_OWORD *)(a2 + v28);
      long long v31 = v30[3];
      void v29[2] = v30[2];
      v29[3] = v31;
      long long v32 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v32;
      *(_OWORD *)(a1 + v27[7]) = *(_OWORD *)(a2 + v27[7]);
      *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
      *(void *)(a1 + v27[9]) = *(void *)(a2 + v27[9]);
      *(void *)(a1 + v27[10]) = *(void *)(a2 + v27[10]);
      *(void *)(a1 + v27[11]) = *(void *)(a2 + v27[11]);
      *(void *)(a1 + v27[12]) = *(void *)(a2 + v27[12]);
      *(void *)(a1 + v27[13]) = *(void *)(a2 + v27[13]);
      *(unsigned char *)(a1 + v27[14]) = *(unsigned char *)(a2 + v27[14]);
      break;
    case 3u:
    case 4u:
      uint64_t v33 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
      uint64_t v34 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v34[5]) = *(_DWORD *)(a2 + v34[5]);
      uint64_t v35 = v34[6];
      uint64_t v36 = (_OWORD *)(a1 + v35);
      uint64_t v37 = (_OWORD *)(a2 + v35);
      long long v38 = v37[3];
      v36[2] = v37[2];
      v36[3] = v38;
      long long v39 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v39;
      *(_OWORD *)(a1 + v34[7]) = *(_OWORD *)(a2 + v34[7]);
      *(void *)(a1 + v34[8]) = *(void *)(a2 + v34[8]);
      *(void *)(a1 + v34[9]) = *(void *)(a2 + v34[9]);
      *(void *)(a1 + v34[10]) = *(void *)(a2 + v34[10]);
      break;
    case 5u:
      uint64_t v40 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
      uint64_t v41 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v41[5]) = *(_DWORD *)(a2 + v41[5]);
      uint64_t v42 = v41[6];
      long long v43 = (_OWORD *)(a1 + v42);
      long long v44 = (_OWORD *)(a2 + v42);
      long long v45 = v44[3];
      v43[2] = v44[2];
      v43[3] = v45;
      long long v46 = v44[1];
      *long long v43 = *v44;
      v43[1] = v46;
      *(_OWORD *)(a1 + v41[7]) = *(_OWORD *)(a2 + v41[7]);
      *(void *)(a1 + v41[8]) = *(void *)(a2 + v41[8]);
      *(void *)(a1 + v41[9]) = *(void *)(a2 + v41[9]);
      break;
    default:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
      uint64_t v8 = v7[6];
      uint64_t v9 = (_OWORD *)(a1 + v8);
      uint64_t v10 = (_OWORD *)(a2 + v8);
      long long v11 = v10[3];
      void v9[2] = v10[2];
      v9[3] = v11;
      long long v12 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v12;
      *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v50 = a3[5];
  uint64_t v51 = (unsigned char *)(a1 + v50);
  uint64_t v52 = (unsigned char *)(a2 + v50);
  uint64_t v53 = type metadata accessor for DetectionRequest.Originator(0);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v54 = type metadata accessor for UUID();
    __dst = *(void **)(*(void *)(v54 - 8) + 32);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))__dst)(v51, v52, v54);
    long long v148 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v55 = v148[5];
    long long v56 = &v51[v55];
    long long v57 = &v52[v55];
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v144 = a3;
        ((void (*)(char *, char *, uint64_t))__dst)(v56, v57, v54);
        uint64_t v64 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v56[v64[5]] = *(_DWORD *)&v57[v64[5]];
        uint64_t v65 = v64[6];
        uint64_t v66 = &v56[v65];
        long long v67 = &v57[v65];
        long long v68 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v68;
        long long v69 = *((_OWORD *)v67 + 1);
        *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v69;
        *(void *)&v56[v64[7]] = *(void *)&v57[v64[7]];
        *(void *)&v56[v64[8]] = *(void *)&v57[v64[8]];
        *(void *)&v56[v64[9]] = *(void *)&v57[v64[9]];
        v56[v64[10]] = v57[v64[10]];
        *(_OWORD *)&v56[v64[11]] = *(_OWORD *)&v57[v64[11]];
        *(_OWORD *)&v56[v64[12]] = *(_OWORD *)&v57[v64[12]];
        uint64_t v70 = v64[13];
        long long v143 = &v56[v70];
        long long v71 = &v57[v70];
        uint64_t v72 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v142 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v71, 1, v72))
        {
          uint64_t v73 = sub_10000F214(&qword_100524BD0);
          memcpy(v143, v71, *(void *)(*(void *)(v73 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v143, v71, v72);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v143, 0, 1, v72);
        }
        *(_OWORD *)&v56[v64[14]] = *(_OWORD *)&v57[v64[14]];
        uint64_t v136 = v64[15];
        long long v137 = &v56[v136];
        long long v138 = &v57[v136];
        *((void *)v137 + 2) = *((void *)v138 + 2);
        *(_OWORD *)long long v137 = *(_OWORD *)v138;
        swift_storeEnumTagMultiPayload();
        a3 = v144;
        goto LABEL_20;
      case 2u:
        ((void (*)(char *, char *, uint64_t))__dst)(v56, v57, v54);
        uint64_t v74 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v56[v74[5]] = *(_DWORD *)&v57[v74[5]];
        uint64_t v75 = v74[6];
        unint64_t v76 = &v56[v75];
        uint64_t v77 = &v57[v75];
        long long v78 = *((_OWORD *)v77 + 3);
        *((_OWORD *)v76 + 2) = *((_OWORD *)v77 + 2);
        *((_OWORD *)v76 + 3) = v78;
        long long v79 = *((_OWORD *)v77 + 1);
        *(_OWORD *)unint64_t v76 = *(_OWORD *)v77;
        *((_OWORD *)v76 + 1) = v79;
        *(_OWORD *)&v56[v74[7]] = *(_OWORD *)&v57[v74[7]];
        *(void *)&v56[v74[8]] = *(void *)&v57[v74[8]];
        *(void *)&v56[v74[9]] = *(void *)&v57[v74[9]];
        *(void *)&v56[v74[10]] = *(void *)&v57[v74[10]];
        *(void *)&v56[v74[11]] = *(void *)&v57[v74[11]];
        *(void *)&v56[v74[12]] = *(void *)&v57[v74[12]];
        *(void *)&v56[v74[13]] = *(void *)&v57[v74[13]];
        v56[v74[14]] = v57[v74[14]];
        goto LABEL_19;
      case 3u:
      case 4u:
        ((void (*)(char *, char *, uint64_t))__dst)(v56, v57, v54);
        uint64_t v80 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v56[v80[5]] = *(_DWORD *)&v57[v80[5]];
        uint64_t v81 = v80[6];
        long long v82 = &v56[v81];
        uint64_t v83 = &v57[v81];
        long long v84 = *((_OWORD *)v83 + 3);
        *((_OWORD *)v82 + 2) = *((_OWORD *)v83 + 2);
        *((_OWORD *)v82 + 3) = v84;
        long long v85 = *((_OWORD *)v83 + 1);
        *(_OWORD *)long long v82 = *(_OWORD *)v83;
        *((_OWORD *)v82 + 1) = v85;
        *(_OWORD *)&v56[v80[7]] = *(_OWORD *)&v57[v80[7]];
        *(void *)&v56[v80[8]] = *(void *)&v57[v80[8]];
        *(void *)&v56[v80[9]] = *(void *)&v57[v80[9]];
        *(void *)&v56[v80[10]] = *(void *)&v57[v80[10]];
        goto LABEL_19;
      case 5u:
        ((void (*)(char *, char *, uint64_t))__dst)(v56, v57, v54);
        uint64_t v86 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v56[v86[5]] = *(_DWORD *)&v57[v86[5]];
        uint64_t v87 = v86[6];
        uint64_t v88 = &v56[v87];
        unint64_t v89 = &v57[v87];
        long long v90 = *((_OWORD *)v89 + 3);
        *((_OWORD *)v88 + 2) = *((_OWORD *)v89 + 2);
        *((_OWORD *)v88 + 3) = v90;
        long long v91 = *((_OWORD *)v89 + 1);
        *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
        *((_OWORD *)v88 + 1) = v91;
        *(_OWORD *)&v56[v86[7]] = *(_OWORD *)&v57[v86[7]];
        *(void *)&v56[v86[8]] = *(void *)&v57[v86[8]];
        *(void *)&v56[v86[9]] = *(void *)&v57[v86[9]];
        goto LABEL_19;
      default:
        ((void (*)(char *, char *, uint64_t))__dst)(v56, v57, v54);
        long long v58 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v56[v58[5]] = *(_DWORD *)&v57[v58[5]];
        uint64_t v59 = v58[6];
        long long v60 = &v56[v59];
        uint64_t v61 = &v57[v59];
        long long v62 = *((_OWORD *)v61 + 3);
        *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
        *((_OWORD *)v60 + 3) = v62;
        long long v63 = *((_OWORD *)v61 + 1);
        *(_OWORD *)long long v60 = *(_OWORD *)v61;
        *((_OWORD *)v60 + 1) = v63;
        *(_OWORD *)&v56[v58[7]] = *(_OWORD *)&v57[v58[7]];
        *(void *)&v56[v58[8]] = *(void *)&v57[v58[8]];
        *(void *)&v56[v58[9]] = *(void *)&v57[v58[9]];
LABEL_19:
        swift_storeEnumTagMultiPayload();
LABEL_20:
        uint64_t v92 = v148[6];
        uint64_t v93 = &v51[v92];
        unint64_t v94 = &v52[v92];
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            long long v145 = a3;
            ((void (*)(char *, char *, uint64_t))__dst)(v93, v94, v54);
            uint64_t v101 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v93[v101[5]] = *(_DWORD *)&v94[v101[5]];
            uint64_t v102 = v101[6];
            long long v103 = &v93[v102];
            long long v104 = &v94[v102];
            long long v105 = *((_OWORD *)v104 + 3);
            *((_OWORD *)v103 + 2) = *((_OWORD *)v104 + 2);
            *((_OWORD *)v103 + 3) = v105;
            long long v106 = *((_OWORD *)v104 + 1);
            *(_OWORD *)long long v103 = *(_OWORD *)v104;
            *((_OWORD *)v103 + 1) = v106;
            *(void *)&v93[v101[7]] = *(void *)&v94[v101[7]];
            *(void *)&v93[v101[8]] = *(void *)&v94[v101[8]];
            *(void *)&v93[v101[9]] = *(void *)&v94[v101[9]];
            v93[v101[10]] = v94[v101[10]];
            *(_OWORD *)&v93[v101[11]] = *(_OWORD *)&v94[v101[11]];
            *(_OWORD *)&v93[v101[12]] = *(_OWORD *)&v94[v101[12]];
            uint64_t v107 = v101[13];
            __dsta = &v93[v107];
            long long v108 = &v94[v107];
            uint64_t v109 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v110 = *(void *)(v109 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
            {
              uint64_t v111 = sub_10000F214(&qword_100524BD0);
              memcpy(__dsta, v108, *(void *)(*(void *)(v111 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v110 + 32))(__dsta, v108, v109);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(__dsta, 0, 1, v109);
            }
            *(_OWORD *)&v93[v101[14]] = *(_OWORD *)&v94[v101[14]];
            uint64_t v139 = v101[15];
            uint64_t v140 = &v93[v139];
            long long v141 = &v94[v139];
            *((void *)v140 + 2) = *((void *)v141 + 2);
            *(_OWORD *)uint64_t v140 = *(_OWORD *)v141;
            swift_storeEnumTagMultiPayload();
            a3 = v145;
            goto LABEL_28;
          case 2u:
            ((void (*)(char *, char *, uint64_t))__dst)(v93, v94, v54);
            uint64_t v112 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v93[v112[5]] = *(_DWORD *)&v94[v112[5]];
            uint64_t v113 = v112[6];
            uint64_t v114 = &v93[v113];
            long long v115 = &v94[v113];
            long long v116 = *((_OWORD *)v115 + 3);
            *((_OWORD *)v114 + 2) = *((_OWORD *)v115 + 2);
            *((_OWORD *)v114 + 3) = v116;
            long long v117 = *((_OWORD *)v115 + 1);
            *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
            *((_OWORD *)v114 + 1) = v117;
            *(_OWORD *)&v93[v112[7]] = *(_OWORD *)&v94[v112[7]];
            *(void *)&v93[v112[8]] = *(void *)&v94[v112[8]];
            *(void *)&v93[v112[9]] = *(void *)&v94[v112[9]];
            *(void *)&v93[v112[10]] = *(void *)&v94[v112[10]];
            *(void *)&v93[v112[11]] = *(void *)&v94[v112[11]];
            *(void *)&v93[v112[12]] = *(void *)&v94[v112[12]];
            *(void *)&v93[v112[13]] = *(void *)&v94[v112[13]];
            v93[v112[14]] = v94[v112[14]];
            goto LABEL_27;
          case 3u:
          case 4u:
            ((void (*)(char *, char *, uint64_t))__dst)(v93, v94, v54);
            uint64_t v118 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v93[v118[5]] = *(_DWORD *)&v94[v118[5]];
            uint64_t v119 = v118[6];
            uint64_t v120 = &v93[v119];
            uint64_t v121 = &v94[v119];
            long long v122 = *((_OWORD *)v121 + 3);
            *((_OWORD *)v120 + 2) = *((_OWORD *)v121 + 2);
            *((_OWORD *)v120 + 3) = v122;
            long long v123 = *((_OWORD *)v121 + 1);
            *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
            *((_OWORD *)v120 + 1) = v123;
            *(_OWORD *)&v93[v118[7]] = *(_OWORD *)&v94[v118[7]];
            *(void *)&v93[v118[8]] = *(void *)&v94[v118[8]];
            *(void *)&v93[v118[9]] = *(void *)&v94[v118[9]];
            *(void *)&v93[v118[10]] = *(void *)&v94[v118[10]];
            goto LABEL_27;
          case 5u:
            ((void (*)(char *, char *, uint64_t))__dst)(v93, v94, v54);
            long long v124 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v93[v124[5]] = *(_DWORD *)&v94[v124[5]];
            uint64_t v125 = v124[6];
            long long v126 = &v93[v125];
            uint64_t v127 = &v94[v125];
            long long v128 = *((_OWORD *)v127 + 3);
            *((_OWORD *)v126 + 2) = *((_OWORD *)v127 + 2);
            *((_OWORD *)v126 + 3) = v128;
            long long v129 = *((_OWORD *)v127 + 1);
            *(_OWORD *)long long v126 = *(_OWORD *)v127;
            *((_OWORD *)v126 + 1) = v129;
            *(_OWORD *)&v93[v124[7]] = *(_OWORD *)&v94[v124[7]];
            *(void *)&v93[v124[8]] = *(void *)&v94[v124[8]];
            *(void *)&v93[v124[9]] = *(void *)&v94[v124[9]];
            goto LABEL_27;
          default:
            ((void (*)(char *, char *, uint64_t))__dst)(v93, v94, v54);
            uint64_t v95 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v93[v95[5]] = *(_DWORD *)&v94[v95[5]];
            uint64_t v96 = v95[6];
            long long v97 = &v93[v96];
            long long v98 = &v94[v96];
            long long v99 = *((_OWORD *)v98 + 3);
            *((_OWORD *)v97 + 2) = *((_OWORD *)v98 + 2);
            *((_OWORD *)v97 + 3) = v99;
            long long v100 = *((_OWORD *)v98 + 1);
            *(_OWORD *)long long v97 = *(_OWORD *)v98;
            *((_OWORD *)v97 + 1) = v100;
            *(_OWORD *)&v93[v95[7]] = *(_OWORD *)&v94[v95[7]];
            *(void *)&v93[v95[8]] = *(void *)&v94[v95[8]];
            *(void *)&v93[v95[9]] = *(void *)&v94[v95[9]];
LABEL_27:
            swift_storeEnumTagMultiPayload();
LABEL_28:
            v51[v148[7]] = v52[v148[7]];
            *(void *)&v51[v148[8]] = *(void *)&v52[v148[8]];
            *(_DWORD *)&v51[v148[9]] = *(_DWORD *)&v52[v148[9]];
            swift_storeEnumTagMultiPayload();
            break;
        }
        break;
    }
  }
  else
  {
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  uint64_t v130 = a3[6];
  uint64_t v131 = a3[7];
  id v132 = (_OWORD *)(a1 + v130);
  uint64_t v133 = (_OWORD *)(a2 + v130);
  long long v134 = v133[1];
  *id v132 = *v133;
  v132[1] = v134;
  *(void *)(a1 + v131) = *(void *)(a2 + v131);
  return a1;
}

uint64_t sub_1001E0B34(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1001D430C(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v13 = a3;
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        uint64_t v15 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v15[5]) = *(_DWORD *)(a2 + v15[5]);
        uint64_t v16 = v15[6];
        uint64_t v17 = (_OWORD *)(a1 + v16);
        long long v18 = (_OWORD *)(a2 + v16);
        long long v19 = v18[3];
        v17[2] = v18[2];
        v17[3] = v19;
        long long v20 = v18[1];
        *uint64_t v17 = *v18;
        v17[1] = v20;
        *(void *)(a1 + v15[7]) = *(void *)(a2 + v15[7]);
        *(void *)(a1 + v15[8]) = *(void *)(a2 + v15[8]);
        *(void *)(a1 + v15[9]) = *(void *)(a2 + v15[9]);
        *(unsigned char *)(a1 + v15[10]) = *(unsigned char *)(a2 + v15[10]);
        *(_OWORD *)(a1 + v15[11]) = *(_OWORD *)(a2 + v15[11]);
        *(_OWORD *)(a1 + v15[12]) = *(_OWORD *)(a2 + v15[12]);
        uint64_t v21 = v15[13];
        long long v22 = (void *)(a1 + v21);
        uint64_t v23 = (const void *)(a2 + v21);
        uint64_t v24 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v25 = *(void *)(v24 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          uint64_t v26 = sub_10000F214(&qword_100524BD0);
          memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        a3 = v13;
        *(_OWORD *)(a1 + v15[14]) = *(_OWORD *)(a2 + v15[14]);
        uint64_t v48 = v15[15];
        uint64_t v49 = a1 + v48;
        uint64_t v50 = a2 + v48;
        *(void *)(v49 + 16) = *(void *)(v50 + 16);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
        break;
      case 2u:
        uint64_t v27 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
        uint64_t v28 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v28[5]) = *(_DWORD *)(a2 + v28[5]);
        uint64_t v29 = v28[6];
        uint64_t v30 = (_OWORD *)(a1 + v29);
        long long v31 = (_OWORD *)(a2 + v29);
        long long v32 = v31[3];
        v30[2] = v31[2];
        v30[3] = v32;
        long long v33 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v33;
        *(_OWORD *)(a1 + v28[7]) = *(_OWORD *)(a2 + v28[7]);
        *(void *)(a1 + v28[8]) = *(void *)(a2 + v28[8]);
        *(void *)(a1 + v28[9]) = *(void *)(a2 + v28[9]);
        *(void *)(a1 + v28[10]) = *(void *)(a2 + v28[10]);
        *(void *)(a1 + v28[11]) = *(void *)(a2 + v28[11]);
        *(void *)(a1 + v28[12]) = *(void *)(a2 + v28[12]);
        *(void *)(a1 + v28[13]) = *(void *)(a2 + v28[13]);
        *(unsigned char *)(a1 + v28[14]) = *(unsigned char *)(a2 + v28[14]);
        break;
      case 3u:
      case 4u:
        uint64_t v34 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32))(a1, a2, v34);
        uint64_t v35 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v35[5]) = *(_DWORD *)(a2 + v35[5]);
        uint64_t v36 = v35[6];
        uint64_t v37 = (_OWORD *)(a1 + v36);
        long long v38 = (_OWORD *)(a2 + v36);
        long long v39 = v38[3];
        void v37[2] = v38[2];
        v37[3] = v39;
        long long v40 = v38[1];
        *uint64_t v37 = *v38;
        v37[1] = v40;
        *(_OWORD *)(a1 + v35[7]) = *(_OWORD *)(a2 + v35[7]);
        *(void *)(a1 + v35[8]) = *(void *)(a2 + v35[8]);
        *(void *)(a1 + v35[9]) = *(void *)(a2 + v35[9]);
        *(void *)(a1 + v35[10]) = *(void *)(a2 + v35[10]);
        break;
      case 5u:
        uint64_t v41 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(a1, a2, v41);
        uint64_t v42 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v42[5]) = *(_DWORD *)(a2 + v42[5]);
        uint64_t v43 = v42[6];
        long long v44 = (_OWORD *)(a1 + v43);
        long long v45 = (_OWORD *)(a2 + v43);
        long long v46 = v45[3];
        v44[2] = v45[2];
        v44[3] = v46;
        long long v47 = v45[1];
        *long long v44 = *v45;
        v44[1] = v47;
        *(_OWORD *)(a1 + v42[7]) = *(_OWORD *)(a2 + v42[7]);
        *(void *)(a1 + v42[8]) = *(void *)(a2 + v42[8]);
        *(void *)(a1 + v42[9]) = *(void *)(a2 + v42[9]);
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        uint64_t v10 = (_OWORD *)(a2 + v8);
        long long v11 = v10[3];
        void v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v12;
        *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v51 = a3[5];
    uint64_t v52 = (unsigned char *)(a1 + v51);
    uint64_t v53 = (unsigned char *)(a2 + v51);
    sub_1001D430C(a1 + v51, type metadata accessor for DetectionRequest.Originator);
    uint64_t v54 = type metadata accessor for DetectionRequest.Originator(0);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v55 = type metadata accessor for UUID();
      __dst = *(void **)(*(void *)(v55 - 8) + 32);
      ((void (*)(unsigned char *, unsigned char *, uint64_t))__dst)(v52, v53, v55);
      long long v149 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v56 = v149[5];
      long long v57 = &v52[v56];
      long long v58 = &v53[v56];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          long long v145 = a3;
          ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
          uint64_t v65 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v57[v65[5]] = *(_DWORD *)&v58[v65[5]];
          uint64_t v66 = v65[6];
          long long v67 = &v57[v66];
          long long v68 = &v58[v66];
          long long v69 = *((_OWORD *)v68 + 3);
          *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
          *((_OWORD *)v67 + 3) = v69;
          long long v70 = *((_OWORD *)v68 + 1);
          *(_OWORD *)long long v67 = *(_OWORD *)v68;
          *((_OWORD *)v67 + 1) = v70;
          *(void *)&v57[v65[7]] = *(void *)&v58[v65[7]];
          *(void *)&v57[v65[8]] = *(void *)&v58[v65[8]];
          *(void *)&v57[v65[9]] = *(void *)&v58[v65[9]];
          v57[v65[10]] = v58[v65[10]];
          *(_OWORD *)&v57[v65[11]] = *(_OWORD *)&v58[v65[11]];
          *(_OWORD *)&v57[v65[12]] = *(_OWORD *)&v58[v65[12]];
          uint64_t v71 = v65[13];
          uint64_t v144 = &v57[v71];
          uint64_t v72 = &v58[v71];
          uint64_t v73 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v143 = *(void *)(v73 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v72, 1, v73))
          {
            uint64_t v74 = sub_10000F214(&qword_100524BD0);
            memcpy(v144, v72, *(void *)(*(void *)(v74 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v144, v72, v73);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v144, 0, 1, v73);
          }
          *(_OWORD *)&v57[v65[14]] = *(_OWORD *)&v58[v65[14]];
          uint64_t v131 = v65[15];
          id v132 = &v57[v131];
          uint64_t v133 = &v58[v131];
          *((void *)v132 + 2) = *((void *)v133 + 2);
          *(_OWORD *)id v132 = *(_OWORD *)v133;
          swift_storeEnumTagMultiPayload();
          a3 = v145;
          goto LABEL_21;
        case 2u:
          ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
          uint64_t v75 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v57[v75[5]] = *(_DWORD *)&v58[v75[5]];
          uint64_t v76 = v75[6];
          uint64_t v77 = &v57[v76];
          long long v78 = &v58[v76];
          long long v79 = *((_OWORD *)v78 + 3);
          *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
          *((_OWORD *)v77 + 3) = v79;
          long long v80 = *((_OWORD *)v78 + 1);
          *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
          *((_OWORD *)v77 + 1) = v80;
          *(_OWORD *)&v57[v75[7]] = *(_OWORD *)&v58[v75[7]];
          *(void *)&v57[v75[8]] = *(void *)&v58[v75[8]];
          *(void *)&v57[v75[9]] = *(void *)&v58[v75[9]];
          *(void *)&v57[v75[10]] = *(void *)&v58[v75[10]];
          *(void *)&v57[v75[11]] = *(void *)&v58[v75[11]];
          *(void *)&v57[v75[12]] = *(void *)&v58[v75[12]];
          *(void *)&v57[v75[13]] = *(void *)&v58[v75[13]];
          v57[v75[14]] = v58[v75[14]];
          goto LABEL_20;
        case 3u:
        case 4u:
          ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
          uint64_t v81 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v57[v81[5]] = *(_DWORD *)&v58[v81[5]];
          uint64_t v82 = v81[6];
          uint64_t v83 = &v57[v82];
          long long v84 = &v58[v82];
          long long v85 = *((_OWORD *)v84 + 3);
          *((_OWORD *)v83 + 2) = *((_OWORD *)v84 + 2);
          *((_OWORD *)v83 + 3) = v85;
          long long v86 = *((_OWORD *)v84 + 1);
          *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
          *((_OWORD *)v83 + 1) = v86;
          *(_OWORD *)&v57[v81[7]] = *(_OWORD *)&v58[v81[7]];
          *(void *)&v57[v81[8]] = *(void *)&v58[v81[8]];
          *(void *)&v57[v81[9]] = *(void *)&v58[v81[9]];
          *(void *)&v57[v81[10]] = *(void *)&v58[v81[10]];
          goto LABEL_20;
        case 5u:
          ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
          uint64_t v87 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v57[v87[5]] = *(_DWORD *)&v58[v87[5]];
          uint64_t v88 = v87[6];
          unint64_t v89 = &v57[v88];
          long long v90 = &v58[v88];
          long long v91 = *((_OWORD *)v90 + 3);
          *((_OWORD *)v89 + 2) = *((_OWORD *)v90 + 2);
          *((_OWORD *)v89 + 3) = v91;
          long long v92 = *((_OWORD *)v90 + 1);
          *(_OWORD *)unint64_t v89 = *(_OWORD *)v90;
          *((_OWORD *)v89 + 1) = v92;
          *(_OWORD *)&v57[v87[7]] = *(_OWORD *)&v58[v87[7]];
          *(void *)&v57[v87[8]] = *(void *)&v58[v87[8]];
          *(void *)&v57[v87[9]] = *(void *)&v58[v87[9]];
          goto LABEL_20;
        default:
          ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
          uint64_t v59 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v57[v59[5]] = *(_DWORD *)&v58[v59[5]];
          uint64_t v60 = v59[6];
          uint64_t v61 = &v57[v60];
          long long v62 = &v58[v60];
          long long v63 = *((_OWORD *)v62 + 3);
          *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
          *((_OWORD *)v61 + 3) = v63;
          long long v64 = *((_OWORD *)v62 + 1);
          *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
          *((_OWORD *)v61 + 1) = v64;
          *(_OWORD *)&v57[v59[7]] = *(_OWORD *)&v58[v59[7]];
          *(void *)&v57[v59[8]] = *(void *)&v58[v59[8]];
          *(void *)&v57[v59[9]] = *(void *)&v58[v59[9]];
LABEL_20:
          swift_storeEnumTagMultiPayload();
LABEL_21:
          uint64_t v93 = v149[6];
          unint64_t v94 = &v52[v93];
          uint64_t v95 = &v53[v93];
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              long long v146 = a3;
              ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
              uint64_t v102 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)&v94[v102[5]] = *(_DWORD *)&v95[v102[5]];
              uint64_t v103 = v102[6];
              long long v104 = &v94[v103];
              long long v105 = &v95[v103];
              long long v106 = *((_OWORD *)v105 + 3);
              *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
              *((_OWORD *)v104 + 3) = v106;
              long long v107 = *((_OWORD *)v105 + 1);
              *(_OWORD *)long long v104 = *(_OWORD *)v105;
              *((_OWORD *)v104 + 1) = v107;
              *(void *)&v94[v102[7]] = *(void *)&v95[v102[7]];
              *(void *)&v94[v102[8]] = *(void *)&v95[v102[8]];
              *(void *)&v94[v102[9]] = *(void *)&v95[v102[9]];
              v94[v102[10]] = v95[v102[10]];
              *(_OWORD *)&v94[v102[11]] = *(_OWORD *)&v95[v102[11]];
              *(_OWORD *)&v94[v102[12]] = *(_OWORD *)&v95[v102[12]];
              uint64_t v108 = v102[13];
              __dsta = &v94[v108];
              uint64_t v109 = &v95[v108];
              uint64_t v110 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v111 = *(void *)(v110 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
              {
                uint64_t v112 = sub_10000F214(&qword_100524BD0);
                memcpy(__dsta, v109, *(void *)(*(void *)(v112 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v111 + 32))(__dsta, v109, v110);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(__dsta, 0, 1, v110);
              }
              a3 = v146;
              *(_OWORD *)&v94[v102[14]] = *(_OWORD *)&v95[v102[14]];
              uint64_t v134 = v102[15];
              uint64_t v135 = &v94[v134];
              uint64_t v136 = &v95[v134];
              *((void *)v135 + 2) = *((void *)v136 + 2);
              *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
              break;
            case 2u:
              ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
              uint64_t v113 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)&v94[v113[5]] = *(_DWORD *)&v95[v113[5]];
              uint64_t v114 = v113[6];
              long long v115 = &v94[v114];
              long long v116 = &v95[v114];
              long long v117 = *((_OWORD *)v116 + 3);
              *((_OWORD *)v115 + 2) = *((_OWORD *)v116 + 2);
              *((_OWORD *)v115 + 3) = v117;
              long long v118 = *((_OWORD *)v116 + 1);
              *(_OWORD *)long long v115 = *(_OWORD *)v116;
              *((_OWORD *)v115 + 1) = v118;
              *(_OWORD *)&v94[v113[7]] = *(_OWORD *)&v95[v113[7]];
              *(void *)&v94[v113[8]] = *(void *)&v95[v113[8]];
              *(void *)&v94[v113[9]] = *(void *)&v95[v113[9]];
              *(void *)&v94[v113[10]] = *(void *)&v95[v113[10]];
              *(void *)&v94[v113[11]] = *(void *)&v95[v113[11]];
              *(void *)&v94[v113[12]] = *(void *)&v95[v113[12]];
              *(void *)&v94[v113[13]] = *(void *)&v95[v113[13]];
              v94[v113[14]] = v95[v113[14]];
              break;
            case 3u:
            case 4u:
              ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
              uint64_t v119 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)&v94[v119[5]] = *(_DWORD *)&v95[v119[5]];
              uint64_t v120 = v119[6];
              uint64_t v121 = &v94[v120];
              long long v122 = &v95[v120];
              long long v123 = *((_OWORD *)v122 + 3);
              *((_OWORD *)v121 + 2) = *((_OWORD *)v122 + 2);
              *((_OWORD *)v121 + 3) = v123;
              long long v124 = *((_OWORD *)v122 + 1);
              *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
              *((_OWORD *)v121 + 1) = v124;
              *(_OWORD *)&v94[v119[7]] = *(_OWORD *)&v95[v119[7]];
              *(void *)&v94[v119[8]] = *(void *)&v95[v119[8]];
              *(void *)&v94[v119[9]] = *(void *)&v95[v119[9]];
              *(void *)&v94[v119[10]] = *(void *)&v95[v119[10]];
              break;
            case 5u:
              ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
              uint64_t v125 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)&v94[v125[5]] = *(_DWORD *)&v95[v125[5]];
              uint64_t v126 = v125[6];
              uint64_t v127 = &v94[v126];
              long long v128 = &v95[v126];
              long long v129 = *((_OWORD *)v128 + 3);
              *((_OWORD *)v127 + 2) = *((_OWORD *)v128 + 2);
              *((_OWORD *)v127 + 3) = v129;
              long long v130 = *((_OWORD *)v128 + 1);
              *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
              *((_OWORD *)v127 + 1) = v130;
              *(_OWORD *)&v94[v125[7]] = *(_OWORD *)&v95[v125[7]];
              *(void *)&v94[v125[8]] = *(void *)&v95[v125[8]];
              *(void *)&v94[v125[9]] = *(void *)&v95[v125[9]];
              break;
            default:
              ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
              uint64_t v96 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)&v94[v96[5]] = *(_DWORD *)&v95[v96[5]];
              uint64_t v97 = v96[6];
              long long v98 = &v94[v97];
              long long v99 = &v95[v97];
              long long v100 = *((_OWORD *)v99 + 3);
              *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
              *((_OWORD *)v98 + 3) = v100;
              long long v101 = *((_OWORD *)v99 + 1);
              *(_OWORD *)long long v98 = *(_OWORD *)v99;
              *((_OWORD *)v98 + 1) = v101;
              *(_OWORD *)&v94[v96[7]] = *(_OWORD *)&v95[v96[7]];
              *(void *)&v94[v96[8]] = *(void *)&v95[v96[8]];
              *(void *)&v94[v96[9]] = *(void *)&v95[v96[9]];
              break;
          }
          swift_storeEnumTagMultiPayload();
          v52[v149[7]] = v53[v149[7]];
          *(void *)&v52[v149[8]] = *(void *)&v53[v149[8]];
          *(_DWORD *)&v52[v149[9]] = *(_DWORD *)&v53[v149[9]];
          swift_storeEnumTagMultiPayload();
          break;
      }
    }
    else
    {
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
  }
  uint64_t v137 = a3[6];
  uint64_t v138 = a3[7];
  uint64_t v139 = (_OWORD *)(a1 + v137);
  uint64_t v140 = (_OWORD *)(a2 + v137);
  long long v141 = v140[1];
  *uint64_t v139 = *v140;
  v139[1] = v141;
  *(void *)(a1 + v138) = *(void *)(a2 + v138);
  return a1;
}

uint64_t sub_1001E1C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E1C3C);
}

uint64_t sub_1001E1C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CVDetection();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for DetectionRequest.Originator(0);
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1001E1D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E1D48);
}

uint64_t sub_1001E1D48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CVDetection();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for DetectionRequest.Originator(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_1001E1E4C()
{
  uint64_t result = type metadata accessor for CVDetection();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DetectionRequest.Originator(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001E1F30(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CVCoordinatorConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  int v4 = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v4;
  return a1;
}

uint64_t assignWithTake for CVCoordinatorConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CVCoordinatorConfiguration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CVCoordinatorConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVCoordinatorConfiguration()
{
  return &type metadata for CVCoordinatorConfiguration;
}

ValueMetadata *type metadata accessor for CVCoordinatorSchedulerMode()
{
  return &type metadata for CVCoordinatorSchedulerMode;
}

unint64_t sub_1001E20E8()
{
  unint64_t result = qword_100524DB0;
  if (!qword_100524DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524DB0);
  }
  return result;
}

uint64_t sub_1001E213C()
{
  return sub_1001E227C(&qword_100524DB8, (void (*)(uint64_t))type metadata accessor for DetectionRequest);
}

unint64_t sub_1001E2188()
{
  unint64_t result = qword_100524DC0;
  if (!qword_100524DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524DC0);
  }
  return result;
}

unint64_t sub_1001E21E0()
{
  unint64_t result = qword_100524DC8;
  if (!qword_100524DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524DC8);
  }
  return result;
}

uint64_t sub_1001E2234()
{
  return sub_1001E227C((unint64_t *)&unk_100524DD0, (void (*)(uint64_t))type metadata accessor for DetectionRequest.Originator);
}

uint64_t sub_1001E227C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001E22C4(char a1, float a2, double a3)
{
  uint64_t v139 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v120 = *((void *)v139 - 1);
  __chkstk_darwin(v139);
  uint64_t v133 = (uint64_t)v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v121 = (uint64_t)v118 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v118 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v118 - v14;
  uint64_t v16 = type metadata accessor for CVDetection();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v124 = (uint64_t)v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v128 = (uint64_t)v118 - v20;
  __chkstk_darwin(v21);
  uint64_t v127 = (char *)v118 - v22;
  uint64_t v23 = sub_10000F214(&qword_100524E90);
  __chkstk_darwin(v23 - 8);
  uint64_t v136 = (uint64_t)v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v138 = (char *)v118 - v26;
  uint64_t v27 = type metadata accessor for DispatchPredicate();
  uint64_t v28 = *(void *)(v27 - 8);
  double v29 = __chkstk_darwin(v27);
  long long v31 = (void *)((char *)v118 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v32 = (void *)v3[6];
  *long long v31 = v32;
  (*(void (**)(void *, void, uint64_t, double))(v28 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v27, v29);
  id v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v28 + 8))(v31, v27);
  if ((v32 & 1) == 0) {
    goto LABEL_80;
  }
  v118[1] = v16;
  uint64_t v129 = a1 & 1;
  uint64_t v34 = v3[16];
  uint64_t v35 = *(void *)(v34 + 64);
  uint64_t v126 = v34 + 64;
  uint64_t v36 = 1 << *(unsigned char *)(v34 + 32);
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  else {
    uint64_t v37 = -1;
  }
  unint64_t v38 = v37 & v35;
  long long v123 = v3 + 21;
  uint64_t v134 = v34;
  swift_bridgeObjectRetain();
  id v132 = v3 + 20;
  swift_beginAccess();
  int64_t v137 = 0;
  int64_t v131 = (unint64_t)(v36 + 63) >> 6;
  int64_t v119 = v131 - 1;
  __asm { FMOV            V0.2D, #1.0 }
  long long v135 = _Q0;
  uint64_t v44 = (uint64_t)v127;
  uint64_t v45 = (uint64_t)v138;
  uint64_t v122 = v17;
  while (1)
  {
    uint64_t v46 = v136;
    if (v38)
    {
      unint64_t v47 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v48 = v47 | (v137 << 6);
LABEL_12:
      uint64_t v49 = v134;
      sub_10020F0D8(*(void *)(v134 + 48) + *(void *)(v17 + 72) * v48, v136, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v50 = *(void *)(v49 + 56) + 24 * v48;
      uint64_t v51 = sub_10000F214(&qword_100524EA0);
      uint64_t v52 = v46 + *(int *)(v51 + 48);
      char v53 = *(unsigned char *)(v50 + 16);
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v50;
      *(unsigned char *)(v52 + 16) = v53;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v46, 0, 1, v51);
      goto LABEL_31;
    }
    int64_t v54 = v137 + 1;
    if (__OFADD__(v137, 1))
    {
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x1001E3108);
    }
    if (v54 < v131)
    {
      unint64_t v55 = *(void *)(v126 + 8 * v54);
      if (v55) {
        goto LABEL_16;
      }
      int64_t v56 = v137 + 2;
      ++v137;
      if (v54 + 1 < v131)
      {
        unint64_t v55 = *(void *)(v126 + 8 * v56);
        if (v55) {
          goto LABEL_19;
        }
        int64_t v137 = v54 + 1;
        if (v54 + 2 < v131)
        {
          unint64_t v55 = *(void *)(v126 + 8 * (v54 + 2));
          if (v55)
          {
            v54 += 2;
            goto LABEL_16;
          }
          int64_t v56 = v54 + 3;
          int64_t v137 = v54 + 2;
          if (v54 + 3 < v131)
          {
            unint64_t v55 = *(void *)(v126 + 8 * v56);
            if (v55)
            {
LABEL_19:
              int64_t v54 = v56;
LABEL_16:
              unint64_t v38 = (v55 - 1) & v55;
              unint64_t v48 = __clz(__rbit64(v55)) + (v54 << 6);
              int64_t v137 = v54;
              goto LABEL_12;
            }
            while (1)
            {
              int64_t v54 = v56 + 1;
              if (__OFADD__(v56, 1)) {
                goto LABEL_81;
              }
              if (v54 >= v131) {
                break;
              }
              unint64_t v55 = *(void *)(v126 + 8 * v54);
              ++v56;
              if (v55) {
                goto LABEL_16;
              }
            }
            int64_t v137 = v119;
          }
        }
      }
    }
    uint64_t v57 = sub_10000F214(&qword_100524EA0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v46, 1, 1, v57);
    unint64_t v38 = 0;
LABEL_31:
    sub_10000FC34(v46, v45, &qword_100524E90);
    uint64_t v58 = sub_10000F214(&qword_100524EA0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v45, 1, v58) == 1) {
      return swift_release();
    }
    uint64_t v59 = v45 + *(int *)(v58 + 48);
    uint64_t v61 = *(void *)v59;
    uint64_t v60 = *(void *)(v59 + 8);
    unsigned int v62 = *(unsigned __int8 *)(v59 + 16);
    sub_10020F140(v45, v44, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10020F0D8(v44, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CVDetection);
    long long v63 = v139;
    long long v64 = &v15[v139[5]];
    *(void *)long long v64 = v61;
    *((void *)v64 + 1) = v60;
    v64[16] = v62;
    type metadata accessor for DetectionRequest.Originator(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v65 = &v15[v63[6]];
    *(void *)uint64_t v65 = 0;
    *((void *)v65 + 1) = 0;
    *((_OWORD *)v65 + 1) = v135;
    *(double *)&v15[v63[7]] = a3;
    uint64_t v45 = (uint64_t)v138;
    switch(v62 >> 5)
    {
      case 1u:
      case 3u:
      case 4u:
        goto LABEL_9;
      case 2u:
        if ((v61 & 1) != v129) {
          goto LABEL_9;
        }
        uint64_t v70 = v124;
        sub_10020F0D8(v44, v124, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v71 = v132;
        swift_beginAccess();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        long long v141 = (void *)*v71;
        uint64_t v73 = v141;
        *uint64_t v71 = 0x8000000000000000;
        unint64_t v75 = sub_10032AF9C(v70);
        uint64_t v76 = v73[2];
        BOOL v77 = (v74 & 1) == 0;
        uint64_t v78 = v76 + v77;
        if (__OFADD__(v76, v77)) {
          goto LABEL_77;
        }
        char v79 = v74;
        if (v73[3] >= v78)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_1001F7058();
          }
        }
        else
        {
          sub_1001EF714(v78, isUniquelyReferenced_nonNull_native);
          unint64_t v80 = sub_10032AF9C(v70);
          if ((v79 & 1) != (v81 & 1)) {
            goto LABEL_82;
          }
          unint64_t v75 = v80;
        }
        uint64_t v44 = (uint64_t)v127;
        uint64_t v82 = v141;
        if (v79)
        {
          *(float *)(v141[7] + 4 * v75) = a2;
        }
        else
        {
          v141[(v75 >> 6) + 8] |= 1 << v75;
          sub_10020F0D8(v70, v82[6] + *(void *)(v17 + 72) * v75, (uint64_t (*)(void))type metadata accessor for CVDetection);
          *(float *)(v82[7] + 4 * v75) = a2;
          uint64_t v83 = v82[2];
          _VF = __OFADD__(v83, 1);
          uint64_t v84 = v83 + 1;
          if (_VF) {
            goto LABEL_78;
          }
          v82[2] = v84;
        }
        *id v132 = v82;
        swift_bridgeObjectRelease();
        sub_1001D430C(v70, (uint64_t (*)(void))type metadata accessor for CVDetection);
        swift_endAccess();
        goto LABEL_8;
      default:
        if ((v62 & 1) != v129) {
          goto LABEL_9;
        }
        uint64_t v66 = *v132;
        if (*(void *)(*v132 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v67 = sub_10032AF9C(v44);
          float v68 = 0.0;
          if (v69) {
            float v68 = *(float *)(*(void *)(v66 + 56) + 4 * v67);
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          float v68 = 0.0;
        }
        uint64_t v85 = v128;
        sub_10020F0D8(v44, v128, (uint64_t (*)(void))type metadata accessor for CVDetection);
        long long v86 = v132;
        swift_beginAccess();
        int v87 = swift_isUniquelyReferenced_nonNull_native();
        long long v141 = (void *)*v86;
        uint64_t v88 = v141;
        void *v86 = 0x8000000000000000;
        unint64_t v90 = sub_10032AF9C(v85);
        uint64_t v91 = v88[2];
        BOOL v92 = (v89 & 1) == 0;
        uint64_t v93 = v91 + v92;
        if (__OFADD__(v91, v92)) {
          goto LABEL_76;
        }
        char v94 = v89;
        if (v88[3] >= v93)
        {
          if ((v87 & 1) == 0) {
            sub_1001F7058();
          }
        }
        else
        {
          sub_1001EF714(v93, v87);
          unint64_t v95 = sub_10032AF9C(v128);
          if ((v94 & 1) != (v96 & 1)) {
            goto LABEL_82;
          }
          unint64_t v90 = v95;
        }
        uint64_t v44 = (uint64_t)v127;
        uint64_t v97 = v141;
        if (v94)
        {
          *(float *)(v141[7] + 4 * v90) = a2;
        }
        else
        {
          v141[(v90 >> 6) + 8] |= 1 << v90;
          sub_10020F0D8(v128, v97[6] + *(void *)(v17 + 72) * v90, (uint64_t (*)(void))type metadata accessor for CVDetection);
          *(float *)(v97[7] + 4 * v90) = a2;
          uint64_t v98 = v97[2];
          _VF = __OFADD__(v98, 1);
          uint64_t v99 = v98 + 1;
          if (_VF) {
            goto LABEL_79;
          }
          v97[2] = v99;
        }
        *id v132 = v97;
        swift_bridgeObjectRelease();
        sub_1001D430C(v128, (uint64_t (*)(void))type metadata accessor for CVDetection);
        swift_endAccess();
        uint64_t v45 = (uint64_t)v138;
        if (v68 < *(float *)&v61 && *(float *)&v61 <= a2)
        {
          sub_10020F0D8((uint64_t)v15, (uint64_t)v12, type metadata accessor for DetectionRequest);
          long long v100 = v123;
          swift_beginAccess();
          uint64_t v101 = *v100;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          sub_1003FFF94((uint64_t)v140);
          uint64_t v102 = v139;
          long long v130 = &v12[v139[5]];
          sub_1001C2DBC((uint64_t)v140);
          uint64_t v103 = (CGRect *)&v12[v102[6]];
          sub_10020B90C(v103->origin.x, v103->origin.y, v103->size.width, v103->size.height);
          uint64_t v104 = (uint64_t)v12;
          uint64_t v125 = v102[7];
          if ((*(void *)&v12[v125] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v105 = *(void *)&v12[v125];
          }
          else {
            Swift::UInt64 v105 = 0;
          }
          Hasher._combine(_:)(v105);
          Swift::Int v106 = Hasher._finalize()();
          uint64_t v107 = -1 << *(unsigned char *)(v101 + 32);
          unint64_t v108 = v106 & ~v107;
          if ((*(void *)(v101 + 56 + ((v108 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v108))
          {
            uint64_t v109 = ~v107;
            uint64_t v110 = *(void *)(v120 + 72);
            uint64_t v111 = v133;
            while (1)
            {
              sub_10020F0D8(*(void *)(v101 + 48) + v110 * v108, v111, type metadata accessor for DetectionRequest);
              if (sub_100402834(v111, v104))
              {
                char v112 = sub_10020BB18(v111 + v139[5], (uint64_t)v130);
                uint64_t v111 = v133;
                if (v112)
                {
                  BOOL v113 = CGRectEqualToRect(*(CGRect *)(v133 + v139[6]), *v103);
                  uint64_t v111 = v133;
                  if (v113 && *(double *)(v133 + v139[7]) == *(double *)(v104 + v125)) {
                    break;
                  }
                }
              }
              sub_1001D430C(v111, type metadata accessor for DetectionRequest);
              unint64_t v108 = (v108 + 1) & v109;
              if (((*(void *)(v101 + 56 + ((v108 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v108) & 1) == 0) {
                goto LABEL_72;
              }
            }
            sub_1001D430C(v133, type metadata accessor for DetectionRequest);
            swift_bridgeObjectRelease();
            uint64_t v12 = (char *)v104;
          }
          else
          {
LABEL_72:
            swift_bridgeObjectRelease();
            uint64_t v114 = v123;
            char v115 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v12 = (char *)v104;
            uint64_t v116 = v121;
            sub_10020F0D8(v104, v121, type metadata accessor for DetectionRequest);
            v140[0] = *v114;
            *uint64_t v114 = 0x8000000000000000;
            sub_1001FF90C(v116, v108, v115);
            *uint64_t v114 = v140[0];
            swift_bridgeObjectRelease();
          }
          sub_1001D430C((uint64_t)v12, type metadata accessor for DetectionRequest);
          swift_endAccess();
          uint64_t v17 = v122;
          uint64_t v44 = (uint64_t)v127;
LABEL_8:
          uint64_t v45 = (uint64_t)v138;
        }
LABEL_9:
        sub_1001D430C((uint64_t)v15, type metadata accessor for DetectionRequest);
        sub_1001D430C(v44, (uint64_t (*)(void))type metadata accessor for CVDetection);
        break;
    }
  }
}

uint64_t sub_1001E311C(uint64_t a1, float a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v4 + 48);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t, double))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  swift_beginAccess();
  uint64_t v15 = *(void *)(v4 + 152);
  if (!*(void *)(v15 + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_10032AF9C(a1);
  if (v17)
  {
    double v18 = *(double *)(*(void *)(v15 + 56) + 8 * v16);
    swift_bridgeObjectRelease();
    float v19 = a3 - v18;
    return (float)(0.95 / v19) < (float)(flt_10044B310[*(char *)(v4 + 120)] * a2);
  }
LABEL_7:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

unint64_t sub_1001E32D4@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v10 = *(void **)(v2 + 48);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t, double))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    uint64_t v12 = (uint64_t *)(v2 + 104);
    swift_beginAccess();
    uint64_t v13 = *(void *)(v2 + 104);
    if (*(void *)(v13 + 16) && (unint64_t result = sub_10032B2C8(a2), (v15 & 1) != 0))
    {
      uint64_t v16 = *(void *)(v13 + 56);
LABEL_39:
      uint64_t v37 = (uint64_t *)(v16 + 48 * result);
      uint64_t v38 = *v37;
      uint64_t v39 = v37[1];
      uint64_t v41 = v37[2];
      uint64_t v40 = v37[3];
      unint64_t v42 = v37[4];
      uint64_t v43 = *((unsigned int *)v37 + 10);
      BOOL v44 = *((unsigned char *)v37 + 44) == 0;
      uint64_t v45 = &_mh_execute_header;
      if (v44) {
        uint64_t v45 = 0;
      }
      unint64_t v46 = (unint64_t)v45 | v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t result = sub_1000A7588(v40, v42);
    }
    else
    {
      uint64_t v17 = v13 + 64;
      uint64_t v18 = 1 << *(unsigned char *)(v13 + 32);
      uint64_t v19 = -1;
      if (v18 < 64) {
        uint64_t v19 = ~(-1 << v18);
      }
      unint64_t v20 = v19 & *(void *)(v13 + 64);
      int64_t v21 = (unint64_t)(v18 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v22 = 0;
      uint64_t v23 = _swiftEmptyArrayStorage;
      if (!v20) {
        goto LABEL_11;
      }
LABEL_8:
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      for (unint64_t i = v24 | (v22 << 6); ; unint64_t i = __clz(__rbit64(v28)) + (v22 << 6))
      {
        double v26 = *(double *)(*(void *)(v13 + 48) + 8 * i);
        if (v26 < a2)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v48 = v23;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100040974(0, v23[2] + 1, 1);
            uint64_t v23 = v48;
          }
          unint64_t v32 = v23[2];
          unint64_t v31 = v23[3];
          if (v32 >= v31 >> 1)
          {
            sub_100040974(v31 > 1, v32 + 1, 1);
            uint64_t v23 = v48;
          }
          void v23[2] = v32 + 1;
          *(double *)&v23[v32 + 4] = v26;
          if (v20) {
            goto LABEL_8;
          }
        }
        else if (v20)
        {
          goto LABEL_8;
        }
LABEL_11:
        int64_t v27 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        if (v27 >= v21) {
          break;
        }
        unint64_t v28 = *(void *)(v17 + 8 * v27);
        ++v22;
        if (!v28)
        {
          int64_t v22 = v27 + 1;
          if (v27 + 1 >= v21) {
            break;
          }
          unint64_t v28 = *(void *)(v17 + 8 * v22);
          if (!v28)
          {
            int64_t v22 = v27 + 2;
            if (v27 + 2 >= v21) {
              break;
            }
            unint64_t v28 = *(void *)(v17 + 8 * v22);
            if (!v28)
            {
              int64_t v22 = v27 + 3;
              if (v27 + 3 >= v21) {
                break;
              }
              unint64_t v28 = *(void *)(v17 + 8 * v22);
              if (!v28)
              {
                int64_t v22 = v27 + 4;
                if (v27 + 4 >= v21) {
                  break;
                }
                unint64_t v28 = *(void *)(v17 + 8 * v22);
                if (!v28)
                {
                  int64_t v29 = v27 + 5;
                  if (v29 >= v21) {
                    break;
                  }
                  unint64_t v28 = *(void *)(v17 + 8 * v29);
                  if (!v28)
                  {
                    while (1)
                    {
                      int64_t v22 = v29 + 1;
                      if (__OFADD__(v29, 1)) {
                        goto LABEL_48;
                      }
                      if (v22 >= v21) {
                        goto LABEL_35;
                      }
                      unint64_t v28 = *(void *)(v17 + 8 * v22);
                      ++v29;
                      if (v28) {
                        goto LABEL_34;
                      }
                    }
                  }
                  int64_t v22 = v29;
                }
              }
            }
          }
        }
LABEL_34:
        unint64_t v20 = (v28 - 1) & v28;
      }
LABEL_35:
      swift_release();
      unint64_t v48 = v23;
      swift_retain();
      sub_1001EA618((uint64_t *)&v48);
      swift_release();
      uint64_t v33 = v48[2];
      if (v33)
      {
        double v34 = *(double *)&v48[v33 + 3];
        unint64_t result = swift_release();
        uint64_t v35 = *v12;
        if (*(void *)(*v12 + 16))
        {
          unint64_t result = sub_10032B2C8(v34);
          if (v36)
          {
            uint64_t v16 = *(void *)(v35 + 56);
            goto LABEL_39;
          }
        }
      }
      else
      {
        unint64_t result = swift_release();
      }
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v41 = 0;
      uint64_t v40 = 0;
      unint64_t v42 = 0;
      unint64_t v46 = 0;
    }
    *(void *)a1 = v38;
    *(void *)(a1 + 8) = v39;
    *(void *)(a1 + 16) = v41;
    *(void *)(a1 + 24) = v40;
    *(void *)(a1 + 32) = v42;
    *(_DWORD *)(a1 + 40) = v46;
    *(unsigned char *)(a1 + 44) = BYTE4(v46);
  }
  else
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    unint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001E36CC(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  void (*v52)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  uint64_t v83;
  char v84;
  void aBlock[2];
  uint64_t (*v86)(uint64_t);
  void *v87;
  uint64_t (*v88)();
  uint64_t v89;

  uint64_t v7 = v6;
  float v68 = a4;
  uint64_t v70 = a3;
  char v69 = a2;
  unint64_t v75 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v71 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v67 = v11;
  __chkstk_darwin(v12);
  id v14 = (char *)&v64 - v13;
  uint64_t v15 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v15 - 8);
  uint64_t v78 = (uint64_t)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v80 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(void *)(v80 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  double v20 = __chkstk_darwin(v19);
  int64_t v21 = *(void (**)(uint64_t, uint64_t, double))(a6 + 56);
  char v79 = (char *)&v64 - v22;
  BOOL v77 = a5;
  char v74 = a6;
  v21(a5, a6, v20);
  uint64_t v84 = 1;
  uint64_t v23 = *(void **)(v6 + 48);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = &v84;
  *(void *)(v24 + 24) = v6;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_1001E96A4;
  *(void *)(v25 + 24) = v24;
  uint64_t v73 = v24;
  uint64_t v88 = sub_100146854;
  char v89 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  long long v86 = sub_100109E30;
  int v87 = &unk_1004EFDC0;
  double v26 = _Block_copy(aBlock);
  int64_t v27 = v23;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v27, v26);

  _Block_release(v26);
  LOBYTE(v26) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v26)
  {
    __break(1u);
  }
  else
  {
    uint64_t v72 = a1;
    uint64_t v66 = v14;
    uint64_t v29 = type metadata accessor for TaskPriority();
    uint64_t v30 = v78;
    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56);
    v65(v78, 1, 1, v29);
    uint64_t v31 = v80;
    uint64_t v32 = v7;
    uint64_t v33 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v33, v79, AssociatedTypeWitness);
    uint64_t v34 = *(unsigned __int8 *)(v31 + 80);
    uint64_t v76 = AssociatedTypeWitness;
    uint64_t v35 = (v34 + 56) & ~v34;
    char v36 = (void *)swift_allocObject();
    v36[2] = 0;
    v36[3] = 0;
    uint64_t v37 = v77;
    uint64_t v38 = v74;
    unsigned char v36[4] = v77;
    v36[5] = v38;
    v36[6] = v32;
    uint64_t v39 = (char *)v36 + v35;
    uint64_t v40 = v76;
    uint64_t v41 = v33;
    uint64_t v42 = v32;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v39, v41, v76);
    swift_retain();
    sub_100064F7C(v30, (uint64_t)&unk_100524DE8, (uint64_t)v36);
    swift_release();
    if (v84)
    {
      uint64_t v43 = v79;
      uint64_t v44 = v80;
      uint64_t v45 = v75;
      unint64_t v46 = v71;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v71, v72, v37);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = v46;
        uint64_t v50 = swift_slowAlloc();
        uint64_t v83 = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 134218242;
        uint64_t v51 = v38;
        uint64_t v52 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v38 + 48);
        char v53 = v77;
        v52(aBlock, v77, v51);
        uint64_t v82 = v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v53);
        *(_WORD *)(v50 + 12) = 2080;
        swift_beginAccess();
        if (v84)
        {
          if (v84 == 1)
          {
            unsigned int v62 = 0xE600000000000000;
            long long v63 = 0x6465746C6148;
          }
          else
          {
            unsigned int v62 = 0xE800000000000000;
            long long v63 = 0x676E697472617453;
          }
        }
        else
        {
          unsigned int v62 = 0xE800000000000000;
          long long v63 = 0x656D69746C616552;
        }
        char v81 = sub_1003806B0(v63, v62, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "CVCoordinator ignoring frame %f in state %s", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v76);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v77);

        (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v40);
      }
    }
    else
    {
      v65(v78, 1, 1, v29);
      int64_t v54 = v75;
      unint64_t v55 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v66, v72, v37);
      int64_t v56 = (*(unsigned __int8 *)(v54 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      uint64_t v57 = (v67 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v58 = (char *)swift_allocObject();
      *((void *)v58 + 2) = 0;
      *((void *)v58 + 3) = 0;
      *((void *)v58 + 4) = v37;
      *((void *)v58 + 5) = v38;
      *((void *)v58 + 6) = v42;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(&v58[v56], v55, v37);
      uint64_t v59 = &v58[v57];
      uint64_t v60 = v69;
      uint64_t v61 = v70;
      *(void *)uint64_t v59 = v69;
      *((void *)v59 + 1) = v61;
      v59[16] = v68;
      swift_retain();
      sub_10009489C(v60, v61);
      sub_1000D0B80(v78, (uint64_t)&unk_100524DF8, (uint64_t)v58);
      swift_release();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v40);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1001E3EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  _OWORD v7[3] = a4;
  v7[4] = a5;
  _OWORD v7[2] = a1;
  return _swift_task_switch(sub_1001E3F08, 0, 0);
}

uint64_t sub_1001E3F08()
{
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 56) = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_1001E3FB8, Strong, 0);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_1001E3FB8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1003AD064((uint64_t)_swiftEmptyArrayStorage, v1, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  return _swift_task_switch(sub_1001E4094, 0, 0);
}

uint64_t sub_1001E4094()
{
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 56) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E40BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v14 = swift_task_alloc();
  *(void *)(v8 + 16) = v14;
  *(void *)uint64_t v14 = v8;
  *(void *)(v14 + 8) = sub_10000F878;
  *(void *)(v14 + 184) = v18;
  *(void *)(v14 + 192) = a4;
  *(unsigned char *)(v14 + 285) = a8;
  *(void *)(v14 + 168) = a7;
  *(void *)(v14 + 176) = v17;
  *(void *)(v14 + 152) = a5;
  *(void *)(v14 + 160) = a6;
  return _swift_task_switch(sub_1001E41D0, 0, 0);
}

uint64_t sub_1001E41A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 184) = a6;
  *(void *)(v7 + 192) = v6;
  *(unsigned char *)(v7 + 285) = a4;
  *(void *)(v7 + 168) = a3;
  *(void *)(v7 + 176) = a5;
  *(void *)(v7 + 152) = a1;
  *(void *)(v7 + 160) = a2;
  return _swift_task_switch(sub_1001E41D0, 0, 0);
}

uint64_t sub_1001E41D0()
{
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 200) = Strong;
  if (!Strong) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v2 = Strong;
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 176);
  char v6 = *(unsigned char *)(v0 + 285);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 208) = v7;
  *(void *)(v7 + 16) = _swiftEmptyArrayStorage;
  *(double *)(v0 + 216) = sub_10030CA28(v5, v4);
  uint64_t v8 = *(void **)(v3 + 48);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 224) = v9;
  *(unsigned char *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = v3;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_10020B690;
  *(void *)(v10 + 24) = v9;
  *(void *)(v0 + 48) = sub_10014C6EC;
  *(void *)(v0 + 56) = v10;
  *(void *)(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = sub_100109E30;
  *(void *)(v0 + 40) = &unk_1004EFEB0;
  uint64_t v11 = _Block_copy((const void *)(v0 + 16));
  uint64_t v12 = v8;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v11);

  _Block_release(v11);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t v13 = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = (uint64_t)sub_1001E4430;
    uint64_t v14 = v2;
    uint64_t v15 = 0;
  }
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_1001E4430()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 200) + OBJC_IVAR____TtC6Tamale12TrackManager_tracksInternal);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = v4;
    if (!v4) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v4 = swift_bridgeObjectRetain_n();
    if (!v3) {
      goto LABEL_11;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return _swift_task_switch(v4, v5, v6);
  }
  uint64_t v7 = 0;
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    ++v7;
    uint64_t v8 = sub_1000368B8();
    swift_release();
    sub_10019FF74((uint64_t)v8);
  }
  while (v3 != v7);
LABEL_11:
  swift_bridgeObjectRelease_n();
  *(void *)(v0 + 232) = _swiftEmptyArrayStorage;
  uint64_t v4 = (uint64_t)sub_1001E45B8;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1001E45B8()
{
  *(void *)(v0 + 136) = *(void *)(v0 + 232);
  *(void *)(v0 + 144) = &_swiftEmptySetSingleton;
  *(_DWORD *)(v0 + 280) = 0;
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 208) + 16;
  *(unsigned char *)(v0 + 284) = 1;
  uint64_t v4 = *(void **)(v2 + 48);
  uint64_t v5 = (void *)swift_allocObject();
  *(void *)(v0 + 240) = v5;
  v5[2] = v2;
  v5[3] = v1;
  v5[4] = v0 + 136;
  v5[5] = v3;
  v5[6] = v0 + 280;
  v5[7] = v0 + 144;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_10020B6E4;
  *(void *)(v6 + 24) = v5;
  *(void *)(v0 + 96) = sub_10014C6EC;
  *(void *)(v0 + 104) = v6;
  *(void *)(v0 + 64) = _NSConcreteStackBlock;
  *(void *)(v0 + 72) = 1107296256;
  *(void *)(v0 + 80) = sub_100109E30;
  *(void *)(v0 + 88) = &unk_1004EFF28;
  uint64_t v7 = _Block_copy((const void *)(v0 + 64));
  swift_retain();
  uint64_t v8 = v4;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v7);

  _Block_release(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  uint64_t v9 = swift_release();
  if (v7)
  {
    __break(1u);
    return _swift_task_switch(v9, v10, v11);
  }
  uint64_t v12 = *(void *)(v0 + 144);
  *(void *)(v0 + 248) = v12;
  if (*(void *)(v12 + 16))
  {
    uint64_t v13 = *(unsigned int *)(v0 + 280);
    unsigned __int8 v14 = *(unsigned char *)(v0 + 284);
    swift_bridgeObjectRetain();
    uint64_t v15 = swift_task_alloc();
    *(void *)(v0 + 256) = v15;
    *(void *)uint64_t v15 = v0;
    *(void *)(v15 + 8) = sub_1001E48E0;
    uint64_t v16 = *(void *)(v0 + 152);
    long long v17 = *(_OWORD *)(v0 + 176);
    *(void *)(v15 + 144) = *(void *)(v0 + 192);
    *(_OWORD *)(v15 + 128) = v17;
    *(void *)(v15 + 112) = v16;
    *(void *)(v15 + 120) = v13 | ((unint64_t)v14 << 32);
    *(void *)(v15 + 104) = v12;
    uint64_t v9 = (uint64_t)sub_1001E7380;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    return _swift_task_switch(v9, v10, v11);
  }
  sub_1001E7274(*(void *)(v0 + 192), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168), *(unsigned __int8 *)(v0 + 285), *(void *)(v0 + 176), *(void *)(v0 + 184));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001E4C1C(*(void *)(v0 + 208), *(void *)(v0 + 152), *(void *)(v0 + 200), *(void *)(v0 + 176), *(void *)(v0 + 184));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1001E48E0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 264) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1001E4B14;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 272) = a1;
    uint64_t v5 = sub_1001E4A10;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001E4A10()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 285);
  sub_10019FF48(*(void *)(v0 + 272));
  sub_1001E7274(v1, v6, v5, v4, v7, v3, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001E4C1C(*(void *)(v0 + 208), *(void *)(v0 + 152), *(void *)(v0 + 200), *(void *)(v0 + 176), *(void *)(v0 + 184));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001E4B14()
{
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 285);
  swift_bridgeObjectRelease();
  sub_1001E7274(v3, v7, v8, v6, v9, v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001E4C1C(v1, v7, v2, v5, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1001E4C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a3;
  uint64_t v8 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a5;
  uint64_t v12 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t result = swift_beginAccess();
  uint64_t v28 = a1;
  if (*(void *)(*(void *)(a1 + 16) + 16))
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 56))(v12, v11);
    uint64_t v21 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 1, 1, v21);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, AssociatedTypeWitness);
    uint64_t v22 = *(unsigned __int8 *)(v14 + 80);
    int64_t v27 = v10;
    uint64_t v23 = v29;
    uint64_t v24 = (v22 + 64) & ~v22;
    uint64_t v25 = (char *)swift_allocObject();
    *((void *)v25 + 2) = 0;
    *((void *)v25 + 3) = 0;
    *((void *)v25 + 4) = v12;
    *((void *)v25 + 5) = v11;
    uint64_t v26 = v28;
    *((void *)v25 + 6) = v23;
    *((void *)v25 + 7) = v26;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v25[v24], v16, AssociatedTypeWitness);
    swift_retain();
    swift_retain();
    sub_100064D5C((uint64_t)v27, (uint64_t)&unk_100524E18, (uint64_t)v25);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, AssociatedTypeWitness);
  }
  return result;
}

void sub_1001E4EC0(unsigned __int8 a1, uint64_t a2)
{
  int v3 = a1;
  if (a1 && *(unsigned __int8 *)(a2 + 120) != a1)
  {
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      unint64_t v7 = 0x80000001004295B0;
      unint64_t v8 = 0xD000000000000010;
      if (v3 != 2)
      {
        unint64_t v8 = 0xD000000000000013;
        unint64_t v7 = 0x8000000100429590;
      }
      if (v3 == 1) {
        uint64_t v9 = 0x2820797473616F74;
      }
      else {
        uint64_t v9 = v8;
      }
      if (v3 == 1) {
        unint64_t v10 = 0xED00002972696166;
      }
      else {
        unint64_t v10 = v7;
      }
      sub_1003806B0(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Throttling CVCoordinator for system pressure level %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  *(unsigned char *)(a2 + 120) = v3;
}

uint64_t sub_1001E506C(void *a1, uint64_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  long long v220 = a6;
  uint64_t v231 = a2;
  uint64_t v9 = sub_10000F214(&qword_100524E28);
  __chkstk_darwin(v9 - 8);
  uint64_t v247 = (uint64_t)&v217 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = type metadata accessor for DispatchPredicate();
  int64_t v251 = *(void *)(v230 - 8);
  __chkstk_darwin(v230);
  uint64_t v229 = (uint64_t *)((char *)&v217 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v257 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v252 = *((void *)v257 - 1);
  __chkstk_darwin(v257);
  uint64_t v256 = (uint64_t)&v217 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v258 = (uint64_t)&v217 - v14;
  __chkstk_darwin(v15);
  uint64_t v246 = (uint64_t)&v217 - v16;
  __chkstk_darwin(v17);
  uint64_t v234 = (uint64_t)&v217 - v18;
  __chkstk_darwin(v19);
  uint64_t v236 = (uint64_t)&v217 - v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v217 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v217 - v25;
  __chkstk_darwin(v27);
  uint64_t v237 = (uint64_t)&v217 - v28;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v217 - v30;
  __chkstk_darwin(v32);
  uint64_t v254 = (uint64_t)&v217 - v33;
  uint64_t v218 = type metadata accessor for CVDetection();
  int64_t v248 = *(void *)(v218 - 8);
  __chkstk_darwin(v218);
  uint64_t v245 = (uint64_t)&v217 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v217 - v36;
  __chkstk_darwin(v38);
  uint64_t v225 = (uint64_t)&v217 - v39;
  __chkstk_darwin(v40);
  uint64_t v244 = (char *)&v217 - v41;
  uint64_t v42 = sub_10000F214(&qword_100524E90);
  __chkstk_darwin(v42 - 8);
  uint64_t v242 = (uint64_t)&v217 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v249 = (char *)&v217 - v45;
  sub_1001E32D4((uint64_t)v261, a3);
  sub_10000FC34((uint64_t)v261, (uint64_t)&v262, &qword_100524E98);
  uint64_t v243 = v23;
  if ((void)v262)
  {
    *(_OWORD *)((char *)v264 + 13) = *(_OWORD *)((char *)v263 + 13);
    v263[2] = v262;
    v264[0] = v263[0];
    uint64_t v265 = *((void *)&v262 + 1);
    uint64_t v46 = *(void *)(*((void *)&v262 + 1) + 16);
    if (v46)
    {
      uint64_t v47 = a5;
      os_log_type_t v48 = (char *)(swift_bridgeObjectRetain() + 48);
      do
      {
        float v49 = *((float *)v48 - 4);
        double v50 = *((double *)v48 - 1);
        char v51 = *v48;
        v48 += 24;
        sub_1001E22C4(v51, v49, v50);
        --v46;
      }
      while (v46);
      sub_1000A6A04((uint64_t)&v265);
      a5 = v47;
    }
    uint64_t v52 = sub_1000A3898()[2];
    swift_bridgeObjectRelease();
    if (v52)
    {
      char v53 = sub_1000A3898();
      sub_10019FF74((uint64_t)v53);
    }
    uint64_t v54 = swift_bridgeObjectRetain();
    sub_10019FF48(v54);
    sub_10020FB08((uint64_t)v261);
    sub_10000FC34((uint64_t)&v264[1] + 8, (uint64_t)v266, &qword_10051CAD8);
    sub_10000FC34((uint64_t)v266, a5, &qword_10051CAD8);
  }
  uint64_t v255 = (uint64_t)v31;
  uint64_t v235 = v37;
  swift_beginAccess();
  uint64_t v55 = swift_bridgeObjectRetain();
  uint64_t v56 = 0;
  uint64_t v57 = sub_100204E78(v55, a3);
  swift_bridgeObjectRelease();
  a1[13] = v57;
  swift_bridgeObjectRelease();
  uint64_t v58 = a1[16];
  uint64_t v59 = *(void *)(v58 + 64);
  uint64_t v223 = v58 + 64;
  uint64_t v60 = 1 << *(unsigned char *)(v58 + 32);
  if (v60 < 64) {
    uint64_t v61 = ~(-1 << v60);
  }
  else {
    uint64_t v61 = -1;
  }
  unint64_t v253 = v61 & v59;
  unsigned int v62 = a1 + 21;
  uint64_t v238 = a1;
  uint64_t v239 = v58;
  swift_bridgeObjectRetain();
  uint64_t v240 = a1 + 19;
  swift_beginAccess();
  uint64_t v222 = a1 + 20;
  swift_beginAccess();
  int64_t v63 = 0;
  unsigned int v228 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v227 = (void (**)(void *, void, uint64_t))(v251 + 104);
  long long v226 = (void (**)(void *, uint64_t))(v251 + 8);
  int64_t v233 = (unint64_t)(v60 + 63) >> 6;
  int64_t v219 = v233 - 1;
  __asm { FMOV            V0.2D, #1.0 }
  long long v241 = _Q0;
  uint64_t v250 = a1 + 21;
  uint64_t v69 = (uint64_t)v244;
  uint64_t v70 = (uint64_t)v249;
  while (1)
  {
    uint64_t v76 = v242;
    if (v253)
    {
      unint64_t v77 = __clz(__rbit64(v253));
      v253 &= v253 - 1;
      int64_t v251 = v63;
      unint64_t v78 = v77 | (v63 << 6);
LABEL_18:
      uint64_t v79 = v239;
      sub_10020F0D8(*(void *)(v239 + 48) + *(void *)(v248 + 72) * v78, v242, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v80 = *(void *)(v79 + 56) + 24 * v78;
      uint64_t v81 = sub_10000F214(&qword_100524EA0);
      uint64_t v82 = v76 + *(int *)(v81 + 48);
      char v83 = *(unsigned char *)(v80 + 16);
      *(_OWORD *)uint64_t v82 = *(_OWORD *)v80;
      *(unsigned char *)(v82 + 16) = v83;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v76, 0, 1, v81);
      goto LABEL_31;
    }
    int64_t v84 = v63 + 1;
    if (__OFADD__(v63, 1)) {
      goto LABEL_156;
    }
    if (v84 >= v233) {
      goto LABEL_29;
    }
    unint64_t v85 = *(void *)(v223 + 8 * v84);
    if (v85) {
      goto LABEL_22;
    }
    v63 += 2;
    if (v84 + 1 >= v233) {
      goto LABEL_85;
    }
    unint64_t v85 = *(void *)(v223 + 8 * v63);
    if (v85) {
      goto LABEL_25;
    }
    if (v84 + 2 >= v233)
    {
LABEL_29:
      int64_t v251 = v63;
    }
    else
    {
      unint64_t v85 = *(void *)(v223 + 8 * (v84 + 2));
      if (v85)
      {
        v84 += 2;
        goto LABEL_22;
      }
      int64_t v63 = v84 + 3;
      if (v84 + 3 < v233)
      {
        unint64_t v85 = *(void *)(v223 + 8 * v63);
        if (v85)
        {
LABEL_25:
          int64_t v84 = v63;
LABEL_22:
          unint64_t v253 = (v85 - 1) & v85;
          unint64_t v78 = __clz(__rbit64(v85)) + (v84 << 6);
          int64_t v251 = v84;
          goto LABEL_18;
        }
        while (1)
        {
          int64_t v84 = v63 + 1;
          if (__OFADD__(v63, 1)) {
            goto LABEL_163;
          }
          if (v84 >= v233) {
            break;
          }
          unint64_t v85 = *(void *)(v223 + 8 * v84);
          ++v63;
          if (v85) {
            goto LABEL_22;
          }
        }
        int64_t v84 = v219;
LABEL_85:
        int64_t v251 = v84;
        goto LABEL_30;
      }
      int64_t v251 = v84 + 2;
    }
LABEL_30:
    uint64_t v86 = sub_10000F214(&qword_100524EA0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v76, 1, 1, v86);
    unint64_t v253 = 0;
LABEL_31:
    sub_10000FC34(v76, v70, &qword_100524E90);
    uint64_t v87 = sub_10000F214(&qword_100524EA0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48))(v70, 1, v87) == 1) {
      break;
    }
    uint64_t v88 = v70 + *(int *)(v87 + 48);
    uint64_t v89 = *(void *)v88;
    uint64_t v90 = *(void *)(v88 + 8);
    unsigned int v91 = *(unsigned __int8 *)(v88 + 16);
    sub_10020F140(v70, v69, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v92 = v69;
    uint64_t v93 = v254;
    sub_10020F0D8(v92, v254, (uint64_t (*)(void))type metadata accessor for CVDetection);
    char v94 = v257;
    uint64_t v95 = v93 + v257[5];
    *(void *)uint64_t v95 = v89;
    *(void *)(v95 + 8) = v90;
    *(unsigned char *)(v95 + 16) = v91;
    type metadata accessor for DetectionRequest.Originator(0);
    uint64_t v96 = swift_storeEnumTagMultiPayload();
    uint64_t v97 = v93 + v94[6];
    *(void *)uint64_t v97 = 0;
    *(void *)(v97 + 8) = 0;
    *(_OWORD *)(v97 + 16) = v241;
    *(double *)(v93 + v94[7]) = a3;
    uint64_t v69 = (uint64_t)v244;
    uint64_t v70 = (uint64_t)v249;
    switch(v91 >> 5)
    {
      case 1u:
        uint64_t v98 = (void *)v238[6];
        long long v100 = v229;
        uint64_t v99 = v230;
        *uint64_t v229 = v98;
        (*v227)(v100, v228, v99);
        id v101 = v98;
        LOBYTE(v98) = _dispatchPreconditionTest(_:)();
        (*v226)(v100, v99);
        if ((v98 & 1) == 0) {
          goto LABEL_158;
        }
        uint64_t v102 = *v240;
        if (!*(void *)(*v240 + 16)) {
          goto LABEL_159;
        }
        swift_bridgeObjectRetain();
        unint64_t v103 = sub_10032AF9C(v69);
        if ((v104 & 1) == 0) {
          goto LABEL_164;
        }
        double v105 = *(double *)(*(void *)(v102 + 56) + 8 * v103);
        swift_bridgeObjectRelease();
        float v106 = a3 - v105;
        if ((float)(0.95 / v106) >= (float)(flt_10044B310[*((char *)v238 + 120)] * *(float *)&v89))
        {
          uint64_t v70 = (uint64_t)v249;
          goto LABEL_15;
        }
        uint64_t v224 = v56;
        uint64_t v107 = v255;
        sub_10020F0D8(v254, v255, type metadata accessor for DetectionRequest);
        swift_beginAccess();
        uint64_t v108 = *v62;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        sub_1003FFF94((uint64_t)v259);
        uint64_t v109 = v257;
        uint64_t v110 = v107 + v257[5];
        sub_1001C2DBC((uint64_t)v259);
        uint64_t v111 = (CGRect *)(v107 + v109[6]);
        sub_10020B90C(v111->origin.x, v111->origin.y, v111->size.width, v111->size.height);
        uint64_t v232 = v109[7];
        if ((*(void *)(v107 + v232) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v112 = *(void *)(v107 + v232);
        }
        else {
          Swift::UInt64 v112 = 0;
        }
        Hasher._combine(_:)(v112);
        Swift::Int v113 = Hasher._finalize()();
        uint64_t v114 = -1 << *(unsigned char *)(v108 + 32);
        unint64_t v115 = v113 & ~v114;
        if ((*(void *)(v108 + 56 + ((v115 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v115))
        {
          uint64_t v116 = ~v114;
          uint64_t v117 = *(void *)(v252 + 72);
          do
          {
            sub_10020F0D8(*(void *)(v108 + 48) + v117 * v115, (uint64_t)v26, type metadata accessor for DetectionRequest);
            if ((sub_100402834((uint64_t)v26, v255) & 1) != 0
              && (sub_10020BB18((uint64_t)&v26[v257[5]], v110) & 1) != 0
              && CGRectEqualToRect(*(CGRect *)&v26[v257[6]], *v111)
              && *(double *)&v26[v257[7]] == *(double *)(v255 + v232))
            {
              sub_1001D430C((uint64_t)v26, type metadata accessor for DetectionRequest);
              swift_bridgeObjectRelease();
              unsigned int v62 = v250;
              uint64_t v118 = v255;
              goto LABEL_76;
            }
            sub_1001D430C((uint64_t)v26, type metadata accessor for DetectionRequest);
            unint64_t v115 = (v115 + 1) & v116;
          }
          while (((*(void *)(v108 + 56 + ((v115 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v115) & 1) != 0);
        }
        swift_bridgeObjectRelease();
        uint64_t v124 = v250;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v118 = v255;
        goto LABEL_75;
      case 2u:
        uint64_t v119 = *v222;
        if (*(void *)(*v222 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v120 = sub_10032AF9C(v69);
          float v121 = 0.0;
          if (v122) {
            float v121 = *(float *)(*(void *)(v119 + 56) + 4 * v120);
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          float v121 = 0.0;
        }
        uint64_t v126 = v225;
        sub_10020F0D8(v69, v225, (uint64_t (*)(void))type metadata accessor for CVDetection);
        if (v121 >= *((float *)&v89 + 1))
        {
          uint64_t v127 = (void *)v238[6];
          uint64_t v129 = v229;
          uint64_t v128 = v230;
          *uint64_t v229 = v127;
          (*v227)(v129, v228, v128);
          id v130 = v127;
          LOBYTE(v127) = _dispatchPreconditionTest(_:)();
          (*v226)(v129, v128);
          if ((v127 & 1) == 0) {
            goto LABEL_161;
          }
          uint64_t v131 = *v240;
          if (!*(void *)(*v240 + 16)) {
            goto LABEL_162;
          }
          swift_bridgeObjectRetain();
          uint64_t v132 = v225;
          unint64_t v133 = sub_10032AF9C(v225);
          if ((v134 & 1) == 0) {
            goto LABEL_165;
          }
          double v135 = *(double *)(*(void *)(v131 + 56) + 8 * v133);
          swift_bridgeObjectRelease();
          float v136 = flt_10044B310[*((char *)v238 + 120)] * *(float *)&v90;
          float v137 = a3 - v135;
          *(float *)&double v135 = 0.95 / v137;
          sub_1001D430C(v132, (uint64_t (*)(void))type metadata accessor for CVDetection);
          if (*(float *)&v135 >= v136)
          {
            uint64_t v69 = (uint64_t)v244;
          }
          else
          {
            uint64_t v224 = v56;
            uint64_t v138 = (uint64_t)v243;
            sub_10020F0D8(v254, (uint64_t)v243, type metadata accessor for DetectionRequest);
            swift_beginAccess();
            uint64_t v139 = *v62;
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            sub_1003FFF94((uint64_t)v259);
            uint64_t v140 = v257;
            uint64_t v232 = v138 + v257[5];
            sub_1001C2DBC((uint64_t)v259);
            long long v141 = (CGRect *)(v138 + v140[6]);
            sub_10020B90C(v141->origin.x, v141->origin.y, v141->size.width, v141->size.height);
            uint64_t v221 = v140[7];
            if ((*(void *)(v138 + v221) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
              Swift::UInt64 v142 = *(void *)(v138 + v221);
            }
            else {
              Swift::UInt64 v142 = 0;
            }
            Hasher._combine(_:)(v142);
            Swift::Int v143 = Hasher._finalize()();
            uint64_t v144 = -1 << *(unsigned char *)(v139 + 32);
            unint64_t v115 = v143 & ~v144;
            uint64_t v69 = (uint64_t)v244;
            if ((*(void *)(v139 + 56 + ((v115 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v115))
            {
              uint64_t v145 = ~v144;
              uint64_t v146 = *(void *)(v252 + 72);
              uint64_t v147 = v236;
              while (1)
              {
                sub_10020F0D8(*(void *)(v139 + 48) + v146 * v115, v147, type metadata accessor for DetectionRequest);
                if (sub_100402834(v147, (uint64_t)v243))
                {
                  char v148 = sub_10020BB18(v147 + v257[5], v232);
                  uint64_t v147 = v236;
                  if (v148)
                  {
                    BOOL v149 = CGRectEqualToRect(*(CGRect *)(v236 + v257[6]), *v141);
                    uint64_t v147 = v236;
                    if (v149 && *(double *)(v236 + v257[7]) == *(double *)&v243[v221]) {
                      break;
                    }
                  }
                }
                sub_1001D430C(v147, type metadata accessor for DetectionRequest);
                unint64_t v115 = (v115 + 1) & v145;
                if (((*(void *)(v139 + 56 + ((v115 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v115) & 1) == 0) {
                  goto LABEL_74;
                }
              }
              sub_1001D430C(v236, type metadata accessor for DetectionRequest);
              swift_bridgeObjectRelease();
              unsigned int v62 = v250;
              uint64_t v118 = (uint64_t)v243;
            }
            else
            {
LABEL_74:
              swift_bridgeObjectRelease();
              uint64_t v124 = v250;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v118 = (uint64_t)v243;
LABEL_75:
              uint64_t v150 = v237;
              sub_10020F0D8(v118, v237, type metadata accessor for DetectionRequest);
              v259[0] = *v124;
              uint64_t *v124 = 0x8000000000000000;
              unint64_t v151 = v115;
              unsigned int v62 = v124;
              sub_1001FF90C(v150, v151, isUniquelyReferenced_nonNull_native);
              uint64_t *v124 = v259[0];
              swift_bridgeObjectRelease();
            }
LABEL_76:
            sub_1001D430C(v118, type metadata accessor for DetectionRequest);
            swift_endAccess();
            uint64_t v56 = v224;
            uint64_t v70 = (uint64_t)v249;
          }
        }
        else
        {
          sub_1001D430C(v126, (uint64_t (*)(void))type metadata accessor for CVDetection);
        }
LABEL_15:
        sub_1001D430C(v254, type metadata accessor for DetectionRequest);
        sub_1001D430C(v69, (uint64_t (*)(void))type metadata accessor for CVDetection);
        int64_t v63 = v251;
        break;
      case 3u:
        uint64_t v71 = *v231;
        __chkstk_darwin(v96);
        long long v123 = v238;
        *(&v217 - 4) = v69;
        *(&v217 - 3) = (uint64_t)v123;
        *((_DWORD *)&v217 - 4) = v89;
        *((double *)&v217 - 1) = a3;
        swift_bridgeObjectRetain();
        uint64_t v72 = sub_10020F768;
        uint64_t v73 = &v217 - 6;
        uint64_t v70 = (uint64_t)v249;
        goto LABEL_14;
      case 4u:
        uint64_t v71 = *v231;
        __chkstk_darwin(v96);
        *(&v217 - 2) = v69;
        swift_bridgeObjectRetain();
        uint64_t v72 = sub_1002131DC;
        uint64_t v73 = &v217 - 4;
LABEL_14:
        sub_1001C2354((uint64_t (*)(char *))v72, (uint64_t)v73, v71);
        uint64_t v75 = v74;
        swift_beginAccess();
        sub_10020F790(v75);
        swift_endAccess();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      default:
        goto LABEL_15;
    }
  }
  uint64_t v224 = v56;
  swift_release();
  swift_beginAccess();
  long long v152 = v220;
  *long long v220 = *v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v153 = *v152;
  int64_t v154 = *(void *)(*v152 + 16);
  uint64_t v155 = _swiftEmptyArrayStorage;
  if (!v154) {
    goto LABEL_98;
  }
  v259[0] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_100040D64(0, v154, 0);
  int64_t v156 = sub_10020B990(v153);
  int v158 = v157;
  char v160 = v159 & 1;
  uint64_t v255 = v153 + 56;
  do
  {
    if (v156 < 0 || v156 >= 1 << *(unsigned char *)(v153 + 32))
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }
    if (((*(void *)(v255 + (((unint64_t)v156 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v156) & 1) == 0) {
      goto LABEL_152;
    }
    if (*(_DWORD *)(v153 + 36) != v158) {
      goto LABEL_153;
    }
    uint64_t v161 = v237;
    sub_10020F0D8(*(void *)(v153 + 48) + *(void *)(v252 + 72) * v156, v237, type metadata accessor for DetectionRequest);
    uint64_t v162 = v161;
    uint64_t v163 = v234;
    sub_10020F140(v162, v234, type metadata accessor for DetectionRequest);
    sub_10020F0D8(v163, v245, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1001D430C(v163, type metadata accessor for DetectionRequest);
    uint64_t v155 = (void *)v259[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100040D64(0, v155[2] + 1, 1);
      uint64_t v155 = (void *)v259[0];
    }
    unint64_t v165 = v155[2];
    unint64_t v164 = v155[3];
    if (v165 >= v164 >> 1)
    {
      sub_100040D64(v164 > 1, v165 + 1, 1);
      uint64_t v155 = (void *)v259[0];
    }
    v155[2] = v165 + 1;
    sub_10020F140(v245, (uint64_t)v155+ ((*(unsigned __int8 *)(v248 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v248 + 80))+ *(void *)(v248 + 72) * v165, (uint64_t (*)(void))type metadata accessor for CVDetection);
    int64_t v166 = sub_10020BA34(v156, v158, v160 & 1, v153);
    int64_t v156 = v166;
    int v158 = v167;
    char v160 = v168 & 1;
    --v154;
  }
  while (v154);
  sub_1000BDE84(v166, v167, v168 & 1);
  swift_bridgeObjectRelease();
  unsigned int v62 = v250;
LABEL_98:
  uint64_t v169 = v155[2];
  long long v170 = v240;
  if (v169)
  {
    int64_t v171 = v248;
    uint64_t v172 = (uint64_t)v155
         + ((*(unsigned __int8 *)(v248 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v248 + 80));
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v173 = *(void *)(v171 + 72);
    uint64_t v174 = (uint64_t)v235;
    while (1)
    {
      sub_10020F0D8(v172, v174, (uint64_t (*)(void))type metadata accessor for CVDetection);
      int v175 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v260 = (void *)*v170;
      uint64_t v176 = v260;
      void *v170 = 0x8000000000000000;
      unint64_t v178 = sub_10032AF9C(v174);
      uint64_t v179 = v176[2];
      BOOL v180 = (v177 & 1) == 0;
      uint64_t v181 = v179 + v180;
      if (__OFADD__(v179, v180)) {
        goto LABEL_154;
      }
      char v182 = v177;
      if (v176[3] >= v181)
      {
        if ((v175 & 1) == 0) {
          sub_1001F72DC();
        }
        uint64_t v174 = (uint64_t)v235;
        uint64_t v185 = v260;
        if ((v182 & 1) == 0) {
          goto LABEL_110;
        }
      }
      else
      {
        sub_1001EFEAC(v181, v175);
        uint64_t v174 = (uint64_t)v235;
        unint64_t v183 = sub_10032AF9C((uint64_t)v235);
        if ((v182 & 1) != (v184 & 1)) {
          goto LABEL_166;
        }
        unint64_t v178 = v183;
        uint64_t v185 = v260;
        if ((v182 & 1) == 0)
        {
LABEL_110:
          v185[(v178 >> 6) + 8] |= 1 << v178;
          sub_10020F0D8(v174, v185[6] + v178 * v173, (uint64_t (*)(void))type metadata accessor for CVDetection);
          *(double *)(v185[7] + 8 * v178) = a3;
          uint64_t v186 = v185[2];
          _VF = __OFADD__(v186, 1);
          uint64_t v187 = v186 + 1;
          if (_VF) {
            goto LABEL_157;
          }
          v185[2] = v187;
          goto LABEL_101;
        }
      }
      *(double *)(v185[7] + 8 * v178) = a3;
LABEL_101:
      long long v170 = v240;
      void *v240 = v185;
      swift_bridgeObjectRelease();
      sub_1001D430C(v174, (uint64_t (*)(void))type metadata accessor for CVDetection);
      v172 += v173;
      if (!--v169)
      {
        swift_endAccess();
        swift_bridgeObjectRelease_n();
        unsigned int v62 = v250;
        goto LABEL_114;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_114:
  uint64_t v188 = *v220;
  uint64_t v189 = *(void *)(*v220 + 56);
  uint64_t v245 = *v220 + 56;
  uint64_t v190 = 1 << *(unsigned char *)(v188 + 32);
  if (v190 < 64) {
    uint64_t v191 = ~(-1 << v190);
  }
  else {
    uint64_t v191 = -1;
  }
  unint64_t v192 = v191 & v189;
  int64_t v248 = (unint64_t)(v190 + 63) >> 6;
  uint64_t v249 = (char *)(v252 + 56);
  int64_t v251 = v188;
  swift_bridgeObjectRetain();
  uint64_t v193 = 0;
  while (2)
  {
    if (v192)
    {
      unint64_t v253 = (v192 - 1) & v192;
      uint64_t v254 = v193;
      unint64_t v195 = __clz(__rbit64(v192)) | (v193 << 6);
LABEL_133:
      uint64_t v199 = *(void *)(v252 + 72);
      uint64_t v200 = v246;
      sub_10020F0D8(*(void *)(v251 + 48) + v199 * v195, v246, type metadata accessor for DetectionRequest);
      uint64_t v201 = v258;
      sub_10020F140(v200, v258, type metadata accessor for DetectionRequest);
      swift_beginAccess();
      uint64_t v202 = *v62;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      sub_1003FFF94((uint64_t)v259);
      id v203 = v257;
      uint64_t v204 = v201 + v257[5];
      sub_1001C2DBC((uint64_t)v259);
      uint64_t v205 = (CGRect *)(v201 + v203[6]);
      sub_10020B90C(v205->origin.x, v205->origin.y, v205->size.width, v205->size.height);
      uint64_t v255 = v203[7];
      if ((*(void *)(v201 + v255) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v206 = *(void *)(v201 + v255);
      }
      else {
        Swift::UInt64 v206 = 0;
      }
      Hasher._combine(_:)(v206);
      Swift::Int v207 = Hasher._finalize()();
      uint64_t v208 = -1 << *(unsigned char *)(v202 + 32);
      unint64_t v209 = v207 & ~v208;
      if ((*(void *)(v202 + 56 + ((v209 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v209))
      {
        uint64_t v210 = ~v208;
        uint64_t v211 = v256;
        while (1)
        {
          sub_10020F0D8(*(void *)(v202 + 48) + v209 * v199, v211, type metadata accessor for DetectionRequest);
          if (sub_100402834(v211, v258))
          {
            char v212 = sub_10020BB18(v211 + v257[5], v204);
            uint64_t v211 = v256;
            if (v212)
            {
              BOOL v213 = CGRectEqualToRect(*(CGRect *)(v256 + v257[6]), *v205);
              uint64_t v211 = v256;
              if (v213 && *(double *)(v256 + v257[7]) == *(double *)(v258 + v255)) {
                break;
              }
            }
          }
          sub_1001D430C(v211, type metadata accessor for DetectionRequest);
          unint64_t v209 = (v209 + 1) & v210;
          if (((*(void *)(v202 + 56 + ((v209 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v209) & 1) == 0) {
            goto LABEL_118;
          }
        }
        sub_1001D430C(v256, type metadata accessor for DetectionRequest);
        swift_bridgeObjectRelease();
        unsigned int v62 = v250;
        char v214 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v215 = *v62;
        v259[0] = *v62;
        *unsigned int v62 = 0x8000000000000000;
        if ((v214 & 1) == 0)
        {
          sub_10020215C(type metadata accessor for DetectionRequest, &qword_100524E30, type metadata accessor for DetectionRequest, type metadata accessor for DetectionRequest);
          uint64_t v215 = v259[0];
        }
        uint64_t v194 = v247;
        sub_10020F140(*(void *)(v215 + 48) + v209 * v199, v247, type metadata accessor for DetectionRequest);
        sub_1002069EC(v209);
        *unsigned int v62 = v259[0];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t, int *))v249)(v194, 0, 1, v257);
      }
      else
      {
LABEL_118:
        swift_bridgeObjectRelease();
        uint64_t v194 = v247;
        (*(void (**)(uint64_t, uint64_t, uint64_t, int *))v249)(v247, 1, 1, v257);
        unsigned int v62 = v250;
      }
      sub_10000FBD8(v194, &qword_100524E28);
      swift_endAccess();
      sub_1001D430C(v258, type metadata accessor for DetectionRequest);
      unint64_t v192 = v253;
      uint64_t v193 = v254;
      continue;
    }
    break;
  }
  _VF = __OFADD__(v193, 1);
  uint64_t v196 = v193 + 1;
  if (_VF) {
    goto LABEL_155;
  }
  if (v196 < v248)
  {
    unint64_t v197 = *(void *)(v245 + 8 * v196);
    if (!v197)
    {
      uint64_t v198 = v196 + 1;
      if (v196 + 1 >= v248) {
        return swift_release();
      }
      unint64_t v197 = *(void *)(v245 + 8 * v198);
      if (!v197)
      {
        uint64_t v198 = v196 + 2;
        if (v196 + 2 >= v248) {
          return swift_release();
        }
        unint64_t v197 = *(void *)(v245 + 8 * v198);
        if (!v197)
        {
          uint64_t v198 = v196 + 3;
          if (v196 + 3 >= v248) {
            return swift_release();
          }
          unint64_t v197 = *(void *)(v245 + 8 * v198);
          if (!v197)
          {
            while (1)
            {
              uint64_t v196 = v198 + 1;
              if (__OFADD__(v198, 1)) {
                break;
              }
              if (v196 >= v248) {
                return swift_release();
              }
              unint64_t v197 = *(void *)(v245 + 8 * v196);
              ++v198;
              if (v197) {
                goto LABEL_132;
              }
            }
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            swift_bridgeObjectRelease();
            __break(1u);
LABEL_165:
            swift_bridgeObjectRelease();
            __break(1u);
LABEL_166:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            JUMPOUT(0x1001E6B08);
          }
        }
      }
      uint64_t v196 = v198;
    }
LABEL_132:
    unint64_t v253 = (v197 - 1) & v197;
    uint64_t v254 = v196;
    unint64_t v195 = __clz(__rbit64(v197)) + (v196 << 6);
    goto LABEL_133;
  }
  return swift_release();
}

uint64_t sub_1001E6B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100524EB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t)&v6[*(int *)(v7 + 56)];
  sub_10020F0D8(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_10020F0D8(a2, v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_3;
      }
      goto LABEL_13;
    case 2u:
      if (swift_getEnumCaseMultiPayload() == 2) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 3u:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 5u:
      if (swift_getEnumCaseMultiPayload() == 5) {
        goto LABEL_13;
      }
      goto LABEL_3;
    default:
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_3:
        sub_10000FBD8((uint64_t)v6, &qword_100524EB0);
        return 0;
      }
      else
      {
LABEL_13:
        sub_1001D430C(v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1001D430C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
        return 1;
      }
  }
}

uint64_t sub_1001E6D00(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = sub_1001F94FC(&v13, *(unsigned __int8 *)(*(void *)(v1 + 48) + v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_1001E6E5C(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = sub_1001F94FC(&v13, *(unsigned __int8 *)(*(void *)(v1 + 48) + v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_1001E6FB8(uint64_t a1, uint64_t a2, float a3, double a4)
{
  uint64_t v8 = type metadata accessor for CVDetection();
  __chkstk_darwin(v8);
  int64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100524EB0);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  sub_10020F0D8(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_10020F0D8(a2, v15, (uint64_t (*)(void))type metadata accessor for CVDetection);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_3;
      }
      goto LABEL_13;
    case 2u:
      if (swift_getEnumCaseMultiPayload() == 2) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 3u:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 5u:
      if (swift_getEnumCaseMultiPayload() == 5) {
        goto LABEL_13;
      }
      goto LABEL_3;
    default:
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_3:
        sub_10000FBD8((uint64_t)v13, &qword_100524EB0);
        sub_10020F0D8(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
        char v16 = 0;
      }
      else
      {
LABEL_13:
        sub_1001D430C(v15, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1001D430C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_10020F0D8(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
        char v16 = sub_1001E311C((uint64_t)v10, a3, a4);
      }
      sub_1001D430C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      return v16 & 1;
  }
}

uint64_t sub_1001E7274(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)(result + 24))
  {
    uint64_t v11 = *(void *)(result + 32);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8);
    swift_unknownObjectRetain();
    v14(a2, a3, a4, a5, a6, a7, ObjectType, v11);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1001E7358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[17] = a5;
  v6[18] = v5;
  v6[15] = a3;
  v6[16] = a4;
  v6[13] = a1;
  v6[14] = a2;
  return _swift_task_switch(sub_1001E7380, 0, 0);
}

uint64_t sub_1001E7380()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_retain();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_10020EF0C(v2, v1);
  *(void *)(v0 + 152) = v3;
  swift_release();
  if (*((void *)v3 + 2))
  {
    uint64_t v4 = sub_1001EA014((uint64_t)v3);
    *(void *)(v0 + 160) = v4;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    *(void *)(v0 + 48) = 0;
    *(void *)(v0 + 56) = 1;
    *(_OWORD *)(v0 + 80) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
    *(unsigned char *)(v0 + 96) = 1;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1001E756C;
    uint64_t v6 = *(void *)(v0 + 136);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 112);
    return sub_1001CE29C(v8, (uint64_t)v4, v0 + 16, v0 + 64, v7, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 152);
    uint64_t v16 = *(void *)(v0 + 104);
    swift_bridgeObjectRetain();
    sub_100207358(v10);
    swift_release();
    *(void *)(v0 + 192) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 200) = v16;
    unint64_t v11 = *(void *)(v0 + 120);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1001E77C4;
    uint64_t v13 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v15 = *(void *)(v0 + 112);
    return sub_1001E79DC(v16, v15, v11 | ((HIDWORD(v11) & 1) << 32), v14, v13);
  }
}

uint64_t sub_1001E756C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1001E7904;
  }
  else
  {
    swift_release();
    *(void *)(v4 + 184) = a1;
    uint64_t v5 = sub_1001E769C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001E769C()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[13];
  if (*(void *)(v1 + 16) <= *(void *)(v2 + 16) >> 3)
  {
    uint64_t v4 = v0[23];
    unint64_t v11 = (void *)v0[13];
    swift_bridgeObjectRetain();
    sub_100207358(v1);
    swift_release();
    uint64_t v3 = v11;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1002085C8(v1, v2);
    swift_release();
    uint64_t v4 = v0[23];
  }
  v0[24] = v4;
  v0[25] = v3;
  unint64_t v5 = v0[15];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[26] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1001E77C4;
  uint64_t v7 = v0[17];
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[14];
  return sub_1001E79DC((uint64_t)v3, v9, v5 | ((HIDWORD(v5) & 1) << 32), v8, v7);
}

uint64_t sub_1001E77C4()
{
  uint64_t v2 = (void *)*v1;
  v2[27] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001E7970, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[24];
    return v3(v4);
  }
}

uint64_t sub_1001E7904()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E7970()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E79DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[32] = a5;
  v6[33] = v5;
  v6[30] = a3;
  v6[31] = a4;
  v6[28] = a1;
  v6[29] = a2;
  sub_10000F214(&qword_10051A8C0);
  v6[34] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DetectionRequest(0);
  v6[35] = v7;
  v6[36] = *(void *)(v7 - 8);
  v6[37] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[38] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v6[39] = v9;
  v6[40] = *(void *)(v9 + 64);
  v6[41] = swift_task_alloc();
  v6[42] = swift_task_alloc();
  return _swift_task_switch(sub_1001E7B70, 0, 0);
}

uint64_t sub_1001E7B70()
{
  uint64_t v70 = v0;
  uint64_t v1 = *(void *)(v0 + 224);
  if (!*(void *)(v1 + 16))
  {
LABEL_40:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v53 = *(uint64_t (**)(void))(v0 + 8);
    return v53();
  }
  uint64_t v2 = (long long *)(v0 + 16);
  float v68 = (void *)(v0 + 64);
  uint64_t v3 = (id *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v55 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 264);
  uint64_t v54 = *(unsigned int *)(v0 + 240);
  (*(void (**)(void))(*(void *)(v0 + 256) + 56))(*(void *)(v0 + 248));
  uint64_t v69 = (char *)&_swiftEmptyDictionarySingleton;
  swift_retain();
  sub_10020CDD4(v1, v6, (unint64_t *)&v69);
  swift_release();
  uint64_t v7 = v69;
  uint64_t v56 = v69 + 64;
  uint64_t v8 = -1;
  uint64_t v9 = -1 << v69[32];
  if (-v9 < 64) {
    uint64_t v8 = ~(-1 << -(char)v9);
  }
  unint64_t v10 = v8 & *((void *)v69 + 8);
  int64_t v57 = (unint64_t)(63 - v9) >> 6;
  uint64_t v61 = v5;
  uint64_t v60 = v4 + 7;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v59 = (id *)(v0 + 216);
  uint64_t v58 = v7;
  while (1)
  {
    if (v10)
    {
      uint64_t v66 = (v10 - 1) & v10;
      int64_t v67 = v12;
      unint64_t v13 = __clz(__rbit64(v10)) | (v12 << 6);
      goto LABEL_23;
    }
    int64_t v14 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v14 >= v57) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)&v56[8 * v14];
    int64_t v16 = v12 + 1;
    if (!v15)
    {
      int64_t v16 = v12 + 2;
      if (v12 + 2 >= v57) {
        goto LABEL_39;
      }
      unint64_t v15 = *(void *)&v56[8 * v16];
      if (!v15)
      {
        int64_t v16 = v12 + 3;
        if (v12 + 3 >= v57) {
          goto LABEL_39;
        }
        unint64_t v15 = *(void *)&v56[8 * v16];
        if (!v15) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v66 = (v15 - 1) & v15;
    int64_t v67 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_23:
    uint64_t v18 = (long long *)(v7[6] + 48 * v13);
    long long v19 = *v18;
    long long v20 = v18[2];
    v2[1] = v18[1];
    v2[2] = v20;
    *uint64_t v2 = v19;
    sub_1000321A8(v2, (uint64_t)v68);
    sub_10000FC34(v0 + 56, (uint64_t)v3, &qword_100524E48);
    uint64_t v21 = *(void *)(v7[7] + 8 * v13);
    uint64_t v22 = *(void *)(v21 + 16);
    uint64_t v65 = v21;
    if (v22)
    {
      uint64_t v23 = v21 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
      swift_bridgeObjectRetain_n();
      sub_100210C2C(v68, (void (*)(void, void, void, void, void))sub_10020F1A8);
      sub_100107B18(v3);
      uint64_t v24 = *(void *)(v55 + 72);
      while (1)
      {
        uint64_t v25 = *(void *)(v0 + 296);
        sub_10020F0D8(v23, v25, type metadata accessor for DetectionRequest);
        char v26 = sub_1001C30A8();
        sub_1001D430C(v25, type metadata accessor for DetectionRequest);
        if (v26) {
          break;
        }
        v23 += v24;
        if (!--v22)
        {
          swift_bridgeObjectRelease();
          goto LABEL_29;
        }
      }
      uint64_t v30 = *(void *)(v0 + 256);
      uint64_t v31 = *(void *)(v0 + 248);
      int v32 = *(_DWORD *)(v0 + 244);
      uint64_t v33 = *(void *)(v0 + 232);
      swift_bridgeObjectRelease();
      sub_1001E8668((uint64_t *)v2, v33, v54 | ((unint64_t)(v32 & 1) << 32), v31, v30, v0 + 144);
      long long v27 = *(_OWORD *)(v0 + 144);
      long long v29 = *(_OWORD *)(v0 + 160);
      char v28 = *(unsigned char *)(v0 + 176);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_100210C2C(v68, (void (*)(void, void, void, void, void))sub_10020F1A8);
      sub_100107B18(v3);
LABEL_29:
      long long v27 = 0uLL;
      char v28 = 1;
      long long v29 = 0uLL;
    }
    uint64_t v35 = *(void *)(v0 + 328);
    uint64_t v34 = *(void *)(v0 + 336);
    uint64_t v36 = *(void *)(v0 + 304);
    uint64_t v62 = v35;
    uint64_t v38 = *(void *)(v0 + 264);
    uint64_t v37 = *(void *)(v0 + 272);
    uint64_t v64 = v37;
    *(_OWORD *)(v0 + 104) = v27;
    *(_OWORD *)(v0 + 120) = v29;
    *(unsigned char *)(v0 + 136) = v28;
    uint64_t v39 = type metadata accessor for TaskPriority();
    uint64_t v40 = *(void *)(v39 - 8);
    long long v63 = *(_OWORD *)(v0 + 248);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v37, 1, 1, v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v35, v34, v36);
    unint64_t v41 = (*(unsigned __int8 *)(v61 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
    unint64_t v42 = (v60 + v41) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = 0;
    *(void *)(v44 + 24) = 0;
    *(_OWORD *)(v44 + 32) = v63;
    *(void *)(v44 + 48) = v38;
    uint64_t v45 = v39;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v61 + 32))(v44 + v41, v62, v36);
    *(void *)(v44 + v42) = v65;
    uint64_t v46 = (_OWORD *)(v44 + v43);
    uint64_t v2 = (long long *)(v0 + 16);
    long long v47 = *(_OWORD *)(v0 + 48);
    long long v48 = *(_OWORD *)(v0 + 16);
    v46[1] = *(_OWORD *)(v0 + 32);
    v46[2] = v47;
    *uint64_t v46 = v48;
    sub_10000FC34(v0 + 104, v44 + ((v43 + 55) & 0xFFFFFFFFFFFFFFF8), (uint64_t *)&unk_100518AE0);
    LODWORD(v39) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v64, 1, v39);
    swift_retain();
    sub_100210C2C(v68, (void (*)(void, void, void, void, void))sub_10020F1A8);
    uint64_t v3 = (id *)(v0 + 216);
    sub_100107B18(v59);
    uint64_t v49 = *(void *)(v0 + 272);
    if (v39 == 1)
    {
      sub_10000FBD8(*(void *)(v0 + 272), &qword_10051A8C0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v49, v45);
    }
    if (*(void *)(v44 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v50 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v52 = v51;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v50 = 0;
      uint64_t v52 = 0;
    }
    uint64_t v7 = v58;
    if (v52 | v50)
    {
      *(void *)(v0 + 184) = 0;
      *(void *)(v0 + 192) = 0;
      *(void *)(v0 + 200) = v50;
      *(void *)(v0 + 208) = v52;
    }
    swift_task_create();
    sub_100210C2C(v68, (void (*)(void, void, void, void, void))sub_10020F474);
    sub_100107B44(v59);
    uint64_t result = swift_release();
    unint64_t v10 = v66;
    int64_t v12 = v67;
  }
  uint64_t v17 = v12 + 4;
  if (v12 + 4 >= v57)
  {
LABEL_39:
    swift_release();
    (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 304));
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  unint64_t v15 = *(void *)&v56[8 * v17];
  if (v15)
  {
    int64_t v16 = v12 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v57) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)&v56[8 * v16];
    ++v17;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

id *sub_1001E827C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6 = type metadata accessor for DetectionRequest(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = (uint64_t *)(a2 + OBJC_IVAR____TtC6Tamale13CVCoordinator_inputStorage);
  uint64_t result = (id *)swift_beginAccess();
  uint64_t v12 = *v10;
  if (!*(void *)(v12 + 16)) {
    return result;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_10032AF9C(a1);
  if ((v14 & 1) == 0) {
    return (id *)swift_bridgeObjectRelease();
  }
  unint64_t v15 = (long long *)(*(void *)(v12 + 56) + 48 * v13);
  long long v17 = v15[1];
  long long v16 = v15[2];
  long long v38 = *v15;
  long long v39 = v17;
  long long v40 = v16;
  sub_1000321A8(&v38, (uint64_t)v41);
  sub_10000FC34((uint64_t)&v40 + 8, (uint64_t)&v42, &qword_100524E48);
  uint64_t v18 = sub_10020F1A8;
  sub_100210C2C(v41, (void (*)(void, void, void, void, void))sub_10020F1A8);
  sub_100107B18(&v42);
  swift_bridgeObjectRelease();
  sub_10020F0D8(a1, (uint64_t)v9, type metadata accessor for DetectionRequest);
  sub_100210C2C(v41, (void (*)(void, void, void, void, void))sub_10020F1A8);
  sub_100107B18(&v42);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = (void *)*a3;
  unint64_t v20 = (unint64_t)v37;
  *a3 = 0x8000000000000000;
  unint64_t v22 = sub_10032B310((Swift::UInt *)&v38);
  uint64_t v23 = *(void *)(v20 + 16);
  BOOL v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
    goto LABEL_20;
  }
  char v26 = v21;
  if (*(void *)(v20 + 24) >= v25)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1001F7AE4();
      unint64_t v20 = (unint64_t)v37;
    }
  }
  else
  {
    sub_1001F164C(v25, isUniquelyReferenced_nonNull_native);
    unint64_t v20 = (unint64_t)v37;
    unint64_t v27 = sub_10032B310((Swift::UInt *)&v38);
    if ((v26 & 1) != (v28 & 1))
    {
LABEL_22:
      uint64_t result = (id *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v22 = v27;
  }
  *a3 = v20;
  swift_bridgeObjectRelease();
  long long v29 = (void *)*a3;
  if (v26)
  {
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  v29[(v22 >> 6) + 8] |= 1 << v22;
  uint64_t v30 = (long long *)(v29[6] + 48 * v22);
  long long v31 = v38;
  long long v32 = v40;
  v30[1] = v39;
  v30[2] = v32;
  *uint64_t v30 = v31;
  *(void *)(v29[7] + 8 * v22) = _swiftEmptyArrayStorage;
  uint64_t v33 = v29[2];
  swift_bridgeObjectRetain();
  if (__OFADD__(v33, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  void v29[2] = v33 + 1;
  sub_100210C2C(v41, (void (*)(void, void, void, void, void))sub_10020F1A8);
  sub_100107B18(&v42);
LABEL_14:
  uint64_t v18 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *))v29[7];
  swift_bridgeObjectRelease();
  unint64_t v20 = *((void *)v18 + v22);
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  *((void *)v18 + v22) = v20;
  if ((v34 & 1) == 0)
  {
LABEL_20:
    unint64_t v20 = sub_10032A0D0(0, *(void *)(v20 + 16) + 1, 1, v20);
    *((void *)v18 + v22) = v20;
  }
  unint64_t v36 = *(void *)(v20 + 16);
  unint64_t v35 = *(void *)(v20 + 24);
  if (v36 >= v35 >> 1)
  {
    unint64_t v20 = sub_10032A0D0(v35 > 1, v36 + 1, 1, v20);
    *((void *)v18 + v22) = v20;
  }
  *(void *)(v20 + 16) = v36 + 1;
  sub_10020F140((uint64_t)v9, v20+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v36, type metadata accessor for DetectionRequest);
  sub_100210C2C(v41, (void (*)(void, void, void, void, void))sub_10020F474);
  sub_100107B44(&v42);
  sub_100210C2C(v41, (void (*)(void, void, void, void, void))sub_10020F474);
  return sub_100107B44(&v42);
}