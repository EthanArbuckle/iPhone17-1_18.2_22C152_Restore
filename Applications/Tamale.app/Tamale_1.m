void destroy for ScanwaveData(uint64_t a1)
{
  sub_1000ACB3C(*(void **)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
}

void sub_1000ACB3C(void *a1, void *a2, char a3)
{
  if (a3)
  {
    if (a3 != 1) {
      return;
    }

    a1 = a2;
  }
}

uint64_t _s6Tamale12ScanwaveDataOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000ACAE0(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ScanwaveData(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000ACAE0(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000ACB3C(v6, v7, v8);
  return a1;
}

__n128 initializeBufferWithCopyOfBuffer for CameraSceneUpdate(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ScanwaveData(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000ACB3C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScanwaveData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScanwaveData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000ACD14(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000ACD2C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ScanwaveData()
{
  return &type metadata for ScanwaveData;
}

uint64_t sub_1000ACD54()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1000ACE18(uint64_t a1)
{
  long long v7 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = v1
     + ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80));
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(_OWORD *)(v5 + 32) = v7;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = v4;
  *(void *)(v5 + 8) = sub_10000F878;
  return _swift_task_switch(sub_1000AC208, 0, 0);
}

void sub_1000ACF14(id a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    sub_1000ACF28(a1, a2);
  }
}

void sub_1000ACF28(id a1, unsigned __int8 a2)
{
  if (a2 == 2)
  {
    swift_errorRelease();
  }
  else if (a2 <= 1u)
  {
  }
}

uint64_t destroy for ScanwaveView(id *a1)
{
  return swift_release();
}

void *initializeWithCopy for ScanwaveView(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  id v6 = v3;
  id v7 = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScanwaveView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScanwaveView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScanwaveView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScanwaveView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScanwaveView()
{
  return &type metadata for ScanwaveView;
}

uint64_t sub_1000AD13C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000AD158()
{
  unint64_t result = qword_10051D040;
  if (!qword_10051D040)
  {
    type metadata accessor for ScanwaveViewControllerLink();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D040);
  }
  return result;
}

void destroy for ScanwaveViewControllerWrapper(uint64_t a1)
{
  swift_release();

  uint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for ScanwaveViewControllerWrapper(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  id v6 = v4;
  id v7 = v5;
  return a1;
}

void *assignWithCopy for ScanwaveViewControllerWrapper(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  id v7 = (void *)a2[3];
  uint64_t v8 = (void *)a1[3];
  a1[3] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ScanwaveViewControllerWrapper(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for ScanwaveViewControllerWrapper(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScanwaveViewControllerWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScanwaveViewControllerWrapper()
{
  return &type metadata for ScanwaveViewControllerWrapper;
}

uint64_t sub_1000AD3A4()
{
  return sub_100013AA8(&qword_10051D048, &qword_10051D050);
}

unint64_t sub_1000AD3E4()
{
  unint64_t result = qword_10051D058;
  if (!qword_10051D058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D058);
  }
  return result;
}

uint64_t sub_1000AD438(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10000F214(&qword_10051D060);
  UIViewControllerRepresentableContext.coordinator.getter();
  uint64_t v5 = *(void **)(v8 + 24);
  *(void *)(v8 + 24) = a1;
  id v6 = a1;
  swift_release();

  UIViewControllerRepresentableContext.coordinator.getter();
  *(void *)(v8 + 16) = a3;
  swift_retain_n();
  swift_release();
  sub_1000AB144();
  swift_release();
  return swift_release();
}

void sub_1000AD4EC(unsigned char *a1)
{
  sub_1000AB2E0(a1, v1);
}

unint64_t sub_1000AD4F4()
{
  unint64_t result = qword_10051D080;
  if (!qword_10051D080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D080);
  }
  return result;
}

uint64_t sub_1000AD548@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 17);
  char v6 = *a2;
  char v7 = a2[1];
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v3;
  *(unsigned char *)(a3 + 16) = v4;
  *(unsigned char *)(a3 + 17) = v5;
  *(unsigned char *)(a3 + 18) = v6;
  *(unsigned char *)(a3 + 19) = v7;
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000AD5A8@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  char v6 = *((unsigned char *)a1 + 17);
  char v7 = *((unsigned char *)a1 + 18);
  char v8 = *((unsigned char *)a1 + 19);
  char v9 = *((unsigned char *)a1 + 20);
  char v10 = *((unsigned char *)a1 + 21);
  char v11 = *a2;
  char v12 = a2[1];
  char v13 = a2[2];
  char v14 = a2[3];
  char v15 = a2[4];
  char v16 = a2[5];
  *(void *)a3 = v3;
  *(void *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 16) = v5;
  *(unsigned char *)(a3 + 17) = v6;
  *(unsigned char *)(a3 + 18) = v7;
  *(unsigned char *)(a3 + 19) = v8;
  *(unsigned char *)(a3 + 20) = v9;
  *(unsigned char *)(a3 + 21) = v10;
  *(unsigned char *)(a3 + 22) = v11;
  *(unsigned char *)(a3 + 23) = v12;
  *(unsigned char *)(a3 + 24) = v13;
  *(unsigned char *)(a3 + 25) = v14;
  *(unsigned char *)(a3 + 26) = v15;
  *(unsigned char *)(a3 + 27) = v16;
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000AD648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v19[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Binding();
  v19[0] = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v7 = (char *)v19 - v6;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  char v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v15 = (char *)v19 - v14;
  Binding.projectedValue.getter();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v2 + *(int *)(a1 + 36), v4, v8);
  (*(void (**)(char *, uint64_t))(v19[0] + 8))(v7, v5);
  uint64_t v16 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  sub_100224E4C(v12, AssociatedTypeWitness, v16);
  v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, AssociatedTypeWitness);
  sub_100224E4C(v15, AssociatedTypeWitness, v16);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, AssociatedTypeWitness);
}

uint64_t sub_1000AD898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000F214(&qword_10051D088);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v21 - v16;
  sub_10000FB74(a1, a3, qword_10051D090);
  uint64_t v18 = type metadata accessor for CameraControllerConfigurationForm(0);
  sub_1000ADAC8(a2, a3 + *(int *)(v18 + 20), type metadata accessor for CameraControllerConfiguration);
  swift_storeEnumTagMultiPayload();
  sub_1000ADAC8((uint64_t)v17, (uint64_t)v14, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
  State.init(wrappedValue:)();
  sub_1000ADB30((uint64_t)v17);
  uint64_t v19 = type metadata accessor for PhotosPickerItem();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 1, 1, v19);
  sub_10000FB74((uint64_t)v11, (uint64_t)v8, &qword_10051D088);
  State.init(wrappedValue:)();
  return sub_1000ADB8C((uint64_t)v11);
}

uint64_t sub_1000ADAC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000ADB30(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000ADB8C(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051D088);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000ADBEC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  type metadata accessor for UserDefaultsUtility();
  uint64_t v5 = swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t result = ObservationRegistrar.init()();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1000ADC64@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  char v6 = *((unsigned char *)a1 + 16);
  char v7 = *((unsigned char *)a1 + 17);
  char v8 = *a2;
  char v9 = a2[1];
  swift_retain();
  swift_retain();
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = v6;
  *(unsigned char *)(a3 + 17) = v7;
  *(unsigned char *)(a3 + 18) = v8;
  *(unsigned char *)(a3 + 19) = v9;
  *(unsigned char *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v12;
  return result;
}

uint64_t sub_1000ADD04@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  char v5 = *a2;
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v3;
  *(unsigned char *)(a3 + 16) = v4;
  *(unsigned char *)(a3 + 17) = v5;
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000ADD54@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *a3 = *a1;
  a3[1] = v3;
  a3[2] = v4;
  a3[3] = v5;
  a3[4] = v6;
  a3[5] = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000ADDBC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  type metadata accessor for UserDefaultsUtility();
  uint64_t v10 = swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = ObservationRegistrar.init()();
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v7;
  a3[3] = v6;
  a3[4] = v9;
  a3[5] = v8;
  a3[6] = v10;
  return result;
}

uint64_t sub_1000ADE64@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000ADEA4@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  char v6 = *((unsigned char *)a1 + 16);
  char v7 = *((unsigned char *)a1 + 17);
  char v8 = *((unsigned char *)a1 + 18);
  char v9 = *a2;
  char v10 = a2[1];
  char v13 = a2[2];
  type metadata accessor for UserDefaultsUtility();
  uint64_t v11 = swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t result = ObservationRegistrar.init()();
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = v6;
  *(unsigned char *)(a3 + 17) = v7;
  *(unsigned char *)(a3 + 18) = v8;
  *(unsigned char *)(a3 + 19) = v9;
  *(unsigned char *)(a3 + 20) = v10;
  *(unsigned char *)(a3 + 21) = v13;
  *(void *)(a3 + 24) = v11;
  return result;
}

uint64_t sub_1000ADF6C@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1[1];
  *(void *)&long long v4 = a1[2];
  uint64_t v5 = *a2;
  *(void *)a3 = *a1;
  *(void *)(a3 + 8) = v3;
  *((void *)&v4 + 1) = v5;
  *(_OWORD *)(a3 + 16) = v4;
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000ADFBC@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  int v5 = *a2;
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 20) = v5;
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000AE008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1000AE010()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1000AE0E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = ((v6 + 16) & ~v6) + v7 + v6;
  unint64_t v9 = (v8 & ~v6) + v7;
  int v10 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v11 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v10 != 0 || v9 > 0x18)
  {
    a1 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v6;
    uint64_t v16 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v17 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v16 = *v17;
    uint64_t v18 = ((unint64_t)v16 + v6 + 8) & ~v6;
    uint64_t v19 = ((unint64_t)v17 + v6 + 8) & ~v6;
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v20(v18, v19, v4);
    v20(((unint64_t)a1 + v8) & v15, ((unint64_t)a2 + v8) & v15, v4);
  }
  return a1;
}

uint64_t sub_1000AE244(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v10 = v6 + 8;
  uint64_t v11 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  v11(((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v5);
  uint64_t v8 = (v7 + a1 + *(void *)(v10 + 56) + ((v7 + 16) & ~v7)) & ~v7;

  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8, v5);
}

void *sub_1000AE314(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_retain();
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = ((v10 + 16) & ~v10) + *(void *)(v9 + 48) + v10;
  v8(((unint64_t)a1 + v13) & ~v10, ((unint64_t)a2 + v13) & ~v10, v7);
  return a1;
}

void *sub_1000AE40C(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  void *v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24);
  uint64_t v11 = v9 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  v10(((unint64_t)v7 + v12 + 8) & ~v12, (v12 + 8 + v6) & ~v12, v8);
  uint64_t v13 = ((v12 + 16) & ~v12) + *(void *)(v11 + 40) + v12;
  v10(((unint64_t)a1 + v13) & ~v12, ((unint64_t)a2 + v13) & ~v12, v8);
  return a1;
}

void *sub_1000AE50C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  uint64_t v10 = v8 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  v9(((unint64_t)v5 + v11 + 8) & ~v11, ((unint64_t)v6 + v11 + 8) & ~v11, v7);
  uint64_t v12 = ((v11 + 16) & ~v11) + *(void *)(v10 + 32) + v11;
  v9(((unint64_t)a1 + v12) & ~v11, ((unint64_t)a2 + v12) & ~v11, v7);
  return a1;
}

void *sub_1000AE5E0(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  void *v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40);
  uint64_t v11 = v9 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  v10(((unint64_t)v7 + v12 + 8) & ~v12, (v12 + 8 + v6) & ~v12, v8);
  uint64_t v13 = ((v12 + 16) & ~v12) + *(void *)(v11 + 24) + v12;
  v10(((unint64_t)a1 + v13) & ~v12, ((unint64_t)a2 + v13) & ~v12, v8);
  return a1;
}

uint64_t sub_1000AE6D0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v10 = ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6) + v7;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      uint64_t v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
      }
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      return (v17 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void sub_1000AE884(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9 + ((v9 + 16) & ~v9)) & ~v9)
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1000AEAF4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        uint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 8) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ConfigurationFormView()
{
  return sub_1000684BC();
}

uint64_t sub_1000AEB34()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AEB78()
{
  return *(void *)(swift_getAssociatedConformanceWitness() + 8);
}

uint64_t sub_1000AEBE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v38 = a1;
  uint64_t v3 = type metadata accessor for SlideTransition();
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  __chkstk_darwin(v3);
  v35 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v33 = (char *)&v30 - v6;
  uint64_t v7 = sub_10000F214(&qword_10051D2E0);
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000F214(&qword_10051D2E8);
  uint64_t v10 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  unsigned int v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v13 = (void *)static Alignment.bottom.getter();
  uint64_t v15 = v14;
  uint64_t v16 = type metadata accessor for VisualLookupDrillInView();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_1000B0598(v39);
  uint64_t v18 = v17;
  uint64_t v19 = (uint64_t *)(v2 + *(int *)(v16 + 20));
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v43 = v20;
  uint64_t v44 = v21;
  sub_10000F214(&qword_10051D2F0);
  State.wrappedValue.getter();
  v39 = v13;
  uint64_t v40 = v15;
  id v41 = v18;
  uint64_t v42 = 0;
  sub_1000AEFF8((uint64_t)v9);
  static GestureMask.all.getter();
  sub_10000F214(&qword_10051D2F8);
  sub_1000B06F0();
  sub_100013AA8(&qword_10051C3B0, &qword_10051D2E0);
  uint64_t v22 = v32;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v22);

  v23 = v33;
  SlideTransition.init()();
  uint64_t v24 = v36;
  uint64_t v25 = v37;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v35, v23, v37);
  sub_1000B0874(&qword_10051D320, (void (*)(uint64_t))&type metadata accessor for SlideTransition);
  uint64_t v26 = AnyTransition.init<A>(_:)();
  uint64_t v27 = v38;
  uint64_t v28 = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v38, v12, v34);
  *(void *)(v27 + *(int *)(sub_10000F214(&qword_10051D328) + 36)) = v26;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v28);
}

uint64_t sub_1000AEFF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v24 = a1;
  uint64_t v3 = type metadata accessor for VisualLookupDrillInView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalCoordinateSpace();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DragGesture();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214((uint64_t *)&unk_10051D330);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v22 = v12;
  uint64_t v23 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  sub_1000B0790(v2, (uint64_t)v6);
  unint64_t v16 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1000B07F8((uint64_t)v6, v17 + v16);
  sub_1000B0874(&qword_10051C3B8, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_1000B0874((unint64_t *)&unk_10051D340, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  Gesture<>.onChanged(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_1000B0790(v21, (uint64_t)v6);
  uint64_t v18 = swift_allocObject();
  sub_1000B07F8((uint64_t)v6, v18 + v16);
  sub_100013AA8(&qword_10051C3C0, (uint64_t *)&unk_10051D330);
  uint64_t v19 = v22;
  Gesture.onEnded(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v15, v19);
}

uint64_t sub_1000AF3C0()
{
  DragGesture.Value.translation.getter();
  if (v0 >= 0.0)
  {
    sub_10000F214((uint64_t *)&unk_10051D350);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_10043D4F0;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    DragGesture.Value.translation.getter();
    v2._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    *(void *)(v1 + 56) = &type metadata for String;
    *(void *)(v1 + 32) = 0xD000000000000012;
    *(void *)(v1 + 40) = 0x8000000100426430;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    DragGesture.Value.translation.getter();
  }
  type metadata accessor for VisualLookupDrillInView();
  sub_10000F214(&qword_10051D2F0);
  return State.wrappedValue.setter();
}

uint64_t sub_1000AF53C()
{
  return swift_release();
}

uint64_t sub_1000AF5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DismissAction();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  DragGesture.Value.location.getter();
  double v8 = v7;
  DragGesture.Value.startLocation.getter();
  if (v8 - v9 > 150.0)
  {
    sub_10027D098((uint64_t)v6);
    DismissAction.callAsFunction()();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v10 = (uint64_t *)(a2 + *(int *)(type metadata accessor for VisualLookupDrillInView() + 20));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  v14[0] = v11;
  v14[1] = v12;
  v14[3] = 0;
  sub_10000F214(&qword_10051D2F0);
  return State.wrappedValue.setter();
}

id sub_1000AF710(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = objc_allocWithZone((Class)UINavigationBarAppearance);
    id v4 = a2;
    id v5 = [v3 init];
    [v5 configureWithTransparentBackground];
    sub_10000F734(0, &qword_10051D218);
    id v6 = [(id)swift_getObjCClassFromMetadata() appearance];
    [v6 setStandardAppearance:v5];

    sub_10000F214(&qword_10051D220);
    UIViewControllerRepresentableContext.coordinator.getter();
    [v4 setDelegate:v9];

    return v4;
  }
  else
  {
    id v8 = objc_allocWithZone((Class)UINavigationController);
    return [v8 init];
  }
}

id sub_1000AF86C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DrillInHost.Coordinator();
  [super dealloc];
}

uint64_t type metadata accessor for DrillInHost.Coordinator()
{
  return self;
}

void **initializeBufferWithCopyOfBuffer for FrameConsumerContainer.ExecutionMode(void **a1, void **a2)
{
  id v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for FrameConsumerContainer.ExecutionMode(id *a1)
{
}

void **assignWithCopy for DrillInHost(void **a1, void **a2)
{
  id v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void *initializeWithTake for StreamingBarcodeDetectorResult.Action(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for DrillInHost(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for DrillInHost(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DrillInHost(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DrillInHost()
{
  return &type metadata for DrillInHost;
}

id sub_1000AFA40(uint64_t a1)
{
  return sub_1000AF710(a1, *v1);
}

id sub_1000AFA48@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  int v4 = (objc_class *)type metadata accessor for DrillInHost.Coordinator();
  id v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtCV6Tamale11DrillInHost11Coordinator_parent] = v3;
  v8.receiver = v5;
  v8.super_class = v4;
  id v6 = v3;
  id result = [super init];
  *a1 = result;
  return result;
}

uint64_t sub_1000AFAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AFBFC();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000AFB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AFBFC();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000AFB7C()
{
}

unint64_t sub_1000AFBA8()
{
  unint64_t result = qword_10051D210;
  if (!qword_10051D210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D210);
  }
  return result;
}

unint64_t sub_1000AFBFC()
{
  unint64_t result = qword_10051D228;
  if (!qword_10051D228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D228);
  }
  return result;
}

uint64_t *sub_1000AFC50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    int v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000F214((uint64_t *)&unk_1005197E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DismissAction();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      uint64_t *v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (uint64_t *)((char *)v4 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    *(uint64_t *)((char *)v4 + v10) = *(uint64_t *)((char *)a2 + v10);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000AFD84(uint64_t a1)
{
  sub_10000F214((uint64_t *)&unk_1005197E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return swift_release();
}

void *sub_1000AFE34(void *a1, void *a2, uint64_t a3)
{
  sub_10000F214((uint64_t *)&unk_1005197E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1000AFF1C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000B0034((uint64_t)a1);
    sub_10000F214((uint64_t *)&unk_1005197E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000B0034(uint64_t a1)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_1005197E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1000B0094(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_1005197E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  return a1;
}

char *sub_1000B0170(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000B0034((uint64_t)a1);
    uint64_t v6 = sub_10000F214((uint64_t *)&unk_1005197E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DismissAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_release();
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_release();
  return a1;
}

uint64_t sub_1000B0280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B0294);
}

uint64_t sub_1000B0294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051D238);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000B0358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B036C);
}

uint64_t sub_1000B036C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214(&qword_10051D238);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for VisualLookupDrillInView()
{
  uint64_t result = qword_10051D298;
  if (!qword_10051D298) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000B0478()
{
  sub_1000B051C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000B051C()
{
  if (!qword_10051D2A8)
  {
    type metadata accessor for DismissAction();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051D2A8);
    }
  }
}

uint64_t sub_1000B0574()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1000B0598(void *a1)
{
  if (!a1) {
    return;
  }
  id v1 = a1;
  id v2 = [v1 viewControllers];
  sub_10000F734(0, &qword_100519668);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
LABEL_9:

    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v4 = *(id *)(v3 + 32);
LABEL_7:
    int v5 = v4;
    swift_bridgeObjectRelease();
    id v6 = [v5 navigationItem];

    NSString v7 = String._bridgeToObjectiveC()();
    [v6 setTitle:v7];

    return;
  }
  __break(1u);
}

unint64_t sub_1000B06F0()
{
  unint64_t result = qword_10051D300;
  if (!qword_10051D300)
  {
    sub_10000F69C(&qword_10051D2F8);
    sub_100013AA8(&qword_10051D308, (uint64_t *)&unk_10051D310);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D300);
  }
  return result;
}

uint64_t sub_1000B0790(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VisualLookupDrillInView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B07F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VisualLookupDrillInView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B085C(uint64_t a1)
{
  return sub_1000B0A08(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000AF3C0);
}

uint64_t sub_1000B0874(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B08C0()
{
  uint64_t v1 = *(void *)(type metadata accessor for VisualLookupDrillInView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10000F214((uint64_t *)&unk_1005197E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000B09F0(uint64_t a1)
{
  return sub_1000B0A08(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000AF53C);
}

uint64_t sub_1000B0A08(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for VisualLookupDrillInView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_1000B0A8C()
{
  return sub_1000AF5B8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1000B0AAC()
{
  unint64_t result = qword_10051D360;
  if (!qword_10051D360)
  {
    sub_10000F69C(&qword_10051D328);
    sub_10000F69C(&qword_10051D2F8);
    sub_10000F69C(&qword_10051D2E0);
    sub_1000B06F0();
    sub_100013AA8(&qword_10051C3B0, &qword_10051D2E0);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D360);
  }
  return result;
}

double sub_1000B0BD4()
{
  double result = 18.0;
  xmmword_10051D380 = xmmword_100440F20;
  *(_OWORD *)&qword_10051D390 = xmmword_100440F20;
  return result;
}

uint64_t sub_1000B0BEC()
{
  type metadata accessor for DebugToaster(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  uint64_t result = ObservationRegistrar.init()();
  qword_10055E0F8 = v0;
  return result;
}

uint64_t sub_1000B0C3C()
{
  swift_getKeyPath();
  sub_1000B4600(&qword_10051D460, (void (*)(uint64_t))type metadata accessor for DebugToaster);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000B0CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B0D28()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale12DebugToaster___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000B0DD0()
{
  return type metadata accessor for DebugToaster(0);
}

uint64_t type metadata accessor for DebugToaster(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10051D3D0);
}

uint64_t sub_1000B0DF8()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000B0E9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_10000F214(&qword_10051D608);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100440F30;
  uint64_t v5 = *((void *)v1 + 4);
  uint64_t v22 = v5;
  long long v21 = *v1;
  sub_10000F214(&qword_10051D610);
  uint64_t result = State.wrappedValue.getter();
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if ((unint64_t)v20 >= v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = v5 + 32;
  *(void *)(v4 + 32) = *(void *)(v8 + 16 * v20);
  swift_retain();
  uint64_t result = State.wrappedValue.getter();
  if ((unint64_t)v20 < v7)
  {
    *(void *)(v4 + 40) = *(void *)(v8 + 16 * v20 + 8);
    swift_retain();
    specialized Array._endMutation()();
    Gradient.init(colors:)();
    long long v20 = v1[1];
    sub_10000F214(&qword_1005197A8);
    State.wrappedValue.getter();
    cos(__x);
    State.wrappedValue.getter();
    sin(__x);
    State.wrappedValue.getter();
    cos(__x);
    *(void *)&long long v17 = *((void *)&v20 + 1);
    State.wrappedValue.getter();
    sin(__x);
    LinearGradient.init(gradient:startPoint:endPoint:)();
    uint64_t v9 = v20;
    uint64_t v10 = static Animation.easeInOut(duration:)();
    State.wrappedValue.getter();
    static Animation.linear(duration:)();
    uint64_t v11 = Animation.repeatForever(autoreverses:)();
    swift_release();
    State.wrappedValue.getter();
    uint64_t v12 = swift_allocObject();
    long long v13 = v2[1];
    *(_OWORD *)(v12 + 16) = *v2;
    *(_OWORD *)(v12 + 32) = v13;
    *(void *)(v12 + 48) = *((void *)v2 + 4);
    sub_1000B4954((uint64_t)&v21);
    sub_1000B4954((uint64_t)&v20);
    sub_1000B4980((uint64_t)&v22);
    uint64_t v14 = static SafeAreaRegions.all.getter();
    uint64_t result = static Edge.Set.all.getter();
    *(void *)a1 = v9;
    *(_OWORD *)(a1 + 8) = v17;
    *(void *)(a1 + 24) = v18;
    *(void *)(a1 + 32) = v19;
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v16;
    *(void *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = v16;
    *(void *)(a1 + 72) = sub_1000B494C;
    *(void *)(a1 + 80) = v12;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = v14;
    *(unsigned char *)(a1 + 112) = result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000B11A4(long long *a1)
{
  uint64_t v2 = self;
  long long v3 = *a1;
  long long v15 = a1[1];
  long long v16 = v3;
  uint64_t v14 = *((void *)a1 + 4);
  uint64_t v4 = swift_allocObject();
  long long v5 = a1[1];
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 32) = v5;
  *(void *)(v4 + 48) = *((void *)a1 + 4);
  uint64_t v12 = sub_1000B49F8;
  uint64_t v13 = v4;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v10 = sub_100135C58;
  uint64_t v11 = &unk_1004E9558;
  id v6 = _Block_copy(&aBlock);
  sub_1000B4954((uint64_t)&v16);
  sub_1000B4954((uint64_t)&v15);
  sub_1000B4980((uint64_t)&v14);
  swift_release();
  id v7 = [v2 scheduledTimerWithTimeInterval:1 repeats:v6 block:4.0];
  _Block_release(v6);

  long long aBlock = v15;
  sub_10000F214(&qword_1005197A8);
  return State.wrappedValue.setter();
}

uint64_t sub_1000B130C(uint64_t a1, uint64_t a2)
{
  sub_10000F214(&qword_10051D610);
  uint64_t result = State.wrappedValue.getter();
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)(a2 + 32) + 16))
  {
    return State.wrappedValue.setter();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B13A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ToastView(0);
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v2);
  uint64_t v6 = sub_10000F214(&qword_10051D518);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (void *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000F214(&qword_10051D520);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v8 = static Alignment.center.getter();
  v8[1] = v12;
  uint64_t v13 = sub_10000F214(&qword_10051D528);
  sub_1000B1698(v1, (uint64_t)v8 + *(int *)(v13 + 44));
  sub_10000FB74((uint64_t)v8, (uint64_t)v11, &qword_10051D518);
  v11[*(int *)(v9 + 36)] = 0;
  sub_10000FBD8((uint64_t)v8, &qword_10051D518);
  uint64_t v14 = *(void *)(v1 + *(int *)(v3 + 28));
  swift_getKeyPath();
  v19[0] = v14;
  sub_1000B4600(&qword_10051D460, (void (*)(uint64_t))type metadata accessor for DebugToaster);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v15 = *(void *)(v14 + 24);
  v19[0] = *(void *)(v14 + 16);
  v19[1] = v15;
  sub_1000B4598(v1, (uint64_t)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ToastView);
  unint64_t v16 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1000B4190((uint64_t)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  swift_bridgeObjectRetain();
  sub_10000F214(&qword_10051D468);
  sub_1000B4274();
  sub_1000B4314();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000FBD8((uint64_t)v11, &qword_10051D520);
}

uint64_t sub_1000B1698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v143 = type metadata accessor for BlurReplaceTransition.Configuration();
  uint64_t v141 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  v137 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v136 = (char *)&v108 - v6;
  uint64_t v7 = type metadata accessor for BlurReplaceTransition();
  uint64_t v145 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v142 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for OpacityTransition();
  uint64_t v140 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  v138 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051D558);
  uint64_t v147 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v139 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v144 = (char *)&v108 - v13;
  uint64_t v132 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v132);
  v135 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for Material();
  uint64_t v130 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  v128 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for ColorScheme();
  uint64_t v114 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v108 - v18;
  uint64_t v20 = sub_10000F214(&qword_10051D560);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_10051D568);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_10000F214(&qword_10051D570);
  __chkstk_darwin(v115);
  uint64_t v27 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_10000F214(&qword_10051D578);
  __chkstk_darwin(v116);
  v117 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_10000F214(&qword_10051D580);
  __chkstk_darwin(v119);
  uint64_t v122 = (uint64_t)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000F214(&qword_10051D588);
  __chkstk_darwin(v121);
  v126 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000F214(&qword_10051D590);
  __chkstk_darwin(v123);
  uint64_t v127 = (uint64_t)&v108 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_10000F214(&qword_10051D598);
  __chkstk_darwin(v124);
  uint64_t v129 = (uint64_t)&v108 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_10000F214(&qword_10051D5A0);
  __chkstk_darwin(v125);
  uint64_t v134 = (uint64_t)&v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000F214(&qword_10051D5A8);
  uint64_t v148 = *(void *)(v34 - 8);
  uint64_t v149 = v34;
  __chkstk_darwin(v34);
  uint64_t v133 = (uint64_t)&v108 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = (long long *)(a1 + *(int *)(type metadata accessor for ToastView(0) + 24));
  uint64_t v37 = *((void *)v36 + 2);
  long long v154 = *v36;
  uint64_t v155 = v37;
  sub_10000F214(&qword_10051D550);
  State.wrappedValue.getter();
  uint64_t v38 = v151;
  if (v151)
  {
    uint64_t v111 = v10;
    uint64_t v112 = v7;
    uint64_t v113 = a2;
    uint64_t v39 = v150;
    *(void *)uint64_t v22 = static HorizontalAlignment.leading.getter();
    *((void *)v22 + 1) = 0x4010000000000000;
    v22[16] = 0;
    uint64_t v40 = (uint64_t)&v22[*(int *)(sub_10000F214(&qword_10051D5B0) + 44)];
    uint64_t v110 = v39;
    sub_1000B2630(v39, v38, v40);
    uint64_t v109 = v38;
    if (qword_100517DD8 != -1) {
      swift_once();
    }
    long long v108 = xmmword_10051D380;
    uint64_t v42 = qword_10051D390;
    uint64_t v41 = unk_10051D398;
    char v43 = static Edge.Set.all.getter();
    sub_10000FB74((uint64_t)v22, (uint64_t)v25, &qword_10051D560);
    uint64_t v44 = &v25[*(int *)(v23 + 36)];
    *uint64_t v44 = v43;
    *(_OWORD *)(v44 + 8) = v108;
    *((void *)v44 + 3) = v42;
    *((void *)v44 + 4) = v41;
    v44[40] = 0;
    sub_10000FBD8((uint64_t)v22, &qword_10051D560);
    uint64_t v45 = static Alignment.center.getter();
    uint64_t v47 = v46;
    v48 = v19;
    sub_10027CA80((uint64_t)v19);
    uint64_t v49 = v114;
    v50 = v118;
    uint64_t v51 = v120;
    (*(void (**)(char *, void, uint64_t))(v114 + 104))(v118, enum case for ColorScheme.light(_:), v120);
    char v52 = static ColorScheme.== infix(_:_:)();
    v53 = *(void (**)(char *, uint64_t))(v49 + 8);
    v53(v50, v51);
    v53(v48, v51);
    if (v52) {
      double v54 = 0.8;
    }
    else {
      double v54 = 0.3;
    }
    sub_10000FB74((uint64_t)v25, (uint64_t)v27, &qword_10051D568);
    v55 = &v27[*(int *)(v115 + 36)];
    *(void *)v55 = &off_1004E5218;
    *((double *)v55 + 1) = v54;
    *((void *)v55 + 2) = 0x3FE3333333333333;
    *((void *)v55 + 3) = v45;
    *((void *)v55 + 4) = v47;
    sub_10000FBD8((uint64_t)v25, &qword_10051D568);
    v56 = v128;
    static Material.thin.getter();
    char v57 = static Edge.Set.all.getter();
    uint64_t v58 = (uint64_t)v117;
    v59 = &v117[*(int *)(v116 + 36)];
    uint64_t v60 = v130;
    uint64_t v61 = v131;
    (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v59, v56, v131);
    v59[*(int *)(sub_10000F214(&qword_1005190E0) + 36)] = v57;
    sub_10000FB74((uint64_t)v27, v58, &qword_10051D570);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v61);
    sub_10000FBD8((uint64_t)v27, &qword_10051D570);
    sub_1000B409C(&v154);
    long long v62 = v154;
    uint64_t v63 = v155;
    uint64_t v64 = v156;
    uint64_t v65 = v157;
    uint64_t v66 = static Alignment.center.getter();
    uint64_t v68 = v67;
    uint64_t v69 = v122;
    sub_10000FB74(v58, v122, &qword_10051D578);
    uint64_t v70 = v69 + *(int *)(v119 + 36);
    *(_OWORD *)uint64_t v70 = v62;
    *(void *)(v70 + 16) = v63;
    *(void *)(v70 + 24) = v64;
    *(void *)(v70 + 32) = v65;
    *(void *)(v70 + 40) = 0x3FE6666666666666;
    *(void *)(v70 + 48) = v66;
    *(void *)(v70 + 56) = v68;
    sub_10000FBD8(v58, &qword_10051D578);
    v71 = v135;
    v72 = &v135[*(int *)(v132 + 20)];
    uint64_t v73 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v74 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v74 - 8) + 104))(v72, v73, v74);
    __asm { FMOV            V0.2D, #28.0 }
    _OWORD *v71 = _Q0;
    uint64_t v80 = (uint64_t)v126;
    uint64_t v81 = (uint64_t)&v126[*(int *)(v121 + 36)];
    sub_1000B4598((uint64_t)v71, v81, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    *(_WORD *)(v81 + *(int *)(sub_10000F214(&qword_100519008) + 36)) = 256;
    sub_10000FB74(v69, v80, &qword_10051D580);
    sub_10002D5A4((uint64_t)v71);
    sub_10000FBD8(v69, &qword_10051D580);
    static Color.black.getter();
    uint64_t v82 = Color.opacity(_:)();
    swift_release();
    uint64_t v83 = v127;
    sub_10000FB74(v80, v127, &qword_10051D588);
    uint64_t v84 = v83 + *(int *)(v123 + 36);
    *(void *)uint64_t v84 = v82;
    *(_OWORD *)(v84 + 8) = xmmword_10043D5B0;
    *(void *)(v84 + 24) = 0x4010000000000000;
    sub_10000FBD8(v80, &qword_10051D588);
    LOBYTE(v81) = static Edge.Set.all.getter();
    uint64_t v85 = v129;
    sub_10000FB74(v83, v129, &qword_10051D590);
    uint64_t v86 = v85 + *(int *)(v124 + 36);
    *(unsigned char *)uint64_t v86 = v81;
    *(_OWORD *)(v86 + 8) = 0u;
    *(_OWORD *)(v86 + 24) = 0u;
    *(unsigned char *)(v86 + 40) = 1;
    sub_10000FBD8(v83, &qword_10051D590);
    uint64_t v87 = static Animation.easeInOut(duration:)();
    uint64_t v88 = v134;
    sub_10000FB74(v85, v134, &qword_10051D598);
    v89 = (uint64_t *)(v88 + *(int *)(v125 + 36));
    uint64_t v90 = v110;
    uint64_t *v89 = v87;
    v89[1] = v90;
    v89[2] = v109;
    sub_10000FBD8(v85, &qword_10051D598);
    v91 = v138;
    OpacityTransition.init()();
    v92 = v136;
    static BlurReplaceTransition.Configuration.downUp.getter();
    uint64_t v93 = v141;
    uint64_t v94 = v143;
    (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v137, v92, v143);
    v95 = v142;
    BlurReplaceTransition.init(configuration:)();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v92, v94);
    uint64_t v96 = sub_1000B4600(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
    uint64_t v97 = sub_1000B4600(&qword_10051D5C0, (void (*)(uint64_t))&type metadata accessor for BlurReplaceTransition);
    v98 = v144;
    uint64_t v99 = v146;
    uint64_t v100 = v112;
    Transition.combined<A>(with:)();
    (*(void (**)(char *, uint64_t))(v145 + 8))(v95, v100);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v91, v99);
    uint64_t v101 = v147;
    uint64_t v102 = v111;
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v139, v98, v111);
    uint64_t v150 = v99;
    uint64_t v151 = v100;
    uint64_t v152 = v96;
    uint64_t v153 = v97;
    swift_getOpaqueTypeConformance2();
    uint64_t v103 = AnyTransition.init<A>(_:)();
    uint64_t v104 = v133;
    sub_10000FB74(v88, v133, &qword_10051D5A0);
    uint64_t v105 = v149;
    *(void *)(v104 + *(int *)(v149 + 36)) = v103;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v98, v102);
    sub_10000FBD8(v88, &qword_10051D5A0);
    a2 = v113;
    sub_10000FC34(v104, v113, &qword_10051D5A8);
    uint64_t v106 = 0;
  }
  else
  {
    uint64_t v106 = 1;
    uint64_t v105 = v149;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 56))(a2, v106, 1, v105);
}

uint64_t sub_1000B2630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v90 = a1;
  uint64_t v91 = a2;
  uint64_t v102 = a3;
  uint64_t v3 = sub_10000F214(&qword_10051D5C8);
  uint64_t v100 = *(void *)(v3 - 8);
  uint64_t v101 = v3;
  __chkstk_darwin(v3);
  v92 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000F214(&qword_10051D5D0) - 8;
  __chkstk_darwin(v97);
  uint64_t v93 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000F214(&qword_10051D5D8) - 8;
  __chkstk_darwin(v99);
  uint64_t v95 = (uint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000F214(&qword_10051D5E0) - 8;
  __chkstk_darwin(v98);
  uint64_t v94 = (uint64_t)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v96 = (uint64_t)&v77 - v9;
  uint64_t v10 = sub_10000F214(&qword_100519C60);
  __chkstk_darwin(v10 - 8);
  uint64_t v103 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100519C68);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_10000F214(&qword_100519C70);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_100519C78);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_100519C80);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  v77 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000F214(&qword_10051D5E8) - 8;
  __chkstk_darwin(v83);
  uint64_t v24 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000F214(&qword_10051D5F0) - 8;
  __chkstk_darwin(v88);
  uint64_t v81 = (uint64_t)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000F214(&qword_10051D5F8) - 8;
  __chkstk_darwin(v89);
  uint64_t v84 = (uint64_t)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v87 = (uint64_t)&v77 - v28;
  uint64_t v29 = enum case for Text.Case.uppercase(_:);
  uint64_t v30 = type metadata accessor for Text.Case();
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v18, v29, v30);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v18, 0, 1, v30);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v18, (uint64_t)v15 + *(int *)(v13 + 36), &qword_100519C70);
  *uint64_t v15 = KeyPath;
  sub_10000FB74((uint64_t)v15, (uint64_t)&v21[*(int *)(v19 + 36)], &qword_100519C68);
  *(_OWORD *)uint64_t v21 = xmmword_10043D880;
  v21[16] = 0;
  *((void *)v21 + 3) = _swiftEmptyArrayStorage;
  sub_10000FBD8((uint64_t)v15, &qword_100519C68);
  sub_10000FBD8((uint64_t)v18, &qword_100519C70);
  uint64_t v33 = enum case for Font.Design.rounded(_:);
  unsigned int v80 = enum case for Font.Design.rounded(_:);
  uint64_t v34 = type metadata accessor for Font.Design();
  uint64_t v35 = *(void *)(v34 - 8);
  v79 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 104);
  uint64_t v36 = (uint64_t)v103;
  v79(v103, v33, v34);
  v78 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56);
  v78(v36, 0, 1, v34);
  sub_10003199C(&qword_100519CA0, &qword_100519C78, &qword_100519CA8, &qword_100519C68);
  uint64_t v37 = v77;
  View.fontDesign(_:)();
  sub_10000FBD8(v36, &qword_100519C60);
  sub_10000FBD8((uint64_t)v21, &qword_100519C78);
  id v82 = self;
  id v38 = [v82 secondaryLabelColor];
  uint64_t v39 = Color.init(uiColor:)();
  uint64_t v40 = swift_getKeyPath();
  uint64_t v41 = v85;
  uint64_t v42 = v86;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v24, v37, v86);
  char v43 = (uint64_t *)&v24[*(int *)(v83 + 44)];
  *char v43 = v40;
  v43[1] = v39;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v37, v42);
  static Font.caption.getter();
  static Font.Weight.semibold.getter();
  uint64_t v44 = Font.weight(_:)();
  swift_release();
  uint64_t v45 = swift_getKeyPath();
  uint64_t v46 = v81;
  sub_10000FB74((uint64_t)v24, v81, &qword_10051D5E8);
  uint64_t v47 = (uint64_t *)(v46 + *(int *)(v88 + 44));
  *uint64_t v47 = v45;
  v47[1] = v44;
  sub_10000FBD8((uint64_t)v24, &qword_10051D5E8);
  uint64_t v48 = swift_getKeyPath();
  uint64_t v49 = v84;
  sub_10000FB74(v46, v84, &qword_10051D5F0);
  uint64_t v50 = v49 + *(int *)(v89 + 44);
  *(void *)uint64_t v50 = v48;
  *(void *)(v50 + 8) = 1;
  *(unsigned char *)(v50 + 16) = 0;
  sub_10000FBD8(v46, &qword_10051D5F0);
  uint64_t v51 = v87;
  sub_10000FC34(v49, v87, &qword_10051D5F8);
  uint64_t v104 = v90;
  uint64_t v105 = v91;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v52 = Text.init<A>(_:)();
  uint64_t v54 = v53;
  LOBYTE(v40) = v55;
  uint64_t v57 = v56;
  uint64_t v58 = swift_getKeyPath();
  uint64_t v104 = v52;
  uint64_t v105 = v54;
  char v106 = v40 & 1;
  uint64_t v107 = v57;
  uint64_t v108 = v58;
  char v109 = 0;
  uint64_t v59 = (uint64_t)v103;
  v79(v103, v80, v34);
  v78(v59, 0, 1, v34);
  sub_10000F214(&qword_100519C40);
  sub_10003199C((unint64_t *)&qword_100519C38, &qword_100519C40, &qword_100518C38, &qword_100518C40);
  uint64_t v60 = v92;
  View.fontDesign(_:)();
  sub_10000FBD8(v59, &qword_100519C60);
  sub_100012FAC(v104, v105, v106);
  swift_bridgeObjectRelease();
  swift_release();
  id v61 = [v82 labelColor];
  uint64_t v62 = Color.init(uiColor:)();
  uint64_t v63 = swift_getKeyPath();
  uint64_t v65 = v100;
  uint64_t v64 = v101;
  uint64_t v66 = (uint64_t)v93;
  (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v93, v60, v101);
  uint64_t v67 = (uint64_t *)(v66 + *(int *)(v97 + 44));
  *uint64_t v67 = v63;
  v67[1] = v62;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v60, v64);
  uint64_t v68 = swift_getKeyPath();
  uint64_t v69 = v95;
  sub_10000FB74(v66, v95, &qword_10051D5D0);
  uint64_t v70 = v69 + *(int *)(v99 + 44);
  *(void *)uint64_t v70 = v68;
  *(void *)(v70 + 8) = 5;
  *(unsigned char *)(v70 + 16) = 0;
  sub_10000FBD8(v66, &qword_10051D5D0);
  uint64_t v71 = v94;
  sub_10000FB74(v69, v94, &qword_10051D5D8);
  *(_WORD *)(v71 + *(int *)(v98 + 44)) = 256;
  sub_10000FBD8(v69, &qword_10051D5D8);
  uint64_t v72 = v71;
  uint64_t v73 = v96;
  sub_10000FC34(v71, v96, &qword_10051D5E0);
  sub_10000FB74(v51, v49, &qword_10051D5F8);
  sub_10000FB74(v73, v71, &qword_10051D5E0);
  uint64_t v74 = v102;
  sub_10000FB74(v49, v102, &qword_10051D5F8);
  uint64_t v75 = sub_10000F214(&qword_10051D600);
  sub_10000FB74(v72, v74 + *(int *)(v75 + 48), &qword_10051D5E0);
  sub_10000FBD8(v73, &qword_10051D5E0);
  sub_10000FBD8(v51, &qword_10051D5F8);
  sub_10000FBD8(v72, &qword_10051D5E0);
  return sub_10000FBD8(v49, &qword_10051D5F8);
}

uint64_t sub_1000B3150(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ToastView(0);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v5);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = a3;
  long long v20 = *a2;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  uint64_t v10 = *(int *)(v6 + 36);
  long long aBlock = *(_OWORD *)(a3 + v10);
  sub_10000F214(&qword_10051D548);
  State.wrappedValue.getter();
  id v11 = v26;
  [v26 invalidate];

  uint64_t v12 = self;
  sub_1000B4598(a3, (uint64_t)v9, type metadata accessor for ToastView);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = swift_allocObject();
  sub_1000B4190((uint64_t)v9, v14 + v13);
  uint64_t v24 = sub_1000B44F4;
  uint64_t v25 = v14;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v22 = sub_100135C58;
  uint64_t v23 = &unk_1004E9458;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_release();
  id v16 = [v12 scheduledTimerWithTimeInterval:0 repeats:v15 block:1.0];
  _Block_release(v15);
  long long aBlock = *(_OWORD *)(a3 + v10);
  id v26 = v16;
  return State.wrappedValue.setter();
}

uint64_t sub_1000B33A8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000B3430()
{
  return swift_release();
}

uint64_t sub_1000B349C()
{
  return State.wrappedValue.setter();
}

double sub_1000B350C@<D0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v2 = (int *)type metadata accessor for ToastView(0);
  uint64_t v3 = v2[5];
  if (qword_100517DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)a1 + v3) = qword_10055E0F8;
  uint64_t v4 = (char *)a1 + v2[6];
  swift_retain();
  sub_10000F214(&qword_10051D468);
  State.init(wrappedValue:)();
  *(_OWORD *)uint64_t v4 = v7;
  *((void *)v4 + 2) = v8;
  uint64_t v5 = v2[7];
  sub_10000F214(&qword_10051D470);
  State.init(wrappedValue:)();
  double result = *(double *)&v7;
  *(_OWORD *)((char *)a1 + v5) = v7;
  return result;
}

uint64_t type metadata accessor for ToastView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10051D4D0);
}

uint64_t *sub_1000B3648(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      uint64_t *v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v10 = (uint64_t *)((char *)v4 + v9);
    id v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    v10[2] = v11[2];
    uint64_t v13 = a3[7];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v17 = *(void **)v15;
    uint64_t v16 = *((void *)v15 + 1);
    *uint64_t v14 = *(void *)v15;
    v14[1] = v16;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v18 = v17;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000B37B4(uint64_t a1, uint64_t a2)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *sub_1000B388C(void *a1, void *a2, int *a3)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v15 = *(void **)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *uint64_t v12 = *(void *)v13;
  v12[1] = v14;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v16 = v15;
  swift_retain();
  return a1;
}

void *sub_1000B39AC(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  swift_retain();
  swift_release();
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *(void *)((char *)a2 + v7);
  v8[1] = *(void *)((char *)a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[2] = *((void *)v9 + 2);
  swift_retain();
  swift_release();
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void **)((char *)a1 + v10);
  uint64_t v14 = *(void **)v12;
  *uint64_t v11 = *(void *)v12;
  id v15 = v14;

  v11[1] = *((void *)v12 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_1000B3B24(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((void *)v9 + 2) = *((void *)v10 + 2);
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *sub_1000B3C1C(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v6 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  uint64_t v8 = a3[6];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)&a2[v8 + 8];
  *(void *)uint64_t v9 = *(void *)&a2[v8];
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  *((void *)v9 + 2) = *((void *)v10 + 2);
  swift_release();
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  id v15 = *(void **)&a1[v12];
  *(void *)uint64_t v13 = *(void *)v14;

  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_release();
  return a1;
}

uint64_t sub_1000B3D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B3D84);
}

uint64_t sub_1000B3D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000B3E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B3E5C);
}

uint64_t sub_1000B3E5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214(&qword_100522CF0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

void sub_1000B3F1C()
{
  sub_100027A88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000B3FC8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B3FE4()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_1000B4008(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100519C70);
  __chkstk_darwin(v2 - 8);
  sub_10000FB74(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100519C70);
  return EnvironmentValues.textCase.setter();
}

uint64_t sub_1000B409C@<X0>(void *a1@<X8>)
{
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  sub_10000F214(&qword_10051D510);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10043F3F0;
  *(void *)(v2 + 32) = static Color.red.getter();
  *(void *)(v2 + 40) = static Color.indigo.getter();
  *(void *)(v2 + 48) = static Color.purple.getter();
  *(void *)(v2 + 56) = static Color.orange.getter();
  *(void *)(v2 + 64) = static Color.red.getter();
  *(void *)(v2 + 72) = static Color.purple.getter();
  *(void *)(v2 + 80) = static Color.purple.getter();
  uint64_t result = static Color.red.getter();
  *(void *)(v2 + 88) = result;
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v2;
  return result;
}

uint64_t sub_1000B4190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToastView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B41F4(uint64_t a1, long long *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ToastView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000B3150(a1, a2, v6);
}

unint64_t sub_1000B4274()
{
  unint64_t result = qword_10051D530;
  if (!qword_10051D530)
  {
    sub_10000F69C(&qword_10051D520);
    sub_100013AA8(&qword_10051D538, &qword_10051D518);
    sub_10002D694();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D530);
  }
  return result;
}

unint64_t sub_1000B4314()
{
  unint64_t result = qword_10051D540;
  if (!qword_10051D540)
  {
    sub_10000F69C(&qword_10051D468);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D540);
  }
  return result;
}

uint64_t sub_1000B4380()
{
  return sub_1000B33A8();
}

uint64_t sub_1000B43A4()
{
  uint64_t v1 = type metadata accessor for ToastView(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000B44F4()
{
  type metadata accessor for ToastView(0);

  return sub_1000B3430();
}

uint64_t sub_1000B4564(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B4574()
{
  return swift_release();
}

uint64_t sub_1000B457C()
{
  return sub_1000B349C();
}

uint64_t sub_1000B4598(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B4600(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B4648()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t destroy for OscillatingGradientView()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for OscillatingGradientView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OscillatingGradientView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OscillatingGradientView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OscillatingGradientView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OscillatingGradientView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OscillatingGradientView()
{
  return &type metadata for OscillatingGradientView;
}

uint64_t sub_1000B48AC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B492C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B494C()
{
  return sub_1000B11A4((long long *)(v0 + 16));
}

uint64_t sub_1000B4954(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B4980(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B49B0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000B49F8(uint64_t a1)
{
  return sub_1000B130C(a1, v1 + 16);
}

uint64_t sub_1000B4A00()
{
  return sub_1000B4A74(&qword_10051D618, &qword_10051D620, (void (*)(void))sub_1000B4A44);
}

uint64_t sub_1000B4A44()
{
  return sub_1000B4A74(&qword_10051D628, &qword_10051D630, (void (*)(void))sub_1000B4AF0);
}

uint64_t sub_1000B4A74(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B4AF0()
{
  unint64_t result = qword_10051D638;
  if (!qword_10051D638)
  {
    sub_10000F69C(&qword_10051D640);
    sub_1000B4B90();
    sub_100013AA8(&qword_10051D670, &qword_10051D678);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D638);
  }
  return result;
}

unint64_t sub_1000B4B90()
{
  unint64_t result = qword_10051D648;
  if (!qword_10051D648)
  {
    sub_10000F69C(&qword_10051D650);
    sub_1000B4C30();
    sub_100013AA8(&qword_10051D660, &qword_10051D668);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D648);
  }
  return result;
}

unint64_t sub_1000B4C30()
{
  unint64_t result = qword_10051D658;
  if (!qword_10051D658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D658);
  }
  return result;
}

unint64_t sub_1000B4C8C(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x616F626E4F736168;
      break;
    case 3:
      unint64_t result = 0xD000000000000023;
      break;
    case 4:
      unint64_t result = 0xD000000000000025;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000B4D4C(char a1)
{
  unint64_t result = 0xD000000000000019;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD000000000000023;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000B4DE4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000B4E84()
{
  return type metadata accessor for UserDefaultsUtility();
}

uint64_t type metadata accessor for UserDefaultsUtility()
{
  uint64_t result = qword_10051D6B0;
  if (!qword_10051D6B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B4ED8()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000B4F68()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000B5074((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_1000B50DC((uint64_t)v6);
  }
  return 1;
}

uint64_t sub_1000B5074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051B448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B50DC(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051B448);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000B513C()
{
  id v0 = self;
  id v1 = [v0 standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setBool:0 forKey:v2];

  id v3 = [v0 standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 setBool:0 forKey:v4];

  id v5 = [v0 standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 setBool:0 forKey:v6];

  id v7 = [v0 standardUserDefaults];
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 setBool:0 forKey:v8];
}

uint64_t sub_1000B52EC()
{
  id v0 = self;
  id v1 = [v0 standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  unsigned __int8 v3 = [v1 BOOLForKey:v2];

  if (v3) {
    return 1;
  }
  id v4 = [v0 standardUserDefaults];
  NSString v5 = String._bridgeToObjectiveC()();
  unsigned __int8 v6 = [v4 BOOLForKey:v5];

  if (v6) {
    return 1;
  }
  id v7 = [v0 standardUserDefaults];
  NSString v8 = String._bridgeToObjectiveC()();
  unsigned __int8 v9 = [v7 BOOLForKey:v8];

  if (v9) {
    return 1;
  }
  id v12 = [v0 standardUserDefaults];
  NSString v13 = String._bridgeToObjectiveC()();
  id v10 = [v12 BOOLForKey:v13];

  return (uint64_t)v10;
}

void sub_1000B54A4()
{
  qword_10051D820 = 0x4062000000000000;
}

uint64_t sub_1000B54B4()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unsigned __int8 v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_10051CD38);
  type metadata accessor for Material.Layer();
  uint64_t v4 = swift_allocObject();
  long long v6 = xmmword_10043D4F0;
  *(_OWORD *)(v4 + 16) = xmmword_10043D4F0;
  sub_10000F214(&qword_10051CD40);
  type metadata accessor for Material.Layer.Filter();
  *(_OWORD *)(swift_allocObject() + 16) = v6;
  static Material.Layer.Filter.gaussianBlur(radius:isOpaque:isDithered:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Color.RGBColorSpace.sRGB(_:), v0);
  Color.Resolved.init(colorSpace:red:green:blue:opacity:)();
  static Material.Layer.backdrop(scale:color:filters:)();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000B5700@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v81 = a1;
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v74 = *(void *)(v3 - 8);
  uint64_t v75 = v3;
  __chkstk_darwin(v3);
  uint64_t v72 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051D830);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000F214(&qword_10051D838);
  __chkstk_darwin(v65);
  id v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  NSString v13 = (char *)&v64 - v12;
  uint64_t v14 = sub_10000F214(&qword_10051D840);
  uint64_t v68 = *(void *)(v14 - 8);
  uint64_t v69 = v14;
  __chkstk_darwin(v14);
  uint64_t v66 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_10051D848);
  __chkstk_darwin(v64);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000F214(&qword_10051D850);
  __chkstk_darwin(v67);
  uint64_t v71 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000F214(&qword_10051D858);
  __chkstk_darwin(v70);
  uint64_t v73 = (uint64_t)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000F214(&qword_10051D860);
  __chkstk_darwin(v77);
  uint64_t v80 = (uint64_t)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000F214(&qword_10051D868);
  uint64_t v78 = *(void *)(v21 - 8);
  uint64_t v79 = v21;
  __chkstk_darwin(v21);
  v76 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (_OWORD *)swift_allocObject();
  long long v24 = *(_OWORD *)(v2 + 48);
  v23[3] = *(_OWORD *)(v2 + 32);
  v23[4] = v24;
  long long v25 = *(_OWORD *)(v2 + 80);
  v23[5] = *(_OWORD *)(v2 + 64);
  v23[6] = v25;
  long long v26 = *(_OWORD *)(v2 + 16);
  v23[1] = *(_OWORD *)v2;
  v23[2] = v26;
  uint64_t v82 = v2;
  sub_1000BBD44(v2);
  sub_10000F214(&qword_10051D870);
  sub_100013AA8(&qword_10051D878, &qword_10051D870);
  Button.init(action:label:)();
  sub_100013AA8(&qword_10051D880, &qword_10051D830);
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v83 = *(_OWORD *)(v2 + 32);
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  LocalizedStringKey.init(stringLiteral:)();
  ModifiedContent<>.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FBD8((uint64_t)v10, &qword_10051D838);
  sub_1000BBDD4();
  sub_1000BBEA4();
  uint64_t v27 = v66;
  View.buttonStyle<A>(_:)();
  sub_10000FBD8((uint64_t)v13, &qword_10051D838);
  uint64_t v29 = v74;
  uint64_t v28 = v75;
  uint64_t v30 = v72;
  (*(void (**)(char *, void, uint64_t))(v74 + 104))(v72, enum case for ColorScheme.light(_:), v75);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = (uint64_t *)&v17[*(int *)(v64 + 36)];
  uint64_t v33 = sub_10000F214(&qword_10051B788);
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))((char *)v32 + *(int *)(v33 + 28), v30, v28);
  *uint64_t v32 = KeyPath;
  uint64_t v35 = v68;
  uint64_t v34 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v17, v27, v69);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v28);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v34);
  uint64_t v36 = (uint64_t (*)())swift_allocObject();
  long long v37 = *(_OWORD *)(v2 + 48);
  *((_OWORD *)v36 + 3) = *(_OWORD *)(v2 + 32);
  *((_OWORD *)v36 + 4) = v37;
  long long v38 = *(_OWORD *)(v2 + 80);
  *((_OWORD *)v36 + 5) = *(_OWORD *)(v2 + 64);
  *((_OWORD *)v36 + 6) = v38;
  long long v39 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v36 + 1) = *(_OWORD *)v2;
  *((_OWORD *)v36 + 2) = v39;
  uint64_t v40 = v71;
  sub_10000FB74((uint64_t)v17, v71, &qword_10051D848);
  uint64_t v41 = (uint64_t (**)())(v40 + *(int *)(v67 + 36));
  *uint64_t v41 = sub_1000BBF04;
  v41[1] = v36;
  sub_1000BBD44(v2);
  sub_10000FBD8((uint64_t)v17, &qword_10051D848);
  uint64_t v42 = (uint64_t (*)(char))swift_allocObject();
  long long v43 = *(_OWORD *)(v2 + 48);
  *((_OWORD *)v42 + 3) = *(_OWORD *)(v2 + 32);
  *((_OWORD *)v42 + 4) = v43;
  long long v44 = *(_OWORD *)(v2 + 80);
  *((_OWORD *)v42 + 5) = *(_OWORD *)(v2 + 64);
  *((_OWORD *)v42 + 6) = v44;
  long long v45 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v42 + 1) = *(_OWORD *)v2;
  *((_OWORD *)v42 + 2) = v45;
  uint64_t v46 = v73;
  sub_10000FB74(v40, v73, &qword_10051D850);
  uint64_t v47 = (uint64_t (**)(char))(v46 + *(int *)(v70 + 36));
  *uint64_t v47 = sub_1000BBF34;
  v47[1] = v42;
  sub_1000BBD44(v2);
  sub_10000FBD8(v40, &qword_10051D850);
  uint64_t v48 = (uint64_t (*)())swift_allocObject();
  long long v49 = *(_OWORD *)(v2 + 48);
  *((_OWORD *)v48 + 3) = *(_OWORD *)(v2 + 32);
  *((_OWORD *)v48 + 4) = v49;
  long long v50 = *(_OWORD *)(v2 + 80);
  *((_OWORD *)v48 + 5) = *(_OWORD *)(v2 + 64);
  *((_OWORD *)v48 + 6) = v50;
  long long v51 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v48 + 1) = *(_OWORD *)v2;
  *((_OWORD *)v48 + 2) = v51;
  uint64_t v52 = v80;
  sub_10000FB74(v46, v80, &qword_10051D858);
  uint64_t v53 = (uint64_t (**)())(v52 + *(int *)(v77 + 36));
  *uint64_t v53 = sub_1000BBF40;
  v53[1] = v48;
  v53[2] = 0;
  v53[3] = 0;
  sub_1000BBD44(v2);
  sub_10000FBD8(v46, &qword_10051D858);
  LOBYTE(v42) = *(unsigned char *)(v2 + 8);
  uint64_t v54 = swift_retain();
  uint64_t v55 = sub_10027CDAC(v54, (char)v42);
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v83 = v55;
  sub_1000BD984((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v56 = *(void *)(v55 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v57 = *(void *)(v55 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  LOBYTE(v46) = *(unsigned char *)(v55 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v56, v57, v46);
  swift_release();
  *(void *)&long long v83 = v56;
  *((void *)&v83 + 1) = v57;
  char v84 = v46;
  uint64_t v58 = (_OWORD *)swift_allocObject();
  long long v59 = *(_OWORD *)(v2 + 48);
  v58[3] = *(_OWORD *)(v2 + 32);
  v58[4] = v59;
  long long v60 = *(_OWORD *)(v2 + 80);
  v58[5] = *(_OWORD *)(v2 + 64);
  v58[6] = v60;
  long long v61 = *(_OWORD *)(v2 + 16);
  v58[1] = *(_OWORD *)v2;
  v58[2] = v61;
  sub_1000BBD44(v2);
  sub_1000BBFE4();
  sub_1000BC2A0();
  uint64_t v62 = v76;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_1000BC2F4(v83, *((uint64_t *)&v83 + 1), v84);
  sub_10000FBD8(v52, &qword_10051D860);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v78 + 32))(v81, v62, v79);
}

uint64_t sub_1000B6108@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = static Alignment.center.getter();
  a2[1] = v4;
  uint64_t v5 = sub_10000F214(&qword_10051D8D8);
  return sub_1000B6150(a1, (uint64_t)a2 + *(int *)(v5 + 44));
}

uint64_t sub_1000B6150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v91 = a2;
  uint64_t v89 = sub_10000F214(&qword_10051D8E0);
  __chkstk_darwin(v89);
  uint64_t v90 = (uint64_t)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for BlurReplaceTransition.Configuration();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  v76 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v74 = (char *)&v62 - v6;
  uint64_t v88 = type metadata accessor for BlurReplaceTransition();
  uint64_t v85 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v69 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for OpacityTransition();
  uint64_t v79 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_10051D558);
  uint64_t v75 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v77 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  NSString v13 = (char *)&v62 - v12;
  uint64_t v14 = sub_10000F214(&qword_10051D8E8);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10000F214(&qword_10051D8F0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000F214(&qword_10051D8F8);
  __chkstk_darwin(v71);
  uint64_t v78 = (uint64_t)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000F214(&qword_10051D900);
  __chkstk_darwin(v72);
  uint64_t v87 = (uint64_t)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  long long v24 = (char *)&v62 - v23;
  __chkstk_darwin(v25);
  uint64_t v82 = (uint64_t)&v62 - v26;
  uint64_t v27 = sub_10000F214(&qword_10051D908);
  __chkstk_darwin(v27 - 8);
  uint64_t v80 = (uint64_t)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v31 = (uint64_t *)((char *)&v62 - v30);
  *uint64_t v31 = static Alignment.center.getter();
  v31[1] = v32;
  uint64_t v33 = *(int *)(sub_10000F214(&qword_10051D910) + 44);
  uint64_t v73 = v31;
  sub_1000B6BD8(a1, (uint64_t)v31 + v33);
  long long v100 = *(_OWORD *)(a1 + 32);
  long long v95 = *(_OWORD *)(a1 + 32);
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v92 == 1) {
    uint64_t v34 = static Color.clear.getter();
  }
  else {
    uint64_t v34 = static Color.white.getter();
  }
  uint64_t v70 = v34;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v68 = v95;
  int v67 = BYTE8(v95);
  uint64_t v66 = v96;
  int v65 = v97;
  uint64_t v64 = v98;
  uint64_t v63 = v99;
  *uint64_t v16 = static Alignment.center.getter();
  v16[1] = v35;
  uint64_t v36 = sub_10000F214(&qword_10051D918);
  sub_1000B8180(a1, (uint64_t)v16 + *(int *)(v36 + 44));
  long long v92 = v100;
  State.wrappedValue.getter();
  sub_100013AA8(&qword_10051D920, &qword_10051D8E8);
  View.accessibilityIdentifier(_:)();
  swift_bridgeObjectRelease();
  sub_10000FBD8((uint64_t)v16, &qword_10051D8E8);
  OpacityTransition.init()();
  long long v37 = v74;
  static BlurReplaceTransition.Configuration.downUp.getter();
  uint64_t v38 = v83;
  uint64_t v39 = v84;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v76, v37, v84);
  uint64_t v40 = v69;
  BlurReplaceTransition.init(configuration:)();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
  uint64_t v41 = sub_1000BD984(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
  uint64_t v42 = sub_1000BD984(&qword_10051D5C0, (void (*)(uint64_t))&type metadata accessor for BlurReplaceTransition);
  uint64_t v43 = v81;
  uint64_t v44 = v88;
  Transition.combined<A>(with:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v40, v44);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v9, v43);
  uint64_t v45 = v75;
  uint64_t v46 = v86;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v77, v13, v86);
  *(void *)&long long v92 = v43;
  *((void *)&v92 + 1) = v44;
  uint64_t v93 = v41;
  uint64_t v94 = v42;
  swift_getOpaqueTypeConformance2();
  uint64_t v47 = AnyTransition.init<A>(_:)();
  uint64_t v48 = v78;
  sub_10000FB74((uint64_t)v19, v78, &qword_10051D8F0);
  *(void *)(v48 + *(int *)(v71 + 36)) = v47;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
  sub_10000FBD8((uint64_t)v19, &qword_10051D8F0);
  uint64_t v49 = static Alignment.center.getter();
  uint64_t v51 = v50;
  uint64_t v52 = v90;
  sub_10000FB74(v48, v90, &qword_10051D8F8);
  uint64_t v53 = (uint64_t *)(v52 + *(int *)(v89 + 36));
  *uint64_t v53 = v49;
  v53[1] = v51;
  sub_10000FB74(v52, (uint64_t)&v24[*(int *)(v72 + 36)], &qword_10051D8E0);
  *(void *)long long v24 = v70;
  *((_WORD *)v24 + 4) = 256;
  *((void *)v24 + 2) = v68;
  v24[24] = v67;
  *((void *)v24 + 4) = v66;
  v24[40] = v65;
  uint64_t v54 = v63;
  *((void *)v24 + 6) = v64;
  *((void *)v24 + 7) = v54;
  v24[64] = 0;
  swift_retain();
  sub_10000FBD8(v52, &qword_10051D8E0);
  sub_10000FBD8(v48, &qword_10051D8F8);
  swift_release();
  uint64_t v55 = v82;
  sub_10000FC34((uint64_t)v24, v82, &qword_10051D900);
  uint64_t v56 = (uint64_t)v73;
  uint64_t v57 = v80;
  sub_10000FB74((uint64_t)v73, v80, &qword_10051D908);
  uint64_t v58 = v87;
  sub_10000FB74(v55, v87, &qword_10051D900);
  uint64_t v59 = v91;
  sub_10000FB74(v57, v91, &qword_10051D908);
  uint64_t v60 = sub_10000F214(&qword_10051D928);
  sub_10000FB74(v58, v59 + *(int *)(v60 + 48), &qword_10051D900);
  sub_10000FBD8(v55, &qword_10051D900);
  sub_10000FBD8(v56, &qword_10051D908);
  sub_10000FBD8(v58, &qword_10051D900);
  return sub_10000FBD8(v57, &qword_10051D908);
}

uint64_t sub_1000B6BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v100 = (_OWORD *)a1;
  uint64_t v94 = a2;
  uint64_t v2 = type metadata accessor for Material();
  uint64_t v106 = *(void *)(v2 - 8);
  uint64_t v107 = v2;
  __chkstk_darwin(v2);
  uint64_t v105 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_10051ADF0);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051D988);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v110 = (uint64_t)&v81 - v13;
  uint64_t v14 = sub_10000F214(&qword_10051D990);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (uint64_t *)((char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10000F214(&qword_10051D998);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v81 - v22;
  *uint64_t v16 = static Alignment.center.getter();
  v16[1] = v24;
  uint64_t v25 = sub_10000F214(&qword_10051D9A0);
  sub_1000B74D8((uint64_t)v100, (uint64_t)v16 + *(int *)(v25 + 44));
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FB74((uint64_t)v16, (uint64_t)v20, &qword_10051D990);
  uint64_t v26 = &v20[*(int *)(v18 + 44)];
  long long v27 = v165;
  *(_OWORD *)uint64_t v26 = v164;
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v166;
  sub_10000FBD8((uint64_t)v16, &qword_10051D990);
  uint64_t v108 = v23;
  char v109 = v20;
  sub_10000FC34((uint64_t)v20, (uint64_t)v23, &qword_10051D998);
  sub_1000BC60C();
  uint64_t v28 = v105;
  Material.init<A>(provider:)();
  uint64_t v30 = v106;
  uint64_t v29 = v107;
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v7, v28, v107);
  *(_WORD *)&v7[*(int *)(v5 + 64)] = 256;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FB74((uint64_t)v7, (uint64_t)v11, &qword_10051ADF0);
  uint64_t v31 = &v11[*(int *)(v9 + 44)];
  long long v32 = v168;
  *(_OWORD *)uint64_t v31 = v167;
  *((_OWORD *)v31 + 1) = v32;
  *((_OWORD *)v31 + 2) = v169;
  uint64_t v33 = (uint64_t)v7;
  uint64_t v34 = v100;
  sub_10000FBD8(v33, &qword_10051ADF0);
  uint64_t v99 = v11;
  sub_10000FC34((uint64_t)v11, v110, &qword_10051D988);
  long long v150 = v34[4];
  sub_10000F214(&qword_10051D9B0);
  State.wrappedValue.getter();
  uint64_t v107 = v112[0];
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  int v35 = v171;
  uint64_t v105 = v172;
  uint64_t v106 = v170;
  int v36 = v173;
  uint64_t v103 = v175;
  uint64_t v104 = v174;
  uint64_t v37 = static Alignment.center.getter();
  uint64_t v101 = v38;
  uint64_t v102 = v37;
  sub_1000B7EEC((uint64_t)v188);
  long long v150 = v34[2];
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if ((v112[0] & 1) != 0 || (v150 = v34[3], State.wrappedValue.getter(), double v39 = 1.0, (v112[0] & 1) == 0)) {
    double v39 = 0.0;
  }
  double v85 = v39;
  memcpy(v111, v188, 0x128uLL);
  char v163 = v35;
  char v162 = v36;
  static Color.white.getter();
  uint64_t v93 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v40 = v176;
  unsigned int v91 = v178;
  unsigned int v92 = v177;
  uint64_t v41 = v179;
  uint64_t v90 = v180;
  uint64_t v42 = v181;
  uint64_t v43 = static Alignment.center.getter();
  uint64_t v88 = v44;
  uint64_t v89 = v43;
  int v84 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v82 = v50;
  uint64_t v83 = v49;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v81 = v182;
  int v86 = v36;
  int v87 = v35;
  unsigned __int8 v51 = v183;
  long long v100 = (_OWORD *)v184;
  unsigned __int8 v52 = v185;
  uint64_t v97 = v187;
  uint64_t v98 = v186;
  long long v150 = v34[2];
  State.wrappedValue.getter();
  if (LOBYTE(v112[0])) {
    double v53 = 1.0;
  }
  else {
    double v53 = 0.0;
  }
  v111[312] = 0;
  v111[304] = v51;
  v111[296] = v52;
  int v95 = v51;
  int v96 = v52;
  uint64_t v54 = (uint64_t)v109;
  sub_10000FB74((uint64_t)v108, (uint64_t)v109, &qword_10051D998);
  uint64_t v55 = (uint64_t)v99;
  sub_10000FB74(v110, (uint64_t)v99, &qword_10051D988);
  uint64_t v56 = v94;
  sub_10000FB74(v54, v94, &qword_10051D998);
  uint64_t v57 = (int *)sub_10000F214(&qword_10051D9B8);
  sub_10000FB74(v55, v56 + v57[12], &qword_10051D988);
  uint64_t v58 = (void *)(v56 + v57[16]);
  v112[0] = v107;
  v112[1] = v106;
  LOBYTE(v112[2]) = v35;
  v112[3] = v105;
  LOBYTE(v112[4]) = v36;
  v112[5] = v104;
  v112[6] = v103;
  v112[7] = v102;
  v112[8] = v101;
  memcpy(&v112[9], v188, 0x128uLL);
  *(double *)&v112[46] = v39;
  v112[47] = 0x3FE0000000000000;
  LOBYTE(v112[48]) = 0;
  memcpy(v58, v112, 0x181uLL);
  uint64_t v59 = (_OWORD *)(v56 + v57[20]);
  *(void *)&long long v113 = v40;
  LODWORD(v57) = v91;
  LODWORD(v56) = v92;
  *((void *)&v113 + 1) = __PAIR64__(v91, v92);
  *(void *)&long long v114 = v41;
  uint64_t v61 = v89;
  uint64_t v60 = v90;
  *((void *)&v114 + 1) = v90;
  uint64_t v62 = v42;
  *(void *)&long long v115 = v42;
  uint64_t v63 = v93;
  *((void *)&v115 + 1) = v93;
  LOWORD(v116) = 256;
  *((void *)&v116 + 1) = v89;
  uint64_t v64 = v88;
  *(void *)&long long v117 = v88;
  char v65 = v84;
  BYTE8(v117) = v84;
  uint64_t v66 = v46;
  *(void *)&long long v118 = v46;
  uint64_t v67 = v48;
  *((void *)&v118 + 1) = v48;
  uint64_t v69 = v82;
  uint64_t v68 = v83;
  *(void *)&long long v119 = v83;
  *((void *)&v119 + 1) = v82;
  LOBYTE(v120) = 0;
  uint64_t v70 = v81;
  *((void *)&v120 + 1) = v81;
  LOBYTE(v121) = v95;
  *((void *)&v121 + 1) = v100;
  LOBYTE(v122) = v96;
  *((void *)&v122 + 1) = v98;
  *(void *)&long long v123 = v97;
  *((void *)&v123 + 1) = 0x3FE0000000000000;
  LOBYTE(v124) = 0;
  *((double *)&v124 + 1) = v53;
  long long v71 = v117;
  long long v72 = v118;
  long long v73 = v120;
  v59[6] = v119;
  v59[7] = v73;
  v59[4] = v71;
  v59[5] = v72;
  long long v74 = v113;
  long long v75 = v114;
  long long v76 = v116;
  v59[2] = v115;
  v59[3] = v76;
  _OWORD *v59 = v74;
  v59[1] = v75;
  long long v77 = v121;
  long long v78 = v122;
  long long v79 = v124;
  v59[10] = v123;
  v59[11] = v79;
  v59[8] = v77;
  v59[9] = v78;
  sub_1000BC660((uint64_t)v112);
  sub_1000BC70C((uint64_t)&v113);
  sub_10000FBD8(v110, &qword_10051D988);
  sub_10000FBD8((uint64_t)v108, &qword_10051D998);
  uint64_t v125 = v40;
  int v126 = v56;
  int v127 = (int)v57;
  uint64_t v128 = v41;
  uint64_t v129 = v60;
  uint64_t v130 = v62;
  uint64_t v131 = v63;
  __int16 v132 = 256;
  uint64_t v133 = v61;
  uint64_t v134 = v64;
  char v135 = v65;
  uint64_t v136 = v66;
  uint64_t v137 = v67;
  uint64_t v138 = v68;
  uint64_t v139 = v69;
  char v140 = 0;
  uint64_t v141 = v70;
  char v142 = v95;
  uint64_t v143 = (uint64_t)v100;
  char v144 = v96;
  uint64_t v145 = v98;
  uint64_t v146 = v97;
  uint64_t v147 = 0x3FE0000000000000;
  char v148 = 0;
  double v149 = v53;
  sub_1000BC744((uint64_t)&v125);
  *(void *)&long long v150 = v107;
  *((void *)&v150 + 1) = v106;
  char v151 = v87;
  uint64_t v152 = v105;
  char v153 = v86;
  uint64_t v154 = v104;
  uint64_t v155 = v103;
  uint64_t v156 = v102;
  uint64_t v157 = v101;
  memcpy(v158, v111, sizeof(v158));
  double v159 = v85;
  uint64_t v160 = 0x3FE0000000000000;
  char v161 = 0;
  sub_1000BC77C((uint64_t)&v150);
  sub_10000FBD8((uint64_t)v99, &qword_10051D988);
  return sub_10000FBD8((uint64_t)v109, &qword_10051D998);
}

uint64_t sub_1000B74D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v90 = a2;
  uint64_t v91 = a1;
  uint64_t v2 = sub_10000F214(&qword_10051D9D8);
  __chkstk_darwin(v2 - 8);
  uint64_t v88 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for ColorRenderingMode();
  uint64_t v78 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  long long v76 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051D9E0);
  uint64_t v85 = *(void *)(v5 - 8);
  uint64_t v86 = v5;
  __chkstk_darwin(v5);
  uint64_t v83 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000F214(&qword_10051D9E8);
  __chkstk_darwin(v79);
  int v84 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000F214(&qword_10051D9F0);
  __chkstk_darwin(v87);
  uint64_t v89 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v9 - 8);
  long long v75 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BlendMode();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051D9F8);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000F214(&qword_10051DA00);
  __chkstk_darwin(v77);
  uint64_t v81 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = static Color.black.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v21 = v106;
  LODWORD(v82) = v107;
  uint64_t v74 = v108;
  int v73 = v109;
  uint64_t v71 = v111;
  uint64_t v72 = v110;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for BlendMode.destinationOut(_:), v11);
  uint64_t v22 = (uint64_t)v75;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v75, v14, v11);
  sub_1000BC82C(v22, (uint64_t)&v18[*(int *)(v16 + 44)]);
  *(void *)uint64_t v18 = v20;
  *((void *)v18 + 1) = 0x3FF0000000000000;
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = v21;
  v18[40] = (char)v82;
  *((void *)v18 + 6) = v74;
  v18[56] = v73;
  uint64_t v82 = v18;
  uint64_t v23 = v71;
  *((void *)v18 + 8) = v72;
  *((void *)v18 + 9) = v23;
  swift_retain();
  sub_1000BC890(v22);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_release();
  v146[0] = *(_OWORD *)(v91 + 80);
  sub_10000F214(&qword_10051D9B0);
  State.wrappedValue.getter();
  long long v75 = (char *)v93;
  if (qword_100517DE8 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v74 = v112;
  int v73 = v113;
  uint64_t v72 = v114;
  LODWORD(v71) = v115;
  uint64_t v69 = v117;
  uint64_t v70 = v116;
  uint64_t v24 = static Alignment.center.getter();
  uint64_t v67 = v25;
  uint64_t v68 = v24;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  unint64_t v26 = v118;
  uint64_t v27 = v120;
  uint64_t v66 = v121;
  uint64_t v28 = v122;
  char v29 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v38 = v123;
  char v39 = v124;
  uint64_t v40 = v125;
  char v41 = v126;
  uint64_t v42 = v127;
  uint64_t v43 = v128;
  char v139 = 0;
  char v137 = v124;
  char v135 = v126;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  char v144 = v130;
  char v142 = v132;
  *(void *)&long long v93 = v68;
  *((void *)&v93 + 1) = v67;
  unsigned long long v94 = __PAIR128__(v119, v26);
  *(void *)&long long v95 = v27;
  *((void *)&v95 + 1) = v66;
  *(void *)&long long v96 = v28;
  BYTE8(v96) = v29;
  *(_DWORD *)((char *)&v96 + 9) = *(_DWORD *)v140;
  HIDWORD(v96) = *(_DWORD *)&v140[3];
  *(void *)&long long v97 = v31;
  *((void *)&v97 + 1) = v33;
  *(void *)&long long v98 = v35;
  *((void *)&v98 + 1) = v37;
  LOBYTE(v99[0]) = 0;
  DWORD1(v99[0]) = *(_DWORD *)&v138[3];
  *(_DWORD *)((char *)v99 + 1) = *(_DWORD *)v138;
  *(_OWORD *)((char *)v99 + 8) = xmmword_100441220;
  *((void *)&v99[1] + 1) = v38;
  LOBYTE(v100) = v39;
  *(_DWORD *)((char *)&v100 + 1) = *(_DWORD *)v136;
  DWORD1(v100) = *(_DWORD *)&v136[3];
  *((void *)&v100 + 1) = v40;
  LOBYTE(v101) = v41;
  DWORD1(v101) = *(_DWORD *)&v134[3];
  *(_DWORD *)((char *)&v101 + 1) = *(_DWORD *)v134;
  *((void *)&v101 + 1) = v42;
  *(void *)&long long v102 = v43;
  *((void *)&v102 + 1) = 0x4030000000000000;
  LOBYTE(v103) = 0;
  *(_DWORD *)((char *)&v103 + 1) = *(_DWORD *)v145;
  DWORD1(v103) = *(_DWORD *)&v145[3];
  *((void *)&v103 + 1) = v129;
  LOBYTE(v104) = v130;
  *(_DWORD *)((char *)&v104 + 1) = *(_DWORD *)v143;
  DWORD1(v104) = *(_DWORD *)&v143[3];
  *((void *)&v104 + 1) = v131;
  LOBYTE(v105[0]) = v132;
  DWORD1(v105[0]) = *(_DWORD *)&v141[3];
  *(_DWORD *)((char *)v105 + 1) = *(_DWORD *)v141;
  *(_OWORD *)((char *)v105 + 8) = v133;
  uint64_t v44 = v78;
  uint64_t v45 = v76;
  uint64_t v46 = v80;
  (*(void (**)(char *, void, uint64_t))(v78 + 104))(v76, enum case for ColorRenderingMode.nonLinear(_:), v80);
  sub_10000F214(&qword_10051DA08);
  sub_1000BC8EC();
  uint64_t v47 = v83;
  View.drawingGroup(opaque:colorMode:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  v146[12] = v104;
  v146[13] = v105[0];
  uint64_t v147 = *(void *)&v105[1];
  v146[8] = v100;
  v146[9] = v101;
  v146[10] = v102;
  v146[11] = v103;
  v146[4] = v97;
  v146[5] = v98;
  v146[6] = v99[0];
  v146[7] = v99[1];
  v146[0] = v93;
  v146[1] = v94;
  v146[2] = v95;
  v146[3] = v96;
  sub_1000BC98C((uint64_t)v146);
  uint64_t v49 = v85;
  uint64_t v48 = v86;
  uint64_t v50 = (uint64_t)v88;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v88, v47, v86);
  uint64_t v51 = (uint64_t)v84;
  sub_10000FB74(v50, (uint64_t)&v84[*(int *)(v79 + 36)], &qword_10051D9D8);
  uint64_t v52 = v74;
  *(void *)uint64_t v51 = v75;
  *(void *)(v51 + 8) = v52;
  *(unsigned char *)(v51 + 16) = v73;
  *(void *)(v51 + 24) = v72;
  *(unsigned char *)(v51 + 32) = v71;
  uint64_t v53 = v69;
  *(void *)(v51 + 40) = v70;
  *(void *)(v51 + 48) = v53;
  *(void *)(v51 + 56) = 0x3FE3333333333333;
  swift_bridgeObjectRetain();
  sub_10000FBD8(v50, &qword_10051D9D8);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v48);
  swift_bridgeObjectRelease();
  uint64_t v54 = v91;
  long long v93 = *(_OWORD *)(v91 + 32);
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if ((v92 & 1) != 0 || (long long v93 = *(_OWORD *)(v54 + 48), State.wrappedValue.getter(), v55 = 1.0, (v92 & 1) == 0)) {
    double v55 = 0.0;
  }
  uint64_t v56 = v89;
  sub_10000FB74(v51, v89, &qword_10051D9E8);
  *(double *)(v56 + *(int *)(v87 + 36)) = v55;
  sub_10000FBD8(v51, &qword_10051D9E8);
  uint64_t v57 = static Alignment.center.getter();
  uint64_t v59 = v58;
  uint64_t v60 = (uint64_t)v81;
  uint64_t v61 = (uint64_t)&v81[*(int *)(v77 + 36)];
  sub_10000FB74(v56, v61, &qword_10051D9F0);
  uint64_t v62 = (uint64_t *)(v61 + *(int *)(sub_10000F214(qword_10051DA28) + 36));
  *uint64_t v62 = v57;
  v62[1] = v59;
  uint64_t v63 = (uint64_t)v82;
  sub_10000FB74((uint64_t)v82, v60, &qword_10051D9F8);
  sub_10000FBD8(v56, &qword_10051D9F0);
  sub_10000FBD8(v63, &qword_10051D9F8);
  return sub_10000FC34(v60, v90, &qword_10051DA00);
}

double sub_1000B7EEC@<D0>(uint64_t a1@<X8>)
{
  sub_10000F214(&qword_10051D9C0);
  State.init(wrappedValue:)();
  sub_10000F214(&qword_10051D9C8);
  State.init(wrappedValue:)();
  sub_10000F214(&qword_10051D9D0);
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  char v2 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = v16;
  *(unsigned char *)(a1 + 40) = v2;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = v18;
  *(unsigned char *)(a1 + 112) = v19;
  *(void *)(a1 + 120) = v20;
  *(void *)(a1 + 128) = v21;
  *(void *)(a1 + 136) = v22;
  *(void *)(a1 + 144) = v23;
  *(void *)(a1 + 152) = v22;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = v22;
  *(void *)(a1 + 176) = v23;
  *(_OWORD *)(a1 + 184) = xmmword_100441230;
  *(_OWORD *)(a1 + 200) = xmmword_100441240;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = v22;
  *(void *)(a1 + 232) = v23;
  *(void *)(a1 + 240) = 7;
  *(void *)(a1 + 248) = v22;
  *(unsigned char *)(a1 + 256) = v23;
  *(void *)(a1 + 264) = v24;
  *(unsigned char *)(a1 + 272) = v25;
  double result = *(double *)&v26;
  *(_OWORD *)(a1 + 280) = v26;
  return result;
}

uint64_t sub_1000B8180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_10051D930);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000F214(&qword_10051D938);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DynamicTypeSize();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int v73 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051D940);
  uint64_t v71 = *(void *)(v13 - 8);
  uint64_t v72 = v13;
  __chkstk_darwin(v13);
  uint64_t v69 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051D948);
  uint64_t v74 = *(void *)(v15 - 8);
  uint64_t v75 = v15;
  __chkstk_darwin(v15);
  uint64_t v70 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000F214(&qword_10051D950);
  __chkstk_darwin(v68);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v53 - v20;
  long long v79 = *(_OWORD *)(a1 + 32);
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v76 == 1)
  {
    static Color.white.getter();
    uint64_t v65 = Color.opacity(_:)();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v62 = v79;
    int v61 = BYTE8(v79);
    uint64_t v60 = v80;
    int v59 = v81;
    uint64_t v58 = v82;
    uint64_t v57 = v83;
    uint64_t v22 = Image.init(_internalSystemName:)();
    double v55 = v18;
    uint64_t v23 = v22;
    uint64_t v24 = static Font.title.getter();
    uint64_t v56 = v21;
    uint64_t v25 = v24;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v67 = a2;
    uint64_t v76 = v23;
    uint64_t v77 = KeyPath;
    uint64_t v78 = v25;
    static Font.Weight.regular.getter();
    uint64_t v63 = v6;
    uint64_t v54 = v10;
    uint64_t v27 = sub_10000F214(&qword_10051C1A8);
    uint64_t v64 = v4;
    uint64_t v28 = v27;
    unint64_t v29 = sub_10008D63C();
    uint64_t v66 = v7;
    unint64_t v30 = v29;
    uint64_t v31 = v69;
    View.fontWeight(_:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v32 = v73;
    uint64_t v33 = v54;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v73, enum case for DynamicTypeSize.large(_:), v54);
    uint64_t v76 = v28;
    uint64_t v77 = v30;
    swift_getOpaqueTypeConformance2();
    uint64_t v34 = v70;
    uint64_t v35 = v72;
    View.dynamicTypeSize(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v31, v35);
    uint64_t v36 = static Color.white.getter();
    uint64_t v37 = swift_getKeyPath();
    uint64_t v39 = v74;
    uint64_t v38 = v75;
    uint64_t v40 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v55, v34, v75);
    char v41 = (uint64_t *)(v40 + *(int *)(v68 + 36));
    *char v41 = v37;
    v41[1] = v36;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v38);
    uint64_t v42 = (uint64_t)v56;
    sub_10000FC34(v40, (uint64_t)v56, &qword_10051D950);
    sub_10000FB74(v42, v40, &qword_10051D950);
    *(void *)uint64_t v9 = v65;
    *((void *)v9 + 1) = 0x4024000000000000;
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 3) = 0;
    *((void *)v9 + 4) = v62;
    v9[40] = v61;
    *((void *)v9 + 6) = v60;
    v9[56] = v59;
    uint64_t v43 = v57;
    *((void *)v9 + 8) = v58;
    *((void *)v9 + 9) = v43;
    uint64_t v44 = sub_10000F214(&qword_10051D980);
    sub_10000FB74(v40, (uint64_t)&v9[*(int *)(v44 + 48)], &qword_10051D950);
    swift_retain_n();
    sub_10000FBD8(v40, &qword_10051D950);
    swift_release();
    sub_10000FB74((uint64_t)v9, (uint64_t)v63, &qword_10051D938);
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_10051D958);
    sub_100013AA8(&qword_10051D960, &qword_10051D938);
    sub_1000BC540();
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8((uint64_t)v9, &qword_10051D938);
    sub_10000FBD8(v42, &qword_10051D950);
    return swift_release();
  }
  else
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t v46 = v79;
    uint64_t v47 = v80;
    uint64_t v48 = v81;
    uint64_t v49 = v82;
    static Color.black.getter();
    uint64_t v50 = Color.opacity(_:)();
    swift_release();
    uint64_t v51 = swift_getKeyPath();
    uint64_t v52 = *((void *)&v79 + 1);
    void *v6 = v46;
    v6[1] = v52;
    v6[2] = v47;
    v6[3] = v48;
    v6[4] = v49;
    v6[5] = v51;
    v6[6] = v50;
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_10051D958);
    sub_100013AA8(&qword_10051D960, &qword_10051D938);
    sub_1000BC540();
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t sub_1000B896C(char a1)
{
  if (a1 == 1)
  {
    uint64_t v1 = static Animation.linear(duration:)();
    __chkstk_darwin(v1);
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  else
  {
    sub_10000F214(&qword_100522EA0);
    return State.wrappedValue.setter();
  }
}

uint64_t sub_1000B8A40()
{
  return swift_release();
}

uint64_t sub_1000B8AB8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  char v10 = *(unsigned char *)(a2 + 16);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  type metadata accessor for MainActor();
  sub_1000BBF50(v8, v9, v10);
  sub_1000BBD44((uint64_t)a3);
  uint64_t v12 = static MainActor.shared.getter();
  uint64_t v13 = swift_allocObject();
  long long v14 = a3[3];
  *(_OWORD *)(v13 + 88) = a3[2];
  *(_OWORD *)(v13 + 104) = v14;
  long long v15 = a3[5];
  *(_OWORD *)(v13 + 120) = a3[4];
  *(_OWORD *)(v13 + 136) = v15;
  long long v16 = a3[1];
  *(_OWORD *)(v13 + 56) = *a3;
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  *(void *)(v13 + 32) = v8;
  *(void *)(v13 + 40) = v9;
  *(unsigned char *)(v13 + 48) = v10;
  *(_OWORD *)(v13 + 72) = v16;
  sub_100064D5C((uint64_t)v7, (uint64_t)&unk_10051D8D0, v13);
  return swift_release();
}

uint64_t sub_1000B8C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(void *)(v7 + 32) = a7;
  *(unsigned char *)(v7 + 50) = a6;
  type metadata accessor for MainActor();
  *(void *)(v7 + 40) = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000B8CB8, v9, v8);
}

uint64_t sub_1000B8CB8()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 50);
  swift_release();
  int v2 = 0;
  switch(v1)
  {
    case 1:
      goto LABEL_3;
    case 3:
      int v2 = 1;
LABEL_3:
      uint64_t v3 = *(void *)(v0 + 32);
      *(unsigned char *)(v0 + 48) = v2;
      *(_OWORD *)(v0 + 16) = *(_OWORD *)(v3 + 32);
      sub_10000F214(&qword_100522EA0);
      State.wrappedValue.getter();
      if (v2 != *(unsigned __int8 *)(v0 + 49))
      {
        uint64_t v4 = *(void *)(v0 + 32);
        static Animation.easeInOut(duration:)();
        uint64_t v5 = swift_task_alloc();
        *(void *)(v5 + 16) = v4;
        *(void *)(v5 + 24) = v0 + 48;
        withAnimation<A>(_:_:)();
        swift_release();
        swift_task_dealloc();
      }
      break;
    default:
      break;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000B8E0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v1 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051DAC0);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051DAC8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000F214(&qword_10051DAD0);
  uint64_t v12 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  long long v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v15 = 0.85;
  }
  else {
    double v15 = 1.0;
  }
  static UnitPoint.center.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v8, v4, v1);
  uint64_t v20 = &v8[*(int *)(v6 + 44)];
  *(double *)uint64_t v20 = v15;
  *((double *)v20 + 1) = v15;
  *((void *)v20 + 2) = v17;
  *((void *)v20 + 3) = v19;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  ButtonStyleConfiguration.isPressed.getter();
  uint64_t v21 = static Animation.spring(response:dampingFraction:blendDuration:)();
  char v22 = ButtonStyleConfiguration.isPressed.getter();
  sub_10000FB74((uint64_t)v8, (uint64_t)v11, &qword_10051DAC0);
  uint64_t v23 = &v11[*(int *)(v9 + 36)];
  *(void *)uint64_t v23 = v21;
  v23[8] = v22 & 1;
  sub_10000FBD8((uint64_t)v8, &qword_10051DAC0);
  char v28 = ButtonStyleConfiguration.isPressed.getter() & 1;
  sub_1000BD838();
  View.onChange<A>(of:initial:_:)();
  sub_10000FBD8((uint64_t)v11, &qword_10051DAC8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v27, v14, v26);
}

uint64_t sub_1000B9178@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B5700(a1);
}

void *sub_1000B91BC(void *result)
{
  uint64_t v2 = *(void *)(v1 + *((int *)result + 14));
  if ((unsigned __int128)(v2 * (__int128)v2) >> 64 == (v2 * v2) >> 63)
  {
    if (((v2 * v2) & 0x8000000000000000) == 0)
    {
      __chkstk_darwin(result);
      v5[1] = *(_OWORD *)(v3 + 16);
      uint64_t v6 = v1;
      return sub_1002ED16C(sub_1000BDB30, (uint64_t)v5, 0, v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B9254@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = type metadata accessor for ShutterButtonNoiseView();
  uint64_t v8 = *(void *)(a2 + *(int *)(result + 56));
  if (v8)
  {
    if (v5 == 0x8000000000000000 && v8 == -1) {
      goto LABEL_10;
    }
    if (!__OFSUB__(v8, 1))
    {
      *(float *)v7.i32 = (float)(v8 - 1);
      v10.i64[0] = v5 % v8;
      v10.i64[1] = v5 / v8;
      *a3 = vdiv_f32(vcvt_f32_f64(vcvtq_f64_s64(v10)), (float32x2_t)vdup_lane_s32(v7, 0));
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000B92F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v58 = a2;
  uint64_t v56 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v56 + 64);
  __chkstk_darwin(a1);
  uint64_t v60 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for AnimationTimelineSchedule();
  __chkstk_darwin(v47);
  uint64_t v41 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MeshGradient();
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v55 = *(void *)(a1 + 16);
  uint64_t v53 = a1;
  uint64_t v54 = v7;
  type metadata accessor for _MaskEffect();
  type metadata accessor for ModifiedContent();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = sub_1000BD984(&qword_10051DAE8, (void (*)(uint64_t))&type metadata accessor for MeshGradient);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v70 = v10;
  uint64_t v71 = WitnessTable;
  uint64_t v57 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v68 = swift_getWitnessTable();
  uint64_t v69 = &protocol witness table for _RotationEffect;
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v13 = sub_1000BD984(&qword_10051DAF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v64 = v8;
  uint64_t v65 = v9;
  uint64_t v66 = v12;
  uint64_t v67 = v13;
  swift_getOpaqueTypeMetadata2();
  uint64_t v64 = v8;
  uint64_t v65 = v9;
  uint64_t v66 = v12;
  uint64_t v67 = v13;
  swift_getOpaqueTypeConformance2();
  uint64_t v44 = type metadata accessor for ZStack();
  uint64_t v46 = sub_1000BD984(&qword_10051DAF8, (void (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule);
  uint64_t v48 = type metadata accessor for TimelineView();
  uint64_t v51 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  int v59 = (char *)v40 - v14;
  uint64_t v50 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v45 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v49 = (char *)v40 - v17;
  AnimationTimelineSchedule.init(minimumInterval:paused:)();
  uint64_t v18 = v56;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
  uint64_t v19 = v60;
  uint64_t v20 = v53;
  v42(v60, v3, v53);
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  v40[1] = v22 + v5;
  v40[0] = v21 | 7;
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v54;
  uint64_t v25 = v55;
  *(void *)(v23 + 16) = v55;
  *(void *)(v23 + 24) = v24;
  uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 32);
  v26(v23 + v22, v19, v20);
  uint64_t v27 = v44;
  uint64_t v28 = swift_getWitnessTable();
  sub_1000BAE10(v41, (uint64_t)sub_1000BD9D0, v23, v47, v27, v46, v28);
  unint64_t v29 = v60;
  v42(v60, v43, v20);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v25;
  *(void *)(v30 + 24) = v24;
  v26(v30 + v22, v29, v20);
  uint64_t v63 = v28;
  uint64_t v31 = v48;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v45;
  uint64_t v34 = v59;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v31);
  uint64_t v61 = v32;
  uint64_t v62 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v35 = v50;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = v49;
  sub_100224E4C(v33, v35, v36);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v52 + 8);
  v38(v33, v35);
  sub_100224E4C(v37, v35, v36);
  return ((uint64_t (*)(char *, uint64_t))v38)(v37, v35);
}

uint64_t sub_1000B99B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a1;
  uint64_t v25 = a4;
  type metadata accessor for MeshGradient();
  type metadata accessor for _MaskEffect();
  type metadata accessor for ModifiedContent();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v36 = sub_1000BD984(&qword_10051DAE8, (void (*)(uint64_t))&type metadata accessor for MeshGradient);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v35 = &protocol witness table for _RotationEffect;
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v7 = sub_1000BD984(&qword_10051DAF0, (void (*)(uint64_t))&type metadata accessor for Date);
  swift_getOpaqueTypeMetadata2();
  uint64_t v30 = v4;
  uint64_t v31 = v5;
  uint64_t v32 = v6;
  uint64_t v33 = v7;
  swift_getOpaqueTypeConformance2();
  uint64_t v8 = type metadata accessor for ZStack();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v22 - v17;
  sub_10000F214(qword_10051DB18);
  TimelineView.Context.date.getter();
  uint64_t v26 = v22;
  uint64_t v27 = v23;
  uint64_t v28 = v24;
  unint64_t v29 = v18;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  uint64_t v19 = swift_getWitnessTable();
  sub_100224E4C(v11, v8, v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v11, v8);
  sub_100224E4C(v14, v8, v19);
  v20(v14, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_1000B9D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v99 = a5;
  uint64_t v80 = a3;
  uint64_t v81 = a4;
  uint64_t v6 = type metadata accessor for ShutterButtonNoiseView();
  uint64_t v96 = *(void *)(v6 - 8);
  uint64_t v97 = *(void *)(v96 + 64);
  __chkstk_darwin(v6);
  long long v95 = (char *)v67 - v7;
  uint64_t v8 = type metadata accessor for MeshGradient.Colors();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v92 = v8;
  uint64_t v93 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v90 = type metadata accessor for MeshGradient.Locations();
  uint64_t v87 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v13 = (void *)((char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v88 = type metadata accessor for Gradient.ColorSpace();
  uint64_t v85 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v82 = (char *)v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v67 - v16;
  uint64_t v75 = type metadata accessor for MeshGradient();
  uint64_t v89 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  int v73 = (char *)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _MaskEffect();
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v91 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v71 = (char *)v67 - v20;
  uint64_t v69 = v19;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v94 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v76 = (char *)v67 - v22;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v72 = v23;
  uint64_t v24 = sub_1000BD984(&qword_10051DAE8, (void (*)(uint64_t))&type metadata accessor for MeshGradient);
  v67[1] = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v107 = v24;
  uint64_t v108 = WitnessTable;
  uint64_t v68 = swift_getWitnessTable();
  uint64_t v105 = v68;
  uint64_t v106 = &protocol witness table for _RotationEffect;
  uint64_t v77 = v21;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v79 = v26;
  uint64_t v78 = sub_1000BD984(&qword_10051DAF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v101 = v21;
  uint64_t v102 = v23;
  uint64_t v103 = v26;
  uint64_t v104 = v78;
  uint64_t v83 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v86 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v70 = (char *)v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v74 = (char *)v67 - v29;
  uint64_t v30 = a1;
  uint64_t v31 = *(int *)(v6 + 36);
  v67[0] = v6;
  uint64_t v32 = (uint64_t *)(a1 + v31);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  uint64_t v101 = v34;
  uint64_t v102 = v33;
  sub_10000F214(&qword_10051DB00);
  State.wrappedValue.getter();
  uint64_t v35 = v100;
  uint64_t v36 = (uint64_t *)(a1 + *(int *)(v6 + 40));
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  uint64_t v101 = v38;
  uint64_t v102 = v37;
  sub_10000F214(&qword_10051DB10);
  State.wrappedValue.getter();
  uint64_t v39 = v100;
  static Color.clear.getter();
  static Gradient.ColorSpace.device.getter();
  *uint64_t v13 = v35;
  (*(void (**)(void *, void, uint64_t))(v87 + 104))(v13, enum case for MeshGradient.Locations.points(_:), v90);
  *uint64_t v11 = v39;
  (*(void (**)(void *, void, uint64_t))(v93 + 104))(v11, enum case for MeshGradient.Colors.colors(_:), v92);
  uint64_t v40 = v85;
  uint64_t v41 = v88;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v82, v17, v88);
  uint64_t v42 = v73;
  MeshGradient.init(width:height:locations:colors:background:smoothsColors:colorSpace:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v41);
  uint64_t v43 = v71;
  uint64_t v44 = v75;
  uint64_t v45 = v80;
  uint64_t v46 = v81;
  View.mask<A>(_:)();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v42, v44);
  uint64_t v47 = v67[0];
  uint64_t v48 = (uint64_t *)(v30 + *(int *)(v67[0] + 52));
  uint64_t v49 = *v48;
  uint64_t v50 = v48[1];
  uint64_t v101 = v49;
  uint64_t v102 = v50;
  sub_10000F214(&qword_10051D2F0);
  State.wrappedValue.getter();
  static UnitPoint.center.getter();
  uint64_t v51 = v76;
  uint64_t v52 = v69;
  View.rotationEffect(_:anchor:)();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v43, v52);
  uint64_t v54 = v95;
  uint64_t v53 = v96;
  (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v95, v30, v47);
  unint64_t v55 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = v45;
  *(void *)(v56 + 24) = v46;
  (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v56 + v55, v54, v47);
  uint64_t v57 = swift_checkMetadataState();
  uint64_t v58 = v70;
  uint64_t v59 = v77;
  uint64_t v60 = v79;
  uint64_t v61 = v78;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v51, v59);
  uint64_t v101 = v59;
  uint64_t v102 = v57;
  uint64_t v103 = v60;
  uint64_t v104 = v61;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v63 = v74;
  uint64_t v64 = OpaqueTypeMetadata2;
  sub_100224E4C(v58, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  uint64_t v65 = *(void (**)(char *, uint64_t))(v86 + 8);
  v65(v58, v64);
  sub_100224E4C(v63, v64, OpaqueTypeConformance2);
  return ((uint64_t (*)(char *, uint64_t))v65)(v63, v64);
}

uint64_t sub_1000BA78C()
{
  return sub_1000BAD78();
}

uint64_t sub_1000BA83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ShutterButtonNoiseView();
  uint64_t v7 = sub_1000B91BC((void *)v6);
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a1;
  uint64_t v8 = sub_1002ED3F8((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1000BDDDC, (uint64_t)v13, (uint64_t)v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(a1 + *(int *)(v6 + 36));
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  v13[7] = v11;
  v13[8] = v10;
  v13[6] = v8;
  sub_10000F214(&qword_10051DB00);
  State.wrappedValue.setter();
  sub_1000BAA2C(v6);
  return sub_1000BAC9C(v6);
}

uint64_t sub_1000BA920()
{
  type metadata accessor for ShutterButtonNoiseView.LinearCongruentialGenerator();
  type metadata accessor for State();
  swift_retain();
  uint64_t result = State.wrappedValue.getter();
  if (v1)
  {
    State.wrappedValue.setter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BAA2C(uint64_t a1)
{
  sub_10000F214(&qword_10051DB08);
  State.wrappedValue.getter();
  uint64_t v3 = sub_1000BB1A8(v16);
  char v5 = v4;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    State.wrappedValue.getter();
    sub_100205ACC(v3);
    State.wrappedValue.setter();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void *)(v1 + *(int *)(a1 + 56));
  uint64_t v8 = v7 * v7;
  if ((unsigned __int128)(v7 * (__int128)v7) >> 64 != (v7 * v7) >> 63)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v8 < 0)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v9 = sub_1000BB0BC(0, v8);
  State.wrappedValue.getter();
  for (uint64_t i = v16; *(void *)(v16 + 16); uint64_t i = v16)
  {
    uint64_t v11 = static Hasher._hash(seed:_:)();
    uint64_t v12 = -1 << *(unsigned char *)(i + 32);
    unint64_t v13 = v11 & ~v12;
    if (((*(void *)(i + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
      break;
    }
    uint64_t v14 = *(void *)(i + 48);
    if (*(void *)(v14 + 8 * v13) != v9)
    {
      uint64_t v15 = ~v12;
      do
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(i + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          goto LABEL_14;
        }
      }
      while (*(void *)(v14 + 8 * v13) != v9);
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_1000BB0BC(0, v8);
    State.wrappedValue.getter();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  swift_retain();
  swift_bridgeObjectRetain();
  State.wrappedValue.getter();
  sub_1001F9C0C(&v16, v9);
  State.wrappedValue.setter();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BAC9C(uint64_t result)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v13;
  uint64_t v14;

  uint64_t v2 = *(void *)(v1 + *(int *)(result + 56));
  if ((unsigned __int128)(v2 * (__int128)v2) >> 64 == (v2 * v2) >> 63)
  {
    if (((v2 * v2) & 0x8000000000000000) == 0)
    {
      uint64_t v3 = result;
      __chkstk_darwin(result);
      v10[1] = *(_OWORD *)(v4 + 16);
      uint64_t v11 = v1;
      uint64_t v6 = sub_1002ED2C0((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1000BDAF4, (uint64_t)v10, 0, v5);
      uint64_t v7 = (uint64_t *)(v1 + *(int *)(v3 + 40));
      uint64_t v9 = *v7;
      uint64_t v8 = v7[1];
      unint64_t v13 = v9;
      uint64_t v14 = v8;
      uint64_t v12 = v6;
      sub_10000F214(&qword_10051DB10);
      return State.wrappedValue.setter();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BAD78()
{
  return swift_release();
}

uint64_t sub_1000BAE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(a4 - 8);
  double v15 = __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17, v15);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a4;
  v18[3] = a5;
  v18[4] = a6;
  v18[5] = a7;
  v18[6] = a2;
  v18[7] = a3;
  TimelineView<>.init(_:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
}

uint64_t sub_1000BAF68()
{
  uint64_t v0 = (void *)type metadata accessor for ShutterButtonNoiseView();
  sub_1000B91BC(v0);
  sub_10000F214(&qword_10051DB00);
  State.wrappedValue.setter();
  sub_1000BB024(v0);
  sub_10000F214(&qword_10051DB08);
  State.wrappedValue.setter();
  return sub_1000BAC9C((uint64_t)v0);
}

void *sub_1000BB024(void *result)
{
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v2 = *(void *)(v1 + *((int *)result + 14));
  uint64_t v3 = v2 * v2;
  if ((unsigned __int128)(v2 * (__int128)v2) >> 64 != (v2 * v2) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 < 0)
  {
LABEL_6:
    __break(1u);
    return result;
  }
  do
  {
    uint64_t v4 = sub_1000BB0BC(0, v3);
    sub_1001F9C0C(&v5, v4);
    uint64_t result = v6;
  }
  while (v6[2] < 0xAuLL);
  return result;
}

uint64_t sub_1000BB0BC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ShutterButtonNoiseView.LinearCongruentialGenerator();
  type metadata accessor for State();
  swift_retain();
  State.wrappedValue.getter();
  uint64_t v4 = sub_1000BB45C(a1, a2);
  State.wrappedValue.setter();
  swift_release();
  return v4;
}

uint64_t sub_1000BB1A8(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v2 = sub_1000BB750(*(void *)(a1 + 16));
  uint64_t result = sub_10020B98C(a1);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = v4;
    char v8 = v5;
    uint64_t v9 = v5 & 1;
    if (v2)
    {
      sub_1000BDE90(result, v4, v5 & 1);
      uint64_t v16 = v6;
      uint64_t v17 = v7;
      do
      {
        uint64_t v10 = v7;
        uint64_t v11 = v6;
        char v12 = v9 & 1;
        uint64_t v6 = sub_10020BA30(v6, v7, v9 & 1, a1);
        uint64_t v7 = v13;
        uint64_t v9 = v14 & 1;
        sub_1000BDE84(v11, v10, v12);
        --v2;
      }
      while (v2);
      sub_1000BDE84(v16, v17, v8 & 1);
    }
    uint64_t v15 = sub_1000A6A80(v6, v7, v9, a1);
    sub_1000BDE84(v6, v7, v9);
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BB2C8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  type metadata accessor for ShutterButtonNoiseView();
  sub_10000F214(&qword_10051DB08);
  State.wrappedValue.getter();
  LOBYTE(v3) = sub_1003DF8D4(v3, v5);
  swift_bridgeObjectRelease();
  if (v3) {
    uint64_t result = static Color.clear.getter();
  }
  else {
    uint64_t result = static Color.black.getter();
  }
  *a2 = result;
  return result;
}

uint64_t sub_1000BB370(double a1, double a2, double a3)
{
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) != 0)
  {
    sub_1002F619C(0x20000000000001);
    type metadata accessor for ShutterButtonNoiseView();
    sub_10000F214(&qword_10051D2F0);
    return State.wrappedValue.setter();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BB45C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2[3];
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v4 = (v2[2] + v2[1] * *v2) % v3;
  *unint64_t v2 = v4;
  unint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!v5) {
    goto LABEL_9;
  }
  unint64_t v6 = v4 % v5;
  BOOL v7 = __OFADD__(v6, a1);
  uint64_t result = v6 + a1;
  if (v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1000BB514@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v23 = a1;
  uint64_t v7 = sub_10000F214(qword_10051DB18);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = *(void *)(a4 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = type metadata accessor for TimelineView.Context();
  uint64_t v19 = *(void *)(v17 - 8);
  uint64_t result = v17 - 8;
  if (*(void *)(v19 + 64) == v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v7);
    v25((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v20 = v27;
    sub_100224E4C(v13, a4, v27);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v13, a4);
    sub_100224E4C(v16, a4, v20);
    return ((uint64_t (*)(char *, uint64_t))v21)(v16, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000BB750(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BB7DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for CameraController();
  sub_1000BD984((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  uint64_t v4 = Environment.init<A>(_:)();
  char v6 = v5;
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  sub_10000F214(&qword_10051D828);
  State.init(wrappedValue:)();
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a3 = v4;
  *(unsigned char *)(a3 + 8) = v6 & 1;
  *(void *)(a3 + 16) = a1;
  *(void *)(a3 + 24) = a2;
  *(unsigned char *)(a3 + 32) = v10;
  *(void *)(a3 + 40) = v11;
  *(unsigned char *)(a3 + 48) = v10;
  *(void *)(a3 + 56) = v11;
  *(void *)(a3 + 64) = v10;
  *(void *)(a3 + 72) = v11;
  *(void *)(a3 + 80) = v10;
  *(void *)(a3 + 88) = v11;
  return result;
}

uint64_t destroy for ShutterButton()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for ShutterButton(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ShutterButton(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for ShutterButton(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for ShutterButton(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShutterButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShutterButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShutterButton()
{
  return &type metadata for ShutterButton;
}

uint64_t sub_1000BBCF0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BBD10()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 32))(1);
}

uint64_t sub_1000BBD3C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B6108(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000BBD44(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000BBDD4()
{
  unint64_t result = qword_10051D888;
  if (!qword_10051D888)
  {
    sub_10000F69C(&qword_10051D838);
    sub_100013AA8(&qword_10051D880, &qword_10051D830);
    sub_1000BD984((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D888);
  }
  return result;
}

unint64_t sub_1000BBEA4()
{
  unint64_t result = qword_10051D890;
  if (!qword_10051D890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D890);
  }
  return result;
}

uint64_t sub_1000BBF04()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 32))(2);
}

uint64_t sub_1000BBF34(char a1)
{
  return sub_1000B896C(a1);
}

uint64_t sub_1000BBF40()
{
  return sub_1000B8A40();
}

uint64_t sub_1000BBF50(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000BBF6C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000BBFDC(uint64_t a1, uint64_t a2)
{
  return sub_1000B8AB8(a1, a2, (_OWORD *)(v2 + 16));
}

unint64_t sub_1000BBFE4()
{
  unint64_t result = qword_10051D898;
  if (!qword_10051D898)
  {
    sub_10000F69C(&qword_10051D860);
    sub_1000BC098(&qword_10051D8A0, &qword_10051D858, (void (*)(void))sub_1000BC120, (void (*)(void))sub_1000805F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D898);
  }
  return result;
}

uint64_t sub_1000BC098(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BC120()
{
  return sub_1000BC098(&qword_10051D8A8, &qword_10051D850, (void (*)(void))sub_1000BC15C, (void (*)(void))sub_1000BC24C);
}

unint64_t sub_1000BC15C()
{
  unint64_t result = qword_10051D8B0;
  if (!qword_10051D8B0)
  {
    sub_10000F69C(&qword_10051D848);
    sub_10000F69C(&qword_10051D838);
    sub_1000BBDD4();
    sub_1000BBEA4();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_10051B818, &qword_10051B788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D8B0);
  }
  return result;
}

unint64_t sub_1000BC24C()
{
  unint64_t result = qword_10051D8B8;
  if (!qword_10051D8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D8B8);
  }
  return result;
}

unint64_t sub_1000BC2A0()
{
  unint64_t result = qword_10051D8C0;
  if (!qword_10051D8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10051D8C0);
  }
  return result;
}

uint64_t sub_1000BC2F4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000BC30C()
{
  swift_unknownObjectRelease();
  sub_1000BC2F4(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000BC390(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = v1 + 56;
  char v9 = *(unsigned char *)(v1 + 48);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000F878;
  return sub_1000B8C1C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000BC468()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000BC4C4()
{
  return sub_1000BC4DC();
}

uint64_t sub_1000BC4DC()
{
  return State.wrappedValue.setter();
}

unint64_t sub_1000BC540()
{
  unint64_t result = qword_10051D968;
  if (!qword_10051D968)
  {
    sub_10000F69C(&qword_10051D958);
    sub_100013AA8(&qword_10051D970, &qword_10051D978);
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D968);
  }
  return result;
}

unint64_t sub_1000BC60C()
{
  unint64_t result = qword_10051D9A8;
  if (!qword_10051D9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D9A8);
  }
  return result;
}

uint64_t sub_1000BC660(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BC70C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BC744(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BC77C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BC82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _BlendModeEffect();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BC890(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _BlendModeEffect();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000BC8EC()
{
  unint64_t result = qword_10051DA10;
  if (!qword_10051DA10)
  {
    sub_10000F69C(&qword_10051DA08);
    sub_100013AA8(&qword_10051DA18, &qword_10051DA20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DA10);
  }
  return result;
}

uint64_t sub_1000BC98C(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for ShutterMaterialProvider()
{
  return &type metadata for ShutterMaterialProvider;
}

ValueMetadata *type metadata accessor for ShutterButton.ShutterButtonStyle()
{
  return &type metadata for ShutterButton.ShutterButtonStyle;
}

uint64_t sub_1000BC9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000BC9E0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000BCAA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    v10[1] = v11[1];
    uint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v13;
    v12[1] = v13[1];
    uint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v14 = *v15;
    v14[1] = v15[1];
    unint64_t v16 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
    long long v18 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(void *)(v16 + 32) = *(void *)(v17 + 32);
    uint64_t v19 = (void *)((v16 + 47) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)((v17 + 47) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v19 = *v20;
    v19[1] = v20[1];
    *(void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000BCCA8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000BCD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  unint64_t v16 = (void *)((v13 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)((v14 + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v16 = *v17;
  v16[1] = v17[1];
  *(void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000BCED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_retain();
  swift_release();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[1] = v10[1];
  swift_retain();
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[1] = v12[1];
  swift_retain();
  swift_release();
  unint64_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  v13[3] = v14[3];
  v13[4] = v14[4];
  swift_retain();
  swift_release();
  long long v15 = (void *)(((unint64_t)v13 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)(((unint64_t)v14 + 47) & 0xFFFFFFFFFFFFFFF8);
  *long long v15 = *v16;
  v15[1] = v16[1];
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BD08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v7 = *v8;
  uint64_t v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  uint64_t v11 = (_OWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  unint64_t v13 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)v14;
  long long v16 = *(_OWORD *)(v14 + 16);
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(_OWORD *)unint64_t v13 = v15;
  *(_OWORD *)(v13 + 16) = v16;
  unint64_t v17 = (_OWORD *)((v13 + 47) & 0xFFFFFFFFFFFFFFF8);
  long long v18 = (_OWORD *)((v14 + 47) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v17 = *v18;
  *(void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BD168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_release();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  swift_bridgeObjectRelease();
  v9[1] = v10[1];
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  swift_bridgeObjectRelease();
  v11[1] = v12[1];
  swift_release();
  unint64_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  v13[3] = v14[3];
  v13[4] = v14[4];
  swift_release();
  long long v15 = (void *)(((unint64_t)v13 + 47) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = (void *)(((unint64_t)v14 + 47) & 0xFFFFFFFFFFFFFFF8);
  *long long v15 = *v16;
  v15[1] = v16[1];
  swift_release();
  *(void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000BD2DC(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 47) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000BD450);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_1000BD464(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              long long v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 47) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1000BD678);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for ShutterButtonNoiseView()
{
  return sub_1000684BC();
}

uint64_t sub_1000BD6B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BD728()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000BD770()
{
  unint64_t result = qword_10051DAB0;
  if (!qword_10051DAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DAB0);
  }
  return result;
}

unint64_t sub_1000BD7C8()
{
  unint64_t result = qword_10051DAB8;
  if (!qword_10051DAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DAB8);
  }
  return result;
}

uint64_t sub_1000BD81C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000BD838()
{
  unint64_t result = qword_10051DAD8;
  if (!qword_10051DAD8)
  {
    sub_10000F69C(&qword_10051DAC8);
    sub_1000BD8D8();
    sub_100013AA8(&qword_10051BE40, &qword_10051BE48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DAD8);
  }
  return result;
}

unint64_t sub_1000BD8D8()
{
  unint64_t result = qword_10051DAE0;
  if (!qword_10051DAE0)
  {
    sub_10000F69C(&qword_10051DAC0);
    sub_1000BD984((unint64_t *)&qword_10051BE38, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DAE0);
  }
  return result;
}

uint64_t sub_1000BD984(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BD9D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for ShutterButtonNoiseView() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000B99B0(v6, v3, v4, a1);
}

uint64_t sub_1000BDA70()
{
  type metadata accessor for ShutterButtonNoiseView();

  return sub_1000BAF68();
}

uint64_t sub_1000BDAF4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000BB2C8(a1, a2);
}

uint64_t type metadata accessor for ShutterButtonNoiseView.LinearCongruentialGenerator()
{
  return sub_1000684BC();
}

uint64_t sub_1000BDB30@<X0>(uint64_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  return sub_1000B9254(a1, *(void *)(v2 + 32), a2);
}

uint64_t sub_1000BDB54()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000BDB8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000BB514(a1, *(void (**)(char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 24), *(void *)(v2 + 40), a2);
}

uint64_t sub_1000BDB9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9D7C(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_1000BDBAC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ShutterButtonNoiseView() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000BDCF8()
{
  type metadata accessor for ShutterButtonNoiseView();

  return sub_1000BA78C();
}

uint64_t sub_1000BDD94()
{
  return sub_1000BA83C(v0[4], v0[2], v0[3]);
}

uint64_t sub_1000BDDB4()
{
  return sub_1000BB370(v0[5], v0[6], v0[7]);
}

float32x2_t sub_1000BDDDC@<D0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  float32x2_t v3 = *a1;
  type metadata accessor for ShutterButtonNoiseView();
  sub_1000BA920();
  unsigned int v7 = v4;
  sub_1000BA920();
  float32x2_t result = vadd_f32(v3, (float32x2_t)__PAIR64__(v5, v7));
  *a2 = result;
  return result;
}

uint64_t sub_1000BDE84(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000BDE90(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000BDE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_1000BDEA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BDF14()
{
  return swift_getWitnessTable();
}

void *sub_1000BE1AC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000407B0(0, v1, 0);
    float32x2_t v3 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        sub_1000407B0(v6 > 1, v7 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      unsigned int v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      v3 += 11;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000BE284()
{
  type metadata accessor for AppEntitiesProvider();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = _swiftEmptyArrayStorage;
  qword_10055E100 = result;
  return result;
}

uint64_t sub_1000BE2BC(uint64_t a1)
{
  float32x2_t v3 = (void **)(v1 + 16);
  swift_beginAccess();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000BE1AC(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_10033102C((uint64_t)v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  LOBYTE(v7) = sub_1003DF6C4(v7, v8, v6);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    swift_beginAccess();
    unint64_t v10 = *v3;
    sub_1000BE490(a1);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *float32x2_t v3 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = sub_100329470(0, v10[2] + 1, 1, v10);
      *float32x2_t v3 = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = sub_100329470((void *)(v12 > 1), v13 + 1, 1, v10);
      *float32x2_t v3 = v10;
    }
    v10[2] = v13 + 1;
    int v14 = &v10[11 * v13];
    long long v15 = *(_OWORD *)(a1 + 16);
    *((_OWORD *)v14 + 2) = *(_OWORD *)a1;
    *((_OWORD *)v14 + 3) = v15;
    long long v16 = *(_OWORD *)(a1 + 32);
    long long v17 = *(_OWORD *)(a1 + 48);
    long long v18 = *(_OWORD *)(a1 + 64);
    v14[14] = *(void *)(a1 + 80);
    *((_OWORD *)v14 + 5) = v17;
    *((_OWORD *)v14 + 6) = v18;
    *((_OWORD *)v14 + 4) = v16;
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1000BE434()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AppEntitiesProvider()
{
  return self;
}

uint64_t sub_1000BE490(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000BE534()
{
  unint64_t result = qword_10051DC68;
  if (!qword_10051DC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DC68);
  }
  return result;
}

uint64_t sub_1000BE588@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v20 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v19 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Calendar.Component();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v14 - 8);
  long long v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Calendar.Component.hour(_:), v6);
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  long long v17 = v19;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v17, v2, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v16, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v20, v17, v3);
    return sub_10000FBD8((uint64_t)v16, &qword_10051A2D0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v20, v16, v3);
  }
}

uint64_t sub_1000BE8B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v1 = type metadata accessor for Calendar();
  uint64_t v30 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DateComponents();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  sub_10000F214(&qword_10051DC90);
  uint64_t v7 = type metadata accessor for Calendar.Component();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100441600;
  uint64_t v12 = *(void (**)(unint64_t, void, uint64_t))(v8 + 104);
  v12(v11 + v10, enum case for Calendar.Component.year(_:), v7);
  v12(v11 + v10 + v9, enum case for Calendar.Component.month(_:), v7);
  v12(v11 + v10 + 2 * v9, enum case for Calendar.Component.day(_:), v7);
  v12(v11 + v10 + 3 * v9, enum case for Calendar.Component.hour(_:), v7);
  v12(v11 + v10 + 4 * v9, enum case for Calendar.Component.minute(_:), v7);
  uint64_t v13 = 5 * v9;
  uint64_t v14 = v31;
  v12(v11 + v10 + v13, enum case for Calendar.Component.second(_:), v7);
  uint64_t v15 = v30;
  sub_1000C30F8(v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  long long v16 = *(void (**)(char *, uint64_t))(v15 + 8);
  v16(v3, v1);
  uint64_t v17 = DateComponents.minute.getter();
  if ((v18 & 1) == 0 && !v17)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
    uint64_t v19 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v29, v14, v19);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v21, 0, 1, v19);
  }
  uint64_t v23 = DateComponents.hour.getter();
  if ((v24 & 1) == 0)
  {
    BOOL v25 = __OFADD__(v23, 1);
    uint64_t result = v23 + 1;
    if (v25)
    {
      __break(1u);
      return result;
    }
    DateComponents.hour.setter();
  }
  DateComponents.minute.setter();
  DateComponents.second.setter();
  static Calendar.current.getter();
  Calendar.date(from:)();
  v16(v3, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v6, v28);
}

unint64_t sub_1000BECF8()
{
  unint64_t v1 = 0xD000000000000016;
  if (*(unsigned char *)(v0 + 24) && *(unsigned char *)(v0 + 24) != 1)
  {
    unint64_t v1 = *(void *)v0;
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t sub_1000BED74(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 >= 2u)
  {
    if (a4 != 2) {
      return result;
    }
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for EventLLMLookupError(uint64_t a1)
{
  return sub_1000BEDD8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_1000BEDD8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 >= 2u)
  {
    if (a4 != 2) {
      return result;
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EventLLMLookupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_1000BED74(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for EventLLMLookupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_1000BED74(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_1000BEDD8(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for GeoLocationEstimate(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EventLLMLookupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_1000BEDD8(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLocationEstimate(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLocationEstimate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000BEFEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1000BEFF4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EventLLMLookupError()
{
  return &type metadata for EventLLMLookupError;
}

uint64_t sub_1000BF00C(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 352) = a3;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = a2;
  sub_10000F214(&qword_10051DC80);
  *(void *)(v3 + 200) = swift_task_alloc();
  sub_10000F214(&qword_100518AD8);
  *(void *)(v3 + 208) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TextDetectorResult(0);
  *(void *)(v3 + 216) = v4;
  *(void *)(v3 + 224) = *(void *)(v4 - 8);
  *(void *)(v3 + 232) = swift_task_alloc();
  *(void *)(v3 + 240) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CVDetection();
  *(void *)(v3 + 248) = v5;
  *(void *)(v3 + 256) = *(void *)(v5 - 8);
  *(void *)(v3 + 264) = swift_task_alloc();
  *(void *)(v3 + 272) = swift_task_alloc();
  return _swift_task_switch(sub_1000BF1AC, 0, 0);
}

uint64_t sub_1000BF1AC()
{
  long long v95 = v0;
  if (qword_100517E40 != -1) {
LABEL_77:
  }
    swift_once();
  uint64_t v1 = type metadata accessor for Logger();
  v0[35] = sub_10000F378(v1, (uint64_t)qword_10055E1D8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting to generate an event", v4, 2u);
    swift_slowDealloc();
  }
  int v5 = *((unsigned __int8 *)v0 + 352);

  if (v5 == 1)
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unsigned __int8 v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Enumerating OCR'ed text…", v8, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v9 = v0 + 17;
  unsigned __int8 v10 = (unsigned __int8 *)(v0 + 44);
  v0[17] = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_10019DD30();
  uint64_t v13 = (uint64_t)v11;
  uint64_t v14 = (uint8_t *)v11[2];
  uint64_t v89 = v0;
  uint64_t v92 = (unsigned __int8 *)(v0 + 44);
  if (v14)
  {
    uint64_t v15 = 0;
    long long v16 = v0 + 2;
    uint64_t v88 = v0[32];
    uint64_t v87 = (char *)v11 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80));
    uint64_t v85 = v0[27];
    uint64_t v86 = (void (**)(void, uint64_t, uint64_t, uint64_t))(v0[28] + 56);
    *(void *)&long long v12 = 134217984;
    long long v81 = v12;
    uint64_t v91 = 136315138;
    uint64_t v82 = (uint8_t *)v11[2];
    uint64_t v83 = v11;
    int v84 = v0 + 2;
    do
    {
      if ((unint64_t)v15 >= *(void *)(v13 + 16))
      {
        __break(1u);
        goto LABEL_77;
      }
      uint64_t v18 = v0[33];
      uint64_t v19 = v0[34];
      uint64_t v90 = v15 + 1;
      sub_10000FA44((uint64_t)&v87[*(void *)(v88 + 72) * (void)v15], v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000FA44(v19, v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v20 = v0[33];
          v0[5] = type metadata accessor for ParseDetectorResult(0);
          v0[6] = sub_1000C3410(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
          uint64_t v21 = sub_100040120(v16);
          uint64_t v22 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          uint64_t v20 = v0[33];
          v0[5] = v0[27];
          v0[6] = sub_1000C3410((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
          uint64_t v21 = sub_100040120(v16);
          uint64_t v22 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
        case 4u:
          uint64_t v20 = v0[33];
          v0[5] = type metadata accessor for StreamingBarcodeDetectorResult(0);
          v0[6] = sub_1000C3410(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
          uint64_t v21 = sub_100040120(v16);
          uint64_t v22 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          uint64_t v20 = v0[33];
          v0[5] = type metadata accessor for StreamingTextDetectorResult(0);
          v0[6] = sub_1000C3410((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
          uint64_t v21 = sub_100040120(v16);
          uint64_t v22 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          uint64_t v20 = v0[33];
          v0[5] = type metadata accessor for ObjectDetectorResult(0);
          v0[6] = sub_1000C3410(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
          uint64_t v21 = sub_100040120(v16);
          uint64_t v22 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      sub_1000C3028(v20, (uint64_t)v21, v22);
      sub_10000F214(&qword_100519FA0);
      int v23 = swift_dynamicCast();
      char v24 = *v86;
      uint64_t v26 = v0[26];
      uint64_t v25 = v0[27];
      if (v23)
      {
        uint64_t v27 = v0[30];
        int v28 = *v10;
        v24(v0[26], 0, 1, v25);
        sub_1000C3028(v26, v27, type metadata accessor for TextDetectorResult);
        if (v28 == 1)
        {
          sub_10000FA44(v0[30], v0[29], type metadata accessor for TextDetectorResult);
          uint64_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.default.getter();
          BOOL v31 = os_log_type_enabled(v29, v30);
          uint64_t v32 = v0[29];
          if (v31)
          {
            uint64_t v33 = swift_slowAlloc();
            *(_DWORD *)uint64_t v33 = v81;
            uint64_t v34 = *(void *)(*(void *)(v32 + *(int *)(v85 + 44)) + 16);
            sub_10000FAAC(v32, type metadata accessor for TextDetectorResult);
            *(void *)(v33 + 4) = v34;
            unsigned __int8 v10 = v92;
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "--- Checking text detection with %ld lines", (uint8_t *)v33, 0xCu);
            swift_slowDealloc();
          }
          else
          {
            sub_10000FAAC(v0[29], type metadata accessor for TextDetectorResult);
          }
        }
        uint64_t v35 = v0[30];
        uint64_t v36 = *(void *)(v35 + *(int *)(v85 + 44));
        uint64_t v37 = *(void *)(v36 + 16);
        if (v37)
        {
          swift_bridgeObjectRetain();
          uint64_t v38 = v36 + 64;
          while (1)
          {
            int v39 = *v10;
            uint64_t v13 = *(void *)(v38 - 24);
            uint64_t v14 = *(uint8_t **)(v38 - 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v39 == 1)
            {
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              uint64_t v40 = Logger.logObject.getter();
              os_log_type_t v41 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v40, v41))
              {
                uint64_t v42 = swift_slowAlloc();
                v94[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v42 = 136315138;
                swift_bridgeObjectRetain();
                *(void *)(v42 + 4) = sub_1003806B0(v13, (unint64_t)v14, v94);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v40, v41, "--- appending line: %s", (uint8_t *)v42, 0xCu);
                swift_arrayDestroy();
                unsigned __int8 v10 = v92;
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
              }
            }
            uint64_t v43 = (uint64_t)objc_allocWithZone((Class)TCTextCompositionOCRTextBoundingBox);
            swift_bridgeObjectRetain();
            NSString v44 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            uint64_t v45 = (uint64_t)[(id)v43 initWithText:v44 coordinates:0];

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v45) {
              goto LABEL_79;
            }
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v38 += 40;
            if (!--v37)
            {
              swift_bridgeObjectRelease();
              uint64_t v0 = v89;
              uint64_t v35 = v89[30];
              uint64_t v14 = v82;
              uint64_t v13 = (uint64_t)v83;
              break;
            }
          }
        }
        uint64_t v46 = v0[34];
        sub_10000FAAC(v35, type metadata accessor for TextDetectorResult);
        sub_10000FAAC(v46, (uint64_t (*)(void))type metadata accessor for CVDetection);
        long long v16 = v84;
      }
      else
      {
        uint64_t v17 = v0[34];
        v24(v0[26], 1, 1, v25);
        sub_10000FAAC(v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_10000FBD8(v26, &qword_100518AD8);
      }
      uint64_t v15 = v90;
    }
    while (v90 != v14);
    swift_bridgeObjectRelease();
    uint64_t v43 = *v9;
    if ((unint64_t)*v9 >> 62) {
      goto LABEL_54;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
LABEL_54:
      swift_bridgeObjectRetain_n();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      if (v45) {
        goto LABEL_40;
      }
LABEL_55:
      uint64_t v91 = (uint64_t)_swiftEmptyArrayStorage;
      goto LABEL_56;
    }
  }
  uint64_t v45 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v45) {
    goto LABEL_55;
  }
LABEL_40:
  if (v45 < 1)
  {
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v47 = 0;
  uint64_t v91 = (uint64_t)_swiftEmptyArrayStorage;
  do
  {
    if ((v43 & 0xC000000000000001) != 0) {
      uint64_t v48 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v48 = (objc_class *)*(id *)(v43 + 8 * v47 + 32);
    }
    uint64_t v49 = v48;
    id v50 = [(objc_class *)v48 text];
    if (v50)
    {
      uint64_t v51 = v50;
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v54 = v53;

      unint64_t v55 = (char *)v91;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v55 = sub_100328860(0, *(void *)(v91 + 16) + 1, 1, (char *)v91);
      }
      unint64_t v57 = *((void *)v55 + 2);
      unint64_t v56 = *((void *)v55 + 3);
      if (v57 >= v56 >> 1) {
        unint64_t v55 = sub_100328860((char *)(v56 > 1), v57 + 1, 1, v55);
      }
      *((void *)v55 + 2) = v57 + 1;
      uint64_t v91 = (uint64_t)v55;
      uint64_t v58 = &v55[16 * v57];
      *((void *)v58 + 4) = v52;
      *((void *)v58 + 5) = v54;
      uint64_t v0 = v89;
    }
    else
    {
    }
    ++v47;
  }
  while (v45 != v47);
LABEL_56:
  v0[36] = v91;
  unsigned __int8 v59 = *v92;
  swift_bridgeObjectRelease_n();
  if (v59)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled((os_log_t)v43, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      v94[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v62 = Array.description.getter();
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      v89[22] = sub_1003806B0(v62, v64, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v43, v60, "Retrieved for event extraction: %s", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_64;
    }
    goto LABEL_63;
  }
  unint64_t v65 = *v9;
  swift_bridgeObjectRetain_n();
  uint64_t v43 = Logger.logObject.getter();
  LOBYTE(v13) = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v43, (os_log_type_t)v13))
  {
    uint64_t v45 = (uint64_t)(v89 + 21);
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134217984;
    if (!(v65 >> 62))
    {
      uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_62:
      swift_bridgeObjectRelease();
      *(void *)uint64_t v45 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v43, (os_log_type_t)v13, "Retrieved %ld text boxes for event extraction", v14, 0xCu);
      swift_slowDealloc();

      goto LABEL_64;
    }
LABEL_80:
    swift_bridgeObjectRetain();
    uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
LABEL_63:
  swift_bridgeObjectRelease_n();

LABEL_64:
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10031BC4C((uint64_t)_swiftEmptyArrayStorage);
  id v67 = objc_allocWithZone((Class)TCTextCompositionCalendarEventGenerationInput);
  sub_1000C2FE8();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v69 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v70 = [v67 initWithTextBoxes:isa paragraphBoxes:0 paragraphGroupBoxes:0 blockBoxes:0 options:v69];
  v89[37] = v70;

  unint64_t v71 = v89[17];
  if (v70)
  {
    swift_bridgeObjectRelease();
    v89[38] = [objc_allocWithZone((Class)type metadata accessor for TextCompositionClient()) init];
    unint64_t v72 = sub_10031BC4C((uint64_t)_swiftEmptyArrayStorage);
    v89[39] = v72;
    uint64_t v93 = (uint64_t (*)(id, unint64_t))((char *)&async function pointer to dispatch thunk of TextCompositionClient.requestCalendarEventFrom(fromOCRInput:inputOptions:)
                                                       + async function pointer to dispatch thunk of TextCompositionClient.requestCalendarEventFrom(fromOCRInput:inputOptions:));
    int v73 = (void *)swift_task_alloc();
    v89[40] = v73;
    *int v73 = v89;
    v73[1] = sub_1000C01E8;
    return v93(v70, v72);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 134217984;
      if (v71 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v78 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v89[19] = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Failed to create input from %ld text boxes during event generation", v77, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_1000BE534();
    swift_allocError();
    *(void *)(v79 + 8) = 0;
    *(void *)(v79 + 16) = 0;
    *(void *)uint64_t v79 = v91;
    *(unsigned char *)(v79 + 24) = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v80 = (uint64_t (*)(void))v89[1];
    return v80();
  }
}

uint64_t sub_1000C01E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[41] = a1;
  v4[42] = a2;
  v4[43] = v2;
  swift_task_dealloc();
  if (v2)
  {
    int v5 = sub_1000C06F4;
  }
  else
  {
    uint64_t v6 = (void *)v4[38];
    swift_bridgeObjectRelease();

    int v5 = sub_1000C030C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000C030C()
{
  uint64_t v27 = v0;
  uint64_t v1 = *(uint64_t **)(v0 + 200);
  sub_1000C096C(*(void **)(v0 + 328), *(unsigned __int8 *)(v0 + 352), v1);
  uint64_t v2 = type metadata accessor for EventLookupItem(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    os_log_type_t v3 = *(void **)(v0 + 328);
    uint64_t v4 = *(void *)(v0 + 288);
    uint64_t v5 = *(void *)(v0 + 200);
    swift_bridgeObjectRelease();
    sub_10000FBD8(v5, &qword_10051DC80);
    sub_1000BE534();
    swift_allocError();
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)uint64_t v6 = v4;
    *(unsigned char *)(v6 + 24) = 1;
    swift_bridgeObjectRetain();
    swift_willThrow();

    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      *(void *)(v0 + 160) = sub_1003806B0(v10, v11, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Event generation failed with error: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v20 = *(void *)(v0 + 288);
    uint64_t v19 = *(void **)(v0 + 296);
    swift_getErrorValue();
    uint64_t v21 = Error.localizedDescription.getter();
    uint64_t v23 = v22;
    swift_allocError();
    *(void *)uint64_t v24 = v21;
    *(void *)(v24 + 8) = v23;
    *(void *)(v24 + 16) = v20;
    *(unsigned char *)(v24 + 24) = 2;
    swift_willThrow();
    swift_errorRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  else
  {
    long long v12 = *(void **)(v0 + 296);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 184);

    sub_1000C3028(v13, v14, type metadata accessor for EventLookupItem);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    uint64_t v16 = *(void *)(v0 + 336);
    uint64_t v17 = *(void *)(v0 + 288);
    return v15(v16, v17);
  }
}

uint64_t sub_1000C06F4()
{
  uint64_t v16 = v0;
  uint64_t v1 = (void *)v0[38];
  swift_bridgeObjectRelease();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[20] = sub_1003806B0(v5, v6, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Event generation failed with error: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = v0[36];
  os_log_type_t v7 = (void *)v0[37];
  swift_getErrorValue();
  uint64_t v9 = Error.localizedDescription.getter();
  uint64_t v11 = v10;
  sub_1000BE534();
  swift_allocError();
  *(void *)uint64_t v12 = v9;
  *(void *)(v12 + 8) = v11;
  *(void *)(v12 + 16) = v8;
  *(unsigned char *)(v12 + 24) = 2;
  swift_willThrow();
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000C096C@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v288 = a2;
  v292 = a3;
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  v279 = (char *)&v272 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v6 - 8);
  v278 = (char *)&v272 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v311 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v311 - 8);
  __chkstk_darwin(v311);
  v282 = (char *)&v272 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v281 = (char *)&v272 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v272 - v13;
  __chkstk_darwin(v15);
  v274 = (char *)&v272 - v16;
  __chkstk_darwin(v17);
  v289 = (char *)&v272 - v18;
  __chkstk_darwin(v19);
  v276 = (char *)&v272 - v20;
  __chkstk_darwin(v21);
  v302 = (char *)&v272 - v22;
  __chkstk_darwin(v23);
  v283 = (char *)&v272 - v24;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v272 - v26;
  __chkstk_darwin(v28);
  os_log_t v308 = (os_log_t)((char *)&v272 - v29);
  __chkstk_darwin(v30);
  v300 = (char *)&v272 - v31;
  uint64_t v32 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v32 - 8);
  uint64_t v285 = (uint64_t)&v272 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v277 = (uint64_t)&v272 - v35;
  __chkstk_darwin(v36);
  uint64_t v284 = (uint64_t)&v272 - v37;
  __chkstk_darwin(v38);
  uint64_t v299 = (uint64_t)&v272 - v39;
  __chkstk_darwin(v40);
  v291 = (char *)&v272 - v41;
  __chkstk_darwin(v42);
  v290 = (char *)&v272 - v43;
  __chkstk_darwin(v44);
  uint64_t v296 = (uint64_t)&v272 - v45;
  __chkstk_darwin(v46);
  v297 = (char *)&v272 - v47;
  __chkstk_darwin(v48);
  v293 = (uint8_t *)&v272 - v49;
  __chkstk_darwin(v50);
  uint64_t v52 = (char *)&v272 - v51;
  __chkstk_darwin(v53);
  unint64_t v55 = (char *)&v272 - v54;
  __chkstk_darwin(v56);
  uint64_t v58 = (char *)&v272 - v57;
  __chkstk_darwin(v59);
  uint64_t v61 = (char *)&v272 - v60;
  double v63 = __chkstk_darwin(v62);
  unint64_t v65 = (char *)&v272 - v64;
  id v66 = [a1 eventTitle:v63];
  if (v66)
  {
    id v67 = v66;
    uint64_t v287 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v305 = v68;
  }
  else
  {
    uint64_t v287 = 0;
    unint64_t v305 = 0;
  }
  id v69 = [a1 startDate];
  if (v69)
  {
    id v70 = v69;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    unint64_t v72 = v61;
    uint64_t v73 = 0;
  }
  else
  {
    unint64_t v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    unint64_t v72 = v61;
    uint64_t v73 = 1;
  }
  v304 = v71;
  v71(v72, v73, 1, v311);
  sub_1000C3090((uint64_t)v61, (uint64_t)v65);
  id v74 = [a1 endDate];
  if (v74)
  {
    uint64_t v75 = v74;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v76 = 0;
  }
  else
  {
    uint64_t v76 = 1;
  }
  uint64_t v294 = v8 + 56;
  v304(v55, v76, 1, v311);
  sub_1000C3090((uint64_t)v55, (uint64_t)v58);
  id v77 = [a1 location];
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v295 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v306 = v79;
  }
  else
  {
    uint64_t v295 = 0;
    unint64_t v306 = 0;
  }
  v275 = v14;
  id v80 = [a1 notes];
  if (v80)
  {
    long long v81 = v80;
    uint64_t v280 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v309 = v82;
  }
  else
  {
    uint64_t v280 = 0;
    unint64_t v309 = 0;
  }
  if (qword_100517E40 != -1) {
    swift_once();
  }
  uint64_t v83 = type metadata accessor for Logger();
  uint64_t v310 = sub_10000F378(v83, (uint64_t)qword_10055E1D8);
  int v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v84, v85))
  {
    uint64_t v86 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v86 = 0;
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Extracted an event", v86, 2u);
    swift_slowDealloc();
  }

  v307 = v65;
  v303 = v58;
  uint64_t v301 = v8;
  id v286 = a1;
  unint64_t v87 = v305;
  if (!v305)
  {
    uint64_t v88 = Logger.logObject.getter();
    uint64_t v91 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v88, (os_log_type_t)v91))
    {
LABEL_26:

      goto LABEL_28;
    }
    uint64_t v92 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v92 = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v91, "--- No title", v92, 2u);
LABEL_25:
    swift_slowDealloc();
    goto LABEL_26;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v88, v89))
  {
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v313 = swift_slowAlloc();
    *(_DWORD *)uint64_t v90 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v312 = sub_1003806B0(v287, v87, (uint64_t *)&v313);
    uint64_t v8 = v301;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "--- Title: %s", v90, 0xCu);
    swift_arrayDestroy();
    uint64_t v58 = v303;
    swift_slowDealloc();
    goto LABEL_25;
  }

  swift_bridgeObjectRelease_n();
LABEL_28:
  uint64_t v93 = v300;
  os_log_t v94 = v308;
  sub_100049978((uint64_t)v307, (uint64_t)v52);
  long long v95 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  unsigned int v96 = v95(v52, 1, v311);
  os_log_t v308 = (os_log_t)(v8 + 48);
  v298 = v95;
  if (v96 == 1)
  {
    sub_10000FBD8((uint64_t)v52, &qword_10051A2D0);
    uint64_t v97 = Logger.logObject.getter();
    os_log_type_t v98 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v97, v98))
    {
      uint64_t v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v99 = 0;
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "--- No start date", v99, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v100 = v52;
    uint64_t v101 = v311;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v93, v100, v311);
    (*(void (**)(os_log_t, char *, uint64_t))(v8 + 16))(v94, v93, v101);
    uint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v102, v103))
    {
      uint64_t v104 = (uint8_t *)swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      v273 = v27;
      *(void *)&long long v313 = v105;
      *(_DWORD *)uint64_t v104 = 136315138;
      v272 = v104 + 4;
      id v106 = [objc_allocWithZone((Class)NSDateFormatter) init];
      [v106 setDateStyle:1];
      [v106 setTimeStyle:1];
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v108 = [v106 stringFromDate:isa];

      uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v111 = v110;

      long long v95 = v298;
      uint64_t v312 = sub_1003806B0(v109, v111, (uint64_t *)&v313);
      uint64_t v58 = v303;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v8 = v301;
      swift_bridgeObjectRelease();
      uint64_t v112 = *(void (**)(os_log_t, uint64_t))(v8 + 8);
      v112(v94, v311);
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "--- Start date: %s", v104, 0xCu);
      swift_arrayDestroy();
      uint64_t v27 = v273;
      swift_slowDealloc();
      swift_slowDealloc();

      v112((os_log_t)v300, v311);
    }
    else
    {

      unsigned __int8 v113 = *(void (**)(os_log_t, uint64_t))(v8 + 8);
      uint64_t v114 = v311;
      v113(v94, v311);
      v113((os_log_t)v300, v114);
    }
  }
  unsigned __int8 v115 = v293;
  sub_100049978((uint64_t)v58, (uint64_t)v293);
  if (v95((char *)v115, 1, v311) == 1)
  {
    sub_10000FBD8((uint64_t)v115, &qword_10051A2D0);
    uint64_t v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.default.getter();
    BOOL v118 = os_log_type_enabled(v116, v117);
    uint64_t v119 = (uint64_t)v307;
    if (v118)
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v120 = 0;
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "--- No end date", v120, 2u);
      swift_slowDealloc();
    }

    unint64_t v121 = v306;
    if (!v306) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v122 = v115;
    uint64_t v123 = v311;
    (*(void (**)(char *, uint8_t *, uint64_t))(v8 + 32))(v27, v122, v311);
    char v124 = v283;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v283, v27, v123);
    uint64_t v125 = Logger.logObject.getter();
    uint64_t v126 = v8;
    os_log_type_t v127 = static os_log_type_t.default.getter();
    BOOL v128 = os_log_type_enabled(v125, v127);
    uint64_t v119 = (uint64_t)v307;
    if (v128)
    {
      uint64_t v129 = (uint8_t *)swift_slowAlloc();
      v300 = (char *)swift_slowAlloc();
      *(void *)&long long v313 = v300;
      v293 = v129;
      *(_DWORD *)uint64_t v129 = 136315138;
      id v130 = [objc_allocWithZone((Class)NSDateFormatter) init];
      [v130 setDateStyle:1];
      [v130 setTimeStyle:1];
      Class v131 = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v132 = v126;
      id v133 = [v130 stringFromDate:v131];

      uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v273 = v27;
      unint64_t v136 = v135;

      uint64_t v137 = (uint64_t)v307;
      uint64_t v312 = sub_1003806B0(v134, v136, (uint64_t *)&v313);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v138 = v124;
      uint64_t v139 = v311;
      uint64_t v58 = v303;
      swift_bridgeObjectRelease();
      char v140 = *(void (**)(char *, uint64_t))(v132 + 8);
      v140(v138, v139);
      _os_log_impl((void *)&_mh_execute_header, v125, v127, "--- End date: %s", v293, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v140(v273, v139);
      uint64_t v8 = v132;
      uint64_t v119 = v137;
      unint64_t v121 = v306;
      if (!v306) {
        goto LABEL_49;
      }
    }
    else
    {

      uint64_t v141 = *(void (**)(char *, uint64_t))(v126 + 8);
      uint64_t v142 = v311;
      v141(v124, v311);
      v141(v27, v142);
      uint64_t v8 = v126;
      unint64_t v121 = v306;
      if (!v306) {
        goto LABEL_49;
      }
    }
  }
  uint64_t v143 = HIBYTE(v121) & 0xF;
  if ((v121 & 0x2000000000000000) == 0) {
    uint64_t v143 = v295 & 0xFFFFFFFFFFFFLL;
  }
  if (v143)
  {
    swift_bridgeObjectRetain_n();
    char v144 = Logger.logObject.getter();
    if (v288) {
      os_log_type_t v145 = static os_log_type_t.default.getter();
    }
    else {
      os_log_type_t v145 = static os_log_type_t.debug.getter();
    }
    os_log_type_t v148 = v145;
    if (!os_log_type_enabled(v144, v145))
    {

      swift_bridgeObjectRelease_n();
      if (v309) {
        goto LABEL_56;
      }
      goto LABEL_60;
    }
    double v149 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v313 = swift_slowAlloc();
    *(_DWORD *)double v149 = 136315138;
    unint64_t v150 = v306;
    swift_bridgeObjectRetain();
    uint64_t v312 = sub_1003806B0(v295, v150, (uint64_t *)&v313);
    uint64_t v58 = v303;
    uint64_t v8 = v301;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v144, v148, "--- Location: %s", v149, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_54;
  }
LABEL_49:
  char v144 = Logger.logObject.getter();
  os_log_type_t v146 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v144, v146)) {
    goto LABEL_55;
  }
  uint64_t v147 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v147 = 0;
  _os_log_impl((void *)&_mh_execute_header, v144, v146, "--- No location", v147, 2u);
LABEL_54:
  swift_slowDealloc();
LABEL_55:

  if (v309)
  {
LABEL_56:
    swift_bridgeObjectRetain_n();
    char v151 = Logger.logObject.getter();
    os_log_type_t v152 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v151, v152))
    {
      uint64_t v155 = (uint64_t)v58;

      swift_bridgeObjectRelease_n();
      goto LABEL_64;
    }
    char v153 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v313 = swift_slowAlloc();
    *(_DWORD *)char v153 = 136315138;
    unint64_t v154 = v309;
    swift_bridgeObjectRetain();
    uint64_t v312 = sub_1003806B0(v280, v154, (uint64_t *)&v313);
    uint64_t v155 = (uint64_t)v303;
    uint64_t v8 = v301;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v151, v152, "--- Notes: %s", v153, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_62;
  }
LABEL_60:
  uint64_t v155 = (uint64_t)v58;
  char v151 = Logger.logObject.getter();
  os_log_type_t v156 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v151, v156))
  {
    uint64_t v157 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v157 = 0;
    _os_log_impl((void *)&_mh_execute_header, v151, v156, "--- No notes", v157, 2u);
LABEL_62:
    swift_slowDealloc();
  }

LABEL_64:
  unint64_t v158 = v305;
  double v159 = v297;
  uint64_t v160 = v296;
  uint64_t v161 = (uint64_t)v291;
  uint64_t v162 = (uint64_t)v290;
  uint64_t v163 = v119;
  sub_100049978(v119, v296);
  sub_100049978(v155, v162);
  long long v164 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v298;
  if (v298((char *)v160, 1, v311) == 1)
  {
    sub_100049978(v162, v161);
    if (v164(v161, 1, v311) == 1)
    {
      long long v165 = v276;
      Date.init()();
      sub_1000BE8B4((uint64_t)v159);
      long long v166 = v165;
      uint64_t v160 = v296;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v166, v311);
      sub_10000FBD8(v162, &qword_10051A2D0);
      double v159 = v297;
      sub_10000FBD8(v161, &qword_10051A2D0);
    }
    else
    {
      sub_10000FBD8(v162, &qword_10051A2D0);
      uint64_t v172 = v311;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v159, v161, v311);
      v304(v159, 0, 1, v172);
    }
    uint64_t v119 = v163;
    sub_10000FBD8(v160, &qword_10051A2D0);
    uint64_t v170 = v155;
    if (v164((uint64_t)v159, 1, v311) == 1) {
      goto LABEL_71;
    }
    unsigned __int8 v171 = *(void (**)(char *, id, uint64_t))(v8 + 32);
  }
  else
  {
    sub_10000FBD8(v162, &qword_10051A2D0);
    uint64_t v167 = v160;
    uint64_t v168 = v311;
    long long v169 = *(void (**)(id, uint64_t, uint64_t))(v8 + 32);
    v169(v159, v167, v311);
    v304(v159, 0, 1, v168);
    uint64_t v170 = v155;
    if (v164((uint64_t)v159, 1, v168) == 1)
    {
LABEL_71:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000FBD8((uint64_t)v159, &qword_10051A2D0);
      unsigned __int8 v173 = Logger.logObject.getter();
      os_log_type_t v174 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v173, v174))
      {
        uint64_t v175 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v175 = 0;
        _os_log_impl((void *)&_mh_execute_header, v173, v174, "Could not extract a start date for the event. Bailing from extracting an event.", v175, 2u);
        uint64_t v119 = (uint64_t)v307;
        swift_slowDealloc();
      }

LABEL_83:
      sub_10000FBD8(v170, &qword_10051A2D0);
      sub_10000FBD8(v119, &qword_10051A2D0);
      uint64_t v188 = type metadata accessor for EventLookupItem(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v188 - 8) + 56))(v292, 1, 1, v188);
    }
    unsigned __int8 v171 = (void (*)(char *, id, uint64_t))v169;
  }
  uint64_t v176 = v159;
  uint64_t v177 = v311;
  v171(v302, v176, v311);
  uint64_t v178 = v299;
  sub_100049978(v170, v299);
  uint64_t v179 = v284;
  sub_100049978(v178, v284);
  LODWORD(v177) = v164(v179, 1, v177);
  sub_10000FBD8(v179, &qword_10051A2D0);
  if (v177 == 1)
  {
    uint64_t v180 = Logger.logObject.getter();
    os_log_type_t v181 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v180, v181))
    {
      uint64_t v182 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v182 = 0;
      _os_log_impl((void *)&_mh_execute_header, v180, v181, "Could not extract an end date. Derive one by adding an hour to the start date.", v182, 2u);
      unint64_t v158 = v305;
      swift_slowDealloc();
    }

    uint64_t v183 = v277;
    sub_1000BE588(v277);
    uint64_t v178 = v299;
    sub_10000FBD8(v299, &qword_10051A2D0);
    v304((char *)v183, 0, 1, v311);
    sub_1000C3090(v183, v178);
  }
  uint64_t v184 = v285;
  sub_100049978(v178, v285);
  if (v164(v184, 1, v311) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000FBD8(v184, &qword_10051A2D0);
    unsigned __int8 v185 = Logger.logObject.getter();
    os_log_type_t v186 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v185, v186))
    {
      uint64_t v187 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v187 = 0;
      _os_log_impl((void *)&_mh_execute_header, v185, v186, "Could not extract or derive an end date at all. This is unexpected.", v187, 2u);
      swift_slowDealloc();
    }

    sub_10000FBD8(v299, &qword_10051A2D0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v302, v311);
    goto LABEL_83;
  }
  v171(v289, (id)v184, v311);
  uint64_t v190 = v299;
  v300 = (char *)v171;
  if (v288)
  {
    v191 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v192 = v274;
    uint64_t v193 = v311;
    v191(v274, v302, v311);
    v191(v275, v289, v193);
    swift_bridgeObjectRetain_n();
    id v194 = v286;
    swift_bridgeObjectRetain_n();
    v195 = (char *)v194;
    v196 = Logger.logObject.getter();
    int v197 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v196, (os_log_type_t)v197))
    {
      LODWORD(v304) = v197;
      os_log_t v308 = v196;
      uint64_t v198 = swift_slowAlloc();
      v298 = (unsigned int (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
      *(void *)&long long v313 = v298;
      *(_DWORD *)uint64_t v198 = 136316162;
      if (v158) {
        uint64_t v199 = v287;
      }
      else {
        uint64_t v199 = 0x6C746974206F6E3CLL;
      }
      if (!v158) {
        unint64_t v158 = 0xEA00000000003E65;
      }
      v297 = v195;
      swift_bridgeObjectRetain();
      uint64_t v312 = sub_1003806B0(v199, v158, (uint64_t *)&v313);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v198 + 12) = 2080;
      id v200 = [objc_allocWithZone((Class)NSDateFormatter) init];
      [v200 setDateStyle:1];
      [v200 setTimeStyle:1];
      Class v201 = Date._bridgeToObjectiveC()().super.isa;
      id v202 = [v200 stringFromDate:v201];

      uint64_t v203 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v205 = v204;

      uint64_t v312 = sub_1003806B0(v203, v205, (uint64_t *)&v313);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v206 = *(void (**)(char *, uint64_t))(v301 + 8);
      v206(v192, v311);
      *(_WORD *)(v198 + 22) = 2080;
      uint64_t v296 = v198 + 24;
      id v207 = [objc_allocWithZone((Class)NSDateFormatter) init];
      [v207 setDateStyle:1];
      [v207 setTimeStyle:1];
      v208 = v275;
      Class v209 = Date._bridgeToObjectiveC()().super.isa;
      id v210 = [v207 stringFromDate:v209];

      uint64_t v211 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v213 = v212;

      uint64_t v312 = sub_1003806B0(v211, v213, (uint64_t *)&v313);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v206(v208, v311);
      *(_WORD *)(v198 + 32) = 2080;
      if (v306) {
        uint64_t v214 = v295;
      }
      else {
        uint64_t v214 = 0x61636F6C206F6E3CLL;
      }
      if (v306) {
        unint64_t v215 = v306;
      }
      else {
        unint64_t v215 = 0xED00003E6E6F6974;
      }
      swift_bridgeObjectRetain();
      uint64_t v312 = sub_1003806B0(v214, v215, (uint64_t *)&v313);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v198 + 42) = 2080;
      id v216 = v297;
      id v217 = [v297 notes];
      if (v217)
      {
        v218 = v217;
        uint64_t v219 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v221 = v220;
      }
      else
      {
        unint64_t v221 = 0xEA00000000003E73;
        uint64_t v219 = 0x65746F6E206F6E3CLL;
      }
      uint64_t v190 = v299;
      unsigned __int8 v171 = (void (*)(char *, id, uint64_t))v300;
      uint64_t v312 = sub_1003806B0(v219, v221, (uint64_t *)&v313);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v225 = v308;
      _os_log_impl((void *)&_mh_execute_header, v308, (os_log_type_t)v304, "Extracted an event with title: %s, start date: %s, end date: %s, location: %s, notes: %s", (uint8_t *)v198, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v170 = (uint64_t)v303;
      unint64_t v158 = v305;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      v222 = *(void (**)(char *, uint64_t))(v8 + 8);
      v223 = v192;
      uint64_t v224 = v311;
      v222(v223, v311);
      v222(v275, v224);

      swift_bridgeObjectRelease_n();
      uint64_t v190 = v299;
    }
  }
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v226 = String.init(localized:table:bundle:locale:comment:)();
  unint64_t v228 = v227;
  if (v158)
  {
    uint64_t v229 = HIBYTE(v158) & 0xF;
    uint64_t v230 = v287;
    if ((v158 & 0x2000000000000000) == 0) {
      uint64_t v229 = v287 & 0xFFFFFFFFFFFFLL;
    }
    if (v229)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v226 = v230;
      unint64_t v228 = v158;
    }
  }
  id v231 = [v286 options];
  if (!v231)
  {
LABEL_123:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_124;
  }
  v232 = v231;
  uint64_t v233 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v234 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v233 + 16) && (unint64_t v236 = sub_10032AC58(v234, v235), (v237 & 1) != 0))
  {
    sub_1000A7FD8(*(void *)(v233 + 56) + 32 * v236, (uint64_t)&v313);
  }
  else
  {
    long long v313 = 0u;
    long long v314 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v314 + 1))
  {
    char v238 = swift_dynamicCast();
    unint64_t v239 = v305;
    if (v238)
    {
      swift_bridgeObjectRelease();
      uint64_t v240 = v312;
      uint64_t v241 = v287;
      if (v312)
      {
        v242 = Logger.logObject.getter();
        os_log_type_t v243 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v242, v243))
        {
          v244 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v244 = 0;
          _os_log_impl((void *)&_mh_execute_header, v242, v243, "Extracted event has potential input or output safety concern.", v244, 2u);
          unint64_t v239 = v305;
          swift_slowDealloc();
        }
      }
      if (!v239)
      {
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        uint64_t v241 = String.init(localized:table:bundle:locale:comment:)();
        unint64_t v239 = v245;
      }
      sub_10000FBD8(v299, &qword_10051A2D0);
      sub_10000FBD8(v170, &qword_10051A2D0);
      sub_10000FBD8((uint64_t)v307, &qword_10051A2D0);
      BOOL v246 = v240 != 0;
      v247 = (int *)type metadata accessor for EventLookupItem(0);
      v248 = v292;
      uint64_t v249 = v311;
      v171((char *)v292 + v247[6], v289, v311);
      uint64_t *v248 = v241;
      v248[1] = v239;
      v171((char *)v248 + v247[5], v302, v249);
      v250 = (uint64_t *)((char *)v248 + v247[7]);
      unint64_t v251 = v306;
      void *v250 = v295;
      v250[1] = v251;
      v252 = (uint64_t *)((char *)v248 + v247[8]);
      unint64_t v253 = v309;
      void *v252 = v280;
      v252[1] = v253;
      *((unsigned char *)v248 + v247[9]) = v246;
      v254 = *(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v247 - 1) + 56);
      v255 = v248;
      return v254(v255, 0, 1, v247);
    }
    goto LABEL_123;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FBD8((uint64_t)&v313, &qword_10051B448);
LABEL_124:
  v256 = *(void (**)(char *, char *, uint64_t))(v301 + 16);
  uint64_t v257 = v311;
  v256(v281, v302, v311);
  v256(v282, v289, v257);
  id v258 = [v286 notes];
  if (v258)
  {
    v259 = v258;
    uint64_t v260 = v226;
    uint64_t v261 = v190;
    uint64_t v262 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v264 = v263;
  }
  else
  {
    uint64_t v260 = v226;
    uint64_t v261 = v190;
    uint64_t v262 = 0;
    uint64_t v264 = 0;
  }
  v265 = *(void (**)(char *, uint64_t))(v301 + 8);
  uint64_t v266 = v311;
  v265(v289, v311);
  sub_10000FBD8(v261, &qword_10051A2D0);
  v265(v302, v266);
  sub_10000FBD8((uint64_t)v303, &qword_10051A2D0);
  sub_10000FBD8((uint64_t)v307, &qword_10051A2D0);
  v267 = v292;
  uint64_t *v292 = v260;
  v267[1] = v228;
  v247 = (int *)type metadata accessor for EventLookupItem(0);
  v268 = (void (*)(char *, char *, uint64_t))v300;
  ((void (*)(char *, char *, uint64_t))v300)((char *)v267 + v247[5], v281, v266);
  v268((char *)v267 + v247[6], v282, v266);
  v269 = (uint64_t *)((char *)v267 + v247[7]);
  unint64_t v270 = v306;
  void *v269 = v295;
  v269[1] = v270;
  v271 = (uint64_t *)((char *)v267 + v247[8]);
  uint64_t *v271 = v262;
  v271[1] = v264;
  *((unsigned char *)v267 + v247[9]) = 0;
  v254 = *(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v247 - 1) + 56);
  v255 = v267;
  return v254(v255, 0, 1, v247);
}

uint64_t sub_1000C2C68()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  os_log_type_t v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v23 - v5;
  Date.init()();
  id v7 = [self processInfo];
  unsigned int v8 = [v7 processIdentifier];

  sub_10000F214(&qword_10051DC70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100440F30;
  type metadata accessor for TextCompositionClient();
  static TextCompositionClient.textCompositionClientAppProcessIdentifierKey.getter();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 32) = v10;
  *(void *)(inited + 64) = &type metadata for Int32;
  *(_DWORD *)(inited + 40) = v8;
  static TextCompositionClient.textCompositionClientProcessIdentifierKey.getter();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v11;
  *(void *)(inited + 104) = &type metadata for Int32;
  *(_DWORD *)(inited + 80) = v8;
  sub_10031AB50(inited);
  id v12 = [objc_allocWithZone((Class)TCTextCompositionAssistant) init];
  uint64_t v13 = TCTextCompositionAssistantFeatureTypeCalendarEventGeneration;
  type metadata accessor for TCTextCompositionAssistantOptionKey(0);
  sub_1000C3410(&qword_100518608, type metadata accessor for TCTextCompositionAssistantOptionKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 requestPrewarmingForFeature:v13 options:isa];

  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v1 + 8);
  v17(v3, v0);
  if (qword_100517E40 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10000F378(v18, (uint64_t)qword_10055E1D8);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134217984;
    v23[1] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "EventLLMLookupUtility.preheat took %f seconds", v21, 0xCu);
    swift_slowDealloc();
  }

  return ((uint64_t (*)(char *, uint64_t))v17)(v6, v0);
}

unint64_t sub_1000C2FE8()
{
  unint64_t result = qword_10051DC88;
  if (!qword_10051DC88)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10051DC88);
  }
  return result;
}

uint64_t sub_1000C3028(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C3090(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A2D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_1000C30F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_10000F214(&qword_10051DC98);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    id v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000C3410(&qword_10051DCA0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000C3410(&qword_10051DCA8, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        unint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1000C3410(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C3458(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v3 = 0x7261657070416E6FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0x8000000100424770;
  }
  if (a2) {
    unint64_t v5 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v5 = 0x7261657070416E6FLL;
  }
  if (a2) {
    unint64_t v6 = 0x8000000100424770;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000C3504(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x746169636F737361;
  }
  else {
    uint64_t v3 = 0x65756C6156776172;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xEF65756C61566465;
  }
  if (a2) {
    uint64_t v5 = 0x746169636F737361;
  }
  else {
    uint64_t v5 = 0x65756C6156776172;
  }
  if (a2) {
    unint64_t v6 = 0xEF65756C61566465;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000C35B8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000010;
  }
  else {
    unint64_t v3 = 0x63496E6F69746361;
  }
  if (v2) {
    unint64_t v4 = 0xEE00656D614E6E6FLL;
  }
  else {
    unint64_t v4 = 0x80000001004246C0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000010;
  }
  else {
    unint64_t v5 = 0x63496E6F69746361;
  }
  if (a2) {
    unint64_t v6 = 0x80000001004246C0;
  }
  else {
    unint64_t v6 = 0xEE00656D614E6E6FLL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000C3670(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x737961776C41;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x737961776C41;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x656D6974656D6F53;
      unint64_t v3 = 0xE900000000000073;
      break;
    case 2:
      uint64_t v5 = 0x796C65726152;
      break;
    case 3:
      uint64_t v5 = 0x656C62616E55;
      break;
    case 4:
      uint64_t v5 = 0x74276E6469442049;
      unint64_t v3 = 0xEC00000079725420;
      break;
    case 5:
      uint64_t v5 = 0x6C70704120746F4ELL;
      unint64_t v3 = 0xEE00656C62616369;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE900000000000073;
      if (v5 == 0x656D6974656D6F53) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      if (v5 != 0x796C65726152) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      if (v5 != 0x656C62616E55) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v2 = 0x74276E6469442049;
      unint64_t v6 = 0xEC00000079725420;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xEE00656C62616369;
      if (v5 != 0x6C70704120746F4ELL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1000C3884(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 7105633;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 7105633;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE100000000000000;
      unint64_t v5 = 48;
      break;
    case 2:
      unint64_t v3 = 0xE200000000000000;
      unint64_t v5 = 12589;
      break;
    case 3:
      unint64_t v6 = "sysdiagnose-only";
      goto LABEL_7;
    case 4:
      unint64_t v6 = "log-archive-only";
      goto LABEL_7;
    case 5:
      unint64_t v6 = "full-log-archive";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 6:
      unint64_t v5 = 0xD00000000000001CLL;
      unint64_t v3 = 0x8000000100424680;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE100000000000000;
      if (v5 == 48) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v7 = 0xE200000000000000;
      if (v5 != 12589) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      uint64_t v8 = "sysdiagnose-only";
      goto LABEL_17;
    case 4:
      uint64_t v8 = "log-archive-only";
      goto LABEL_17;
    case 5:
      uint64_t v8 = "full-log-archive";
LABEL_17:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000010;
      goto LABEL_18;
    case 6:
      unint64_t v7 = 0x8000000100424680;
      if (v5 != 0xD00000000000001CLL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_22:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_1000C3A60(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x656E6F685069;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x656E6F685069;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1684099177;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6863746157;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x5654656C707041;
      break;
    case 4:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x646F50656D6F48;
      break;
    case 5:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6512973;
      break;
    case 6:
      uint64_t v5 = 0x6E6F69736956;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1684099177) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6863746157) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x5654656C707041) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x646F50656D6F48) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 6512973;
      goto LABEL_18;
    case 6:
      if (v5 != 0x6E6F69736956) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1000C3C6C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC00000072656E69;
  uint64_t v3 = 0x61746E6F436E6950;
  uint64_t v4 = a1;
  unint64_t v5 = 0x61746E6F436E6950;
  unint64_t v6 = 0xEC00000072656E69;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      unint64_t v5 = 0x72657474756853;
      break;
    case 2:
      unint64_t v5 = 0x6F436172656D6143;
      unint64_t v6 = 0xED00006C6F72746ELL;
      break;
    case 3:
      unint64_t v5 = 0x61426E6F69746341;
      unint64_t v6 = 0xE900000000000072;
      break;
    case 4:
      unint64_t v5 = 0x61426E6F69746341;
      unint64_t v6 = 0xED0000756E654D72;
      break;
    case 5:
      unint64_t v5 = 0x6574616369646544;
      unint64_t v6 = 0xEF6E6F7474754264;
      break;
    case 6:
      unint64_t v6 = 0x8000000100424520;
      unint64_t v5 = 0xD000000000000010;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      if (v5 == 0x72657474756853) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      uint64_t v7 = 0x6F436172656D6143;
      uint64_t v8 = 0x6C6F72746ELL;
      goto LABEL_15;
    case 3:
      unint64_t v2 = 0xE900000000000072;
      if (v5 != 0x61426E6F69746341) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      uint64_t v7 = 0x61426E6F69746341;
      uint64_t v8 = 0x756E654D72;
LABEL_15:
      unint64_t v2 = v8 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      if (v5 != v7) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      uint64_t v3 = 0x6574616369646544;
      unint64_t v2 = 0xEF6E6F7474754264;
      goto LABEL_18;
    case 6:
      unint64_t v2 = 0x8000000100424520;
      if (v5 != 0xD000000000000010) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v3) {
        goto LABEL_22;
      }
LABEL_19:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_22:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

Swift::Int sub_1000C3F14()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C402C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C411C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000C425C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000C4370()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000C4470()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000C457C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C46CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLComponents();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  sub_1000C4914();
  URLComponents.queryItems.setter();
  URLComponents.url.getter();
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9) == 1)
  {
    sub_10000FBD8((uint64_t)v4, &qword_10051E070);
    sub_1000C9EAC();
    swift_allocError();
    *uint64_t v11 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v4, v9);
  }
}

void *sub_1000C4914()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051DCB8);
  __chkstk_darwin(v2 - 8);
  v356 = (char *)&v301 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v355 = (char *)&v301 - v5;
  __chkstk_darwin(v6);
  uint64_t v354 = (uint64_t)&v301 - v7;
  __chkstk_darwin(v8);
  v353 = (char *)&v301 - v9;
  __chkstk_darwin(v10);
  v352 = (char *)&v301 - v11;
  __chkstk_darwin(v12);
  v351 = (char *)&v301 - v13;
  __chkstk_darwin(v14);
  uint64_t v350 = (uint64_t)&v301 - v15;
  __chkstk_darwin(v16);
  uint64_t v349 = (uint64_t)&v301 - v17;
  __chkstk_darwin(v18);
  uint64_t v348 = (uint64_t)&v301 - v19;
  __chkstk_darwin(v20);
  v347 = (char *)&v301 - v21;
  __chkstk_darwin(v22);
  uint64_t v357 = (uint64_t)&v301 - v23;
  __chkstk_darwin(v24);
  uint64_t v346 = (uint64_t)&v301 - v25;
  __chkstk_darwin(v26);
  uint64_t v345 = (uint64_t)&v301 - v27;
  __chkstk_darwin(v28);
  uint64_t v344 = (uint64_t)&v301 - v29;
  __chkstk_darwin(v30);
  uint64_t v343 = (uint64_t)&v301 - v31;
  __chkstk_darwin(v32);
  v342 = (char *)&v301 - v33;
  __chkstk_darwin(v34);
  v341 = (char *)&v301 - v35;
  __chkstk_darwin(v36);
  v358 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v301 - v37);
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v301 - v39;
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v301 - v42;
  uint64_t v44 = type metadata accessor for URLQueryItem();
  uint64_t v45 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  v303 = (char *)&v301 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v304 = (char *)&v301 - v48;
  __chkstk_darwin(v49);
  unint64_t v309 = (char *)&v301 - v50;
  __chkstk_darwin(v51);
  uint64_t v310 = (char *)&v301 - v52;
  __chkstk_darwin(v53);
  v339 = (char *)&v301 - v54;
  __chkstk_darwin(v55);
  v340 = (char *)&v301 - v56;
  __chkstk_darwin(v57);
  v337 = (char *)&v301 - v58;
  __chkstk_darwin(v59);
  v338 = (char *)&v301 - v60;
  __chkstk_darwin(v61);
  v335 = (char *)&v301 - v62;
  __chkstk_darwin(v63);
  v336 = (char *)&v301 - v64;
  __chkstk_darwin(v65);
  v333 = (char *)&v301 - v66;
  __chkstk_darwin(v67);
  v334 = (char *)&v301 - v68;
  __chkstk_darwin(v69);
  v331 = (char *)&v301 - v70;
  __chkstk_darwin(v71);
  v332 = (char *)&v301 - v72;
  __chkstk_darwin(v73);
  v329 = (char *)&v301 - v74;
  __chkstk_darwin(v75);
  v330 = (char *)&v301 - v76;
  __chkstk_darwin(v77);
  v327 = (char *)&v301 - v78;
  __chkstk_darwin(v79);
  v328 = (char *)&v301 - v80;
  __chkstk_darwin(v81);
  v325 = (char *)&v301 - v82;
  __chkstk_darwin(v83);
  v326 = (char *)&v301 - v84;
  __chkstk_darwin(v85);
  v323 = (char *)&v301 - v86;
  __chkstk_darwin(v87);
  v324 = (char *)&v301 - v88;
  __chkstk_darwin(v89);
  v321 = (char *)&v301 - v90;
  __chkstk_darwin(v91);
  v322 = (char *)&v301 - v92;
  __chkstk_darwin(v93);
  v319 = (char *)&v301 - v94;
  __chkstk_darwin(v95);
  v320 = (char *)&v301 - v96;
  __chkstk_darwin(v97);
  v317 = (char *)&v301 - v98;
  __chkstk_darwin(v99);
  v318 = (char *)&v301 - v100;
  __chkstk_darwin(v101);
  v315 = (char *)&v301 - v102;
  __chkstk_darwin(v103);
  v316 = (char *)&v301 - v104;
  __chkstk_darwin(v105);
  v307 = (char *)&v301 - v106;
  __chkstk_darwin(v107);
  os_log_t v308 = (char *)&v301 - v108;
  __chkstk_darwin(v109);
  unint64_t v305 = (char *)&v301 - v110;
  __chkstk_darwin(v111);
  unint64_t v306 = (char *)&v301 - v112;
  __chkstk_darwin(v113);
  long long v313 = (char *)&v301 - v114;
  __chkstk_darwin(v115);
  long long v314 = (char *)&v301 - v116;
  __chkstk_darwin(v117);
  uint64_t v311 = (char *)&v301 - v118;
  __chkstk_darwin(v119);
  uint64_t v312 = (char *)&v301 - v120;
  __chkstk_darwin(v121);
  uint64_t v123 = (char *)&v301 - v122;
  double v125 = __chkstk_darwin(v124);
  os_log_type_t v127 = (char *)&v301 - v126;
  v360 = _swiftEmptyArrayStorage;
  if (!*(void *)(v1 + 24))
  {
    v359 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v45 + 56);
    v359(v43, 1, 1, v44, v125);
LABEL_5:
    sub_10000FBD8((uint64_t)v43, &qword_10051DCB8);
    uint64_t v128 = (uint64_t)v358;
    uint64_t v129 = *(void *)(v1 + 48);
    if (!v129) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v302 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  URLQueryItem.init(name:value:)();
  v359 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v45 + 56);
  ((void (*)(char *, void, uint64_t, uint64_t))v359)(v43, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
  {
    uint64_t v40 = v302;
    goto LABEL_5;
  }
  unint64_t v154 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v154(v127, v43, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v123, v127, v44);
  unint64_t v155 = sub_10032959C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v157 = *(void *)(v155 + 16);
  unint64_t v156 = *(void *)(v155 + 24);
  if (v157 >= v156 >> 1) {
    unint64_t v155 = sub_10032959C(v156 > 1, v157 + 1, 1, v155);
  }
  *(void *)(v155 + 16) = v157 + 1;
  v154((char *)(v155+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v157), v123, v44);
  v360 = (void *)v155;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v127, v44);
  uint64_t v128 = (uint64_t)v358;
  uint64_t v40 = v302;
  uint64_t v129 = *(void *)(v1 + 48);
  if (v129)
  {
LABEL_6:
    uint64_t v131 = *(void *)(v1 + 56);
    uint64_t v130 = *(void *)(v1 + 64);
    long long v361 = *(_OWORD *)(v1 + 32);
    uint64_t v362 = v129;
    uint64_t v363 = v131;
    uint64_t v364 = v130;
    uint64_t v132 = sub_1000C7A10();
    sub_10019F634(v132);
  }
LABEL_7:
  char v133 = *(unsigned char *)(v1 + 88);
  swift_bridgeObjectRetain();
  sub_1000C8F14(v133, (uint64_t)v40);
  swift_bridgeObjectRelease();
  uint64_t v134 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  if (v134(v40, 1, v44) == 1)
  {
    sub_10000FBD8((uint64_t)v40, &qword_10051DCB8);
  }
  else
  {
    unint64_t v135 = v40;
    unint64_t v136 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    uint64_t v137 = v312;
    v136(v312, v135, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v311, v137, v44);
    unint64_t v138 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v138 = sub_10032959C(0, *(void *)(v138 + 16) + 1, 1, v138);
    }
    unint64_t v140 = *(void *)(v138 + 16);
    unint64_t v139 = *(void *)(v138 + 24);
    if (v140 >= v139 >> 1) {
      unint64_t v138 = sub_10032959C(v139 > 1, v140 + 1, 1, v138);
    }
    *(void *)(v138 + 16) = v140 + 1;
    v136((char *)(v138+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v140), v311, v44);
    v360 = (void *)v138;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v312, v44);
    uint64_t v128 = (uint64_t)v358;
  }
  char v141 = *(unsigned char *)(v1 + 112);
  swift_bridgeObjectRetain();
  sub_1000C912C(v141, v128);
  swift_bridgeObjectRelease();
  if (v134((char *)v128, 1, v44) == 1)
  {
    sub_10000FBD8(v128, &qword_10051DCB8);
    if (*(void *)(v1 + 144)) {
      goto LABEL_16;
    }
LABEL_28:
    uint64_t v142 = (uint64_t)v341;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v359)(v341, 1, 1, v44);
    goto LABEL_29;
  }
  double v149 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  unint64_t v150 = v314;
  v149(v314, v128, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v313, v150, v44);
  unint64_t v151 = (unint64_t)v360;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v151 = sub_10032959C(0, *(void *)(v151 + 16) + 1, 1, v151);
  }
  unint64_t v153 = *(void *)(v151 + 16);
  unint64_t v152 = *(void *)(v151 + 24);
  if (v153 >= v152 >> 1) {
    unint64_t v151 = sub_10032959C(v152 > 1, v153 + 1, 1, v151);
  }
  *(void *)(v151 + 16) = v153 + 1;
  v149((char *)(v151+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v153), (uint64_t)v313, v44);
  v360 = (void *)v151;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v314, v44);
  if (!*(void *)(v1 + 144)) {
    goto LABEL_28;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v142 = (uint64_t)v341;
  URLQueryItem.init(name:value:)();
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v359)(v142, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v134((char *)v142, 1, v44) != 1)
  {
    uint64_t v143 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    char v144 = v306;
    v143(v306, v142, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v305, v144, v44);
    unint64_t v145 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v145 = sub_10032959C(0, *(void *)(v145 + 16) + 1, 1, v145);
    }
    unint64_t v147 = *(void *)(v145 + 16);
    unint64_t v146 = *(void *)(v145 + 24);
    if (v147 >= v146 >> 1) {
      unint64_t v145 = sub_10032959C(v146 > 1, v147 + 1, 1, v145);
    }
    *(void *)(v145 + 16) = v147 + 1;
    v143((char *)(v145+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v147), (uint64_t)v305, v44);
    v360 = (void *)v145;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v306, v44);
    if (!*(void *)(v1 + 176)) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
LABEL_29:
  sub_10000FBD8(v142, &qword_10051DCB8);
  if (!*(void *)(v1 + 176))
  {
LABEL_22:
    uint64_t v148 = (uint64_t)v342;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v359)(v342, 1, 1, v44);
LABEL_31:
    sub_10000FBD8(v148, &qword_10051DCB8);
    goto LABEL_41;
  }
LABEL_30:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v148 = (uint64_t)v342;
  URLQueryItem.init(name:value:)();
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v359)(v148, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v134((char *)v148, 1, v44) == 1) {
    goto LABEL_31;
  }
  unint64_t v158 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  double v159 = v308;
  v158(v308, v148, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v307, v159, v44);
  unint64_t v160 = (unint64_t)v360;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v160 = sub_10032959C(0, *(void *)(v160 + 16) + 1, 1, v160);
  }
  unint64_t v162 = *(void *)(v160 + 16);
  unint64_t v161 = *(void *)(v160 + 24);
  if (v162 >= v161 >> 1) {
    unint64_t v160 = sub_10032959C(v161 > 1, v162 + 1, 1, v160);
  }
  *(void *)(v160 + 16) = v162 + 1;
  v158((char *)(v160+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v162), (uint64_t)v307, v44);
  v360 = (void *)v160;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v308, v44);
LABEL_41:
  uint64_t v163 = *(void *)(v1 + 184);
  uint64_t v164 = *(void *)(v1 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v165 = v343;
  sub_1000C9750(v163, v164, (void (*)(uint64_t, uint64_t))sub_1000CA554, v343);
  swift_bridgeObjectRelease();
  uint64_t v166 = v165;
  swift_bridgeObjectRelease();
  if (v134((char *)v165, 1, v44) == 1)
  {
    sub_10000FBD8(v165, &qword_10051DCB8);
  }
  else
  {
    uint64_t v167 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v168 = v316;
    v167(v316, v166, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v315, v168, v44);
    unint64_t v169 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v169 = sub_10032959C(0, *(void *)(v169 + 16) + 1, 1, v169);
    }
    unint64_t v171 = *(void *)(v169 + 16);
    unint64_t v170 = *(void *)(v169 + 24);
    if (v171 >= v170 >> 1) {
      unint64_t v169 = sub_10032959C(v170 > 1, v171 + 1, 1, v169);
    }
    *(void *)(v169 + 16) = v171 + 1;
    v167((char *)(v169+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v171), (uint64_t)v315, v44);
    v360 = (void *)v169;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v316, v44);
  }
  uint64_t v172 = (int *)type metadata accessor for TapToRadarDraft();
  uint64_t v173 = v344;
  sub_1000C92B0(v344);
  unsigned int v174 = v134((char *)v173, 1, v44);
  v358 = v134;
  if (v174 == 1)
  {
    sub_10000FBD8(v173, &qword_10051DCB8);
  }
  else
  {
    uint64_t v175 = v173;
    uint64_t v176 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v177 = v318;
    v176(v318, v175, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v317, v177, v44);
    unint64_t v178 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v178 = sub_10032959C(0, *(void *)(v178 + 16) + 1, 1, v178);
    }
    unint64_t v180 = *(void *)(v178 + 16);
    unint64_t v179 = *(void *)(v178 + 24);
    if (v180 >= v179 >> 1) {
      unint64_t v178 = sub_10032959C(v179 > 1, v180 + 1, 1, v178);
    }
    *(void *)(v178 + 16) = v180 + 1;
    v176((char *)(v178+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v180), (uint64_t)v317, v44);
    v360 = (void *)v178;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v318, v44);
    uint64_t v134 = v358;
  }
  os_log_type_t v181 = (uint64_t *)(v1 + v172[12]);
  uint64_t v182 = *v181;
  uint64_t v183 = v181[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v184 = v345;
  sub_1000C9580(v182, v183, v345);
  swift_bridgeObjectRelease();
  uint64_t v185 = v184;
  swift_bridgeObjectRelease();
  if (v134((char *)v184, 1, v44) == 1)
  {
    sub_10000FBD8(v184, &qword_10051DCB8);
  }
  else
  {
    os_log_type_t v186 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v187 = v320;
    v186(v320, v185, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v319, v187, v44);
    unint64_t v188 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v188 = sub_10032959C(0, *(void *)(v188 + 16) + 1, 1, v188);
    }
    unint64_t v190 = *(void *)(v188 + 16);
    unint64_t v189 = *(void *)(v188 + 24);
    if (v190 >= v189 >> 1) {
      unint64_t v188 = sub_10032959C(v189 > 1, v190 + 1, 1, v188);
    }
    *(void *)(v188 + 16) = v190 + 1;
    v186((char *)(v188+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v190), (uint64_t)v319, v44);
    v360 = (void *)v188;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v320, v44);
    uint64_t v134 = v358;
  }
  v191 = (uint64_t *)(v1 + v172[13]);
  uint64_t v192 = *v191;
  uint64_t v193 = v191[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v194 = v346;
  sub_1000C9580(v192, v193, v346);
  swift_bridgeObjectRelease();
  uint64_t v195 = v194;
  swift_bridgeObjectRelease();
  if (v134((char *)v194, 1, v44) == 1)
  {
    sub_10000FBD8(v194, &qword_10051DCB8);
  }
  else
  {
    v196 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    int v197 = v322;
    v196(v322, v195, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v321, v197, v44);
    unint64_t v198 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v198 = sub_10032959C(0, *(void *)(v198 + 16) + 1, 1, v198);
    }
    unint64_t v200 = *(void *)(v198 + 16);
    unint64_t v199 = *(void *)(v198 + 24);
    if (v200 >= v199 >> 1) {
      unint64_t v198 = sub_10032959C(v199 > 1, v200 + 1, 1, v198);
    }
    *(void *)(v198 + 16) = v200 + 1;
    v196((char *)(v198+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v200), (uint64_t)v321, v44);
    v360 = (void *)v198;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v322, v44);
    uint64_t v134 = v358;
  }
  Class v201 = (uint64_t *)(v1 + v172[14]);
  uint64_t v202 = *v201;
  uint64_t v203 = v201[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v204 = v357;
  sub_1000C9750(v202, v203, (void (*)(uint64_t, uint64_t))sub_1000CA110, v357);
  swift_bridgeObjectRelease();
  uint64_t v205 = v204;
  swift_bridgeObjectRelease();
  if (v134((char *)v204, 1, v44) == 1)
  {
    sub_10000FBD8(v204, &qword_10051DCB8);
  }
  else
  {
    v206 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    id v207 = v324;
    v206(v324, v205, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v323, v207, v44);
    unint64_t v208 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v208 = sub_10032959C(0, *(void *)(v208 + 16) + 1, 1, v208);
    }
    unint64_t v210 = *(void *)(v208 + 16);
    unint64_t v209 = *(void *)(v208 + 24);
    if (v210 >= v209 >> 1) {
      unint64_t v208 = sub_10032959C(v209 > 1, v210 + 1, 1, v208);
    }
    *(void *)(v208 + 16) = v210 + 1;
    v206((char *)(v208+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v210), (uint64_t)v323, v44);
    v360 = (void *)v208;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v324, v44);
    uint64_t v134 = v358;
  }
  swift_bridgeObjectRetain();
  uint64_t v211 = (uint64_t)v347;
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  uint64_t v357 = v45 + 56;
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v359)(v211, 0, 1, v44);
  uint64_t v212 = v211;
  swift_bridgeObjectRelease();
  if (v134((char *)v211, 1, v44) == 1)
  {
    sub_10000FBD8(v211, &qword_10051DCB8);
  }
  else
  {
    unint64_t v213 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v214 = v326;
    v213(v326, v212, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v325, v214, v44);
    unint64_t v215 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v215 = sub_10032959C(0, *(void *)(v215 + 16) + 1, 1, v215);
    }
    unint64_t v217 = *(void *)(v215 + 16);
    unint64_t v216 = *(void *)(v215 + 24);
    if (v217 >= v216 >> 1) {
      unint64_t v215 = sub_10032959C(v216 > 1, v217 + 1, 1, v215);
    }
    *(void *)(v215 + 16) = v217 + 1;
    v213((char *)(v215+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v217), (uint64_t)v325, v44);
    v360 = (void *)v215;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v326, v44);
    uint64_t v134 = v358;
  }
  v218 = (uint64_t *)(v1 + v172[16]);
  uint64_t v219 = *v218;
  uint64_t v220 = v218[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v221 = v348;
  sub_1000C9750(v219, v220, (void (*)(uint64_t, uint64_t))sub_1000CA110, v348);
  swift_bridgeObjectRelease();
  uint64_t v222 = v221;
  swift_bridgeObjectRelease();
  if (v134((char *)v221, 1, v44) == 1)
  {
    sub_10000FBD8(v221, &qword_10051DCB8);
  }
  else
  {
    v223 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v224 = v328;
    v223(v328, v222, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v327, v224, v44);
    unint64_t v225 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v225 = sub_10032959C(0, *(void *)(v225 + 16) + 1, 1, v225);
    }
    unint64_t v227 = *(void *)(v225 + 16);
    unint64_t v226 = *(void *)(v225 + 24);
    if (v227 >= v226 >> 1) {
      unint64_t v225 = sub_10032959C(v226 > 1, v227 + 1, 1, v225);
    }
    *(void *)(v225 + 16) = v227 + 1;
    v223((char *)(v225+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v227), (uint64_t)v327, v44);
    v360 = (void *)v225;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v328, v44);
    uint64_t v134 = v358;
  }
  unint64_t v228 = (uint64_t *)(v1 + v172[17]);
  uint64_t v229 = *v228;
  uint64_t v230 = v228[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v231 = v349;
  sub_1000C9750(v229, v230, (void (*)(uint64_t, uint64_t))sub_1000C9FEC, v349);
  swift_bridgeObjectRelease();
  uint64_t v232 = v231;
  swift_bridgeObjectRelease();
  if (v134((char *)v231, 1, v44) == 1)
  {
    sub_10000FBD8(v231, &qword_10051DCB8);
  }
  else
  {
    uint64_t v233 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v234 = v330;
    v233(v330, v232, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v329, v234, v44);
    unint64_t v235 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v235 = sub_10032959C(0, *(void *)(v235 + 16) + 1, 1, v235);
    }
    unint64_t v237 = *(void *)(v235 + 16);
    unint64_t v236 = *(void *)(v235 + 24);
    if (v237 >= v236 >> 1) {
      unint64_t v235 = sub_10032959C(v236 > 1, v237 + 1, 1, v235);
    }
    *(void *)(v235 + 16) = v237 + 1;
    v233((char *)(v235+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v237), (uint64_t)v329, v44);
    v360 = (void *)v235;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v330, v44);
    uint64_t v134 = v358;
  }
  char v238 = (uint64_t *)(v1 + v172[18]);
  uint64_t v239 = *v238;
  uint64_t v240 = v238[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v241 = v350;
  sub_1000C9750(v239, v240, (void (*)(uint64_t, uint64_t))sub_1000CA110, v350);
  swift_bridgeObjectRelease();
  uint64_t v242 = v241;
  swift_bridgeObjectRelease();
  if (v134((char *)v241, 1, v44) == 1)
  {
    sub_10000FBD8(v241, &qword_10051DCB8);
  }
  else
  {
    os_log_type_t v243 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    v244 = v332;
    v243(v332, v242, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v331, v244, v44);
    unint64_t v245 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v245 = sub_10032959C(0, *(void *)(v245 + 16) + 1, 1, v245);
    }
    unint64_t v247 = *(void *)(v245 + 16);
    unint64_t v246 = *(void *)(v245 + 24);
    if (v247 >= v246 >> 1) {
      unint64_t v245 = sub_10032959C(v246 > 1, v247 + 1, 1, v245);
    }
    *(void *)(v245 + 16) = v247 + 1;
    v243((char *)(v245+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v247), (uint64_t)v331, v44);
    v360 = (void *)v245;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v332, v44);
    uint64_t v134 = v358;
  }
  uint64_t v248 = *(void *)(v1 + v172[19] + 16);
  swift_bridgeObjectRetain();
  sub_1000C86AC(v248);
  if (v249)
  {
    uint64_t v250 = (uint64_t)v351;
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v251 = 0;
  }
  else
  {
    uint64_t v251 = 1;
    uint64_t v250 = (uint64_t)v351;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v359)(v250, v251, 1, v44);
  swift_bridgeObjectRelease();
  unsigned int v252 = v134((char *)v250, 1, v44);
  uint64_t v253 = v250;
  if (v252 == 1)
  {
    sub_10000FBD8(v250, &qword_10051DCB8);
  }
  else
  {
    v254 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    v255 = v334;
    v254(v334, v253, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v333, v255, v44);
    unint64_t v256 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v256 = sub_10032959C(0, *(void *)(v256 + 16) + 1, 1, v256);
    }
    unint64_t v258 = *(void *)(v256 + 16);
    unint64_t v257 = *(void *)(v256 + 24);
    if (v258 >= v257 >> 1) {
      unint64_t v256 = sub_10032959C(v257 > 1, v258 + 1, 1, v256);
    }
    *(void *)(v256 + 16) = v258 + 1;
    v254((char *)(v256+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v258), (uint64_t)v333, v44);
    v360 = (void *)v256;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v334, v44);
    uint64_t v134 = v358;
  }
  swift_bridgeObjectRetain();
  uint64_t v259 = (uint64_t)v352;
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v359)(v259, 0, 1, v44);
  uint64_t v260 = v259;
  swift_bridgeObjectRelease();
  if (v134((char *)v259, 1, v44) == 1)
  {
    sub_10000FBD8(v259, &qword_10051DCB8);
  }
  else
  {
    uint64_t v261 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v262 = v336;
    v261(v336, v260, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v335, v262, v44);
    unint64_t v263 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v263 = sub_10032959C(0, *(void *)(v263 + 16) + 1, 1, v263);
    }
    unint64_t v265 = *(void *)(v263 + 16);
    unint64_t v264 = *(void *)(v263 + 24);
    if (v265 >= v264 >> 1) {
      unint64_t v263 = sub_10032959C(v264 > 1, v265 + 1, 1, v263);
    }
    *(void *)(v263 + 16) = v265 + 1;
    v261((char *)(v263+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v265), (uint64_t)v335, v44);
    v360 = (void *)v263;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v336, v44);
    uint64_t v134 = v358;
  }
  char v266 = *(unsigned char *)(v1 + v172[21] + 16);
  swift_bridgeObjectRetain();
  sub_1000C8BB0(v266);
  if (v267)
  {
    uint64_t v268 = (uint64_t)v353;
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v269 = 0;
  }
  else
  {
    uint64_t v269 = 1;
    uint64_t v268 = (uint64_t)v353;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v359)(v268, v269, 1, v44);
  swift_bridgeObjectRelease();
  unsigned int v270 = v134((char *)v268, 1, v44);
  uint64_t v271 = v268;
  if (v270 == 1)
  {
    sub_10000FBD8(v268, &qword_10051DCB8);
  }
  else
  {
    v272 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    v273 = v338;
    v272(v338, v271, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v337, v273, v44);
    unint64_t v274 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v274 = sub_10032959C(0, *(void *)(v274 + 16) + 1, 1, v274);
    }
    unint64_t v276 = *(void *)(v274 + 16);
    unint64_t v275 = *(void *)(v274 + 24);
    if (v276 >= v275 >> 1) {
      unint64_t v274 = sub_10032959C(v275 > 1, v276 + 1, 1, v274);
    }
    *(void *)(v274 + 16) = v276 + 1;
    v272((char *)(v274+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v276), (uint64_t)v337, v44);
    v360 = (void *)v274;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v338, v44);
    uint64_t v134 = v358;
  }
  uint64_t v277 = (uint64_t *)(v1 + v172[22]);
  uint64_t v278 = *v277;
  uint64_t v279 = v277[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v280 = v354;
  sub_1000C9750(v278, v279, (void (*)(uint64_t, uint64_t))sub_1000CA110, v354);
  swift_bridgeObjectRelease();
  uint64_t v281 = v280;
  swift_bridgeObjectRelease();
  if (v134((char *)v280, 1, v44) == 1)
  {
    sub_10000FBD8(v280, &qword_10051DCB8);
  }
  else
  {
    v282 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    v283 = v340;
    v282(v340, v281, v44);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v339, v283, v44);
    unint64_t v284 = (unint64_t)v360;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v284 = sub_10032959C(0, *(void *)(v284 + 16) + 1, 1, v284);
    }
    unint64_t v286 = *(void *)(v284 + 16);
    unint64_t v285 = *(void *)(v284 + 24);
    if (v286 >= v285 >> 1) {
      unint64_t v284 = sub_10032959C(v285 > 1, v286 + 1, 1, v284);
    }
    *(void *)(v284 + 16) = v286 + 1;
    v282((char *)(v284+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v286), (uint64_t)v339, v44);
    v360 = (void *)v284;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v340, v44);
    uint64_t v134 = v358;
  }
  if (!*(void *)(v1 + v172[23] + 24))
  {
    uint64_t v287 = (uint64_t)v355;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v359)(v355, 1, 1, v44);
    goto LABEL_146;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v287 = (uint64_t)v355;
  URLQueryItem.init(name:value:)();
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v359)(v287, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v134((char *)v287, 1, v44) == 1)
  {
LABEL_146:
    sub_10000FBD8(v287, &qword_10051DCB8);
    goto LABEL_147;
  }
  int v288 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  v289 = v310;
  v288(v310, v287, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v309, v289, v44);
  unint64_t v290 = (unint64_t)v360;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v290 = sub_10032959C(0, *(void *)(v290 + 16) + 1, 1, v290);
  }
  unint64_t v292 = *(void *)(v290 + 16);
  unint64_t v291 = *(void *)(v290 + 24);
  if (v292 >= v291 >> 1) {
    unint64_t v290 = sub_10032959C(v291 > 1, v292 + 1, 1, v290);
  }
  *(void *)(v290 + 16) = v292 + 1;
  v288((char *)(v290+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v292), (uint64_t)v309, v44);
  v360 = (void *)v290;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v310, v44);
  uint64_t v134 = v358;
LABEL_147:
  if (!*(void *)(v1 + v172[24] + 24))
  {
    uint64_t v293 = (uint64_t)v356;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v359)(v356, 1, 1, v44);
    goto LABEL_155;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v293 = (uint64_t)v356;
  URLQueryItem.init(name:value:)();
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v359)(v293, 0, 1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v134((char *)v293, 1, v44) == 1)
  {
LABEL_155:
    sub_10000FBD8(v293, &qword_10051DCB8);
    return v360;
  }
  uint64_t v294 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  uint64_t v295 = v304;
  v294(v304, v293, v44);
  uint64_t v296 = v303;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v303, v295, v44);
  unint64_t v297 = (unint64_t)v360;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v297 = sub_10032959C(0, *(void *)(v297 + 16) + 1, 1, v297);
  }
  unint64_t v299 = *(void *)(v297 + 16);
  unint64_t v298 = *(void *)(v297 + 24);
  if (v299 >= v298 >> 1) {
    unint64_t v297 = sub_10032959C(v298 > 1, v299 + 1, 1, v297);
  }
  *(void *)(v297 + 16) = v299 + 1;
  v294((char *)(v297+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v299), (uint64_t)v296, v44);
  v360 = (void *)v297;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v295, v44);
  return v360;
}

id sub_1000C749C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = (id)sub_1000C46CC((uint64_t)v4);
  if (!v0)
  {
    id result = [self defaultWorkspace];
    if (result)
    {
      uint64_t v7 = result;
      URL._bridgeToObjectiveC()(v6);
      uint64_t v9 = v8;
      id v13 = 0;
      id v10 = [v7 openURL:v8 configuration:0 error:&v13];

      if (v10)
      {
        id v11 = v13;
      }
      else
      {
        id v12 = v13;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
      return (id)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

__n128 sub_1000C7650@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, long long a13, long long a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,char a29,uint64_t a30,long long a31,uint64_t a32,uint64_t a33,__n128 a34,unint64_t a35,unint64_t a36)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  sub_10000FC34(a5, a9 + 32, &qword_10051DCC8);
  *(void *)(a9 + 72) = a6;
  *(void *)(a9 + 80) = a7;
  *(unsigned char *)(a9 + 88) = a8;
  *(void *)(a9 + 96) = a10;
  *(void *)(a9 + 104) = a11;
  *(unsigned char *)(a9 + 112) = a12;
  *(_OWORD *)(a9 + 120) = a13;
  *(_OWORD *)(a9 + 136) = a14;
  *(_OWORD *)(a9 + 152) = a15;
  *(void *)(a9 + 168) = a16;
  *(void *)(a9 + 176) = a17;
  *(void *)(a9 + 184) = 0x7364726F7779654BLL;
  *(void *)(a9 + 192) = 0xE800000000000000;
  *(void *)(a9 + 200) = a18;
  uint64_t v39 = (int *)type metadata accessor for TapToRadarDraft();
  sub_10000FC34(a19, a9 + v39[11], &qword_10051DCC0);
  uint64_t v40 = (void *)(a9 + v39[12]);
  *uint64_t v40 = 0x656D686361747441;
  v40[1] = 0xEB0000000073746ELL;
  void v40[2] = a20;
  uint64_t v41 = (void *)(a9 + v39[13]);
  *uint64_t v41 = 0xD000000000000011;
  v41[1] = 0x8000000100426710;
  v41[2] = a21;
  uint64_t v42 = (void *)(a9 + v39[14]);
  *uint64_t v42 = 0xD000000000000014;
  v42[1] = 0x8000000100426730;
  v42[2] = a22;
  uint64_t v43 = (char *)(a9 + v39[15]);
  strcpy(v43, "DeleteOnAttach");
  v43[15] = -18;
  v43[16] = a23;
  uint64_t v44 = (void *)(a9 + v39[16]);
  *uint64_t v44 = 0x4449656369766544;
  v44[1] = 0xE900000000000073;
  v44[2] = a24;
  uint64_t v45 = a9 + v39[17];
  strcpy((char *)v45, "DeviceClasses");
  *(_WORD *)(v45 + 14) = -4864;
  *(void *)(v45 + 16) = a25;
  uint64_t v46 = a9 + v39[18];
  strcpy((char *)v46, "DeviceModels");
  *(unsigned char *)(v46 + 13) = 0;
  *(_WORD *)(v46 + 14) = -5120;
  *(void *)(v46 + 16) = a26;
  uint64_t v47 = (void *)(a9 + v39[19]);
  *uint64_t v47 = 0xD000000000000016;
  v47[1] = 0x80000001004417C0;
  v47[2] = a27;
  uint64_t v48 = a9 + v39[20];
  *(void *)uint64_t v48 = 0xD00000000000001ALL;
  *(void *)(v48 + 8) = 0x8000000100426750;
  *(unsigned char *)(v48 + 16) = a28;
  uint64_t v49 = a9 + v39[21];
  *(void *)uint64_t v49 = 0x676169446F747541;
  *(void *)(v49 + 8) = 0xEF73636974736F6ELL;
  *(unsigned char *)(v49 + 16) = a29;
  uint64_t v50 = (void *)(a9 + v39[22]);
  void *v50 = 0xD00000000000001BLL;
  v50[1] = 0x8000000100426770;
  v50[2] = a30;
  uint64_t v51 = a9 + v39[23];
  *(_OWORD *)uint64_t v51 = a31;
  *(void *)(v51 + 16) = a32;
  *(void *)(v51 + 24) = a33;
  uint64_t v52 = (__n128 *)(a9 + v39[24]);
  __n128 result = a34;
  *uint64_t v52 = a34;
  v52[1].n128_u64[0] = a35;
  v52[1].n128_u64[1] = a36;
  return result;
}

uint64_t sub_1000C7A10()
{
  sub_10000F214(&qword_100529C30);
  type metadata accessor for URLQueryItem();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1004416D0;
  dispatch thunk of CustomStringConvertible.description.getter();
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  return v0;
}

Swift::Int sub_1000C7B84()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1000C7C04()
{
  Hasher._combine(_:)(*v0);
  String.hash(into:)();

  return String.hash(into:)();
}

Swift::Int sub_1000C7C74()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1000C7CF0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_1000C9F4C(v5, v7) & 1;
}

unint64_t sub_1000C7D3C(char a1)
{
  unint64_t result = 0x7974697275636553;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0x7265776F50;
      break;
    case 3:
      unint64_t result = 0x616D726F66726550;
      break;
    case 4:
      unint64_t result = 0x69626173552F4955;
      break;
    case 5:
      unint64_t result = 0x2073756F69726553;
      break;
    case 6:
      unint64_t result = 0x754220726568744FLL;
      break;
    case 7:
      unint64_t result = 0x2065727574616546;
      break;
    case 8:
      unint64_t result = 0x6D65636E61686E45;
      break;
    case 9:
      unint64_t result = 1802723668;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000C7EA0(char a1)
{
  unint64_t result = 0x7974697275636553;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0x7265776F50;
      break;
    case 3:
      unint64_t result = 0x616D726F66726550;
      break;
    case 4:
      unint64_t result = 0x69626173552F4955;
      break;
    case 5:
      unint64_t result = 0x2073756F69726553;
      break;
    case 6:
      unint64_t result = 0x754220726568744FLL;
      break;
    case 7:
      unint64_t result = 0x2065727574616546;
      break;
    case 8:
      unint64_t result = 0x6D65636E61686E45;
      break;
    case 9:
      unint64_t result = 1802723668;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000C8004(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1000C7EA0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1000C7EA0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000C8090()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000C7EA0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000C80F4()
{
  sub_1000C7EA0(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000C8148()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000C7EA0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1000C81A8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000CD0C8(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000C81D8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000C7EA0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000C8204()
{
  return sub_1000C7D3C(*v0);
}

uint64_t sub_1000C820C(unsigned __int8 *a1, char *a2)
{
  return sub_1000C3670(*a1, *a2);
}

Swift::Int sub_1000C8218()
{
  return sub_1000C3F14();
}

uint64_t sub_1000C8220()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000C8320()
{
  return sub_1000C425C();
}

unint64_t sub_1000C8328@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000CD114(*a1);
  *a2 = result;
  return result;
}

void sub_1000C8358(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x737961776C41;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE900000000000073;
      uint64_t v3 = 0x656D6974656D6F53;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x796C65726152;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 3:
      *(void *)a1 = 0x656C62616E55;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 4:
      strcpy((char *)a1, "I Didn't Try");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 5:
      strcpy((char *)a1, "Not Applicable");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1000C8438()
{
  return *(void *)&aAlways_1[8 * *v0];
}

uint64_t sub_1000C845C(unsigned __int8 *a1, char *a2)
{
  return sub_1000C3A60(*a1, *a2);
}

Swift::Int sub_1000C8468()
{
  return sub_1000C4470();
}

uint64_t sub_1000C8474()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000C856C()
{
  return sub_1000C4470();
}

unint64_t sub_1000C8574@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1004E5488;
  unint64_t result = sub_1000CD6E4(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000C85AC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x656E6F685069;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1684099177;
      goto LABEL_3;
    case 2:
      *a1 = 0x6863746157;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x5654656C707041;
      a1[1] = 0xE700000000000000;
      break;
    case 4:
      *a1 = 0x646F50656D6F48;
      a1[1] = 0xE700000000000000;
      break;
    case 5:
      *a1 = 6512973;
      a1[1] = 0xE300000000000000;
      break;
    case 6:
      *a1 = 0x6E6F69736956;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1000C8688()
{
  return *(void *)&aIphone_1[8 * *v0];
}

uint64_t sub_1000C86AC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (a1)
    {
      unint64_t v2 = sub_100328860(0, 1, 1, (char *)_swiftEmptyArrayStorage);
      unint64_t v4 = *((void *)v2 + 2);
      unint64_t v3 = *((void *)v2 + 3);
      if (v4 >= v3 >> 1) {
        unint64_t v2 = sub_100328860((char *)(v3 > 1), v4 + 1, 1, v2);
      }
      *((void *)v2 + 2) = v4 + 1;
      uint64_t v5 = &v2[16 * v4];
      *((void *)v5 + 4) = 0x79616C50726941;
      *((void *)v5 + 5) = 0xE700000000000000;
      if ((v1 & 2) == 0)
      {
LABEL_14:
        if ((v1 & 4) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v2 = sub_100328860(0, *((void *)v2 + 2) + 1, 1, v2);
          }
          unint64_t v10 = *((void *)v2 + 2);
          unint64_t v9 = *((void *)v2 + 3);
          if (v10 >= v9 >> 1) {
            unint64_t v2 = sub_100328860((char *)(v9 > 1), v10 + 1, 1, v2);
          }
          *((void *)v2 + 2) = v10 + 1;
          id v11 = &v2[16 * v10];
          strcpy(v11 + 32, "MediaSystems");
          v11[45] = 0;
          *((_WORD *)v11 + 23) = -5120;
        }
        if ((v1 & 8) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v2 = sub_100328860(0, *((void *)v2 + 2) + 1, 1, v2);
          }
          unint64_t v13 = *((void *)v2 + 2);
          unint64_t v12 = *((void *)v2 + 3);
          if (v13 >= v12 >> 1) {
            unint64_t v2 = sub_100328860((char *)(v12 > 1), v13 + 1, 1, v2);
          }
          *((void *)v2 + 2) = v13 + 1;
          uint64_t v14 = &v2[16 * v13];
          *((void *)v14 + 4) = 0x616C506572616853;
          *((void *)v14 + 5) = 0xE900000000000079;
          if ((v1 & 0x10) == 0)
          {
LABEL_22:
            if ((v1 & 0x20) == 0) {
              goto LABEL_23;
            }
            goto LABEL_36;
          }
        }
        else if ((v1 & 0x10) == 0)
        {
          goto LABEL_22;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v2 = sub_100328860(0, *((void *)v2 + 2) + 1, 1, v2);
        }
        unint64_t v16 = *((void *)v2 + 2);
        unint64_t v15 = *((void *)v2 + 3);
        if (v16 >= v15 >> 1) {
          unint64_t v2 = sub_100328860((char *)(v15 > 1), v16 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v16 + 1;
        uint64_t v17 = &v2[16 * v16];
        *((void *)v17 + 4) = 0x79627261654ELL;
        *((void *)v17 + 5) = 0xE600000000000000;
        if ((v1 & 0x20) == 0)
        {
LABEL_23:
          if ((v1 & 0x40) == 0) {
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_36:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v2 = sub_100328860(0, *((void *)v2 + 2) + 1, 1, v2);
        }
        unint64_t v19 = *((void *)v2 + 2);
        unint64_t v18 = *((void *)v2 + 3);
        if (v19 >= v18 >> 1) {
          unint64_t v2 = sub_100328860((char *)(v18 > 1), v19 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v19 + 1;
        uint64_t v20 = &v2[16 * v19];
        *((void *)v20 + 4) = 0x657463656E6E6F43;
        *((void *)v20 + 5) = 0xE900000000000064;
        if ((v1 & 0x40) == 0)
        {
LABEL_24:
          if ((v1 & 0x80) == 0)
          {
LABEL_51:
            sub_10000F214((uint64_t *)&unk_100522CD0);
            sub_100024278();
            uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
            swift_bridgeObjectRelease();
            return v1;
          }
LABEL_46:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v2 = sub_100328860(0, *((void *)v2 + 2) + 1, 1, v2);
          }
          unint64_t v25 = *((void *)v2 + 2);
          unint64_t v24 = *((void *)v2 + 3);
          if (v25 >= v24 >> 1) {
            unint64_t v2 = sub_100328860((char *)(v24 > 1), v25 + 1, 1, v2);
          }
          *((void *)v2 + 2) = v25 + 1;
          uint64_t v26 = &v2[16 * v25];
          *((void *)v26 + 4) = 0xD000000000000016;
          *((void *)v26 + 5) = 0x80000001004266F0;
          goto LABEL_51;
        }
LABEL_41:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v2 = sub_100328860(0, *((void *)v2 + 2) + 1, 1, v2);
        }
        unint64_t v22 = *((void *)v2 + 2);
        unint64_t v21 = *((void *)v2 + 3);
        if (v22 >= v21 >> 1) {
          unint64_t v2 = sub_100328860((char *)(v21 > 1), v22 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v22 + 1;
        uint64_t v23 = &v2[16 * v22];
        *((void *)v23 + 4) = 0x61656854656D6F48;
        *((void *)v23 + 5) = 0xEB00000000726574;
        if ((v1 & 0x80) == 0) {
          goto LABEL_51;
        }
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t v2 = (char *)_swiftEmptyArrayStorage;
      if ((a1 & 2) == 0) {
        goto LABEL_14;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v2 = sub_100328860(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      unint64_t v2 = sub_100328860((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    char v8 = &v2[16 * v7];
    *((void *)v8 + 4) = 0x4874694B656D6F48;
    *((void *)v8 + 5) = 0xEB00000000656D6FLL;
    goto LABEL_14;
  }
  return v1;
}

uint64_t sub_1000C8B68()
{
  return sub_1000C86AC(*v0);
}

uint64_t sub_1000C8B70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10000A270();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

unint64_t sub_1000C8BB0(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v2) {
        goto LABEL_4;
      }
      unint64_t result = 48;
      switch(a1)
      {
        case 2:
          unint64_t result = 12589;
          break;
        case 3:
        case 4:
        case 5:
          unint64_t result = 0xD000000000000010;
          break;
        case 6:
          unint64_t result = 0xD00000000000001CLL;
          break;
        default:
          return result;
      }
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_4:
      unint64_t result = 0;
      break;
  }
  return result;
}

unint64_t sub_1000C8D60(char a1)
{
  unint64_t result = 7105633;
  switch(a1)
  {
    case 1:
      unint64_t result = 48;
      break;
    case 2:
      unint64_t result = 12589;
      break;
    case 3:
    case 4:
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000C8E1C(unsigned __int8 *a1, char *a2)
{
  return sub_1000C3884(*a1, *a2);
}

Swift::Int sub_1000C8E28()
{
  return sub_1000C4370();
}

uint64_t sub_1000C8E34()
{
  return sub_1000C402C();
}

Swift::Int sub_1000C8E3C()
{
  return sub_1000C4370();
}

unint64_t sub_1000C8E44@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1004E5550;
  unint64_t result = sub_1000CD6E4(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_1000C8E7C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000C8D60(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000C8EA8()
{
  return sub_1000C8BB0(*v0);
}

unint64_t sub_1000C8EB0(char a1)
{
  if (!a1) {
    return 0xD000000000000028;
  }
  if (a1 == 1) {
    return 0xD00000000000001DLL;
  }
  return 0xD00000000000002DLL;
}

unint64_t sub_1000C8F0C()
{
  return sub_1000C8EB0(*v0);
}

uint64_t sub_1000C8F14@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 10:
      uint64_t v3 = type metadata accessor for URLQueryItem();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
      uint64_t v5 = v3;
      uint64_t v6 = a2;
      uint64_t v7 = 1;
      break;
    default:
      URLQueryItem.init(name:value:)();
      swift_bridgeObjectRelease();
      uint64_t v8 = type metadata accessor for URLQueryItem();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
      uint64_t v5 = v8;
      uint64_t v6 = a2;
      uint64_t v7 = 0;
      break;
  }

  return v4(v6, v7, 1, v5);
}

uint64_t sub_1000C912C@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 6:
      uint64_t v9 = type metadata accessor for URLQueryItem();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
      uint64_t v5 = v9;
      uint64_t v6 = a2;
      uint64_t v7 = 1;
      break;
    default:
      URLQueryItem.init(name:value:)();
      swift_bridgeObjectRelease();
      uint64_t v3 = type metadata accessor for URLQueryItem();
      unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
      uint64_t v5 = v3;
      uint64_t v6 = a2;
      uint64_t v7 = 0;
      break;
  }

  return v4(v6, v7, 1, v5);
}

uint64_t sub_1000C92B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051DCC0);
  sub_100049978(v2 + *(int *)(v11 + 36), (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000FBD8((uint64_t)v6, &qword_10051A2D0);
    uint64_t v12 = type metadata accessor for URLQueryItem();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    id v14 = [objc_allocWithZone((Class)NSDateFormatter) init];
    NSString v15 = String._bridgeToObjectiveC()();
    [v14 setDateFormat:v15];

    [v14 setDoesRelativeDateFormatting:0];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v17 = [v14 stringFromDate:isa];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for URLQueryItem();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 0, 1, v18);
  }
}

uint64_t sub_1000C9580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    __chkstk_darwin(a1);
    type metadata accessor for URL();
    uint64_t KeyPath = swift_getKeyPath();
    swift_retain();
    sub_1000CA240(a2, KeyPath);
    swift_release_n();
    sub_10000F214((uint64_t *)&unk_100522CD0);
    sub_100024278();
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v6 = type metadata accessor for URLQueryItem();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a3, 0, 1, v6);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URLQueryItem();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    return v9(a3, 1, 1, v8);
  }
}

uint64_t sub_1000C9750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void (*a3)(uint64_t, uint64_t)@<X5>, uint64_t a4@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    __chkstk_darwin(a1);
    uint64_t KeyPath = swift_getKeyPath();
    swift_retain();
    a3(a2, KeyPath);
    swift_release_n();
    sub_10000F214((uint64_t *)&unk_100522CD0);
    sub_100024278();
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for URLQueryItem();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a4, 0, 1, v8);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URLQueryItem();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    return v11(a4, 1, 1, v10);
  }
}

uint64_t sub_1000C9914()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000C9944()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000C9980()
{
  if (*v0) {
    return 49;
  }
  else {
    return 48;
  }
}

uint64_t sub_1000C9998()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setDateFormat:v1];

  [v0 setDoesRelativeDateFormatting:0];
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v3 = [v0 stringFromDate:isa];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

uint64_t sub_1000C9A74()
{
  return URL.path(percentEncoded:)(0)._countAndFlagsBits;
}

uint64_t sub_1000C9A7C()
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v0 = Collection.isEmpty.getter();
  uint64_t v1 = 0;
  if ((v0 & 1) == 0)
  {
    __chkstk_darwin(v0);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    swift_getWitnessTable();
    Sequence.compactMap<A>(_:)();
    swift_release();
    sub_10000F214((uint64_t *)&unk_100522CD0);
    sub_100024278();
    uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1000C9C10()
{
  return sub_1000C9A7C();
}

uint64_t sub_1000C9C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v5);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v12, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v8, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v13;
}

uint64_t sub_1000C9E18(uint64_t a1, uint64_t a2)
{
  return sub_1000C9C24(a1, *(void *)(a2 - 8));
}

uint64_t sub_1000C9E20@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 8))(*(void *)(a2 + a1 - 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000C9E68()
{
  return 16;
}

__n128 sub_1000C9E74(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000C9E80()
{
  return swift_getAtKeyPath();
}

unint64_t sub_1000C9EAC()
{
  unint64_t result = qword_10051DCB0;
  if (!qword_10051DCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DCB0);
  }
  return result;
}

uint64_t type metadata accessor for TapToRadarDraft()
{
  uint64_t result = qword_10051DD28;
  if (!qword_10051DD28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C9F4C(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  BOOL v4 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (a1[3] == a2[3] && a1[4] == a2[4])
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

char *sub_1000C9FEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  id v3 = (char *)_swiftEmptyArrayStorage;
  do
  {
    swift_getAtKeyPath();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v3 = sub_100328860(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v6 = *((void *)v3 + 2);
      unint64_t v5 = *((void *)v3 + 3);
      if (v6 >= v5 >> 1) {
        id v3 = sub_100328860((char *)(v5 > 1), v6 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v6 + 1;
      BOOL v4 = &v3[16 * v6];
      *((void *)v4 + 4) = v8;
      *((void *)v4 + 5) = v9;
    }
    ++v2;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  return v3;
}

char *sub_1000CA110(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v2 = swift_bridgeObjectRetain() + 40;
  id v3 = (char *)_swiftEmptyArrayStorage;
  do
  {
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    swift_bridgeObjectRelease();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v3 = sub_100328860(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v6 = *((void *)v3 + 2);
      unint64_t v5 = *((void *)v3 + 3);
      if (v6 >= v5 >> 1) {
        id v3 = sub_100328860((char *)(v5 > 1), v6 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v6 + 1;
      BOOL v4 = &v3[16 * v6];
      *((void *)v4 + 4) = v8;
      *((void *)v4 + 5) = v9;
    }
    v2 += 16;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

char *sub_1000CA240(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v31 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    v24[1] = a1;
    v24[2] = v2;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v30 = v12;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v27 = *(void *)(v11 + 56);
    uint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    unint64_t v25 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v26 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain();
    uint64_t v35 = (char *)_swiftEmptyArrayStorage;
    uint64_t v29 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 40);
    v24[0] = (v11 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v24[3] = v11;
    while (1)
    {
      v30(v9, v13, v4);
      unint64_t v16 = *v29;
      (*v29)(v9, 0, 1, v4);
      if ((*v28)(v9, 1, v4) == 1) {
        break;
      }
      id v17 = v31;
      (*v26)(v31, v9, v4);
      swift_getAtKeyPath();
      uint64_t v18 = v33;
      uint64_t v19 = v34;
      (*v25)(v17, v4);
      if (v19)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v35 = sub_100328860(0, *((void *)v35 + 2) + 1, 1, v35);
        }
        unint64_t v21 = *((void *)v35 + 2);
        unint64_t v20 = *((void *)v35 + 3);
        if (v21 >= v20 >> 1) {
          uint64_t v35 = sub_100328860((char *)(v20 > 1), v21 + 1, 1, v35);
        }
        id v14 = v35;
        *((void *)v35 + 2) = v21 + 1;
        uint64_t v15 = &v14[16 * v21];
        *((void *)v15 + 4) = v18;
        *((void *)v15 + 5) = v19;
      }
      v13 += v27;
      if (!--v10)
      {
        v16(v9, 1, 1, v4);
        break;
      }
    }
  }
  else
  {
    unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    swift_bridgeObjectRetain();
    uint64_t v35 = (char *)_swiftEmptyArrayStorage;
    v22(v9, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  return v35;
}

char *sub_1000CA554(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  id v3 = (char *)_swiftEmptyArrayStorage;
  do
  {
    swift_getAtKeyPath();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v3 = sub_100328860(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v6 = *((void *)v3 + 2);
      unint64_t v5 = *((void *)v3 + 3);
      if (v6 >= v5 >> 1) {
        id v3 = sub_100328860((char *)(v5 > 1), v6 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v6 + 1;
      uint64_t v4 = &v3[16 * v6];
      *((void *)v4 + 4) = v8;
      *((void *)v4 + 5) = v9;
    }
    ++v2;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t destroy for TextDetectorResult.Line()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TapToRadarDraft.Component(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TapToRadarDraft.Component(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TapToRadarDraft.Component(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextDetectorResult.Line(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextDetectorResult.Line(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.Component()
{
  return &type metadata for TapToRadarDraft.Component;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.DeviceClass()
{
  return &type metadata for TapToRadarDraft.DeviceClass;
}

unsigned char *storeEnumTagSinglePayload for TapToRadarDraft.TapToRadarError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CA948);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.TapToRadarError()
{
  return &type metadata for TapToRadarDraft.TapToRadarError;
}

uint64_t sub_1000CA980(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      uint64_t v10 = a2[7];
      uint64_t v11 = a2[8];
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = v10;
      *(void *)(a1 + 64) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v13;
      *(void *)(a1 + 64) = a2[8];
    }
    uint64_t v14 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v14;
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    uint64_t v15 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v15;
    *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
    uint64_t v16 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v16;
    uint64_t v17 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v17;
    uint64_t v18 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v18;
    uint64_t v19 = a2[22];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = v19;
    uint64_t v20 = a2[24];
    *(void *)(a1 + 184) = a2[23];
    *(void *)(a1 + 192) = v20;
    *(void *)(a1 + 200) = a2[25];
    uint64_t v21 = a3[11];
    unint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = (uint64_t)a2 + v21;
    uint64_t v24 = *(uint64_t *)((char *)a2 + v21 + 8);
    *unint64_t v22 = *(uint64_t *)((char *)a2 + v21);
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v25 = *(int *)(sub_10000F214(&qword_10051DCC0) + 36);
    uint64_t v26 = (char *)v22 + v25;
    uint64_t v27 = (const void *)(v23 + v25);
    uint64_t v28 = type metadata accessor for Date();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = sub_10000F214(&qword_10051A2D0);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    uint64_t v31 = a3[12];
    uint64_t v32 = a3[13];
    uint64_t v33 = (void *)(a1 + v31);
    uint64_t v34 = (uint64_t *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    void *v33 = *v34;
    v33[1] = v35;
    v33[2] = v34[2];
    uint64_t v36 = (void *)(a1 + v32);
    uint64_t v37 = (uint64_t *)((char *)a2 + v32);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    v36[2] = v37[2];
    uint64_t v39 = a3[14];
    uint64_t v40 = a3[15];
    uint64_t v41 = (void *)(a1 + v39);
    uint64_t v42 = (uint64_t *)((char *)a2 + v39);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    v41[2] = v42[2];
    uint64_t v44 = a1 + v40;
    uint64_t v45 = (uint64_t)a2 + v40;
    uint64_t v46 = *(void *)(v45 + 8);
    *(void *)uint64_t v44 = *(void *)v45;
    *(void *)(v44 + 8) = v46;
    *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
    uint64_t v47 = a3[16];
    uint64_t v48 = a3[17];
    uint64_t v49 = (void *)(a1 + v47);
    uint64_t v50 = (uint64_t *)((char *)a2 + v47);
    uint64_t v51 = v50[1];
    *uint64_t v49 = *v50;
    v49[1] = v51;
    v49[2] = v50[2];
    uint64_t v52 = (void *)(a1 + v48);
    uint64_t v53 = (uint64_t *)((char *)a2 + v48);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    v52[2] = v53[2];
    uint64_t v55 = a3[18];
    uint64_t v56 = a3[19];
    uint64_t v57 = (void *)(a1 + v55);
    uint64_t v58 = (uint64_t *)((char *)a2 + v55);
    uint64_t v59 = v58[1];
    *uint64_t v57 = *v58;
    v57[1] = v59;
    v57[2] = v58[2];
    uint64_t v60 = (void *)(a1 + v56);
    uint64_t v61 = (uint64_t *)((char *)a2 + v56);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    v60[2] = v61[2];
    uint64_t v63 = a3[20];
    uint64_t v64 = a3[21];
    uint64_t v65 = a1 + v63;
    uint64_t v66 = (uint64_t)a2 + v63;
    uint64_t v67 = *(void *)(v66 + 8);
    *(void *)uint64_t v65 = *(void *)v66;
    *(void *)(v65 + 8) = v67;
    *(unsigned char *)(v65 + 16) = *(unsigned char *)(v66 + 16);
    uint64_t v68 = a1 + v64;
    uint64_t v69 = (uint64_t)a2 + v64;
    uint64_t v70 = *(void *)(v69 + 8);
    *(void *)uint64_t v68 = *(void *)v69;
    *(void *)(v68 + 8) = v70;
    *(unsigned char *)(v68 + 16) = *(unsigned char *)(v69 + 16);
    uint64_t v71 = a3[22];
    uint64_t v72 = a3[23];
    uint64_t v73 = (void *)(a1 + v71);
    uint64_t v74 = (uint64_t *)((char *)a2 + v71);
    uint64_t v75 = v74[1];
    *uint64_t v73 = *v74;
    v73[1] = v75;
    v73[2] = v74[2];
    uint64_t v76 = (void *)(a1 + v72);
    uint64_t v77 = (uint64_t *)((char *)a2 + v72);
    uint64_t v78 = v77[1];
    void *v76 = *v77;
    v76[1] = v78;
    uint64_t v79 = v77[3];
    v76[2] = v77[2];
    v76[3] = v79;
    uint64_t v80 = a3[24];
    uint64_t v81 = (void *)(a1 + v80);
    uint64_t v82 = (uint64_t *)((char *)a2 + v80);
    uint64_t v83 = v82[1];
    *uint64_t v81 = *v82;
    v81[1] = v83;
    uint64_t v84 = v82[3];
    v81[2] = v82[2];
    v81[3] = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000CAE48(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(sub_10000F214(&qword_10051DCC0) + 36);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CB09C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 56);
    uint64_t v10 = *(void *)(a2 + 64);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
  }
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v13;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v14;
  uint64_t v15 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v15;
  uint64_t v16 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v16;
  uint64_t v17 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v17;
  uint64_t v18 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v18;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v84 = a3;
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(a2 + v19 + 8);
  *uint64_t v20 = *(void *)(a2 + v19);
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = *(int *)(sub_10000F214(&qword_10051DCC0) + 36);
  uint64_t v24 = (char *)v20 + v23;
  uint64_t v25 = (const void *)(v21 + v23);
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_10000F214(&qword_10051A2D0);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = v84[12];
  uint64_t v30 = v84[13];
  uint64_t v31 = (void *)(a1 + v29);
  uint64_t v32 = (void *)(a2 + v29);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  v31[2] = v32[2];
  uint64_t v34 = (void *)(a1 + v30);
  uint64_t v35 = (void *)(a2 + v30);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  v34[2] = v35[2];
  uint64_t v37 = v84[14];
  uint64_t v38 = v84[15];
  uint64_t v39 = (void *)(a1 + v37);
  uint64_t v40 = (void *)(a2 + v37);
  uint64_t v41 = v40[1];
  void *v39 = *v40;
  v39[1] = v41;
  v39[2] = v40[2];
  uint64_t v42 = a1 + v38;
  uint64_t v43 = a2 + v38;
  uint64_t v44 = *(void *)(v43 + 8);
  *(void *)uint64_t v42 = *(void *)v43;
  *(void *)(v42 + 8) = v44;
  *(unsigned char *)(v42 + 16) = *(unsigned char *)(v43 + 16);
  uint64_t v45 = v84[16];
  uint64_t v46 = v84[17];
  uint64_t v47 = (void *)(a1 + v45);
  uint64_t v48 = (void *)(a2 + v45);
  uint64_t v49 = v48[1];
  *uint64_t v47 = *v48;
  v47[1] = v49;
  v47[2] = v48[2];
  uint64_t v50 = (void *)(a1 + v46);
  uint64_t v51 = (void *)(a2 + v46);
  uint64_t v52 = v51[1];
  void *v50 = *v51;
  v50[1] = v52;
  v50[2] = v51[2];
  uint64_t v53 = v84[18];
  uint64_t v54 = v84[19];
  uint64_t v55 = (void *)(a1 + v53);
  uint64_t v56 = (void *)(a2 + v53);
  uint64_t v57 = v56[1];
  void *v55 = *v56;
  v55[1] = v57;
  v55[2] = v56[2];
  uint64_t v58 = (void *)(a1 + v54);
  uint64_t v59 = (void *)(a2 + v54);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  v58[2] = v59[2];
  uint64_t v61 = v84[20];
  uint64_t v62 = v84[21];
  uint64_t v63 = a1 + v61;
  uint64_t v64 = a2 + v61;
  uint64_t v65 = *(void *)(v64 + 8);
  *(void *)uint64_t v63 = *(void *)v64;
  *(void *)(v63 + 8) = v65;
  *(unsigned char *)(v63 + 16) = *(unsigned char *)(v64 + 16);
  uint64_t v66 = a1 + v62;
  uint64_t v67 = a2 + v62;
  uint64_t v68 = *(void *)(v67 + 8);
  *(void *)uint64_t v66 = *(void *)v67;
  *(void *)(v66 + 8) = v68;
  *(unsigned char *)(v66 + 16) = *(unsigned char *)(v67 + 16);
  uint64_t v69 = v84[22];
  uint64_t v70 = v84[23];
  uint64_t v71 = (void *)(a1 + v69);
  uint64_t v72 = (void *)(a2 + v69);
  uint64_t v73 = v72[1];
  void *v71 = *v72;
  v71[1] = v73;
  v71[2] = v72[2];
  uint64_t v74 = (void *)(a1 + v70);
  uint64_t v75 = (void *)(a2 + v70);
  uint64_t v76 = v75[1];
  *uint64_t v74 = *v75;
  v74[1] = v76;
  uint64_t v77 = v75[3];
  v74[2] = v75[2];
  v74[3] = v77;
  uint64_t v78 = v84[24];
  uint64_t v79 = (void *)(a1 + v78);
  uint64_t v80 = (void *)(a2 + v78);
  uint64_t v81 = v80[1];
  *uint64_t v79 = *v80;
  v79[1] = v81;
  uint64_t v82 = v80[3];
  v79[2] = v80[2];
  v79[3] = v82;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000CB51C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a1 + 32);
  uint64_t v7 = (_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v8)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000CBC28(a1 + 32);
      uint64_t v9 = *(void *)(a2 + 64);
      long long v10 = *(_OWORD *)(a2 + 48);
      _OWORD *v6 = *v7;
      *(_OWORD *)(a1 + 48) = v10;
      *(void *)(a1 + 64) = v9;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *v7;
    long long v12 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    _OWORD *v6 = v11;
    *(_OWORD *)(a1 + 48) = v12;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[11];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = a2 + v13;
  *uint64_t v14 = *(void *)(a2 + v13);
  v14[1] = *(void *)(a2 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(int *)(sub_10000F214(&qword_10051DCC0) + 36);
  uint64_t v17 = (char *)v14 + v16;
  uint64_t v18 = (char *)(v15 + v16);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_13;
  }
  if (v23)
  {
LABEL_13:
    uint64_t v24 = sub_10000F214(&qword_10051A2D0);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_14:
  uint64_t v25 = a3[12];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = a2 + v25;
  *uint64_t v26 = *(void *)(a2 + v25);
  v26[1] = *(void *)(a2 + v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26[2] = *(void *)(v27 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[13];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = a2 + v28;
  *uint64_t v29 = *(void *)(a2 + v28);
  v29[1] = *(void *)(a2 + v28 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29[2] = *(void *)(v30 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[14];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = a2 + v31;
  *uint64_t v32 = *(void *)(a2 + v31);
  v32[1] = *(void *)(a2 + v31 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32[2] = *(void *)(v33 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[15];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)uint64_t v35 = *(void *)(a2 + v34);
  *(void *)(v35 + 8) = *(void *)(a2 + v34 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v35 + 16) = *(unsigned char *)(v36 + 16);
  uint64_t v37 = a3[16];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = a2 + v37;
  *uint64_t v38 = *(void *)(a2 + v37);
  v38[1] = *(void *)(a2 + v37 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38[2] = *(void *)(v39 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[17];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = a2 + v40;
  *uint64_t v41 = *(void *)(a2 + v40);
  v41[1] = *(void *)(a2 + v40 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41[2] = *(void *)(v42 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[18];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = a2 + v43;
  *uint64_t v44 = *(void *)(a2 + v43);
  v44[1] = *(void *)(a2 + v43 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44[2] = *(void *)(v45 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[19];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = a2 + v46;
  *uint64_t v47 = *(void *)(a2 + v46);
  v47[1] = *(void *)(a2 + v46 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47[2] = *(void *)(v48 + 16);
  uint64_t v49 = a3[20];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  *(void *)uint64_t v50 = *(void *)(a2 + v49);
  *(void *)(v50 + 8) = *(void *)(a2 + v49 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v50 + 16) = *(unsigned char *)(v51 + 16);
  uint64_t v52 = a3[21];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  *(void *)uint64_t v53 = *(void *)(a2 + v52);
  *(void *)(v53 + 8) = *(void *)(a2 + v52 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v53 + 16) = *(unsigned char *)(v54 + 16);
  uint64_t v55 = a3[22];
  uint64_t v56 = (void *)(a1 + v55);
  uint64_t v57 = a2 + v55;
  void *v56 = *(void *)(a2 + v55);
  v56[1] = *(void *)(a2 + v55 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56[2] = *(void *)(v57 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[23];
  uint64_t v59 = (void *)(a1 + v58);
  uint64_t v60 = a2 + v58;
  void *v59 = *(void *)(a2 + v58);
  v59[1] = *(void *)(a2 + v58 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[2] = *(void *)(v60 + 16);
  v59[3] = *(void *)(v60 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v61 = a3[24];
  uint64_t v62 = (void *)(a1 + v61);
  uint64_t v63 = a2 + v61;
  *uint64_t v62 = *(void *)(a2 + v61);
  v62[1] = *(void *)(a2 + v61 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62[2] = *(void *)(v63 + 16);
  v62[3] = *(void *)(v63 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CBC28(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CBC5C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  uint64_t v8 = a3[11];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = *(int *)(sub_10000F214(&qword_10051DCC0) + 36);
  long long v12 = (void *)(v9 + v11);
  uint64_t v13 = (const void *)(v10 + v11);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000F214(&qword_10051A2D0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[12];
  uint64_t v18 = a3[13];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  uint64_t v23 = a3[14];
  uint64_t v24 = a3[15];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(void *)(v25 + 16) = *(void *)(v26 + 16);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
  uint64_t v29 = a3[16];
  uint64_t v30 = a3[17];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = (long long *)(a2 + v29);
  long long v33 = *v32;
  *(void *)(v31 + 16) = *((void *)v32 + 2);
  *(_OWORD *)uint64_t v31 = v33;
  uint64_t v34 = a1 + v30;
  uint64_t v35 = a2 + v30;
  *(void *)(v34 + 16) = *(void *)(v35 + 16);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  uint64_t v36 = a3[18];
  uint64_t v37 = a3[19];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(void *)(v38 + 16) = *(void *)(v39 + 16);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  uint64_t v40 = a1 + v37;
  uint64_t v41 = a2 + v37;
  *(void *)(v40 + 16) = *(void *)(v41 + 16);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  uint64_t v42 = a3[20];
  uint64_t v43 = a3[21];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = a2 + v42;
  *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  uint64_t v46 = a1 + v43;
  uint64_t v47 = a2 + v43;
  *(unsigned char *)(v46 + 16) = *(unsigned char *)(v47 + 16);
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
  uint64_t v48 = a3[22];
  uint64_t v49 = a3[23];
  uint64_t v50 = a1 + v48;
  uint64_t v51 = a2 + v48;
  *(void *)(v50 + 16) = *(void *)(v51 + 16);
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  uint64_t v52 = (_OWORD *)(a1 + v49);
  uint64_t v53 = (_OWORD *)(a2 + v49);
  long long v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  uint64_t v55 = a3[24];
  uint64_t v56 = (_OWORD *)(a1 + v55);
  uint64_t v57 = (_OWORD *)(a2 + v55);
  long long v58 = v57[1];
  _OWORD *v56 = *v57;
  v56[1] = v58;
  return a1;
}

uint64_t sub_1000CBF44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48))
  {
    uint64_t v8 = *(void *)(a2 + 48);
    if (v8)
    {
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000CBC28(a1 + 32);
  }
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v17;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = a2 + v18;
  uint64_t v21 = *(void *)(a2 + v18 + 8);
  *uint64_t v19 = *(void *)(a2 + v18);
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(int *)(sub_10000F214(&qword_10051DCC0) + 36);
  uint64_t v23 = (char *)v19 + v22;
  uint64_t v24 = (char *)(v20 + v22);
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v23, v24, v25);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    goto LABEL_11;
  }
  if (v29)
  {
LABEL_11:
    uint64_t v30 = sub_10000F214(&qword_10051A2D0);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_12:
  uint64_t v31 = a3[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = a2 + v31;
  uint64_t v34 = *(void *)(a2 + v31 + 8);
  *uint64_t v32 = *(void *)(a2 + v31);
  v32[1] = v34;
  swift_bridgeObjectRelease();
  v32[2] = *(void *)(v33 + 16);
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = a2 + v35;
  uint64_t v38 = *(void *)(a2 + v35 + 8);
  *uint64_t v36 = *(void *)(a2 + v35);
  v36[1] = v38;
  swift_bridgeObjectRelease();
  v36[2] = *(void *)(v37 + 16);
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[14];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = a2 + v39;
  uint64_t v42 = *(void *)(a2 + v39 + 8);
  *uint64_t v40 = *(void *)(a2 + v39);
  v40[1] = v42;
  swift_bridgeObjectRelease();
  void v40[2] = *(void *)(v41 + 16);
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[15];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  uint64_t v46 = *(void *)(a2 + v43 + 8);
  *(void *)uint64_t v44 = *(void *)(a2 + v43);
  *(void *)(v44 + 8) = v46;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
  uint64_t v47 = a3[16];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = a2 + v47;
  uint64_t v50 = *(void *)(a2 + v47 + 8);
  void *v48 = *(void *)(a2 + v47);
  v48[1] = v50;
  swift_bridgeObjectRelease();
  v48[2] = *(void *)(v49 + 16);
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[17];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = a2 + v51;
  uint64_t v54 = *(void *)(a2 + v51 + 8);
  *uint64_t v52 = *(void *)(a2 + v51);
  v52[1] = v54;
  swift_bridgeObjectRelease();
  v52[2] = *(void *)(v53 + 16);
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[18];
  uint64_t v56 = (void *)(a1 + v55);
  uint64_t v57 = a2 + v55;
  uint64_t v58 = *(void *)(a2 + v55 + 8);
  void *v56 = *(void *)(a2 + v55);
  v56[1] = v58;
  swift_bridgeObjectRelease();
  v56[2] = *(void *)(v57 + 16);
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[19];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = a2 + v59;
  uint64_t v62 = *(void *)(a2 + v59 + 8);
  *uint64_t v60 = *(void *)(a2 + v59);
  v60[1] = v62;
  swift_bridgeObjectRelease();
  v60[2] = *(void *)(v61 + 16);
  uint64_t v63 = a3[20];
  uint64_t v64 = a1 + v63;
  uint64_t v65 = a2 + v63;
  uint64_t v66 = *(void *)(a2 + v63 + 8);
  *(void *)uint64_t v64 = *(void *)(a2 + v63);
  *(void *)(v64 + 8) = v66;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v64 + 16) = *(unsigned char *)(v65 + 16);
  uint64_t v67 = a3[21];
  uint64_t v68 = a1 + v67;
  uint64_t v69 = a2 + v67;
  uint64_t v70 = *(void *)(a2 + v67 + 8);
  *(void *)uint64_t v68 = *(void *)(a2 + v67);
  *(void *)(v68 + 8) = v70;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v68 + 16) = *(unsigned char *)(v69 + 16);
  uint64_t v71 = a3[22];
  uint64_t v72 = (void *)(a1 + v71);
  uint64_t v73 = a2 + v71;
  uint64_t v74 = *(void *)(a2 + v71 + 8);
  void *v72 = *(void *)(a2 + v71);
  v72[1] = v74;
  swift_bridgeObjectRelease();
  v72[2] = *(void *)(v73 + 16);
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[23];
  uint64_t v76 = (void *)(a1 + v75);
  uint64_t v77 = a2 + v75;
  uint64_t v78 = *(void *)(a2 + v75 + 8);
  void *v76 = *(void *)(a2 + v75);
  v76[1] = v78;
  swift_bridgeObjectRelease();
  uint64_t v79 = *(void *)(v77 + 24);
  v76[2] = *(void *)(v77 + 16);
  v76[3] = v79;
  swift_bridgeObjectRelease();
  uint64_t v80 = a3[24];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (void *)(a2 + v80);
  uint64_t v83 = v82[1];
  *uint64_t v81 = *v82;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  uint64_t v84 = v82[3];
  v81[2] = v82[2];
  v81[3] = v84;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CC40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CC420);
}

uint64_t sub_1000CC420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000F214(&qword_10051DCC0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000CC4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CC4E8);
}

uint64_t sub_1000CC4E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_10051DCC0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1000CC594()
{
  sub_1000CC670();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000CC670()
{
  if (!qword_10051DD38)
  {
    sub_10000F69C(&qword_10051A2D0);
    sub_1000CC6D8();
    unint64_t v0 = type metadata accessor for URLParameter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051DD38);
    }
  }
}

unint64_t sub_1000CC6D8()
{
  unint64_t result = qword_10051DD40;
  if (!qword_10051DD40)
  {
    sub_10000F69C(&qword_10051A2D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DD40);
  }
  return result;
}

uint64_t type metadata accessor for URLParameter()
{
  return sub_1000684BC();
}

uint64_t sub_1000CC75C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000CC7F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t sub_1000CC900(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_1000CC974(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void *sub_1000CCA04(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *sub_1000CCA9C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_1000CCB0C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1000CCB94(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1000CCD34(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1000CCF94);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

unint64_t sub_1000CCFC4()
{
  unint64_t result = qword_10051DE40;
  if (!qword_10051DE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE40);
  }
  return result;
}

unint64_t sub_1000CD01C()
{
  unint64_t result = qword_10051DE48;
  if (!qword_10051DE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE48);
  }
  return result;
}

unint64_t sub_1000CD074()
{
  unint64_t result = qword_10051DE50;
  if (!qword_10051DE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE50);
  }
  return result;
}

unint64_t sub_1000CD0C8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E52C8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000CD114(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E53D8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unsigned char *_s6Tamale15TapToRadarDraftV11DeviceClassOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CD22CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.AutoDiagnostics()
{
  return &type metadata for TapToRadarDraft.AutoDiagnostics;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.RemoteDeviceSelections()
{
  return &type metadata for TapToRadarDraft.RemoteDeviceSelections;
}

unsigned char *storeEnumTagSinglePayload for TapToRadarDraft.Reproducibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CD340);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.Reproducibility()
{
  return &type metadata for TapToRadarDraft.Reproducibility;
}

unsigned char *storeEnumTagSinglePayload for TapToRadarDraft.Classification(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CD444);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.Classification()
{
  return &type metadata for TapToRadarDraft.Classification;
}

unint64_t sub_1000CD480()
{
  unint64_t result = qword_10051DE58;
  if (!qword_10051DE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE58);
  }
  return result;
}

unint64_t sub_1000CD4D8()
{
  unint64_t result = qword_10051DE60;
  if (!qword_10051DE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE60);
  }
  return result;
}

unint64_t sub_1000CD530()
{
  unint64_t result = qword_10051DE68;
  if (!qword_10051DE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE68);
  }
  return result;
}

unint64_t sub_1000CD588()
{
  unint64_t result = qword_10051DE70;
  if (!qword_10051DE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE70);
  }
  return result;
}

unint64_t sub_1000CD5E0()
{
  unint64_t result = qword_10051DE78;
  if (!qword_10051DE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE78);
  }
  return result;
}

unint64_t sub_1000CD638()
{
  unint64_t result = qword_10051DE80;
  if (!qword_10051DE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE80);
  }
  return result;
}

unint64_t sub_1000CD690()
{
  unint64_t result = qword_10051DE88;
  if (!qword_10051DE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DE88);
  }
  return result;
}

unint64_t sub_1000CD6E4(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 7) {
    return 7;
  }
  else {
    return v5;
  }
}

float sub_1000CD72C(double a1)
{
  double v2 = *(double *)(v1 + 24);
  if (v2 == -INFINITY)
  {
    *(double *)(v1 + 24) = a1;
    return 0.0;
  }
  float v3 = 0.0;
  if (*(unsigned char *)(v1 + 48) != 1) {
    return 0.0;
  }
  double v4 = *(double *)(v1 + 56);
  if (v4 > 0.0)
  {
    float v5 = v4;
    float v3 = (float)(*(float *)(v1 + 40) - *(float *)(v1 + 44)) / v5;
  }
  float v6 = a1 - v2;
  return v3 * v6;
}

float sub_1000CD790()
{
  float v1 = v0[8];
  float v2 = v0[9];
  float v3 = v0[10];
  if ((float)(v1 * v2) == 0.0)
  {
    if (v3 == 0.0)
    {
      float v3 = fabsf(v0[11]);
      float v1 = v0[9];
    }
    float v4 = fabsf(v0[4]);
    float v2 = v1;
  }
  else
  {
    float v4 = v3 - v0[4];
    float v3 = v3 - fabsf(v0[11]);
  }
  return (float)((float)(v2 * v4) / v3) + (float)((float)((float)(1.0 - v1) * (float)(v3 - v4)) / v3);
}

void sub_1000CD800(float a1, double a2)
{
  double v3 = *(double *)(v2 + 24);
  if (v3 <= a2)
  {
    float v5 = log10f(a1 / (float)(1.0 - a1));
    float v6 = 0.0;
    if (v3 != -INFINITY && *(unsigned char *)(v2 + 48) == 1)
    {
      double v7 = *(double *)(v2 + 56);
      if (v7 > 0.0)
      {
        float v8 = v7;
        float v6 = (float)(*(float *)(v2 + 40) - *(float *)(v2 + 44)) / v8;
      }
      float v9 = a2 - v3;
      float v6 = v6 * v9;
    }
    *(double *)(v2 + 24) = a2;
    float v10 = v5 - v6;
    if (*(unsigned char *)(v2 + 64))
    {
      if (*(unsigned char *)(v2 + 64) == 1)
      {
        float v11 = v10 + *(float *)(v2 + 16);
        if (*(float *)(v2 + 44) > v11) {
          float v11 = *(float *)(v2 + 44);
        }
      }
      else
      {
        float v11 = v10 + *(float *)(v2 + 16);
      }
    }
    else
    {
      float v11 = v10 + *(float *)(v2 + 16);
      if (v11 >= *(float *)(v2 + 40)) {
        float v11 = *(float *)(v2 + 40);
      }
    }
    *(float *)(v2 + 16) = v11;
    if (*(float *)(v2 + 40) >= v11)
    {
      if (v11 >= *(float *)(v2 + 44)) {
        return;
      }
      char v12 = 1;
    }
    else
    {
      char v12 = 0;
    }
    *(unsigned char *)(v2 + 64) = v12;
  }
}

uint64_t sub_1000CD900()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SPRTTrigger()
{
  return self;
}

ValueMetadata *type metadata accessor for SPRTTrigger.State()
{
  return &type metadata for SPRTTrigger.State;
}

uint64_t getEnumTagSinglePayload for SPRTTrigger.Properties(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SPRTTrigger.Properties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPRTTrigger.Properties()
{
  return &type metadata for SPRTTrigger.Properties;
}

uint64_t sub_1000CD9E4(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051E000);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  uint64_t v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051E008);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  double v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051E010);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  float v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051E018);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unsigned int v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000CE828();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_1000CE8D0();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_1000CE87C();
      int v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_1000CE924();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1000CDD58()
{
  uint64_t v1 = 0x657669746167656ELL;
  if (*v0 != 1) {
    uint64_t v1 = 0x657275736E75;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6576697469736F70;
  }
}

uint64_t sub_1000CDDB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000CE168(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000CDDD8(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000CDDE4(uint64_t a1)
{
  unint64_t v2 = sub_1000CE828();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CDE20(uint64_t a1)
{
  unint64_t v2 = sub_1000CE828();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CDE5C()
{
  return 0;
}

void sub_1000CDE68(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000CDE74(uint64_t a1)
{
  unint64_t v2 = sub_1000CE8D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CDEB0(uint64_t a1)
{
  unint64_t v2 = sub_1000CE8D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CDEEC(uint64_t a1)
{
  unint64_t v2 = sub_1000CE924();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CDF28(uint64_t a1)
{
  unint64_t v2 = sub_1000CE924();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CDF64@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1000CDF94(uint64_t a1)
{
  unint64_t v2 = sub_1000CE87C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CDFD0(uint64_t a1)
{
  unint64_t v2 = sub_1000CE87C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000CE00C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000CE2B8(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_1000CE038(void *a1)
{
  return sub_1000CD9E4(a1, *v1);
}

unint64_t sub_1000CE058()
{
  unint64_t result = qword_10051DFB8;
  if (!qword_10051DFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DFB8);
  }
  return result;
}

void sub_1000CE0AC(char a1@<W0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, double a5@<D2>)
{
  float v8 = a3;
  if ((float)(a3 * a4) == 0.0)
  {
    if (a3 == 0.0) {
      a3 = a4;
    }
    float v10 = log10f((float)(1.0 - a3) / a3);
    if (v8 == 0.0) {
      float v11 = 0.0;
    }
    else {
      float v11 = v10;
    }
    float v12 = -v10;
    if (a4 == 0.0) {
      float v12 = 0.0;
    }
  }
  else
  {
    float v11 = log10f((float)(1.0 - a4) / a3);
    float v12 = log10f(a4 / (float)(1.0 - v8));
  }
  *(float *)a2 = v8;
  *(float *)(a2 + 4) = a4;
  *(float *)(a2 + 8) = v11;
  *(float *)(a2 + 12) = v12;
  *(unsigned char *)(a2 + 16) = a1 & 1;
  *(double *)(a2 + 24) = a5;
}

uint64_t sub_1000CE168(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6576697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657669746167656ELL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657275736E75 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_1000CE2B8(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051DFC0);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  int v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10051DFC8);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051DFD0);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  float v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051DFD8);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  float v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F3B0(a1, a1[3]);
  sub_1000CE828();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  uint64_t v30 = a1;
  unsigned int v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    float v11 = v18;
    sub_10000F214(&qword_10051E3E0);
    *float v11 = &type metadata for SPRTTrigger.State;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
    return v11;
  }
  float v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_1000CE8D0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_1000CE87C();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_1000CE924();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v30);
  return v11;
}

unint64_t sub_1000CE828()
{
  unint64_t result = qword_10051DFE0;
  if (!qword_10051DFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DFE0);
  }
  return result;
}

unint64_t sub_1000CE87C()
{
  unint64_t result = qword_10051DFE8;
  if (!qword_10051DFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DFE8);
  }
  return result;
}

unint64_t sub_1000CE8D0()
{
  unint64_t result = qword_10051DFF0;
  if (!qword_10051DFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DFF0);
  }
  return result;
}

unint64_t sub_1000CE924()
{
  unint64_t result = qword_10051DFF8;
  if (!qword_10051DFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051DFF8);
  }
  return result;
}

unsigned char *_s6Tamale11SPRTTriggerC5StateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CEA44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPRTTrigger.State.CodingKeys()
{
  return &type metadata for SPRTTrigger.State.CodingKeys;
}

ValueMetadata *type metadata accessor for SPRTTrigger.State.PositiveCodingKeys()
{
  return &type metadata for SPRTTrigger.State.PositiveCodingKeys;
}

ValueMetadata *type metadata accessor for SPRTTrigger.State.NegativeCodingKeys()
{
  return &type metadata for SPRTTrigger.State.NegativeCodingKeys;
}

ValueMetadata *type metadata accessor for SPRTTrigger.State.UnsureCodingKeys()
{
  return &type metadata for SPRTTrigger.State.UnsureCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SPRTTrigger.Properties.TimeDecayType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CEB78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPRTTrigger.Properties.TimeDecayType()
{
  return &type metadata for SPRTTrigger.Properties.TimeDecayType;
}

unint64_t sub_1000CEBB4()
{
  unint64_t result = qword_10051E020;
  if (!qword_10051E020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E020);
  }
  return result;
}

unint64_t sub_1000CEC0C()
{
  unint64_t result = qword_10051E028;
  if (!qword_10051E028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E028);
  }
  return result;
}

unint64_t sub_1000CEC64()
{
  unint64_t result = qword_10051E030;
  if (!qword_10051E030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E030);
  }
  return result;
}

unint64_t sub_1000CECBC()
{
  unint64_t result = qword_10051E038;
  if (!qword_10051E038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E038);
  }
  return result;
}

unint64_t sub_1000CED14()
{
  unint64_t result = qword_10051E040;
  if (!qword_10051E040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E040);
  }
  return result;
}

unint64_t sub_1000CED6C()
{
  unint64_t result = qword_10051E048;
  if (!qword_10051E048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E048);
  }
  return result;
}

unint64_t sub_1000CEDC4()
{
  unint64_t result = qword_10051E050;
  if (!qword_10051E050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E050);
  }
  return result;
}

unint64_t sub_1000CEE1C()
{
  unint64_t result = qword_10051E058;
  if (!qword_10051E058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E058);
  }
  return result;
}

unint64_t sub_1000CEE74()
{
  unint64_t result = qword_10051E060;
  if (!qword_10051E060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E060);
  }
  return result;
}

unint64_t sub_1000CEECC()
{
  unint64_t result = qword_10051E068;
  if (!qword_10051E068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E068);
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.SourceType()
{
  return &type metadata for CameraControllerConfiguration.SourceType;
}

uint64_t initializeBufferWithCopyOfBuffer for CameraControllerConfiguration.SafeAreaStrategy(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CameraControllerConfiguration.SafeAreaStrategy(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CameraControllerConfiguration.SafeAreaStrategy(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000CEFA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000CEFC4(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.SafeAreaStrategy()
{
  return &type metadata for CameraControllerConfiguration.SafeAreaStrategy;
}

void *sub_1000CEFF4(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    unsigned int v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    uint64_t v7 = a3[10];
    float v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    *(_WORD *)(a1 + 28) = *((_WORD *)a2 + 14);
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_10000F214(&qword_10051E070);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = a3[12];
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = *(unsigned char *)(v17 + 8);
    uint64_t v18 = a3[14];
    *(void *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *((unsigned char *)v4 + v18) = *((unsigned char *)a2 + v18);
    uint64_t v19 = a3[16];
    *((unsigned char *)v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    *((unsigned char *)v4 + v19) = *((unsigned char *)a2 + v19);
    uint64_t v20 = a3[18];
    *((unsigned char *)v4 + a3[17]) = *((unsigned char *)a2 + a3[17]);
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    if (v12((char *)a2 + v20, 1, v10))
    {
      uint64_t v23 = sub_10000F214(&qword_10051E070);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v21, v22, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
    }
    uint64_t v24 = a3[20];
    *((unsigned char *)v4 + a3[19]) = *((unsigned char *)a2 + a3[19]);
    *((unsigned char *)v4 + v24) = *((unsigned char *)a2 + v24);
    uint64_t v25 = a3[22];
    *((unsigned char *)v4 + a3[21]) = *((unsigned char *)a2 + a3[21]);
    uint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (char *)a2 + v25;
    if (v12(v27, 1, v10))
    {
      uint64_t v28 = sub_10000F214(&qword_10051E070);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v26, v27, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v26, 0, 1, v10);
    }
  }
  return v4;
}

uint64_t sub_1000CF338(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[10];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v5 - 8);
  unsigned int v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v6(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + a2[18];
  if (!v6(v7, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v7, v5);
  }
  uint64_t v8 = a1 + a2[22];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v8, 1, v5);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v8, v5);
  }
  return result;
}

uint64_t sub_1000CF4AC(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000F214(&qword_10051E070);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (v11((const void *)(a2 + v18), 1, v9))
  {
    uint64_t v21 = sub_10000F214(&qword_10051E070);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v19, v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  }
  uint64_t v22 = a3[20];
  *(unsigned char *)(a1 + a3[19]) = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  uint64_t v23 = a3[22];
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  if (v11(v25, 1, v9))
  {
    uint64_t v26 = sub_10000F214(&qword_10051E070);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v24, v25, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_1000CF7A0(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000F214(&qword_10051E070);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v15 = a3[12];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  *(unsigned char *)(v16 + 8) = *((unsigned char *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[13];
  uint64_t v20 = (_DWORD *)(a1 + v19);
  uint64_t v21 = (_DWORD *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  uint64_t v22 = a3[18];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  int v25 = v11((void *)(a1 + v22), 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v23, v24, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v23, v9);
LABEL_12:
    uint64_t v27 = sub_10000F214(&qword_10051E070);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v23, v24, v9);
LABEL_13:
  *(unsigned char *)(a1 + a3[19]) = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + a3[20]) = *(unsigned char *)(a2 + a3[20]);
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  uint64_t v28 = a3[22];
  int v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  int v31 = v11((void *)(a1 + v28), 1, v9);
  int v32 = v11(v30, 1, v9);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v29, v30, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v29, v9);
    goto LABEL_18;
  }
  if (v32)
  {
LABEL_18:
    uint64_t v33 = sub_10000F214(&qword_10051E070);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v29, v30, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
  return a1;
}

uint64_t sub_1000CFBE8(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000F214(&qword_10051E070);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (v11((const void *)(a2 + v18), 1, v9))
  {
    uint64_t v21 = sub_10000F214(&qword_10051E070);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v19, v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  }
  uint64_t v22 = a3[20];
  *(unsigned char *)(a1 + a3[19]) = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  uint64_t v23 = a3[22];
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  uint64_t v24 = (void *)(a1 + v23);
  int v25 = (const void *)(a2 + v23);
  if (v11(v25, 1, v9))
  {
    uint64_t v26 = sub_10000F214(&qword_10051E070);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_1000CFEDC(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *(_DWORD *)(a1 + 24) = v6;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000F214(&qword_10051E070);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  uint64_t v21 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  int v24 = v12((void *)(a1 + v21), 1, v10);
  int v25 = v12(v23, 1, v10);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v22, v23, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v22, v10);
LABEL_12:
    uint64_t v26 = sub_10000F214(&qword_10051E070);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v22, v23, v10);
LABEL_13:
  uint64_t v27 = a3[20];
  *(unsigned char *)(a1 + a3[19]) = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v27) = *(unsigned char *)(a2 + v27);
  uint64_t v28 = a3[22];
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  int v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  int v31 = v12((void *)(a1 + v28), 1, v10);
  int v32 = v12(v30, 1, v10);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v29, v30, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v29, v10);
    goto LABEL_18;
  }
  if (v32)
  {
LABEL_18:
    uint64_t v33 = sub_10000F214(&qword_10051E070);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v29, v30, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v10);
  return a1;
}

uint64_t sub_1000D02F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D0308);
}

uint64_t sub_1000D0308(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    if (v4 >= 2) {
      return v4 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_10000F214(&qword_10051E070);
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 40)];
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000D03B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D03C8);
}

unsigned char *sub_1000D03C8(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_10051E070);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 40)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CameraControllerConfiguration(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10051E0D0);
}

void sub_1000D0490()
{
  sub_1000E2DCC(319, (unint64_t *)&qword_10051E0E0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000D05B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(*a1 + 8);
  uint64_t v6 = *(void *)(*a1 + 16);
  uint64_t v52 = *(void *)(*a1 + 24);
  char v7 = *(unsigned char *)(*a1 + 32);
  char v8 = *(unsigned char *)(*a1 + 33);
  uint64_t v53 = *(void *)(*a1 + 40);
  *(void *)a2 = *(void *)*a1;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v52;
  *(unsigned char *)(a2 + 32) = v7;
  *(unsigned char *)(a2 + 33) = v8;
  *(void *)(a2 + 40) = v53;
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v60 = *(void *)(v4 + 24);
  char v11 = *(unsigned char *)(v4 + 32);
  char v12 = *(unsigned char *)(v4 + 33);
  uint64_t v61 = *(void *)(v4 + 40);
  *(void *)(a2 + 48) = *(void *)v4;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v10;
  *(void *)(a2 + 72) = v60;
  *(unsigned char *)(a2 + 80) = v11;
  *(unsigned char *)(a2 + 81) = v12;
  *(void *)(a2 + 88) = v61;
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v55 = *(void *)(v13 + 24);
  __int16 v17 = *(_WORD *)(v13 + 32);
  uint64_t v59 = *(void *)(v13 + 40);
  *(void *)(a2 + 96) = *(void *)v13;
  *(void *)(a2 + 104) = v15;
  *(void *)(a2 + 112) = v16;
  *(void *)(a2 + 120) = v55;
  *(_WORD *)(a2 + 128) = v17;
  *(void *)(a2 + 136) = v59;
  uint64_t v18 = *(void *)(v14 + 8);
  uint64_t v19 = *(void *)(v14 + 16);
  uint64_t v63 = *(void *)(v14 + 24);
  __int16 v20 = *(_WORD *)(v14 + 32);
  uint64_t v65 = *(void *)(v14 + 40);
  *(void *)(a2 + 144) = *(void *)v14;
  *(void *)(a2 + 152) = v18;
  *(void *)(a2 + 160) = v19;
  *(void *)(a2 + 168) = v63;
  *(_WORD *)(a2 + 176) = v20;
  *(void *)(a2 + 184) = v65;
  uint64_t v21 = a1[4];
  uint64_t v22 = a1[5];
  uint64_t v23 = *(void *)(v21 + 8);
  uint64_t v24 = *(void *)(v21 + 24);
  uint64_t v25 = *(void *)(v21 + 16);
  uint64_t v26 = *(void *)(v21 + 32);
  LOBYTE(v19) = *(unsigned char *)(v21 + 40);
  uint64_t v27 = *(void *)(v21 + 48);
  LOBYTE(v15) = *(unsigned char *)(v21 + 56);
  uint64_t v56 = *(void *)(v21 + 64);
  *(void *)(a2 + 192) = *(void *)v21;
  *(void *)(a2 + 200) = v23;
  *(void *)(a2 + 208) = v25;
  *(void *)(a2 + 216) = v24;
  *(void *)(a2 + 224) = v26;
  *(unsigned char *)(a2 + 232) = v19;
  *(void *)(a2 + 240) = v27;
  *(unsigned char *)(a2 + 248) = v15;
  *(void *)(a2 + 256) = v56;
  uint64_t v54 = *(void *)(v22 + 8);
  uint64_t v28 = *(void *)(v22 + 16);
  uint64_t v29 = *(void *)(v22 + 24);
  LOBYTE(v20) = *(unsigned char *)(v22 + 32);
  LOBYTE(v26) = *(unsigned char *)(v22 + 33);
  uint64_t v57 = *(void *)(v22 + 40);
  uint64_t v58 = *(void *)(v22 + 48);
  *(void *)(a2 + 264) = *(void *)v22;
  *(void *)(a2 + 272) = v54;
  *(void *)(a2 + 280) = v28;
  *(void *)(a2 + 288) = v29;
  *(unsigned char *)(a2 + 296) = v20;
  *(unsigned char *)(a2 + 297) = v26;
  *(void *)(a2 + 304) = v57;
  *(void *)(a2 + 312) = v58;
  uint64_t v30 = (uint64_t *)a1[6];
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  uint64_t v33 = v30[2];
  uint64_t v62 = v30[3];
  uint64_t v64 = v30[5];
  *(_WORD *)(a2 + 352) = *((_WORD *)v30 + 16);
  *(void *)(a2 + 320) = v31;
  *(void *)(a2 + 328) = v32;
  *(void *)(a2 + 336) = v33;
  *(void *)(a2 + 344) = v62;
  *(void *)(a2 + 360) = v64;
  uint64_t v34 = (int *)sub_10000F214((uint64_t *)&unk_10051E370);
  sub_10000FB74(a1[7], a2 + v34[36], (uint64_t *)&unk_10051E220);
  uint64_t v35 = a2 + v34[40];
  uint64_t v36 = a1[8];
  uint64_t v37 = (void *)a1[9];
  uint64_t v38 = *(void *)(v36 + 8);
  uint64_t v40 = *(void *)(v36 + 16);
  uint64_t v39 = *(void *)(v36 + 24);
  char v41 = *(unsigned char *)(v36 + 32);
  char v42 = *(unsigned char *)(v36 + 33);
  uint64_t v43 = *(void *)(v36 + 40);
  uint64_t v51 = *(void *)(v36 + 48);
  *(void *)uint64_t v35 = *(void *)v36;
  *(void *)(v35 + 8) = v38;
  *(void *)(v35 + 16) = v40;
  *(void *)(v35 + 24) = v39;
  *(unsigned char *)(v35 + 32) = v41;
  *(unsigned char *)(v35 + 33) = v42;
  *(void *)(v35 + 40) = v43;
  *(void *)(v35 + 48) = v51;
  uint64_t v44 = (void *)(a2 + v34[44]);
  uint64_t v45 = v37[1];
  uint64_t v46 = v37[2];
  *uint64_t v44 = *v37;
  v44[1] = v45;
  v44[2] = v46;
  uint64_t v47 = a2 + v34[48];
  uint64_t v48 = a1[10];
  uint64_t v49 = sub_10000F214(&qword_10051E210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000F724(v57);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000F724(v43);
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000D0974@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = *(void *)*a1;
  char v6 = *(unsigned char *)(*a1 + 9);
  uint64_t v7 = *(void *)(*a1 + 16);
  char v8 = *(unsigned char *)(*a1 + 24);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(*a1 + 8);
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 9) = v6;
  *(void *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 24) = v8;
  char v9 = *v4;
  char v10 = v4[1];
  LOBYTE(v4) = v4[2];
  *(unsigned char *)(a2 + 25) = v9;
  *(unsigned char *)(a2 + 26) = v10;
  *(unsigned char *)(a2 + 27) = (_BYTE)v4;
  char v11 = (int *)sub_10000F214(&qword_10051E9A8);
  sub_10000FB74(a1[2], a2 + v11[16], &qword_10051E9B0);
  uint64_t v12 = a2 + v11[20];
  uint64_t v13 = a1[3];
  uint64_t v14 = sub_10000F214(&qword_10051E9B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  sub_10000FB74(a1[4], a2 + v11[24], &qword_10051E9C0);
  sub_10000FB74(a1[5], a2 + v11[28], &qword_10051E9C8);
  uint64_t v15 = a2 + v11[32];
  uint64_t v16 = a1[6];
  uint64_t v17 = sub_10000F214(&qword_10051E9D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  sub_10000FB74(a1[7], a2 + v11[36], &qword_10051E9D8);
  sub_10000FB74(a1[8], a2 + v11[40], &qword_10051E9E0);
  sub_10000FB74(a1[9], a2 + v11[44], &qword_10051E9E8);
  sub_10000FB74(a1[10], a2 + v11[48], &qword_10051E9F0);
  sub_10000FB74(a1[11], a2 + v11[52], &qword_10051E9F8);
  sub_10000FB74(a1[12], a2 + v11[56], &qword_10051EA00);

  return swift_retain();
}

uint64_t sub_1000D0B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10000FBD8(a1, &qword_10051A8C0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1000D0D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D0D14(a1, a2, a3, &qword_10051F3D0);
}

uint64_t sub_1000D0D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000FBD8(a1, &qword_10051A8C0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_10000F214(a4);
  return swift_task_create();
}

uint64_t sub_1000D0E9C@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 257;
  *(_OWORD *)(a1 + 8) = xmmword_10043CDE0;
  *(_DWORD *)(a1 + 24) = 1028443341;
  *(_WORD *)(a1 + 28) = 0;
  uint64_t v2 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v3 = a1 + v2[10];
  uint64_t v4 = type metadata accessor for URL();
  char v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v10(v3, 1, 1, v4);
  *(unsigned char *)(a1 + v2[11]) = 0;
  uint64_t v5 = v2[12];
  if (qword_100517DF8 != -1) {
    swift_once();
  }
  uint64_t v6 = a1 + v5;
  char v7 = byte_10055E110;
  *(void *)uint64_t v6 = qword_10055E108;
  *(unsigned char *)(v6 + 8) = v7;
  *(void *)(a1 + v2[13]) = 0x38D1B7173E19999ALL;
  *(unsigned char *)(a1 + v2[14]) = 0;
  *(unsigned char *)(a1 + v2[15]) = 1;
  *(unsigned char *)(a1 + v2[16]) = 4;
  *(unsigned char *)(a1 + v2[17]) = 0;
  v10(a1 + v2[18], 1, 1, v4);
  *(unsigned char *)(a1 + v2[19]) = 1;
  *(unsigned char *)(a1 + v2[20]) = 0;
  *(unsigned char *)(a1 + v2[21]) = 1;
  uint64_t v8 = a1 + v2[22];

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v10)(v8, 1, 1, v4);
}

uint64_t sub_1000D1050(void *a1, int a2)
{
  int v18 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051E940);
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051E948);
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E950);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000E3854();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v18)
  {
    char v20 = 1;
    sub_1000E38A8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    char v19 = 0;
    sub_1000E38FC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  }
  return (*v13)(v12, v9);
}

uint64_t sub_1000D1300()
{
  if (*v0) {
    return 0xD00000000000001CLL;
  }
  else {
    return 0x437473657261656ELL;
  }
}

uint64_t sub_1000D134C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DB2C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D1374(uint64_t a1)
{
  unint64_t v2 = sub_1000E3854();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D13B0(uint64_t a1)
{
  unint64_t v2 = sub_1000E3854();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D13EC(uint64_t a1)
{
  unint64_t v2 = sub_1000E38A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1428(uint64_t a1)
{
  unint64_t v2 = sub_1000E38A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1464(uint64_t a1)
{
  unint64_t v2 = sub_1000E38FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D14A0(uint64_t a1)
{
  unint64_t v2 = sub_1000E38FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000D14DC(void *a1@<X8>)
{
  *a1 = &off_1004E5618;
}

uint64_t sub_1000D14EC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000DB3DC(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_1000D151C(void *a1)
{
  return sub_1000D1050(a1, *v1);
}

uint64_t sub_1000D1538()
{
  if (*v0) {
    return 0x206D756D6978614DLL;
  }
  else {
    return 0x64696F72746E6543;
  }
}

uint64_t sub_1000D157C(void *a1, int a2)
{
  int v18 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051E958);
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051E960);
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E968);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000E3950();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v18)
  {
    char v20 = 1;
    sub_1000E39A4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    char v19 = 0;
    sub_1000E39F8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  }
  return (*v13)(v12, v9);
}

uint64_t sub_1000D182C(uint64_t a1)
{
  unint64_t v2 = sub_1000E39F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1868(uint64_t a1)
{
  unint64_t v2 = sub_1000E39F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D18A4()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 0x6C6C41776F6C6C61;
  }
}

uint64_t sub_1000D18E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DB82C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D190C(uint64_t a1)
{
  unint64_t v2 = sub_1000E3950();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1948(uint64_t a1)
{
  unint64_t v2 = sub_1000E3950();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1984(uint64_t a1)
{
  unint64_t v2 = sub_1000E39A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D19C0(uint64_t a1)
{
  unint64_t v2 = sub_1000E39A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000D19FC(void *a1@<X8>)
{
  *a1 = &off_1004E5640;
}

uint64_t sub_1000D1A0C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000DB91C(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_1000D1A3C(void *a1)
{
  return sub_1000D157C(a1, *v1);
}

uint64_t sub_1000D1A58()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0x6C6120776F6C6C41;
  }
}

uint64_t sub_1000D1A9C(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051E400);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  uint64_t v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051E408);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051E410);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051E418);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000DE4CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_1000DE574();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_1000DE520();
      uint64_t v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_1000DE5C8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1000D1E08(uint64_t a1)
{
  unint64_t v2 = sub_1000DE5C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1E44(uint64_t a1)
{
  unint64_t v2 = sub_1000DE5C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1E80(uint64_t a1)
{
  unint64_t v2 = sub_1000DE574();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1EBC(uint64_t a1)
{
  unint64_t v2 = sub_1000DE574();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1EF8()
{
  uint64_t v1 = 0x7275747061437661;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F74616C756D6973;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74694B7261;
  }
}

uint64_t sub_1000D1F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DBD6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D1F7C(uint64_t a1)
{
  unint64_t v2 = sub_1000DE4CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D1FB8(uint64_t a1)
{
  unint64_t v2 = sub_1000DE4CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1FF4(uint64_t a1)
{
  unint64_t v2 = sub_1000DE520();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2030(uint64_t a1)
{
  unint64_t v2 = sub_1000DE520();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000D206C(void *a1@<X8>)
{
  *a1 = &off_1004E5668;
}

void *sub_1000D207C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000DBECC(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_1000D20A8(void *a1)
{
  return sub_1000D1A9C(a1, *v1);
}

uint64_t sub_1000D20C4()
{
  uint64_t v1 = 0x7275747061435641;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F74616C756D6953;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74694B5241;
  }
}

uint64_t sub_1000D2120(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051E970);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  uint64_t v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051E978);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051E980);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051E988);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000E3A4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_1000E3AF4();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_1000E3AA0();
      uint64_t v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_1000E3B48();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1000D248C(uint64_t a1)
{
  unint64_t v2 = sub_1000E3B48();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D24C8(uint64_t a1)
{
  unint64_t v2 = sub_1000E3B48();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2504()
{
  uint64_t v1 = 0x6F73655268676968;
  if (*v0 != 1) {
    uint64_t v1 = 0x4B72756F66;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1869903201;
  }
}

uint64_t sub_1000D2560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DC43C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D2588(uint64_t a1)
{
  unint64_t v2 = sub_1000E3A4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D25C4(uint64_t a1)
{
  unint64_t v2 = sub_1000E3A4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2600(uint64_t a1)
{
  unint64_t v2 = sub_1000E3AA0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D263C(uint64_t a1)
{
  unint64_t v2 = sub_1000E3AA0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2678(uint64_t a1)
{
  unint64_t v2 = sub_1000E3AF4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D26B4(uint64_t a1)
{
  unint64_t v2 = sub_1000E3AF4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000D26F0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000DC5A0(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_1000D271C(void *a1)
{
  return sub_1000D2120(a1, *v1);
}

uint64_t sub_1000D2738()
{
  uint64_t v1 = 0x7365722068676948;
  if (*v0 != 1) {
    uint64_t v1 = 19252;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1869903169;
  }
}

void sub_1000D278C(void *a1@<X8>)
{
  *a1 = &off_1004E5690;
}

uint64_t sub_1000D279C(void *a1, int a2)
{
  int v18 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051E990);
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051E998);
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E9A0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000E3B9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v18)
  {
    char v20 = 1;
    sub_1000E3BF0();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    char v19 = 0;
    sub_1000E3C44();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  }
  return (*v13)(v12, v9);
}

uint64_t sub_1000D2A4C()
{
  if (*v0) {
    return 0x7974786973;
  }
  else {
    return 0x797472696874;
  }
}

uint64_t sub_1000D2A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DCB10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D2AA8(uint64_t a1)
{
  unint64_t v2 = sub_1000E3B9C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2AE4(uint64_t a1)
{
  unint64_t v2 = sub_1000E3B9C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2B20(uint64_t a1)
{
  unint64_t v2 = sub_1000E3BF0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2B5C(uint64_t a1)
{
  unint64_t v2 = sub_1000E3BF0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2B98(uint64_t a1)
{
  unint64_t v2 = sub_1000E3C44();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2BD4(uint64_t a1)
{
  unint64_t v2 = sub_1000E3C44();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2C10@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000DCBF4(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_1000D2C40(void *a1)
{
  return sub_1000D279C(a1, *v1);
}

uint64_t sub_1000D2C5C()
{
  if (*v0) {
    return 0x7370663036;
  }
  else {
    return 0x7370663033;
  }
}

void sub_1000D2C80(void *a1@<X8>)
{
  *a1 = &off_1004E56B8;
}

void sub_1000D2C90()
{
  id v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    uint64_t v1 = v0;
    int mainScreenWidth = MobileGestalt_get_mainScreenWidth();

    id v3 = (id)MobileGestalt_get_current_device();
    if (v3)
    {
      uint64_t v4 = v3;
      double v5 = (double)mainScreenWidth;
      int mainScreenHeight = MobileGestalt_get_mainScreenHeight();

      *(double *)&qword_10055E108 = v5 / (double)mainScreenHeight;
      byte_10055E110 = 0;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000D2D18(uint64_t a1, char a2)
{
  if (a2) {
    return 1701736270;
  }
  strcpy((char *)v6, "Aspect Crop: ");
  HIWORD(v6[1]) = -4864;
  sub_10000F214(&qword_10051F350);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10043D4F0;
  *(void *)(v3 + 56) = &type metadata for Double;
  *(void *)(v3 + 64) = &protocol witness table for Double;
  *(void *)(v3 + 32) = a1;
  v4._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return v6[0];
}

uint64_t sub_1000D2DE4(void *a1, uint64_t a2, int a3)
{
  int v21 = a3;
  uint64_t v18 = a2;
  uint64_t v4 = sub_10000F214(&qword_10051E450);
  uint64_t v19 = *(void *)(v4 - 8);
  uint64_t v20 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_10051E458);
  uint64_t v7 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214((uint64_t *)&unk_10051E460);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000DE61C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v21)
  {
    char v22 = 0;
    sub_1000DE6C4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  }
  else
  {
    char v23 = 1;
    sub_1000DE670();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v14 = v20;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

Swift::Int sub_1000D30DC(Swift::UInt64 a1, char a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = a1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000D314C()
{
  return 0x6152746365707361;
}

uint64_t sub_1000D316C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6152746365707361 && a2 == 0xEB000000006F6974)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1000D321C(uint64_t a1)
{
  unint64_t v2 = sub_1000DE670();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D3258(uint64_t a1)
{
  unint64_t v2 = sub_1000DE670();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D3294()
{
  if (*v0) {
    return 0x7243746365707361;
  }
  else {
    return 1701736302;
  }
}

uint64_t sub_1000D32CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DD044(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D32F4(uint64_t a1)
{
  unint64_t v2 = sub_1000DE61C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D3330(uint64_t a1)
{
  unint64_t v2 = sub_1000DE61C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D336C(uint64_t a1)
{
  unint64_t v2 = sub_1000DE6C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D33A8(uint64_t a1)
{
  unint64_t v2 = sub_1000DE6C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D33E4(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(double *)a1 == *(double *)a2;
  }
  return result;
}

Swift::Int sub_1000D3414()
{
  return sub_1000D30DC(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void sub_1000D3420()
{
  if (*(unsigned char *)(v0 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v1 = *(void *)v0;
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v2 = v1;
    }
    else {
      Swift::UInt64 v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
}

Swift::Int sub_1000D3470()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v1;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

void *sub_1000D34DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000DD134(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_1000D3510(void *a1)
{
  return sub_1000D2DE4(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

uint64_t sub_1000D3530()
{
  return sub_1000D2D18(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_1000D353C@<X0>(uint64_t *a1@<X8>)
{
  sub_10000F214(&qword_10051E230);
  uint64_t result = swift_allocObject();
  uint64_t v3 = result;
  *(_OWORD *)(result + 16) = xmmword_100440F30;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 1;
  if (qword_100517DF8 != -1) {
    uint64_t result = swift_once();
  }
  char v4 = byte_10055E110;
  *(void *)(v3 + 48) = qword_10055E108;
  *(unsigned char *)(v3 + 56) = v4;
  *a1 = v3;
  return result;
}

unint64_t sub_1000D35E0(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 4:
      unint64_t result = 0xD000000000000020;
      break;
    case 5:
    case 11:
    case 17:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x6365746544676F6CLL;
      break;
    case 7:
      unint64_t result = 0x7954656372756F73;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0xD000000000000019;
      break;
    case 10:
      unint64_t result = 0xD000000000000010;
      break;
    case 12:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 13:
      unint64_t result = 0x6172466F65646976;
      break;
    case 14:
      unint64_t result = 0x7065526F65646976;
      break;
    case 15:
      unint64_t result = 0xD000000000000019;
      break;
    case 16:
      unint64_t result = 0x4F764373746E6177;
      break;
    case 18:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000D37F8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_10051E4E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000DE718();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = *(unsigned char *)v3;
  char v14 = 0;
  sub_1000DEAB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = *(unsigned char *)(v3 + 1);
    char v14 = 1;
    sub_1000DEB08();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + 8);
    char v14 = 2;
    type metadata accessor for CGPoint(0);
    sub_1000D4954(&qword_10051E4F8, type metadata accessor for CGPoint);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LODWORD(v13) = *(_DWORD *)(v3 + 24);
    char v14 = 3;
    sub_1000DEB5C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + 28);
    char v14 = 4;
    sub_1000DEBB0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = (int *)type metadata accessor for CameraControllerConfiguration(0);
    LOBYTE(v13) = 6;
    type metadata accessor for URL();
    sub_1000D4954(&qword_10051E510, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + v9[11]);
    char v14 = 7;
    sub_1000DEC04();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = (uint64_t *)(v3 + v9[12]);
    uint64_t v11 = *v10;
    LOBYTE(v10) = *((unsigned char *)v10 + 8);
    *(void *)&long long v13 = v11;
    BYTE8(v13) = (_BYTE)v10;
    char v14 = 8;
    sub_1000DEC58();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)(v3 + v9[13]);
    char v14 = 9;
    sub_1000DECAC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + v9[15]);
    char v14 = 11;
    sub_1000DED00();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + v9[16]);
    char v14 = 12;
    sub_1000DED54();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + v9[17]);
    char v14 = 13;
    sub_1000DEDA8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 15;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 16;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 17;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 18;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000D3DF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v42 = a2;
  uint64_t v2 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v2 - 8);
  uint64_t v41 = (uint64_t)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v45 = (uint64_t)&v38 - v5;
  __chkstk_darwin(v6);
  uint64_t v53 = (char *)&v38 - v7;
  uint64_t v8 = sub_10000F214(&qword_10051E470);
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  __chkstk_darwin(v8);
  uint64_t v59 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)uint64_t v12 = 257;
  *(_OWORD *)(v12 + 8) = xmmword_10043CDE0;
  *((_DWORD *)v12 + 6) = 1028443341;
  *((_WORD *)v12 + 14) = 0;
  uint64_t v14 = (uint64_t)&v12[*(int *)(v13 + 40)];
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void (**)(void))(*(void *)(v15 - 8) + 56);
  uint64_t v52 = v14;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v16)(v14, 1, 1, v15);
  uint64_t v51 = v10[11];
  v12[v51] = 0;
  uint64_t v17 = &v12[v10[12]];
  if (qword_100517DF8 != -1) {
    swift_once();
  }
  char v18 = byte_10055E110;
  *(void *)uint64_t v17 = qword_10055E108;
  v17[8] = v18;
  uint64_t v19 = v10[13];
  *(void *)&v12[v19] = 0x38D1B7173E19999ALL;
  uint64_t v48 = v10[14];
  uint64_t v49 = v19;
  v12[v48] = 0;
  uint64_t v47 = v10[15];
  v12[v47] = 1;
  uint64_t v46 = v10[16];
  v12[v46] = 4;
  uint64_t v44 = v10[17];
  v12[v44] = 0;
  uint64_t v43 = &v12[v10[18]];
  v16();
  uint64_t v50 = v17;
  uint64_t v20 = v10[19];
  v12[v20] = 1;
  uint64_t v21 = v10[20];
  v12[v21] = 0;
  uint64_t v22 = v10[21];
  v12[v22] = 1;
  uint64_t v23 = v10[22];
  uint64_t v58 = v12;
  uint64_t v24 = (uint64_t)&v12[v23];
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v16)(&v12[v23], 1, 1, v15);
  char v25 = v57;
  sub_10000F3B0(v57, v57[3]);
  sub_1000DE718();
  uint64_t v26 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v27 = (uint64_t)v25;
  if (v26)
  {
    uint64_t v36 = (uint64_t)v58;
  }
  else
  {
    uint64_t v56 = v20;
    uint64_t v40 = v21;
    uint64_t v39 = v24;
    char v61 = 0;
    sub_1000DE76C();
    uint64_t v28 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v30 = v58;
    *uint64_t v58 = v60;
    char v61 = 1;
    sub_1000DE7C0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v30[1] = v60;
    type metadata accessor for CGPoint(0);
    char v61 = 2;
    sub_1000D4954(&qword_10051E490, type metadata accessor for CGPoint);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v30 + 8) = v60;
    char v61 = 3;
    sub_1000DE814();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((_DWORD *)v30 + 6) = v60;
    char v61 = 4;
    sub_1000DE868();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v30[28] = v60;
    LOBYTE(v60) = 5;
    v30[29] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v60) = 6;
    uint64_t v31 = sub_1000D4954(&qword_10051E4A8, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v32 = (uint64_t)v53;
    uint64_t v38 = v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100094980(v32, v52);
    char v61 = 7;
    sub_1000DE8BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v30[v51] = v60;
    char v61 = 8;
    sub_1000DE910();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v33 = BYTE8(v60);
    uint64_t v34 = v50;
    *(void *)uint64_t v50 = v60;
    v34[8] = v33;
    char v61 = 9;
    sub_1000DE964();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v58[v49] = v60;
    LOBYTE(v60) = 10;
    v58[v48] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v61 = 11;
    sub_1000DE9B8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v58[v47] = v60;
    char v61 = 12;
    sub_1000DEA0C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v58[v46] = v60;
    char v61 = 13;
    sub_1000DEA60();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v58[v44] = v60;
    LOBYTE(v60) = 14;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100094980(v45, (uint64_t)v43);
    LOBYTE(v60) = 15;
    v58[v56] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v60) = 16;
    v58[v40] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v60) = 17;
    char v35 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v36 = (uint64_t)v58;
    v58[v22] = v35 & 1;
    LOBYTE(v60) = 18;
    uint64_t v37 = v55;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v28, v37);
    sub_100094980(v41, v39);
    sub_1000DDDC0(v36, v42, type metadata accessor for CameraControllerConfiguration);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0(v27);
  return sub_1000DA2EC(v36, type metadata accessor for CameraControllerConfiguration);
}

unint64_t sub_1000D47C0()
{
  return sub_1000D35E0(*v0);
}

uint64_t sub_1000D47C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000DD5E8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000D47F0(unsigned char *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_1000D47FC(uint64_t a1)
{
  unint64_t v2 = sub_1000DE718();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D4838(uint64_t a1)
{
  unint64_t v2 = sub_1000DE718();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D4874@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D3DF4(a1, a2);
}

uint64_t sub_1000D488C(void *a1)
{
  return sub_1000D37F8(a1);
}

uint64_t sub_1000D48A8(void *a1)
{
  a1[1] = sub_1000D4954(&qword_100518E80, (void (*)(uint64_t))type metadata accessor for CameraControllerConfiguration);
  a1[2] = sub_1000D4954(&qword_10051E160, (void (*)(uint64_t))type metadata accessor for CameraControllerConfiguration);
  uint64_t result = sub_1000D4954(&qword_10051E168, (void (*)(uint64_t))type metadata accessor for CameraControllerConfiguration);
  a1[3] = result;
  return result;
}

uint64_t sub_1000D4954(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D499C()
{
  return sub_100013AA8(&qword_10051E170, &qword_10051E178);
}

unint64_t sub_1000D49DC()
{
  unint64_t result = qword_10051E180;
  if (!qword_10051E180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E180);
  }
  return result;
}

uint64_t sub_1000D4A30()
{
  return sub_100013AA8(&qword_10051E188, &qword_10051E190);
}

unint64_t sub_1000D4A70()
{
  unint64_t result = qword_10051E198;
  if (!qword_10051E198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E198);
  }
  return result;
}

uint64_t sub_1000D4AC4()
{
  return sub_1000D4954(&qword_10051E1A0, (void (*)(uint64_t))type metadata accessor for CameraControllerConfigurationForm);
}

uint64_t type metadata accessor for CameraControllerConfigurationForm(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10051E6F0);
}

uint64_t sub_1000D4B2C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000D4BEC, 0, 0);
}

uint64_t sub_1000D4BEC()
{
  (*(void (**)(void, void, void))(v0[5] + 16))(v0[6], v0[3], v0[4]);
  SentTransferredFile.init(_:allowAccessingOriginalFile:)();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000D4C80(uint64_t a1, uint64_t a2)
{
  v2[6] = a1;
  v2[7] = a2;
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_1000D4E34, 0, 0);
}

uint64_t sub_1000D4E34()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v34 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 72);
  static URL.temporaryDirectory.getter();
  UUID.init()();
  sub_1000D4954(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v36 = v9;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v10._countAndFlagsBits = 1987013934;
  v10._object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  *(void *)(v0 + 16) = v35;
  *(void *)(v0 + 24) = v36;
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v6, enum case for URL.DirectoryHint.inferFromPath(_:), v7);
  sub_1000317A0();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v1, v34);
  uint64_t v12 = self;
  id v13 = [v12 defaultManager];
  URL.path(percentEncoded:)(1);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(v3) = [v13 fileExistsAtPath:v14];

  if (v3)
  {
    id v15 = [v12 defaultManager];
    URL._bridgeToObjectiveC()(v16);
    char v18 = v17;
    *(void *)(v0 + 40) = 0;
    unsigned int v19 = [v15 removeItemAtURL:v17 error:v0 + 40];

    id v20 = *(id *)(v0 + 40);
    if (!v19) {
      goto LABEL_5;
    }
  }
  uint64_t v21 = *(void *)(v0 + 128);
  uint64_t v22 = *(void *)(v0 + 112);
  id v23 = [v12 defaultManager:v34];
  ReceivedTransferredFile.file.getter();
  URL._bridgeToObjectiveC()(v24);
  uint64_t v26 = v25;
  v11(v21, v22);
  URL._bridgeToObjectiveC()(v27);
  uint64_t v29 = v28;
  *(void *)(v0 + 32) = 0;
  unsigned int v30 = [v23 copyItemAtURL:v26 toURL:v28 error:v0 + 32];

  id v20 = *(id *)(v0 + 32);
  if (v30)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 120) + 32))(*(void *)(v0 + 48), *(void *)(v0 + 136), *(void *)(v0 + 112));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
LABEL_5:
    uint64_t v32 = v20;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v11(*(void *)(v0 + 136), *(void *)(v0 + 112));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v31();
}

uint64_t sub_1000D5228()
{
  uint64_t v0 = type metadata accessor for UTType();
  __chkstk_darwin(v0 - 8);
  static UTType.movie.getter();
  return FileRepresentation.init(contentType:shouldAttemptToOpenInPlace:exporting:importing:)();
}

uint64_t sub_1000D52F0(uint64_t a1)
{
  uint64_t result = sub_1000D4954(&qword_10051E1D0, (void (*)(uint64_t))type metadata accessor for CameraControllerConfiguration);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000D5348()
{
  return sub_1000D4954(&qword_10051E1D0, (void (*)(uint64_t))type metadata accessor for CameraControllerConfiguration);
}

uint64_t sub_1000D5390(uint64_t a1)
{
  uint64_t result = sub_1000D4954((unint64_t *)&unk_10051E200, (void (*)(uint64_t))type metadata accessor for CameraControllerConfigurationForm);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000D53E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000D5408()
{
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  sub_1000D4954((unint64_t *)&qword_10051E350, (void (*)(uint64_t))&type metadata accessor for URL);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_10051C120);
  sub_100013AA8(&qword_10051E300, &qword_10051C120);
  View.swipeActions<A>(edge:allowsFullSwipe:content:)();
  sub_100012FAC(0xD000000000000010, 0x80000001004269C0, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D5590(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CameraControllerConfigurationForm(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = sub_10000F214(&qword_10051C128);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.destructive.getter();
  uint64_t v8 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  sub_1000DDDC0(a1, (uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CameraControllerConfigurationForm);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  sub_1000DA284((uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for CameraControllerConfigurationForm);
  sub_10000F214((uint64_t *)&unk_10051E360);
  sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
  return Button.init(role:action:label:)();
}

uint64_t sub_1000D57A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v141 = a1;
  uint64_t v137 = type metadata accessor for CameraControllerConfigurationForm(0);
  uint64_t v116 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v117 = v2;
  uint64_t v118 = (uint64_t)&v104 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000F214(&qword_10051E270);
  uint64_t v120 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v119 = (char *)&v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_10000F214(&qword_10051E278);
  __chkstk_darwin(v124);
  uint64_t v128 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_10000F214(&qword_10051E280);
  __chkstk_darwin(v133);
  uint64_t v129 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ReplayVideo(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v115 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000F214(&qword_10051E288);
  __chkstk_darwin(v126);
  uint64_t v114 = (uint64_t *)((char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v131 = sub_10000F214(&qword_10051E290);
  __chkstk_darwin(v131);
  uint64_t v132 = (uint64_t)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000F214(&qword_10051E298);
  __chkstk_darwin(v121);
  uint64_t v125 = (uint64_t)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000F214(&qword_10051E2A0);
  __chkstk_darwin(v134);
  os_log_type_t v127 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_10000F214(&qword_10051E2A8);
  __chkstk_darwin(v107);
  uint64_t v108 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_10000F214(&qword_10051E2B0);
  uint64_t v106 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v105 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000F214(&qword_10051E2B8);
  __chkstk_darwin(v123);
  uint64_t v110 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PhotosPickerItem.EncodingDisambiguationPolicy();
  __chkstk_darwin(v15 - 8);
  uint64_t v113 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_10051E2C0);
  __chkstk_darwin(v17 - 8);
  uint64_t v112 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_10051E2C8);
  __chkstk_darwin(v19 - 8);
  uint64_t v111 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000F214(&qword_10051E2D0);
  uint64_t v138 = *(void *)(v21 - 8);
  unint64_t v139 = (void *)v21;
  __chkstk_darwin(v21);
  uint64_t v122 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  __chkstk_darwin(v136);
  unint64_t v135 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_10000F214(&qword_10051E2D8);
  __chkstk_darwin(v142);
  unint64_t v140 = (char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000F214(&qword_10051E2E0);
  __chkstk_darwin(v144);
  uint64_t v26 = (char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000F214(&qword_10051E2E8);
  uint64_t v145 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v28 = (char *)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)&v104 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v33 = v32 - 8;
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v104 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for URL();
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v104 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(qword_10051D090);
  Binding.wrappedValue.getter();
  sub_10000FB74((uint64_t)&v35[*(int *)(v33 + 80)], (uint64_t)v31, &qword_10051E070);
  sub_1000DA2EC((uint64_t)v35, type metadata accessor for CameraControllerConfiguration);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v31, 1, v36) == 1)
  {
    uint64_t v40 = v145;
    uint64_t v104 = v26;
    sub_10000FBD8((uint64_t)v31, &qword_10051E070);
    sub_10000F214(&qword_10051E248);
    uint64_t v41 = v135;
    State.wrappedValue.getter();
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v43 = v1;
    uint64_t v44 = (uint64_t)v41;
    uint64_t v45 = v139;
    uint64_t v46 = (uint64_t)v140;
    uint64_t v47 = v138;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v57 = v40;
        uint64_t v58 = v115;
        sub_1000DA284(v44, v115, type metadata accessor for ReplayVideo);
        sub_1000D5408();
        uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
        uint64_t v60 = v143;
        v59(v128, v28, v143);
        swift_storeEnumTagMultiPayload();
        char v61 = (void *)sub_10000F69C(&qword_10051C120);
        uint64_t v62 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
        unint64_t v146 = &type metadata for Text;
        unint64_t v147 = v61;
        uint64_t v148 = &protocol witness table for Text;
        uint64_t v149 = v62;
        swift_getOpaqueTypeConformance2();
        unint64_t v146 = &type metadata for Text;
        unint64_t v147 = &protocol witness table for Text;
        swift_getOpaqueTypeConformance2();
        uint64_t v63 = (uint64_t)v129;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v63, v132, &qword_10051E280);
        swift_storeEnumTagMultiPayload();
        sub_1000D9F80();
        sub_1000DA0F8();
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v63, &qword_10051E280);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v28, v60);
        sub_1000DA2EC(v58, type metadata accessor for ReplayVideo);
        break;
      case 2:
        uint64_t v64 = *(void **)(v44 + 8);
        unint64_t v146 = *(void **)v44;
        unint64_t v147 = v64;
        sub_1000317A0();
        uint64_t v65 = Text.init<A>(_:)();
        uint64_t v67 = v66;
        char v69 = v68 & 1;
        unint64_t v146 = (void *)static Color.red.getter();
        uint64_t v70 = (void *)Text.foregroundStyle<A>(_:)();
        uint64_t v72 = v71;
        char v74 = v73;
        uint64_t v76 = v75;
        sub_100012FAC(v65, v67, v69);
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v146 = v70;
        unint64_t v147 = v72;
        char v77 = v74 & 1;
        uint64_t v46 = (uint64_t)v140;
        LOBYTE(v148) = v77;
        uint64_t v149 = v76;
        uint64_t v78 = v118;
        sub_1000DDDC0(v43, v118, type metadata accessor for CameraControllerConfigurationForm);
        unint64_t v79 = (*(unsigned __int8 *)(v116 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
        uint64_t v80 = swift_allocObject();
        sub_1000DA284(v78, v80 + v79, type metadata accessor for CameraControllerConfigurationForm);
        uint64_t v81 = v119;
        View.onTapGesture(count:perform:)();
        swift_release();
        sub_100012FAC((uint64_t)v146, (uint64_t)v147, (char)v148);
        swift_bridgeObjectRelease();
        uint64_t v82 = v120;
        uint64_t v83 = v130;
        (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v128, v81, v130);
        swift_storeEnumTagMultiPayload();
        uint64_t v84 = (void *)sub_10000F69C(&qword_10051C120);
        uint64_t v85 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
        unint64_t v146 = &type metadata for Text;
        unint64_t v147 = v84;
        uint64_t v148 = &protocol witness table for Text;
        uint64_t v149 = v85;
        swift_getOpaqueTypeConformance2();
        unint64_t v146 = &type metadata for Text;
        unint64_t v147 = &protocol witness table for Text;
        swift_getOpaqueTypeConformance2();
        uint64_t v86 = (uint64_t)v129;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v86, v132, &qword_10051E280);
        swift_storeEnumTagMultiPayload();
        sub_1000D9F80();
        sub_1000DA0F8();
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v86, &qword_10051E280);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v83);
        break;
      case 3:
        sub_10000F214(&qword_10051E240);
        State.projectedValue.getter();
        uint64_t v87 = v112;
        static PHPickerFilter.videos.getter();
        uint64_t v88 = type metadata accessor for PHPickerFilter();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 0, 1, v88);
        static PhotosPickerItem.EncodingDisambiguationPolicy.current.getter();
        uint64_t v89 = v122;
        PhotosPicker.init(selection:matching:preferredItemEncoding:label:)();
        id v90 = sub_1003451D4();
        if (v90)
        {
          uint64_t v91 = v90;
          id v92 = [v90 localIdentifier];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v93 = (void *)sub_100013AA8(&qword_10051E318, &qword_10051E2D0);
          uint64_t v94 = v105;
          View._photosPickerContainerIdentifier(_:)();
          swift_bridgeObjectRelease();
          uint64_t v95 = v106;
          uint64_t v96 = v109;
          (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v108, v94, v109);
          swift_storeEnumTagMultiPayload();
          unint64_t v146 = v45;
          unint64_t v147 = v93;
          swift_getOpaqueTypeConformance2();
          uint64_t v97 = (uint64_t)v110;
          _ConditionalContent<>.init(storage:)();

          (*(void (**)(char *, uint64_t))(v95 + 8))(v94, v96);
        }
        else
        {
          (*(void (**)(char *, char *, void *))(v47 + 16))(v108, v89, v45);
          swift_storeEnumTagMultiPayload();
          uint64_t v98 = (void *)sub_100013AA8(&qword_10051E318, &qword_10051E2D0);
          unint64_t v146 = v45;
          unint64_t v147 = v98;
          swift_getOpaqueTypeConformance2();
          uint64_t v97 = (uint64_t)v110;
          _ConditionalContent<>.init(storage:)();
        }
        uint64_t v99 = v132;
        uint64_t v100 = v97;
        sub_10000FB74(v97, v125, &qword_10051E2B8);
        swift_storeEnumTagMultiPayload();
        sub_1000DA020();
        sub_100013AA8(&qword_10051E320, &qword_10051E288);
        uint64_t v101 = (uint64_t)v127;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v101, v99, &qword_10051E2A0);
        swift_storeEnumTagMultiPayload();
        sub_1000D9F80();
        sub_1000DA0F8();
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v101, &qword_10051E2A0);
        sub_10000FBD8(v100, &qword_10051E2B8);
        (*(void (**)(char *, void *))(v138 + 8))(v122, v139);
        break;
      default:
        swift_release();
        uint64_t v48 = static VerticalAlignment.center.getter();
        uint64_t v49 = (uint64_t)v114;
        *uint64_t v114 = v48;
        *(void *)(v49 + 8) = 0;
        *(unsigned char *)(v49 + 16) = 1;
        uint64_t v50 = sub_10000F214(&qword_10051E338);
        sub_1000D6D98(v49 + *(int *)(v50 + 44));
        sub_10000FB74(v49, v125, &qword_10051E288);
        swift_storeEnumTagMultiPayload();
        sub_1000DA020();
        sub_100013AA8(&qword_10051E320, &qword_10051E288);
        uint64_t v51 = (uint64_t)v127;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v51, v132, &qword_10051E2A0);
        swift_storeEnumTagMultiPayload();
        sub_1000D9F80();
        sub_1000DA0F8();
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v51, &qword_10051E2A0);
        sub_10000FBD8(v49, &qword_10051E288);
        break;
    }
    sub_10000FB74(v46, (uint64_t)v104, &qword_10051E2D8);
    swift_storeEnumTagMultiPayload();
    uint64_t v102 = (void *)sub_10000F69C(&qword_10051C120);
    uint64_t v103 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
    unint64_t v146 = &type metadata for Text;
    unint64_t v147 = v102;
    uint64_t v148 = &protocol witness table for Text;
    uint64_t v149 = v103;
    swift_getOpaqueTypeConformance2();
    sub_1000DA208();
    _ConditionalContent<>.init(storage:)();
    return sub_10000FBD8(v46, &qword_10051E2D8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v39, v31, v36);
    sub_1000D5408();
    uint64_t v52 = v145;
    uint64_t v53 = v143;
    (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v26, v28, v143);
    swift_storeEnumTagMultiPayload();
    uint64_t v54 = (void *)sub_10000F69C(&qword_10051C120);
    uint64_t v55 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
    unint64_t v146 = &type metadata for Text;
    unint64_t v147 = v54;
    uint64_t v148 = &protocol witness table for Text;
    uint64_t v149 = v55;
    swift_getOpaqueTypeConformance2();
    sub_1000DA208();
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v28, v53);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v39, v36);
  }
}

double sub_1000D6D78@<D0>(uint64_t a1@<X8>)
{
  double result = 4.09163782e87;
  *(_OWORD *)a1 = xmmword_1004424B0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1000D6D98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_10051E340);
  uint64_t v22 = *(void *)(v2 - 8);
  uint64_t v3 = v22;
  uint64_t v23 = v2;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - v7;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  ProgressView<>.init<>()();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v17 = v23;
  v16(v5, v8, v23);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v15;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  uint64_t v18 = sub_10000F214(&qword_10051E348);
  v16((char *)(a1 + *(int *)(v18 + 64)), v5, v17);
  sub_1000807A8(v9, v11, v15);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v22 + 8);
  swift_bridgeObjectRetain();
  v19(v8, v17);
  v19(v5, v17);
  sub_100012FAC(v9, v11, v15);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D6F98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(qword_10051D090);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051D088);
  __chkstk_darwin(v12 - 8);
  char v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v21 - v16;
  uint64_t v18 = type metadata accessor for PhotosPickerItem();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  type metadata accessor for CameraControllerConfigurationForm(0);
  sub_10000FB74((uint64_t)v17, (uint64_t)v14, &qword_10051D088);
  sub_10000F214(&qword_10051E240);
  State.wrappedValue.setter();
  sub_10000FBD8((uint64_t)v17, &qword_10051D088);
  uint64_t v19 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 1, 1, v19);
  sub_10000FB74(a1, (uint64_t)v8, qword_10051D090);
  Binding.wrappedValue.getter();
  sub_100094980((uint64_t)v11, (uint64_t)&v5[*(int *)(v3 + 80)]);
  Binding.wrappedValue.setter();
  return sub_10000FBD8((uint64_t)v8, qword_10051D090);
}

uint64_t sub_1000D7240@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v98 = a1;
  uint64_t v3 = type metadata accessor for CameraControllerConfigurationForm(0);
  unint64_t v94 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v95 = v4;
  uint64_t v96 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000F214(&qword_10051D088);
  __chkstk_darwin(v99);
  uint64_t v97 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051E210);
  uint64_t v108 = *(void *)(v6 - 8);
  uint64_t v109 = v6;
  __chkstk_darwin(v6);
  uint64_t v120 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v119 = (char *)&v66 - v9;
  uint64_t v10 = sub_10000F214(&qword_10051E218);
  __chkstk_darwin(v10 - 8);
  uint64_t v75 = (void *)((char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v74 = (uint64_t)&v66 - v13;
  char v14 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v14);
  uint64_t v76 = (int *)((char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_10000F214((uint64_t *)&unk_10051E220);
  __chkstk_darwin(v16 - 8);
  uint64_t v110 = (uint64_t)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v118 = (uint64_t)&v66 - v19;
  uint64_t v20 = sub_10000F214(qword_10051D090);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v106 = v160;
  uint64_t v107 = v159;
  uint64_t v93 = v3;
  uint64_t v23 = (unsigned __int8 *)(v1 + *(int *)(v3 + 20));
  int v91 = *v23;
  int v92 = v161;
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v117 = v159;
  uint64_t v105 = v160;
  int v89 = v23[1];
  int v90 = v161;
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v115 = v160;
  uint64_t v116 = v159;
  int v87 = v23[28];
  int v88 = v161;
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v113 = v160;
  uint64_t v114 = v159;
  int v85 = v23[v14[11]];
  int v86 = v161;
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v24 = v159;
  uint64_t v25 = v160;
  int v81 = v162;
  uint64_t v26 = &v23[v14[12]];
  uint64_t v27 = *(void *)v26;
  uint64_t v82 = v161;
  uint64_t v83 = v27;
  int v84 = v26[8];
  sub_10000F214(&qword_10051E230);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_100440F30;
  *(void *)(v28 + 32) = 0;
  *(unsigned char *)(v28 + 40) = 1;
  uint64_t v29 = qword_100517DF8;
  swift_retain();
  swift_retain();
  if (v29 != -1) {
    swift_once();
  }
  char v30 = byte_10055E110;
  *(void *)(v28 + 48) = qword_10055E108;
  uint64_t v104 = v28;
  *(unsigned char *)(v28 + 56) = v30;
  uint64_t v111 = v25;
  swift_release();
  uint64_t v112 = v24;
  swift_release();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v102 = v160;
  uint64_t v103 = v159;
  int v79 = v23[v14[14]];
  int v80 = v161;
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v100 = v160;
  uint64_t v101 = v159;
  int v31 = v23[v14[15]];
  int v77 = v161;
  int v78 = v31;
  uint64_t v32 = (uint64_t)v76;
  Binding.wrappedValue.getter();
  int v33 = *(unsigned __int8 *)(v32 + v14[11]);
  sub_1000DA2EC(v32, type metadata accessor for CameraControllerConfiguration);
  if (v33)
  {
    uint64_t v34 = sub_10000F214(&qword_10051E238);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v118, 1, 1, v34);
  }
  else
  {
    uint64_t v35 = v74;
    sub_1000D57A8(v74);
    Binding.projectedValue.getter();
    swift_getKeyPath();
    Binding.subscript.getter();
    swift_release();
    sub_10000FBD8((uint64_t)v22, qword_10051D090);
    uint64_t v76 = v14;
    uint64_t v36 = v159;
    uint64_t v70 = v160;
    LODWORD(v71) = v161;
    int v69 = v23[v76[17]];
    Binding.projectedValue.getter();
    swift_getKeyPath();
    Binding.subscript.getter();
    swift_release();
    sub_10000FBD8((uint64_t)v22, qword_10051D090);
    uint64_t v72 = v159;
    char v73 = v23;
    uint64_t v37 = v160;
    int v66 = v73[v76[19]];
    int v67 = v161;
    uint64_t v38 = v35;
    uint64_t v39 = (uint64_t)v75;
    sub_10000FB74(v38, (uint64_t)v75, &qword_10051E218);
    uint64_t v40 = v110;
    sub_10000FB74(v39, v110, &qword_10051E218);
    uint64_t v41 = sub_10000F214(&qword_10051E268);
    uint64_t v42 = v40 + *(int *)(v41 + 48);
    *(void *)uint64_t v42 = 0xD000000000000011;
    *(void *)(v42 + 8) = 0x8000000100426960;
    unint64_t v68 = 0x8000000100426960;
    uint64_t v43 = v70;
    *(void *)(v42 + 16) = v36;
    *(void *)(v42 + 24) = v43;
    *(unsigned char *)(v42 + 32) = (_BYTE)v71;
    *(unsigned char *)(v42 + 33) = v69;
    *(void *)(v42 + 40) = &off_1004E57A8;
    uint64_t v44 = v40 + *(int *)(v41 + 64);
    *(void *)uint64_t v44 = 0xD000000000000013;
    *(void *)(v44 + 8) = 0x8000000100426980;
    *(void *)(v44 + 16) = v72;
    *(void *)(v44 + 24) = v37;
    *(unsigned char *)(v44 + 32) = v67;
    *(unsigned char *)(v44 + 33) = v66;
    *(void *)(v44 + 40) = 0;
    *(void *)(v44 + 48) = 0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000F724(0);
    sub_10000FBD8(v74, &qword_10051E218);
    uint64_t v23 = v73;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10000F478(0);
    swift_bridgeObjectRelease();
    swift_release();
    char v14 = v76;
    swift_release();
    swift_bridgeObjectRelease();
    sub_10000FBD8((uint64_t)v75, &qword_10051E218);
    uint64_t v45 = sub_10000F214(&qword_10051E238);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v40, 0, 1, v45);
    sub_1000D9B18(v40, v118);
  }
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v75 = v160;
  uint64_t v76 = (int *)v159;
  LODWORD(v74) = v161;
  LODWORD(v73) = v23[v14[20]];
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v71 = v160;
  uint64_t v72 = v159;
  int v46 = (int)v161;
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000FBD8((uint64_t)v22, qword_10051D090);
  uint64_t v47 = v159;
  uint64_t v48 = v160;
  char v49 = (char)v161;
  unsigned __int8 v50 = v23[v14[21]];
  double v159 = (void *)0xD000000000000010;
  unint64_t v160 = (void *)0x8000000100426940;
  unint64_t v161 = v47;
  unint64_t v162 = v48;
  LOBYTE(v163) = v49;
  BYTE1(v163) = v50;
  uint64_t v164 = 0;
  uint64_t v165 = 0;
  sub_10000F214(&qword_10051E240);
  uint64_t v51 = (uint64_t)v97;
  State.wrappedValue.getter();
  uint64_t v52 = v96;
  sub_1000DDDC0(v2, v96, type metadata accessor for CameraControllerConfigurationForm);
  unint64_t v53 = (*(unsigned __int8 *)(v94 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
  uint64_t v54 = swift_allocObject();
  sub_1000DA284(v52, v54 + v53, type metadata accessor for CameraControllerConfigurationForm);
  sub_1000D9A20();
  sub_1000D9A74();
  uint64_t v55 = v120;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10000FBD8(v51, &qword_10051D088);
  uint64_t v56 = (uint64_t)v164;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000F478(v56);
  uint64_t v57 = v108;
  (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v119, v55, v109);
  char v156 = v92;
  char v157 = v91;
  char v152 = v90;
  char v153 = v89;
  double v159 = v155;
  unint64_t v160 = v151;
  v147[0] = 0x6573657250205643;
  v147[1] = 0xE900000000000074;
  char v148 = v88;
  char v149 = v87;
  v143[0] = 0x5420656372756F53;
  v143[1] = 0xEB00000000657079;
  char v144 = v86;
  char v145 = v85;
  unint64_t v161 = v147;
  unint64_t v162 = v143;
  v155[0] = 0xD000000000000011;
  v155[1] = 0x80000001004268A0;
  v155[2] = v107;
  v155[3] = v106;
  v138[4] = v82;
  char v139 = v81;
  v151[0] = 0xD000000000000013;
  unint64_t v158 = &off_1004E56E0;
  v151[1] = 0x80000001004268C0;
  uint64_t v96 = 0x80000001004268A0;
  uint64_t v97 = (char *)0x80000001004268C0;
  uint64_t v140 = v83;
  v151[2] = v117;
  v151[3] = v105;
  unint64_t v154 = &off_1004E5708;
  char v141 = v84;
  v147[2] = v116;
  v147[3] = v115;
  unint64_t v150 = &off_1004E5730;
  v143[2] = v114;
  v143[3] = v113;
  char v134 = v80;
  char v135 = v79;
  uint64_t v163 = v138;
  uint64_t v164 = v133;
  v129[0] = 0xD000000000000011;
  uint64_t v99 = 0x80000001004268E0;
  char v130 = v77;
  unint64_t v94 = 0x8000000100426900;
  unint64_t v95 = 0x8000000100426920;
  v133[0] = 0xD000000000000012;
  v138[0] = 0xD000000000000012;
  unint64_t v146 = &off_1004E5758;
  v138[1] = 0x80000001004268E0;
  v138[2] = v112;
  v138[3] = v111;
  uint64_t v142 = v104;
  v133[1] = 0x8000000100426900;
  v133[2] = v103;
  v133[3] = v102;
  uint64_t v137 = 0;
  uint64_t v136 = 0;
  v129[1] = 0x8000000100426920;
  v129[2] = v101;
  v129[3] = v100;
  char v131 = v78;
  uint64_t v165 = v129;
  uint64_t v132 = &off_1004E5780;
  uint64_t v58 = v110;
  sub_10000FB74(v118, v110, (uint64_t *)&unk_10051E220);
  v124[0] = 0x6C7265764F205643;
  v124[1] = 0xEA00000000007961;
  v124[2] = v76;
  v124[3] = v75;
  char v125 = v74;
  char v126 = (char)v73;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  uint64_t v166 = v58;
  uint64_t v167 = v124;
  v121[0] = v72;
  v121[1] = v71;
  int v122 = v46;
  int v123 = 1028443341;
  uint64_t v168 = v121;
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  uint64_t v60 = v120;
  uint64_t v61 = v109;
  v59(v120, v119, v109);
  unint64_t v169 = v60;
  sub_1000D05B4(&v159, v98);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  uint64_t v62 = *(void (**)(char *, uint64_t))(v108 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v62(v119, v61);
  sub_10000FBD8(v118, (uint64_t *)&unk_10051E220);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F478(0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v62(v120, v61);
  swift_release();
  swift_release();
  uint64_t v63 = v127;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000F478(v63);
  sub_10000FBD8(v110, (uint64_t *)&unk_10051E220);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v64 = v136;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000F478(v64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000D854C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a2;
  uint64_t v4 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v4);
  uint64_t v55 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000F214(qword_10051D090);
  __chkstk_darwin(v54);
  unint64_t v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v7 - 8);
  uint64_t v52 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for CameraControllerConfigurationForm(0);
  uint64_t v56 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v58 = v9;
  uint64_t v59 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v57 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  __chkstk_darwin(v64);
  uint64_t v61 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v60 = (uint64_t *)((char *)&v51 - v14);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v51 - v16;
  uint64_t v18 = sub_10000F214(&qword_10051D088);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for PhotosPickerItem();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v51 - v26;
  if (qword_100517D48 != -1) {
    swift_once();
  }
  if (sub_100054E64()) {
    sub_100051D68();
  }
  sub_10000FB74(v62, (uint64_t)v20, &qword_10051D088);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_10000FBD8((uint64_t)v20, &qword_10051D088);
    sub_10000F214(&qword_10051E248);
    State.wrappedValue.getter();
    if (swift_getEnumCaseMultiPayload())
    {
      sub_1000DA2EC((uint64_t)v17, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    }
    else
    {
      sub_10000F214((uint64_t *)&unk_10051E380);
      sub_10000F214(&qword_10051F3B0);
      Task.cancel()();
      swift_release();
    }
    uint64_t v45 = v55;
    uint64_t v47 = (uint64_t)v52;
    uint64_t v46 = (uint64_t)v53;
    uint64_t v48 = (uint64_t)v60;
    uint64_t v49 = v61;
    swift_storeEnumTagMultiPayload();
    sub_1000DDDC0(v48, v49, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    State.wrappedValue.setter();
    sub_1000DA2EC(v48, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    uint64_t v50 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v47, 1, 1, v50);
    sub_10000FB74(a3, v46, qword_10051D090);
    Binding.wrappedValue.getter();
    sub_100094980(v47, (uint64_t)&v45[*(int *)(v4 + 72)]);
    Binding.wrappedValue.setter();
    return sub_10000FBD8(v46, qword_10051D090);
  }
  else
  {
    unint64_t v53 = (char *)a3;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    uint64_t v29 = v27;
    uint64_t v51 = v27;
    v28(v27, v20, v21);
    uint64_t v30 = type metadata accessor for TaskPriority();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v55 = *(char **)(v31 + 56);
    uint64_t v62 = v31 + 56;
    uint64_t v32 = (uint64_t)v57;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v55)(v57, 1, 1, v30);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v29, v21);
    uint64_t v54 = type metadata accessor for MainActor();
    uint64_t v33 = static MainActor.shared.getter();
    unint64_t v34 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v33;
    *(void *)(v35 + 24) = &protocol witness table for MainActor;
    v28((char *)(v35 + v34), v24, v21);
    uint64_t v36 = v32;
    uint64_t v37 = sub_1000D0D14(v32, (uint64_t)&unk_10051E398, v35, (uint64_t *)&unk_10051E380);
    uint64_t v38 = (uint64_t)v60;
    *uint64_t v60 = v37;
    swift_storeEnumTagMultiPayload();
    uint64_t v39 = (uint64_t)v53;
    sub_1000DDDC0(v38, v61, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    swift_retain();
    sub_10000F214(&qword_10051E248);
    State.wrappedValue.setter();
    sub_1000DA2EC(v38, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v55)(v32, 1, 1, v30);
    uint64_t v40 = v59;
    sub_1000DDDC0(v39, v59, type metadata accessor for CameraControllerConfigurationForm);
    swift_retain();
    uint64_t v41 = static MainActor.shared.getter();
    unint64_t v42 = (*(unsigned __int8 *)(v56 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
    uint64_t v43 = (void *)swift_allocObject();
    v43[2] = v41;
    v43[3] = &protocol witness table for MainActor;
    v43[4] = v37;
    sub_1000DA284(v40, (uint64_t)v43 + v42, type metadata accessor for CameraControllerConfigurationForm);
    sub_100064D5C(v36, (uint64_t)&unk_10051E3A8, (uint64_t)v43);
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v51, v21);
  }
}

uint64_t sub_1000D8DA0(uint64_t a1)
{
  v1[2] = type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = type metadata accessor for ReplayVideo(0);
  uint64_t v4 = (void *)swift_task_alloc();
  v1[4] = v4;
  uint64_t v5 = sub_1000D4954(&qword_10051E3B0, (void (*)(uint64_t))type metadata accessor for ReplayVideo);
  void *v4 = v1;
  v4[1] = sub_1000D8EB0;
  return PhotosPickerItem.loadTransferable<A>(type:)(a1, v3, v3, v5);
}

uint64_t sub_1000D8EB0()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_1000D9070;
  }
  else {
    uint64_t v4 = sub_1000D900C;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_1000D900C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D9070()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D90D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a5;
  v5[3] = type metadata accessor for CameraControllerConfiguration(0);
  v5[4] = swift_task_alloc();
  v5[5] = sub_10000F214(qword_10051D090);
  v5[6] = swift_task_alloc();
  sub_10000F214(&qword_10051E070);
  v5[7] = swift_task_alloc();
  v5[8] = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_10051E380);
  uint64_t v8 = swift_task_alloc();
  v5[11] = v8;
  uint64_t v9 = type metadata accessor for ReplayVideo(0);
  v5[12] = v9;
  v5[13] = *(void *)(v9 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = type metadata accessor for MainActor();
  v5[16] = static MainActor.shared.getter();
  uint64_t v10 = (void *)swift_task_alloc();
  v5[17] = v10;
  uint64_t v11 = sub_10000F214(&qword_10051F3B0);
  *uint64_t v10 = v5;
  v10[1] = sub_1000D9320;
  return Task.value.getter(v8, a4, v7, v11, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000D9320()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v3 = v2;
    uint64_t v4 = sub_1000D97F0;
  }
  else
  {
    uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v3 = v5;
    uint64_t v4 = sub_1000D94A4;
  }
  return _swift_task_switch(v4, v1, v3);
}

uint64_t sub_1000D94A4()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = (void *)v0[10];
    uint64_t v5 = v0[9];
    sub_10000FBD8(v0[11], (uint64_t *)&unk_10051E380);
    void *v4 = 0xD000000000000012;
    v4[1] = 0x80000001004269E0;
    swift_storeEnumTagMultiPayload();
    type metadata accessor for CameraControllerConfigurationForm(0);
    sub_1000DDDC0((uint64_t)v4, v5, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    sub_10000F214(&qword_10051E248);
    State.wrappedValue.setter();
    uint64_t v6 = type metadata accessor for CameraControllerConfigurationForm.ReplayState;
  }
  else
  {
    uint64_t v4 = (void *)v0[14];
    uint64_t v7 = v0[10];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[6];
    uint64_t v10 = v0[7];
    uint64_t v11 = v0[4];
    uint64_t v12 = v0[2];
    uint64_t v17 = v0[3];
    sub_1000DA284(v0[11], (uint64_t)v4, type metadata accessor for ReplayVideo);
    sub_1000DDDC0((uint64_t)v4, v7, type metadata accessor for ReplayVideo);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for CameraControllerConfigurationForm(0);
    sub_1000DDDC0(v7, v8, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    sub_10000F214(&qword_10051E248);
    State.wrappedValue.setter();
    sub_1000DA2EC(v7, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, void *, uint64_t))(v14 + 16))(v10, v4, v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    sub_10000FB74(v12, v9, qword_10051D090);
    Binding.wrappedValue.getter();
    sub_100094980(v10, v11 + *(int *)(v17 + 72));
    Binding.wrappedValue.setter();
    sub_10000FBD8(v9, qword_10051D090);
    uint64_t v6 = type metadata accessor for ReplayVideo;
  }
  sub_1000DA2EC((uint64_t)v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1000D97F0()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  uint64_t v4 = (void *)v0[10];
  uint64_t v5 = v0[9];
  sub_10000FBD8(v0[11], (uint64_t *)&unk_10051E380);
  void *v4 = 0xD000000000000012;
  v4[1] = 0x80000001004269E0;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for CameraControllerConfigurationForm(0);
  sub_1000DDDC0((uint64_t)v4, v5, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
  sub_10000F214(&qword_10051E248);
  State.wrappedValue.setter();
  sub_1000DA2EC((uint64_t)v4, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t type metadata accessor for CameraControllerConfigurationForm.ReplayState(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10051E660);
}

uint64_t sub_1000D99A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CameraControllerConfigurationForm(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000D854C(a1, a2, v6);
}

unint64_t sub_1000D9A20()
{
  unint64_t result = qword_10051E250;
  if (!qword_10051E250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E250);
  }
  return result;
}

unint64_t sub_1000D9A74()
{
  unint64_t result = qword_10051E258;
  if (!qword_10051E258)
  {
    sub_10000F69C(&qword_10051D088);
    sub_1000D4954(&qword_10051E260, (void (*)(uint64_t))&type metadata accessor for PhotosPickerItem);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E258);
  }
  return result;
}

uint64_t sub_1000D9B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214((uint64_t *)&unk_10051E220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ReplayVideo(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10051E5B8);
}

uint64_t sub_1000D9BA4()
{
  uint64_t v1 = (int *)type metadata accessor for CameraControllerConfigurationForm(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  swift_release();
  swift_release();
  uint64_t v3 = v2 + *(int *)(sub_10000F214(qword_10051D090) + 32);
  uint64_t v4 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v5 = v3 + v4[10];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = v3 + v4[18];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = v3 + v4[22];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v2 + v1[5];
  uint64_t v12 = v11 + v4[10];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v11 + v4[18];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v11 + v4[22];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v2 + v1[6];
  type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 1:
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
      break;
    case 0:
      swift_release();
      break;
  }
  sub_10000F214(&qword_10051E248);
  swift_release();
  uint64_t v17 = v2 + v1[7];
  uint64_t v18 = type metadata accessor for PhotosPickerItem();
  uint64_t v19 = *(void *)(v18 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  sub_10000F214(&qword_10051E240);
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_1000D9F80()
{
  unint64_t result = qword_10051E308;
  if (!qword_10051E308)
  {
    sub_10000F69C(&qword_10051E2A0);
    sub_1000DA020();
    sub_100013AA8(&qword_10051E320, &qword_10051E288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E308);
  }
  return result;
}

unint64_t sub_1000DA020()
{
  unint64_t result = qword_10051E310;
  if (!qword_10051E310)
  {
    sub_10000F69C(&qword_10051E2B8);
    sub_10000F69C(&qword_10051E2D0);
    sub_100013AA8(&qword_10051E318, &qword_10051E2D0);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E310);
  }
  return result;
}

unint64_t sub_1000DA0F8()
{
  unint64_t result = qword_10051E328;
  if (!qword_10051E328)
  {
    sub_10000F69C(&qword_10051E280);
    sub_10000F69C(&qword_10051C120);
    sub_100013AA8(&qword_10051E300, &qword_10051C120);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E328);
  }
  return result;
}

unint64_t sub_1000DA208()
{
  unint64_t result = qword_10051E330;
  if (!qword_10051E330)
  {
    sub_10000F69C(&qword_10051E2D8);
    sub_1000D9F80();
    sub_1000DA0F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E330);
  }
  return result;
}

uint64_t sub_1000DA284(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000DA2EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000DA34C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplayVideo(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = sub_10000F214(&qword_10051EA08);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = &v18[*(int *)(v19 + 56)];
  sub_1000DDDC0(a1, (uint64_t)v18, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
  sub_1000DDDC0(a2, (uint64_t)v20, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1000DDDC0((uint64_t)v18, (uint64_t)v12, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_1000DA284((uint64_t)v20, (uint64_t)v6, type metadata accessor for ReplayVideo);
        char v21 = static URL.== infix(_:_:)();
        sub_1000DA2EC((uint64_t)v6, type metadata accessor for ReplayVideo);
        sub_1000DA2EC((uint64_t)v12, type metadata accessor for ReplayVideo);
        goto LABEL_20;
      }
      sub_1000DA2EC((uint64_t)v12, type metadata accessor for ReplayVideo);
      goto LABEL_17;
    case 2u:
      sub_1000DDDC0((uint64_t)v18, (uint64_t)v9, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
      uint64_t v23 = *v9;
      uint64_t v22 = v9[1];
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if (v23 == *(void *)v20 && v22 == *((void *)v20 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0)
        {
          sub_1000DA2EC((uint64_t)v18, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
          goto LABEL_18;
        }
      }
LABEL_22:
      sub_1000DA2EC((uint64_t)v18, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
      char v21 = 1;
      break;
    case 3u:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_22;
      }
      goto LABEL_17;
    default:
      sub_1000DDDC0((uint64_t)v18, (uint64_t)v15, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
      if (swift_getEnumCaseMultiPayload())
      {
        swift_release();
LABEL_17:
        sub_10000FBD8((uint64_t)v18, &qword_10051EA08);
LABEL_18:
        char v21 = 0;
      }
      else
      {
        sub_10000F214((uint64_t *)&unk_10051E380);
        sub_10000F214(&qword_10051F3B0);
        char v21 = static Task.== infix(_:_:)();
        swift_release();
        swift_release();
LABEL_20:
        sub_1000DA2EC((uint64_t)v18, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
      }
      break;
  }
  return v21 & 1;
}

BOOL sub_1000DA788(double *a1, double *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v82 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v80 = &v68[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v81 = sub_10000F214(&qword_10051E548);
  uint64_t v6 = __chkstk_darwin(v81);
  int v78 = &v68[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  int v79 = &v68[-v9];
  __chkstk_darwin(v8);
  uint64_t v11 = &v68[-v10];
  uint64_t v12 = sub_10000F214(&qword_10051E070);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = &v68[-v17];
  uint64_t v19 = __chkstk_darwin(v16);
  char v21 = &v68[-v20];
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = &v68[-v23];
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = &v68[-v26];
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = &v68[-v29];
  __chkstk_darwin(v28);
  uint64_t v35 = &v68[-v34];
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || *((unsigned __int8 *)a1 + 1) != *((unsigned __int8 *)a2 + 1)) {
    return 0;
  }
  BOOL result = 0;
  if (a1[1] != a2[1] || a1[2] != a2[2]) {
    return result;
  }
  if (*((float *)a1 + 6) != *((float *)a2 + 6)
    || *((unsigned __int8 *)a1 + 28) != *((unsigned __int8 *)a2 + 28)
    || *((unsigned __int8 *)a1 + 29) != *((unsigned __int8 *)a2 + 29))
  {
    return 0;
  }
  uint64_t v72 = v33;
  uint64_t v73 = v32;
  uint64_t v71 = v31;
  uint64_t v76 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74((uint64_t)a1 + v76[10], (uint64_t)v35, &qword_10051E070);
  sub_10000FB74((uint64_t)a2 + v76[10], (uint64_t)v30, &qword_10051E070);
  int v77 = &v11[*(int *)(v81 + 48)];
  sub_10000FB74((uint64_t)v35, (uint64_t)v11, &qword_10051E070);
  sub_10000FB74((uint64_t)v30, (uint64_t)v77, &qword_10051E070);
  uint64_t v74 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v82 + 48);
  uint64_t v75 = v82 + 48;
  if (v74(v11, 1, v4) == 1)
  {
    sub_10000FBD8((uint64_t)v30, &qword_10051E070);
    sub_10000FBD8((uint64_t)v35, &qword_10051E070);
    if (v74(v77, 1, v4) == 1)
    {
      sub_10000FBD8((uint64_t)v11, &qword_10051E070);
      goto LABEL_18;
    }
LABEL_15:
    uint64_t v37 = v11;
    goto LABEL_16;
  }
  sub_10000FB74((uint64_t)v11, (uint64_t)v27, &qword_10051E070);
  if (v74(v77, 1, v4) == 1)
  {
    sub_10000FBD8((uint64_t)v30, &qword_10051E070);
    sub_10000FBD8((uint64_t)v35, &qword_10051E070);
    (*(void (**)(unsigned char *, uint64_t))(v82 + 8))(v27, v4);
    goto LABEL_15;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v82 + 32))(v80, v77, v4);
  sub_1000D4954((unint64_t *)&unk_10051E550, (void (*)(uint64_t))&type metadata accessor for URL);
  int v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v38 = *(unsigned char **)(v82 + 8);
  uint64_t v70 = v82 + 8;
  int v77 = v38;
  ((void (*)(unsigned char *, uint64_t))v38)(v80, v4);
  sub_10000FBD8((uint64_t)v30, &qword_10051E070);
  sub_10000FBD8((uint64_t)v35, &qword_10051E070);
  ((void (*)(unsigned char *, uint64_t))v77)(v27, v4);
  sub_10000FBD8((uint64_t)v11, &qword_10051E070);
  if ((v69 & 1) == 0) {
    return 0;
  }
LABEL_18:
  uint64_t v39 = v76;
  if (*((unsigned __int8 *)a1 + v76[11]) != *((unsigned __int8 *)a2 + v76[11])) {
    return 0;
  }
  uint64_t v40 = v76[12];
  uint64_t v41 = (double *)((char *)a1 + v40);
  unsigned __int8 v42 = *((unsigned char *)a1 + v40 + 8);
  uint64_t v43 = (double *)((char *)a2 + v40);
  int v44 = *((unsigned __int8 *)a2 + v40 + 8);
  if (v42)
  {
    if (!v44) {
      return 0;
    }
  }
  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if (v44) {
      return 0;
    }
  }
  BOOL result = 0;
  uint64_t v45 = v76[13];
  uint64_t v46 = (unsigned __int8 *)a1 + v45;
  float v47 = *(float *)((char *)a1 + v45);
  uint64_t v48 = (float *)((char *)a2 + v45);
  if (v47 == *v48 && *((float *)v46 + 1) == v48[1])
  {
    if (*((unsigned __int8 *)a1 + v76[14]) != *((unsigned __int8 *)a2 + v76[14])
      || *((unsigned __int8 *)a1 + v76[15]) != *((unsigned __int8 *)a2 + v76[15]))
    {
      return 0;
    }
    uint64_t v49 = v76[16];
    int v50 = *((unsigned __int8 *)a1 + v49);
    int v51 = *((unsigned __int8 *)a2 + v49);
    if (v50 == 4)
    {
      if (v51 != 4) {
        return 0;
      }
LABEL_34:
      if (*((unsigned __int8 *)a1 + v76[17]) != *((unsigned __int8 *)a2 + v76[17])) {
        return 0;
      }
      sub_10000FB74((uint64_t)a1 + v76[18], (uint64_t)v24, &qword_10051E070);
      sub_10000FB74((uint64_t)a2 + v39[18], (uint64_t)v21, &qword_10051E070);
      uint64_t v52 = v79;
      uint64_t v53 = (uint64_t)&v79[*(int *)(v81 + 48)];
      sub_10000FB74((uint64_t)v24, (uint64_t)v79, &qword_10051E070);
      sub_10000FB74((uint64_t)v21, v53, &qword_10051E070);
      if (v74(v52, 1, v4) == 1)
      {
        sub_10000FBD8((uint64_t)v21, &qword_10051E070);
        sub_10000FBD8((uint64_t)v24, &qword_10051E070);
        if (v74((unsigned char *)v53, 1, v4) == 1)
        {
          sub_10000FBD8((uint64_t)v79, &qword_10051E070);
LABEL_42:
          if (*((unsigned __int8 *)a1 + v76[19]) != *((unsigned __int8 *)a2 + v76[19])
            || *((unsigned __int8 *)a1 + v76[20]) != *((unsigned __int8 *)a2 + v76[20])
            || *((unsigned __int8 *)a1 + v76[21]) != *((unsigned __int8 *)a2 + v76[21]))
          {
            return 0;
          }
          uint64_t v58 = v76;
          uint64_t v59 = v73;
          sub_10000FB74((uint64_t)a1 + v76[22], v73, &qword_10051E070);
          uint64_t v60 = v72;
          sub_10000FB74((uint64_t)a2 + v58[22], v72, &qword_10051E070);
          uint64_t v61 = v78;
          uint64_t v62 = (uint64_t)&v78[*(int *)(v81 + 48)];
          sub_10000FB74(v59, (uint64_t)v78, &qword_10051E070);
          sub_10000FB74(v60, v62, &qword_10051E070);
          if (v74(v61, 1, v4) == 1)
          {
            sub_10000FBD8(v72, &qword_10051E070);
            sub_10000FBD8(v73, &qword_10051E070);
            if (v74((unsigned char *)v62, 1, v4) == 1)
            {
              sub_10000FBD8((uint64_t)v78, &qword_10051E070);
              return 1;
            }
          }
          else
          {
            sub_10000FB74((uint64_t)v78, v71, &qword_10051E070);
            if (v74((unsigned char *)v62, 1, v4) != 1)
            {
              uint64_t v63 = v82;
              uint64_t v64 = v80;
              (*(void (**)(unsigned char *, uint64_t, uint64_t))(v82 + 32))(v80, v62, v4);
              sub_1000D4954((unint64_t *)&unk_10051E550, (void (*)(uint64_t))&type metadata accessor for URL);
              uint64_t v65 = v71;
              char v66 = dispatch thunk of static Equatable.== infix(_:_:)();
              int v67 = *(void (**)(unsigned char *, uint64_t))(v63 + 8);
              v67(v64, v4);
              sub_10000FBD8(v72, &qword_10051E070);
              sub_10000FBD8(v73, &qword_10051E070);
              v67((unsigned char *)v65, v4);
              sub_10000FBD8((uint64_t)v78, &qword_10051E070);
              return (v66 & 1) != 0;
            }
            sub_10000FBD8(v72, &qword_10051E070);
            sub_10000FBD8(v73, &qword_10051E070);
            (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v71, v4);
          }
          uint64_t v37 = v78;
LABEL_16:
          sub_10000FBD8((uint64_t)v37, &qword_10051E548);
          return 0;
        }
      }
      else
      {
        sub_10000FB74((uint64_t)v79, (uint64_t)v18, &qword_10051E070);
        if (v74((unsigned char *)v53, 1, v4) != 1)
        {
          uint64_t v54 = v82;
          uint64_t v55 = v80;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v82 + 32))(v80, v53, v4);
          sub_1000D4954((unint64_t *)&unk_10051E550, (void (*)(uint64_t))&type metadata accessor for URL);
          char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v57 = *(void (**)(unsigned char *, uint64_t))(v54 + 8);
          v57(v55, v4);
          sub_10000FBD8((uint64_t)v21, &qword_10051E070);
          sub_10000FBD8((uint64_t)v24, &qword_10051E070);
          v57(v18, v4);
          sub_10000FBD8((uint64_t)v79, &qword_10051E070);
          if ((v56 & 1) == 0) {
            return 0;
          }
          goto LABEL_42;
        }
        sub_10000FBD8((uint64_t)v21, &qword_10051E070);
        sub_10000FBD8((uint64_t)v24, &qword_10051E070);
        (*(void (**)(unsigned char *, uint64_t))(v82 + 8))(v18, v4);
      }
      uint64_t v37 = v79;
      goto LABEL_16;
    }
    BOOL result = 0;
    if (v51 != 4 && v50 == v51) {
      goto LABEL_34;
    }
  }
  return result;
}

uint64_t sub_1000DB2C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x437473657261656ELL && a2 == 0xEF64696F72746E65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100426BF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000DB3DC(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051E870);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051E878);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E880);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0((void *)a1, *(void *)(a1 + 24));
  sub_1000E3854();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v18 = &type metadata for CameraControllerConfiguration.BoresightAlgorithm;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    _s6Tamale17AnyLocalizedErrorVwxx_0(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    sub_1000E38A8();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    sub_1000E38FC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0(v26);
  return a1;
}

uint64_t sub_1000DB82C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6C41776F6C6C61 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100426C10)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000DB91C(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051E8A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051E8A8);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E8B0);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0((void *)a1, *(void *)(a1 + 24));
  sub_1000E3950();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v18 = &type metadata for CameraControllerConfiguration.BoresightEligibilityPolicy;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    _s6Tamale17AnyLocalizedErrorVwxx_0(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    sub_1000E39A4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    sub_1000E39F8();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0(v26);
  return a1;
}

uint64_t sub_1000DBD6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74694B7261 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7275747061437661 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F74616C756D6973 && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_1000DBECC(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051E3B8);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10051E3C0);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051E3C8);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E3D0);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F3B0(a1, a1[3]);
  sub_1000DE4CC();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  uint64_t v30 = a1;
  uint64_t v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v18;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v11 = &type metadata for CameraControllerConfiguration.SourceType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
    return v11;
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_1000DE574();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_1000DE520();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_1000DE5C8();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v30);
  return v11;
}

uint64_t sub_1000DC43C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1869903201 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F73655268676968 && a2 == 0xEE006E6F6974756CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4B72756F66 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_1000DC5A0(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051E8D0);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10051E8D8);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051E8E0);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E8E8);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F3B0(a1, a1[3]);
  sub_1000E3A4C();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  uint64_t v30 = a1;
  uint64_t v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v18;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v11 = &type metadata for CameraControllerConfiguration.RecordingQuality;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
    return v11;
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_1000E3AF4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_1000E3AA0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_1000E3B48();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v30);
  return v11;
}

uint64_t sub_1000DCB10(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x797472696874 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7974786973 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000DCBF4(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051E910);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051E918);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E920);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0((void *)a1, *(void *)(a1 + 24));
  sub_1000E3B9C();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v18 = &type metadata for CameraControllerConfiguration.FrameRate;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    _s6Tamale17AnyLocalizedErrorVwxx_0(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    sub_1000E3BF0();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    sub_1000E3C44();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0(v26);
  return a1;
}

uint64_t sub_1000DD044(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7243746365707361 && a2 == 0xEA0000000000706FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_1000DD134(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051E420);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v27 = v2;
  uint64_t v28 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000F214(&qword_10051E428);
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_10000F214(&qword_10051E430);
  uint64_t v29 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_10000F3B0(a1, a1[3]);
  sub_1000DE61C();
  uint64_t v13 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_6;
  }
  uint64_t v14 = v30;
  uint64_t v26 = v6;
  char v31 = a1;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v19 = v18;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v19 = &type metadata for CameraControllerConfiguration.SafeAreaStrategy;
    uint64_t v12 = v11;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v29 + 8))(v11, v9);
    a1 = v31;
LABEL_6:
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
    return v12;
  }
  uint64_t v16 = (uint64_t)v31;
  int v25 = *(unsigned __int8 *)(v15 + 32);
  if (v25)
  {
    char v33 = 1;
    sub_1000DE670();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v21 = v27;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v23 = v22;
    (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v5, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v29 + 8))(v11, v9);
    uint64_t v12 = v23;
    uint64_t v16 = (uint64_t)v31;
  }
  else
  {
    char v32 = 0;
    sub_1000DE6C4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v8, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v29 + 8))(v11, v9);
    uint64_t v12 = 0;
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0(v16);
  return v12;
}

uint64_t sub_1000DD5E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100426A00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100426A20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000100426A40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100426A60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x8000000100426A80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100426AB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6365746544676F6CLL && a2 == 0xEF4C52556E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7954656372756F73 && a2 == 0xEA00000000006570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100426AD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100426AF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100426B10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100426B30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100426B50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6172466F65646976 && a2 == 0xEE0065746152656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x7065526F65646976 && a2 == 0xEE004C525579616CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100426B70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x4F764373746E6177 && a2 == 0xEE0079616C726576 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100426B90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000100426BB0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 18;
    }
    else {
      return 19;
    }
  }
}

uint64_t sub_1000DDD60()
{
  return sub_1000D5590(*(void *)(v0 + 16));
}

uint64_t sub_1000DDD6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CameraControllerConfigurationForm(0) - 8);
  return sub_1000D6F98(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_1000DDDC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000DDE28()
{
  uint64_t v1 = type metadata accessor for PhotosPickerItem();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1000DDEF4(uint64_t a1)
{
  type metadata accessor for PhotosPickerItem();
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10000F878;
  return sub_1000D8DA0(a1);
}

uint64_t sub_1000DDFE0()
{
  uint64_t v1 = (int *)type metadata accessor for CameraControllerConfigurationForm(0);
  uint64_t v21 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v2 = v0 + ((v21 + 40) & ~v21);
  swift_release();
  swift_release();
  uint64_t v3 = v2 + *(int *)(sub_10000F214(qword_10051D090) + 32);
  uint64_t v4 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v5 = v3 + v4[10];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = v3 + v4[18];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = v3 + v4[22];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v2 + v1[5];
  uint64_t v12 = v11 + v4[10];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v11 + v4[18];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v11 + v4[22];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v2 + v1[6];
  type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 1:
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
      break;
    case 0:
      swift_release();
      break;
  }
  sub_10000F214(&qword_10051E248);
  swift_release();
  uint64_t v17 = v2 + v1[7];
  uint64_t v18 = type metadata accessor for PhotosPickerItem();
  uint64_t v19 = *(void *)(v18 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  sub_10000F214(&qword_10051E240);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000DE3D0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CameraControllerConfigurationForm(0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000F878;
  return sub_1000D90D4(a1, v5, v6, v7, v8);
}

unint64_t sub_1000DE4CC()
{
  unint64_t result = qword_10051E3D8;
  if (!qword_10051E3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E3D8);
  }
  return result;
}

unint64_t sub_1000DE520()
{
  unint64_t result = qword_10051E3E8;
  if (!qword_10051E3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E3E8);
  }
  return result;
}

unint64_t sub_1000DE574()
{
  unint64_t result = qword_10051E3F0;
  if (!qword_10051E3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E3F0);
  }
  return result;
}

unint64_t sub_1000DE5C8()
{
  unint64_t result = qword_10051E3F8;
  if (!qword_10051E3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E3F8);
  }
  return result;
}

unint64_t sub_1000DE61C()
{
  unint64_t result = qword_10051E438;
  if (!qword_10051E438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E438);
  }
  return result;
}

unint64_t sub_1000DE670()
{
  unint64_t result = qword_10051E440;
  if (!qword_10051E440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E440);
  }
  return result;
}

unint64_t sub_1000DE6C4()
{
  unint64_t result = qword_10051E448;
  if (!qword_10051E448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E448);
  }
  return result;
}

unint64_t sub_1000DE718()
{
  unint64_t result = qword_10051E478;
  if (!qword_10051E478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E478);
  }
  return result;
}

unint64_t sub_1000DE76C()
{
  unint64_t result = qword_10051E480;
  if (!qword_10051E480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E480);
  }
  return result;
}

unint64_t sub_1000DE7C0()
{
  unint64_t result = qword_10051E488;
  if (!qword_10051E488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E488);
  }
  return result;
}

unint64_t sub_1000DE814()
{
  unint64_t result = qword_10051E498;
  if (!qword_10051E498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E498);
  }
  return result;
}

unint64_t sub_1000DE868()
{
  unint64_t result = qword_10051E4A0;
  if (!qword_10051E4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E4A0);
  }
  return result;
}

unint64_t sub_1000DE8BC()
{
  unint64_t result = qword_10051E4B0;
  if (!qword_10051E4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E4B0);
  }
  return result;
}

unint64_t sub_1000DE910()
{
  unint64_t result = qword_10051E4B8;
  if (!qword_10051E4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E4B8);
  }
  return result;
}

unint64_t sub_1000DE964()
{
  unint64_t result = qword_10051E4C0;
  if (!qword_10051E4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E4C0);
  }
  return result;
}

unint64_t sub_1000DE9B8()
{
  unint64_t result = qword_10051E4C8;
  if (!qword_10051E4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E4C8);
  }
  return result;
}

unint64_t sub_1000DEA0C()
{
  unint64_t result = qword_10051E4D0;
  if (!qword_10051E4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E4D0);
  }
  return result;
}

unint64_t sub_1000DEA60()
{
  unint64_t result = qword_10051E4D8;
  if (!qword_10051E4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E4D8);
  }
  return result;
}

unint64_t sub_1000DEAB4()
{
  unint64_t result = qword_10051E4E8;
  if (!qword_10051E4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E4E8);
  }
  return result;
}

unint64_t sub_1000DEB08()
{
  unint64_t result = qword_10051E4F0;
  if (!qword_10051E4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E4F0);
  }
  return result;
}

unint64_t sub_1000DEB5C()
{
  unint64_t result = qword_10051E500;
  if (!qword_10051E500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E500);
  }
  return result;
}

unint64_t sub_1000DEBB0()
{
  unint64_t result = qword_10051E508;
  if (!qword_10051E508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E508);
  }
  return result;
}

unint64_t sub_1000DEC04()
{
  unint64_t result = qword_10051E518;
  if (!qword_10051E518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E518);
  }
  return result;
}

unint64_t sub_1000DEC58()
{
  unint64_t result = qword_10051E520;
  if (!qword_10051E520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E520);
  }
  return result;
}

unint64_t sub_1000DECAC()
{
  unint64_t result = qword_10051E528;
  if (!qword_10051E528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E528);
  }
  return result;
}

unint64_t sub_1000DED00()
{
  unint64_t result = qword_10051E530;
  if (!qword_10051E530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E530);
  }
  return result;
}

unint64_t sub_1000DED54()
{
  unint64_t result = qword_10051E538;
  if (!qword_10051E538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E538);
  }
  return result;
}

unint64_t sub_1000DEDA8()
{
  unint64_t result = qword_10051E540;
  if (!qword_10051E540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E540);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CameraControllerConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CameraControllerConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *unint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DEF58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.CodingKeys()
{
  return &type metadata for CameraControllerConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.SafeAreaStrategy.CodingKeys()
{
  return &type metadata for CameraControllerConfiguration.SafeAreaStrategy.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.SafeAreaStrategy.NoneCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.SafeAreaStrategy.NoneCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for CameraControllerConfiguration.SafeAreaStrategy.AspectCropCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000DF054);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.SafeAreaStrategy.AspectCropCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.SafeAreaStrategy.AspectCropCodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.SourceType.CodingKeys()
{
  return &type metadata for CameraControllerConfiguration.SourceType.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.SourceType.ArKitCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.SourceType.ArKitCodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.SourceType.AvCaptureCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.SourceType.AvCaptureCodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.SourceType.SimulatorCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.SourceType.SimulatorCodingKeys;
}

uint64_t sub_1000DF0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DF0E0);
}

uint64_t sub_1000DF0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000DF14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DF160);
}

uint64_t sub_1000DF160(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t *sub_1000DF1D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1000DF318(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
      return swift_bridgeObjectRelease();
    case 1:
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    case 0:
      return swift_release();
  }
  return result;
}

void *sub_1000DF3E0(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1000DF4E4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000DA2EC((uint64_t)a1, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_1000DF614(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000DF6CC(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000DA2EC((uint64_t)a1, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000DF7A8()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1000DF848(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    uint64_t v7 = *(int *)(sub_10000F214(qword_10051D090) + 32);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v64 = a2;
    uint64_t v9 = (char *)a2 + v7;
    *uint64_t v8 = *v9;
    v8[1] = v9[1];
    *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
    *((_DWORD *)v8 + 6) = *((_DWORD *)v9 + 6);
    *((_WORD *)v8 + 14) = *((_WORD *)v9 + 14);
    uint64_t v10 = (int *)type metadata accessor for CameraControllerConfiguration(0);
    uint64_t v11 = v10[10];
    uint64_t v12 = &v8[v11];
    uint64_t v13 = &v9[v11];
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    if (v16(v13, 1, v14))
    {
      uint64_t v17 = sub_10000F214(&qword_10051E070);
      memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v8[v10[11]] = v9[v10[11]];
    uint64_t v18 = v10[12];
    uint64_t v19 = &v8[v18];
    uint64_t v20 = &v9[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    *(void *)&v8[v10[13]] = *(void *)&v9[v10[13]];
    v8[v10[14]] = v9[v10[14]];
    v8[v10[15]] = v9[v10[15]];
    v8[v10[16]] = v9[v10[16]];
    v8[v10[17]] = v9[v10[17]];
    uint64_t v21 = v10[18];
    uint64_t v22 = &v8[v21];
    uint64_t v23 = &v9[v21];
    if (v16(&v9[v21], 1, v14))
    {
      uint64_t v24 = sub_10000F214(&qword_10051E070);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v22, v23, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v22, 0, 1, v14);
    }
    v8[v10[19]] = v9[v10[19]];
    v8[v10[20]] = v9[v10[20]];
    v8[v10[21]] = v9[v10[21]];
    uint64_t v25 = v10[22];
    uint64_t v26 = &v8[v25];
    uint64_t v27 = &v9[v25];
    if (v16(&v9[v25], 1, v14))
    {
      uint64_t v28 = sub_10000F214(&qword_10051E070);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v26, v27, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v26, 0, 1, v14);
    }
    uint64_t v29 = a3[5];
    uint64_t v30 = (char *)a1 + v29;
    char v31 = (char *)v64 + v29;
    *uint64_t v30 = *((unsigned char *)v64 + v29);
    v30[1] = *((unsigned char *)v64 + v29 + 1);
    *(_OWORD *)(v30 + 8) = *(_OWORD *)((char *)v64 + v29 + 8);
    *((_DWORD *)v30 + 6) = *(_DWORD *)((char *)v64 + v29 + 24);
    *((_WORD *)v30 + 14) = *(_WORD *)((char *)v64 + v29 + 28);
    uint64_t v32 = v10[10];
    char v33 = &v30[v32];
    uint64_t v34 = &v31[v32];
    if (v16(&v31[v32], 1, v14))
    {
      uint64_t v35 = sub_10000F214(&qword_10051E070);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v33, v34, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v33, 0, 1, v14);
    }
    v30[v10[11]] = v31[v10[11]];
    uint64_t v36 = v10[12];
    uint64_t v37 = &v30[v36];
    uint64_t v38 = &v31[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    *(void *)&v30[v10[13]] = *(void *)&v31[v10[13]];
    v30[v10[14]] = v31[v10[14]];
    v30[v10[15]] = v31[v10[15]];
    v30[v10[16]] = v31[v10[16]];
    v30[v10[17]] = v31[v10[17]];
    uint64_t v39 = v10[18];
    uint64_t v40 = &v30[v39];
    uint64_t v41 = &v31[v39];
    if (v16(&v31[v39], 1, v14))
    {
      uint64_t v42 = sub_10000F214(&qword_10051E070);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
    }
    v30[v10[19]] = v31[v10[19]];
    v30[v10[20]] = v31[v10[20]];
    v30[v10[21]] = v31[v10[21]];
    uint64_t v43 = v10[22];
    int v44 = &v30[v43];
    uint64_t v45 = &v31[v43];
    if (v16(&v31[v43], 1, v14))
    {
      uint64_t v46 = sub_10000F214(&qword_10051E070);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
    }
    uint64_t v47 = a3[6];
    uint64_t v48 = (void *)((char *)a1 + v47);
    uint64_t v49 = (void *)((char *)v64 + v47);
    uint64_t v50 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v52 = v49[1];
      void *v48 = *v49;
      v48[1] = v52;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v48, v49, v14);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      void *v48 = *v49;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v53 = sub_10000F214(&qword_10051E248);
    *(void *)((char *)v48 + *(int *)(v53 + 28)) = *(void *)((char *)v49 + *(int *)(v53 + 28));
    uint64_t v54 = a3[7];
    uint64_t v55 = (char *)a1 + v54;
    char v56 = (char *)v64 + v54;
    uint64_t v57 = type metadata accessor for PhotosPickerItem();
    uint64_t v58 = *(void *)(v57 - 8);
    uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
    swift_retain();
    if (v59(v56, 1, v57))
    {
      uint64_t v60 = sub_10000F214(&qword_10051D088);
      memcpy(v55, v56, *(void *)(*(void *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    uint64_t v61 = sub_10000F214(&qword_10051E240);
    *(void *)&v55[*(int *)(v61 + 28)] = *(void *)&v56[*(int *)(v61 + 28)];
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000E005C(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(sub_10000F214(qword_10051D090) + 32);
  uint64_t v5 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v6 = v4 + v5[10];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v5[18];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v11 = v4 + v5[22];
  if (!v9(v11, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  }
  uint64_t v12 = a1 + a2[5];
  uint64_t v13 = v12 + v5[10];
  if (!v9(v13, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
  }
  uint64_t v14 = v12 + v5[18];
  if (!v9(v14, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v14, v7);
  }
  uint64_t v15 = v12 + v5[22];
  if (!v9(v15, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v15, v7);
  }
  uint64_t v16 = a1 + a2[6];
  type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 1:
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
      break;
    case 0:
      swift_release();
      break;
  }
  sub_10000F214(&qword_10051E248);
  swift_release();
  uint64_t v18 = a1 + a2[7];
  uint64_t v19 = type metadata accessor for PhotosPickerItem();
  uint64_t v20 = *(void *)(v19 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  }
  sub_10000F214(&qword_10051E240);

  return swift_release();
}

void *sub_1000E03B0(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_retain();
  swift_retain();
  uint64_t v6 = *(int *)(sub_10000F214(qword_10051D090) + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v63 = a2;
  uint64_t v8 = (char *)a2 + v6;
  char *v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *((_DWORD *)v7 + 6) = *((_DWORD *)v8 + 6);
  *((_WORD *)v7 + 14) = *((_WORD *)v8 + 14);
  uint64_t v9 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v10 = v9[10];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000F214(&qword_10051E070);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v7[v9[11]] = v8[v9[11]];
  uint64_t v17 = v9[12];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)&v7[v9[13]] = *(void *)&v8[v9[13]];
  v7[v9[14]] = v8[v9[14]];
  v7[v9[15]] = v8[v9[15]];
  v7[v9[16]] = v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  uint64_t v20 = v9[18];
  uint64_t v21 = &v7[v20];
  uint64_t v22 = &v8[v20];
  if (v15(&v8[v20], 1, v13))
  {
    uint64_t v23 = sub_10000F214(&qword_10051E070);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v21, v22, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v21, 0, 1, v13);
  }
  v7[v9[19]] = v8[v9[19]];
  v7[v9[20]] = v8[v9[20]];
  v7[v9[21]] = v8[v9[21]];
  uint64_t v24 = v9[22];
  uint64_t v25 = &v7[v24];
  uint64_t v26 = &v8[v24];
  if (v15(&v8[v24], 1, v13))
  {
    uint64_t v27 = sub_10000F214(&qword_10051E070);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v25, v26, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v25, 0, 1, v13);
  }
  uint64_t v28 = a3[5];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)v63 + v28;
  *uint64_t v29 = *((unsigned char *)v63 + v28);
  v29[1] = *((unsigned char *)v63 + v28 + 1);
  *(_OWORD *)(v29 + 8) = *(_OWORD *)((char *)v63 + v28 + 8);
  *((_DWORD *)v29 + 6) = *(_DWORD *)((char *)v63 + v28 + 24);
  *((_WORD *)v29 + 14) = *(_WORD *)((char *)v63 + v28 + 28);
  uint64_t v31 = v9[10];
  uint64_t v32 = &v29[v31];
  char v33 = &v30[v31];
  if (v15(&v30[v31], 1, v13))
  {
    uint64_t v34 = sub_10000F214(&qword_10051E070);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v32, v33, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v32, 0, 1, v13);
  }
  v29[v9[11]] = v30[v9[11]];
  uint64_t v35 = v9[12];
  uint64_t v36 = &v29[v35];
  uint64_t v37 = &v30[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  *(void *)&v29[v9[13]] = *(void *)&v30[v9[13]];
  v29[v9[14]] = v30[v9[14]];
  v29[v9[15]] = v30[v9[15]];
  v29[v9[16]] = v30[v9[16]];
  v29[v9[17]] = v30[v9[17]];
  uint64_t v38 = v9[18];
  uint64_t v39 = &v29[v38];
  uint64_t v40 = &v30[v38];
  if (v15(&v30[v38], 1, v13))
  {
    uint64_t v41 = sub_10000F214(&qword_10051E070);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  v29[v9[19]] = v30[v9[19]];
  v29[v9[20]] = v30[v9[20]];
  v29[v9[21]] = v30[v9[21]];
  uint64_t v42 = v9[22];
  uint64_t v43 = &v29[v42];
  int v44 = &v30[v42];
  if (v15(&v30[v42], 1, v13))
  {
    uint64_t v45 = sub_10000F214(&qword_10051E070);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = a3[6];
  uint64_t v47 = (void *)((char *)a1 + v46);
  uint64_t v48 = (void *)((char *)v63 + v46);
  uint64_t v49 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v51 = v48[1];
    *uint64_t v47 = *v48;
    v47[1] = v51;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v47, v48, v13);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    *uint64_t v47 = *v48;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v52 = sub_10000F214(&qword_10051E248);
  *(void *)((char *)v47 + *(int *)(v52 + 28)) = *(void *)((char *)v48 + *(int *)(v52 + 28));
  uint64_t v53 = a3[7];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)v63 + v53;
  uint64_t v56 = type metadata accessor for PhotosPickerItem();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
  swift_retain();
  if (v58(v55, 1, v56))
  {
    uint64_t v59 = sub_10000F214(&qword_10051D088);
    memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  uint64_t v60 = sub_10000F214(&qword_10051E240);
  *(void *)&v54[*(int *)(v60 + 28)] = *(void *)&v55[*(int *)(v60 + 28)];
  swift_retain();
  return a1;
}

void *sub_1000E0B7C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v5 = *(int *)(sub_10000F214(qword_10051D090) + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v82 = a2;
  uint64_t v7 = (char *)a2 + v5;
  char *v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  *((void *)v6 + 1) = *(void *)((char *)a2 + v5 + 8);
  *((void *)v6 + 2) = *(void *)((char *)a2 + v5 + 16);
  *((_DWORD *)v6 + 6) = *(_DWORD *)((char *)a2 + v5 + 24);
  v6[28] = *((unsigned char *)a2 + v5 + 28);
  v6[29] = *((unsigned char *)a2 + v5 + 29);
  uint64_t v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v8[10];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v83 = *(void *)(v12 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
  int v14 = v13(v10, 1, v12);
  int v15 = v13(v11, 1, v12);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v10, v12);
LABEL_6:
    uint64_t v16 = sub_10000F214(&qword_10051E070);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v10, v11, v12);
LABEL_7:
  v6[v8[11]] = v7[v8[11]];
  uint64_t v17 = v8[12];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  uint64_t v20 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = v8[13];
  uint64_t v22 = &v6[v21];
  uint64_t v23 = &v7[v21];
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  *((_DWORD *)v22 + 1) = *((_DWORD *)v23 + 1);
  v6[v8[14]] = v7[v8[14]];
  v6[v8[15]] = v7[v8[15]];
  v6[v8[16]] = v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  uint64_t v24 = v8[18];
  uint64_t v25 = &v6[v24];
  uint64_t v26 = &v7[v24];
  int v27 = v13(&v6[v24], 1, v12);
  int v28 = v13(v26, 1, v12);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v25, v26, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v25, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v25, v12);
LABEL_12:
    uint64_t v29 = sub_10000F214(&qword_10051E070);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v25, v26, v12);
LABEL_13:
  v6[v8[19]] = v7[v8[19]];
  v6[v8[20]] = v7[v8[20]];
  v6[v8[21]] = v7[v8[21]];
  uint64_t v30 = v8[22];
  uint64_t v31 = &v6[v30];
  uint64_t v32 = &v7[v30];
  int v33 = v13(&v6[v30], 1, v12);
  int v34 = v13(v32, 1, v12);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v31, v32, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v31, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v31, v12);
LABEL_18:
    uint64_t v35 = sub_10000F214(&qword_10051E070);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v31, v32, v12);
LABEL_19:
  uint64_t v36 = a3[5];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)v82 + v36;
  *uint64_t v37 = *((unsigned char *)v82 + v36);
  v37[1] = *((unsigned char *)v82 + v36 + 1);
  *((void *)v37 + 1) = *(void *)((char *)v82 + v36 + 8);
  *((void *)v37 + 2) = *(void *)((char *)v82 + v36 + 16);
  *((_DWORD *)v37 + 6) = *(_DWORD *)((char *)v82 + v36 + 24);
  v37[28] = *((unsigned char *)v82 + v36 + 28);
  v37[29] = *((unsigned char *)v82 + v36 + 29);
  uint64_t v39 = v8[10];
  uint64_t v40 = &v37[v39];
  uint64_t v41 = &v38[v39];
  int v42 = v13(&v37[v39], 1, v12);
  int v43 = v13(v41, 1, v12);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v40, v41, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v40, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v40, v12);
LABEL_24:
    uint64_t v44 = sub_10000F214(&qword_10051E070);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v40, v41, v12);
LABEL_25:
  v37[v8[11]] = v38[v8[11]];
  uint64_t v45 = v8[12];
  uint64_t v46 = &v37[v45];
  uint64_t v47 = &v38[v45];
  uint64_t v48 = *(void *)v47;
  v46[8] = v47[8];
  *(void *)uint64_t v46 = v48;
  uint64_t v49 = v8[13];
  uint64_t v50 = &v37[v49];
  uint64_t v51 = &v38[v49];
  *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
  *((_DWORD *)v50 + 1) = *((_DWORD *)v51 + 1);
  v37[v8[14]] = v38[v8[14]];
  v37[v8[15]] = v38[v8[15]];
  v37[v8[16]] = v38[v8[16]];
  v37[v8[17]] = v38[v8[17]];
  uint64_t v52 = v8[18];
  uint64_t v53 = &v37[v52];
  uint64_t v54 = &v38[v52];
  int v55 = v13(&v37[v52], 1, v12);
  int v56 = v13(v54, 1, v12);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v53, v54, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v53, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v53, v12);
LABEL_30:
    uint64_t v57 = sub_10000F214(&qword_10051E070);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v53, v54, v12);
LABEL_31:
  v37[v8[19]] = v38[v8[19]];
  v37[v8[20]] = v38[v8[20]];
  v37[v8[21]] = v38[v8[21]];
  uint64_t v58 = v8[22];
  uint64_t v59 = &v37[v58];
  uint64_t v60 = &v38[v58];
  int v61 = v13(&v37[v58], 1, v12);
  int v62 = v13(v60, 1, v12);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v59, v60, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v59, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v59, v12);
LABEL_36:
    uint64_t v63 = sub_10000F214(&qword_10051E070);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v59, v60, v12);
LABEL_37:
  uint64_t v64 = a3[6];
  uint64_t v65 = (void *)((char *)a1 + v64);
  char v66 = (void *)((char *)v82 + v64);
  if (a1 != v82)
  {
    sub_1000DA2EC((uint64_t)a1 + v64, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    uint64_t v67 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *uint64_t v65 = *v66;
      v65[1] = v66[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void *, void *, uint64_t))(v83 + 16))(v65, v66, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      *uint64_t v65 = *v66;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v69 = sub_10000F214(&qword_10051E248);
  *(void *)((char *)v65 + *(int *)(v69 + 28)) = *(void *)((char *)v66 + *(int *)(v69 + 28));
  swift_retain();
  swift_release();
  uint64_t v70 = a3[7];
  uint64_t v71 = (char *)a1 + v70;
  uint64_t v72 = (char *)v82 + v70;
  uint64_t v73 = type metadata accessor for PhotosPickerItem();
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
  int v76 = v75(v71, 1, v73);
  int v77 = v75(v72, 1, v73);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 24))(v71, v72, v73);
      goto LABEL_57;
    }
    (*(void (**)(char *, uint64_t))(v74 + 8))(v71, v73);
    goto LABEL_56;
  }
  if (v77)
  {
LABEL_56:
    uint64_t v78 = sub_10000F214(&qword_10051D088);
    memcpy(v71, v72, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v72, v73);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
LABEL_57:
  uint64_t v79 = sub_10000F214(&qword_10051E240);
  *(void *)&v71[*(int *)(v79 + 28)] = *(void *)&v72[*(int *)(v79 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

void *sub_1000E16B4(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = *(int *)(sub_10000F214(qword_10051D090) + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v60 = a2;
  uint64_t v8 = (char *)a2 + v6;
  char *v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *((_DWORD *)v7 + 6) = *((_DWORD *)v8 + 6);
  *((_WORD *)v7 + 14) = *((_WORD *)v8 + 14);
  uint64_t v9 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v10 = v9[10];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  int v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000F214(&qword_10051E070);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v7[v9[11]] = v8[v9[11]];
  uint64_t v17 = v9[12];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)&v7[v9[13]] = *(void *)&v8[v9[13]];
  v7[v9[14]] = v8[v9[14]];
  v7[v9[15]] = v8[v9[15]];
  v7[v9[16]] = v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  uint64_t v20 = v9[18];
  uint64_t v21 = &v7[v20];
  uint64_t v22 = &v8[v20];
  if (v15(&v8[v20], 1, v13))
  {
    uint64_t v23 = sub_10000F214(&qword_10051E070);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, v22, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v21, 0, 1, v13);
  }
  v7[v9[19]] = v8[v9[19]];
  v7[v9[20]] = v8[v9[20]];
  v7[v9[21]] = v8[v9[21]];
  uint64_t v24 = v9[22];
  uint64_t v25 = &v7[v24];
  uint64_t v26 = &v8[v24];
  if (v15(&v8[v24], 1, v13))
  {
    uint64_t v27 = sub_10000F214(&qword_10051E070);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v25, v26, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v25, 0, 1, v13);
  }
  uint64_t v28 = a3[5];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)v60 + v28;
  *uint64_t v29 = *((unsigned char *)v60 + v28);
  v29[1] = *((unsigned char *)v60 + v28 + 1);
  *(_OWORD *)(v29 + 8) = *(_OWORD *)((char *)v60 + v28 + 8);
  *((_DWORD *)v29 + 6) = *(_DWORD *)((char *)v60 + v28 + 24);
  *((_WORD *)v29 + 14) = *(_WORD *)((char *)v60 + v28 + 28);
  uint64_t v31 = v9[10];
  uint64_t v32 = &v29[v31];
  int v33 = &v30[v31];
  if (v15(&v30[v31], 1, v13))
  {
    uint64_t v34 = sub_10000F214(&qword_10051E070);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v32, v33, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v32, 0, 1, v13);
  }
  v29[v9[11]] = v30[v9[11]];
  uint64_t v35 = v9[12];
  uint64_t v36 = &v29[v35];
  uint64_t v37 = &v30[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  *(void *)&v29[v9[13]] = *(void *)&v30[v9[13]];
  v29[v9[14]] = v30[v9[14]];
  v29[v9[15]] = v30[v9[15]];
  v29[v9[16]] = v30[v9[16]];
  v29[v9[17]] = v30[v9[17]];
  uint64_t v38 = v9[18];
  uint64_t v39 = &v29[v38];
  uint64_t v40 = &v30[v38];
  if (v15(&v30[v38], 1, v13))
  {
    uint64_t v41 = sub_10000F214(&qword_10051E070);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  v29[v9[19]] = v30[v9[19]];
  v29[v9[20]] = v30[v9[20]];
  v29[v9[21]] = v30[v9[21]];
  uint64_t v42 = v9[22];
  int v43 = &v29[v42];
  uint64_t v44 = &v30[v42];
  if (v15(&v30[v42], 1, v13))
  {
    uint64_t v45 = sub_10000F214(&qword_10051E070);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = a3[6];
  uint64_t v47 = (char *)a1 + v46;
  uint64_t v48 = (char *)v60 + v46;
  uint64_t v49 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v47, v48, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  uint64_t v50 = sub_10000F214(&qword_10051E248);
  *(void *)&v47[*(int *)(v50 + 28)] = *(void *)&v48[*(int *)(v50 + 28)];
  uint64_t v51 = a3[7];
  uint64_t v52 = (char *)a1 + v51;
  uint64_t v53 = (char *)v60 + v51;
  uint64_t v54 = type metadata accessor for PhotosPickerItem();
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    uint64_t v56 = sub_10000F214(&qword_10051D088);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v53, v54);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  uint64_t v57 = sub_10000F214(&qword_10051E240);
  *(void *)&v52[*(int *)(v57 + 28)] = *(void *)&v53[*(int *)(v57 + 28)];
  return a1;
}

void *sub_1000E1E1C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v5 = *(int *)(sub_10000F214(qword_10051D090) + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v73 = a2;
  uint64_t v7 = (char *)a2 + v5;
  char *v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  *(_OWORD *)(v6 + 8) = *(_OWORD *)((char *)a2 + v5 + 8);
  *((_DWORD *)v6 + 6) = *(_DWORD *)((char *)a2 + v5 + 24);
  v6[28] = *((unsigned char *)a2 + v5 + 28);
  v6[29] = *((unsigned char *)a2 + v5 + 29);
  uint64_t v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v8[10];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v74 = *(void *)(v12 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
  int v14 = v13(v10, 1, v12);
  int v15 = v13(v11, 1, v12);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v10, v12);
LABEL_6:
    uint64_t v16 = sub_10000F214(&qword_10051E070);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 40))(v10, v11, v12);
LABEL_7:
  v6[v8[11]] = v7[v8[11]];
  uint64_t v17 = v8[12];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)&v6[v8[13]] = *(void *)&v7[v8[13]];
  v6[v8[14]] = v7[v8[14]];
  v6[v8[15]] = v7[v8[15]];
  v6[v8[16]] = v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  uint64_t v20 = v8[18];
  uint64_t v21 = &v6[v20];
  uint64_t v22 = &v7[v20];
  int v23 = v13(&v6[v20], 1, v12);
  int v24 = v13(v22, 1, v12);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v21, v22, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v21, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v21, v12);
LABEL_12:
    uint64_t v25 = sub_10000F214(&qword_10051E070);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 40))(v21, v22, v12);
LABEL_13:
  v6[v8[19]] = v7[v8[19]];
  v6[v8[20]] = v7[v8[20]];
  v6[v8[21]] = v7[v8[21]];
  uint64_t v26 = v8[22];
  uint64_t v27 = &v6[v26];
  uint64_t v28 = &v7[v26];
  int v29 = v13(&v6[v26], 1, v12);
  int v30 = v13(v28, 1, v12);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v27, v28, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v27, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v27, v12);
LABEL_18:
    uint64_t v31 = sub_10000F214(&qword_10051E070);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 40))(v27, v28, v12);
LABEL_19:
  uint64_t v32 = a3[5];
  int v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)v73 + v32;
  char *v33 = *((unsigned char *)v73 + v32);
  v33[1] = *((unsigned char *)v73 + v32 + 1);
  *(_OWORD *)(v33 + 8) = *(_OWORD *)((char *)v73 + v32 + 8);
  *((_DWORD *)v33 + 6) = *(_DWORD *)((char *)v73 + v32 + 24);
  v33[28] = *((unsigned char *)v73 + v32 + 28);
  v33[29] = *((unsigned char *)v73 + v32 + 29);
  uint64_t v35 = v8[10];
  uint64_t v36 = &v33[v35];
  uint64_t v37 = &v34[v35];
  int v38 = v13(&v33[v35], 1, v12);
  int v39 = v13(v37, 1, v12);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v36, v37, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v36, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v36, v12);
LABEL_24:
    uint64_t v40 = sub_10000F214(&qword_10051E070);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 40))(v36, v37, v12);
LABEL_25:
  v33[v8[11]] = v34[v8[11]];
  uint64_t v41 = v8[12];
  uint64_t v42 = &v33[v41];
  int v43 = &v34[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  *(void *)&v33[v8[13]] = *(void *)&v34[v8[13]];
  v33[v8[14]] = v34[v8[14]];
  v33[v8[15]] = v34[v8[15]];
  v33[v8[16]] = v34[v8[16]];
  v33[v8[17]] = v34[v8[17]];
  uint64_t v44 = v8[18];
  uint64_t v45 = &v33[v44];
  uint64_t v46 = &v34[v44];
  int v47 = v13(&v33[v44], 1, v12);
  int v48 = v13(v46, 1, v12);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v45, v46, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v45, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v45, v12);
LABEL_30:
    uint64_t v49 = sub_10000F214(&qword_10051E070);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 40))(v45, v46, v12);
LABEL_31:
  v33[v8[19]] = v34[v8[19]];
  v33[v8[20]] = v34[v8[20]];
  v33[v8[21]] = v34[v8[21]];
  uint64_t v50 = v8[22];
  uint64_t v51 = &v33[v50];
  uint64_t v52 = &v34[v50];
  int v53 = v13(&v33[v50], 1, v12);
  int v54 = v13(v52, 1, v12);
  if (v53)
  {
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v51, v52, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v51, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v51, v12);
LABEL_36:
    uint64_t v55 = sub_10000F214(&qword_10051E070);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 40))(v51, v52, v12);
LABEL_37:
  uint64_t v56 = a3[6];
  uint64_t v57 = (char *)a1 + v56;
  uint64_t v58 = (char *)v73 + v56;
  if (a1 != v73)
  {
    sub_1000DA2EC((uint64_t)a1 + v56, type metadata accessor for CameraControllerConfigurationForm.ReplayState);
    uint64_t v59 = type metadata accessor for CameraControllerConfigurationForm.ReplayState(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v57, v58, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    }
  }
  uint64_t v60 = sub_10000F214(&qword_10051E248);
  *(void *)&v57[*(int *)(v60 + 28)] = *(void *)&v58[*(int *)(v60 + 28)];
  swift_release();
  uint64_t v61 = a3[7];
  int v62 = (char *)a1 + v61;
  uint64_t v63 = (char *)v73 + v61;
  uint64_t v64 = type metadata accessor for PhotosPickerItem();
  uint64_t v65 = *(void *)(v64 - 8);
  char v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
  int v67 = v66(v62, 1, v64);
  int v68 = v66(v63, 1, v64);
  if (!v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v62, v63, v64);
      goto LABEL_47;
    }
    (*(void (**)(char *, uint64_t))(v65 + 8))(v62, v64);
    goto LABEL_46;
  }
  if (v68)
  {
LABEL_46:
    uint64_t v69 = sub_10000F214(&qword_10051D088);
    memcpy(v62, v63, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_47;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v62, v63, v64);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
LABEL_47:
  uint64_t v70 = sub_10000F214(&qword_10051E240);
  *(void *)&v62[*(int *)(v70 + 28)] = *(void *)&v63[*(int *)(v70 + 28)];
  swift_release();
  return a1;
}

uint64_t sub_1000E28B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E28C4);
}

uint64_t sub_1000E28C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000F214(qword_10051D090);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for CameraControllerConfiguration(0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_10000F214(&qword_10051E248);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  uint64_t v16 = sub_10000F214(&qword_10051E240);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[7];

  return v17(v19, a2, v18);
}

uint64_t sub_1000E2A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E2A7C);
}

uint64_t sub_1000E2A7C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10000F214(qword_10051D090);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for CameraControllerConfiguration(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = sub_10000F214(&qword_10051E248);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }
  uint64_t v18 = sub_10000F214(&qword_10051E240);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[7];

  return v19(v21, a2, a2, v20);
}

void sub_1000E2C2C()
{
  sub_1000E2DCC(319, &qword_10051E700, type metadata accessor for CameraControllerConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CameraControllerConfiguration(319);
    if (v1 <= 0x3F)
    {
      sub_1000E2DCC(319, &qword_10051E708, type metadata accessor for CameraControllerConfigurationForm.ReplayState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
      if (v2 <= 0x3F)
      {
        sub_1000E2E30();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_1000E2DCC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1000E2E30()
{
  if (!qword_10051E710)
  {
    sub_10000F69C(&qword_10051D088);
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051E710);
    }
  }
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.FrameRate()
{
  return &type metadata for CameraControllerConfiguration.FrameRate;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.RecordingQuality()
{
  return &type metadata for CameraControllerConfiguration.RecordingQuality;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.BoresightEligibilityPolicy()
{
  return &type metadata for CameraControllerConfiguration.BoresightEligibilityPolicy;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.BoresightAlgorithm()
{
  return &type metadata for CameraControllerConfiguration.BoresightAlgorithm;
}

uint64_t sub_1000E2ECC()
{
  return sub_100013AA8(&qword_10051E748, &qword_10051E750);
}

uint64_t sub_1000E2F08()
{
  return sub_100013AA8(&qword_10051E758, &qword_10051E760);
}

unint64_t sub_1000E2F48()
{
  unint64_t result = qword_10051E768;
  if (!qword_10051E768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E768);
  }
  return result;
}

uint64_t sub_1000E2F9C()
{
  return sub_100013AA8(&qword_10051E770, &qword_10051E778);
}

unint64_t sub_1000E2FDC()
{
  unint64_t result = qword_10051E780;
  if (!qword_10051E780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E780);
  }
  return result;
}

uint64_t sub_1000E3030()
{
  return sub_100013AA8(&qword_10051E788, &qword_10051E790);
}

unint64_t sub_1000E3070()
{
  unint64_t result = qword_10051E798;
  if (!qword_10051E798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E798);
  }
  return result;
}

uint64_t sub_1000E30C4()
{
  return sub_100013AA8(&qword_10051E7A0, &qword_10051E7A8);
}

unint64_t sub_1000E3104()
{
  unint64_t result = qword_10051E7B0;
  if (!qword_10051E7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7B0);
  }
  return result;
}

unint64_t sub_1000E315C()
{
  unint64_t result = qword_10051E7B8;
  if (!qword_10051E7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7B8);
  }
  return result;
}

unint64_t sub_1000E31B4()
{
  unint64_t result = qword_10051E7C0;
  if (!qword_10051E7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7C0);
  }
  return result;
}

unint64_t sub_1000E320C()
{
  unint64_t result = qword_10051E7C8;
  if (!qword_10051E7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7C8);
  }
  return result;
}

unint64_t sub_1000E3264()
{
  unint64_t result = qword_10051E7D0;
  if (!qword_10051E7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7D0);
  }
  return result;
}

unint64_t sub_1000E32BC()
{
  unint64_t result = qword_10051E7D8;
  if (!qword_10051E7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7D8);
  }
  return result;
}

unint64_t sub_1000E3314()
{
  unint64_t result = qword_10051E7E0;
  if (!qword_10051E7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7E0);
  }
  return result;
}

unint64_t sub_1000E336C()
{
  unint64_t result = qword_10051E7E8;
  if (!qword_10051E7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7E8);
  }
  return result;
}

unint64_t sub_1000E33C4()
{
  unint64_t result = qword_10051E7F0;
  if (!qword_10051E7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7F0);
  }
  return result;
}

unint64_t sub_1000E341C()
{
  unint64_t result = qword_10051E7F8;
  if (!qword_10051E7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E7F8);
  }
  return result;
}

unint64_t sub_1000E3474()
{
  unint64_t result = qword_10051E800;
  if (!qword_10051E800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E800);
  }
  return result;
}

unint64_t sub_1000E34CC()
{
  unint64_t result = qword_10051E808;
  if (!qword_10051E808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E808);
  }
  return result;
}

unint64_t sub_1000E3524()
{
  unint64_t result = qword_10051E810;
  if (!qword_10051E810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E810);
  }
  return result;
}

unint64_t sub_1000E357C()
{
  unint64_t result = qword_10051E818;
  if (!qword_10051E818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E818);
  }
  return result;
}

unint64_t sub_1000E35D4()
{
  unint64_t result = qword_10051E820;
  if (!qword_10051E820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E820);
  }
  return result;
}

unint64_t sub_1000E362C()
{
  unint64_t result = qword_10051E828;
  if (!qword_10051E828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E828);
  }
  return result;
}

unint64_t sub_1000E3684()
{
  unint64_t result = qword_10051E830;
  if (!qword_10051E830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E830);
  }
  return result;
}

unint64_t sub_1000E36DC()
{
  unint64_t result = qword_10051E838;
  if (!qword_10051E838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E838);
  }
  return result;
}

unint64_t sub_1000E3734()
{
  unint64_t result = qword_10051E840;
  if (!qword_10051E840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E840);
  }
  return result;
}

unint64_t sub_1000E378C()
{
  unint64_t result = qword_10051E848;
  if (!qword_10051E848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E848);
  }
  return result;
}

unint64_t sub_1000E37E4()
{
  unint64_t result = qword_10051E850;
  if (!qword_10051E850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E850);
  }
  return result;
}

uint64_t sub_1000E3838()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000E3854()
{
  unint64_t result = qword_10051E888;
  if (!qword_10051E888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E888);
  }
  return result;
}

unint64_t sub_1000E38A8()
{
  unint64_t result = qword_10051E890;
  if (!qword_10051E890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E890);
  }
  return result;
}

unint64_t sub_1000E38FC()
{
  unint64_t result = qword_10051E898;
  if (!qword_10051E898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E898);
  }
  return result;
}

unint64_t sub_1000E3950()
{
  unint64_t result = qword_10051E8B8;
  if (!qword_10051E8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E8B8);
  }
  return result;
}

unint64_t sub_1000E39A4()
{
  unint64_t result = qword_10051E8C0;
  if (!qword_10051E8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E8C0);
  }
  return result;
}

unint64_t sub_1000E39F8()
{
  unint64_t result = qword_10051E8C8;
  if (!qword_10051E8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E8C8);
  }
  return result;
}

unint64_t sub_1000E3A4C()
{
  unint64_t result = qword_10051E8F0;
  if (!qword_10051E8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E8F0);
  }
  return result;
}

unint64_t sub_1000E3AA0()
{
  unint64_t result = qword_10051E8F8;
  if (!qword_10051E8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E8F8);
  }
  return result;
}

unint64_t sub_1000E3AF4()
{
  unint64_t result = qword_10051E900;
  if (!qword_10051E900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E900);
  }
  return result;
}

unint64_t sub_1000E3B48()
{
  unint64_t result = qword_10051E908;
  if (!qword_10051E908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E908);
  }
  return result;
}

unint64_t sub_1000E3B9C()
{
  unint64_t result = qword_10051E928;
  if (!qword_10051E928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E928);
  }
  return result;
}

unint64_t sub_1000E3BF0()
{
  unint64_t result = qword_10051E930;
  if (!qword_10051E930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E930);
  }
  return result;
}

unint64_t sub_1000E3C44()
{
  unint64_t result = qword_10051E938;
  if (!qword_10051E938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E938);
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.FrameRate.CodingKeys()
{
  return &type metadata for CameraControllerConfiguration.FrameRate.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.FrameRate.ThirtyCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.FrameRate.ThirtyCodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.FrameRate.SixtyCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.FrameRate.SixtyCodingKeys;
}

unsigned char *_s6Tamale29CameraControllerConfigurationV10SourceTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E3D94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.RecordingQuality.CodingKeys()
{
  return &type metadata for CameraControllerConfiguration.RecordingQuality.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.RecordingQuality.AutoCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.RecordingQuality.AutoCodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.RecordingQuality.HighResolutionCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.RecordingQuality.HighResolutionCodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.RecordingQuality.FourKCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.RecordingQuality.FourKCodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.BoresightEligibilityPolicy.CodingKeys()
{
  return &type metadata for CameraControllerConfiguration.BoresightEligibilityPolicy.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.BoresightEligibilityPolicy.AllowAllCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.BoresightEligibilityPolicy.AllowAllCodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.BoresightEligibilityPolicy.PinActionableOnlyCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.BoresightEligibilityPolicy.PinActionableOnlyCodingKeys;
}

unsigned char *_s6Tamale29CameraControllerConfigurationV18BoresightAlgorithmOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E3EF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.BoresightAlgorithm.CodingKeys()
{
  return &type metadata for CameraControllerConfiguration.BoresightAlgorithm.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.BoresightAlgorithm.NearestCentroidCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.BoresightAlgorithm.NearestCentroidCodingKeys;
}

ValueMetadata *type metadata accessor for CameraControllerConfiguration.BoresightAlgorithm.MaximumIntersectionOverUnionCodingKeys()
{
  return &type metadata for CameraControllerConfiguration.BoresightAlgorithm.MaximumIntersectionOverUnionCodingKeys;
}

uint64_t sub_1000E3F50()
{
  return sub_100013AA8(&qword_10051EA10, &qword_10051EA18);
}

unint64_t sub_1000E3F90()
{
  unint64_t result = qword_10051EA20;
  if (!qword_10051EA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA20);
  }
  return result;
}

unint64_t sub_1000E3FE8()
{
  unint64_t result = qword_10051EA28;
  if (!qword_10051EA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA28);
  }
  return result;
}

unint64_t sub_1000E4040()
{
  unint64_t result = qword_10051EA30;
  if (!qword_10051EA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA30);
  }
  return result;
}

unint64_t sub_1000E4098()
{
  unint64_t result = qword_10051EA38;
  if (!qword_10051EA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA38);
  }
  return result;
}

unint64_t sub_1000E40F0()
{
  unint64_t result = qword_10051EA40;
  if (!qword_10051EA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA40);
  }
  return result;
}

unint64_t sub_1000E4148()
{
  unint64_t result = qword_10051EA48;
  if (!qword_10051EA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA48);
  }
  return result;
}

unint64_t sub_1000E41A0()
{
  unint64_t result = qword_10051EA50;
  if (!qword_10051EA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA50);
  }
  return result;
}

unint64_t sub_1000E41F8()
{
  unint64_t result = qword_10051EA58;
  if (!qword_10051EA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA58);
  }
  return result;
}

unint64_t sub_1000E4250()
{
  unint64_t result = qword_10051EA60;
  if (!qword_10051EA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA60);
  }
  return result;
}

unint64_t sub_1000E42A8()
{
  unint64_t result = qword_10051EA68;
  if (!qword_10051EA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA68);
  }
  return result;
}

unint64_t sub_1000E4300()
{
  unint64_t result = qword_10051EA70;
  if (!qword_10051EA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA70);
  }
  return result;
}

unint64_t sub_1000E4358()
{
  unint64_t result = qword_10051EA78;
  if (!qword_10051EA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA78);
  }
  return result;
}

unint64_t sub_1000E43B0()
{
  unint64_t result = qword_10051EA80;
  if (!qword_10051EA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA80);
  }
  return result;
}

unint64_t sub_1000E4408()
{
  unint64_t result = qword_10051EA88;
  if (!qword_10051EA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA88);
  }
  return result;
}

unint64_t sub_1000E4460()
{
  unint64_t result = qword_10051EA90;
  if (!qword_10051EA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA90);
  }
  return result;
}

unint64_t sub_1000E44B8()
{
  unint64_t result = qword_10051EA98;
  if (!qword_10051EA98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EA98);
  }
  return result;
}

unint64_t sub_1000E4510()
{
  unint64_t result = qword_10051EAA0;
  if (!qword_10051EAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAA0);
  }
  return result;
}

unint64_t sub_1000E4568()
{
  unint64_t result = qword_10051EAA8;
  if (!qword_10051EAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAA8);
  }
  return result;
}

unint64_t sub_1000E45C0()
{
  unint64_t result = qword_10051EAB0;
  if (!qword_10051EAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAB0);
  }
  return result;
}

unint64_t sub_1000E4618()
{
  unint64_t result = qword_10051EAB8;
  if (!qword_10051EAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAB8);
  }
  return result;
}

unint64_t sub_1000E4670()
{
  unint64_t result = qword_10051EAC0;
  if (!qword_10051EAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAC0);
  }
  return result;
}

unint64_t sub_1000E46C8()
{
  unint64_t result = qword_10051EAC8;
  if (!qword_10051EAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAC8);
  }
  return result;
}

unint64_t sub_1000E4720()
{
  unint64_t result = qword_10051EAD0;
  if (!qword_10051EAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAD0);
  }
  return result;
}

unint64_t sub_1000E4778()
{
  unint64_t result = qword_10051EAD8;
  if (!qword_10051EAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAD8);
  }
  return result;
}

unint64_t sub_1000E47D0()
{
  unint64_t result = qword_10051EAE0;
  if (!qword_10051EAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAE0);
  }
  return result;
}

unint64_t sub_1000E4828()
{
  unint64_t result = qword_10051EAE8;
  if (!qword_10051EAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAE8);
  }
  return result;
}

unint64_t sub_1000E4880()
{
  unint64_t result = qword_10051EAF0;
  if (!qword_10051EAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAF0);
  }
  return result;
}

unint64_t sub_1000E48D8()
{
  unint64_t result = qword_10051EAF8;
  if (!qword_10051EAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EAF8);
  }
  return result;
}

unint64_t sub_1000E4930()
{
  unint64_t result = qword_10051EB00;
  if (!qword_10051EB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EB00);
  }
  return result;
}

unint64_t sub_1000E4988()
{
  unint64_t result = qword_10051EB08;
  if (!qword_10051EB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EB08);
  }
  return result;
}

ValueMetadata *type metadata accessor for OnboardingConfiguration()
{
  return &type metadata for OnboardingConfiguration;
}

uint64_t sub_1000E49F4(uint64_t a1)
{
  unint64_t v2 = sub_1000E54DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E4A30(uint64_t a1)
{
  unint64_t v2 = sub_1000E54DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E4A6C(uint64_t a1)
{
  return _s6Tamale17AnyLocalizedErrorVwxx_0(a1);
}

uint64_t sub_1000E4A94(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051EB80);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000E54DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1000E4BA8()
{
  unint64_t result = qword_10051EB10;
  if (!qword_10051EB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EB10);
  }
  return result;
}

unint64_t sub_1000E4BFC(uint64_t a1)
{
  unint64_t result = sub_1000E4C24();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E4C24()
{
  unint64_t result = qword_10051EB40;
  if (!qword_10051EB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EB40);
  }
  return result;
}

unint64_t sub_1000E4C7C(uint64_t a1)
{
  unint64_t result = sub_1000E4CA4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E4CA4()
{
  unint64_t result = qword_10051EB70;
  if (!qword_10051EB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EB70);
  }
  return result;
}

uint64_t sub_1000E4CF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E4D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v47 = a4;
  uint64_t v48 = sub_10000F214(&qword_10051EB90);
  uint64_t v51 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000F214(&qword_10051EB98) - 8;
  __chkstk_darwin(v50);
  uint64_t v46 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  int v43 = (char *)&v40 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v40 - v13;
  __chkstk_darwin(v15);
  uint64_t v49 = (uint64_t)&v40 - v16;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  v17[4] = a3;
  uint64_t v18 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  Button<>.init(_:action:)();
  char v19 = sub_1000B52EC();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = (v19 & 1) == 0;
  uint64_t v22 = v51;
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v23 = v48;
  v45(v14, v8, v48);
  int v24 = (uint64_t *)&v14[*(int *)(v50 + 44)];
  *int v24 = KeyPath;
  v24[1] = (uint64_t)sub_1000E5558;
  v24[2] = v21;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v51 = v22 + 8;
  uint64_t v44 = v25;
  v25(v8, v23);
  sub_1000E5560((uint64_t)v14, v49);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v26 = (void *)swift_allocObject();
  uint64_t v27 = v42;
  v26[2] = v18;
  v26[3] = v27;
  v26[4] = v41;
  swift_retain();
  swift_retain();
  swift_retain();
  Button<>.init(_:action:)();
  id v28 = [self standardUserDefaults];
  NSString v29 = String._bridgeToObjectiveC()();
  LOBYTE(KeyPath) = [v28 BOOLForKey:v29];

  uint64_t v30 = swift_getKeyPath();
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = KeyPath ^ 1;
  uint64_t v32 = (uint64_t)v43;
  uint64_t v33 = v48;
  v45(v43, v8, v48);
  uint64_t v34 = (uint64_t *)(v32 + *(int *)(v50 + 44));
  *uint64_t v34 = v30;
  v34[1] = (uint64_t)sub_1000E5A24;
  v34[2] = v31;
  v44(v8, v33);
  sub_1000E5560(v32, (uint64_t)v14);
  uint64_t v35 = v49;
  sub_1000E5630(v49, v32);
  uint64_t v36 = v46;
  sub_1000E5630((uint64_t)v14, v46);
  uint64_t v37 = v47;
  sub_1000E5630(v32, v47);
  uint64_t v38 = sub_10000F214(&qword_10051EBA0);
  sub_1000E5630(v36, v37 + *(int *)(v38 + 48));
  sub_1000E5698((uint64_t)v14);
  sub_1000E5698(v35);
  sub_1000E5698(v36);
  return sub_1000E5698(v32);
}

void sub_1000E5208()
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000F378(v0, (uint64_t)qword_10055E2E0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Resetting onboarding overlays…", v3, 2u);
    swift_slowDealloc();
  }

  sub_1000B513C();
}

void sub_1000E52F0()
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000F378(v0, (uint64_t)qword_10055E2E0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Resetting onboarding follow up prompts…", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = [self standardUserDefaults];
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setBool:0 forKey:v5];
}

uint64_t sub_1000E5444@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E4D14(*v1, v1[1], v1[2], a1);
}

unint64_t sub_1000E5450(void *a1)
{
  a1[1] = sub_10001707C();
  a1[2] = sub_10001741C();
  unint64_t result = sub_1000E5488();
  a1[3] = result;
  return result;
}

unint64_t sub_1000E5488()
{
  unint64_t result = qword_10051EB78;
  if (!qword_10051EB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EB78);
  }
  return result;
}

unint64_t sub_1000E54DC()
{
  unint64_t result = qword_10051EB88;
  if (!qword_10051EB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EB88);
  }
  return result;
}

void sub_1000E5534()
{
}

uint64_t sub_1000E5548()
{
  return swift_deallocObject();
}

unsigned char *sub_1000E5558(unsigned char *a1)
{
  return sub_10027DBFC(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_1000E5560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051EB98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E55CC()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000E5614()
{
}

uint64_t sub_1000E5620()
{
  return swift_deallocObject();
}

uint64_t sub_1000E5630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051EB98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5698(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051EB98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for OnboardingConfiguration.CodingKeys()
{
  return &type metadata for OnboardingConfiguration.CodingKeys;
}

uint64_t destroy for OnboardingConfigurationForm()
{
  swift_release();
  swift_release();

  return swift_release();
}

void *_s6Tamale27OnboardingConfigurationFormVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for OnboardingConfigurationForm(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for ParseDetectorResult.SearchableDetectionsContainer(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for OnboardingConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookup.CandidateResult.TokenizedString(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookup.CandidateResult.TokenizedString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnboardingConfigurationForm()
{
  return &type metadata for OnboardingConfigurationForm;
}

unint64_t sub_1000E5918()
{
  unint64_t result = qword_10051EBA8;
  if (!qword_10051EBA8)
  {
    sub_10000F69C(&qword_10051EBB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EBA8);
  }
  return result;
}

unint64_t sub_1000E5978()
{
  unint64_t result = qword_10051EBB8;
  if (!qword_10051EBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EBB8);
  }
  return result;
}

unint64_t sub_1000E59D0()
{
  unint64_t result = qword_10051EBC0;
  if (!qword_10051EBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EBC0);
  }
  return result;
}

uint64_t *sub_1000E5A28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000E5B50(uint64_t a1)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

void *sub_1000E5BF4(void *a1, void *a2, uint64_t a3)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000E5CCC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1000E5DD0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000E5EA4(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v6 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000E5FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E5FB4);
}

uint64_t sub_1000E5FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000E607C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E6090);
}

uint64_t sub_1000E6090(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214(&qword_100522CF0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for CameraErrorView()
{
  uint64_t result = qword_10051EC20;
  if (!qword_10051EC20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000E61A0()
{
  sub_100027A88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000E6234()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E6250@<X0>(uint64_t a1@<X8>)
{
  uint64_t v105 = a1;
  uint64_t v104 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v104);
  uint64_t v103 = (char *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for Material();
  uint64_t v99 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  unint64_t v94 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for ColorScheme();
  uint64_t v4 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v6 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v84 - v8;
  uint64_t v10 = sub_10000F214(&qword_10051EC58);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051EC60);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_10051EC68) - 8;
  __chkstk_darwin(v86);
  uint64_t v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000F214(&qword_10051EC70) - 8;
  __chkstk_darwin(v87);
  int v85 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000F214(&qword_10051EC78) - 8;
  __chkstk_darwin(v89);
  uint64_t v88 = (uint64_t)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000F214(&qword_10051EC80) - 8;
  __chkstk_darwin(v91);
  int v90 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000F214(&qword_10051EC88) - 8;
  __chkstk_darwin(v95);
  uint64_t v92 = (uint64_t)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_10000F214(&qword_10051EC90) - 8;
  __chkstk_darwin(v96);
  uint64_t v93 = (uint64_t)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000F214(&qword_10051EC98) - 8;
  __chkstk_darwin(v102);
  uint64_t v98 = (uint64_t)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_10000F214(&qword_10051ECA0);
  __chkstk_darwin(v100);
  uint64_t v97 = (uint64_t)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v12 = static HorizontalAlignment.center.getter();
  *((void *)v12 + 1) = 0x4034000000000000;
  v12[16] = 0;
  uint64_t v26 = sub_10000F214(&qword_10051ECA8);
  sub_1000E6C48(v1, (uint64_t)&v12[*(int *)(v26 + 44)]);
  char v27 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_10000FB74((uint64_t)v12, (uint64_t)v16, &qword_10051EC58);
  uint64_t v36 = &v16[*(int *)(v14 + 44)];
  *uint64_t v36 = v27;
  *((void *)v36 + 1) = v29;
  *((void *)v36 + 2) = v31;
  *((void *)v36 + 3) = v33;
  *((void *)v36 + 4) = v35;
  v36[40] = 0;
  sub_10000FBD8((uint64_t)v12, &qword_10051EC58);
  uint64_t v37 = static Alignment.center.getter();
  uint64_t v39 = v38;
  sub_10027CA80((uint64_t)v9);
  uint64_t v40 = v6;
  uint64_t v41 = v6;
  uint64_t v42 = v84;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v41, enum case for ColorScheme.light(_:), v84);
  char v43 = static ColorScheme.== infix(_:_:)();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v4 + 8);
  v44(v40, v42);
  v44(v9, v42);
  if (v43) {
    double v45 = 0.8;
  }
  else {
    double v45 = 0.3;
  }
  sub_10000FB74((uint64_t)v16, (uint64_t)v18, &qword_10051EC60);
  uint64_t v46 = &v18[*(int *)(v86 + 44)];
  *(void *)uint64_t v46 = &off_1004E57D0;
  *((double *)v46 + 1) = v45;
  *((void *)v46 + 2) = 0x3FE3333333333333;
  *((void *)v46 + 3) = v37;
  *((void *)v46 + 4) = v39;
  sub_10000FBD8((uint64_t)v16, &qword_10051EC60);
  uint64_t v47 = v94;
  static Material.thin.getter();
  char v48 = static Edge.Set.all.getter();
  uint64_t v49 = (uint64_t)v85;
  uint64_t v50 = &v85[*(int *)(v87 + 44)];
  uint64_t v51 = v99;
  uint64_t v52 = v101;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v50, v47, v101);
  v50[*(int *)(sub_10000F214(&qword_1005190E0) + 36)] = v48;
  sub_10000FB74((uint64_t)v18, v49, &qword_10051EC68);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v52);
  sub_10000FBD8((uint64_t)v18, &qword_10051EC68);
  sub_1000B409C(v106);
  uint64_t v53 = v106[0];
  uint64_t v54 = v106[1];
  uint64_t v55 = v106[2];
  uint64_t v56 = v106[3];
  uint64_t v57 = v106[4];
  uint64_t v58 = static Alignment.center.getter();
  uint64_t v60 = v59;
  uint64_t v61 = v88;
  sub_10000FB74(v49, v88, &qword_10051EC70);
  int v62 = (void *)(v61 + *(int *)(v89 + 44));
  *int v62 = v53;
  v62[1] = v54;
  v62[2] = v55;
  v62[3] = v56;
  v62[4] = v57;
  v62[5] = 0x3FE6666666666666;
  v62[6] = v58;
  v62[7] = v60;
  sub_10000FBD8(v49, &qword_10051EC70);
  uint64_t v63 = v103;
  uint64_t v64 = &v103[*(int *)(v104 + 28)];
  uint64_t v65 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v66 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 104))(v64, v65, v66);
  __asm { FMOV            V0.2D, #28.0 }
  uint64_t v72 = (uint64_t)v63;
  *uint64_t v63 = _Q0;
  uint64_t v73 = (uint64_t)v90;
  uint64_t v74 = (uint64_t)&v90[*(int *)(v91 + 44)];
  sub_10002DFC8(v72, v74);
  *(_WORD *)(v74 + *(int *)(sub_10000F214(&qword_100519008) + 36)) = 256;
  sub_10000FB74(v61, v73, &qword_10051EC78);
  sub_10002D5A4(v72);
  sub_10000FBD8(v61, &qword_10051EC78);
  static Color.black.getter();
  uint64_t v75 = Color.opacity(_:)();
  swift_release();
  uint64_t v76 = v92;
  sub_10000FB74(v73, v92, &qword_10051EC80);
  uint64_t v77 = v76 + *(int *)(v95 + 44);
  *(void *)uint64_t v77 = v75;
  *(_OWORD *)(v77 + 8) = xmmword_10043D5B0;
  *(void *)(v77 + 24) = 0x4010000000000000;
  sub_10000FBD8(v73, &qword_10051EC80);
  LOBYTE(v74) = static Edge.Set.all.getter();
  uint64_t v78 = v93;
  sub_10000FB74(v76, v93, &qword_10051EC88);
  uint64_t v79 = v78 + *(int *)(v96 + 44);
  *(unsigned char *)uint64_t v79 = v74;
  *(_OWORD *)(v79 + 8) = 0u;
  *(_OWORD *)(v79 + 24) = 0u;
  *(unsigned char *)(v79 + 40) = 1;
  sub_10000FBD8(v76, &qword_10051EC88);
  static AnyTransition.opacity.getter();
  static AnyTransition.blur(radius:)();
  uint64_t v80 = AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  uint64_t v81 = v98;
  sub_10000FB74(v78, v98, &qword_10051EC90);
  *(void *)(v81 + *(int *)(v102 + 44)) = v80;
  sub_10000FBD8(v78, &qword_10051EC90);
  uint64_t v82 = v97;
  sub_10000FB74(v81, v97, &qword_10051EC98);
  *(unsigned char *)(v82 + *(int *)(v100 + 36)) = 0;
  sub_10000FBD8(v81, &qword_10051EC98);
  sub_1000E76A8();
  View.accessibilityIdentifier(_:)();
  return sub_10000FBD8(v82, &qword_10051ECA0);
}

uint64_t sub_1000E6C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051ED20);
  __chkstk_darwin(v3 - 8);
  uint64_t v46 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v44 - v6;
  *(void *)uint64_t v7 = static VerticalAlignment.center.getter();
  *((void *)v7 + 1) = 0;
  v7[16] = 1;
  double v45 = v7;
  uint64_t v8 = sub_10000F214(&qword_10051ED28);
  sub_1000E6F90((uint64_t)&v7[*(int *)(v8 + 44)]);
  uint64_t v9 = (void *)(a1 + *(int *)(type metadata accessor for CameraErrorView() + 20));
  uint64_t v10 = v9[1];
  *(void *)&long long v58 = *v9;
  *((void *)&v58 + 1) = v10;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.headline.getter();
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  swift_release();
  sub_100012FAC(v11, v13, v15);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v21 = Text.fontWeight(_:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  char v27 = v26 & 1;
  sub_100012FAC(v16, v18, v20 & 1);
  swift_bridgeObjectRelease();
  uint64_t v28 = static Alignment.leading.getter();
  sub_10022551C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v58, 0.0, 1, 0.0, 1, v28, v29, v21, v23, v27, v25);
  sub_100012FAC(v21, v23, v27);
  swift_bridgeObjectRelease();
  long long v54 = v64;
  long long v55 = v65;
  long long v56 = v66;
  long long v50 = v60;
  long long v51 = v61;
  long long v52 = v62;
  long long v53 = v63;
  long long v48 = v58;
  long long v49 = v59;
  uint64_t v31 = (uint64_t)v45;
  uint64_t v30 = v46;
  sub_10000FB74((uint64_t)v45, v46, &qword_10051ED20);
  uint64_t v32 = v47;
  sub_10000FB74(v30, v47, &qword_10051ED20);
  uint64_t v33 = *(int *)(sub_10000F214(&qword_10051ED30) + 48);
  long long v34 = v55;
  v57[6] = v54;
  v57[7] = v55;
  long long v35 = v56;
  v57[8] = v56;
  long long v37 = v52;
  long long v36 = v53;
  v57[4] = v52;
  v57[5] = v53;
  long long v38 = v50;
  long long v39 = v51;
  v57[2] = v50;
  v57[3] = v51;
  long long v41 = v48;
  long long v40 = v49;
  v57[0] = v48;
  v57[1] = v49;
  uint64_t v42 = (_OWORD *)(v32 + v33);
  v42[6] = v54;
  v42[7] = v34;
  v42[8] = v35;
  v42[2] = v38;
  v42[3] = v39;
  v42[4] = v37;
  v42[5] = v36;
  *uint64_t v42 = v41;
  v42[1] = v40;
  sub_100081470((uint64_t)v57);
  sub_10000FBD8(v31, &qword_10051ED20);
  long long v64 = v54;
  long long v65 = v55;
  long long v66 = v56;
  long long v60 = v50;
  long long v61 = v51;
  long long v62 = v52;
  long long v63 = v53;
  long long v58 = v48;
  long long v59 = v49;
  sub_1000813C8((uint64_t)&v58);
  return sub_10000FBD8(v30, &qword_10051ED20);
}

uint64_t sub_1000E6F90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v1 = type metadata accessor for SymbolEffectOptions();
  uint64_t v53 = *(void *)(v1 - 8);
  uint64_t v54 = v1;
  __chkstk_darwin(v1);
  long long v48 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ReplaceSymbolEffect();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  uint64_t v50 = v4;
  __chkstk_darwin(v3);
  uint64_t v46 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContentTransition();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  __chkstk_darwin(v6);
  double v45 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DynamicTypeSize();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051ED38);
  __chkstk_darwin(v12 - 8);
  char v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000F214(&qword_10051ED40);
  uint64_t v44 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_10051ED48);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  char v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v43 - v22;
  Image.init(_internalSystemName:)();
  static SymbolRenderingMode.multicolor.getter();
  uint64_t v24 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v14, 0, 1, v24);
  uint64_t v25 = Image.symbolRenderingMode(_:)();
  swift_release();
  sub_10000FBD8((uint64_t)v14, &qword_10051ED38);
  uint64_t v26 = static Font.title.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v56 = v25;
  uint64_t v57 = KeyPath;
  uint64_t v58 = v26;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DynamicTypeSize.large(_:), v8);
  sub_10000F214(&qword_10051C1A8);
  sub_10008D63C();
  View.dynamicTypeSize(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v28 = v46;
  ReplaceSymbolEffect.init()();
  uint64_t v29 = v48;
  static SymbolEffectOptions.default.getter();
  sub_1000E7D04(&qword_10051ED50, (void (*)(uint64_t))&type metadata accessor for ReplaceSymbolEffect);
  uint64_t v30 = v45;
  uint64_t v31 = v29;
  uint64_t v32 = v49;
  static ContentTransition.symbolEffect<A>(_:options:)();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v54);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v32);
  uint64_t v33 = swift_getKeyPath();
  long long v34 = (uint64_t *)&v20[*(int *)(v18 + 44)];
  uint64_t v35 = sub_10000F214(&qword_10051ED58);
  uint64_t v37 = v51;
  uint64_t v36 = v52;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))((char *)v34 + *(int *)(v35 + 28), v30, v52);
  *long long v34 = v33;
  uint64_t v38 = v44;
  uint64_t v39 = v47;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v20, v16, v47);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v36);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v39);
  sub_1000E7BEC((uint64_t)v20, (uint64_t)v23);
  sub_10000FB74((uint64_t)v23, (uint64_t)v20, &qword_10051ED48);
  uint64_t v40 = v55;
  sub_10000FB74((uint64_t)v20, v55, &qword_10051ED48);
  uint64_t v41 = v40 + *(int *)(sub_10000F214(&qword_10051ED60) + 48);
  *(void *)uint64_t v41 = 0;
  *(unsigned char *)(v41 + 8) = 1;
  sub_10000FBD8((uint64_t)v23, &qword_10051ED48);
  return sub_10000FBD8((uint64_t)v20, &qword_10051ED48);
}

uint64_t sub_1000E75E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContentTransition();
  double v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.contentTransition.setter();
}

unint64_t sub_1000E76A8()
{
  unint64_t result = qword_10051ECB0;
  if (!qword_10051ECB0)
  {
    sub_10000F69C(&qword_10051ECA0);
    sub_1000E7724();
    sub_10002D694();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ECB0);
  }
  return result;
}

unint64_t sub_1000E7724()
{
  unint64_t result = qword_10051ECB8;
  if (!qword_10051ECB8)
  {
    sub_10000F69C(&qword_10051EC98);
    sub_1000E7820(&qword_10051ECC0, &qword_10051EC90, (void (*)(void))sub_1000E77F0);
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ECB8);
  }
  return result;
}

uint64_t sub_1000E77F0()
{
  return sub_1000E7820(&qword_10051ECC8, &qword_10051EC88, (void (*)(void))sub_1000E789C);
}

uint64_t sub_1000E7820(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E789C()
{
  unint64_t result = qword_10051ECD0;
  if (!qword_10051ECD0)
  {
    sub_10000F69C(&qword_10051EC80);
    sub_1000E793C();
    sub_100013AA8(&qword_100519040, &qword_100519008);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ECD0);
  }
  return result;
}

unint64_t sub_1000E793C()
{
  unint64_t result = qword_10051ECD8;
  if (!qword_10051ECD8)
  {
    sub_10000F69C(&qword_10051EC78);
    sub_1000E79DC();
    sub_100013AA8(&qword_10051ED10, &qword_10051ED18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ECD8);
  }
  return result;
}

unint64_t sub_1000E79DC()
{
  unint64_t result = qword_10051ECE0;
  if (!qword_10051ECE0)
  {
    sub_10000F69C(&qword_10051EC70);
    sub_1000E7A7C();
    sub_100013AA8(&qword_1005190D8, &qword_1005190E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ECE0);
  }
  return result;
}

unint64_t sub_1000E7A7C()
{
  unint64_t result = qword_10051ECE8;
  if (!qword_10051ECE8)
  {
    sub_10000F69C(&qword_10051EC68);
    sub_1000E7B1C();
    sub_100013AA8(&qword_10051ED00, &qword_10051ED08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ECE8);
  }
  return result;
}

unint64_t sub_1000E7B1C()
{
  unint64_t result = qword_10051ECF0;
  if (!qword_10051ECF0)
  {
    sub_10000F69C(&qword_10051EC60);
    sub_100013AA8(&qword_10051ECF8, &qword_10051EC58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ECF0);
  }
  return result;
}

uint64_t sub_1000E7BC4()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_1000E7BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051ED48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E7C58()
{
  unint64_t result = qword_10051ED68;
  if (!qword_10051ED68)
  {
    sub_10000F69C(&qword_10051ED70);
    sub_1000E76A8();
    sub_1000E7D04((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ED68);
  }
  return result;
}

uint64_t sub_1000E7D04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CapsuleButtonStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E7E18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CapsuleButtonStyle()
{
  return &type metadata for CapsuleButtonStyle;
}

uint64_t sub_1000E7E50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E7E6C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v74 = a2;
  uint64_t v83 = a3;
  uint64_t v4 = type metadata accessor for Capsule();
  __chkstk_darwin(v4 - 8);
  uint64_t v81 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for TintShapeStyle();
  __chkstk_darwin(v80);
  uint64_t v79 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for SymbolVariants();
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  long long v66 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v63 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_10051ED78);
  uint64_t v67 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000F214(&qword_10051ED80);
  uint64_t v65 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  long long v61 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10051ED88);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_10051ED90);
  __chkstk_darwin(v18 - 8);
  uint64_t v62 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10000F214(&qword_10051ED98) - 8;
  __chkstk_darwin(v69);
  uint64_t v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000F214(&qword_10051EDA0);
  __chkstk_darwin(v72);
  uint64_t v77 = (uint64_t)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000F214(&qword_10051EDA8);
  __chkstk_darwin(v73);
  uint64_t v78 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000F214(&qword_10051EDB0);
  __chkstk_darwin(v76);
  uint64_t v75 = (uint64_t)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = a1;
  ButtonStyleConfiguration.label.getter();
  unint64_t v25 = sub_10008DF9C();
  unint64_t v26 = sub_1000E87B8();
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v10, v8);
  char v27 = v66;
  static SymbolVariants.fill.getter();
  uint64_t v84 = v8;
  int v85 = &type metadata for CapsuleButtonLabelStyle;
  unint64_t v86 = v25;
  unint64_t v87 = v26;
  uint64_t v28 = (uint64_t)v21;
  swift_getOpaqueTypeConformance2();
  uint64_t v29 = v61;
  uint64_t v30 = v64;
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v27, v71);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v12, v30);
  uint64_t v31 = static Font.headline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v33 = v65;
  uint64_t v34 = v68;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v17, v29, v68);
  uint64_t v35 = (uint64_t *)&v17[*(int *)(v15 + 44)];
  uint64_t *v35 = KeyPath;
  v35[1] = v31;
  char v36 = v74;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v29, v34);
  uint64_t v37 = static Alignment.center.getter();
  uint64_t v38 = v62;
  sub_100225E40(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v62, 0.0, 1, 0.0, 1, v37, v39);
  sub_10000FBD8((uint64_t)v17, &qword_10051ED88);
  LOBYTE(v15) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  sub_10000FB74(v38, v28, &qword_10051ED90);
  uint64_t v48 = v28 + *(int *)(v69 + 44);
  *(unsigned char *)uint64_t v48 = v15;
  *(void *)(v48 + 8) = v41;
  *(void *)(v48 + 16) = v43;
  *(void *)(v48 + 24) = v45;
  *(void *)(v48 + 32) = v47;
  *(unsigned char *)(v48 + 40) = 0;
  sub_10000FBD8(v38, &qword_10051ED90);
  if (v36) {
    uint64_t v84 = static Color.white.getter();
  }
  else {
    TintShapeStyle.init()();
  }
  uint64_t v49 = AnyShapeStyle.init<A>(_:)();
  uint64_t v50 = v77;
  sub_10000FB74(v28, v77, &qword_10051ED98);
  *(void *)(v50 + *(int *)(v72 + 36)) = v49;
  sub_10000FBD8(v28, &qword_10051ED98);
  if (v36)
  {
    TintShapeStyle.init()();
  }
  else
  {
    uint64_t v84 = 1;
    sub_10000F214(&qword_10051EDC0);
    sub_100013AA8(&qword_10051EDC8, &qword_10051EDC0);
  }
  uint64_t v51 = AnyShapeStyle.init<A>(_:)();
  uint64_t v52 = enum case for RoundedCornerStyle.circular(_:);
  uint64_t v53 = type metadata accessor for RoundedCornerStyle();
  uint64_t v54 = (uint64_t)v81;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 104))(v81, v52, v53);
  uint64_t v55 = (uint64_t)v78;
  uint64_t v56 = (uint64_t *)&v78[*(int *)(v73 + 36)];
  uint64_t v57 = sub_10000F214(&qword_10051EDD0);
  sub_10008D3F0(v54, (uint64_t)v56 + *(int *)(v57 + 52));
  uint64_t *v56 = v51;
  *(_WORD *)((char *)v56 + *(int *)(v57 + 56)) = 256;
  sub_10000FB74(v50, v55, &qword_10051EDA0);
  sub_10008D454(v54);
  sub_10000FBD8(v50, &qword_10051EDA0);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v58 = 0.8;
  }
  else {
    double v58 = 1.0;
  }
  uint64_t v59 = v75;
  sub_10000FB74(v55, v75, &qword_10051EDA8);
  *(double *)(v59 + *(int *)(v76 + 36)) = v58;
  sub_10000FBD8(v55, &qword_10051EDA8);
  return sub_1000E8AE8(v59, v83);
}

uint64_t sub_1000E87B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E7E6C(a1, *v2, a2);
}

unint64_t sub_1000E87B8()
{
  unint64_t result = qword_10051EDB8;
  if (!qword_10051EDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EDB8);
  }
  return result;
}

uint64_t sub_1000E880C@<X0>(char *a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v1 = type metadata accessor for LabelStyleConfiguration.Title();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  uint64_t v26 = v2;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for LabelStyleConfiguration.Icon();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v9 = v27;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - v13;
  LabelStyleConfiguration.icon.getter();
  LabelStyleConfiguration.title.getter();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v11, v14, v8);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v16(v4, v7, v1);
  uint64_t v17 = v28;
  v15(v28, v11, v8);
  uint64_t v18 = sub_10000F214(&qword_10051EE28);
  uint64_t v19 = v25;
  v16(&v17[*(int *)(v18 + 48)], v4, v25);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v21 = v7;
  uint64_t v22 = v19;
  v20(v21, v19);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v27 + 8);
  v23(v14, v8);
  v20(v4, v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v11, v8);
}

uint64_t sub_1000E8A90@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.firstTextBaseline.getter();
  *(void *)(a1 + 8) = 0x4008000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v2 = sub_10000F214(&qword_10051EE20);
  return sub_1000E880C((char *)(a1 + *(int *)(v2 + 44)));
}

uint64_t sub_1000E8AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051EDB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for CapsuleButtonLabelStyle()
{
  return &type metadata for CapsuleButtonLabelStyle;
}

uint64_t sub_1000E8B60()
{
  return sub_1000E8D10(&qword_10051EDD8, &qword_10051EDB0, (void (*)(void))sub_1000E8BA4);
}

unint64_t sub_1000E8BA4()
{
  unint64_t result = qword_10051EDE0;
  if (!qword_10051EDE0)
  {
    sub_10000F69C(&qword_10051EDA8);
    sub_1000E8C44();
    sub_100013AA8(&qword_10051EE18, &qword_10051EDD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EDE0);
  }
  return result;
}

unint64_t sub_1000E8C44()
{
  unint64_t result = qword_10051EDE8;
  if (!qword_10051EDE8)
  {
    sub_10000F69C(&qword_10051EDA0);
    sub_1000E8D10(&qword_10051EDF0, &qword_10051ED98, (void (*)(void))sub_1000E8D8C);
    sub_100013AA8(&qword_10051EE08, &qword_10051EE10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EDE8);
  }
  return result;
}

uint64_t sub_1000E8D10(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E8D8C()
{
  return sub_1000E8D10(&qword_10051EDF8, &qword_10051ED90, (void (*)(void))sub_1000E8DBC);
}

unint64_t sub_1000E8DBC()
{
  unint64_t result = qword_10051EE00;
  if (!qword_10051EE00)
  {
    sub_10000F69C(&qword_10051ED88);
    sub_10000F69C(&qword_10051ED78);
    type metadata accessor for ButtonStyleConfiguration.Label();
    sub_10008DF9C();
    sub_1000E87B8();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EE00);
  }
  return result;
}

uint64_t sub_1000E8EDC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E8EF8()
{
  return sub_100013AA8(&qword_10051EE30, &qword_10051EE38);
}

unsigned char *storeEnumTagSinglePayload for CaptureEffectsState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E9000);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CaptureEffectsState()
{
  return &type metadata for CaptureEffectsState;
}

unint64_t sub_1000E903C()
{
  unint64_t result = qword_10051EE40;
  if (!qword_10051EE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EE40);
  }
  return result;
}

ValueMetadata *type metadata accessor for CardBarButtonStyle()
{
  return &type metadata for CardBarButtonStyle;
}

uint64_t sub_1000E90A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E90BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v1 = sub_10000F214(&qword_100519C70);
  __chkstk_darwin(v1 - 8);
  uint64_t v50 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for SymbolVariants();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  __chkstk_darwin(v3);
  uint64_t v42 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000F214(&qword_10051EE48);
  uint64_t v43 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051EE50);
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051EE58);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000F214(&qword_10051EE60) - 8;
  __chkstk_darwin(v47);
  uint64_t v44 = (uint64_t)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  unint64_t v18 = sub_10008DF9C();
  unint64_t v19 = sub_1000E9698();
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v5);
  uint64_t v20 = v42;
  static SymbolVariants.fill.getter();
  uint64_t v52 = v5;
  uint64_t v53 = &type metadata for CardBarButtonLabelStyle;
  unint64_t v54 = v18;
  unint64_t v55 = v19;
  swift_getOpaqueTypeConformance2();
  uint64_t v21 = v41;
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v49);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v21);
  static Font.footnote.getter();
  static Font.Weight.medium.getter();
  uint64_t v22 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = v45;
  uint64_t v24 = v46;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v16, v12, v46);
  uint64_t v26 = (uint64_t *)&v16[*(int *)(v14 + 44)];
  *uint64_t v26 = KeyPath;
  v26[1] = v22;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v24);
  id v27 = [self secondaryLabelColor];
  uint64_t v28 = Color.init(uiColor:)();
  uint64_t v29 = v44;
  sub_10000FB74((uint64_t)v16, v44, &qword_10051EE58);
  *(void *)(v29 + *(int *)(v47 + 44)) = v28;
  sub_10000FBD8((uint64_t)v16, &qword_10051EE58);
  uint64_t v30 = enum case for Text.Case.uppercase(_:);
  uint64_t v31 = type metadata accessor for Text.Case();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 104))(v50, v30, v31);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v31);
  uint64_t v34 = swift_getKeyPath();
  uint64_t v35 = sub_10000F214(&qword_10051EE70);
  uint64_t v36 = v51;
  uint64_t v37 = (uint64_t *)(v51 + *(int *)(v35 + 36));
  uint64_t v38 = sub_10000F214(&qword_100519C68);
  sub_10000FB74(v33, (uint64_t)v37 + *(int *)(v38 + 28), &qword_100519C70);
  *uint64_t v37 = v34;
  sub_10000FB74(v29, v36, &qword_10051EE60);
  sub_10000FBD8(v33, &qword_100519C70);
  return sub_10000FBD8(v29, &qword_10051EE60);
}

unint64_t sub_1000E9698()
{
  unint64_t result = qword_10051EE68;
  if (!qword_10051EE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EE68);
  }
  return result;
}

uint64_t sub_1000E96EC@<X0>(char *a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v1 = type metadata accessor for LabelStyleConfiguration.Title();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  uint64_t v26 = v2;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for LabelStyleConfiguration.Icon();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v9 = v27;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - v13;
  LabelStyleConfiguration.icon.getter();
  LabelStyleConfiguration.title.getter();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v11, v14, v8);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v16(v4, v7, v1);
  uint64_t v17 = v28;
  v15(v28, v11, v8);
  uint64_t v18 = sub_10000F214(&qword_10051EE28);
  uint64_t v19 = v25;
  v16(&v17[*(int *)(v18 + 48)], v4, v25);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v21 = v7;
  uint64_t v22 = v19;
  v20(v21, v19);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v27 + 8);
  v23(v14, v8);
  v20(v4, v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v11, v8);
}

uint64_t sub_1000E9970@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.firstTextBaseline.getter();
  *(void *)(a1 + 8) = 0x4000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v2 = sub_10000F214(&qword_10051EE20);
  return sub_1000E96EC((char *)(a1 + *(int *)(v2 + 44)));
}

ValueMetadata *type metadata accessor for CardBarButtonLabelStyle()
{
  return &type metadata for CardBarButtonLabelStyle;
}

unint64_t sub_1000E99E4()
{
  unint64_t result = qword_10051EE78;
  if (!qword_10051EE78)
  {
    sub_10000F69C(&qword_10051EE70);
    sub_1000E9A84();
    sub_100013AA8(&qword_100519CA8, &qword_100519C68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EE78);
  }
  return result;
}

unint64_t sub_1000E9A84()
{
  unint64_t result = qword_10051EE80;
  if (!qword_10051EE80)
  {
    sub_10000F69C(&qword_10051EE60);
    sub_1000E9B24();
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EE80);
  }
  return result;
}

unint64_t sub_1000E9B24()
{
  unint64_t result = qword_10051EE88;
  if (!qword_10051EE88)
  {
    sub_10000F69C(&qword_10051EE58);
    sub_10000F69C(&qword_10051EE48);
    type metadata accessor for ButtonStyleConfiguration.Label();
    sub_10008DF9C();
    sub_1000E9698();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EE88);
  }
  return result;
}

uint64_t sub_1000E9C44()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E9C60()
{
  return sub_100013AA8(&qword_10051EE30, &qword_10051EE38);
}

ValueMetadata *type metadata accessor for VMasonryGrid()
{
  return &type metadata for VMasonryGrid;
}

unint64_t sub_1000E9CB0()
{
  unint64_t result = qword_10051EE90;
  if (!qword_10051EE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EE90);
  }
  return result;
}

void sub_1000E9D04(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, int a6, uint64_t a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12, double a13, double a14)
{
  double v73 = a14;
  int v74 = a6;
  *(double *)uint64_t v68 = a8;
  uint64_t v75 = a4;
  uint64_t v77 = a1;
  uint64_t v76 = type metadata accessor for LayoutSubview();
  uint64_t v23 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v25 = (char *)v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for ViewDimensions();
  uint64_t v26 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v28 = (char *)v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v29 = *(double *)&a2;
  if (a3) {
    double v29 = INFINITY;
  }
  uint64_t v30 = a7;
  if (v29 == INFINITY)
  {
LABEL_8:
    if (v30 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v30;
    }
    if (v32 >= a7) {
      int64_t v33 = a7;
    }
    else {
      int64_t v33 = v32;
    }
    if (!__OFSUB__(v33, 1))
    {
      double v34 = (double)v33;
      double v35 = (double)v33 * a12;
      double v36 = (double)(v33 - 1) * a13;
      double v37 = v35 + v36;
      if (v29 > v37) {
        double v38 = v29;
      }
      else {
        double v38 = v37;
      }
      uint64_t v39 = (double *)sub_1003A4BD8(v33, 0.0);
      type metadata accessor for LayoutSubviews();
      sub_1000EA520();
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v40 = v82;
      uint64_t v41 = v83;
      if (v82 < v83) {
        goto LABEL_46;
      }
      if (v83 == v82)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        return;
      }
      double v69 = (v38 - v36) / v34 + a13;
      double v71 = (v38 - v36) / v34;
      uint64_t v42 = v26;
      uint64_t v43 = (void (**)(char *, uint64_t))(v23 + 8);
      uint64_t v44 = (void (**)(char *, uint64_t))(v42 + 8);
      int v70 = a5 & 1;
      CGFloat v45 = *(double *)v68;
      CGFloat x = *(double *)v68;
      CGFloat y = a9;
      CGFloat width = a10;
      CGFloat height = a11;
      while (v41 < v40)
      {
        CGFloat v80 = height;
        CGFloat v81 = width;
        LayoutSubviews.subscript.getter();
        LOBYTE(v83) = 0;
        LOBYTE(v82) = v70;
        LayoutSubview.dimensions(in:)();
        uint64_t v50 = *v43;
        (*v43)(v25, v76);
        ViewDimensions.width.getter();
        CGFloat v52 = v51;
        ViewDimensions.height.getter();
        uint64_t v54 = *((void *)v39 + 2);
        if (!v54) {
          goto LABEL_41;
        }
        double v55 = v53;
        uint64_t v56 = v54 - 1;
        CGFloat v79 = y;
        if (v56)
        {
          uint64_t v58 = 0;
          unint64_t v57 = 0;
          uint64_t v59 = 0;
          double v60 = v39[4];
          do
          {
            double v61 = v39[v58 + 5];
            uint64_t v62 = v58 + 1;
            BOOL v63 = v58 + 1 < v59;
            if (v61 != v60) {
              BOOL v63 = v61 < v60;
            }
            if (v63)
            {
              unint64_t v57 = v58 + 1;
              double v60 = v39[v58 + 5];
              uint64_t v59 = v58 + 1;
            }
            ++v58;
          }
          while (v56 != v62);
        }
        else
        {
          unint64_t v57 = 0;
        }
        v84.origin.CGFloat x = v45;
        v84.origin.CGFloat y = a9;
        v84.size.CGFloat width = a10;
        v84.size.CGFloat height = a11;
        double MinX = CGRectGetMinX(v84);
        v85.origin.CGFloat x = v45;
        v85.origin.CGFloat y = a9;
        v85.size.CGFloat width = a10;
        v85.size.CGFloat height = a11;
        double MinY = CGRectGetMinY(v85);
        if ((v57 & 0x8000000000000000) != 0) {
          goto LABEL_42;
        }
        if (v57 >= *((void *)v39 + 2)) {
          goto LABEL_43;
        }
        CGFloat v78 = x;
        double v66 = MinX + v69 * (double)(uint64_t)v57;
        double v67 = MinY + v39[v57 + 4];
        if (v74)
        {
          *(double *)&v68[1] = v55 * 0.5 + v67;
          LayoutSubviews.subscript.getter();
          static UnitPoint.center.getter();
          LOBYTE(v83) = 0;
          LOBYTE(v82) = 0;
          CGFloat v45 = *(double *)v68;
          LayoutSubview.place(at:anchor:proposal:)();
          v50(v25, v76);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v39 = (double *)sub_100306900(v39);
        }
        if (v57 >= *((void *)v39 + 2)) {
          goto LABEL_44;
        }
        ++v41;
        v39[v57 + 4] = v55 + v73 + v39[v57 + 4];
        v86.origin.CGFloat x = v78;
        v86.origin.CGFloat y = v79;
        v86.size.CGFloat height = v80;
        v86.size.CGFloat width = v81;
        v88.origin.CGFloat x = v66;
        v88.origin.CGFloat y = v67;
        v88.size.CGFloat width = v52;
        v88.size.CGFloat height = v55;
        CGRect v87 = CGRectUnion(v86, v88);
        CGFloat x = v87.origin.x;
        CGFloat y = v87.origin.y;
        CGFloat width = v87.size.width;
        CGFloat height = v87.size.height;
        (*v44)(v28, v72);
        if (v41 == v40) {
          goto LABEL_39;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
    }
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  double v31 = (v29 + a13) / (a12 + a13);
  if ((~*(void *)&v31 & 0x7FF0000000000000) == 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v31 <= -9.22337204e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v31 < 9.22337204e18)
  {
    uint64_t v30 = (uint64_t)v31;
    goto LABEL_8;
  }
LABEL_49:
  __break(1u);
}

double sub_1000EA2A8(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  sub_1000E9D04(a5, a1, a2 & 1, a3, a4 & 1, 0, *(void *)(v5 + 8), 0.0, 0.0, 0.0, 0.0, *(double *)v5, *(double *)(v5 + 16), *(double *)(v5 + 24));
  return v6;
}

void sub_1000EA318(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  sub_1000E9D04(a5, a1, a2 & 1, a3, a4 & 1, 1, *(void *)(v9 + 8), a6, a7, a8, a9, *(double *)v9, *(double *)(v9 + 16), *(double *)(v9 + 24));
}

uint64_t sub_1000EA358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000EA3C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000EA390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000EA3C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000EA3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_1000EA40C(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_1000EA47C;
}

void sub_1000EA47C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

unint64_t sub_1000EA4CC()
{
  unint64_t result = qword_10051EE98;
  if (!qword_10051EE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EE98);
  }
  return result;
}

unint64_t sub_1000EA520()
{
  unint64_t result = qword_10051EEA0[0];
  if (!qword_10051EEA0[0])
  {
    type metadata accessor for LayoutSubviews();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10051EEA0);
  }
  return result;
}

void sub_1000EA578()
{
  sub_100027A88();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_1000EA65C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(void *)(v7 + 64) <= 8uLL) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v11 = *(void *)(v8 - 8);
  int v12 = *(_DWORD *)(v9 + 80);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v9 + 64);
  unsigned int v15 = v12 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (((*(_DWORD *)(v7 + 80) | v12) & 0x100000) != 0
    || (((v12 + (((v10 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)v12)
      + v14 <= 0x18
      ? (BOOL v16 = v15 > 7)
      : (BOOL v16 = 1),
        v16))
  {
    uint64_t v21 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v21 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
    swift_retain();
  }
  else
  {
    unsigned int v17 = a2[v10];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v10 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v10 >= 4) {
            goto LABEL_22;
          }
          goto LABEL_20;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v10 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v10 < 4) {
LABEL_20:
          }
            unsigned int v17 = (v20 | (v18 << (8 * v10))) + 2;
          else {
LABEL_22:
          }
            unsigned int v17 = v20 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v22 = v10 + 1;
    unint64_t v23 = ~(unint64_t)v12;
    if (v17 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      char v24 = 1;
    }
    else
    {
      *a1 = *(void *)a2;
      swift_retain();
      char v24 = 0;
    }
    *((unsigned char *)a1 + v10) = v24;
    uint64_t v25 = (void *)(((unint64_t)a1 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (void *)((unint64_t)&a2[v22 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v25 = *v26;
    v25[1] = v26[1];
    uint64_t v27 = (void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = (void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = (char *)v28 + v13;
    uint64_t v31 = ((unint64_t)v27 + v13 + 16) & v23;
    uint64_t v32 = (unint64_t)(v30 + 16) & v23;
    int64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    v33(v31, v32, v8);
  }
  return a1;
}

uint64_t sub_1000EA910(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v4 - 8) + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  int v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (((((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + *(unsigned __int8 *)(v11 + 80)
       + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13);
}

void *sub_1000EAAB8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    char v13 = 1;
  }
  else
  {
    *a1 = *(void *)a2;
    swift_retain();
    char v13 = 0;
  }
  *((unsigned char *)a1 + v7) = v13;
  uint64_t v14 = (void *)(((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v15 = (void *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  BOOL v16 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v17 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = v17[1];
  *BOOL v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = ((unint64_t)v16 + v22 + 16) & ~v22;
  uint64_t v24 = ((unint64_t)v17 + v22 + 16) & ~v22;
  swift_bridgeObjectRetain();
  swift_retain();
  v21(v23, v24, v19);
  return a1;
}

unsigned __int8 *sub_1000EACB8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      a1[v8] = 1;
    }
    else
    {
LABEL_36:
      *(void *)a1 = *(void *)a2;
      a1[v8] = 0;
      swift_retain();
    }
  }
  unint64_t v17 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v17 <= 8) {
    unint64_t v17 = 8;
  }
  unint64_t v18 = v17 + 8;
  uint64_t v19 = (void *)((unint64_t)&a1[v18] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)((unint64_t)&a2[v18] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  swift_retain();
  swift_release();
  uint64_t v24 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 24))(((unint64_t)v21 + *(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), ((unint64_t)v22 + *(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

void *sub_1000EAFE0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v7) = v13;
  unsigned int v14 = (_OWORD *)(((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (_OWORD *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v14 = *v15;
  int v16 = (_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  *int v16 = *v17;
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 32))(((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v17 + *(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

unsigned __int8 *sub_1000EB1A4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      char v17 = 1;
    }
    else
    {
LABEL_36:
      char v17 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v17;
  }
  unint64_t v18 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v18 <= 8) {
    unint64_t v18 = 8;
  }
  unint64_t v19 = v18 + 8;
  uint64_t v20 = (void *)((unint64_t)&a1[v19] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((unint64_t)&a2[v19] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRelease();
  uint64_t v22 = (_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  swift_release();
  uint64_t v24 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 40))(((unint64_t)v22 + *(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), ((unint64_t)v23 + *(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

uint64_t sub_1000EB4B8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v6 <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v11) {
    goto LABEL_28;
  }
  unint64_t v12 = ((v10 + (((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v10) + *(void *)(v8 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v16 = ((a2 - v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_28:
      unint64_t v20 = ((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 0x80000000) != 0)
      {
        uint64_t v22 = *(uint64_t (**)(unint64_t))(v8 + 48);
        return v22((((v20 + 23) & 0xFFFFFFFFFFFFFFF8) + v10 + 16) & ~v10);
      }
      else
      {
        unint64_t v21 = *(void *)(v20 + 8);
        if (v21 >= 0xFFFFFFFF) {
          LODWORD(v21) = -1;
        }
        return (v21 + 1);
      }
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_28;
  }
LABEL_18:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 <= 3) {
      int v18 = v12;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v11 + (v19 | v17) + 1;
}

void sub_1000EB6F0(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  uint64_t v9 = 8;
  if (v8 > 8) {
    uint64_t v9 = v8;
  }
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  size_t v14 = ((v12 + (((v9 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v12) + *(void *)(v10 + 64);
  if (a3 <= v13)
  {
    int v15 = 0;
  }
  else if (v14 <= 3)
  {
    unsigned int v18 = ((a3 - v13 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v18))
    {
      int v15 = 4;
    }
    else if (v18 >= 0x100)
    {
      int v15 = 2;
    }
    else
    {
      int v15 = v18 > 1;
    }
  }
  else
  {
    int v15 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v16 = ~v13 + a2;
    if (v14 < 4)
    {
      int v17 = (v16 >> (8 * v14)) + 1;
      if (v14)
      {
        int v19 = v16 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v14] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v17;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v14] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1000EB9A8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        unint64_t v20 = (void *)((unint64_t)&a1[v9 + 8] & 0xFFFFFFFFFFFFFFF8);
        if ((v11 & 0x80000000) != 0)
        {
          unint64_t v21 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
          v21(((((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8) + v12 + 16) & ~v12, a2);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *unint64_t v20 = a2 ^ 0x80000000;
          v20[1] = 0;
        }
        else
        {
          v20[1] = (a2 - 1);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ResultFooterView()
{
  return sub_1000684BC();
}

uint64_t sub_1000EB9E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EBA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v3 = type metadata accessor for PlainButtonStyle();
  uint64_t v39 = v3;
  uint64_t v51 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v50 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F69C(&qword_10051EF28);
  uint64_t v48 = *(void *)(a1 + 16);
  uint64_t v47 = a1;
  sub_10000F69C(&qword_100523150);
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = sub_10000F69C(&qword_10051EF30);
  uint64_t v46 = *(void *)(a1 + 24);
  uint64_t v7 = v46;
  uint64_t v8 = sub_100013AA8(&qword_100518C20, &qword_100523150);
  uint64_t v68 = v7;
  uint64_t v69 = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
  uint64_t v64 = v5;
  uint64_t v65 = v6;
  uint64_t v66 = WitnessTable;
  uint64_t v67 = v10;
  swift_getOpaqueTypeMetadata2();
  sub_10000F69C(&qword_10051EF40);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100518C70);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100523200);
  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityAttachmentModifier();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for HStack();
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v64 = v11;
  uint64_t v65 = v12;
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100522F00);
  type metadata accessor for ModifiedContent();
  uint64_t v64 = v11;
  uint64_t v65 = v12;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  BOOL v63 = &protocol witness table for _PaddingLayout;
  uint64_t v60 = swift_getWitnessTable();
  double v61 = &protocol witness table for _PaddingLayout;
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v14 = sub_100013AA8((unint64_t *)&qword_10051B8C0, &qword_100522F00);
  uint64_t v58 = v13;
  uint64_t v59 = v14;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Button();
  uint64_t v44 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  int v17 = (char *)&v37 - v16;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v45 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v42 = (char *)&v37 - v19;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = sub_1000ED8B4((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v56 = v20;
  uint64_t v57 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v38 = v22;
  uint64_t v37 = sub_1000ED8B4(&qword_10051EF48, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v64 = v18;
  uint64_t v65 = v3;
  uint64_t v66 = v22;
  uint64_t v67 = v37;
  uint64_t v40 = &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v41 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v25 = (char *)&v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v37 - v27;
  uint64_t v53 = v48;
  uint64_t v54 = v46;
  uint64_t v55 = v49;
  swift_retain();
  Button.init(action:label:)();
  uint64_t v29 = v42;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v15);
  uint64_t v30 = v50;
  PlainButtonStyle.init()();
  uint64_t v31 = v39;
  uint64_t v32 = v38;
  uint64_t v33 = v37;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v18);
  uint64_t v64 = v18;
  uint64_t v65 = v31;
  uint64_t v66 = v32;
  uint64_t v67 = v33;
  uint64_t v34 = swift_getOpaqueTypeConformance2();
  sub_100224E4C(v25, OpaqueTypeMetadata2, v34);
  double v35 = *(void (**)(char *, uint64_t))(v41 + 8);
  v35(v25, OpaqueTypeMetadata2);
  sub_100224E4C(v28, OpaqueTypeMetadata2, v34);
  return ((uint64_t (*)(char *, uint64_t))v35)(v28, OpaqueTypeMetadata2);
}

uint64_t sub_1000EC260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v52 = a2;
  uint64_t v54 = a1;
  uint64_t v58 = a4;
  uint64_t v5 = type metadata accessor for ColorRenderingMode();
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  __chkstk_darwin(v5);
  uint64_t v53 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F69C(&qword_10051EF28);
  sub_10000F69C(&qword_100523150);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = sub_10000F69C(&qword_10051EF30);
  uint64_t v9 = sub_100013AA8(&qword_100518C20, &qword_100523150);
  uint64_t v72 = a3;
  uint64_t v73 = v9;
  uint64_t v55 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
  uint64_t v68 = v7;
  uint64_t v69 = v8;
  uint64_t v70 = WitnessTable;
  uint64_t v71 = v11;
  swift_getOpaqueTypeMetadata2();
  sub_10000F69C(&qword_10051EF40);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100518C70);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100523200);
  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityAttachmentModifier();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  uint64_t v43 = type metadata accessor for TupleView();
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for HStack();
  uint64_t v48 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v68 = v12;
  uint64_t v69 = v15;
  uint64_t v44 = &opaque type descriptor for <<opaque return type of View.drawingGroup(opaque:colorMode:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v46 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v39 - v20;
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v49 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v40 = (char *)&v39 - v23;
  sub_10000F69C(&qword_100522F00);
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v41 = (char *)&v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v45 = (char *)&v39 - v27;
  uint64_t v59 = v52;
  uint64_t v60 = v51;
  uint64_t v61 = v54;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  uint64_t v28 = v53;
  sub_10002C094(v53);
  View.drawingGroup(opaque:colorMode:)();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v28, v57);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v12);
  uint64_t v68 = v12;
  uint64_t v69 = v15;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  View.padding(_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v18, OpaqueTypeMetadata2);
  static Edge.Set.bottom.getter();
  uint64_t v66 = OpaqueTypeConformance2;
  uint64_t v67 = &protocol witness table for _PaddingLayout;
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v31 = v40;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v21, v19);
  uint64_t v64 = v30;
  uint64_t v65 = &protocol witness table for _PaddingLayout;
  uint64_t v32 = swift_getWitnessTable();
  sub_1000ED804();
  uint64_t v33 = v41;
  View.contentShape<A>(_:eoFill:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v31, v22);
  uint64_t v34 = sub_100013AA8((unint64_t *)&qword_10051B8C0, &qword_100522F00);
  uint64_t v62 = v32;
  uint64_t v63 = v34;
  uint64_t v35 = swift_getWitnessTable();
  double v36 = v45;
  sub_100224E4C(v33, v24, v35);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v50 + 8);
  v37(v33, v24);
  sub_100224E4C(v36, v24, v35);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v24);
}

uint64_t sub_1000ECAAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v109 = a3;
  uint64_t v108 = type metadata accessor for ColorScheme();
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v105 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v104 = (uint64_t)&v80 - v7;
  uint64_t v8 = sub_10000F214(&qword_10051EF30);
  __chkstk_darwin(v8);
  uint64_t v111 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F69C(&qword_100523150);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v87 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v110 = (char *)&v80 - v11;
  uint64_t v12 = sub_100013AA8(&qword_100518C20, &qword_100523150);
  uint64_t v133 = a2;
  uint64_t v134 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
  uint64_t v81 = v10;
  char v126 = (void *)v10;
  uint64_t v127 = v8;
  uint64_t v89 = v8;
  uint64_t v85 = WitnessTable;
  uint64_t v128 = WitnessTable;
  uint64_t v129 = v14;
  uint64_t v83 = v14;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v84 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v82 = (char *)&v80 - v16;
  sub_10000F69C(&qword_10051EF40);
  uint64_t v86 = OpaqueTypeMetadata2;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v91 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  CGRect v88 = (char *)&v80 - v18;
  sub_10000F69C(&qword_100518C70);
  uint64_t v92 = v17;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v95 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  int v90 = (char *)&v80 - v20;
  sub_10000F69C(&qword_100523200);
  uint64_t v96 = v19;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v98 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  unint64_t v94 = (char *)&v80 - v22;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v99 = v21;
  uint64_t v80 = type metadata accessor for ModifiedContent();
  uint64_t v101 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v106 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v93 = (char *)&v80 - v25;
  __chkstk_darwin(v26);
  uint64_t v103 = (char *)&v80 - v27;
  uint64_t v97 = sub_10000F214(&qword_10051EF28);
  __chkstk_darwin(v97);
  uint64_t v102 = (uint64_t)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v80 - v30;
  uint64_t v32 = (void **)(a1 + *(int *)(type metadata accessor for ResultFooterView() + 36));
  uint64_t v33 = *v32;
  uint64_t v34 = (uint64_t)v32[1];
  uint64_t KeyPath = swift_getKeyPath();
  v115[0] = 0;
  swift_bridgeObjectRetain();
  sub_10000F214(&qword_10051EF58);
  State.init(wrappedValue:)();
  uint64_t v37 = v126;
  uint64_t v36 = v127;
  char v126 = v33;
  uint64_t v127 = v34;
  uint64_t v128 = 0x4034000000000000;
  uint64_t v129 = KeyPath;
  char v130 = 0;
  char v131 = v37;
  uint64_t v132 = v36;
  sub_1000ED860();
  uint64_t v100 = v31;
  View.accessibilityIdentifier(_:)();
  swift_release();
  uint64_t v38 = (uint64_t)v111;
  swift_bridgeObjectRelease();

  uint64_t v39 = v110;
  swift_release();
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  View.font(_:)();
  swift_release();
  uint64_t v40 = enum case for DynamicTypeSize.xxxLarge(_:);
  uint64_t v41 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104))(v38, v40, v41);
  sub_1000ED8B4(&qword_10051EF68, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    uint64_t v43 = v82;
    uint64_t v44 = (void *)v81;
    uint64_t v45 = v89;
    uint64_t v46 = v85;
    uint64_t v47 = v83;
    View.dynamicTypeSize<A>(_:)();
    sub_10000FBD8(v38, &qword_10051EF30);
    (*(void (**)(char *, void *))(v87 + 8))(v39, v44);
    char v126 = v44;
    uint64_t v127 = v45;
    uint64_t v128 = v46;
    uint64_t v129 = v47;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v49 = v88;
    uint64_t v50 = v86;
    View.minimumScaleFactor(_:)();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v43, v50);
    uint64_t v51 = v104;
    sub_10027CA80(v104);
    uint64_t v52 = v107;
    uint64_t v53 = v105;
    uint64_t v54 = v108;
    (*(void (**)(char *, void, uint64_t))(v107 + 104))(v105, enum case for ColorScheme.dark(_:), v108);
    LOBYTE(v50) = static ColorScheme.== infix(_:_:)();
    uint64_t v55 = *(void (**)(char *, uint64_t))(v52 + 8);
    v55(v53, v54);
    v55((char *)v51, v54);
    uint64_t v56 = self;
    uint64_t v57 = &selRef_systemLightGrayColor;
    if ((v50 & 1) == 0) {
      uint64_t v57 = &selRef_systemDarkGrayColor;
    }
    id v58 = [v56 *v57 v80];
    Color.init(uiColor:)();
    uint64_t v59 = sub_100013AA8(&qword_10051EF70, &qword_10051EF40);
    uint64_t v124 = OpaqueTypeConformance2;
    uint64_t v125 = v59;
    uint64_t v60 = v92;
    uint64_t v61 = swift_getWitnessTable();
    uint64_t v62 = v90;
    View.foregroundColor(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v49, v60);
    uint64_t v63 = sub_100013AA8(&qword_100518C68, &qword_100518C70);
    uint64_t v122 = v61;
    uint64_t v123 = v63;
    uint64_t v64 = v96;
    uint64_t v65 = swift_getWitnessTable();
    uint64_t v66 = v94;
    View.lineLimit(_:)();
    (*(void (**)(char *, uint64_t))(v95 + 8))(v62, v64);
    uint64_t v67 = sub_100013AA8(&qword_100518D00, &qword_100523200);
    uint64_t v120 = v65;
    uint64_t v121 = v67;
    uint64_t v68 = v99;
    uint64_t v69 = swift_getWitnessTable();
    uint64_t v70 = v93;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v66, v68);
    uint64_t v71 = sub_1000ED8B4((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    uint64_t v118 = v69;
    uint64_t v119 = v71;
    uint64_t v72 = v80;
    uint64_t v73 = swift_getWitnessTable();
    int v74 = v103;
    sub_100224E4C(v70, v72, v73);
    uint64_t v75 = v101;
    uint64_t v76 = *(void (**)(char *, uint64_t))(v101 + 8);
    v76(v70, v72);
    uint64_t v77 = (uint64_t)v100;
    uint64_t v78 = v102;
    sub_1000ED8FC((uint64_t)v100, v102);
    char v126 = (void *)v78;
    CGFloat v79 = v106;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v106, v74, v72);
    uint64_t v116 = 0;
    char v117 = 0;
    uint64_t v127 = (uint64_t)v79;
    uint64_t v128 = (uint64_t)&v116;
    v115[0] = v97;
    v115[1] = v72;
    v115[2] = &type metadata for Spacer;
    unint64_t v112 = sub_1000ED964();
    uint64_t v113 = v73;
    uint64_t v114 = &protocol witness table for Spacer;
    sub_100059B74((uint64_t)&v126, 3uLL, (uint64_t)v115);
    v76(v74, v72);
    sub_10000FBD8(v77, &qword_10051EF28);
    v76(v79, v72);
    return sub_10000FBD8(v78, &qword_10051EF28);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000ED7EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EC260(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000ED7F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ECAAC(*(void *)(v1 + 32), *(void *)(v1 + 24), a1);
}

unint64_t sub_1000ED804()
{
  unint64_t result = qword_10051EF50;
  if (!qword_10051EF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EF50);
  }
  return result;
}

unint64_t sub_1000ED860()
{
  unint64_t result = qword_10051EF60;
  if (!qword_10051EF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EF60);
  }
  return result;
}

uint64_t sub_1000ED8B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000ED8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051EF28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000ED964()
{
  unint64_t result = qword_10051EF78;
  if (!qword_10051EF78)
  {
    sub_10000F69C(&qword_10051EF28);
    sub_1000ED860();
    sub_1000ED8B4((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051EF78);
  }
  return result;
}

uint64_t sub_1000EDA10()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_1000EDE3C(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)AFUISiriSetupViewController) init];
  id v4 = [v3 siriSetupView];
  if (v4)
  {
    uint64_t v5 = v4;
    self;
    uint64_t v6 = swift_dynamicCastObjCClass();
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      uint64_t v8 = self;
      id v9 = [v8 mainBundle];
      v23._countAndFlagsBits = 0xD00000000000001ALL;
      v23._object = (void *)0x8000000100426DC0;
      v10._object = (void *)0x8000000100426DA0;
      v10._countAndFlagsBits = 0xD000000000000018;
      v11._countAndFlagsBits = 0;
      v11._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v23);

      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 setTitle:v12];

      id v13 = [v8 mainBundle];
      v24._countAndFlagsBits = 0xD00000000000001DLL;
      v14._countAndFlagsBits = 0xD000000000000067;
      v24._object = (void *)0x8000000100426E50;
      v14._object = (void *)0x8000000100426DE0;
      v15._countAndFlagsBits = 0;
      v15._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v24);

      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 setSubtitle:v16];

      id v17 = [v8 mainBundle];
      v25._countAndFlagsBits = 0xD000000000000025;
      v18._countAndFlagsBits = 0xD00000000000004BLL;
      v25._object = (void *)0x8000000100426EC0;
      v18._object = (void *)0x8000000100426E70;
      v19._countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v25);

      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v7 setInstructionText:v20];

      uint64_t v5 = v20;
    }
  }
  [v3 setDelegate:a2];
  id v21 = [objc_allocWithZone((Class)UINavigationController) initWithRootViewController:v3];

  return v21;
}

void sub_1000EE264()
{
  if (qword_100517E00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000F378(v1, (uint64_t)qword_10055E118);
  uint64_t v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    id v6 = [self sharedPreferences];
    [v6 assistantIsEnabled];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Siri setup view complete; siriEnabled = %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10000F214(&qword_100519660);
  Binding.wrappedValue.setter();
  id v7 = [self sharedPreferences];
  unsigned int v8 = [v7 assistantIsEnabled];

  if (v8) {
    (*(void (**)(void))&v2[OBJC_IVAR____TtCV6Tamale23SiriSetupViewControllerP33_801190BADA2CE0837A9561ED0AAB3DD18Delegate_completion])();
  }
}

id sub_1000EE49C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SiriSetupViewController.Delegate();
  return [super dealloc];
}

uint64_t type metadata accessor for SiriSetupViewController.Delegate()
{
  return self;
}

id sub_1000EE554(uint64_t a1)
{
  return sub_1000EDE3C(a1, *v1);
}

uint64_t sub_1000EE560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EE718();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000EE5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EE718();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000EE628()
{
}

uint64_t sub_1000EE650(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051E070);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for SiriSetupViewController()
{
  return &type metadata for SiriSetupViewController;
}

unint64_t sub_1000EE6C4()
{
  unint64_t result = qword_10051F018;
  if (!qword_10051F018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F018);
  }
  return result;
}

unint64_t sub_1000EE718()
{
  unint64_t result = qword_10051F020;
  if (!qword_10051F020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F020);
  }
  return result;
}

uint64_t sub_1000EE774(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E118);
}

uint64_t sub_1000EE78C(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E130);
}

uint64_t sub_1000EE7B0(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E148);
}

uint64_t sub_1000EE7D0(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E160);
}

uint64_t sub_1000EE7F4(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E178);
}

uint64_t sub_1000EE820(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E190);
}

uint64_t sub_1000EE848(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E1A8);
}

uint64_t sub_1000EE870(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E1C0);
}

uint64_t sub_1000EE898(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E1D8);
}

uint64_t sub_1000EE8B4(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E1F0);
}

uint64_t sub_1000EE8D8(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E208);
}

uint64_t sub_1000EE8FC(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E220);
}

uint64_t sub_1000EE924(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E238);
}

uint64_t sub_1000EE944(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E250);
}

uint64_t sub_1000EE964(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E268);
}

uint64_t sub_1000EE980(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E280);
}

uint64_t sub_1000EE9A4(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E298);
}

uint64_t sub_1000EE9CC(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E2B0);
}

uint64_t sub_1000EE9F8(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E2C8);
}

uint64_t sub_1000EEA14(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E2E0);
}

uint64_t *sub_1000EEA28(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1000EEA8C(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E2F8);
}

uint64_t sub_1000EEAB4(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E310);
}

uint64_t sub_1000EEAD4(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E328);
}

uint64_t sub_1000EEAF0(uint64_t a1)
{
  return sub_1000EEB08(a1, qword_10055E340);
}

uint64_t sub_1000EEB08(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000EEA28(v3, a2);
  sub_10000F378(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t storeEnumTagSinglePayload for LoggingConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EEC44);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LoggingConfiguration()
{
  return &type metadata for LoggingConfiguration;
}

uint64_t sub_1000EEC7C(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051F0B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000EFC3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1000EEDE8()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0xD000000000000016;
  }
}

uint64_t sub_1000EEE28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000EF974(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000EEE50(uint64_t a1)
{
  unint64_t v2 = sub_1000EFC3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EEE8C(uint64_t a1)
{
  unint64_t v2 = sub_1000EFC3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EEEC8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000EFA60(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_1000EEF00(void *a1)
{
  return sub_1000EEC7C(a1);
}

unint64_t sub_1000EEF34()
{
  unint64_t result = qword_10051F030;
  if (!qword_10051F030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F030);
  }
  return result;
}

unint64_t sub_1000EEF88(uint64_t a1)
{
  unint64_t result = sub_1000EEFB0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000EEFB0()
{
  unint64_t result = qword_10051F060;
  if (!qword_10051F060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F060);
  }
  return result;
}

unint64_t sub_1000EF008(uint64_t a1)
{
  unint64_t result = sub_1000EF030();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000EF030()
{
  unint64_t result = qword_10051F090;
  if (!qword_10051F090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F090);
  }
  return result;
}

uint64_t sub_1000EF084()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EF0A0@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v41 = a1;
  uint64_t v36 = sub_10000F214(&qword_10051F0B8);
  uint64_t v40 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000F214(&qword_10051F0C0);
  uint64_t v42 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v38 = (char *)&v35 - v7;
  long long v54 = *(_OWORD *)v1;
  __int16 v55 = *(_WORD *)(v1 + 16);
  long long v51 = *(_OWORD *)v1;
  __int16 v52 = *(_WORD *)(v1 + 16);
  sub_10000F214(&qword_10051F0C8);
  Binding.projectedValue.getter();
  uint64_t v8 = v44;
  char v9 = v45;
  char v10 = v46;
  char v11 = BYTE1(v46);
  swift_getKeyPath();
  uint64_t v44 = v8;
  uint64_t v45 = v9;
  LOBYTE(v46) = v10;
  BYTE1(v46) = v11;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  char v12 = *(unsigned char *)(v2 + 18);
  char v53 = *(unsigned char *)(v2 + 19);
  uint64_t v44 = (ValueMetadata *)0xD000000000000012;
  uint64_t v45 = (void *)0x8000000100426F30;
  long long v46 = v51;
  char v47 = v52;
  char v48 = v12 & 1;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  long long v51 = v54;
  __int16 v52 = v55;
  Binding.wrappedValue.getter();
  LOBYTE(v51) = v43;
  uint64_t v13 = swift_allocObject();
  long long v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v13 + 32) = v14;
  *(void *)(v13 + 48) = *(void *)(v2 + 32);
  sub_1000EFCE0(v2);
  unint64_t v15 = sub_1000D9A20();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  uint64_t v16 = v49;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000F478(v16);
  long long v51 = *(_OWORD *)(v2 + 24);
  sub_10000F214(&qword_100522EA0);
  State.projectedValue.getter();
  uint64_t v44 = &type metadata for ConfigToggle;
  uint64_t v45 = &type metadata for Bool;
  *(void *)&long long v46 = v15;
  *((void *)&v46 + 1) = &protocol witness table for Bool;
  swift_getOpaqueTypeConformance2();
  id v17 = v37;
  uint64_t v18 = v36;
  View.alert(isPresented:content:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v18);
  uint64_t v19 = v42;
  NSString v20 = v38;
  uint64_t v21 = v39;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v38, v17, v39);
  long long v51 = v54;
  __int16 v52 = v55;
  Binding.projectedValue.getter();
  uint64_t v22 = v44;
  Swift::String v23 = v45;
  char v24 = v46;
  LOBYTE(v4) = BYTE1(v46);
  swift_getKeyPath();
  uint64_t v44 = v22;
  uint64_t v45 = v23;
  LOBYTE(v46) = v24;
  BYTE1(v46) = (_BYTE)v4;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  long long v25 = v51;
  char v26 = v52;
  LOBYTE(v4) = v53;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  uint64_t v28 = v20;
  uint64_t v29 = v20;
  uint64_t v30 = v21;
  v27(v17, v28, v21);
  uint64_t v31 = v41;
  v27(v41, v17, v30);
  uint64_t v32 = &v31[*(int *)(sub_10000F214(&qword_10051F0D0) + 48)];
  *(void *)uint64_t v32 = 0xD000000000000012;
  *((void *)v32 + 1) = 0x8000000100426F50;
  *((_OWORD *)v32 + 1) = v25;
  v32[32] = v26;
  v32[33] = (char)v4;
  *((void *)v32 + 5) = 0;
  *((void *)v32 + 6) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v42 + 8);
  v33(v29, v30);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F478(0);
  return ((uint64_t (*)(char *, uint64_t))v33)(v17, v30);
}

uint64_t sub_1000EF630(uint64_t a1, unsigned char *a2)
{
  if (*a2 == 1)
  {
    sub_10000F214(&qword_100522EA0);
    return State.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_1000EF688@<X0>(uint64_t a1@<X8>)
{
  v14[3] = a1;
  uint64_t v1 = sub_10000F214(&qword_10051F0D8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  v14[1] = v5;
  v14[2] = v4;
  v14[0] = v6;
  LocalizedStringKey.init(stringLiteral:)();
  Text.init(_:tableName:bundle:comment:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  static Alert.Button.default(_:action:)();
  sub_100012FAC(v7, v9, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for Alert.Button();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v3, 0, 1, v12);
  return Alert.init(title:message:dismissButton:)();
}

uint64_t sub_1000EF8AC@<X0>(char *a1@<X8>)
{
  return sub_1000EF0A0(a1);
}

unint64_t sub_1000EF8E8(void *a1)
{
  a1[1] = sub_100017028();
  a1[2] = sub_1000173C8();
  unint64_t result = sub_1000EF920();
  a1[3] = result;
  return result;
}

unint64_t sub_1000EF920()
{
  unint64_t result = qword_10051F098;
  if (!qword_10051F098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F098);
  }
  return result;
}

uint64_t sub_1000EF974(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x80000001004270D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001004270F0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000EFA60(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051F0A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100517FF0 != -1) {
    swift_once();
  }
  sub_10000F3B0(a1, a1[3]);
  sub_1000EFC3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  v11[15] = 0;
  char v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[14] = 1;
  char v8 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  if (v8) {
    int v10 = 256;
  }
  else {
    int v10 = 0;
  }
  return v10 & 0xFFFFFFFE | v7 & 1;
}

unint64_t sub_1000EFC3C()
{
  unint64_t result = qword_10051F0A8;
  if (!qword_10051F0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F0A8);
  }
  return result;
}

uint64_t sub_1000EFC90()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000EFCD8(uint64_t a1, unsigned char *a2)
{
  return sub_1000EF630(a1, a2);
}

uint64_t sub_1000EFCE0(uint64_t a1)
{
  return a1;
}

unsigned char *storeEnumTagSinglePayload for LoggingConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EFDF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LoggingConfiguration.CodingKeys()
{
  return &type metadata for LoggingConfiguration.CodingKeys;
}

uint64_t destroy for LoggingConfigurationForm()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for LoggingConfigurationForm(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LoggingConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LoggingConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LoggingConfigurationForm(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LoggingConfigurationForm(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LoggingConfigurationForm()
{
  return &type metadata for LoggingConfigurationForm;
}

unint64_t sub_1000F008C()
{
  unint64_t result = qword_10051F0E0;
  if (!qword_10051F0E0)
  {
    sub_10000F69C(&qword_10051F0E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F0E0);
  }
  return result;
}

unint64_t sub_1000F00EC()
{
  unint64_t result = qword_10051F0F0;
  if (!qword_10051F0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F0F0);
  }
  return result;
}

unint64_t sub_1000F0144()
{
  unint64_t result = qword_10051F0F8;
  if (!qword_10051F0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F0F8);
  }
  return result;
}

unint64_t sub_1000F019C()
{
  unint64_t result = qword_10051F100;
  if (!qword_10051F100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F100);
  }
  return result;
}

void *sub_1000F01F0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000409D4(0, v1, 0);
  unint64_t result = (void *)sub_10032E440(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 64;
  uint64_t v27 = v2 + 80;
  int64_t v28 = v1;
  int v29 = v4;
  uint64_t v30 = v2 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v31 = v6;
    char v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v12 = *v11;
    uint64_t v13 = (void *)v11[1];
    int v14 = *(_DWORD *)(*(void *)(v2 + 56) + 4 * v5);
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_1000F94CC(v12, v13);
    uint64_t v17 = v16;
    unint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v18 = v2;
    unint64_t v20 = _swiftEmptyArrayStorage[2];
    unint64_t v19 = _swiftEmptyArrayStorage[3];
    if (v20 >= v19 >> 1) {
      unint64_t result = (void *)sub_1000409D4(v19 > 1, v20 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v20 + 1;
    uint64_t v21 = &_swiftEmptyArrayStorage[3 * v20];
    v21[4] = v15;
    v21[5] = v17;
    *((_DWORD *)v21 + 12) = v14;
    int64_t v8 = 1 << *(unsigned char *)(v18 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = v30;
    uint64_t v22 = *(void *)(v30 + 8 * v10);
    if ((v22 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    uint64_t v2 = v18;
    int v4 = v29;
    if (*(_DWORD *)(v18 + 36) != v29) {
      goto LABEL_27;
    }
    unint64_t v23 = v22 & (-2 << (v5 & 0x3F));
    if (v23)
    {
      int64_t v8 = __clz(__rbit64(v23)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v28;
    }
    else
    {
      unint64_t v24 = v10 + 1;
      unint64_t v25 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v28;
      if (v10 + 1 < v25)
      {
        unint64_t v26 = *(void *)(v30 + 8 * v24);
        if (v26)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v10)
          {
            unint64_t v26 = *(void *)(v27 + 8 * v10++);
            if (v26)
            {
              unint64_t v24 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v31 + 1;
    uint64_t v5 = v8;
    if (v31 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1000F0434(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100040730(0, v1, 0);
    uint64_t v3 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = String.count.getter();
      swift_bridgeObjectRelease();
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v5 = _swiftEmptyArrayStorage[3];
      if (v6 >= v5 >> 1) {
        sub_100040730(v5 > 1, v6 + 1, 1);
      }
      v3 += 16;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      _swiftEmptyArrayStorage[v6 + 4] = v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_1000F051C()
{
  sub_10004ECF4(v0, (uint64_t)&v7);
  Swift::UInt v1 = v7;
  if (v10)
  {
    Swift::UInt64 v2 = v8;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v2;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Swift::UInt32 v4 = v8;
    uint64_t v5 = v9;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
    if ((v4 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v6 = v4;
    }
    else {
      Swift::UInt32 v6 = 0;
    }
    Hasher._combine(_:)(v6);
    if (v5)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      sub_100105BC8((uint64_t)v0);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
}

Swift::Int sub_1000F05F0()
{
  Hasher.init(_seed:)();
  sub_10004ECF4(v0, (uint64_t)&v8);
  Swift::UInt v1 = v8;
  if (v11)
  {
    Swift::UInt64 v2 = v9;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v2;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Swift::UInt32 v4 = v9;
    uint64_t v5 = v10;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
    if ((v4 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v6 = v4;
    }
    else {
      Swift::UInt32 v6 = 0;
    }
    Hasher._combine(_:)(v6);
    if (v5)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      sub_100105BC8((uint64_t)v0);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  return Hasher._finalize()();
}

void sub_1000F06F0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::UInt32 v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for GeoLookupResultBusiness.Action(0);
  __chkstk_darwin(v5);
  Swift::UInt v7 = (void **)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100107A48(v0, (uint64_t)v7, type metadata accessor for GeoLookupResultBusiness.Action);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = sub_10000F214(&qword_10051F400);
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, (char *)v7 + *(int *)(v9 + 64), v1);
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      sub_1000FFB84((unint64_t *)&qword_10051F670, (void (*)(uint64_t))&type metadata accessor for URL);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  else
  {
    uint64_t v10 = *v7;
    Hasher._combine(_:)(1uLL);
    NSObject.hash(into:)();
  }
}

BOOL sub_1000F0930(long long *a1, long long *a2)
{
  sub_10004ECF4(a1, (uint64_t)v4);
  sub_10004ECF4(a2, (uint64_t)v5);
  return sub_1000FF908(v4, v5);
}

Swift::Int sub_1000F097C()
{
  sub_10004ECF4(v0, (uint64_t)v2);
  return sub_1000F05F0();
}

void sub_1000F09B4()
{
  sub_10004ECF4(v0, (uint64_t)v1);
  sub_1000F051C();
}

Swift::Int sub_1000F09F4()
{
  Swift::UInt v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  char v5 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v1;
    }
    else {
      Swift::UInt64 v6 = 0;
    }
    Hasher._combine(_:)(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
    if ((v1 & 0x7FFFFF) == 0 && (v1 & 0x7F800000) == 0) {
      Swift::UInt32 v8 = 0;
    }
    else {
      Swift::UInt32 v8 = v1;
    }
    Hasher._combine(_:)(v8);
    if (v4)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      sub_1001058F0(v2, v1, v3, v4, 0);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000F0AF4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000F0B38()
{
  return Hasher._finalize()();
}

uint64_t sub_1000F0B74(uint64_t a1)
{
  Swift::UInt v2 = v1;
  id v16 = *v1;
  id v4 = v16;
  NSObject.hash(into:)();
  sub_100107B44(&v16);
  id v5 = v1[1];
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2[5])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  int v6 = *((unsigned __int8 *)v2 + 80);
  if (v6 != 255)
  {
    Swift::UInt v7 = (Swift::UInt)v2[6];
    uint64_t v8 = (uint64_t)v2[7];
    uint64_t v9 = (uint64_t)v2[8];
    uint64_t v10 = (uint64_t)v2[9];
    Hasher._combine(_:)(1u);
    if (v6)
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v7);
      if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v13 = v8;
      }
      else {
        Swift::UInt64 v13 = 0;
      }
      Hasher._combine(_:)(v13);
LABEL_20:
      sub_100107B88(v7, v8, v9, v10, v6);
      if (!v2[12]) {
        goto LABEL_21;
      }
LABEL_15:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v7);
    if ((v8 & 0x7FFFFF) == 0 && (v8 & 0x7F800000) == 0) {
      Swift::UInt32 v12 = 0;
    }
    else {
      Swift::UInt32 v12 = v8;
    }
    Hasher._combine(_:)(v12);
    if (v10)
    {
      Hasher._combine(_:)(1u);
      sub_100105860(v7, v8, v9, v10, 0);
      String.hash(into:)();
      goto LABEL_20;
    }
  }
  Hasher._combine(_:)(0);
  if (v2[12]) {
    goto LABEL_15;
  }
LABEL_21:
  Hasher._combine(_:)(0);
LABEL_22:
  Hasher._combine(_:)((Swift::UInt)v2[13]);
  if (v2[15])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v14 = (uint64_t)v2[16];
  swift_bridgeObjectRetain();
  sub_10032D9E8(a1, v14);
  return swift_bridgeObjectRelease();
}

void sub_1000F0DEC(uint64_t a1)
{
  Swift::UInt v2 = v1;
  id v4 = *v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (((unint64_t)v2[3] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = (Swift::UInt64)v2[3];
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  uint64_t v6 = (uint64_t)v2[7];
  if (v6)
  {
    Swift::UInt64 v7 = (Swift::UInt64)v2[5];
    id v8 = v2[6];
    Swift::UInt64 v9 = (Swift::UInt64)v2[4];
    Hasher._combine(_:)(1u);
    if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v10 = v9;
    }
    else {
      Swift::UInt64 v10 = 0;
    }
    Hasher._combine(_:)(v10);
    if (v8)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v11 = v7;
      }
      else {
        Swift::UInt64 v11 = 0;
      }
      Hasher._combine(_:)(v11);
    }
    sub_10032CBB4(a1, v6);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_1000F0EFC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_10051F5D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10010778C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = *v3;
  char v12 = 0;
  sub_10000F734(0, &qword_10051F5B8);
  sub_1001077E0(&qword_10051F5D8, &qword_10051F5B8);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_10000FC34((uint64_t)(v3 + 4), (uint64_t)v13, &qword_10051F5E0);
    sub_10000FC34((uint64_t)v13, (uint64_t)v11, &qword_10051F5E0);
    char v12 = 3;
    sub_100107878();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000F1140(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 112);
  v11[6] = *(_OWORD *)(a1 + 96);
  v11[7] = v2;
  uint64_t v12 = *(void *)(a1 + 128);
  long long v3 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  void v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  v13[6] = *(_OWORD *)(a2 + 96);
  v13[7] = v6;
  uint64_t v14 = *(void *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  v13[4] = *(_OWORD *)(a2 + 64);
  v13[5] = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v9;
  return sub_1000FF5E0((uint64_t)v11, (uint64_t)v13) & 1;
}

Swift::Int sub_1000F11C4()
{
  Hasher.init(_seed:)();
  sub_1000F0B74((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000F1208()
{
  Hasher.init(_seed:)();
  sub_1000F0B74((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1000F1244()
{
  uint64_t result = 0x6E6564497370616DLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701667182;
      break;
    case 2:
      uint64_t result = 0x65726F6373;
      break;
    case 3:
      uint64_t result = 0x666E496775626564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000F12D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100102B2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000F1300(uint64_t a1)
{
  unint64_t v2 = sub_10010778C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F133C(uint64_t a1)
{
  unint64_t v2 = sub_10010778C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F1378(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  _OWORD v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_1000FFA40((uint64_t)v7, (uint64_t)v8) & 1;
}

Swift::Int sub_1000F13C4()
{
  Hasher.init(_seed:)();
  sub_1000F0DEC((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000F1408()
{
  Hasher.init(_seed:)();
  sub_1000F0DEC((uint64_t)v1);
  return Hasher._finalize()();
}

double sub_1000F1444@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100102D00(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1000F1488(void *a1)
{
  return sub_1000F0EFC(a1);
}

uint64_t sub_1000F14C4(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (!a4)
  {
    uint64_t v30 = 0;
    _StringGuts.grow(_:)(65);
    v15._countAndFlagsBits = 0xD00000000000003FLL;
    v15._object = (void *)0x8000000100427290;
    String.append(_:)(v15);
    int64_t v16 = *(void *)(a1 + 16);
    if (v16)
    {
      sub_1000407B0(0, v16, 0);
      uint64_t v17 = (uint64_t *)(a1 + 48);
      do
      {
        uint64_t v19 = *(v17 - 1);
        uint64_t v18 = *v17;
        unint64_t v21 = _swiftEmptyArrayStorage[2];
        unint64_t v20 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain();
        if (v21 >= v20 >> 1) {
          sub_1000407B0(v20 > 1, v21 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v21 + 1;
        uint64_t v22 = &_swiftEmptyArrayStorage[2 * v21];
        v22[4] = v19;
        v22[5] = v18;
        v17 += 8;
        --v16;
      }
      while (v16);
    }
    sub_10000F214((uint64_t *)&unk_100522CD0);
    sub_100024278();
    uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    return v30;
  }
  if (a4 == 1)
  {
    uint64_t result = (uint64_t)(id)GEOStringForError();
    if (result)
    {
      long long v8 = (void *)result;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::UInt64 v11 = v10;

      if (!a3 || v9 == a2 && v11 == (void *)a3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v30 = v9;
      }
      else
      {
        uint64_t v30 = v9;
        v28._countAndFlagsBits = 2112032;
        v28._object = (void *)0xE300000000000000;
        String.append(_:)(v28);
        v29._countAndFlagsBits = a2;
        v29._object = (void *)a3;
        String.append(_:)(v29);
      }
      v12._countAndFlagsBits = 10272;
      v12._object = (void *)0xE200000000000000;
      String.append(_:)(v12);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 41;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      return v30;
    }
    __break(1u);
  }
  else
  {
    unint64_t v23 = a3 | a2;
    if (a3 | a2 | a1)
    {
      uint64_t result = 0xD000000000000014;
      if (a1 != 1 || v23)
      {
        if (a1 != 2 || v23)
        {
          if (a1 == 3 && v23 == 0) {
            return 0x726F707075736E55;
          }
          else {
            return 0xD00000000000001CLL;
          }
        }
        else
        {
          return 0xD000000000000015;
        }
      }
    }
    else
    {
      return 0x657220676E6F7257;
    }
  }
  return result;
}

void sub_1000F17EC(uint64_t a1, Swift::UInt64 a2, char a3)
{
  if (!a3)
  {
    Swift::UInt v4 = 0;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    Swift::UInt v4 = 3;
LABEL_5:
    Hasher._combine(_:)(v4);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = a2;
    }
    else {
      Swift::UInt64 v5 = 0;
    }
    Hasher._combine(_:)(v5);
    return;
  }
  if (a2) {
    Swift::UInt v6 = 2;
  }
  else {
    Swift::UInt v6 = 1;
  }
  Hasher._combine(_:)(v6);
}

uint64_t sub_1000F1854(void *a1, uint64_t a2, int a3)
{
  uint64_t v32 = a2;
  int v33 = a3;
  uint64_t v4 = sub_10000F214(&qword_10051F760);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  __chkstk_darwin(v4);
  Swift::UInt v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051F768);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  unint64_t v26 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051F770);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  __chkstk_darwin(v9);
  unint64_t v23 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051F778);
  uint64_t v29 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10051F780);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100108590();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!(_BYTE)v33)
  {
    char v34 = 0;
    sub_1001086E0();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  if (v33 == 1)
  {
    char v37 = 3;
    sub_1001085E4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v18 = v31;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  if (v32)
  {
    char v36 = 2;
    sub_100108638();
    unint64_t v20 = v26;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v22 = v27;
    uint64_t v21 = v28;
  }
  else
  {
    char v35 = 1;
    sub_10010868C();
    unint64_t v20 = v23;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v22 = v24;
    uint64_t v21 = v25;
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_1000F1CF8(void *a1, uint64_t a2, char a3, uint64_t a4, double a5)
{
  double v16 = *(double *)&a4;
  uint64_t v10 = sub_10000F214(&qword_10051F6E8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10010837C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  double v18 = a5;
  uint64_t v19 = a2;
  char v20 = a3 & 1;
  char v17 = 0;
  sub_100108478();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    double v18 = v16;
    char v17 = 1;
    sub_10000F214(&qword_10051F6D0);
    sub_1001084CC(&qword_10051F6F8, (void (*)(void))sub_10010853C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

Swift::Int sub_1000F1EE8(Swift::UInt64 a1, char a2, uint64_t a3, double a4)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)&a4;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if (a2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v9 = a1;
    }
    else {
      Swift::UInt64 v9 = 0;
    }
    Hasher._combine(_:)(v9);
  }
  sub_10032CBB4((uint64_t)v11, a3);
  return Hasher._finalize()();
}

uint64_t sub_1000F1F94()
{
  return 0x696C7069746C756DLL;
}

uint64_t sub_1000F1FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x696C7069746C756DLL && a2 == 0xEA00000000007265)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1000F2054(uint64_t a1)
{
  unint64_t v2 = sub_1001085E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F2090(uint64_t a1)
{
  unint64_t v2 = sub_1001085E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F20CC()
{
  uint64_t result = 0x6374614D74786574;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x676E697461526F6ELL;
      break;
    case 2:
      uint64_t result = 0x4D676E6964616568;
      break;
    case 3:
      uint64_t result = 0x79726F6765746163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000F2168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010302C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000F2190(uint64_t a1)
{
  unint64_t v2 = sub_100108590();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F21CC(uint64_t a1)
{
  unint64_t v2 = sub_100108590();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F2208(uint64_t a1)
{
  unint64_t v2 = sub_100108638();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F2244(uint64_t a1)
{
  unint64_t v2 = sub_100108638();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F2280(uint64_t a1)
{
  unint64_t v2 = sub_10010868C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F22BC(uint64_t a1)
{
  unint64_t v2 = sub_10010868C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F22F8()
{
  return 0x65726F6373;
}

uint64_t sub_1000F230C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1000F239C(uint64_t a1)
{
  unint64_t v2 = sub_1001086E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F23D8(uint64_t a1)
{
  unint64_t v2 = sub_1001086E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1000F2414(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 8) == 1) {
      return v4 == 1 && v2 == v3;
    }
    BOOL v7 = v4 == 2 && *(void *)&v3 == 0;
    BOOL v9 = v4 == 2 && *(void *)&v3 == 1;
    if (v2 == 0.0) {
      return v7;
    }
    else {
      return v9;
    }
  }
  else
  {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
}

Swift::Int sub_1000F2498()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_1000F17EC((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1000F24E8(uint64_t a1)
{
  sub_1000F17EC(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int sub_1000F24F4()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_1000F17EC((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000F2540@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100103210(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1000F2570(void *a1)
{
  return sub_1000F1854(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

uint64_t sub_1000F2590()
{
  if (*v0) {
    return 0x61655265726F6373;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1000F25D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100103984(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000F2600(uint64_t a1)
{
  unint64_t v2 = sub_10010837C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F263C(uint64_t a1)
{
  unint64_t v2 = sub_10010837C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F2678(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(unsigned char *)(a1 + 16))
  {
    if (!v5) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 8) == *(double *)(a2 + 8)) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  return sub_1003E093C(v4, v6);
}

Swift::Int sub_1000F26C8()
{
  return sub_1000F1EE8(*(void *)(v0 + 8), *(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(double *)v0);
}

void sub_1000F26E4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt64 v4 = *(void *)(v2 + 8);
  int v5 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  if ((*(void *)v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)v2;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v8 = v4;
    }
    else {
      Swift::UInt64 v8 = 0;
    }
    Hasher._combine(_:)(v8);
  }

  sub_10032CBB4(a1, v6);
}

Swift::Int sub_1000F2768()
{
  Swift::UInt64 v2 = *(void *)v0;
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v1;
    }
    else {
      Swift::UInt64 v6 = 0;
    }
    Hasher._combine(_:)(v6);
  }
  sub_10032CBB4((uint64_t)v8, v4);
  return Hasher._finalize()();
}

uint64_t sub_1000F2804@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100103A8C(a1);
  if (!v2)
  {
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = result;
    *(unsigned char *)(a2 + 16) = v5 & 1;
    *(void *)(a2 + 24) = v6;
  }
  return result;
}

uint64_t sub_1000F2840(void *a1)
{
  return sub_1000F1CF8(a1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(double *)v1);
}

uint64_t sub_1000F2870(void *a1, uint64_t a2, char a3)
{
  uint64_t v7 = sub_10000F214(&qword_10051F660);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_100107BA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    uint64_t v13 = a2;
    char v14 = a3 & 1;
    v12[15] = 1;
    sub_100107C48();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int sub_1000F2A04(Swift::UInt64 a1, char a2, double a3)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if (a2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v7 = a1;
    }
    else {
      Swift::UInt64 v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000F2A98()
{
  if (*v0) {
    return 0x656C676E61;
  }
  else {
    return 0x65636E6174736964;
  }
}

uint64_t sub_1000F2AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100103CB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000F2AF8(uint64_t a1)
{
  unint64_t v2 = sub_100107BA0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F2B34(uint64_t a1)
{
  unint64_t v2 = sub_100107BA0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F2B70(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
  {
    char v2 = *(unsigned char *)(a2 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      if (*(unsigned char *)(a2 + 16)) {
        return 1;
      }
    }
    else
    {
      if (*(double *)(a1 + 8) != *(double *)(a2 + 8)) {
        char v2 = 1;
      }
      if ((v2 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

Swift::Int sub_1000F2BB4()
{
  return sub_1000F2A04(*(void *)(v0 + 8), *(unsigned char *)(v0 + 16), *(double *)v0);
}

void sub_1000F2BC4()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  int v2 = *(unsigned __int8 *)(v0 + 16);
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)v0;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
}

Swift::Int sub_1000F2C2C()
{
  Swift::UInt64 v2 = *(void *)v0;
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = v1;
    }
    else {
      Swift::UInt64 v5 = 0;
    }
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

void *sub_1000F2CB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100103DA0(a1);
  if (!v2)
  {
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = result;
    *(unsigned char *)(a2 + 16) = v5 & 1;
  }
  return result;
}

uint64_t sub_1000F2CE8(void *a1)
{
  return sub_1000F2870(a1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

double sub_1000F2D0C()
{
  type metadata accessor for GeoLookup(0);
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = OBJC_IVAR____TtC6Tamale9GeoLookup_logger;
  if (qword_100517E50 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_10000F378(v2, (uint64_t)qword_10055E208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v0 + v1, v3, v2);
  uint64_t v4 = OBJC_IVAR____TtC6Tamale9GeoLookup_sharedService;
  *(void *)(v0 + v4) = [objc_allocWithZone((Class)GEOMapService) init];
  *(void *)(v0 + OBJC_IVAR____TtC6Tamale9GeoLookup_traits) = 0;
  char v5 = (_OWORD *)(v0 + OBJC_IVAR____TtC6Tamale9GeoLookup_cachedResponse);
  double result = 0.0;
  v5[1] = 0u;
  long long v5[2] = 0u;
  *char v5 = 0u;
  Swift::UInt64 v7 = (_OWORD *)(v0 + OBJC_IVAR____TtC6Tamale9GeoLookup_inFlightRequest);
  _OWORD *v7 = 0u;
  v7[1] = 0u;
  qword_10055E358 = v0;
  return result;
}

uint64_t sub_1000F2E34(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char v15 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v15;
  *char v15 = v9;
  v15[1] = sub_1000F2F00;
  return sub_1000F344C(a6, a7, a8, a9, a1);
}

uint64_t sub_1000F2F00()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 24) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000F3034, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000F3034()
{
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000F3094()
{
  uint64_t v1 = v0;
  uint64_t v2 = (_OWORD *)(v0 + OBJC_IVAR____TtC6Tamale9GeoLookup_inFlightRequest);
  if (*(void *)(v0 + OBJC_IVAR____TtC6Tamale9GeoLookup_inFlightRequest + 24))
  {
    swift_retain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Canceling in-flight request", v5, 2u);
      swift_slowDealloc();
    }

    sub_10000F214(&qword_10051F3D0);
    sub_10000F214(&qword_10051F3B0);
    Task.cancel()();
    swift_release();
    *uint64_t v2 = 0u;
    v2[1] = 0u;
    swift_release();
  }
  uint64_t v6 = (_OWORD *)(v1 + OBJC_IVAR____TtC6Tamale9GeoLookup_cachedResponse);
  if (*(void *)(v1 + OBJC_IVAR____TtC6Tamale9GeoLookup_cachedResponse + 40) && (v6[2] & 1) != 0)
  {
    Swift::UInt64 v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Clearing cached candidate results", v9, 2u);
      swift_slowDealloc();
    }

    _OWORD *v6 = 0u;
    v6[1] = 0u;
    void v6[2] = 0u;
    swift_bridgeObjectRelease();
  }
}

void *sub_1000F326C(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC6Tamale9GeoLookup_cachedResponse + 40);
  if (!v6) {
    return 0;
  }
  nullsub_2(a1, a2);
  swift_bridgeObjectRetain();
  GEOMapRectMakeWithRadialDistance();
  if (!GEOMapRectContainsRect())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    uint64_t v9 = (long long *)(v6 + 32);
    uint64_t v10 = _swiftEmptyArrayStorage;
    do
    {
      long long v16 = *v9;
      uint64_t v11 = *(void **)v9;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      [v11 centerCoordinate];
      j__GEOCalculateDistance();
      if (v12 > a5)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000409B4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v14 = _swiftEmptyArrayStorage[2];
        unint64_t v13 = _swiftEmptyArrayStorage[3];
        if (v14 >= v13 >> 1) {
          sub_1000409B4(v13 > 1, v14 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v14 + 1;
        *(_OWORD *)&_swiftEmptyArrayStorage[2 * v14 + 4] = v16;
      }
      ++v9;
      --v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000F344C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  *(void *)(v6 + 144) = v5;
  *(double *)(v6 + 136) = a5;
  *(unsigned char *)(v6 + 248) = a4;
  *(void *)(v6 + 120) = a2;
  *(void *)(v6 + 128) = a3;
  *(void *)(v6 + 112) = a1;
  sub_10000F214(&qword_10051A8C0);
  *(void *)(v6 + 152) = swift_task_alloc();
  return _swift_task_switch(sub_1000F34F0, v5, 0);
}

uint64_t sub_1000F34F0()
{
  uint64_t v76 = v0;
  id v1 = [self sharedConfiguration];
  if (!v1)
  {
    __break(1u);
    return Task.value.getter(v1, v2, v3, v4, v5);
  }
  uint64_t v6 = v1;
  unsigned int v7 = [v1 currentCountrySupportsFeature:11];

  if (v7)
  {
    uint64_t v8 = *(void *)(v0 + 144);
    if (*(double *)(v0 + 136) <= 250.0) {
      double v9 = *(double *)(v0 + 136);
    }
    else {
      double v9 = 250.0;
    }
    if (*(unsigned char *)(v0 + 248)) {
      uint64_t v10 = (id *)(v0 + 112);
    }
    else {
      uint64_t v10 = (id *)(v0 + 120);
    }
    id v11 = *v10;
    [*v10 coordinate];
    id v12 = [v11 coordinate];
    double v14 = nullsub_2(v12, v13);
    double v16 = v15;
    *(double *)(v0 + 64) = v14;
    *(double *)(v0 + 72) = v15;
    GEOMapRectMakeWithRadialDistance();
    id v17 = [v11 coordinate];
    uint64_t v19 = OBJC_IVAR____TtC6Tamale9GeoLookup_cachedResponse;
    *(void *)(v0 + 160) = OBJC_IVAR____TtC6Tamale9GeoLookup_cachedResponse;
    if (*(void *)(v8 + v19 + 40))
    {
      nullsub_2(v17, v18);
      swift_bridgeObjectRetain();
      GEOMapRectMakeWithRadialDistance();
      int v20 = GEOMapRectContainsRect();
      swift_bridgeObjectRelease();
      if (v20)
      {
        uint64_t v21 = *(void **)(v0 + 120);
        uint64_t v22 = *(void *)(v0 + 128);
        unint64_t v23 = *(void **)(v0 + 112);
        unsigned __int8 v24 = *(unsigned char *)(v0 + 248);
        sub_1000506C4(v23, v21, v22, v24);
        sub_1000506C4(v23, v21, v22, v24);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.debug.getter();
        BOOL v27 = os_log_type_enabled(v25, v26);
        unsigned __int8 v28 = *(unsigned char *)(v0 + 248);
        uint64_t v30 = *(void **)(v0 + 120);
        uint64_t v29 = *(void *)(v0 + 128);
        uint64_t v31 = *(void **)(v0 + 112);
        if (v27)
        {
          uint64_t v32 = swift_slowAlloc();
          uint64_t v75 = swift_slowAlloc();
          *(_DWORD *)uint64_t v32 = 136315394;
          [v11 coordinate];
          *(void *)(v0 + 48) = v33;
          *(void *)(v0 + 56) = v34;
          type metadata accessor for CLLocationCoordinate2D(0);
          uint64_t v35 = String.init<A>(describing:)();
          *(void *)(v0 + 96) = sub_1003806B0(v35, v36, &v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10004FFD4(v31, v30, v29, v28);
          sub_10004FFD4(v31, v30, v29, v28);
          *(_WORD *)(v32 + 12) = 2048;
          *(double *)(v0 + 104) = v9;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Existing cached results are still valid for new location: %s with radius %f meters", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10004FFD4(v31, v30, v29, v28);
          sub_10004FFD4(v31, v30, v29, v28);
        }
        swift_task_dealloc();
        uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_34;
      }
    }
    uint64_t v39 = *(void *)(v0 + 144);
    uint64_t v40 = OBJC_IVAR____TtC6Tamale9GeoLookup_inFlightRequest;
    *(void *)(v0 + 168) = OBJC_IVAR____TtC6Tamale9GeoLookup_inFlightRequest;
    uint64_t v41 = v39 + v40;
    uint64_t v42 = *(void *)(v39 + v40 + 24);
    *(void *)(v0 + 176) = v42;
    if (v42)
    {
      swift_retain();
      GEOMapRectMakeWithRadialDistance();
      if (GEOMapRectContainsRect())
      {
        char v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v45 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "In-flight request will be valid for new location", v45, 2u);
          swift_slowDealloc();
        }

        long long v46 = (void *)(v0 + 88);
        swift_retain();
        char v47 = (void *)swift_task_alloc();
        *(void *)(v0 + 184) = v47;
        uint64_t v48 = sub_10000F214(&qword_10051F3D0);
        uint64_t v4 = sub_10000F214(&qword_10051F3B0);
        *char v47 = v0;
        uint64_t v49 = sub_1000F3EA4;
LABEL_29:
        v47[1] = v49;
        uint64_t v5 = &protocol self-conformance witness table for Error;
        id v1 = v46;
        uint64_t v2 = v42;
        uint64_t v3 = v48;
        return Task.value.getter(v1, v2, v3, v4, v5);
      }
      swift_release();
      if (*(void *)(v41 + 24))
      {
        swift_retain();
        uint64_t v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v50, v51))
        {
          __int16 v52 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)__int16 v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Canceling existing request", v52, 2u);
          swift_slowDealloc();
        }

        sub_10000F214(&qword_10051F3D0);
        sub_10000F214(&qword_10051F3B0);
        Task.cancel()();
        swift_release();
        *(_OWORD *)uint64_t v41 = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        swift_release();
      }
    }
    if (v9 > 250.0) {
      double v53 = v9;
    }
    else {
      double v53 = 250.0;
    }
    GEOMapRectMakeWithRadialDistance();
    *(void *)(v0 + 16) = v54;
    *(void *)(v0 + 24) = v55;
    *(void *)(v0 + 32) = v56;
    *(void *)(v0 + 40) = v57;
    *(void *)(v0 + 200) = OBJC_IVAR____TtC6Tamale9GeoLookup_logger;
    id v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Issuing new request for nearby map items", v60, 2u);
      swift_slowDealloc();
    }
    long long v46 = (void *)(v0 + 80);
    uint64_t v62 = *(void *)(v0 + 144);
    uint64_t v61 = *(void *)(v0 + 152);

    id v63 = [self unsupportedPOICategories];
    type metadata accessor for GEOPOICategory(0);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v64 = objc_allocWithZone((Class)GEOPOICategoryFilter);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v66 = [v64 initWithCategoriesToInclude:0 categoriesToExclude:isa];
    *(void *)(v0 + 208) = v66;

    id v67 = [objc_allocWithZone((Class)GEOSpatialPlaceLookupParameters) initWithCoordinate:v66 radius:0x7FFFFFFFLL poiCategoryFilter:1 maxResultCount:v14 source:v53];
    *(void *)(v0 + 216) = v67;
    uint64_t v68 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v61, 1, 1, v68);
    uint64_t v69 = sub_1000FFB84(&qword_10051F2F0, (void (*)(uint64_t))type metadata accessor for GeoLookup);
    uint64_t v70 = (void *)swift_allocObject();
    v70[2] = v62;
    v70[3] = v69;
    v70[4] = v62;
    v70[5] = v67;
    swift_retain_n();
    id v71 = v67;
    uint64_t v42 = sub_1000D0D08(v61, (uint64_t)&unk_10051F3C8, (uint64_t)v70);
    *(void *)(v0 + 224) = v42;
    [v11 coordinate];
    *(void *)uint64_t v41 = v72;
    *(void *)(v41 + 8) = v73;
    *(double *)(v41 + 16) = v53;
    *(void *)(v41 + 24) = v42;
    swift_retain();
    swift_release();
    char v47 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v47;
    uint64_t v48 = sub_10000F214(&qword_10051F3D0);
    uint64_t v4 = sub_10000F214(&qword_10051F3B0);
    *char v47 = v0;
    uint64_t v49 = sub_1000F4058;
    goto LABEL_29;
  }
  sub_1000FFB30();
  swift_allocError();
  *(void *)(v37 + 8) = 0;
  *(void *)(v37 + 16) = 0;
  *(void *)uint64_t v37 = 3;
  *(unsigned char *)(v37 + 24) = 2;
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
LABEL_34:
  return v38();
}

uint64_t sub_1000F3EA4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 144);
    swift_release();
    uint64_t v4 = sub_1000F4488;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 144);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = sub_1000F3FEC;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000F3FEC()
{
  swift_release();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F4058()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 144);
  if (v0) {
    uint64_t v4 = sub_1000F44F4;
  }
  else {
    uint64_t v4 = sub_1000F4184;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F4184()
{
  unint64_t v1 = *(void *)(v0 + 80);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      goto LABEL_13;
    }
  }
  uint64_t result = sub_1000409B4(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = 0;
  unint64_t v5 = v1 & 0xC000000000000001;
  do
  {
    if (v5) {
      uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v6 = (void *)swift_unknownObjectRetain();
    }
    uint64_t v7 = sub_100103F6C(v6);
    uint64_t v9 = v8;
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    unint64_t v10 = _swiftEmptyArrayStorage[3];
    if (v11 >= v10 >> 1) {
      sub_1000409B4(v10 > 1, v11 + 1, 1);
    }
    ++v4;
    _swiftEmptyArrayStorage[2] = v11 + 1;
    id v12 = &_swiftEmptyArrayStorage[2 * v11];
    v12[4] = v7;
    v12[5] = v9;
  }
  while (v2 != v4);
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void **)(v0 + 216);
  double v14 = (_OWORD *)(*(void *)(v0 + 144) + *(void *)(v0 + 168));
  *double v14 = 0u;
  v14[1] = 0u;
  swift_release();
  uint64_t v15 = _swiftEmptyArrayStorage[2];
  uint64_t v16 = (int)[v13 maxResultCount];
  if (v15 == v16)
  {
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Exceeded max candidate limit. Reducing valid radius for cached response", v19, 2u);
      swift_slowDealloc();
    }

    GEOMapRectMakeWithRadialDistance();
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    uint64_t v27 = v26;
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 16);
    uint64_t v23 = *(void *)(v0 + 24);
    uint64_t v25 = *(void *)(v0 + 32);
    uint64_t v27 = *(void *)(v0 + 40);
  }
  BOOL v28 = v15 == v16;
  uint64_t v29 = *(void **)(v0 + 216);
  uint64_t v30 = *(void *)(v0 + 160);
  uint64_t v31 = *(void *)(v0 + 144);

  swift_release();
  uint64_t v32 = (void *)(v31 + v30);
  *uint64_t v32 = v21;
  v32[1] = v23;
  v32[2] = v25;
  v32[3] = v27;
  v32[4] = v28;
  v32[5] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
  return v33();
}

uint64_t sub_1000F4488()
{
  swift_release();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F44F4()
{
  unint64_t v1 = (void *)v0[27];
  uint64_t v2 = (void *)v0[26];
  uint64_t v3 = (_OWORD *)(v0[18] + v0[21]);
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  swift_release();
  swift_willThrow();
  swift_release();

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000F45A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  long long v5[2] = a1;
  return _swift_task_switch(sub_1000F45C8, a4, 0);
}

uint64_t sub_1000F45C8()
{
  uint64_t v1 = sub_1000FFB84(&qword_10051F2F0, (void (*)(uint64_t))type metadata accessor for GeoLookup);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  long long v7 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 16) = v7;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  uint64_t v4 = sub_10000F214(&qword_10051F3D0);
  *uint64_t v3 = v0;
  v3[1] = sub_1000F4708;
  uint64_t v5 = *(void *)(v0 + 16);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v7, v1, 0xD000000000000024, 0x8000000100427200, sub_10010494C, v2, v4);
}

uint64_t sub_1000F4708()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[3];
    return _swift_task_switch(sub_1000F4844, v3, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_1000F4844()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F48A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v22 = a1;
  uint64_t v5 = sub_10000F214(&qword_10051F3E8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = *(void **)(a2 + OBJC_IVAR____TtC6Tamale9GeoLookup_sharedService);
  sub_10000F214(&qword_100521040);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100440690;
  *(void *)(v9 + 32) = a3;
  aBlock[0] = v9;
  specialized Array._endMutation()();
  sub_10000F734(0, &qword_10051F3F0);
  id v10 = a3;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [v8 ticketForSpatialPlaceLookupParameters:isa traits:*(void *)(a2 + OBJC_IVAR____TtC6Tamale9GeoLookup_traits)];

  if (v12)
  {
    uint64_t v13 = v5;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v22, v5);
    unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v15 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v14, (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
    *(void *)(v15 + ((v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v10;
    aBlock[4] = sub_1001049FC;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000F4EF4;
    aBlock[3] = &unk_1004EB238;
    uint64_t v16 = _Block_copy(aBlock);
    id v17 = v10;
    swift_release();
    [v12 submitWithHandler:v16 queue:0];
    _Block_release(v16);
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_1000FFB30();
    uint64_t v19 = swift_allocError();
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0;
    *(void *)uint64_t v20 = 1;
    *(unsigned char *)(v20 + 24) = 2;
    aBlock[0] = v19;
    return CheckedContinuation.resume(throwing:)();
  }
}

void sub_1000F4B80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_errorRetain();
    swift_errorRetain();
    sub_10000F214(&qword_10051F3B0);
    sub_10000F734(0, &qword_10051F3F8);
    if (swift_dynamicCast())
    {
      id v4 = [v21 domain];
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      id v8 = (id)GEOErrorDomain();
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        if (v5 == v10 && v7 == v12)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_23;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v20)
        {
LABEL_23:
          if ([v21 code] == (id)-8)
          {
            sub_10000F214(&qword_10051F3E8);
            CheckedContinuation.resume(returning:)();
            swift_errorRelease();

            return;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
LABEL_26:
    sub_10000F214(&qword_10051F3E8);
    CheckedContinuation.resume(throwing:)();
    return;
  }
  if (!a1
    || (id v13 = [a1 mapItemsForSpatialLookupParameters:a4]) == 0)
  {
    sub_1000FFB30();
    swift_allocError();
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(void *)uint64_t v19 = 0;
    *(unsigned char *)(v19 + 24) = 2;
    goto LABEL_26;
  }
  unint64_t v14 = v13;
  sub_10000F214(&qword_10051F308);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v15 >> 62))
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_11;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    sub_10000F214(&qword_10051F3E8);
    CheckedContinuation.resume(returning:)();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_29;
  }
LABEL_11:
  if (v16 >= 1)
  {
    for (uint64_t i = 0; i != v16; ++i)
    {
      if ((v15 & 0xC000000000000001) != 0)
      {
        os_log_type_t v18 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        os_log_type_t v18 = *(void **)(v15 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      if (([v18 _openingHoursOptions] & 0x80) != 0)
      {
        swift_unknownObjectRelease();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    goto LABEL_29;
  }
  __break(1u);
}

void sub_1000F4EF4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1000F4F80(uint64_t a1, char a2)
{
  if (a2)
  {
    if (*(double *)&a1 == 0.0) {
      return 0x646578616C6572;
    }
    else {
      return 1885956979;
    }
  }
  else if (*(double *)&a1 <= 0.0)
  {
    return 0x746369727473;
  }
  else
  {
    sub_10000F214(&qword_10051F350);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_10043D4F0;
    *(void *)(v3 + 56) = &type metadata for Double;
    *(void *)(v3 + 64) = &protocol witness table for Double;
    *(double *)(v3 + 32) = *(double *)&a1;
    v4._countAndFlagsBits = String.init(format:_:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    return 0x28746369727473;
  }
}

unint64_t sub_1000F508C@<X0>(double a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    if (a1 != 0.0)
    {
      a3[3] = &type metadata for GeoLookup.ConstantRanker;
      unint64_t result = sub_10010264C();
      a3[4] = result;
      *a3 = 0;
      return result;
    }
    sub_10000F214(&qword_10051F360);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_100440F30;
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_100440F30;
    *(void *)(v17 + 56) = &type metadata for GeoLookup.ConstantRanker;
    unint64_t v18 = sub_10010264C();
    *(void *)(v17 + 64) = v18;
    *(void *)(v17 + 32) = 0x3FE999999999999ALL;
    *(void *)(v17 + 96) = &type metadata for GeoLookup.WeightedRanker;
    unint64_t v19 = sub_1001026A0();
    *(void *)(v17 + 104) = v19;
    char v20 = (void *)swift_allocObject();
    *(void *)(v17 + 72) = v20;
    v20[5] = &type metadata for GeoLookup.ProximityRanker;
    v20[6] = sub_10010272C();
    v20[7] = 0x3FC999999999999ALL;
    *(void *)(v16 + 56) = &type metadata for GeoLookup.CompositeRanker;
    unint64_t v21 = sub_100102780();
    *(void *)(v16 + 64) = v21;
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = sub_100108FC8;
    *(void *)(v16 + 48) = 0;
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_100440F30;
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_100440F30;
    *(void *)(v23 + 56) = &type metadata for GeoLookup.ConstantRanker;
    *(void *)(v23 + 64) = v18;
    *(void *)(v23 + 32) = 0x3FD999999999999ALL;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_100440F30;
    *(void *)(v24 + 56) = &type metadata for GeoLookup.WeightedRanker;
    *(void *)(v24 + 64) = v19;
    uint64_t v25 = (void *)swift_allocObject();
    *(void *)(v24 + 32) = v25;
    v25[5] = &type metadata for GeoLookup.DoorNumberRanker;
    v25[6] = sub_1001027D4();
    v25[7] = 0x3FC999999999999ALL;
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1004416D0;
    *(void *)(v26 + 56) = &type metadata for GeoLookup.TextDetectionRanker;
    *(void *)(v26 + 64) = sub_100102828();
    *(void *)(v26 + 96) = &type metadata for GeoLookup.DataDetectorDetectionRanker;
    *(void *)(v26 + 104) = sub_10010287C();
    *(void *)(v26 + 72) = 67;
    *(void *)(v26 + 136) = &type metadata for GeoLookup.BrandClassificationRanker;
    *(void *)(v26 + 144) = sub_1001028D0();
    *(void *)(v24 + 96) = &type metadata for GeoLookup.CompositeRanker;
    *(void *)(v24 + 104) = v21;
    *(void *)(v24 + 72) = v26;
    *(void *)(v24 + 80) = sub_10040F6C0;
    *(void *)(v24 + 88) = 0;
    *(void *)(v23 + 96) = &type metadata for GeoLookup.WeightedRanker;
    *(void *)(v23 + 104) = v19;
    uint64_t v27 = (void *)swift_allocObject();
    *(void *)(v23 + 72) = v27;
    v27[5] = &type metadata for GeoLookup.CompositeRanker;
    v27[6] = v21;
    v27[2] = v24;
    v27[3] = sub_1000F56A0;
    v27[4] = 0;
    v27[7] = 0x3FE3333333333333;
    *(void *)(v22 + 56) = &type metadata for GeoLookup.CompositeRanker;
    *(void *)(v22 + 64) = v21;
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = sub_100108FC8;
    *(void *)(v22 + 48) = 0;
    *(void *)(v22 + 96) = &type metadata for GeoLookup.HeadingResultRanker;
    unint64_t result = sub_100102924();
    *(void *)(v22 + 104) = result;
    *(void *)(v16 + 96) = &type metadata for GeoLookup.CompositeRanker;
    *(void *)(v16 + 104) = v21;
    *(void *)(v16 + 72) = v22;
    *(void *)(v16 + 80) = sub_100108FD0;
    *(void *)(v16 + 88) = 0;
    a3[3] = &type metadata for GeoLookup.CompositeRanker;
    a3[4] = v21;
    *a3 = v16;
    unint64_t v15 = sub_1000F56A8;
  }
  else
  {
    sub_10000F214(&qword_10051F360);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100440F30;
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100440F30;
    *(void *)(v6 + 56) = &type metadata for GeoLookup.ConstantRanker;
    *(void *)(v6 + 64) = sub_10010264C();
    *(void *)(v6 + 32) = 0x3FE999999999999ALL;
    *(void *)(v6 + 96) = &type metadata for GeoLookup.WeightedRanker;
    unint64_t v7 = sub_1001026A0();
    *(void *)(v6 + 104) = v7;
    id v8 = (void *)swift_allocObject();
    *(void *)(v6 + 72) = v8;
    v8[5] = &type metadata for GeoLookup.ProximityRanker;
    v8[6] = sub_10010272C();
    v8[7] = 0x3FC999999999999ALL;
    *(void *)(v5 + 56) = &type metadata for GeoLookup.CompositeRanker;
    unint64_t v9 = sub_100102780();
    *(void *)(v5 + 64) = v9;
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = sub_100108FC8;
    *(void *)(v5 + 48) = 0;
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100440F30;
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_100440F30;
    *(void *)(v11 + 56) = &type metadata for GeoLookup.WeightedRanker;
    *(void *)(v11 + 64) = v7;
    uint64_t v12 = (void *)swift_allocObject();
    *(void *)(v11 + 32) = v12;
    v12[5] = &type metadata for GeoLookup.DoorNumberRanker;
    v12[6] = sub_1001027D4();
    v12[7] = 0x3FC999999999999ALL;
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1004416D0;
    *(void *)(v13 + 56) = &type metadata for GeoLookup.TextDetectionRanker;
    *(void *)(v13 + 64) = sub_100102828();
    *(void *)(v13 + 96) = &type metadata for GeoLookup.DataDetectorDetectionRanker;
    *(void *)(v13 + 104) = sub_10010287C();
    *(void *)(v13 + 72) = 67;
    *(void *)(v13 + 136) = &type metadata for GeoLookup.BrandClassificationRanker;
    *(void *)(v13 + 144) = sub_1001028D0();
    *(void *)(v11 + 96) = &type metadata for GeoLookup.CompositeRanker;
    *(void *)(v11 + 104) = v9;
    *(void *)(v11 + 72) = v13;
    *(void *)(v11 + 80) = sub_10040F6C0;
    *(void *)(v11 + 88) = 0;
    *(void *)(v10 + 56) = &type metadata for GeoLookup.CompositeRanker;
    *(void *)(v10 + 64) = v9;
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = sub_100108FC8;
    *(void *)(v10 + 48) = 0;
    *(void *)(v10 + 96) = &type metadata for GeoLookup.HeadingResultRanker;
    unint64_t result = sub_100102924();
    *(void *)(v10 + 104) = result;
    *(void *)(v5 + 96) = &type metadata for GeoLookup.CompositeRanker;
    *(void *)(v5 + 104) = v9;
    *(void *)(v5 + 72) = v10;
    *(void *)(v5 + 80) = sub_1000F56B0;
    *(void *)(v5 + 88) = 0;
    if (a1 > 0.0)
    {
      a3[3] = &type metadata for GeoLookup.ScoreFilter;
      a3[4] = sub_100102978();
      unint64_t result = swift_allocObject();
      *a3 = result;
      *(void *)(result + 40) = &type metadata for GeoLookup.CompositeRanker;
      *(void *)(result + 48) = v9;
      *(void *)(result + 16) = v5;
      *(void *)(result + 24) = sub_100108FD4;
      *(void *)(result + 32) = 0;
      *(double *)(result + 56) = a1;
      return result;
    }
    a3[3] = &type metadata for GeoLookup.CompositeRanker;
    a3[4] = v9;
    *a3 = v5;
    unint64_t v15 = sub_100108FD4;
  }
  a3[1] = v15;
  a3[2] = 0;
  return result;
}

double sub_1000F56A0(double a1, double a2)
{
  return a1 + a2;
}

double sub_1000F56A8(double a1, double a2)
{
  return a1 * a2;
}

double sub_1000F56B0(double a1, double a2)
{
  if (a1 > 0.8) {
    a2 = 1.0;
  }
  return a2 * a1;
}

void sub_1000F56CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  uint64_t v8 = v7;
  uint64_t v15 = *(void *)(v8 + 24);
  uint64_t v16 = *(void *)(v8 + 32);
  uint64_t v17 = a6 & 1;
  sub_10000F3B0((void *)v8, v15);
  if (*(double *)(v8 + 40) > (*(double (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v16 + 16))(a1, a2, a3, a4, a5, v17, v15, v16, a7))swift_bridgeObjectRelease(); {
}
  }

uint64_t sub_1000F579C()
{
  return 0x6C694665726F6353;
}

void *sub_1000F57BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, double (*a8)(uint64_t, double, double), double a9)
{
  char v17 = a6 & 1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v18 = (double *)sub_100101168(a7, a1, a2, a3, a4, a5, v17, a9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v19 = *((void *)v18 + 2);
  if (!v19)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  double v20 = v18[4];
  unint64_t result = (void *)swift_bridgeObjectRetain();
  if (v19 == 1)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v27 = *((void *)v18 + 2);
    if (v27)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = 5;
      do
      {
        uint64_t v29 = *(void *)&v18[v28];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10019F7E4(v29);
        swift_bridgeObjectRelease();
        v28 += 2;
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease();
    }
    goto LABEL_10;
  }
  uint64_t v22 = v18 + 7;
  uint64_t v23 = 1;
  while (1)
  {
    uint64_t v24 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    double v25 = *(v22 - 1);
    uint64_t v26 = swift_bridgeObjectRetain();
    double v20 = a8(v26, v20, v25);
    unint64_t result = (void *)swift_bridgeObjectRelease();
    ++v23;
    v22 += 2;
    if (v24 == v19) {
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

void *sub_1000F59C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  return sub_1000F57BC(a1, a2, a3, a4, a5, a6 & 1, *(void *)v7, *(double (**)(uint64_t, double, double))(v7 + 8), a7);
}

uint64_t sub_1000F59F0()
{
  return 0x7469736F706D6F43;
}

void *sub_1000F5A14()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000F5A24()
{
  return 0x746E6174736E6F43;
}

double sub_1000F5A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  uint64_t v8 = v7;
  uint64_t v15 = *(void *)(v8 + 24);
  uint64_t v16 = *(void *)(v8 + 32);
  uint64_t v17 = a6 & 1;
  sub_10000F3B0((void *)v8, v15);
  return *(double *)(v8 + 40)
       * (*(double (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v16 + 16))(a1, a2, a3, a4, a5, v17, v15, v16, a7);
}

uint64_t sub_1000F5B04()
{
  _StringGuts.grow(_:)(18);
  v1._countAndFlagsBits = 0x6465746867696557;
  v1._object = (void *)0xEF2872656B6E6152;
  String.append(_:)(v1);
  sub_10000F3B0(v0, v0[3]);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

double sub_1000F5BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return 0.5;
  }
  if (*(double *)&a5 <= 0.34906585) {
    return 1.0;
  }
  double result = 0.5;
  if (*(double *)&a5 <= 0.785398163) {
    return 0.75;
  }
  return result;
}

unint64_t sub_1000F5C0C()
{
  return 0xD000000000000013;
}

void *sub_1000F5C28()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000F5C58()
{
  return 0x74696D69786F7250;
}

uint64_t sub_1000F5C7C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return 0;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
  }
  for (uint64_t i = (void *)(v3 + 56); ; i += 4)
  {
    BOOL v9 = *(i - 1) == a2 && *i == a3;
    BOOL v10 = v9 && *(i - 3) >> 16 == 0;
    BOOL v11 = v10 && *(i - 2) >> 16 == v7;
    if (v11 || (_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (!--v4) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1000F5D38(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 == a7 && a4 == a8 && a1 >> 16 == a5 >> 16 && a2 >> 16 == a6 >> 16) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

double sub_1000F5DB8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FFDB0(a1, a3);
}

unint64_t sub_1000F5DC0()
{
  return 0xD000000000000010;
}

uint64_t sub_1000F5DDC()
{
  _StringGuts.grow(_:)(31);
  v0._object = (void *)0x8000000100427310;
  v0._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v0);
  type metadata accessor for VKDataDetectorTypes(0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

void sub_1000F5E80(char *a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  v223 = a4;
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  Class v201 = (char *)&v192 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v206 = (char *)&v192 - v12;
  __chkstk_darwin(v13);
  uint64_t v204 = (char *)&v192 - v14;
  __chkstk_darwin(v15);
  id v207 = (char *)&v192 - v16;
  uint64_t v17 = type metadata accessor for URL();
  unint64_t v208 = *(char **)(v17 - 8);
  uint64_t v209 = v17;
  __chkstk_darwin(v17);
  int v197 = (char *)&v192 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v199 = (char *)&v192 - v20;
  __chkstk_darwin(v21);
  unint64_t v200 = (char *)&v192 - v22;
  __chkstk_darwin(v23);
  uint64_t v202 = (char *)&v192 - v24;
  __chkstk_darwin(v25);
  uint64_t v203 = (char *)&v192 - v26;
  __chkstk_darwin(v27);
  uint64_t v205 = (char *)&v192 - v28;
  uint64_t v29 = sub_10000F214(&qword_10051F3D8);
  __chkstk_darwin(v29 - 8);
  unint64_t v213 = (char *)&v192 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v212 = (char *)&v192 - v32;
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v192 - v34;
  uint64_t v36 = type metadata accessor for URLComponents();
  uint64_t v219 = *(void *)(v36 - 8);
  uint64_t v220 = v36;
  __chkstk_darwin(v36);
  uint64_t v211 = (char *)&v192 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  unint64_t v210 = (char *)&v192 - v39;
  __chkstk_darwin(v40);
  unint64_t v217 = (char *)&v192 - v41;
  uint64_t v42 = type metadata accessor for CharacterSet();
  uint64_t v218 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  os_log_type_t v44 = (char *)&v192 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v222 = type metadata accessor for TextDetectorResult.DataDetector(0);
  __chkstk_darwin(v222);
  uint64_t v214 = (char *)&v192 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  uint64_t v198 = (uint64_t)&v192 - v47;
  __chkstk_darwin(v48);
  uint64_t v216 = (uint64_t)&v192 - v49;
  double v51 = __chkstk_darwin(v50);
  double v53 = (char *)&v192 - v52;
  uint64_t v224 = (void (*)(char *, uint64_t, uint64_t))a1;
  uint64_t v54 = *(char **)a1;
  uint64_t v221 = a3;
  if ((v54 & 1) == 0
    || (a2 & 1) == 0
    || (id v55 = [a3 _telephone]) == 0)
  {
LABEL_14:
    if ((v54 & 2) == 0) {
      goto LABEL_33;
    }
    goto LABEL_15;
  }
  uint64_t v56 = v55;
  v196 = v35;
  uint64_t v215 = v4;
  uint64_t v194 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v195 = v57;

  NSString v58 = String._bridgeToObjectiveC()();
  id v59 = [self sharedConfiguration];
  if (!v59)
  {
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v60 = v59;
  uint64_t v35 = (char *)a2;
  id v61 = [v59 countryCode];

  if (!v61)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  a2 = CFPhoneNumberCreate();

  if (!a2)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = v215;
    a3 = v221;
    LOBYTE(a2) = (_BYTE)v35;
LABEL_13:
    uint64_t v35 = v196;
    goto LABEL_14;
  }
  uint64_t v62 = (void *)a2;
  uint64_t String = CFPhoneNumberCreateString();
  LOBYTE(a2) = (_BYTE)v35;
  if (!String)
  {

    swift_bridgeObjectRelease();
    uint64_t v5 = v215;
    a3 = v221;
    goto LABEL_13;
  }
  id v64 = (void *)String;
  id v193 = v62;
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;

  uint64_t v35 = v196;
  if (v194 == v65 && v195 == v67)
  {
    swift_bridgeObjectRelease_n();
LABEL_25:
    if (qword_100517E50 != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    sub_10000F378(v87, (uint64_t)qword_10055E208);
    sub_100107A48((uint64_t)v224, (uint64_t)v53, type metadata accessor for TextDetectorResult.DataDetector);
    CGRect v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v88, v89))
    {
      int v90 = (uint8_t *)swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      *(_DWORD *)int v90 = 136315138;
      v225._countAndFlagsBits = v91;
      uint64_t v92 = (uint64_t *)&v53[*(int *)(v222 + 24)];
      uint64_t v93 = *v92;
      unint64_t v94 = v92[1];
      swift_bridgeObjectRetain();
      uint64_t v226 = sub_1003806B0(v93, v94, &v225._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001029CC((uint64_t)v53, type metadata accessor for TextDetectorResult.DataDetector);
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Found exact phone number match: %s", v90, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1001029CC((uint64_t)v53, type metadata accessor for TextDetectorResult.DataDetector);
    }

LABEL_31:
    char v84 = 0;
    uint64_t v85 = 0x3FF0000000000000;
    goto LABEL_86;
  }
  char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a3 = v221;
  if (v86) {
    goto LABEL_25;
  }

  uint64_t v5 = v215;
  if ((v54 & 2) == 0)
  {
LABEL_33:
    uint64_t v85 = 0;
    char v84 = 1;
    if ((*(unsigned char *)v224 & 0x40) == 0 || (a2 & 0x40) == 0) {
      goto LABEL_86;
    }
    id v95 = [v221 _businessURL];
    if (!v95) {
      goto LABEL_85;
    }
    uint64_t v96 = v95;
    uint64_t v215 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URLComponents.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v98 = v219;
    uint64_t v97 = v220;
    uint64_t v99 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48);
    if (v99(v35, 1, v220) == 1)
    {
      sub_10000FBD8((uint64_t)v35, &qword_10051F3D8);
LABEL_44:
      uint64_t v85 = 0;
      char v84 = 1;
      goto LABEL_86;
    }
    uint64_t v100 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
    uint64_t v101 = v217;
    v100(v217, v35, v97);
    uint64_t v102 = URLComponents.scheme.getter();
    if (!v103)
    {
      (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v97);
      goto LABEL_44;
    }
    char v104 = sub_10012ADDC(v102, v103, &off_1004E49F0);
    swift_bridgeObjectRelease();
    if ((v104 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v220);
      goto LABEL_44;
    }
    uint64_t v105 = (char *)v224 + *(int *)(v222 + 24);
    uint64_t v107 = *(NSObject **)v105;
    uint64_t v106 = (void *)*((void *)v105 + 1);
    uint64_t v108 = (uint64_t)v212;
    URLComponents.init(string:)();
    uint64_t v109 = v220;
    if (v99((char *)v108, 1, v220) == 1)
    {
      sub_10000FBD8(v108, &qword_10051F3D8);
      uint64_t v110 = v219;
    }
    else
    {
      uint64_t v221 = v107;
      uint64_t v111 = v210;
      v100(v210, (char *)v108, v109);
      unint64_t v112 = v111;
      URLComponents.scheme.getter();
      uint64_t v114 = v113;
      swift_bridgeObjectRelease();
      if (!v114)
      {
        v225._countAndFlagsBits = 0x2F2F3A7370747468;
        v225._object = (void *)0xE800000000000000;
        swift_bridgeObjectRetain();
        v125._countAndFlagsBits = (uint64_t)v221;
        v125._object = v106;
        String.append(_:)(v125);
        swift_bridgeObjectRelease();
        uint64_t v110 = v219;
        (*(void (**)(char *, uint64_t))(v219 + 8))(v112, v220);
        goto LABEL_48;
      }
      uint64_t v110 = v219;
      (*(void (**)(char *, uint64_t))(v219 + 8))(v112, v220);
    }
    swift_bridgeObjectRetain();
LABEL_48:
    double v53 = v217;
    uint64_t v115 = (uint64_t)v213;
    URLComponents.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v116 = v220;
    if (v99((char *)v115, 1, v220) == 1)
    {
      sub_10000FBD8(v115, &qword_10051F3D8);
      uint64_t v117 = (uint64_t)v214;
LABEL_57:
      if (qword_100517E50 != -1) {
        swift_once();
      }
      uint64_t v126 = type metadata accessor for Logger();
      sub_10000F378(v126, (uint64_t)qword_10055E208);
      sub_100107A48((uint64_t)v224, v117, type metadata accessor for TextDetectorResult.DataDetector);
      uint64_t v127 = Logger.logObject.getter();
      os_log_type_t v128 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v127, v128))
      {
        uint64_t v129 = (uint8_t *)swift_slowAlloc();
        uint64_t v130 = swift_slowAlloc();
        *(_DWORD *)uint64_t v129 = 136315138;
        v225._countAndFlagsBits = v130;
        char v131 = (uint64_t *)(v117 + *(int *)(v222 + 24));
        uint64_t v132 = *v131;
        unint64_t v133 = v131[1];
        swift_bridgeObjectRetain();
        uint64_t v226 = sub_1003806B0(v132, v133, &v225._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001029CC(v117, type metadata accessor for TextDetectorResult.DataDetector);
        _os_log_impl((void *)&_mh_execute_header, v127, v128, "Failed to parse URL: %s", v129, 0xCu);
        char v84 = 1;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v219 + 8))(v53, v220);
        uint64_t v85 = 0;
        goto LABEL_86;
      }

      sub_1001029CC(v117, type metadata accessor for TextDetectorResult.DataDetector);
      (*(void (**)(char *, uint64_t))(v219 + 8))(v53, v220);
      goto LABEL_44;
    }
    uint64_t v118 = v211;
    v100(v211, (char *)v115, v116);
    uint64_t v119 = URLComponents.scheme.getter();
    if (!v120)
    {
      (*(void (**)(char *, uint64_t))(v110 + 8))(v118, v116);
      uint64_t v117 = (uint64_t)v214;
      goto LABEL_57;
    }
    char v121 = sub_10012ADDC(v119, v120, &off_1004E49F0);
    swift_bridgeObjectRelease();
    uint64_t v117 = (uint64_t)v214;
    if ((v121 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v110 + 8))(v118, v220);
      goto LABEL_57;
    }
    URLComponents.scheme.setter();
    URLComponents.scheme.setter();
    uint64_t v122 = (uint64_t)v207;
    URLComponents.url.getter();
    uint64_t v35 = v208;
    uint64_t v123 = v209;
    uint64_t v124 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v208 + 6);
    if (v124(v122, 1, v209) == 1)
    {
      sub_10000FBD8(v122, &qword_10051E070);
    }
    else
    {
      uint64_t v134 = (void (*)(char *, uint64_t, uint64_t))*((void *)v35 + 4);
      char v135 = v205;
      v134(v205, v122, v123);
      uint64_t v136 = (void (**)(char *, uint64_t))v35;
      uint64_t v137 = (uint64_t)v204;
      URLComponents.url.getter();
      if (v124(v137, 1, v123) == 1)
      {
        v136[1](v135, v123);
        sub_10000FBD8(v137, &qword_10051E070);
        uint64_t v118 = v211;
        uint64_t v35 = (char *)v136;
      }
      else
      {
        uint64_t v138 = v203;
        v134(v203, v137, v123);
        char v139 = v138;
        if (static URL.== infix(_:_:)())
        {
          uint64_t v140 = v217;
          if (qword_100517E50 != -1) {
            swift_once();
          }
          uint64_t v141 = type metadata accessor for Logger();
          sub_10000F378(v141, (uint64_t)qword_10055E208);
          uint64_t v142 = v198;
          sub_100107A48((uint64_t)v224, v198, type metadata accessor for TextDetectorResult.DataDetector);
          uint64_t v143 = Logger.logObject.getter();
          os_log_type_t v144 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v143, v144))
          {
            char v145 = (uint8_t *)swift_slowAlloc();
            uint64_t v146 = swift_slowAlloc();
            *(_DWORD *)char v145 = 136315138;
            uint64_t v224 = (void (*)(char *, uint64_t, uint64_t))(v145 + 4);
            v225._countAndFlagsBits = v146;
            unint64_t v147 = (uint64_t *)(v142 + *(int *)(v222 + 24));
            uint64_t v148 = v123;
            uint64_t v149 = *v147;
            unint64_t v150 = v147[1];
            swift_bridgeObjectRetain();
            uint64_t v226 = sub_1003806B0(v149, v150, &v225._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1001029CC(v142, type metadata accessor for TextDetectorResult.DataDetector);
            _os_log_impl((void *)&_mh_execute_header, v143, v144, "Found exact webURL match: %s", v145, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            unint64_t v151 = (void (*)(char *, uint64_t))*((void *)v208 + 1);
            v151(v203, v148);
            v151(v135, v148);
            uint64_t v152 = v220;
            char v153 = *(void (**)(char *, uint64_t))(v219 + 8);
            v153(v211, v220);
            unint64_t v154 = v217;
          }
          else
          {

            sub_1001029CC(v142, type metadata accessor for TextDetectorResult.DataDetector);
            unint64_t v188 = (void (*)(char *, uint64_t))*((void *)v208 + 1);
            v188(v138, v123);
            v188(v135, v123);
            uint64_t v152 = v220;
            char v153 = *(void (**)(char *, uint64_t))(v219 + 8);
            v153(v211, v220);
            unint64_t v154 = v140;
          }
          v153(v154, v152);
          goto LABEL_31;
        }
        uint64_t v35 = v208;
        unint64_t v155 = (void (*)(char *, uint64_t))*((void *)v208 + 1);
        v155(v139, v123);
        v155(v135, v123);
        uint64_t v118 = v211;
      }
      double v53 = v217;
    }
    uint64_t v156 = URLComponents.path.getter();
    unint64_t v158 = v157;
    swift_bridgeObjectRelease();
    uint64_t v159 = HIBYTE(v158) & 0xF;
    if ((v158 & 0x2000000000000000) == 0) {
      uint64_t v159 = v156 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v160 = (uint64_t)v206;
    if (!v159)
    {
      uint64_t v163 = v220;
      uint64_t v164 = *(void (**)(char *, uint64_t))(v219 + 8);
      v164(v118, v220);
      v164(v53, v163);
      goto LABEL_44;
    }
    URLComponents.path.setter();
    URLComponents.url.getter();
    a2 = v209;
    if (v124(v160, 1, v209) == 1)
    {
      unint64_t v161 = *(void (**)(char *, uint64_t))(v219 + 8);
      unint64_t v162 = v118;
LABEL_79:
      uint64_t v165 = v220;
      v161(v162, v220);
      v161(v53, v165);
      sub_10000FBD8(v160, &qword_10051E070);
      goto LABEL_44;
    }
    os_log_type_t v44 = v202;
    uint64_t v224 = (void (*)(char *, uint64_t, uint64_t))*((void *)v35 + 4);
    v224(v202, v160, a2);
    uint64_t v160 = (uint64_t)v201;
    URLComponents.url.getter();
    if (v124(v160, 1, a2) == 1)
    {
      (*((void (**)(char *, uint64_t))v35 + 1))(v44, a2);
      unint64_t v161 = *(void (**)(char *, uint64_t))(v219 + 8);
      unint64_t v162 = v211;
      goto LABEL_79;
    }
    uint64_t v54 = v200;
    v224(v200, v160, a2);
    char v166 = static URL.== infix(_:_:)();
    uint64_t v167 = v219;
    if (v166)
    {
      if (qword_100517E50 == -1)
      {
LABEL_82:
        uint64_t v168 = type metadata accessor for Logger();
        sub_10000F378(v168, (uint64_t)qword_10055E208);
        unint64_t v169 = (void (*)(char *, char *, uint64_t))*((void *)v35 + 2);
        v169(v199, v54, a2);
        unint64_t v170 = v35;
        unint64_t v171 = v197;
        v169(v197, v44, a2);
        uint64_t v172 = Logger.logObject.getter();
        os_log_type_t v173 = static os_log_type_t.debug.getter();
        int v174 = v173;
        if (os_log_type_enabled(v172, v173))
        {
          uint64_t v175 = swift_slowAlloc();
          uint64_t v224 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
          v225._countAndFlagsBits = (uint64_t)v224;
          *(_DWORD *)uint64_t v175 = 136315394;
          uint64_t v216 = v175 + 4;
          uint64_t v218 = sub_1000FFB84((unint64_t *)&qword_10051E350, (void (*)(uint64_t))&type metadata accessor for URL);
          LODWORD(v222) = v174;
          uint64_t v176 = v199;
          uint64_t v177 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v226 = sub_1003806B0(v177, v178, &v225._countAndFlagsBits);
          uint64_t v221 = v172;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          unint64_t v179 = (void (*)(char *, uint64_t))*((void *)v170 + 1);
          v179(v176, a2);
          *(_WORD *)(v175 + 12) = 2080;
          unint64_t v180 = v197;
          uint64_t v181 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v226 = sub_1003806B0(v181, v182, &v225._countAndFlagsBits);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v179(v180, a2);
          uint64_t v183 = v221;
          _os_log_impl((void *)&_mh_execute_header, v221, (os_log_type_t)v222, "Found host-only webURL match: %s -> %s", (uint8_t *)v175, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v179(v200, a2);
          v179(v202, a2);
        }
        else
        {

          unint64_t v189 = (void (*)(char *, uint64_t))*((void *)v170 + 1);
          v189(v171, a2);
          v189(v199, a2);
          v189(v54, a2);
          v189(v44, a2);
        }
        uint64_t v190 = v220;
        v191 = *(void (**)(char *, uint64_t))(v219 + 8);
        v191(v211, v220);
        v191(v53, v190);
        char v84 = 0;
        uint64_t v85 = 0x3FE3333333333333;
        goto LABEL_86;
      }
LABEL_93:
      swift_once();
      goto LABEL_82;
    }
    uint64_t v184 = (void (*)(char *, uint64_t))*((void *)v35 + 1);
    v184(v54, a2);
    v184(v44, a2);
    uint64_t v185 = *(void (**)(char *, uint64_t))(v167 + 8);
    uint64_t v186 = v220;
    v185(v211, v220);
    v185(v53, v186);
LABEL_85:
    uint64_t v85 = 0;
    char v84 = 1;
    goto LABEL_86;
  }
LABEL_15:
  if ((a2 & 2) == 0) {
    goto LABEL_33;
  }
  id v68 = [a3 shortAddress];
  if (!v68) {
    goto LABEL_33;
  }
  uint64_t v69 = v68;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v70 = v5;

  String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String v225 = String.lowercased()();
  static CharacterSet.punctuationCharacters.getter();
  sub_1000317A0();
  uint64_t v71 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v73 = v72;
  (*(void (**)(char *, uint64_t))(v218 + 8))(v44, v42);
  swift_bridgeObjectRelease();
  v74._countAndFlagsBits = v71;
  uint64_t v5 = v70;
  v74._object = v73;
  LOBYTE(v69) = String.hasPrefix(_:)(v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0) {
    goto LABEL_33;
  }
  if (qword_100517E50 != -1) {
    swift_once();
  }
  uint64_t v75 = type metadata accessor for Logger();
  sub_10000F378(v75, (uint64_t)qword_10055E208);
  uint64_t v76 = v216;
  sub_100107A48((uint64_t)v224, v216, type metadata accessor for TextDetectorResult.DataDetector);
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v77, v78))
  {
    CGFloat v79 = (uint8_t *)swift_slowAlloc();
    uint64_t v80 = swift_slowAlloc();
    *(_DWORD *)CGFloat v79 = 136315138;
    v225._countAndFlagsBits = v80;
    uint64_t v81 = (uint64_t *)(v76 + *(int *)(v222 + 24));
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    swift_bridgeObjectRetain();
    uint64_t v226 = sub_1003806B0(v82, v83, &v225._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001029CC(v76, type metadata accessor for TextDetectorResult.DataDetector);
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "Found address match: %s", v79, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001029CC(v76, type metadata accessor for TextDetectorResult.DataDetector);
  }

  char v84 = 0;
  uint64_t v85 = 0x3FF0000000000000;
LABEL_86:
  uint64_t v187 = v223;
  uint64_t *v223 = v85;
  *((unsigned char *)v187 + 8) = v84;
}

void *sub_1000F783C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001008FC(a1, a2, a3, *v3);
}

uint64_t sub_1000F7844()
{
  return sub_1000F5DDC();
}

void sub_1000F784C(double *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  double v6 = *a1;
  if (*a1 >= 1.0) {
    goto LABEL_23;
  }
  uint64_t v9 = a2[1];
  uint64_t v41 = *a2;
  uint64_t v42 = v9;
  *(void *)&v48[0] = 32;
  v48[1] = -1.7573882e159;
  v47[0] = 0.0;
  v47[1] = -2.68156159e154;
  sub_1000317A0();
  uint64_t v10 = (Swift::String_optional *)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  unint64_t v12 = v11;
  if (String.count.getter() < 5 || (v48[0] = 0.0, (uint64_t v13 = *(void *)(a3 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    double v20 = 0.0;
    goto LABEL_9;
  }
  uint64_t v38 = a4;
  uint64_t v40 = a5;
  swift_bridgeObjectRetain();
  uint64_t v14 = (uint64_t *)(a3 + 40);
  do
  {
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = v14[3];
    uint64_t v19 = v14[4];
    uint64_t v41 = *(v14 - 1);
    uint64_t v42 = v15;
    uint64_t v43 = v16;
    uint64_t v44 = v17;
    uint64_t v45 = v18;
    uint64_t v46 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000F7D28(v48, (uint64_t)&v41, v10, v12, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double v20 = v47[0];
    v48[0] = v47[0];
    v14 += 6;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20 < 1.0)
  {
    a5 = v40;
    a4 = v38;
LABEL_9:
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_1000F81D0(v21, a4, 2u, 0.7);
    if (v22 < 0.0) {
      double v23 = 0.0;
    }
    else {
      double v23 = v22;
    }
    if (qword_100517E50 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10000F378(v24, (uint64_t)qword_10055E208);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_type_t type = v26;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v28 = Array.description.getter();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      *(void *)&v48[0] = sub_1003806B0(v28, v30, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v31 = Array.description.getter();
      unint64_t v33 = v32;
      swift_bridgeObjectRelease();
      *(void *)&v48[0] = sub_1003806B0(v31, v33, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 22) = 2080;
      sub_10000F214(&qword_10051F350);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_10043D4F0;
      *(void *)(v34 + 56) = &type metadata for Double;
      *(void *)(v34 + 64) = &protocol witness table for Double;
      *(double *)(v34 + 32) = v23;
      uint64_t v35 = String.init(format:_:)();
      *(void *)&v48[0] = sub_1003806B0(v35, v36, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, type, "  \"%s\" / \"%s\" → %s", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    if (v6 > v20) {
      double v37 = v6;
    }
    else {
      double v37 = v20;
    }
    if (v37 > v23) {
      double v6 = v37;
    }
    else {
      double v6 = v23;
    }
    goto LABEL_23;
  }
  if (v6 <= v20) {
    double v6 = v20;
  }
  a5 = v40;
LABEL_23:
  *a5 = v6;
}

void sub_1000F7D28(double *a1@<X0>, uint64_t a2@<X1>, Swift::String_optional *a3@<X2>, unint64_t a4@<X3>, double *a5@<X8>)
{
  double v5 = *a1;
  if (*a1 < 1.0)
  {
    os_log_type_t v26 = a5;
    uint64_t v8 = *(void **)(a2 + 16);
    uint64_t v9 = *(void **)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    double v11 = 0.0;
    do
    {
      if (v11 < 1.0)
      {
        int v13 = *((unsigned __int8 *)&off_1004E49A0 + v10 + 32);
        if (*((unsigned char *)&off_1004E49A0 + v10 + 33))
        {
          double v12 = sub_100100018((uint64_t)a3, a4, (uint64_t)v8, (uint64_t)v9, v13);
        }
        else
        {
          v27[0] = (uint64_t)a3;
          v27[1] = a4;
          if (v13)
          {
            if (v13 == 1)
            {
              uint64_t v14 = sub_10031D3D4(a3, a4, v8, v9, 0, (void *)1);
              uint64_t v15 = String.count.getter();
              uint64_t v16 = String.count.getter();
              uint64_t v17 = v16 <= v15 ? v15 : v16;
              double v12 = 1.0 - (double)v14 / (double)v17;
            }
            else
            {
              swift_bridgeObjectRetain();
              sub_1000FE988((uint64_t)v8, (unint64_t)v9, (unint64_t)a3, a4);
              double v12 = v18;
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            sub_1000317A0();
            double v12 = (StringProtocol.contains<A>(_:)() & 1) != 0 ? 1.0 : 0.0;
          }
        }
        if (v11 <= v12) {
          double v11 = v12;
        }
      }
      v10 += 2;
    }
    while (v10 != 6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_100517E50 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10000F378(v19, (uint64_t)qword_10055E208);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    double v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      v27[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315650;
      swift_bridgeObjectRetain();
      sub_1003806B0((uint64_t)a3, a4, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1003806B0((uint64_t)v8, (unint64_t)v9, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 22) = 2080;
      sub_10000F214(&qword_10051F350);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_10043D4F0;
      *(void *)(v23 + 56) = &type metadata for Double;
      *(void *)(v23 + 64) = &protocol witness table for Double;
      *(double *)(v23 + 32) = v11;
      uint64_t v24 = String.init(format:_:)();
      sub_1003806B0(v24, v25, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "  \"%s\" / \"%s\" → %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    if (v5 <= v11) {
      double v5 = v11;
    }
    a5 = v26;
  }
  *a5 = v5;
}

uint64_t sub_1000F81D0(uint64_t a1, uint64_t a2, unsigned __int16 a3, double a4)
{
  uint64_t v152 = type metadata accessor for IndexSet();
  uint64_t v151 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v9 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    IndexSet.init()();
    return (*(uint64_t (**)(char *, uint64_t))(v151 + 8))(v9, v152);
  }
  int v162 = a3;
  int v157 = a3;
  uint64_t v153 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  uint64_t v148 = a1;
  uint64_t v12 = a1 + 56;
  uint64_t v150 = v10;
  do
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    BOOL v14 = __OFADD__(v11, v13);
    v11 += v13;
    if (v14)
    {
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
    v12 += 32;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  IndexSet.init()();
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v161 = a2 + 32;
  uint64_t v16 = v15;
  double v17 = (double)v11;
  swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  *(void *)&long long v19 = 134217984;
  long long v142 = v19;
  double v20 = 0.0;
  uint64_t v159 = v16;
  unint64_t v155 = v9;
LABEL_11:
  if (!v16) {
    goto LABEL_10;
  }
  uint64_t v145 = v18;
  uint64_t v24 = (unint64_t *)(v153 + 32 * v18);
  unint64_t v26 = *v24;
  unint64_t v25 = v24[1];
  unint64_t v144 = *v24 >> 16;
  uint64_t v27 = v24[3];
  uint64_t v168 = v24[2];
  unint64_t v154 = v25 ^ v26;
  unint64_t v143 = v25 >> 16;
  unint64_t v166 = v25 >> 14;
  unint64_t v28 = v26 >> 14;
  swift_bridgeObjectRetain();
  Swift::Int v29 = 0;
  Swift::Int v30 = 0;
  int v31 = 1;
  double v32 = 0.0;
  unint64_t v167 = v25;
  uint64_t v163 = v27;
  unint64_t v164 = v26;
  unint64_t v156 = v26 >> 14;
LABEL_13:
  int v147 = v31;
  Swift::Int v146 = v29;
  BOOL v33 = v32 < 0.0;
  if (a4 > 0.0) {
    BOOL v33 = 0;
  }
  BOOL v149 = v33;
LABEL_19:
  Swift::Int v29 = v30++;
  if (IndexSet.contains(_:)(v29)) {
    goto LABEL_18;
  }
  uint64_t v34 = (unint64_t *)(v161 + 32 * v29);
  unint64_t v36 = *v34;
  unint64_t v35 = v34[1];
  uint64_t v38 = v34[2];
  uint64_t v37 = v34[3];
  uint64_t v171 = v37;
  unint64_t v174 = v35;
  unint64_t v175 = v36;
  if ((v162 & 0x100) == 0)
  {
    unint64_t v192 = v26;
    unint64_t v193 = v25;
    uint64_t v194 = v168;
    uint64_t v195 = v27;
    unint64_t v188 = v36;
    unint64_t v189 = v35;
    uint64_t v190 = v38;
    uint64_t v191 = v37;
    if (!v157)
    {
      sub_100107968();
      if (StringProtocol.contains<A>(_:)()) {
        double v43 = 1.0;
      }
      else {
        double v43 = 0.0;
      }
      goto LABEL_124;
    }
    if (v157 == 1)
    {
      uint64_t v39 = v37;
      swift_bridgeObjectRetain();
      uint64_t v181 = sub_10031C65C(v26, v25, v168, v27, v175, v174, v38, v39, 0, 1u);
      uint64_t v40 = Substring.distance(from:to:)();
      unint64_t v28 = v156;
      uint64_t v41 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v41 <= v40) {
        uint64_t v42 = v40;
      }
      else {
        uint64_t v42 = v41;
      }
      uint64_t v16 = v159;
      unint64_t v25 = v167;
      double v43 = 1.0 - (double)v181 / (double)v42;
      goto LABEL_124;
    }
    Swift::Int v158 = v30;
    uint64_t v186 = &type metadata for Substring;
    uint64_t v82 = v37;
    unint64_t v187 = sub_100107968();
    unint64_t v83 = (void *)swift_allocObject();
    v185[0] = v83;
    unint64_t v84 = v174;
    v83[2] = v175;
    v83[3] = v84;
    v83[4] = v38;
    v83[5] = v82;
    sub_10000F578((uint64_t)v185, (uint64_t)v183);
    if (!(v154 >> 14))
    {
      swift_bridgeObjectRetain_n();
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v183);
      double v43 = 0.0;
LABEL_123:
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v185);
      swift_bridgeObjectRelease();
      unint64_t v25 = v167;
      Swift::Int v30 = v158;
      goto LABEL_124;
    }
    uint64_t v97 = sub_10000F3B0(v183, v184);
    unint64_t v98 = v97[1] ^ *v97;
    swift_bridgeObjectRetain_n();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v183);
    double v43 = 0.0;
    unint64_t v99 = v98 >> 14;
    uint64_t v16 = v159;
    if (!v99) {
      goto LABEL_123;
    }
    unint64_t v100 = v83[2];
    unint64_t v101 = v83[3];
    uint64_t v102 = v83[4];
    unint64_t v103 = v83[5];
    if (v168 == v102 && v27 == v103 && v144 == v100 >> 16)
    {
      double v43 = 1.0;
      if (v143 == v101 >> 16) {
        goto LABEL_123;
      }
    }
    LOBYTE(vars0) = 0;
    double v43 = 1.0;
    if (_stringCompareInternal(_:_:_:_:expecting:)()) {
      goto LABEL_123;
    }
    Swift::Int v160 = v29;
    char v104 = sub_1000FDC30(v100, v101, v102, v103, v26, v167, v168, v27);
    uint64_t v105 = Substring.distance(from:to:)();
    uint64_t v106 = Substring.distance(from:to:)();
    uint64_t v107 = v105 + v106;
    if (__OFADD__(v105, v106))
    {
LABEL_146:
      __break(1u);
LABEL_147:
      LODWORD(vars0) = 0;
      uint64_t v197 = 936;
      LOBYTE(v196) = 2;
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    int64_t v108 = *((void *)v104 + 2);
    if (v108)
    {
      unint64_t v182 = _swiftEmptyArrayStorage;
      sub_100040730(0, v108, 0);
      uint64_t v109 = v182;
      uint64_t v110 = v104 + 40;
      do
      {
        swift_bridgeObjectRetain();
        uint64_t v111 = String.count.getter();
        swift_bridgeObjectRelease();
        unint64_t v182 = v109;
        unint64_t v113 = v109[2];
        unint64_t v112 = v109[3];
        if (v113 >= v112 >> 1)
        {
          sub_100040730(v112 > 1, v113 + 1, 1);
          uint64_t v109 = v182;
        }
        v110 += 16;
        v109[2] = v113 + 1;
        v109[v113 + 4] = v111;
        --v108;
      }
      while (v108);
      swift_bridgeObjectRelease();
      unint64_t v26 = v164;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v109 = _swiftEmptyArrayStorage;
    }
    uint64_t v138 = v109[2];
    unint64_t v28 = v156;
    Swift::Int v29 = v160;
    uint64_t v139 = 0;
    if (!v138)
    {
LABEL_122:
      swift_bridgeObjectRelease();
      double v43 = 2.0 / (double)v107 * (double)v139;
      uint64_t v16 = v159;
      goto LABEL_123;
    }
    uint64_t v140 = v109 + 4;
    while (1)
    {
      uint64_t v141 = *v140++;
      BOOL v14 = __OFADD__(v139, v141);
      v139 += v141;
      if (v14) {
        break;
      }
      if (!--v138) {
        goto LABEL_122;
      }
    }
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  unint64_t v44 = v28;
  uint64_t v45 = v37;
  swift_bridgeObjectRetain();
  uint64_t v46 = v45;
  uint64_t v47 = Substring.distance(from:to:)();
  uint64_t v48 = v47 + 1;
  if (__OFADD__(v47, 1)) {
    goto LABEL_142;
  }
  if (v48 < 0) {
    goto LABEL_147;
  }
  uint64_t v173 = v38;
  Swift::Int v160 = v29;
  if (v47 == -1)
  {
    Swift::Int v50 = v30;
    double v51 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v49 = v47;
    Swift::Int v50 = v30;
    double v51 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v51[2] = v48;
    bzero(v51 + 4, 8 * v49 + 8);
  }
  unint64_t v25 = v167;
  uint64_t v52 = Substring.distance(from:to:)();
  uint64_t v53 = v52 + 1;
  if (__OFADD__(v52, 1)) {
    goto LABEL_143;
  }
  if (v53 < 0) {
    goto LABEL_147;
  }
  if (v52 == -1)
  {
    swift_bridgeObjectRelease();
    unint64_t v170 = _swiftEmptyArrayStorage;
    goto LABEL_41;
  }
  uint64_t v54 = v52;
  sub_10000F214(&qword_100518A90);
  id v55 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v55[2] = v53;
  v55[4] = v51;
  unint64_t v170 = v55;
  if (v53 == 1)
  {
LABEL_41:
    Swift::Int v30 = v50;
    goto LABEL_42;
  }
  v55[5] = v51;
  if (v53 != 2)
  {
    uint64_t v56 = v54 - 1;
    uint64_t v57 = v170 + 6;
    do
    {
      *v57++ = v51;
      swift_bridgeObjectRetain();
      --v56;
    }
    while (v56);
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = v159;
  Swift::Int v30 = v50;
  uint64_t v46 = v171;
LABEL_42:
  swift_bridgeObjectRetain();
  if (v44 == v166)
  {
    unint64_t v28 = v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double v43 = 0.0;
    Swift::Int v29 = v160;
    uint64_t v9 = v155;
    goto LABEL_124;
  }
  Swift::Int v158 = v30;
  unint64_t v178 = 0;
  unint64_t v177 = 0;
  uint64_t v179 = 0;
  unint64_t v58 = 0;
  unint64_t v176 = v174 >> 14;
  unint64_t v165 = v175 >> 14;
  unint64_t v180 = v170 + 4;
  while (1)
  {
    uint64_t v181 = Substring.subscript.getter();
    uint64_t v61 = v60;
    uint64_t v62 = Substring.index(after:)();
    unint64_t v63 = v58 + 1;
    if (__OFADD__(v58, 1)) {
      goto LABEL_141;
    }
    unint64_t v169 = v62;
    swift_bridgeObjectRetain();
    if (v165 != v176) {
      break;
    }
    uint64_t v59 = v46;
LABEL_46:
    swift_bridgeObjectRelease();
    uint64_t v46 = v59;
    swift_bridgeObjectRelease();
    unint64_t v58 = v63;
    uint64_t v27 = v163;
    unint64_t v26 = v164;
    unint64_t v25 = v167;
    if (v166 == v169 >> 14)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v179 <= 0) {
        goto LABEL_16;
      }
      unint64_t v85 = Substring.index(_:offsetBy:)();
      unint64_t v86 = Substring.index(_:offsetBy:)();
      unint64_t v87 = Substring.index(_:offsetBy:)();
      unint64_t v88 = Substring.index(_:offsetBy:)();
      unint64_t v89 = v86 >> 14;
      if (v86 >> 14 > v85 >> 14 || v87 >> 14 < v88 >> 14) {
        goto LABEL_145;
      }
      unint64_t v25 = v167;
      uint64_t v90 = Substring.subscript.getter();
      unint64_t v92 = v91;
      uint64_t v94 = v93;
      uint64_t v96 = v95;
      if (Substring.distance(from:to:)() > 4)
      {
        double v114 = (double)Substring.distance(from:to:)();
        double v115 = v114 / (double)Substring.distance(from:to:)();
        if (v115 < 0.75 && (v115 < 0.25 || v89 != v156))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v9 = v155;
          uint64_t v16 = v159;
          unint64_t v25 = v167;
          goto LABEL_17;
        }
        unint64_t v117 = v167;
        uint64_t v118 = v96;
        uint64_t v119 = v168;
        uint64_t v120 = Substring.distance(from:to:)();
        uint64_t v121 = Substring.distance(from:to:)();
        if (v121 < v120) {
          uint64_t v120 = v121;
        }
        uint64_t v122 = Substring.distance(from:to:)();
        uint64_t v123 = v94;
        uint64_t v124 = v122;
        v185[0] = v90;
        v185[1] = v92;
        uint64_t v125 = v123;
        v185[2] = v123;
        uint64_t v186 = (void *)v118;
        uint64_t v181 = v118;
        v183[0] = v26;
        v183[1] = v117;
        v183[2] = v119;
        uint64_t v184 = v27;
        if (v157)
        {
          if (v157 == 1)
          {
            uint64_t v126 = sub_10031C65C(v90, v92, v123, v181, v26, v167, v168, v27, 0, 1u);
            unint64_t v180 = (void *)v120;
            uint64_t v127 = v126;
            uint64_t v128 = Substring.distance(from:to:)();
            uint64_t v129 = Substring.distance(from:to:)();
            if (v129 <= v128) {
              uint64_t v130 = v128;
            }
            else {
              uint64_t v130 = v129;
            }
            double v131 = (double)v127;
            uint64_t v120 = (uint64_t)v180;
            double v132 = 1.0 - v131 / (double)v130;
          }
          else
          {
            swift_bridgeObjectRetain();
            sub_1000FD824(v26, v167, v168, v27, v90, v92, v125, v181);
            double v132 = v133;
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          sub_100107968();
          if (StringProtocol.contains<A>(_:)()) {
            double v132 = 1.0;
          }
          else {
            double v132 = 0.0;
          }
        }
        uint64_t v9 = v155;
        if (qword_100517E50 != -1) {
          swift_once();
        }
        double v43 = ((double)v120 / (double)v124 * -0.5 + 1.0) * v132;
        uint64_t v134 = type metadata accessor for Logger();
        sub_10000F378(v134, (uint64_t)qword_10055E208);
        char v135 = Logger.logObject.getter();
        os_log_type_t v136 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v135, v136))
        {
          uint64_t v137 = swift_slowAlloc();
          *(_DWORD *)uint64_t v137 = v142;
          *(double *)(v137 + 4) = v43;
          _os_log_impl((void *)&_mh_execute_header, v135, v136, "LCS is sufficiently-long. Clamping score to at least %f", (uint8_t *)v137, 0xCu);
          swift_slowDealloc();
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        uint64_t v16 = v159;
        unint64_t v25 = v167;
        unint64_t v28 = v156;
        Swift::Int v30 = v158;
        Swift::Int v29 = v160;
LABEL_124:
        if (v32 >= v43 || v43 < a4) {
          goto LABEL_18;
        }
        goto LABEL_128;
      }
      swift_bridgeObjectRelease();
LABEL_16:
      swift_bridgeObjectRelease();
      uint64_t v9 = v155;
      uint64_t v16 = v159;
LABEL_17:
      unint64_t v28 = v156;
      Swift::Int v30 = v158;
      Swift::Int v29 = v160;
      if (!v149)
      {
LABEL_18:
        if (v30 != v16) {
          goto LABEL_19;
        }
        double v43 = v32;
        Swift::Int v29 = v146;
        if (v147)
        {
          swift_bridgeObjectRelease();
LABEL_9:
          uint64_t v18 = v145;
LABEL_10:
          if (++v18 == v150) {
            goto LABEL_139;
          }
          goto LABEL_11;
        }
LABEL_8:
        IndexSet.insert(_:)(v29);
        uint64_t v22 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        double v23 = (double)v22;
        uint64_t v16 = v159;
        double v20 = v20 + v43 * v23 / v17;
        goto LABEL_9;
      }
      double v43 = 0.0;
LABEL_128:
      int v31 = 0;
      double v32 = v43;
      if (v30 == v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  unint64_t v172 = v58;
  unint64_t v64 = 0;
  uint64_t v59 = v46;
  while (1)
  {
    uint64_t v9 = (char *)v175;
    uint64_t v65 = Substring.subscript.getter();
    uint64_t v67 = v66;
    uint64_t v68 = Substring.index(after:)();
    unint64_t v69 = v64 + 1;
    if (__OFADD__(v64, 1)) {
      break;
    }
    unint64_t v70 = v68;
    if (v181 == v65 && v61 == v67)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v71 & 1) == 0) {
        goto LABEL_50;
      }
    }
    unint64_t v72 = v170[2];
    if (v172 >= v72) {
      goto LABEL_133;
    }
    uint64_t v73 = v180[v172];
    if (v64 >= *(void *)(v73 + 16)) {
      goto LABEL_134;
    }
    uint64_t v74 = *(void *)(v73 + 8 * v64 + 32);
    uint64_t v75 = v74 + 1;
    if (__OFADD__(v74, 1)) {
      goto LABEL_135;
    }
    if (v63 >= v72) {
      goto LABEL_136;
    }
    uint64_t v76 = v180;
    uint64_t v77 = (void *)v180[v63];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v76[v63] = v77;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v77 = sub_1003068B0(v77);
      v180[v63] = v77;
    }
    uint64_t v59 = v171;
    if ((v69 & 0x8000000000000000) != 0) {
      goto LABEL_137;
    }
    if (v69 >= v77[2]) {
      goto LABEL_138;
    }
    v77[v69 + 4] = v75;
    uint64_t v79 = v179;
    unint64_t v80 = v178;
    if (v179 < v75) {
      unint64_t v80 = v64 + 1;
    }
    unint64_t v178 = v80;
    unint64_t v81 = v177;
    if (v179 < v75) {
      unint64_t v81 = v63;
    }
    unint64_t v177 = v81;
    if (v179 <= v75) {
      uint64_t v79 = v75;
    }
    uint64_t v179 = v79;
LABEL_50:
    ++v64;
    if (v176 == v70 >> 14) {
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v151 + 8))(v9, v152);
}

uint64_t sub_1000F94CC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051F3B8);
  __chkstk_darwin(v4 - 8);
  double v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22._uint64_t countAndFlagsBits = a1;
  v22._object = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFLL;
  }
  v22._uint64_t countAndFlagsBits = v7;
  v22._object = (void *)v8;
  uint64_t v23 = 0;
  uint64_t v24 = v9;
  swift_bridgeObjectRetain();
  Swift::String_optional v10 = String.Iterator.next()();
  if (v10.value._object)
  {
    uint64_t countAndFlagsBits = v10.value._countAndFlagsBits;
    object = v10.value._object;
    do
    {
      if ((Character.isSymbol.getter() & 1) == 0 && (Character.isPunctuation.getter() & 1) == 0)
      {
        v14._uint64_t countAndFlagsBits = countAndFlagsBits;
        v14._object = object;
        String.append(_:)(v14);
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v13 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
      object = v13.value._object;
    }
    while (v13.value._object);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v15 = String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String v22 = v15;
  static Locale.current.getter();
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 0, 1, v16);
  sub_1000317A0();
  uint64_t v17 = StringProtocol.folding(options:locale:)();
  long long v19 = v18;
  sub_10000FBD8((uint64_t)v6, &qword_10051F3B8);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = v17;
  v22._object = v19;
  uint64_t v20 = StringProtocol.decomposedStringWithCompatibilityMapping.getter();
  swift_bridgeObjectRelease();
  return v20;
}

double sub_1000F96FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010043C(a2, a3);
}

unint64_t sub_1000F970C()
{
  return 0xD000000000000013;
}

void sub_1000F9728(double *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, double *a5@<X8>)
{
  double v9 = *a1;
  uint64_t v11 = *a2;
  unint64_t v10 = a2[1];
  double v12 = 1.0;
  BOOL v13 = *a2 == a3 && v10 == a4;
  if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v19[0] = v11;
    v19[1] = v10;
    sub_1000317A0();
    double v12 = 0.0;
    if ((StringProtocol.contains<A>(_:)() & 1) == 0) {
      goto LABEL_13;
    }
    double v12 = 0.7;
  }
  if (qword_100517E50 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000F378(v14, (uint64_t)qword_10055E208);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  Swift::String v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    v19[5] = v5;
    v19[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315650;
    swift_bridgeObjectRetain();
    sub_1003806B0(a3, a4, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1003806B0(v11, v10, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Brand '%s' / %s → %f", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
LABEL_13:
  if (v9 > v12) {
    double v18 = v9;
  }
  else {
    double v18 = v12;
  }
  *a5 = v18;
}

double sub_1000F9A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    return 0.0;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_100100698(v5, a2, 0.0);
  double v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v7;
}

unint64_t sub_1000F9AC0()
{
  return 0xD000000000000019;
}

void sub_1000F9ADC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v72 = a4;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v73 = *(void *)(v12 - 8);
  double v13 = __chkstk_darwin(v12);
  Swift::String v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v16 = *(void **)a1;
  uint64_t v74 = *(void *)(a1 + 8);
  id v17 = [v16 _identifier:v13];
  if (!v17)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  double v18 = v17;
  if (!*(void *)(a2 + 16) || (unint64_t v19 = sub_10032B008((uint64_t)v17), (v20 & 1) == 0))
  {

    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return;
  }
  uint64_t v21 = *(void *)(a2 + 56) + 24 * v19;
  double v22 = *(double *)v21;
  uint64_t v71 = *(void *)(v21 + 8);
  uint64_t v23 = *(unsigned __int8 *)(v21 + 16);
  uint64_t v69 = a5;
  uint64_t v70 = v23;

  id v24 = [self matchingPolicyForMapItem:v16];
  uint64_t v25 = v74;
  switch((unint64_t)v24)
  {
    case 1uLL:
      uint64_t v26 = 0;
      BOOL v27 = a3 != 0;
      break;
    case 2uLL:
      uint64_t v26 = 0;
      BOOL v27 = 0;
      break;
    case 3uLL:
      BOOL v27 = 0;
      uint64_t v26 = 0x3FE8000000000000;
      break;
    case 4uLL:
      uint64_t v26 = 1;
      BOOL v27 = 1;
      break;
    default:
      BOOL v27 = 0;
      uint64_t v26 = 0x3FE0000000000000;
      uint64_t v25 = v74;
      break;
  }
  BOOL v67 = v27;
  double v68 = *(double *)&v26;
  uint64_t v28 = v73;
  if (qword_100517E50 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_10000F378(v12, (uint64_t)qword_10055E208);
  Swift::Int v30 = *(void (**)(char *))(v28 + 16);
  uint64_t v66 = v29;
  v30(v15);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  int v31 = Logger.logObject.getter();
  int v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, (os_log_type_t)v65))
  {
    os_log_t v63 = v31;
    uint64_t v64 = v6;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    v75[0] = v62;
    *(_DWORD *)uint64_t v32 = 136315394;
    id v33 = [v16 name];
    if (!v33)
    {
LABEL_27:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      __break(1u);
      JUMPOUT(0x1000FA0F8);
    }
    uint64_t v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v37 = v36;

    uint64_t v78 = sub_1003806B0(v35, v37, v75);
    uint64_t v61 = &v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    double v38 = v68;
    char v39 = v67;
    uint64_t v40 = sub_1000F4F80(*(uint64_t *)&v68, v67);
    uint64_t v78 = sub_1003806B0(v40, v41, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v42 = v63;
    _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v65, "Scoring \"%s\" with recipe \"%s\"", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    uint64_t v25 = v74;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v73 + 8))(v15, v12);
  }
  else
  {
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v12);
    double v38 = v68;
    char v39 = v67;
  }
  sub_1000F508C(v38, v39, v75);
  uint64_t v43 = v76;
  uint64_t v44 = v77;
  sub_10000F3B0(v75, v76);
  uint64_t v45 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v44 + 16))(v16, v25, v72, v69, v71, v70, v43, v44, v22);
  double v47 = v46;
  uint64_t v48 = v45;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v75);
  if (v47 > 1.0) {
    double v47 = 1.0;
  }
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    double v51 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)double v51 = 134217984;
    *(double *)uint64_t v75 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "→ Final score: %f", v51, 0xCu);
    swift_slowDealloc();
  }

  id v52 = [v16 _identifier];
  if (!v52) {
    goto LABEL_25;
  }
  uint64_t v53 = v52;
  id v54 = [objc_allocWithZone((Class)MKMapItemIdentifier) initWithGEOMapItemIdentifier:v52];

  id v55 = [v16 name];
  if (!v55)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v56 = v55;
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;

  *(void *)a6 = v54;
  *(void *)(a6 + 8) = v57;
  *(void *)(a6 + 16) = v59;
  *(double *)(a6 + 24) = v47;
  *(double *)(a6 + 32) = v22;
  uint64_t v60 = v70;
  *(void *)(a6 + 40) = v71;
  *(void *)(a6 + 48) = v60;
  *(void *)(a6 + 56) = v48;
}

uint64_t sub_1000FA108(void *a1, void *a2)
{
  Swift::String v2 = (void *)a1[2];
  uint64_t v3 = (void *)a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }

  return sub_1003E082C(v2, v3);
}

id sub_1000FA17C@<X0>(void *a1@<X8>)
{
  id result = [*v1 _identifier];
  if (result) {
    *a1 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FA1C0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  *(void *)(v9 + 88) = v8;
  *(double *)(v9 + 80) = a8;
  *(unsigned char *)(v9 + 97) = a7;
  *(void *)(v9 + 64) = a5;
  *(void *)(v9 + 72) = a6;
  *(void *)(v9 + 48) = a3;
  *(void *)(v9 + 56) = a4;
  *(unsigned char *)(v9 + 96) = a2;
  *(void *)(v9 + 40) = a1;
  return _swift_task_switch(sub_1000FA1F8, v8, 0);
}

id sub_1000FA1F8()
{
  uint64_t v67 = v0;
  id result = [self sharedConfiguration];
  if (result)
  {
    Swift::String v2 = result;
    unsigned int v3 = [result currentCountrySupportsFeature:11];

    if (!v3)
    {
      sub_1000FFB30();
      swift_allocError();
      *(void *)(v17 + 8) = 0;
      *(void *)(v17 + 16) = 0;
      *(void *)uint64_t v17 = 3;
      *(unsigned char *)(v17 + 24) = 2;
      swift_willThrow();
LABEL_35:
      double v47 = *(uint64_t (**)(void))(v0 + 8);
      return (id)v47();
    }
    if (*(unsigned char *)(v0 + 97)) {
      BOOL v4 = (void **)(v0 + 56);
    }
    else {
      BOOL v4 = (void **)(v0 + 64);
    }
    uint64_t v5 = *v4;
    if (*(double *)(v0 + 80) <= 250.0) {
      double v6 = *(double *)(v0 + 80);
    }
    else {
      double v6 = 250.0;
    }
    id v7 = v5;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    unint64_t v10 = &selRef_headingAvailable;
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315394;
      v66[0] = v12;
      [v7 coordinate];
      *(void *)(v0 + 24) = v13;
      *(void *)(v0 + 16) = v14;
      type metadata accessor for CLLocationCoordinate2D(0);
      uint64_t v15 = String.init<A>(describing:)();
      *(void *)(v0 + 16) = sub_1003806B0(v15, v16, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2048;
      *(double *)(v0 + 16) = v6;
      unint64_t v10 = &selRef_headingAvailable;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Generating matches for %s with radius %f meters", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v18 = [v7 v10[41]];
    double v22 = sub_1000F326C((uint64_t)v18, v19, v20, v21, v6);
    if (!v22)
    {
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Results for this location have not yet been fetched", v37, 2u);
        swift_slowDealloc();
      }

      sub_1000FFB30();
      swift_allocError();
      *(void *)(v38 + 8) = 0;
      *(void *)(v38 + 16) = 0;
      *(void *)uint64_t v38 = 2;
      *(unsigned char *)(v38 + 24) = 2;
LABEL_34:
      swift_willThrow();

      goto LABEL_35;
    }
    uint64_t v23 = (uint64_t)v22;
    uint64_t v24 = *(void *)(v0 + 40);
    uint64_t v64 = v7;
    uint64_t v65 = (uint64_t)v22;
    if (v24 && (*(unsigned char *)(v0 + 96) & 1) != 0)
    {
      uint64_t v25 = v22[2];
      if (v25)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = v23 + 40;
        do
        {
          BOOL v27 = *(void **)(v26 - 8);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          id v28 = [v27 _styleAttributes];
          if (v28)
          {
            uint64_t v29 = v28;
            unsigned int v30 = [v28 poiType];

            if (v30 == 131)
            {
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              uint64_t v23 = v65;
              swift_bridgeObjectRelease();
              goto LABEL_22;
            }
          }
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          v26 += 16;
          --v25;
        }
        while (v25);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_1000FFB30();
      swift_allocError();
      *(void *)(v46 + 8) = 0;
      *(void *)(v46 + 16) = 0;
      *(void *)uint64_t v46 = 4;
      *(unsigned char *)(v46 + 24) = 2;
      goto LABEL_34;
    }
LABEL_22:
    uint64_t v31 = sub_100101DF0(v23, *(void **)(v0 + 56), *(void **)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 97));
    uint64_t v32 = swift_bridgeObjectRetain();
    id v33 = sub_1001021B4(v32);
    swift_bridgeObjectRelease();
    if (v24) {
      unint64_t v34 = *(void *)(v0 + 40);
    }
    else {
      unint64_t v34 = sub_10031B7B8((uint64_t)_swiftEmptyArrayStorage);
    }
    swift_bridgeObjectRetain();
    char v39 = sub_1000F01F0(v34);
    swift_bridgeObjectRelease();
    if (v39[2])
    {
      sub_10000F214((uint64_t *)&unk_1005251F0);
      uint64_t v40 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v40 = &_swiftEmptyDictionarySingleton;
    }
    v66[0] = (uint64_t)v40;
    uint64_t v41 = swift_bridgeObjectRetain();
    sub_1000FD4A0(v41, 1, v66);
    uint64_t v42 = *(void *)(v0 + 40);
    uint64_t v43 = *(unsigned __int8 *)(v0 + 96);
    swift_bridgeObjectRelease();
    uint64_t v44 = v66[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v45 = sub_100101288(v65, v31, v42, v43, (uint64_t)v33, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v66[0] = (uint64_t)v45;
    swift_bridgeObjectRetain();
    sub_1000FCA68(v66);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = v66[0];
    if (*(void *)(v66[0] + 16))
    {

      swift_bridgeObjectRelease();
      uint64_t v49 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return (id)v49(v48);
    }
    swift_release();
    int64_t v50 = *(void *)(v65 + 16);
    if (!v50)
    {
      swift_bridgeObjectRelease();
      double v51 = _swiftEmptyArrayStorage;
LABEL_51:
      sub_1000FFB30();
      swift_allocError();
      *(void *)(v63 + 8) = 0;
      *(void *)(v63 + 16) = 0;
      *(void *)uint64_t v63 = v51;
      *(unsigned char *)(v63 + 24) = 0;
      swift_willThrow();

      goto LABEL_35;
    }
    v66[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100040994(0, v50, 0);
    double v51 = (void *)v66[0];
    uint64_t v52 = v65 + 40;
    while (1)
    {
      uint64_t v53 = *(void **)(v52 - 8);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      id result = [v53 _identifier];
      if (!result) {
        break;
      }
      id v54 = result;
      id v55 = [objc_allocWithZone((Class)MKMapItemIdentifier) initWithGEOMapItemIdentifier:result];

      id result = [v53 name];
      if (!result) {
        goto LABEL_54;
      }
      uint64_t v56 = result;
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v59 = v58;
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      v66[0] = (uint64_t)v51;
      unint64_t v61 = v51[2];
      unint64_t v60 = v51[3];
      if (v61 >= v60 >> 1)
      {
        sub_100040994(v60 > 1, v61 + 1, 1);
        double v51 = (void *)v66[0];
      }
      v51[2] = v61 + 1;
      uint64_t v62 = &v51[8 * v61];
      v62[4] = v55;
      v62[5] = v57;
      v62[6] = v59;
      *(_OWORD *)(v62 + 7) = 0u;
      *(_OWORD *)(v62 + 9) = 0u;
      v52 += 16;
      v62[11] = 0;
      if (!--v50)
      {
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t sub_1000FAA70(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_1000FAA90, v1, 0);
}

uint64_t sub_1000FAA90()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    id v18 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    unsigned int v3 = (void **)(v1 + 32);
    do
    {
      BOOL v4 = *v3;
      v3 += 8;
      id v5 = [v4 geoMapItemIdentifier:v18];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
  }
  uint64_t v6 = v0[4];
  id v7 = *(void **)(v6 + OBJC_IVAR____TtC6Tamale9GeoLookup_sharedService);
  sub_10000F734(0, (unint64_t *)&unk_10051F2D8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v7 ticketForIdentifiers:isa traits:*(void *)(v6 + OBJC_IVAR____TtC6Tamale9GeoLookup_traits)];
  v0[5] = v9;

  if (v9)
  {
    uint64_t v10 = v0[4];
    uint64_t v11 = sub_1000FFB84(&qword_10051F2F0, (void (*)(uint64_t))type metadata accessor for GeoLookup);
    uint64_t v12 = swift_task_alloc();
    v0[6] = v12;
    *(void *)(v12 + 16) = v9;
    *(void *)(v12 + 24) = v10;
    uint64_t v13 = (void *)swift_task_alloc();
    v0[7] = v13;
    uint64_t v14 = sub_10000F214(&qword_10051F2F8);
    *uint64_t v13 = v0;
    v13[1] = sub_1000FAD50;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v10, v11, 0xD000000000000010, 0x8000000100427160, sub_1000FFBCC, v12, v14);
  }
  else
  {
    sub_1000FFB30();
    swift_allocError();
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0;
    *(void *)uint64_t v15 = 1;
    *(unsigned char *)(v15 + 24) = 2;
    swift_willThrow();
    unint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_1000FAD50()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    BOOL v4 = sub_1000FAEE0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 32);
    swift_task_dealloc();
    BOOL v4 = sub_1000FAE78;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000FAE78()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1000FAEE0()
{
  swift_unknownObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000FAF4C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051F300);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  double v9 = __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v11 + ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  aBlock[4] = sub_1000FFC7C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000FB1F0;
  aBlock[3] = &unk_1004EB170;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [a2 submitWithHandler:v12 networkActivity:0];
  _Block_release(v12);
}

uint64_t sub_1000FB118(unint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
LABEL_3:
    sub_10000F214(&qword_10051F300);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1)
  {
    sub_1000FFB30();
    swift_allocError();
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 24) = 2;
    goto LABEL_3;
  }
  swift_retain();
  sub_100101B64(a1);
  swift_release();
  sub_10000F214(&qword_10051F300);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000FB1F0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10000F214(&qword_10051F308);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_1000FB288(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_1000407B0(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_1000A7FD8(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000407B0(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_1000407B0(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      uint64_t v7 = &v3[2 * v6];
      _OWORD v7[4] = v9;
      v7[5] = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

id sub_1000FB3D0(void *a1)
{
  id result = [a1 geoFenceMapRegion];
  if (result)
  {
    int64_t v2 = result;
    [result centerLat];
    double v4 = v3;
    [v2 centerLng];
    id v6 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v4 longitude:v5];
    id v7 = [v2 vertexs];
    if (v7)
    {
      uint64_t v8 = v7;
      sub_10000F734(0, (unint64_t *)&unk_10051F340);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    [v2 centerLat];
    double v10 = v9;
    [v2 spanLat];
    double v12 = v10 - v11;
    [v2 centerLng];
    double v14 = v13;
    [v2 spanLng];
    id v16 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v12 longitude:v14 - v15];
    [v2 centerLat];
    double v18 = v17;
    [v2 spanLat];
    double v20 = v18 + v19;
    [v2 centerLng];
    double v22 = v21;
    [v2 spanLng];
    id v24 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v20 longitude:v22 + v23];
    sub_10000F214(&qword_100521040);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_100444D30;
    *(void *)(v25 + 32) = v16;
    *(void *)(v25 + 40) = v24;
    unint64_t v33 = v25;
    specialized Array._endMutation()();
    id v26 = v6;
    BOOL v27 = sub_10010144C(v33, (uint64_t)v26);
    swift_bridgeObjectRelease();

    uint64_t v28 = v27[2];
    if (v28)
    {
      uint64_t v29 = (double *)(v27 + 4);
      double v30 = -INFINITY;
      do
      {
        double v31 = *v29++;
        double v32 = v31;
        if (v30 <= v31) {
          double v30 = v32;
        }
        --v28;
      }
      while (v28);
    }

    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1000FB798(uint64_t a1)
{
  id v3 = [v1 _placecardLayoutData];
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  double v4 = v3;
  id v5 = [v3 currentModuleLayoutEntry];

  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  id v6 = [v5 modules];

  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000F734(0, &qword_10051F318);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_6;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
    return _swiftEmptyArrayStorage;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v9 = 4;
  while (1)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(v7 + 8 * v9);
    }
    double v11 = v10;
    uint64_t v12 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if ([v10 type] == 39) {
      break;
    }

    ++v9;
    if (v12 == v8) {
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease_n();
  id v15 = [v11 configuration];

  if (v15)
  {
    id v16 = [v15 unifiedActionConfig];

    if (v16)
    {
      id v17 = [v16 buttonItems];

      if (v17)
      {
        sub_10000F734(0, (unint64_t *)&unk_10051F320);
        unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        __chkstk_darwin(v19);
        v20[2] = a1;
        v20[3] = v1;
        double v13 = sub_1003DE094((void (*)(id *))sub_100101DB4, (uint64_t)v20, v18);
        swift_bridgeObjectRelease();
        return v13;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000FBA2C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale9GeoLookup_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000FBAF0()
{
  return type metadata accessor for GeoLookup(0);
}

uint64_t type metadata accessor for GeoLookup(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10051F160);
}

uint64_t sub_1000FBB18()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for GeoLookup.CandidateResult()
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s6Tamale9GeoLookupC15CandidateResultVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GeoLookup.CandidateResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for GeoLookup.CandidateResult(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GeoLookup.CandidateResult()
{
  return &type metadata for GeoLookup.CandidateResult;
}

uint64_t sub_1000FBD08()
{
  return sub_1001077E0(&qword_10051F2D0, (unint64_t *)&unk_10051F2D8);
}

void *sub_1000FBD4C()
{
  return &protocol witness table for UInt64;
}

void sub_1000FBD58(void **a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = *a1;
  self;
  uint64_t v14 = swift_dynamicCastObjCClass();
  if (!v14)
  {
    if ([v13 buttonType] == 6)
    {
      id v24 = [a2 _webURL];
      if (v24)
      {
        uint64_t v25 = v24;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) != 1)
        {
          sub_10000FBD8((uint64_t)v12, &qword_10051E070);
          uint64_t v23 = type metadata accessor for GeoLookupResultBusiness.Action(0);
          goto LABEL_13;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
      }
      sub_10000FBD8((uint64_t)v12, &qword_10051E070);
    }
    goto LABEL_18;
  }
  id v15 = (void *)v14;
  id v16 = v13;
  if ([v15 groupType] != 2)
  {
    uint64_t v26 = type metadata accessor for GeoLookupResultBusiness.Action(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a3, 1, 1, v26);

    return;
  }
  id v17 = [a2 _externalActionLinks];
  if (!v17)
  {

LABEL_18:
    uint64_t v27 = type metadata accessor for GeoLookupResultBusiness.Action(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a3, 1, 1, v27);
    return;
  }
  unint64_t v18 = v17;
  sub_10000F734(0, (unint64_t *)&unk_10051F330);
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v20 = (unint64_t)[v15 actionDataIndex];
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_21:
    id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (v20 < *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v21 = *(id *)(v19 + 8 * v20 + 32);
LABEL_8:
    id v22 = v21;
    swift_bridgeObjectRelease();

    *a3 = v22;
    uint64_t v23 = type metadata accessor for GeoLookupResultBusiness.Action(0);
LABEL_13:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a3, 0, 1, v23);
    return;
  }
  __break(1u);
}

id sub_1000FC140@<X0>(void *a1@<X8>)
{
  id result = [*v1 muid];
  *a1 = result;
  return result;
}

uint64_t sub_1000FC174(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = Substring.distance(from:to:)();
  if (__OFADD__(v12, 1)) {
    goto LABEL_42;
  }
  double v13 = sub_1003A49F8(0, v12 + 1);
  uint64_t v14 = Substring.distance(from:to:)();
  if (__OFADD__(v14, 1))
  {
LABEL_43:
    __break(1u);
  }
  else
  {
    id v15 = sub_1003A4AE4((uint64_t)v13, v14 + 1);
    swift_bridgeObjectRetain();
    uint64_t v40 = v15;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_4;
    }
  }
  uint64_t v40 = sub_1003068C4(v40);
LABEL_4:
  unint64_t v38 = a6 >> 14;
  if (a6 >> 14 != a5 >> 14)
  {
    unint64_t v48 = 0;
    unint64_t v49 = 0;
    unint64_t v17 = 0;
    unint64_t v44 = a2 >> 14;
    uint64_t v37 = a8;
    uint64_t v46 = v40 + 4;
    uint64_t v47 = 0;
    unint64_t v35 = a6;
    uint64_t v36 = a7;
    unint64_t v34 = a5;
    while (1)
    {
      unint64_t v41 = v17;
      uint64_t v50 = Substring.subscript.getter();
      uint64_t v19 = v18;
      uint64_t v20 = Substring.index(after:)();
      uint64_t v21 = v17++;
      if (__OFADD__(v21, 1)) {
        goto LABEL_41;
      }
      unint64_t v39 = v20;
      swift_bridgeObjectRetain();
      if (a1 >> 14 != v44) {
        break;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a7 = v36;
      a8 = v37;
      a5 = v34;
      a6 = v35;
      if (v38 == v39 >> 14) {
        goto LABEL_6;
      }
    }
    a6 = 0;
    a5 = a1;
    while (1)
    {
      a7 = a4;
      a8 = Substring.subscript.getter();
      uint64_t v23 = v22;
      uint64_t v24 = Substring.index(after:)();
      unint64_t v25 = a6 + 1;
      if (__OFADD__(a6, 1))
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      a5 = v24;
      if (v50 == a8 && v19 == v23)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        a8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((a8 & 1) == 0) {
          goto LABEL_12;
        }
      }
      unint64_t v26 = v40[2];
      if (v41 >= v26) {
        goto LABEL_36;
      }
      uint64_t v27 = v46[v41];
      if (a6 >= *(void *)(v27 + 16)) {
        goto LABEL_37;
      }
      uint64_t v28 = *(void *)(v27 + 8 * a6 + 32);
      a8 = v28 + 1;
      if (__OFADD__(v28, 1)) {
        goto LABEL_38;
      }
      if (v17 >= v26) {
        goto LABEL_39;
      }
      a7 = 8 * v17;
      uint64_t v29 = (void *)v46[v17];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v46[v17] = v29;
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v25 & 0x8000000000000000) != 0) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v29 = sub_1003068B0(v29);
        v46[v17] = v29;
        if ((v25 & 0x8000000000000000) != 0)
        {
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
      }
      if (v25 >= v29[2]) {
        goto LABEL_40;
      }
      v29[v25 + 4] = a8;
      uint64_t v31 = v47;
      if (v47 >= a8) {
        unint64_t v32 = v49;
      }
      else {
        unint64_t v32 = a6 + 1;
      }
      unint64_t v33 = v48;
      if (v47 < a8) {
        unint64_t v33 = v17;
      }
      unint64_t v48 = v33;
      unint64_t v49 = v32;
      if (v47 <= a8) {
        uint64_t v31 = a8;
      }
      uint64_t v47 = v31;
LABEL_12:
      ++a6;
      if (v44 == a5 >> 14) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v47 = 0;
LABEL_6:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v47;
}

uint64_t sub_1000FC4D0(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, void *object)
{
  uint64_t v10 = String.count.getter();
  if (__OFADD__(v10, 1))
  {
LABEL_43:
    __break(1u);
  }
  else
  {
    uint64_t v11 = sub_1003A49F8(0, v10 + 1);
    uint64_t v12 = Substring.distance(from:to:)();
    if (!__OFADD__(v12, 1))
    {
      double v13 = sub_1003A4AE4((uint64_t)v11, v12 + 1);
      swift_bridgeObjectRetain();
      unint64_t v41 = v13;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_45:
  unint64_t v41 = sub_1003068C4(v41);
LABEL_4:
  unint64_t v38 = a4 >> 14;
  if (a4 >> 14 != a3 >> 14)
  {
    unint64_t v43 = 0;
    unint64_t v44 = 0;
    uint64_t v42 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v36 = object;
    uint64_t v37 = v16;
    unint64_t v17 = v41 + 4;
    unint64_t v34 = a4;
    uint64_t v35 = a5;
    unint64_t v33 = a3;
    while (1)
    {
      uint64_t v18 = Substring.subscript.getter();
      uint64_t v20 = v19;
      uint64_t v21 = Substring.index(after:)();
      unint64_t v22 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      unint64_t v23 = v21;
      v45[0] = a1;
      v45[1] = a2;
      v45[2] = 0;
      v45[3] = v37;
      swift_bridgeObjectRetain();
      unint64_t v24 = 0;
      while (1)
      {
        a4 = v24;
        object = v45;
        Swift::String_optional v25 = String.Iterator.next()();
        if (!v25.value._object) {
          break;
        }
        a3 = a4 + 1;
        if (__OFADD__(a4, 1)) {
          goto LABEL_36;
        }
        object = v25.value._object;
        if (v18 == v25.value._countAndFlagsBits && v25.value._object == v20)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          unint64_t v26 = v41[2];
          if (v15 >= v26) {
            goto LABEL_37;
          }
          uint64_t v27 = v17[v15];
          if (a4 >= *(void *)(v27 + 16)) {
            goto LABEL_38;
          }
          uint64_t v28 = *(void *)(v27 + 8 * a4 + 32);
          a5 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_39;
          }
          if (v22 >= v26) {
            goto LABEL_40;
          }
          a4 = 8 * v22;
          object = (void *)v17[v22];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v17[v22] = object;
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((a3 & 0x8000000000000000) != 0) {
              goto LABEL_35;
            }
          }
          else
          {
            object = sub_1003068B0(object);
            v17[v22] = object;
            if ((a3 & 0x8000000000000000) != 0)
            {
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
LABEL_41:
              __break(1u);
              goto LABEL_42;
            }
          }
          if (a3 >= object[2]) {
            goto LABEL_41;
          }
          uint64_t v30 = v42;
          object[a3 + 4] = a5;
          if (v42 >= a5) {
            unint64_t v31 = v44;
          }
          else {
            unint64_t v31 = a3;
          }
          unint64_t v32 = v43;
          if (v42 < a5) {
            unint64_t v32 = v15 + 1;
          }
          unint64_t v43 = v32;
          unint64_t v44 = v31;
          if (v42 <= a5) {
            uint64_t v30 = a5;
          }
          uint64_t v42 = v30;
          unint64_t v24 = a3;
        }
        else
        {
          a5 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          unint64_t v24 = a4 + 1;
          if (a5) {
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v15;
      a5 = v35;
      object = v36;
      a3 = v33;
      a4 = v34;
      if (v38 == v23 >> 14) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v42 = 0;
LABEL_6:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t sub_1000FC7C0()
{
  uint64_t v0 = String.count.getter();
  if (__OFADD__(v0, 1))
  {
LABEL_41:
    __break(1u);
  }
  else
  {
    unint64_t v1 = sub_1003A49F8(0, v0 + 1);
    uint64_t v2 = String.count.getter();
    if (!__OFADD__(v2, 1))
    {
      uint64_t v3 = sub_1003A4AE4((uint64_t)v1, v2 + 1);
      swift_bridgeObjectRetain();
      unint64_t v26 = v3;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_43:
  unint64_t v26 = sub_1003068C4(v26);
LABEL_4:
  Swift::String_optional v4 = String.Iterator.next()();
  if (v4.value._object)
  {
    uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
    object = v4.value._object;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    uint64_t v9 = v26 + 4;
    while (1)
    {
      unint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      swift_bridgeObjectRetain();
      unint64_t v12 = 0;
      while (1)
      {
        unint64_t v14 = v12;
        Swift::String_optional v15 = String.Iterator.next()();
        if (!v15.value._object) {
          break;
        }
        unint64_t v16 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        if (countAndFlagsBits == v15.value._countAndFlagsBits && object == v15.value._object)
        {
          swift_bridgeObjectRelease();
LABEL_15:
          unint64_t v17 = v26[2];
          if (v7 >= v17) {
            goto LABEL_35;
          }
          uint64_t v18 = v9[v7];
          if (v14 >= *(void *)(v18 + 16)) {
            goto LABEL_36;
          }
          uint64_t v19 = *(void *)(v18 + 8 * v14 + 32);
          uint64_t v20 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_37;
          }
          if (v11 >= v17) {
            goto LABEL_38;
          }
          uint64_t v21 = (void *)v9[v11];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v9[v11] = v21;
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v16 & 0x8000000000000000) != 0) {
              goto LABEL_31;
            }
          }
          else
          {
            uint64_t v21 = sub_1003068B0(v21);
            v9[v11] = v21;
            if ((v16 & 0x8000000000000000) != 0)
            {
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
          }
          if (v16 >= v21[2]) {
            goto LABEL_39;
          }
          v21[v16 + 4] = v20;
          if (v8 >= v20) {
            unint64_t v23 = v28;
          }
          else {
            unint64_t v23 = v16;
          }
          unint64_t v24 = v27;
          if (v8 < v20) {
            unint64_t v24 = v7 + 1;
          }
          unint64_t v27 = v24;
          unint64_t v28 = v23;
          if (v8 <= v20) {
            uint64_t v8 = v20;
          }
          unint64_t v12 = v16;
        }
        else
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          unint64_t v12 = v14 + 1;
          if (v13) {
            goto LABEL_15;
          }
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::String_optional v10 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v10.value._countAndFlagsBits;
      object = v10.value._object;
      ++v7;
      if (!v10.value._object) {
        goto LABEL_33;
      }
    }
  }
LABEL_32:
  uint64_t v8 = 0;
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

Swift::Int sub_1000FCA68(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100045FA0(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000FCAD4(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000FCAD4(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_135;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v97 = *v2;
      uint64_t v98 = *v2 + 64;
      uint64_t v99 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v101 = *(double *)(v97 + (i << 6) + 24);
        uint64_t v102 = v98;
        uint64_t v103 = v99;
        do
        {
          if (*(double *)(v102 - 40) >= v101) {
            break;
          }
          if (!v97) {
            goto LABEL_139;
          }
          uint64_t v104 = *(void *)v102;
          uint64_t v105 = *(void *)(v102 + 8);
          uint64_t v106 = *(void *)(v102 + 16);
          long long v107 = *(_OWORD *)(v102 + 32);
          long long v108 = *(_OWORD *)(v102 + 48);
          long long v109 = *(_OWORD *)(v102 - 48);
          *(_OWORD *)uint64_t v102 = *(_OWORD *)(v102 - 64);
          *(_OWORD *)(v102 + 16) = v109;
          long long v110 = *(_OWORD *)(v102 - 16);
          *(_OWORD *)(v102 + 32) = *(_OWORD *)(v102 - 32);
          *(_OWORD *)(v102 + 48) = v110;
          *(void *)(v102 - 56) = v105;
          *(void *)(v102 - 48) = v106;
          *(double *)(v102 - 40) = v101;
          *(_OWORD *)(v102 - 32) = v107;
          *(_OWORD *)(v102 - 16) = v108;
          *(void *)(v102 - 64) = v104;
          v102 -= 64;
        }
        while (!__CFADD__(v103++, 1));
        --v99;
        v98 += 64;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_144;
  }
  Swift::Int v6 = result;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v112 = (char *)_swiftEmptyArrayStorage;
LABEL_104:
      uint64_t v120 = v9;
      if (v12 >= 2)
      {
        uint64_t v113 = *v2;
        if (!v113) {
          goto LABEL_143;
        }
        do
        {
          unint64_t v114 = v12 - 2;
          uint64_t v115 = *(void *)&v112[16 * v12];
          uint64_t v116 = *(void *)&v112[16 * v12 + 24];
          sub_1000FD1FC((double *)(v113 + (v115 << 6)), (double *)(v113 + (*(void *)&v112[16 * v12 + 16] << 6)), v113 + (v116 << 6), __dst);
          if (v1) {
            break;
          }
          if (v116 < v115) {
            goto LABEL_131;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v112 = sub_100045F20((uint64_t)v112);
          }
          if (v114 >= *((void *)v112 + 2)) {
            goto LABEL_132;
          }
          unint64_t v117 = &v112[16 * v114 + 32];
          *(void *)unint64_t v117 = v115;
          *((void *)v117 + 1) = v116;
          unint64_t v118 = *((void *)v112 + 2);
          if (v12 > v118) {
            goto LABEL_133;
          }
          memmove(&v112[16 * v12 + 16], &v112[16 * v12 + 32], 16 * (v118 - v12));
          *((void *)v112 + 2) = v118 - 1;
          unint64_t v12 = v118 - 1;
        }
        while (v118 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      v120[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v120 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v120 = (void *)v8;
    __dst = (double *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v119 = v2;
  uint64_t v11 = *v2;
  uint64_t v124 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v121 = v6;
  Swift::Int v122 = v3;
  while (1)
  {
    Swift::Int v13 = v10++;
    if (v10 < v3)
    {
      double v14 = *(double *)(v11 + (v10 << 6) + 24);
      double v15 = *(double *)(v11 + (v13 << 6) + 24);
      Swift::Int v10 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unint64_t v16 = (double *)(v11 + 152 + (v13 << 6));
        double v17 = v14;
        while (1)
        {
          double v18 = v17;
          double v17 = *v16;
          if (v15 < v14 == v18 >= *v16) {
            break;
          }
          ++v10;
          v16 += 8;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v14)
      {
        if (v10 < v13) {
          goto LABEL_136;
        }
        if (v13 < v10)
        {
          Swift::Int v19 = v10 << 6;
          Swift::Int v20 = v13 << 6;
          Swift::Int v21 = v10;
          Swift::Int v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v11) {
                goto LABEL_142;
              }
              unint64_t v23 = (_OWORD *)(v11 + v20);
              long long v24 = *(_OWORD *)(v11 + v20);
              uint64_t v25 = v11 + v19;
              uint64_t v26 = *(void *)(v11 + v20 + 16);
              uint64_t v27 = *(void *)(v11 + v20 + 24);
              long long v28 = *(_OWORD *)(v11 + v20 + 32);
              long long v29 = *(_OWORD *)(v11 + v20 + 48);
              long long v30 = *(_OWORD *)(v11 + v19 - 16);
              long long v32 = *(_OWORD *)(v11 + v19 - 64);
              long long v31 = *(_OWORD *)(v11 + v19 - 48);
              void v23[2] = *(_OWORD *)(v11 + v19 - 32);
              v23[3] = v30;
              _OWORD *v23 = v32;
              v23[1] = v31;
              *(_OWORD *)(v25 - 64) = v24;
              *(void *)(v25 - 48) = v26;
              *(void *)(v25 - 40) = v27;
              *(_OWORD *)(v25 - 32) = v28;
              *(_OWORD *)(v25 - 16) = v29;
            }
            ++v22;
            v19 -= 64;
            v20 += 64;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_38;
    }
    if (__OFSUB__(v10, v13)) {
      goto LABEL_134;
    }
    if (v10 - v13 >= v6) {
      goto LABEL_38;
    }
    Swift::Int v33 = v13 + v6;
    if (__OFADD__(v13, v6)) {
      goto LABEL_137;
    }
    if (v33 >= v3) {
      Swift::Int v33 = v3;
    }
    if (v33 < v13) {
      break;
    }
    if (v10 != v33)
    {
      uint64_t v84 = v11 + 48 + (v10 << 6);
      unint64_t v34 = v124;
      do
      {
        double v85 = *(double *)(v11 + (v10 << 6) + 24);
        uint64_t v86 = v84;
        Swift::Int v87 = v13;
        do
        {
          if (*(double *)(v86 - 88) >= v85) {
            break;
          }
          if (!v11) {
            goto LABEL_140;
          }
          unint64_t v88 = (_OWORD *)(v86 - 48);
          unint64_t v89 = (_OWORD *)(v86 - 112);
          long long v91 = *(_OWORD *)(v86 - 80);
          long long v90 = *(_OWORD *)(v86 - 64);
          *(_OWORD *)(v86 - 64) = *(_OWORD *)v86;
          v86 -= 64;
          uint64_t v92 = *(void *)(v86 + 16);
          uint64_t v93 = *(void *)(v86 + 24);
          uint64_t v94 = *(void *)(v86 + 32);
          long long v95 = v89[1];
          *unint64_t v88 = *v89;
          v88[1] = v95;
          long long v96 = *(_OWORD *)(v86 + 48);
          v88[2] = v91;
          v88[3] = v90;
          *(void *)(v86 - 48) = v92;
          *(void *)(v86 - 40) = v93;
          *(void *)(v86 - 32) = v94;
          *(double *)(v86 - 24) = v85;
          *(_OWORD *)(v86 - 16) = v96;
          ++v87;
        }
        while (v10 != v87);
        ++v10;
        v84 += 64;
      }
      while (v10 != v33);
      Swift::Int v10 = v33;
      if (v33 < v13) {
        goto LABEL_130;
      }
      goto LABEL_39;
    }
LABEL_38:
    unint64_t v34 = v124;
    if (v10 < v13) {
      goto LABEL_130;
    }
LABEL_39:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v34 = sub_1000456E8(0, *((void *)v34 + 2) + 1, 1, v34);
    }
    unint64_t v36 = *((void *)v34 + 2);
    unint64_t v35 = *((void *)v34 + 3);
    unint64_t v12 = v36 + 1;
    if (v36 >= v35 >> 1) {
      unint64_t v34 = sub_1000456E8((char *)(v35 > 1), v36 + 1, 1, v34);
    }
    *((void *)v34 + 2) = v12;
    uint64_t v37 = v34 + 32;
    unint64_t v38 = &v34[16 * v36 + 32];
    *(void *)unint64_t v38 = v13;
    *((void *)v38 + 1) = v10;
    uint64_t v124 = v34;
    if (v36)
    {
      while (1)
      {
        unint64_t v39 = v12 - 1;
        if (v12 >= 4)
        {
          unint64_t v44 = &v37[16 * v12];
          uint64_t v45 = *((void *)v44 - 8);
          uint64_t v46 = *((void *)v44 - 7);
          BOOL v50 = __OFSUB__(v46, v45);
          uint64_t v47 = v46 - v45;
          if (v50) {
            goto LABEL_119;
          }
          uint64_t v49 = *((void *)v44 - 6);
          uint64_t v48 = *((void *)v44 - 5);
          BOOL v50 = __OFSUB__(v48, v49);
          uint64_t v42 = v48 - v49;
          char v43 = v50;
          if (v50) {
            goto LABEL_120;
          }
          unint64_t v51 = v12 - 2;
          uint64_t v52 = &v37[16 * v12 - 32];
          uint64_t v54 = *(void *)v52;
          uint64_t v53 = *((void *)v52 + 1);
          BOOL v50 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          if (v50) {
            goto LABEL_122;
          }
          BOOL v50 = __OFADD__(v42, v55);
          uint64_t v56 = v42 + v55;
          if (v50) {
            goto LABEL_125;
          }
          if (v56 >= v47)
          {
            uint64_t v74 = &v37[16 * v39];
            uint64_t v76 = *(void *)v74;
            uint64_t v75 = *((void *)v74 + 1);
            BOOL v50 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v50) {
              goto LABEL_129;
            }
            BOOL v67 = v42 < v77;
            goto LABEL_75;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v68 = *((void *)v34 + 4);
            uint64_t v69 = *((void *)v34 + 5);
            BOOL v50 = __OFSUB__(v69, v68);
            uint64_t v61 = v69 - v68;
            char v62 = v50;
            goto LABEL_69;
          }
          uint64_t v41 = *((void *)v34 + 4);
          uint64_t v40 = *((void *)v34 + 5);
          BOOL v50 = __OFSUB__(v40, v41);
          uint64_t v42 = v40 - v41;
          char v43 = v50;
        }
        if (v43) {
          goto LABEL_121;
        }
        unint64_t v51 = v12 - 2;
        uint64_t v57 = &v37[16 * v12 - 32];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v60 = __OFSUB__(v58, v59);
        uint64_t v61 = v58 - v59;
        char v62 = v60;
        if (v60) {
          goto LABEL_124;
        }
        uint64_t v63 = &v37[16 * v39];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        BOOL v50 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v50) {
          goto LABEL_127;
        }
        if (__OFADD__(v61, v66)) {
          goto LABEL_128;
        }
        if (v61 + v66 >= v42)
        {
          BOOL v67 = v42 < v66;
LABEL_75:
          if (v67) {
            unint64_t v39 = v51;
          }
          goto LABEL_77;
        }
LABEL_69:
        if (v62) {
          goto LABEL_123;
        }
        uint64_t v70 = &v37[16 * v39];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v50 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v50) {
          goto LABEL_126;
        }
        if (v73 < v61) {
          goto LABEL_15;
        }
LABEL_77:
        unint64_t v78 = v39 - 1;
        if (v39 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
        if (!v11) {
          goto LABEL_141;
        }
        uint64_t v79 = &v37[16 * v78];
        uint64_t v80 = *(void *)v79;
        unint64_t v81 = &v37[16 * v39];
        uint64_t v82 = *((void *)v81 + 1);
        sub_1000FD1FC((double *)(v11 + (*(void *)v79 << 6)), (double *)(v11 + (*(void *)v81 << 6)), v11 + (v82 << 6), __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v82 < v80) {
          goto LABEL_116;
        }
        if (v39 > *((void *)v124 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v79 = v80;
        *(void *)&v37[16 * v78 + 8] = v82;
        unint64_t v83 = *((void *)v124 + 2);
        if (v39 >= v83) {
          goto LABEL_118;
        }
        unint64_t v34 = v124;
        unint64_t v12 = v83 - 1;
        memmove(&v37[16 * v39], v81 + 16, 16 * (v83 - 1 - v39));
        *((void *)v124 + 2) = v83 - 1;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v6 = v121;
    Swift::Int v3 = v122;
    if (v10 >= v122)
    {
      uint64_t v9 = v120;
      unint64_t v112 = v124;
      uint64_t v2 = v119;
      goto LABEL_104;
    }
  }
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FD1FC(double *__src, double *a2, unint64_t a3, double *__dst)
{
  Swift::String_optional v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 63;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 63;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 6;
  unint64_t v34 = __src;
  Swift::Int v33 = __dst;
  if (v10 >= v12 >> 6)
  {
    if (v11 >= -63)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, v13 << 6);
      }
      Swift::Int v21 = &v4[8 * v13];
      long long v32 = (char *)v21;
      unint64_t v34 = v6;
      if (v7 < v6 && v11 >= 64)
      {
        Swift::Int v22 = (double *)(a3 - 64);
        do
        {
          unint64_t v23 = v22 + 8;
          if (*(v6 - 5) >= *(v21 - 5))
          {
            long long v32 = (char *)(v21 - 8);
            if (v23 < v21 || v22 >= v21 || v23 != v21)
            {
              long long v28 = *((_OWORD *)v21 - 4);
              long long v29 = *((_OWORD *)v21 - 3);
              long long v30 = *((_OWORD *)v21 - 1);
              *((_OWORD *)v22 + 2) = *((_OWORD *)v21 - 2);
              *((_OWORD *)v22 + 3) = v30;
              *(_OWORD *)Swift::Int v22 = v28;
              *((_OWORD *)v22 + 1) = v29;
            }
            long long v24 = v6;
            v21 -= 8;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            long long v24 = v6 - 8;
            if (v23 != v6 || v22 >= v6)
            {
              long long v25 = *(_OWORD *)v24;
              long long v26 = *((_OWORD *)v6 - 3);
              long long v27 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v22 + 2) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v22 + 3) = v27;
              *(_OWORD *)Swift::Int v22 = v25;
              *((_OWORD *)v22 + 1) = v26;
            }
            unint64_t v34 = v6 - 8;
            if (v24 <= v7) {
              break;
            }
          }
          v22 -= 8;
          Swift::Int v6 = v24;
        }
        while (v21 > v4);
      }
LABEL_44:
      sub_100045974((void **)&v34, (const void **)&v33, &v32);
      return 1;
    }
  }
  else if (v8 >= -63)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, v10 << 6);
    }
    double v14 = &v4[8 * v10];
    long long v32 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 64)
    {
      double v15 = v4;
      while (1)
      {
        if (v15[3] >= v6[3])
        {
          Swift::String_optional v4 = v15 + 8;
          double v17 = v15;
          unint64_t v16 = v6;
          if (v7 == v15)
          {
            v15 += 8;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 8;
          }
        }
        else
        {
          unint64_t v16 = v6 + 8;
          double v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }
        long long v18 = *(_OWORD *)v17;
        long long v19 = *((_OWORD *)v17 + 1);
        long long v20 = *((_OWORD *)v17 + 3);
        *((_OWORD *)v7 + 2) = *((_OWORD *)v17 + 2);
        *((_OWORD *)v7 + 3) = v20;
        *(_OWORD *)uint64_t v7 = v18;
        *((_OWORD *)v7 + 1) = v19;
LABEL_22:
        v7 += 8;
        if (v15 < v14)
        {
          Swift::Int v6 = v16;
          if ((unint64_t)v16 < a3) {
            continue;
          }
        }
        Swift::Int v33 = v4;
        unint64_t v34 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FD4A0(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  int v9 = *(_DWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)*a3;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_10032AC58(v8, v7);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (v10[3] >= v15)
  {
    if (a2)
    {
      if (v11) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1001F5038();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    long long v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    Swift::Int v21 = (uint64_t *)(v20[6] + 16 * v12);
    *Swift::Int v21 = v8;
    v21[1] = v7;
    *(_DWORD *)(v20[7] + 4 * v12) = v9;
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    uint64_t v25 = v4 - 1;
    if (v4 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = (_DWORD *)(a1 + 72); ; i += 6)
    {
      uint64_t v28 = *((void *)i - 2);
      uint64_t v27 = *((void *)i - 1);
      int v29 = *i;
      long long v30 = (void *)*a3;
      swift_bridgeObjectRetain();
      unint64_t v31 = sub_10032AC58(v28, v27);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v23 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v23) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        sub_1001EBD94(v35, 1);
        unint64_t v31 = sub_10032AC58(v28, v27);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      unint64_t v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      unint64_t v39 = (uint64_t *)(v38[6] + 16 * v31);
      uint64_t *v39 = v28;
      v39[1] = v27;
      *(_DWORD *)(v38[7] + 4 * v31) = v29;
      uint64_t v40 = v38[2];
      BOOL v23 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v38[2] = v41;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1001EBD94(v15, a2 & 1);
  unint64_t v17 = sub_10032AC58(v8, v7);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_10000F214(&qword_10051F3B0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x80000001004271E0;
  v42._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._uint64_t countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FD824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  v33[3] = &type metadata for Substring;
  v33[4] = sub_100107968();
  char v16 = (void *)swift_allocObject();
  v33[0] = v16;
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  sub_10000F578((uint64_t)v33, (uint64_t)v32);
  if (!((a6 ^ a5) >> 14))
  {
    swift_bridgeObjectRetain();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v32);
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v33);
  }
  unint64_t v17 = sub_10000F3B0(v32, v32[3]);
  unint64_t v18 = v17[1] ^ *v17;
  swift_bridgeObjectRetain();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v32);
  if (!(v18 >> 14)) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v33);
  }
  unint64_t v19 = v16[2];
  unint64_t v20 = v16[3];
  uint64_t v21 = v16[4];
  unint64_t v22 = v16[5];
  if (sub_1000F5D38(a5, a6, a7, a8, v19, v20, v21, v22)) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v33);
  }
  BOOL v23 = sub_1000FDC30(v19, v20, v21, v22, a5, a6, a7, a8);
  uint64_t v24 = Substring.distance(from:to:)();
  uint64_t result = Substring.distance(from:to:)();
  if (!__OFADD__(v24, result))
  {
    long long v26 = sub_1000F0434((uint64_t)v23);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v27 = v26[2];
    if (!v27)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v33);
    }
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    while (1)
    {
      uint64_t v30 = v26[v28 + 4];
      BOOL v31 = __OFADD__(v29, v30);
      v29 += v30;
      if (v31) {
        break;
      }
      if (v27 == ++v28) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FDA50(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v29 = &type metadata for String;
  unint64_t v30 = sub_1000317A0();
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  sub_10000F578((uint64_t)&v27, (uint64_t)v26);
  if (!((a4 ^ a3) >> 14))
  {
    swift_bridgeObjectRetain();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v26);
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v27);
  }
  unint64_t v12 = sub_10000F3B0(v26, v26[3]);
  unint64_t v13 = v12[1];
  if ((v13 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v13) & 0xF;
  }
  else {
    uint64_t v14 = *v12 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v26);
  if (!v14) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v27);
  }
  uint64_t v15 = v27;
  unint64_t v16 = v28;
  if (sub_1000FFFA0(a3, a4, (uint64_t)a5, a6, v27, v28)) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v27);
  }
  unint64_t v17 = sub_1000FE308(v15, v16, a3, a4, a5, a6);
  uint64_t v18 = Substring.distance(from:to:)();
  uint64_t result = String.count.getter();
  if (!__OFADD__(v18, result))
  {
    unint64_t v20 = sub_1000F0434((uint64_t)v17);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = v20[2];
    if (!v21)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v27);
    }
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = v20[v22 + 4];
      BOOL v25 = __OFADD__(v23, v24);
      v23 += v24;
      if (v25) {
        break;
      }
      if (v21 == ++v22) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *sub_1000FDC30(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int64_t a7, uint64_t inited)
{
  double v85 = &type metadata for Substring;
  unint64_t v86 = sub_100107968();
  unint64_t v16 = (void *)swift_allocObject();
  uint64_t v84 = v16;
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000FC174(a1, a2, a3, a4, a5, a6, a7, inited);
  if (v17 < 1)
  {
    uint64_t v66 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  uint64_t v22 = v17;
  uint64_t v23 = v18;
  unint64_t v24 = (unint64_t)v18 - v17;
  if (__OFSUB__(v18, v17))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v79 = v19;
  a4 = Substring.index(_:offsetBy:)();
  unint64_t v21 = (unint64_t)Substring.index(_:offsetBy:)() >> 14;
  if (v21 < a4 >> 14)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v80[0] = Substring.subscript.getter();
  v80[1] = v25;
  v80[2] = v26;
  uint64_t v81 = v27;
  sub_1001079F4();
  uint64_t v28 = String.init<A>(_:)();
  if ((v24 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  a4 = v28;
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  uint64_t v31 = Substring.index(_:offsetBy:limitedBy:)();
  if (v32) {
    unint64_t v33 = a6;
  }
  else {
    unint64_t v33 = v31;
  }
  unint64_t v21 = v33 >> 14;
  if (v33 >> 14 < a5 >> 14) {
    goto LABEL_23;
  }
  unint64_t v78 = Substring.subscript.getter();
  unint64_t v77 = v34;
  uint64_t v76 = v35;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v38 = Substring.distance(from:to:)();
  unint64_t v21 = v38 - (void)v23;
  if (__OFSUB__(v38, v23))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v21 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v39 = Substring.index(_:offsetBy:limitedBy:)();
  if (v40) {
    unint64_t v39 = a5;
  }
  unint64_t v21 = a6 >> 14;
  if (a6 >> 14 < v39 >> 14) {
    goto LABEL_26;
  }
  uint64_t v71 = v37;
  uint64_t v72 = v30;
  unint64_t v75 = a4;
  uint64_t v23 = (void *)Substring.subscript.getter();
  unint64_t v74 = v41;
  uint64_t v73 = v42;
  uint64_t v44 = v43;
  swift_bridgeObjectRelease();
  sub_10000F214((uint64_t *)&unk_10051F628);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100440F30;
  a7 = (int64_t)v85;
  uint64_t v45 = sub_10000F3B0(&v84, (uint64_t)v85);
  double v46 = __chkstk_darwin(v45);
  a4 = (unint64_t)&v68 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unint64_t, double))(v48 + 16))(a4, v46);
  unint64_t v21 = (unint64_t)&v87;
  uint64_t v49 = v79;
  if (__OFSUB__(v79, v22))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v70 = v23;
  uint64_t v69 = v44;
  uint64_t v23 = (void *)(inited + 32);
  *(void *)(inited + 56) = swift_getAssociatedTypeWitness();
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness();
  sub_100040120((uint64_t *)(inited + 32));
  Collection.prefix(_:)();
  a4 = (unint64_t)v85;
  a7 = v86;
  BOOL v50 = sub_10000F3B0(&v84, (uint64_t)v85);
  double v51 = __chkstk_darwin(v50);
  (*(void (**)(char *, double))(v53 + 16))((char *)&v68 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0), v51);
  if (__OFSUB__(Substring.distance(from:to:)(), v49))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v16 = (void *)(inited + 72);
  *(void *)(inited + 96) = swift_getAssociatedTypeWitness();
  *(void *)(inited + 104) = swift_getAssociatedConformanceWitness();
  sub_100040120((uint64_t *)(inited + 72));
  BidirectionalCollection.suffix(_:)();
  unint64_t v20 = sub_100328860(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  a4 = *((void *)v20 + 2);
  unint64_t v21 = *((void *)v20 + 3);
  a7 = a4 + 1;
  if (a4 >= v21 >> 1) {
LABEL_29:
  }
    unint64_t v20 = sub_100328860((char *)(v21 > 1), a7, 1, v20);
  uint64_t v54 = v72;
  uint64_t v55 = v69;
  uint64_t v56 = v71;
  *((void *)v20 + 2) = a7;
  uint64_t v57 = &v20[16 * a4];
  *((void *)v57 + 4) = v75;
  *((void *)v57 + 5) = v54;
  unint64_t v83 = v20;
  uint64_t v58 = *(void *)(inited + 56);
  unint64_t v59 = *(void *)(inited + 64);
  BOOL v60 = sub_10000F3B0(v23, v58);
  swift_bridgeObjectRetain();
  uint64_t v61 = sub_1001C10D4((uint64_t)v60, v78, v77, v76, v56, v58, v59);
  swift_bridgeObjectRelease();
  sub_10019FAAC((uint64_t)v61);
  swift_bridgeObjectRelease();
  sub_10000F578((uint64_t)v16, (uint64_t)v80);
  swift_bridgeObjectRelease();
  uint64_t v62 = v81;
  unint64_t v63 = v82;
  uint64_t v64 = sub_10000F3B0(v80, v81);
  uint64_t v65 = sub_1001C10D4((uint64_t)v64, (unint64_t)v70, v74, v73, v55, v62, v63);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v80);
  swift_bridgeObjectRelease();
  sub_10019FAAC((uint64_t)v65);
  uint64_t v66 = v83;
LABEL_19:
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v84);
  return v66;
}

char *sub_1000FE308(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char *a5, uint64_t inited)
{
  unint64_t v75 = &type metadata for String;
  unint64_t v76 = sub_1000317A0();
  v74[0] = a1;
  v74[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000FC4D0(a1, a2, a3, a4, (uint64_t)a5, (void *)inited);
  if (v13 < 1)
  {
    uint64_t v58 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  uint64_t v18 = v13;
  uint64_t v19 = v14;
  uint64_t v20 = v14 - v13;
  if (__OFSUB__(v14, v13))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v6 = v15;
  a2 = Substring.index(_:offsetBy:)();
  unint64_t v17 = (unint64_t)Substring.index(_:offsetBy:)() >> 14;
  if (v17 < a2 >> 14)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v70[0] = Substring.subscript.getter();
  v70[1] = v21;
  v70[2] = v22;
  uint64_t v71 = v23;
  sub_1001079F4();
  uint64_t v24 = String.init<A>(_:)();
  if (v20 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  a2 = v24;
  uint64_t v26 = v25;
  swift_bridgeObjectRetain();
  uint64_t v27 = Substring.index(_:offsetBy:limitedBy:)();
  if (v28) {
    unint64_t v29 = a4;
  }
  else {
    unint64_t v29 = v27;
  }
  unint64_t v17 = v29 >> 14;
  if (v29 >> 14 < a3 >> 14) {
    goto LABEL_23;
  }
  unint64_t v69 = Substring.subscript.getter();
  unint64_t v68 = v30;
  uint64_t v67 = v31;
  uint64_t v20 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v33 = Substring.distance(from:to:)();
  unint64_t v17 = v33 - v19;
  if (__OFSUB__(v33, v19))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v34 = Substring.index(_:offsetBy:limitedBy:)();
  if (v35) {
    unint64_t v34 = a3;
  }
  unint64_t v17 = a4 >> 14;
  if (a4 >> 14 < v34 >> 14) {
    goto LABEL_26;
  }
  uint64_t v63 = v26;
  unint64_t v66 = a2;
  a3 = Substring.subscript.getter();
  unint64_t v65 = v36;
  uint64_t v64 = v37;
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  sub_10000F214((uint64_t *)&unk_10051F628);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100440F30;
  a5 = (char *)v76;
  char v40 = sub_10000F3B0(v74, (uint64_t)v75);
  double v41 = __chkstk_darwin(v40);
  a2 = (unint64_t)&v60 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unint64_t, double))(v43 + 16))(a2, v41);
  if (__OFSUB__(v6, v18))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v61 = a3;
  uint64_t v62 = v39;
  a3 = inited + 32;
  *(void *)(inited + 56) = swift_getAssociatedTypeWitness();
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness();
  sub_100040120((uint64_t *)(inited + 32));
  Collection.prefix(_:)();
  a2 = (unint64_t)v75;
  uint64_t v44 = sub_10000F3B0(v74, (uint64_t)v75);
  double v45 = __chkstk_darwin(v44);
  a5 = (char *)&v60 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v47 + 16))(a5, v45);
  if (__OFSUB__(String.count.getter(), v6))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v6 = inited + 72;
  *(void *)(inited + 96) = swift_getAssociatedTypeWitness();
  *(void *)(inited + 104) = swift_getAssociatedConformanceWitness();
  sub_100040120((uint64_t *)(inited + 72));
  BidirectionalCollection.suffix(_:)();
  unint64_t v16 = sub_100328860(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  a2 = *((void *)v16 + 2);
  unint64_t v17 = *((void *)v16 + 3);
  a5 = (char *)(a2 + 1);
  if (a2 >= v17 >> 1) {
LABEL_29:
  }
    unint64_t v16 = sub_100328860((char *)(v17 > 1), (int64_t)a5, 1, v16);
  uint64_t v48 = v63;
  *((void *)v16 + 2) = a5;
  uint64_t v49 = &v16[16 * a2];
  *((void *)v49 + 4) = v66;
  *((void *)v49 + 5) = v48;
  uint64_t v73 = v16;
  uint64_t v50 = *(void *)(inited + 56);
  unint64_t v51 = *(void *)(inited + 64);
  uint64_t v52 = sub_10000F3B0((void *)a3, v50);
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_1001C10D4((uint64_t)v52, v69, v68, v67, v20, v50, v51);
  swift_bridgeObjectRelease();
  sub_10019FAAC((uint64_t)v53);
  swift_bridgeObjectRelease();
  sub_10000F578(v6, (uint64_t)v70);
  swift_bridgeObjectRelease();
  uint64_t v54 = v71;
  unint64_t v55 = v72;
  uint64_t v56 = sub_10000F3B0(v70, v71);
  uint64_t v57 = sub_1001C10D4((uint64_t)v56, v61, v65, v64, v62, v54, v55);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v70);
  swift_bridgeObjectRelease();
  sub_10019FAAC((uint64_t)v57);
  uint64_t v58 = v73;
LABEL_19:
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v74);
  return v58;
}

uint64_t sub_1000FE988(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v26 = &type metadata for String;
  unint64_t v27 = sub_1000317A0();
  uint64_t v24 = a1;
  unint64_t v25 = a2;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  sub_10000F578((uint64_t)&v24, (uint64_t)v23);
  if (!v8)
  {
    swift_bridgeObjectRetain();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v23);
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v24);
  }
  int v9 = sub_10000F3B0(v23, v23[3]);
  unint64_t v10 = v9[1];
  if ((v10 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(v10) & 0xF;
  }
  else {
    uint64_t v11 = *v9 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v23);
  if (!v11) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v24);
  }
  uint64_t v12 = v24;
  unint64_t v13 = v25;
  if (sub_100146AEC(a3, a4, v24, v25)) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v24);
  }
  uint64_t v14 = sub_1000FEB3C(v12, v13, a3, a4);
  uint64_t v15 = String.count.getter();
  uint64_t result = String.count.getter();
  if (!__OFADD__(v15, result))
  {
    unint64_t v17 = sub_1000F0434((uint64_t)v14);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = v17[2];
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = v17[v19 + 4];
        BOOL v22 = __OFADD__(v20, v21);
        v20 += v21;
        if (v22) {
          break;
        }
        if (v18 == ++v19) {
          goto LABEL_18;
        }
      }
      __break(1u);
      goto LABEL_21;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v24);
  }
LABEL_21:
  __break(1u);
  return result;
}

char *sub_1000FEB3C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t inited)
{
  unint64_t v72 = &type metadata for String;
  unint64_t v73 = sub_1000317A0();
  v71[0] = a1;
  v71[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1000FC7C0();
  if (v9 < 1)
  {
    unint64_t v55 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_10;
  }
  uint64_t v14 = v9;
  uint64_t v15 = v10;
  uint64_t v16 = (uint64_t)v10 - v9;
  if (__OFSUB__(v10, v9))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = v11;
  a2 = String.index(_:offsetBy:)();
  unint64_t v13 = (unint64_t)String.index(_:offsetBy:)() >> 14;
  if (v13 < a2 >> 14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v67[0] = String.subscript.getter();
  v67[1] = v17;
  void v67[2] = v18;
  uint64_t v68 = v19;
  sub_1001079F4();
  uint64_t v20 = String.init<A>(_:)();
  uint64_t v66 = v21;
  swift_bridgeObjectRetain();
  a2 = sub_1003069CC(v16);
  unint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v16 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v27 = String.count.getter();
  BOOL v28 = __OFSUB__(v27, v15);
  unint64_t v29 = v27 - (void)v15;
  if (v28)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v60 = v20;
  uint64_t v61 = v25;
  unint64_t v62 = v23;
  unint64_t v63 = a2;
  unint64_t v30 = sub_1000FFEE4(v29, a3, inited);
  unint64_t v65 = v31;
  uint64_t v64 = v32;
  uint64_t v15 = v33;
  swift_bridgeObjectRelease();
  sub_10000F214((uint64_t *)&unk_10051F628);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100440F30;
  unint64_t v34 = sub_10000F3B0(v71, (uint64_t)v72);
  a3 = (unint64_t)&v57;
  double v35 = __chkstk_darwin(v34);
  a2 = (unint64_t)&v57 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unint64_t, double))(v37 + 16))(a2, v35);
  if (__OFSUB__(v4, v14))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v58 = v30;
  unint64_t v59 = v15;
  uint64_t v15 = (void *)(inited + 32);
  *(void *)(inited + 56) = swift_getAssociatedTypeWitness();
  *(void *)(inited + 64) = swift_getAssociatedConformanceWitness();
  sub_100040120((uint64_t *)(inited + 32));
  Collection.prefix(_:)();
  a2 = (unint64_t)v72;
  uint64_t v38 = sub_10000F3B0(v71, (uint64_t)v72);
  a3 = (unint64_t)&v57;
  double v39 = __chkstk_darwin(v38);
  (*(void (**)(char *, double))(v41 + 16))((char *)&v57 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0), v39);
  if (__OFSUB__(String.count.getter(), v4))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = inited + 72;
  *(void *)(inited + 96) = swift_getAssociatedTypeWitness();
  *(void *)(inited + 104) = swift_getAssociatedConformanceWitness();
  sub_100040120((uint64_t *)(inited + 72));
  BidirectionalCollection.suffix(_:)();
  uint64_t v12 = sub_100328860(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  a3 = *((void *)v12 + 2);
  unint64_t v13 = *((void *)v12 + 3);
  a2 = a3 + 1;
  if (a3 >= v13 >> 1) {
LABEL_16:
  }
    uint64_t v12 = sub_100328860((char *)(v13 > 1), a2, 1, v12);
  unint64_t v42 = v58;
  uint64_t v43 = v61;
  uint64_t v44 = v60;
  *((void *)v12 + 2) = a2;
  double v45 = &v12[16 * a3];
  uint64_t v46 = v66;
  *((void *)v45 + 4) = v44;
  *((void *)v45 + 5) = v46;
  uint64_t v70 = v12;
  uint64_t v47 = *(void *)(inited + 56);
  unint64_t v48 = *(void *)(inited + 64);
  uint64_t v49 = sub_10000F3B0(v15, v47);
  swift_bridgeObjectRetain();
  uint64_t v50 = sub_1001C10D4((uint64_t)v49, v63, v62, v43, v16, v47, v48);
  swift_bridgeObjectRelease();
  sub_10019FAAC((uint64_t)v50);
  swift_bridgeObjectRelease();
  sub_10000F578(v4, (uint64_t)v67);
  swift_bridgeObjectRelease();
  uint64_t v51 = v68;
  unint64_t v52 = v69;
  uint64_t v53 = sub_10000F3B0(v67, v68);
  uint64_t v54 = sub_1001C10D4((uint64_t)v53, v42, v65, v64, (uint64_t)v59, v51, v52);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v67);
  swift_bridgeObjectRelease();
  sub_10019FAAC((uint64_t)v54);
  unint64_t v55 = v70;
LABEL_10:
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v71);
  return v55;
}

uint64_t sub_1000FF100(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v49 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v48 = (char *)&v42 - v8;
  uint64_t v9 = type metadata accessor for GeoLookupResultBusiness.Action(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (void **)((char *)&v42 - v13);
  uint64_t v15 = sub_10000F214(&qword_10051F640);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (void **)&v17[*(int *)(v18 + 56)];
  sub_100107A48(a1, (uint64_t)v17, type metadata accessor for GeoLookupResultBusiness.Action);
  sub_100107A48(a2, (uint64_t)v19, type metadata accessor for GeoLookupResultBusiness.Action);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_100107A48((uint64_t)v17, (uint64_t)v14, type metadata accessor for GeoLookupResultBusiness.Action);
    uint64_t v33 = *v14;
    if (!swift_getEnumCaseMultiPayload())
    {
      double v35 = *v19;
      sub_10000F734(0, (unint64_t *)&qword_100518A40);
      char v34 = static NSObject.== infix(_:_:)();

      goto LABEL_27;
    }

LABEL_15:
    sub_10000FBD8((uint64_t)v17, &qword_10051F640);
LABEL_16:
    char v34 = 0;
    return v34 & 1;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_100107A48((uint64_t)v17, (uint64_t)v11, type metadata accessor for GeoLookupResultBusiness.Action);
    uint64_t v21 = (void *)*((void *)v11 + 1);
    unint64_t v22 = (void *)*((void *)v11 + 2);
    uint64_t v46 = *(void **)v11;
    uint64_t v47 = v21;
    unint64_t v23 = (void *)*((void *)v11 + 3);
    uint64_t v24 = *(int *)(sub_10000F214(&qword_10051F400) + 64);
    uint64_t v25 = &v11[v24];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v44 = v22;
      double v45 = v23;
      uint64_t v26 = *v19;
      uint64_t v27 = v19[1];
      BOOL v28 = v19[3];
      uint64_t v43 = v19[2];
      unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
      v29(v48, v25, v4);
      v29(v6, (char *)v19 + v24, v4);
      if (v46 == v26 && v47 == v27)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v32 = v45;
      }
      else
      {
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v32 = v45;
        if ((v31 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_24:
          uint64_t v38 = *(void (**)(char *, uint64_t))(v49 + 8);
          v38(v6, v4);
          v38(v48, v4);
          sub_1001029CC((uint64_t)v17, type metadata accessor for GeoLookupResultBusiness.Action);
          goto LABEL_16;
        }
      }
      if (v44 == v43 && v32 == v28)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0) {
          goto LABEL_24;
        }
      }
      double v39 = v48;
      char v34 = static URL.== infix(_:_:)();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v49 + 8);
      v40(v6, v4);
      v40(v39, v4);
LABEL_27:
      sub_1001029CC((uint64_t)v17, type metadata accessor for GeoLookupResultBusiness.Action);
      return v34 & 1;
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(&v11[v24], v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (swift_getEnumCaseMultiPayload() != 2) {
    goto LABEL_15;
  }
  sub_1001029CC((uint64_t)v17, type metadata accessor for GeoLookupResultBusiness.Action);
  char v34 = 1;
  return v34 & 1;
}

uint64_t sub_1000FF5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v36 = *(id *)a2;
  id v37 = v4;
  sub_10000F734(0, &qword_10051F638);
  sub_100107B18(&v37);
  sub_100107B18(&v36);
  LOBYTE(v4) = static NSObject.== infix(_:_:)();
  sub_100107B44(&v36);
  sub_100107B44(&v37);
  if ((v4 & 1) == 0) {
    goto LABEL_28;
  }
  sub_10000F734(0, (unint64_t *)&qword_100518A40);
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    goto LABEL_28;
  }
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
    || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    if (v7)
    {
      if (!v8) {
        goto LABEL_28;
      }
      if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || v7 != v8)
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v6 = 0;
        if ((v9 & 1) == 0) {
          return v6 & 1;
        }
      }
    }
    else if (v8)
    {
      goto LABEL_28;
    }
    uint64_t v11 = *(void *)(a1 + 48);
    double v10 = *(double *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 72);
    int v14 = *(unsigned __int8 *)(a1 + 80);
    uint64_t v15 = *(void *)(a2 + 48);
    double v16 = *(double *)(a2 + 56);
    uint64_t v17 = *(void *)(a2 + 64);
    uint64_t v18 = *(void *)(a2 + 72);
    int v19 = *(unsigned __int8 *)(a2 + 80);
    if (v14 == 255)
    {
      if (v19 == 255) {
        goto LABEL_33;
      }
    }
    else if (v19 != 255)
    {
      char v6 = 0;
      if (v14)
      {
        if ((v19 & 1) == 0 || v11 != v15 || v10 != v16) {
          return v6 & 1;
        }
      }
      else
      {
        if ((v19 & 1) != 0 || v11 != v15 || *(float *)&v10 != *(float *)&v16) {
          return v6 & 1;
        }
        if (v13)
        {
          if (!v18) {
            goto LABEL_28;
          }
          if (v12 != v17 || v13 != v18)
          {
            char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            char v6 = 0;
            if ((v20 & 1) == 0) {
              return v6 & 1;
            }
          }
          goto LABEL_33;
        }
        if (v18)
        {
          uint64_t v25 = *(void *)(a1 + 48);
          uint64_t v26 = *(void *)(a1 + 56);
          uint64_t v27 = 0;
          unsigned __int8 v28 = *(unsigned char *)(a1 + 80);
          goto LABEL_27;
        }
      }
LABEL_33:
      uint64_t v30 = *(void *)(a1 + 96);
      uint64_t v31 = *(void *)(a2 + 96);
      if (v30)
      {
        if (!v31) {
          goto LABEL_28;
        }
        if (*(void *)(a1 + 88) != *(void *)(a2 + 88) || v30 != v31)
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v6 = 0;
          if ((v32 & 1) == 0) {
            return v6 & 1;
          }
        }
      }
      else if (v31)
      {
        goto LABEL_28;
      }
      if (*(void *)(a1 + 104) == *(void *)(a2 + 104))
      {
        uint64_t v33 = *(void *)(a1 + 120);
        uint64_t v34 = *(void *)(a2 + 120);
        if (v33)
        {
          if (v34)
          {
            if (*(void *)(a1 + 112) != *(void *)(a2 + 112) || v33 != v34)
            {
              char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              char v6 = 0;
              if ((v35 & 1) == 0) {
                return v6 & 1;
              }
            }
LABEL_50:
            char v6 = sub_1003E1F4C(*(void *)(a1 + 128), *(void *)(a2 + 128));
            return v6 & 1;
          }
        }
        else if (!v34)
        {
          goto LABEL_50;
        }
      }
LABEL_28:
      char v6 = 0;
      return v6 & 1;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = *(void *)(a2 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    uint64_t v24 = v17;
    sub_100107B70(v21, v22, v17, v18, v19);
    sub_100107B70(v11, *(uint64_t *)&v10, v23, v13, v14);
    sub_100107B88(v11, *(uint64_t *)&v10, v23, v13, v14);
    uint64_t v25 = v15;
    uint64_t v26 = *(void *)&v16;
    uint64_t v12 = v24;
    uint64_t v27 = v18;
    unsigned __int8 v28 = v19;
LABEL_27:
    sub_100107B88(v25, v26, v12, v27, v28);
    goto LABEL_28;
  }
  return v6 & 1;
}

BOOL sub_1000FF908(long long *a1, long long *a2)
{
  sub_10004ECF4(a2, (uint64_t)v11);
  sub_10004ECF4(a1, (uint64_t)&v17);
  uint64_t v4 = v17;
  if (v21)
  {
    double v5 = v18;
    sub_10004ECF4(a2, (uint64_t)&v12);
    if (v16 == 1 && v4 == v12) {
      return v5 == v13;
    }
    return 0;
  }
  float v8 = *(float *)&v18;
  uint64_t v9 = v19;
  uint64_t v10 = v20;
  sub_10004ECF4(a2, (uint64_t)&v12);
  if (v16) {
    return 0;
  }
  BOOL result = 0;
  if (v4 == v12 && v8 == *(float *)&v13)
  {
    if (v10)
    {
      if (v15 && (v9 == v14 && v10 == v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else
    {
      if (!v15)
      {
        swift_bridgeObjectRetain();
        return 1;
      }
      sub_100105BC8((uint64_t)a1);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000FFA40(uint64_t a1, uint64_t a2)
{
  sub_10000F734(0, (unint64_t *)&qword_100518A40);
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  BOOL v4 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (*(double *)(a1 + 24) == *(double *)(a2 + 24))
    {
      uint64_t v7 = *(void *)(a1 + 56);
      uint64_t v8 = *(void *)(a2 + 56);
      if (v7)
      {
        if (!v8 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
          return 0;
        }
        uint64_t v9 = *(void *)(a2 + 48);
        if (*(void *)(a1 + 48))
        {
          if ((v9 & 1) == 0) {
            return 0;
          }
        }
        else if ((v9 & 1) != 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
        {
          return 0;
        }
        if (sub_1003E093C(v7, v8)) {
          return 1;
        }
      }
      else if (!v8)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_1000FFB30()
{
  unint64_t result = qword_10051F2E8;
  if (!qword_10051F2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F2E8);
  }
  return result;
}

uint64_t sub_1000FFB84(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000FFBCC(uint64_t a1)
{
  sub_1000FAF4C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000FFBD4()
{
  uint64_t v1 = sub_10000F214(&qword_10051F300);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000FFC7C(uint64_t a1, uint64_t a2)
{
  return sub_100104A1C(a1, a2, &qword_10051F300, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))sub_1000FB118);
}

uint64_t sub_1000FFC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FFCAC()
{
  return swift_release();
}

uint64_t sub_1000FFCB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v16 = a3;
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v14 = a4;
    uint64_t v7 = (uint64_t *)(result + 40);
    while (1)
    {
      uint64_t v9 = *(v7 - 1);
      uint64_t v8 = *v7;
      uint64_t v11 = v7[1];
      uint64_t v10 = v7[2];
      uint64_t v12 = v7[3];
      uint64_t v13 = v7[4];
      v15[0] = v9;
      v15[1] = v8;
      v15[2] = v11;
      v15[3] = v10;
      v15[4] = v12;
      v15[5] = v13;
      uint64_t result = sub_1000F5C7C((uint64_t)v15, a2, v16);
      if (v4) {
        return result;
      }
      if (result) {
        break;
      }
      v7 += 6;
      if (!--v5)
      {
        uint64_t v9 = 0;
        uint64_t v8 = 0;
        uint64_t v11 = 0;
        uint64_t v10 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
LABEL_9:
        a4 = v14;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
LABEL_10:
  *a4 = v9;
  a4[1] = v8;
  a4[2] = v11;
  a4[3] = v10;
  a4[4] = v12;
  a4[5] = v13;
  return result;
}

double sub_1000FFDB0(void *a1, uint64_t a2)
{
  id v3 = [a1 addressObject];
  double v4 = 0.0;
  if (v3)
  {
    uint64_t v5 = v3;
    id v6 = [v3 address];

    if (v6)
    {
      id v7 = [v6 structuredAddress];

      if (v7)
      {
        id v8 = [v7 subThoroughfare];

        if (v8)
        {
          uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v11 = v10;

          sub_1000FFCB4(a2, v9, v11, v13);
          swift_bridgeObjectRelease();
          sub_10000FC34((uint64_t)v13, (uint64_t)v14, (uint64_t *)&unk_10051F600);
          if (v15)
          {
            sub_1001078CC(v13);
            return 1.0;
          }
        }
      }
    }
  }
  return v4;
}

unint64_t sub_1000FFEE4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v4) {
    uint64_t result = 15;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_12;
  }

  return String.subscript.getter();
}

uint64_t sub_1000FFFA0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v6 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

double sub_100100018(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  swift_bridgeObjectRetain();
  if (sub_1000FC7C0() < 1) {
    goto LABEL_17;
  }
  unint64_t v10 = String.index(_:offsetBy:)();
  unint64_t v11 = String.index(_:offsetBy:)();
  unint64_t v12 = String.index(_:offsetBy:)();
  unint64_t v13 = String.index(_:offsetBy:)();
  swift_bridgeObjectRelease();
  if (v10 >> 14 < v11 >> 14 || v12 >> 14 < v13 >> 14)
  {
    __break(1u);
LABEL_28:
    swift_once();
    goto LABEL_24;
  }
  unint64_t v14 = String.subscript.getter();
  unint64_t v16 = v15;
  double v18 = v17;
  uint64_t v20 = v19;
  if (Substring.distance(from:to:)() < 5
    || (double v21 = (double)Substring.distance(from:to:)(), v22 = v21 / (double)String.count.getter(), v22 < 0.75)
    && (v22 < 0.25 || v11 >= 0x4000))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0.0;
  }
  uint64_t v23 = String.distance(from:to:)();
  uint64_t v24 = String.distance(from:to:)();
  if (v24 >= v23) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = v24;
  }
  double v26 = (double)v25 / (double)String.count.getter();
  if (a5)
  {
    if (a5 == 1)
    {
      uint64_t v27 = sub_10031CD74(v14, v16, (uint64_t)v18, v20, a1, a2, 0, 1uLL);
      uint64_t v28 = Substring.distance(from:to:)();
      uint64_t v29 = String.count.getter();
      if (v29 <= v28) {
        uint64_t v30 = v28;
      }
      else {
        uint64_t v30 = v29;
      }
      double v5 = 1.0 - (double)v27 / (double)v30;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1000FDA50(a1, a2, v14, (unint64_t)v16, v18, v20);
      double v5 = v33;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1000317A0();
    sub_100107968();
    if (StringProtocol.contains<A>(_:)()) {
      double v5 = 1.0;
    }
    else {
      double v5 = 0.0;
    }
  }
  double v6 = v26 * -0.5 + 1.0;
  if (qword_100517E50 != -1) {
    goto LABEL_28;
  }
LABEL_24:
  double v31 = v6 * v5;
  uint64_t v34 = type metadata accessor for Logger();
  sub_10000F378(v34, (uint64_t)qword_10055E208);
  char v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    id v37 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v37 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "LCS is sufficiently-long. Clamping score to at least %f", v37, 0xCu);
    swift_slowDealloc();
  }
  swift_bridgeObjectRelease();

  return v31;
}

double sub_10010043C(uint64_t a1, uint64_t a2)
{
  int64_t v4 = *(void *)(a2 + 16);
  double v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    v21[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100040AD8(0, v4, 0);
    double v5 = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 64;
    do
    {
      uint64_t v8 = *(void *)(a2 + v7);
      v21[0] = (uint64_t)v5;
      unint64_t v9 = v5[3];
      swift_bridgeObjectRetain();
      if (v6 >= v9 >> 1)
      {
        sub_100040AD8(v9 > 1, v6 + 1, 1);
        double v5 = (void *)v21[0];
      }
      void v5[2] = v6 + 1;
      v5[v6 + 4] = v8;
      v7 += 48;
      ++v6;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = v5[2];
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v5[v11++ + 4];
      v21[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10019F92C(v12);
      swift_bridgeObjectRelease();
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  double v22 = 0.0;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    unint64_t v14 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v16 = *(v14 - 1);
      uint64_t v15 = *v14;
      v21[0] = *(v14 - 2);
      v21[1] = v16;
      v21[2] = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000F784C(&v22, v21, a2, (uint64_t)_swiftEmptyArrayStorage, &v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      double v17 = v20;
      double v22 = v20;
      v14 += 3;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 > 0.0)
    {
      sub_10000F214((uint64_t *)&unk_100529C10);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_10043D4F0;
      *(double *)(v18 + 32) = v17;
      *(unsigned char *)(v18 + 40) = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0.0;
  }
  return v17;
}

uint64_t sub_100100698(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v12 = (uint64_t *)(a2 + 48);
  if (v8) {
    goto LABEL_4;
  }
  while (1)
  {
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v5 + 8 * v11);
    if (v16) {
      goto LABEL_16;
    }
    int64_t v17 = v11 + 1;
    if (v11 + 1 >= v9) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v5 + 8 * v17);
    if (!v16)
    {
      int64_t v17 = v11 + 2;
      if (v11 + 2 >= v9) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v5 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v11 + 3;
        if (v11 + 3 >= v9) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v5 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }
    int64_t v11 = v17;
LABEL_16:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    if (a3 >= 1.0)
    {
      while (2)
      {
        if (v8)
        {
LABEL_4:
          unint64_t v13 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
          unint64_t v14 = v13 | (v11 << 6);
          if (a3 >= 1.0) {
            continue;
          }
          goto LABEL_17;
        }
        break;
      }
    }
    else
    {
LABEL_17:
      uint64_t v18 = (uint64_t *)(*(void *)(result + 48) + 16 * v14);
      uint64_t v20 = *v18;
      unint64_t v19 = v18[1];
      float v21 = *(float *)(*(void *)(result + 56) + 4 * v14);
      double v33 = 0.0;
      uint64_t v22 = *(void *)(a2 + 16);
      if (v22)
      {
        int64_t v28 = v9;
        uint64_t v30 = result;
        swift_bridgeObjectRetain();
        uint64_t v29 = a2;
        swift_bridgeObjectRetain();
        uint64_t v27 = v12;
        do
        {
          uint64_t v24 = *(v12 - 1);
          uint64_t v23 = *v12;
          v32[0] = *(v12 - 2);
          v32[1] = v24;
          v32[2] = v23;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1000F9728(&v33, v32, v20, v19, &v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          double v25 = v31;
          double v33 = v31;
          v12 += 3;
          --v22;
        }
        while (v22);
        swift_bridgeObjectRelease();
        a2 = v29;
        swift_bridgeObjectRelease();
        uint64_t result = v30;
        int64_t v9 = v28;
        uint64_t v12 = v27;
      }
      else
      {
        double v25 = 0.0;
      }
      if (a3 <= v25 * v21) {
        a3 = v25 * v21;
      }
      if (v8) {
        goto LABEL_4;
      }
    }
  }
  int64_t v26 = v11 + 4;
  if (v11 + 4 >= v9) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v5 + 8 * v26);
  v11 += 4;
  if (v16) {
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v5 + 8 * v11);
    ++v26;
    if (v16) {
      goto LABEL_16;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

void *sub_1001008FC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v62 = a4;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v5 = type metadata accessor for TextDetectorResult.DataDetector(0);
  uint64_t v61 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  unint64_t v55 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  int64_t v9 = (char *)&v50 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v50 - v11);
  unint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v54 = *(void *)(a3 + 16);
  if (v54)
  {
    uint64_t v53 = a3 + 32;
    uint64_t v50 = a3;
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    uint64_t v15 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v60 = v14;
      unint64_t v16 = (void *)(v53 + 48 * v14);
      uint64_t v17 = v16[1];
      uint64_t v19 = v16[3];
      uint64_t v18 = v16[4];
      uint64_t v20 = v16[5];
      unint64_t v63 = _swiftEmptyArrayStorage;
      uint64_t v21 = *(void *)(v20 + 16);
      uint64_t v57 = v17;
      swift_bridgeObjectRetain();
      uint64_t v58 = v19;
      swift_bridgeObjectRetain();
      uint64_t v59 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v21) {
        break;
      }
      int64_t v28 = _swiftEmptyArrayStorage;
LABEL_16:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = sub_100329A10(0, v15[2] + 1, 1, v15);
      }
      uint64_t v29 = v60;
      unint64_t v31 = v15[2];
      unint64_t v30 = v15[3];
      if (v31 >= v30 >> 1) {
        uint64_t v15 = sub_100329A10((void *)(v30 > 1), v31 + 1, 1, v15);
      }
      uint64_t v14 = v29 + 1;
      v15[2] = v31 + 1;
      v15[v31 + 4] = v28;
      unint64_t v13 = _swiftEmptyArrayStorage;
      if (v14 == v54)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    uint64_t v56 = v15;
    unint64_t v22 = 0;
    while (v22 < *(void *)(v20 + 16))
    {
      unint64_t v23 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
      uint64_t v18 = *(void *)(v61 + 72);
      sub_100107A48(v20 + v23 + v18 * v22, (uint64_t)v12, type metadata accessor for TextDetectorResult.DataDetector);
      if ((*v12 & v62) != 0)
      {
        uint64_t v24 = (uint64_t)v9;
        sub_100107AB0((uint64_t)v12, (uint64_t)v9, type metadata accessor for TextDetectorResult.DataDetector);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000407D0(0, v13[2] + 1, 1);
        }
        unint64_t v13 = v63;
        unint64_t v26 = v63[2];
        unint64_t v25 = v63[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000407D0(v25 > 1, v26 + 1, 1);
          unint64_t v13 = v63;
        }
        v13[2] = v26 + 1;
        uint64_t v27 = (uint64_t)v13 + v23 + v26 * v18;
        int64_t v9 = (char *)v24;
        sub_100107AB0(v24, v27, type metadata accessor for TextDetectorResult.DataDetector);
      }
      else
      {
        sub_1001029CC((uint64_t)v12, type metadata accessor for TextDetectorResult.DataDetector);
      }
      if (v21 == ++v22)
      {
        int64_t v28 = v63;
        uint64_t v15 = v56;
        goto LABEL_16;
      }
    }
    __break(1u);
    sub_1001029CC(v18, type metadata accessor for TextDetectorResult.DataDetector);
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
LABEL_23:
    uint64_t v32 = v15[2];
    double v33 = v51;
    if (v32)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = 0;
      char v35 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v36 = v15[v34++ + 4];
        unint64_t v63 = v35;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10019FA80(v36);
        swift_bridgeObjectRelease();
        char v35 = v63;
      }
      while (v32 != v34);
      swift_bridgeObjectRelease();
    }
    else
    {
      char v35 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = v35[2];
    if (!v37) {
      goto LABEL_44;
    }
    uint64_t v38 = (uint64_t)v35 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    uint64_t v39 = *(void *)(v61 + 72);
    swift_bridgeObjectRetain();
    uint64_t v40 = _swiftEmptyArrayStorage;
    uint64_t v41 = v55;
    do
    {
      sub_100107A48(v38, (uint64_t)v41, type metadata accessor for TextDetectorResult.DataDetector);
      sub_1000F5E80(v41, v62, v33, (uint64_t *)&v63);
      sub_1001029CC((uint64_t)v41, type metadata accessor for TextDetectorResult.DataDetector);
      if ((v64 & 1) == 0)
      {
        uint64_t v42 = v63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v40 = sub_100329900(0, v40[2] + 1, 1, v40);
        }
        unint64_t v44 = v40[2];
        unint64_t v43 = v40[3];
        if (v44 >= v43 >> 1) {
          uint64_t v40 = sub_100329900((void *)(v43 > 1), v44 + 1, 1, v40);
        }
        void v40[2] = v44 + 1;
        v40[v44 + 4] = v42;
      }
      v38 += v39;
      --v37;
      uint64_t v41 = v55;
    }
    while (v37);
    swift_bridgeObjectRelease_n();
    uint64_t v45 = v40[2];
    if (v45)
    {
      uint64_t v46 = 0;
      double v47 = 0.0;
      do
      {
        unint64_t v48 = (double *)&v40[v46];
        if (v47 <= v48[4]) {
          double v47 = v48[4];
        }
        ++v46;
      }
      while (v45 != v46);
      swift_bridgeObjectRelease();
      if (v47 > 0.0)
      {
        sub_10000F214((uint64_t *)&unk_100529C10);
        uint64_t result = (void *)swift_allocObject();
        *((_OWORD *)result + 1) = xmmword_10043D4F0;
        *((double *)result + 4) = v47;
        *((unsigned char *)result + 40) = 0;
        return result;
      }
    }
    else
    {
LABEL_44:
      swift_bridgeObjectRelease();
    }
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100100EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7, double a8)
{
  uint64_t v15 = a7[3];
  uint64_t v16 = a7[4];
  uint64_t v17 = a6 & 1;
  sub_10000F3B0(a7, v15);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v16 + 16))(a1, a2, a3, a4, a5, v17, v15, v16, a8);
  uint64_t v20 = v19;
  uint64_t v21 = v18;
  if (qword_100517E50 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10000F378(v22, (uint64_t)qword_10055E208);
  sub_10000F578((uint64_t)a7, (uint64_t)v31);
  swift_bridgeObjectRetain_n();
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315394;
    sub_10000F578((uint64_t)v31, (uint64_t)v29);
    sub_10000F214(&qword_10051F5F8);
    uint64_t v26 = String.init<A>(reflecting:)();
    v29[0] = sub_1003806B0(v26, v27, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v31);
    *(_WORD *)(v25 + 12) = 2048;
    v29[0] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "  - %s produced score %f", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v31);
    swift_bridgeObjectRelease_n();
  }

  return v21;
}

void *sub_100101168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  int64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    char v13 = a7 & 1;
    sub_100040AB8(0, v8, 0);
    uint64_t v14 = (void *)(a1 + 32);
    do
    {
      uint64_t v15 = sub_100100EE4(a2, a3, a4, a5, a6, v13, v14, a8);
      uint64_t v17 = v16;
      uint64_t v18 = v15;
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      unint64_t v19 = _swiftEmptyArrayStorage[3];
      if (v20 >= v19 >> 1) {
        sub_100040AB8(v19 > 1, v20 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v20 + 1;
      uint64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
      v21[4] = v17;
      v21[5] = v18;
      v14 += 5;
      --v8;
    }
    while (v8);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100101288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  int64_t v9 = _swiftEmptyArrayStorage;
  do
  {
    long long v28 = *(_OWORD *)(a1 + 16 * v8 + 32);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000F9ADC((uint64_t)&v28, a2, a3, a5, a6, (uint64_t)v25);
    if (v6)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v25[0];
    if (v25[0])
    {
      uint64_t v12 = v25[1];
      uint64_t v13 = v25[2];
      uint64_t v14 = v25[3];
      long long v23 = v27;
      long long v24 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v9 = sub_10032912C(0, v9[2] + 1, 1, v9);
      }
      unint64_t v16 = v9[2];
      unint64_t v15 = v9[3];
      if (v16 >= v15 >> 1) {
        int64_t v9 = sub_10032912C((void *)(v15 > 1), v16 + 1, 1, v9);
      }
      v9[2] = v16 + 1;
      uint64_t v10 = &v9[8 * v16];
      v10[4] = v11;
      v10[5] = v12;
      v10[6] = v13;
      v10[7] = v14;
      *((_OWORD *)v10 + 4) = v24;
      *((_OWORD *)v10 + 5) = v23;
    }
    ++v8;
  }
  while (v18 != v8);
  swift_bridgeObjectRelease();
  return v9;
}

void *sub_10010144C(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v6) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_100040974(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0) {
      break;
    }
    unint64_t v14 = v3;
    uint64_t v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      [v9 distanceFromLocation:a2 v14];
      uint64_t v12 = v11;

      unint64_t v3 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v3 >= v13 >> 1) {
        sub_100040974(v13 > 1, v3 + 1, 1);
      }
      ++v8;
      _swiftEmptyArrayStorage[2] = v3 + 1;
      _swiftEmptyArrayStorage[v3 + 4] = v12;
      if (v6 == v8) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1001015C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  id v5 = [a1 name];
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10) {
    goto LABEL_16;
  }
  id v11 = [a1 _identifier];
  if (!v11) {
    goto LABEL_16;
  }
  uint64_t v12 = v11;
  id v13 = [a1 _localizedCategoryNamesForType:0];
  if (!v13) {
    goto LABEL_17;
  }
  unint64_t v14 = v13;
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v16 = sub_1000FB288(v15);
  swift_bridgeObjectRelease();
  if (!v16
    || (swift_bridgeObjectRelease(),
        (id v17 = [a1 _localizedCategoryNamesForType:1]) == 0)
    || (uint64_t v18 = v17,
        uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v18,
        unint64_t v20 = sub_1000FB288(v19),
        swift_bridgeObjectRelease(),
        !v20))
  {
LABEL_17:
    swift_bridgeObjectRelease();

    goto LABEL_18;
  }
  id v21 = [objc_allocWithZone((Class)MKMapItem) initWithGeoMapItem:a1 isPlaceHolderPlace:0];
  if (!v21)
  {
    swift_bridgeObjectRelease();

LABEL_16:
    swift_bridgeObjectRelease();
LABEL_18:
    sub_100101D98((uint64_t)v70);
LABEL_19:
    sub_10000FC34((uint64_t)v70, (uint64_t)v78, &qword_10051F310);
    return sub_10000FC34((uint64_t)v78, a2, &qword_10051F310);
  }
  uint64_t v22 = v21;
  [a1 centerCoordinate];
  double v24 = v23;
  double v26 = v25;
  sub_1000FB3D0(a1);
  id v69 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v24 longitude:v26];
  id v27 = [a1 addressObject];
  if (v27)
  {
    long long v28 = v27;

    if (![a1 _hasAppleRatings]
      || (id v29 = [a1 _overallAppleRating]) == 0)
    {
      if ([a1 _hasUserRatingScore])
      {
        LODWORD(v32) = [a1 _sampleSizeForUserRatingScore];
        [a1 _normalizedUserRatingScore];
        unsigned int v37 = v36;
        id v38 = [v22 _reviewsDisplayName];
        if (v38)
        {
          uint64_t v39 = v38;
          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v67 = v41;
          uint64_t v68 = v40;
        }
        else
        {
          uint64_t v67 = 0;
          uint64_t v68 = 0;
        }
        char v66 = 0;
        uint64_t v65 = v37;
      }
      else
      {
        LODWORD(v32) = 0;
        uint64_t v65 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        char v66 = -1;
      }
      goto LABEL_27;
    }
    uint64_t v30 = v29;
    unsigned int v31 = [v29 numberOfRatingsUsedForScore];
    if ((v31 & 0x80000000) == 0)
    {
      LODWORD(v32) = v31;
      [v30 percentage];
      uint64_t v34 = v33;

      uint64_t v67 = 0;
      uint64_t v68 = 0;
      uint64_t v65 = v34;
      char v66 = 1;
LABEL_27:
      if ([v22 _hasBusinessHours]
        && (id v42 = [objc_allocWithZone((Class)_MKLocalizedHoursBuilder) initWithMapItem:v22 localizedHoursStringOptions:128 conciseStyle:1 openAt:0]) != 0)
      {
        unint64_t v43 = v42;
        int v63 = v32;
        id v44 = [v42 localizedOperatingHours];
        if (v44)
        {
          uint64_t v45 = v44;
          uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v60 = v47;
          uint64_t v61 = v46;
        }
        else
        {
          uint64_t v60 = 0;
          uint64_t v61 = 0;
        }
        LODWORD(v32) = v63;
        id v59 = [v43 state];
      }
      else
      {
        id v59 = 0;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
      }
      uint64_t v32 = v32;
      if (v20[2])
      {
        uint64_t v48 = v20[5];
        uint64_t v64 = v20[4];
        id v49 = v22;
        uint64_t v62 = v48;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v50 = v22;
        swift_bridgeObjectRelease();
        uint64_t v62 = 0;
        uint64_t v64 = 0;
      }
      if ([v22 _hasPriceDescription])
      {
        uint64_t v58 = v32;
        id v51 = [v22 _priceDescription];
      }
      else
      {
        if (![v22 _hasPriceRange])
        {
          uint64_t v53 = 0;
          uint64_t v55 = 0;
LABEL_46:
          uint64_t v56 = sub_1000FB798(ObjectType);

          v70[0] = v22;
          v70[1] = v12;
          v70[2] = v7;
          void v70[3] = v9;
          v70[4] = v64;
          v70[5] = v62;
          v70[6] = v32;
          v70[7] = v65;
          v70[8] = v68;
          v70[9] = v67;
          char v71 = v66;
          uint64_t v72 = v53;
          uint64_t v73 = v55;
          id v74 = v59;
          uint64_t v75 = v61;
          uint64_t v76 = v60;
          unint64_t v77 = v56;
          nullsub_2(v70, v57);
          goto LABEL_19;
        }
        uint64_t v58 = v32;
        id v51 = [v22 _priceRangeString];
      }
      id v52 = v51;
      if (v52)
      {
        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v55 = v54;
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v55 = 0;
      }
      uint64_t v32 = v58;
      goto LABEL_46;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100101B64(unint64_t a1)
{
  unint64_t v2 = v1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    v24[19] = v2;
    id v5 = _swiftEmptyArrayStorage;
    uint64_t v6 = 4;
    uint64_t v7 = 0;
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_4;
    }
LABEL_7:
    unint64_t v8 = *(void **)(a1 + 8 * v6);
    swift_unknownObjectRetain();
    BOOL v9 = __OFADD__(v7, 1);
    uint64_t v10 = v7 + 1;
    if (v9) {
      goto LABEL_18;
    }
LABEL_8:
    sub_1001015C0(v8, (uint64_t)v23);
    sub_10000FC34((uint64_t)v23, (uint64_t)v22, &qword_10051F310);
    swift_unknownObjectRelease();
    sub_10000FC34((uint64_t)v23, (uint64_t)v24, &qword_10051F310);
    if (sub_100101D80(v24) != 1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v5 = sub_100329B74(0, v5[2] + 1, 1, v5);
      }
      unint64_t v2 = v5[2];
      unint64_t v11 = v5[3];
      if (v2 >= v11 >> 1) {
        id v5 = sub_100329B74((void *)(v11 > 1), v2 + 1, 1, v5);
      }
      sub_10000FC34((uint64_t)v22, (uint64_t)v20, &qword_10051F310);
      void v5[2] = v2 + 1;
      uint64_t v12 = &v5[17 * v2];
      *((_OWORD *)v12 + 2) = v20[0];
      long long v13 = v20[4];
      long long v14 = v20[2];
      long long v15 = v20[1];
      *((_OWORD *)v12 + 5) = v20[3];
      *((_OWORD *)v12 + 6) = v13;
      *((_OWORD *)v12 + 3) = v15;
      *((_OWORD *)v12 + 4) = v14;
      long long v16 = v20[7];
      long long v17 = v20[6];
      long long v18 = v20[5];
      v12[20] = v21;
      *((_OWORD *)v12 + 8) = v17;
      *((_OWORD *)v12 + 9) = v16;
      *((_OWORD *)v12 + 7) = v18;
    }
    if (v10 == v4) {
      break;
    }
    uint64_t v7 = ++v6 - 4;
    if ((a1 & 0xC000000000000001) == 0) {
      goto LABEL_7;
    }
LABEL_4:
    unint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    BOOL v9 = __OFADD__(v7, 1);
    uint64_t v10 = v7 + 1;
    if (!v9) {
      goto LABEL_8;
    }
LABEL_18:
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4) {
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100101D80(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_100101D98(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_100101DB4(void **a1@<X0>, void *a2@<X8>)
{
  sub_1000FBD58(a1, *(void **)(v2 + 24), a2);
}

uint64_t type metadata accessor for GeoLookupResultBusiness.Action(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10051F478);
}

uint64_t sub_100101DF0(uint64_t a1, void *a2, void *a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = a3;
  }
  id v47 = v10;
  sub_100114C98(a2, a3, a4, a5);
  double v11 = 0.0;
  if (v12)
  {
    BOOL v15 = 1;
    long long v14 = v47;
  }
  else
  {
    int v13 = a5;
    if (a5)
    {
      long long v14 = v47;
      if (v13 == 1)
      {
        BOOL v15 = 1;
        goto LABEL_14;
      }
      double v16 = *(double *)&a4 * 180.0;
    }
    else
    {
      double v16 = 31.4159265;
      long long v14 = v47;
    }
    double v17 = v16 / 3.14159265;
    BOOL v15 = v17 >= 45.0 || v17 <= 0.0;
  }
LABEL_14:
  [v14 horizontalAccuracy];
  if (v18 > 0.0)
  {
    [v14 horizontalAccuracy];
    double v11 = v19;
  }
  unint64_t v20 = (void *)sub_10031B8CC((uint64_t)_swiftEmptyArrayStorage);
  [v14 coordinate];
  [v14 coordinate];
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = a1 + 40; ; i += 16)
    {
      double v24 = *(void **)(i - 8);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      [v24 centerCoordinate];
      j__GEOCalculateDistance();
      double v26 = v25;
      double v27 = 0.0;
      if (!v15)
      {
        [v24 centerCoordinate];
        GEOBearingFromCoordinateToCoordinate();
        GEOAngleDifferenceDegrees();
        double v27 = fabs(v28) * 3.14159265 / 180.0;
      }
      id v29 = [v24 _identifier];
      if (!v29) {
        break;
      }
      uint64_t v30 = v29;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v33 = sub_10032B008((uint64_t)v30);
      uint64_t v34 = v20[2];
      BOOL v35 = (v32 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35))
      {
        __break(1u);
LABEL_36:
        __break(1u);
        break;
      }
      char v37 = v32;
      if (v20[3] >= v36)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1001F4E74();
        }
      }
      else
      {
        sub_1001EBA8C(v36, isUniquelyReferenced_nonNull_native);
        unint64_t v38 = sub_10032B008((uint64_t)v30);
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_38;
        }
        unint64_t v33 = v38;
      }
      double v40 = v26 - v11;
      if (v37)
      {
        uint64_t v23 = v20[7] + 24 * v33;
        *(double *)uint64_t v23 = v40;
        *(double *)(v23 + 8) = v27;
        *(unsigned char *)(v23 + 16) = v15;
      }
      else
      {
        v20[(v33 >> 6) + 8] |= 1 << v33;
        *(void *)(v20[6] + 8 * v33) = v30;
        uint64_t v41 = v20[7] + 24 * v33;
        *(double *)uint64_t v41 = v40;
        *(double *)(v41 + 8) = v27;
        *(unsigned char *)(v41 + 16) = v15;
        uint64_t v42 = v20[2];
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_36;
        }
        v20[2] = v44;
        id v45 = v30;
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      if (!--v21)
      {

        swift_bridgeObjectRelease();
        return (uint64_t)v20;
      }
    }
    __break(1u);
LABEL_38:
    sub_10000F734(0, (unint64_t *)&unk_10051F2D8);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {

    return (uint64_t)v20;
  }
  return result;
}

void *sub_1001021B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v2);
  uint64_t v50 = (uint64_t)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v13 = *(void *)(v8 + 72);
  uint64_t v42 = a1;
  swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  id v51 = _swiftEmptyArrayStorage;
  uint64_t v48 = v4;
  id v49 = v10;
  uint64_t v43 = v2;
  uint64_t v44 = v13;
  uint64_t v46 = v11;
  id v47 = v6;
  uint64_t v45 = v12;
  do
  {
    sub_100107A48(v12 + v13 * v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_100107A48((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v15 = v50;
      sub_100107AB0((uint64_t)v6, v50, type metadata accessor for TextDetectorResult);
      uint64_t v16 = *(void *)(v15 + *(int *)(v2 + 44));
      int64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        uint64_t v56 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_1000407B0(0, v17, 0);
        double v18 = v56;
        double v19 = (uint64_t *)(v16 + 48);
        do
        {
          uint64_t v20 = *(v19 - 1);
          uint64_t v21 = *v19;
          uint64_t v56 = v18;
          unint64_t v23 = v18[2];
          unint64_t v22 = v18[3];
          swift_bridgeObjectRetain();
          if (v23 >= v22 >> 1)
          {
            sub_1000407B0(v22 > 1, v23 + 1, 1);
            double v18 = v56;
          }
          v18[2] = v23 + 1;
          double v24 = &v18[2 * v23];
          unsigned char v24[4] = v20;
          v24[5] = v21;
          v19 += 5;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease();
        uint64_t v2 = v43;
        uint64_t v10 = v49;
      }
      else
      {
        double v18 = _swiftEmptyArrayStorage;
      }
      uint64_t v56 = v18;
      sub_10000F214((uint64_t *)&unk_100522CD0);
      sub_100024278();
      uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
      double v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v28 = sub_1000F94CC(v25, v27);
      uint64_t v30 = v29;
      swift_bridgeObjectRelease();
      unsigned int v31 = sub_100335A80();
      uint64_t v56 = (void *)v28;
      uint64_t v57 = v30;
      uint64_t v54 = 32;
      unint64_t v55 = 0xE100000000000000;
      uint64_t v52 = 0;
      unint64_t v53 = 0xE000000000000000;
      sub_1000317A0();
      uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v34 = v33;
      uint64_t v35 = v50;
      uint64_t v36 = *(void *)(v50 + *(int *)(v2 + 48));
      swift_bridgeObjectRetain();
      sub_1001029CC(v35, type metadata accessor for TextDetectorResult);
      sub_1001029CC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        char v37 = v51;
      }
      else {
        char v37 = sub_100329004(0, v51[2] + 1, 1, v51);
      }
      unint64_t v39 = v37[2];
      unint64_t v38 = v37[3];
      if (v39 >= v38 >> 1) {
        char v37 = sub_100329004((void *)(v38 > 1), v39 + 1, 1, v37);
      }
      v37[2] = v39 + 1;
      id v51 = v37;
      double v40 = &v37[6 * v39];
      v40[4] = v28;
      v40[5] = v30;
      v40[6] = v32;
      v40[7] = v34;
      v40[8] = v31;
      v40[9] = v36;
      uint64_t v6 = v47;
      uint64_t v10 = v49;
      uint64_t v12 = v45;
      uint64_t v11 = v46;
      uint64_t v13 = v44;
    }
    else
    {
      sub_1001029CC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1001029CC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
    }
    ++v14;
  }
  while (v14 != v11);
  swift_bridgeObjectRelease();
  return v51;
}

unint64_t sub_10010264C()
{
  unint64_t result = qword_10051F358;
  if (!qword_10051F358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F358);
  }
  return result;
}

unint64_t sub_1001026A0()
{
  unint64_t result = qword_10051F368;
  if (!qword_10051F368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F368);
  }
  return result;
}

uint64_t sub_1001026F4()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);

  return swift_deallocObject();
}

unint64_t sub_10010272C()
{
  unint64_t result = qword_10051F370;
  if (!qword_10051F370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F370);
  }
  return result;
}

unint64_t sub_100102780()
{
  unint64_t result = qword_10051F378;
  if (!qword_10051F378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F378);
  }
  return result;
}

unint64_t sub_1001027D4()
{
  unint64_t result = qword_10051F380;
  if (!qword_10051F380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F380);
  }
  return result;
}

unint64_t sub_100102828()
{
  unint64_t result = qword_10051F388;
  if (!qword_10051F388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F388);
  }
  return result;
}

unint64_t sub_10010287C()
{
  unint64_t result = qword_10051F390;
  if (!qword_10051F390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F390);
  }
  return result;
}

unint64_t sub_1001028D0()
{
  unint64_t result = qword_10051F398;
  if (!qword_10051F398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F398);
  }
  return result;
}

unint64_t sub_100102924()
{
  unint64_t result = qword_10051F3A0;
  if (!qword_10051F3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F3A0);
  }
  return result;
}

unint64_t sub_100102978()
{
  unint64_t result = qword_10051F3A8;
  if (!qword_10051F3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F3A8);
  }
  return result;
}

uint64_t sub_1001029CC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100102A30()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100102A78(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10000F878;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(sub_1000F45C8, v5, 0);
}

uint64_t sub_100102B2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6564497370616DLL && a2 == 0xEE00726569666974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x666E496775626564 && a2 == 0xE90000000000006FLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void sub_100102D00(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_10051F5A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10010778C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000F734(0, &qword_10051F5B8);
    char v24 = 0;
    sub_1001077E0(&qword_10051F5C0, &qword_10051F5B8);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = (void *)v21;
    LOBYTE(v21) = 1;
    id v10 = v9;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v12;
    uint64_t v20 = v11;
    LOBYTE(v21) = 2;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v14;
    char v24 = 3;
    sub_100107824();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v19 = v21;
    uint64_t v17 = v22;
    uint64_t v16 = v23;
    swift_bridgeObjectRetain();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v18 = v20;
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v18;
    *(void *)(a2 + 16) = v13;
    *(void *)(a2 + 24) = v15;
    *(_OWORD *)(a2 + 32) = v19;
    *(void *)(a2 + 48) = v17;
    *(void *)(a2 + 56) = v16;
  }
}

uint64_t sub_10010302C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6374614D74786574 && a2 == 0xE900000000000068;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E697461526F6ELL && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4D676E6964616568 && a2 == 0xEC00000068637461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100103210(void *a1)
{
  uint64_t v46 = sub_10000F214(&qword_10051F708);
  uint64_t v43 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000F214(&qword_10051F710);
  uint64_t v38 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000F214(&qword_10051F718);
  uint64_t v41 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051F720);
  uint64_t v40 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051F728);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  id v47 = a1;
  uint64_t v14 = (uint64_t)sub_10000F3B0(a1, v13);
  sub_100108590();
  uint64_t v15 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v16 = v8;
    uint64_t v36 = v6;
    uint64_t v37 = 0;
    uint64_t v18 = v44;
    uint64_t v17 = v45;
    uint64_t v19 = v46;
    uint64_t v48 = v10;
    uint64_t v20 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v20 + 16) == 1)
    {
      switch(*(unsigned char *)(v20 + 32))
      {
        case 1:
          char v50 = 1;
          sub_10010868C();
          uint64_t v14 = (uint64_t)v12;
          uint64_t v28 = v37;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v28) {
            goto LABEL_10;
          }
          (*(void (**)(char *, uint64_t))(v41 + 8))(v5, v39);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v9);
          uint64_t v14 = 0;
          goto LABEL_17;
        case 2:
          char v51 = 2;
          sub_100108638();
          uint64_t v14 = (uint64_t)v12;
          uint64_t v29 = v37;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v29) {
            goto LABEL_10;
          }
          (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v42);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v9);
          uint64_t v14 = 1;
LABEL_17:
          _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v47);
          return v14;
        case 3:
          char v52 = 3;
          sub_1001085E4();
          uint64_t v14 = (uint64_t)v12;
          uint64_t v32 = v37;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v32)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v9);
            uint64_t v30 = (uint64_t)v47;
            goto LABEL_12;
          }
          KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v33 = v48;
          uint64_t v35 = v34;
          (*(void (**)(char *, uint64_t))(v43 + 8))(v17, v19);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v9);
          uint64_t v14 = v35;
          _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v47);
          return v14;
        default:
          char v49 = 0;
          sub_1001086E0();
          uint64_t v14 = (uint64_t)v12;
          uint64_t v21 = v37;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (!v21)
          {
            uint64_t v22 = v36;
            KeyedDecodingContainer.decode(_:forKey:)();
            uint64_t v24 = v23;
            (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v22);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v9);
            uint64_t v14 = v24;
            _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v47);
            return v14;
          }
LABEL_10:
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v9);
          break;
      }
    }
    else
    {
      uint64_t v25 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v14 = (uint64_t)v12;
      double v27 = v26;
      sub_10000F214(&qword_10051E3E0);
      *double v27 = &type metadata for GeoLookup.GeoLookupResultDebugInfo.ScoreReason;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v25);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v14, v9);
    }
  }
  uint64_t v30 = (uint64_t)v47;
LABEL_12:
  _s6Tamale17AnyLocalizedErrorVwxx_0(v30);
  return v14;
}

uint64_t sub_100103984(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100427330
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61655265726F6373 && a2 == 0xEC000000736E6F73)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100103A8C(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051F6B8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10010837C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v9 = 0;
  sub_1001083D0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8[2];
  sub_10000F214(&qword_10051F6D0);
  char v9 = 1;
  sub_1001084CC(&qword_10051F6D8, (void (*)(void))sub_100108424);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return v6;
}

uint64_t sub_100103CB4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65636E6174736964 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C676E61 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_100103DA0(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051F648);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F3B0(a1, a1[3]);
  sub_100107BA0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    sub_100107BF4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100103F6C(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051F3D8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for URLComponents();
  uint64_t v5 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v97 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_10051F3E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
  uint64_t result = (uint64_t)[(id)swift_unknownObjectRetain() name];
  if (!result)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v13 = (void *)result;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  uint64_t v17 = sub_1000F94CC(v14, v16);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  *(void *)(inited + 32) = v17;
  *(void *)(inited + 40) = v19;
  uint64_t v20 = sub_10033102C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v101 = v20;
  id v96 = a1;
  id v21 = [a1 secondaryName];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    Swift::Int v26 = sub_1000F94CC(v23, v25);
    Swift::Int v28 = v27;
    swift_bridgeObjectRelease();
    sub_1001F934C(v100, v26, v28);
    swift_bridgeObjectRelease();
  }
  static Locale.current.getter();
  Locale.identifier.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = v96;
  id v31 = [v96 spokenNameForLocale:v29];

  uint64_t v32 = v5;
  if (v31)
  {
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    Swift::Int v36 = sub_1000F94CC(v33, v35);
    Swift::Int v38 = v37;
    id v30 = v96;
    swift_bridgeObjectRelease();
    sub_1001F934C(v100, v36, v38);
    swift_bridgeObjectRelease();
  }
  id v39 = [v30 secondarySpokenName];
  uint64_t v40 = v98;
  if (v39)
  {
    uint64_t v41 = v39;
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    Swift::Int v45 = sub_1000F94CC(v42, v44);
    Swift::Int v47 = v46;
    id v30 = v96;
    swift_bridgeObjectRelease();
    sub_1001F934C(v100, v45, v47);
    swift_bridgeObjectRelease();
  }
  id v48 = [v30 _businessURL];
  if (v48)
  {
    char v49 = v48;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URLComponents.init(string:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v4, 1, v40) == 1)
    {
      sub_10000FBD8((uint64_t)v4, &qword_10051F3D8);
LABEL_11:
      id v30 = v96;
      goto LABEL_21;
    }
    char v50 = v97;
    (*(void (**)(void))(v32 + 32))();
    uint64_t v51 = URLComponents.host.getter();
    id v30 = v96;
    if (!v52)
    {
LABEL_20:
      (*(void (**)(char *, uint64_t))(v32 + 8))(v50, v40);
      goto LABEL_21;
    }
    v100[0] = v51;
    v100[1] = v52;
    v99[0] = 46;
    v99[1] = 0xE100000000000000;
    sub_1000317A0();
    unint64_t v53 = (void *)StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    unint64_t v54 = v53[2];
    if (v54 >= 2)
    {
      unint64_t v55 = (v54 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v55)
      {
        uint64_t result = v53[4];
        if (result == 7829367 && v53[5] == 0xE300000000000000
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          unint64_t v56 = 1;
          if (v55 == 1) {
            goto LABEL_19;
          }
        }
        else
        {
          unint64_t v56 = 0;
        }
        if (v55 > v56)
        {
          uint64_t v94 = v53;
          uint64_t v78 = (uint64_t)&v53[2 * v55 + 4];
          uint64_t v79 = *(void *)(v78 - 16);
          uint64_t v80 = *(void **)(v78 - 8);
          swift_bridgeObjectRetain();
          uint64_t v81 = sub_1000F94CC(v79, v80);
          unint64_t v83 = v82;
          swift_bridgeObjectRelease();
          uint64_t v84 = v101 + 56;
          uint64_t v85 = 1 << *(unsigned char *)(v101 + 32);
          uint64_t v86 = -1;
          if (v85 < 64) {
            uint64_t v86 = ~(-1 << v85);
          }
          uint64_t v87 = v86 & *(void *)(v101 + 56);
          int64_t v95 = (unint64_t)(v85 + 63) >> 6;
          uint64_t result = swift_bridgeObjectRetain();
          int64_t v88 = 0;
          while (1)
          {
            if (v87)
            {
              v87 &= v87 - 1;
            }
            else
            {
              int64_t v91 = v88 + 1;
              if (__OFADD__(v88, 1)) {
                goto LABEL_63;
              }
              if (v91 >= v95)
              {
LABEL_58:
                swift_release();
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease();
                goto LABEL_59;
              }
              uint64_t v92 = *(void *)(v84 + 8 * v91);
              ++v88;
              if (!v92)
              {
                int64_t v88 = v91 + 1;
                if (v91 + 1 >= v95) {
                  goto LABEL_58;
                }
                uint64_t v92 = *(void *)(v84 + 8 * v88);
                if (!v92)
                {
                  int64_t v88 = v91 + 2;
                  if (v91 + 2 >= v95) {
                    goto LABEL_58;
                  }
                  uint64_t v92 = *(void *)(v84 + 8 * v88);
                  if (!v92)
                  {
                    int64_t v93 = v91 + 3;
                    if (v93 >= v95) {
                      goto LABEL_58;
                    }
                    uint64_t v92 = *(void *)(v84 + 8 * v93);
                    if (!v92)
                    {
                      while (1)
                      {
                        int64_t v88 = v93 + 1;
                        if (__OFADD__(v93, 1)) {
                          goto LABEL_64;
                        }
                        if (v88 >= v95) {
                          goto LABEL_58;
                        }
                        uint64_t v92 = *(void *)(v84 + 8 * v88);
                        ++v93;
                        if (v92) {
                          goto LABEL_56;
                        }
                      }
                    }
                    int64_t v88 = v93;
                  }
                }
              }
LABEL_56:
              uint64_t v87 = (v92 - 1) & v92;
            }
            swift_bridgeObjectRetain();
            v89._uint64_t countAndFlagsBits = v81;
            v89._object = v83;
            Swift::Bool v90 = String.hasPrefix(_:)(v89);
            uint64_t result = swift_bridgeObjectRelease();
            if (v90)
            {
              swift_release();
              sub_1001F934C(v100, v81, (Swift::Int)v83);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
LABEL_59:
              (*(void (**)(char *, uint64_t))(v32 + 8))(v97, v40);
              goto LABEL_11;
            }
          }
        }
        goto LABEL_66;
      }
    }
LABEL_19:
    swift_unknownObjectRelease();
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v57 = (char *)v101;
  int64_t v58 = *(void *)(v101 + 16);
  if (v58)
  {
    v100[0] = (Swift::Int)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100040A98(0, v58, 0);
    uint64_t result = sub_10020B98C(v57);
    uint64_t v59 = result;
    uint64_t v61 = v60;
    char v63 = v62 & 1;
    uint64_t v97 = v57;
    uint64_t v98 = (uint64_t)(v57 + 56);
    while ((v59 & 0x8000000000000000) == 0 && v59 < 1 << v57[32])
    {
      if (((*(void *)(v98 + (((unint64_t)v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0) {
        goto LABEL_61;
      }
      if (*((_DWORD *)v57 + 9) != v61) {
        goto LABEL_62;
      }
      uint64_t v64 = (void *)(*((void *)v57 + 6) + 16 * v59);
      uint64_t v65 = (void *)*v64;
      char v66 = (void *)v64[1];
      id v67 = objc_allocWithZone((Class)NLTokenizer);
      swift_bridgeObjectRetain_n();
      id v68 = [v67 initWithUnit:0];
      NSString v69 = String._bridgeToObjectiveC()();
      [v68 setString:v69];

      v99[0] = _swiftEmptyArrayStorage;
      __chkstk_darwin(v70);
      *(&v94 - 4) = v65;
      *(&v94 - 3) = v66;
      *(&v94 - 2) = v99;
      NLTokenizer.enumerateTokens(in:using:)();
      swift_bridgeObjectRelease();

      uint64_t v71 = v99[0];
      Swift::Int v72 = v100[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040A98(0, *(void *)(v72 + 16) + 1, 1);
        Swift::Int v72 = v100[0];
      }
      unint64_t v74 = *(void *)(v72 + 16);
      unint64_t v73 = *(void *)(v72 + 24);
      if (v74 >= v73 >> 1)
      {
        sub_100040A98(v73 > 1, v74 + 1, 1);
        Swift::Int v72 = v100[0];
      }
      *(void *)(v72 + 16) = v74 + 1;
      uint64_t v75 = (void *)(v72 + 24 * v74);
      v75[4] = v65;
      v75[5] = v66;
      v75[6] = v71;
      uint64_t v57 = v97;
      uint64_t result = sub_10020BA30(v59, v61, v63 & 1, v97);
      uint64_t v59 = result;
      uint64_t v61 = v76;
      char v63 = v77 & 1;
      if (!--v58)
      {
        sub_1000BDE84(result, v76, v77 & 1);
        swift_bridgeObjectRelease_n();
        id v30 = v96;
        swift_unknownObjectRelease();
        return (uint64_t)v30;
      }
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return (uint64_t)v30;
}

uint64_t sub_100104940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033624C(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void ***)(v3 + 32));
}

uint64_t sub_10010494C(uint64_t a1)
{
  return sub_1000F48A8(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100104954()
{
  uint64_t v1 = sub_10000F214(&qword_10051F3E8);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1001049FC(uint64_t a1, uint64_t a2)
{
  return sub_100104A1C(a1, a2, &qword_10051F3E8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))sub_1000F4B80);
}

uint64_t sub_100104A1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(sub_10000F214(a3) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v4 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));

  return a4(a1, a2, v4 + v8, v9);
}

uint64_t getEnumTagSinglePayload for GeoLookup.RelativePositionEstimate(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GeoLookup.RelativePositionEstimate(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.RelativePositionEstimate()
{
  return &type metadata for GeoLookup.RelativePositionEstimate;
}

ValueMetadata *type metadata accessor for GeoLookup.PreprocessedTextDetections()
{
  return &type metadata for GeoLookup.PreprocessedTextDetections;
}

uint64_t destroy for GeoLookup.PreprocessedTextDetections.TextDetection()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for GeoLookup.PreprocessedTextDetections.TextDetection(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GeoLookup.PreprocessedTextDetections.TextDetection(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GeoLookup.PreprocessedTextDetections.TextDetection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookup.PreprocessedTextDetections.TextDetection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookup.PreprocessedTextDetections.TextDetection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.PreprocessedTextDetections.TextDetection()
{
  return &type metadata for GeoLookup.PreprocessedTextDetections.TextDetection;
}

uint64_t *assignWithCopy for GeoLookup.ScoreFilter(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for GeoLookup.ScoreFilter(uint64_t a1, uint64_t a2)
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for GeoLookup.ScoreFilter()
{
  return &type metadata for GeoLookup.ScoreFilter;
}

ValueMetadata *type metadata accessor for GeoLookup.HeadingResultRanker()
{
  return &type metadata for GeoLookup.HeadingResultRanker;
}

ValueMetadata *type metadata accessor for GeoLookup.BrandClassificationRanker()
{
  return &type metadata for GeoLookup.BrandClassificationRanker;
}

ValueMetadata *type metadata accessor for GeoLookup.DataDetectorDetectionRanker()
{
  return &type metadata for GeoLookup.DataDetectorDetectionRanker;
}

ValueMetadata *type metadata accessor for GeoLookup.TextDetectionRanker()
{
  return &type metadata for GeoLookup.TextDetectionRanker;
}

ValueMetadata *type metadata accessor for GeoLookup.DoorNumberRanker()
{
  return &type metadata for GeoLookup.DoorNumberRanker;
}

uint64_t destroy for GeoLookup.CompositeRanker()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t _s6Tamale9GeoLookupC15CompositeRankerVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for GeoLookup.CompositeRanker(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GeoLookup.CompositeRanker(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookup.CompositeRanker(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookup.CompositeRanker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.CompositeRanker()
{
  return &type metadata for GeoLookup.CompositeRanker;
}

ValueMetadata *type metadata accessor for GeoLookup.ProximityRanker()
{
  return &type metadata for GeoLookup.ProximityRanker;
}

uint64_t _s6Tamale9GeoLookupC11ScoreFilterVwcp_0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t _s6Tamale9GeoLookupC11ScoreFilterVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100105104(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.WeightedRanker()
{
  return &type metadata for GeoLookup.WeightedRanker;
}

ValueMetadata *type metadata accessor for GeoLookup.ConstantRanker()
{
  return &type metadata for GeoLookup.ConstantRanker;
}

char *sub_100105170(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      char v11 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v11;
      uint64_t v12 = a2[3];
      *((void *)a1 + 2) = a2[2];
      *((void *)a1 + 3) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = *(int *)(sub_10000F214(&qword_10051F400) + 64);
      uint64_t v14 = &a1[v13];
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      unint64_t v8 = *a2;
      *(void *)a1 = *a2;
      uint64_t v9 = v8;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_1001052C4(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v4 = (char *)a1 + *(int *)(sub_10000F214(&qword_10051F400) + 64);
    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
    v6(v4, v5);
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = *a1;
  }
}

void *sub_100105388(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    uint64_t v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = *(int *)(sub_10000F214(&qword_10051F400) + 64);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = (void *)*a2;
    *a1 = *a2;
    id v8 = v7;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100105498(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001029CC((uint64_t)a1, type metadata accessor for GeoLookupResultBusiness.Action);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = *(int *)(sub_10000F214(&qword_10051F400) + 64);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = (void *)*a2;
      *a1 = *a2;
      id v8 = v7;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

_OWORD *sub_1001055DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = *(int *)(sub_10000F214(&qword_10051F400) + 64);
    id v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_1001056B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001029CC((uint64_t)a1, type metadata accessor for GeoLookupResultBusiness.Action);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = *(int *)(sub_10000F214(&qword_10051F400) + 64);
      id v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001057B0()
{
  v2[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100105860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for GeoLookupResultBusiness(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 != 255) {
    sub_1001058F0(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), v2 & 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001058F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for GeoLookupResultBusiness(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 80);
  id v9 = v4;
  id v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 255)
  {
    long long v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  }
  else
  {
    char v12 = v8 & 1;
    uint64_t v13 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    uint64_t v15 = *(void *)(a2 + 64);
    uint64_t v16 = *(void *)(a2 + 72);
    sub_100105860(v13, v14, v15, v16, v12);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v16;
    *(unsigned char *)(a1 + 80) = v12;
  }
  uint64_t v17 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeoLookupResultBusiness(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  int v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = (long long *)(a1 + 48);
  long long v11 = (long long *)(a2 + 48);
  int v12 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v12 == 255)
    {
      long long v15 = *v11;
      long long v16 = *(_OWORD *)(a2 + 64);
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *id v10 = v15;
      *(_OWORD *)(a1 + 64) = v16;
    }
    else
    {
      char v27 = v12 & 1;
      uint64_t v28 = *(void *)(a2 + 48);
      uint64_t v29 = *(void *)(a2 + 56);
      uint64_t v30 = *(void *)(a2 + 64);
      uint64_t v31 = *(void *)(a2 + 72);
      sub_100105860(v28, v29, v30, v31, v12 & 1);
      *(void *)(a1 + 48) = v28;
      *(void *)(a1 + 56) = v29;
      *(void *)(a1 + 64) = v30;
      *(void *)(a1 + 72) = v31;
      *(unsigned char *)(a1 + 80) = v27;
    }
  }
  else if (v12 == 255)
  {
    sub_100105BC8(a1 + 48);
    char v13 = *(unsigned char *)(a2 + 80);
    long long v14 = *(_OWORD *)(a2 + 64);
    *id v10 = *v11;
    *(_OWORD *)(a1 + 64) = v14;
    *(unsigned char *)(a1 + 80) = v13;
  }
  else
  {
    char v17 = v12 & 1;
    uint64_t v18 = *(void *)(a2 + 48);
    uint64_t v19 = *(void *)(a2 + 56);
    uint64_t v20 = *(void *)(a2 + 64);
    uint64_t v21 = *(void *)(a2 + 72);
    sub_100105860(v18, v19, v20, v21, v12 & 1);
    uint64_t v22 = *(void *)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 56);
    uint64_t v24 = *(void *)(a1 + 64);
    uint64_t v25 = *(void *)(a1 + 72);
    char v26 = *(unsigned char *)(a1 + 80);
    *(void *)(a1 + 48) = v18;
    *(void *)(a1 + 56) = v19;
    *(void *)(a1 + 64) = v20;
    *(void *)(a1 + 72) = v21;
    *(unsigned char *)(a1 + 80) = v17;
    sub_1001058F0(v22, v23, v24, v25, v26);
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100105BC8(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for GeoLookupResultBusiness(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for GeoLookupResultBusiness(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  int v8 = *(unsigned __int8 *)(a1 + 80);
  if (v8 != 255)
  {
    int v9 = *(unsigned __int8 *)(a2 + 80);
    if (v9 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(a1 + 64);
      uint64_t v14 = *(void *)(a1 + 72);
      long long v15 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v15;
      *(unsigned char *)(a1 + 80) = v9 & 1;
      sub_1001058F0(v11, v12, v13, v14, v8 & 1);
      goto LABEL_6;
    }
    sub_100105BC8(a1 + 48);
  }
  long long v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
LABEL_6:
  uint64_t v16 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v16;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookupResultBusiness(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookupResultBusiness(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultBusiness()
{
  return &type metadata for GeoLookupResultBusiness;
}

uint64_t destroy for GeoLookupResultBusiness.Ratings(uint64_t a1)
{
  return sub_1001058F0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for GeoLookupResultBusiness.Ratings(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_100105860(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for GeoLookupResultBusiness.Ratings(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_100105860(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  sub_1001058F0(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for GeoLookupResultBusiness.Ratings(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  sub_1001058F0(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookupResultBusiness.Ratings(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookupResultBusiness.Ratings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100105FB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_100105FC0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GeoLookupResultBusiness.Ratings()
{
  return &type metadata for GeoLookupResultBusiness.Ratings;
}

uint64_t sub_100105FDC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for GeoLookup.GeoServiceError(uint64_t a1)
{
  return sub_10010600C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_10010600C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for GeoLookup.GeoServiceError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_100105FDC(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for GeoLookup.GeoServiceError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_100105FDC(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_10010600C(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for GeoLookup.GeoServiceError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_10010600C(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_100106148(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100106160(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(void *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoServiceError()
{
  return &type metadata for GeoLookup.GeoServiceError;
}

uint64_t sub_10010618C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_100106218(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    unsigned int v10 = a2[v5];
    if (v10 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_18;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_18:
          int v13 = (v12 | ((v10 - 2) << (8 * v5))) + 2;
          unsigned int v14 = v12 + 2;
          if (v5 >= 4) {
            unsigned int v10 = v14;
          }
          else {
            unsigned int v10 = v13;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(void *))(v4 + 16))(a1);
    *((unsigned char *)v3 + v5) = v10 == 1;
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return v3;
}

uint64_t sub_100106380(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1001063AC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_1001064CC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t sub_100106634(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_100106754(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t sub_1001068BC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_20;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_20:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_20;
  }
LABEL_12:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_1001069E4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_32:
        __break(1u);
        JUMPOUT(0x100106BA0);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_20;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      default:
LABEL_20:
        if (a2) {
LABEL_21:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_100106BC8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_10;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_10:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_100106C74(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for SimilarityAlgorithmWrapper()
{
  return sub_1000684BC();
}

uint64_t destroy for GeoLookup.GeoLookupResult(id *a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeoLookup.GeoLookupResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeoLookup.GeoLookupResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithCopy for Corners(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GeoLookup.GeoLookupResult(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookup.GeoLookupResult(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookup.GeoLookupResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResult()
{
  return &type metadata for GeoLookup.GeoLookupResult;
}

uint64_t destroy for GeoLookup.CandidateResult.TokenizedString()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s6Tamale9GeoLookupC15CandidateResultV15TokenizedStringVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GeoLookup.CandidateResult.TokenizedString(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GeoLookup.CandidateResult.TokenizedString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GeoLookup.CandidateResult.TokenizedString()
{
  return &type metadata for GeoLookup.CandidateResult.TokenizedString;
}

unint64_t sub_100107110()
{
  unint64_t result = qword_10051F530;
  if (!qword_10051F530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F530);
  }
  return result;
}

unint64_t sub_100107168()
{
  unint64_t result = qword_10051F538;
  if (!qword_10051F538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F538);
  }
  return result;
}

unint64_t sub_1001071C0()
{
  unint64_t result = qword_10051F540;
  if (!qword_10051F540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F540);
  }
  return result;
}

uint64_t sub_100107214()
{
  return sub_1000FFB84(&qword_10051F548, (void (*)(uint64_t))type metadata accessor for GeoLookupResultBusiness.Action);
}

unint64_t sub_100107260()
{
  unint64_t result = qword_10051F550;
  if (!qword_10051F550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F550);
  }
  return result;
}

unint64_t sub_1001072B4(uint64_t a1)
{
  unint64_t result = sub_1001072DC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001072DC()
{
  unint64_t result = qword_10051F558;
  if (!qword_10051F558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F558);
  }
  return result;
}

unint64_t sub_100107330(uint64_t a1)
{
  unint64_t result = sub_100107358();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100107358()
{
  unint64_t result = qword_10051F560;
  if (!qword_10051F560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F560);
  }
  return result;
}

unint64_t sub_1001073AC(uint64_t a1)
{
  unint64_t result = sub_1001073D4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001073D4()
{
  unint64_t result = qword_10051F568;
  if (!qword_10051F568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F568);
  }
  return result;
}

unint64_t sub_100107428(uint64_t a1)
{
  unint64_t result = sub_100107450();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100107450()
{
  unint64_t result = qword_10051F570;
  if (!qword_10051F570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F570);
  }
  return result;
}

unint64_t sub_1001074A4(uint64_t a1)
{
  unint64_t result = sub_1001074CC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001074CC()
{
  unint64_t result = qword_10051F578;
  if (!qword_10051F578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F578);
  }
  return result;
}

unint64_t sub_100107520(uint64_t a1)
{
  unint64_t result = sub_100107548();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100107548()
{
  unint64_t result = qword_10051F580;
  if (!qword_10051F580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F580);
  }
  return result;
}

unint64_t sub_10010759C(uint64_t a1)
{
  unint64_t result = sub_1001075C4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001075C4()
{
  unint64_t result = qword_10051F588;
  if (!qword_10051F588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F588);
  }
  return result;
}

unint64_t sub_100107618(uint64_t a1)
{
  unint64_t result = sub_100107640();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100107640()
{
  unint64_t result = qword_10051F590;
  if (!qword_10051F590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F590);
  }
  return result;
}

unint64_t sub_100107694(uint64_t a1)
{
  unint64_t result = sub_1001076BC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001076BC()
{
  unint64_t result = qword_10051F598;
  if (!qword_10051F598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F598);
  }
  return result;
}

unint64_t sub_100107710(uint64_t a1)
{
  unint64_t result = sub_100107738();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100107738()
{
  unint64_t result = qword_10051F5A0;
  if (!qword_10051F5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F5A0);
  }
  return result;
}

unint64_t sub_10010778C()
{
  unint64_t result = qword_10051F5B0;
  if (!qword_10051F5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F5B0);
  }
  return result;
}

uint64_t sub_1001077E0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F734(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100107824()
{
  unint64_t result = qword_10051F5C8;
  if (!qword_10051F5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F5C8);
  }
  return result;
}

unint64_t sub_100107878()
{
  unint64_t result = qword_10051F5E8;
  if (!qword_10051F5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10051F5E8);
  }
  return result;
}

uint64_t *sub_1001078CC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100107904(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100107968()
{
  unint64_t result = qword_10051F610;
  if (!qword_10051F610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F610);
  }
  return result;
}

uint64_t sub_1001079BC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t sub_1001079F4()
{
  unint64_t result = qword_10051F620;
  if (!qword_10051F620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F620);
  }
  return result;
}

uint64_t sub_100107A48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100107AB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id *sub_100107B18(id *a1)
{
  id v2 = *a1;
  return a1;
}

id *sub_100107B44(id *a1)
{
  return a1;
}

uint64_t sub_100107B70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return sub_100105860(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_100107B88(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return sub_1001058F0(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

unint64_t sub_100107BA0()
{
  unint64_t result = qword_10051F650;
  if (!qword_10051F650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F650);
  }
  return result;
}

unint64_t sub_100107BF4()
{
  unint64_t result = qword_10051F658;
  if (!qword_10051F658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F658);
  }
  return result;
}

unint64_t sub_100107C48()
{
  unint64_t result = qword_10051F668;
  if (!qword_10051F668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F668);
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.RelativePositionEstimate.CodingKeys()
{
  return &type metadata for GeoLookup.RelativePositionEstimate.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GeoLookup.GeoLookupResultDebugInfo.ScoreReason(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookup.GeoLookupResultDebugInfo.ScoreReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100107D3C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100107D54(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResultDebugInfo.ScoreReason()
{
  return &type metadata for GeoLookup.GeoLookupResultDebugInfo.ScoreReason;
}

uint64_t initializeBufferWithCopyOfBuffer for GeoLookup.DetectionType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CVCoordinatorConfiguration()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for GeoLookup.DetectionType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for GeoLookup.DetectionType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookup.DetectionType(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GeoLookup.DetectionType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_100107EF4(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    *(unsigned char *)(result + 8) = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.DetectionType()
{
  return &type metadata for GeoLookup.DetectionType;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResult.CodingKeys()
{
  return &type metadata for GeoLookup.GeoLookupResult.CodingKeys;
}

uint64_t destroy for GeoLookup.GeoLookupResultDebugInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeoLookup.GeoLookupResultDebugInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeoLookup.GeoLookupResultDebugInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GeoLookup.GeoLookupResultDebugInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookup.GeoLookupResultDebugInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookup.GeoLookupResultDebugInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResultDebugInfo()
{
  return &type metadata for GeoLookup.GeoLookupResultDebugInfo;
}

unint64_t sub_1001080C0()
{
  unint64_t result = qword_10051F678;
  if (!qword_10051F678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F678);
  }
  return result;
}

unint64_t sub_100108118()
{
  unint64_t result = qword_10051F680;
  if (!qword_10051F680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F680);
  }
  return result;
}

unint64_t sub_100108170()
{
  unint64_t result = qword_10051F688;
  if (!qword_10051F688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F688);
  }
  return result;
}

unint64_t sub_1001081C8()
{
  unint64_t result = qword_10051F690;
  if (!qword_10051F690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F690);
  }
  return result;
}

unint64_t sub_100108220()
{
  unint64_t result = qword_10051F698;
  if (!qword_10051F698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F698);
  }
  return result;
}

unint64_t sub_100108278()
{
  unint64_t result = qword_10051F6A0;
  if (!qword_10051F6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F6A0);
  }
  return result;
}

unint64_t sub_1001082D0()
{
  unint64_t result = qword_10051F6A8;
  if (!qword_10051F6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F6A8);
  }
  return result;
}

unint64_t sub_100108328()
{
  unint64_t result = qword_10051F6B0;
  if (!qword_10051F6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F6B0);
  }
  return result;
}

unint64_t sub_10010837C()
{
  unint64_t result = qword_10051F6C0;
  if (!qword_10051F6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F6C0);
  }
  return result;
}

unint64_t sub_1001083D0()
{
  unint64_t result = qword_10051F6C8;
  if (!qword_10051F6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F6C8);
  }
  return result;
}

unint64_t sub_100108424()
{
  unint64_t result = qword_10051F6E0;
  if (!qword_10051F6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F6E0);
  }
  return result;
}

unint64_t sub_100108478()
{
  unint64_t result = qword_10051F6F0;
  if (!qword_10051F6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F6F0);
  }
  return result;
}

uint64_t sub_1001084CC(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10051F6D0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010853C()
{
  unint64_t result = qword_10051F700;
  if (!qword_10051F700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F700);
  }
  return result;
}

unint64_t sub_100108590()
{
  unint64_t result = qword_10051F730;
  if (!qword_10051F730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F730);
  }
  return result;
}

unint64_t sub_1001085E4()
{
  unint64_t result = qword_10051F740;
  if (!qword_10051F740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F740);
  }
  return result;
}

unint64_t sub_100108638()
{
  unint64_t result = qword_10051F748;
  if (!qword_10051F748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F748);
  }
  return result;
}

unint64_t sub_10010868C()
{
  unint64_t result = qword_10051F750;
  if (!qword_10051F750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F750);
  }
  return result;
}

unint64_t sub_1001086E0()
{
  unint64_t result = qword_10051F758;
  if (!qword_10051F758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F758);
  }
  return result;
}

unsigned char *_s6Tamale9GeoLookupC15GeoLookupResultV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100108800);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.CodingKeys()
{
  return &type metadata for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.CodingKeys;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.TextMatchCodingKeys()
{
  return &type metadata for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.TextMatchCodingKeys;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.NoRatingsCodingKeys()
{
  return &type metadata for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.NoRatingsCodingKeys;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.HeadingMatchCodingKeys()
{
  return &type metadata for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.HeadingMatchCodingKeys;
}

unsigned char *_s6Tamale9GeoLookupC24GeoLookupResultDebugInfoV11ScoreReasonO19TextMatchCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10010890CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.CategoryCodingKeys()
{
  return &type metadata for GeoLookup.GeoLookupResultDebugInfo.ScoreReason.CategoryCodingKeys;
}

unsigned char *_s6Tamale9GeoLookupC24RelativePositionEstimateV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100108A10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLookup.GeoLookupResultDebugInfo.CodingKeys()
{
  return &type metadata for GeoLookup.GeoLookupResultDebugInfo.CodingKeys;
}

unint64_t sub_100108A4C()
{
  unint64_t result = qword_10051F788;
  if (!qword_10051F788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F788);
  }
  return result;
}

unint64_t sub_100108AA4()
{
  unint64_t result = qword_10051F790;
  if (!qword_10051F790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F790);
  }
  return result;
}

unint64_t sub_100108AFC()
{
  unint64_t result = qword_10051F798;
  if (!qword_10051F798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F798);
  }
  return result;
}

unint64_t sub_100108B54()
{
  unint64_t result = qword_10051F7A0;
  if (!qword_10051F7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7A0);
  }
  return result;
}

unint64_t sub_100108BAC()
{
  unint64_t result = qword_10051F7A8;
  if (!qword_10051F7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7A8);
  }
  return result;
}

unint64_t sub_100108C04()
{
  unint64_t result = qword_10051F7B0;
  if (!qword_10051F7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7B0);
  }
  return result;
}

unint64_t sub_100108C5C()
{
  unint64_t result = qword_10051F7B8;
  if (!qword_10051F7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7B8);
  }
  return result;
}

unint64_t sub_100108CB4()
{
  unint64_t result = qword_10051F7C0;
  if (!qword_10051F7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7C0);
  }
  return result;
}

unint64_t sub_100108D0C()
{
  unint64_t result = qword_10051F7C8;
  if (!qword_10051F7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7C8);
  }
  return result;
}

unint64_t sub_100108D64()
{
  unint64_t result = qword_10051F7D0;
  if (!qword_10051F7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7D0);
  }
  return result;
}

unint64_t sub_100108DBC()
{
  unint64_t result = qword_10051F7D8;
  if (!qword_10051F7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7D8);
  }
  return result;
}

unint64_t sub_100108E14()
{
  unint64_t result = qword_10051F7E0;
  if (!qword_10051F7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7E0);
  }
  return result;
}

unint64_t sub_100108E6C()
{
  unint64_t result = qword_10051F7E8;
  if (!qword_10051F7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7E8);
  }
  return result;
}

unint64_t sub_100108EC4()
{
  unint64_t result = qword_10051F7F0;
  if (!qword_10051F7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7F0);
  }
  return result;
}

unint64_t sub_100108F1C()
{
  unint64_t result = qword_10051F7F8;
  if (!qword_10051F7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F7F8);
  }
  return result;
}

unint64_t sub_100108F74()
{
  unint64_t result = qword_10051F800;
  if (!qword_10051F800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F800);
  }
  return result;
}

uint64_t sub_100108FF0()
{
  sub_10010DE80(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t _s6Tamale22FrameConsumerContainerCMa_0()
{
  return self;
}

id sub_100109054()
{
  return sub_100109158((uint64_t)&unk_100446170, &OBJC_IVAR____TtC6Tamale14AVCameraSource__captureVideoOutput);
}

void sub_100109068(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

id sub_100109144()
{
  return sub_100109158((uint64_t)&unk_100446198, &OBJC_IVAR____TtC6Tamale14AVCameraSource__captureMetadataOutput);
}

id sub_100109158(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unsigned int v4 = *(void **)(v2 + *a2);

  return v4;
}

id sub_100109208@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unsigned int v6 = *(void **)(v5 + *a2);
  *a3 = v6;

  return v6;
}

void sub_1001092CC(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

id sub_1001093A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unsigned int v4 = *(void **)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame);
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 8);
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 16);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 24);
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 32);
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 40);
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 48);
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 56);
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 64);
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 72);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = v13;
  a2[9] = v12;
  return sub_10010C224(v4, v5, v6, v7);
}

id sub_100109494@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v3 = (void *)(v1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame);
  unsigned int v4 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame);
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  uint64_t v11 = v3[7];
  uint64_t v12 = v3[8];
  uint64_t v14 = v3[9];
  id result = sub_10010C224(v4, v5, v6, v7);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v12;
  a1[9] = v14;
  return result;
}

id sub_1001095B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unsigned int v4 = *(void **)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame);
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 8);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 16);
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 24);
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 32);
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 40);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 48);
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 56);
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 64);
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 72);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = v13;
  a2[9] = v12;
  return sub_10010C224(v4, v5, v6, v7);
}

uint64_t sub_10010968C(uint64_t a1)
{
  sub_10010C238(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_10010C2BC(v2, (void (*)(void, void, void, void, void, void, void, void, void, void))sub_10010C224);
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_10010C2BC(v2, (void (*)(void, void, void, void, void, void, void, void, void, void))sub_10010C310);
  return swift_release();
}

void sub_10010979C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 8);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 16);
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame + 24);
  uint64_t v6 = *(void **)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame);
  sub_10010C238((uint64_t)a2, a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame);
  sub_10010C2BC(a2, (void (*)(void, void, void, void, void, void, void, void, void, void))sub_10010C224);
  sub_10010C310(v6, v3, v4, v5);
}

uint64_t sub_100109850()
{
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState);
  sub_1000BBF50(v1, *(void *)(v0 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState + 16));
  return v1;
}

uint64_t sub_10010991C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState + 8);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  char v7 = *(unsigned char *)(v4 + 16);
  *(unsigned char *)(a2 + 16) = v7;
  return sub_1000BBF50(v5, v6, v7);
}

uint64_t sub_1001099DC(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  swift_getKeyPath();
  sub_1000BBF50(v1, v2, v3);
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_1000BC2F4(v1, v2, v3);
  return swift_release();
}

uint64_t sub_100109ADC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = sub_10000F214(&qword_100520FA0);
  uint64_t v19 = *(void *)(v8 - 8);
  uint64_t v20 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState);
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState + 8);
  *(void *)uint64_t v11 = a2;
  *(void *)(v11 + 8) = a3;
  char v14 = *(unsigned char *)(v11 + 16);
  *(unsigned char *)(v11 + 16) = a4;
  sub_1000BBF50(a2, a3, a4);
  sub_1000BC2F4(v12, v13, v14);
  swift_getKeyPath();
  uint64_t v21 = a1;
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v15 = *(void *)(v11 + 8);
  char v16 = *(unsigned char *)(v11 + 16);
  uint64_t v21 = *(void *)v11;
  uint64_t v22 = v15;
  char v23 = v16;
  sub_1000BBF50(v21, v15, v16);
  sub_10000F214(&qword_10051FB20);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v10, v20);
}

id sub_100109CB0()
{
  uint64_t v1 = OBJC_IVAR____TtC6Tamale14AVCameraSource____lazy_storage___captureDevice;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC6Tamale14AVCameraSource____lazy_storage___captureDevice);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v3 = sub_10010CC04((id)1);
    uint64_t v4 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    id v5 = v3;
    sub_10010DE60(v4);
  }
  sub_10010DE70(v2);
  return v3;
}

uint64_t sub_100109D20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _s6Tamale22FrameConsumerContainerCMa_0();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v7 + 24) = a3;
  swift_unknownObjectWeakAssign();
  *(void *)(v7 + 32) = a4;
  uint64_t v8 = (void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource_consumers);
  swift_beginAccess();
  id v9 = a4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t sub_100109E08(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100109E30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_100109E58(uint64_t a1)
{
  uint64_t v12 = a1;
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  swift_getKeyPath();
  uint64_t v13 = v1;
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = *(void **)((char *)v1 + OBJC_IVAR____TtC6Tamale14AVCameraSource__captureMetadataOutput);
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  id v8 = v7;
  static DispatchQoS.unspecified.getter();
  uint64_t v13 = _swiftEmptyArrayStorage;
  sub_10010DDC8((unint64_t *)&unk_10051FB60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000F214(&qword_100521000);
  sub_10010DE10((unint64_t *)&qword_10051FB70, &qword_100521000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11);
  id v9 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  [v8 setMetadataObjectsDelegate:v12 queue:v9];
}

id sub_10010A150()
{
  uint64_t v1 = OBJC_IVAR____TtC6Tamale14AVCameraSource____lazy_storage___captureSession;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC6Tamale14AVCameraSource____lazy_storage___captureSession);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC6Tamale14AVCameraSource____lazy_storage___captureSession);
  }
  else
  {
    id v4 = sub_10010A1B4(v0);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_10010A1B4(CMTimeValue a1)
{
  id v2 = [objc_allocWithZone((Class)AVCaptureSession) init];
  [v2 setSessionPreset:AVCaptureSessionPresetInputPriority];
  id v3 = sub_100109CB0();
  if (v3)
  {
    id v4 = v3;
    v42.value = 0;
    id v5 = [objc_allocWithZone((Class)AVCaptureDeviceInput) initWithDevice:v3 error:&v42];
    if (v5)
    {
      id v6 = v5;
      id v7 = (id)v42.value;
      [v2 addInput:v6];
      swift_getKeyPath();
      v42.value = a1;
      sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v8 = OBJC_IVAR____TtC6Tamale14AVCameraSource__captureVideoOutput;
      [v2 addOutput:*(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource__captureVideoOutput)];
      swift_getKeyPath();
      v42.value = a1;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      [v2 addOutput:*(void *)(a1 + OBJC_IVAR____TtC6Tamale14AVCameraSource__captureMetadataOutput)];
      v42.value = 0;
      if ([v4 lockForConfiguration:&v42])
      {
        uint64_t v40 = v6;
        id v9 = (id)v42.value;
        id v10 = [v4 formats];
        sub_10000F734(0, &qword_10051FB48);
        unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        Swift::Int v38 = v4;
        id v39 = v2;
        CMTimeValue v41 = a1;
        if (v11 >> 62) {
          goto LABEL_33;
        }
        uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        while (v12)
        {
          uint64_t v13 = 4;
          while (1)
          {
            char v14 = (v11 & 0xC000000000000001) != 0
                ? specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v11 + 8 * v13);
            uint64_t v15 = v14;
            uint64_t v16 = v13 - 3;
            if (__OFADD__(v13 - 4, 1)) {
              break;
            }
            char v17 = (const opaqueCMFormatDescription *)[v14 formatDescription];
            FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(v17);

            if (MediaSubType == 875704422)
            {
              uint64_t v19 = (const opaqueCMFormatDescription *)[v15 formatDescription];
              int32_t width = CMVideoFormatDescriptionGetDimensions(v19).width;

              if (width == 1920)
              {
                uint64_t v21 = (const opaqueCMFormatDescription *)[v15 formatDescription];
                CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v21);

                if (HIDWORD(*(unint64_t *)&Dimensions) == 1440)
                {
                  swift_bridgeObjectRelease_n();
                  char v23 = v38;
                  [v38 setActiveFormat:v15];
                  CMTime v42 = CMTime.init(value:timescale:)(1, 30);
                  [v38 setActiveVideoMinFrameDuration:&v42];
                  CMTime v42 = CMTime.init(value:timescale:)(1, 30);
                  [v38 setActiveVideoMaxFrameDuration:&v42];
                  id v2 = v39;
                  goto LABEL_25;
                }
              }
            }

            ++v13;
            if (v16 == v12) {
              goto LABEL_22;
            }
          }
          __break(1u);
LABEL_33:
          swift_bridgeObjectRetain();
          uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        }
LABEL_22:
        swift_bridgeObjectRelease_n();
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v28, "No 1920x1440 formats available!", v29, 2u);
          swift_slowDealloc();
        }
        char v23 = v38;
        id v2 = v39;
LABEL_25:

        [v23 unlockForConfiguration];
        swift_getKeyPath();
        v42.value = v41;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        [*(id *)(v41 + v8) setAlwaysDiscardsLateVideoFrames:0];
        swift_getKeyPath();
        v42.value = v41;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        [*(id *)(v41 + v8) setSampleBufferDelegate:v41 queue:*(void *)(v41 + OBJC_IVAR____TtC6Tamale14AVCameraSource_frameQueue)];
        swift_getKeyPath();
        v42.value = v41;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v30 = *(void **)(v41 + v8);
        sub_10000F214((uint64_t *)&unk_10051FB50);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v32;
        *(void *)(inited + 72) = &type metadata for UInt32;
        *(_DWORD *)(inited + 48) = 875704422;
        id v33 = v30;
        sub_10031BC4C(inited);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v33 setVideoSettings:isa];

        swift_getKeyPath();
        v42.value = v41;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        id v35 = [*(id *)(v41 + v8) connectionWithMediaType:AVMediaTypeVideo];
        if (v35)
        {
          id v36 = v35;
          if ([v36 isCameraIntrinsicMatrixDeliverySupported]) {
            [v36 setCameraIntrinsicMatrixDeliveryEnabled:1];
          }
        }
        else
        {
        }
        goto LABEL_30;
      }
      id v25 = (id)v42.value;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    else
    {
      id v24 = (id)v42.value;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }

    char v23 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v26))
    {
      char v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v26, "CameraSensor failed to get a AVCaptureDevice", v27, 2u);
      swift_slowDealloc();
    }
    swift_errorRelease();
LABEL_30:
  }
  return v2;
}

uint64_t sub_10010A93C()
{
  return sub_10010AA7C((uint64_t)&unk_1004EC240, (uint64_t)sub_10010DD28, (uint64_t)&unk_1004EC258);
}

uint64_t sub_10010A964()
{
  id v0 = sub_10010A150();
  [v0 startRunning];

  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_10010AA54()
{
  return sub_10010AA7C((uint64_t)&unk_1004EC1F0, (uint64_t)sub_10010DD20, (uint64_t)&unk_1004EC208);
}

uint64_t sub_10010AA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)&v3[OBJC_IVAR____TtC6Tamale14AVCameraSource_frameQueue];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = a3;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v3;
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_10010DDC8((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_10010AD18()
{
  id v0 = sub_10010A150();
  [v0 stopRunning];

  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_10010AE08()
{
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR____TtC6Tamale14AVCameraSource_frameQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_10010DD08;
  *(void *)(v3 + 24) = v2;
  *(void *)&long long v11 = sub_10010DF04;
  *((void *)&v11 + 1) = v3;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v8 = 1107296256;
  id v9 = sub_100109E30;
  uint64_t v10 = (uint64_t)&unk_1004EC1B8;
  id v4 = _Block_copy(&aBlock);
  v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    long long aBlock = 0;
    uint64_t v8 = 0;
    id v9 = 0;
    uint64_t v10 = 2;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10010B040()
{
  id v0 = sub_10010A150();
  [v0 stopRunning];

  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

id sub_10010B15C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AVCameraSource();
  [super dealloc];
}

uint64_t sub_10010B3EC()
{
  return type metadata accessor for AVCameraSource();
}

uint64_t type metadata accessor for AVCameraSource()
{
  uint64_t result = qword_10051F968;
  if (!qword_10051F968) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10010B440()
{
  sub_10010B63C(319, &qword_10051F978, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_10010B63C(319, &qword_10051F980, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Logger();
      if (v2 <= 0x3F)
      {
        type metadata accessor for OSSignposter();
        if (v3 <= 0x3F)
        {
          type metadata accessor for ObservationRegistrar();
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

void sub_10010B63C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for CameraSourceRunState);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10010B68C()
{
  return _swift_task_switch(sub_10010B6A8, 0, 0);
}

uint64_t sub_10010B6A8()
{
  sub_10010C570();
  swift_allocError();
  *unint64_t v1 = 0xD00000000000002BLL;
  v1[1] = 0x8000000100427500;
  swift_willThrow();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10010B74C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *v3;
  uint64_t ObjectType = swift_getObjectType();

  return sub_10010C350(a1, a3, v7, ObjectType, a2);
}

uint64_t sub_10010B7A8()
{
  uint64_t v1 = *v0;
  swift_getKeyPath();
  sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState);
  sub_1000BBF50(v2, *(void *)(v1 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState + 8), *(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale14AVCameraSource__runState + 16));
  return v2;
}

uint64_t sub_10010B874@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC6Tamale14AVCameraSource_runStateStreamInternal;
  uint64_t v4 = sub_10000F214((uint64_t *)&unk_10051FB10);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

double sub_10010B8F0@<D0>(_OWORD *a1@<X8>)
{
  sub_10000F214(&qword_10051FB08);
  OS_dispatch_queue.sync<A>(execute:)();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return result;
}

uint64_t sub_10010B980()
{
  return sub_10010A93C();
}

uint64_t sub_10010B9A4()
{
  return sub_10010AA54();
}

uint64_t sub_10010B9C8()
{
  return sub_10010AE08();
}

uint64_t sub_10010B9EC()
{
  return _swift_task_switch(sub_10010BA08, 0, 0);
}

uint64_t sub_10010BA08()
{
  sub_10010C1AC();
  swift_allocError();
  *uint64_t v1 = 5;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id sub_10010BA98()
{
  id v1 = *(id *)v0;
  sub_10010BCC8(*(id *)v0, *(unsigned char *)(v0 + 8));
  return v1;
}

uint64_t sub_10010BAD0()
{
  return 0;
}

__n128 sub_10010BADC@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  __n128 result = *(__n128 *)(v1 + 48);
  long long v6 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  return result;
}

__n128 sub_10010BB08@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  char v3 = *(unsigned char *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  char v5 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 3;
  *(void *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  __n128 result = *(__n128 *)(v1 + 48);
  long long v7 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v7;
  return result;
}

BOOL sub_10010BB40(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  void v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  _OWORD v8[4] = v3;
  v9[0] = v6;
  return sub_10010C5C4((uint64_t)v8, (double *)v9);
}

uint64_t sub_10010BB9C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t ObjectType = swift_getObjectType();
  long long v6 = a3[3];
  v11[2] = a3[2];
  v11[3] = v6;
  void v11[4] = a3[4];
  long long v7 = a3[1];
  v11[0] = *a3;
  v11[1] = v7;
  uint64_t v8 = *(uint64_t (**)(_OWORD *, void, void, void, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a2 + 8);
  unint64_t v9 = sub_10010C078();
  return v8(v11, 0, 0, 0, &type metadata for AVCameraSourceFrame, v9, ObjectType, a2);
}

id sub_10010BCC8(id result, unsigned __int8 a2)
{
  if (a2 == 2) {
    return (id)swift_errorRetain();
  }
  if (a2 <= 1u) {
    return result;
  }
  return result;
}

void destroy for CameraImage(uint64_t a1)
{
}

uint64_t initializeWithCopy for AVCameraSourceFrame(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  sub_10010BCC8(*(id *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  return a1;
}

uint64_t assignWithCopy for AVCameraSourceFrame(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  sub_10010BCC8(*(id *)a2, v5);
  long long v6 = *(void **)a1;
  *(void *)a1 = v4;
  unsigned __int8 v7 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  sub_1000ACF28(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for AVCameraSourceFrame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for AVCameraSourceFrame(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_1000ACF28(v5, v6);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for AVCameraSourceFrame(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AVCameraSourceFrame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AVCameraSourceFrame()
{
  return &type metadata for AVCameraSourceFrame;
}

void **assignWithCopy for FrameConsumerContainer.ExecutionMode(void **a1, void **a2)
{
  unsigned int v3 = *a2;
  BOOL v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **assignWithTake for FrameConsumerContainer.ExecutionMode(void **a1, void **a2)
{
  unsigned int v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for FrameConsumerContainer.ExecutionMode(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FrameConsumerContainer.ExecutionMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void *sub_10010C044(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *_s6Tamale22FrameConsumerContainerC13ExecutionModeOMa_0()
{
  return &_s6Tamale22FrameConsumerContainerC13ExecutionModeON_0;
}

unint64_t sub_10010C078()
{
  unint64_t result = qword_10051F9E8;
  if (!qword_10051F9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F9E8);
  }
  return result;
}

unint64_t sub_10010C0CC(uint64_t a1)
{
  unint64_t result = sub_10010C0F4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10010C0F4()
{
  unint64_t result = qword_10051FA30;
  if (!qword_10051FA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FA30);
  }
  return result;
}

_UNKNOWN **sub_10010C148()
{
  return &off_1004F31F0;
}

uint64_t sub_10010C154(uint64_t a1)
{
  uint64_t result = sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10010C1AC()
{
  unint64_t result = qword_10051FB00;
  if (!qword_10051FB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FB00);
  }
  return result;
}

id sub_10010C200@<X0>(void *a1@<X8>)
{
  return sub_1001093A8(*(void *)(v1 + 16), a1);
}

id sub_10010C224(id result, unsigned __int8 a2, uint64_t a3, char a4)
{
  if (a4 != 2) {
    return sub_10010BCC8(result, a2);
  }
  return result;
}

uint64_t sub_10010C238(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051FB08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10010C2A0()
{
  sub_10010979C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void *sub_10010C2BC(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void sub_10010C310(id a1, unsigned __int8 a2, uint64_t a3, char a4)
{
  if (a4 != 2) {
    sub_1000ACF28(a1, a2);
  }
}

uint64_t sub_10010C32C()
{
  return sub_100109ADC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_10010C350(uint64_t a1, void *a2, char *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = *(NSObject **)&a3[OBJC_IVAR____TtC6Tamale14AVCameraSource_frameQueue];
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a1;
  v10[4] = a5;
  v10[5] = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10010C514;
  *(void *)(v11 + 24) = v10;
  v16[4] = sub_10010C530;
  v16[5] = v11;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100109E30;
  v16[3] = &unk_1004EC0F0;
  long long v12 = _Block_copy(v16);
  id v13 = a2;
  swift_retain();
  uint64_t v14 = a3;
  swift_unknownObjectRetain();
  swift_release();
  dispatch_sync(v9, v12);
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v9) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10010C4CC()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10010C514()
{
  return sub_100109D20(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10010C520()
{
  return swift_deallocObject();
}

uint64_t sub_10010C530()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10010C558(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10010C568()
{
  return swift_release();
}

unint64_t sub_10010C570()
{
  unint64_t result = qword_10051FB28;
  if (!qword_10051FB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FB28);
  }
  return result;
}

BOOL sub_10010C5C4(uint64_t a1, double *a2)
{
  sub_10010C6EC((uint64_t *)a1, (uint64_t)v10);
  double v4 = *a2;
  int v5 = *((unsigned __int8 *)a2 + 8);
  sub_10010C6EC(v10, (uint64_t)&v11);
  switch(v12)
  {
    case 1:
      if (v5 == 1 && v11 == *(void *)&v4) {
        return *(double *)(a1 + 16) == a2[2]
      }
            && ((*(unsigned __int8 *)(a1 + 24) ^ *((unsigned __int8 *)a2 + 24)) & 1) == 0
            && *(double *)(a1 + 32) == a2[4]
            && ((*(unsigned __int8 *)(a1 + 40) ^ *((unsigned __int8 *)a2 + 40)) & 1) == 0
            && CGRectEqualToRect(*(CGRect *)(a1 + 48), *(CGRect *)(a2 + 6));
      return 0;
    case 2:
      if (v5 != 2) {
        return 0;
      }
      return *(double *)(a1 + 16) == a2[2]
          && ((*(unsigned __int8 *)(a1 + 24) ^ *((unsigned __int8 *)a2 + 24)) & 1) == 0
          && *(double *)(a1 + 32) == a2[4]
          && ((*(unsigned __int8 *)(a1 + 40) ^ *((unsigned __int8 *)a2 + 40)) & 1) == 0
          && CGRectEqualToRect(*(CGRect *)(a1 + 48), *(CGRect *)(a2 + 6));
    case 3:
      if (v4 != 0.0 || v5 != 3) {
        return 0;
      }
      return *(double *)(a1 + 16) == a2[2]
          && ((*(unsigned __int8 *)(a1 + 24) ^ *((unsigned __int8 *)a2 + 24)) & 1) == 0
          && *(double *)(a1 + 32) == a2[4]
          && ((*(unsigned __int8 *)(a1 + 40) ^ *((unsigned __int8 *)a2 + 40)) & 1) == 0
          && CGRectEqualToRect(*(CGRect *)(a1 + 48), *(CGRect *)(a2 + 6));
    default:
      if (v5) {
        BOOL v6 = 0;
      }
      else {
        BOOL v6 = v11 == *(void *)&v4;
      }
      if (!v6) {
        return 0;
      }
      return *(double *)(a1 + 16) == a2[2]
          && ((*(unsigned __int8 *)(a1 + 24) ^ *((unsigned __int8 *)a2 + 24)) & 1) == 0
          && *(double *)(a1 + 32) == a2[4]
          && ((*(unsigned __int8 *)(a1 + 40) ^ *((unsigned __int8 *)a2 + 40)) & 1) == 0
          && CGRectEqualToRect(*(CGRect *)(a1 + 48), *(CGRect *)(a2 + 6));
  }
}

uint64_t sub_10010C6EC(uint64_t *a1, uint64_t a2)
{
  return a2;
}

id sub_10010C748(uint64_t a1, void *a2)
{
  id v39 = a2;
  uint64_t v40 = a1;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  id v36 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051FB88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10000F214(&qword_10051FB20);
  uint64_t v9 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000F214((uint64_t *)&unk_10051FB10);
  uint64_t v12 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = &v2[OBJC_IVAR____TtC6Tamale14AVCameraSource_highQualityFrame];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *((void *)v15 + 3) = 2;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  id v16 = objc_allocWithZone((Class)AVCaptureVideoDataOutput);
  char v17 = v2;
  id v18 = [v16 init];
  *(void *)&v17[OBJC_IVAR____TtC6Tamale14AVCameraSource__captureVideoOutput] = v18;
  id v19 = [objc_allocWithZone((Class)AVCaptureMetadataOutput) init];
  *(void *)&v17[OBJC_IVAR____TtC6Tamale14AVCameraSource__captureMetadataOutput] = v19;
  uint64_t v20 = &v17[OBJC_IVAR____TtC6Tamale14AVCameraSource___latestFrame];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 2;
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  uint64_t v21 = &v17[OBJC_IVAR____TtC6Tamale14AVCameraSource_runStateStreamInternal];
  uint64_t v22 = &v17[OBJC_IVAR____TtC6Tamale14AVCameraSource_runStateStreamContinuation];
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v5);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v21, v14, v34);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v11, v35);
  char v23 = &v17[OBJC_IVAR____TtC6Tamale14AVCameraSource__runState];
  v23[16] = 0;
  *(void *)char v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v24 = OBJC_IVAR____TtC6Tamale14AVCameraSource_logger;
  if (qword_100517E28 != -1) {
    swift_once();
  }
  uint64_t v25 = v38;
  uint64_t v26 = sub_10000F378(v38, (uint64_t)qword_10055E190);
  char v27 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v27(&v17[v24], v26, v25);
  v27(v36, v26, v25);
  OSSignposter.init(logger:)();
  *(void *)&v17[OBJC_IVAR____TtC6Tamale14AVCameraSource_consumers] = _swiftEmptyArrayStorage;
  *(void *)&v17[OBJC_IVAR____TtC6Tamale14AVCameraSource____lazy_storage___captureDevice] = 1;
  *(void *)&v17[OBJC_IVAR____TtC6Tamale14AVCameraSource____lazy_storage___captureSession] = 0;
  ObservationRegistrar.init()();
  os_log_type_t v28 = v39;
  *(void *)&v17[OBJC_IVAR____TtC6Tamale14AVCameraSource_frameQueue] = v39;
  id v29 = v28;

  uint64_t v30 = (objc_class *)type metadata accessor for AVCameraSource();
  v41.receiver = v17;
  v41.super_class = v30;
  id v31 = [super init];
  sub_10010DEA8(v40);
  return v31;
}

id sub_10010CC04(id a1)
{
  sub_10000F214(&qword_10051FB78);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10043D4F0;
  *(void *)(v2 + 32) = AVCaptureDeviceTypeBuiltInTrueDepthCamera;
  uint64_t v3 = AVCaptureDeviceTypeBuiltInTrueDepthCamera;
  sub_10030672C(0, 0, (uint64_t)AVCaptureDeviceTypeBuiltInUltraWideCamera);
  type metadata accessor for DeviceType(0);
  uint64_t v4 = AVMediaTypeVideo;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = [self discoverySessionWithDeviceTypes:isa mediaType:v4 position:a1];

  id v7 = [v6 devices];
  sub_10000F734(0, &qword_10051FB80);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    uint64_t v10 = 4;
    while (1)
    {
      id v11 = (v8 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v8 + 8 * v10);
      id v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      if ([v11 position] == a1)
      {

        swift_bridgeObjectRelease();
        return v12;
      }

      ++v10;
      if (v13 == v9) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  id v12 = [self defaultDeviceWithDeviceType:AVCaptureDeviceTypeBuiltInWideAngleCamera mediaType:v4 position:2];

  return v12;
}

void sub_10010CE64(opaqueCMSampleBuffer *a1)
{
  CMSampleBufferRef v124 = a1;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v108 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v107 = (char *)v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v123 = *(void (***)(char *, uint64_t))(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v119 = (char *)v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for DispatchQoS();
  unint64_t v112 = *(void (***)(char *, uint64_t))(v118 - 8);
  __chkstk_darwin(v118);
  unint64_t v117 = (char *)v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)v95 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v95 - v14;
  uint64_t v116 = v1;
  uint64_t v16 = (uint64_t)v1 + OBJC_IVAR____TtC6Tamale14AVCameraSource_signposter;
  static OSSignpostID.exclusive.getter();
  uint64_t v110 = v16;
  char v17 = OSSignposter.logHandle.getter();
  os_signpost_type_t v18 = static os_signpost_type_t.begin.getter();
  char v19 = OS_os_log.signpostsEnabled.getter();
  uint64_t v111 = v9;
  uint64_t v109 = v2;
  if (v19)
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    unint64_t v21 = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v20(v12, v15, v6);
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v23, "Tamale.AVCameraSource.frameHandler", "", v22, 2u);
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  else
  {

    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    unint64_t v21 = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  uint64_t v106 = v20;
  v20(v12, v15, v6);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v24 = OSSignpostIntervalState.init(id:isOpen:)();
  char v27 = *(void (**)(void, void))(v7 + 8);
  uint64_t v26 = v7 + 8;
  uint64_t v25 = (void (*)(char *, uint64_t))v27;
  v27(v15, v6);
  os_log_type_t v28 = v124;
  id v29 = CMSampleBufferGetFormatDescription(v124);
  if (v29)
  {
    uint64_t v30 = v29;
    if (CMFormatDescriptionGetMediaType(v29) == 1986618469)
    {
      uint64_t v101 = v30;
      CMSampleBufferGetPresentationTimeStamp(&aBlock, v28);
      id v31 = CMSampleBufferGetImageBuffer(v28);
      if (v31)
      {
        uint64_t v32 = v31;
        v95[1] = v21;
        uint64_t v99 = v26;
        uint64_t v100 = v6;
        uint64_t v97 = v24;
        CMTime.seconds.getter();
        uint64_t v34 = v33;
        uint64_t v35 = (void *)((char *)v116 + OBJC_IVAR____TtC6Tamale14AVCameraSource_consumers);
        swift_beginAccess();
        uint64_t v36 = *v35;
        unint64_t v37 = (unint64_t)*v35 >> 62;
        uint64_t v98 = v25;
        if (v37)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v94 = v32;
          uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          id v39 = v32;
        }
        id v96 = v12;
        __asm { FMOV            V0.2D, #1.0 }
        long long v122 = _Q0;
        if (v38)
        {
          if (v38 < 1)
          {
            __break(1u);
            return;
          }
          uint64_t v45 = 0;
          CMSampleBufferRef v124 = (CMSampleBufferRef)(v36 & 0xC000000000000001);
          p_epoch = &aBlock.epoch;
          uint64_t v113 = v123 + 1;
          ++v112;
          uint64_t v105 = (CMTimeScale *)((char *)&aBlock.timescale + 1);
          uint64_t v104 = (_DWORD *)((char *)&v127 + 1);
          uint64_t v103 = (char *)&v129 + 1;
          uint64_t v102 = v130;
          uint64_t v115 = v32;
          uint64_t v121 = v38;
          do
          {
            if (v124)
            {
              uint64_t v46 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v46 = *(void *)(v36 + 8 * v45 + 32);
              swift_retain();
            }
            uint64_t Strong = swift_unknownObjectWeakLoadStrong();
            if (Strong)
            {
              uint64_t v48 = Strong;
              uint64_t v50 = *(void *)(v46 + 24);
              char v49 = *(void **)(v46 + 32);
              if (v49)
              {
                uint64_t v51 = swift_allocObject();
                *(void *)(v51 + 16) = v48;
                *(void *)(v51 + 24) = v50;
                *(void *)(v51 + 32) = v32;
                *(unsigned char *)(v51 + 40) = 0;
                *(_DWORD *)(v51 + 41) = *(_DWORD *)v134;
                *(_DWORD *)(v51 + 44) = *(_DWORD *)&v134[3];
                *(void *)(v51 + 48) = 0x3FF921FB54442D18;
                *(unsigned char *)(v51 + 56) = 1;
                *(_DWORD *)(v51 + 57) = *(_DWORD *)v133;
                *(_DWORD *)(v51 + 60) = *(_DWORD *)&v133[3];
                *(void *)(v51 + 64) = v34;
                *(unsigned char *)(v51 + 72) = 0;
                int v52 = *(_DWORD *)v132;
                *(_DWORD *)(v51 + 76) = *(_DWORD *)&v132[3];
                *(_DWORD *)(v51 + 73) = v52;
                *(void *)(v51 + 80) = 0;
                *(void *)(v51 + 88) = 0;
                *(_OWORD *)(v51 + 96) = v122;
                uint64_t v128 = sub_10010DCC4;
                uint64_t v129 = v51;
                aBlock.value = (CMTimeValue)_NSConcreteStackBlock;
                *(void *)&aBlock.timescale = 1107296256;
                aBlock.epoch = (CMTimeEpoch)sub_1002EDB98;
                uint64_t v127 = (uint64_t)&unk_1004EC140;
                unint64_t v53 = _Block_copy(&aBlock);
                unint64_t v54 = v32;
                uint64_t v123 = v49;
                swift_unknownObjectRetain();
                unint64_t v55 = v117;
                static DispatchQoS.unspecified.getter();
                uint64_t v125 = _swiftEmptyArrayStorage;
                sub_10010DDC8((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                sub_10000F214(&qword_10051A960);
                sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
                uint64_t v56 = v36;
                uint64_t v57 = v119;
                uint64_t v58 = v120;
                dispatch thunk of SetAlgebra.init<A>(_:)();
                uint64_t v59 = v123;
                OS_dispatch_queue.async(group:qos:flags:execute:)();
                _Block_release(v53);
                swift_unknownObjectRelease();

                uint64_t v60 = v57;
                uint64_t v36 = v56;
                (*v113)(v60, v58);
                uint64_t v61 = v55;
                uint64_t v32 = v115;
                (*v112)(v61, v118);
                swift_release();
                swift_release();
              }
              else
              {
                uint64_t ObjectType = swift_getObjectType();
                aBlock.value = (CMTimeValue)v32;
                LOBYTE(aBlock.timescale) = 0;
                char v63 = v105;
                *uint64_t v105 = *(_DWORD *)v134;
                *(_DWORD *)((char *)v63 + 3) = *(_DWORD *)&v134[3];
                aBlock.epoch = 0x3FF921FB54442D18;
                LOBYTE(v127) = 1;
                uint64_t v64 = v104;
                *uint64_t v104 = *(_DWORD *)v133;
                *(_DWORD *)((char *)v64 + 3) = *(_DWORD *)&v133[3];
                uint64_t v128 = v34;
                LOBYTE(v129) = 0;
                uint64_t v65 = v103;
                *(_DWORD *)(v103 + 3) = *(_DWORD *)&v132[3];
                *uint64_t v65 = *(_DWORD *)v132;
                char v66 = v102;
                *uint64_t v102 = 0;
                v66[1] = 0;
                long long v131 = v122;
                id v67 = *(void (**)(CMTime *, void, void, void, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v50 + 8);
                unint64_t v68 = sub_10010C078();
                v67(&aBlock, 0, 0, 0, &type metadata for AVCameraSourceFrame, v68, ObjectType, v50);
                swift_release();
                swift_unknownObjectRelease();
              }
              uint64_t v38 = v121;
            }
            else
            {
              swift_release();
            }
            ++v45;
          }
          while (v38 != v45);
        }
        swift_bridgeObjectRelease_n();
        aBlock.value = (CMTimeValue)v32;
        *(_OWORD *)&aBlock.timescale = xmmword_100445FC0;
        uint64_t v127 = 1;
        uint64_t v128 = v34;
        v130[0] = 0;
        v130[1] = 0;
        uint64_t v129 = 0;
        long long v131 = v122;
        uint64_t KeyPath = swift_getKeyPath();
        __chkstk_darwin(KeyPath);
        uint64_t v76 = v116;
        v95[-2] = v116;
        v95[-1] = &aBlock;
        uint64_t v125 = v76;
        sub_10010DDC8(&qword_10051FAF8, (void (*)(uint64_t))type metadata accessor for AVCameraSource);
        char v77 = v32;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();

        uint64_t v78 = OSSignposter.logHandle.getter();
        uint64_t v79 = v111;
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v80 = static os_signpost_type_t.end.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          swift_retain();
          uint64_t v81 = v107;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          uint64_t v82 = v108;
          uint64_t v83 = v109;
          int v84 = (*(uint64_t (**)(char *, uint64_t))(v108 + 88))(v81, v109);
          uint64_t v85 = v100;
          if (v84 == enum case for OSSignpostError.doubleEnd(_:))
          {
            uint64_t v86 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v83);
            uint64_t v86 = "";
          }
          Swift::Bool v90 = v96;
          v106(v96, v79, v85);
          int64_t v91 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int64_t v91 = 0;
          os_signpost_id_t v92 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v78, v80, v92, "Tamale.AVCameraSource.frameHandler", v86, v91, 2u);
          swift_slowDealloc();

          int64_t v93 = v98;
          v98(v79, v85);
          swift_release();
          v93(v90, v85);
        }
        else
        {

          v98(v79, v100);
          swift_release();
        }
      }
      else
      {
        uint64_t v87 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v87, v88))
        {
          Swift::String v89 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Swift::String v89 = 0;
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed to obtain a CVPixelBuffer for the current output frame.", v89, 2u);
          swift_slowDealloc();
        }
        swift_release();
      }
    }
    else
    {
      Swift::Int v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v72, v73))
      {
        unint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Skipping non-video data, returning…", v74, 2u);
        swift_slowDealloc();
      }

      swift_release();
    }
  }
  else
  {
    NSString v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Failed to get format description, returning…", v71, 2u);
      swift_slowDealloc();
    }
    swift_release();
  }
}

uint64_t sub_10010DC80()
{
  swift_unknownObjectRelease();
  sub_1000ACF28(*(id *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return swift_deallocObject();
}

uint64_t sub_10010DCC4()
{
  return sub_10010BB9C(*(void *)(v0 + 16), *(void *)(v0 + 24), (_OWORD *)(v0 + 32));
}

uint64_t sub_10010DCD0()
{
  return swift_deallocObject();
}

uint64_t sub_10010DD08()
{
  return sub_10010B040();
}

uint64_t sub_10010DD10()
{
  return swift_deallocObject();
}

uint64_t sub_10010DD20()
{
  return sub_10010AD18();
}

uint64_t sub_10010DD28()
{
  return sub_10010A964();
}

id sub_10010DD30@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100109208(a1, &OBJC_IVAR____TtC6Tamale14AVCameraSource__captureVideoOutput, a2);
}

id sub_10010DD5C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100109208(a1, &OBJC_IVAR____TtC6Tamale14AVCameraSource__captureMetadataOutput, a2);
}

void sub_10010DD88()
{
}

void sub_10010DDA8()
{
}

uint64_t sub_10010DDC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010DE10(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10010DE60(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_10010DE70(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_10010DE80(uint64_t a1)
{
  return a1;
}

uint64_t sub_10010DEA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CameraControllerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010DF20()
{
  return sub_10010C32C();
}

void sub_10010DF48()
{
}

__n128 initializeWithTake for ReplayStatus(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ReplayStatusView()
{
  return &type metadata for ReplayStatusView;
}

uint64_t sub_10010DFA4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10010DFC0()
{
  qword_10051FB90 = 0x4024000000000000;
}

void sub_10010DFD0()
{
  qword_10051FB98 = 0x3FF0000000000000;
}

uint64_t sub_10010DFE0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  void v5[2] = *(_OWORD *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 48);
  return sub_1001112F0((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_10010E03C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v98 = a1;
  uint64_t v96 = sub_10000F214(&qword_10051FBA0);
  __chkstk_darwin(v96);
  uint64_t v97 = (uint64_t)&v79 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Material();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v81 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000F214(&qword_10051FBA8);
  __chkstk_darwin(v95);
  int v84 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000F214(&qword_10051FBB0);
  __chkstk_darwin(v87);
  char v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Capsule();
  __chkstk_darwin(v7 - 8);
  uint64_t v94 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_10051FBB8);
  __chkstk_darwin(v86);
  os_signpost_type_t v80 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051FBC0);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051FBC8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_10051FBD0);
  __chkstk_darwin(v17);
  char v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000F214(&qword_10051FBD8);
  __chkstk_darwin(v91);
  uint64_t v85 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v92 = (uint64_t)&v79 - v22;
  uint64_t v23 = sub_10000F214(&qword_10051FBE0);
  __chkstk_darwin(v23 - 8);
  os_log_type_t v88 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v93 = (uint64_t)&v79 - v26;
  uint64_t v89 = sub_10000F214(&qword_10051FBE8);
  __chkstk_darwin(v89);
  Swift::Bool v90 = (char *)&v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v101 = *(unsigned char *)(v1 + 48);
  long long v28 = *(_OWORD *)(v1 + 16);
  long long v99 = *(_OWORD *)v1;
  v100[0] = v28;
  v100[1] = *(_OWORD *)(v1 + 32);
  int v29 = v101;
  *(void *)id v12 = static VerticalAlignment.center.getter();
  *((void *)v12 + 1) = 0;
  unsigned char v12[16] = 1;
  uint64_t v30 = sub_10000F214(&qword_10051FBF0);
  sub_10010EA8C(v1, v29, (uint64_t)&v12[*(int *)(v30 + 44)]);
  char v31 = static Edge.Set.horizontal.getter();
  sub_10000FC34((uint64_t)v100, (uint64_t)v102, &qword_10051D468);
  sub_10000FC34((uint64_t)v102, (uint64_t)v103, &qword_10051D468);
  EdgeInsets.init(_all:)();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  sub_10000FB74((uint64_t)v12, (uint64_t)v16, &qword_10051FBC0);
  uint64_t v40 = &v16[*(int *)(v14 + 44)];
  *uint64_t v40 = v31;
  *((void *)v40 + 1) = v33;
  *((void *)v40 + 2) = v35;
  *((void *)v40 + 3) = v37;
  *((void *)v40 + 4) = v39;
  v40[40] = 0;
  sub_10000FBD8((uint64_t)v12, &qword_10051FBC0);
  char v41 = static Edge.Set.vertical.getter();
  if (qword_100517EC8 != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  sub_10000FB74((uint64_t)v16, (uint64_t)v19, &qword_10051FBC8);
  uint64_t v50 = &v19[*(int *)(v17 + 36)];
  char *v50 = v41;
  *((void *)v50 + 1) = v43;
  *((void *)v50 + 2) = v45;
  *((void *)v50 + 3) = v47;
  *((void *)v50 + 4) = v49;
  v50[40] = 0;
  sub_10000FBD8((uint64_t)v16, &qword_10051FBC8);
  char v51 = v29;
  if (v29)
  {
    uint64_t v52 = static Color.red.getter();
    uint64_t v53 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v54 = type metadata accessor for RoundedCornerStyle();
    uint64_t v55 = (uint64_t)v94;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 104))(v94, v53, v54);
    uint64_t v56 = (uint64_t)v80;
    uint64_t v57 = (uint64_t *)&v80[*(int *)(v86 + 36)];
    uint64_t v58 = sub_10000F214(&qword_10051FC20);
    sub_10008D3F0(v55, (uint64_t)v57 + *(int *)(v58 + 52));
    *uint64_t v57 = v52;
    *(_WORD *)((char *)v57 + *(int *)(v58 + 56)) = 256;
    sub_10000FB74((uint64_t)v19, v56, &qword_10051FBD0);
    sub_10008D454(v55);
    sub_10000FB74(v56, (uint64_t)v6, &qword_10051FBB8);
    swift_storeEnumTagMultiPayload();
    sub_100110760();
    sub_100110800();
    uint64_t v59 = (uint64_t)v85;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v56, &qword_10051FBB8);
  }
  else
  {
    sub_10000FB74((uint64_t)v19, (uint64_t)v6, &qword_10051FBD0);
    swift_storeEnumTagMultiPayload();
    sub_100110760();
    sub_100110800();
    uint64_t v59 = (uint64_t)v85;
    _ConditionalContent<>.init(storage:)();
  }
  uint64_t v60 = v92;
  sub_10000FC34(v59, v92, &qword_10051FBD8);
  sub_10000FBD8((uint64_t)v19, &qword_10051FBD0);
  if (v51)
  {
    sub_10000FB74(v60, v97, &qword_10051FBD8);
    swift_storeEnumTagMultiPayload();
    sub_10011091C();
    sub_1001109BC();
    uint64_t v61 = (uint64_t)v88;
    _ConditionalContent<>.init(storage:)();
  }
  else
  {
    char v62 = v81;
    static Material.thick.getter();
    uint64_t v63 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v64 = type metadata accessor for RoundedCornerStyle();
    uint64_t v65 = (uint64_t)v94;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 104))(v94, v63, v64);
    uint64_t v66 = (uint64_t)v84;
    id v67 = &v84[*(int *)(v95 + 36)];
    uint64_t v68 = v82;
    uint64_t v69 = v83;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v67, v62, v83);
    uint64_t v70 = sub_10000F214(&qword_10051C158);
    sub_10008D3F0(v65, (uint64_t)&v67[*(int *)(v70 + 52)]);
    *(_WORD *)&v67[*(int *)(v70 + 56)] = 256;
    sub_10000FB74(v60, v66, &qword_10051FBD8);
    sub_10008D454(v65);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v62, v69);
    sub_10000FB74(v66, v97, &qword_10051FBA8);
    swift_storeEnumTagMultiPayload();
    sub_10011091C();
    sub_1001109BC();
    uint64_t v61 = (uint64_t)v88;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v66, &qword_10051FBA8);
  }
  uint64_t v71 = v93;
  sub_10000FC34(v61, v93, &qword_10051FBE0);
  sub_10000FBD8(v60, &qword_10051FBD8);
  uint64_t v72 = static Alignment.center.getter();
  uint64_t v74 = v73;
  uint64_t v75 = (uint64_t)v90;
  uint64_t v76 = (uint64_t)&v90[*(int *)(v89 + 36)];
  sub_1001104E4(v51, v76);
  char v77 = (uint64_t *)(v76 + *(int *)(sub_10000F214(&qword_10051CDA8) + 36));
  uint64_t *v77 = v72;
  v77[1] = v74;
  sub_10000FC34(v71, v75, &qword_10051FBE0);
  return sub_10000FC34(v75, v98, &qword_10051FBE8);
}

uint64_t sub_10010EA8C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v127 = a2;
  uint64_t v5 = type metadata accessor for BlurReplaceTransition.Configuration();
  uint64_t v96 = *(void *)(v5 - 8);
  uint64_t v97 = v5;
  __chkstk_darwin(v5);
  uint64_t v115 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v114 = (char *)&v83 - v8;
  uint64_t v123 = type metadata accessor for BlurReplaceTransition();
  uint64_t v121 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v119 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for OpacityTransition();
  uint64_t v118 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v116 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051D558);
  uint64_t v122 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v117 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v120 = (char *)&v83 - v14;
  uint64_t v103 = sub_10000F214(&qword_10051FC38);
  __chkstk_darwin(v103);
  long long v107 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for SymbolEffectOptions();
  uint64_t v105 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v104 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for BounceSymbolEffect();
  uint64_t v100 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v83 - v20;
  uint64_t v126 = sub_10000F214(&qword_10051FC40);
  __chkstk_darwin(v126);
  unsigned __int8 v101 = (uint64_t *)((char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = sub_10000F214(&qword_10051FC48);
  uint64_t v94 = *(void *)(v23 - 8);
  uint64_t v95 = v23;
  __chkstk_darwin(v23);
  long long v99 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_10000F214(&qword_10051FC50);
  __chkstk_darwin(v106);
  unint64_t v112 = (char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_10000F214(&qword_10051FC58);
  __chkstk_darwin(v109);
  uint64_t v113 = (uint64_t)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10051FC60);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v111 = (uint64_t)&v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v110 = (uint64_t)&v83 - v31;
  uint64_t v32 = sub_10000F214(&qword_10051FC68);
  __chkstk_darwin(v32 - 8);
  uint64_t v125 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v36 = __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v83 - v35;
  uint64_t v38 = *(void *)(a1 + 40);
  if (v38)
  {
    uint64_t v88 = v28;
    uint64_t v89 = v27;
    Swift::Bool v90 = (char *)&v83 - v35;
    uint64_t v91 = v11;
    uint64_t v92 = a1;
    uint64_t v93 = a3;
    uint64_t v39 = *(void *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v124 = Image.init(_internalSystemName:)();
    uint64_t v86 = static Font.headline.getter();
    uint64_t KeyPath = swift_getKeyPath();
    BounceSymbolEffect.init()();
    int v84 = v18;
    BounceSymbolEffect.down.getter();
    uint64_t v87 = *(void (**)(char *, uint64_t))(v100 + 8);
    uint64_t v40 = v102;
    v87(v21, v102);
    char v41 = v104;
    static SymbolEffectOptions.default.getter();
    sub_100110EC8(&qword_10051FC78, (void (*)(uint64_t))&type metadata accessor for BounceSymbolEffect);
    swift_bridgeObjectRetain();
    uint64_t v42 = (uint64_t)v107;
    dispatch thunk of SymbolEffect.configuration.getter();
    uint64_t v43 = v103;
    uint64_t v44 = v105;
    uint64_t v45 = v108;
    (*(void (**)(uint64_t, char *, uint64_t))(v105 + 16))(v42 + *(int *)(v103 + 36), v41, v108);
    uint64_t v46 = (void *)(v42 + *(int *)(v43 + 40));
    uint64_t v100 = v39;
    *uint64_t v46 = v39;
    v46[1] = v38;
    uint64_t v103 = v38;
    uint64_t v47 = v101;
    sub_10000FB74(v42, (uint64_t)v101 + *(int *)(v126 + 36), &qword_10051FC38);
    uint64_t v48 = KeyPath;
    uint64_t v49 = v86;
    *uint64_t v47 = v124;
    v47[1] = v48;
    double v47[2] = v49;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000FBD8(v42, &qword_10051FC38);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v45);
    v87(v84, v40);
    swift_release();
    swift_release();
    swift_release();
    static Font.Weight.medium.getter();
    sub_100110E20();
    uint64_t v50 = v99;
    View.fontWeight(_:)();
    sub_10000FBD8((uint64_t)v47, &qword_10051FC40);
    if (v127) {
      uint64_t v51 = static Color.white.getter();
    }
    else {
      uint64_t v51 = static Color.primary.getter();
    }
    uint64_t v52 = v51;
    uint64_t v53 = v97;
    uint64_t v54 = v98;
    uint64_t v55 = v95;
    uint64_t v56 = v96;
    uint64_t v57 = v94;
    uint64_t v58 = swift_getKeyPath();
    uint64_t v59 = (uint64_t)v112;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v112, v50, v55);
    uint64_t v60 = (uint64_t *)(v59 + *(int *)(v106 + 36));
    *uint64_t v60 = v58;
    v60[1] = v52;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v50, v55);
    uint64_t v61 = v116;
    OpacityTransition.init()();
    char v62 = v114;
    static BlurReplaceTransition.Configuration.downUp.getter();
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v115, v62, v53);
    uint64_t v63 = v119;
    BlurReplaceTransition.init(configuration:)();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v62, v53);
    uint64_t v64 = sub_100110EC8(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
    uint64_t v65 = sub_100110EC8(&qword_10051D5C0, (void (*)(uint64_t))&type metadata accessor for BlurReplaceTransition);
    uint64_t v66 = v120;
    uint64_t v67 = v123;
    Transition.combined<A>(with:)();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v63, v67);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v61, v54);
    uint64_t v68 = v122;
    uint64_t v69 = v91;
    (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v117, v66, v91);
    uint64_t v131 = v54;
    uint64_t v132 = v67;
    v133[0] = v64;
    v133[1] = v65;
    swift_getOpaqueTypeConformance2();
    uint64_t v70 = AnyTransition.init<A>(_:)();
    uint64_t v71 = v113;
    sub_10000FB74(v59, v113, &qword_10051FC50);
    *(void *)(v71 + *(int *)(v109 + 36)) = v70;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v69);
    sub_10000FBD8(v59, &qword_10051FC50);
    uint64_t v72 = static Animation.easeInOut(duration:)();
    uint64_t v73 = v111;
    sub_10000FB74(v71, v111, &qword_10051FC58);
    uint64_t v74 = v89;
    uint64_t v75 = (uint64_t *)(v73 + *(int *)(v89 + 36));
    uint64_t v76 = v100;
    *uint64_t v75 = v72;
    v75[1] = v76;
    v75[2] = v103;
    swift_bridgeObjectRetain();
    sub_10000FBD8(v71, &qword_10051FC58);
    uint64_t v77 = v110;
    sub_10000FC34(v73, v110, &qword_10051FC60);
    uint64_t v37 = v90;
    sub_10000FC34(v77, (uint64_t)v90, &qword_10051FC60);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v37, 0, 1, v74);
    a1 = v92;
    a3 = v93;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v28 + 56))((char *)&v83 - v35, 1, 1, v27, v36);
  }
  uint64_t v78 = (uint64_t)v125;
  uint64_t v79 = static HorizontalAlignment.leading.getter();
  if (qword_100517ED0 != -1) {
    swift_once();
  }
  uint64_t v80 = qword_10051FB98;
  sub_10010F82C((long long *)a1, v127 & 1, v128);
  *(_OWORD *)&v129[199] = v128[12];
  *(_OWORD *)&v129[215] = v128[13];
  *(_OWORD *)&v129[231] = v128[14];
  *(_OWORD *)&v129[247] = v128[15];
  *(_OWORD *)&v129[135] = v128[8];
  *(_OWORD *)&v129[151] = v128[9];
  *(_OWORD *)&v129[167] = v128[10];
  *(_OWORD *)&v129[183] = v128[11];
  *(_OWORD *)&v129[71] = v128[4];
  *(_OWORD *)&v129[87] = v128[5];
  *(_OWORD *)&v129[103] = v128[6];
  *(_OWORD *)&v129[119] = v128[7];
  *(_OWORD *)&v129[7] = v128[0];
  *(_OWORD *)&v129[23] = v128[1];
  *(_OWORD *)&v129[39] = v128[2];
  v129[264] = 0;
  *(_OWORD *)&v129[55] = v128[3];
  sub_10000FB74((uint64_t)v37, v78, &qword_10051FC68);
  sub_10000FB74(v78, a3, &qword_10051FC68);
  uint64_t v81 = (void *)(a3 + *(int *)(sub_10000F214(&qword_10051FC70) + 48));
  v130[0] = v79;
  v130[1] = v80;
  LOBYTE(v130[2]) = 0;
  memcpy((char *)&v130[2] + 1, v129, 0x107uLL);
  v130[35] = 0x3FF0000000000000;
  memcpy(v81, v130, 0x120uLL);
  sub_100110A80((uint64_t)v130);
  sub_10000FBD8((uint64_t)v37, &qword_10051FC68);
  uint64_t v131 = v79;
  uint64_t v132 = v80;
  LOBYTE(v133[0]) = 0;
  memcpy((char *)v133 + 1, v129, 0x107uLL);
  v133[33] = 0x3FF0000000000000;
  sub_100110C4C((uint64_t)&v131);
  return sub_10000FBD8(v78, &qword_10051FC68);
}

uint64_t sub_10010F82C@<X0>(long long *a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  LODWORD(v140) = a2;
  os_log_type_t v136 = a3;
  uint64_t v4 = sub_10000F214(&qword_100519C60);
  __chkstk_darwin(v4 - 8);
  uint64_t v131 = &v112[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v147 = type metadata accessor for BlurReplaceTransition.Configuration();
  uint64_t v154 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v145 = &v112[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  unint64_t v144 = &v112[-v8];
  uint64_t v146 = type metadata accessor for BlurReplaceTransition();
  uint64_t v156 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  unint64_t v143 = &v112[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v142 = type metadata accessor for OpacityTransition();
  uint64_t v153 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v139 = &v112[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v141 = sub_10000F214(&qword_10051D558);
  uint64_t v155 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v137 = &v112[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v138 = &v112[-v13];
  long long v14 = a1[1];
  long long v181 = *a1;
  v182[0] = v14;
  v182[1] = a1[2];
  char v183 = *((unsigned char *)a1 + 48);
  uint64_t v15 = *((void *)&v181 + 1);
  uint64_t v133 = v181;
  long long v163 = v181;
  unint64_t v16 = sub_1000317A0();
  uint64_t v148 = v15;
  swift_bridgeObjectRetain();
  unint64_t v121 = v16;
  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  static Font.subheadline.getter();
  uint64_t v22 = Text.font(_:)();
  uint64_t v24 = v23;
  char v26 = v25;
  swift_release();
  sub_100012FAC(v17, v19, v21);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v150 = Text.fontWeight(_:)();
  uint64_t v135 = v27;
  LODWORD(v17) = v28;
  uint64_t v30 = v29;
  sub_100012FAC(v22, v24, v26 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v152 = v30;
  int v132 = v17;
  if (v140) {
    uint64_t v31 = static Color.white.getter();
  }
  else {
    uint64_t v31 = static Color.primary.getter();
  }
  uint64_t v149 = v31;
  uint64_t v32 = v154;
  uint64_t v134 = swift_getKeyPath();
  uint64_t v33 = v139;
  OpacityTransition.init()();
  uint64_t v34 = v144;
  static BlurReplaceTransition.Configuration.downUp.getter();
  uint64_t v35 = v147;
  uint64_t v129 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v32 + 16);
  uint64_t v130 = v32 + 16;
  v129(v145, v34, v147);
  double v36 = v143;
  BlurReplaceTransition.init(configuration:)();
  uint64_t v128 = *(void (**)(unsigned char *, uint64_t))(v32 + 8);
  uint64_t v154 = v32 + 8;
  v128(v34, v35);
  uint64_t v37 = sub_100110EC8(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
  uint64_t v38 = sub_100110EC8(&qword_10051D5C0, (void (*)(uint64_t))&type metadata accessor for BlurReplaceTransition);
  uint64_t v39 = v138;
  uint64_t v40 = v142;
  uint64_t v41 = v146;
  Transition.combined<A>(with:)();
  uint64_t v42 = *(void (**)(unsigned char *, uint64_t))(v156 + 8);
  v156 += 8;
  uint64_t v125 = v42;
  v42(v36, v41);
  uint64_t v43 = v153 + 8;
  uint64_t v124 = *(void (**)(unsigned char *, uint64_t))(v153 + 8);
  v124(v33, v40);
  uint64_t v44 = v155;
  uint64_t v45 = v141;
  uint64_t v122 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v155 + 16);
  uint64_t v123 = v155 + 16;
  v122(v137, v39, v141);
  *(void *)&long long v163 = v40;
  *((void *)&v163 + 1) = v41;
  uint64_t v126 = v38;
  uint64_t v127 = v37;
  *(void *)&long long v164 = v37;
  *((void *)&v164 + 1) = v38;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v47 = AnyTransition.init<A>(_:)();
  uint64_t v48 = *(void (**)(unsigned char *, uint64_t))(v44 + 8);
  uint64_t v155 = v44 + 8;
  v48(v39, v45);
  uint64_t v49 = static Animation.easeInOut(duration:)();
  sub_10000FC34((uint64_t)v182, (uint64_t)v184, &qword_10051D468);
  sub_10000FC34((uint64_t)v184, (uint64_t)&v185, &qword_10051D468);
  if (*((void *)&v185 + 1))
  {
    uint64_t v116 = OpaqueTypeConformance2;
    unint64_t v117 = v48;
    uint64_t v119 = v49;
    uint64_t v120 = v47;
    uint64_t v153 = v43;
    uint64_t v115 = v185;
    long long v163 = v185;
    uint64_t v118 = *((void *)&v185 + 1);
    swift_bridgeObjectRetain();
    sub_100110F38((uint64_t)v184);
    uint64_t v50 = Text.init<A>(_:)();
    uint64_t v52 = v51;
    char v54 = v53 & 1;
    static Font.caption.getter();
    uint64_t v55 = Text.font(_:)();
    uint64_t v57 = v56;
    char v59 = v58;
    swift_release();
    char v60 = v59 & 1;
    sub_100012FAC(v50, v52, v54);
    swift_bridgeObjectRelease();
    uint64_t v61 = enum case for Font.Design.rounded(_:);
    uint64_t v62 = type metadata accessor for Font.Design();
    uint64_t v63 = *(void *)(v62 - 8);
    uint64_t v64 = (uint64_t)v131;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v63 + 104))(v131, v61, v62);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v62);
    uint64_t v65 = Text.fontDesign(_:)();
    uint64_t v67 = v66;
    char v69 = v68 & 1;
    sub_100012FAC(v55, v57, v60);
    swift_bridgeObjectRelease();
    sub_10000FBD8(v64, &qword_100519C60);
    static Font.Weight.medium.getter();
    uint64_t v131 = (unsigned char *)Text.fontWeight(_:)();
    unint64_t v121 = v70;
    int v113 = v71;
    uint64_t v73 = v72;
    sub_100012FAC(v65, v67, v69);
    swift_bridgeObjectRelease();
    uint64_t v114 = swift_getKeyPath();
    if (v140) {
      static Color.white.getter();
    }
    else {
      static Color.primary.getter();
    }
    uint64_t v153 = Color.opacity(_:)();
    swift_release();
    uint64_t v140 = swift_getKeyPath();
    char v79 = static Edge.Set.trailing.getter();
    EdgeInsets.init(_all:)();
    uint64_t v81 = v80;
    uint64_t v83 = v82;
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    uint64_t v88 = v139;
    OpacityTransition.init()();
    uint64_t v89 = v144;
    static BlurReplaceTransition.Configuration.downUp.getter();
    uint64_t v90 = v147;
    v129(v145, v89, v147);
    uint64_t v91 = v143;
    BlurReplaceTransition.init(configuration:)();
    v128(v89, v90);
    uint64_t v92 = v138;
    uint64_t v93 = v142;
    uint64_t v94 = v146;
    Transition.combined<A>(with:)();
    v125(v91, v94);
    v124(v88, v93);
    uint64_t v95 = v141;
    v122(v137, v92, v141);
    uint64_t v96 = AnyTransition.init<A>(_:)();
    char v160 = v113 & 1;
    char v159 = 0;
    char v158 = 0;
    v117(v92, v95);
    LOBYTE(v95) = v160;
    LOBYTE(v93) = v159;
    LOBYTE(v91) = v158;
    uint64_t v97 = static Animation.easeInOut(duration:)();
    *(void *)&long long v163 = v131;
    *((void *)&v163 + 1) = v121;
    LOBYTE(v164) = v95;
    *(_DWORD *)((char *)&v164 + 1) = v179[0];
    DWORD1(v164) = *(_DWORD *)((char *)v179 + 3);
    *((void *)&v164 + 1) = v73;
    *(void *)&long long v165 = v114;
    *((void *)&v165 + 1) = 1;
    LOBYTE(v166) = v93;
    *(_DWORD *)((char *)&v166 + 1) = v162[0];
    DWORD1(v166) = *(_DWORD *)((char *)v162 + 3);
    *((void *)&v166 + 1) = v140;
    *(void *)&long long v167 = v153;
    BYTE8(v167) = v79;
    HIDWORD(v167) = *(_DWORD *)&v161[3];
    *(_DWORD *)((char *)&v167 + 9) = *(_DWORD *)v161;
    *(void *)&long long v168 = v81;
    *((void *)&v168 + 1) = v83;
    *(void *)&long long v169 = v85;
    *((void *)&v169 + 1) = v87;
    LOBYTE(v170) = (_BYTE)v91;
    *(_DWORD *)((char *)&v170 + 1) = *(_DWORD *)v157;
    DWORD1(v170) = *(_DWORD *)&v157[3];
    *((void *)&v170 + 1) = v96;
    *(void *)&long long v171 = v97;
    *((void *)&v171 + 1) = v115;
    *(void *)&long long v172 = v118;
    nullsub_2(&v163, v98);
    sub_10000FC34((uint64_t)&v163, (uint64_t)v180, &qword_10051FC90);
    uint64_t v74 = v148;
    uint64_t v76 = KeyPath;
    uint64_t v77 = v152;
    uint64_t v78 = v134;
    uint64_t v49 = v119;
    uint64_t v75 = v120;
  }
  else
  {
    sub_100110F18((uint64_t)&v163);
    uint64_t v74 = v148;
    swift_bridgeObjectRetain();
    sub_10000FC34((uint64_t)&v163, (uint64_t)v180, &qword_10051FC90);
    uint64_t v75 = v47;
    uint64_t v76 = KeyPath;
    uint64_t v77 = v152;
    uint64_t v78 = v134;
  }
  char v99 = v132 & 1;
  sub_10000FC34((uint64_t)v180, (uint64_t)v161, &qword_10051FC90);
  sub_10000FC34((uint64_t)v161, (uint64_t)v162, &qword_10051FC90);
  *(void *)&long long v163 = v150;
  uint64_t v100 = v135;
  *((void *)&v163 + 1) = v135;
  LOBYTE(v164) = v99;
  *((void *)&v164 + 1) = v77;
  *(void *)&long long v165 = v76;
  *((void *)&v165 + 1) = 1;
  LOBYTE(v166) = 0;
  *((void *)&v166 + 1) = v78;
  *(void *)&long long v167 = v149;
  *((void *)&v167 + 1) = v75;
  *(void *)&long long v168 = v49;
  *((void *)&v168 + 1) = v133;
  *(void *)&long long v169 = v74;
  sub_10000FC34((uint64_t)v162, (uint64_t)&v169 + 8, &qword_10051FC90);
  long long v101 = v176;
  uint64_t v102 = v136;
  v136[12] = v175;
  v102[13] = v101;
  long long v103 = v178;
  v102[14] = v177;
  v102[15] = v103;
  long long v104 = v172;
  v102[8] = v171;
  v102[9] = v104;
  long long v105 = v174;
  v102[10] = v173;
  v102[11] = v105;
  long long v106 = v168;
  v102[4] = v167;
  v102[5] = v106;
  long long v107 = v170;
  v102[6] = v169;
  v102[7] = v107;
  long long v108 = v164;
  *uint64_t v102 = v163;
  v102[1] = v108;
  long long v109 = v166;
  v102[2] = v165;
  v102[3] = v109;
  sub_10000FC34((uint64_t)v161, (uint64_t)v179, &qword_10051FC90);
  sub_100110F38((uint64_t)v184);
  uint64_t v110 = v150;
  sub_1000807A8(v150, v100, v99);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100110F64(v162, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100110BAC);
  sub_100110F64(v179, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100110D78);
  sub_100012FAC(v110, v100, v99);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001104E4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Capsule();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051CD90);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051CDA0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v14 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v6, v13, v14);
  if (a1) {
    static Color.red.getter();
  }
  else {
    static Color.black.getter();
  }
  uint64_t v15 = Color.opacity(_:)();
  swift_release();
  sub_10008D3F0((uint64_t)v6, (uint64_t)v9);
  unint64_t v16 = &v9[*(int *)(v7 + 36)];
  *(void *)unint64_t v16 = v15;
  *(_OWORD *)(v16 + 8) = xmmword_100440680;
  *((void *)v16 + 3) = 0x402E000000000000;
  sub_10008D454((uint64_t)v6);
  static UnitPoint.center.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_10000FB74((uint64_t)v9, (uint64_t)v12, &qword_10051CD90);
  char v21 = (int64x2_t *)&v12[*(int *)(v10 + 36)];
  *char v21 = vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL);
  v21[1].i64[0] = v18;
  v21[1].i64[1] = v20;
  sub_10000FBD8((uint64_t)v9, &qword_10051CD90);
  return sub_10000FC34((uint64_t)v12, a2, &qword_10051CDA0);
}

uint64_t sub_10011071C@<X0>(uint64_t a1@<X8>)
{
  return sub_10010E03C(a1);
}

unint64_t sub_100110760()
{
  unint64_t result = qword_10051FBF8;
  if (!qword_10051FBF8)
  {
    sub_10000F69C(&qword_10051FBB8);
    sub_100110800();
    sub_100013AA8(&qword_10051FC18, &qword_10051FC20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FBF8);
  }
  return result;
}

unint64_t sub_100110800()
{
  unint64_t result = qword_10051FC00;
  if (!qword_10051FC00)
  {
    sub_10000F69C(&qword_10051FBD0);
    sub_10011087C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FC00);
  }
  return result;
}

unint64_t sub_10011087C()
{
  unint64_t result = qword_10051FC08;
  if (!qword_10051FC08)
  {
    sub_10000F69C(&qword_10051FBC8);
    sub_100013AA8(&qword_10051FC10, &qword_10051FBC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FC08);
  }
  return result;
}

unint64_t sub_10011091C()
{
  unint64_t result = qword_10051FC28;
  if (!qword_10051FC28)
  {
    sub_10000F69C(&qword_10051FBA8);
    sub_1001109BC();
    sub_100013AA8(&qword_10051C1E8, &qword_10051C158);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FC28);
  }
  return result;
}

uint64_t sub_1001109BC()
{
  return sub_1001109F8(&qword_10051FC30, &qword_10051FBD8, (void (*)(void))sub_100110760, (void (*)(void))sub_100110800);
}

uint64_t sub_1001109F8(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100110A80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 152);
  sub_1000807A8(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100110BAC(v6, v2, v5, v4);
  return a1;
}

uint64_t sub_100110BAC(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1000807A8(result, a2, a3 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_100110C4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 152);
  sub_100012FAC(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_100110D78(v6, v2, v5, v4);
  return a1;
}

uint64_t sub_100110D78(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100012FAC(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t sub_100110E20()
{
  unint64_t result = qword_10051FC80;
  if (!qword_10051FC80)
  {
    sub_10000F69C(&qword_10051FC40);
    sub_10008D63C();
    sub_100013AA8(&qword_10051FC88, &qword_10051FC38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FC80);
  }
  return result;
}

uint64_t sub_100110EC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_100110F18(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_100110F38(uint64_t a1)
{
  return a1;
}

void *sub_100110F64(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t _s6Tamale12ReplayStatusVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s6Tamale12ReplayStatusVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s6Tamale12ReplayStatusVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t _s6Tamale12ReplayStatusVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t _s6Tamale12ReplayStatusVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001111B4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplayStatus()
{
  return &type metadata for ReplayStatus;
}

unint64_t sub_100111218()
{
  unint64_t result = qword_10051FC98;
  if (!qword_10051FC98)
  {
    sub_10000F69C(&qword_10051FBE8);
    sub_1001109F8(&qword_10051FCA0, &qword_10051FBE0, (void (*)(void))sub_10011091C, (void (*)(void))sub_1001109BC);
    sub_100013AA8(&qword_10051CDF8, &qword_10051CDA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FC98);
  }
  return result;
}

uint64_t sub_1001112F0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    if ((v5 & 1) == 0) {
      return v6 & 1;
    }
  }
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v7)
  {
    if (v8) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  if (!v8) {
    goto LABEL_22;
  }
  BOOL v9 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && v7 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v6 = 0, (v10 & 1) != 0))
  {
LABEL_15:
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a2 + 40);
    if (v11)
    {
      if (v12)
      {
        if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || v11 != v12)
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v6 = 0;
          if ((v13 & 1) == 0) {
            return v6 & 1;
          }
        }
LABEL_23:
        char v6 = ((*(unsigned char *)(a1 + 48) & 1) == 0) ^ *(unsigned char *)(a2 + 48);
        return v6 & 1;
      }
    }
    else if (!v12)
    {
      goto LABEL_23;
    }
LABEL_22:
    char v6 = 0;
  }
  return v6 & 1;
}

id sub_1001114B8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CameraPreviewView();
  return [super dealloc];
}

uint64_t type metadata accessor for CameraPreviewView()
{
  return self;
}

uint64_t destroy for TapToRadarButton()
{
  swift_release();

  return swift_release();
}

uint64_t sub_10011155C(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1001115AC(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t sub_10011161C(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t sub_100111674(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001116BC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CameraManagerViewFinder()
{
  return sub_1000684BC();
}

uint64_t sub_100111718()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_10011175C(uint64_t a1, uint64_t a2, char a3)
{
  char v3 = a3 & 1;
  uint64_t v4 = sub_10000F214(&qword_10051FD98);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CameraPreviewView();
  id v8 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v9 = swift_retain();
  sub_10027CDAC(v9, v3);
  swift_release();
  swift_weakAssign();
  swift_release();
  id v10 = [v8 layer];
  [v10 setContentsGravity:kCAGravityResizeAspectFill];
  [v10 setAllowsDisplayCompositing:1];
  uint64_t v11 = swift_retain();
  sub_10027CDAC(v11, v3);
  swift_release();
  v14[1] = v10;
  id v12 = v10;
  sub_10000F214(qword_10051FDA0);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

  swift_release();
  return v8;
}

id sub_100111930(uint64_t a1)
{
  return sub_10011175C(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_10011193C()
{
  uint64_t v0 = sub_10000F214(&qword_10051FD98);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v5[1] = 0;
    sub_10000F214(qword_10051FDA0);
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100111A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100112610();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100111ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100112610();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100111B20()
{
}

uint64_t sub_100111B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v49 = a2;
  uint64_t v43 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for _ConditionalContent();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v39 - v6;
  uint64_t v44 = *(void *)(v4 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v39 - v11;
  uint64_t v46 = sub_10000F69C(&qword_10051FD58);
  uint64_t v13 = type metadata accessor for _ConditionalContent();
  uint64_t v47 = *(void *)(v13 - 8);
  uint64_t v48 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v39 - v14;
  char v16 = *(unsigned char *)(v2 + 8);
  uint64_t v17 = swift_retain();
  uint64_t v18 = sub_10027CDAC(v17, v16);
  swift_release();
  swift_getKeyPath();
  v54[0] = v18;
  sub_100112258();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v19 = *(void *)(v18 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v20 = *(void *)(v18 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  int v21 = *(unsigned __int8 *)(v18 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16);
  sub_1000BBF50(v19, v20, *(unsigned char *)(v18 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_release();
  if (*(unsigned char *)(v3 + 32))
  {
    uint64_t v41 = v5;
    uint64_t v26 = v43;
    uint64_t v27 = v44;
    uint64_t v40 = v15;
    int v28 = v45;
    if (v21 == 2)
    {
      uint64_t v29 = sub_1000BC2F4(v19, v20, 2);
      (*(void (**)(uint64_t))(v3 + 16))(v29);
      uint64_t v23 = *(void *)(v26 + 24);
      sub_100224E4C(v9, v4, v23);
      uint64_t v30 = *(void (**)(char *, uint64_t))(v27 + 8);
      v30(v9, v4);
      sub_100224E4C(v12, v4, v23);
      uint64_t v31 = (uint64_t)v28;
      sub_100059E9C((uint64_t)v9, v4, v4);
      v30(v9, v4);
      uint64_t v50 = v23;
      uint64_t v51 = v23;
      uint64_t v32 = v41;
      swift_getWitnessTable();
      sub_1001122B0();
      uint64_t v15 = v40;
      sub_100059D38(v31, v32);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v31, v32);
      v30(v12, v4);
    }
    else
    {
      v54[0] = sub_10011210C;
      v54[1] = 0;
      uint64_t v23 = *(void *)(v43 + 24);
      uint64_t v52 = v23;
      uint64_t v53 = v23;
      uint64_t v33 = v41;
      swift_getWitnessTable();
      sub_1001122B0();
      uint64_t v15 = v40;
      sub_100059E9C((uint64_t)v54, v33, v46);
    }
  }
  else
  {
    uint64_t v22 = sub_1000BC2F4(v19, v20, v21);
    (*(void (**)(uint64_t))(v3 + 16))(v22);
    uint64_t v23 = *(void *)(v43 + 24);
    sub_100224E4C(v9, v4, v23);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v44 + 8);
    v24(v9, v4);
    sub_100224E4C(v12, v4, v23);
    uint64_t v25 = (uint64_t)v45;
    sub_100059D38((uint64_t)v9, v4);
    v24(v9, v4);
    v54[6] = v23;
    v54[7] = v23;
    swift_getWitnessTable();
    sub_1001122B0();
    sub_100059D38(v25, v5);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v25, v5);
    v24(v12, v4);
  }
  v54[4] = v23;
  v54[5] = v23;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v35 = sub_1001122B0();
  v54[2] = WitnessTable;
  v54[3] = v35;
  uint64_t v36 = v48;
  uint64_t v37 = swift_getWitnessTable();
  sub_100224E4C(v15, v36, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v15, v36);
}

uint64_t sub_10011210C()
{
  return swift_release();
}

unint64_t sub_100112258()
{
  unint64_t result = qword_10051B708;
  if (!qword_10051B708)
  {
    type metadata accessor for CameraController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B708);
  }
  return result;
}

unint64_t sub_1001122B0()
{
  unint64_t result = qword_10051FD60;
  if (!qword_10051FD60)
  {
    sub_10000F69C(&qword_10051FD58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FD60);
  }
  return result;
}

uint64_t sub_10011230C()
{
  return sub_10011233C(&qword_10051FD78, &qword_10051FD80, (void (*)(void))sub_1001123B8);
}

uint64_t sub_10011233C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001123B8()
{
  unint64_t result = qword_10051FD88;
  if (!qword_10051FD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FD88);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CameraPreviewViewRepresentable(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for CameraPreviewViewRepresentable()
{
  return swift_release();
}

uint64_t assignWithCopy for CameraPreviewViewRepresentable(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CameraPreviewViewRepresentable(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraPreviewViewRepresentable(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraPreviewViewRepresentable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraPreviewViewRepresentable()
{
  return &type metadata for CameraPreviewViewRepresentable;
}

uint64_t sub_100112568()
{
  return swift_getWitnessTable();
}

unint64_t sub_100112610()
{
  unint64_t result = qword_10051FD90;
  if (!qword_10051FD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FD90);
  }
  return result;
}

uint64_t sub_100112668@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  id v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t SendableTransfer.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t SendableTransfer.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t SendableTransfer.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t SendableTransfer.unwrapped<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = __chkstk_darwin(a1);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, double))(v4 + 16))(v7, v5);
  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v8 = type metadata accessor for SendableTransfer();
  sub_100112668((void (*)(char *, char *))sub_100112BC8, (uint64_t)v11, (uint64_t)&type metadata for Never, v8, v9, a2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_100112AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
}

uint64_t sub_100112BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100112AE0(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for SendableTransfer()
{
  return sub_1000684BC();
}

uint64_t static SendableTransfer<A>.__derived_struct_equals(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_100112C28()
{
  return static SendableTransfer<A>.__derived_struct_equals(_:_:)();
}

uint64_t SendableTransfer<A>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int SendableTransfer<A>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100112C94()
{
  return SendableTransfer<A>.hashValue.getter();
}

uint64_t sub_100112C9C()
{
  return SendableTransfer<A>.hash(into:)();
}

Swift::Int sub_100112CA4()
{
  return Hasher._finalize()();
}

uint64_t sub_100112CF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_100112D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_100112D48()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100112DD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_100112E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100112EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100112F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100112F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100112FD0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_10011312C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x100113344);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t View.onCameraControlEvent(_:)()
{
  return View.modifier<A>(_:)();
}

uint64_t sub_1001133A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = static Alignment.center.getter();
  uint64_t v9 = v8;
  uint64_t v10 = sub_10000F214(&qword_10051FED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a2, a1, v10);
  int v11 = (void *)(a2 + *(int *)(sub_10000F214(&qword_10051FED8) + 36));
  *int v11 = v6;
  v11[1] = v5;
  v11[2] = v7;
  v11[3] = v9;

  return swift_retain();
}

id sub_100113458()
{
  uint64_t v1 = OBJC_IVAR____TtCV6TamaleP33_6B80812B8B2A2C498C81CCDFF3BE716F28CameraControlEventInteractor11Coordinator____lazy_storage___view;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtCV6TamaleP33_6B80812B8B2A2C498C81CCDFF3BE716F28CameraControlEventInteractor11Coordinator____lazy_storage___view];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtCV6TamaleP33_6B80812B8B2A2C498C81CCDFF3BE716F28CameraControlEventInteractor11Coordinator____lazy_storage___view];
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UIView) initWithFrame:CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height];
    id v5 = [self _cameraCaptureShutterConfigurationWithOptionsProvider:0];
    sub_100113800();
    sub_100113840();
    static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v6 = objc_allocWithZone((Class)_UIPhysicalButtonInteraction);
    uint64_t v7 = v0;
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v9 = [v6 initWithConfigurations:isa delegate:v7];

    [v4 addInteraction:v9];
    uint64_t v10 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v11 = v2;
  return v3;
}

id sub_1001136B8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CameraControlEventInteractor.Coordinator();
  return [super dealloc];
}

uint64_t type metadata accessor for CameraControlEventInteractor.Coordinator()
{
  return self;
}

uint64_t sub_100113764()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for OnCameraControlEventModifier()
{
  return &type metadata for OnCameraControlEventModifier;
}

uint64_t sub_1001137E4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100113800()
{
  unint64_t result = qword_10051FEE0;
  if (!qword_10051FEE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10051FEE0);
  }
  return result;
}

unint64_t sub_100113840()
{
  unint64_t result = qword_10051FEE8;
  if (!qword_10051FEE8)
  {
    sub_100113800();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FEE8);
  }
  return result;
}

id sub_100113898()
{
  sub_10000F214(&qword_10051FF18);
  UIViewRepresentableContext.coordinator.getter();
  id v0 = sub_100113458();

  return v0;
}

uint64_t sub_1001138E8()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  sub_10000F214(&qword_10051FF18);
  UIViewRepresentableContext.coordinator.getter();
  id v3 = &v5[OBJC_IVAR____TtCV6TamaleP33_6B80812B8B2A2C498C81CCDFF3BE716F28CameraControlEventInteractor11Coordinator_action];
  *(void *)id v3 = v2;
  *((void *)v3 + 1) = v1;
  swift_retain();

  return swift_release();
}

id sub_100113960@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  id v5 = (objc_class *)type metadata accessor for CameraControlEventInteractor.Coordinator();
  id v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR____TtCV6TamaleP33_6B80812B8B2A2C498C81CCDFF3BE716F28CameraControlEventInteractor11Coordinator____lazy_storage___view] = 0;
  uint64_t v7 = &v6[OBJC_IVAR____TtCV6TamaleP33_6B80812B8B2A2C498C81CCDFF3BE716F28CameraControlEventInteractor11Coordinator_action];
  *(void *)uint64_t v7 = v4;
  *((void *)v7 + 1) = v3;
  v9.receiver = v6;
  v9.super_class = v5;
  swift_retain();
  id result = [super init];
  *a1 = result;
  return result;
}

uint64_t sub_1001139E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100113CAC();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100113A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100113CAC();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100113AAC()
{
}

void *initializeBufferWithCopyOfBuffer for CameraControlEventInteractor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for CameraControlEventInteractor()
{
  return swift_release();
}

void *assignWithCopy for SceneStateObserverModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for CameraControlEventInteractor(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CameraControlEventInteractor()
{
  return &type metadata for CameraControlEventInteractor;
}

unint64_t sub_100113B90()
{
  unint64_t result = qword_10051FEF0;
  if (!qword_10051FEF0)
  {
    sub_10000F69C(&qword_10051FED8);
    sub_100013AA8(&qword_10051FEF8, &qword_10051FED0);
    sub_100013AA8(&qword_10051FF00, &qword_10051FF08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FEF0);
  }
  return result;
}

unint64_t sub_100113C58()
{
  unint64_t result = qword_10051FF10;
  if (!qword_10051FF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FF10);
  }
  return result;
}

unint64_t sub_100113CAC()
{
  unint64_t result = qword_10051FF20;
  if (!qword_10051FF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FF20);
  }
  return result;
}

uint64_t sub_100113D0C()
{
  sub_100114894(v0 + OBJC_IVAR____TtC6Tamale19LinkMetadataFetcher__metadata);
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale19LinkMetadataFetcher___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100113DBC()
{
  return type metadata accessor for LinkMetadataFetcher(0);
}

uint64_t type metadata accessor for LinkMetadataFetcher(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10051FF68);
}

void sub_100113DE4()
{
  sub_100113EB0();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100113EB0()
{
  if (!qword_10051FF78)
  {
    type metadata accessor for LinkMetadata(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051FF78);
    }
  }
}

uint64_t type metadata accessor for LinkMetadata(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_1005200A8);
}

uint64_t *sub_100113F28(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    id v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    int v13 = *(void **)((char *)a2 + v9);
    *uint64_t v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v13;
    uint64_t v14 = a3[7];
    int v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for URL();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    id v19 = v13;
    v18(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_10011406C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();

  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_100114130(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  uint64_t v12 = *(void **)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  id v18 = v12;
  v17(v14, v15, v16);
  return a1;
}

uint64_t sub_100114224(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)(a1 + v10);
  uint64_t v12 = *(void **)(a2 + v10);
  *(void *)(a1 + v10) = v12;
  id v13 = v12;

  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_100114320(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_1001143EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  id v13 = *(void **)(a1 + v12);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);

  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_1001144D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001144E8);
}

uint64_t sub_1001144E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100114618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011462C);
}

uint64_t sub_10011462C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_10011475C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_10011483C()
{
  unint64_t result = qword_100524E40;
  if (!qword_100524E40)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100524E40);
  }
  return result;
}

uint64_t sub_100114894(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_1005200E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001148F4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100114910(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CVDetection();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for GeoLocateState(0);
  __chkstk_darwin(State);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011CDA8(a1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_10000F214(&qword_100520120);
    uint64_t v9 = &v7[*(int *)(v8 + 48)];
    uint64_t v11 = *(void **)v9;
    unint64_t v10 = (void *)*((void *)v9 + 1);
    uint64_t v39 = *((void *)v9 + 2);
    uint64_t v40 = v10;
    int v12 = v9[24];
    uint64_t v13 = &v7[*(int *)(v8 + 64)];
    uint64_t v14 = *(void **)v13;
    uint64_t v15 = (void *)*((void *)v13 + 1);
    uint64_t v38 = *((void *)v13 + 2);
    int v16 = v13[24];
    sub_10006426C((uint64_t)v7, (uint64_t)v4);
    uint64_t v41 = 0;
    unint64_t v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    uint64_t v45 = v41;
    unint64_t v46 = v42;
    v17._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v17._object = (void *)0x80000001004276B0;
    String.append(_:)(v17);
    if (v16) {
      id v18 = v14;
    }
    else {
      id v18 = v15;
    }
    [v18 coordinate];
    uint64_t v41 = v19;
    unint64_t v42 = v20;
    type metadata accessor for CLLocationCoordinate2D(0);
    _print_unlocked<A, B>(_:_:)();
    v21._object = (void *)0x80000001004276E0;
    v21._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v21);
    sub_1003FEC34(&v41);
    uint64_t v22 = v43;
    uint64_t v23 = v44;
    sub_10000F3B0(&v41, v43);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 72))(v22, v23);
    uint64_t v26 = v25;
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v41);
    v27._uint64_t countAndFlagsBits = v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    uint64_t v28 = v45;
    unint64_t v29 = v46;
    if (v12)
    {
      sub_10004FFD4(v14, v15, v38, v16);
      sub_10004FFD4(v11, v40, v39, v12);
    }
    else
    {
      uint64_t v37 = v11;
      id v30 = v11;
      uint64_t v41 = 0;
      unint64_t v42 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      v31._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v31._object = (void *)0x8000000100427700;
      String.append(_:)(v31);
      [v30 horizontalAccuracy];
      Double.write<A>(to:)();
      uint64_t v33 = v41;
      uint64_t v32 = (void *)v42;
      uint64_t v41 = v28;
      unint64_t v42 = v29;
      swift_bridgeObjectRetain();
      v34._uint64_t countAndFlagsBits = v33;
      v34._object = v32;
      String.append(_:)(v34);
      sub_10004FFD4(v14, v15, v38, v16);

      swift_bridgeObjectRelease();
      sub_10004FFD4(v37, v40, v39, 0);
      swift_bridgeObjectRelease();
      uint64_t v28 = v41;
    }
    sub_10011CE0C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  else
  {
    sub_10011CE0C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return 0xD000000000000020;
  }
  return v28;
}

void *sub_100114C98(void *a1, void *a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 == 1) {
      *(double *)&unint64_t result = 0.0;
    }
    else {
      return a2;
    }
  }
  else
  {
    id v6 = a1;
    id v7 = a2;
    [v6 coordinate];
    [v6 coordinate];
    [v7 coordinate];
    [v7 coordinate];
    GEOBearingFromCoordinateToCoordinate();
    double v9 = v8;

    *(double *)&unint64_t result = v9 * 3.14159265 / 180.0;
  }
  return result;
}

BOOL sub_100114D80(uint64_t a1, uint64_t a2)
{
  return sub_10011C6A4(*(void **)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void **)a2, *(void **)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t sub_100114DA4(void *a1, double a2, double a3)
{
  [a1 horizontalAccuracy];
  double v7 = v6 * 10.0;
  [a1 coordinate];
  MKMapPoint v8 = MKMapPointForCoordinate(v27);
  __double2 v9 = __sincos_stret(a2 - a3);
  double v10 = v9.__sinval * v7 + v8.x;
  double v11 = v8.y - v9.__cosval * v7;
  __double2 v12 = __sincos_stret(a2 + a3);
  double v13 = v12.__sinval * v7;
  double v14 = v12.__cosval * v7;
  sub_100040B30(0, 3, 0);
  CLLocationCoordinate2D v15 = MKCoordinateForMapPoint(v8);
  unint64_t v17 = _swiftEmptyArrayStorage[2];
  unint64_t v16 = _swiftEmptyArrayStorage[3];
  if (v17 >= v16 >> 1) {
    sub_100040B30(v16 > 1, v17 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v17 + 1;
  *(CLLocationCoordinate2D *)&_swiftEmptyArrayStorage[2 * v17 + 4] = v15;
  v28.CGFloat x = v10;
  v28.CGFloat y = v11;
  CLLocationCoordinate2D v18 = MKCoordinateForMapPoint(v28);
  unint64_t v20 = _swiftEmptyArrayStorage[2];
  unint64_t v19 = _swiftEmptyArrayStorage[3];
  if (v20 >= v19 >> 1) {
    sub_100040B30(v19 > 1, v20 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v20 + 1;
  *(CLLocationCoordinate2D *)&_swiftEmptyArrayStorage[2 * v20 + 4] = v18;
  v29.CGFloat x = v13 + v8.x;
  v29.CGFloat y = v8.y - v14;
  CLLocationCoordinate2D v21 = MKCoordinateForMapPoint(v29);
  unint64_t v23 = _swiftEmptyArrayStorage[2];
  unint64_t v22 = _swiftEmptyArrayStorage[3];
  if (v23 >= v22 >> 1) {
    sub_100040B30(v22 > 1, v23 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v23 + 1;
  *(CLLocationCoordinate2D *)&_swiftEmptyArrayStorage[2 * v23 + 4] = v21;
  id v24 = [self polygonWithCoordinates:&_swiftEmptyArrayStorage[4] count:v23 + 1];
  swift_release();

  return MapPolygon.init(_:)(v24);
}

uint64_t sub_100114FCC@<X0>(void *a1@<X0>, void *a2@<X1>, double a3@<X2>, int a4@<W3>, char *a5@<X8>)
{
  char v5 = a4;
  int v103 = a4;
  double v79 = a3;
  uint64_t v97 = a2;
  uint64_t v96 = a1;
  long long v101 = a5;
  uint64_t v8 = sub_10000F214(&qword_1005200F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v102 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v107 = (char *)&v79 - v11;
  uint64_t v84 = type metadata accessor for MapPolygon();
  uint64_t v82 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v80 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_1005200F8);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v83 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000F214(&qword_100520100);
  uint64_t v99 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v81 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_100520108);
  __chkstk_darwin(v15 - 8);
  uint64_t v100 = (uint64_t)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v108 = (uint64_t)&v79 - v18;
  uint64_t v19 = type metadata accessor for MapCircle();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_10000F214(&qword_100520110);
  uint64_t v112 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  id v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000F214(&qword_100522C90);
  uint64_t v109 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v26 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v110 = (char *)&v79 - v28;
  if (v5) {
    MKMapPoint v29 = a1;
  }
  else {
    MKMapPoint v29 = a2;
  }
  id v30 = v29;
  [v30 coordinate];
  long long v104 = v30;
  [v30 horizontalAccuracy];
  MapCircle.init(center:radius:)();
  static Color.blue.getter();
  uint64_t v31 = Color.opacity(_:)();
  swift_release();
  uint64_t v113 = v31;
  MapContent.foregroundStyle<A>(_:)();
  swift_release();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v92 = v22;
  uint64_t v94 = v20 + 8;
  uint64_t v91 = v32;
  v32(v22, v19);
  uint64_t v33 = static Color.blue.getter();
  uint64_t v116 = &protocol witness table for Color;
  uint64_t v117 = v33;
  uint64_t v95 = v19;
  uint64_t v113 = v19;
  uint64_t v114 = &type metadata for Color;
  uint64_t v115 = &protocol witness table for MapCircle;
  unsigned __int8 v34 = v103;
  uint64_t v35 = 1;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v37 = v106;
  uint64_t v90 = OpaqueTypeConformance2;
  MapContent.stroke<A>(_:lineWidth:)();
  uint64_t v38 = v96;
  uint64_t v39 = v108;
  swift_release();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v112 + 8);
  uint64_t v93 = v24;
  uint64_t v41 = v24;
  uint64_t v42 = v98;
  v112 += 8;
  uint64_t v89 = v40;
  v40(v41, v37);
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v109 + 32);
  uint64_t v44 = v97;
  long long v105 = v26;
  uint64_t v45 = v26;
  uint64_t v46 = v99;
  uint64_t v88 = v109 + 32;
  uint64_t v87 = v43;
  v43(v110, v45, v111);
  uint64_t v48 = sub_100114C98(v38, v44, v47, v34);
  if ((v49 & 1) == 0)
  {
    uint64_t v35 = v34;
    if (v34)
    {
      if (v34 == 1) {
        goto LABEL_10;
      }
      double v50 = v79;
    }
    else
    {
      double v50 = 0.174532925;
    }
    uint64_t v51 = v80;
    sub_100114DA4(v104, *(double *)&v48, v50);
    static Color.blue.getter();
    uint64_t v52 = Color.opacity(_:)();
    swift_release();
    uint64_t v113 = v52;
    uint64_t v53 = v83;
    uint64_t v54 = v84;
    MapContent.foregroundStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v54);
    uint64_t v117 = static Color.blue.getter();
    uint64_t v113 = v54;
    uint64_t v114 = &type metadata for Color;
    uint64_t v115 = &protocol witness table for MapPolygon;
    unsigned __int8 v34 = v103;
    uint64_t v116 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2();
    uint64_t v55 = v81;
    uint64_t v56 = v86;
    MapContent.stroke<A>(_:lineWidth:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v53, v56);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v39, v55, v42);
    uint64_t v35 = 0;
  }
LABEL_10:
  uint64_t v57 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v39, v35, 1, v42);
  if (!v34)
  {
    id v58 = v44;
    [v58 coordinate];
    [v58 horizontalAccuracy];
    char v59 = v92;
    MapCircle.init(center:radius:)();
    static Color.purple.getter();
    uint64_t v60 = v39;
    uint64_t v61 = Color.opacity(_:)();
    swift_release();
    uint64_t v113 = v61;
    uint64_t v62 = v93;
    uint64_t v63 = v95;
    MapContent.foregroundStyle<A>(_:)();
    uint64_t v39 = v60;
    uint64_t v64 = v111;
    uint64_t v65 = v105;
    swift_release();
    v91(v59, v63);
    uint64_t v113 = static Color.purple.getter();
    uint64_t v66 = v106;
    MapContent.stroke<A>(_:lineWidth:)();
    swift_release();

    v89(v62, v66);
    v87(v107, v65, v64);
    uint64_t v57 = 0;
  }
  uint64_t v67 = v109;
  uint64_t v68 = (uint64_t)v107;
  uint64_t v69 = v111;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v109 + 56))(v107, v57, 1, v111);
  unint64_t v70 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  int v71 = v105;
  uint64_t v72 = v110;
  v70(v105, v110, v69);
  uint64_t v73 = v100;
  sub_10000FB74(v39, v100, &qword_100520108);
  uint64_t v74 = v102;
  sub_10000FB74(v68, v102, &qword_1005200F0);
  uint64_t v75 = v101;
  v70(v101, v71, v69);
  uint64_t v76 = sub_10000F214(&qword_100520118);
  sub_10000FB74(v73, (uint64_t)&v75[*(int *)(v76 + 48)], &qword_100520108);
  sub_10000FB74(v74, (uint64_t)&v75[*(int *)(v76 + 64)], &qword_1005200F0);

  sub_10000FBD8(v68, &qword_1005200F0);
  sub_10000FBD8(v108, &qword_100520108);
  uint64_t v77 = *(void (**)(char *, uint64_t))(v67 + 8);
  v77(v72, v69);
  sub_10000FBD8(v74, &qword_1005200F0);
  sub_10000FBD8(v73, &qword_100520108);
  return ((uint64_t (*)(char *, uint64_t))v77)(v71, v69);
}

uint64_t sub_100115AF0@<X0>(char *a1@<X8>)
{
  return sub_100114FCC(*(void **)v1, *(void **)(v1 + 8), *(double *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), a1);
}

uint64_t sub_100115B04()
{
  return static MapContent._mapContentCount(inputs:)();
}

void sub_100115B24(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    sub_100040974(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_70;
    }
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v4 = *(id *)(a1 + 8 * i + 32);
      }
      char v5 = v4;
      [v4 coordinate];
      uint64_t v7 = v6;

      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      unint64_t v10 = v9 + 1;
      if (v9 >= v8 >> 1) {
        sub_100040974(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v10;
      _swiftEmptyArrayStorage[v9 + 4] = v7;
    }
  }
  else
  {
    unint64_t v10 = _swiftEmptyArrayStorage[2];
    if (!v10)
    {
      swift_bridgeObjectRelease();
      double v12 = INFINITY;
      goto LABEL_29;
    }
  }
  uint64_t v11 = 0;
  double v12 = INFINITY;
  do
  {
    uint64_t v13 = (double *)&_swiftEmptyArrayStorage[v11];
    if (v13[4] < v12) {
      double v12 = v13[4];
    }
    ++v11;
  }
  while (v10 != v11);
  swift_bridgeObjectRelease();
  if (v2)
  {
    sub_100040974(0, v2 & ~(v2 >> 63), 0);
    if ((v2 & 0x8000000000000000) == 0)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v15 = *(id *)(a1 + 8 * j + 32);
        }
        uint64_t v16 = v15;
        [v15 coordinate];
        uint64_t v18 = v17;

        unint64_t v20 = _swiftEmptyArrayStorage[2];
        unint64_t v19 = _swiftEmptyArrayStorage[3];
        unint64_t v21 = v20 + 1;
        if (v20 >= v19 >> 1) {
          sub_100040974(v19 > 1, v20 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v21;
        _swiftEmptyArrayStorage[v20 + 4] = v18;
      }
      goto LABEL_30;
    }
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
LABEL_29:
  unint64_t v21 = _swiftEmptyArrayStorage[2];
  if (!v21)
  {
    swift_bridgeObjectRelease();
    double v23 = INFINITY;
    goto LABEL_45;
  }
LABEL_30:
  uint64_t v22 = 0;
  double v23 = INFINITY;
  do
  {
    id v24 = (double *)&_swiftEmptyArrayStorage[v22];
    if (v24[4] < v23) {
      double v23 = v24[4];
    }
    ++v22;
  }
  while (v21 != v22);
  swift_bridgeObjectRelease();
  if (v2)
  {
    sub_100040974(0, v2 & ~(v2 >> 63), 0);
    if ((v2 & 0x8000000000000000) == 0)
    {
      for (uint64_t k = 0; k != v2; ++k)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v26 = *(id *)(a1 + 8 * k + 32);
        }
        uint64_t v27 = v26;
        [v26 coordinate];
        uint64_t v29 = v28;

        unint64_t v31 = _swiftEmptyArrayStorage[2];
        unint64_t v30 = _swiftEmptyArrayStorage[3];
        unint64_t v32 = v31 + 1;
        if (v31 >= v30 >> 1) {
          sub_100040974(v30 > 1, v31 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v32;
        _swiftEmptyArrayStorage[v31 + 4] = v29;
      }
      goto LABEL_46;
    }
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
LABEL_45:
  unint64_t v32 = _swiftEmptyArrayStorage[2];
  if (!v32)
  {
    swift_bridgeObjectRelease();
    double v34 = -INFINITY;
    goto LABEL_61;
  }
LABEL_46:
  uint64_t v33 = 0;
  double v34 = -INFINITY;
  do
  {
    uint64_t v35 = (double *)&_swiftEmptyArrayStorage[v33];
    if (v34 <= v35[4]) {
      double v34 = v35[4];
    }
    ++v33;
  }
  while (v32 != v33);
  swift_bridgeObjectRelease();
  if (!v2)
  {
LABEL_61:
    unint64_t v43 = _swiftEmptyArrayStorage[2];
    if (!v43)
    {
      double v45 = -INFINITY;
LABEL_66:
      swift_bridgeObjectRelease();
      id v47 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v12 longitude:v23];
      id v48 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v34 longitude:v45];
      [v47 distanceFromLocation:v48];

      v49.latitude = (v12 + v34) * 0.5;
      v49.longitude = (v23 + v45) * 0.5;
      MKMapPointForCoordinate(v49);
      return;
    }
LABEL_62:
    uint64_t v44 = 0;
    double v45 = -INFINITY;
    do
    {
      uint64_t v46 = (double *)&_swiftEmptyArrayStorage[v44];
      if (v45 <= v46[4]) {
        double v45 = v46[4];
      }
      ++v44;
    }
    while (v43 != v44);
    goto LABEL_66;
  }
  sub_100040974(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    for (uint64_t m = 0; m != v2; ++m)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v37 = *(id *)(a1 + 8 * m + 32);
      }
      uint64_t v38 = v37;
      [v37 coordinate];
      uint64_t v40 = v39;

      unint64_t v42 = _swiftEmptyArrayStorage[2];
      unint64_t v41 = _swiftEmptyArrayStorage[3];
      unint64_t v43 = v42 + 1;
      if (v42 >= v41 >> 1) {
        sub_100040974(v41 > 1, v42 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v43;
      _swiftEmptyArrayStorage[v42 + 4] = v40;
    }
    goto LABEL_62;
  }
LABEL_72:
  __break(1u);
}

uint64_t sub_100116054@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X6>, void *a7@<X7>, uint64_t a8@<X8>, uint64_t a9, unsigned __int8 a10)
{
  char v12 = a5;
  int v27 = a5;
  uint64_t v30 = a4;
  uint64_t v31 = a1;
  uint64_t v32 = a8;
  uint64_t v29 = a9;
  int v28 = a10;
  uint64_t v15 = type metadata accessor for MapInteractionModes();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = sub_10000F214(&qword_100522C20);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100521040);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100444D30;
  if (v12) {
    unint64_t v20 = a2;
  }
  else {
    unint64_t v20 = a3;
  }
  if (a10) {
    unint64_t v21 = a6;
  }
  else {
    unint64_t v21 = a7;
  }
  *(void *)(inited + 32) = v20;
  *(void *)(inited + 40) = v21;
  unint64_t v42 = inited;
  specialized Array._endMutation()();
  unint64_t v22 = v42;
  id v23 = v20;
  id v24 = v21;
  sub_100115B24(v22);
  MapCameraBounds.init(centerCoordinateBounds:minimumDistance:maximumDistance:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = type metadata accessor for MapCameraBounds();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v18, 0, 1, v25);
  uint64_t v33 = a2;
  double v34 = a3;
  uint64_t v35 = v30;
  char v36 = v27;
  id v37 = a6;
  uint64_t v38 = a7;
  uint64_t v39 = v29;
  char v40 = v28;
  uint64_t v41 = v31;
  static MapInteractionModes.all.getter();
  sub_10000F214(&qword_1005202A0);
  sub_100013AA8(&qword_1005202A8, &qword_1005202A0);
  return Map.init<A>(bounds:interactionModes:scope:content:)();
}

void sub_1001162EC(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, id a5@<X4>, void *a6@<X5>, int a7@<W7>, void *a8@<X8>, void *a9)
{
  LODWORD(v134) = a7;
  id v138 = a6;
  uint64_t v120 = a8;
  uint64_t v116 = a9;
  LODWORD(v111) = a4;
  uint64_t v125 = type metadata accessor for MapCircle();
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v118 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  long long v107 = (char *)&v106 - v16;
  uint64_t v17 = sub_10000F214(&qword_100520110);
  uint64_t v126 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v119 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v108 = (char *)&v106 - v20;
  uint64_t v132 = sub_10000F214(&qword_100522C90);
  uint64_t v135 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v117 = (char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v129 = (char *)&v106 - v23;
  __chkstk_darwin(v24);
  uint64_t v109 = (char *)&v106 - v25;
  __chkstk_darwin(v26);
  os_log_type_t v136 = (char *)&v106 - v27;
  uint64_t v28 = sub_10000F214(&qword_1005202B0);
  __chkstk_darwin(v28 - 8);
  uint64_t v133 = (char *)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v106 - v31;
  uint64_t v33 = sub_10000F214(&qword_1005202B8);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v115 = (char *)&v106 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v137 = (char *)&v106 - v37;
  __chkstk_darwin(v38);
  uint64_t v139 = (char *)&v106 - v39;
  __chkstk_darwin(v40);
  uint64_t v140 = (char *)&v106 - v41;
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v106 - v43;
  __chkstk_darwin(v45);
  id v48 = (char *)&v106 - v47;
  strcpy((char *)v142, "Self (CL)");
  WORD1(v142[1]) = 0;
  HIDWORD(v142[1]) = -385875968;
  if (!(_BYTE)v134) {
    a5 = v138;
  }
  id v138 = a1;
  CLLocationCoordinate2D v49 = a1;
  uint64_t v50 = v46;
  uint64_t v134 = a2;
  uint64_t v121 = a3;
  int v130 = a4;
  sub_1000506C4(v49, a2, a3, a4);
  [a5 coordinate];
  static UnitPoint.center.getter();
  uint64_t v51 = sub_10000F214((uint64_t *)&unk_10051E360);
  uint64_t v52 = sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
  unint64_t v123 = sub_1000317A0();
  Annotation.init<A>(_:coordinate:anchor:content:)();
  uint64_t v127 = v34;
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  uint64_t v128 = v48;
  uint64_t v122 = v50;
  uint64_t v114 = v34 + 32;
  uint64_t v113 = v53;
  v53(v48, v44, v50);
  uint64_t v112 = v17;
  uint64_t v110 = v52;
  uint64_t v131 = v32;
  if (v111)
  {
    uint64_t v54 = sub_10000F214(&qword_1005202C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v32, 1, 1, v54);
    id v55 = v138;
  }
  else
  {
    id v56 = v138;
    strcpy((char *)v142, "Self (ARCam)");
    BYTE5(v142[1]) = 0;
    HIWORD(v142[1]) = -5120;
    id v57 = v56;
    id v106 = v56;
    [v56 coordinate];
    static UnitPoint.center.getter();
    Annotation.init<A>(_:coordinate:anchor:content:)();
    [v57 coordinate];
    [v57 horizontalAccuracy];
    id v58 = v107;
    MapCircle.init(center:radius:)();
    static Color.green.getter();
    uint64_t v59 = Color.opacity(_:)();
    swift_release();
    v142[0] = v59;
    uint64_t v60 = v108;
    uint64_t v61 = v125;
    MapContent.foregroundStyle<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v58, v61);
    uint64_t v141 = static Color.green.getter();
    v142[0] = v61;
    v142[1] = (uint64_t)&type metadata for Color;
    unint64_t v143 = &protocol witness table for MapCircle;
    unint64_t v144 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2();
    uint64_t v111 = v51;
    uint64_t v62 = v109;
    MapContent.stroke<A>(_:lineWidth:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v126 + 8))(v60, v17);
    uint64_t v63 = v135;
    uint64_t v64 = v136;
    uint64_t v65 = v132;
    (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v136, v62, v132);
    uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
    uint64_t v67 = v139;
    uint64_t v68 = v122;
    v66(v139, v140, v122);
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
    v69(v62, v64, v65);
    uint64_t v70 = v68;
    uint64_t v71 = (uint64_t)v133;
    v66(v133, v67, v70);
    uint64_t v72 = sub_10000F214(&qword_1005202D0);
    v69((char *)(v71 + *(int *)(v72 + 48)), v62, v65);

    uint64_t v73 = *(void (**)(char *, uint64_t))(v63 + 8);
    v73(v136, v65);
    uint64_t v74 = *(void (**)(char *, uint64_t))(v127 + 8);
    v74(v140, v70);
    v73(v62, v65);
    v74(v67, v70);
    uint64_t v75 = sub_10000F214(&qword_1005202C0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v71, 0, 1, v75);
    sub_10000FC34(v71, (uint64_t)v131, &qword_1005202B0);
    id v55 = v134;
  }
  uint64_t v76 = v116;
  sub_1003FEC34(v142);
  uint64_t v77 = v144;
  uint64_t v78 = v145;
  sub_10000F3B0(v142, (uint64_t)v144);
  uint64_t v79 = (*(uint64_t (**)(void *, uint64_t))(v78 + 72))(v77, v78);
  uint64_t v81 = v80;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v142);
  v142[0] = v79;
  v142[1] = v81;
  __chkstk_darwin([v55 coordinate]);
  *(&v106 - 2) = v76;
  static UnitPoint.center.getter();
  uint64_t v82 = v115;
  Annotation.init<A>(_:coordinate:anchor:content:)();
  uint64_t v83 = v122;
  v113(v137, v82, v122);
  [v55 coordinate];
  [v55 horizontalAccuracy];
  uint64_t v84 = v118;
  MapCircle.init(center:radius:)();
  static Color.red.getter();
  uint64_t v85 = Color.opacity(_:)();
  swift_release();
  v142[0] = v85;
  uint64_t v86 = v119;
  uint64_t v87 = v125;
  MapContent.foregroundStyle<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v124 + 8))(v84, v87);
  uint64_t v141 = static Color.red.getter();
  v142[0] = v87;
  v142[1] = (uint64_t)&type metadata for Color;
  unint64_t v143 = &protocol witness table for MapCircle;
  unint64_t v144 = &protocol witness table for Color;
  swift_getOpaqueTypeConformance2();
  uint64_t v88 = v117;
  uint64_t v89 = v112;
  MapContent.stroke<A>(_:lineWidth:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v126 + 8))(v86, v89);
  uint64_t v90 = v135;
  uint64_t v91 = v129;
  uint64_t v92 = v132;
  (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v129, v88, v132);
  uint64_t v93 = v127;
  uint64_t v94 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
  v94(v140, v128, v83);
  uint64_t v95 = (uint64_t)v133;
  sub_10000FB74((uint64_t)v131, (uint64_t)v133, &qword_1005202B0);
  v94(v139, v137, v83);
  uint64_t v126 = *(void *)(v90 + 16);
  uint64_t v96 = v136;
  ((void (*)(char *, char *, uint64_t))v126)(v136, v91, v92);
  uint64_t v97 = v120;
  uint64_t v98 = v134;
  *uint64_t v120 = v138;
  v97[1] = v98;
  uint64_t v99 = v121;
  v97[2] = v121;
  *((unsigned char *)v97 + 24) = v130;
  uint64_t v100 = (int *)sub_10000F214(&qword_1005202C8);
  v94((char *)v97 + v100[12], v140, v83);
  sub_10000FB74(v95, (uint64_t)v97 + v100[16], &qword_1005202B0);
  v94((char *)v97 + v100[20], v139, v83);
  uint64_t v101 = v132;
  ((void (*)(char *, char *, uint64_t))v126)((char *)v97 + v100[24], v96, v132);
  id v102 = v138;
  int v103 = v134;
  LOBYTE(v96) = v130;
  sub_1000506C4(v138, v134, v99, v130);
  sub_1000506C4(v102, v103, v99, v96);
  long long v104 = *(void (**)(char *, uint64_t))(v135 + 8);
  v104(v129, v101);
  long long v105 = *(void (**)(char *, uint64_t))(v93 + 8);
  v105(v137, v83);
  sub_10000FBD8((uint64_t)v131, &qword_1005202B0);
  v105(v128, v83);
  sub_10004FFD4(v102, v103, v99, v96);
  v104(v136, v101);
  v105(v139, v83);
  sub_10000FBD8((uint64_t)v133, &qword_1005202B0);
  v105(v140, v83);
  sub_10004FFD4(v102, v103, v99, v96);
}

uint64_t sub_1001171C4()
{
  return sub_100117200();
}

uint64_t sub_1001171E0()
{
  return sub_100117200();
}

uint64_t sub_100117200()
{
  LocalizedStringKey.init(stringLiteral:)();

  return Label<>.init(_:systemImage:)();
}

uint64_t sub_100117258()
{
  sub_1003FEC34(v6);
  uint64_t v0 = v7;
  uint64_t v1 = v8;
  sub_10000F3B0(v6, v7);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(v0, v1);
  uint64_t v4 = v3;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v6);
  v6[0] = v2;
  v6[1] = v4;
  sub_10015F890();
  sub_1000317A0();
  return Label<>.init<A>(_:systemImage:)();
}

uint64_t sub_100117318@<X0>(uint64_t a1@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v2 = sub_10000F214(&qword_100520278);
  uint64_t v68 = *(void *)(v2 - 8);
  uint64_t v69 = v2;
  __chkstk_darwin(v2);
  uint64_t v67 = (uint64_t)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000F214(&qword_100520280);
  __chkstk_darwin(v73);
  char v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v70 = (uint64_t)&v60 - v7;
  uint64_t v71 = sub_10000F214(&qword_100520288);
  __chkstk_darwin(v71);
  unint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v72 = sub_10000F214(&qword_100522BA0);
  uint64_t v11 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CVDetection();
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v60 - v18;
  uint64_t State = type metadata accessor for GeoLocateState(0);
  __chkstk_darwin(State);
  uint64_t v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10011CDA8(v1, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = sub_10000F214(&qword_100520120);
    uint64_t v24 = &v22[*(int *)(v23 + 48)];
    uint64_t v25 = (void *)*((void *)v24 + 1);
    uint64_t v66 = *(void **)v24;
    uint64_t v26 = v66;
    uint64_t v65 = v25;
    uint64_t v60 = v1;
    uint64_t v27 = *((void *)v24 + 2);
    uint64_t v28 = &v22[*(int *)(v23 + 64)];
    uint64_t v61 = v5;
    uint64_t v62 = v9;
    uint64_t v29 = *(void **)v28;
    uint64_t v30 = (void *)*((void *)v28 + 1);
    uint64_t v63 = *((void *)v28 + 2);
    uint64_t v31 = v63;
    int v32 = v24[24];
    unsigned __int8 v33 = v28[24];
    int v64 = v33;
    sub_10006426C((uint64_t)v22, (uint64_t)v16);
    unsigned __int8 v59 = v33;
    uint64_t v58 = v31;
    uint64_t v34 = v67;
    uint64_t v35 = v25;
    uint64_t v36 = v27;
    uint64_t v37 = v29;
    uint64_t v38 = v29;
    uint64_t v39 = v30;
    sub_100116054((uint64_t)v16, v26, v35, v27, v32, v37, v30, v67, v58, v59);
    static Alignment.center.getter();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    uint64_t v41 = v68;
    uint64_t v40 = v69;
    uint64_t v42 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v61, v34, v69);
    uint64_t v43 = (_OWORD *)(v42 + *(int *)(v73 + 36));
    long long v44 = v80;
    v43[4] = v79;
    v43[5] = v44;
    v43[6] = v81;
    long long v45 = v76;
    *uint64_t v43 = v75;
    v43[1] = v45;
    long long v46 = v78;
    v43[2] = v77;
    v43[3] = v46;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v34, v40);
    uint64_t v47 = v70;
    sub_10000FC34(v42, v70, &qword_100520280);
    sub_10000FB74(v47, (uint64_t)v62, &qword_100520280);
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_100522BC0, &qword_100522BA0);
    sub_100121AAC();
    _ConditionalContent<>.init(storage:)();
    sub_10004FFD4(v38, v39, v63, v64);
    sub_10004FFD4(v66, v65, v36, v32);
    sub_10000FBD8(v47, &qword_100520280);
    uint64_t v19 = v16;
  }
  else
  {
    sub_10006426C((uint64_t)v22, (uint64_t)v19);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v48._uint64_t countAndFlagsBits = 0x697A696C61636F4CLL;
    v48._object = (void *)0xEB0000000020676ELL;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v48);
    sub_1003FEC34((uint64_t *)&v75);
    uint64_t v49 = *((void *)&v76 + 1);
    uint64_t v50 = v77;
    sub_10000F3B0(&v75, *((uint64_t *)&v76 + 1));
    uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 72))(v49, v50);
    uint64_t v53 = v52;
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v75);
    v54._uint64_t countAndFlagsBits = v51;
    v54._object = v53;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v54);
    swift_bridgeObjectRelease();
    v55._uint64_t countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v55);
    LocalizedStringKey.init(stringInterpolation:)();
    ProgressView<>.init<>(_:)();
    uint64_t v56 = v72;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v13, v72);
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_100522BC0, &qword_100522BA0);
    sub_100121AAC();
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v56);
  }
  return sub_10011CE0C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

void *sub_100117A1C(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for CVDetection();
    int v7 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      switch(v7)
      {
        case 1:
          uint64_t v33 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
          uint64_t v34 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)((char *)a1 + v34[5]) = *(_DWORD *)((char *)a2 + v34[5]);
          uint64_t v35 = v34[6];
          uint64_t v36 = (_OWORD *)((char *)a1 + v35);
          uint64_t v37 = (_OWORD *)((char *)a2 + v35);
          long long v38 = v37[3];
          v36[2] = v37[2];
          v36[3] = v38;
          long long v39 = v37[1];
          *uint64_t v36 = *v37;
          v36[1] = v39;
          *(void *)((char *)a1 + v34[7]) = *(void *)((char *)a2 + v34[7]);
          *(void *)((char *)a1 + v34[8]) = *(void *)((char *)a2 + v34[8]);
          *(void *)((char *)a1 + v34[9]) = *(void *)((char *)a2 + v34[9]);
          *((unsigned char *)a1 + v34[10]) = *((unsigned char *)a2 + v34[10]);
          uint64_t v40 = v34[11];
          uint64_t v41 = (void *)((char *)a1 + v40);
          uint64_t v42 = (void *)((char *)a2 + v40);
          uint64_t v43 = v42[1];
          *uint64_t v41 = *v42;
          v41[1] = v43;
          uint64_t v44 = v34[12];
          long long v45 = (void *)((char *)a1 + v44);
          long long v46 = (void *)((char *)a2 + v44);
          uint64_t v47 = v46[1];
          *long long v45 = *v46;
          v45[1] = v47;
          uint64_t v48 = v34[13];
          __dst = (char *)a1 + v48;
          uint64_t v186 = (char *)a2 + v48;
          uint64_t v49 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v50 = *(void *)(v49 - 8);
          uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v51(v186, 1, v49))
          {
            uint64_t v52 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v186, *(void *)(*(void *)(v52 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v50 + 16))(__dst, v186, v49);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v49);
          }
          uint64_t v151 = v34[14];
          uint64_t v152 = (char *)a1 + v151;
          uint64_t v153 = (char *)a2 + v151;
          unint64_t v154 = *((void *)v153 + 1);
          if (v154 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
          }
          else
          {
            uint64_t v155 = *(void *)v153;
            sub_100038528(*(void *)v153, *((void *)v153 + 1));
            *(void *)uint64_t v152 = v155;
            *((void *)v152 + 1) = v154;
          }
          uint64_t v156 = v34[15];
          int v157 = (void *)((char *)a1 + v156);
          char v158 = (void *)((char *)a2 + v156);
          if (*v158)
          {
            uint64_t v159 = v158[1];
            uint64_t v160 = v158[2];
            *int v157 = *v158;
            v157[1] = v159;
            v157[2] = v160;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)int v157 = *(_OWORD *)v158;
            v157[2] = v158[2];
          }
          break;
        case 2:
          uint64_t v53 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v53 - 8) + 16))(a1, a2, v53);
          Swift::String v54 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v54[5]) = *(_DWORD *)((char *)a2 + v54[5]);
          uint64_t v55 = v54[6];
          uint64_t v56 = (_OWORD *)((char *)a1 + v55);
          id v57 = (_OWORD *)((char *)a2 + v55);
          long long v58 = v57[3];
          v56[2] = v57[2];
          v56[3] = v58;
          long long v59 = v57[1];
          _OWORD *v56 = *v57;
          v56[1] = v59;
          uint64_t v60 = v54[7];
          uint64_t v61 = (void *)((char *)a1 + v60);
          uint64_t v62 = (void *)((char *)a2 + v60);
          uint64_t v64 = *v62;
          uint64_t v63 = v62[1];
          *uint64_t v61 = v64;
          v61[1] = v63;
          *(void *)((char *)a1 + v54[8]) = *(void *)((char *)a2 + v54[8]);
          *(void *)((char *)a1 + v54[9]) = *(void *)((char *)a2 + v54[9]);
          *(void *)((char *)a1 + v54[10]) = *(void *)((char *)a2 + v54[10]);
          *(void *)((char *)a1 + v54[11]) = *(void *)((char *)a2 + v54[11]);
          *(void *)((char *)a1 + v54[12]) = *(void *)((char *)a2 + v54[12]);
          uint64_t v65 = v54[13];
          uint64_t v66 = *(void **)((char *)a2 + v65);
          *(void *)((char *)a1 + v65) = v66;
          *((unsigned char *)a1 + v54[14]) = *((unsigned char *)a2 + v54[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v67 = v66;
          break;
        case 3:
        case 4:
          uint64_t v68 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v68 - 8) + 16))(a1, a2, v68);
          uint64_t v69 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)((char *)a1 + v69[5]) = *(_DWORD *)((char *)a2 + v69[5]);
          uint64_t v70 = v69[6];
          uint64_t v71 = (_OWORD *)((char *)a1 + v70);
          uint64_t v72 = (_OWORD *)((char *)a2 + v70);
          long long v73 = v72[3];
          v71[2] = v72[2];
          void v71[3] = v73;
          long long v74 = v72[1];
          _OWORD *v71 = *v72;
          v71[1] = v74;
          uint64_t v75 = v69[7];
          long long v76 = (void *)((char *)a1 + v75);
          long long v77 = (void *)((char *)a2 + v75);
          uint64_t v79 = *v77;
          uint64_t v78 = v77[1];
          void *v76 = v79;
          v76[1] = v78;
          *(void *)((char *)a1 + v69[8]) = *(void *)((char *)a2 + v69[8]);
          *(void *)((char *)a1 + v69[9]) = *(void *)((char *)a2 + v69[9]);
          *(void *)((char *)a1 + v69[10]) = *(void *)((char *)a2 + v69[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5:
          uint64_t v80 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v80 - 8) + 16))(a1, a2, v80);
          long long v81 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v81[5]) = *(_DWORD *)((char *)a2 + v81[5]);
          uint64_t v82 = v81[6];
          uint64_t v83 = (_OWORD *)((char *)a1 + v82);
          uint64_t v84 = (_OWORD *)((char *)a2 + v82);
          long long v85 = v84[3];
          v83[2] = v84[2];
          v83[3] = v85;
          long long v86 = v84[1];
          *uint64_t v83 = *v84;
          v83[1] = v86;
          uint64_t v87 = v81[7];
          uint64_t v88 = (void *)((char *)a1 + v87);
          uint64_t v89 = (void *)((char *)a2 + v87);
          uint64_t v91 = *v89;
          uint64_t v90 = v89[1];
          *uint64_t v88 = v91;
          v88[1] = v90;
          *(void *)((char *)a1 + v81[8]) = *(void *)((char *)a2 + v81[8]);
          *(void *)((char *)a1 + v81[9]) = *(void *)((char *)a2 + v81[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v8 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
          unint64_t v9 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)((char *)a1 + v9[5]) = *(_DWORD *)((char *)a2 + v9[5]);
          uint64_t v10 = v9[6];
          uint64_t v11 = (_OWORD *)((char *)a1 + v10);
          uint64_t v12 = (_OWORD *)((char *)a2 + v10);
          long long v13 = v12[3];
          v11[2] = v12[2];
          v11[3] = v13;
          long long v14 = v12[1];
          *uint64_t v11 = *v12;
          v11[1] = v14;
          uint64_t v15 = v9[7];
          uint64_t v16 = (void *)((char *)a1 + v15);
          uint64_t v17 = (void *)((char *)a2 + v15);
          uint64_t v19 = *v17;
          uint64_t v18 = v17[1];
          *uint64_t v16 = v19;
          v16[1] = v18;
          *(void *)((char *)a1 + v9[8]) = *(void *)((char *)a2 + v9[8]);
          *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v171 = sub_10000F214(&qword_100520120);
      uint64_t v172 = *(int *)(v171 + 48);
      long long v173 = (char *)a1 + v172;
      long long v174 = (char *)a2 + v172;
      id v175 = *(id *)v174;
      long long v176 = (void *)*((void *)v174 + 1);
      uint64_t v177 = *((void *)v174 + 2);
      unsigned __int8 v178 = v174[24];
      sub_1000506C4(*(id *)v174, v176, v177, v178);
      *(void *)long long v173 = v175;
      *((void *)v173 + 1) = v176;
      *((void *)v173 + 2) = v177;
      v173[24] = v178;
      uint64_t v179 = *(int *)(v171 + 64);
      unint64_t v180 = (char *)a1 + v179;
      long long v181 = (char *)a2 + v179;
      id v182 = *(id *)v181;
      char v183 = (void *)*((void *)v181 + 1);
      uint64_t v184 = *((void *)v181 + 2);
      LOBYTE(v176) = v181[24];
      sub_1000506C4(*(id *)v181, v183, v184, v176);
      *(void *)unint64_t v180 = v182;
      *((void *)v180 + 1) = v183;
      *((void *)v180 + 2) = v184;
      v180[24] = (char)v176;
    }
    else
    {
      switch(v7)
      {
        case 1:
          uint64_t v92 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v92 - 8) + 16))(a1, a2, v92);
          uint64_t v93 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)((char *)a1 + v93[5]) = *(_DWORD *)((char *)a2 + v93[5]);
          uint64_t v94 = v93[6];
          uint64_t v95 = (_OWORD *)((char *)a1 + v94);
          uint64_t v96 = (_OWORD *)((char *)a2 + v94);
          long long v97 = v96[3];
          void v95[2] = v96[2];
          v95[3] = v97;
          long long v98 = v96[1];
          _OWORD *v95 = *v96;
          v95[1] = v98;
          *(void *)((char *)a1 + v93[7]) = *(void *)((char *)a2 + v93[7]);
          *(void *)((char *)a1 + v93[8]) = *(void *)((char *)a2 + v93[8]);
          *(void *)((char *)a1 + v93[9]) = *(void *)((char *)a2 + v93[9]);
          *((unsigned char *)a1 + v93[10]) = *((unsigned char *)a2 + v93[10]);
          uint64_t v99 = v93[11];
          uint64_t v100 = (void *)((char *)a1 + v99);
          uint64_t v101 = (void *)((char *)a2 + v99);
          uint64_t v102 = v101[1];
          *uint64_t v100 = *v101;
          v100[1] = v102;
          uint64_t v103 = v93[12];
          long long v104 = (void *)((char *)a1 + v103);
          long long v105 = (void *)((char *)a2 + v103);
          uint64_t v106 = v105[1];
          *long long v104 = *v105;
          v104[1] = v106;
          uint64_t v107 = v93[13];
          __dsta = (char *)a1 + v107;
          unint64_t v187 = (char *)a2 + v107;
          uint64_t v108 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v109 = *(void *)(v108 - 8);
          uint64_t v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v110(v187, 1, v108))
          {
            uint64_t v111 = sub_10000F214(&qword_100524BD0);
            memcpy(__dsta, v187, *(void *)(*(void *)(v111 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v109 + 16))(__dsta, v187, v108);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(__dsta, 0, 1, v108);
          }
          uint64_t v161 = v93[14];
          int v162 = (char *)a1 + v161;
          long long v163 = (char *)a2 + v161;
          unint64_t v164 = *((void *)v163 + 1);
          if (v164 >> 60 == 15)
          {
            *(_OWORD *)int v162 = *(_OWORD *)v163;
          }
          else
          {
            uint64_t v165 = *(void *)v163;
            sub_100038528(*(void *)v163, *((void *)v163 + 1));
            *(void *)int v162 = v165;
            *((void *)v162 + 1) = v164;
          }
          uint64_t v166 = v93[15];
          long long v167 = (void *)((char *)a1 + v166);
          long long v168 = (void *)((char *)a2 + v166);
          if (*v168)
          {
            uint64_t v169 = v168[1];
            uint64_t v170 = v168[2];
            *long long v167 = *v168;
            v167[1] = v169;
            v167[2] = v170;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)long long v167 = *(_OWORD *)v168;
            v167[2] = v168[2];
          }
          break;
        case 2:
          uint64_t v112 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v112 - 8) + 16))(a1, a2, v112);
          uint64_t v113 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v113[5]) = *(_DWORD *)((char *)a2 + v113[5]);
          uint64_t v114 = v113[6];
          uint64_t v115 = (_OWORD *)((char *)a1 + v114);
          uint64_t v116 = (_OWORD *)((char *)a2 + v114);
          long long v117 = v116[3];
          v115[2] = v116[2];
          void v115[3] = v117;
          long long v118 = v116[1];
          *uint64_t v115 = *v116;
          v115[1] = v118;
          uint64_t v119 = v113[7];
          uint64_t v120 = (void *)((char *)a1 + v119);
          uint64_t v121 = (void *)((char *)a2 + v119);
          uint64_t v123 = *v121;
          uint64_t v122 = v121[1];
          *uint64_t v120 = v123;
          v120[1] = v122;
          *(void *)((char *)a1 + v113[8]) = *(void *)((char *)a2 + v113[8]);
          *(void *)((char *)a1 + v113[9]) = *(void *)((char *)a2 + v113[9]);
          *(void *)((char *)a1 + v113[10]) = *(void *)((char *)a2 + v113[10]);
          *(void *)((char *)a1 + v113[11]) = *(void *)((char *)a2 + v113[11]);
          *(void *)((char *)a1 + v113[12]) = *(void *)((char *)a2 + v113[12]);
          uint64_t v124 = v113[13];
          uint64_t v125 = *(void **)((char *)a2 + v124);
          *(void *)((char *)a1 + v124) = v125;
          *((unsigned char *)a1 + v113[14]) = *((unsigned char *)a2 + v113[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v126 = v125;
          break;
        case 3:
        case 4:
          uint64_t v127 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v127 - 8) + 16))(a1, a2, v127);
          uint64_t v128 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)((char *)a1 + v128[5]) = *(_DWORD *)((char *)a2 + v128[5]);
          uint64_t v129 = v128[6];
          int v130 = (_OWORD *)((char *)a1 + v129);
          uint64_t v131 = (_OWORD *)((char *)a2 + v129);
          long long v132 = v131[3];
          void v130[2] = v131[2];
          v130[3] = v132;
          long long v133 = v131[1];
          *int v130 = *v131;
          v130[1] = v133;
          uint64_t v134 = v128[7];
          uint64_t v135 = (void *)((char *)a1 + v134);
          os_log_type_t v136 = (void *)((char *)a2 + v134);
          uint64_t v138 = *v136;
          uint64_t v137 = v136[1];
          void *v135 = v138;
          v135[1] = v137;
          *(void *)((char *)a1 + v128[8]) = *(void *)((char *)a2 + v128[8]);
          *(void *)((char *)a1 + v128[9]) = *(void *)((char *)a2 + v128[9]);
          *(void *)((char *)a1 + v128[10]) = *(void *)((char *)a2 + v128[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5:
          uint64_t v139 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v139 - 8) + 16))(a1, a2, v139);
          uint64_t v140 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v140[5]) = *(_DWORD *)((char *)a2 + v140[5]);
          uint64_t v141 = v140[6];
          uint64_t v142 = (_OWORD *)((char *)a1 + v141);
          unint64_t v143 = (_OWORD *)((char *)a2 + v141);
          long long v144 = v143[3];
          uint64_t v142[2] = v143[2];
          v142[3] = v144;
          long long v145 = v143[1];
          _OWORD *v142 = *v143;
          v142[1] = v145;
          uint64_t v146 = v140[7];
          uint64_t v147 = (void *)((char *)a1 + v146);
          uint64_t v148 = (void *)((char *)a2 + v146);
          uint64_t v150 = *v148;
          uint64_t v149 = v148[1];
          *uint64_t v147 = v150;
          v147[1] = v149;
          *(void *)((char *)a1 + v140[8]) = *(void *)((char *)a2 + v140[8]);
          *(void *)((char *)a1 + v140[9]) = *(void *)((char *)a2 + v140[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
          uint64_t v22 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)((char *)a1 + v22[5]) = *(_DWORD *)((char *)a2 + v22[5]);
          uint64_t v23 = v22[6];
          uint64_t v24 = (_OWORD *)((char *)a1 + v23);
          uint64_t v25 = (_OWORD *)((char *)a2 + v23);
          long long v26 = v25[3];
          v24[2] = v25[2];
          v24[3] = v26;
          long long v27 = v25[1];
          *uint64_t v24 = *v25;
          v24[1] = v27;
          uint64_t v28 = v22[7];
          uint64_t v29 = (void *)((char *)a1 + v28);
          uint64_t v30 = (void *)((char *)a2 + v28);
          uint64_t v32 = *v30;
          uint64_t v31 = v30[1];
          *uint64_t v29 = v32;
          v29[1] = v31;
          *(void *)((char *)a1 + v22[8]) = *(void *)((char *)a2 + v22[8]);
          *(void *)((char *)a1 + v22[9]) = *(void *)((char *)a2 + v22[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_1001188B8(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for CVDetection();
  int v3 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch(v3)
    {
      case 0:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_15;
      case 1:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
        uint64_t v8 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = a1 + v8[13];
        uint64_t v10 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v11 = *(void *)(v10 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
        }
        uint64_t v12 = (uint64_t *)(a1 + v8[14]);
        unint64_t v13 = v12[1];
        if (v13 >> 60 != 15) {
          sub_100038B34(*v12, v13);
        }
        if (*(void *)(a1 + v8[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2:
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
        uint64_t v15 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3:
      case 4:
        uint64_t v4 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5:
        uint64_t v16 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_15:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v17 = sub_10000F214(&qword_100520120);
    sub_10004FFD4(*(void **)(a1 + *(int *)(v17 + 48)), *(void **)(a1 + *(int *)(v17 + 48) + 8), *(void *)(a1 + *(int *)(v17 + 48) + 16), *(unsigned char *)(a1 + *(int *)(v17 + 48) + 24));
    uint64_t v18 = a1 + *(int *)(v17 + 64);
    uint64_t v19 = *(void **)v18;
    uint64_t v20 = *(void **)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    unsigned __int8 v22 = *(unsigned char *)(v18 + 24);
    sub_10004FFD4(v19, v20, v21, v22);
  }
  else
  {
    switch(v3)
    {
      case 0:
        uint64_t v23 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(a1, v23);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_34;
      case 1:
        uint64_t v24 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a1, v24);
        uint64_t v25 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v26 = a1 + v25[13];
        uint64_t v27 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v28 = *(void *)(v27 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27)) {
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
        }
        uint64_t v29 = (uint64_t *)(a1 + v25[14]);
        unint64_t v30 = v29[1];
        if (v30 >> 60 != 15) {
          sub_100038B34(*v29, v30);
        }
        if (!*(void *)(a1 + v25[15])) {
          return;
        }
        swift_bridgeObjectRelease();
LABEL_26:
        swift_release();
        break;
      case 2:
        uint64_t v31 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(a1, v31);
        uint64_t v32 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void **)(a1 + *(int *)(v32 + 52));

        return;
      case 3:
      case 4:
        uint64_t v5 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        goto LABEL_26;
      case 5:
        uint64_t v34 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_34:
        swift_bridgeObjectRelease();
        return;
      default:
        return;
    }
  }
}

uint64_t sub_100118FA8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for CVDetection();
  int v5 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch(v5)
    {
      case 1:
        uint64_t v30 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(a1, a2, v30);
        uint64_t v31 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v31[5]) = *(_DWORD *)(a2 + v31[5]);
        uint64_t v32 = v31[6];
        uint64_t v33 = (_OWORD *)(a1 + v32);
        uint64_t v34 = (_OWORD *)(a2 + v32);
        long long v35 = v34[3];
        v33[2] = v34[2];
        v33[3] = v35;
        long long v36 = v34[1];
        _OWORD *v33 = *v34;
        v33[1] = v36;
        *(void *)(a1 + v31[7]) = *(void *)(a2 + v31[7]);
        *(void *)(a1 + v31[8]) = *(void *)(a2 + v31[8]);
        *(void *)(a1 + v31[9]) = *(void *)(a2 + v31[9]);
        *(unsigned char *)(a1 + v31[10]) = *(unsigned char *)(a2 + v31[10]);
        uint64_t v37 = v31[11];
        long long v38 = (void *)(a1 + v37);
        long long v39 = (void *)(a2 + v37);
        uint64_t v40 = v39[1];
        *long long v38 = *v39;
        v38[1] = v40;
        uint64_t v41 = v31[12];
        uint64_t v42 = (void *)(a1 + v41);
        uint64_t v43 = (void *)(a2 + v41);
        uint64_t v44 = v43[1];
        *uint64_t v42 = *v43;
        v42[1] = v44;
        uint64_t v45 = v31[13];
        char v183 = (const void *)(a2 + v45);
        __dst = (void *)(a1 + v45);
        uint64_t v46 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v47 = *(void *)(v46 - 8);
        uint64_t v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v48(v183, 1, v46))
        {
          uint64_t v49 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v183, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v47 + 16))(__dst, v183, v46);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
        }
        uint64_t v148 = v31[14];
        uint64_t v149 = a1 + v148;
        uint64_t v150 = (uint64_t *)(a2 + v148);
        unint64_t v151 = v150[1];
        if (v151 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
        }
        else
        {
          uint64_t v152 = *v150;
          sub_100038528(*v150, v150[1]);
          *(void *)uint64_t v149 = v152;
          *(void *)(v149 + 8) = v151;
        }
        uint64_t v153 = v31[15];
        unint64_t v154 = (void *)(a1 + v153);
        uint64_t v155 = (void *)(a2 + v153);
        if (*v155)
        {
          uint64_t v156 = v155[1];
          uint64_t v157 = v155[2];
          *unint64_t v154 = *v155;
          v154[1] = v156;
          v154[2] = v157;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)unint64_t v154 = *(_OWORD *)v155;
          v154[2] = v155[2];
        }
        break;
      case 2:
        uint64_t v50 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(a1, a2, v50);
        uint64_t v51 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v51[5]) = *(_DWORD *)(a2 + v51[5]);
        uint64_t v52 = v51[6];
        uint64_t v53 = (_OWORD *)(a1 + v52);
        Swift::String v54 = (_OWORD *)(a2 + v52);
        long long v55 = v54[3];
        v53[2] = v54[2];
        v53[3] = v55;
        long long v56 = v54[1];
        *uint64_t v53 = *v54;
        v53[1] = v56;
        uint64_t v57 = v51[7];
        long long v58 = (void *)(a1 + v57);
        long long v59 = (uint64_t *)(a2 + v57);
        uint64_t v61 = *v59;
        uint64_t v60 = v59[1];
        *long long v58 = v61;
        v58[1] = v60;
        *(void *)(a1 + v51[8]) = *(void *)(a2 + v51[8]);
        *(void *)(a1 + v51[9]) = *(void *)(a2 + v51[9]);
        *(void *)(a1 + v51[10]) = *(void *)(a2 + v51[10]);
        *(void *)(a1 + v51[11]) = *(void *)(a2 + v51[11]);
        *(void *)(a1 + v51[12]) = *(void *)(a2 + v51[12]);
        uint64_t v62 = v51[13];
        uint64_t v63 = *(void **)(a2 + v62);
        *(void *)(a1 + v62) = v63;
        *(unsigned char *)(a1 + v51[14]) = *(unsigned char *)(a2 + v51[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v64 = v63;
        break;
      case 3:
      case 4:
        uint64_t v65 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16))(a1, a2, v65);
        uint64_t v66 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v66[5]) = *(_DWORD *)(a2 + v66[5]);
        uint64_t v67 = v66[6];
        uint64_t v68 = (_OWORD *)(a1 + v67);
        uint64_t v69 = (_OWORD *)(a2 + v67);
        long long v70 = v69[3];
        void v68[2] = v69[2];
        v68[3] = v70;
        long long v71 = v69[1];
        *uint64_t v68 = *v69;
        v68[1] = v71;
        uint64_t v72 = v66[7];
        long long v73 = (void *)(a1 + v72);
        long long v74 = (uint64_t *)(a2 + v72);
        uint64_t v76 = *v74;
        uint64_t v75 = v74[1];
        *long long v73 = v76;
        v73[1] = v75;
        *(void *)(a1 + v66[8]) = *(void *)(a2 + v66[8]);
        *(void *)(a1 + v66[9]) = *(void *)(a2 + v66[9]);
        *(void *)(a1 + v66[10]) = *(void *)(a2 + v66[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5:
        uint64_t v77 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(a1, a2, v77);
        uint64_t v78 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v78[5]) = *(_DWORD *)(a2 + v78[5]);
        uint64_t v79 = v78[6];
        uint64_t v80 = (_OWORD *)(a1 + v79);
        long long v81 = (_OWORD *)(a2 + v79);
        long long v82 = v81[3];
        v80[2] = v81[2];
        void v80[3] = v82;
        long long v83 = v81[1];
        *uint64_t v80 = *v81;
        v80[1] = v83;
        uint64_t v84 = v78[7];
        long long v85 = (void *)(a1 + v84);
        long long v86 = (uint64_t *)(a2 + v84);
        uint64_t v88 = *v86;
        uint64_t v87 = v86[1];
        *long long v85 = v88;
        v85[1] = v87;
        *(void *)(a1 + v78[8]) = *(void *)(a2 + v78[8]);
        *(void *)(a1 + v78[9]) = *(void *)(a2 + v78[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        uint64_t v10 = (_OWORD *)(a2 + v8);
        long long v11 = v10[3];
        v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v12;
        uint64_t v13 = v7[7];
        uint64_t v14 = (void *)(a1 + v13);
        uint64_t v15 = (uint64_t *)(a2 + v13);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        *uint64_t v14 = v17;
        v14[1] = v16;
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v168 = sub_10000F214(&qword_100520120);
    uint64_t v169 = *(int *)(v168 + 48);
    uint64_t v170 = a1 + v169;
    uint64_t v171 = a2 + v169;
    id v172 = *(id *)v171;
    long long v173 = *(void **)(v171 + 8);
    uint64_t v174 = *(void *)(v171 + 16);
    unsigned __int8 v175 = *(unsigned char *)(v171 + 24);
    sub_1000506C4(*(id *)v171, v173, v174, v175);
    *(void *)uint64_t v170 = v172;
    *(void *)(v170 + 8) = v173;
    *(void *)(v170 + 16) = v174;
    *(unsigned char *)(v170 + 24) = v175;
    uint64_t v176 = *(int *)(v168 + 64);
    uint64_t v177 = a1 + v176;
    uint64_t v178 = a2 + v176;
    id v179 = *(id *)v178;
    unint64_t v180 = *(void **)(v178 + 8);
    uint64_t v181 = *(void *)(v178 + 16);
    LOBYTE(v173) = *(unsigned char *)(v178 + 24);
    sub_1000506C4(*(id *)v178, v180, v181, v173);
    *(void *)uint64_t v177 = v179;
    *(void *)(v177 + 8) = v180;
    *(void *)(v177 + 16) = v181;
    *(unsigned char *)(v177 + 24) = (_BYTE)v173;
  }
  else
  {
    switch(v5)
    {
      case 1:
        uint64_t v89 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 16))(a1, a2, v89);
        uint64_t v90 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v90[5]) = *(_DWORD *)(a2 + v90[5]);
        uint64_t v91 = v90[6];
        uint64_t v92 = (_OWORD *)(a1 + v91);
        uint64_t v93 = (_OWORD *)(a2 + v91);
        long long v94 = v93[3];
        v92[2] = v93[2];
        v92[3] = v94;
        long long v95 = v93[1];
        _OWORD *v92 = *v93;
        v92[1] = v95;
        *(void *)(a1 + v90[7]) = *(void *)(a2 + v90[7]);
        *(void *)(a1 + v90[8]) = *(void *)(a2 + v90[8]);
        *(void *)(a1 + v90[9]) = *(void *)(a2 + v90[9]);
        *(unsigned char *)(a1 + v90[10]) = *(unsigned char *)(a2 + v90[10]);
        uint64_t v96 = v90[11];
        long long v97 = (void *)(a1 + v96);
        long long v98 = (void *)(a2 + v96);
        uint64_t v99 = v98[1];
        *long long v97 = *v98;
        v97[1] = v99;
        uint64_t v100 = v90[12];
        uint64_t v101 = (void *)(a1 + v100);
        uint64_t v102 = (void *)(a2 + v100);
        uint64_t v103 = v102[1];
        *uint64_t v101 = *v102;
        v101[1] = v103;
        uint64_t v104 = v90[13];
        uint64_t v184 = (const void *)(a2 + v104);
        __dsta = (void *)(a1 + v104);
        uint64_t v105 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v106 = *(void *)(v105 - 8);
        uint64_t v107 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v106 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v107(v184, 1, v105))
        {
          uint64_t v108 = sub_10000F214(&qword_100524BD0);
          memcpy(__dsta, v184, *(void *)(*(void *)(v108 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v106 + 16))(__dsta, v184, v105);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(__dsta, 0, 1, v105);
        }
        uint64_t v158 = v90[14];
        uint64_t v159 = a1 + v158;
        uint64_t v160 = (uint64_t *)(a2 + v158);
        unint64_t v161 = v160[1];
        if (v161 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v159 = *(_OWORD *)v160;
        }
        else
        {
          uint64_t v162 = *v160;
          sub_100038528(*v160, v160[1]);
          *(void *)uint64_t v159 = v162;
          *(void *)(v159 + 8) = v161;
        }
        uint64_t v163 = v90[15];
        unint64_t v164 = (void *)(a1 + v163);
        uint64_t v165 = (void *)(a2 + v163);
        if (*v165)
        {
          uint64_t v166 = v165[1];
          uint64_t v167 = v165[2];
          *unint64_t v164 = *v165;
          v164[1] = v166;
          v164[2] = v167;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)unint64_t v164 = *(_OWORD *)v165;
          v164[2] = v165[2];
        }
        break;
      case 2:
        uint64_t v109 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 16))(a1, a2, v109);
        uint64_t v110 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v110[5]) = *(_DWORD *)(a2 + v110[5]);
        uint64_t v111 = v110[6];
        uint64_t v112 = (_OWORD *)(a1 + v111);
        uint64_t v113 = (_OWORD *)(a2 + v111);
        long long v114 = v113[3];
        v112[2] = v113[2];
        v112[3] = v114;
        long long v115 = v113[1];
        *uint64_t v112 = *v113;
        v112[1] = v115;
        uint64_t v116 = v110[7];
        long long v117 = (void *)(a1 + v116);
        long long v118 = (uint64_t *)(a2 + v116);
        uint64_t v120 = *v118;
        uint64_t v119 = v118[1];
        void *v117 = v120;
        v117[1] = v119;
        *(void *)(a1 + v110[8]) = *(void *)(a2 + v110[8]);
        *(void *)(a1 + v110[9]) = *(void *)(a2 + v110[9]);
        *(void *)(a1 + v110[10]) = *(void *)(a2 + v110[10]);
        *(void *)(a1 + v110[11]) = *(void *)(a2 + v110[11]);
        *(void *)(a1 + v110[12]) = *(void *)(a2 + v110[12]);
        uint64_t v121 = v110[13];
        uint64_t v122 = *(void **)(a2 + v121);
        *(void *)(a1 + v121) = v122;
        *(unsigned char *)(a1 + v110[14]) = *(unsigned char *)(a2 + v110[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v123 = v122;
        break;
      case 3:
      case 4:
        uint64_t v124 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v124 - 8) + 16))(a1, a2, v124);
        uint64_t v125 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v125[5]) = *(_DWORD *)(a2 + v125[5]);
        uint64_t v126 = v125[6];
        uint64_t v127 = (_OWORD *)(a1 + v126);
        uint64_t v128 = (_OWORD *)(a2 + v126);
        long long v129 = v128[3];
        v127[2] = v128[2];
        v127[3] = v129;
        long long v130 = v128[1];
        *uint64_t v127 = *v128;
        v127[1] = v130;
        uint64_t v131 = v125[7];
        long long v132 = (void *)(a1 + v131);
        long long v133 = (uint64_t *)(a2 + v131);
        uint64_t v135 = *v133;
        uint64_t v134 = v133[1];
        *long long v132 = v135;
        v132[1] = v134;
        *(void *)(a1 + v125[8]) = *(void *)(a2 + v125[8]);
        *(void *)(a1 + v125[9]) = *(void *)(a2 + v125[9]);
        *(void *)(a1 + v125[10]) = *(void *)(a2 + v125[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5:
        uint64_t v136 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 16))(a1, a2, v136);
        uint64_t v137 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v137[5]) = *(_DWORD *)(a2 + v137[5]);
        uint64_t v138 = v137[6];
        uint64_t v139 = (_OWORD *)(a1 + v138);
        uint64_t v140 = (_OWORD *)(a2 + v138);
        long long v141 = v140[3];
        v139[2] = v140[2];
        v139[3] = v141;
        long long v142 = v140[1];
        _OWORD *v139 = *v140;
        v139[1] = v142;
        uint64_t v143 = v137[7];
        long long v144 = (void *)(a1 + v143);
        long long v145 = (uint64_t *)(a2 + v143);
        uint64_t v147 = *v145;
        uint64_t v146 = v145[1];
        void *v144 = v147;
        v144[1] = v146;
        *(void *)(a1 + v137[8]) = *(void *)(a2 + v137[8]);
        *(void *)(a1 + v137[9]) = *(void *)(a2 + v137[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v19[5]) = *(_DWORD *)(a2 + v19[5]);
        uint64_t v20 = v19[6];
        uint64_t v21 = (_OWORD *)(a1 + v20);
        unsigned __int8 v22 = (_OWORD *)(a2 + v20);
        long long v23 = v22[3];
        v21[2] = v22[2];
        uint64_t v21[3] = v23;
        long long v24 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v24;
        uint64_t v25 = v19[7];
        uint64_t v26 = (void *)(a1 + v25);
        uint64_t v27 = (uint64_t *)(a2 + v25);
        uint64_t v29 = *v27;
        uint64_t v28 = v27[1];
        *uint64_t v26 = v29;
        v26[1] = v28;
        *(void *)(a1 + v19[8]) = *(void *)(a2 + v19[8]);
        *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100119DDC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10011CE0C(a1, type metadata accessor for GeoLocateState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for CVDetection();
    int v5 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      switch(v5)
      {
        case 1:
          uint64_t v28 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(a1, a2, v28);
          uint64_t v29 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(a1 + v29[5]) = *(_DWORD *)(a2 + v29[5]);
          uint64_t v30 = v29[6];
          uint64_t v31 = (_OWORD *)(a1 + v30);
          uint64_t v32 = (_OWORD *)(a2 + v30);
          long long v34 = v32[2];
          long long v33 = v32[3];
          long long v35 = v32[1];
          *uint64_t v31 = *v32;
          v31[1] = v35;
          v31[2] = v34;
          v31[3] = v33;
          *(void *)(a1 + v29[7]) = *(void *)(a2 + v29[7]);
          *(void *)(a1 + v29[8]) = *(void *)(a2 + v29[8]);
          *(void *)(a1 + v29[9]) = *(void *)(a2 + v29[9]);
          *(unsigned char *)(a1 + v29[10]) = *(unsigned char *)(a2 + v29[10]);
          uint64_t v36 = v29[11];
          uint64_t v37 = (void *)(a1 + v36);
          long long v38 = (void *)(a2 + v36);
          *uint64_t v37 = *v38;
          v37[1] = v38[1];
          uint64_t v39 = v29[12];
          uint64_t v40 = (void *)(a1 + v39);
          uint64_t v41 = (void *)(a2 + v39);
          *uint64_t v40 = *v41;
          v40[1] = v41[1];
          uint64_t v42 = v29[13];
          long long v173 = (const void *)(a2 + v42);
          __dst = (void *)(a1 + v42);
          uint64_t v43 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v44 = *(void *)(v43 - 8);
          uint64_t v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v45(v173, 1, v43))
          {
            uint64_t v46 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v173, *(void *)(*(void *)(v46 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v44 + 16))(__dst, v173, v43);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(__dst, 0, 1, v43);
          }
          uint64_t v138 = v29[14];
          uint64_t v139 = a1 + v138;
          uint64_t v140 = (uint64_t *)(a2 + v138);
          unint64_t v141 = v140[1];
          if (v141 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
          }
          else
          {
            uint64_t v142 = *v140;
            sub_100038528(*v140, v140[1]);
            *(void *)uint64_t v139 = v142;
            *(void *)(v139 + 8) = v141;
          }
          uint64_t v143 = v29[15];
          long long v144 = (void *)(a1 + v143);
          long long v145 = (void *)(a2 + v143);
          if (*v145)
          {
            void *v144 = *v145;
            uint64_t v146 = v145[2];
            v144[1] = v145[1];
            v144[2] = v146;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v156 = *(_OWORD *)v145;
            v144[2] = v145[2];
            *(_OWORD *)long long v144 = v156;
          }
          break;
        case 2:
          uint64_t v47 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(a1, a2, v47);
          uint64_t v48 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(a1 + v48[5]) = *(_DWORD *)(a2 + v48[5]);
          uint64_t v49 = v48[6];
          uint64_t v50 = (_OWORD *)(a1 + v49);
          uint64_t v51 = (_OWORD *)(a2 + v49);
          long long v53 = v51[2];
          long long v52 = v51[3];
          long long v54 = v51[1];
          _OWORD *v50 = *v51;
          v50[1] = v54;
          v50[2] = v53;
          v50[3] = v52;
          uint64_t v55 = v48[7];
          long long v56 = (void *)(a1 + v55);
          uint64_t v57 = (void *)(a2 + v55);
          void *v56 = *v57;
          v56[1] = v57[1];
          *(void *)(a1 + v48[8]) = *(void *)(a2 + v48[8]);
          *(void *)(a1 + v48[9]) = *(void *)(a2 + v48[9]);
          *(void *)(a1 + v48[10]) = *(void *)(a2 + v48[10]);
          *(void *)(a1 + v48[11]) = *(void *)(a2 + v48[11]);
          *(void *)(a1 + v48[12]) = *(void *)(a2 + v48[12]);
          uint64_t v58 = v48[13];
          long long v59 = *(void **)(a2 + v58);
          *(void *)(a1 + v58) = v59;
          *(unsigned char *)(a1 + v48[14]) = *(unsigned char *)(a2 + v48[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v60 = v59;
          break;
        case 3:
        case 4:
          uint64_t v61 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16))(a1, a2, v61);
          uint64_t v62 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(a1 + v62[5]) = *(_DWORD *)(a2 + v62[5]);
          uint64_t v63 = v62[6];
          id v64 = (_OWORD *)(a1 + v63);
          uint64_t v65 = (_OWORD *)(a2 + v63);
          long long v67 = v65[2];
          long long v66 = v65[3];
          long long v68 = v65[1];
          *id v64 = *v65;
          v64[1] = v68;
          v64[2] = v67;
          v64[3] = v66;
          uint64_t v69 = v62[7];
          long long v70 = (void *)(a1 + v69);
          long long v71 = (void *)(a2 + v69);
          *long long v70 = *v71;
          v70[1] = v71[1];
          *(void *)(a1 + v62[8]) = *(void *)(a2 + v62[8]);
          *(void *)(a1 + v62[9]) = *(void *)(a2 + v62[9]);
          *(void *)(a1 + v62[10]) = *(void *)(a2 + v62[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5:
          uint64_t v72 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(a1, a2, v72);
          long long v73 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(a1 + v73[5]) = *(_DWORD *)(a2 + v73[5]);
          uint64_t v74 = v73[6];
          uint64_t v75 = (_OWORD *)(a1 + v74);
          uint64_t v76 = (_OWORD *)(a2 + v74);
          long long v78 = v76[2];
          long long v77 = v76[3];
          long long v79 = v76[1];
          *uint64_t v75 = *v76;
          v75[1] = v79;
          v75[2] = v78;
          uint64_t v75[3] = v77;
          uint64_t v80 = v73[7];
          long long v81 = (void *)(a1 + v80);
          long long v82 = (void *)(a2 + v80);
          *long long v81 = *v82;
          v81[1] = v82[1];
          *(void *)(a1 + v73[8]) = *(void *)(a2 + v73[8]);
          *(void *)(a1 + v73[9]) = *(void *)(a2 + v73[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v6 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
          uint64_t v8 = v7[6];
          uint64_t v9 = (_OWORD *)(a1 + v8);
          uint64_t v10 = (_OWORD *)(a2 + v8);
          long long v12 = v10[2];
          long long v11 = v10[3];
          long long v13 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v13;
          v9[2] = v12;
          v9[3] = v11;
          uint64_t v14 = v7[7];
          uint64_t v15 = (void *)(a1 + v14);
          uint64_t v16 = (void *)(a2 + v14);
          *uint64_t v15 = *v16;
          v15[1] = v16[1];
          *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
          *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v157 = sub_10000F214(&qword_100520120);
      uint64_t v158 = *(int *)(v157 + 48);
      uint64_t v159 = a1 + v158;
      uint64_t v160 = a2 + v158;
      id v161 = *(id *)v160;
      uint64_t v162 = *(void **)(v160 + 8);
      uint64_t v163 = *(void *)(v160 + 16);
      unsigned __int8 v164 = *(unsigned char *)(v160 + 24);
      sub_1000506C4(*(id *)v160, v162, v163, v164);
      *(void *)uint64_t v159 = v161;
      *(void *)(v159 + 8) = v162;
      *(void *)(v159 + 16) = v163;
      *(unsigned char *)(v159 + 24) = v164;
      uint64_t v165 = *(int *)(v157 + 64);
      uint64_t v166 = a1 + v165;
      uint64_t v167 = a2 + v165;
      id v168 = *(id *)v167;
      uint64_t v169 = *(void **)(v167 + 8);
      uint64_t v170 = *(void *)(v167 + 16);
      LOBYTE(v162) = *(unsigned char *)(v167 + 24);
      sub_1000506C4(*(id *)v167, v169, v170, v162);
      *(void *)uint64_t v166 = v168;
      *(void *)(v166 + 8) = v169;
      *(void *)(v166 + 16) = v170;
      *(unsigned char *)(v166 + 24) = (_BYTE)v162;
    }
    else
    {
      switch(v5)
      {
        case 1:
          uint64_t v83 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16))(a1, a2, v83);
          uint64_t v84 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(a1 + v84[5]) = *(_DWORD *)(a2 + v84[5]);
          uint64_t v85 = v84[6];
          long long v86 = (_OWORD *)(a1 + v85);
          uint64_t v87 = (_OWORD *)(a2 + v85);
          long long v89 = v87[2];
          long long v88 = v87[3];
          long long v90 = v87[1];
          *long long v86 = *v87;
          v86[1] = v90;
          v86[2] = v89;
          v86[3] = v88;
          *(void *)(a1 + v84[7]) = *(void *)(a2 + v84[7]);
          *(void *)(a1 + v84[8]) = *(void *)(a2 + v84[8]);
          *(void *)(a1 + v84[9]) = *(void *)(a2 + v84[9]);
          *(unsigned char *)(a1 + v84[10]) = *(unsigned char *)(a2 + v84[10]);
          uint64_t v91 = v84[11];
          uint64_t v92 = (void *)(a1 + v91);
          uint64_t v93 = (void *)(a2 + v91);
          void *v92 = *v93;
          v92[1] = v93[1];
          uint64_t v94 = v84[12];
          long long v95 = (void *)(a1 + v94);
          uint64_t v96 = (void *)(a2 + v94);
          void *v95 = *v96;
          v95[1] = v96[1];
          uint64_t v97 = v84[13];
          uint64_t v174 = (const void *)(a2 + v97);
          __dsta = (void *)(a1 + v97);
          uint64_t v98 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v99 = *(void *)(v98 - 8);
          uint64_t v100 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v99 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v100(v174, 1, v98))
          {
            uint64_t v101 = sub_10000F214(&qword_100524BD0);
            memcpy(__dsta, v174, *(void *)(*(void *)(v101 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v99 + 16))(__dsta, v174, v98);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(__dsta, 0, 1, v98);
          }
          uint64_t v147 = v84[14];
          uint64_t v148 = a1 + v147;
          uint64_t v149 = (uint64_t *)(a2 + v147);
          unint64_t v150 = v149[1];
          if (v150 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
          }
          else
          {
            uint64_t v151 = *v149;
            sub_100038528(*v149, v149[1]);
            *(void *)uint64_t v148 = v151;
            *(void *)(v148 + 8) = v150;
          }
          uint64_t v152 = v84[15];
          uint64_t v153 = (void *)(a1 + v152);
          unint64_t v154 = (void *)(a2 + v152);
          if (*v154)
          {
            *uint64_t v153 = *v154;
            uint64_t v155 = v154[2];
            v153[1] = v154[1];
            v153[2] = v155;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v171 = *(_OWORD *)v154;
            v153[2] = v154[2];
            *(_OWORD *)uint64_t v153 = v171;
          }
          break;
        case 2:
          uint64_t v102 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 16))(a1, a2, v102);
          uint64_t v103 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(a1 + v103[5]) = *(_DWORD *)(a2 + v103[5]);
          uint64_t v104 = v103[6];
          uint64_t v105 = (_OWORD *)(a1 + v104);
          uint64_t v106 = (_OWORD *)(a2 + v104);
          long long v108 = v106[2];
          long long v107 = v106[3];
          long long v109 = v106[1];
          *uint64_t v105 = *v106;
          v105[1] = v109;
          _OWORD v105[2] = v108;
          v105[3] = v107;
          uint64_t v110 = v103[7];
          uint64_t v111 = (void *)(a1 + v110);
          uint64_t v112 = (void *)(a2 + v110);
          *uint64_t v111 = *v112;
          v111[1] = v112[1];
          *(void *)(a1 + v103[8]) = *(void *)(a2 + v103[8]);
          *(void *)(a1 + v103[9]) = *(void *)(a2 + v103[9]);
          *(void *)(a1 + v103[10]) = *(void *)(a2 + v103[10]);
          *(void *)(a1 + v103[11]) = *(void *)(a2 + v103[11]);
          *(void *)(a1 + v103[12]) = *(void *)(a2 + v103[12]);
          uint64_t v113 = v103[13];
          long long v114 = *(void **)(a2 + v113);
          *(void *)(a1 + v113) = v114;
          *(unsigned char *)(a1 + v103[14]) = *(unsigned char *)(a2 + v103[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v115 = v114;
          break;
        case 3:
        case 4:
          uint64_t v116 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 16))(a1, a2, v116);
          long long v117 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(a1 + v117[5]) = *(_DWORD *)(a2 + v117[5]);
          uint64_t v118 = v117[6];
          uint64_t v119 = (_OWORD *)(a1 + v118);
          uint64_t v120 = (_OWORD *)(a2 + v118);
          long long v122 = v120[2];
          long long v121 = v120[3];
          long long v123 = v120[1];
          *uint64_t v119 = *v120;
          v119[1] = v123;
          v119[2] = v122;
          v119[3] = v121;
          uint64_t v124 = v117[7];
          uint64_t v125 = (void *)(a1 + v124);
          uint64_t v126 = (void *)(a2 + v124);
          *uint64_t v125 = *v126;
          v125[1] = v126[1];
          *(void *)(a1 + v117[8]) = *(void *)(a2 + v117[8]);
          *(void *)(a1 + v117[9]) = *(void *)(a2 + v117[9]);
          *(void *)(a1 + v117[10]) = *(void *)(a2 + v117[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5:
          uint64_t v127 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 16))(a1, a2, v127);
          uint64_t v128 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(a1 + v128[5]) = *(_DWORD *)(a2 + v128[5]);
          uint64_t v129 = v128[6];
          long long v130 = (_OWORD *)(a1 + v129);
          uint64_t v131 = (_OWORD *)(a2 + v129);
          long long v133 = v131[2];
          long long v132 = v131[3];
          long long v134 = v131[1];
          *long long v130 = *v131;
          v130[1] = v134;
          void v130[2] = v133;
          v130[3] = v132;
          uint64_t v135 = v128[7];
          uint64_t v136 = (void *)(a1 + v135);
          uint64_t v137 = (void *)(a2 + v135);
          void *v136 = *v137;
          v136[1] = v137[1];
          *(void *)(a1 + v128[8]) = *(void *)(a2 + v128[8]);
          *(void *)(a1 + v128[9]) = *(void *)(a2 + v128[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v17 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
          uint64_t v18 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(a1 + v18[5]) = *(_DWORD *)(a2 + v18[5]);
          uint64_t v19 = v18[6];
          uint64_t v20 = (_OWORD *)(a1 + v19);
          uint64_t v21 = (_OWORD *)(a2 + v19);
          long long v23 = v21[2];
          long long v22 = v21[3];
          long long v24 = v21[1];
          *uint64_t v20 = *v21;
          v20[1] = v24;
          v20[2] = v23;
          v20[3] = v22;
          uint64_t v25 = v18[7];
          uint64_t v26 = (void *)(a1 + v25);
          uint64_t v27 = (void *)(a2 + v25);
          *uint64_t v26 = *v27;
          v26[1] = v27[1];
          *(void *)(a1 + v18[8]) = *(void *)(a2 + v18[8]);
          *(void *)(a1 + v18[9]) = *(void *)(a2 + v18[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for GeoLocateState(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100520198);
}

uint64_t sub_10011ACCC(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for CVDetection();
  int v5 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch(v5)
    {
      case 1:
        uint64_t v20 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
        uint64_t v21 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v21[5]) = *(_DWORD *)(a2 + v21[5]);
        uint64_t v22 = v21[6];
        long long v23 = (_OWORD *)(a1 + v22);
        long long v24 = (_OWORD *)(a2 + v22);
        long long v25 = v24[3];
        void v23[2] = v24[2];
        v23[3] = v25;
        long long v26 = v24[1];
        _OWORD *v23 = *v24;
        v23[1] = v26;
        *(void *)(a1 + v21[7]) = *(void *)(a2 + v21[7]);
        *(void *)(a1 + v21[8]) = *(void *)(a2 + v21[8]);
        *(void *)(a1 + v21[9]) = *(void *)(a2 + v21[9]);
        *(unsigned char *)(a1 + v21[10]) = *(unsigned char *)(a2 + v21[10]);
        *(_OWORD *)(a1 + v21[11]) = *(_OWORD *)(a2 + v21[11]);
        *(_OWORD *)(a1 + v21[12]) = *(_OWORD *)(a2 + v21[12]);
        uint64_t v27 = v21[13];
        uint64_t v28 = (void *)(a1 + v27);
        uint64_t v29 = (const void *)(a2 + v27);
        uint64_t v30 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v31 = *(void *)(v30 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          uint64_t v32 = sub_10000F214(&qword_100524BD0);
          memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        }
        *(_OWORD *)(a1 + v21[14]) = *(_OWORD *)(a2 + v21[14]);
        uint64_t v88 = v21[15];
        uint64_t v89 = a1 + v88;
        uint64_t v90 = a2 + v88;
        *(void *)(v89 + 16) = *(void *)(v90 + 16);
        *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        break;
      case 2:
        uint64_t v33 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
        long long v34 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v34[5]) = *(_DWORD *)(a2 + v34[5]);
        uint64_t v35 = v34[6];
        uint64_t v36 = (_OWORD *)(a1 + v35);
        uint64_t v37 = (_OWORD *)(a2 + v35);
        long long v38 = v37[3];
        v36[2] = v37[2];
        v36[3] = v38;
        long long v39 = v37[1];
        *uint64_t v36 = *v37;
        v36[1] = v39;
        *(_OWORD *)(a1 + v34[7]) = *(_OWORD *)(a2 + v34[7]);
        *(void *)(a1 + v34[8]) = *(void *)(a2 + v34[8]);
        *(void *)(a1 + v34[9]) = *(void *)(a2 + v34[9]);
        *(void *)(a1 + v34[10]) = *(void *)(a2 + v34[10]);
        *(void *)(a1 + v34[11]) = *(void *)(a2 + v34[11]);
        *(void *)(a1 + v34[12]) = *(void *)(a2 + v34[12]);
        *(void *)(a1 + v34[13]) = *(void *)(a2 + v34[13]);
        *(unsigned char *)(a1 + v34[14]) = *(unsigned char *)(a2 + v34[14]);
        break;
      case 3:
      case 4:
        uint64_t v40 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
        uint64_t v41 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v41[5]) = *(_DWORD *)(a2 + v41[5]);
        uint64_t v42 = v41[6];
        uint64_t v43 = (_OWORD *)(a1 + v42);
        uint64_t v44 = (_OWORD *)(a2 + v42);
        long long v45 = v44[3];
        v43[2] = v44[2];
        v43[3] = v45;
        long long v46 = v44[1];
        *uint64_t v43 = *v44;
        v43[1] = v46;
        *(_OWORD *)(a1 + v41[7]) = *(_OWORD *)(a2 + v41[7]);
        *(void *)(a1 + v41[8]) = *(void *)(a2 + v41[8]);
        *(void *)(a1 + v41[9]) = *(void *)(a2 + v41[9]);
        *(void *)(a1 + v41[10]) = *(void *)(a2 + v41[10]);
        break;
      case 5:
        uint64_t v47 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(a1, a2, v47);
        uint64_t v48 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v48[5]) = *(_DWORD *)(a2 + v48[5]);
        uint64_t v49 = v48[6];
        uint64_t v50 = (_OWORD *)(a1 + v49);
        uint64_t v51 = (_OWORD *)(a2 + v49);
        long long v52 = v51[3];
        v50[2] = v51[2];
        v50[3] = v52;
        long long v53 = v51[1];
        _OWORD *v50 = *v51;
        v50[1] = v53;
        *(_OWORD *)(a1 + v48[7]) = *(_OWORD *)(a2 + v48[7]);
        *(void *)(a1 + v48[8]) = *(void *)(a2 + v48[8]);
        *(void *)(a1 + v48[9]) = *(void *)(a2 + v48[9]);
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        uint64_t v10 = (_OWORD *)(a2 + v8);
        long long v11 = v10[3];
        v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v12;
        *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v91 = sub_10000F214(&qword_100520120);
    uint64_t v92 = *(int *)(v91 + 48);
    uint64_t v93 = (_OWORD *)(a1 + v92);
    uint64_t v94 = (_OWORD *)(a2 + v92);
    *uint64_t v93 = *v94;
    *(_OWORD *)((char *)v93 + 9) = *(_OWORD *)((char *)v94 + 9);
    uint64_t v95 = *(int *)(v91 + 64);
    uint64_t v96 = (_OWORD *)(a1 + v95);
    uint64_t v97 = (_OWORD *)(a2 + v95);
    *uint64_t v96 = *v97;
    *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v97 + 9);
  }
  else
  {
    switch(v5)
    {
      case 1:
        uint64_t v54 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 32))(a1, a2, v54);
        uint64_t v55 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v55[5]) = *(_DWORD *)(a2 + v55[5]);
        uint64_t v56 = v55[6];
        uint64_t v57 = (_OWORD *)(a1 + v56);
        uint64_t v58 = (_OWORD *)(a2 + v56);
        long long v59 = v58[3];
        v57[2] = v58[2];
        v57[3] = v59;
        long long v60 = v58[1];
        *uint64_t v57 = *v58;
        v57[1] = v60;
        *(void *)(a1 + v55[7]) = *(void *)(a2 + v55[7]);
        *(void *)(a1 + v55[8]) = *(void *)(a2 + v55[8]);
        *(void *)(a1 + v55[9]) = *(void *)(a2 + v55[9]);
        *(unsigned char *)(a1 + v55[10]) = *(unsigned char *)(a2 + v55[10]);
        *(_OWORD *)(a1 + v55[11]) = *(_OWORD *)(a2 + v55[11]);
        *(_OWORD *)(a1 + v55[12]) = *(_OWORD *)(a2 + v55[12]);
        uint64_t v61 = v55[13];
        uint64_t v62 = (void *)(a1 + v61);
        uint64_t v63 = (const void *)(a2 + v61);
        uint64_t v64 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v65 = *(void *)(v64 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          uint64_t v66 = sub_10000F214(&qword_100524BD0);
          memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v65 + 32))(v62, v63, v64);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
        }
        *(_OWORD *)(a1 + v55[14]) = *(_OWORD *)(a2 + v55[14]);
        uint64_t v98 = v55[15];
        uint64_t v99 = a1 + v98;
        uint64_t v100 = a2 + v98;
        *(void *)(v99 + 16) = *(void *)(v100 + 16);
        *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
        break;
      case 2:
        uint64_t v67 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 32))(a1, a2, v67);
        long long v68 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v68[5]) = *(_DWORD *)(a2 + v68[5]);
        uint64_t v69 = v68[6];
        long long v70 = (_OWORD *)(a1 + v69);
        long long v71 = (_OWORD *)(a2 + v69);
        long long v72 = v71[3];
        v70[2] = v71[2];
        void v70[3] = v72;
        long long v73 = v71[1];
        *long long v70 = *v71;
        v70[1] = v73;
        *(_OWORD *)(a1 + v68[7]) = *(_OWORD *)(a2 + v68[7]);
        *(void *)(a1 + v68[8]) = *(void *)(a2 + v68[8]);
        *(void *)(a1 + v68[9]) = *(void *)(a2 + v68[9]);
        *(void *)(a1 + v68[10]) = *(void *)(a2 + v68[10]);
        *(void *)(a1 + v68[11]) = *(void *)(a2 + v68[11]);
        *(void *)(a1 + v68[12]) = *(void *)(a2 + v68[12]);
        *(void *)(a1 + v68[13]) = *(void *)(a2 + v68[13]);
        *(unsigned char *)(a1 + v68[14]) = *(unsigned char *)(a2 + v68[14]);
        break;
      case 3:
      case 4:
        uint64_t v74 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 32))(a1, a2, v74);
        uint64_t v75 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v75[5]) = *(_DWORD *)(a2 + v75[5]);
        uint64_t v76 = v75[6];
        long long v77 = (_OWORD *)(a1 + v76);
        long long v78 = (_OWORD *)(a2 + v76);
        long long v79 = v78[3];
        v77[2] = v78[2];
        v77[3] = v79;
        long long v80 = v78[1];
        _OWORD *v77 = *v78;
        v77[1] = v80;
        *(_OWORD *)(a1 + v75[7]) = *(_OWORD *)(a2 + v75[7]);
        *(void *)(a1 + v75[8]) = *(void *)(a2 + v75[8]);
        *(void *)(a1 + v75[9]) = *(void *)(a2 + v75[9]);
        *(void *)(a1 + v75[10]) = *(void *)(a2 + v75[10]);
        break;
      case 5:
        uint64_t v81 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 32))(a1, a2, v81);
        long long v82 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v82[5]) = *(_DWORD *)(a2 + v82[5]);
        uint64_t v83 = v82[6];
        uint64_t v84 = (_OWORD *)(a1 + v83);
        uint64_t v85 = (_OWORD *)(a2 + v83);
        long long v86 = v85[3];
        v84[2] = v85[2];
        v84[3] = v86;
        long long v87 = v85[1];
        *uint64_t v84 = *v85;
        v84[1] = v87;
        *(_OWORD *)(a1 + v82[7]) = *(_OWORD *)(a2 + v82[7]);
        *(void *)(a1 + v82[8]) = *(void *)(a2 + v82[8]);
        *(void *)(a1 + v82[9]) = *(void *)(a2 + v82[9]);
        break;
      default:
        uint64_t v13 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        uint64_t v14 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v14[5]) = *(_DWORD *)(a2 + v14[5]);
        uint64_t v15 = v14[6];
        uint64_t v16 = (_OWORD *)(a1 + v15);
        uint64_t v17 = (_OWORD *)(a2 + v15);
        long long v18 = v17[3];
        v16[2] = v17[2];
        v16[3] = v18;
        long long v19 = v17[1];
        *uint64_t v16 = *v17;
        v16[1] = v19;
        *(_OWORD *)(a1 + v14[7]) = *(_OWORD *)(a2 + v14[7]);
        *(void *)(a1 + v14[8]) = *(void *)(a2 + v14[8]);
        *(void *)(a1 + v14[9]) = *(void *)(a2 + v14[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10011B894(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10011CE0C(a1, type metadata accessor for GeoLocateState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for CVDetection();
    int v5 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      switch(v5)
      {
        case 1:
          uint64_t v20 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
          uint64_t v21 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(a1 + v21[5]) = *(_DWORD *)(a2 + v21[5]);
          uint64_t v22 = v21[6];
          long long v23 = (_OWORD *)(a1 + v22);
          long long v24 = (_OWORD *)(a2 + v22);
          long long v25 = v24[3];
          void v23[2] = v24[2];
          v23[3] = v25;
          long long v26 = v24[1];
          _OWORD *v23 = *v24;
          v23[1] = v26;
          *(void *)(a1 + v21[7]) = *(void *)(a2 + v21[7]);
          *(void *)(a1 + v21[8]) = *(void *)(a2 + v21[8]);
          *(void *)(a1 + v21[9]) = *(void *)(a2 + v21[9]);
          *(unsigned char *)(a1 + v21[10]) = *(unsigned char *)(a2 + v21[10]);
          *(_OWORD *)(a1 + v21[11]) = *(_OWORD *)(a2 + v21[11]);
          *(_OWORD *)(a1 + v21[12]) = *(_OWORD *)(a2 + v21[12]);
          uint64_t v27 = v21[13];
          uint64_t v28 = (void *)(a1 + v27);
          uint64_t v29 = (const void *)(a2 + v27);
          uint64_t v30 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v31 = *(void *)(v30 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
          {
            uint64_t v32 = sub_10000F214(&qword_100524BD0);
            memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
          }
          *(_OWORD *)(a1 + v21[14]) = *(_OWORD *)(a2 + v21[14]);
          uint64_t v88 = v21[15];
          uint64_t v89 = a1 + v88;
          uint64_t v90 = a2 + v88;
          *(void *)(v89 + 16) = *(void *)(v90 + 16);
          *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
          break;
        case 2:
          uint64_t v33 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
          long long v34 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(a1 + v34[5]) = *(_DWORD *)(a2 + v34[5]);
          uint64_t v35 = v34[6];
          uint64_t v36 = (_OWORD *)(a1 + v35);
          uint64_t v37 = (_OWORD *)(a2 + v35);
          long long v38 = v37[3];
          v36[2] = v37[2];
          v36[3] = v38;
          long long v39 = v37[1];
          *uint64_t v36 = *v37;
          v36[1] = v39;
          *(_OWORD *)(a1 + v34[7]) = *(_OWORD *)(a2 + v34[7]);
          *(void *)(a1 + v34[8]) = *(void *)(a2 + v34[8]);
          *(void *)(a1 + v34[9]) = *(void *)(a2 + v34[9]);
          *(void *)(a1 + v34[10]) = *(void *)(a2 + v34[10]);
          *(void *)(a1 + v34[11]) = *(void *)(a2 + v34[11]);
          *(void *)(a1 + v34[12]) = *(void *)(a2 + v34[12]);
          *(void *)(a1 + v34[13]) = *(void *)(a2 + v34[13]);
          *(unsigned char *)(a1 + v34[14]) = *(unsigned char *)(a2 + v34[14]);
          break;
        case 3:
        case 4:
          uint64_t v40 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
          uint64_t v41 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(a1 + v41[5]) = *(_DWORD *)(a2 + v41[5]);
          uint64_t v42 = v41[6];
          uint64_t v43 = (_OWORD *)(a1 + v42);
          uint64_t v44 = (_OWORD *)(a2 + v42);
          long long v45 = v44[3];
          v43[2] = v44[2];
          v43[3] = v45;
          long long v46 = v44[1];
          *uint64_t v43 = *v44;
          v43[1] = v46;
          *(_OWORD *)(a1 + v41[7]) = *(_OWORD *)(a2 + v41[7]);
          *(void *)(a1 + v41[8]) = *(void *)(a2 + v41[8]);
          *(void *)(a1 + v41[9]) = *(void *)(a2 + v41[9]);
          *(void *)(a1 + v41[10]) = *(void *)(a2 + v41[10]);
          break;
        case 5:
          uint64_t v47 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(a1, a2, v47);
          uint64_t v48 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(a1 + v48[5]) = *(_DWORD *)(a2 + v48[5]);
          uint64_t v49 = v48[6];
          uint64_t v50 = (_OWORD *)(a1 + v49);
          uint64_t v51 = (_OWORD *)(a2 + v49);
          long long v52 = v51[3];
          v50[2] = v51[2];
          v50[3] = v52;
          long long v53 = v51[1];
          _OWORD *v50 = *v51;
          v50[1] = v53;
          *(_OWORD *)(a1 + v48[7]) = *(_OWORD *)(a2 + v48[7]);
          *(void *)(a1 + v48[8]) = *(void *)(a2 + v48[8]);
          *(void *)(a1 + v48[9]) = *(void *)(a2 + v48[9]);
          break;
        default:
          uint64_t v6 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
          uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
          uint64_t v8 = v7[6];
          uint64_t v9 = (_OWORD *)(a1 + v8);
          uint64_t v10 = (_OWORD *)(a2 + v8);
          long long v11 = v10[3];
          v9[2] = v10[2];
          v9[3] = v11;
          long long v12 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v12;
          *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
          *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
          *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v91 = sub_10000F214(&qword_100520120);
      uint64_t v92 = *(int *)(v91 + 48);
      uint64_t v93 = (_OWORD *)(a1 + v92);
      uint64_t v94 = (_OWORD *)(a2 + v92);
      *uint64_t v93 = *v94;
      *(_OWORD *)((char *)v93 + 9) = *(_OWORD *)((char *)v94 + 9);
      uint64_t v95 = *(int *)(v91 + 64);
      uint64_t v96 = (_OWORD *)(a1 + v95);
      uint64_t v97 = (_OWORD *)(a2 + v95);
      *uint64_t v96 = *v97;
      *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v97 + 9);
    }
    else
    {
      switch(v5)
      {
        case 1:
          uint64_t v54 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 32))(a1, a2, v54);
          uint64_t v55 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(a1 + v55[5]) = *(_DWORD *)(a2 + v55[5]);
          uint64_t v56 = v55[6];
          uint64_t v57 = (_OWORD *)(a1 + v56);
          uint64_t v58 = (_OWORD *)(a2 + v56);
          long long v59 = v58[3];
          v57[2] = v58[2];
          v57[3] = v59;
          long long v60 = v58[1];
          *uint64_t v57 = *v58;
          v57[1] = v60;
          *(void *)(a1 + v55[7]) = *(void *)(a2 + v55[7]);
          *(void *)(a1 + v55[8]) = *(void *)(a2 + v55[8]);
          *(void *)(a1 + v55[9]) = *(void *)(a2 + v55[9]);
          *(unsigned char *)(a1 + v55[10]) = *(unsigned char *)(a2 + v55[10]);
          *(_OWORD *)(a1 + v55[11]) = *(_OWORD *)(a2 + v55[11]);
          *(_OWORD *)(a1 + v55[12]) = *(_OWORD *)(a2 + v55[12]);
          uint64_t v61 = v55[13];
          uint64_t v62 = (void *)(a1 + v61);
          uint64_t v63 = (const void *)(a2 + v61);
          uint64_t v64 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v65 = *(void *)(v64 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
          {
            uint64_t v66 = sub_10000F214(&qword_100524BD0);
            memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v65 + 32))(v62, v63, v64);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
          }
          *(_OWORD *)(a1 + v55[14]) = *(_OWORD *)(a2 + v55[14]);
          uint64_t v98 = v55[15];
          uint64_t v99 = a1 + v98;
          uint64_t v100 = a2 + v98;
          *(void *)(v99 + 16) = *(void *)(v100 + 16);
          *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
          break;
        case 2:
          uint64_t v67 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 32))(a1, a2, v67);
          long long v68 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(a1 + v68[5]) = *(_DWORD *)(a2 + v68[5]);
          uint64_t v69 = v68[6];
          long long v70 = (_OWORD *)(a1 + v69);
          long long v71 = (_OWORD *)(a2 + v69);
          long long v72 = v71[3];
          v70[2] = v71[2];
          void v70[3] = v72;
          long long v73 = v71[1];
          *long long v70 = *v71;
          v70[1] = v73;
          *(_OWORD *)(a1 + v68[7]) = *(_OWORD *)(a2 + v68[7]);
          *(void *)(a1 + v68[8]) = *(void *)(a2 + v68[8]);
          *(void *)(a1 + v68[9]) = *(void *)(a2 + v68[9]);
          *(void *)(a1 + v68[10]) = *(void *)(a2 + v68[10]);
          *(void *)(a1 + v68[11]) = *(void *)(a2 + v68[11]);
          *(void *)(a1 + v68[12]) = *(void *)(a2 + v68[12]);
          *(void *)(a1 + v68[13]) = *(void *)(a2 + v68[13]);
          *(unsigned char *)(a1 + v68[14]) = *(unsigned char *)(a2 + v68[14]);
          break;
        case 3:
        case 4:
          uint64_t v74 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 32))(a1, a2, v74);
          uint64_t v75 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(a1 + v75[5]) = *(_DWORD *)(a2 + v75[5]);
          uint64_t v76 = v75[6];
          long long v77 = (_OWORD *)(a1 + v76);
          long long v78 = (_OWORD *)(a2 + v76);
          long long v79 = v78[3];
          v77[2] = v78[2];
          v77[3] = v79;
          long long v80 = v78[1];
          _OWORD *v77 = *v78;
          v77[1] = v80;
          *(_OWORD *)(a1 + v75[7]) = *(_OWORD *)(a2 + v75[7]);
          *(void *)(a1 + v75[8]) = *(void *)(a2 + v75[8]);
          *(void *)(a1 + v75[9]) = *(void *)(a2 + v75[9]);
          *(void *)(a1 + v75[10]) = *(void *)(a2 + v75[10]);
          break;
        case 5:
          uint64_t v81 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 32))(a1, a2, v81);
          long long v82 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(a1 + v82[5]) = *(_DWORD *)(a2 + v82[5]);
          uint64_t v83 = v82[6];
          uint64_t v84 = (_OWORD *)(a1 + v83);
          uint64_t v85 = (_OWORD *)(a2 + v83);
          long long v86 = v85[3];
          v84[2] = v85[2];
          v84[3] = v86;
          long long v87 = v85[1];
          *uint64_t v84 = *v85;
          v84[1] = v87;
          *(_OWORD *)(a1 + v82[7]) = *(_OWORD *)(a2 + v82[7]);
          *(void *)(a1 + v82[8]) = *(void *)(a2 + v82[8]);
          *(void *)(a1 + v82[9]) = *(void *)(a2 + v82[9]);
          break;
        default:
          uint64_t v13 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
          uint64_t v14 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(a1 + v14[5]) = *(_DWORD *)(a2 + v14[5]);
          uint64_t v15 = v14[6];
          uint64_t v16 = (_OWORD *)(a1 + v15);
          uint64_t v17 = (_OWORD *)(a2 + v15);
          long long v18 = v17[3];
          v16[2] = v17[2];
          v16[3] = v18;
          long long v19 = v17[1];
          *uint64_t v16 = *v17;
          v16[1] = v19;
          *(_OWORD *)(a1 + v14[7]) = *(_OWORD *)(a2 + v14[7]);
          *(void *)(a1 + v14[8]) = *(void *)(a2 + v14[8]);
          *(void *)(a1 + v14[9]) = *(void *)(a2 + v14[9]);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10011C480()
{
  uint64_t result = type metadata accessor for CVDetection();
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout3();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void destroy for GeoLocationEstimate(uint64_t a1)
{
}

uint64_t initializeWithCopy for GeoLocationEstimate(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_1000506C4(*(id *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for GeoLocationEstimate(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_1000506C4(*(id *)a2, v4, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_10004FFD4(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for GeoLocationEstimate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_10004FFD4(v5, v7, v6, v8);
  return a1;
}

ValueMetadata *type metadata accessor for GeoLocationEstimate()
{
  return &type metadata for GeoLocationEstimate;
}

uint64_t sub_10011C668()
{
  return sub_100013AA8(&qword_1005201D0, &qword_1005201D8);
}

BOOL sub_10011C6A4(void *a1, void *a2, uint64_t a3, char a4, void *a5, void *a6, uint64_t a7, char a8)
{
  if (!a4)
  {
    if (!a8)
    {
      sub_100046CAC();
      id v16 = a1;
      id v17 = a5;
      id v18 = a2;
      id v19 = a6;
      char v20 = static NSObject.== infix(_:_:)();

      if (v20)
      {
        char v21 = static NSObject.== infix(_:_:)();

        return v21 & 1;
      }
    }
    return 0;
  }
  if (a4 == 1)
  {
    if (a8 == 1)
    {
      sub_100046CAC();
      sub_1000506C4(a1, a2, a3, 1u);
      sub_1000506C4(a5, a6, a7, 1u);
      char v14 = static NSObject.== infix(_:_:)();
      sub_10004FFD4(a5, a6, a7, 1u);
      sub_10004FFD4(a1, a2, a3, 1u);
      return v14 & 1;
    }
    return 0;
  }
  if (a8 != 2) {
    return 0;
  }
  sub_100046CAC();
  sub_1000506C4(a1, a2, a3, 2u);
  sub_1000506C4(a5, a6, a7, 2u);
  char v22 = static NSObject.== infix(_:_:)();
  sub_10004FFD4(a5, a6, a7, 2u);
  sub_10004FFD4(a1, a2, a3, 2u);
  BOOL v23 = *(double *)&a3 == *(double *)&a7;
  if (*(double *)&a2 != *(double *)&a6) {
    BOOL v23 = 0;
  }
  return (v22 & 1) != 0 && v23;
}

uint64_t sub_10011C8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v50 - v8;
  uint64_t State = type metadata accessor for GeoLocateState(0);
  __chkstk_darwin(State);
  long long v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v16 = sub_10000F214(&qword_1005201E0);
  __chkstk_darwin(v16 - 8);
  id v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v18[*(int *)(v19 + 56)];
  sub_10011CDA8(a1, (uint64_t)v18);
  sub_10011CDA8(a2, v20);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10011CDA8((uint64_t)v18, (uint64_t)v15);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_10006426C(v20, (uint64_t)v9);
      char v46 = sub_1003FD840(v15, v9);
      sub_10011CE0C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v47 = (uint64_t)v15;
      goto LABEL_11;
    }
    long long v12 = v15;
    goto LABEL_9;
  }
  uint64_t v58 = v6;
  sub_10011CDA8((uint64_t)v18, (uint64_t)v12);
  uint64_t v21 = sub_10000F214(&qword_100520120);
  uint64_t v22 = *(int *)(v21 + 48);
  BOOL v23 = *(void **)&v12[v22 + 8];
  long long v59 = *(void **)&v12[v22];
  long long v60 = v23;
  uint64_t v61 = *(void *)&v12[v22 + 16];
  int v62 = v12[v22 + 24];
  uint64_t v24 = *(int *)(v21 + 64);
  long long v25 = *(void **)&v12[v24];
  long long v26 = *(void **)&v12[v24 + 8];
  uint64_t v27 = *(void *)&v12[v24 + 16];
  int v28 = v12[v24 + 24];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10004FFD4(v25, v26, v27, v28);
    sub_10004FFD4(v59, v60, v61, v62);
LABEL_9:
    sub_10011CE0C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10000FBD8((uint64_t)v18, &qword_1005201E0);
LABEL_15:
    char v46 = 0;
    return v46 & 1;
  }
  long long v53 = v26;
  uint64_t v54 = v25;
  int v52 = v28;
  uint64_t v29 = *(void **)(v20 + v22);
  uint64_t v30 = *(void **)(v20 + v22 + 8);
  uint64_t v55 = v27;
  uint64_t v56 = v29;
  uint64_t v57 = *(void *)(v20 + v22 + 16);
  int v31 = *(unsigned __int8 *)(v20 + v22 + 24);
  uint64_t v33 = *(void **)(v20 + v24);
  uint64_t v32 = *(void **)(v20 + v24 + 8);
  uint64_t v34 = *(void *)(v20 + v24 + 16);
  unsigned __int8 v35 = *(unsigned char *)(v20 + v24 + 24);
  uint64_t v36 = (uint64_t)v58;
  sub_10006426C(v20, (uint64_t)v58);
  char v37 = sub_1003FD840(v12, v36);
  sub_10011CE0C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
  if ((v37 & 1) == 0)
  {
    sub_10011CE0C(v36, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10004FFD4(v33, v32, v34, v35);
    sub_10004FFD4(v56, v30, v57, v31);
    sub_10004FFD4(v54, v53, v55, v52);
    uint64_t v48 = v59;
LABEL_14:
    sub_10004FFD4(v48, v60, v61, v62);
    sub_10011CE0C((uint64_t)v18, type metadata accessor for GeoLocateState);
    goto LABEL_15;
  }
  unsigned __int8 v38 = v35;
  int v39 = v31;
  uint64_t v40 = v59;
  uint64_t v50 = v30;
  int v51 = v39;
  BOOL v41 = sub_10011C6A4(v59, v60, v61, v62, v56, v30, v57, v39);
  unsigned __int8 v42 = v52;
  uint64_t v44 = v54;
  uint64_t v43 = v55;
  if (!v41)
  {
    sub_10011CE0C(v36, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10004FFD4(v33, v32, v34, v38);
    sub_10004FFD4(v56, v50, v57, v51);
    sub_10004FFD4(v44, v53, v43, v42);
    uint64_t v48 = v40;
    goto LABEL_14;
  }
  long long v45 = v53;
  char v46 = sub_10011C6A4(v54, v53, v55, v52, v33, v32, v34, v38);
  sub_10004FFD4(v33, v32, v34, v38);
  sub_10004FFD4(v56, v50, v57, v51);
  sub_10004FFD4(v54, v45, v55, v42);
  sub_10004FFD4(v40, v60, v61, v62);
  uint64_t v47 = v36;
LABEL_11:
  sub_10011CE0C(v47, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_10011CE0C((uint64_t)v18, type metadata accessor for GeoLocateState);
  return v46 & 1;
}

uint64_t sub_10011CDA8(uint64_t a1, uint64_t a2)
{
  uint64_t State = type metadata accessor for GeoLocateState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 16))(a2, a1, State);
  return a2;
}

uint64_t sub_10011CE0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10011CE6C(void *a1, void *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for GeoLocateState(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for CVDetection();
    int v6 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      switch(v6)
      {
        case 1:
          uint64_t v32 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
          uint64_t v33 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)((char *)a1 + v33[5]) = *(_DWORD *)((char *)a2 + v33[5]);
          uint64_t v34 = v33[6];
          unsigned __int8 v35 = (_OWORD *)((char *)a1 + v34);
          uint64_t v36 = (_OWORD *)((char *)a2 + v34);
          long long v37 = v36[3];
          v35[2] = v36[2];
          v35[3] = v37;
          long long v38 = v36[1];
          _OWORD *v35 = *v36;
          v35[1] = v38;
          *(void *)((char *)a1 + v33[7]) = *(void *)((char *)a2 + v33[7]);
          *(void *)((char *)a1 + v33[8]) = *(void *)((char *)a2 + v33[8]);
          *(void *)((char *)a1 + v33[9]) = *(void *)((char *)a2 + v33[9]);
          *((unsigned char *)a1 + v33[10]) = *((unsigned char *)a2 + v33[10]);
          uint64_t v39 = v33[11];
          uint64_t v40 = (void *)((char *)a1 + v39);
          BOOL v41 = (void *)((char *)a2 + v39);
          uint64_t v42 = v41[1];
          *uint64_t v40 = *v41;
          v40[1] = v42;
          uint64_t v43 = v33[12];
          uint64_t v44 = (void *)((char *)a1 + v43);
          long long v45 = (void *)((char *)a2 + v43);
          uint64_t v46 = v45[1];
          *uint64_t v44 = *v45;
          v44[1] = v46;
          uint64_t v47 = v33[13];
          __dst = (char *)a1 + v47;
          long long v185 = (char *)a2 + v47;
          uint64_t v48 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v49 = *(void *)(v48 - 8);
          uint64_t v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v50(v185, 1, v48))
          {
            uint64_t v51 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v185, *(void *)(*(void *)(v51 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v49 + 16))(__dst, v185, v48);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(__dst, 0, 1, v48);
          }
          uint64_t v150 = v33[14];
          uint64_t v151 = (char *)a1 + v150;
          uint64_t v152 = (char *)a2 + v150;
          unint64_t v153 = *((void *)v152 + 1);
          if (v153 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
          }
          else
          {
            uint64_t v154 = *(void *)v152;
            sub_100038528(*(void *)v152, *((void *)v152 + 1));
            *(void *)uint64_t v151 = v154;
            *((void *)v151 + 1) = v153;
          }
          uint64_t v155 = v33[15];
          long long v156 = (void *)((char *)a1 + v155);
          uint64_t v157 = (void *)((char *)a2 + v155);
          if (*v157)
          {
            uint64_t v158 = v157[1];
            uint64_t v159 = v157[2];
            *long long v156 = *v157;
            v156[1] = v158;
            v156[2] = v159;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)long long v156 = *(_OWORD *)v157;
            v156[2] = v157[2];
          }
          break;
        case 2:
          uint64_t v52 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
          long long v53 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v53[5]) = *(_DWORD *)((char *)a2 + v53[5]);
          uint64_t v54 = v53[6];
          uint64_t v55 = (_OWORD *)((char *)a1 + v54);
          uint64_t v56 = (_OWORD *)((char *)a2 + v54);
          long long v57 = v56[3];
          v55[2] = v56[2];
          v55[3] = v57;
          long long v58 = v56[1];
          _OWORD *v55 = *v56;
          v55[1] = v58;
          uint64_t v59 = v53[7];
          long long v60 = (void *)((char *)a1 + v59);
          uint64_t v61 = (void *)((char *)a2 + v59);
          uint64_t v63 = *v61;
          uint64_t v62 = v61[1];
          *long long v60 = v63;
          v60[1] = v62;
          *(void *)((char *)a1 + v53[8]) = *(void *)((char *)a2 + v53[8]);
          *(void *)((char *)a1 + v53[9]) = *(void *)((char *)a2 + v53[9]);
          *(void *)((char *)a1 + v53[10]) = *(void *)((char *)a2 + v53[10]);
          *(void *)((char *)a1 + v53[11]) = *(void *)((char *)a2 + v53[11]);
          *(void *)((char *)a1 + v53[12]) = *(void *)((char *)a2 + v53[12]);
          uint64_t v64 = v53[13];
          uint64_t v65 = *(void **)((char *)a2 + v64);
          *(void *)((char *)a1 + v64) = v65;
          *((unsigned char *)a1 + v53[14]) = *((unsigned char *)a2 + v53[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v66 = v65;
          break;
        case 3:
        case 4:
          uint64_t v67 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v67 - 8) + 16))(a1, a2, v67);
          long long v68 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)((char *)a1 + v68[5]) = *(_DWORD *)((char *)a2 + v68[5]);
          uint64_t v69 = v68[6];
          long long v70 = (_OWORD *)((char *)a1 + v69);
          long long v71 = (_OWORD *)((char *)a2 + v69);
          long long v72 = v71[3];
          v70[2] = v71[2];
          void v70[3] = v72;
          long long v73 = v71[1];
          *long long v70 = *v71;
          v70[1] = v73;
          uint64_t v74 = v68[7];
          uint64_t v75 = (void *)((char *)a1 + v74);
          uint64_t v76 = (void *)((char *)a2 + v74);
          uint64_t v78 = *v76;
          uint64_t v77 = v76[1];
          *uint64_t v75 = v78;
          v75[1] = v77;
          *(void *)((char *)a1 + v68[8]) = *(void *)((char *)a2 + v68[8]);
          *(void *)((char *)a1 + v68[9]) = *(void *)((char *)a2 + v68[9]);
          *(void *)((char *)a1 + v68[10]) = *(void *)((char *)a2 + v68[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5:
          uint64_t v79 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v79 - 8) + 16))(a1, a2, v79);
          long long v80 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v80[5]) = *(_DWORD *)((char *)a2 + v80[5]);
          uint64_t v81 = v80[6];
          long long v82 = (_OWORD *)((char *)a1 + v81);
          uint64_t v83 = (_OWORD *)((char *)a2 + v81);
          long long v84 = v83[3];
          v82[2] = v83[2];
          v82[3] = v84;
          long long v85 = v83[1];
          *long long v82 = *v83;
          v82[1] = v85;
          uint64_t v86 = v80[7];
          long long v87 = (void *)((char *)a1 + v86);
          uint64_t v88 = (void *)((char *)a2 + v86);
          uint64_t v90 = *v88;
          uint64_t v89 = v88[1];
          *long long v87 = v90;
          v87[1] = v89;
          *(void *)((char *)a1 + v80[8]) = *(void *)((char *)a2 + v80[8]);
          *(void *)((char *)a1 + v80[9]) = *(void *)((char *)a2 + v80[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v7 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
          uint64_t v8 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)((char *)a1 + v8[5]) = *(_DWORD *)((char *)a2 + v8[5]);
          uint64_t v9 = v8[6];
          unsigned __int8 v10 = (_OWORD *)((char *)a1 + v9);
          uint64_t v11 = (_OWORD *)((char *)a2 + v9);
          long long v12 = v11[3];
          uint64_t v10[2] = v11[2];
          v10[3] = v12;
          long long v13 = v11[1];
          *unsigned __int8 v10 = *v11;
          v10[1] = v13;
          uint64_t v14 = v8[7];
          uint64_t v15 = (void *)((char *)a1 + v14);
          uint64_t v16 = (void *)((char *)a2 + v14);
          uint64_t v18 = *v16;
          uint64_t v17 = v16[1];
          *uint64_t v15 = v18;
          v15[1] = v17;
          *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
          *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v170 = sub_10000F214(&qword_100520120);
      uint64_t v171 = *(int *)(v170 + 48);
      id v172 = (char *)a1 + v171;
      long long v173 = (char *)a2 + v171;
      id v174 = *(id *)v173;
      unsigned __int8 v175 = (void *)*((void *)v173 + 1);
      uint64_t v176 = *((void *)v173 + 2);
      unsigned __int8 v177 = v173[24];
      sub_1000506C4(*(id *)v173, v175, v176, v177);
      *(void *)id v172 = v174;
      *((void *)v172 + 1) = v175;
      *((void *)v172 + 2) = v176;
      v172[24] = v177;
      uint64_t v178 = *(int *)(v170 + 64);
      id v179 = (char *)a1 + v178;
      unint64_t v180 = (char *)a2 + v178;
      id v181 = *(id *)v180;
      id v182 = (void *)*((void *)v180 + 1);
      uint64_t v183 = *((void *)v180 + 2);
      LOBYTE(v175) = v180[24];
      sub_1000506C4(*(id *)v180, v182, v183, v175);
      *(void *)id v179 = v181;
      *((void *)v179 + 1) = v182;
      *((void *)v179 + 2) = v183;
      v179[24] = (char)v175;
    }
    else
    {
      switch(v6)
      {
        case 1:
          uint64_t v91 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v91 - 8) + 16))(a1, a2, v91);
          uint64_t v92 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)((char *)a1 + v92[5]) = *(_DWORD *)((char *)a2 + v92[5]);
          uint64_t v93 = v92[6];
          uint64_t v94 = (_OWORD *)((char *)a1 + v93);
          uint64_t v95 = (_OWORD *)((char *)a2 + v93);
          long long v96 = v95[3];
          uint64_t v94[2] = v95[2];
          v94[3] = v96;
          long long v97 = v95[1];
          *uint64_t v94 = *v95;
          v94[1] = v97;
          *(void *)((char *)a1 + v92[7]) = *(void *)((char *)a2 + v92[7]);
          *(void *)((char *)a1 + v92[8]) = *(void *)((char *)a2 + v92[8]);
          *(void *)((char *)a1 + v92[9]) = *(void *)((char *)a2 + v92[9]);
          *((unsigned char *)a1 + v92[10]) = *((unsigned char *)a2 + v92[10]);
          uint64_t v98 = v92[11];
          uint64_t v99 = (void *)((char *)a1 + v98);
          uint64_t v100 = (void *)((char *)a2 + v98);
          uint64_t v101 = v100[1];
          *uint64_t v99 = *v100;
          v99[1] = v101;
          uint64_t v102 = v92[12];
          uint64_t v103 = (void *)((char *)a1 + v102);
          uint64_t v104 = (void *)((char *)a2 + v102);
          uint64_t v105 = v104[1];
          *uint64_t v103 = *v104;
          v103[1] = v105;
          uint64_t v106 = v92[13];
          __dsta = (char *)a1 + v106;
          uint64_t v186 = (char *)a2 + v106;
          uint64_t v107 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v108 = *(void *)(v107 - 8);
          long long v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v109(v186, 1, v107))
          {
            uint64_t v110 = sub_10000F214(&qword_100524BD0);
            memcpy(__dsta, v186, *(void *)(*(void *)(v110 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v108 + 16))(__dsta, v186, v107);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(__dsta, 0, 1, v107);
          }
          uint64_t v160 = v92[14];
          id v161 = (char *)a1 + v160;
          uint64_t v162 = (char *)a2 + v160;
          unint64_t v163 = *((void *)v162 + 1);
          if (v163 >> 60 == 15)
          {
            *(_OWORD *)id v161 = *(_OWORD *)v162;
          }
          else
          {
            uint64_t v164 = *(void *)v162;
            sub_100038528(*(void *)v162, *((void *)v162 + 1));
            *(void *)id v161 = v164;
            *((void *)v161 + 1) = v163;
          }
          uint64_t v165 = v92[15];
          uint64_t v166 = (void *)((char *)a1 + v165);
          uint64_t v167 = (void *)((char *)a2 + v165);
          if (*v167)
          {
            uint64_t v168 = v167[1];
            uint64_t v169 = v167[2];
            *uint64_t v166 = *v167;
            v166[1] = v168;
            v166[2] = v169;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
            v166[2] = v167[2];
          }
          break;
        case 2:
          uint64_t v111 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v111 - 8) + 16))(a1, a2, v111);
          uint64_t v112 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v112[5]) = *(_DWORD *)((char *)a2 + v112[5]);
          uint64_t v113 = v112[6];
          long long v114 = (_OWORD *)((char *)a1 + v113);
          id v115 = (_OWORD *)((char *)a2 + v113);
          long long v116 = v115[3];
          v114[2] = v115[2];
          v114[3] = v116;
          long long v117 = v115[1];
          *long long v114 = *v115;
          v114[1] = v117;
          uint64_t v118 = v112[7];
          uint64_t v119 = (void *)((char *)a1 + v118);
          uint64_t v120 = (void *)((char *)a2 + v118);
          uint64_t v122 = *v120;
          uint64_t v121 = v120[1];
          *uint64_t v119 = v122;
          v119[1] = v121;
          *(void *)((char *)a1 + v112[8]) = *(void *)((char *)a2 + v112[8]);
          *(void *)((char *)a1 + v112[9]) = *(void *)((char *)a2 + v112[9]);
          *(void *)((char *)a1 + v112[10]) = *(void *)((char *)a2 + v112[10]);
          *(void *)((char *)a1 + v112[11]) = *(void *)((char *)a2 + v112[11]);
          *(void *)((char *)a1 + v112[12]) = *(void *)((char *)a2 + v112[12]);
          uint64_t v123 = v112[13];
          uint64_t v124 = *(void **)((char *)a2 + v123);
          *(void *)((char *)a1 + v123) = v124;
          *((unsigned char *)a1 + v112[14]) = *((unsigned char *)a2 + v112[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v125 = v124;
          break;
        case 3:
        case 4:
          uint64_t v126 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v126 - 8) + 16))(a1, a2, v126);
          uint64_t v127 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)((char *)a1 + v127[5]) = *(_DWORD *)((char *)a2 + v127[5]);
          uint64_t v128 = v127[6];
          uint64_t v129 = (_OWORD *)((char *)a1 + v128);
          long long v130 = (_OWORD *)((char *)a2 + v128);
          long long v131 = v130[3];
          v129[2] = v130[2];
          v129[3] = v131;
          long long v132 = v130[1];
          *uint64_t v129 = *v130;
          v129[1] = v132;
          uint64_t v133 = v127[7];
          long long v134 = (void *)((char *)a1 + v133);
          uint64_t v135 = (void *)((char *)a2 + v133);
          uint64_t v137 = *v135;
          uint64_t v136 = v135[1];
          *long long v134 = v137;
          v134[1] = v136;
          *(void *)((char *)a1 + v127[8]) = *(void *)((char *)a2 + v127[8]);
          *(void *)((char *)a1 + v127[9]) = *(void *)((char *)a2 + v127[9]);
          *(void *)((char *)a1 + v127[10]) = *(void *)((char *)a2 + v127[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5:
          uint64_t v138 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v138 - 8) + 16))(a1, a2, v138);
          uint64_t v139 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v139[5]) = *(_DWORD *)((char *)a2 + v139[5]);
          uint64_t v140 = v139[6];
          unint64_t v141 = (_OWORD *)((char *)a1 + v140);
          uint64_t v142 = (_OWORD *)((char *)a2 + v140);
          long long v143 = v142[3];
          v141[2] = v142[2];
          v141[3] = v143;
          long long v144 = v142[1];
          *unint64_t v141 = *v142;
          v141[1] = v144;
          uint64_t v145 = v139[7];
          uint64_t v146 = (void *)((char *)a1 + v145);
          uint64_t v147 = (void *)((char *)a2 + v145);
          uint64_t v149 = *v147;
          uint64_t v148 = v147[1];
          *uint64_t v146 = v149;
          v146[1] = v148;
          *(void *)((char *)a1 + v139[8]) = *(void *)((char *)a2 + v139[8]);
          *(void *)((char *)a1 + v139[9]) = *(void *)((char *)a2 + v139[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v20 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
          uint64_t v21 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)((char *)a1 + v21[5]) = *(_DWORD *)((char *)a2 + v21[5]);
          uint64_t v22 = v21[6];
          BOOL v23 = (_OWORD *)((char *)a1 + v22);
          uint64_t v24 = (_OWORD *)((char *)a2 + v22);
          long long v25 = v24[3];
          void v23[2] = v24[2];
          v23[3] = v25;
          long long v26 = v24[1];
          _OWORD *v23 = *v24;
          v23[1] = v26;
          uint64_t v27 = v21[7];
          int v28 = (void *)((char *)a1 + v27);
          uint64_t v29 = (void *)((char *)a2 + v27);
          uint64_t v31 = *v29;
          uint64_t v30 = v29[1];
          *int v28 = v31;
          v28[1] = v30;
          *(void *)((char *)a1 + v21[8]) = *(void *)((char *)a2 + v21[8]);
          *(void *)((char *)a1 + v21[9]) = *(void *)((char *)a2 + v21[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_10011DD10(uint64_t a1)
{
  type metadata accessor for GeoLocateState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for CVDetection();
  int v3 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch(v3)
    {
      case 0:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_15;
      case 1:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
        uint64_t v8 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = a1 + v8[13];
        uint64_t v10 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v11 = *(void *)(v10 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
        }
        long long v12 = (uint64_t *)(a1 + v8[14]);
        unint64_t v13 = v12[1];
        if (v13 >> 60 != 15) {
          sub_100038B34(*v12, v13);
        }
        if (*(void *)(a1 + v8[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2:
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
        uint64_t v15 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3:
      case 4:
        uint64_t v4 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5:
        uint64_t v16 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_15:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v17 = sub_10000F214(&qword_100520120);
    sub_10004FFD4(*(void **)(a1 + *(int *)(v17 + 48)), *(void **)(a1 + *(int *)(v17 + 48) + 8), *(void *)(a1 + *(int *)(v17 + 48) + 16), *(unsigned char *)(a1 + *(int *)(v17 + 48) + 24));
    uint64_t v18 = a1 + *(int *)(v17 + 64);
    uint64_t v19 = *(void **)v18;
    uint64_t v20 = *(void **)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    unsigned __int8 v22 = *(unsigned char *)(v18 + 24);
    sub_10004FFD4(v19, v20, v21, v22);
  }
  else
  {
    switch(v3)
    {
      case 0:
        uint64_t v23 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(a1, v23);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_34;
      case 1:
        uint64_t v24 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a1, v24);
        long long v25 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v26 = a1 + v25[13];
        uint64_t v27 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v28 = *(void *)(v27 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27)) {
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
        }
        uint64_t v29 = (uint64_t *)(a1 + v25[14]);
        unint64_t v30 = v29[1];
        if (v30 >> 60 != 15) {
          sub_100038B34(*v29, v30);
        }
        if (!*(void *)(a1 + v25[15])) {
          return;
        }
        swift_bridgeObjectRelease();
LABEL_26:
        swift_release();
        break;
      case 2:
        uint64_t v31 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(a1, v31);
        uint64_t v32 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void **)(a1 + *(int *)(v32 + 52));

        return;
      case 3:
      case 4:
        uint64_t v5 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        goto LABEL_26;
      case 5:
        uint64_t v34 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_34:
        swift_bridgeObjectRelease();
        return;
      default:
        return;
    }
  }
}

uint64_t sub_10011E410(uint64_t a1, uint64_t a2)
{
  type metadata accessor for GeoLocateState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for CVDetection();
  int v5 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch(v5)
    {
      case 1:
        uint64_t v30 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(a1, a2, v30);
        uint64_t v31 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v31[5]) = *(_DWORD *)(a2 + v31[5]);
        uint64_t v32 = v31[6];
        uint64_t v33 = (_OWORD *)(a1 + v32);
        uint64_t v34 = (_OWORD *)(a2 + v32);
        long long v35 = v34[3];
        v33[2] = v34[2];
        v33[3] = v35;
        long long v36 = v34[1];
        _OWORD *v33 = *v34;
        v33[1] = v36;
        *(void *)(a1 + v31[7]) = *(void *)(a2 + v31[7]);
        *(void *)(a1 + v31[8]) = *(void *)(a2 + v31[8]);
        *(void *)(a1 + v31[9]) = *(void *)(a2 + v31[9]);
        *(unsigned char *)(a1 + v31[10]) = *(unsigned char *)(a2 + v31[10]);
        uint64_t v37 = v31[11];
        long long v38 = (void *)(a1 + v37);
        uint64_t v39 = (void *)(a2 + v37);
        uint64_t v40 = v39[1];
        *long long v38 = *v39;
        v38[1] = v40;
        uint64_t v41 = v31[12];
        uint64_t v42 = (void *)(a1 + v41);
        uint64_t v43 = (void *)(a2 + v41);
        uint64_t v44 = v43[1];
        *uint64_t v42 = *v43;
        v42[1] = v44;
        uint64_t v45 = v31[13];
        uint64_t v183 = (const void *)(a2 + v45);
        __dst = (void *)(a1 + v45);
        uint64_t v46 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v47 = *(void *)(v46 - 8);
        uint64_t v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v48(v183, 1, v46))
        {
          uint64_t v49 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v183, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v47 + 16))(__dst, v183, v46);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
        }
        uint64_t v148 = v31[14];
        uint64_t v149 = a1 + v148;
        uint64_t v150 = (uint64_t *)(a2 + v148);
        unint64_t v151 = v150[1];
        if (v151 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
        }
        else
        {
          uint64_t v152 = *v150;
          sub_100038528(*v150, v150[1]);
          *(void *)uint64_t v149 = v152;
          *(void *)(v149 + 8) = v151;
        }
        uint64_t v153 = v31[15];
        uint64_t v154 = (void *)(a1 + v153);
        uint64_t v155 = (void *)(a2 + v153);
        if (*v155)
        {
          uint64_t v156 = v155[1];
          uint64_t v157 = v155[2];
          *uint64_t v154 = *v155;
          v154[1] = v156;
          v154[2] = v157;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v154 = *(_OWORD *)v155;
          v154[2] = v155[2];
        }
        break;
      case 2:
        uint64_t v50 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(a1, a2, v50);
        uint64_t v51 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v51[5]) = *(_DWORD *)(a2 + v51[5]);
        uint64_t v52 = v51[6];
        long long v53 = (_OWORD *)(a1 + v52);
        uint64_t v54 = (_OWORD *)(a2 + v52);
        long long v55 = v54[3];
        v53[2] = v54[2];
        v53[3] = v55;
        long long v56 = v54[1];
        *long long v53 = *v54;
        v53[1] = v56;
        uint64_t v57 = v51[7];
        long long v58 = (void *)(a1 + v57);
        uint64_t v59 = (uint64_t *)(a2 + v57);
        uint64_t v61 = *v59;
        uint64_t v60 = v59[1];
        *long long v58 = v61;
        v58[1] = v60;
        *(void *)(a1 + v51[8]) = *(void *)(a2 + v51[8]);
        *(void *)(a1 + v51[9]) = *(void *)(a2 + v51[9]);
        *(void *)(a1 + v51[10]) = *(void *)(a2 + v51[10]);
        *(void *)(a1 + v51[11]) = *(void *)(a2 + v51[11]);
        *(void *)(a1 + v51[12]) = *(void *)(a2 + v51[12]);
        uint64_t v62 = v51[13];
        uint64_t v63 = *(void **)(a2 + v62);
        *(void *)(a1 + v62) = v63;
        *(unsigned char *)(a1 + v51[14]) = *(unsigned char *)(a2 + v51[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v64 = v63;
        break;
      case 3:
      case 4:
        uint64_t v65 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16))(a1, a2, v65);
        id v66 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v66[5]) = *(_DWORD *)(a2 + v66[5]);
        uint64_t v67 = v66[6];
        long long v68 = (_OWORD *)(a1 + v67);
        uint64_t v69 = (_OWORD *)(a2 + v67);
        long long v70 = v69[3];
        void v68[2] = v69[2];
        v68[3] = v70;
        long long v71 = v69[1];
        *long long v68 = *v69;
        v68[1] = v71;
        uint64_t v72 = v66[7];
        long long v73 = (void *)(a1 + v72);
        uint64_t v74 = (uint64_t *)(a2 + v72);
        uint64_t v76 = *v74;
        uint64_t v75 = v74[1];
        *long long v73 = v76;
        v73[1] = v75;
        *(void *)(a1 + v66[8]) = *(void *)(a2 + v66[8]);
        *(void *)(a1 + v66[9]) = *(void *)(a2 + v66[9]);
        *(void *)(a1 + v66[10]) = *(void *)(a2 + v66[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5:
        uint64_t v77 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(a1, a2, v77);
        uint64_t v78 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v78[5]) = *(_DWORD *)(a2 + v78[5]);
        uint64_t v79 = v78[6];
        long long v80 = (_OWORD *)(a1 + v79);
        uint64_t v81 = (_OWORD *)(a2 + v79);
        long long v82 = v81[3];
        v80[2] = v81[2];
        void v80[3] = v82;
        long long v83 = v81[1];
        *long long v80 = *v81;
        v80[1] = v83;
        uint64_t v84 = v78[7];
        long long v85 = (void *)(a1 + v84);
        uint64_t v86 = (uint64_t *)(a2 + v84);
        uint64_t v88 = *v86;
        uint64_t v87 = v86[1];
        *long long v85 = v88;
        v85[1] = v87;
        *(void *)(a1 + v78[8]) = *(void *)(a2 + v78[8]);
        *(void *)(a1 + v78[9]) = *(void *)(a2 + v78[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        uint64_t v10 = (_OWORD *)(a2 + v8);
        long long v11 = v10[3];
        v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v12;
        uint64_t v13 = v7[7];
        uint64_t v14 = (void *)(a1 + v13);
        uint64_t v15 = (uint64_t *)(a2 + v13);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        *uint64_t v14 = v17;
        v14[1] = v16;
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v168 = sub_10000F214(&qword_100520120);
    uint64_t v169 = *(int *)(v168 + 48);
    uint64_t v170 = a1 + v169;
    uint64_t v171 = a2 + v169;
    id v172 = *(id *)v171;
    long long v173 = *(void **)(v171 + 8);
    uint64_t v174 = *(void *)(v171 + 16);
    unsigned __int8 v175 = *(unsigned char *)(v171 + 24);
    sub_1000506C4(*(id *)v171, v173, v174, v175);
    *(void *)uint64_t v170 = v172;
    *(void *)(v170 + 8) = v173;
    *(void *)(v170 + 16) = v174;
    *(unsigned char *)(v170 + 24) = v175;
    uint64_t v176 = *(int *)(v168 + 64);
    uint64_t v177 = a1 + v176;
    uint64_t v178 = a2 + v176;
    id v179 = *(id *)v178;
    unint64_t v180 = *(void **)(v178 + 8);
    uint64_t v181 = *(void *)(v178 + 16);
    LOBYTE(v173) = *(unsigned char *)(v178 + 24);
    sub_1000506C4(*(id *)v178, v180, v181, v173);
    *(void *)uint64_t v177 = v179;
    *(void *)(v177 + 8) = v180;
    *(void *)(v177 + 16) = v181;
    *(unsigned char *)(v177 + 24) = (_BYTE)v173;
  }
  else
  {
    switch(v5)
    {
      case 1:
        uint64_t v89 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 16))(a1, a2, v89);
        uint64_t v90 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v90[5]) = *(_DWORD *)(a2 + v90[5]);
        uint64_t v91 = v90[6];
        uint64_t v92 = (_OWORD *)(a1 + v91);
        uint64_t v93 = (_OWORD *)(a2 + v91);
        long long v94 = v93[3];
        v92[2] = v93[2];
        v92[3] = v94;
        long long v95 = v93[1];
        _OWORD *v92 = *v93;
        v92[1] = v95;
        *(void *)(a1 + v90[7]) = *(void *)(a2 + v90[7]);
        *(void *)(a1 + v90[8]) = *(void *)(a2 + v90[8]);
        *(void *)(a1 + v90[9]) = *(void *)(a2 + v90[9]);
        *(unsigned char *)(a1 + v90[10]) = *(unsigned char *)(a2 + v90[10]);
        uint64_t v96 = v90[11];
        long long v97 = (void *)(a1 + v96);
        uint64_t v98 = (void *)(a2 + v96);
        uint64_t v99 = v98[1];
        *long long v97 = *v98;
        v97[1] = v99;
        uint64_t v100 = v90[12];
        uint64_t v101 = (void *)(a1 + v100);
        uint64_t v102 = (void *)(a2 + v100);
        uint64_t v103 = v102[1];
        *uint64_t v101 = *v102;
        v101[1] = v103;
        uint64_t v104 = v90[13];
        uint64_t v184 = (const void *)(a2 + v104);
        __dsta = (void *)(a1 + v104);
        uint64_t v105 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v106 = *(void *)(v105 - 8);
        uint64_t v107 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v106 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v107(v184, 1, v105))
        {
          uint64_t v108 = sub_10000F214(&qword_100524BD0);
          memcpy(__dsta, v184, *(void *)(*(void *)(v108 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v106 + 16))(__dsta, v184, v105);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(__dsta, 0, 1, v105);
        }
        uint64_t v158 = v90[14];
        uint64_t v159 = a1 + v158;
        uint64_t v160 = (uint64_t *)(a2 + v158);
        unint64_t v161 = v160[1];
        if (v161 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v159 = *(_OWORD *)v160;
        }
        else
        {
          uint64_t v162 = *v160;
          sub_100038528(*v160, v160[1]);
          *(void *)uint64_t v159 = v162;
          *(void *)(v159 + 8) = v161;
        }
        uint64_t v163 = v90[15];
        uint64_t v164 = (void *)(a1 + v163);
        uint64_t v165 = (void *)(a2 + v163);
        if (*v165)
        {
          uint64_t v166 = v165[1];
          uint64_t v167 = v165[2];
          *uint64_t v164 = *v165;
          v164[1] = v166;
          v164[2] = v167;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
          v164[2] = v165[2];
        }
        break;
      case 2:
        uint64_t v109 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 16))(a1, a2, v109);
        uint64_t v110 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v110[5]) = *(_DWORD *)(a2 + v110[5]);
        uint64_t v111 = v110[6];
        uint64_t v112 = (_OWORD *)(a1 + v111);
        uint64_t v113 = (_OWORD *)(a2 + v111);
        long long v114 = v113[3];
        v112[2] = v113[2];
        v112[3] = v114;
        long long v115 = v113[1];
        *uint64_t v112 = *v113;
        v112[1] = v115;
        uint64_t v116 = v110[7];
        long long v117 = (void *)(a1 + v116);
        uint64_t v118 = (uint64_t *)(a2 + v116);
        uint64_t v120 = *v118;
        uint64_t v119 = v118[1];
        void *v117 = v120;
        v117[1] = v119;
        *(void *)(a1 + v110[8]) = *(void *)(a2 + v110[8]);
        *(void *)(a1 + v110[9]) = *(void *)(a2 + v110[9]);
        *(void *)(a1 + v110[10]) = *(void *)(a2 + v110[10]);
        *(void *)(a1 + v110[11]) = *(void *)(a2 + v110[11]);
        *(void *)(a1 + v110[12]) = *(void *)(a2 + v110[12]);
        uint64_t v121 = v110[13];
        uint64_t v122 = *(void **)(a2 + v121);
        *(void *)(a1 + v121) = v122;
        *(unsigned char *)(a1 + v110[14]) = *(unsigned char *)(a2 + v110[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v123 = v122;
        break;
      case 3:
      case 4:
        uint64_t v124 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v124 - 8) + 16))(a1, a2, v124);
        id v125 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v125[5]) = *(_DWORD *)(a2 + v125[5]);
        uint64_t v126 = v125[6];
        uint64_t v127 = (_OWORD *)(a1 + v126);
        uint64_t v128 = (_OWORD *)(a2 + v126);
        long long v129 = v128[3];
        v127[2] = v128[2];
        v127[3] = v129;
        long long v130 = v128[1];
        *uint64_t v127 = *v128;
        v127[1] = v130;
        uint64_t v131 = v125[7];
        long long v132 = (void *)(a1 + v131);
        uint64_t v133 = (uint64_t *)(a2 + v131);
        uint64_t v135 = *v133;
        uint64_t v134 = v133[1];
        *long long v132 = v135;
        v132[1] = v134;
        *(void *)(a1 + v125[8]) = *(void *)(a2 + v125[8]);
        *(void *)(a1 + v125[9]) = *(void *)(a2 + v125[9]);
        *(void *)(a1 + v125[10]) = *(void *)(a2 + v125[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5:
        uint64_t v136 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 16))(a1, a2, v136);
        uint64_t v137 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v137[5]) = *(_DWORD *)(a2 + v137[5]);
        uint64_t v138 = v137[6];
        uint64_t v139 = (_OWORD *)(a1 + v138);
        uint64_t v140 = (_OWORD *)(a2 + v138);
        long long v141 = v140[3];
        v139[2] = v140[2];
        v139[3] = v141;
        long long v142 = v140[1];
        _OWORD *v139 = *v140;
        v139[1] = v142;
        uint64_t v143 = v137[7];
        long long v144 = (void *)(a1 + v143);
        uint64_t v145 = (uint64_t *)(a2 + v143);
        uint64_t v147 = *v145;
        uint64_t v146 = v145[1];
        void *v144 = v147;
        v144[1] = v146;
        *(void *)(a1 + v137[8]) = *(void *)(a2 + v137[8]);
        *(void *)(a1 + v137[9]) = *(void *)(a2 + v137[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v19[5]) = *(_DWORD *)(a2 + v19[5]);
        uint64_t v20 = v19[6];
        uint64_t v21 = (_OWORD *)(a1 + v20);
        unsigned __int8 v22 = (_OWORD *)(a2 + v20);
        long long v23 = v22[3];
        v21[2] = v22[2];
        uint64_t v21[3] = v23;
        long long v24 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v24;
        uint64_t v25 = v19[7];
        uint64_t v26 = (void *)(a1 + v25);
        uint64_t v27 = (uint64_t *)(a2 + v25);
        uint64_t v29 = *v27;
        uint64_t v28 = v27[1];
        *uint64_t v26 = v29;
        v26[1] = v28;
        *(void *)(a1 + v19[8]) = *(void *)(a2 + v19[8]);
        *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10011F24C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10011CE0C(a1, type metadata accessor for GeoLocateState);
    type metadata accessor for GeoLocateState(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for CVDetection();
    int v5 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      switch(v5)
      {
        case 1:
          uint64_t v28 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(a1, a2, v28);
          uint64_t v29 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(a1 + v29[5]) = *(_DWORD *)(a2 + v29[5]);
          uint64_t v30 = v29[6];
          uint64_t v31 = (_OWORD *)(a1 + v30);
          uint64_t v32 = (_OWORD *)(a2 + v30);
          long long v34 = v32[2];
          long long v33 = v32[3];
          long long v35 = v32[1];
          *uint64_t v31 = *v32;
          v31[1] = v35;
          v31[2] = v34;
          v31[3] = v33;
          *(void *)(a1 + v29[7]) = *(void *)(a2 + v29[7]);
          *(void *)(a1 + v29[8]) = *(void *)(a2 + v29[8]);
          *(void *)(a1 + v29[9]) = *(void *)(a2 + v29[9]);
          *(unsigned char *)(a1 + v29[10]) = *(unsigned char *)(a2 + v29[10]);
          uint64_t v36 = v29[11];
          uint64_t v37 = (void *)(a1 + v36);
          long long v38 = (void *)(a2 + v36);
          *uint64_t v37 = *v38;
          v37[1] = v38[1];
          uint64_t v39 = v29[12];
          uint64_t v40 = (void *)(a1 + v39);
          uint64_t v41 = (void *)(a2 + v39);
          *uint64_t v40 = *v41;
          v40[1] = v41[1];
          uint64_t v42 = v29[13];
          long long v173 = (const void *)(a2 + v42);
          __dst = (void *)(a1 + v42);
          uint64_t v43 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v44 = *(void *)(v43 - 8);
          uint64_t v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v45(v173, 1, v43))
          {
            uint64_t v46 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v173, *(void *)(*(void *)(v46 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v44 + 16))(__dst, v173, v43);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(__dst, 0, 1, v43);
          }
          uint64_t v138 = v29[14];
          uint64_t v139 = a1 + v138;
          uint64_t v140 = (uint64_t *)(a2 + v138);
          unint64_t v141 = v140[1];
          if (v141 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
          }
          else
          {
            uint64_t v142 = *v140;
            sub_100038528(*v140, v140[1]);
            *(void *)uint64_t v139 = v142;
            *(void *)(v139 + 8) = v141;
          }
          uint64_t v143 = v29[15];
          long long v144 = (void *)(a1 + v143);
          uint64_t v145 = (void *)(a2 + v143);
          if (*v145)
          {
            void *v144 = *v145;
            uint64_t v146 = v145[2];
            v144[1] = v145[1];
            v144[2] = v146;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v156 = *(_OWORD *)v145;
            v144[2] = v145[2];
            *(_OWORD *)long long v144 = v156;
          }
          break;
        case 2:
          uint64_t v47 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(a1, a2, v47);
          uint64_t v48 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(a1 + v48[5]) = *(_DWORD *)(a2 + v48[5]);
          uint64_t v49 = v48[6];
          uint64_t v50 = (_OWORD *)(a1 + v49);
          uint64_t v51 = (_OWORD *)(a2 + v49);
          long long v53 = v51[2];
          long long v52 = v51[3];
          long long v54 = v51[1];
          _OWORD *v50 = *v51;
          v50[1] = v54;
          v50[2] = v53;
          v50[3] = v52;
          uint64_t v55 = v48[7];
          long long v56 = (void *)(a1 + v55);
          uint64_t v57 = (void *)(a2 + v55);
          void *v56 = *v57;
          v56[1] = v57[1];
          *(void *)(a1 + v48[8]) = *(void *)(a2 + v48[8]);
          *(void *)(a1 + v48[9]) = *(void *)(a2 + v48[9]);
          *(void *)(a1 + v48[10]) = *(void *)(a2 + v48[10]);
          *(void *)(a1 + v48[11]) = *(void *)(a2 + v48[11]);
          *(void *)(a1 + v48[12]) = *(void *)(a2 + v48[12]);
          uint64_t v58 = v48[13];
          uint64_t v59 = *(void **)(a2 + v58);
          *(void *)(a1 + v58) = v59;
          *(unsigned char *)(a1 + v48[14]) = *(unsigned char *)(a2 + v48[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v60 = v59;
          break;
        case 3:
        case 4:
          uint64_t v61 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16))(a1, a2, v61);
          uint64_t v62 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(a1 + v62[5]) = *(_DWORD *)(a2 + v62[5]);
          uint64_t v63 = v62[6];
          id v64 = (_OWORD *)(a1 + v63);
          uint64_t v65 = (_OWORD *)(a2 + v63);
          long long v67 = v65[2];
          long long v66 = v65[3];
          long long v68 = v65[1];
          *id v64 = *v65;
          v64[1] = v68;
          v64[2] = v67;
          v64[3] = v66;
          uint64_t v69 = v62[7];
          long long v70 = (void *)(a1 + v69);
          long long v71 = (void *)(a2 + v69);
          *long long v70 = *v71;
          v70[1] = v71[1];
          *(void *)(a1 + v62[8]) = *(void *)(a2 + v62[8]);
          *(void *)(a1 + v62[9]) = *(void *)(a2 + v62[9]);
          *(void *)(a1 + v62[10]) = *(void *)(a2 + v62[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5:
          uint64_t v72 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(a1, a2, v72);
          long long v73 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(a1 + v73[5]) = *(_DWORD *)(a2 + v73[5]);
          uint64_t v74 = v73[6];
          uint64_t v75 = (_OWORD *)(a1 + v74);
          uint64_t v76 = (_OWORD *)(a2 + v74);
          long long v78 = v76[2];
          long long v77 = v76[3];
          long long v79 = v76[1];
          *uint64_t v75 = *v76;
          v75[1] = v79;
          v75[2] = v78;
          uint64_t v75[3] = v77;
          uint64_t v80 = v73[7];
          uint64_t v81 = (void *)(a1 + v80);
          long long v82 = (void *)(a2 + v80);
          *uint64_t v81 = *v82;
          v81[1] = v82[1];
          *(void *)(a1 + v73[8]) = *(void *)(a2 + v73[8]);
          *(void *)(a1 + v73[9]) = *(void *)(a2 + v73[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v6 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
          uint64_t v8 = v7[6];
          uint64_t v9 = (_OWORD *)(a1 + v8);
          uint64_t v10 = (_OWORD *)(a2 + v8);
          long long v12 = v10[2];
          long long v11 = v10[3];
          long long v13 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v13;
          v9[2] = v12;
          v9[3] = v11;
          uint64_t v14 = v7[7];
          uint64_t v15 = (void *)(a1 + v14);
          uint64_t v16 = (void *)(a2 + v14);
          *uint64_t v15 = *v16;
          v15[1] = v16[1];
          *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
          *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v157 = sub_10000F214(&qword_100520120);
      uint64_t v158 = *(int *)(v157 + 48);
      uint64_t v159 = a1 + v158;
      uint64_t v160 = a2 + v158;
      id v161 = *(id *)v160;
      uint64_t v162 = *(void **)(v160 + 8);
      uint64_t v163 = *(void *)(v160 + 16);
      unsigned __int8 v164 = *(unsigned char *)(v160 + 24);
      sub_1000506C4(*(id *)v160, v162, v163, v164);
      *(void *)uint64_t v159 = v161;
      *(void *)(v159 + 8) = v162;
      *(void *)(v159 + 16) = v163;
      *(unsigned char *)(v159 + 24) = v164;
      uint64_t v165 = *(int *)(v157 + 64);
      uint64_t v166 = a1 + v165;
      uint64_t v167 = a2 + v165;
      id v168 = *(id *)v167;
      uint64_t v169 = *(void **)(v167 + 8);
      uint64_t v170 = *(void *)(v167 + 16);
      LOBYTE(v162) = *(unsigned char *)(v167 + 24);
      sub_1000506C4(*(id *)v167, v169, v170, v162);
      *(void *)uint64_t v166 = v168;
      *(void *)(v166 + 8) = v169;
      *(void *)(v166 + 16) = v170;
      *(unsigned char *)(v166 + 24) = (_BYTE)v162;
    }
    else
    {
      switch(v5)
      {
        case 1:
          uint64_t v83 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16))(a1, a2, v83);
          uint64_t v84 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(a1 + v84[5]) = *(_DWORD *)(a2 + v84[5]);
          uint64_t v85 = v84[6];
          uint64_t v86 = (_OWORD *)(a1 + v85);
          uint64_t v87 = (_OWORD *)(a2 + v85);
          long long v89 = v87[2];
          long long v88 = v87[3];
          long long v90 = v87[1];
          *uint64_t v86 = *v87;
          v86[1] = v90;
          v86[2] = v89;
          v86[3] = v88;
          *(void *)(a1 + v84[7]) = *(void *)(a2 + v84[7]);
          *(void *)(a1 + v84[8]) = *(void *)(a2 + v84[8]);
          *(void *)(a1 + v84[9]) = *(void *)(a2 + v84[9]);
          *(unsigned char *)(a1 + v84[10]) = *(unsigned char *)(a2 + v84[10]);
          uint64_t v91 = v84[11];
          uint64_t v92 = (void *)(a1 + v91);
          uint64_t v93 = (void *)(a2 + v91);
          void *v92 = *v93;
          v92[1] = v93[1];
          uint64_t v94 = v84[12];
          long long v95 = (void *)(a1 + v94);
          uint64_t v96 = (void *)(a2 + v94);
          void *v95 = *v96;
          v95[1] = v96[1];
          uint64_t v97 = v84[13];
          uint64_t v174 = (const void *)(a2 + v97);
          __dsta = (void *)(a1 + v97);
          uint64_t v98 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v99 = *(void *)(v98 - 8);
          uint64_t v100 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v99 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v100(v174, 1, v98))
          {
            uint64_t v101 = sub_10000F214(&qword_100524BD0);
            memcpy(__dsta, v174, *(void *)(*(void *)(v101 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v99 + 16))(__dsta, v174, v98);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(__dsta, 0, 1, v98);
          }
          uint64_t v147 = v84[14];
          uint64_t v148 = a1 + v147;
          uint64_t v149 = (uint64_t *)(a2 + v147);
          unint64_t v150 = v149[1];
          if (v150 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
          }
          else
          {
            uint64_t v151 = *v149;
            sub_100038528(*v149, v149[1]);
            *(void *)uint64_t v148 = v151;
            *(void *)(v148 + 8) = v150;
          }
          uint64_t v152 = v84[15];
          uint64_t v153 = (void *)(a1 + v152);
          uint64_t v154 = (void *)(a2 + v152);
          if (*v154)
          {
            *uint64_t v153 = *v154;
            uint64_t v155 = v154[2];
            v153[1] = v154[1];
            v153[2] = v155;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v171 = *(_OWORD *)v154;
            v153[2] = v154[2];
            *(_OWORD *)uint64_t v153 = v171;
          }
          break;
        case 2:
          uint64_t v102 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 16))(a1, a2, v102);
          uint64_t v103 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(a1 + v103[5]) = *(_DWORD *)(a2 + v103[5]);
          uint64_t v104 = v103[6];
          uint64_t v105 = (_OWORD *)(a1 + v104);
          uint64_t v106 = (_OWORD *)(a2 + v104);
          long long v108 = v106[2];
          long long v107 = v106[3];
          long long v109 = v106[1];
          *uint64_t v105 = *v106;
          v105[1] = v109;
          _OWORD v105[2] = v108;
          v105[3] = v107;
          uint64_t v110 = v103[7];
          uint64_t v111 = (void *)(a1 + v110);
          uint64_t v112 = (void *)(a2 + v110);
          *uint64_t v111 = *v112;
          v111[1] = v112[1];
          *(void *)(a1 + v103[8]) = *(void *)(a2 + v103[8]);
          *(void *)(a1 + v103[9]) = *(void *)(a2 + v103[9]);
          *(void *)(a1 + v103[10]) = *(void *)(a2 + v103[10]);
          *(void *)(a1 + v103[11]) = *(void *)(a2 + v103[11]);
          *(void *)(a1 + v103[12]) = *(void *)(a2 + v103[12]);
          uint64_t v113 = v103[13];
          long long v114 = *(void **)(a2 + v113);
          *(void *)(a1 + v113) = v114;
          *(unsigned char *)(a1 + v103[14]) = *(unsigned char *)(a2 + v103[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v115 = v114;
          break;
        case 3:
        case 4:
          uint64_t v116 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 16))(a1, a2, v116);
          long long v117 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(a1 + v117[5]) = *(_DWORD *)(a2 + v117[5]);
          uint64_t v118 = v117[6];
          uint64_t v119 = (_OWORD *)(a1 + v118);
          uint64_t v120 = (_OWORD *)(a2 + v118);
          long long v122 = v120[2];
          long long v121 = v120[3];
          long long v123 = v120[1];
          *uint64_t v119 = *v120;
          v119[1] = v123;
          v119[2] = v122;
          v119[3] = v121;
          uint64_t v124 = v117[7];
          id v125 = (void *)(a1 + v124);
          uint64_t v126 = (void *)(a2 + v124);
          *id v125 = *v126;
          v125[1] = v126[1];
          *(void *)(a1 + v117[8]) = *(void *)(a2 + v117[8]);
          *(void *)(a1 + v117[9]) = *(void *)(a2 + v117[9]);
          *(void *)(a1 + v117[10]) = *(void *)(a2 + v117[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5:
          uint64_t v127 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 16))(a1, a2, v127);
          uint64_t v128 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(a1 + v128[5]) = *(_DWORD *)(a2 + v128[5]);
          uint64_t v129 = v128[6];
          long long v130 = (_OWORD *)(a1 + v129);
          uint64_t v131 = (_OWORD *)(a2 + v129);
          long long v133 = v131[2];
          long long v132 = v131[3];
          long long v134 = v131[1];
          *long long v130 = *v131;
          v130[1] = v134;
          void v130[2] = v133;
          v130[3] = v132;
          uint64_t v135 = v128[7];
          uint64_t v136 = (void *)(a1 + v135);
          uint64_t v137 = (void *)(a2 + v135);
          void *v136 = *v137;
          v136[1] = v137[1];
          *(void *)(a1 + v128[8]) = *(void *)(a2 + v128[8]);
          *(void *)(a1 + v128[9]) = *(void *)(a2 + v128[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v17 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
          uint64_t v18 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(a1 + v18[5]) = *(_DWORD *)(a2 + v18[5]);
          uint64_t v19 = v18[6];
          uint64_t v20 = (_OWORD *)(a1 + v19);
          uint64_t v21 = (_OWORD *)(a2 + v19);
          long long v23 = v21[2];
          long long v22 = v21[3];
          long long v24 = v21[1];
          *uint64_t v20 = *v21;
          v20[1] = v24;
          v20[2] = v23;
          v20[3] = v22;
          uint64_t v25 = v18[7];
          uint64_t v26 = (void *)(a1 + v25);
          uint64_t v27 = (void *)(a2 + v25);
          *uint64_t v26 = *v27;
          v26[1] = v27[1];
          *(void *)(a1 + v18[8]) = *(void *)(a2 + v18[8]);
          *(void *)(a1 + v18[9]) = *(void *)(a2 + v18[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10012011C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for GeoLocateState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for CVDetection();
  int v5 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    switch(v5)
    {
      case 1:
        uint64_t v20 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
        uint64_t v21 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v21[5]) = *(_DWORD *)(a2 + v21[5]);
        uint64_t v22 = v21[6];
        long long v23 = (_OWORD *)(a1 + v22);
        long long v24 = (_OWORD *)(a2 + v22);
        long long v25 = v24[3];
        void v23[2] = v24[2];
        v23[3] = v25;
        long long v26 = v24[1];
        _OWORD *v23 = *v24;
        v23[1] = v26;
        *(void *)(a1 + v21[7]) = *(void *)(a2 + v21[7]);
        *(void *)(a1 + v21[8]) = *(void *)(a2 + v21[8]);
        *(void *)(a1 + v21[9]) = *(void *)(a2 + v21[9]);
        *(unsigned char *)(a1 + v21[10]) = *(unsigned char *)(a2 + v21[10]);
        *(_OWORD *)(a1 + v21[11]) = *(_OWORD *)(a2 + v21[11]);
        *(_OWORD *)(a1 + v21[12]) = *(_OWORD *)(a2 + v21[12]);
        uint64_t v27 = v21[13];
        uint64_t v28 = (void *)(a1 + v27);
        uint64_t v29 = (const void *)(a2 + v27);
        uint64_t v30 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v31 = *(void *)(v30 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          uint64_t v32 = sub_10000F214(&qword_100524BD0);
          memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        }
        *(_OWORD *)(a1 + v21[14]) = *(_OWORD *)(a2 + v21[14]);
        uint64_t v88 = v21[15];
        uint64_t v89 = a1 + v88;
        uint64_t v90 = a2 + v88;
        *(void *)(v89 + 16) = *(void *)(v90 + 16);
        *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        break;
      case 2:
        uint64_t v33 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
        long long v34 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v34[5]) = *(_DWORD *)(a2 + v34[5]);
        uint64_t v35 = v34[6];
        uint64_t v36 = (_OWORD *)(a1 + v35);
        uint64_t v37 = (_OWORD *)(a2 + v35);
        long long v38 = v37[3];
        v36[2] = v37[2];
        v36[3] = v38;
        long long v39 = v37[1];
        *uint64_t v36 = *v37;
        v36[1] = v39;
        *(_OWORD *)(a1 + v34[7]) = *(_OWORD *)(a2 + v34[7]);
        *(void *)(a1 + v34[8]) = *(void *)(a2 + v34[8]);
        *(void *)(a1 + v34[9]) = *(void *)(a2 + v34[9]);
        *(void *)(a1 + v34[10]) = *(void *)(a2 + v34[10]);
        *(void *)(a1 + v34[11]) = *(void *)(a2 + v34[11]);
        *(void *)(a1 + v34[12]) = *(void *)(a2 + v34[12]);
        *(void *)(a1 + v34[13]) = *(void *)(a2 + v34[13]);
        *(unsigned char *)(a1 + v34[14]) = *(unsigned char *)(a2 + v34[14]);
        break;
      case 3:
      case 4:
        uint64_t v40 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
        uint64_t v41 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v41[5]) = *(_DWORD *)(a2 + v41[5]);
        uint64_t v42 = v41[6];
        uint64_t v43 = (_OWORD *)(a1 + v42);
        uint64_t v44 = (_OWORD *)(a2 + v42);
        long long v45 = v44[3];
        v43[2] = v44[2];
        v43[3] = v45;
        long long v46 = v44[1];
        *uint64_t v43 = *v44;
        v43[1] = v46;
        *(_OWORD *)(a1 + v41[7]) = *(_OWORD *)(a2 + v41[7]);
        *(void *)(a1 + v41[8]) = *(void *)(a2 + v41[8]);
        *(void *)(a1 + v41[9]) = *(void *)(a2 + v41[9]);
        *(void *)(a1 + v41[10]) = *(void *)(a2 + v41[10]);
        break;
      case 5:
        uint64_t v47 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(a1, a2, v47);
        uint64_t v48 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v48[5]) = *(_DWORD *)(a2 + v48[5]);
        uint64_t v49 = v48[6];
        uint64_t v50 = (_OWORD *)(a1 + v49);
        uint64_t v51 = (_OWORD *)(a2 + v49);
        long long v52 = v51[3];
        v50[2] = v51[2];
        v50[3] = v52;
        long long v53 = v51[1];
        _OWORD *v50 = *v51;
        v50[1] = v53;
        *(_OWORD *)(a1 + v48[7]) = *(_OWORD *)(a2 + v48[7]);
        *(void *)(a1 + v48[8]) = *(void *)(a2 + v48[8]);
        *(void *)(a1 + v48[9]) = *(void *)(a2 + v48[9]);
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        uint64_t v10 = (_OWORD *)(a2 + v8);
        long long v11 = v10[3];
        v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v12;
        *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v91 = sub_10000F214(&qword_100520120);
    uint64_t v92 = *(int *)(v91 + 48);
    uint64_t v93 = (_OWORD *)(a1 + v92);
    uint64_t v94 = (_OWORD *)(a2 + v92);
    *uint64_t v93 = *v94;
    *(_OWORD *)((char *)v93 + 9) = *(_OWORD *)((char *)v94 + 9);
    uint64_t v95 = *(int *)(v91 + 64);
    uint64_t v96 = (_OWORD *)(a1 + v95);
    uint64_t v97 = (_OWORD *)(a2 + v95);
    *uint64_t v96 = *v97;
    *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v97 + 9);
  }
  else
  {
    switch(v5)
    {
      case 1:
        uint64_t v54 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 32))(a1, a2, v54);
        uint64_t v55 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v55[5]) = *(_DWORD *)(a2 + v55[5]);
        uint64_t v56 = v55[6];
        uint64_t v57 = (_OWORD *)(a1 + v56);
        uint64_t v58 = (_OWORD *)(a2 + v56);
        long long v59 = v58[3];
        v57[2] = v58[2];
        v57[3] = v59;
        long long v60 = v58[1];
        *uint64_t v57 = *v58;
        v57[1] = v60;
        *(void *)(a1 + v55[7]) = *(void *)(a2 + v55[7]);
        *(void *)(a1 + v55[8]) = *(void *)(a2 + v55[8]);
        *(void *)(a1 + v55[9]) = *(void *)(a2 + v55[9]);
        *(unsigned char *)(a1 + v55[10]) = *(unsigned char *)(a2 + v55[10]);
        *(_OWORD *)(a1 + v55[11]) = *(_OWORD *)(a2 + v55[11]);
        *(_OWORD *)(a1 + v55[12]) = *(_OWORD *)(a2 + v55[12]);
        uint64_t v61 = v55[13];
        uint64_t v62 = (void *)(a1 + v61);
        uint64_t v63 = (const void *)(a2 + v61);
        uint64_t v64 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v65 = *(void *)(v64 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          uint64_t v66 = sub_10000F214(&qword_100524BD0);
          memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v65 + 32))(v62, v63, v64);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
        }
        *(_OWORD *)(a1 + v55[14]) = *(_OWORD *)(a2 + v55[14]);
        uint64_t v98 = v55[15];
        uint64_t v99 = a1 + v98;
        uint64_t v100 = a2 + v98;
        *(void *)(v99 + 16) = *(void *)(v100 + 16);
        *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
        break;
      case 2:
        uint64_t v67 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 32))(a1, a2, v67);
        long long v68 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v68[5]) = *(_DWORD *)(a2 + v68[5]);
        uint64_t v69 = v68[6];
        long long v70 = (_OWORD *)(a1 + v69);
        long long v71 = (_OWORD *)(a2 + v69);
        long long v72 = v71[3];
        v70[2] = v71[2];
        void v70[3] = v72;
        long long v73 = v71[1];
        *long long v70 = *v71;
        v70[1] = v73;
        *(_OWORD *)(a1 + v68[7]) = *(_OWORD *)(a2 + v68[7]);
        *(void *)(a1 + v68[8]) = *(void *)(a2 + v68[8]);
        *(void *)(a1 + v68[9]) = *(void *)(a2 + v68[9]);
        *(void *)(a1 + v68[10]) = *(void *)(a2 + v68[10]);
        *(void *)(a1 + v68[11]) = *(void *)(a2 + v68[11]);
        *(void *)(a1 + v68[12]) = *(void *)(a2 + v68[12]);
        *(void *)(a1 + v68[13]) = *(void *)(a2 + v68[13]);
        *(unsigned char *)(a1 + v68[14]) = *(unsigned char *)(a2 + v68[14]);
        break;
      case 3:
      case 4:
        uint64_t v74 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 32))(a1, a2, v74);
        uint64_t v75 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v75[5]) = *(_DWORD *)(a2 + v75[5]);
        uint64_t v76 = v75[6];
        long long v77 = (_OWORD *)(a1 + v76);
        long long v78 = (_OWORD *)(a2 + v76);
        long long v79 = v78[3];
        v77[2] = v78[2];
        v77[3] = v79;
        long long v80 = v78[1];
        _OWORD *v77 = *v78;
        v77[1] = v80;
        *(_OWORD *)(a1 + v75[7]) = *(_OWORD *)(a2 + v75[7]);
        *(void *)(a1 + v75[8]) = *(void *)(a2 + v75[8]);
        *(void *)(a1 + v75[9]) = *(void *)(a2 + v75[9]);
        *(void *)(a1 + v75[10]) = *(void *)(a2 + v75[10]);
        break;
      case 5:
        uint64_t v81 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 32))(a1, a2, v81);
        long long v82 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v82[5]) = *(_DWORD *)(a2 + v82[5]);
        uint64_t v83 = v82[6];
        uint64_t v84 = (_OWORD *)(a1 + v83);
        uint64_t v85 = (_OWORD *)(a2 + v83);
        long long v86 = v85[3];
        v84[2] = v85[2];
        v84[3] = v86;
        long long v87 = v85[1];
        *uint64_t v84 = *v85;
        v84[1] = v87;
        *(_OWORD *)(a1 + v82[7]) = *(_OWORD *)(a2 + v82[7]);
        *(void *)(a1 + v82[8]) = *(void *)(a2 + v82[8]);
        *(void *)(a1 + v82[9]) = *(void *)(a2 + v82[9]);
        break;
      default:
        uint64_t v13 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        uint64_t v14 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v14[5]) = *(_DWORD *)(a2 + v14[5]);
        uint64_t v15 = v14[6];
        uint64_t v16 = (_OWORD *)(a1 + v15);
        uint64_t v17 = (_OWORD *)(a2 + v15);
        long long v18 = v17[3];
        v16[2] = v17[2];
        v16[3] = v18;
        long long v19 = v17[1];
        *uint64_t v16 = *v17;
        v16[1] = v19;
        *(_OWORD *)(a1 + v14[7]) = *(_OWORD *)(a2 + v14[7]);
        *(void *)(a1 + v14[8]) = *(void *)(a2 + v14[8]);
        *(void *)(a1 + v14[9]) = *(void *)(a2 + v14[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100120CEC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10011CE0C(a1, type metadata accessor for GeoLocateState);
    type metadata accessor for GeoLocateState(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for CVDetection();
    int v5 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      switch(v5)
      {
        case 1:
          uint64_t v20 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
          uint64_t v21 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(a1 + v21[5]) = *(_DWORD *)(a2 + v21[5]);
          uint64_t v22 = v21[6];
          long long v23 = (_OWORD *)(a1 + v22);
          long long v24 = (_OWORD *)(a2 + v22);
          long long v25 = v24[3];
          void v23[2] = v24[2];
          v23[3] = v25;
          long long v26 = v24[1];
          _OWORD *v23 = *v24;
          v23[1] = v26;
          *(void *)(a1 + v21[7]) = *(void *)(a2 + v21[7]);
          *(void *)(a1 + v21[8]) = *(void *)(a2 + v21[8]);
          *(void *)(a1 + v21[9]) = *(void *)(a2 + v21[9]);
          *(unsigned char *)(a1 + v21[10]) = *(unsigned char *)(a2 + v21[10]);
          *(_OWORD *)(a1 + v21[11]) = *(_OWORD *)(a2 + v21[11]);
          *(_OWORD *)(a1 + v21[12]) = *(_OWORD *)(a2 + v21[12]);
          uint64_t v27 = v21[13];
          uint64_t v28 = (void *)(a1 + v27);
          uint64_t v29 = (const void *)(a2 + v27);
          uint64_t v30 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v31 = *(void *)(v30 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
          {
            uint64_t v32 = sub_10000F214(&qword_100524BD0);
            memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
          }
          *(_OWORD *)(a1 + v21[14]) = *(_OWORD *)(a2 + v21[14]);
          uint64_t v88 = v21[15];
          uint64_t v89 = a1 + v88;
          uint64_t v90 = a2 + v88;
          *(void *)(v89 + 16) = *(void *)(v90 + 16);
          *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
          break;
        case 2:
          uint64_t v33 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
          long long v34 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(a1 + v34[5]) = *(_DWORD *)(a2 + v34[5]);
          uint64_t v35 = v34[6];
          uint64_t v36 = (_OWORD *)(a1 + v35);
          uint64_t v37 = (_OWORD *)(a2 + v35);
          long long v38 = v37[3];
          v36[2] = v37[2];
          v36[3] = v38;
          long long v39 = v37[1];
          *uint64_t v36 = *v37;
          v36[1] = v39;
          *(_OWORD *)(a1 + v34[7]) = *(_OWORD *)(a2 + v34[7]);
          *(void *)(a1 + v34[8]) = *(void *)(a2 + v34[8]);
          *(void *)(a1 + v34[9]) = *(void *)(a2 + v34[9]);
          *(void *)(a1 + v34[10]) = *(void *)(a2 + v34[10]);
          *(void *)(a1 + v34[11]) = *(void *)(a2 + v34[11]);
          *(void *)(a1 + v34[12]) = *(void *)(a2 + v34[12]);
          *(void *)(a1 + v34[13]) = *(void *)(a2 + v34[13]);
          *(unsigned char *)(a1 + v34[14]) = *(unsigned char *)(a2 + v34[14]);
          break;
        case 3:
        case 4:
          uint64_t v40 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
          uint64_t v41 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(a1 + v41[5]) = *(_DWORD *)(a2 + v41[5]);
          uint64_t v42 = v41[6];
          uint64_t v43 = (_OWORD *)(a1 + v42);
          uint64_t v44 = (_OWORD *)(a2 + v42);
          long long v45 = v44[3];
          v43[2] = v44[2];
          v43[3] = v45;
          long long v46 = v44[1];
          *uint64_t v43 = *v44;
          v43[1] = v46;
          *(_OWORD *)(a1 + v41[7]) = *(_OWORD *)(a2 + v41[7]);
          *(void *)(a1 + v41[8]) = *(void *)(a2 + v41[8]);
          *(void *)(a1 + v41[9]) = *(void *)(a2 + v41[9]);
          *(void *)(a1 + v41[10]) = *(void *)(a2 + v41[10]);
          break;
        case 5:
          uint64_t v47 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(a1, a2, v47);
          uint64_t v48 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(a1 + v48[5]) = *(_DWORD *)(a2 + v48[5]);
          uint64_t v49 = v48[6];
          uint64_t v50 = (_OWORD *)(a1 + v49);
          uint64_t v51 = (_OWORD *)(a2 + v49);
          long long v52 = v51[3];
          v50[2] = v51[2];
          v50[3] = v52;
          long long v53 = v51[1];
          _OWORD *v50 = *v51;
          v50[1] = v53;
          *(_OWORD *)(a1 + v48[7]) = *(_OWORD *)(a2 + v48[7]);
          *(void *)(a1 + v48[8]) = *(void *)(a2 + v48[8]);
          *(void *)(a1 + v48[9]) = *(void *)(a2 + v48[9]);
          break;
        default:
          uint64_t v6 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
          uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
          uint64_t v8 = v7[6];
          uint64_t v9 = (_OWORD *)(a1 + v8);
          uint64_t v10 = (_OWORD *)(a2 + v8);
          long long v11 = v10[3];
          v9[2] = v10[2];
          v9[3] = v11;
          long long v12 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v12;
          *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
          *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
          *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v91 = sub_10000F214(&qword_100520120);
      uint64_t v92 = *(int *)(v91 + 48);
      uint64_t v93 = (_OWORD *)(a1 + v92);
      uint64_t v94 = (_OWORD *)(a2 + v92);
      *uint64_t v93 = *v94;
      *(_OWORD *)((char *)v93 + 9) = *(_OWORD *)((char *)v94 + 9);
      uint64_t v95 = *(int *)(v91 + 64);
      uint64_t v96 = (_OWORD *)(a1 + v95);
      uint64_t v97 = (_OWORD *)(a2 + v95);
      *uint64_t v96 = *v97;
      *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v97 + 9);
    }
    else
    {
      switch(v5)
      {
        case 1:
          uint64_t v54 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 32))(a1, a2, v54);
          uint64_t v55 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(a1 + v55[5]) = *(_DWORD *)(a2 + v55[5]);
          uint64_t v56 = v55[6];
          uint64_t v57 = (_OWORD *)(a1 + v56);
          uint64_t v58 = (_OWORD *)(a2 + v56);
          long long v59 = v58[3];
          v57[2] = v58[2];
          v57[3] = v59;
          long long v60 = v58[1];
          *uint64_t v57 = *v58;
          v57[1] = v60;
          *(void *)(a1 + v55[7]) = *(void *)(a2 + v55[7]);
          *(void *)(a1 + v55[8]) = *(void *)(a2 + v55[8]);
          *(void *)(a1 + v55[9]) = *(void *)(a2 + v55[9]);
          *(unsigned char *)(a1 + v55[10]) = *(unsigned char *)(a2 + v55[10]);
          *(_OWORD *)(a1 + v55[11]) = *(_OWORD *)(a2 + v55[11]);
          *(_OWORD *)(a1 + v55[12]) = *(_OWORD *)(a2 + v55[12]);
          uint64_t v61 = v55[13];
          uint64_t v62 = (void *)(a1 + v61);
          uint64_t v63 = (const void *)(a2 + v61);
          uint64_t v64 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v65 = *(void *)(v64 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
          {
            uint64_t v66 = sub_10000F214(&qword_100524BD0);
            memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v65 + 32))(v62, v63, v64);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
          }
          *(_OWORD *)(a1 + v55[14]) = *(_OWORD *)(a2 + v55[14]);
          uint64_t v98 = v55[15];
          uint64_t v99 = a1 + v98;
          uint64_t v100 = a2 + v98;
          *(void *)(v99 + 16) = *(void *)(v100 + 16);
          *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
          break;
        case 2:
          uint64_t v67 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 32))(a1, a2, v67);
          long long v68 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(a1 + v68[5]) = *(_DWORD *)(a2 + v68[5]);
          uint64_t v69 = v68[6];
          long long v70 = (_OWORD *)(a1 + v69);
          long long v71 = (_OWORD *)(a2 + v69);
          long long v72 = v71[3];
          v70[2] = v71[2];
          void v70[3] = v72;
          long long v73 = v71[1];
          *long long v70 = *v71;
          v70[1] = v73;
          *(_OWORD *)(a1 + v68[7]) = *(_OWORD *)(a2 + v68[7]);
          *(void *)(a1 + v68[8]) = *(void *)(a2 + v68[8]);
          *(void *)(a1 + v68[9]) = *(void *)(a2 + v68[9]);
          *(void *)(a1 + v68[10]) = *(void *)(a2 + v68[10]);
          *(void *)(a1 + v68[11]) = *(void *)(a2 + v68[11]);
          *(void *)(a1 + v68[12]) = *(void *)(a2 + v68[12]);
          *(void *)(a1 + v68[13]) = *(void *)(a2 + v68[13]);
          *(unsigned char *)(a1 + v68[14]) = *(unsigned char *)(a2 + v68[14]);
          break;
        case 3:
        case 4:
          uint64_t v74 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 32))(a1, a2, v74);
          uint64_t v75 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(a1 + v75[5]) = *(_DWORD *)(a2 + v75[5]);
          uint64_t v76 = v75[6];
          long long v77 = (_OWORD *)(a1 + v76);
          long long v78 = (_OWORD *)(a2 + v76);
          long long v79 = v78[3];
          v77[2] = v78[2];
          v77[3] = v79;
          long long v80 = v78[1];
          _OWORD *v77 = *v78;
          v77[1] = v80;
          *(_OWORD *)(a1 + v75[7]) = *(_OWORD *)(a2 + v75[7]);
          *(void *)(a1 + v75[8]) = *(void *)(a2 + v75[8]);
          *(void *)(a1 + v75[9]) = *(void *)(a2 + v75[9]);
          *(void *)(a1 + v75[10]) = *(void *)(a2 + v75[10]);
          break;
        case 5:
          uint64_t v81 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 32))(a1, a2, v81);
          long long v82 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(a1 + v82[5]) = *(_DWORD *)(a2 + v82[5]);
          uint64_t v83 = v82[6];
          uint64_t v84 = (_OWORD *)(a1 + v83);
          uint64_t v85 = (_OWORD *)(a2 + v83);
          long long v86 = v85[3];
          v84[2] = v85[2];
          v84[3] = v86;
          long long v87 = v85[1];
          *uint64_t v84 = *v85;
          v84[1] = v87;
          *(_OWORD *)(a1 + v82[7]) = *(_OWORD *)(a2 + v82[7]);
          *(void *)(a1 + v82[8]) = *(void *)(a2 + v82[8]);
          *(void *)(a1 + v82[9]) = *(void *)(a2 + v82[9]);
          break;
        default:
          uint64_t v13 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
          uint64_t v14 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(a1 + v14[5]) = *(_DWORD *)(a2 + v14[5]);
          uint64_t v15 = v14[6];
          uint64_t v16 = (_OWORD *)(a1 + v15);
          uint64_t v17 = (_OWORD *)(a2 + v15);
          long long v18 = v17[3];
          v16[2] = v17[2];
          v16[3] = v18;
          long long v19 = v17[1];
          *uint64_t v16 = *v17;
          v16[1] = v19;
          *(_OWORD *)(a1 + v14[7]) = *(_OWORD *)(a2 + v14[7]);
          *(void *)(a1 + v14[8]) = *(void *)(a2 + v14[8]);
          *(void *)(a1 + v14[9]) = *(void *)(a2 + v14[9]);
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1001218E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001218F4);
}

uint64_t sub_1001218F4(uint64_t a1, uint64_t a2)
{
  uint64_t State = type metadata accessor for GeoLocateState(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 48);

  return v5(a1, a2, State);
}

uint64_t sub_100121960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100121974);
}

uint64_t sub_100121974(uint64_t a1, uint64_t a2)
{
  uint64_t State = type metadata accessor for GeoLocateState(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 56);

  return v5(a1, a2, a2, State);
}

uint64_t type metadata accessor for GeoLocateResultView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100520240);
}

uint64_t sub_100121A04()
{
  uint64_t result = type metadata accessor for GeoLocateState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100121A90()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100121AAC()
{
  unint64_t result = qword_100520290;
  if (!qword_100520290)
  {
    sub_10000F69C(&qword_100520280);
    sub_100013AA8(&qword_100520298, &qword_100520278);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520290);
  }
  return result;
}

void sub_100121B4C(void *a1@<X8>)
{
  sub_1001162EC(*(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(id *)(v1 + 48), *(void **)(v1 + 56), *(unsigned __int8 *)(v1 + 72), a1, *(void **)(v1 + 80));
}

uint64_t sub_100121B8C()
{
  return sub_100117258();
}

unint64_t sub_100121B98()
{
  unint64_t result = qword_1005202D8;
  if (!qword_1005202D8)
  {
    sub_10000F69C(&qword_1005202E0);
    sub_100013AA8(&qword_100522BC0, &qword_100522BA0);
    sub_100121AAC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005202D8);
  }
  return result;
}

void sub_100121C38()
{
  sub_100027A88();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Optional();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_100121D4C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(void *)(v7 + 64) <= 8uLL) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(void *)(a3 + 24) - 8;
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(_DWORD *)(*(void *)v11 + 80);
  if (*(_DWORD *)(*(void *)v11 + 84)) {
    uint64_t v14 = *(void *)(*(void *)v11 + 64);
  }
  else {
    uint64_t v14 = *(void *)(*(void *)v11 + 64) + 1;
  }
  unsigned int v15 = v13 | *(_DWORD *)(v7 + 80) & 0xF8 | v10;
  if (v14
     + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
       + v13
       + (((v8 & 0xFFFFFFFFFFFFFFF8) + v10 + 24) & ~v10)) & ~v13) > 0x18
    || ((*(_DWORD *)(v12 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v15 > 7)
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
    swift_retain();
  }
  else
  {
    unsigned int v19 = a2[v8];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v21 = v8;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v8 < 4) {
            goto LABEL_26;
          }
          goto LABEL_28;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_28;
          }
          goto LABEL_26;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_26;
          }
          goto LABEL_28;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v8 < 4) {
LABEL_26:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v8))) + 2;
          else {
LABEL_28:
          }
            unsigned int v19 = v22 + 2;
          break;
        default:
          break;
      }
    }
    size_t __n = v14;
    uint64_t v36 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    uint64_t v37 = *(void *)(a3 + 16);
    uint64_t v38 = *(void *)(a3 + 24);
    uint64_t v23 = v8 + 1;
    uint64_t v24 = ~v10;
    uint64_t v25 = ~v13;
    if (v19 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      char v26 = 1;
    }
    else
    {
      *a1 = *(void *)a2;
      swift_retain();
      char v26 = 0;
    }
    *((unsigned char *)a1 + v8) = v26;
    uint64_t v27 = (void *)(((unint64_t)a1 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = (void *)((unint64_t)&a2[v23 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v27 = *v28;
    v27[1] = v28[1];
    uint64_t v29 = ((unint64_t)v27 + v10 + 16) & v24;
    uint64_t v30 = ((unint64_t)v28 + v10 + 16) & v24;
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    v31(v29, v30, v37);
    uint64_t v32 = (void *)((v29 + v36 + v13) & v25);
    uint64_t v33 = (const void *)((v30 + v36 + v13) & v25);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v33, 1, v38))
    {
      memcpy(v32, v33, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v32, v33, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v32, 0, 1, v38);
    }
  }
  return a1;
}

uint64_t sub_1001220F4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v4 - 8) + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else {
    swift_release();
  }
  unint64_t v11 = (unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v13 = v12 + 8;
  unint64_t v14 = (v11 + *(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v14);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = (v14 + *(void *)(v13 + 56) + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = v16;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15);
  if (!result)
  {
    unsigned int v19 = *(uint64_t (**)(unint64_t, uint64_t))(v20 + 8);
    return v19(v17, v15);
  }
  return result;
}

void *sub_100122334(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v7 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v11 = *(_DWORD *)a2;
        if (v7 < 4)
        {
LABEL_14:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_18:
        if (v11 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_16:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    char v12 = 1;
  }
  else
  {
LABEL_19:
    *a1 = *(void *)a2;
    swift_retain();
    char v12 = 0;
  }
  *((unsigned char *)a1 + v7) = v12;
  uint64_t v13 = (void *)(((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  uint64_t v17 = *(void *)(v15 - 8) + 16;
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v15 - 8) + 80);
  uint64_t v19 = ((unint64_t)v13 + v18 + 16) & ~v18;
  uint64_t v20 = ((unint64_t)v14 + v18 + 16) & ~v18;
  swift_bridgeObjectRetain();
  v16(v19, v20, v15);
  uint64_t v21 = *(void *)(a3 + 24);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = *(void *)(v17 + 48) + v23;
  uint64_t v25 = (void *)((v24 + v19) & ~v23);
  char v26 = (const void *)((v24 + v20) & ~v23);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v26, 1, v21))
  {
    if (*(_DWORD *)(v22 + 84)) {
      size_t v27 = *(void *)(v22 + 64);
    }
    else {
      size_t v27 = *(void *)(v22 + 64) + 1;
    }
    memcpy(v25, v26, v27);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v25, v26, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v21);
  }
  return a1;
}

unsigned __int8 *sub_100122600(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      a1[v8] = 1;
    }
    else
    {
LABEL_36:
      *(void *)a1 = *(void *)a2;
      a1[v8] = 0;
      swift_retain();
    }
  }
  unint64_t v17 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v17 <= 8) {
    unint64_t v17 = 8;
  }
  unint64_t v18 = v17 + 8;
  uint64_t v19 = (void *)((unint64_t)&a1[v18] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)((unint64_t)&a2[v18] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v22 = v21 + 24;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = ((unint64_t)v19 + v23 + 16) & ~v23;
  uint64_t v25 = ((unint64_t)v20 + v23 + 16) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 24))(v24, v25);
  uint64_t v26 = *(void *)(v22 + 40);
  uint64_t v27 = *(void *)(a3 + 24);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = v26 + v29;
  uint64_t v31 = (void *)((v30 + v24) & ~v29);
  uint64_t v32 = (void *)((v30 + v25) & ~v29);
  uint64_t v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  LODWORD(v20) = v33(v31, 1, v27);
  int v34 = v33(v32, 1, v27);
  if (v20)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v31, v32, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v27);
      return a1;
    }
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 24))(v31, v32, v27);
      return a1;
    }
    uint64_t v38 = *(void (**)(void *, uint64_t))(v28 + 8);
    uint64_t v37 = v28 + 8;
    v38(v31, v27);
    int v35 = *(_DWORD *)(v37 + 76);
    size_t v36 = *(void *)(v37 + 56);
  }
  if (v35) {
    size_t v39 = v36;
  }
  else {
    size_t v39 = v36 + 1;
  }
  memcpy(v31, v32, v39);
  return a1;
}

void *sub_100122A48(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v7 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v11 = *(_DWORD *)a2;
        if (v7 < 4)
        {
LABEL_14:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_18:
        if (v11 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_16:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    char v12 = 1;
  }
  else
  {
LABEL_19:
    char v12 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v7) = v12;
  unsigned int v13 = (_OWORD *)(((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v14 = (_OWORD *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v13 = *v14;
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v16 = v15 + 32;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = ((unint64_t)v13 + v17 + 16) & ~v17;
  uint64_t v19 = ((unint64_t)v14 + v17 + 16) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v16 + 32);
  uint64_t v21 = *(void *)(a3 + 24);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (void *)((v24 + v18) & ~v23);
  uint64_t v26 = (const void *)((v24 + v19) & ~v23);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v26, 1, v21))
  {
    if (*(_DWORD *)(v22 + 84)) {
      size_t v27 = *(void *)(v22 + 64);
    }
    else {
      size_t v27 = *(void *)(v22 + 64) + 1;
    }
    memcpy(v25, v26, v27);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v25, v26, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v21);
  }
  return a1;
}

unsigned __int8 *sub_100122CF8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      char v17 = 1;
    }
    else
    {
LABEL_36:
      char v17 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v17;
  }
  unint64_t v18 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v18 <= 8) {
    unint64_t v18 = 8;
  }
  unint64_t v19 = v18 + 8;
  uint64_t v20 = (void *)((unint64_t)&a1[v19] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((unint64_t)&a2[v19] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v23 = v22 + 40;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = ((unint64_t)v20 + v24 + 16) & ~v24;
  uint64_t v26 = ((unint64_t)v21 + v24 + 16) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 40))(v25, v26);
  uint64_t v27 = *(void *)(v23 + 24);
  uint64_t v28 = *(void *)(a3 + 24);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (void *)((v31 + v25) & ~v30);
  uint64_t v33 = (void *)((v31 + v26) & ~v30);
  int v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  LODWORD(v21) = v34(v32, 1, v28);
  int v35 = v34(v33, 1, v28);
  if (v21)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v32, v33, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
      return a1;
    }
    int v36 = *(_DWORD *)(v29 + 84);
    size_t v37 = *(void *)(v29 + 64);
  }
  else
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v32, v33, v28);
      return a1;
    }
    size_t v39 = *(void (**)(void *, uint64_t))(v29 + 8);
    uint64_t v38 = v29 + 8;
    v39(v32, v28);
    int v36 = *(_DWORD *)(v38 + 76);
    size_t v37 = *(void *)(v38 + 56);
  }
  if (v36) {
    size_t v40 = v37;
  }
  else {
    size_t v40 = v37 + 1;
  }
  memcpy(v32, v33, v40);
  return a1;
}

uint64_t sub_100123134(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v6 <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  unsigned int v16 = v12 - 1;
  if (!v12) {
    unsigned int v16 = 0;
  }
  if (v10 <= v16) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v9 + 84);
  }
  if (v17 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  else {
    unsigned int v18 = v17;
  }
  if (v12) {
    uint64_t v19 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v8 - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v18) {
    goto LABEL_35;
  }
  unint64_t v20 = v19 + ((v14 + v15 + (((v7 & 0xFFFFFFFFFFFFFFF8) + v13 + 24) & ~v13)) & ~v15);
  char v21 = 8 * v20;
  if (v20 > 3) {
    goto LABEL_18;
  }
  unsigned int v23 = ((a2 - v18 + ~(-1 << v21)) >> v21) + 1;
  if (HIWORD(v23))
  {
    int v22 = *(_DWORD *)((char *)a1 + v20);
    if (v22) {
      goto LABEL_25;
    }
LABEL_35:
    unint64_t v27 = ((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8;
    if ((v17 & 0x80000000) == 0)
    {
      unint64_t v28 = *(void *)(v27 + 8);
      if (v28 >= 0xFFFFFFFF) {
        LODWORD(v28) = -1;
      }
      return (v28 + 1);
    }
    uint64_t v30 = (v27 + v13 + 16) & ~v13;
    if (v10 == v18)
    {
      uint64_t v31 = *(uint64_t (**)(uint64_t))(v9 + 48);
      return v31(v30);
    }
    if (v12 >= 2)
    {
      unsigned int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))((v30 + v14 + v15) & ~v15, v12, v8);
      if (v32 >= 2) {
        return v32 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  if (v23 > 0xFF)
  {
    int v22 = *(unsigned __int16 *)((char *)a1 + v20);
    if (*(unsigned __int16 *)((char *)a1 + v20)) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  if (v23 < 2) {
    goto LABEL_35;
  }
LABEL_18:
  int v22 = *((unsigned __int8 *)a1 + v20);
  if (!*((unsigned char *)a1 + v20)) {
    goto LABEL_35;
  }
LABEL_25:
  int v24 = (v22 - 1) << v21;
  if (v20 > 3) {
    int v24 = 0;
  }
  if (v20)
  {
    if (v20 <= 3) {
      int v25 = v20;
    }
    else {
      int v25 = 4;
    }
    switch(v25)
    {
      case 2:
        int v26 = *a1;
        break;
      case 3:
        int v26 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v26 = *(_DWORD *)a1;
        break;
      default:
        int v26 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v26 = 0;
  }
  return v18 + (v26 | v24) + 1;
}

void sub_100123414(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8 = 0;
  unint64_t v9 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(void *)(v11 - 8);
  uint64_t v15 = *(unsigned int *)(v14 + 84);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v17 = *(void *)(v12 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v14 + 80);
  unsigned int v19 = v15 - 1;
  if (!v15) {
    unsigned int v19 = 0;
  }
  if (v13 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = *(_DWORD *)(v12 + 84);
  }
  if (v20 <= 0x7FFFFFFF) {
    unsigned int v21 = 0x7FFFFFFF;
  }
  else {
    unsigned int v21 = v20;
  }
  if (v15) {
    uint64_t v22 = *(void *)(*(void *)(v11 - 8) + 64);
  }
  else {
    uint64_t v22 = *(void *)(*(void *)(v11 - 8) + 64) + 1;
  }
  size_t v23 = v22 + ((v17 + v18 + (((v10 & 0xFFFFFFFFFFFFFFF8) + v16 + 24) & ~v16)) & ~v18);
  if (a3 <= v21) {
    goto LABEL_23;
  }
  if (v23 <= 3)
  {
    unsigned int v24 = ((a3 - v21 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
    if (HIWORD(v24))
    {
      int v8 = 4;
      if (v21 >= a2) {
        goto LABEL_31;
      }
      goto LABEL_24;
    }
    if (v24 >= 0x100) {
      int v8 = 2;
    }
    else {
      int v8 = v24 > 1;
    }
LABEL_23:
    if (v21 >= a2) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  int v8 = 1;
  if (v21 >= a2)
  {
LABEL_31:
    switch(v8)
    {
      case 1:
        a1[v23] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_36;
      case 2:
        *(_WORD *)&a1[v23] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_36;
      case 3:
        goto LABEL_57;
      case 4:
        *(_DWORD *)&a1[v23] = 0;
        goto LABEL_35;
      default:
LABEL_35:
        if (a2)
        {
LABEL_36:
          unint64_t v28 = (void *)((unint64_t)&a1[v10 + 8] & 0xFFFFFFFFFFFFFFF8);
          if ((v20 & 0x80000000) != 0)
          {
            uint64_t v29 = ((unint64_t)v28 + v16 + 16) & ~v16;
            if (v13 == v21)
            {
              uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v12 + 56);
              v30(v29, a2);
            }
            else if (v15 >= 2)
            {
              uint64_t v31 = (v29 + v17 + v18) & ~v18;
              unsigned int v32 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56);
              v32(v31, (a2 + 1), v15, v11);
            }
          }
          else if ((a2 & 0x80000000) != 0)
          {
            *unint64_t v28 = a2 ^ 0x80000000;
            v28[1] = 0;
          }
          else
          {
            v28[1] = (a2 - 1);
          }
        }
        break;
    }
    return;
  }
LABEL_24:
  unsigned int v25 = ~v21 + a2;
  if (v23 < 4)
  {
    int v26 = (v25 >> (8 * v23)) + 1;
    if (v23)
    {
      int v27 = v25 & ~(-1 << (8 * v23));
      bzero(a1, v23);
      if (v23 == 3)
      {
        *(_WORD *)a1 = v27;
        a1[2] = BYTE2(v27);
      }
      else if (v23 == 2)
      {
        *(_WORD *)a1 = v27;
      }
      else
      {
        *a1 = v27;
      }
    }
  }
  else
  {
    bzero(a1, v23);
    *(_DWORD *)a1 = v25;
    int v26 = 1;
  }
  switch(v8)
  {
    case 1:
      a1[v23] = v26;
      break;
    case 2:
      *(_WORD *)&a1[v23] = v26;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x100123790);
    case 4:
      *(_DWORD *)&a1[v23] = v26;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for NonModalPromptView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001237D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100123814(uint64_t a1)
{
  double v1 = __chkstk_darwin(a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  AnyTransition.init<A>(_:)();
  View.transition(_:)();
  return swift_release();
}

double sub_100123910()
{
  double result = 20.0;
  xmmword_1005202E8 = xmmword_100446970;
  *(_OWORD *)&qword_1005202F8 = xmmword_100446980;
  return result;
}

__n128 sub_100123930()
{
  __asm { FMOV            V0.2D, #8.0 }
  xmmword_100520308 = (__int128)result;
  *(__n128 *)&qword_100520318 = result;
  return result;
}

double sub_100123944()
{
  double result = 14.0;
  xmmword_100520328 = xmmword_100446990;
  *(_OWORD *)&qword_100520338 = xmmword_100446990;
  return result;
}

uint64_t sub_10012395C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v3 = type metadata accessor for Capsule();
  __chkstk_darwin(v3 - 8);
  long long v71 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v63 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v62 = (uint64_t)&v56 - v8;
  uint64_t v9 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_1005204B0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000F214(&qword_1005204B8);
  __chkstk_darwin(v57);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000F214(&qword_1005204C0);
  __chkstk_darwin(v58);
  unsigned int v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000F214(&qword_1005204C8);
  __chkstk_darwin(v59);
  unsigned int v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000F214(&qword_1005204D0);
  __chkstk_darwin(v61);
  size_t v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000F214(&qword_1005204D8);
  uint64_t v69 = *(void *)(v24 - 8);
  uint64_t v70 = v24;
  __chkstk_darwin(v24);
  uint64_t v67 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000F214(&qword_1005204E0);
  __chkstk_darwin(v60);
  long long v68 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000F214(&qword_1005204E8);
  __chkstk_darwin(v65);
  uint64_t v64 = (uint64_t)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = a1;
  ButtonStyleConfiguration.label.getter();
  static Alignment.center.getter();
  __n128 v28 = sub_100225E9C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v28);
  if (qword_100517EE8 != -1) {
    swift_once();
  }
  long long v56 = xmmword_100520328;
  uint64_t v30 = qword_100520338;
  uint64_t v29 = unk_100520340;
  char v31 = static Edge.Set.all.getter();
  sub_10000FB74((uint64_t)v15, (uint64_t)v17, &qword_1005204B0);
  unsigned int v32 = &v17[*(int *)(v57 + 36)];
  *unsigned int v32 = v31;
  *(_OWORD *)(v32 + 8) = v56;
  *((void *)v32 + 3) = v30;
  *((void *)v32 + 4) = v29;
  v32[40] = 0;
  sub_10000FBD8((uint64_t)v15, &qword_1005204B0);
  uint64_t v33 = v62;
  sub_10027CA80(v62);
  int v34 = v63;
  uint64_t v35 = v66;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v63, enum case for ColorScheme.dark(_:), v66);
  static ColorScheme.== infix(_:_:)();
  int v36 = *(void (**)(char *, uint64_t))(v5 + 8);
  v36(v34, v35);
  v36((char *)v33, v35);
  static Color.primary.getter();
  uint64_t v37 = Color.opacity(_:)();
  swift_release();
  LOBYTE(v36) = static Edge.Set.all.getter();
  sub_10000FB74((uint64_t)v17, (uint64_t)v19, &qword_1005204B8);
  uint64_t v38 = &v19[*(int *)(v58 + 36)];
  *(void *)uint64_t v38 = v37;
  v38[8] = (char)v36;
  sub_10000FBD8((uint64_t)v17, &qword_1005204B8);
  uint64_t v39 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v19, (uint64_t)v21, &qword_1005204C0);
  uint64_t v41 = (uint64_t *)&v21[*(int *)(v59 + 36)];
  *uint64_t v41 = KeyPath;
  v41[1] = v39;
  sub_10000FBD8((uint64_t)v19, &qword_1005204C0);
  uint64_t v42 = static Font.headline.getter();
  uint64_t v43 = swift_getKeyPath();
  sub_10000FB74((uint64_t)v21, (uint64_t)v23, &qword_1005204C8);
  uint64_t v44 = (uint64_t *)&v23[*(int *)(v61 + 36)];
  *uint64_t v44 = v43;
  v44[1] = v42;
  sub_10000FBD8((uint64_t)v21, &qword_1005204C8);
  static Font.Weight.medium.getter();
  sub_1001289A0();
  long long v45 = v67;
  View.fontWeight(_:)();
  sub_10000FBD8((uint64_t)v23, &qword_1005204D0);
  uint64_t v46 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v47 = type metadata accessor for RoundedCornerStyle();
  uint64_t v48 = (uint64_t)v71;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v71, v46, v47);
  uint64_t v49 = (uint64_t)v68;
  uint64_t v50 = (uint64_t)&v68[*(int *)(v60 + 36)];
  sub_100128C58(v48, v50, (uint64_t (*)(void))&type metadata accessor for Capsule);
  *(_WORD *)(v50 + *(int *)(sub_10000F214(&qword_10051CC78) + 36)) = 256;
  uint64_t v52 = v69;
  uint64_t v51 = v70;
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 16))(v49, v45, v70);
  sub_100128CC0(v48, (uint64_t (*)(void))&type metadata accessor for Capsule);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v45, v51);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v53 = 0.85;
  }
  else {
    double v53 = 1.0;
  }
  uint64_t v54 = v64;
  sub_10000FB74(v49, v64, &qword_1005204E0);
  *(double *)(v54 + *(int *)(v65 + 36)) = v53;
  sub_10000FBD8(v49, &qword_1005204E0);
  return sub_10000FC34(v54, v73, &qword_1005204E8);
}

uint64_t sub_1001241E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v24 = sub_10000F69C(&qword_1005203C8);
  type metadata accessor for NonModalPromptViewButtonStyle();
  uint64_t v44 = a1[5];
  uint64_t v45 = sub_100128F88(&qword_1005203D0, (void (*)(uint64_t))type metadata accessor for NonModalPromptViewButtonStyle);
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  sub_10000F69C(&qword_1005190F8);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v44 = a1[4];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_1005190E0);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_1005203D8);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100519008);
  void v23[2] = type metadata accessor for ModifiedContent();
  v23[1] = type metadata accessor for ModifiedContent();
  type metadata accessor for ContainerSmartDialogViewModifier();
  uint64_t v24 = type metadata accessor for ModifiedContent();
  v23[3] = type metadata accessor for ModifiedContent();
  sub_10000F69C((uint64_t *)&unk_10051D370);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - v8;
  sub_100124850(a1, (uint64_t)v6);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = &protocol witness table for _FlexFrameLayout;
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v11 = sub_100013AA8(&qword_1005190D8, &qword_1005190E0);
  uint64_t v38 = v10;
  uint64_t v39 = v11;
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v13 = sub_100013AA8(&qword_1005203E0, &qword_1005203D8);
  uint64_t v36 = v12;
  uint64_t v37 = v13;
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v15 = sub_100013AA8(&qword_100519040, &qword_100519008);
  uint64_t v34 = v14;
  uint64_t v35 = v15;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = &protocol witness table for _PaddingLayout;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v17 = sub_100128F88((unint64_t *)&qword_100519CF8, (void (*)(uint64_t))type metadata accessor for ContainerSmartDialogViewModifier);
  uint64_t v30 = v16;
  uint64_t v31 = v17;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = &protocol witness table for _ShadowEffect;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v19 = sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
  uint64_t v26 = v18;
  uint64_t v27 = v19;
  uint64_t v20 = swift_getWitnessTable();
  sub_100224E4C(v6, v3, v20);
  unsigned int v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v6, v3);
  sub_100224E4C(v9, v3, v20);
  return ((uint64_t (*)(char *, uint64_t))v21)(v9, v3);
}

uint64_t sub_100124850@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v103 = a2;
  uint64_t v102 = type metadata accessor for ColorScheme();
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v100 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v99 = (uint64_t)&v73 - v5;
  uint64_t v98 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v98);
  uint64_t v97 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for Material();
  uint64_t v96 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v94 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F69C(&qword_1005203C8);
  uint64_t v86 = a1[3];
  uint64_t v8 = v86;
  uint64_t v9 = type metadata accessor for NonModalPromptViewButtonStyle();
  uint64_t v10 = a1[5];
  uint64_t v11 = sub_100128F88(&qword_1005203D0, (void (*)(uint64_t))type metadata accessor for NonModalPromptViewButtonStyle);
  uint64_t v124 = v8;
  uint64_t v125 = v9;
  uint64_t v126 = v10;
  uint64_t v127 = v11;
  uint64_t v85 = v10;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v124 = v8;
  uint64_t v125 = v9;
  uint64_t v126 = v10;
  uint64_t v127 = v11;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v124 = OpaqueTypeMetadata2;
  uint64_t v125 = OpaqueTypeConformance2;
  swift_getOpaqueTypeMetadata2();
  sub_10000F69C(&qword_1005190F8);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v14 = a1[4];
  uint64_t v124 = a1[2];
  uint64_t v125 = v9;
  uint64_t v15 = v124;
  uint64_t v77 = v124;
  uint64_t v126 = v14;
  uint64_t v127 = v11;
  uint64_t v16 = v14;
  uint64_t v78 = v14;
  uint64_t v17 = swift_getOpaqueTypeMetadata2();
  uint64_t v124 = v15;
  uint64_t v125 = v9;
  uint64_t v126 = v16;
  uint64_t v127 = v11;
  uint64_t v18 = swift_getOpaqueTypeConformance2();
  uint64_t v124 = v17;
  uint64_t v125 = v18;
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v19 = type metadata accessor for VStack();
  uint64_t v74 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unsigned int v21 = (char *)&v73 - v20;
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v73 - v23;
  sub_10000F69C(&qword_1005190E0);
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v79 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v73 - v26;
  sub_10000F69C(&qword_1005203D8);
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v84 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v73 = (char *)&v73 - v29;
  sub_10000F69C(&qword_100519008);
  uint64_t v82 = type metadata accessor for ModifiedContent();
  uint64_t v87 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v76 = (char *)&v73 - v30;
  uint64_t v83 = type metadata accessor for ModifiedContent();
  uint64_t v88 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  long long v80 = (char *)&v73 - v31;
  type metadata accessor for ContainerSmartDialogViewModifier();
  uint64_t v90 = type metadata accessor for ModifiedContent();
  uint64_t v92 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v81 = (char *)&v73 - v32;
  uint64_t v91 = type metadata accessor for ModifiedContent();
  uint64_t v93 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v89 = (char *)&v73 - v33;
  uint64_t v105 = v77;
  uint64_t v106 = v86;
  uint64_t v107 = v78;
  uint64_t v108 = v85;
  uint64_t v109 = v104;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  static Alignment.center.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v21, v19);
  uint64_t v34 = v94;
  static Material.thick.getter();
  static Edge.Set.all.getter();
  uint64_t v122 = WitnessTable;
  long long v123 = &protocol witness table for _FlexFrameLayout;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = v95;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v34, v36);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v24, v22);
  static Alignment.center.getter();
  sub_10000F214(&qword_100519A60);
  uint64_t v37 = sub_100013AA8(&qword_1005190D8, &qword_1005190E0);
  uint64_t v120 = v35;
  uint64_t v121 = v37;
  uint64_t v38 = swift_getWitnessTable();
  sub_10002E7F4();
  uint64_t v39 = v73;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v27, v25);
  size_t v40 = v97;
  uint64_t v41 = &v97[*(int *)(v98 + 20)];
  uint64_t v42 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v43 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104))(v41, v42, v43);
  __asm { FMOV            V0.2D, #28.0 }
  *size_t v40 = _Q0;
  uint64_t v49 = (uint64_t)v40;
  uint64_t v50 = sub_100013AA8(&qword_1005203E0, &qword_1005203D8);
  uint64_t v118 = v38;
  uint64_t v119 = v50;
  uint64_t v51 = swift_getWitnessTable();
  sub_100128F88(&qword_1005199B0, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
  uint64_t v52 = v76;
  View.clipShape<A>(_:style:)();
  sub_100128CC0(v49, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v39, v28);
  static Edge.Set.horizontal.getter();
  uint64_t v53 = sub_100013AA8(&qword_100519040, &qword_100519008);
  uint64_t v116 = v51;
  uint64_t v117 = v53;
  uint64_t v54 = v82;
  uint64_t v55 = swift_getWitnessTable();
  long long v56 = v80;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v52, v54);
  uint64_t v114 = v55;
  id v115 = &protocol witness table for _PaddingLayout;
  uint64_t v57 = v83;
  uint64_t v58 = swift_getWitnessTable();
  uint64_t v59 = v81;
  sub_10034F588();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v56, v57);
  static Color.black.getter();
  uint64_t v60 = v99;
  sub_10027CA80(v99);
  uint64_t v61 = v101;
  uint64_t v62 = v100;
  uint64_t v63 = v102;
  (*(void (**)(char *, void, uint64_t))(v101 + 104))(v100, enum case for ColorScheme.dark(_:), v102);
  static ColorScheme.== infix(_:_:)();
  uint64_t v64 = *(void (**)(char *, uint64_t))(v61 + 8);
  v64(v62, v63);
  v64((char *)v60, v63);
  Color.opacity(_:)();
  swift_release();
  uint64_t v65 = sub_100128F88((unint64_t *)&qword_100519CF8, (void (*)(uint64_t))type metadata accessor for ContainerSmartDialogViewModifier);
  uint64_t v112 = v58;
  uint64_t v113 = v65;
  uint64_t v66 = v90;
  uint64_t v67 = swift_getWitnessTable();
  long long v68 = v89;
  View.shadow(color:radius:x:y:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v59, v66);
  uint64_t v110 = v67;
  uint64_t v111 = &protocol witness table for _ShadowEffect;
  uint64_t v69 = v91;
  swift_getWitnessTable();
  unint64_t v70 = sub_100127B40();
  sub_100123814(v70);
  return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v68, v69);
}

uint64_t sub_1001257B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(void, void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v88 = a1;
  uint64_t v89 = a5;
  uint64_t v87 = a3;
  uint64_t v85 = a6;
  type metadata accessor for NonModalPromptViewButtonStyle();
  uint64_t v8 = sub_100128F88(&qword_1005203D0, (void (*)(uint64_t))type metadata accessor for NonModalPromptViewButtonStyle);
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  sub_10000F69C(&qword_1005190F8);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  *(void *)&long long v94 = a4;
  *((void *)&v94 + 1) = v8;
  *(void *)&long long v93 = swift_getOpaqueTypeMetadata2();
  *((void *)&v93 + 1) = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  uint64_t v9 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v70 = v9;
  uint64_t v10 = type metadata accessor for HStack();
  uint64_t v71 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v68 = (char *)&v65 - v11;
  uint64_t v72 = v12;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v73 = (char *)&v65 - v14;
  uint64_t v75 = v15;
  uint64_t v82 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v81 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v78 = (char *)&v65 - v18;
  uint64_t v19 = sub_10000F214(&qword_1005203C8);
  uint64_t v79 = *(void *)(v19 - 8);
  uint64_t v80 = v19;
  __chkstk_darwin(v19);
  uint64_t v77 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v86 = (char *)&v65 - v22;
  uint64_t v83 = a2;
  uint64_t v84 = a4;
  *(void *)&long long v93 = a2;
  *((void *)&v93 + 1) = v87;
  *(void *)&long long v94 = a4;
  *((void *)&v94 + 1) = v89;
  uint64_t v23 = (void *)(v88 + *(int *)(type metadata accessor for NonModalPromptView() + 52));
  uint64_t v24 = v23[1];
  *(void *)&long long v93 = *v23;
  *((void *)&v93 + 1) = v24;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v25 = Text.init<A>(_:)();
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  static Font.title3.getter();
  uint64_t v30 = Text.font(_:)();
  uint64_t v32 = v31;
  LOBYTE(a2) = v33;
  uint64_t v35 = v34;
  swift_release();
  sub_100012FAC(v25, v27, v29);
  swift_bridgeObjectRelease();
  uint64_t v36 = static Alignment.leading.getter();
  sub_10022551C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v93, 0.0, 1, 0.0, 1, v36, v37, v30, v32, a2 & 1, v35);
  sub_100012FAC(v30, v32, a2 & 1);
  swift_bridgeObjectRelease();
  long long v114 = v99;
  long long v115 = v100;
  long long v116 = v101[0];
  long long v110 = v95;
  long long v111 = v96;
  long long v112 = v97;
  long long v113 = v98;
  long long v108 = v93;
  long long v109 = v94;
  uint64_t KeyPath = swift_getKeyPath();
  long long v123 = v114;
  long long v124 = v115;
  v125[0] = v116;
  long long v119 = v110;
  long long v120 = v111;
  long long v121 = v112;
  long long v122 = v113;
  long long v117 = v108;
  long long v118 = v109;
  *(void *)&v125[1] = KeyPath;
  BYTE8(v125[1]) = 0;
  if (qword_100517ED8 != -1) {
    swift_once();
  }
  long long v67 = xmmword_1005202E8;
  uint64_t v39 = qword_1005202F8;
  uint64_t v40 = unk_100520300;
  char v41 = static Edge.Set.all.getter();
  long long v99 = v123;
  long long v100 = v124;
  v101[0] = v125[0];
  *(_OWORD *)((char *)v101 + 9) = *(_OWORD *)((char *)v125 + 9);
  long long v95 = v119;
  long long v96 = v120;
  long long v97 = v121;
  long long v98 = v122;
  long long v93 = v117;
  long long v94 = v118;
  char v126 = 0;
  char v102 = v41;
  *(_DWORD *)uint64_t v103 = v127[0];
  *(_DWORD *)&v103[3] = *(_DWORD *)((char *)v127 + 3);
  long long v104 = v67;
  uint64_t v105 = v39;
  uint64_t v106 = v40;
  char v107 = 0;
  uint64_t v42 = sub_10000F214(&qword_1005203F0);
  uint64_t v43 = sub_100128D30(&qword_1005203F8, &qword_1005203F0, (void (*)(void))sub_100127B9C);
  uint64_t v44 = v86;
  uint64_t v66 = v43;
  *(void *)&long long v67 = v42;
  View.smartDialogAnimatable()();
  uint64_t v45 = sub_100127CB0((uint64_t)&v117);
  __chkstk_darwin(v45);
  static VerticalAlignment.center.getter();
  uint64_t v46 = v68;
  HStack.init(alignment:spacing:content:)();
  uint64_t v47 = v46;
  if (qword_100517EE0 != -1) {
    swift_once();
  }
  uint64_t v48 = v72;
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v50 = v73;
  View.padding(_:)();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v47, v48);
  static Alignment.center.getter();
  v92[4] = v49;
  v92[5] = &protocol witness table for _PaddingLayout;
  uint64_t v63 = v75;
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v51 = v81;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v50, v63);
  v92[2] = v64;
  v92[3] = &protocol witness table for _FlexFrameLayout;
  uint64_t v52 = v82;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v54 = v78;
  sub_100224E4C(v51, v52, v53);
  uint64_t v55 = v76;
  uint64_t v89 = *(void (**)(void, void))(v76 + 8);
  v89(v51, v52);
  uint64_t v56 = v79;
  uint64_t v57 = v77;
  uint64_t v58 = v44;
  uint64_t v59 = v80;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v77, v58, v80);
  *(void *)&long long v93 = v57;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v51, v54, v52);
  *((void *)&v93 + 1) = v51;
  v92[0] = v59;
  v92[1] = v52;
  uint64_t OpaqueTypeConformance2 = v67;
  uint64_t v91 = v66;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v91 = v53;
  sub_100059B74((uint64_t)&v93, 2uLL, (uint64_t)v92);
  uint64_t v60 = v89;
  v89(v54, v52);
  uint64_t v61 = *(void (**)(void, void))(v56 + 8);
  v61(v86, v59);
  v60(v51, v52);
  return ((uint64_t (*)(char *, uint64_t))v61)(v57, v59);
}

uint64_t sub_1001261CC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v119 = a1;
  uint64_t v110 = a6;
  uint64_t v10 = type metadata accessor for NonModalPromptViewButtonStyle();
  uint64_t v11 = sub_100128F88(&qword_1005203D0, (void (*)(uint64_t))type metadata accessor for NonModalPromptViewButtonStyle);
  uint64_t v131 = a2;
  uint64_t v132 = v10;
  uint64_t v133 = a4;
  uint64_t v134 = v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v105 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v101 = (char *)&v87 - v13;
  uint64_t v131 = a2;
  uint64_t v132 = v10;
  uint64_t v133 = a4;
  uint64_t v134 = v11;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v106 = OpaqueTypeMetadata2;
  uint64_t v131 = OpaqueTypeMetadata2;
  uint64_t v132 = OpaqueTypeConformance2;
  uint64_t v99 = OpaqueTypeConformance2;
  uint64_t v15 = swift_getOpaqueTypeMetadata2();
  uint64_t v102 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  long long v98 = (char *)&v87 - v16;
  sub_10000F69C(&qword_1005190F8);
  uint64_t v103 = v15;
  uint64_t v104 = type metadata accessor for ModifiedContent();
  uint64_t v107 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  long long v109 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  long long v108 = (char *)&v87 - v19;
  uint64_t v20 = swift_checkMetadataState();
  __chkstk_darwin(v20);
  long long v111 = (uint64_t *)((char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  uint64_t v112 = (uint64_t)&v87 - v23;
  uint64_t v131 = a3;
  uint64_t v132 = v24;
  uint64_t v94 = a5;
  uint64_t v133 = a5;
  uint64_t v134 = v11;
  uint64_t v25 = swift_getOpaqueTypeMetadata2();
  uint64_t v90 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v88 = (char *)&v87 - v26;
  uint64_t v131 = a3;
  uint64_t v132 = v20;
  uint64_t v113 = v20;
  uint64_t v133 = a5;
  uint64_t v134 = v11;
  uint64_t v114 = v11;
  uint64_t v27 = a4;
  uint64_t v120 = swift_getOpaqueTypeConformance2();
  uint64_t v121 = v25;
  uint64_t v131 = v25;
  uint64_t v132 = v120;
  uint64_t v28 = swift_getOpaqueTypeMetadata2();
  uint64_t v91 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v89 = (char *)&v87 - v29;
  uint64_t v30 = type metadata accessor for ModifiedContent();
  long long v97 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v92 = (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  long long v93 = (char *)&v87 - v33;
  uint64_t v34 = type metadata accessor for Optional();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v87 - v36;
  uint64_t v38 = *(void *)(a3 - 8);
  __chkstk_darwin(v39);
  char v41 = (char *)&v87 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = v30;
  uint64_t v117 = type metadata accessor for Optional();
  uint64_t v115 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  long long v116 = (char *)&v87 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v122 = (uint64_t)&v87 - v44;
  uint64_t v96 = a2;
  uint64_t v131 = a2;
  uint64_t v132 = a3;
  uint64_t v100 = v27;
  uint64_t v133 = v27;
  uint64_t v134 = v94;
  uint64_t v95 = type metadata accessor for NonModalPromptView();
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v37, &v119[*(int *)(v95 + 60)], v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v37, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
    uint64_t v45 = (uint64_t)v116;
    v97[7](v116, 1, 1, v118);
    uint64_t v131 = v121;
    uint64_t v132 = v120;
    uint64_t v46 = swift_getOpaqueTypeConformance2();
    uint64_t v47 = sub_100013AA8(&qword_1005190F0, &qword_1005190F8);
    v130[4] = v46;
    v130[5] = v47;
    swift_getWitnessTable();
    sub_100059E30(v45, v122);
    uint64_t v48 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v115 + 8);
    uint64_t v94 = (v115 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v49 = v45;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v41, v37, a3);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v51 = v111;
    *long long v111 = KeyPath;
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v52 = (uint64_t)v51;
    uint64_t v53 = v112;
    sub_100127D3C(v52, v112);
    uint64_t v54 = v88;
    View.buttonStyle<A>(_:)();
    sub_100128CC0(v53, (uint64_t (*)(void))type metadata accessor for NonModalPromptViewButtonStyle);
    uint64_t v55 = v89;
    uint64_t v56 = v120;
    uint64_t v57 = v121;
    View.smartDialogAnimatable()();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v54, v57);
    swift_getKeyPath();
    LOBYTE(v130[0]) = 0;
    uint64_t v131 = v57;
    uint64_t v132 = v56;
    uint64_t v58 = swift_getOpaqueTypeConformance2();
    uint64_t v59 = v92;
    View.environment<A>(_:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v55, v28);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v41, a3);
    uint64_t v60 = sub_100013AA8(&qword_1005190F0, &qword_1005190F8);
    uint64_t v123 = v58;
    uint64_t v124 = v60;
    uint64_t v61 = v118;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v63 = v93;
    sub_100224E4C(v59, v61, WitnessTable);
    uint64_t v64 = v97;
    uint64_t v65 = v97[1];
    ((void (*)(char *, uint64_t))v65)(v59, v61);
    uint64_t v66 = (uint64_t)v116;
    sub_100224E4C(v63, v61, WitnessTable);
    ((void (*)(char *, uint64_t))v65)(v63, v61);
    v64[7]((char *)v66, 0, 1, v61);
    sub_100059E30(v66, v122);
    uint64_t v48 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v115 + 8);
    uint64_t v94 = (v115 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v49 = v66;
  }
  long long v97 = v48;
  ((void (*)(uint64_t, uint64_t))v48)(v49, v117);
  uint64_t v67 = swift_getKeyPath();
  long long v68 = v111;
  *long long v111 = v67;
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v69 = (uint64_t)v68;
  uint64_t v70 = v112;
  sub_100127D3C(v69, v112);
  uint64_t v71 = v101;
  View.buttonStyle<A>(_:)();
  sub_100128CC0(v70, (uint64_t (*)(void))type metadata accessor for NonModalPromptViewButtonStyle);
  uint64_t v72 = v98;
  uint64_t v73 = v106;
  uint64_t v74 = v99;
  View.smartDialogAnimatable()();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v71, v73);
  swift_getKeyPath();
  LOBYTE(v130[0]) = 0;
  uint64_t v131 = v73;
  uint64_t v132 = v74;
  long long v119 = (char *)&opaque type descriptor for <<opaque return type of View.smartDialogAnimatable()>>;
  uint64_t v75 = swift_getOpaqueTypeConformance2();
  uint64_t v76 = v109;
  uint64_t v77 = v103;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v72, v77);
  uint64_t v78 = sub_100013AA8(&qword_1005190F0, &qword_1005190F8);
  void v130[2] = v75;
  v130[3] = v78;
  uint64_t v79 = v104;
  uint64_t v114 = swift_getWitnessTable();
  uint64_t v80 = v108;
  sub_100224E4C(v76, v79, v114);
  uint64_t v81 = v107;
  uint64_t v82 = *(void (**)(char *, uint64_t))(v107 + 8);
  v82(v76, v79);
  uint64_t v83 = v116;
  uint64_t v84 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v116, v122, v117);
  uint64_t v131 = (uint64_t)v83;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v76, v80, v79);
  uint64_t v132 = (uint64_t)v76;
  v130[0] = v84;
  v130[1] = v79;
  uint64_t v128 = v121;
  uint64_t v129 = v120;
  uint64_t v126 = swift_getOpaqueTypeConformance2();
  uint64_t v127 = v78;
  uint64_t v125 = swift_getWitnessTable();
  uint64_t v128 = swift_getWitnessTable();
  uint64_t v129 = v114;
  sub_100059B74((uint64_t)&v131, 2uLL, (uint64_t)v130);
  v82(v80, v79);
  uint64_t v85 = v97;
  ((void (*)(uint64_t, uint64_t))v97)(v122, v84);
  v82(v76, v79);
  return ((uint64_t (*)(char *, uint64_t))v85)(v83, v84);
}

uint64_t sub_10012708C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000F214(&qword_100519A78);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = (char *)v5 + *(int *)(v3 + 28);
  uint64_t v10 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v11 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v9, v10, v11);
  __asm { FMOV            V0.2D, #28.0 }
  *uint64_t v5 = _Q0;
  static Color.white.getter();
  uint64_t v17 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  sub_100128C58((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v18 = &v8[*(int *)(sub_10000F214(&qword_100519A80) + 36)];
  long long v19 = v28;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)&v27[8];
  *((_OWORD *)v18 + 1) = v19;
  *((void *)v18 + 4) = v29;
  uint64_t v20 = sub_10000F214(&qword_100519A88);
  *(void *)&v8[*(int *)(v20 + 52)] = v17;
  *(_WORD *)&v8[*(int *)(v20 + 56)] = 256;
  uint64_t v21 = static Alignment.center.getter();
  uint64_t v23 = v22;
  uint64_t v24 = (uint64_t *)&v8[*(int *)(sub_10000F214(&qword_100519A90) + 36)];
  *uint64_t v24 = v21;
  v24[1] = v23;
  sub_100128CC0((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000FB74((uint64_t)v8, a1, &qword_100519A78);
  uint64_t v25 = a1 + *(int *)(sub_10000F214(&qword_100519A60) + 36);
  *(void *)uint64_t v25 = 0x4000000000000000;
  *(unsigned char *)(v25 + 8) = 0;
  return sub_10000FBD8((uint64_t)v8, &qword_100519A78);
}

uint64_t type metadata accessor for NonModalPromptViewButtonStyle()
{
  uint64_t result = qword_100520478;
  if (!qword_100520478) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10012732C()
{
  return sub_100127D1C((uint64_t (*)(void, void, void, void, void))sub_1001257B0);
}

uint64_t sub_100127344@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v47 = a3;
  uint64_t v13 = sub_10000F214(&qword_100520548);
  uint64_t v44 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_100520578);
  uint64_t v45 = *(void *)(v16 - 8);
  uint64_t v46 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_100520540);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_100520520);
  uint64_t v24 = v23 - 8;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[3] = a2;
  if (TransitionPhase.isIdentity.getter()) {
    double v27 = 0.0;
  }
  else {
    double v27 = 8.0;
  }
  uint64_t v28 = sub_10000F214(&qword_100520568);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v15, a1, v28);
  uint64_t v29 = &v15[*(int *)(v13 + 36)];
  *(double *)uint64_t v29 = v27;
  v29[8] = 0;
  uint64_t v30 = swift_allocObject();
  *(double *)(v30 + 16) = a4;
  *(double *)(v30 + 24) = a5;
  *(double *)(v30 + 32) = a6;
  *(double *)(v30 + 40) = a7;
  *(unsigned char *)(v30 + 48) = a2;
  sub_10000F214(&qword_100520550);
  sub_100128EE8();
  uint64_t v31 = type metadata accessor for EmptyVisualEffect();
  uint64_t v32 = sub_100128F88((unint64_t *)&qword_100520570, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  uint64_t v48 = v31;
  uint64_t v49 = v32;
  swift_getOpaqueTypeConformance2();
  View.visualEffect<A>(_:)();
  swift_release();
  sub_10000FBD8((uint64_t)v15, &qword_100520548);
  if (TransitionPhase.isIdentity.getter()) {
    double v33 = 1.0;
  }
  else {
    double v33 = 0.0;
  }
  uint64_t v35 = v45;
  uint64_t v34 = v46;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v22, v18, v46);
  *(double *)&v22[*(int *)(v20 + 44)] = v33;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v34);
  if (TransitionPhase.isIdentity.getter()) {
    double v36 = 1.0;
  }
  else {
    double v36 = 0.98;
  }
  static UnitPoint.center.getter();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_10000FB74((uint64_t)v22, (uint64_t)v26, &qword_100520540);
  char v41 = &v26[*(int *)(v24 + 44)];
  *(double *)char v41 = v36;
  *((double *)v41 + 1) = v36;
  *((void *)v41 + 2) = v38;
  *((void *)v41 + 3) = v40;
  sub_10000FBD8((uint64_t)v22, &qword_100520540);
  return sub_10000FC34((uint64_t)v26, v47, &qword_100520520);
}

uint64_t sub_10012773C(CGFloat a1, CGFloat a2, CGFloat a3, double a4)
{
  uint64_t v8 = type metadata accessor for NamedCoordinateSpace();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[0] = 0x6C61626F6C67;
  v28[1] = 0xE600000000000000;
  static CoordinateSpaceProtocol<>.named<A>(_:)();
  GeometryProxy.bounds(of:)();
  double v12 = *(double *)v27;
  double v13 = *(double *)&v27[1];
  double v14 = *(double *)&v27[2];
  double v15 = *(double *)&v27[3];
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  sub_10000FC34((uint64_t)v27, (uint64_t)v28, (uint64_t *)&unk_100518AE0);
  if ((v29 & 1) == 0)
  {
    a1 = v12;
    a2 = v13;
    a3 = v14;
    a4 = v15;
  }
  *(double *)uint64_t v26 = a4;
  v26[1] = 0x6C61626F6C67;
  v26[2] = 0xE600000000000000;
  static CoordinateSpaceProtocol<>.named<A>(_:)();
  GeometryProxy.frame<A>(in:)();
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  CGFloat v24 = v23;
  v16(v11, v8);
  if ((TransitionPhase.isIdentity.getter() & 1) == 0)
  {
    v30.origin.CGFloat x = a1;
    v30.origin.CGFloat y = a2;
    v30.size.int32_t width = a3;
    *(void *)&v30.size.CGFloat height = v26[0];
    CGRectGetMidY(v30);
    v31.origin.CGFloat x = v18;
    v31.origin.CGFloat y = v20;
    v31.size.int32_t width = v22;
    v31.size.CGFloat height = v24;
    CGRectGetMinY(v31);
  }
  type metadata accessor for EmptyVisualEffect();
  sub_100128F88((unint64_t *)&qword_100520570, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  return VisualEffect.offset(x:y:)();
}

uint64_t sub_1001279C4()
{
  id v0 = [self mainScreen];
  [v0 bounds];

  static Animation.spring(response:dampingFraction:blendDuration:)();
  sub_10000F214(&qword_100520518);
  sub_10000F214(&qword_100520520);
  sub_100013AA8(&qword_100520528, &qword_100520518);
  sub_100128D30(&qword_100520530, &qword_100520520, (void (*)(void))sub_100128DAC);
  View.animation<A>(_:body:)();
  return swift_release();
}

unint64_t sub_100127B40()
{
  unint64_t result = qword_1005203E8;
  if (!qword_1005203E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005203E8);
  }
  return result;
}

unint64_t sub_100127B9C()
{
  unint64_t result = qword_100520400;
  if (!qword_100520400)
  {
    sub_10000F69C(&qword_100520408);
    sub_100127C3C();
    sub_100013AA8(&qword_100518C38, &qword_100518C40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520400);
  }
  return result;
}

unint64_t sub_100127C3C()
{
  unint64_t result = qword_100520410;
  if (!qword_100520410)
  {
    sub_10000F69C(&qword_100520418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520410);
  }
  return result;
}

uint64_t sub_100127CB0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100127D04()
{
  return sub_100127D1C((uint64_t (*)(void, void, void, void, void))sub_1001261CC);
}

uint64_t sub_100127D1C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100127D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NonModalPromptViewButtonStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for NonModalPromptViewTransition()
{
  return &type metadata for NonModalPromptViewTransition;
}

uint64_t *sub_100127DB8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(sub_10000F214(&qword_100522BF0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100127EC4(uint64_t a1)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_release();
  }
}

void *sub_100127F68(void *a1, void *a2)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100128024(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1001280F8(void *a1, const void *a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_1001281BC(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v4 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100128298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001282AC);
}

uint64_t sub_1001282AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522CF0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10012831C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128330);
}

uint64_t sub_100128330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100522CF0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_1001283A4()
{
  sub_100027A88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100128430()
{
  return swift_getWitnessTable();
}

uint64_t sub_100128958()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100128974()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1001289A0()
{
  unint64_t result = qword_1005204F0;
  if (!qword_1005204F0)
  {
    sub_10000F69C(&qword_1005204D0);
    sub_100128A40();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005204F0);
  }
  return result;
}

unint64_t sub_100128A40()
{
  unint64_t result = qword_1005204F8;
  if (!qword_1005204F8)
  {
    sub_10000F69C(&qword_1005204C8);
    sub_100128AE0();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005204F8);
  }
  return result;
}

unint64_t sub_100128AE0()
{
  unint64_t result = qword_100520500;
  if (!qword_100520500)
  {
    sub_10000F69C(&qword_1005204C0);
    sub_100128D30(&qword_100520508, &qword_1005204B8, (void (*)(void))sub_100128BAC);
    sub_100013AA8(&qword_100519030, &qword_100519038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520500);
  }
  return result;
}

unint64_t sub_100128BAC()
{
  unint64_t result = qword_100520510;
  if (!qword_100520510)
  {
    sub_10000F69C(&qword_1005204B0);
    sub_100128F88((unint64_t *)&qword_10051BE38, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520510);
  }
  return result;
}

uint64_t sub_100128C58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100128CC0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100128D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100127344(a1, *(unsigned __int8 *)(v2 + 16), a2, *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40), *(double *)(v2 + 48));
}

uint64_t sub_100128D30(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100128DAC()
{
  unint64_t result = qword_100520538;
  if (!qword_100520538)
  {
    sub_10000F69C(&qword_100520540);
    sub_10000F69C(&qword_100520548);
    sub_10000F69C(&qword_100520550);
    sub_100128EE8();
    type metadata accessor for EmptyVisualEffect();
    sub_100128F88((unint64_t *)&qword_100520570, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520538);
  }
  return result;
}

unint64_t sub_100128EE8()
{
  unint64_t result = qword_100520558;
  if (!qword_100520558)
  {
    sub_10000F69C(&qword_100520548);
    sub_100013AA8(&qword_100520560, &qword_100520568);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520558);
  }
  return result;
}

uint64_t sub_100128F88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100128FD0()
{
  return swift_deallocObject();
}

uint64_t sub_100128FE0()
{
  return sub_10012773C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100128FF0()
{
  return sub_100128D30(&qword_100520580, &qword_1005204E8, (void (*)(void))sub_100129034);
}

unint64_t sub_100129034()
{
  unint64_t result = qword_100520588;
  if (!qword_100520588)
  {
    sub_10000F69C(&qword_1005204E0);
    sub_10000F69C(&qword_1005204D0);
    sub_1001289A0();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_10051CD20, &qword_10051CC78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520588);
  }
  return result;
}

uint64_t sub_100129108()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ReadAloudClassifier()
{
  return &type metadata for ReadAloudClassifier;
}

uint64_t sub_1001291E8(uint64_t a1, uint64_t a2)
{
  v2[12] = a1;
  v2[13] = a2;
  type metadata accessor for CVDetection();
  v2[14] = swift_task_alloc();
  v2[15] = type metadata accessor for BundleClassification.ClassificationType(0);
  v2[16] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TextDetectorResult(0);
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_100129314, 0, 0);
}

uint64_t sub_100129314()
{
  uint64_t v71 = v0;
  double v1 = sub_10019CAAC();
  uint64_t v2 = v1[2];
  if (!v2)
  {
    swift_bridgeObjectRelease();
    sub_100022E84();
    swift_allocError();
    *CGRect v31 = 0xD000000000000015;
    v31[1] = 0x8000000100425120;
LABEL_31:
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = (uint64_t (*)(void))v0[1];
    goto LABEL_32;
  }
  uint64_t v3 = v0 + 8;
  uint64_t v59 = v0 + 9;
  uint64_t v60 = v0 + 10;
  uint64_t v63 = v1;
  uint64_t v4 = v0[18];
  uint64_t v5 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = *(void *)(v4 + 72);
  swift_bridgeObjectRetain();
  uint64_t v7 = &_swiftEmptySetSingleton;
  uint64_t v68 = v5;
  do
  {
    uint64_t v8 = v0[20];
    sub_100025568(v5, v8, type metadata accessor for TextDetectorResult);
    swift_bridgeObjectRetain();
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v7 = (void *)sub_100129C48(v9, (uint64_t)v7);
    sub_1000255D0(v8, type metadata accessor for TextDetectorResult);
    swift_bridgeObjectRelease();
    v5 += v6;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  int64_t v10 = v63[2];
  if (v10)
  {
    uint64_t v61 = v0 + 8;
    uint64_t v62 = v7;
    uint64_t v67 = v0[17];
    sub_1000407B0(0, v10, 0);
    uint64_t v11 = 0;
    uint64_t v65 = v6;
    uint64_t v66 = v0;
    int64_t v64 = v10;
    do
    {
      uint64_t v12 = v0[19];
      sub_100025568(v68 + v11 * v6, v12, type metadata accessor for TextDetectorResult);
      uint64_t v13 = *(void *)(v12 + *(int *)(v67 + 44));
      int64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v69 = v11;
        v70[0] = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_1000407B0(0, v14, 0);
        uint64_t v15 = 0;
        uint64_t v16 = _swiftEmptyArrayStorage;
        unint64_t v17 = _swiftEmptyArrayStorage[2];
        uint64_t v18 = 2 * v17;
        do
        {
          uint64_t v19 = *(void *)(v13 + v15 + 40);
          uint64_t v20 = *(void *)(v13 + v15 + 48);
          v70[0] = (uint64_t)v16;
          unint64_t v21 = v16[3];
          int64_t v22 = v17 + 1;
          swift_bridgeObjectRetain();
          if (v17 >= v21 >> 1)
          {
            sub_1000407B0(v21 > 1, v22, 1);
            uint64_t v16 = (void *)v70[0];
          }
          v16[2] = v22;
          double v23 = &v16[v18];
          void v23[4] = v19;
          void v23[5] = v20;
          v18 += 2;
          v15 += 40;
          ++v17;
          --v14;
        }
        while (v14);
        swift_bridgeObjectRelease();
        uint64_t v6 = v65;
        unint64_t v0 = v66;
        int64_t v10 = v64;
        uint64_t v11 = v69;
      }
      else
      {
        uint64_t v16 = _swiftEmptyArrayStorage;
      }
      uint64_t v24 = v0[19];
      v0[7] = (uint64_t)v16;
      sub_10000F214((uint64_t *)&unk_100522CD0);
      sub_100013AA8((unint64_t *)&qword_10051CA40, (uint64_t *)&unk_100522CD0);
      uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v27 = v26;
      swift_bridgeObjectRelease();
      sub_1000255D0(v24, type metadata accessor for TextDetectorResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000407B0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v29 = _swiftEmptyArrayStorage[2];
      unint64_t v28 = _swiftEmptyArrayStorage[3];
      if (v29 >= v28 >> 1) {
        sub_1000407B0(v28 > 1, v29 + 1, 1);
      }
      ++v11;
      _swiftEmptyArrayStorage[2] = v29 + 1;
      CGRect v30 = &_swiftEmptyArrayStorage[2 * v29];
      v30[4] = v25;
      v30[5] = v27;
    }
    while (v11 != v10);
    swift_bridgeObjectRelease();
    uint64_t v3 = v61;
    uint64_t v7 = v62;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  *uint64_t v3 = _swiftEmptyArrayStorage;
  sub_10000F214((uint64_t *)&unk_100522CD0);
  sub_100013AA8((unint64_t *)&qword_10051CA40, (uint64_t *)&unk_100522CD0);
  uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v34 = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = HIBYTE(v34) & 0xF;
  if ((v34 & 0x2000000000000000) == 0) {
    uint64_t v35 = v32 & 0xFFFFFFFFFFFFLL;
  }
  if (!v35)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_100517E78 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10000F378(v37, (uint64_t)qword_10055E280);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      v0[11] = sub_1003806B0(0xD000000000000020, 0x8000000100427750, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100022E84();
    swift_allocError();
    *char v41 = 0xD000000000000020;
    v41[1] = 0x8000000100427750;
    goto LABEL_31;
  }
  double v36 = sub_100335A80();
  swift_bridgeObjectRelease();
  if (sub_10012A6F8((uint64_t)v7, (uint64_t)v36))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  if (qword_100517E78 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  sub_10000F378(v44, (uint64_t)qword_10055E280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 134218242;
    uint64_t v48 = v36[2];
    swift_bridgeObjectRelease();
    void *v59 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v49 = Set.description.getter();
    unint64_t v51 = v50;
    swift_bridgeObjectRelease();
    *uint64_t v60 = sub_1003806B0(v49, v51, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Detected readable text with: %ld tokens and languages: %s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v52 = v0[16];
  uint64_t v53 = v0[14];
  uint64_t v54 = v0[12];
  swift_storeEnumTagMultiPayload();
  sub_10019D408(v53);
  sub_1003FEC34(v0 + 2);
  uint64_t v55 = v0[5];
  uint64_t v56 = v0[6];
  sub_10000F3B0(v0 + 2, v55);
  double v57 = (*(double (**)(uint64_t, uint64_t))(v56 + 88))(v55, v56);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  sub_1000255D0(v53, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_100025500(v52, v54, type metadata accessor for BundleClassification.ClassificationType);
  uint64_t v58 = type metadata accessor for BundleClassification(0);
  *(void *)(v54 + *(int *)(v58 + 20)) = 0x3FF0000000000000;
  *(double *)(v54 + *(int *)(v58 + 24)) = v57;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = (uint64_t (*)(void))v0[1];
LABEL_32:
  return v42();
}

uint64_t sub_100129C48(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1001F934C(&v17, v12, v13);
    unint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100129DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000F878;
  return sub_1001291E8(a1, a2);
}

uint64_t sub_100129E6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for VisualDomain();
  unint64_t v73 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v75 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v77 = (char *)&v66 - v8;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v66 - v10;
  __chkstk_darwin(v12);
  int64_t v14 = (char *)&v66 - v13;
  uint64_t v76 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v76);
  uint64_t v72 = (uint64_t)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v74 = (uint64_t)&v66 - v17;
  uint64_t v18 = type metadata accessor for CVDetection();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v21);
  double v23 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025568(a1, (uint64_t)v23, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
    return 0;
  }
  sub_1000255D0((uint64_t)v23, type metadata accessor for CVBundle.BundleType);
  sub_10019C820((uint64_t)v20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_100025500((uint64_t)v20, (uint64_t)v4, type metadata accessor for ObjectDetectorResult);
    uint64_t v38 = &v4[*(int *)(v2 + 28)];
    uint64_t v39 = *(void *)v38;
    uint64_t v40 = *((void *)v38 + 1);
    BOOL v41 = *(void *)v38 == 1852270963 && v40 == 0xE400000000000000;
    if (v41
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v39 == 0x746E656D75636F64 && v40 == 0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v42 = type metadata accessor for ObjectDetectorResult;
      uint64_t v43 = (uint64_t)v4;
LABEL_32:
      sub_1000255D0(v43, v42);
      return 1;
    }
    uint64_t v44 = type metadata accessor for ObjectDetectorResult;
    uint64_t v45 = (uint64_t)v4;
LABEL_18:
    sub_1000255D0(v45, v44);
    return 0;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v44 = (uint64_t (*)(void))type metadata accessor for CVDetection;
    uint64_t v45 = (uint64_t)v20;
    goto LABEL_18;
  }
  uint64_t v26 = (uint64_t)v20;
  uint64_t v27 = v74;
  sub_100025500(v26, v74, type metadata accessor for ParseDetectorResult);
  uint64_t v28 = v76;
  uint64_t v29 = *(void *)(v27 + *(int *)(v76 + 28));
  swift_bridgeObjectRetain();
  static VisualDomain.book.getter();
  uint64_t v70 = *(void *)(v29 + 16);
  if (!v70)
  {
    char v35 = 0;
    unint64_t v30 = v73;
    double v36 = *(void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v37 = (v73 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v36(v14, v5);
    goto LABEL_30;
  }
  unint64_t v30 = v73;
  unint64_t v31 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  uint64_t v69 = *(void (**)(char *, unint64_t, uint64_t))(v73 + 16);
  v69(v11, v29 + v31, v5);
  unint64_t v32 = sub_100023960();
  swift_bridgeObjectRetain();
  unint64_t v68 = v32;
  char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v34 = *(void (**)(char *, uint64_t))(v30 + 8);
  uint64_t v67 = (v30 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v71 = v34;
  v34(v11, v5);
  if (v33)
  {
    swift_bridgeObjectRelease();
    char v35 = 1;
    double v36 = v71;
    uint64_t v37 = v67;
    uint64_t v28 = v76;
    v71(v14, v5);
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t v53 = v72;
    sub_100025568(v27, v72, type metadata accessor for ParseDetectorResult);
    if ((v35 & 1) == 0)
    {
      uint64_t v54 = *(void *)(v53 + *(int *)(v28 + 28));
      swift_bridgeObjectRetain();
      static VisualDomain.album.getter();
      uint64_t v55 = *(void *)(v54 + 16);
      if (v55)
      {
        uint64_t v56 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
        unint64_t v73 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
        uint64_t v71 = v36;
        double v57 = v75;
        uint64_t v76 = (uint64_t)v56;
        v56(v75, v54 + v73, v5);
        sub_100023960();
        swift_bridgeObjectRetain();
        char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v59 = v57;
        double v36 = v71;
        uint64_t v67 = v37;
        v71(v59, v5);
        if (v58)
        {
          swift_bridgeObjectRelease();
          uint64_t v46 = 1;
        }
        else
        {
          uint64_t v70 = v54;
          if (v55 != 1)
          {
            uint64_t v60 = *(void *)(v30 + 72);
            uint64_t v61 = v70 + v60 + v73;
            uint64_t v62 = 1;
            uint64_t v63 = v75;
            while (1)
            {
              uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v76)(v63, v61, v5);
              uint64_t v64 = v62 + 1;
              if (__OFADD__(v62, 1)) {
                goto LABEL_51;
              }
              char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
              v71(v63, v5);
              if (v65) {
                break;
              }
              ++v62;
              v61 += v60;
              if (v64 == v55)
              {
                swift_bridgeObjectRelease();
                uint64_t v46 = 0;
LABEL_47:
                uint64_t v27 = v74;
                double v36 = v71;
                uint64_t v53 = v72;
                goto LABEL_48;
              }
            }
            swift_bridgeObjectRelease();
            uint64_t v46 = 1;
            goto LABEL_47;
          }
          swift_bridgeObjectRelease();
          uint64_t v46 = 0;
        }
        uint64_t v27 = v74;
      }
      else
      {
        uint64_t v46 = 0;
      }
LABEL_48:
      v36(v77, v5);
      swift_bridgeObjectRelease();
      sub_1000255D0(v53, type metadata accessor for ParseDetectorResult);
      sub_1000255D0(v27, type metadata accessor for ParseDetectorResult);
      return v46;
    }
    sub_1000255D0(v53, type metadata accessor for ParseDetectorResult);
    uint64_t v43 = v27;
    uint64_t v42 = type metadata accessor for ParseDetectorResult;
    goto LABEL_32;
  }
  uint64_t v66 = v29;
  if (v70 == 1)
  {
    swift_bridgeObjectRelease();
    char v35 = 0;
    double v36 = v71;
    uint64_t v37 = v67;
    uint64_t v28 = v76;
    v71(v14, v5);
    goto LABEL_30;
  }
  uint64_t v47 = *(void *)(v30 + 72);
  uint64_t v48 = v66 + v47 + v31;
  uint64_t v49 = 1;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v69)(v11, v48, v5);
    uint64_t v51 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
    v71(v11, v5);
    if (v52)
    {
      swift_bridgeObjectRelease();
      char v35 = 1;
      goto LABEL_29;
    }
    ++v49;
    v48 += v47;
    if (v51 == v70)
    {
      swift_bridgeObjectRelease();
      char v35 = 0;
LABEL_29:
      unint64_t v30 = v73;
      uint64_t v27 = v74;
      uint64_t v28 = v76;
      double v36 = v71;
      uint64_t v37 = v67;
      v71(v14, v5);
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_10012A6F8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) < 0x65uLL)
  {
    if (qword_100517E78 != -1) {
      swift_once();
    }
    unint64_t v10 = 0x1000000000000020;
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000F378(v11, (uint64_t)qword_10055E280);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    int64_t v14 = "Not enough text to read aloud…";
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_31;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    unint64_t v16 = 0x8000000100427780;
    uint64_t v17 = 0x1000000000000020;
    goto LABEL_30;
  }
  if (qword_100517D90 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)(qword_10055E0A0 + 24);
  unint64_t v3 = *(void *)(qword_10055E0A0 + 32);
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n();
  if (v5)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = String.subscript.getter();
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();
      if (v6 == 45 && v8 == 0xE100000000000000) {
        break;
      }
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0 || 4 * v5 == (unint64_t)String.index(after:)() >> 14) {
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_19:
  String.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = static String._fromSubstring(_:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  if ((sub_1003DF6C4(v18, (uint64_t)v20, a1) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v23._uint64_t countAndFlagsBits = 0xD000000000000015;
    v23._object = (void *)0x80000001004277B0;
    String.append(_:)(v23);
    uint64_t v35 = a1;
    sub_10000F214(&qword_100529710);
    sub_100013AA8((unint64_t *)&unk_1005205A0, &qword_100529710);
    sub_1000317A0();
    v24._uint64_t countAndFlagsBits = Sequence<>.joined(separator:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 0xD000000000000022;
    v25._object = (void *)0x80000001004277D0;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = v18;
    v26._object = v20;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    unint64_t v27 = 0xE000000000000000;
    if (qword_100517E78 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10000F378(v28, (uint64_t)qword_10055E280);
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v31 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_1003806B0(0, 0xE000000000000000, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100022E84();
    uint64_t result = swift_allocError();
    unint64_t *v33 = 0;
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  char v21 = sub_10012ADDC(v4, v3, *(void **)(qword_10055E0A0 + 40));
  swift_bridgeObjectRelease();
  if (v21) {
    return 0;
  }
  if (qword_100517E78 != -1) {
    swift_once();
  }
  unint64_t v10 = 0xD000000000000054;
  uint64_t v32 = type metadata accessor for Logger();
  sub_10000F378(v32, (uint64_t)qword_10055E280);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  int64_t v14 = "There's no Siri voice available for the preferred language code. This is unexpected.";
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    unint64_t v16 = 0x8000000100427800;
    uint64_t v17 = 0xD000000000000054;
LABEL_30:
    uint64_t v35 = sub_1003806B0(v17, v16, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
LABEL_31:

  sub_100022E84();
  uint64_t result = swift_allocError();
  unint64_t *v33 = v10;
  unint64_t v27 = (unint64_t)(v14 - 32) | 0x8000000000000000;
LABEL_34:
  v33[1] = v27;
  return result;
}

uint64_t sub_10012AD98()
{
  return sub_1001077E0(&qword_1005205C0, &qword_1005205C8);
}

uint64_t sub_10012ADDC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  char v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10012AEA4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 9; ; ++i)
  {
    uint64_t v4 = i - 7;
    if (__OFADD__(i - 8, 1)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10012AF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = 5;
  while (1)
  {
    uint64_t v11 = v10 - 3;
    if (__OFADD__(v10 - 4, 1)) {
      break;
    }
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_7;
    }
    ++v10;
    if (v11 == v2) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_10012B060(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10012B0C0(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = sub_10032AE98((uint64_t)a1);
      if (v7)
      {
        uint64_t v5 = *(void *)(*(void *)(a2 + 56) + 8 * v6);
        swift_retain();
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  type metadata accessor for ARCameraSource.ARQuadAnchor();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v5 = v9;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_10012B18C()
{
  *(void *)(v1 + 808) = v0;
  return _swift_task_switch(sub_10012B21C, 0, 0);
}

uint64_t sub_10012B21C()
{
  uint64_t v1 = v0[101];
  v0[102] = OBJC_IVAR____TtC6Tamale14ARCameraSource_signposter;
  sub_10018B270((unint64_t)"ARCameraSource.highQualityFrame", 31, 2u, 1, v0 + 28);
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_session);
  v0[103] = v2;
  id v3 = [v2 configuration];
  if (v3 && (v4 = v3, self, uint64_t v5 = swift_dynamicCastObjCClass(), v4, v5))
  {
    unint64_t v6 = sub_10000F3B0(v0 + 28, v0[31]);
    v0[36] = type metadata accessor for LoggingSignposter.IntervalState(0);
    v0[37] = &off_1004EEE50;
    char v7 = sub_100040120(v0 + 33);
    sub_10014C684((uint64_t)v6, (uint64_t)v7, type metadata accessor for LoggingSignposter.IntervalState);
    sub_10000F3B0(v0 + 33, v0[36]);
    sub_10018BBE8();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 33));
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 28));
    char v8 = (uint64_t (*)(void))v0[1];
    return v8(0);
  }
  else
  {
    uint64_t v10 = *(void **)(v0[101] + OBJC_IVAR____TtC6Tamale14ARCameraSource_photoOutput);
    v0[104] = v10;
    if (v10
      && (id v11 = v10,
          uint64_t v12 = AVCapturePhotoOutput.availablePhotoPixelFormatTypes.getter(),
          char v13 = sub_10012AEA4(875704422, v12),
          swift_bridgeObjectRelease(),
          (v13 & 1) != 0))
    {
      uint64_t v14 = v0[101];
      sub_10000F214((uint64_t *)&unk_10051FB50);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v16;
      *(void *)(inited + 72) = &type metadata for UInt32;
      *(_DWORD *)(inited + 48) = 875704422;
      sub_10031BC4C(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v18 = [self photoSettingsWithFormat:isa];
      v0[105] = v18;

      [v18 setPhotoQualityPrioritization:[v11 maxPhotoQualityPrioritization]];
      [v18 setMaxPhotoDimensions:[v11 maxPhotoDimensions]];
      uint64_t v19 = *(void *)(v14 + OBJC_IVAR____TtC6Tamale14ARCameraSource_shutterSoundTask);
      uint64_t v20 = (void *)swift_task_alloc();
      v0[106] = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_10012B648;
      return Task<>.value.getter((char *)v0 + 700, v19, &type metadata for UInt32);
    }
    else
    {
      return _assertionFailure(_:_:file:line:flags:)();
    }
  }
}

uint64_t sub_10012B648()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10012B770, 0, 0);
}

uint64_t sub_10012B770()
{
  uint64_t v1 = *(void **)(v0 + 840);
  uint64_t v2 = *(void **)(v0 + 824);
  [v1 setShutterSound:*(unsigned int *)(v0 + 700)];
  sub_10018B270((unint64_t)"ARCameraSource.captureHighResolutionFrame", 41, 2u, 1, (uint64_t *)(v0 + 304));
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 800;
  *(void *)(v0 + 24) = sub_10012B8F8;
  uint64_t v3 = swift_continuation_init();
  *(void *)(v0 + 424) = _NSConcreteStackBlock;
  *(void *)(v0 + 432) = 0x40000000;
  *(void *)(v0 + 440) = sub_10012C818;
  *(void *)(v0 + 448) = &unk_1004ED2F0;
  *(void *)(v0 + 456) = v3;
  [v2 captureHighResolutionFrameWithPhotoSettings:v1 completion:v0 + 424];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10012B8F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 856) = v1;
  if (v1) {
    uint64_t v2 = sub_10012C654;
  }
  else {
    uint64_t v2 = sub_10012BA34;
  }
  return _swift_task_switch(v2, 0, 0);
}

id sub_10012BA34()
{
  uint64_t v1 = (void *)(v0 + 224);
  uint64_t v2 = *(void **)(v0 + 800);

  if (!v2)
  {
    char v13 = (uint64_t *)(v0 + 464);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "captureHighResolutionFrame failed", v16, 2u);
      swift_slowDealloc();
    }
    char v17 = *(void **)(v0 + 832);

    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 304);
    id v18 = sub_10000F3B0((void *)(v0 + 224), *(void *)(v0 + 248));
    uint64_t v2 = 0;
    uint64_t v19 = (uint64_t *)(v0 + 488);
    *(void *)(v0 + 488) = type metadata accessor for LoggingSignposter.IntervalState(0);
    uint64_t v20 = 496;
    goto LABEL_61;
  }
  uint64_t v3 = *(void **)(v0 + 840);
  uint64_t v4 = *(void **)(v0 + 832);
  sub_10000F3B0((void *)(v0 + 304), *(void *)(v0 + 328));
  sub_10018BBE8();

  id v5 = v2;
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 304);
  unint64_t v6 = (__CVBuffer *)[v5 capturedImage];
  id v7 = [v5 smoothedSceneDepth];

  if (!v7)
  {
    sub_10018B270((unint64_t)"ARCameraSource.monocularDepth", 29, 2u, 1, (uint64_t *)(v0 + 544));
    int64_t Width = CVPixelBufferGetWidth(v6);
    int64_t Height = CVPixelBufferGetHeight(v6);
    *(void *)(v0 + 792) = 0;
    double v10 = (double)Width / (double)Height;
    if (v10 <= 1.0)
    {
      if (v10 >= 0.642857143) {
        double v11 = 360.0;
      }
      else {
        double v11 = 280.0;
      }
      if (v10 >= 0.642857143) {
        double v12 = 480.0;
      }
      else {
        double v12 = 496.0;
      }
    }
    else
    {
      if (v10 <= 1.55555556) {
        double v11 = 480.0;
      }
      else {
        double v11 = 496.0;
      }
      if (v10 <= 1.55555556) {
        double v12 = 360.0;
      }
      else {
        double v12 = 280.0;
      }
    }
    id v91 = v5;
    CFDictionaryRef v21 = CVPixelBufferCopyCreationAttributes(v6);
    id result = [(__CFDictionary *)v21 mutableCopy];
    if (!result) {
      goto LABEL_72;
    }
    CFDictionaryRef v84 = v21;
    uint64_t v86 = (void *)(v0 + 544);
    if ((~*(void *)&v11 & 0x7FF0000000000000) == 0) {
      goto LABEL_69;
    }
    Swift::String v23 = result;
    long long v93 = v6;
    uint64_t v89 = v2;
    Swift::String v24 = (id)kCVPixelBufferWidthKey;
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [v23 __swift_setObject:isa forKeyedSubscript:v24];

    if ((~*(void *)&v12 & 0x7FF0000000000000) == 0) {
      goto LABEL_70;
    }
    Swift::String v26 = (id)kCVPixelBufferHeightKey;
    Class v27 = Int._bridgeToObjectiveC()().super.super.isa;
    [v23 __swift_setObject:v27 forKeyedSubscript:v26];

    uint64_t v28 = (id)kCVPixelBufferIOSurfacePropertiesKey;
    sub_10031BB08((uint64_t)_swiftEmptyArrayStorage);
    Class v29 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v23 __swift_setObject:v29 forKeyedSubscript:v28];

    CVPixelBufferCreate(0, (uint64_t)v11, (uint64_t)v12, 0x34323066u, (CFDictionaryRef)v23, (CVPixelBufferRef *)(v0 + 792));
    os_log_type_t v30 = *(void **)(v0 + 792);
    if (v30)
    {
      *(_OWORD *)(v0 + 704) = 0u;
      *(_OWORD *)(v0 + 720) = 0u;
      *(unsigned char *)(v0 + 736) = 1;
      unint64_t v31 = v30;
      sub_1001CA388(v6, v31, v0 + 704, 0.0);
      type metadata accessor for MonocularDepth();
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 16) = 0;
      *(void *)(inited + 24) = 0;
      *(unsigned char *)(inited + 32) = 1;
      *(void *)(inited + 40) = 0;
      *(unsigned char *)(inited + 48) = 1;
      id v33 = [objc_allocWithZone((Class)ADMonocularV2Executor) initWithInputPrioritization:3];
      *(void *)(inited + 56) = v33;
      sub_100088FEC(v31);
      CVPixelBufferRef v34 = sub_1000890C0();
      if (v34)
      {
        CVPixelBufferRef v35 = v34;
        id v36 = [objc_allocWithZone((Class)ARDepthData) initWithDepthMap:v34 confidenceMap:0];
        [v91 setSmoothedSceneDepth:v36];
        swift_setDeallocating();
        uint64_t v37 = *(void **)(inited + 16);
      }
      else
      {
        swift_setDeallocating();
        uint64_t v38 = *(void **)(inited + 16);
      }
      uint64_t v1 = (void *)(v0 + 224);
      unint64_t v6 = v93;
    }
    sub_10000F3B0(v86, *(void *)(v0 + 568));
    sub_10018BBE8();

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v86);
    uint64_t v2 = v89;
    id v5 = v91;
  }
  uint64_t v39 = (CGRect *)(*(void *)(v0 + 808) + OBJC_IVAR____TtC6Tamale14ARCameraSource_safeArea);
  double v40 = 0.0;
  v98.origin.double x = 0.0;
  v98.origin.double y = 0.0;
  v98.size.int32_t width = 1.0;
  v98.size.CGFloat height = 1.0;
  if (!CGRectEqualToRect(*v39, v98))
  {
    sub_10018B270((unint64_t)"ARCameraSource.applySafetyCrop", 30, 2u, 1, (uint64_t *)(v0 + 344));
    double x = v39->origin.x;
    double y = v39->origin.y;
    double v44 = v39->size.width;
    double v43 = v39->size.height;
    double v45 = (double)(uint64_t)CVPixelBufferGetWidth(v6);
    double v46 = (double)(uint64_t)CVPixelBufferGetHeight(v6);
    v96.origin.double x = x;
    v96.origin.double y = y;
    v96.size.int32_t width = v44;
    v96.size.CGFloat height = v43;
    if (CGRectIsEmpty(v96))
    {
      double v47 = 0.0;
    }
    else
    {
      double v47 = round(x * v45);
      double v45 = round(v44 * v45);
      double v40 = round(y * v46);
      double v46 = round(v43 * v46);
    }
    if (v45 <= -9.22337204e18)
    {
      __break(1u);
    }
    else if (v45 < 9.22337204e18)
    {
      if ((~*(void *)&v46 & 0x7FF0000000000000) != 0
        && (*(void *)&v45 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        if (v46 > -9.22337204e18)
        {
          if (v46 < 9.22337204e18)
          {
            uint64_t v87 = (void *)(v0 + 344);
            size_t v48 = (uint64_t)v45;
            uint64_t v49 = (uint64_t)v46;
            unint64_t v50 = (id *)(*(void *)(v0 + 808) + OBJC_IVAR____TtC6Tamale14ARCameraSource_stillImageCropOutputBuffer);
            swift_beginAccess();
            uint64_t v88 = v1;
            uint64_t v94 = v6;
            if (*v50)
            {
              uint64_t v51 = (__CVBuffer *)*v50;
              if (CVPixelBufferGetWidth(v51) == v48)
              {
                id v52 = v5;
                size_t v53 = CVPixelBufferGetHeight(v51);

                BOOL v54 = v53 == (uint64_t)v46;
                id v5 = v52;
                uint64_t v49 = (uint64_t)v46;
                size_t v48 = (uint64_t)v45;
                if (v54)
                {
                  id v55 = *v50;
                  if (!*v50)
                  {
LABEL_51:
                    char v13 = (uint64_t *)(v0 + 624);

                    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v87);
                    id v18 = sub_10000F3B0(v1, *(void *)(v0 + 248));
                    uint64_t v2 = 0;
                    uint64_t v19 = (uint64_t *)(v0 + 648);
                    *(void *)(v0 + 648) = type metadata accessor for LoggingSignposter.IntervalState(0);
                    uint64_t v20 = 656;
                    goto LABEL_61;
                  }
LABEL_44:
                  *(double *)(v0 + 664) = v47;
                  *(double *)(v0 + 672) = v40;
                  *(double *)(v0 + 680) = v45;
                  *(double *)(v0 + 688) = v46;
                  *(unsigned char *)(v0 + 696) = 0;
                  uint64_t v56 = (__CVBuffer *)v55;
                  sub_1001CA388(v6, v56, v0 + 664, 0.0);
                  [v5 setCapturedImage:v56];
                  uint64_t v57 = v0 + 344;
                  sub_10000F3B0(v87, *(void *)(v0 + 368));
                  sub_10018BBE8();
                  id v58 = [v5 smoothedSceneDepth];
                  if (v58)
                  {
                    uint64_t v59 = v58;
                    uint64_t v60 = (__CVBuffer *)[v58 depthMap];

                    if (v60)
                    {
                      sub_10018B270((unint64_t)"ARCameraSource.depthMapSafetyCrop", 33, 2u, 1, (uint64_t *)(v0 + 504));
                      double v62 = v39->origin.x;
                      double v61 = v39->origin.y;
                      double v64 = v39->size.width;
                      double v63 = v39->size.height;
                      double v65 = (double)(uint64_t)CVPixelBufferGetWidth(v60);
                      double v66 = (double)(uint64_t)CVPixelBufferGetHeight(v60);
                      v97.origin.double x = v62;
                      v97.origin.double y = v61;
                      v97.size.int32_t width = v64;
                      v97.size.CGFloat height = v63;
                      IsEmptdouble y = CGRectIsEmpty(v97);
                      double v68 = 0.0;
                      if (IsEmpty)
                      {
                        double v69 = 0.0;
                      }
                      else
                      {
                        double v69 = round(v62 * v65);
                        double v65 = round(v64 * v65);
                        double v68 = round(v61 * v66);
                        double v66 = round(v63 * v66);
                      }
                      id result = *(id *)(*(void *)(v0 + 808) + OBJC_IVAR____TtC6Tamale14ARCameraSource_ciContext);
                      if (result)
                      {
                        CVPixelBufferRef v79 = sub_100089240(result, v69, v68, v65, v66);
                        if (v79)
                        {
                          CVPixelBufferRef v80 = v79;
                          id v81 = [objc_allocWithZone((Class)ARDepthData) initWithDepthMap:v79 confidenceMap:0];
                          [v5 setSmoothedSceneDepth:v81];

                          uint64_t v57 = v0 + 344;
                        }

                        sub_10000F3B0((void *)(v0 + 504), *(void *)(v0 + 528));
                        sub_10018BBE8();

                        _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 504);
                        goto LABEL_60;
                      }
LABEL_73:
                      __break(1u);
                      return result;
                    }
                  }
                  else
                  {
                  }
LABEL_60:
                  char v13 = (uint64_t *)(v0 + 384);
                  _s6Tamale17AnyLocalizedErrorVwxx_0(v57);
                  id v18 = sub_10000F3B0(v1, *(void *)(v0 + 248));
                  uint64_t v19 = (uint64_t *)(v0 + 408);
                  *(void *)(v0 + 408) = type metadata accessor for LoggingSignposter.IntervalState(0);
                  uint64_t v20 = 416;
                  goto LABEL_61;
                }
              }
              else
              {
              }
            }
            uint64_t v90 = v2;
            id v92 = v5;
            CFDictionaryRef v85 = CVPixelBufferCopyCreationAttributes(v6);
            id result = [(__CFDictionary *)v85 mutableCopy];
            if (result)
            {
              uint64_t v70 = result;
              uint64_t v71 = (id)kCVPixelBufferWidthKey;
              Class v72 = Int._bridgeToObjectiveC()().super.super.isa;
              [v70 __swift_setObject:v72 forKeyedSubscript:v71];

              unint64_t v73 = (id)kCVPixelBufferHeightKey;
              Class v74 = Int._bridgeToObjectiveC()().super.super.isa;
              [v70 __swift_setObject:v74 forKeyedSubscript:v73];

              uint64_t v75 = (id)kCVPixelBufferIOSurfacePropertiesKey;
              sub_10031BB08((uint64_t)_swiftEmptyArrayStorage);
              size_t v76 = v49;
              Class v77 = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v70 __swift_setObject:v77 forKeyedSubscript:v75];

              id v78 = *v50;
              id *v50 = 0;

              swift_beginAccess();
              CVPixelBufferCreate(0, v48, v76, 0x34323066u, (CFDictionaryRef)v70, (CVPixelBufferRef *)v50);
              swift_endAccess();

              uint64_t v1 = v88;
              uint64_t v2 = v90;
              id v5 = v92;
              id v55 = *v50;
              if (!*v50) {
                goto LABEL_51;
              }
              goto LABEL_44;
            }
            __break(1u);
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }
          goto LABEL_68;
        }
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
      }
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    __break(1u);
    goto LABEL_66;
  }
  char v13 = (uint64_t *)(v0 + 584);

  id v18 = sub_10000F3B0(v1, *(void *)(v0 + 248));
  uint64_t v19 = (uint64_t *)(v0 + 608);
  *(void *)(v0 + 608) = type metadata accessor for LoggingSignposter.IntervalState(0);
  uint64_t v20 = 616;
LABEL_61:
  *(void *)(v0 + v20) = &off_1004EEE50;
  uint64_t v82 = sub_100040120(v13);
  sub_10014C684((uint64_t)v18, (uint64_t)v82, type metadata accessor for LoggingSignposter.IntervalState);
  sub_10000F3B0(v13, *v19);
  sub_10018BBE8();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v13);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v1);
  uint64_t v83 = *(uint64_t (**)(void *))(v0 + 8);
  return (id)v83(v2);
}

uint64_t sub_10012C654()
{
  uint64_t v1 = *(void **)(v0 + 840);
  swift_willThrow();
  swift_errorRelease();

  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "captureHighResolutionFrame failed", v4, 2u);
    swift_slowDealloc();
  }
  id v5 = *(void **)(v0 + 832);

  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 304);
  unint64_t v6 = sub_10000F3B0((void *)(v0 + 224), *(void *)(v0 + 248));
  *(void *)(v0 + 488) = type metadata accessor for LoggingSignposter.IntervalState(0);
  *(void *)(v0 + 496) = &off_1004EEE50;
  id v7 = sub_100040120((uint64_t *)(v0 + 464));
  sub_10014C684((uint64_t)v6, (uint64_t)v7, type metadata accessor for LoggingSignposter.IntervalState);
  sub_10000F3B0((void *)(v0 + 464), *(void *)(v0 + 488));
  sub_10018BBE8();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 464);
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 224);
  char v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8(0);
}

uint64_t sub_10012C818(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000F214(&qword_10051F3B0);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_10012C8D8()
{
  return sub_10012E534();
}

uint64_t sub_10012C8EC()
{
  return swift_release();
}

void *sub_10012C9CC()
{
  return sub_10012E840((uint64_t)&unk_100447080, &OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceReplay);
}

void sub_10012C9E0(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_10012CABC@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__configuration;
  swift_beginAccess();
  return sub_10014C684(v3, a1, type metadata accessor for CameraControllerConfiguration);
}

uint64_t sub_10012CB9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__configuration;
  swift_beginAccess();
  return sub_10014C684(v4, a2, type metadata accessor for CameraControllerConfiguration);
}

uint64_t sub_10012CC7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10014C684(a1, (uint64_t)v6, type metadata accessor for CameraControllerConfiguration);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  double v11 = v6;
  uint64_t v12 = v7;
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10014C574((uint64_t)v6, type metadata accessor for CameraControllerConfiguration);
}

uint64_t sub_10012CDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014C684(a2, (uint64_t)v6, type metadata accessor for CameraControllerConfiguration);
  uint64_t v7 = a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__configuration;
  swift_beginAccess();
  sub_100016F1C((uint64_t)v6, v7);
  return swift_endAccess();
}

void sub_10012CEA0()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_safeAreaStrategy + 8) & 1) == 0)
  {
    double v1 = (double)*(int *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_sensorOrientedBufferDimensions);
    double v2 = (double)*(int *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_sensorOrientedBufferDimensions + 4);
    double v3 = 1.0 / *(double *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_safeAreaStrategy);
    BOOL v4 = v1 / v2 < v3;
    double v5 = v3 * v1 / (v1 / v2);
    double v6 = v1 / v2 * v2 / v3;
    if (v4) {
      double v7 = v6;
    }
    else {
      double v7 = (double)*(int *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_sensorOrientedBufferDimensions + 4);
    }
    if (v4) {
      double v8 = (double)*(int *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_sensorOrientedBufferDimensions);
    }
    else {
      double v8 = v5;
    }
    v16.origin.double x = 0.0;
    v16.origin.double y = 0.0;
    v16.size.int32_t width = (double)*(int *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_sensorOrientedBufferDimensions);
    v16.size.CGFloat height = (double)*(int *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_sensorOrientedBufferDimensions + 4);
    double v15 = (v1 - v8) * 0.5 / CGRectGetWidth(v16);
    v17.origin.double x = 0.0;
    v17.origin.double y = 0.0;
    v17.size.int32_t width = v1;
    v17.size.CGFloat height = v2;
    double v9 = (v2 - v7) * 0.5 / CGRectGetHeight(v17);
    v18.origin.double x = (v1 - v8) * 0.5;
    v18.origin.double y = (v2 - v7) * 0.5;
    v18.size.int32_t width = v8;
    v18.size.CGFloat height = v7;
    double Width = CGRectGetWidth(v18);
    v19.origin.double x = 0.0;
    v19.origin.double y = 0.0;
    v19.size.int32_t width = v1;
    v19.size.CGFloat height = v2;
    double v11 = Width / CGRectGetWidth(v19);
    v20.origin.double x = (v1 - v8) * 0.5;
    v20.origin.double y = (v2 - v7) * 0.5;
    v20.size.int32_t width = v8;
    v20.size.CGFloat height = v7;
    double Height = CGRectGetHeight(v20);
    v21.origin.double x = 0.0;
    v21.origin.double y = 0.0;
    v21.size.int32_t width = v1;
    v21.size.CGFloat height = v2;
    CGFloat v13 = CGRectGetHeight(v21);
    uint64_t v14 = (double *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_safeArea);
    *uint64_t v14 = v15;
    v14[1] = v9;
    void v14[2] = v11;
    v14[3] = Height / v13;
  }
}

uint64_t sub_10012CFFC()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  double v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&unk_10051FB60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000F214(&qword_100521000);
  sub_10010DE10((unint64_t *)&qword_10051FB70, &qword_100521000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_1005205B8 = result;
  return result;
}

uint64_t sub_10012D24C(uint64_t a1)
{
  v1[2] = a1;
  sub_10000F214(&qword_10051E070);
  v1[3] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for URL();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_10012D378, 0, 0);
}

id sub_10012D378()
{
  *(_DWORD *)(v0 + 64) = 0;
  char v1 = static Task<>.isCancelled.getter();
  int v2 = 0;
  if ((v1 & 1) == 0)
  {
    id result = (id)MobileGestalt_get_current_device();
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = result;
    regionalBehaviorShutterClicuint64_t k = MobileGestalt_get_regionalBehaviorShutterClick();

    if (regionalBehaviorShutterClick)
    {
      int v2 = 1117;
    }
    else
    {
      id v6 = [self mainBundle];
      NSString v7 = String._bridgeToObjectiveC()();
      NSString v8 = String._bridgeToObjectiveC()();
      id v9 = [v6 URLForResource:v7 withExtension:v8];

      if (v9)
      {
        uint64_t v11 = *(void *)(v0 + 40);
        uint64_t v10 = *(void *)(v0 + 48);
        uint64_t v13 = *(void *)(v0 + 24);
        uint64_t v12 = *(void *)(v0 + 32);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
        v14(v13, v10, v12);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v12);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v12) != 1)
        {
          v14(*(void *)(v0 + 56), *(void *)(v0 + 24), *(void *)(v0 + 32));
          URL._bridgeToObjectiveC()(v15);
          CFURLRef v17 = v16;
          OSStatus SystemSoundID = AudioServicesCreateSystemSoundID(v16, (SystemSoundID *)(v0 + 64));

          if (SystemSoundID != noErr.getter())
          {
            _StringGuts.grow(_:)(41);
            swift_bridgeObjectRelease();
            *(_DWORD *)(v0 + 68) = SystemSoundID;
            v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            return (id)_assertionFailure(_:_:file:line:flags:)();
          }
          (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 32));
          int v2 = *(_DWORD *)(v0 + 64);
          goto LABEL_11;
        }
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 40) + 56))(*(void *)(v0 + 24), 1, 1, *(void *)(v0 + 32));
      }
      sub_10000FBD8(*(void *)(v0 + 24), &qword_10051E070);
      int v2 = 0;
    }
  }
LABEL_11:
  **(_DWORD **)(v0 + 16) = v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  CGRect v19 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v19();
}

double sub_10012D6F4()
{
  return sub_10012DA34((uint64_t)&unk_100447170, &OBJC_IVAR____TtC6Tamale14ARCameraSource__targetZoomFactor);
}

uint64_t sub_10012D708()
{
  return swift_release();
}

uint64_t sub_10012D7E0()
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureState);
}

uint64_t sub_10012D890@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureState + 8);
  *(void *)a2 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureState);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_10012D94C()
{
  return swift_release();
}

double sub_10012DA20()
{
  return sub_10012DA34((uint64_t)&unk_100447148, &OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureInitialZoomFactor);
}

double sub_10012DA34(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v2 + *a2);
}

double sub_10012DAD4@<D0>(uint64_t *a1@<X0>, void *a2@<X4>, double *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v5 + *a2);
  *a3 = result;
  return result;
}

uint64_t sub_10012DB88()
{
  return swift_release();
}

void *sub_10012DC60()
{
  return sub_10012E840((uint64_t)&unk_100447198, &OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomCaptureDevice);
}

void sub_10012DC74(void **a1)
{
  char v1 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

void *sub_10012DD50()
{
  return sub_10012E840((uint64_t)&unk_1004470F8, &OBJC_IVAR____TtC6Tamale14ARCameraSource__systemZoomSlider);
}

void sub_10012DD64(void **a1)
{
  char v1 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_10012DE40()
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource__cameraControlsDisabled);
}

uint64_t sub_10012DEE8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__cameraControlsDisabled);
  return result;
}

uint64_t sub_10012DF98()
{
  return swift_release();
}

void *sub_10012E068()
{
  return sub_10012E840((uint64_t)&unk_100447250, &OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureObservation);
}

void sub_10012E07C(void **a1)
{
  char v1 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_10012E158()
{
  return sub_10012E300((uint64_t)&unk_100447058, &OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevel);
}

uint64_t sub_10012E16C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevel);
  return result;
}

uint64_t sub_10012E21C()
{
  return swift_release();
}

uint64_t sub_10012E2EC()
{
  return sub_10012E300((uint64_t)&unk_1004470A8, &OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevelOverride);
}

uint64_t sub_10012E300(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_10012E3A0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevelOverride);
  return result;
}

uint64_t sub_10012E450()
{
  return swift_release();
}

uint64_t sub_10012E520()
{
  return sub_10012E534();
}

uint64_t sub_10012E534()
{
  return swift_retain();
}

uint64_t sub_10012E5D8@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a3 = *(void *)(v5 + *a2);
  return swift_retain();
}

uint64_t sub_10012E690()
{
  return swift_release();
}

id sub_10012E770@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource___latestFrame);
  *a2 = v4;
  return v4;
}

void *sub_10012E82C()
{
  return sub_10012E840((uint64_t)&unk_100446FD8, &OBJC_IVAR____TtC6Tamale14ARCameraSource___latestFrame);
}

void *sub_10012E840(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v2 + *a2);
  id v5 = v4;
  return v4;
}

id sub_10012E8E8@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v6 = *(void **)(v5 + *a2);
  *a3 = v6;

  return v6;
}

void sub_10012E9AC(void **a1)
{
  char v1 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_10012EA88()
{
  uint64_t v1 = sub_10000F214(&qword_100520FA0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v12 = v0;
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState;
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 8);
  char v7 = *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16);
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState);
  uint64_t v13 = v6;
  char v14 = v7;
  sub_1000BBF50(v12, v6, v7);
  sub_10000F214(&qword_10051FB20);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_getKeyPath();
  uint64_t v12 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  switch(*(unsigned char *)(v5 + 16))
  {
    case 1:
      id v9 = "ARCameraSource.running";
      uint64_t v10 = 22;
      return sub_10018B700(v9, v10, 2, 1);
    case 2:
      return result;
    case 3:
      if (*(_OWORD *)v5 == 0)
      {
        id v9 = "ARCameraSource.paused";
        uint64_t v10 = 21;
      }
      else
      {
        id v9 = "ARCameraSource.pausing";
        uint64_t v10 = 22;
      }
      return sub_10018B700(v9, v10, 2, 1);
    default:
      id v9 = "ARCameraSource.stopped";
      uint64_t v10 = 22;
      return sub_10018B700(v9, v10, 2, 1);
  }
}

uint64_t sub_10012ED00()
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState);
  sub_1000BBF50(v1, *(void *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16));
  return v1;
}

uint64_t sub_10012EDCC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 8);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  char v7 = *(unsigned char *)(v4 + 16);
  *(unsigned char *)(a2 + 16) = v7;
  return sub_1000BBF50(v5, v6, v7);
}

uint64_t sub_10012EE8C(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  swift_getKeyPath();
  sub_1000BBF50(v1, v2, v3);
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_1000BC2F4(v1, v2, v3);
  return swift_release();
}

uint64_t sub_10012EF8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState);
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 8);
  *(void *)uint64_t v4 = a2;
  *(void *)(v4 + 8) = a3;
  char v7 = *(unsigned char *)(v4 + 16);
  *(unsigned char *)(v4 + 16) = a4;
  sub_1000BBF50(a2, a3, a4);
  sub_1000BC2F4(v5, v6, v7);
  return sub_10012EA88();
}

uint64_t sub_10012F004(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  if (qword_100517EF0 != -1) {
    uint64_t ObjectType = swift_once();
  }
  __chkstk_darwin(ObjectType);
  sub_10000F214(&qword_100520FF8);
  OS_dispatch_queue.sync<A>(execute:)();
  if ((v9 & 1) == 0) {
    return 0;
  }
  id v4 = [a1 currentFrame];
  if (!v4) {
    return 1;
  }
  uint64_t v5 = v4;
  id v6 = [v4 geoTrackingStatus];

  uint64_t v3 = 1;
  if (v6)
  {
    id v7 = [v6 state];

    if (v7 == (id)3) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return v3;
}

uint64_t sub_10012F160()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = *(void *)(v0 + OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_10014C378;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004ED2A0;
  char v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v13 = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v12);
  swift_release();
  return swift_release();
}

uint64_t sub_10012F428()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v65 - v5;
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v70 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v73 = (uint64_t)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v65 - v12;
  __chkstk_darwin(v14);
  CFURLRef v16 = (char *)&v65 - v15;
  CVPixelBufferRef v79 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v79);
  Class v74 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v72 = (uint64_t)&v65 - v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v65 - v21;
  __chkstk_darwin(v23);
  Swift::String v25 = (char *)&v65 - v24;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    Class v27 = (char *)result;
    double v66 = v3;
    uint64_t v67 = v6;
    uint64_t v77 = v0;
    swift_getKeyPath();
    uint64_t v28 = &v27[OBJC_IVAR____TtC6Tamale14ARCameraSource___observationRegistrar];
    uint64_t v82 = v27;
    uint64_t v29 = sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    id v78 = v28;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(void *)&v27[OBJC_IVAR____TtC6Tamale14ARCameraSource__detectionLog])
    {
      swift_retain();
      sub_10009366C();
      swift_release();
    }
    swift_getKeyPath();
    uint64_t v82 = v27;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v30 = (uint64_t)&v27[OBJC_IVAR____TtC6Tamale14ARCameraSource__configuration];
    swift_beginAccess();
    uint64_t v71 = v30;
    sub_10014C684(v30, (uint64_t)v25, type metadata accessor for CameraControllerConfiguration);
    sub_10000FB74((uint64_t)&v25[v79[10]], (uint64_t)v16, &qword_10051E070);
    sub_10014C574((uint64_t)v25, type metadata accessor for CameraControllerConfiguration);
    uint64_t v68 = v1;
    uint64_t v75 = *(uint64_t **)(v1 + 48);
    uint64_t v76 = v1 + 48;
    int v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v75)(v16, 1, v77);
    sub_10000FBD8((uint64_t)v16, &qword_10051E070);
    if (v31 == 1)
    {
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      *(&v65 - 2) = (uint64_t)v27;
      *(&v65 - 1) = 0;
      id v81 = v27;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
    else
    {
      if (qword_100517D88 != -1) {
        swift_once();
      }
      uint64_t v33 = qword_10055E098;
      uint64_t v34 = swift_getKeyPath();
      __chkstk_darwin(v34);
      *(&v65 - 2) = (uint64_t)v27;
      *(&v65 - 1) = v33;
      id v81 = v27;
      swift_retain();
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_release();
      uint64_t v35 = type metadata accessor for TaskPriority();
      uint64_t v36 = (uint64_t)v70;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v70, 1, 1, v35);
      uint64_t v37 = (void *)swift_allocObject();
      v37[2] = 0;
      v37[3] = 0;
      v37[4] = v27;
      uint64_t v38 = v27;
      sub_100064D5C(v36, (uint64_t)&unk_100521170, (uint64_t)v37);
      swift_release();
    }
    swift_getKeyPath();
    id v81 = v27;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v39 = v71;
    sub_10014C684(v71, (uint64_t)v22, type metadata accessor for CameraControllerConfiguration);
    sub_10000FB74((uint64_t)&v22[v79[18]], (uint64_t)v13, &qword_10051E070);
    sub_10014C574((uint64_t)v22, type metadata accessor for CameraControllerConfiguration);
    int v40 = ((uint64_t (*)(char *, uint64_t, uint64_t))v75)(v13, 1, v77);
    sub_10000FBD8((uint64_t)v13, &qword_10051E070);
    LODWORD(v70) = v40;
    if (v40 == 1)
    {
      uint64_t v47 = swift_getKeyPath();
      __chkstk_darwin(v47);
      *(&v65 - 2) = (uint64_t)v27;
      *(&v65 - 1) = 0;
      id v81 = v27;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      uint64_t v69 = 0;
      swift_release();
    }
    else
    {
      BOOL v41 = *(void **)&v27[OBJC_IVAR____TtC6Tamale14ARCameraSource_session];
      uint64_t v42 = (objc_class *)type metadata accessor for ARCameraSourceReplay();
      double v43 = (char *)objc_allocWithZone(v42);
      *(void *)&v43[OBJC_IVAR____TtC6Tamale20ARCameraSourceReplay_arReplayConfiguration] = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      *(void *)&v43[OBJC_IVAR____TtC6Tamale20ARCameraSourceReplay_session] = v41;
      v80.receiver = v43;
      v80.super_class = v42;
      id v44 = v41;
      id v45 = [super init];
      uint64_t v46 = swift_getKeyPath();
      __chkstk_darwin(v46);
      *(&v65 - 2) = (uint64_t)v27;
      *(&v65 - 1) = (uint64_t)v45;
      id v81 = v27;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      uint64_t v69 = 0;
      swift_release();
    }
    swift_getKeyPath();
    id v81 = v27;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v48 = v72;
    sub_10014C684(v39, v72, type metadata accessor for CameraControllerConfiguration);
    uint64_t v49 = v73;
    sub_10000FB74(v48 + v79[22], v73, &qword_10051E070);
    sub_10014C574(v48, type metadata accessor for CameraControllerConfiguration);
    uint64_t v50 = v77;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v75)(v49, 1, v77) == 1)
    {
      sub_10000FBD8(v49, &qword_10051E070);
      uint64_t v51 = swift_getKeyPath();
      __chkstk_darwin(v51);
      *(&v65 - 2) = (uint64_t)v27;
      *(&v65 - 1) = 0;
      id v81 = v27;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      uint64_t v52 = (uint64_t)v74;
    }
    else
    {
      uint64_t v53 = v68;
      BOOL v54 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 32);
      uint64_t v76 = v29;
      id v55 = v67;
      v54(v67, v49, v50);
      uint64_t v56 = *(void **)&v27[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
      uint64_t v57 = *(void **)&v27[OBJC_IVAR____TtC6Tamale14ARCameraSource_session];
      id v58 = v66;
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v66, v55, v50);
      type metadata accessor for ARCameraSourceRecording(0);
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = 0;
      *(void *)(v59 + OBJC_IVAR____TtC6Tamale23ARCameraSourceRecording_frameQueue) = v56;
      *(void *)(v59 + OBJC_IVAR____TtC6Tamale23ARCameraSourceRecording_session) = v57;
      v54((char *)(v59 + OBJC_IVAR____TtC6Tamale23ARCameraSourceRecording_fileURL), (uint64_t)v58, v50);
      uint64_t v60 = swift_getKeyPath();
      uint64_t v75 = &v65;
      __chkstk_darwin(v60);
      *(&v65 - 2) = (uint64_t)v27;
      *(&v65 - 1) = v59;
      id v81 = v27;
      id v61 = v56;
      uint64_t v39 = v71;
      id v62 = v57;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_release();
      uint64_t v52 = (uint64_t)v74;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v50);
    }
    int v63 = (int)v70;
    double v64 = v79;
    if (v70 == 1)
    {
      swift_getKeyPath();
      id v81 = v27;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v39 + v64[21]) == 1)
      {
        swift_getKeyPath();
        id v81 = v27;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        sub_10014C684(v39, v52, type metadata accessor for CameraControllerConfiguration);
        sub_100130308(v52);
        sub_10014C574(v52, type metadata accessor for CameraControllerConfiguration);
      }
    }
    swift_getKeyPath();
    id v81 = v27;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    sub_10014C684(v39, v52, type metadata accessor for CameraControllerConfiguration);
    sub_100131E58(v52, v63 != 1);

    return sub_10014C574(v52, type metadata accessor for CameraControllerConfiguration);
  }
  return result;
}

uint64_t sub_10013008C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 48) = a4;
  sub_10000F214(&qword_10051E070);
  *(void *)(v4 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_100130120, 0, 0);
}

uint64_t sub_100130120()
{
  if (qword_100517D88 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = qword_10055E098;
  v0[8] = qword_10055E098;
  swift_getKeyPath();
  v0[5] = v2;
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource__configuration;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74(v4 + *(int *)(v5 + 40), v1, &qword_10051E070);
  return _swift_task_switch(sub_10013028C, v3, 0);
}

uint64_t sub_10013028C()
{
  uint64_t v1 = *(void (**)(char *, char *, uint64_t))(v0 + 56);
  sub_100092FFC(v1);
  sub_10000FBD8((uint64_t)v1, &qword_10051E070);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100130308(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_10014C684(a1, (uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CameraControllerConfiguration);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v11;
  sub_10014BA14((uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v13 + v12, type metadata accessor for CameraControllerConfiguration);
  *(void *)((char *)v13 + ((v6 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  uint64_t v14 = sub_100064D5C((uint64_t)v9, (uint64_t)&unk_100521150, (uint64_t)v13);
  uint64_t v15 = OBJC_IVAR____TtC6Tamale14ARCameraSource_locationMonitoringTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_locationMonitoringTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  *(void *)(v1 + v15) = v14;
  return swift_release();
}

uint64_t sub_100130560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[19] = a5;
  v6[20] = a6;
  v6[18] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  v6[21] = v7;
  v6[22] = *(void *)(v7 - 8);
  v6[23] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  unsigned char v6[24] = v8;
  v6[25] = *(void *)(v8 - 8);
  v6[26] = swift_task_alloc();
  uint64_t v9 = *(void *)(type metadata accessor for CameraControllerConfiguration(0) - 8);
  v6[27] = v9;
  v6[28] = *(void *)(v9 + 64);
  v6[29] = swift_task_alloc();
  uint64_t v10 = sub_10000F214(&qword_10051A8A8);
  v6[30] = v10;
  v6[31] = *(void *)(v10 - 8);
  v6[32] = swift_task_alloc();
  uint64_t v11 = sub_10000F214(&qword_100521160);
  v6[33] = v11;
  v6[34] = *(void *)(v11 - 8);
  v6[35] = swift_task_alloc();
  return _swift_task_switch(sub_1001307A0, 0, 0);
}

uint64_t sub_1001307A0()
{
  *(void *)(v0 + 288) = type metadata accessor for MainActor();
  *(void *)(v0 + 296) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100130838, v2, v1);
}

uint64_t sub_100130838()
{
  swift_release();
  if (qword_100517D48 != -1) {
    swift_once();
  }
  return _swift_task_switch(sub_1001308D0, 0, 0);
}

uint64_t sub_1001308D0()
{
  *(void *)(v0 + 304) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10013095C, v2, v1);
}

uint64_t sub_10013095C()
{
  swift_release();
  *(void *)(v0 + 312) = qword_10055E060;
  return _swift_task_switch(sub_1001309D0, 0, 0);
}

uint64_t sub_1001309D0()
{
  *(void *)(v0 + 320) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100130A5C, v2, v1);
}

uint64_t sub_100130A5C()
{
  uint64_t v1 = v0[39];
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[30];
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, *(void *)(v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler_headingUpdatePublisher)+ OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_authorizationStateUpdates, v4);
  return _swift_task_switch(sub_100130B04, 0, 0);
}

uint64_t sub_100130B04()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[30];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[41] = v4;
  void *v4 = v0;
  v4[1] = sub_100130C0C;
  uint64_t v5 = v0[33];
  return AsyncStream.Iterator.next(isolation:)(v0 + 42, 0, 0, v5);
}

uint64_t sub_100130C0C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100130D08, 0, 0);
}

uint64_t sub_100130D08()
{
  if ((*(unsigned char *)(v0 + 340) & 1) != 0
    || (unsigned int v1 = *(_DWORD *)(v0 + 336), (Strong = swift_unknownObjectWeakLoadStrong()) == 0))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
    goto LABEL_6;
  }
  uint64_t v3 = (void *)Strong;
  if (static Task<>.isCancelled.getter())
  {
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));

LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  type metadata accessor for CLAuthorizationStatus(0);
  if (v1 < 3)
  {
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 216);
    uint64_t v9 = *(void *)(v0 + 184);
    uint64_t v31 = *(void *)(v0 + 200);
    uint64_t v32 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 176);
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v28 = *(void *)(v0 + 160);
    uint64_t v29 = *(void *)(v0 + 208);
    uint64_t v12 = swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10014C684(v11, v7, type metadata accessor for CameraControllerConfiguration);
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v12;
    sub_10014BA14(v7, v14 + v13, type metadata accessor for CameraControllerConfiguration);
    *(void *)(v14 + ((v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v28;
    *(void *)(v0 + 48) = sub_10014BD80;
    *(void *)(v0 + 56) = v14;
    *(void *)(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256;
    *(void *)(v0 + 32) = sub_1002EDB98;
    *(void *)(v0 + 40) = &unk_1004ED0E8;
    uint64_t v15 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    static DispatchQoS.unspecified.getter();
    *(void *)(v0 + 136) = _swiftEmptyArrayStorage;
    sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v32);

    swift_release();
    swift_release();
LABEL_13:
    Swift::String v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v26;
    *Swift::String v26 = v0;
    v26[1] = sub_100130C0C;
    uint64_t v27 = *(void *)(v0 + 264);
    return AsyncStream.Iterator.next(isolation:)(v0 + 336, 0, 0, v27);
  }
  if (v1 - 3 <= 1)
  {
    uint64_t v17 = *(void *)(v0 + 224);
    uint64_t v16 = *(void *)(v0 + 232);
    uint64_t v18 = *(void *)(v0 + 216);
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v20 = *(void *)(v0 + 160);
    uint64_t v21 = self;
    sub_10014C684(v19, v16, type metadata accessor for CameraControllerConfiguration);
    unint64_t v22 = (*(unsigned __int8 *)(v18 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v3;
    sub_10014BA14(v16, v23 + v22, type metadata accessor for CameraControllerConfiguration);
    *(void *)(v23 + ((v17 + v22 + 7) & 0xFFFFFFFFFFFFFFF8)) = v20;
    *(void *)(v0 + 96) = sub_10014BFE8;
    *(void *)(v0 + 104) = v23;
    *(void *)(v0 + 64) = _NSConcreteStackBlock;
    *(void *)(v0 + 72) = 1107296256;
    *(void *)(v0 + 80) = sub_100131ADC;
    *(void *)(v0 + 88) = &unk_1004ED138;
    uint64_t v24 = _Block_copy((const void *)(v0 + 64));
    id v25 = v3;
    swift_release();
    [v21 checkAvailabilityWithCompletionHandler:v24];

    _Block_release(v24);
    goto LABEL_13;
  }
  *(_DWORD *)(v0 + 344) = v1;
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t sub_100131280(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a2;
  uint64_t v27 = a5;
  int v25 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v28 = *(void *)(a3 + OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue);
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_10014C684(a4, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v25;
  *(void *)(v20 + 24) = v17;
  sub_10014BA14((uint64_t)v16, v20 + v18, type metadata accessor for CameraControllerConfiguration);
  uint64_t v21 = v27;
  *(void *)(v20 + v19) = v26;
  *(void *)(v20 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8)) = v21;
  aBlock[4] = sub_10014C288;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004ED188;
  unint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v9, v7);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v29);
  swift_release();
  return swift_release();
}

void sub_100131664(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9 = a1 & 1;
  if (qword_100517EF0 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1005205B8;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a5;
  *(unsigned char *)(v11 + 24) = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10014C338;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_10014C6EC;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100109E30;
  aBlock[3] = &unk_1004ED200;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v10)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v15 = (unsigned char *)Strong;
    if (a1)
    {
      sub_100131E58(a3, 1);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        unint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Changing configuration from World to Geo.", v18, 2u);
        swift_slowDealloc();
      }

      swift_getKeyPath();
      uint64_t v26 = v15;
      sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (v15[OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16] != 1) {
        goto LABEL_11;
      }
      uint64_t v19 = *(void *)&v15[OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration];
      if (v19)
      {
        [*(id *)&v15[OBJC_IVAR____TtC6Tamale14ARCameraSource_session] runWithConfiguration:v19 options:0];
LABEL_11:

        return;
      }
      goto LABEL_20;
    }
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (unsigned char *)swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      if (a4)
      {
        swift_getErrorValue();
        uint64_t v23 = Error.localizedDescription.getter();
        unint64_t v25 = v24;
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v25 = 0xE000000000000000;
      }
      sub_1003806B0(v23, v25, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s : Please try again in an area where geo tracking is supported.", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_100131ADC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_100131B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_100517EF0 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1005205B8;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(unsigned char *)(v6 + 24) = 2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10014C704;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_10014C6EC;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100109E30;
  aBlock[3] = &unk_1004ED278;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v10 = (unsigned char *)Strong;
      if (*(void *)(Strong + OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration))
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          uint64_t v11 = Logger.logObject.getter();
          os_log_type_t v12 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v11, v12))
          {
            uint64_t v13 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v13 = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, v12, "Changing configuration back to World tracking (location permission withdrawn)", v13, 2u);
            swift_slowDealloc();
          }

          sub_100131E58(a2, 0);
          swift_getKeyPath();
          sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          if (v10[OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16] == 2) {
            sub_10013554C();
          }
        }
      }
    }
  }
}

id sub_100131E58(uint64_t a1, char a2)
{
  uint64_t v5 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v5);
  CFDictionaryRef v84 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v81 = (uint64_t)&v80 - v11;
  __chkstk_darwin(v12);
  uint64_t v82 = (uint64_t)&v80 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v80 - v15;
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v87 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v83 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (Class *)ARWorldTrackingConfiguration_ptr;
  if (a2) {
    uint64_t v19 = (Class *)ARGeoTrackingConfiguration_ptr;
  }
  id v20 = [objc_allocWithZone(*v19) init];
  self;
  uint64_t v21 = swift_dynamicCastObjCClass();
  if (v21)
  {
    unint64_t v22 = (void *)v21;
    uint64_t v23 = *(unsigned __int8 *)(a1 + v5[19]);
    id v24 = v20;
    [v22 setVisualLocalizationUpdatesRequested:v23];
    [v22 setUseLidarIfAvailable:0];
    [v22 setShouldUseUltraWideIfAvailable:0];
  }
  else
  {
    self;
    uint64_t v25 = swift_dynamicCastObjCClass();
    if (!v25) {
      goto LABEL_8;
    }
    unint64_t v22 = (void *)v25;
    id v26 = v20;
    [v22 setUseLidarIfAvailable:0];
    [v22 setShouldUseUltraWideIfAvailable:0];
    [v22 setDisableFrontCamera:1];
  }
  [v22 setPlaneDetection:3];

LABEL_8:
  if (!*(unsigned char *)(a1 + v5[15])) {
    goto LABEL_14;
  }
  uint64_t v27 = (unint64_t *)&unk_100521120;
  if (*(unsigned char *)(a1 + v5[15]) != 1) {
    goto LABEL_12;
  }
  sub_10000F734(0, (unint64_t *)&unk_100521120);
  id v28 = [(id)swift_getObjCClassFromMetadata() recommendedVideoFormatForHighResolutionFrameCapturing];
  if (!v28)
  {
    __break(1u);
LABEL_12:
    sub_10000F734(0, v27);
    id result = [(id)swift_getObjCClassFromMetadata() recommendedVideoFormatFor4KResolution];
    id v28 = result;
    if (!result)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  [v20 setVideoFormat:v28];

LABEL_14:
  uint64_t v85 = 0;
  uint64_t v88 = a1;
  uint64_t v89 = v5;
  char v30 = *(unsigned char *)(a1 + v5[17]);
  id v31 = [v20 videoFormat];
  sub_10000F214(&qword_100521040);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_100446C40;
  sub_10000F734(0, (unint64_t *)&qword_10051B450);
  objc_super v80 = v9;
  uint64_t v86 = v2;
  uint64_t v33 = v17;
  if (v30)
  {
    *(NSNumber *)(v32 + 32) = NSNumber.init(integerLiteral:)(60);
    Swift::Int v34 = 30;
  }
  else
  {
    *(NSNumber *)(v32 + 32) = NSNumber.init(integerLiteral:)(30);
    Swift::Int v34 = 20;
  }
  *(NSNumber *)(v32 + 40) = NSNumber.init(integerLiteral:)(v34);
  *(NSNumber *)(v32 + 48) = NSNumber.init(integerLiteral:)(10);
  uint64_t v90 = v32;
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v31 setFrameRatesByPowerUsage:isa];

  [v20 setDisableRenderSyncScheduling:1];
  [v20 setDropInitialFramesOutsideExposureTarget:0];
  uint64_t v37 = v88;
  uint64_t v36 = v89;
  sub_10000FB74(v88 + v89[18], (uint64_t)v16, &qword_10051E070);
  uint64_t v38 = v87;
  uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
  if (v39(v16, 1, v33) != 1)
  {
    uint64_t v44 = (uint64_t)v83;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v83, v16, v33);
    swift_getKeyPath();
    double v43 = (char *)v86;
    uint64_t v90 = v86;
    sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    id v45 = *(void **)&v43[OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceReplay];
    if (v45)
    {
      id v46 = v45;
      uint64_t v47 = (void *)sub_10014805C(v20, v44);
      id v48 = v47;
    }
    else
    {
      uint64_t v47 = 0;
    }
    uint64_t v59 = OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration;
    uint64_t v60 = *(void **)&v43[OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration];
    *(void *)&v43[OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration] = v47;

    if (!*(void *)&v43[v59])
    {
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      *(&v80 - 4) = v43;
      *(&v80 - 3) = (char *)0xD00000000000001BLL;
      *(&v80 - 2) = (char *)0x8000000100428230;
      *((unsigned char *)&v80 - 8) = 2;
      uint64_t v90 = (uint64_t)v43;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
    uint64_t v57 = v88;
    id v58 = &selRef_headingAvailable;
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v44, v33);
    uint64_t v56 = v89;
    goto LABEL_29;
  }
  sub_10000FBD8((uint64_t)v16, &qword_10051E070);
  uint64_t v40 = v82;
  sub_10000FB74(v37 + v36[22], v82, &qword_10051E070);
  unsigned int v41 = v39((char *)v40, 1, v33);
  sub_10000FBD8(v40, &qword_10051E070);
  uint64_t v42 = (uint64_t)v84;
  sub_10014C684(v37, (uint64_t)v84, type metadata accessor for CameraControllerConfiguration);
  if (v41 == 1)
  {
    sub_10014C574(v42, type metadata accessor for CameraControllerConfiguration);
    double v43 = (char *)v86;
LABEL_24:
    BOOL v54 = *(void **)&v43[OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration];
    *(void *)&v43[OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration] = v20;
    id v55 = v20;

    uint64_t v57 = v88;
    uint64_t v56 = v89;
    id v58 = &selRef_headingAvailable;
LABEL_29:
    char v62 = *(unsigned char *)(v57 + v56[16]);
    uint64_t v63 = swift_getKeyPath();
    __chkstk_darwin(v63);
    *(&v80 - 2) = v43;
    *((unsigned char *)&v80 - 8) = v62;
    uint64_t v90 = (uint64_t)v43;
    sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    id v64 = [v20 v58[291]];
    id v65 = [v64 framesPerSecond];

    type metadata accessor for CameraMotionMonitor();
    swift_allocObject();
    sub_100171E0C((float)(uint64_t)v65);
    *(void *)&v43[OBJC_IVAR____TtC6Tamale14ARCameraSource_motionMonitor] = v66;

    return (id)swift_release();
  }
  id v49 = [self defaultManager];
  uint64_t v50 = v81;
  sub_10000FB74(v42 + v36[22], v81, &qword_10051E070);
  id result = (id)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v39)(v50, 1, v33);
  double v43 = (char *)v86;
  if (result == 1) {
    goto LABEL_36;
  }
  uint64_t v51 = v42;
  URL.path(percentEncoded:)(1);
  uint64_t v83 = *(char **)(v87 + 8);
  ((void (*)(uint64_t, uint64_t))v83)(v50, v33);
  NSString v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v53 = [v49 fileExistsAtPath:v52];

  sub_10014C574(v51, type metadata accessor for CameraControllerConfiguration);
  if (v53) {
    goto LABEL_24;
  }
  uint64_t v67 = v33;
  swift_getKeyPath();
  uint64_t v90 = (uint64_t)v43;
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  id result = (id)swift_release();
  uint64_t v68 = *(void *)&v43[OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceRecording];
  uint64_t v56 = v89;
  if (v68)
  {
    uint64_t v69 = v87;
    uint64_t v70 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v80, v68 + OBJC_IVAR____TtC6Tamale23ARCameraSourceRecording_fileURL, v67);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v70, 0, 1, v67);
    LODWORD(v69) = v39(v70, 1, v67);
    CFDictionaryRef v84 = (char *)v20;
    uint64_t v87 = v68;
    swift_retain();
    if (v69 == 1)
    {
      uint64_t v72 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v71);
      uint64_t v72 = v73;
      ((void (*)(char *, uint64_t))v83)(v70, v67);
    }
    uint64_t v57 = v88;
    id v58 = &selRef_headingAvailable;
    id v74 = objc_allocWithZone((Class)ARRecordingConfiguration);
    uint64_t v75 = v84;
    id v76 = [v74 initWithBaseConfiguration:v84 fileURL:v72];

    objc_msgSend(objc_msgSend(v76, "recordingTechnique"), "setExpectCustomData:", 1);
    swift_unknownObjectRelease();
    uint64_t v77 = *(void **)(v87 + 16);
    *(void *)(v87 + 16) = v76;
    id v78 = v76;

    [v78 startRecording];
    swift_release();
    CVPixelBufferRef v79 = *(void **)&v43[OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration];
    *(void *)&v43[OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration] = v76;

    goto LABEL_29;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1001329E8(_UNKNOWN **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  __chkstk_darwin(v4);
  uint64_t v51 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  id v49 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100133EB8((uint64_t)a1);
  unint64_t v7 = (unint64_t)sub_100133354();
  unint64_t v8 = v7;
  if (v7 >> 62) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (uint64_t i = a1; v9; uint64_t i = a1)
  {
    uint64_t v10 = 4;
    a1 = AFUISiriSetupViewController_ptr;
    while (1)
    {
      id v11 = (v8 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v8 + 8 * v10);
      uint64_t v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      self;
      uint64_t v14 = swift_dynamicCastObjCClass();
      if (v14)
      {
        uint64_t v15 = v14;
        swift_bridgeObjectRelease_n();
        id v48 = *(char **)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
        uint64_t v16 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v16;
        *(void *)(v17 + 24) = v15;
        id v61 = sub_10014B7C4;
        uint64_t v62 = v17;
        CMTime aBlock = _NSConcreteStackBlock;
        uint64_t v58 = 1107296256;
        uint64_t v59 = sub_1002EDB98;
        uint64_t v60 = &unk_1004ED020;
        uint64_t v18 = _Block_copy(&aBlock);
        swift_retain();
        id v19 = v12;
        id v20 = v49;
        static DispatchQoS.unspecified.getter();
        uint64_t v56 = _swiftEmptyArrayStorage;
        sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000F214(&qword_10051A960);
        sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
        uint64_t v21 = v51;
        uint64_t v22 = v54;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v18);

        (*(void (**)(char *, uint64_t))(v53 + 8))(v21, v22);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v52);
        swift_release();
        swift_release();
        goto LABEL_12;
      }

      ++v10;
      if (v13 == v9)
      {
        swift_bridgeObjectRelease_n();
LABEL_12:
        a1 = i;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease_n();
LABEL_16:
  uint64_t v23 = (char *)sub_100148478(a1, *(id *)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource_session]);
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(&v48 - 2) = v2;
  *(&v48 - 1) = v23;
  CMTime aBlock = (void **)v2;
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  id v48 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();

  swift_getKeyPath();
  CMTime aBlock = (void **)v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v25 = OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomCaptureDevice;
  id v26 = *(void **)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomCaptureDevice];
  if (v26)
  {
    double v27 = *(double *)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource_maximumZoomFactor];
    id v28 = v26;
    [v28 setMaxAvailableVideoZoomFactorOverride:v27];
    CMTime aBlock = (void **)v28;
    swift_getKeyPath();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v29 = (char *)_KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
    swift_release();
    swift_release();
    uint64_t v30 = swift_getKeyPath();
    __chkstk_darwin(v30);
    *(&v48 - 2) = v2;
    *(&v48 - 1) = v29;
    CMTime aBlock = (void **)v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

    swift_release();
    a1 = i;
  }
  swift_getKeyPath();
  CMTime aBlock = (void **)v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double v31 = *(double *)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource__targetZoomFactor];
  swift_getKeyPath();
  CMTime aBlock = (void **)v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v32 = *(void **)&v2[v25];
  id v33 = v32;
  sub_10014874C(v32, 0, v31);

  swift_getKeyPath();
  CMTime aBlock = (void **)v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  Swift::Int v34 = *(void **)&v2[v25];
  id v35 = v34;
  sub_100138344(a1, v34);

  swift_getKeyPath();
  CMTime aBlock = (void **)v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  uint64_t v37 = *(void **)&v2[v25];
  if (v37)
  {
    id v38 = v37;
    id v39 = [v38 activeFormat];
    uint64_t v40 = (const opaqueCMFormatDescription *)[v39 formatDescription];

    CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v40);
    uint64_t v42 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v42;
    *(CMVideoDimensions *)(v43 + 24) = Dimensions;
    id v61 = sub_10014B71C;
    uint64_t v62 = v43;
    CMTime aBlock = _NSConcreteStackBlock;
    uint64_t v58 = 1107296256;
    uint64_t v59 = sub_1002EDB98;
    uint64_t v60 = &unk_1004ECFD0;
    uint64_t v44 = _Block_copy(&aBlock);
    swift_retain();
    id v45 = v49;
    static DispatchQoS.unspecified.getter();
    uint64_t v56 = _swiftEmptyArrayStorage;
    sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
    id v46 = v51;
    uint64_t v47 = v54;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v46, v47);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v45, v52);
    swift_release();
    return swift_release();
  }
  return result;
}

void *sub_100133354()
{
  id v1 = [v0 outputs];
  sub_10000F734(0, &qword_100521100);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_37;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
LABEL_3:
    unint64_t v4 = 0;
    unint64_t v30 = v2 & 0xC000000000000001;
    unint64_t v26 = v2 + 32;
    uint64_t v27 = v2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v28 = v3;
    unint64_t v29 = v2;
    while (1)
    {
      while (1)
      {
        if (v30)
        {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v4 >= *(void *)(v27 + 16)) {
            goto LABEL_36;
          }
          id v5 = *(id *)(v26 + 8 * v4);
        }
        uint64_t v6 = v5;
        if (__OFADD__(v4++, 1)) {
          goto LABEL_35;
        }
        id v8 = [v5 connectionWithMediaType:AVMediaTypeVideo];
        if (v8) {
          break;
        }

        if (v4 == v3) {
          goto LABEL_38;
        }
      }
      uint64_t v9 = v8;
      id v10 = [v8 inputPorts];

      sub_10000F734(0, &qword_100521110);
      unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v31 = v4;
      if (v2 >> 62) {
        break;
      }
      uint64_t v11 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v11) {
        goto LABEL_13;
      }
LABEL_31:
      swift_bridgeObjectRelease_n();

LABEL_32:
      uint64_t v3 = v28;
      unint64_t v2 = v29;
      unint64_t v4 = v31;
      if (v31 == v28) {
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (!v11) {
      goto LABEL_31;
    }
LABEL_13:
    uint64_t v12 = 4;
    while (1)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v2 + 8 * v12);
      }
      uint64_t v14 = v13;
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v3) {
          goto LABEL_38;
        }
        goto LABEL_3;
      }
      id v16 = [v13 sourceDeviceType];
      if (!v16) {
        break;
      }
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;
      if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          break;
        }
      }
      id v24 = [v14 sourceDevicePosition:v26];

      if (v24 == (id)1)
      {
        swift_bridgeObjectRelease_n();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        goto LABEL_32;
      }
LABEL_15:
      ++v12;
      if (v15 == v11) {
        goto LABEL_31;
      }
    }

    goto LABEL_15;
  }
LABEL_38:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_1001336F0()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (char *)Strong;
    uint64_t v20 = v5;
    sub_10000F214(&qword_100521118);
    NSKeyValueObservedChange.newValue.getter();
    id v10 = (void *)aBlock[0];
    if (aBlock[0])
    {
      uint64_t v19 = *(void *)&v9[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
      uint64_t v11 = swift_allocObject();
      uint64_t v18 = v1;
      uint64_t v12 = v11;
      swift_beginAccess();
      id v13 = (void *)swift_unknownObjectWeakLoadStrong();
      swift_unknownObjectWeakInit();

      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v12;
      *(void *)(v14 + 24) = v10;
      aBlock[4] = sub_10014B82C;
      aBlock[5] = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1002EDB98;
      aBlock[3] = &unk_1004ED070;
      uint64_t v15 = _Block_copy(aBlock);
      swift_retain();
      id v17 = v10;
      static DispatchQoS.unspecified.getter();
      uint64_t v21 = _swiftEmptyArrayStorage;
      sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000F214(&qword_10051A960);
      sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v15);

      (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v0);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v4);

      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

uint64_t sub_100133A70()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_100133BA0();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

    return swift_release();
  }
  return result;
}

uint64_t sub_100133BA0()
{
  id v1 = [v0 level];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_15:

    return 0;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_17:

    return 1;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:

    return 2;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_19;
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
LABEL_24:

    return 3;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_24;
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
  {

    swift_bridgeObjectRelease_n();
    return 3;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v29) {
    return 3;
  }
  else {
    return 0;
  }
}

void sub_100133E54(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    *(void *)(Strong + OBJC_IVAR____TtC6Tamale14ARCameraSource_sensorOrientedBufferDimensions) = a2;
    sub_10012CEA0();
  }
}

id sub_100133EB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v101 = *(void *)(v2 - 8);
  uint64_t v102 = v2;
  __chkstk_darwin(v2);
  uint64_t v99 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for DispatchQoS();
  uint64_t v98 = *(void *)(v100 - 8);
  double v4 = __chkstk_darwin(v100);
  CGRect v97 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 outputs:v4];
  sub_10000F734(0, &qword_100521100);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62) {
    goto LABEL_66;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  id v108 = (id)a1;
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v7 & 0xC000000000000001;
    unint64_t v106 = v7 + 32;
    AVMediaType v111 = AVMediaTypeMetadataObject;
    AVCaptureDeviceType v113 = AVCaptureDeviceTypeBuiltInWideAngleCamera;
    unint64_t v107 = v7;
    unint64_t v104 = v7 & 0xC000000000000001;
    uint64_t v105 = v8;
    while (1)
    {
      if (v10) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v106 + 8 * v9);
      }
      id v11 = v12;
      if (__OFADD__(v9++, 1)) {
        goto LABEL_64;
      }
      self;
      uint64_t v14 = swift_dynamicCastObjCClass();
      if (!v14) {
        goto LABEL_6;
      }
      uint64_t v15 = (void *)v14;
      id v16 = [v11 connectionWithMediaType:v111];
      if (!v16) {
        goto LABEL_6;
      }
      uint64_t v17 = v16;
      uint64_t v110 = v9;
      a1 = (uint64_t)[v16 inputPorts];

      sub_10000F734(0, &qword_100521110);
      unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v109 = v15;
      id v112 = v11;
      if (!(v18 >> 62))
      {
        uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v19) {
          break;
        }
        goto LABEL_5;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v19) {
        break;
      }
LABEL_5:
      swift_bridgeObjectRelease_n();
      unint64_t v7 = v107;
      a1 = (uint64_t)v108;
      unint64_t v10 = v104;
      uint64_t v8 = v105;
      uint64_t v9 = v110;
      id v11 = v112;
LABEL_6:

      if (v9 == v8) {
        goto LABEL_34;
      }
    }
    uint64_t v20 = 4;
    while (1)
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(v18 + 8 * v20);
      }
      unint64_t v7 = (unint64_t)v21;
      uint64_t v22 = v20 - 3;
      if (__OFADD__(v20 - 4, 1))
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_3;
      }
      id v23 = [v21 sourceDeviceType];
      if (!v23) {
        break;
      }
      char v24 = v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;
      if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        a1 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((a1 & 1) == 0) {
          break;
        }
      }
      a1 = (uint64_t)[(id)v7 sourceDevicePosition];

      if (a1 == 1)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        id v39 = v112;
        id v40 = v109;
        id v41 = v109;
        goto LABEL_72;
      }
LABEL_17:
      ++v20;
      if (v22 == v19) {
        goto LABEL_5;
      }
    }

    goto LABEL_17;
  }
LABEL_34:
  swift_bridgeObjectRelease_n();
  id v40 = [objc_allocWithZone((Class)AVCaptureMetadataOutput) init];
  self;
  if (swift_dynamicCastObjCClass())
  {
    [(id)a1 addOutputWithNoConnections:v40];
    id v30 = [(id)a1 inputs];
    sub_10000F734(0, &qword_100521108);
    unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    aBlock[0] = _swiftEmptyArrayStorage;
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      id result = (id)_CocoaArrayWrapper.endIndex.getter();
      uint64_t v32 = (uint64_t)result;
      id v109 = v40;
      if (result)
      {
LABEL_37:
        if (v32 < 1)
        {
          __break(1u);
LABEL_102:
          __break(1u);
          return result;
        }
        uint64_t v34 = 0;
        do
        {
          if ((v31 & 0xC000000000000001) != 0) {
            id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v35 = *(id *)(v31 + 8 * v34 + 32);
          }
          uint64_t v36 = v35;
          ++v34;
          id v37 = [v35 ports];
          sub_10000F734(0, &qword_100521110);
          unint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          sub_10019FC00(v38);
        }
        while (v32 != v34);
        swift_bridgeObjectRelease_n();
        unint64_t v42 = aBlock[0];
        id v40 = v109;
        if (!(aBlock[0] >> 62)) {
          goto LABEL_44;
        }
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id result = (id)swift_bridgeObjectRetain();
      id v109 = v40;
      if (v32) {
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease_n();
    unint64_t v42 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_44:
      a1 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (a1)
      {
LABEL_45:
        uint64_t v43 = 0;
        unint64_t v7 = (unint64_t)AVCaptureDeviceTypeBuiltInWideAngleCamera;
        AVCaptureDeviceType v113 = AVMediaTypeMetadataObject;
        while (1)
        {
          uint64_t v45 = v43 + 1;
          if (__OFADD__(v43, 1)) {
            goto LABEL_65;
          }
          id v46 = *(id *)(v42 + 8 * v43 + 32);
          id v47 = [v46 sourceDeviceType];
          if (v47)
          {
            id v48 = v47;
            uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v51 = v50;
            if (v49 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v51 == v52)
            {

              swift_bridgeObjectRelease_n();
LABEL_57:
              id v55 = [v46 mediaType];
              uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v58 = v57;
              if (v56 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v58 == v59)
              {

                swift_bridgeObjectRelease_n();
LABEL_60:
                swift_bridgeObjectRelease_n();
                sub_10000F214(&qword_100521040);
                uint64_t v60 = swift_allocObject();
                *(_OWORD *)(v60 + 16) = xmmword_100440690;
                *(void *)(v60 + 32) = v46;
                aBlock[0] = v60;
                specialized Array._endMutation()();
                id v61 = objc_allocWithZone((Class)AVCaptureConnection);
                sub_10000F734(0, &qword_100521110);
                id v62 = v46;
                id v40 = v109;
                Class isa = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                id v64 = [v61 initWithInputPorts:isa output:v40];

                [v108 addConnection:v64];
                goto LABEL_71;
              }
              char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v44) {
                goto LABEL_60;
              }
              goto LABEL_47;
            }
            char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v54) {
              goto LABEL_57;
            }
          }
LABEL_47:

          ++v43;
          if (v45 == a1)
          {
            swift_bridgeObjectRelease_n();
            id v41 = 0;
            id v40 = v109;
            goto LABEL_72;
          }
        }
      }
      goto LABEL_70;
    }
LABEL_69:
    swift_bridgeObjectRetain();
    a1 = _CocoaArrayWrapper.endIndex.getter();
    if (a1) {
      goto LABEL_45;
    }
LABEL_70:
    swift_bridgeObjectRelease_n();
    goto LABEL_71;
  }
  [(id)a1 addOutput:v40];
LABEL_71:
  id v41 = 0;
LABEL_72:
  id result = [v40 metadataObjectTypes];
  if (!result) {
    goto LABEL_102;
  }
  id v65 = result;
  type metadata accessor for ObjectType(0);
  uint64_t v66 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v67 = [v40 availableMetadataObjectTypes];
  uint64_t v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v69 = AVMetadataObjectTypeQRCode;
  char v70 = sub_10012AF08((uint64_t)v69, v68);
  swift_bridgeObjectRelease();

  if (v70)
  {
    uint64_t v71 = v69;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v66 = sub_100329E08(0, v66[2] + 1, 1, v66);
    }
    unint64_t v73 = v66[2];
    unint64_t v72 = v66[3];
    if (v73 >= v72 >> 1) {
      uint64_t v66 = sub_100329E08((void *)(v72 > 1), v73 + 1, 1, v66);
    }
    uint64_t v66[2] = v73 + 1;
    v66[v73 + 4] = v71;
  }
  if ([v40 isAppClipCodeMetadataSupported])
  {
    [v40 setAppClipCodeMetadataObjectTypeAvailable:1];
    id v74 = AVMetadataObjectTypeAppClipCode;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v66 = sub_100329E08(0, v66[2] + 1, 1, v66);
    }
    unint64_t v76 = v66[2];
    unint64_t v75 = v66[3];
    if (v76 >= v75 >> 1) {
      uint64_t v66 = sub_100329E08((void *)(v75 > 1), v76 + 1, 1, v66);
    }
    uint64_t v66[2] = v76 + 1;
    v66[v76 + 4] = v74;
  }
  if ([v40 isSceneClassificationMetadataSupported])
  {
    [v40 setSceneClassificationMetadataObjectTypeAvailable:1];
    id v77 = AVMetadataObjectTypeSceneClassification;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v66 = sub_100329E08(0, v66[2] + 1, 1, v66);
    }
    unint64_t v79 = v66[2];
    unint64_t v78 = v66[3];
    if (v79 >= v78 >> 1) {
      uint64_t v66 = sub_100329E08((void *)(v78 > 1), v79 + 1, 1, v66);
    }
    uint64_t v66[2] = v79 + 1;
    v66[v79 + 4] = v77;
  }
  if ([v40 isVisualIntelligenceMetadataSupported])
  {
    [v40 setVisualIntelligenceMetadataObjectTypeAvailable:1];
    id v80 = AVMetadataObjectTypeVisualIntelligence;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v66 = sub_100329E08(0, v66[2] + 1, 1, v66);
    }
    unint64_t v82 = v66[2];
    unint64_t v81 = v66[3];
    uint64_t v83 = v103;
    if (v82 >= v81 >> 1)
    {
      uint64_t v95 = sub_100329E08((void *)(v81 > 1), v82 + 1, 1, v66);
      uint64_t v83 = v103;
      uint64_t v66 = v95;
    }
    uint64_t v66[2] = v82 + 1;
    v66[v82 + 4] = v80;
  }
  else
  {
    uint64_t v83 = v103;
  }
  uint64_t v84 = v83;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v86 = (void *)Strong;
    [v40 setMetadataObjectsDelegate:Strong queue:*(void *)(v84 + OBJC_IVAR____TtC6Tamale14ARCameraSource_metadataQueue)];
  }
  Class v87 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v40 setMetadataObjectTypes:v87];

  uint64_t v88 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = v88;
  *(void *)(v89 + 24) = v40;
  aBlock[4] = sub_10014B6C0;
  aBlock[5] = v89;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004ECF80;
  uint64_t v90 = _Block_copy(aBlock);
  swift_retain();
  id v91 = v40;
  id v92 = v97;
  static DispatchQoS.unspecified.getter();
  uint64_t v114 = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
  long long v93 = v99;
  uint64_t v94 = v102;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v90);

  (*(void (**)(char *, uint64_t))(v101 + 8))(v93, v94);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v92, v100);
  swift_release();
  return (id)swift_release();
}

void sub_100134D10(uint64_t a1, void *a2, uint64_t *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v6 = (void *)Strong;
    uint64_t v7 = *a3;
    uint64_t v8 = *(void **)(Strong + *a3);
    *(void *)(Strong + v7) = a2;
    id v9 = a2;
  }
}

uint64_t sub_100134D84(uint64_t a1)
{
  v2[9] = a1;
  void v2[10] = v1;
  sub_10000F214(&qword_10051E070);
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for CameraControllerConfiguration(0);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_100134E64, 0, 0);
}

uint64_t sub_100134E64()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  swift_getKeyPath();
  v0[5] = v3;
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceReplay);
  sub_10014C684(v2, v1, type metadata accessor for CameraControllerConfiguration);
  uint64_t v5 = v0[15];
  if (v4)
  {
    uint64_t v6 = v0[11];
    sub_10000FB74(v5 + *(int *)(v0[12] + 72), v6, &qword_10051E070);
    sub_10014C574(v5, type metadata accessor for CameraControllerConfiguration);
    uint64_t v7 = type metadata accessor for URL();
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
    sub_10000FBD8(v6, &qword_10051E070);
    if (v8 == 1)
    {
      sub_10010C570();
      swift_allocError();
      *id v9 = xmmword_100446C50;
LABEL_9:
      swift_willThrow();
LABEL_10:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v15 = (uint64_t (*)(void))v0[1];
      goto LABEL_11;
    }
  }
  else
  {
    sub_10014C574(v0[15], type metadata accessor for CameraControllerConfiguration);
  }
  uint64_t v10 = v0[10];
  swift_getKeyPath();
  v0[6] = v10;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v10 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16) == 1)
  {
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Reconfigure unsupported when running.", v13, 2u);
      swift_slowDealloc();
    }

    sub_10010C570();
    swift_allocError();
    *uint64_t v14 = 0xD000000000000020;
    v14[1] = 0x8000000100428200;
    goto LABEL_9;
  }
  uint64_t v17 = v0[14];
  unint64_t v18 = (int *)v0[12];
  uint64_t v19 = v0[9];
  uint64_t v20 = v0[10];
  swift_getKeyPath();
  v0[7] = v20;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v21 = v20 + OBJC_IVAR____TtC6Tamale14ARCameraSource__configuration;
  swift_beginAccess();
  sub_10014C684(v21, v17, type metadata accessor for CameraControllerConfiguration);
  sub_10014B638(v19 + v18[22], v17 + v18[22]);
  sub_10014B638(v19 + v18[18], v17 + v18[18]);
  *(unsigned char *)(v17 + v18[14]) = *(unsigned char *)(v19 + v18[14]);
  sub_10014B638(v19 + v18[10], v17 + v18[10]);
  *(unsigned char *)(v17 + 29) = *(unsigned char *)(v19 + 29);
  *(unsigned char *)(v17 + v18[16]) = *(unsigned char *)(v19 + v18[16]);
  if (!sub_1000DA788((double *)v17, (double *)v19))
  {
    uint64_t v26 = v0[14];
    sub_10010C570();
    swift_allocError();
    *uint64_t v27 = 0xD000000000000039;
    v27[1] = 0x80000001004281C0;
    swift_willThrow();
    sub_10014C574(v26, type metadata accessor for CameraControllerConfiguration);
    goto LABEL_10;
  }
  uint64_t v22 = v0[14];
  uint64_t v23 = v0[13];
  uint64_t v24 = v0[10];
  sub_10014C684(v0[9], v23, type metadata accessor for CameraControllerConfiguration);
  swift_getKeyPath();
  uint64_t v25 = swift_task_alloc();
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v23;
  v0[8] = v24;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10014C574(v23, type metadata accessor for CameraControllerConfiguration);
  sub_10012F160();
  sub_10014C574(v22, type metadata accessor for CameraControllerConfiguration);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
LABEL_11:
  return v15();
}

uint64_t sub_1001353EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for FrameConsumerContainer();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v7 + 24) = a3;
  swift_unknownObjectWeakAssign();
  *(void *)(v7 + 32) = a4;
  int v8 = (void *)(a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_consumers);
  swift_beginAccess();
  id v9 = a4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

id sub_1001354D4(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakAssign();
  id result = *(id *)(a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_metadataOutput);
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_metadataQueue);
    return [result setMetadataObjectsDelegate:a2 queue:v5];
  }
  return result;
}

uint64_t sub_10013554C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = __chkstk_darwin(v5);
  id v9 = (void *)((char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue);
  *id v9 = v10;
  (*(void (**)(void *, void, uint64_t, double))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    swift_getKeyPath();
    aBlock[0] = v1;
    sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    uint64_t result = swift_release();
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16) != 1)
    {
      char v13 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration);
      if (v13)
      {
        if (*(void *)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_trackManagerSupporting))
        {
          id v14 = v13;
          swift_retain();
          sub_10013B20C();
          swift_release();
        }
        else
        {
          id v22 = v13;
        }
        uint64_t v23 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_motionMonitor);
        uint64_t v24 = v23[4];
        sub_10000F214(&qword_1005210E0);
        swift_allocObject();
        swift_retain();
        void v23[2] = sub_10003FE5C((uint64_t)_swiftEmptyArrayStorage, 0, v24);
        swift_release();
        uint64_t v25 = v23[4];
        sub_10000F214(&qword_1005210E8);
        swift_allocObject();
        v23[3] = sub_10003FE44((uint64_t)_swiftEmptyArrayStorage, 0, v25);
        swift_release();
        uint64_t v26 = v23[5];
        unint64_t v27 = v23[6];
        void v23[5] = 0;
        v23[6] = 0;
        sub_10014A76C(v26, v27);
        swift_release();
        self;
        if (!swift_dynamicCastObjCClass())
        {
          uint64_t v28 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_session);
          uint64_t v29 = swift_allocObject();
          swift_unknownObjectWeakInit();
          aBlock[4] = sub_10014B57C;
          aBlock[5] = v29;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100135C58;
          aBlock[3] = &unk_1004ECF08;
          id v30 = _Block_copy(aBlock);
          swift_release();
          [v28 setBeforeRunningAVCaptureSession:v30];
          _Block_release(v30);
        }
        swift_getKeyPath();
        aBlock[0] = v1;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        unint64_t v31 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceReplay);
        if (v31)
        {
          uint64_t v32 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v4, 1, 1, v32);
          type metadata accessor for MainActor();
          id v33 = v31;
          uint64_t v34 = static MainActor.shared.getter();
          uint64_t v35 = swift_allocObject();
          *(void *)(v35 + 16) = v34;
          *(void *)(v35 + 24) = &protocol witness table for MainActor;
          sub_100064D5C((uint64_t)v4, (uint64_t)&unk_1005210F8, v35);

          swift_release();
        }
        uint64_t v36 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_session);
        [v36 runWithConfiguration:v13 options:7];
        unsigned __int8 v37 = sub_10012F004(v36);
        *(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_localizationState) = v37;
        uint64_t v38 = v37;
        uint64_t KeyPath = swift_getKeyPath();
        __chkstk_darwin(KeyPath);
        *(&v40 - 4) = v1;
        *(&v40 - 3) = v38;
        *(&v40 - 2) = 0;
        *((unsigned char *)&v40 - 8) = 1;
        aBlock[0] = v1;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

        return swift_release();
      }
      else
      {
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "AR configuration was not ready!", v17, 2u);
          swift_slowDealloc();
        }

        LOBYTE(aBlock[0]) = 0;
        sub_10010C1AC();
        uint64_t v18 = Error.localizedDescription.getter();
        uint64_t v20 = v19;
        uint64_t v21 = swift_getKeyPath();
        __chkstk_darwin(v21);
        *(&v40 - 4) = v1;
        *(&v40 - 3) = v18;
        *(&v40 - 2) = v20;
        *((unsigned char *)&v40 - 8) = 2;
        aBlock[0] = v1;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100135BFC(_UNKNOWN **a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_1001329E8(a1);
  }
}

void sub_100135C58(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100135CC0()
{
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_10014B548;
  *(void *)(v3 + 24) = v2;
  _OWORD v8[4] = sub_10014C6EC;
  _OWORD v8[5] = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100109E30;
  void v8[3] = &unk_1004ECEE0;
  id v4 = _Block_copy(v8);
  uint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100135E14()
{
  uint64_t v1 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v0;
  id v11 = sub_10014B504;
  uint64_t v12 = v4;
  id v5 = v0;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t result = swift_release();
  if (v13 == 1)
  {
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = 0;
    void v8[3] = 0;
    _OWORD v8[4] = v5;
    id v9 = v5;
    sub_100064D5C((uint64_t)v3, (uint64_t)&unk_1005210D8, (uint64_t)v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_100135FA0(uint64_t a1)
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState;
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16) >= 3u && *(_OWORD *)v2 == 0) {
    return 0;
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned __int8 *)(v2 + 16) >= 3u && *(_OWORD *)v2 != 0) {
    return 0;
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return 1;
}

uint64_t sub_10013614C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  v4[13] = v7;
  v4[14] = *(void *)(v7 - 8);
  v4[15] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v4[16] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1001362B4;
  v8[101] = a4;
  return _swift_task_switch(sub_10012B21C, 0, 0);
}

uint64_t sub_1001362B4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001363B4, 0, 0);
}

uint64_t sub_1001363B4()
{
  uint64_t v1 = (void *)v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v12 = v0[14];
  uint64_t v13 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v11 = v0[11];
  [*(id *)(v0[9] + OBJC_IVAR____TtC6Tamale14ARCameraSource_session) pause];
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v1;
  v0[6] = sub_10014A6F8;
  v0[7] = v6;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1002EDB98;
  v0[5] = &unk_1004EC938;
  uint64_t v7 = _Block_copy(v0 + 2);
  id v10 = v1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v0[8] = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v7);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v13);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void sub_100136630(uint64_t a1, void *a2)
{
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  id v47 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (char *)Strong;
    uint64_t ObjectType = v5;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(&v41 - 2) = (uint64_t)v8;
    *(&v41 - 1) = (uint64_t)a2;
    id v10 = &v8[OBJC_IVAR____TtC6Tamale14ARCameraSource___observationRegistrar];
    aBlock[0] = v8;
    uint64_t v11 = sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    id v12 = a2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    id v58 = v12;

    uint64_t v13 = swift_getKeyPath();
    __chkstk_darwin(v13);
    *(&v41 - 3) = 0;
    *(&v41 - 2) = 0;
    *(&v41 - 4) = (uint64_t)v8;
    *((unsigned char *)&v41 - 8) = 3;
    aBlock[0] = v8;
    uint64_t v55 = v11;
    uint64_t v56 = v10;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    if (!a2)
    {

      return;
    }
    uint64_t v14 = &v8[OBJC_IVAR____TtC6Tamale14ARCameraSource_consumers];
    swift_beginAccess();
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *(void *)v14 >> 62;
    uint64_t v57 = v8;
    if (v16)
    {
      swift_bridgeObjectRetain_n();
      id v40 = v58;
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      if (v17) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      id v18 = v58;
      if (v17)
      {
LABEL_5:
        if (v17 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v19 = 0;
        uint64_t v52 = OBJC_IVAR____TtC6Tamale14ARCameraSource_motionMonitor;
        unint64_t v59 = v15 & 0xC000000000000001;
        uint64_t v51 = OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevel;
        char v44 = v62;
        uint64_t v43 = (void (**)(char *, uint64_t))(v3 + 8);
        unint64_t v42 = (void (**)(char *, uint64_t))(ObjectType + 8);
        uint64_t v54 = v15;
        uint64_t v53 = v17;
        do
        {
          if (v59)
          {
            uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v20 = *(void *)(v15 + 8 * v19 + 32);
            swift_retain();
          }
          uint64_t v21 = swift_unknownObjectWeakLoadStrong();
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = *(void *)(v20 + 24);
            uint64_t v24 = v57;
            uint64_t v25 = *(void *)&v57[v52];
            uint64_t v26 = *(void *)(v25 + 40);
            unint64_t v27 = *(void *)(v25 + 48);
            swift_getKeyPath();
            aBlock[0] = v24;
            sub_10009489C(v26, v27);
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            uint64_t v28 = v24[v51];
            uint64_t v29 = *(void **)(v20 + 32);
            if (v29)
            {
              uint64_t v30 = swift_allocObject();
              *(void *)(v30 + 16) = v22;
              *(void *)(v30 + 24) = v23;
              id v31 = v58;
              *(void *)(v30 + 32) = v58;
              *(void *)(v30 + 40) = v26;
              *(void *)(v30 + 48) = v27;
              *(unsigned char *)(v30 + 56) = v28;
              v62[2] = sub_10014A758;
              v62[3] = v30;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              v62[0] = sub_1002EDB98;
              v62[1] = &unk_1004EC988;
              uint64_t v32 = _Block_copy(aBlock);
              id v33 = v31;
              id v34 = v29;
              swift_unknownObjectRetain();
              uint64_t v35 = v47;
              static DispatchQoS.unspecified.getter();
              uint64_t v60 = _swiftEmptyArrayStorage;
              sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_10000F214(&qword_10051A960);
              sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
              uint64_t v36 = v49;
              uint64_t v37 = v50;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              OS_dispatch_queue.async(group:qos:flags:execute:)();
              _Block_release(v32);
              swift_unknownObjectRelease();

              (*v43)(v36, v37);
              (*v42)(v35, v48);
              swift_release();
            }
            else
            {
              uint64_t ObjectType = swift_getObjectType();
              aBlock[0] = v58;
              uint64_t v45 = *(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8);
              uint64_t v38 = sub_10000F734(0, &qword_1005205C8);
              uint64_t v39 = sub_1001077E0(&qword_1005205C0, &qword_1005205C8);
              v45(aBlock, v26, v27, v28, v38, v39, ObjectType, v23);
              swift_unknownObjectRelease();
              sub_10014A76C(v26, v27);
            }
            swift_release();
            uint64_t v15 = v54;
            uint64_t v17 = v53;
          }
          else
          {
            swift_release();
          }
          ++v19;
        }
        while (v17 != v19);
      }
    }

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100136D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = a3;
  uint64_t v11 = *(void (**)(uint64_t *, uint64_t, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8);
  sub_10009489C(a4, a5);
  uint64_t v12 = sub_10000F734(0, &qword_1005205C8);
  uint64_t v13 = sub_1001077E0(&qword_1005205C0, &qword_1005205C8);
  v11(&v16, a4, a5, a6, v12, v13, ObjectType, a2);
  return sub_10014A76C(a4, a5);
}

uint64_t sub_100136EA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  aBlock[0] = v0;
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC6Tamale14ARCameraSource__detectionLog];
  if (v5)
  {
    swift_retain();
    dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = 0;
    void v8[3] = 0;
    _OWORD v8[4] = v5;
    _OWORD v8[5] = v6;
    swift_retain();
    id v9 = v6;
    sub_100064D5C((uint64_t)v4, (uint64_t)&unk_1005210D0, (uint64_t)v8);
    swift_release();
    OS_dispatch_semaphore.wait()();
    swift_release();
  }
  id v10 = *(NSObject **)&v1[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10014B3B8;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_10014C6EC;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100109E30;
  aBlock[3] = &unk_1004ECDF0;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100137174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100137194, a4, 0);
}

uint64_t sub_100137194()
{
  sub_10009366C();
  return _swift_task_switch(sub_1001371FC, 0, 0);
}

uint64_t sub_1001371FC()
{
  OS_dispatch_semaphore.signal()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013725C(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v4 - 8);
  dispatch_semaphore_t v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = __chkstk_darwin(v7);
  uint64_t v11 = (void *)((char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t, double))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7, v9);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v12)
  {
    swift_getKeyPath();
    aBlock[0] = v2;
    sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    uint64_t result = swift_release();
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16))
    {
      swift_getKeyPath();
      aBlock[0] = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceRecording);
      if (v15)
      {
        swift_retain();
        dispatch_semaphore_t v16 = dispatch_semaphore_create(0);
        uint64_t v17 = *(void **)(v15 + 16);
        if (v17)
        {
          uint64_t v18 = swift_allocObject();
          *(void *)(v18 + 16) = v16;
          aBlock[4] = sub_10014B384;
          aBlock[5] = v18;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          void aBlock[2] = sub_100143444;
          aBlock[3] = &unk_1004ECD78;
          uint64_t v19 = _Block_copy(aBlock);
          id v20 = v17;
          uint64_t v21 = v16;
          swift_release();
          [v20 finishRecordingWithHandler:v19];
          _Block_release(v19);
        }
        [*(id *)(v15 + OBJC_IVAR____TtC6Tamale23ARCameraSourceRecording_session) pause];
        OS_dispatch_semaphore.wait()();
        swift_release();
      }
      else
      {
        [*(id *)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource_session) pause];
      }
      swift_getKeyPath();
      aBlock[0] = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v22 = *(void **)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceReplay);
      if (v22)
      {
        uint64_t v23 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v6, 1, 1, v23);
        type metadata accessor for MainActor();
        id v24 = v22;
        uint64_t v25 = static MainActor.shared.getter();
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v25;
        *(void *)(v26 + 24) = &protocol witness table for MainActor;
        sub_100064D5C((uint64_t)v6, (uint64_t)&unk_1005210C0, v26);

        swift_release();
      }
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      *(&v29 - 4) = v2;
      *(&v29 - 3) = a1;
      *(&v29 - 2) = 0;
      *((unsigned char *)&v29 - 8) = 0;
      aBlock[0] = v2;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      uint64_t v28 = swift_getKeyPath();
      __chkstk_darwin(v28);
      *(&v29 - 2) = v2;
      *(&v29 - 1) = 0;
      aBlock[0] = v2;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100137798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  long long v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_1001377BC, 0, 0);
}

uint64_t sub_1001377BC()
{
  id v1 = [*(id *)(v0[5] + OBJC_IVAR____TtC6Tamale14ARCameraSource_session) currentFrame];
  v0[6] = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)(v0[5] + OBJC_IVAR____TtC6Tamale14ARCameraSource_trackManagerSupporting);
    v0[7] = v3;
    if (v3)
    {
      swift_retain();
      uint64_t v4 = (void *)swift_task_alloc();
      v0[8] = v4;
      void *v4 = v0;
      v4[1] = sub_100137958;
      uint64_t v5 = v0[3];
      uint64_t v6 = v0[4];
      uint64_t v7 = v0[2];
      return sub_1001411A4(v7, (uint64_t)v2, v5, v6);
    }
    sub_10010C1AC();
    swift_allocError();
    *uint64_t v10 = 4;
    swift_willThrow();
  }
  else
  {
    sub_10010C1AC();
    swift_allocError();
    *double v9 = 1;
    swift_willThrow();
  }
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100137958(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 72) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100137AFC;
  }
  else
  {
    *(void *)(v6 + 80) = a2;
    *(void *)(v6 + 88) = a1;
    uint64_t v7 = sub_100137A8C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100137A8C()
{
  swift_release();
  id v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  return v1(v2, v3);
}

uint64_t sub_100137AFC()
{
  swift_release();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_100137B68()
{
  uint64_t v1 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = OBJC_IVAR____TtC6Tamale14ARCameraSource_shutterSoundTask;
  swift_retain();
  Task.cancel()();
  swift_release();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  uint64_t v6 = *(void *)&v0[v4];
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = 0;
  _OWORD v7[3] = 0;
  _OWORD v7[4] = v6;
  swift_retain();
  sub_100064D5C((uint64_t)v3, (uint64_t)&unk_100521190, (uint64_t)v7);
  swift_release();
  sub_100136EA0();
  uint64_t v8 = (objc_class *)type metadata accessor for ARCameraSource(0);
  v10.receiver = v0;
  v10.super_class = v8;
  return [super dealloc];
}

uint64_t sub_100137CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  void *v6 = v4;
  v6[1] = sub_100137D70;
  return Task<>.value.getter(v4 + 24, a4, &type metadata for UInt32);
}

uint64_t sub_100137D70()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100137E6C, 0, 0);
}

uint64_t sub_100137E6C()
{
  SystemSoundID v1 = *(_DWORD *)(v0 + 24);
  if (v1) {
    AudioServicesDisposeSystemSoundID(v1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_100138344(void *a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = v2;
    id v22 = a2;
    if ([a1 supportsControls])
    {
      swift_getKeyPath();
      aBlock[0] = v2;
      sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v5 = OBJC_IVAR____TtC6Tamale14ARCameraSource__systemZoomSlider;
      if (!*(void *)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource__systemZoomSlider))
      {
        sub_10000F734(0, (unint64_t *)&qword_10051A950);
        uint64_t v6 = (void *)static OS_dispatch_queue.main.getter();
        [a1 setControlsDelegate:v3 queue:v6];

        uint64_t v7 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v8 = objc_allocWithZone((Class)AVCaptureSystemZoomSlider);
        aBlock[4] = sub_10014B260;
        aBlock[5] = v7;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = sub_100145E60;
        aBlock[3] = &unk_1004ECD00;
        uint64_t v9 = _Block_copy(aBlock);
        swift_retain();
        id v10 = [v8 initWithDevice:v22 action:v9];
        _Block_release(v9);
        swift_release();
        swift_release();
        sub_10000F214((uint64_t *)&unk_1005210A0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100440F30;
        *(void *)(inited + 32) = [objc_allocWithZone((Class)NSNumber) initWithDouble:1.0];
        *(void *)(inited + 40) = [objc_allocWithZone((Class)NSNumber) initWithDouble:1.0];
        double v12 = *(double *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource_maximumZoomFactor);
        *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithDouble:v12];
        *(void *)(inited + 56) = [objc_allocWithZone((Class)NSNumber) initWithDouble:v12];
        sub_10031BE90(inited);
        sub_10000F734(0, (unint64_t *)&qword_10051B450);
        sub_1001077E0(&qword_1005210B0, (unint64_t *)&qword_10051B450);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v10 setDisplayValuesByZoomFactorValue:isa];

        if ([a1 canAddControl:v10])
        {
          [a1 addControl:v10];
        }
        else
        {
          if (qword_100517EB8 != -1) {
            swift_once();
          }
          uint64_t v14 = type metadata accessor for Logger();
          sub_10000F378(v14, (uint64_t)qword_10055E340);
          uint64_t v15 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v15, v16))
          {
            uint64_t v17 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v17 = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not add zoom slider control to capture session", v17, 2u);
            swift_slowDealloc();
          }
        }
        uint64_t KeyPath = swift_getKeyPath();
        __chkstk_darwin(KeyPath);
        aBlock[0] = v3;
        id v19 = v10;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();

        swift_getKeyPath();
        aBlock[0] = v3;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        id v20 = *(void **)(v3 + v5);
        if (v20)
        {
          swift_getKeyPath();
          aBlock[0] = v3;
          id v21 = v20;
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          [v21 setEnabled:(*(unsigned char *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__cameraControlsDisabled) & 1) == 0];
        }
      }
    }
    else
    {
    }
  }
}

void sub_1001388C8(double a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_100138930(2, a1);
  }
}

uint64_t sub_100138930(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v10);
  double v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = fmax(a2, 1.0);
  if (*(double *)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource_maximumZoomFactor) >= v13) {
    double v14 = v13;
  }
  else {
    double v14 = *(double *)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource_maximumZoomFactor);
  }
  swift_getKeyPath();
  aBlock[0] = v2;
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (v14 != *(double *)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource__targetZoomFactor))
  {
    uint64_t v32 = a1;
    if (qword_100517EB8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10000F378(v16, (uint64_t)qword_10055E340);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v31 = v7;
    if (v19)
    {
      uint64_t v30 = v6;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      aBlock[0] = v29;
      *(_DWORD *)uint64_t v20 = 134218242;
      double v35 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v21 = 0xD000000000000014;
      unint64_t v22 = 0x8000000100428160;
      switch((char)v32)
      {
        case 1:
          unint64_t v22 = 0xE500000000000000;
          uint64_t v21 = 0x7465736572;
          break;
        case 2:
          unint64_t v22 = 0x8000000100428140;
          uint64_t v21 = 0xD000000000000013;
          break;
        case 3:
          unint64_t v22 = 0xE700000000000000;
          uint64_t v21 = 0x65727574736567;
          break;
        default:
          break;
      }
      double v35 = COERCE_DOUBLE(sub_1003806B0(v21, v22, aBlock));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Setting zoom factor %f for %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v6 = v30;
    }
    else
    {
    }
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(&v29 - 2) = v3;
    *((double *)&v29 - 1) = v14;
    aBlock[0] = v3;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    uint64_t result = swift_release();
    if (v32 >= 2u)
    {
      if (v32 == 2) {
        return result;
      }
      char v24 = 1;
    }
    else
    {
      char v24 = 0;
    }
    id v25 = [*(id *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource_session) stateQueue];
    uint64_t v26 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v26;
    *(double *)(v27 + 24) = v14;
    *(unsigned char *)(v27 + 32) = v24;
    aBlock[4] = (uint64_t)sub_10014B204;
    aBlock[5] = v27;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_1002EDB98;
    aBlock[3] = (uint64_t)&unk_1004ECCD8;
    uint64_t v28 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    double v35 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_100138F90(double a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    swift_beginAccess();
    uint64_t v7 = swift_unknownObjectWeakLoadStrong();
    if (v7)
    {
      uint64_t v8 = (char *)v7;
      swift_getKeyPath();
      sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v9 = *(void **)&v8[OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomCaptureDevice];
      id v10 = v9;
    }
    else
    {
      uint64_t v9 = 0;
    }
    sub_10014874C(v9, a3 & 1, a1);
  }
}

uint64_t sub_1001390C0(uint64_t a1, char a2)
{
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  uint64_t v6 = (double *)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureState];
  if (v2[OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureState + 8])
  {
    if (a2) {
      return result;
    }
  }
  else if ((a2 & 1) == 0 && *v6 == *(double *)&a1)
  {
    return result;
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*((unsigned char *)v6 + 8) == 1)
  {
    if (qword_100517EB8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10000F378(v7, (uint64_t)qword_10055E340);
    uint64_t v8 = v2;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134217984;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting zoom gesture with initial factor %f", v11, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v9 = v8;
    }

    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
  }
  uint64_t v13 = swift_getKeyPath();
  __chkstk_darwin(v13);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (((_BYTE)v6[1] & 1) == 0)
  {
    double v14 = *v6;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    return sub_100138930(3, v14 * *(double *)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureInitialZoomFactor]);
  }
  return result;
}

uint64_t sub_10013952C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v17 - 8);
  double v8 = __chkstk_darwin(v17);
  os_log_type_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [*(id *)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource_session) stateQueue:v8];
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(unsigned char *)(v13 + 24) = a1;
  aBlock[4] = sub_10014B08C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004ECC88;
  double v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  BOOL v19 = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v17);
  swift_release();
  return swift_release();
}

void sub_100139834(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (char *)Strong;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC6Tamale14ARCameraSource__systemZoomSlider];
    if (v6) {
      [v6 setEnabled:(a2 & 1) == 0];
    }
  }
}

uint64_t sub_1001399EC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000F878;
  return sub_100134D84(a1);
}

uint64_t sub_100139A84(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *v3;
  uint64_t ObjectType = swift_getObjectType();

  return sub_100146674(a1, a3, v7, ObjectType, a2);
}

uint64_t sub_100139AE0()
{
  uint64_t v1 = *v0;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState);
  sub_1000BBF50(v2, *(void *)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 8), *(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16));
  return v2;
}

uint64_t sub_100139BAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_runStateStreamInternal;
  uint64_t v4 = sub_10000F214((uint64_t *)&unk_10051FB10);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100139C28@<X0>(void *a1@<X8>)
{
  sub_10000F214((uint64_t *)&unk_100520F90);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  *a1 = v3;
  return result;
}

uint64_t sub_100139CA8()
{
  return sub_100135CC0();
}

uint64_t sub_100139CCC()
{
  return sub_100135E14();
}

uint64_t sub_100139CF0()
{
  return sub_100136EA0();
}

uint64_t sub_100139D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[4] = a3;
  _OWORD v9[5] = v8;
  v9[2] = a1;
  v9[3] = a2;
  v9[1] = sub_100139DD8;
  return _swift_task_switch(sub_1001377BC, 0, 0);
}

uint64_t sub_100139DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t sub_100139EE8(uint64_t a1, char a2)
{
  return sub_1001390C0(a1, a2 & 1);
}

uint64_t sub_100139F10()
{
  return sub_100138930(1, 1.0);
}

uint64_t sub_100139F3C(char a1)
{
  return sub_10013952C(a1);
}

void sub_100139F70()
{
  uint64_t v1 = v0;
  id v2 = v0[2];
  NSObject.hash(into:)();

  id v3 = v1[3];
  NSObject.hash(into:)();

  id v4 = v1[4];
  NSObject.hash(into:)();

  id v5 = v1[6];
  NSObject.hash(into:)();

  id v6 = v1[5];
  NSObject.hash(into:)();
}

uint64_t sub_10013A034()
{
  sub_10000F214(&qword_100521040);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100446C70;
  id v2 = (void *)v0[2];
  id v3 = (void *)v0[3];
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  id v5 = (void *)v0[5];
  id v4 = (void *)v0[6];
  id v6 = (void *)v0[4];
  *(void *)(v1 + 48) = v6;
  *(void *)(v1 + 56) = v4;
  *(void *)(v1 + 64) = v5;
  uint64_t v13 = v1;
  specialized Array._endMutation()();
  id v7 = v2;
  id v8 = v3;
  id v9 = v6;
  id v10 = v4;
  id v11 = v5;
  return v13;
}

uint64_t sub_10013A0D4()
{
  return swift_deallocClassInstance();
}

Swift::Int sub_10013A12C()
{
  return Hasher._finalize()();
}

void sub_10013A170()
{
}

Swift::Int sub_10013A194()
{
  return Hasher._finalize()();
}

uint64_t sub_10013A1D4()
{
  return sub_100146874();
}

uint64_t sub_10013A1E0@<X0>(uint64_t a1@<X8>)
{
  v28[1] = a1;
  uint64_t v34 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v31 = (char *)v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  uint64_t v30 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  uint64_t v29 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100521088);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214((uint64_t *)&unk_100521050);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v28 - v15;
  sub_10000F214(&qword_100521090);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v6);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  UUID.init()();
  uint64_t v17 = *(void **)(v28[2] + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  BOOL v19 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v28[0] = v10;
  v19(v13, v16, v10);
  unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v21 + v20, v13, v10);
  aBlock[4] = sub_10014AE40;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004ECBC0;
  unint64_t v22 = _Block_copy(aBlock);
  id v23 = v17;
  swift_retain();
  char v24 = v30;
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
  id v25 = v31;
  uint64_t v26 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v36);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v33);
  (*(void (**)(char *, void))(v11 + 8))(v16, v28[0]);
  swift_release();
  return swift_release();
}

uint64_t sub_10013A768(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v2 = sub_10000F214(&qword_100521048);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100521098);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v24 - v13;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    UUID.init()();
    uint64_t v27 = v3;
    id v25 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v25(v11, v14, v8);
    uint64_t v17 = sub_10000F214((uint64_t *)&unk_100521050);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v26 = v2;
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v7, v29, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v7, 0, 1, v17);
    swift_beginAccess();
    sub_1003A4030((uint64_t)v7, (uint64_t)v11);
    swift_endAccess();
    uint64_t v20 = swift_allocObject();
    swift_weakInit();
    v25(v11, v14, v8);
    unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v22 + v21, v11, v8);
    AsyncStream.Continuation.onTermination.setter();
    uint64_t v30 = *(void *)(v16 + 40);
    swift_bridgeObjectRetain();
    id v23 = v28;
    AsyncStream.Continuation.yield(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  return result;
}

uint64_t sub_10013AB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v28 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v24 = *(id *)(result + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
    uint64_t v14 = swift_allocObject();
    id v25 = v7;
    uint64_t v15 = v14;
    swift_weakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v10);
    uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = v4;
    uint64_t v26 = v5;
    uint64_t v27 = v8;
    uint64_t v18 = (v16 + 24) & ~v16;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v15;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v19 + v18, (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    aBlock[4] = sub_10014AFF0;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1002EDB98;
    aBlock[3] = &unk_1004ECC38;
    uint64_t v20 = _Block_copy(aBlock);
    id v21 = v24;
    swift_retain();
    uint64_t v22 = v28;
    static DispatchQoS.unspecified.getter();
    uint64_t v30 = _swiftEmptyArrayStorage;
    sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
    id v23 = v25;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);
    swift_release();

    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v17);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v22, v27);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10013AF30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000F214(&qword_100521098);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    uint64_t v11 = sub_10000F214((uint64_t *)&unk_100521050);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
    swift_beginAccess();
    sub_1003A4030((uint64_t)v5, (uint64_t)v9);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_10013B0F0(uint64_t a1)
{
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 24) = sub_10031AF94((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v1 + 32) = sub_10031B18C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v1 + 40) = sub_10031B298((uint64_t)_swiftEmptyArrayStorage);
  *(_DWORD *)(v1 + 48) = 1084227584;
  *(void *)(v1 + 56) = 3;
  uint64_t v3 = OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_logger;
  if (qword_100517EA8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = sub_10000F378(v4, (uint64_t)qword_10055E310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v1 + v3, v5, v4);
  *(void *)(v1 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_predictionsStreamContinuations) = &_swiftEmptyDictionarySingleton;
  *(void *)(v1 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue) = a1;
  return v1;
}

uint64_t sub_10013B20C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = __chkstk_darwin(v1);
  uint64_t v5 = (uint64_t (**)(void *, uint64_t))((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue;
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
  *uint64_t v5 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v2 + 104);
  ((void (*)(void *, void, uint64_t, double))v9)(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v10 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t))(v2 + 8);
  uint64_t result = v11(v5, v1);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v13 = *(void **)(v0 + v6);
  *uint64_t v5 = v13;
  v9(v5, v8, v1);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = v11(v5, v1);
  if ((v13 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  id v21 = v11;
  uint64_t v15 = swift_bridgeObjectRetain();
  sub_100147874(v15, (void (*)(id, char *))sub_10014AD68);
  uint64_t v16 = v21;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void **)(v0 + v6);
  *uint64_t v5 = v17;
  v9(v5, v8, v1);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = v16(v5, v1);
  if ((v17 & 1) == 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v19 = *(void **)(v0 + v6);
  *uint64_t v5 = v19;
  v9(v5, v8, v1);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = v16(v5, v1);
  if (v19)
  {
    *(void *)(v0 + 24) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 32) = &_swiftEmptyDictionarySingleton;
    return swift_bridgeObjectRelease();
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_10013B48C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = __chkstk_darwin(v5);
  uint64_t v9 = (void *)((char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v52 = OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue;
  uint64_t v10 = *(void *)(a3 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
  *uint64_t v9 = v10;
  uint64_t v11 = *(void (**)(void, double))(v6 + 104);
  unsigned int v51 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v49 = (void (*)(uint64_t *, void, uint64_t))v11;
  uint64_t v50 = v6 + 104;
  v11(v9, v7);
  id v12 = a1;
  id v13 = (id)v10;
  LOBYTE(a1) = _dispatchPreconditionTest(_:)();
  uint64_t v15 = *(void (**)(uint64_t *, uint64_t))(v6 + 8);
  unint64_t v14 = v6 + 8;
  uint64_t v48 = v15;
  v15(v9, v5);
  if ((a1 & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v16 = *(void *)(a3 + 32);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10012B0C0(v12, v16);

  swift_bridgeObjectRelease();
  if (v17)
  {
    v41[1] = v17;
    unint64_t v18 = sub_10013A034();
    uint64_t v10 = v18;
    id v42 = v12;
    if (v18 >> 62) {
      goto LABEL_34;
    }
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v19; uint64_t v19 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v44 = v10;
      uint64_t v45 = a3 + 16;
      unint64_t v46 = v14;
      unint64_t v47 = v10 & 0xC000000000000001;
      uint64_t v20 = 4;
      uint64_t v43 = v19;
      while (1)
      {
        id v21 = v47 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v10 + 8 * v20);
        uint64_t v22 = v21;
        if (__OFADD__(v20 - 4, 1)) {
          break;
        }
        id v23 = *(void **)(a3 + v52);
        *uint64_t v9 = (uint64_t)v23;
        v49(v9, v51, v5);
        id v24 = v23;
        LOBYTE(v23) = _dispatchPreconditionTest(_:)();
        v48(v9, v5);
        if ((v23 & 1) == 0) {
          goto LABEL_30;
        }
        uint64_t v10 = *(void *)(a3 + 32);
        if ((v10 & 0xC000000000000001) != 0)
        {
          if (v10 < 0) {
            uint64_t v25 = *(void *)(a3 + 32);
          }
          else {
            uint64_t v25 = v10 & 0xFFFFFFFFFFFFFF8;
          }
          swift_bridgeObjectRetain_n();
          id v26 = v22;
          uint64_t v27 = __CocoaDictionary.lookup(_:)();

          if (v27)
          {
            swift_unknownObjectRelease();
            uint64_t v28 = __CocoaDictionary.count.getter();
            Swift::Int v29 = sub_100145EB4(v25, v28);
            swift_retain();
            unint64_t v14 = sub_10032AE98((uint64_t)v26);
            char v31 = v30;
            swift_release();
            if ((v31 & 1) == 0) {
              goto LABEL_32;
            }

            sub_1003F3F64(v14, v29);
            swift_bridgeObjectRelease();
            uint64_t v10 = v29;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRetain_n();
          unint64_t v32 = sub_10032AE98((uint64_t)v22);
          char v34 = v33;
          swift_bridgeObjectRelease();
          if (v34)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v53 = v10;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1001F58AC();
              uint64_t v10 = v53;
            }

            sub_1003F3F64(v32, v10);
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v36 = *(void **)(a3 + v52);
        *uint64_t v9 = (uint64_t)v36;
        v49(v9, v51, v5);
        id v37 = v36;
        LOBYTE(v36) = _dispatchPreconditionTest(_:)();
        unint64_t v14 = v46;
        v48(v9, v5);
        if ((v36 & 1) == 0) {
          goto LABEL_31;
        }
        *(void *)(a3 + 32) = v10;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          uint64_t v39 = Strong;
          [Strong removeAnchor:v22];
        }
        else
        {
        }
        uint64_t v10 = v44;
        if (v20 - 3 == v43) {
          goto LABEL_35;
        }
        ++v20;
      }
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      swift_bridgeObjectRetain();
    }
LABEL_35:
    swift_release();
    swift_bridgeObjectRelease_n();
    id v12 = v42;
  }
  id v40 = (void *)swift_unknownObjectWeakLoadStrong();
  [v40 removeAnchor:v12];
}

void *sub_10013B924(unint64_t a1, uint64_t a2)
{
  double v5 = __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v9, v5);
  sub_10000F734(0, &qword_1005205C8);
  if (!swift_dynamicCast()) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = v19;
  id v11 = *(id *)(v2 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
  sub_10000F214(&qword_100521008);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v12 = (uint64_t)v19;
  uint64_t v13 = swift_bridgeObjectRetain();
  unint64_t v14 = sub_100147E44(v13, v12);
  __chkstk_darwin(v14);
  *(&v18 - 4) = (uint64_t)v10;
  *(&v18 - 3) = v15;
  *(&v18 - 2) = a2;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1001C1F00((uint64_t (*)(uint64_t *))sub_10014AD44, &v18 - 6, a1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  return v16;
}

BOOL sub_10013BB18(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  CGFloat MidX = *(double *)&a4;
  uint64_t v59 = type metadata accessor for DetectionRequest(0);
  __chkstk_darwin(v59);
  uint64_t v58 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_100521070);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CVDetection();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v58 - v15;
  double v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v58 - v19;
  uint64_t v21 = *a1;
  [a2 timestamp:v18];
  sub_100036ED0((uint64_t)v64, v22);
  sub_100046C44((uint64_t)v64, (uint64_t)v72);
  if (v74) {
    return 0;
  }
  v75[2] = v72[2];
  uint64_t v75[3] = v72[3];
  v75[4] = v72[4];
  uint64_t v76 = v73;
  v75[0] = v72[0];
  v75[1] = v72[1];
  sub_100035548((uint64_t)v13);
  sub_1003FE418((uint64_t)v75, (uint64_t)v16);
  sub_10014C574((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_10014BA14((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
  if (!*(void *)(a3 + 16)
    || (unint64_t v23 = sub_10032ADC4(v21 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id), (v24 & 1) == 0))
  {
    sub_10014C574((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return 0;
  }
  id v25 = *(id *)(*(void *)(a3 + 56) + 8 * v23);
  if (!sub_10013C124(a2))
  {
    sub_10014C574((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);

    return 0;
  }
  sub_1003FEC34(v66);
  uint64_t v26 = v67;
  double v27 = v68;
  sub_10000F3B0(v66, v67);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, double))(*(void *)&v27 + 64))(v65, v26, COERCE_DOUBLE(*(void *)&v27));
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v66);
  double v28 = sub_1003FD844();
  CGFloat v30 = v29;
  double v32 = v31;
  double v34 = v33;
  sub_10000FB74(*(uint64_t *)&MidX, (uint64_t)v10, (uint64_t *)&unk_100521070);
  uint64_t v35 = type metadata accessor for DetectionResult(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v10, 1, v35) == 1)
  {
    sub_10000FBD8((uint64_t)v10, (uint64_t *)&unk_100521070);
    sub_10013C26C((uint64_t)v66);
    CGFloat v37 = v68;
    CGFloat v36 = v69;
    CGFloat v39 = v70;
    CGFloat v38 = v71;
    sub_1003FEC34(v61);
    uint64_t v40 = v62;
    uint64_t v41 = v63;
    sub_10000F3B0(v61, v62);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 128))(v40, v41);
    if ((v42 & 0x100000000) != 0)
    {
      if (v42)
      {
        v82.origin.double x = v28;
        v82.origin.double y = v30;
        v82.size.double width = v32;
        v82.size.double height = v34;
        CGFloat MidX = CGRectGetMidX(v82);
        v83.origin.double x = v28;
        v83.origin.double y = v30;
        v83.size.double width = v32;
        v83.size.double height = v34;
        v77.double y = CGRectGetMidY(v83);
        v84.origin.double x = v37;
        v84.origin.double y = v36;
        v84.size.double width = v39;
        v84.size.double height = v38;
        v77.double x = MidX;
        BOOL v46 = CGRectContainsPoint(v84, v77);

        sub_10014C574((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      else
      {
        v89.origin.double x = 0.0;
        v89.origin.double y = 0.0;
        v89.size.double width = 1.0;
        v89.size.double height = 1.0;
        v85.origin.double x = v28;
        v85.origin.double y = v30;
        v85.size.double width = v32;
        v85.size.double height = v34;
        CGRect v86 = CGRectIntersection(v85, v89);
        double width = v86.size.width;
        double height = v86.size.height;

        sub_10014C574((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
        BOOL v46 = width * height > 0.0;
      }
    }
    else
    {
      LODWORD(MidX) = v42;
      v78.origin.double x = v28;
      v78.origin.double y = v30;
      v78.size.double width = v32;
      v78.size.double height = v34;
      v87.origin.double x = v37;
      v87.origin.double y = v36;
      v87.size.double width = v39;
      v87.size.double height = v38;
      CGRect v79 = CGRectIntersection(v78, v87);
      double v43 = v79.size.width;
      double v44 = v79.size.height;

      float v45 = v43 * v44 / (v32 * v34);
      sub_10014C574((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      BOOL v46 = *(float *)&MidX <= v45;
    }
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v61);
  }
  else
  {
    uint64_t v48 = v58;
    sub_10014C684((uint64_t)v10, v58, type metadata accessor for DetectionRequest);
    sub_10014C574((uint64_t)v10, type metadata accessor for DetectionResult);
    uint64_t v49 = (CGFloat *)(v48 + *(int *)(v59 + 24));
    CGFloat v50 = *v49;
    CGFloat v51 = v49[1];
    CGFloat v52 = v49[2];
    CGFloat v53 = v49[3];
    sub_10014C574(v48, type metadata accessor for DetectionRequest);
    v80.origin.double x = v28;
    v80.origin.double y = v30;
    v80.size.double width = v32;
    v80.size.double height = v34;
    v88.origin.double x = v50;
    v88.origin.double y = v51;
    v88.size.double width = v52;
    v88.size.double height = v53;
    CGRect v81 = CGRectIntersection(v80, v88);
    double v54 = v81.size.width;
    double v55 = v81.size.height;

    sub_10014C574((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return v54 * v55 > 0.0;
  }
  return v46;
}

BOOL sub_10013C124(void *a1)
{
  [v1 transform];
  float32x4_t v18 = v3;
  id v4 = [a1 camera];
  [v4 transform];
  float32x4_t v17 = v5;

  int8x16_t v19 = (int8x16_t)vsubq_f32(v18, v17);
  id v6 = [a1 camera];
  [v6 transform];
  v17.i64[0] = v7;

  id v8 = [a1 camera];
  [v8 transform];
  float v16 = v9;

  float v10 = v16;
  id v11 = [a1 camera];
  [v11 transform];
  int8x16_t v15 = v12;

  float32x2_t v13 = vmul_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), vsub_f32(0, (float32x2_t)vzip1_s32(*(int32x2_t *)v17.f32, (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL))));
  return (float)((float)(v13.f32[0] + vmuls_lane_f32(0.0 - v10, *(float32x2_t *)v19.i8, 1)) + v13.f32[1]) > 0.0;
}

void sub_10013C26C(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ARCamera.TrackingState();
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = __chkstk_darwin(v7);
  float v10 = (char *)&v34 - v9;
  id v11 = [v1 camera:v8];
  ARCamera.trackingState.getter();

  uint64_t v12 = type metadata accessor for ARCamera.TrackingState.Reason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 2, 2, v12);
  char v13 = static ARCamera.TrackingState.== infix(_:_:)();
  sub_10014C574((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for ARCamera.TrackingState);
  sub_10014C574((uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for ARCamera.TrackingState);
  [v2 timestamp];
  uint64_t v15 = v14;
  id v16 = [v2 exifData];
  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v17 + 16))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  sub_10032AC58(0x657275736F707845, 0xEC00000065646F4DLL);
  char v19 = v18;
  swift_bridgeObjectRelease();
  if (v19)
  {
    id v20 = [v2 exifData];
    uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v21 + 16))
    {
      sub_10032AC58(0x657275736F707845, 0xEF6D6172676F7250);
      char v23 = v22;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    goto LABEL_5;
  }
LABEL_6:
  char v23 = 0;
LABEL_7:
  id v24 = sub_10014A8E8(v2);
  if (v24)
  {
    id v25 = v24;
    [v24 CGRectValue];
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    double v31 = v30;
    double v33 = v32;
  }
  else
  {
    double v31 = 1.0;
    uint64_t v27 = 0;
    uint64_t v29 = 0;
    double v33 = 1.0;
  }
  *(void *)a1 = 0x3FF921FB54442D18;
  *(unsigned char *)(a1 + 8) = v13 & 1;
  *(void *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 24) = v23 & 1;
  *(void *)(a1 + 32) = v27;
  *(void *)(a1 + 40) = v29;
  *(double *)(a1 + 48) = v31;
  *(double *)(a1 + 56) = v33;
}

uint64_t sub_10013C564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v30 = a3;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v13 - 8);
  uint64_t v34 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = __chkstk_darwin(v16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a4, v17);
  sub_10000F734(0, &qword_1005205C8);
  if (swift_dynamicCast())
  {
    id v20 = (void *)aBlock[0];
    uint64_t v21 = *(void **)(v6 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    char v23 = (void *)swift_allocObject();
    void v23[2] = v30;
    v23[3] = a4;
    uint64_t v24 = v32;
    void v23[4] = v31;
    void v23[5] = v24;
    v23[6] = v22;
    v23[7] = a1;
    v23[8] = v20;
    aBlock[4] = sub_10014AD30;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1002EDB98;
    aBlock[3] = &unk_1004ECB70;
    id v25 = _Block_copy(aBlock);
    id v26 = v21;
    swift_retain();
    swift_bridgeObjectRetain();
    id v27 = v20;
    static DispatchQoS.unspecified.getter();
    CGFloat v36 = _swiftEmptyArrayStorage;
    sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v34);
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10013C9A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10013CA2C(a2, a3, a4, a6);
    return swift_release();
  }
  return result;
}

uint64_t sub_10013CA2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v349 = a4;
  uint64_t v346 = a2;
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v8 - 8);
  v316 = (char *)v295 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v303 = (uint64_t)v295 - v11;
  uint64_t v332 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v332 - 8);
  __chkstk_darwin(v332);
  v302 = (char *)v295 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v320 = (char *)v295 - v15;
  uint64_t v315 = type metadata accessor for CVDetection();
  __chkstk_darwin(v315);
  uint64_t v323 = (uint64_t)v295 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v322 = (uint64_t)v295 - v18;
  __chkstk_darwin(v19);
  long long v314 = (char *)v295 - v20;
  __chkstk_darwin(v21);
  v330 = (char *)v295 - v22;
  __chkstk_darwin(v23);
  uint64_t v342 = (uint64_t)v295 - v24;
  uint64_t v347 = a3;
  uint64_t v333 = *(void *)(a3 - 8);
  __chkstk_darwin(v25);
  id v27 = (char *)v295 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v297 = v26;
  __chkstk_darwin(v28);
  uint64_t v345 = (char *)v295 - v29;
  uint64_t v30 = type metadata accessor for DispatchPredicate();
  uint64_t v31 = *(void *)(v30 - 8);
  double v32 = __chkstk_darwin(v30);
  uint64_t v34 = (void *)((char *)v295 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v359 = OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue;
  uint64_t v35 = *(void **)(v5 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
  *uint64_t v34 = v35;
  uint64_t v36 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v37 = v31 + 104;
  long long v361 = *(void (**)(void *, uint64_t, uint64_t))(v31 + 104);
  ((void (*)(void *, void, uint64_t, double))v361)(v34, enum case for DispatchPredicate.onQueue(_:), v30, v32);
  id v38 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)();
  uint64_t v40 = *(void (**)(void *, uint64_t))(v31 + 8);
  uint64_t v39 = v31 + 8;
  v360 = v40;
  v40(v34, v30);
  if ((v35 & 1) == 0) {
    goto LABEL_157;
  }
  uint64_t v41 = *(void **)(v5 + v359);
  *uint64_t v34 = v41;
  v361(v34, v36, v30);
  id v42 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)();
  v360(v34, v30);
  if ((v41 & 1) == 0)
  {
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    sub_10000F734(0, (unint64_t *)&qword_100521030);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x10013F0B0);
  }
  uint64_t v353 = v12;
  uint64_t v43 = *(void *)(v5 + 24);
  double v44 = *(void **)(v5 + v359);
  *uint64_t v34 = v44;
  uint64_t v357 = v37;
  v361(v34, v36, v30);
  swift_bridgeObjectRetain();
  id v45 = v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)();
  uint64_t v356 = v30;
  uint64_t v358 = v39;
  v360(v34, v30);
  if ((v44 & 1) == 0) {
    goto LABEL_159;
  }
  uint64_t v46 = v36;
  uint64_t v47 = *(void *)(v5 + 24);
  swift_bridgeObjectRetain_n();
  uint64_t v48 = swift_bridgeObjectRetain();
  v337 = sub_100147E44(v48, v47);
  uint64_t v298 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v49 = v347;
  uint64_t v50 = Array.endIndex.getter();
  uint64_t v51 = v349;
  if (v50)
  {
    uint64_t v52 = 0;
    v340 = *(void (**)(uint64_t, uint64_t))(v349 + 24);
    uint64_t v321 = v5 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_logger;
    uint64_t v354 = v5 + 16;
    v328 = (void (**)(char *, uint64_t *, uint64_t))(v333 + 16);
    v327 = (void (**)(char *, char *, uint64_t))(v333 + 32);
    simd_float4 v306 = matrix_identity_float4x4.columns[0];
    simd_float4 v305 = matrix_identity_float4x4.columns[1];
    v300 = &v363;
    simd_float4 v304 = matrix_identity_float4x4.columns[2];
    v324 = (void (**)(uint64_t, uint64_t))(v333 + 8);
    uint64_t v341 = v349 + 24;
    uint64_t v334 = v349 + 16;
    v319 = (void (**)(uint64_t, uint64_t))(v353 + 8);
    long long v313 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v353 + 56);
    uint64_t v312 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v353 + 48);
    uint64_t v301 = (void (**)(char *, uint64_t, uint64_t))(v353 + 32);
    double v53 = 1.57079633;
    __asm { FMOV            V0.4S, #-1.0 }
    float32x4_t v318 = _Q0;
    __asm { FMOV            V0.4S, #-5.0 }
    float32x4_t v317 = _Q0;
    uint64_t v310 = (void *)0x80000001004280B0;
    unint64_t v309 = (void *)0x80000001004280E0;
    os_log_t v308 = (void *)0x8000000100428100;
    unint64_t v299 = (char *)&type metadata for Any + 8;
    uint64_t v353 = v5;
    unsigned int v355 = v36;
    uint64_t v329 = a1;
    uint64_t v348 = v27;
    uint64_t v325 = v43;
    *(double *)&uint64_t v311 = 1.57079633;
    v326 = v34;
    do
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v333 + 16))(v345, a1+ ((*(unsigned __int8 *)(v333 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v333 + 80))+ *(void *)(v333 + 72) * v52, v49);
        _VF = __OFADD__(v52, 1);
        uint64_t v63 = v52 + 1;
        if (_VF) {
          goto LABEL_149;
        }
      }
      else
      {
        *(double *)&uint64_t v288 = COERCE_DOUBLE(_ArrayBuffer._getElementSlowPath(_:)());
        if (v297 != 8) {
          goto LABEL_163;
        }
        double v364 = *(double *)&v288;
        (*v328)(v345, (uint64_t *)&v364, v49);
        swift_unknownObjectRelease();
        _VF = __OFADD__(v52, 1);
        uint64_t v63 = v52 + 1;
        if (_VF) {
          goto LABEL_149;
        }
      }
      uint64_t v344 = v63;
      (*v327)(v27, v345, v49);
      uint64_t v64 = v342;
      uint64_t v65 = v46;
      uint64_t v66 = v340;
      v340(v49, v51);
      sub_1003FEC34((uint64_t *)&v364);
      uint64_t v67 = v366;
      uint64_t v68 = v367;
      sub_10000F3B0(&v364, v366);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v68 + 64))(&v368, v67, v68);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v364);
      sub_10014C574(v64, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1003FEEC4();
      double v70 = v69;
      double v72 = v71;
      uint64_t v73 = (uint64_t)v330;
      uint64_t v51 = v349;
      v66(v49, v349);
      uint64_t v46 = v65;
      sub_1003FEC34((uint64_t *)&v364);
      uint64_t v74 = v366;
      uint64_t v75 = v367;
      sub_10000F3B0(&v364, v366);
      double v76 = (*(double (**)(uint64_t, uint64_t))(v75 + 80))(v74, v75);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v364);
      sub_10014C574(v73, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (v76 != v53)
      {
        uint64_t v77 = (uint64_t)v314;
        uint64_t v78 = v347;
        CGRect v79 = v340;
        v340(v347, v51);
        uint64_t v80 = v342;
        sub_1003FDDDC(v342, v53);
        sub_10014C574(v77, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1003FEC34((uint64_t *)&v364);
        uint64_t v81 = v366;
        uint64_t v82 = v367;
        sub_10000F3B0(&v364, v366);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v82 + 64))(&v369, v81, v82);
        _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v364);
        sub_10014C574(v80, (uint64_t (*)(void))type metadata accessor for CVDetection);
        v371.origin.CGFloat x = sub_1003FD844();
        CGFloat x = v371.origin.x;
        CGFloat y = v371.origin.y;
        CGFloat width = v371.size.width;
        CGFloat height = v371.size.height;
        v352.i64[0] = CGRectGetMidX(v371);
        v372.origin.CGFloat x = x;
        v372.origin.CGFloat y = y;
        v372.size.CGFloat width = width;
        v372.size.CGFloat height = height;
        CGFloat MidY = CGRectGetMidY(v372);
        v79(v78, v349);
        sub_1003FEC34((uint64_t *)&v364);
        uint64_t v88 = v366;
        uint64_t v89 = v367;
        sub_10000F3B0(&v364, v366);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v89 + 64))(&v370, v88, v89);
        _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v364);
        uint64_t v90 = v80;
        uint64_t v51 = v349;
        sub_10014C574(v90, (uint64_t (*)(void))type metadata accessor for CVDetection);
        v373.origin.CGFloat x = sub_1003FD844();
        CGFloat v91 = v373.origin.x;
        CGFloat v92 = v373.origin.y;
        CGFloat v93 = v373.size.width;
        CGFloat v94 = v373.size.height;
        CGFloat MidX = CGRectGetMidX(v373);
        v374.origin.CGFloat x = v91;
        v374.origin.CGFloat y = v92;
        v374.size.CGFloat width = v93;
        v374.size.CGFloat height = v94;
        CGFloat v96 = CGRectGetMidY(v374);
        double v364 = 0.0;
        unint64_t v365 = 0xE000000000000000;
        _StringGuts.grow(_:)(111);
        *(double *)&uint64_t v362 = v364;
        unint64_t v363 = v365;
        v97._uint64_t countAndFlagsBits = 0xD000000000000024;
        v97._object = v310;
        String.append(_:)(v97);
        uint64_t v98 = v322;
        v79(v78, v51);
        sub_10014C684(v98, v323, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v99 = (void *)0xE600000000000000;
        uint64_t v100 = 0x7463656A626FLL;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v99 = (void *)0xE500000000000000;
            uint64_t v100 = 0x6573726170;
            break;
          case 2u:
            uint64_t v99 = (void *)0xE400000000000000;
            uint64_t v100 = 1954047348;
            break;
          case 3u:
            uint64_t v99 = (void *)0xE700000000000000;
            uint64_t v100 = 0x65646F63726162;
            break;
          case 4u:
            uint64_t v99 = (void *)0xE700000000000000;
            uint64_t v100 = 0x70696C43707061;
            break;
          case 5u:
            uint64_t v99 = (void *)0xED00007478655467;
            uint64_t v100 = 0x6E696D6165727473;
            break;
          default:
            break;
        }
        sub_10014C574(v323, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_10014C574(v322, (uint64_t (*)(void))type metadata accessor for CVDetection);
        v101._uint64_t countAndFlagsBits = v100;
        v101._object = v99;
        String.append(_:)(v101);
        swift_bridgeObjectRelease();
        v102._uint64_t countAndFlagsBits = 0x746E6569726F2820;
        v102._object = (void *)0xEF203A6E6F697461;
        String.append(_:)(v102);
        uint64_t v103 = v342;
        v340(v347, v51);
        sub_1003FEC34((uint64_t *)&v364);
        uint64_t v104 = v366;
        uint64_t v105 = v367;
        sub_10000F3B0(&v364, v366);
        double v106 = (*(double (**)(uint64_t, uint64_t))(v105 + 80))(v104, v105);
        _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v364);
        sub_10014C574(v103, (uint64_t (*)(void))type metadata accessor for CVDetection);
        double v364 = v106;
        _print_unlocked<A, B>(_:_:)();
        v107._uint64_t countAndFlagsBits = 0xD000000000000017;
        v107._object = v309;
        String.append(_:)(v107);
        double v364 = 1.57079633;
        _print_unlocked<A, B>(_:_:)();
        v108._uint64_t countAndFlagsBits = 0x65746E6543202E29;
        v108._object = (void *)0xEB00000000203A72;
        String.append(_:)(v108);
        double v364 = MidX;
        unint64_t v365 = *(void *)&v96;
        type metadata accessor for CGPoint(0);
        _print_unlocked<A, B>(_:_:)();
        v109._uint64_t countAndFlagsBits = 0xD000000000000010;
        v109._object = v308;
        String.append(_:)(v109);
        double v364 = *(double *)v352.i64;
        unint64_t v365 = *(void *)&MidY;
        _print_unlocked<A, B>(_:_:)();
        uint64_t v110 = v362;
        unint64_t v111 = v363;
        uint64_t v46 = v355;
        if (qword_100517F58 != -1) {
          swift_once();
        }
        double v53 = *(double *)&v311;
        if (byte_10055E408 == 1)
        {
          swift_bridgeObjectRetain();
          id v112 = Logger.logObject.getter();
          os_log_type_t v113 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v112, v113))
          {
            uint64_t v114 = (uint8_t *)swift_slowAlloc();
            double v364 = COERCE_DOUBLE(swift_slowAlloc());
            *(_DWORD *)uint64_t v114 = 136315138;
            swift_bridgeObjectRetain();
            *(double *)&uint64_t v362 = COERCE_DOUBLE(sub_1003806B0(v110, v111, (uint64_t *)&v364));
            uint64_t v5 = v353;
            uint64_t v46 = v355;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v112, v113, "%s", v114, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          uint64_t v51 = v349;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      id v115 = [v346 raycastQueryFromPoint:2 allowingTarget:2 alignment:v70 v72];
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      uint64_t v117 = v326;
      id v343 = v115;
      if (Strong)
      {
        uint64_t v118 = Strong;
        id v119 = [Strong raycast:v115];

        sub_10000F734(0, &qword_100521068);
        unint64_t v120 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v120 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v121 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v121 = *(void *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v122 = v332;
        if (v121)
        {
          if ((v120 & 0xC000000000000001) != 0)
          {
            id v123 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_155;
            }
            id v123 = *(id *)(v120 + 32);
          }
          uint64_t v124 = v123;
          swift_bridgeObjectRelease();
          [v124 worldTransform];
          float32x4_t v339 = v125;
          float32x4_t v350 = v126;
          float32x4_t v351 = v127;
          float32x4_t v352 = v128;

          __int32 v129 = 1;
          goto LABEL_36;
        }
        swift_bridgeObjectRelease();
      }
      long long v130 = v346;
      id v131 = [v346 camera];
      [v131 imageResolution];

      id v132 = [v130 camera];
      [v132 imageResolution];

      id v133 = [v130 camera];
      [v133 transform];
      float32x4_t v352 = v134;
      float32x4_t v350 = v135;
      float32x4_t v338 = v136;
      float32x4_t v339 = v137;

      float32x4_t v138 = vmulq_f32(v352, (float32x4_t)0);
      float32x4_t v352 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v352, (float32x4_t)0, v350), (float32x4_t)0, v338), (float32x4_t)0, v339);
      float32x4_t v139 = vmlaq_f32(v138, (float32x4_t)0, v350);
      float32x4_t v351 = vmlaq_f32(vaddq_f32(v338, v139), (float32x4_t)0, v339);
      float32x4_t v350 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v138, v318, v350), (float32x4_t)0, v338), (float32x4_t)0, v339);
      float32x4_t v339 = vaddq_f32(v339, vmlaq_f32(v139, v317, v338));
      id v140 = [v130 camera];
      uint64_t v141 = ARCamera.unprojectPoint(_:ontoPlane:orientation:viewportSize:)();
      unsigned int v143 = v142;
      char v145 = v144;

      if (v145)
      {
        uint64_t v178 = Logger.logObject.getter();
        os_log_type_t v179 = static os_log_type_t.error.getter();
        BOOL v180 = os_log_type_enabled(v178, v179);
        uint64_t v51 = v349;
        if (v180)
        {
          uint64_t v181 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v181 = 0;
          _os_log_impl((void *)&_mh_execute_header, v178, v179, "Could not get anchor point for center; we arent cleaning this up gracefully, but we should be!",
            v181,
            2u);
          swift_slowDealloc();
        }

        id v27 = v348;
        uint64_t v49 = v347;
        (*v324)((uint64_t)v348, v347);
        a1 = v329;
        goto LABEL_7;
      }
      __int32 v129 = 0;
      v146.i64[1] = __PAIR64__(1.0, v143);
      v146.i64[0] = v141;
      float32x4_t v352 = v146;
      float32x4_t v351 = (float32x4_t)v304;
      float32x4_t v350 = (float32x4_t)v305;
      float32x4_t v339 = (float32x4_t)v306;
      uint64_t v51 = v349;
      uint64_t v122 = v332;
LABEL_36:
      uint64_t v147 = (uint64_t)v320;
      v331 = *(void (**)(uint64_t, uint64_t))(v51 + 16);
      v331(v347, v51);
      if (v337[2] && (unint64_t v148 = sub_10032ADC4(v147), (v149 & 1) != 0))
      {
        unint64_t v150 = *v319;
        id v151 = *(id *)(v337[7] + 8 * v148);
        uint64_t v152 = v147;
        id v153 = v151;
        v150(v152, v122);
        id v154 = [v153 name];
        if (v154)
        {
          uint64_t v155 = v154;
          uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v158 = v157;

          uint64_t v159 = sub_100148C88(v156, v158);
          if ((v160 & 0x100) != 0)
          {
          }
          else
          {
            float v161 = 1.0;
            if (v129) {
              float v161 = 2.0;
            }
            a1 = v329;
            id v27 = v348;
            if (v161 < 2.0 && (v160 & 1) != 0 && v159)
            {
              uint64_t v49 = v347;
              (*v324)((uint64_t)v348, v347);

              goto LABEL_7;
            }
            v338.i32[0] = v129;
            uint64_t v239 = v46;
            uint64_t v240 = v359;
            uint64_t v241 = *(void **)(v5 + v359);
            void *v117 = v241;
            uint64_t v242 = v356;
            v361(v117, v239, v356);
            id v243 = v241;
            LOBYTE(v241) = _dispatchPreconditionTest(_:)();
            v360(v117, v242);
            if ((v241 & 1) == 0) {
              goto LABEL_160;
            }
            double v364 = *(double *)(v5 + 24);
            swift_bridgeObjectRetain();
            uint64_t v244 = v303;
            sub_1003F3980((uint64_t)v153, v303);
            sub_10000FBD8(v244, (uint64_t *)&unk_100524ED0);
            uint64_t v245 = *(void *)&v364;
            unint64_t v246 = *(void **)(v5 + v240);
            void *v117 = v246;
            v361(v117, v355, v242);
            id v247 = v246;
            LOBYTE(v246) = _dispatchPreconditionTest(_:)();
            v360(v117, v242);
            if ((v246 & 1) == 0) {
              goto LABEL_161;
            }
            *(void *)(v5 + 24) = v245;
            swift_bridgeObjectRelease();
            uint64_t v248 = *(void **)(v5 + v240);
            void *v117 = v248;
            uint64_t v46 = v355;
            v361(v117, v355, v242);
            uint64_t v249 = v153;
            id v250 = v248;
            char v251 = _dispatchPreconditionTest(_:)();
            v360(v117, v242);
            if ((v251 & 1) == 0) {
              goto LABEL_162;
            }
            uint64_t v252 = *(void *)(v5 + 32);
            swift_bridgeObjectRetain();
            uint64_t v253 = sub_10012B0C0(v249, v252);
            uint64_t v296 = v249;

            swift_bridgeObjectRelease();
            if (!v253)
            {
              v283 = Logger.logObject.getter();
              uint64_t v284 = static os_log_type_t.error.getter();
              BOOL v285 = os_log_type_enabled(v283, (os_log_type_t)v284);
              uint64_t v51 = v349;
              if (v285)
              {
                unint64_t v286 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v286 = 0;
                _os_log_impl((void *)&_mh_execute_header, v283, (os_log_type_t)v284, "This should have never happened. How can we have an anchor with no quad?", v286, 2u);
                id v27 = v348;
                swift_slowDealloc();
                uint64_t v287 = v296;
              }
              else
              {
                uint64_t v287 = v283;
                v283 = v296;
              }

              char v238 = *v324;
              goto LABEL_93;
            }
            v295[1] = v253;
            unint64_t v254 = sub_10013A034();
            unint64_t v255 = v254;
            uint64_t v51 = v349;
            if (v254 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v256 = _CocoaArrayWrapper.endIndex.getter();
            }
            else
            {
              uint64_t v256 = *(void *)((v254 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
            }
            LOBYTE(v129) = v338.i8[0];
            if (v256)
            {
              id v336 = (id)(v255 & 0xC000000000000001);
              uint64_t v257 = 4;
              id v335 = (id)v255;
              uint64_t v307 = v256;
              while (1)
              {
                id v258 = v336
                     ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                     : *(id *)(v255 + 8 * v257);
                uint64_t v259 = v258;
                if (__OFADD__(v257 - 4, 1)) {
                  goto LABEL_152;
                }
                uint64_t v260 = v353;
                uint64_t v261 = *(void **)(v353 + v359);
                void *v117 = v261;
                uint64_t v262 = v356;
                v361(v117, v46, v356);
                id v263 = v261;
                LOBYTE(v261) = _dispatchPreconditionTest(_:)();
                v360(v117, v262);
                if ((v261 & 1) == 0) {
                  goto LABEL_153;
                }
                uint64_t v264 = *(uint64_t *)(v260 + 32);
                if ((v264 & 0xC000000000000001) != 0)
                {
                  if (v264 < 0) {
                    uint64_t v265 = *(void *)(v260 + 32);
                  }
                  else {
                    uint64_t v265 = v264 & 0xFFFFFFFFFFFFFF8;
                  }
                  swift_bridgeObjectRetain_n();
                  id v266 = v259;
                  uint64_t v267 = __CocoaDictionary.lookup(_:)();

                  if (v267)
                  {
                    swift_unknownObjectRelease();
                    uint64_t v268 = __CocoaDictionary.count.getter();
                    Swift::Int v269 = sub_100145EB4(v265, v268);
                    swift_retain();
                    unint64_t v270 = sub_10032AE98((uint64_t)v266);
                    char v272 = v271;
                    swift_release();
                    if ((v272 & 1) == 0) {
                      goto LABEL_156;
                    }

                    sub_1003F3F64(v270, v269);
                    swift_bridgeObjectRelease();
                    uint64_t v264 = v269;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                }
                else
                {
                  swift_bridgeObjectRetain_n();
                  unint64_t v273 = sub_10032AE98((uint64_t)v259);
                  char v275 = v274;
                  swift_bridgeObjectRelease();
                  if (v275)
                  {
                    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    double v364 = *(double *)&v264;
                    if (!isUniquelyReferenced_nonNull_native)
                    {
                      sub_1001F58AC();
                      *(double *)&uint64_t v264 = v364;
                    }

                    sub_1003F3F64(v273, v264);
                    swift_bridgeObjectRelease();
                  }
                }
                uint64_t v277 = v353;
                uint64_t v278 = *(void **)(v353 + v359);
                void *v117 = v278;
                uint64_t v279 = v356;
                v361(v117, v46, v356);
                id v280 = v278;
                LOBYTE(v278) = _dispatchPreconditionTest(_:)();
                v360(v117, v279);
                if ((v278 & 1) == 0) {
                  goto LABEL_154;
                }
                *(double *)(v277 + 32) = *(double *)&v264;
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t v281 = (void *)swift_unknownObjectWeakLoadStrong();
                if (v281)
                {
                  v282 = v281;
                  [v281 removeAnchor:v259];
                }
                else
                {
                }
                uint64_t v5 = v353;
                uint64_t v51 = v349;
                LOBYTE(v129) = v338.i8[0];
                unint64_t v255 = (unint64_t)v335;
                if (v257 - 3 == v307) {
                  break;
                }
                ++v257;
              }
            }
            swift_release();
            swift_bridgeObjectRelease_n();
          }
          uint64_t v122 = v332;
        }
        else
        {
        }
      }
      else
      {
        (*v319)(v147, v122);
      }
      if ((v129 & 1) == 0)
      {
        double v364 = 0.0;
        unint64_t v365 = 0xE000000000000000;
        v162._uint64_t countAndFlagsBits = 0x5064656D75737361;
        v162._object = (void *)0xED000020656E616CLL;
        String.append(_:)(v162);
        Double.write<A>(to:)();
      }
      id v163 = objc_allocWithZone((Class)ARAnchor);
      NSString v164 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v165 = [v163 initWithName:v164 transform:*(double *)v339.i64, *(double *)v350.i64, *(double *)v351.i64, *(double *)v352.i64];

      uint64_t v166 = v347;
      uint64_t v167 = (void *)sub_10013F0C8((uint64_t)v348, v165, v346, v347, v51);
      v338.i64[0] = v170;
      if (!v167)
      {
        id v182 = Logger.logObject.getter();
        os_log_type_t v183 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v182, v183))
        {
          uint64_t v184 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v184 = 0;
          _os_log_impl((void *)&_mh_execute_header, v182, v183, "Could not get anchor points for corners", v184, 2u);
          swift_slowDealloc();
          long long v185 = v165;
        }
        else
        {
          long long v185 = v182;
          id v182 = v165;
        }
        a1 = v329;

        char v238 = *v324;
        id v27 = v348;
LABEL_93:
        uint64_t v49 = v347;
        v238((uint64_t)v27, v347);
        goto LABEL_7;
      }
      v339.i64[0] = v169;
      id v335 = v168;
      id v336 = v167;
      v352.i64[0] = (uint64_t)v165;
      uint64_t v171 = (uint64_t)v316;
      v331(v166, v51);
      (*v313)(v171, 0, 1, v122);
      id v172 = *(void **)(v5 + v359);
      void *v117 = v172;
      uint64_t v173 = v356;
      v361(v117, v46, v356);
      id v174 = v172;
      LOBYTE(v172) = _dispatchPreconditionTest(_:)();
      v360(v117, v173);
      if ((v172 & 1) == 0) {
        goto LABEL_150;
      }
      double v364 = *(double *)(v5 + 24);
      if ((*v312)(v171, 1, v122) == 1)
      {
        swift_bridgeObjectRetain();
        sub_10000FBD8(v171, (uint64_t *)&unk_100524ED0);
        uint64_t v175 = v303;
        uint64_t v176 = (void *)v352.i64[0];
        sub_1003F3980(v352.i64[0], v303);

        sub_10000FBD8(v175, (uint64_t *)&unk_100524ED0);
        uint64_t v177 = *(void *)&v364;
      }
      else
      {
        uint64_t v186 = v302;
        (*v301)(v302, v171, v122);
        swift_bridgeObjectRetain();
        uint64_t v187 = *(void *)&v364;
        char v188 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v362 = v187;
        uint64_t v189 = (uint64_t)v186;
        uint64_t v173 = v356;
        uint64_t v176 = (void *)v352.i64[0];
        sub_1002F5040(v189, (void *)v352.i64[0], v188);
        uint64_t v177 = v362;
        double v364 = *(double *)&v362;

        swift_bridgeObjectRelease();
      }
      uint64_t v190 = v338.i64[0];
      uint64_t v191 = *(void **)(v5 + v359);
      void *v117 = v191;
      v361(v117, v46, v173);
      id v192 = v191;
      LOBYTE(v191) = _dispatchPreconditionTest(_:)();
      v360(v117, v173);
      id v193 = v336;
      if ((v191 & 1) == 0) {
        goto LABEL_151;
      }
      *(void *)(v5 + 24) = v177;
      swift_bridgeObjectRelease();
      type metadata accessor for ARCameraSource.ARQuadAnchor();
      uint64_t v194 = (void *)swift_allocObject();
      v194[2] = v176;
      v194[3] = v193;
      id v195 = v335;
      v194[4] = v190;
      uint64_t v196 = (void *)v190;
      uint64_t v197 = (void *)v339.i64[0];
      v194[5] = v339.i64[0];
      v194[6] = v195;
      unint64_t v198 = sub_10013A034();
      v351.i64[0] = v198;
      if (v198 >> 62)
      {
        swift_bridgeObjectRetain_n();
        id v289 = v176;
        id v290 = v193;
        id v291 = v196;
        id v292 = v195;
        id v293 = v197;
        uint64_t v199 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v199)
        {
LABEL_62:
          uint64_t v205 = v351.i64[0];
          v350.i64[0] = v351.i64[0] & 0xC000000000000001;
          uint64_t v206 = 4;
          uint64_t v207 = v199;
          while (1)
          {
            id v208 = v350.i64[0]
                 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                 : *(id *)(v205 + 8 * v206);
            uint64_t v209 = v208;
            if (__OFADD__(v206 - 4, 1)) {
              break;
            }
            unint64_t v210 = *(void **)(v5 + v359);
            void *v117 = v210;
            uint64_t v211 = v46;
            uint64_t v212 = v356;
            v361(v117, v211, v356);
            id v213 = v209;
            swift_retain();
            id v214 = v210;
            LOBYTE(v210) = _dispatchPreconditionTest(_:)();
            v360(v117, v212);
            if ((v210 & 1) == 0) {
              goto LABEL_144;
            }
            Swift::Int v215 = *(Swift::Int *)(v5 + 32);
            if ((v215 & 0xC000000000000001) != 0)
            {
              if (v215 < 0) {
                uint64_t v216 = *(void *)(v5 + 32);
              }
              else {
                uint64_t v216 = v215 & 0xFFFFFFFFFFFFFF8;
              }
              swift_bridgeObjectRetain();
              uint64_t v217 = __CocoaDictionary.count.getter();
              if (__OFADD__(v217, 1)) {
                goto LABEL_147;
              }
              *(double *)&Swift::Int v215 = COERCE_DOUBLE(sub_100145EB4(v216, v217 + 1));
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            char v218 = swift_isUniquelyReferenced_nonNull_native();
            double v364 = *(double *)&v215;
            unint64_t v220 = sub_10032AE98((uint64_t)v213);
            uint64_t v221 = *(void *)(v215 + 16);
            BOOL v222 = (v219 & 1) == 0;
            uint64_t v223 = v221 + v222;
            if (__OFADD__(v221, v222)) {
              goto LABEL_145;
            }
            char v224 = v219;
            if (*(void *)(v215 + 24) >= v223)
            {
              if ((v218 & 1) == 0) {
                sub_1001F58AC();
              }
            }
            else
            {
              sub_1001ECF24(v223, v218);
              unint64_t v225 = sub_10032AE98((uint64_t)v213);
              if ((v224 & 1) != (v226 & 1)) {
                goto LABEL_164;
              }
              unint64_t v220 = v225;
            }
            double v227 = v364;
            if (v224)
            {
              uint64_t v228 = *(void *)(*(void *)&v364 + 56);
              swift_release();
              *(void *)(v228 + 8 * v220) = v194;
            }
            else
            {
              *(void *)(*(void *)&v364 + 8 * (v220 >> 6) + 64) |= 1 << v220;
              uint64_t v229 = 8 * v220;
              *(void *)(*(void *)(*(void *)&v227 + 48) + v229) = v213;
              *(void *)(*(void *)(*(void *)&v227 + 56) + v229) = v194;
              uint64_t v230 = *(void *)(*(void *)&v227 + 16);
              _VF = __OFADD__(v230, 1);
              uint64_t v231 = v230 + 1;
              if (_VF) {
                goto LABEL_148;
              }
              *(void *)(*(void *)&v227 + 16) = v231;
              id v232 = v213;
            }

            swift_bridgeObjectRelease();
            uint64_t v5 = v353;
            uint64_t v233 = *(void **)(v353 + v359);
            void *v117 = v233;
            uint64_t v234 = v356;
            v361(v117, v355, v356);
            id v235 = v233;
            LOBYTE(v233) = _dispatchPreconditionTest(_:)();
            v360(v117, v234);
            if ((v233 & 1) == 0) {
              goto LABEL_146;
            }
            *(double *)(v5 + 32) = v227;
            swift_bridgeObjectRelease();
            unint64_t v236 = (void *)swift_unknownObjectWeakLoadStrong();
            if (v236)
            {
              unint64_t v237 = v236;
              [v236 addAnchor:v213];
            }
            else
            {
            }
            uint64_t v46 = v355;
            uint64_t v176 = (void *)v352.i64[0];
            if (v206 - 3 == v207) {
              goto LABEL_6;
            }
            ++v206;
            uint64_t v205 = v351.i64[0];
          }
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
      }
      else
      {
        uint64_t v199 = *(void *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v200 = v176;
        swift_bridgeObjectRetain();
        id v201 = v193;
        id v202 = v196;
        id v203 = v195;
        id v204 = (id)v339.i64[0];
        if (v199) {
          goto LABEL_62;
        }
      }
LABEL_6:

      swift_bridgeObjectRelease_n();
      uint64_t v60 = (uint64_t)v348;
      uint64_t v49 = v347;
      (*v324)((uint64_t)v348, v347);
      id v27 = (char *)v60;
      swift_release();
      a1 = v329;
      uint64_t v51 = v349;
LABEL_7:
      uint64_t v61 = Array.endIndex.getter();
      uint64_t v52 = v344;
    }
    while (v344 != v61);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013F0C8(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for CVDetection();
  double v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a2 name];
  if (!v15) {
    return 0;
  }
  uint64_t v16 = v15;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v35[1] = a1;

  v35[0] = a4;
  id v17 = [a3 camera];
  v35[2] = v5;
  [v17 imageResolution];

  id v18 = [a3 camera];
  [v18 imageResolution];

  (*(void (**)(void, uint64_t))(a5 + 24))(v35[0], a5);
  sub_1003FEC34(v38);
  uint64_t v19 = v39;
  uint64_t v20 = v40;
  sub_10000F3B0(v38, v39);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v20 + 64))(v41, v19, v20);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v38);
  sub_10014C574((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_10000F214(&qword_100521060);
  uint64_t inited = (_OWORD *)swift_initStackObject();
  long long v22 = v41[0];
  long long v23 = v41[1];
  inited[1] = xmmword_10043F3F0;
  inited[2] = v22;
  long long v25 = v41[2];
  long long v24 = v41[3];
  inited[3] = v23;
  inited[4] = v24;
  inited[5] = v25;
  unint64_t v37 = (unint64_t)_swiftEmptyArrayStorage;
  for (uint64_t i = 2; i != 6; ++i)
  {
    *(_OWORD *)id v38 = inited[i];
    sub_10013F4A4(a2, a3, &v36);
    if (v36)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  unint64_t v27 = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 0xC000000000000001) != 0)
  {
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_14;
  }
  unint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v28)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v28 == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v28 < 3)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v28 != 3)
  {
    uint64_t v29 = *(void **)(v27 + 40);
    uint64_t v30 = *(void **)(v27 + 48);
    uint64_t v31 = *(void **)(v27 + 56);
    id v32 = *(id *)(v27 + 32);
    v29;
    v30;
    id v33 = v31;
LABEL_14:
    swift_bridgeObjectRelease();
    return (uint64_t)v32;
  }
LABEL_21:
  __break(1u);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void sub_10013F4A4(id a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  [a1 transform];
  float32x4_t v45 = v5;
  id v6 = [a2 camera];
  [v6 transform];
  float32x4_t v43 = v7;

  float32x4_t v46 = vsubq_f32(v45, v43);
  id v8 = [a2 camera];
  [v8 transform];
  int8x16_t v42 = v10;
  int8x16_t v44 = v9;
  __n128 v41 = v11;

  *(double *)v12.i64 = sub_10014AB04(v44, v42, v41);
  float32x4_t v13 = vmulq_f32(v12, (float32x4_t)xmmword_100446C80);
  int32x4_t v14 = (int32x4_t)vnegq_f32(v13);
  int8x16_t v15 = (int8x16_t)vtrn2q_s32((int32x4_t)v13, vtrn1q_s32((int32x4_t)v13, v14));
  float32x4_t v16 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v14, 8uLL), (float32x4_t)0);
  float32x4_t v17 = (float32x4_t)vrev64q_s32((int32x4_t)v13);
  v17.i32[0] = v14.i32[1];
  v17.i32[3] = v14.i32[2];
  float32x4_t v18 = vaddq_f32(v17, vmlaq_f32(v16, (float32x4_t)0, (float32x4_t)vextq_s8(v15, v15, 8uLL)));
  int32x4_t v19 = (int32x4_t)vnegq_f32(v18);
  int8x16_t v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, v19));
  float32x4_t v21 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL), *(float32x2_t *)v12.f32, 1), (float32x4_t)vextq_s8(v20, v20, 8uLL), v12.f32[0]);
  float32x4_t v22 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
  v22.i32[0] = v19.i32[1];
  v22.i32[3] = v19.i32[2];
  float32x4_t v23 = vmulq_f32(v46, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v18, v12, 3), v22, v12, 2), v21));
  if ((float)(v23.f32[2] + vaddv_f32(*(float32x2_t *)v23.f32)) > 0.0)
  {
    long long v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      unint64_t v27 = "Dot product should not be negative, center anchor must be in front of camera.";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
      swift_slowDealloc();
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  id v28 = [a2 camera];
  [v28 transform];

  __asm { FMOV            V1.4S, #-1.0 }
  id v34 = [a2 camera];
  uint64_t v35 = ARCamera.unprojectPoint(_:ontoPlane:orientation:viewportSize:)();
  char v37 = v36;

  if (v37)
  {
    long long v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      unint64_t v27 = "Could not get corner anchor point.";
      goto LABEL_8;
    }
LABEL_9:

    id v40 = 0;
    goto LABEL_10;
  }
  double v47 = *(double *)&v35;
  id v38 = objc_allocWithZone((Class)ARAnchor);
  swift_bridgeObjectRetain();
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v40 = [v38 initWithName:v39 transform:*(double *)matrix_identity_float4x4.columns[0].i64, *(double *)matrix_identity_float4x4.columns[1].i64, *(double *)matrix_identity_float4x4.columns[2].i64, v47];

LABEL_10:
  *a3 = v40;
}

uint64_t sub_10013F878(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  int8x16_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int8x16_t v10 = *(void **)(v2 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_10014AAFC;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004ECB20;
  float32x4_t v13 = _Block_copy(aBlock);
  id v14 = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  int32x4_t v19 = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_10013FB74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v3 - 8);
  uint64_t v91 = (uint64_t)v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    unint64_t v100 = a2;
    uint64_t v11 = OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue;
    uint64_t v12 = *(void **)(result + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
    *uint64_t v8 = v12;
    uint64_t v13 = enum case for DispatchPredicate.onQueue(_:);
    unint64_t v14 = v6 + 104;
    int8x16_t v15 = *(void (**)(void *, uint64_t, void *))(v6 + 104);
    v15(v8, enum case for DispatchPredicate.onQueue(_:), v5);
    id v16 = v12;
    LOBYTE(v12) = _dispatchPreconditionTest(_:)();
    int32x4_t v19 = *(void **)(v6 + 8);
    unint64_t v18 = v6 + 8;
    uint64_t v17 = v19;
    ((void (*)(void *, void *))v19)(v8, v5);
    if ((v12 & 1) == 0) {
      goto LABEL_65;
    }
    uint64_t v85 = *(void *)(v10 + 24);
    int8x16_t v20 = *(void **)(v10 + v11);
    *uint64_t v8 = v20;
    unsigned int v101 = v13;
    uint64_t v105 = v15;
    v15(v8, v13, v5);
    uint64_t v21 = v85;
    swift_bridgeObjectRetain();
    id v22 = v20;
    LOBYTE(v20) = _dispatchPreconditionTest(_:)();
    uint64_t v104 = v17;
    ((void (*)(void *, void *))v17)(v8, v5);
    if ((v20 & 1) == 0) {
      goto LABEL_66;
    }
    unint64_t v102 = v14;
    uint64_t v23 = *(void *)(v10 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v84[1] = v23;
    long long v24 = sub_100147E44(v21, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v14 = (unint64_t)sub_100146B64(v100, (uint64_t)v24);
    swift_bridgeObjectRelease_n();
    if (v14 >> 62) {
      goto LABEL_67;
    }
    uint64_t v25 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      uint64_t v26 = v101;
      if (!v25)
      {
LABEL_54:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      unint64_t v27 = 0;
      uint64_t v97 = v10 + 16;
      unint64_t v94 = v14 & 0xC000000000000001;
      uint64_t v89 = v14 & 0xFFFFFFFFFFFFFF8;
      unint64_t v88 = v14 + 32;
      long long v87 = xmmword_100446C70;
      uint64_t v90 = (char *)&type metadata for Swift.AnyObject + 8;
      unint64_t v100 = v18;
      uint64_t v93 = v25;
      uint64_t v103 = v5;
      unint64_t v86 = v14;
      while (1)
      {
        if (v94)
        {
          id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v27 >= *(void *)(v89 + 16)) {
            goto LABEL_62;
          }
          id v29 = *(id *)(v88 + 8 * v27);
        }
        uint64_t v30 = v29;
        BOOL v31 = __OFADD__(v27, 1);
        unint64_t v32 = v27 + 1;
        if (v31) {
          goto LABEL_60;
        }
        unint64_t v95 = v32;
        id v33 = *(void **)(v10 + v11);
        *uint64_t v8 = v33;
        v105(v8, v26, v5);
        id v96 = v30;
        id v34 = v33;
        char v35 = _dispatchPreconditionTest(_:)();
        ((void (*)(void *, void *))v104)(v8, v5);
        if ((v35 & 1) == 0)
        {
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        uint64_t v36 = *(void *)(v10 + 32);
        if ((v36 & 0xC000000000000001) != 0)
        {
          unint64_t v37 = v14;
          uint64_t v38 = v26;
          id v39 = v96;
          swift_bridgeObjectRetain();
          uint64_t v40 = __CocoaDictionary.lookup(_:)();

          if (v40)
          {
            uint64_t v106 = v40;
            type metadata accessor for ARCameraSource.ARQuadAnchor();
            swift_unknownObjectRetain();
            unint64_t v18 = v100;
            swift_dynamicCast();
            __n128 v41 = (void *)v107;
            swift_unknownObjectRelease();

            swift_bridgeObjectRelease();
            id v28 = v96;
            unint64_t v14 = v37;
            if (v41) {
              goto LABEL_24;
            }
          }
          else
          {

            swift_bridgeObjectRelease();
            id v28 = v96;
            unint64_t v14 = v37;
          }
          goto LABEL_9;
        }
        id v28 = v96;
        uint64_t v38 = v26;
        if (!*(void *)(v36 + 16))
        {

          goto LABEL_9;
        }
        swift_bridgeObjectRetain();
        unint64_t v42 = sub_10032AE98((uint64_t)v28);
        if (v43) {
          break;
        }

        swift_bridgeObjectRelease();
LABEL_9:

        uint64_t v26 = v38;
        uint64_t v5 = v103;
LABEL_10:
        unint64_t v27 = v95;
        if (v95 == v93) {
          goto LABEL_54;
        }
      }
      __n128 v41 = *(void **)(*(void *)(v36 + 56) + 8 * v42);
      swift_retain();

      swift_bridgeObjectRelease();
      if (!v41) {
        goto LABEL_9;
      }
LABEL_24:
      CGFloat v92 = v41;
      int8x16_t v44 = *(void **)(v10 + v11);
      *uint64_t v8 = v44;
      unint64_t v14 = (unint64_t)v103;
      float32x4_t v45 = (void (*)(void *, void, unint64_t))v105;
      v105(v8, v38, v103);
      id v46 = v44;
      LOBYTE(v44) = _dispatchPreconditionTest(_:)();
      uint64_t v5 = v104;
      ((void (*)(void *, unint64_t))v104)(v8, v14);
      if ((v44 & 1) == 0) {
        goto LABEL_63;
      }
      uint64_t v107 = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      uint64_t v47 = v91;
      sub_1003F3980((uint64_t)v96, v91);
      sub_10000FBD8(v47, (uint64_t *)&unk_100524ED0);
      uint64_t v48 = v107;
      uint64_t v49 = *(void **)(v10 + v11);
      *uint64_t v8 = v49;
      v45(v8, v101, v14);
      id v50 = v49;
      LOBYTE(v49) = _dispatchPreconditionTest(_:)();
      ((void (*)(void *, unint64_t))v5)(v8, v14);
      if (v49)
      {
        *(void *)(v10 + 24) = v48;
        swift_bridgeObjectRelease();
        sub_10000F214(&qword_100521040);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v87;
        uint64_t v52 = v92;
        double v53 = (void *)v92[2];
        *(void *)(inited + 32) = v53;
        double v54 = (void *)v52[3];
        *(void *)(inited + 40) = v54;
        double v55 = (void *)v52[4];
        *(void *)(inited + 48) = v55;
        uint64_t v56 = (void *)v52[6];
        *(void *)(inited + 56) = v56;
        uint64_t v5 = (void *)v11;
        uint64_t v57 = (void *)v52[5];
        *(void *)(inited + 64) = v57;
        uint64_t v107 = inited;
        specialized Array._endMutation()();
        uint64_t v99 = v107;
        unint64_t v98 = v107 & 0xC000000000000001;
        id v58 = v53;
        id v59 = v54;
        id v60 = v55;
        id v61 = v56;
        unint64_t v18 = v100;
        id v62 = v57;
        uint64_t v11 = (uint64_t)v5;
        for (uint64_t i = 4; ; ++i)
        {
          if (v98) {
            id v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v64 = *(id *)(v99 + 8 * i);
          }
          unint64_t v14 = (unint64_t)v64;
          if (__OFADD__(i - 4, 1))
          {
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
            goto LABEL_61;
          }
          uint64_t v65 = *(void **)(v10 + v11);
          *uint64_t v8 = v65;
          uint64_t v66 = v103;
          v105(v8, v101, v103);
          id v67 = v65;
          LOBYTE(v65) = _dispatchPreconditionTest(_:)();
          ((void (*)(void *, void *))v104)(v8, v66);
          if ((v65 & 1) == 0) {
            goto LABEL_57;
          }
          uint64_t v68 = *(void *)(v10 + 32);
          if ((v68 & 0xC000000000000001) != 0)
          {
            if (v68 < 0) {
              uint64_t v69 = *(void *)(v10 + 32);
            }
            else {
              uint64_t v69 = v68 & 0xFFFFFFFFFFFFFF8;
            }
            swift_bridgeObjectRetain_n();
            id v70 = (id)v14;
            uint64_t v11 = __CocoaDictionary.lookup(_:)();

            if (!v11) {
              goto LABEL_43;
            }
            swift_unknownObjectRelease();
            uint64_t v71 = __CocoaDictionary.count.getter();
            Swift::Int v72 = sub_100145EB4(v69, v71);
            swift_retain();
            unint64_t v18 = sub_10032AE98((uint64_t)v70);
            uint64_t v11 = v73;
            swift_release();
            if ((v11 & 1) == 0) {
              goto LABEL_59;
            }

            uint64_t v11 = *(void *)(*(void *)(v72 + 56) + 8 * v18);
            sub_1003F3F64(v18, v72);
            swift_bridgeObjectRelease();
            uint64_t v68 = v72;
          }
          else
          {
            swift_bridgeObjectRetain_n();
            unint64_t v74 = sub_10032AE98(v14);
            char v76 = v75;
            swift_bridgeObjectRelease();
            if (v76)
            {
              int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v107 = v68;
              if (!isUniquelyReferenced_nonNull_native)
              {
                sub_1001F58AC();
                uint64_t v68 = v107;
              }

              uint64_t v11 = *(void *)(*(void *)(v68 + 56) + 8 * v74);
              sub_1003F3F64(v74, v68);
LABEL_43:
              swift_bridgeObjectRelease();
              goto LABEL_45;
            }
            uint64_t v11 = 0;
          }
LABEL_45:
          uint64_t v78 = *(void **)((char *)v5 + v10);
          *uint64_t v8 = v78;
          CGRect v79 = v103;
          v105(v8, v101, v103);
          id v80 = v78;
          LOBYTE(v78) = _dispatchPreconditionTest(_:)();
          uint64_t v81 = v79;
          unint64_t v18 = v100;
          ((void (*)(void *, void *))v104)(v8, v81);
          if ((v78 & 1) == 0) {
            goto LABEL_58;
          }
          *(void *)(v10 + 32) = v68;
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
          if (Strong)
          {
            CGRect v83 = Strong;
            [Strong removeAnchor:v14];
          }
          else
          {
          }
          uint64_t v11 = (uint64_t)v5;
          if (i == 8)
          {

            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v5 = v103;
            uint64_t v26 = v101;
            unint64_t v14 = v86;
            goto LABEL_10;
          }
        }
      }
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100140550(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v100 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v91 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v111 = (char *)&v87 - v12;
  uint64_t v13 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(v13 - 1);
  double v15 = __chkstk_darwin(v13);
  uint64_t v17 = (uint64_t *)((char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v18 = [a1 anchors:v15];
  sub_10000F734(0, (unint64_t *)&qword_100521030);
  unint64_t v115 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v104 = OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue;
  int32x4_t v19 = *(void **)((char *)v4 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
  void *v17 = v19;
  int8x16_t v20 = *(void (**)(void))(v14 + 104);
  unsigned int v103 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v105 = v14 + 104;
  unint64_t v102 = (void (*)(void *, void, void *))v20;
  v20(v17);
  id v21 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  id v22 = *(void (**)(void *, void *))(v14 + 8);
  uint64_t v106 = v17;
  unsigned int v101 = v22;
  uint64_t v107 = v14 + 8;
  v22(v17, v13);
  if ((v19 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v109 = v9;
  uint64_t v23 = v4[7];
  uint64_t v116 = v4[3];
  swift_bridgeObjectRetain();
  id v24 = [a1 camera];
  [v24 imageResolution];
  double v3 = v25;

  id v26 = [a1 camera];
  [v26 imageResolution];
  double v28 = v27;

  if ((unint64_t)(v23 - 1) >= 2) {
    double v2 = v3;
  }
  else {
    double v2 = v28;
  }
  if ((unint64_t)(v23 - 1) >= 2) {
    double v3 = v28;
  }
  if (v3 <= 0.0 || v2 <= 0.0) {
    goto LABEL_57;
  }
  uint64_t v17 = (void *)(v115 >> 62);
  if (v115 >> 62) {
    goto LABEL_54;
  }
LABEL_10:
  uint64_t v29 = v109;
  sub_10014572C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v30 = Dictionary.init(minimumCapacity:)();
  unint64_t v31 = v115;
  if (v17)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v96 = v30;
  if (v32)
  {
    if (v32 < 1) {
      goto LABEL_56;
    }
    id v90 = a1;
    a1 = 0;
    uint64_t v33 = 0;
    unint64_t v114 = v31 & 0xC000000000000001;
    os_log_type_t v113 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56);
    Swift::String v108 = (void (**)(char *, char *, uint64_t))(v100 + 16);
    uint64_t v110 = (uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48);
    uint64_t v99 = (void (**)(char *, char *, uint64_t))(v100 + 32);
    unint64_t v98 = (void (**)(char *, uint64_t))(v100 + 8);
    long long v89 = xmmword_100446C70;
    CGFloat v92 = (char *)&type metadata for Swift.AnyObject + 8;
    uint64_t v97 = v8;
    unint64_t v88 = v13;
    id v112 = (void *)v32;
    do
    {
      if (v114) {
        id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v34 = *(id *)(v31 + 8 * (void)a1 + 32);
      }
      char v35 = v34;
      uint64_t v36 = v116;
      if (*(void *)(v116 + 16))
      {
        id v37 = v34;
        unint64_t v38 = sub_10032AE98((uint64_t)v37);
        if (v39)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v100 + 16))(v8, *(void *)(v36 + 56) + *(void *)(v100 + 72) * v38, v29);
          uint64_t v40 = 0;
        }
        else
        {
          uint64_t v40 = 1;
        }
        (*v113)(v8, v40, 1, v29);

        int v41 = (*v110)(v8, 1, v29);
        unint64_t v31 = v115;
        if (v41 != 1)
        {
          (*v99)(v111, v8, v29);
          unint64_t v42 = *(void **)((char *)v4 + v104);
          char v43 = v106;
          *uint64_t v106 = v42;
          v102(v43, v103, v13);
          id v44 = v37;
          id v45 = v42;
          uint64_t v17 = (void *)_dispatchPreconditionTest(_:)();
          v101(v43, v13);
          if ((v17 & 1) == 0)
          {
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            swift_bridgeObjectRetain();
            _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_10;
          }
          uint64_t v46 = v4[4];
          if ((v46 & 0xC000000000000001) != 0)
          {
            id v47 = v44;
            swift_bridgeObjectRetain();
            uint64_t v48 = __CocoaDictionary.lookup(_:)();

            if (v48)
            {
              uint64_t v117 = v48;
              type metadata accessor for ARCameraSource.ARQuadAnchor();
              swift_unknownObjectRetain();
              swift_dynamicCast();
              uint64_t v49 = v118;
              swift_unknownObjectRelease();

              swift_bridgeObjectRelease();
              uint64_t v8 = v97;
              uint64_t v29 = v109;
              if (!v49)
              {
LABEL_44:

                (*v98)(v111, v29);
LABEL_45:
                unint64_t v31 = v115;
                goto LABEL_18;
              }
LABEL_35:
              sub_10000F214(&qword_100521040);
              uint64_t v52 = swift_allocObject();
              *(_OWORD *)(v52 + 16) = v89;
              double v53 = (void *)v49[2];
              *(void *)(v52 + 32) = v53;
              uint64_t v13 = (void *)v49[3];
              *(void *)(v52 + 40) = v13;
              double v54 = v4;
              double v55 = (void *)v49[4];
              *(void *)(v52 + 48) = v55;
              uint64_t v56 = (void *)v49[6];
              *(void *)(v52 + 56) = v56;
              unint64_t v94 = v49;
              uint64_t v57 = (void *)v49[5];
              *(void *)(v52 + 64) = v57;
              uint64_t v118 = (void *)v52;
              specialized Array._endMutation()();
              *(void *)&long long v95 = v33;
              id v58 = (char *)v118;
              uint64_t v17 = v90;
              swift_retain();
              id v59 = v53;
              id v60 = v13;
              id v61 = v55;
              uint64_t v4 = v54;
              id v62 = v56;
              id v63 = v57;
              uint64_t v8 = v58;
              unint64_t v64 = (unint64_t)v58;
              uint64_t v33 = v95;
              uint64_t v65 = sub_100146CB8(v64, v17, (uint64_t)v4, v2, v3);
              swift_bridgeObjectRelease();

              swift_release();
              unint64_t v66 = v65[2];
              if (!v66) {
                goto LABEL_49;
              }
              if (v66 == 1) {
                goto LABEL_50;
              }
              if (v66 < 3) {
                goto LABEL_51;
              }
              if (v66 < 5) {
                goto LABEL_52;
              }
              uint64_t v67 = v65[4];
              uint64_t v68 = v65[5];
              uint64_t v69 = v65[6];
              uint64_t v70 = v65[7];
              long long v95 = *((_OWORD *)v65 + 4);
              long long v93 = *((_OWORD *)v65 + 6);
              uint64_t v71 = v65[10];
              uint64_t v72 = v65[11];
              swift_bridgeObjectRelease();
              [v17 timestamp];
              v119[0] = v67;
              v119[1] = v68;
              v119[2] = v69;
              v119[3] = v70;
              long long v120 = v95;
              long long v121 = v93;
              uint64_t v122 = v71;
              uint64_t v123 = v72;
              uint64_t v124 = v73;
              uint64_t v74 = (uint64_t)v91;
              char v75 = v111;
              uint64_t v29 = v109;
              (*v108)(v91, v111, v109);
              char v76 = (void *)v96;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v118 = v76;
              sub_1002F51B0((uint64_t)v119, v74, isUniquelyReferenced_nonNull_native);
              uint64_t v96 = (uint64_t)v118;
              swift_bridgeObjectRelease();
              uint64_t v78 = *v98;
              (*v98)((char *)v74, v29);

              swift_release();
              v78(v75, v29);
              uint64_t v13 = v88;
              uint64_t v8 = v97;
              goto LABEL_45;
            }

            swift_bridgeObjectRelease();
            uint64_t v8 = v97;
          }
          else
          {
            if (*(void *)(v46 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v50 = sub_10032AE98((uint64_t)v44);
              uint64_t v29 = v109;
              if ((v51 & 1) == 0)
              {

                swift_bridgeObjectRelease();
                goto LABEL_44;
              }
              uint64_t v49 = *(void **)(*(void *)(v46 + 56) + 8 * v50);
              swift_retain();

              swift_bridgeObjectRelease();
              if (!v49) {
                goto LABEL_44;
              }
              goto LABEL_35;
            }
          }
          uint64_t v29 = v109;
          goto LABEL_44;
        }
      }
      else
      {
        (*v113)(v8, 1, 1, v29);
      }

      sub_10000FBD8((uint64_t)v8, (uint64_t *)&unk_100524ED0);
LABEL_18:
      a1 = (char *)a1 + 1;
    }
    while (v112 != a1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4[5] = v96;
  swift_bridgeObjectRelease();
  CGRect v79 = *(void **)((char *)v4 + v104);
  id v80 = v106;
  *uint64_t v106 = v79;
  v102(v80, v103, v13);
  id v81 = v79;
  LOBYTE(v79) = _dispatchPreconditionTest(_:)();
  v101(v80, v13);
  if (v79)
  {
    swift_beginAccess();
    swift_retain();
    uint64_t v82 = swift_bridgeObjectRetain();
    sub_100147ADC(v82, (uint64_t)v4);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  CGRect v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v84, v85))
  {
    unint64_t v86 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v86 = 0;
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "ViewportSize not positive!", v86, 2u);
    swift_slowDealloc();
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001411A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[46] = a4;
  v5[47] = v4;
  v5[44] = a2;
  v5[45] = a3;
  v5[43] = a1;
  type metadata accessor for CVDetection();
  v5[48] = swift_task_alloc();
  v5[49] = *(void *)(a3 - 8);
  v5[50] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v5[51] = v7;
  v5[52] = *(void *)(v7 - 8);
  v5[53] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v5[54] = v8;
  v5[55] = *(void *)(v8 - 8);
  v5[56] = swift_task_alloc();
  return _swift_task_switch(sub_100141348, 0, 0);
}

uint64_t sub_100141348()
{
  uint64_t v56 = v0;
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 360);
  id v3 = *(id *)(*(void *)(v0 + 376) + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
  sub_10000F214(&qword_100521008);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_100147E44(v5, v4);
  swift_bridgeObjectRelease_n();
  (*(void (**)(uint64_t, uint64_t))(v1 + 16))(v2, v1);
  if (!v6[2] || (unint64_t v7 = sub_10032ADC4(*(void *)(v0 + 448)), (v8 & 1) == 0))
  {
    uint64_t v27 = *(void *)(v0 + 440);
    uint64_t v26 = *(void *)(v0 + 448);
    uint64_t v28 = *(void *)(v0 + 432);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
LABEL_11:
    (*(void (**)(void, void, void))(*(void *)(v0 + 392) + 16))(*(void *)(v0 + 400), *(void *)(v0 + 344), *(void *)(v0 + 360));
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v33 = *(void *)(v0 + 392);
    uint64_t v32 = *(void *)(v0 + 400);
    if (v31)
    {
      uint64_t v34 = *(void *)(v0 + 384);
      uint64_t v36 = *(void *)(v0 + 360);
      uint64_t v35 = *(void *)(v0 + 368);
      os_log_type_t type = v30;
      id v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)id v37 = 136315138;
      uint64_t v55 = v52;
      (*(void (**)(uint64_t, uint64_t))(v35 + 32))(v36, v35);
      sub_1003FEC34((uint64_t *)(v0 + 240));
      uint64_t v51 = v32;
      uint64_t v39 = *(void *)(v0 + 264);
      uint64_t v38 = *(void *)(v0 + 272);
      sub_10000F3B0((void *)(v0 + 240), v39);
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 72))(v39, v38);
      unint64_t v42 = v41;
      _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 240);
      sub_10014C574(v34, (uint64_t (*)(void))type metadata accessor for CVDetection);
      *(void *)(v0 + 328) = sub_1003806B0(v40, v42, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v51, v36);
      _os_log_impl((void *)&_mh_execute_header, v29, type, "Failed to find anchor for track %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v43 = *(void *)(v0 + 360);

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v43);
    }
    sub_10010C1AC();
    swift_allocError();
    *id v44 = 3;
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(v0 + 440);
  uint64_t v9 = *(void *)(v0 + 448);
  uint64_t v11 = *(void *)(v0 + 432);
  uint64_t v12 = *(void **)(v6[7] + 8 * v7);
  *(void *)(v0 + 456) = v12;
  id v13 = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  id v14 = [v13 name];
  if (!v14
    || (double v15 = v14,
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        uint64_t v18 = v17,
        v15,
        *(void *)(v0 + 464) = sub_100148C88(v16, v18),
        *(_WORD *)(v0 + 528) = v19,
        (v19 & 0x100) != 0))
  {

    goto LABEL_11;
  }
  [v13 transform];
  HIDWORD(v20) = 0;
  *(_OWORD *)(v0 + 144) = v20;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 472) = Strong;
  if (Strong)
  {
    id v22 = (void *)Strong;
    id v23 = [*(id *)(v0 + 352) camera];
    [v23 transform];
    double v54 = v24;

    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 280;
    *(void *)(v0 + 24) = sub_1001419A0;
    uint64_t v25 = swift_continuation_init();
    *(void *)(v0 + 200) = _NSConcreteStackBlock;
    *(void *)(v0 + 208) = 0x40000000;
    *(void *)(v0 + 216) = sub_1001424F8;
    *(void *)(v0 + 224) = &unk_1004ECAA0;
    *(void *)(v0 + 232) = v25;
    [v22 getGeoLocationForPoint:v0 + 200 completionHandler:v54];
    return _swift_continuation_await(v0 + 16);
  }
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to geoLocate camera", v48, 2u);
    swift_slowDealloc();
  }

  sub_10010C1AC();
  swift_allocError();
  *uint64_t v49 = 2;
  swift_willThrow();

LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v45 = *(uint64_t (**)(void))(v0 + 8);
  return v45();
}

uint64_t sub_1001419A0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 480) = v1;
  if (v1) {
    uint64_t v2 = sub_100142268;
  }
  else {
    uint64_t v2 = sub_100141AB0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100141AB0()
{
  uint64_t v1 = *(void **)(v0 + 472);
  *(void *)(v0 + 488) = *(void *)(v0 + 280);
  *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 288);

  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 512) = Strong;
  if (Strong)
  {
    id v3 = (void *)Strong;
    long long v12 = *(_OWORD *)(v0 + 144);
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 304;
    *(void *)(v0 + 88) = sub_100141D08;
    uint64_t v4 = swift_continuation_init();
    *(void *)(v0 + 160) = _NSConcreteStackBlock;
    *(void *)(v0 + 168) = 0x40000000;
    *(void *)(v0 + 176) = sub_1001424F8;
    *(void *)(v0 + 184) = &unk_1004ECAB8;
    *(void *)(v0 + 192) = v4;
    [v3 getGeoLocationForPoint:v0 + 160 completionHandler:*(double *)&v12];
    return _swift_continuation_await(v0 + 80);
  }
  else
  {
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to geoLocate anchor", v7, 2u);
      swift_slowDealloc();
    }
    char v8 = *(void **)(v0 + 456);

    sub_10010C1AC();
    swift_allocError();
    *uint64_t v9 = 2;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_100141D08()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 520) = v1;
  if (v1) {
    uint64_t v2 = sub_100142314;
  }
  else {
    uint64_t v2 = sub_100141E18;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100141E18()
{
  uint64_t v1 = *(void **)(v0 + 352);
  double v3 = *(double *)(v0 + 304);
  double v2 = *(double *)(v0 + 312);
  double v4 = *(double *)(v0 + 320);

  id v5 = [v1 geoTrackingStatus];
  double v6 = 20.0;
  if (v5)
  {
    unint64_t v7 = v5;
    char v8 = (char *)[v5 accuracy];

    double v9 = 20.0;
    if ((unint64_t)(v8 - 1) <= 2)
    {
      uint64_t v10 = 8 * (void)(v8 - 1);
      double v6 = *(double *)((char *)&unk_100447280 + v10);
      double v9 = *(double *)((char *)&unk_100447298 + v10);
    }
  }
  else
  {
    double v9 = 20.0;
  }
  double v12 = *(double *)(v0 + 496);
  double v11 = *(double *)(v0 + 504);
  double v13 = *(double *)(v0 + 488);
  __int16 v14 = *(_WORD *)(v0 + 528);
  uint64_t v16 = *(void *)(v0 + 416);
  uint64_t v15 = *(void *)(v0 + 424);
  uint64_t v17 = *(void *)(v0 + 408);
  static Date.now.getter();
  id v18 = objc_allocWithZone((Class)CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v20 = [v18 initWithCoordinate:isa, v13, v12, v11, v9, v6];

  id v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v21(v15, v17);
  if (v14)
  {
    if (*(void *)(v0 + 464))
    {
      id v45 = *(void **)(v0 + 456);
      uint64_t v46 = *(void *)(v0 + 424);
      uint64_t v47 = *(void *)(v0 + 408);
      static Date.now.getter();
      id v48 = objc_allocWithZone((Class)CLLocation);
      Class v49 = Date._bridgeToObjectiveC()().super.isa;
      id v44 = [v48 initWithCoordinate:v49 altitude:v3 horizontalAccuracy:v2 verticalAccuracy:v4 timestamp:v9];

      v21(v46, v47);
    }
    else
    {
      unint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "unknown anchor name. Shouldnt have gotten here", v52, 2u);
        swift_slowDealloc();
      }

      id v44 = v20;
    }
  }
  else
  {
    double v22 = *(double *)(v0 + 464);
    uint64_t v56 = *(void **)(v0 + 456);
    uint64_t v23 = *(void *)(v0 + 424);
    uint64_t v24 = *(void *)(v0 + 408);
    static Date.now.getter();
    id v25 = objc_allocWithZone((Class)CLLocation);
    Class v26 = Date._bridgeToObjectiveC()().super.isa;
    id v27 = [v25 initWithCoordinate:v26 altitude:v3 horizontalAccuracy:v2 verticalAccuracy:v4 timestamp:v9];

    v21(v23, v24);
    [v27 coordinate];
    double v29 = v28;
    [v20 coordinate];
    double v31 = (v29 - v30) / v22;
    [v27 coordinate];
    double v33 = v32;
    [v20 coordinate];
    double v55 = v6;
    double v35 = v4;
    double v36 = (v33 - v34) / v22;
    [v27 altitude];
    double v38 = v37;
    [v20 altitude];
    double v40 = v2 + (v22 + v22) * v36;
    double v41 = v35 + (v22 + v22) * ((v38 - v39) / v22);
    static Date.now.getter();
    id v42 = objc_allocWithZone((Class)CLLocation);
    Class v43 = Date._bridgeToObjectiveC()().super.isa;
    id v44 = [v42 initWithCoordinate:v43 altitude:v3 + (v22 + v22) * v31 horizontalAccuracy:v40 verticalAccuracy:v41 timestamp:v9 + v22 + v22];

    v21(v23, v24);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v53 = *(uint64_t (**)(id, id))(v0 + 8);
  return v53(v20, v44);
}

uint64_t sub_100142268()
{
  uint64_t v1 = (void *)v0[59];
  double v2 = (void *)v0[57];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100142314()
{
  uint64_t v1 = (void *)v0[64];
  double v2 = (void *)v0[57];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001423C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = __chkstk_darwin(v4);
  char v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v9 = *(void **)(a1 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_workQueue);
  *char v8 = v9;
  (*(void (**)(void *, void, uint64_t, double))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    *a2 = *(void *)(a1 + 24);
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001424F8(uint64_t a1, void *a2, double a3, double a4, double a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_10000F214(&qword_10051F3B0);
    uint64_t v7 = swift_allocError();
    *char v8 = a2;
    id v9 = a2;
    return _swift_continuation_throwingResumeWithError(v5, v7);
  }
  else
  {
    id v10 = *(double **)(*(void *)(v5 + 64) + 40);
    *id v10 = a3;
    v10[1] = a4;
    uint64_t v10[2] = a5;
    return _swift_continuation_throwingResume(v5);
  }
}

uint64_t sub_1001425B0()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtCC6Tamale14ARCameraSource7Tracker_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100142698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v9 = sub_10014572C((unint64_t *)&qword_100520FA8, (void (*)(uint64_t))type metadata accessor for CVTrackSnapshot);

  return sub_10013C564(a1, a2, v8, a3, v9, a4);
}

id sub_100142740()
{
  swift_getObjectType();
  id v1 = [v0 camera];
  [v0 timestamp];
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithCamera:v1 timestamp:v2];

  return v3;
}

id sub_1001427D4()
{
  id v1 = *v0;
  double v2 = (__CVBuffer *)[*v0 capturedImage];
  size_t DataSize = CVPixelBufferGetDataSize(v2);

  if (DataSize) {
    return [v1 capturedImage];
  }
  else {
    return 0;
  }
}

id sub_10014284C()
{
  id v1 = [*v0 smoothedSceneDepth];
  if (!v1) {
    return 0;
  }
  double v2 = v1;
  id v3 = [v1 depthMap];

  return v3;
}

double sub_1001428B8@<D0>(_OWORD *a1@<X8>)
{
  sub_10013C26C((uint64_t)v5);
  long long v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  double result = *(double *)&v6;
  long long v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

id sub_1001428FC@<X0>(void *a1@<X8>)
{
  id result = sub_100142740();
  *a1 = result;
  return result;
}

uint64_t sub_100142928(uint64_t a1)
{
  uint64_t result = sub_1001077E0(&qword_100520610, &qword_1005205C8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for FrameConsumerContainer()
{
  return self;
}

uint64_t sub_1001429A0()
{
  return type metadata accessor for ARCameraSource(0);
}

uint64_t type metadata accessor for ARCameraSource(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100520840);
}

void sub_1001429C8()
{
  type metadata accessor for CameraControllerConfiguration(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Logger();
    if (v1 <= 0x3F)
    {
      type metadata accessor for LoggingSignposter(319);
      if (v2 <= 0x3F)
      {
        sub_10010B63C(319, &qword_10051F978, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream);
        if (v3 <= 0x3F)
        {
          sub_10010B63C(319, &qword_10051F980, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream.Continuation);
          if (v4 <= 0x3F)
          {
            type metadata accessor for ObservationRegistrar();
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for ARCameraSource.ARQuadAnchor()
{
  return self;
}

uint64_t sub_100142CAC()
{
  return type metadata accessor for ARCameraSource.Tracker(0);
}

uint64_t type metadata accessor for ARCameraSource.Tracker(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_1005209C0);
}

uint64_t sub_100142CD4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100142DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = a3;
  swift_beginAccess();
  uint64_t v9 = *(void *)(a4 + 16);
  unint64_t v10 = *(void *)(a4 + 24);
  double v11 = *(void (**)(uint64_t *, uint64_t, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8);
  sub_10009489C(v9, v10);
  uint64_t v12 = sub_10000F734(0, &qword_1005205C8);
  uint64_t v13 = sub_1001077E0(&qword_1005205C0, &qword_1005205C8);
  v11(&v16, v9, v10, a5, v12, v13, ObjectType, a2);
  return sub_10014A76C(v9, v10);
}

uint64_t sub_100143188(_OWORD *a1)
{
  uint64_t v3 = *v1;
  swift_getKeyPath();
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (*(void *)(v3 + OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceRecording))
  {
    swift_retain();
    sub_1001434B0(a1);
    return swift_release();
  }
  return result;
}

Swift::Int sub_100143250(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100517E28 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000F378(v1, (uint64_t)qword_10055E190);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      unint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)unint64_t v4 = 136315138;
      swift_getErrorValue();
      uint64_t v5 = Error.localizedDescription.getter();
      sub_1003806B0(v5, v6, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unable to save video: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return OS_dispatch_semaphore.signal()();
}

void sub_100143444(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1001434B0(_OWORD *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(v2 + OBJC_IVAR____TtC6Tamale23ARCameraSourceRecording_frameQueue);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  long long v13 = a1[1];
  *(_OWORD *)(v12 + 24) = *a1;
  *(void *)(v12 + 16) = v11;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 53) = *(_OWORD *)((char *)a1 + 29);
  aBlock[4] = sub_10014A830;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004ECA00;
  __int16 v14 = _Block_copy(aBlock);
  swift_retain();
  sub_10014A83C((uint64_t)a1);
  static DispatchQoS.unspecified.getter();
  id v18 = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
  swift_release();
  return swift_release();
}

void sub_1001437B4(uint64_t a1, _OWORD *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *(void **)(Strong + OBJC_IVAR____TtC6Tamale23ARCameraSourceRecording_session);
    if ([v5 state] == (id)1 && (uint64_t v6 = *(void **)(v4 + 16)) != 0)
    {
      id v7 = v6;
      id v8 = [v5 currentFrame];
      if (v8)
      {
        uint64_t v9 = v8;
        if (qword_100517E28 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10000F378(v10, (uint64_t)qword_10055E190);
        sub_10014A83C((uint64_t)a2);
        uint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v11, v12))
        {
          long long v13 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)long long v13 = 134217984;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10014A88C((uint64_t)a2);
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "Logged custom metadata for frame timestamp %f", v13, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          sub_10014A88C((uint64_t)a2);
        }

        id v14 = [v7 recordingTechnique];
        uint64_t v15 = (objc_class *)type metadata accessor for CustomARRecordingStreamingMetadata();
        uint64_t v16 = (char *)objc_allocWithZone(v15);
        uint64_t v17 = &v16[OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata];
        long long v18 = *(_OWORD *)((char *)a2 + 29);
        long long v19 = a2[1];
        *(_OWORD *)uint64_t v17 = *a2;
        *((_OWORD *)v17 + 1) = v19;
        *(_OWORD *)(v17 + 29) = v18;
        sub_10014A83C((uint64_t)a2);
        v21.receiver = v16;
        v21.super_class = v15;
        [super init];
        [v14 recordCustomData:v20 forTimestamp:*((double *)a2 + 2)];
        swift_release();

        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t sub_100143A24()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale23ARCameraSourceRecording_fileURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100143AEC()
{
  return type metadata accessor for ARCameraSourceRecording(0);
}

uint64_t type metadata accessor for ARCameraSourceRecording(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100520CC0);
}

uint64_t sub_100143B14()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100143BC0(_OWORD *a1)
{
  return sub_1001434B0(a1);
}

uint64_t sub_100143BE4()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100143C78, v2, v1);
}

uint64_t sub_100143C78()
{
  swift_release();
  if (qword_100517D48 != -1) {
    swift_once();
  }
  *(unsigned char *)(*(void *)(qword_10055E060 + OBJC_IVAR____TtC6Tamale16LocationsHandler_headingUpdatePublisher)
           + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_isSimulating) = 1;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100143D2C()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100143DC0, v2, v1);
}

uint64_t sub_100143DC0()
{
  swift_release();
  if (qword_100517D48 != -1) {
    swift_once();
  }
  *(unsigned char *)(*(void *)(qword_10055E060 + OBJC_IVAR____TtC6Tamale16LocationsHandler_headingUpdatePublisher)
           + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_isSimulating) = 0;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100143E70(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v3 = &_swiftEmptySetSingleton;
    if (v2) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v8 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v30 = v1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(v1 + 56);
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_10000F214(&qword_100521140);
  uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
  if (!v2) {
    goto LABEL_7;
  }
LABEL_4:
  swift_bridgeObjectRetain();
  swift_retain();
  __CocoaSet.makeIterator()();
  sub_10000F734(0, (unint64_t *)&qword_100518A40);
  sub_1001077E0(&qword_100521138, (unint64_t *)&qword_100518A40);
  uint64_t result = Set.Iterator.init(_cocoa:)();
  uint64_t v1 = v34;
  uint64_t v30 = v35;
  uint64_t v5 = v36;
  uint64_t v6 = v37;
  unint64_t v7 = v38;
LABEL_11:
  int64_t v29 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v11 = (char *)(v3 + 7);
  while (v1 < 0)
  {
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16) {
      goto LABEL_45;
    }
    *(void *)&long long v31 = v16;
    sub_10000F734(0, (unint64_t *)&qword_100518A40);
    swift_dynamicCast();
LABEL_36:
    sub_10000F734(0, (unint64_t *)&qword_100518A40);
    swift_dynamicCast();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v22 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)&v11[8 * (v23 >> 6)]) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)&v11[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)&v11[8 * v24];
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)&v11[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
    uint64_t v13 = v3[6] + 40 * v12;
    *(_OWORD *)uint64_t v13 = v31;
    *(_OWORD *)(v13 + 16) = v32;
    *(void *)(v13 + 32) = v33;
    ++v3[2];
  }
  if (v7)
  {
    unint64_t v14 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v15 = v14 | (v6 << 6);
LABEL_35:
    id v21 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    goto LABEL_36;
  }
  int64_t v17 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v17 >= v29) {
      goto LABEL_45;
    }
    unint64_t v18 = *(void *)(v30 + 8 * v17);
    uint64_t v19 = v6 + 1;
    if (!v18)
    {
      uint64_t v19 = v6 + 2;
      if (v6 + 2 >= v29) {
        goto LABEL_45;
      }
      unint64_t v18 = *(void *)(v30 + 8 * v19);
      if (!v18)
      {
        uint64_t v19 = v6 + 3;
        if (v6 + 3 >= v29) {
          goto LABEL_45;
        }
        unint64_t v18 = *(void *)(v30 + 8 * v19);
        if (!v18)
        {
          uint64_t v19 = v6 + 4;
          if (v6 + 4 >= v29) {
            goto LABEL_45;
          }
          unint64_t v18 = *(void *)(v30 + 8 * v19);
          if (!v18)
          {
            uint64_t v19 = v6 + 5;
            if (v6 + 5 >= v29) {
              goto LABEL_45;
            }
            unint64_t v18 = *(void *)(v30 + 8 * v19);
            if (!v18)
            {
              uint64_t v20 = v6 + 6;
              while (v29 != v20)
              {
                unint64_t v18 = *(void *)(v30 + 8 * v20++);
                if (v18)
                {
                  uint64_t v19 = v20 - 1;
                  goto LABEL_34;
                }
              }
LABEL_45:
              swift_release();
              sub_10014AAB4();
              return (uint64_t)v3;
            }
          }
        }
      }
    }
LABEL_34:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v19 << 6);
    uint64_t v6 = v19;
    goto LABEL_35;
  }
LABEL_46:
  __break(1u);
  return result;
}

void sub_1001442C4(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000F214((uint64_t *)&unk_10051CAF0);
  uint64_t v6 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  double v55 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000F214(&qword_100520FC0);
  uint64_t v8 = *(void *)(v54 - 8);
  double v9 = __chkstk_darwin(v54);
  id v58 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 timestamp:v9];
  double v12 = v11;
  id v13 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC6Tamale20ARCameraSourceReplay_session), "availableSensors"));
  sub_10000F214(&qword_100520FC8);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_3;
    }
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    [a1 rawHeading];
    uint64_t v40 = v39;
    id v41 = [a1 geoTrackingStatus];
    if (v41)
    {
      id v42 = v41;
      id v43 = [v41 state];

      if (v43 == (id)3)
      {
        [a1 heading];
        uint64_t v40 = v44;
      }
    }
    uint64_t v45 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v5, 1, 1, v45);
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = 0;
    v46[3] = 0;
    v46[4] = v40;
    sub_100064D5C((uint64_t)v5, (uint64_t)&unk_100520FD8, (uint64_t)v46);
    swift_release();
    return;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_29;
  }
LABEL_3:
  if (v15 >= 1)
  {
    id v48 = a1;
    Class v49 = v5;
    uint64_t v16 = 0;
    uint64_t v61 = v1 + OBJC_IVAR____TtC6Tamale20ARCameraSourceReplay_cameraSource;
    unint64_t v17 = v14 & 0xC000000000000001;
    uint64_t v52 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    os_log_type_t v51 = (void (**)(char *, uint64_t))(v6 + 8);
    unint64_t v50 = (void (**)(char *, uint64_t))(v8 + 8);
    id v63 = (char *)&type metadata for Any + 8;
    unint64_t v53 = v14;
    unint64_t v59 = v14 & 0xC000000000000001;
    uint64_t v60 = v15;
    while (1)
    {
      if (v17) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_unknownObjectRetain();
      }
      self;
      uint64_t v18 = swift_dynamicCastObjCClass();
      if (v18)
      {
        uint64_t v19 = (void *)v18;
        swift_unknownObjectRetain();
        if ([v19 customDataForTimestamp:v12])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          sub_100046CEC(&v64, v72);
          if (qword_100517E28 != -1) {
            swift_once();
          }
          uint64_t v20 = type metadata accessor for Logger();
          sub_10000F378(v20, (uint64_t)qword_10055E190);
          id v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v21, v22))
          {
            unint64_t v23 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v23 = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "Got custom data; will try to cast it", v23, 2u);
            swift_slowDealloc();
          }

          sub_1000A7FD8((uint64_t)v72, (uint64_t)&v64);
          type metadata accessor for CustomARRecordingStreamingMetadata();
          if (!swift_dynamicCast())
          {
            uint64_t v36 = Logger.logObject.getter();
            os_log_type_t v37 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v36, v37))
            {
              unint64_t v38 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v38 = 0;
              _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unsupported custom metadata", v38, 2u);
              swift_slowDealloc();
            }

            swift_unknownObjectRelease_n();
            _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v72);
            goto LABEL_6;
          }
          unint64_t v24 = v71;
          uint64_t v25 = *(void *)&v71[OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata];
          uint64_t v26 = *(void *)&v71[OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata + 8];
          uint64_t v27 = *(void *)&v71[OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata + 16];
          uint64_t v28 = *(void *)&v71[OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata + 24];
          unint64_t v29 = *(void *)&v71[OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata + 32];
          int v30 = *(_DWORD *)&v71[OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata + 40];
          int v62 = v71[OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata + 44];
          uint64_t Strong = swift_unknownObjectWeakLoadStrong();
          if (Strong)
          {
            long long v32 = (void *)Strong;
            int v57 = v30;
            uint64_t v33 = (char *)swift_unknownObjectWeakLoadStrong();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1000A7588(v28, v29);

            if (v33)
            {
              uint64_t v34 = v55;
              uint64_t v35 = v56;
              (*v52)(v55, (uint64_t)&v33[OBJC_IVAR____TtC6Tamale26StreamingMetadataProcessor_continuation], v56);
              *(void *)&long long v64 = v27;
              *((void *)&v64 + 1) = v25;
              uint64_t v65 = v26;
              uint64_t v66 = v27;
              uint64_t v67 = v28;
              unint64_t v68 = v29;
              int v69 = v57;
              char v70 = v62;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1000A7588(v28, v29);
              AsyncStream.Continuation.yield(_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_unknownObjectRelease();
              sub_100094760(v28, v29);
              swift_unknownObjectRelease();

              (*v51)(v34, v35);
              (*v50)(v58, v54);
LABEL_26:
              _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v72);
              unint64_t v17 = v59;
              uint64_t v15 = v60;
              goto LABEL_6;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1000A7588(v28, v29);
          }

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100094760(v28, v29);
          swift_unknownObjectRelease();
          goto LABEL_26;
        }
        swift_unknownObjectRelease_n();
      }
      else
      {
        swift_unknownObjectRelease();
      }
LABEL_6:
      if (v15 == ++v16)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = v49;
        a1 = v48;
        goto LABEL_30;
      }
    }
  }
  __break(1u);
}

uint64_t sub_100144A7C(double a1)
{
  *(double *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100144A9C, 0, 0);
}

uint64_t sub_100144A9C()
{
  *(void *)(v0 + 24) = type metadata accessor for MainActor();
  *(void *)(v0 + 32) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100144B34, v2, v1);
}

uint64_t sub_100144B34()
{
  swift_release();
  if (qword_100517D48 != -1) {
    swift_once();
  }
  return _swift_task_switch(sub_100144BCC, 0, 0);
}

uint64_t sub_100144BCC()
{
  *(void *)(v0 + 40) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100144C58, v2, v1);
}

uint64_t sub_100144C58()
{
  swift_release();
  *(void *)(v0 + 48) = qword_10055E060;
  return _swift_task_switch(sub_100144CCC, 0, 0);
}

uint64_t sub_100144CCC()
{
  sub_100054BC0(*(double *)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100144D30()
{
  uint64_t v0 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    double v9 = *(void **)(Strong + OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue);
    void *v6 = v9;
    (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
    id v10 = v8;
    id v11 = v9;
    LOBYTE(v9) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
    if (v9)
    {
      char v12 = sub_100135FA0((uint64_t)v10);

      if (v12)
      {
        uint64_t v13 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v2, 1, 1, v13);
        unint64_t v14 = (void *)swift_allocObject();
        void v14[2] = 0;
        v14[3] = 0;
        void v14[4] = v10;
        id v15 = v10;
        sub_100064D5C((uint64_t)v2, (uint64_t)&unk_100520FF0, (uint64_t)v14);

        swift_release();
      }
      else
      {
      }
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_100145004()
{
  return sub_10014561C(type metadata accessor for ARCameraSourceReplay);
}

uint64_t type metadata accessor for ARCameraSourceReplay()
{
  return self;
}

id sub_1001450A4(void *a1)
{
  uint64_t v3 = v1;
  id v4 = [a1 decodeDataObject];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_1001469B4();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    sub_100038B34(v6, v8);
    uint64_t v9 = v17;
    int v10 = v19;
    char v11 = v20;
    char v12 = &v3[OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata];
    *(_OWORD *)char v12 = v16;
    *((void *)v12 + 2) = v9;
    *(_OWORD *)(v12 + 24) = v18;
    *((_DWORD *)v12 + 10) = v10;
    v12[44] = v11;

    v15.receiver = v3;
    v15.super_class = (Class)type metadata accessor for CustomARRecordingStreamingMetadata();
    [super init];
  }
  else
  {

    type metadata accessor for CustomARRecordingStreamingMetadata();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v13;
}

uint64_t sub_10014540C(void *a1)
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata + 24);
  unint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale34CustomARRecordingStreamingMetadata_wrappedMetadata + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000A7588(v3, v4);
  sub_100146960();
  uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100094760(v3, v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a1 encodeDataObject:isa];

  sub_100038B34(v5, v7);
  return swift_release();
}

id sub_100145604()
{
  return sub_10014561C(type metadata accessor for CustomARRecordingStreamingMetadata);
}

id sub_10014561C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for CustomARRecordingStreamingMetadata()
{
  return self;
}

ValueMetadata *type metadata accessor for FrameConsumerContainer.ExecutionMode()
{
  return &type metadata for FrameConsumerContainer.ExecutionMode;
}

uint64_t sub_1001456E4()
{
  return sub_10014572C(&qword_100520EC0, (void (*)(uint64_t))type metadata accessor for ARCameraSource.ARQuadAnchor);
}

uint64_t sub_10014572C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_UNKNOWN **sub_100145774()
{
  return &off_1004EC7D0;
}

uint64_t sub_100145780(uint64_t a1)
{
  uint64_t result = sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  *(void *)(a1 + 8) = result;
  return result;
}

id sub_1001457D8@<X0>(void *a1@<X8>)
{
  return sub_10012E770(*(void *)(v1 + 16), a1);
}

id sub_1001457F4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10012E8E8(a1, &OBJC_IVAR____TtC6Tamale14ARCameraSource___latestFrame, a2);
}

void sub_100145820()
{
}

uint64_t sub_100145848()
{
  return sub_10012EF8C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_10014586C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = ~v4;
  *(void *)a3 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v7 = v8;
  uint64_t v9 = -v4;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  *(void *)(a3 + 8) = result;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = v10 & v7;
  char v11 = *(unsigned char *)(a2 + 32);
  *(void *)(a3 + 40) = a2;
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v12 = a2 + 64;
  uint64_t v13 = v14;
  uint64_t v15 = -1 << v11;
  if (-v15 < 64) {
    uint64_t v3 = ~(-1 << -(char)v15);
  }
  *(void *)(a3 + 48) = v12;
  *(void *)(a3 + 56) = ~v15;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = v3 & v13;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

void sub_1001458D8(char *a1@<X8>)
{
  uint64_t v3 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((unsigned char *)v1 + 80) == 1)
  {
    uint64_t v11 = sub_10000F214((uint64_t *)&unk_100521020);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    v12((uint64_t)a1, 1, 1, v11);
    return;
  }
  uint64_t v13 = *v1;
  uint64_t v14 = v1[1];
  uint64_t v15 = (void *)v1[2];
  int64_t v16 = v1[3];
  unint64_t v17 = v1[4];
  uint64_t v44 = a1;
  uint64_t v45 = v15;
  if (v17)
  {
    uint64_t v18 = (v17 - 1) & v17;
    unint64_t v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_7:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v5, *(void *)(v13 + 56) + *(void *)(v7 + 72) * v19, v6, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    int64_t v20 = v16;
    goto LABEL_27;
  }
  int64_t v21 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_55;
  }
  int64_t v22 = ((unint64_t)v15 + 64) >> 6;
  int64_t v20 = v16;
  if (v21 < v22)
  {
    unint64_t v23 = *(void *)(v14 + 8 * v21);
    if (v23)
    {
LABEL_11:
      uint64_t v18 = (v23 - 1) & v23;
      unint64_t v19 = __clz(__rbit64(v23)) + (v21 << 6);
      int64_t v16 = v21;
      goto LABEL_7;
    }
    int64_t v24 = v16 + 2;
    int64_t v20 = v16 + 1;
    if (v16 + 2 < v22)
    {
      unint64_t v23 = *(void *)(v14 + 8 * v24);
      if (v23)
      {
LABEL_14:
        int64_t v21 = v24;
        goto LABEL_11;
      }
      int64_t v20 = v16 + 2;
      if (v16 + 3 < v22)
      {
        unint64_t v23 = *(void *)(v14 + 8 * (v16 + 3));
        if (v23)
        {
          int64_t v21 = v16 + 3;
          goto LABEL_11;
        }
        int64_t v24 = v16 + 4;
        int64_t v20 = v16 + 3;
        if (v16 + 4 < v22)
        {
          unint64_t v23 = *(void *)(v14 + 8 * v24);
          if (v23) {
            goto LABEL_14;
          }
          int64_t v21 = v16 + 5;
          int64_t v20 = v16 + 4;
          if (v16 + 5 < v22)
          {
            unint64_t v23 = *(void *)(v14 + 8 * v21);
            if (v23) {
              goto LABEL_11;
            }
            int64_t v20 = v22 - 1;
            int64_t v25 = v16 + 6;
            while (v22 != v25)
            {
              unint64_t v23 = *(void *)(v14 + 8 * v25++);
              if (v23)
              {
                int64_t v21 = v25 - 1;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56))(v5, 1, 1, v6, v8);
  uint64_t v18 = 0;
LABEL_27:
  *uint64_t v1 = v13;
  v1[1] = v14;
  v1[2] = (uint64_t)v45;
  v1[3] = v20;
  v1[4] = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000FBD8((uint64_t)v5, (uint64_t *)&unk_100524ED0);
LABEL_29:
    *((unsigned char *)v1 + 80) = 1;
    uint64_t v26 = sub_10000F214((uint64_t *)&unk_100521020);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v44, 1, 1, v26);
    return;
  }
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v27(v10, v5, v6);
  int64_t v28 = v1[8];
  unint64_t v29 = v1[9];
  if (!v29)
  {
    int64_t v37 = v28 + 1;
    if (!__OFADD__(v28, 1))
    {
      int64_t v38 = (unint64_t)(v1[7] + 64) >> 6;
      int64_t v39 = v1[8];
      if (v37 < v38)
      {
        uint64_t v40 = v1[6];
        unint64_t v41 = *(void *)(v40 + 8 * v37);
        if (v41)
        {
LABEL_38:
          uint64_t v30 = (v41 - 1) & v41;
          unint64_t v31 = __clz(__rbit64(v41)) + (v37 << 6);
          int64_t v28 = v37;
          goto LABEL_32;
        }
        int64_t v42 = v28 + 2;
        int64_t v39 = v28 + 1;
        if (v28 + 2 < v38)
        {
          unint64_t v41 = *(void *)(v40 + 8 * v42);
          if (v41)
          {
LABEL_41:
            int64_t v37 = v42;
            goto LABEL_38;
          }
          int64_t v39 = v28 + 2;
          if (v28 + 3 < v38)
          {
            unint64_t v41 = *(void *)(v40 + 8 * (v28 + 3));
            if (v41)
            {
              int64_t v37 = v28 + 3;
              goto LABEL_38;
            }
            int64_t v42 = v28 + 4;
            int64_t v39 = v28 + 3;
            if (v28 + 4 < v38)
            {
              unint64_t v41 = *(void *)(v40 + 8 * v42);
              if (v41) {
                goto LABEL_41;
              }
              int64_t v37 = v28 + 5;
              int64_t v39 = v28 + 4;
              if (v28 + 5 < v38)
              {
                unint64_t v41 = *(void *)(v40 + 8 * v37);
                if (v41) {
                  goto LABEL_38;
                }
                int64_t v39 = v38 - 1;
                int64_t v43 = v28 + 6;
                while (v38 != v43)
                {
                  unint64_t v41 = *(void *)(v40 + 8 * v43++);
                  if (v41)
                  {
                    int64_t v37 = v43 - 1;
                    goto LABEL_38;
                  }
                }
              }
            }
          }
        }
      }
      v1[8] = v39;
      v1[9] = 0;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      goto LABEL_29;
    }
LABEL_55:
    __break(1u);
    return;
  }
  uint64_t v30 = (v29 - 1) & v29;
  unint64_t v31 = __clz(__rbit64(v29)) | (v28 << 6);
LABEL_32:
  uint64_t v45 = *(void **)(*(void *)(v1[5] + 48) + 8 * v31);
  v1[8] = v28;
  v1[9] = v30;
  uint64_t v32 = sub_10000F214((uint64_t *)&unk_100521020);
  uint64_t v33 = *(int *)(v32 + 48);
  uint64_t v34 = v44;
  v27(v44, v10, v6);
  *(void *)&v34[v33] = v45;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v34, 0, 1, v32);
  uint64_t v35 = v45;

  id v36 = v35;
}

uint64_t sub_100145E60(uint64_t a1, double a2)
{
  uint64_t v3 = *(void (**)(uint64_t, double))(a1 + 32);
  uint64_t v4 = swift_retain();
  v3(v4, a2);

  return swift_release();
}

Swift::Int sub_100145EB4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000F214(&qword_1005251E0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10000F734(0, (unint64_t *)&qword_100521030);
      do
      {
        swift_dynamicCast();
        type metadata accessor for ARCameraSource.ARQuadAnchor();
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_1001ECF24(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_1001460F0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100521018);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014586C(a1, a2, (uint64_t)v56);
  v50[3] = a1;
  swift_bridgeObjectRetain();
  v50[2] = a2;
  swift_bridgeObjectRetain();
  sub_1001458D8(v13);
  uint64_t v14 = sub_10000F214((uint64_t *)&unk_100521020);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10014AAB4();
    return sub_10014AAB4();
  }
  LODWORD(i) = a3;
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
  uint64_t v17 = *(int *)(v14 + 48);
  uint64_t v53 = v8;
  v16(v10, v13, v8);
  uint64_t v18 = *(void **)&v13[v17];
  unint64_t v19 = (void *)*a4;
  unint64_t v21 = sub_10032ADC4((uint64_t)v10);
  uint64_t v22 = v19[2];
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  char v25 = v20;
  if (v19[3] >= v24)
  {
    if (i)
    {
      if (v20) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1001F5600();
      if (v25) {
        goto LABEL_10;
      }
    }
LABEL_13:
    unint64_t v31 = (void *)*a4;
    *(void *)(*a4 + 8 * (v21 >> 6) + 64) |= 1 << v21;
    uint64_t v32 = v31[6];
    uint64_t v33 = *(void *)(v51 + 72);
    for (i = v33; ; uint64_t v33 = i)
    {
      uint64_t v34 = v53;
      v16((char *)(v32 + v33 * v21), v10, v53);
      *(void *)(v31[7] + 8 * v21) = v18;
      uint64_t v35 = v31[2];
      BOOL v36 = __OFADD__(v35, 1);
      uint64_t v37 = v35 + 1;
      if (v36) {
        break;
      }
      v31[2] = v37;
      sub_1001458D8(v13);
      uint64_t v38 = sub_10000F214((uint64_t *)&unk_100521020);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v13, 1, v38) == 1) {
        goto LABEL_2;
      }
      uint64_t v39 = *(int *)(v38 + 48);
      v16(v10, v13, v34);
      uint64_t v18 = *(void **)&v13[v39];
      uint64_t v40 = (void *)*a4;
      unint64_t v21 = sub_10032ADC4((uint64_t)v10);
      uint64_t v42 = v40[2];
      BOOL v43 = (v41 & 1) == 0;
      uint64_t v44 = v42 + v43;
      if (__OFADD__(v42, v43)) {
        goto LABEL_22;
      }
      char v45 = v41;
      if (v40[3] < v44)
      {
        sub_1001ECAEC(v44, 1);
        unint64_t v46 = sub_10032ADC4((uint64_t)v10);
        if ((v45 & 1) != (v47 & 1)) {
          goto LABEL_24;
        }
        unint64_t v21 = v46;
      }
      if (v45) {
        goto LABEL_10;
      }
      unint64_t v31 = (void *)*a4;
      *(void *)(*a4 + 8 * (v21 >> 6) + 64) |= 1 << v21;
      uint64_t v32 = v31[6];
    }
    goto LABEL_23;
  }
  sub_1001ECAEC(v24, i & 1);
  unint64_t v26 = sub_10032ADC4((uint64_t)v10);
  if ((v25 & 1) != (v27 & 1))
  {
LABEL_24:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v21 = v26;
  if ((v25 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v28 = swift_allocError();
  swift_willThrow();
  v56[12] = v28;
  swift_errorRetain();
  sub_10000F214(&qword_10051F3B0);
  char v29 = swift_dynamicCast();
  uint64_t v30 = v53;
  if ((v29 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v10, v30);
    sub_10014AAB4();
    sub_10014AAB4();
    return swift_errorRelease();
  }
LABEL_25:
  uint64_t v54 = 0;
  unint64_t v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v48._object = (void *)0x80000001004271E0;
  v48._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v48);
  _print_unlocked<A, B>(_:_:)();
  v49._uint64_t countAndFlagsBits = 39;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100146674(uint64_t a1, void *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(NSObject **)&a3[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
  unint64_t v10 = (void *)swift_allocObject();
  uint64_t v10[2] = a3;
  v10[3] = a1;
  v10[4] = a5;
  v10[5] = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_100146838;
  *(void *)(v11 + 24) = v10;
  v16[4] = sub_100146854;
  v16[5] = v11;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  void v16[2] = sub_100109E30;
  v16[3] = &unk_1004EC848;
  uint64_t v12 = _Block_copy(v16);
  id v13 = a2;
  swift_retain();
  uint64_t v14 = a3;
  swift_unknownObjectRetain();
  swift_release();
  dispatch_sync(v9, v12);
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v9) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001467F0()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100146838()
{
  return sub_1001353EC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_100146844()
{
  return swift_deallocObject();
}

uint64_t sub_100146854()
{
  return sub_100109E08(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10014685C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10014686C()
{
  return swift_release();
}

uint64_t sub_100146874()
{
  if ((static NSObject.== infix(_:_:)() & 1) != 0
    && (static NSObject.== infix(_:_:)() & 1) != 0
    && (static NSObject.== infix(_:_:)() & 1) != 0
    && (static NSObject.== infix(_:_:)() & 1) != 0)
  {
    return static NSObject.== infix(_:_:)() & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100146914@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10012E5D8(a1, &OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceRecording, a2);
}

uint64_t sub_100146940()
{
  return sub_10014C380(&OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceRecording);
}

unint64_t sub_100146960()
{
  unint64_t result = qword_100520FB0;
  if (!qword_100520FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520FB0);
  }
  return result;
}

unint64_t sub_1001469B4()
{
  unint64_t result = qword_100520FB8;
  if (!qword_100520FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520FB8);
  }
  return result;
}

uint64_t sub_100146A08()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100146A40()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000FC9C;
  v3[2] = v2;
  return _swift_task_switch(sub_100144A9C, 0, 0);
}

uint64_t sub_100146AEC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 == a3 && a2 == a4 && v5 == v6) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

void *sub_100146B64(uint64_t a1, uint64_t a2)
{
  unint64_t result = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(type metadata accessor for CVTrackSnapshot(0) - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      if (*(void *)(a2 + 16))
      {
        unint64_t v9 = sub_10032ADC4(v7);
        if (v10)
        {
          id v11 = *(id *)(*(void *)(a2 + 56) + 8 * v9);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      v7 += v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100146CB8(unint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v10) {
      return _swiftEmptyArrayStorage;
    }
    unint64_t result = (void *)sub_100040848(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0) {
      break;
    }
    uint64_t v12 = 0;
    a3 = *(void *)(a3 + 56);
    while (v10 != v12)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(a1 + 8 * v12 + 32);
      }
      uint64_t v14 = v13;
      id v15 = [a2 camera];
      [v14 transform];
      [v15 projectPoint:a3 orientation:v16 viewportSize:a4, a5];
      double v18 = v17;
      double v20 = v19;

      unint64_t v22 = _swiftEmptyArrayStorage[2];
      unint64_t v21 = _swiftEmptyArrayStorage[3];
      if (v22 >= v21 >> 1) {
        sub_100040848(v21 > 1, v22 + 1, 1);
      }
      ++v12;
      _swiftEmptyArrayStorage[2] = v22 + 1;
      BOOL v23 = (double *)&_swiftEmptyArrayStorage[2 * v22];
      void v23[4] = v18 / a4;
      void v23[5] = v20 / a5;
      if (v10 == v12) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

char *sub_100146E94(uint64_t a1, void *a2)
{
  uint64_t v77 = a2;
  uint64_t v78 = a1;
  uint64_t v3 = sub_10000F214(&qword_10051FB88);
  uint64_t v75 = *(void *)(v3 - 8);
  uint64_t v76 = v3;
  __chkstk_darwin(v3);
  uint64_t v72 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051FB20);
  uint64_t v73 = *(void *)(v5 - 8);
  uint64_t v74 = v5;
  __chkstk_darwin(v5);
  uint64_t v71 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_10051FB10);
  uint64_t v69 = *(void *)(v7 - 8);
  uint64_t v70 = v7;
  __chkstk_darwin(v7);
  unint64_t v68 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v67 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  id v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v14);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v15 - 8);
  *(void *)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration] = 0;
  *(void *)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceRecording] = 0;
  *(void *)&v2[OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceReplay] = 0;
  uint64_t v16 = OBJC_IVAR____TtC6Tamale14ARCameraSource_session;
  id v17 = objc_allocWithZone((Class)ARSession);
  double v18 = v2;
  *(void *)&v2[v16] = [v17 init];
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_consumers] = _swiftEmptyArrayStorage;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_metadataOutput] = 0;
  uint64_t v65 = OBJC_IVAR____TtC6Tamale14ARCameraSource_metadataQueue;
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  static DispatchQoS.unspecified.getter();
  id v80 = _swiftEmptyArrayStorage;
  sub_10014572C((unint64_t *)&unk_10051FB60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000F214(&qword_100521000);
  sub_10010DE10((unint64_t *)&qword_10051FB70, &qword_100521000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v66);
  *(void *)&v18[v65] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_photoOutput] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_sensorOrientedBufferDimensions] = 0;
  double v19 = &v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_safeArea];
  *(void *)double v19 = 0;
  *((void *)v19 + 1) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)v19 + 1) = _Q0;
  uint64_t v25 = OBJC_IVAR____TtC6Tamale14ARCameraSource_stillImageCroppingHandle;
  type metadata accessor for M2MHandle();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = 0;
  *(void *)(v26 + 24) = 0;
  *(void *)&v18[v25] = v26;
  uint64_t v27 = OBJC_IVAR____TtC6Tamale14ARCameraSource_ciContext;
  *(void *)&v18[v27] = [objc_allocWithZone((Class)CIContext) init];
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_stillImageCropOutputBuffer] = 0;
  uint64_t v28 = OBJC_IVAR____TtC6Tamale14ARCameraSource_shutterSoundTask;
  uint64_t v29 = type metadata accessor for TaskPriority();
  uint64_t v30 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v67, 1, 1, v29);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + 24) = 0;
  *(void *)&v18[v28] = sub_100064D88(v30, (uint64_t)&unk_1005211A8, v31);
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_locationMonitoringTask] = 0;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__targetZoomFactor] = 0x3FF0000000000000;
  uint64_t v32 = &v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureState];
  *(void *)uint64_t v32 = 0;
  v32[8] = 1;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureInitialZoomFactor] = 0x3FF0000000000000;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_minimumZoomFactor] = 0x3FF0000000000000;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomCaptureDevice] = 0;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__systemZoomSlider] = 0;
  v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__cameraControlsDisabled] = 0;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureObservation] = 0;
  v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevel] = 0;
  v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevelOverride] = 4;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__detectionLog] = 0;
  uint64_t v33 = &v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_logger];
  if (qword_100517E28 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = sub_10000F378(v34, (uint64_t)qword_10055E190);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v33, v35, v34);
  uint64_t v36 = (uint64_t)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_signposter];
  if (qword_100517F20 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for LoggingSignposter(0);
  uint64_t v38 = sub_10000F378(v37, (uint64_t)qword_10055E380);
  sub_10014C684(v38, v36, type metadata accessor for LoggingSignposter);
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource___latestFrame] = 0;
  uint64_t v39 = &v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_runStateStreamInternal];
  uint64_t v40 = &v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_runStateStreamContinuation];
  uint64_t v42 = v75;
  uint64_t v41 = v76;
  BOOL v43 = v72;
  (*(void (**)(char *, void, uint64_t))(v75 + 104))(v72, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v76);
  uint64_t v44 = v68;
  char v45 = v71;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v39, v44, v70);
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v40, v45, v74);
  unint64_t v46 = &v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__runState];
  *(void *)unint64_t v46 = 0;
  *((void *)v46 + 1) = 0;
  v46[16] = 0;
  uint64_t v47 = OBJC_IVAR____TtC6Tamale14ARCameraSource_trackManagerSupporting;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_trackManagerSupporting] = 0;
  ObservationRegistrar.init()();
  uint64_t v48 = v78;
  sub_10014C684(v78, (uint64_t)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource__configuration], type metadata accessor for CameraControllerConfiguration);
  Swift::String v49 = v77;
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue] = v77;
  type metadata accessor for CameraMotionMonitor();
  swift_allocObject();
  id v50 = v49;
  sub_100171E0C(30.0);
  *(void *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_motionMonitor] = v51;
  type metadata accessor for ARCameraSource.Tracker(0);
  uint64_t v52 = swift_allocObject();
  id v53 = v50;
  sub_10013B0F0((uint64_t)v53);
  *(void *)&v18[v47] = v52;
  swift_release();
  v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_localizationState] = 0;
  uint64_t v54 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v55 = v48 + *(int *)(v54 + 48);
  uint64_t v56 = *(void *)v55;
  LOBYTE(v55) = *(unsigned char *)(v55 + 8);
  int v57 = &v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_safeAreaStrategy];
  *(void *)int v57 = v56;
  v57[8] = v55;
  double v58 = 3.0;
  if (*(unsigned __int8 *)(v48 + *(int *)(v54 + 60)) - 1 < 2) {
    double v58 = 6.0;
  }
  *(double *)&v18[OBJC_IVAR____TtC6Tamale14ARCameraSource_maximumZoomFactor] = v58;

  unint64_t v59 = (objc_class *)type metadata accessor for ARCameraSource(0);
  v79.receiver = v18;
  v79.super_class = v59;
  uint64_t v60 = (char *)[v79 init];
  uint64_t v61 = *(void **)&v60[OBJC_IVAR____TtC6Tamale14ARCameraSource_session];
  int v62 = v60;
  [v61 setDelegate:v62];
  [v61 setDelegateQueue:v53];
  if (*(void *)&v62[OBJC_IVAR____TtC6Tamale14ARCameraSource_trackManagerSupporting]) {
    swift_unknownObjectWeakAssign();
  }
  sub_10012F160();

  sub_10014C574(v48, type metadata accessor for CameraControllerConfiguration);
  return v62;
}

uint64_t sub_100147874(uint64_t a1, void (*a2)(id, char *))
{
  uint64_t v27 = a2;
  uint64_t v3 = sub_10000F214(&qword_100521080);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v26 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v22 = *(void *)(v25 + 8 * v11);
      if (!v22)
      {
        int64_t v11 = v21 + 2;
        if (v21 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v22 = *(void *)(v25 + 8 * v11);
        if (!v22)
        {
          int64_t v11 = v21 + 3;
          if (v21 + 3 >= v26) {
            return swift_release();
          }
          unint64_t v22 = *(void *)(v25 + 8 * v11);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v9 = (v22 - 1) & v22;
    unint64_t v13 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_5:
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void **)(*(void *)(a1 + 48) + 8 * v13);
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = v14 + *(void *)(v17 + 72) * v13;
    double v19 = (char *)v5 + *(int *)(v3 + 48);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v18, v16);
    *uint64_t v5 = v15;
    id v20 = v15;
    v27(v20, v19);
    uint64_t result = sub_10000FBD8((uint64_t)v5, &qword_100521080);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100147ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v32 = sub_10000F214(&qword_100521048);
  uint64_t v3 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100521050);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v30 = v7 + 32;
  uint64_t v31 = v7 + 16;
  uint64_t v17 = (void (**)(char *, uint64_t))(v3 + 8);
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v7 + 8;
  uint64_t v18 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_5;
    }
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v28) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v28) {
        return swift_release();
      }
      unint64_t v24 = *(void *)(v27 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v28) {
          return swift_release();
        }
        unint64_t v24 = *(void *)(v27 + 8 * v20);
        if (!v24)
        {
          int64_t v20 = v23 + 3;
          if (v23 + 3 >= v28) {
            return swift_release();
          }
          unint64_t v24 = *(void *)(v27 + 8 * v20);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v16 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v18 + 56) + *(void *)(v7 + 72) * v22, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    uint64_t v34 = *(void *)(v33 + 40);
    swift_bridgeObjectRetain();
    AsyncStream.Continuation.yield(_:)();
    (*v17)(v5, v32);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  int64_t v25 = v23 + 4;
  if (v25 >= v28) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    int64_t v20 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v20 >= v28) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v27 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100147E44(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) >= *(void *)(a1 + 16)) {
    uint64_t v4 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v4)
  {
    sub_10000F214(&qword_100521010);
    uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v7 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001460F0(a1, a2, 1, &v7);
  return v7;
}

id sub_100147F08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v7 = v6;
  id v16 = 0;
  id v8 = [v3 initWithBaseConfiguration:a1 fileURL:v6 outError:&v16];

  id v9 = v16;
  if (v8)
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    id v12 = v9;
    v11(a2, v10);
  }
  else
  {
    id v13 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
  }
  return v8;
}

uint64_t sub_10014805C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  double v7 = __chkstk_darwin(v6);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v10 + 16))(v9, a2, v7);
  objc_allocWithZone((Class)ARReplayConfiguration);
  id v11 = a1;
  id v12 = sub_100147F08((uint64_t)v11, (uint64_t)v9);

  id v13 = [v12 customSensors];
  if (!v13) {
    goto LABEL_17;
  }
  uint64_t v14 = v13;
  sub_10000F214(&qword_100520FC8);
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v31 = v12;
  uint64_t v32 = v3;
  if (!((unint64_t)v15 >> 62))
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    id v12 = v31;
    uint64_t v3 = v32;
LABEL_17:
    [v12 setDelegate:v3];
    [v12 play];
    uint64_t v27 = OBJC_IVAR____TtC6Tamale20ARCameraSourceReplay_arReplayConfiguration;
    int64_t v28 = *(void **)(v3 + OBJC_IVAR____TtC6Tamale20ARCameraSourceReplay_arReplayConfiguration);
    *(void *)(v3 + OBJC_IVAR____TtC6Tamale20ARCameraSourceReplay_arReplayConfiguration) = v12;

    return *(void *)(v3 + v27);
  }
  if (v15 < 0) {
    uint64_t v14 = (void *)v15;
  }
  else {
    uint64_t v14 = (void *)(v15 & 0xFFFFFFFFFFFFFF8);
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_16;
  }
LABEL_4:
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    long long v34 = xmmword_10043D4F0;
    uint64_t v33 = (char *)&type metadata for Any + 8;
    do
    {
      if ((v15 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_unknownObjectRetain();
      }
      self;
      uint64_t v18 = swift_dynamicCastObjCClass();
      if (v18)
      {
        double v19 = (void *)v18;
        sub_10000F214((uint64_t *)&unk_10051D350);
        uint64_t v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = v34;
        uint64_t v21 = type metadata accessor for CustomARRecordingStreamingMetadata();
        *(void *)(v20 + 56) = sub_10000F214(&qword_100521130);
        *(void *)(v20 + 32) = v21;
        id v22 = objc_allocWithZone((Class)NSSet);
        swift_unknownObjectRetain();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v24 = [v22 initWithArray:isa];

        sub_10000F734(0, (unint64_t *)&qword_100518A40);
        sub_1001077E0(&qword_100521138, (unint64_t *)&qword_100518A40);
        uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
        sub_100143E70(v25);
        swift_bridgeObjectRelease();
        Class v26 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v19 setCustomDataClasses:v26];

        swift_unknownObjectRelease();
      }
      ++v17;
      swift_unknownObjectRelease();
    }
    while (v16 != v17);
    goto LABEL_16;
  }
  __break(1u);

  swift_getErrorValue();
  Error.localizedDescription.getter();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_100148478(void *a1, id a2)
{
  id v3 = [a2 configuration];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 videoFormat];

    if (v5)
    {
      id v6 = [a1 inputs];
      sub_10000F734(0, &qword_100521108);
      unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v7 >> 62) {
        goto LABEL_23;
      }
      uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v8)
      {
        unint64_t v9 = v7 & 0xC000000000000001;
        uint64_t v10 = 4;
        int64_t v28 = v5;
        unint64_t v29 = v7;
        unint64_t v27 = v7 & 0xC000000000000001;
        while (1)
        {
          id v11 = v9 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v7 + 8 * v10);
          id v12 = v11;
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v10 - 4, 1)) {
            break;
          }
          self;
          uint64_t v14 = swift_dynamicCastObjCClass();
          if (v14)
          {
            uint64_t v15 = (void *)v14;
            id v12 = v12;
            id v16 = [v15 device];
            id v17 = [v16 position];
            if (v17 == [v5 captureDevicePosition])
            {
              id v18 = [v16 deviceType];
              id v19 = [v5 captureDeviceType];
              uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v22 = v21;
              if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
              {

                swift_bridgeObjectRelease_n();
LABEL_21:

                swift_bridgeObjectRelease();
                return v16;
              }
              char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v25) {
                goto LABEL_21;
              }
              id v12 = v16;
              id v5 = v28;
              unint64_t v7 = v29;
              unint64_t v9 = v27;
            }
            else
            {
            }
          }

          ++v10;
          if (v13 == v8) {
            goto LABEL_24;
          }
        }
        __break(1u);
LABEL_23:
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_24:

      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

void sub_10014874C(void *a1, char a2, double a3)
{
  if (!a1)
  {
    if (qword_100517EB8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000F378(v10, (uint64_t)qword_10055E340);
    Class v26 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v11, "Failed to get AVCaptureDevice for zoom", v12, 2u);
      swift_slowDealloc();
    }
    goto LABEL_21;
  }
  Class v26 = a1;
  [v26 maxAvailableVideoZoomFactor];
  if (v5 <= 1.0)
  {
    if (qword_100517EB8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000F378(v13, (uint64_t)qword_10055E340);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Zoom not supported", v16, 2u);
      swift_slowDealloc();
    }

LABEL_21:

    return;
  }
  double v27 = 0.0;
  if ([v26 lockForConfiguration:&v27])
  {
    id v6 = *(id *)&v27;
    [v26 minAvailableVideoZoomFactor];
    if (v7 > a3) {
      double v8 = v7;
    }
    else {
      double v8 = a3;
    }
    [v26 maxAvailableVideoZoomFactor];
    if (v9 < v8) {
      double v8 = v9;
    }
    if (v8 == a3)
    {
      if (a2)
      {
LABEL_11:
        *(float *)&double v9 = v8;
        [v26 rampToVideoZoomFactor:1 withTuning:v9];
LABEL_35:
        [v26 unlockForConfiguration];

        return;
      }
    }
    else
    {
      if (qword_100517EB8 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10000F378(v22, (uint64_t)qword_10055E340);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 134218240;
        double v27 = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 12) = 2048;
        double v27 = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Clamped desired zoom factor %f to allowed range: %f", (uint8_t *)v25, 0x16u);
        swift_slowDealloc();
      }

      if (a2) {
        goto LABEL_11;
      }
    }
    [v26 setVideoZoomFactor:v8];
    goto LABEL_35;
  }
  id v17 = *(id *)&v27;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_100517EB8 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10000F378(v18, (uint64_t)qword_10055E340);
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to lock device for zoom", v21, 2u);
    swift_slowDealloc();
  }

  swift_errorRelease();
}

uint64_t sub_100148C1C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 == a5 && a2 == a6 && !(a3 >> 16) && v7 == a4 >> 16) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t sub_100148C88(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x756363416C6C7566 && a2 == 0xEC00000079636172;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    sub_1000317A0();
    uint64_t v4 = (void *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
    swift_bridgeObjectRelease();
    if (v4[2] && (sub_100148C1C(0x5064656D75737361, 0xEC000000656E616CLL, v4[4], v4[5], v4[6], v4[7]) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t result = Double.init(_:)();
      if (v5) {
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100148E00(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v72 = a1;
  uint64_t v66 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v65 = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  id v63 = (char *)v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ARCamera.TrackingState();
  __chkstk_darwin(v7 - 8);
  double v9 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)v58 - v11;
  sub_10018B270((unint64_t)"Tamale.ARCameraSource.frameHandler", 34, 2u, 0, v78);
  swift_getKeyPath();
  uint64_t v13 = v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource___observationRegistrar;
  aBlock[0] = v2;
  v58[0] = sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  v58[1] = v13;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v59 = v2;
  uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceReplay);
  if (v14)
  {
    id v15 = v14;
    sub_1001442C4(v72);
  }
  uint64_t v16 = swift_allocObject();
  uint64_t v71 = v16;
  *(void *)(v16 + 16) = 0xD000000000000020;
  *(void *)(v16 + 24) = 0x8000000100428020;
  id v17 = [v72 camera];
  ARCamera.trackingState.getter();

  uint64_t v18 = type metadata accessor for ARCamera.TrackingState.Reason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v9, 2, 2, v18);
  LOBYTE(v17) = static ARCamera.TrackingState.== infix(_:_:)();
  sub_10014C574((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for ARCamera.TrackingState);
  sub_10014C574((uint64_t)v12, (uint64_t (*)(void))&type metadata accessor for ARCamera.TrackingState);
  if (v17)
  {
    swift_retain();
    id v19 = [v72 camera];
    [v19 transform];
    int8x16_t v74 = v20;
    int8x16_t v73 = v21;
    __n128 v70 = v22;
    __n128 v69 = v23;

    uint64_t v24 = sub_100172994(v74, v73, v70, v69);
    unint64_t v26 = v25;
    sub_10009489C(v24, v25);
    swift_release();
    uint64_t v27 = v71;
    uint64_t v28 = *(void *)(v71 + 16);
    unint64_t v29 = *(void *)(v71 + 24);
    *(void *)(v71 + 16) = v24;
    *(void *)(v27 + 24) = v26;
    sub_10014A76C(v28, v29);
  }
  swift_getKeyPath();
  uint64_t v30 = v59;
  aBlock[0] = v59;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v70.n128_u32[0] = *(unsigned __int8 *)(v30 + OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevelOverride);
  if (v70.n128_u32[0] == 4)
  {
    swift_getKeyPath();
    aBlock[0] = v30;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v70.n128_u32[0] = *(unsigned __int8 *)(v30 + OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevel);
  }
  id v31 = (uint64_t *)(v30 + OBJC_IVAR____TtC6Tamale14ARCameraSource_consumers);
  swift_beginAccess();
  v74.i64[0] = *v31;
  if ((unint64_t)v74.i64[0] >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v32 = result;
    if (!result) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v32 = *(void *)((v74.i64[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (!v32) {
      goto LABEL_22;
    }
  }
  if (v32 < 1)
  {
    __break(1u);
    return result;
  }
  v73.i64[0] = v74.i64[0] & 0xC000000000000001;
  swift_beginAccess();
  uint64_t v34 = 0;
  int v62 = v77;
  uint64_t v61 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v60 = (void (**)(char *, uint64_t))(v5 + 8);
  v69.n128_u64[0] = v32;
  do
  {
    if (v73.i64[0])
    {
      uint64_t v35 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v35 = *(void *)(v74.i64[0] + 8 * v34 + 32);
      swift_retain();
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v37 = Strong;
      uint64_t v39 = *(void *)(v35 + 24);
      uint64_t v38 = *(void **)(v35 + 32);
      if (v38)
      {
        uint64_t v40 = swift_allocObject();
        *(void *)(v40 + 16) = v37;
        *(void *)(v40 + 24) = v39;
        uint64_t v41 = v72;
        uint64_t v42 = v71;
        *(void *)(v40 + 32) = v72;
        *(void *)(v40 + 40) = v42;
        *(unsigned char *)(v40 + 48) = v70.n128_u8[0];
        v77[2] = sub_10014AA50;
        v77[3] = v40;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        v77[0] = sub_1002EDB98;
        v77[1] = &unk_1004ECA78;
        BOOL v43 = _Block_copy(aBlock);
        id v44 = v38;
        swift_unknownObjectRetain();
        id v45 = v41;
        swift_retain();
        unint64_t v46 = v63;
        static DispatchQoS.unspecified.getter();
        uint64_t v75 = _swiftEmptyArrayStorage;
        sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000F214(&qword_10051A960);
        sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
        uint64_t v47 = v65;
        uint64_t v48 = v66;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v43);
        swift_unknownObjectRelease();

        (*v61)(v47, v48);
        (*v60)(v46, v64);
        swift_release();
      }
      else
      {
        uint64_t ObjectType = swift_getObjectType();
        aBlock[0] = v72;
        uint64_t v50 = *(void *)(v71 + 16);
        unint64_t v49 = *(void *)(v71 + 24);
        uint64_t v67 = *(void (**)(void *, uint64_t, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 8);
        sub_10009489C(v50, v49);
        uint64_t v51 = sub_10000F734(0, &qword_1005205C8);
        uint64_t v52 = sub_1001077E0(&qword_1005205C0, &qword_1005205C8);
        v67(aBlock, v50, v49, v70.n128_u32[0], v51, v52, ObjectType, v39);
        swift_unknownObjectRelease();
        sub_10014A76C(v50, v49);
      }
      swift_release();
      uint64_t v32 = v69.n128_u64[0];
    }
    else
    {
      swift_release();
    }
    ++v34;
  }
  while (v32 != v34);
LABEL_22:
  swift_bridgeObjectRelease_n();
  uint64_t v53 = v59;
  id v54 = [self valueWithCGRect:*(double *)(v59 + OBJC_IVAR____TtC6Tamale14ARCameraSource_safeArea), *(double *)(v59 + OBJC_IVAR____TtC6Tamale14ARCameraSource_safeArea + 8), *(double *)(v59 + OBJC_IVAR____TtC6Tamale14ARCameraSource_safeArea + 16), *(double *)(v59 + OBJC_IVAR____TtC6Tamale14ARCameraSource_safeArea + 24)];
  sub_10014A934(v54, v72);

  swift_getKeyPath();
  aBlock[0] = v53;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v53 + OBJC_IVAR____TtC6Tamale14ARCameraSource__runState + 16) == 1)
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    uint64_t v56 = v72;
    v58[-2] = v53;
    v58[-1] = v56;
    aBlock[0] = v53;
    id v57 = v56;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();

    uint64_t v53 = v59;
  }
  if (*(void *)(v53 + OBJC_IVAR____TtC6Tamale14ARCameraSource_trackManagerSupporting))
  {
    swift_retain();
    sub_100140550(v72);
    swift_release();
  }
  sub_10000F3B0(v78, v78[3]);
  sub_10018BBE8();
  swift_release();
  return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v78);
}

uint64_t sub_1001498EC(uint64_t result)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_arConfiguration);
  if (!v2) {
    goto LABEL_19;
  }
  uint64_t v3 = v1;
  id v4 = v2;
  id v5 = sub_10014A8E8(v4);
  if (v5)
  {
    uint64_t v6 = v5;
    self;
    uint64_t v7 = (void *)swift_dynamicCastObjCClass();
    if (v7) {
      uint64_t v8 = (uint64_t)[v7 integerValue];
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t result = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  sub_10014A934(isa, v4);

  if (v8 > 2)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134218242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      sub_1003806B0(v17, v18, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Retried current configuration %ld. Error state for %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    v22[0] = 0;
    v22[1] = 0xE000000000000000;
    sub_10000F214(&qword_10051F3B0);
    _print_unlocked<A, B>(_:_:)();
    v19._uint64_t countAndFlagsBits = 32;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_getErrorValue();
    v20._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v22[0] = v3;
    sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v12 = 134217984;
      v22[0] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Retrying because current configuration has errored and retried %ld times", v12, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v13 = swift_getKeyPath();
    __chkstk_darwin(v13);
    v22[0] = v3;
    sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return sub_10013554C();
  }
}

id sub_100149DF8(void *a1)
{
  swift_getObjectType();
  id result = [a1 state];
  if (result == (id)3)
  {
    int v4 = 2;
  }
  else
  {
    if (qword_100517EF0 != -1) {
      id result = (id)swift_once();
    }
    __chkstk_darwin(result);
    sub_10000F214(&qword_100520FF8);
    id result = (id)OS_dispatch_queue.sync<A>(execute:)();
    int v4 = v6 & 1;
  }
  if (v4 != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_localizationState))
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale14ARCameraSource_localizationState) = v4;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    return (id)swift_release();
  }
  return result;
}

uint64_t sub_100149FE4()
{
  uint64_t ObjectType = swift_getObjectType();
  if (qword_100517EF0 != -1) {
    uint64_t ObjectType = swift_once();
  }
  __chkstk_darwin(ObjectType);
  sub_10000F214(&qword_100520FF8);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  sub_10014572C(&qword_100520F88, (void (*)(uint64_t))type metadata accessor for ARCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

char *sub_10014A204()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - v12;
  id result = (char *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v15 = *(void *)&result[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
    id v27 = result;
    uint64_t v28 = v15;
    static DispatchTime.now()();
    unint64_t v26 = v13;
    + infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v25 = v8 + 8;
    unint64_t v29 = v16;
    v16(v10, v7);
    uint64_t v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_10014A634;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1002EDB98;
    aBlock[3] = &unk_1004EC8C0;
    unint64_t v18 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    id v31 = _swiftEmptyArrayStorage;
    sub_10014572C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v19 = v0;
    uint64_t v20 = v30;
    uint64_t v24 = v3;
    sub_10000F214(&qword_10051A960);
    uint64_t v23 = v7;
    sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    int8x16_t v21 = v26;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v2, v19);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v24);
    v29(v21, v23);

    swift_release();
    return (char *)swift_release();
  }
  return result;
}

uint64_t sub_10014A5FC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_10014A634()
{
}

uint64_t sub_10014A640(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_10013614C(a1, v4, v5, v6);
}

void sub_10014A6F8()
{
  sub_100136630(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10014A708()
{
  swift_unknownObjectRelease();

  if (*(void *)(v0 + 48) >= 5uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_10014A758()
{
  return sub_100136D9C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56));
}

uint64_t sub_10014A76C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10014A780()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevel) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10014A798()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10014A7D0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 56);
  if (v1 >> 60 != 15) {
    sub_100038B34(*(void *)(v0 + 48), v1);
  }

  return swift_deallocObject();
}

void sub_10014A830()
{
  sub_1001437B4(*(void *)(v0 + 16), (_OWORD *)(v0 + 24));
}

uint64_t sub_10014A83C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000A7588(v2, v3);
  return a1;
}

uint64_t sub_10014A88C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100094760(v2, v3);
  return a1;
}

void sub_10014A8D8(unsigned char *a1@<X8>)
{
  *a1 = byte_1005205B0;
}

id sub_10014A8E8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_getAssociatedObject(v1, v1);

  return v2;
}

void sub_10014A934(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  objc_setAssociatedObject(v4, v4, v3, (void *)1);
}

id sub_10014A994@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10012E8E8(a1, &OBJC_IVAR____TtC6Tamale14ARCameraSource__arCameraSourceReplay, a2);
}

uint64_t sub_10014A9C0()
{
  if (*(void *)(v0 + 24) >= 5uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_10014AA08()
{
  swift_unknownObjectRelease();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10014AA50()
{
  return sub_100142DAC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

void sub_10014AA60()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureLevelOverride) = *(unsigned char *)(v0 + 24);
}

void sub_10014AA78()
{
}

uint64_t sub_10014AA98@<X0>(void *a1@<X8>)
{
  return sub_1001423C4(v1, a1);
}

uint64_t sub_10014AAB4()
{
  return swift_release();
}

uint64_t sub_10014AABC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10014AAFC()
{
  return sub_10013FB74(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

double sub_10014AB04(int8x16_t a1, int8x16_t a2, __n128 a3)
{
  float v3 = a3.n128_f32[2] + (float)(*(float *)a1.i32 + *(float *)&a2.i32[1]);
  if (v3 >= 0.0)
  {
    float v12 = sqrtf(v3 + 1.0);
    float32x2_t v13 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12));
    float32x2_t v14 = vmul_f32(v13, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12), v13));
    float32x2_t v24 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), (int32x2_t)a3.n128_u64[0]), (float32x2_t)vext_s8((int8x8_t)a3.n128_u64[0], (int8x8_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), 4uLL)), vmul_f32(v14, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12), v14)).f32[0]);
  }
  else if (*(float *)a1.i32 < *(float *)&a2.i32[1] || *(float *)a1.i32 < a3.n128_f32[2])
  {
    float v5 = 1.0 - *(float *)a1.i32;
    if (*(float *)&a2.i32[1] >= a3.n128_f32[2])
    {
      float v25 = sqrtf(*(float *)&a2.i32[1] + (float)(v5 - a3.n128_f32[2]));
      *(float *)&unsigned int v26 = v25 + v25;
      float32x2_t v27 = vrecpe_f32((float32x2_t)v26);
      float32x2_t v28 = vmul_f32(v27, vrecps_f32((float32x2_t)v26, v27));
      v29.i32[0] = vmul_f32(v28, vrecps_f32((float32x2_t)v26, v28)).u32[0];
      v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.i8, 1), *(float32x2_t *)a2.i8).u32[0];
      v28.i32[1] = v26;
      v29.i32[1] = 0.25;
      float32x2_t v24 = vmul_f32(v28, v29);
    }
    else
    {
      float32x2_t v6 = (float32x2_t)__PAIR64__(a1.u32[1], COERCE_UNSIGNED_INT(sqrtf(a3.n128_f32[2] + (float)(v5 - *(float *)&a2.i32[1]))));
      float32x2_t v7 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL)), (float32x2_t)a3.n128_u64[0]);
      float32x2_t v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.i8, 0);
      v8.i32[0] = 2.0;
      v8.i32[0] = vmul_f32(v6, v8).u32[0];
      float32x2_t v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
      float32x2_t v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
      float32x2_t v24 = vmul_n_f32(v7, vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    float32x2_t v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.i8, 0);
    float32x2_t v16 = vadd_f32(*(float32x2_t *)a1.i8, v15);
    v15.i32[0] = 2.0;
    v15.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)a1.i32 + (float)((float)(1.0 - *(float *)&a2.i32[1])- a3.n128_f32[2])))), v15).u32[0];
    v15.i32[1] = v16.i32[1];
    float32x2_t v17 = vrecpe_f32((float32x2_t)v15.u32[0]);
    float32x2_t v18 = vmul_f32(v17, vrecps_f32((float32x2_t)v15.u32[0], v17));
    unsigned __int32 v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v15.u32[0], v18)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v19;
    float32x2_t v24 = vmul_f32(v15, _D5);
  }
  return *(double *)&v24;
}

uint64_t sub_10014ACE8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10014AD30()
{
  return sub_10013C9A0(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

BOOL sub_10014AD44(uint64_t *a1)
{
  return sub_10013BB18(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_10014AD68(void *a1, uint64_t a2)
{
  sub_10013B48C(a1, a2, v2);
}

uint64_t sub_10014AD70()
{
  uint64_t v1 = sub_10000F214((uint64_t *)&unk_100521050);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10014AE40()
{
  uint64_t v1 = *(void *)(sub_10000F214((uint64_t *)&unk_100521050) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10013A768(v2, v3);
}

uint64_t sub_10014AEAC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10013AB24(a1, v4, v5);
}

uint64_t sub_10014AF24()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10014AFF0()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10013AF30(v2, v3);
}

uint64_t sub_10014B054()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10014B08C()
{
  sub_100139834(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_10014B0A0()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale14ARCameraSource__cameraControlsDisabled) = *(unsigned char *)(v0 + 24);
}

id sub_10014B0B8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10012E8E8(a1, &OBJC_IVAR____TtC6Tamale14ARCameraSource__systemZoomSlider, a2);
}

void sub_10014B0E4()
{
}

void sub_10014B10C()
{
}

double sub_10014B124@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return sub_10012DAD4(a1, &OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureInitialZoomFactor, a2);
}

double sub_10014B150@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return sub_10012DAD4(a1, &OBJC_IVAR____TtC6Tamale14ARCameraSource__targetZoomFactor, a2);
}

double sub_10014B17C()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureInitialZoomFactor) = result;
  return result;
}

double sub_10014B194()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale14ARCameraSource__targetZoomFactor) = result;
  return result;
}

void sub_10014B1AC()
{
  char v1 = *(unsigned char *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomGestureState;
  *(void *)uint64_t v2 = *(void *)(v0 + 24);
  *(unsigned char *)(v2 + 8) = v1;
}

uint64_t sub_10014B1CC()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10014B204()
{
  sub_100138F90(*(double *)(v0 + 24), *(void *)(v0 + 16), *(unsigned char *)(v0 + 32));
}

id sub_10014B214@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10012E8E8(a1, &OBJC_IVAR____TtC6Tamale14ARCameraSource__zoomCaptureDevice, a2);
}

void sub_10014B240()
{
}

void sub_10014B260(double a1)
{
}

uint64_t sub_10014B268()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10014B2A0()
{
  char v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *char v1 = v0;
  v1[1] = sub_10000FC9C;
  return sub_100143D2C();
}

uint64_t sub_10014B34C()
{
  return swift_deallocObject();
}

Swift::Int sub_10014B384(uint64_t a1)
{
  return sub_100143250(a1);
}

uint64_t sub_10014B38C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10012E5D8(a1, &OBJC_IVAR____TtC6Tamale14ARCameraSource__detectionLog, a2);
}

uint64_t sub_10014B3B8()
{
  return sub_10013725C(0);
}

uint64_t sub_10014B3E0()
{
  return swift_deallocObject();
}

uint64_t sub_10014B3F0()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10014B438()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10000FC9C;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100137194, v3, 0);
}

uint64_t sub_10014B4E4()
{
  return sub_10014C380(&OBJC_IVAR____TtC6Tamale14ARCameraSource__detectionLog);
}

uint64_t sub_10014B504()
{
  return sub_100135FA0(*(void *)(v0 + 16));
}

uint64_t sub_10014B50C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result & 1;
  }
  return result;
}

uint64_t sub_10014B548()
{
  return sub_10013554C();
}

uint64_t sub_10014B56C()
{
  return swift_deallocObject();
}

void sub_10014B57C(_UNKNOWN **a1)
{
}

uint64_t sub_10014B584()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000FC9C;
  return sub_100143BE4();
}

uint64_t sub_10014B638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051E070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014B6A0()
{
  return sub_10012CDCC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10014B6C0()
{
  sub_100134D10(*(void *)(v0 + 16), *(void **)(v0 + 24), &OBJC_IVAR____TtC6Tamale14ARCameraSource_metadataOutput);
}

uint64_t sub_10014B6E4()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10014B71C()
{
  sub_100133E54(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

const char *sub_10014B724()
{
  return "systemPressureState";
}

id sub_10014B730@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 systemPressureState];
  *a2 = result;
  return result;
}

void sub_10014B76C()
{
}

id sub_10014B774@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10012E8E8(a1, &OBJC_IVAR____TtC6Tamale14ARCameraSource__systemPressureObservation, a2);
}

void sub_10014B7A0()
{
}

void sub_10014B7C4()
{
  sub_100134D10(*(void *)(v0 + 16), *(void **)(v0 + 24), &OBJC_IVAR____TtC6Tamale14ARCameraSource_photoOutput);
}

uint64_t sub_10014B7EC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10014B82C()
{
  return sub_100133A70();
}

uint64_t sub_10014B834()
{
  uint64_t v1 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v3 = v0 + v2;
  unint64_t v4 = v0 + v2 + v1[10];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  float32x2_t v7 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  unint64_t v8 = v3 + v1[18];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  unint64_t v9 = v3 + v1[22];
  if (!v7(v9, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v9, v5);
  }

  return swift_deallocObject();
}

uint64_t sub_10014BA14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10014BA7C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CameraControllerConfiguration(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000FC9C;
  return sub_100130560(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10014BBA8()
{
  uint64_t v1 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  uint64_t v3 = v0 + v2;
  unint64_t v4 = v0 + v2 + v1[10];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  unint64_t v8 = v3 + v1[18];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  unint64_t v9 = v3 + v1[22];
  if (!v7(v9, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v9, v5);
  }

  return swift_deallocObject();
}

void sub_10014BD80()
{
  uint64_t v1 = *(void *)(type metadata accessor for CameraControllerConfiguration(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100131B54(v3, v0 + v2, v4);
}

uint64_t sub_10014BE10()
{
  uint64_t v1 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);

  uint64_t v3 = v0 + v2;
  unint64_t v4 = v0 + v2 + v1[10];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  unint64_t v8 = v3 + v1[18];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  unint64_t v9 = v3 + v1[22];
  if (!v7(v9, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v9, v5);
  }

  return swift_deallocObject();
}

uint64_t sub_10014BFE8(int a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CameraControllerConfiguration(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100131280(a1, a2, v7, v2 + v6, v8);
}

uint64_t sub_10014C098()
{
  uint64_t v1 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  uint64_t v3 = v0 + v2;
  unint64_t v4 = v0 + v2 + v1[10];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  unint64_t v8 = v3 + v1[18];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  unint64_t v9 = v3 + v1[22];
  if (!v7(v9, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  swift_errorRelease();

  return swift_deallocObject();
}

void sub_10014C288()
{
  uint64_t v1 = *(void *)(type metadata accessor for CameraControllerConfiguration(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v4 = *(unsigned char *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_100131664(v4, v5, v0 + v2, v6, v7);
}

uint64_t sub_10014C328()
{
  return swift_deallocObject();
}

void sub_10014C338()
{
  byte_1005205B0 = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10014C348()
{
  return swift_deallocObject();
}

uint64_t sub_10014C358()
{
  return swift_deallocObject();
}

uint64_t sub_10014C368()
{
  return swift_deallocObject();
}

uint64_t sub_10014C378()
{
  return sub_10012F428();
}

uint64_t sub_10014C380(void *a1)
{
  *(void *)(*(void *)(v1 + 16) + *a1) = *(void *)(v1 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_10014C3C8()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10014C408(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_10013008C(a1, v4, v5, v6);
}

uint64_t sub_10014C4C0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_100137CC4(a1, v4, v5, v6);
}

uint64_t sub_10014C574(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10014C5D8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000F878;
  return sub_10012D24C(a1);
}

uint64_t sub_10014C684(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_10014C770(unsigned char *a1@<X8>)
{
}

uint64_t sub_10014C788()
{
  return sub_100145848();
}

uint64_t sub_10014C80C()
{
  return sub_10014B6A0();
}

double sub_10014C824()
{
  return sub_10014B17C();
}

double sub_10014C83C()
{
  return sub_10014B194();
}

void sub_10014C854()
{
}

void sub_10014C86C()
{
}

void sub_10014C884()
{
}

unint64_t sub_10014C89C(char a1)
{
  unint64_t result = 0x6C5F6C6175736976;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x72635F746E657665;
      break;
    case 2:
      unint64_t result = 0x696F705F7370616DLL;
      break;
    case 3:
      unint64_t result = 0x6F6C615F64616572;
      break;
    case 4:
      unint64_t result = 0x74616C736E617274;
      break;
    case 5:
      unint64_t result = 0x7A6972616D6D7573;
      break;
    case 6:
      unint64_t result = 0x7465645F61746164;
      break;
    case 7:
      unint64_t result = 0x746168635F6B7361;
      break;
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

id sub_10014C9F0()
{
  swift_getKeyPath();
  sub_10014F024();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 16);

  return v1;
}

id sub_10014CA70@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10014F024();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 16);
  *a2 = v4;

  return v4;
}

uint64_t sub_10014CAF8(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_10014F024();
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

uint64_t sub_10014CBA4()
{
  return swift_weakLoadStrong();
}

uint64_t sub_10014CC18@<X0>(uint64_t *a1@<X8>)
{
  swift_getKeyPath();
  sub_10014F024();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_10014CC94()
{
  return swift_release();
}

uint64_t sub_10014CD44()
{
  return swift_weakAssign();
}

uint64_t sub_10014CD60(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_10000F214(&qword_10051A308);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ResultLookupState();
  v2[5] = v3;
  void v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[9] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  void v2[10] = v5;
  v2[11] = v4;
  return _swift_task_switch(sub_10014CE94, v5, v4);
}

uint64_t sub_10014CE94()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[4];
  sub_10000FB74(v0[2], v3, &qword_10051A308);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000FBD8(v0[4], &qword_10051A308);
    char v4 = 9;
  }
  else
  {
    uint64_t v5 = v0[7];
    uint64_t v6 = v0[8];
    sub_10014F11C(v0[4], v6);
    sub_10014F11C(v6, v5);
    char v4 = 7;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_10014F180(v0[7]);
        char v4 = 0;
        break;
      case 3u:
        sub_10014F180(v0[7]);
        char v4 = 2;
        break;
      case 5u:
        sub_10014F180(v0[7]);
        char v4 = 6;
        break;
      case 6u:
        sub_10014F180(v0[7]);
        char v4 = 5;
        break;
      case 7u:
        sub_10014F180(v0[7]);
        char v4 = 3;
        break;
      case 8u:
        sub_10014F180(v0[7]);
        char v4 = 1;
        break;
      case 9u:
        sub_10014F180(v0[7]);
        char v4 = 8;
        break;
      case 0xAu:
        break;
      default:
        sub_10014F180(v0[7]);
        char v4 = 9;
        break;
    }
  }
  uint64_t v7 = (void *)swift_task_alloc();
  v0[12] = (uint64_t)v7;
  void *v7 = v0;
  v7[1] = sub_10014D080;
  return sub_10014D228(v4);
}

uint64_t sub_10014D080()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 80);
  return _swift_task_switch(sub_10014D1A0, v3, v2);
}

uint64_t sub_10014D1A0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014D228(char a1)
{
  *(void *)(v2 + 32) = v1;
  *(unsigned char *)(v2 + 232) = a1;
  *(void *)(v2 + 40) = *v1;
  uint64_t v3 = type metadata accessor for FBKSEvaluation.Subject();
  *(void *)(v2 + 48) = v3;
  *(void *)(v2 + 56) = *(void *)(v3 - 8);
  *(void *)(v2 + 64) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FBKSInteraction.FeatureDomain();
  *(void *)(v2 + 72) = v4;
  *(void *)(v2 + 80) = *(void *)(v4 - 8);
  *(void *)(v2 + 88) = swift_task_alloc();
  sub_10000F214(&qword_100521390);
  *(void *)(v2 + 96) = swift_task_alloc();
  *(void *)(v2 + 104) = swift_task_alloc();
  *(void *)(v2 + 112) = swift_task_alloc();
  *(void *)(v2 + 120) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FBKSInteraction.AnnotatedContent();
  *(void *)(v2 + 128) = v5;
  *(void *)(v2 + 136) = *(void *)(v5 - 8);
  *(void *)(v2 + 144) = swift_task_alloc();
  *(void *)(v2 + 152) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v2 + 160) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v2 + 168) = v7;
  *(void *)(v2 + 176) = v6;
  return _swift_task_switch(sub_10014D468, v7, v6);
}

uint64_t sub_10014D468()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[15];
  sub_10014E0DC(v3);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[23] = v4;
  v0[24] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v1) == 1)
  {
    uint64_t v5 = v0[15];
    swift_release();
    sub_10000FBD8(v5, &qword_100521390);
    if (qword_100517E48 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000F378(v6, (uint64_t)qword_10055E1F0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to capture the root view to report a concern.", v9, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[16];
    uint64_t v14 = v0[17];
    uint64_t v15 = v0[15];
    float32x2_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
    v0[25] = v16;
    v0[26] = (v14 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v16(v12, v15, v13);
    float32x2_t v17 = (void *)swift_task_alloc();
    v0[27] = v17;
    void *v17 = v0;
    v17[1] = sub_10014D6F4;
    v17[13] = v0[4];
    return _swift_task_switch(sub_10014E968, 0, 0);
  }
}

uint64_t sub_10014D6F4(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  uint64_t v4 = *(void *)(v2 + 168);
  return _swift_task_switch(sub_10014D81C, v4, v3);
}

uint64_t sub_10014D81C()
{
  uint64_t v60 = v0;
  uint64_t v1 = *(void *)(v0 + 224);
  swift_release();
  if (!v1)
  {
    if (qword_100517E48 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000F378(v13, (uint64_t)qword_10055E1F0);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      float32x2_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float32x2_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to get a camera frame for reporting a concern.", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 152);
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 136);

    goto LABEL_13;
  }
  uint64_t v2 = *(void **)(v0 + 224);
  uint64_t v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 112);
  sub_10014E5C4(v5);
  if (v3(v5, 1, v4) == 1)
  {
    sub_10000FBD8(*(void *)(v0 + 112), &qword_100521390);
    if (qword_100517E48 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000F378(v6, (uint64_t)qword_10055E1F0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to get a camera frame annotated for reporting a concern.", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 152);
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 136);

LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    goto LABEL_31;
  }
  double v58 = v2;
  uint64_t v18 = *(void *)(v0 + 144);
  uint64_t v17 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 128);
  uint64_t v19 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 104);
  uint64_t v23 = *(void *)(v0 + 88);
  uint64_t v22 = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 72);
  uint64_t v25 = *(void *)(v0 + 80);
  uint64_t v56 = *(unsigned __int8 *)(v0 + 232);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 200))(v18, *(void *)(v0 + 112), v20);
  (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))(v23, enum case for FBKSInteraction.FeatureDomain.visualIntelligence(_:), v24);
  unsigned int v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v26(v21, v18, v20);
  float32x2_t v27 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56);
  v27(v21, 0, 1, v20);
  v26(v22, v17, v20);
  v27(v22, 0, 1, v20);
  id v28 = objc_allocWithZone((Class)type metadata accessor for FBKSInteraction());
  unint64_t v29 = 0xEE0070755F6B6F6FLL;
  uint64_t v30 = 0x6C5F6C6175736976;
  id v31 = (void *)FBKSInteraction.init(featureDomain:bundleID:prefillQuestions:originalAnnotatedContent:generatedAnnotatedContent:extraContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:)();
  switch(v56)
  {
    case 1:
      unint64_t v29 = 0xEE006E6F69746165;
      uint64_t v30 = 0x72635F746E657665;
      goto LABEL_24;
    case 2:
      unint64_t v29 = 0xE800000000000000;
      uint64_t v30 = 0x696F705F7370616DLL;
      goto LABEL_24;
    case 3:
      unint64_t v29 = 0xEA00000000006475;
      uint64_t v30 = 0x6F6C615F64616572;
      goto LABEL_24;
    case 4:
      uint64_t v30 = 0x74616C736E617274;
      goto LABEL_20;
    case 5:
      uint64_t v30 = 0x7A6972616D6D7573;
LABEL_20:
      unint64_t v29 = 0xE900000000000065;
      goto LABEL_24;
    case 6:
      unint64_t v29 = 0xED0000726F746365;
      uint64_t v30 = 0x7465645F61746164;
      goto LABEL_24;
    case 7:
      unint64_t v29 = 0xEB00000000747067;
      uint64_t v30 = 0x746168635F6B7361;
      goto LABEL_24;
    case 8:
      unint64_t v29 = 0x8000000100428490;
      uint64_t v30 = 0xD000000000000013;
      goto LABEL_24;
    case 9:
      goto LABEL_30;
    default:
LABEL_24:
      if (qword_100517E48 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10000F378(v32, (uint64_t)qword_10055E1F0);
      swift_bridgeObjectRetain_n();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 24) = sub_1003806B0(v30, v29, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "subFeatureString: %s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10000F214(&qword_100521398);
      uint64_t v36 = (int *)(sub_10000F214(&qword_1005213A0) - 8);
      unint64_t v37 = (*(unsigned __int8 *)(*(void *)v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v36 + 80);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_10043D4F0;
      unint64_t v39 = v38 + v37;
      uint64_t v40 = v36[14];
      strcpy((char *)v39, ":sub_feature");
      *(unsigned char *)(v39 + 13) = 0;
      *(_WORD *)(v39 + 14) = -5120;
      uint64_t v41 = enum case for FBKSForm.Question.custom(_:);
      uint64_t v42 = type metadata accessor for FBKSForm.Question();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104))(v39, v41, v42);
      sub_10000F214(&qword_10051F3E0);
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_10043D4F0;
      *(void *)(v43 + 32) = v30;
      *(void *)(v43 + 40) = v29;
      *(void *)(v39 + v40) = v43;
      sub_10031BF9C(v38);
      dispatch thunk of FBKSInteraction.prefillQuestions.setter();
LABEL_30:
      uint64_t v44 = *(void *)(v0 + 136);
      uint64_t v55 = *(void *)(v0 + 144);
      uint64_t v57 = *(void *)(v0 + 152);
      uint64_t v54 = *(void *)(v0 + 128);
      uint64_t v45 = *(void *)(v0 + 56);
      unint64_t v46 = *(void **)(v0 + 64);
      uint64_t v47 = *(void *)(v0 + 48);
      uint64_t v48 = *(void *)(v0 + 32);
      *unint64_t v46 = v31;
      (*(void (**)(void *, void, uint64_t))(v45 + 104))(v46, enum case for FBKSEvaluation.Subject.interaction(_:), v47);
      swift_getKeyPath();
      *(void *)(v0 + 16) = v48;
      sub_10014F024();
      id v49 = v31;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id v50 = *(id *)(v48 + 16);
      dispatch thunk of FBKEvaluationController.userDidReportAConcern(subject:showFeedbackForm:)();

      (*(void (**)(void *, uint64_t))(v45 + 8))(v46, v47);
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v51(v55, v54);
      v51(v57, v54);
      break;
  }
LABEL_31:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v52 = *(uint64_t (**)(void))(v0 + 8);
  return v52();
}